void JSC::DFG::SpeculativeJIT::compileDefineDataProperty(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::DFG::Node *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  JSC::DFG::Node *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  JSC::DFG::Node *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  JSC::DFG::Node *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  unint64_t v169;
  unsigned __int8 v170;
  JSC::DFG::SpeculativeJIT *v171[2];
  unsigned __int8 v172;
  _BYTE v173[7];
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int8 v179;

  v8 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v8 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF7A0);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v177, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3)), a4, a5, a6, a7, a8);
  v17 = v179;
  if (v179 == 255)
  {
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v177, v178, v11, v12, v13, v14, v15, v16);
    v179 = v17;
  }
  v18 = *((_QWORD *)this + 495);
  v19 = *((_DWORD *)a2 + 6) + 2;
  if (*(_DWORD *)(v18 + 164) <= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF7A8);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v174, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v18 + 152) + 8 * v19), 0, v13, v14, v15, v16);
  v26 = v176;
  if (v176 == 255)
  {
    v26 = JSC::DFG::SpeculativeJIT::fillJSValue(v174, v175, v20, v21, v22, v23, v24, v25);
    v176 = v26;
  }
  v27 = *((_QWORD *)this + 495);
  v28 = *((_DWORD *)a2 + 6) + 3;
  if (*(_DWORD *)(v27 + 164) <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF7B0);
  }
  JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)v171, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v27 + 152) + 8 * v28), 0, v22, v23, v24, v25);
  v34 = v172;
  if (v172 == 255)
  {
    v34 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v171[0], (unint64_t)v171[1], (uint64_t)v173, v29, v30, v31, v32, v33);
    v172 = v34;
  }
  v35 = *((_QWORD *)this + 495);
  v36 = (*((_DWORD *)a2 + 6) + 1);
  if (*(_DWORD *)(v35 + 164) <= v36)
    goto LABEL_50;
  v37 = *(_QWORD *)(v35 + 152);
  v38 = *(_QWORD *)(v37 + 8 * v36);
  v39 = (v38 >> 50) & 0x3F;
  if ((_DWORD)v39 == 20)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v168, (uint64_t)this, v38, v29, v30, v31, v32, v33);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v166, this, v40, v41, v42, v43, v44, v45);
    v52 = v170;
    if (v170 == 255)
    {
      v52 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v168, v169, v46, v47, v48, v49, v50, v51);
      v170 = v52;
    }
    v53 = v167;
    v54 = (char)v52;
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v37 + 8 * v36), v54, v47, v48, v49, v50, v51);
    JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)this, *(_QWORD *)(v37 + 8 * v36), v54, v53, v55, v56, v57, v58);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v59, v60, v61, v62, v63, v64);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v65, v66, v67, v68, v69, v70, v71);
    v78 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v72, v73, v74, v75, v76, v77);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,WTF::UniquedStringImpl *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(&v165, (unsigned __int8 *)this, v78, v79, (char)v17, v53, v26, (char)v34);
    if (v166)
    {
      v80 = v167;
      if (v167 != -1)
      {
        if (v167 > 15)
          v80 = -1;
        --*(_DWORD *)(v166 + 12 * v80 + 4784);
      }
    }
    goto LABEL_19;
  }
  if ((_DWORD)v39)
  {
    if ((_DWORD)v39 != 25)
    {
      if ((_DWORD)v39 == 21)
      {
        JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v168, (uint64_t)this, v38, v29, v30, v31, v32, v33);
        v91 = v170;
        if (v170 == 255)
        {
          v91 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v168, v169, v85, v86, v87, v88, v89, v90);
          v170 = v91;
        }
        v92 = (char)v91;
        JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v37 + 8 * v36), v92, v86, v87, v88, v89, v90);
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v93, v94, v95, v96, v97, v98);
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v99, v100, v101, v102, v103, v104, v105);
        v112 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v106, v107, v108, v109, v110, v111);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSString *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((int *)&v166, (unsigned __int8 *)this, v112, v113, (char)v17, v92, v26, (char)v34);
        goto LABEL_19;
      }
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x197BFF798);
    }
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v168, (uint64_t)this, v38, v29, v30, v31, v32, v33);
    v142 = v170;
    if (v170 == 255)
    {
      v142 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v168, v169, v136, v137, v138, v139, v140, v141);
      v170 = v142;
    }
    v143 = (char)v142;
    JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *(_QWORD *)(v37 + 8 * v36), v143, v137, v138, v139, v140, v141);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v144, v145, v146, v147, v148, v149);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v150, v151, v152, v153, v154, v155, v156);
    v163 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v157, v158, v159, v160, v161, v162);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Symbol *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((int *)&v166, (unsigned __int8 *)this, v163, v164, (char)v17, v143, v26, (char)v34);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v168, (uint64_t)this, v38, 0, v30, v31, v32, v33);
    v120 = v170;
    if (v170 == 255)
    {
      v120 = JSC::DFG::SpeculativeJIT::fillJSValue(v168, v169, v114, v115, v116, v117, v118, v119);
      v170 = v120;
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v114, v115, v116, v117, v118, v119);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v121, v122, v123, v124, v125, v126, v127);
    v134 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v128, v129, v130, v131, v132, v133);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((int *)&v166, (unsigned __int8 *)this, v134, v135, (char)v17, v120, v26, (char)v34);
  }
LABEL_19:
  if ((v169 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v81 = (char)v170;
    if ((char)v170 > 15)
      v81 = -1;
    --*(_DWORD *)(v168 + 12 * v81 + 4784);
  }
  v82 = (char)v172;
  if ((char)v172 > 15)
    v82 = -1;
  --*((_DWORD *)v171[0] + 3 * v82 + 1196);
  if ((v175 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v83 = (char)v176;
    if ((char)v176 > 15)
      v83 = -1;
    --*(_DWORD *)(v174 + 12 * v83 + 4784);
  }
  if ((v178 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v84 = (char)v179;
    if ((char)v179 > 15)
      v84 = -1;
    --*(_DWORD *)(v177 + 12 * v84 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSString *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int64_t v59;
  unsigned __int8 *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (uint64_t)a2;
  v62 = 0;
  if ((_DWORD)a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v64 = a5 | 0x100;
    v12 = 1;
    v62 = 1;
  }
  if ((_DWORD)a6 != 2)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a6 | 0x200;
    v62 = v12;
  }
  if (a7 != 3)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a7 | 0x300;
    v62 = v12;
  }
  if ((_DWORD)a8 == 4)
  {
    if (!v12)
      goto LABEL_64;
  }
  else
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a8 | 0x400;
    v62 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v65[v14 - 1] & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v15 |= 1 << v65[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v65[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_67;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v65[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_60;
      }
      v26 = v65[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_54;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_55;
          }
LABEL_54:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_55:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v62;
      }
      memmove(&v65[v22 - 2], &v65[v22], 2 * v16 - v22 - 2);
      v12 = v62 - 1;
      goto LABEL_59;
    }
    v61 = v13;
    v32 = HIBYTE(v64);
    v33 = v64;
    JSC::MacroAssemblerARM64::swap(v10, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v34 = v62 - 1;
    v30 = v62 == 1;
    v63 = v34;
    v35 = (unsigned __int8 *)&v64;
    v36 = &v65[2 * v34 - 2];
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v32)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_39;
      }
      *(_BYTE *)v38 = v33;
LABEL_39:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v65[2 * v63 - 2])
          {
            v60 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v41;
              v59 = v40 - (char *)a2;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v58[v59];
            }
            v36 = v60;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v63;
      v44 = v63;
      v36 = v41;
    }
    v45 = &v65[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v63;
    }
    v12 = v44 - v39;
    v13 = v61;
LABEL_59:
    v62 = v12;
LABEL_60:
    ;
  }
  while (v12);
LABEL_64:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_68:
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationDefineDataPropertyString, v46, v47, v48, v49, v50, v51, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,WTF::UniquedStringImpl *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int64_t v59;
  unsigned __int8 *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (uint64_t)a2;
  v62 = 0;
  if ((_DWORD)a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v64 = a5 | 0x100;
    v12 = 1;
    v62 = 1;
  }
  if ((_DWORD)a6 != 2)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a6 | 0x200;
    v62 = v12;
  }
  if (a7 != 3)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a7 | 0x300;
    v62 = v12;
  }
  if ((_DWORD)a8 == 4)
  {
    if (!v12)
      goto LABEL_64;
  }
  else
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a8 | 0x400;
    v62 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v65[v14 - 1] & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v15 |= 1 << v65[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v65[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_67;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v65[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_60;
      }
      v26 = v65[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_54;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_55;
          }
LABEL_54:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_55:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v62;
      }
      memmove(&v65[v22 - 2], &v65[v22], 2 * v16 - v22 - 2);
      v12 = v62 - 1;
      goto LABEL_59;
    }
    v61 = v13;
    v32 = HIBYTE(v64);
    v33 = v64;
    JSC::MacroAssemblerARM64::swap(v10, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v34 = v62 - 1;
    v30 = v62 == 1;
    v63 = v34;
    v35 = (unsigned __int8 *)&v64;
    v36 = &v65[2 * v34 - 2];
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v32)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_39;
      }
      *(_BYTE *)v38 = v33;
LABEL_39:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v65[2 * v63 - 2])
          {
            v60 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v41;
              v59 = v40 - (char *)a2;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v58[v59];
            }
            v36 = v60;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v63;
      v44 = v63;
      v36 = v41;
    }
    v45 = &v65[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v63;
    }
    v12 = v44 - v39;
    v13 = v61;
LABEL_59:
    v62 = v12;
LABEL_60:
    ;
  }
  while (v12);
LABEL_64:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_68:
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationDefineDataPropertyStringIdent, v46, v47, v48, v49, v50, v51, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Symbol *,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int64_t v59;
  unsigned __int8 *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (uint64_t)a2;
  v62 = 0;
  if ((_DWORD)a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v64 = a5 | 0x100;
    v12 = 1;
    v62 = 1;
  }
  if ((_DWORD)a6 != 2)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a6 | 0x200;
    v62 = v12;
  }
  if (a7 != 3)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a7 | 0x300;
    v62 = v12;
  }
  if ((_DWORD)a8 == 4)
  {
    if (!v12)
      goto LABEL_64;
  }
  else
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a8 | 0x400;
    v62 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v65[v14 - 1] & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v15 |= 1 << v65[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v65[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_67;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v65[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_60;
      }
      v26 = v65[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_54;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_55;
          }
LABEL_54:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_55:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v62;
      }
      memmove(&v65[v22 - 2], &v65[v22], 2 * v16 - v22 - 2);
      v12 = v62 - 1;
      goto LABEL_59;
    }
    v61 = v13;
    v32 = HIBYTE(v64);
    v33 = v64;
    JSC::MacroAssemblerARM64::swap(v10, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v34 = v62 - 1;
    v30 = v62 == 1;
    v63 = v34;
    v35 = (unsigned __int8 *)&v64;
    v36 = &v65[2 * v34 - 2];
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v32)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_39;
      }
      *(_BYTE *)v38 = v33;
LABEL_39:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v65[2 * v63 - 2])
          {
            v60 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v41;
              v59 = v40 - (char *)a2;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v58[v59];
            }
            v36 = v60;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v63;
      v44 = v63;
      v36 = v41;
    }
    v45 = &v65[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v63;
    }
    v12 = v44 - v39;
    v13 = v61;
LABEL_59:
    v62 = v12;
LABEL_60:
    ;
  }
  while (v12);
LABEL_64:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_68:
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationDefineDataPropertySymbol, v46, v47, v48, v49, v50, v51, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long,long long,int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int64_t v59;
  unsigned __int8 *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (uint64_t)a2;
  v62 = 0;
  if ((_DWORD)a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v64 = a5 | 0x100;
    v12 = 1;
    v62 = 1;
  }
  if (a6 != 2)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a6 | 0x200;
    v62 = v12;
  }
  if (a7 != 3)
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a7 | 0x300;
    v62 = v12;
  }
  if ((_DWORD)a8 == 4)
  {
    if (!v12)
      goto LABEL_64;
  }
  else
  {
    *(_WORD *)&v65[2 * v12++ - 2] = a8 | 0x400;
    v62 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v65[v14 - 1] & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v15 |= 1 << v65[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v65[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_67;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v65[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_60;
      }
      v26 = v65[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_54;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_55;
          }
LABEL_54:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_55:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v62;
      }
      memmove(&v65[v22 - 2], &v65[v22], 2 * v16 - v22 - 2);
      v12 = v62 - 1;
      goto LABEL_59;
    }
    v61 = v13;
    v32 = HIBYTE(v64);
    v33 = v64;
    JSC::MacroAssemblerARM64::swap(v10, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v34 = v62 - 1;
    v30 = v62 == 1;
    v63 = v34;
    v35 = (unsigned __int8 *)&v64;
    v36 = &v65[2 * v34 - 2];
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v32)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_39;
      }
      *(_BYTE *)v38 = v33;
LABEL_39:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v65[2 * v63 - 2])
          {
            v60 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v41;
              v59 = v40 - (char *)a2;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v58[v59];
            }
            v36 = v60;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v63;
      v44 = v63;
      v36 = v41;
    }
    v45 = &v65[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v63;
    }
    v12 = v44 - v39;
    v13 = v61;
LABEL_59:
    v62 = v12;
LABEL_60:
    ;
  }
  while (v12);
LABEL_64:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_68:
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationDefineDataProperty, v46, v47, v48, v49, v50, v51, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::compileDefineAccessorProperty(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  JSC::DFG::SpeculativeJIT *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::DFG::Node *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  JSC::ARM64LogicalImmediate *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::DFG::Node *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::DFG::Node *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint8x8_t v124;
  __int32 v125;
  uint8x8_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v136;
  char v137;
  char v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint8x8_t v158;
  __int32 v159;
  uint8x8_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v170;
  char v171;
  char v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint8x8_t v195;
  __int32 v196;
  uint8x8_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v207;
  char v208;
  char v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  JSC::DFG::Node *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint8x8_t v252;
  __int32 v253;
  uint8x8_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v264;
  char v265;
  char v266;
  uint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  JSC::ARM64LogicalImmediate *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  unsigned __int8 v295;
  JSC::DFG::SpeculativeJIT *v296;
  unint64_t v297;
  char v298;
  _BYTE v299[14];
  char v300;
  void *__dst;
  uint64_t v302;
  _WORD v303[8];

  v8 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v8 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01CE8);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3));
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01CF0);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12)
    || (v293 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8), v293 == -1))
  {
LABEL_6:
    v293 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 495);
  v15 = *((_DWORD *)a2 + 6) + 2;
  if (*(_DWORD *)(v14 + 164) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197C01CF8);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 152) + 8 * v15);
  v17 = v16 & 0xFF00FFFFFFFFFFFFLL;
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_12;
  v18 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D00);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12)
    || (v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8), v19 == -1))
  {
LABEL_12:
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 495);
  v21 = *((_DWORD *)a2 + 6) + 3;
  if (*(_DWORD *)(v20 + 164) <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D08);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v20 + 152) + 8 * v21);
  if ((v22 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_18;
  v23 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v23 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D10);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12)
    || (v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v22, a3, a4, a5, a6, a7, a8), v24 == -1))
  {
LABEL_18:
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
  }
  v25 = *((_QWORD *)this + 495);
  v26 = *((_DWORD *)a2 + 6) + 4;
  if (*(_DWORD *)(v25 + 164) <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D18);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v25 + 152) + 8 * v26);
  v296 = this;
  v297 = v27;
  v298 = -1;
  v28 = ~*(_DWORD *)((v27 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D20);
  }
  v291 = v17;
  v292 = v12;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v28 + 12))
  {
    v30 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v27, (uint64_t)v299, a4, a5, a6, a7, a8);
    v298 = v30;
    if (v30 != -1)
      goto LABEL_26;
    v31 = v296;
    v27 = v297;
  }
  else
  {
    v31 = this;
  }
  v30 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v31, v27, (uint64_t)v299, a4, a5, a6, a7, a8);
  v298 = v30;
LABEL_26:
  v290 = v22 & 0xFF00FFFFFFFFFFFFLL;
  v32 = *((_QWORD *)this + 495);
  v33 = (*((_DWORD *)a2 + 6) + 1);
  if (*(_DWORD *)(v32 + 164) <= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D28);
  }
  v34 = *(_QWORD *)(v32 + 152);
  v35 = *(_QWORD *)(v34 + 8 * v33);
  v36 = (v35 >> 50) & 0x3F;
  if (((v35 >> 50) & 0x3F) > 0x14)
  {
    if ((_DWORD)v36 != 25)
    {
      if ((_DWORD)v36 != 21)
        goto LABEL_325;
      v289 = (JSC::ARM64LogicalImmediate *)(v35 & 0xFF00FFFFFFFFFFFFLL);
      if ((v35 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_41;
      v51 = ~*(_DWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v51 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197C01D38);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v51 + 12)
        || (v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v29, a4, a5, a6, a7, a8),
            (_DWORD)v38 == -1))
      {
LABEL_41:
        v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v29, a4, a5, a6, a7, a8);
      }
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v34 + 8 * v33), v38, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v52, v53, v54, v55, v56, v57);
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v58, v59, v60, v61, v62, v63, v64);
      v71 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v65, v66, v67, v68, v69, v70);
      v79 = v71;
      v80 = (unint64_t)v72;
      __dst = v303;
      v302 = 5;
      if (v293 == 1)
      {
        v81 = 0;
      }
      else
      {
        v303[0] = v293 | 0x100;
        v81 = 1;
        HIDWORD(v302) = 1;
      }
      if ((_DWORD)v38 != 2)
      {
        v303[v81++] = v38 | 0x200;
        HIDWORD(v302) = v81;
      }
      if (v19 != 3)
      {
        v303[v81++] = v19 | 0x300;
        HIDWORD(v302) = v81;
      }
      if (v24 != 4)
      {
        v303[v81++] = v24 | 0x400;
        HIDWORD(v302) = v81;
      }
      if (v30 == 5)
      {
        if (v81)
          goto LABEL_89;
        goto LABEL_127;
      }
      v303[v81++] = v30 | 0x500;
      HIDWORD(v302) = v81;
      while (1)
      {
LABEL_89:
        v118 = 0;
        v119 = 0;
        v120 = (char *)__dst;
        v121 = v81;
        do
        {
          if ((*((_BYTE *)__dst + v118 + 1) & 0x40) != 0)
            goto LABEL_299;
          v119 |= 1 << *((_BYTE *)__dst + v118 + 1);
          v118 += 2;
        }
        while (2 * v81 != v118);
        v122 = 0;
        do
        {
          v123 = *((_BYTE *)__dst + v122) & 0x7F;
          if (v123 >= 0x40)
            goto LABEL_299;
          v119 &= ~(1 << v123);
          v122 += 2;
        }
        while (2 * v81 != v122);
        v124 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
        v124.i16[0] = vaddlv_u8(v124);
        v125 = v124.i32[0];
        v126 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v119));
        v126.i16[0] = vaddlv_u8(v126);
        if (!(v126.i32[0] + v125))
        {
          v137 = *(_BYTE *)__dst;
          v138 = *((_BYTE *)__dst + 1);
          JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v138, v74, v75, v76, v77, v78);
          memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v302) - 2);
          v139 = --HIDWORD(v302);
          if (HIDWORD(v302))
          {
            v140 = __dst;
            v141 = 2 * v139;
            while (*v140 != v138)
            {
              v140 += 2;
              v141 -= 2;
              if (!v141)
                goto LABEL_117;
            }
            *v140 = v137;
          }
LABEL_117:
          v71 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v294, 0);
          v81 = HIDWORD(v302);
          goto LABEL_125;
        }
        v127 = 0;
        v128 = v81 <= 1 ? 1 : v81;
        v129 = 2 * v128;
        while (1)
        {
          v130 = *((unsigned __int8 *)__dst + v127 + 1);
          if ((v130 & 0x7Fu) >= 0x40)
            goto LABEL_299;
          if (((v119 >> (v130 & 0x7F)) & 1) != 0)
            break;
          v127 += 2;
          if (v129 == v127)
            goto LABEL_125;
        }
        v131 = *((unsigned __int8 *)__dst + v127);
        if (v131 != v130)
          break;
LABEL_124:
        v71 = (unint64_t)memmove(&v120[v127], &v120[v127 + 2], 2 * v121 - v127 - 2);
        v81 = --HIDWORD(v302);
LABEL_125:
        if (!v81)
        {
          v71 = (unint64_t)__dst;
          if (v303 == __dst)
            goto LABEL_127;
LABEL_300:
          if (v71)
          {
            __dst = 0;
            LODWORD(v302) = 0;
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
LABEL_127:
          if ((_DWORD)v79 == -1)
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v80, 0, v74, v75, v76, v77, v78);
          else
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v79 << 35) + 0x380000001ALL, 0, v74, v75, v76, v77, v78);
          v149 = v291;
          v148 = v292;
          v150 = v290;
          v151 = operationDefineAccessorPropertyString;
LABEL_216:
          JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v151, v142, v143, v144, v145, v146, v147, (int *)&__dst);
          JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v214, v215, v216, v217, v218, v219);
LABEL_277:
          if (!v289)
            goto LABEL_282;
LABEL_278:
          if ((int)v38 > 15)
            v284 = -1;
          else
            v284 = v38;
          --*((_DWORD *)this + 3 * v284 + 1196);
          goto LABEL_282;
        }
      }
      v132 = (char)v131;
      if ((char)v131 == 63)
      {
        v133 = *((_DWORD *)this + 50);
        v134 = *((_DWORD *)this + 48);
        if ((char)v130 != 31)
        {
          v136 = v130 & 0x1F | 0xD2800000;
          goto LABEL_121;
        }
      }
      else
      {
        v133 = *((_DWORD *)this + 50);
        v134 = *((_DWORD *)this + 48);
        if (v130 != 31 && v132 != 31)
        {
          v136 = v130 & 0xFFE0FFFF | ((v132 & 0x1F) << 16) | 0xAA0003E0;
LABEL_121:
          if (v133 + 4 > v134)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v72, v73, v74, v75, v76, v77, v78);
            v133 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v133) = v136;
          *((_DWORD *)this + 50) += 4;
          v120 = (char *)__dst;
          v121 = HIDWORD(v302);
          goto LABEL_124;
        }
      }
      v136 = (char)v130 | (32 * v132) | 0x91000000;
      goto LABEL_121;
    }
    v289 = (JSC::ARM64LogicalImmediate *)(v35 & 0xFF00FFFFFFFFFFFFLL);
    if ((v35 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_55;
    v97 = ~*(_DWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v97 >= *((unsigned int *)this + 1001))
      goto LABEL_325;
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v97 + 12)
      || (v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v29, a4, a5, a6, a7, a8),
          (_DWORD)v38 == -1))
    {
LABEL_55:
      v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v29, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *(_QWORD *)(v34 + 8 * v33), v38, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v98, v99, v100, v101, v102, v103);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v104, v105, v106, v107, v108, v109, v110);
    v71 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v111, v112, v113, v114, v115, v116);
    v79 = v71;
    v80 = (unint64_t)v72;
    __dst = v303;
    v302 = 5;
    if (v293 == 1)
    {
      v117 = 0;
    }
    else
    {
      v303[0] = v293 | 0x100;
      v117 = 1;
      HIDWORD(v302) = 1;
    }
    if ((_DWORD)v38 != 2)
    {
      v303[v117++] = v38 | 0x200;
      HIDWORD(v302) = v117;
    }
    if (v19 != 3)
    {
      v303[v117++] = v19 | 0x300;
      HIDWORD(v302) = v117;
    }
    if (v24 != 4)
    {
      v303[v117++] = v24 | 0x400;
      HIDWORD(v302) = v117;
    }
    if (v30 == 5)
    {
      if (v117)
        goto LABEL_175;
LABEL_213:
      if ((_DWORD)v79 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v80, 0, v74, v75, v76, v77, v78);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v79 << 35) + 0x380000001ALL, 0, v74, v75, v76, v77, v78);
      v149 = v291;
      v148 = v292;
      v150 = v290;
      v151 = operationDefineAccessorPropertySymbol;
      goto LABEL_216;
    }
    v303[v117++] = v30 | 0x500;
    HIDWORD(v302) = v117;
    while (1)
    {
LABEL_175:
      v189 = 0;
      v190 = 0;
      v191 = (char *)__dst;
      v192 = v117;
      do
      {
        if ((*((_BYTE *)__dst + v189 + 1) & 0x40) != 0)
        {
LABEL_299:
          __break(1u);
          goto LABEL_300;
        }
        v190 |= 1 << *((_BYTE *)__dst + v189 + 1);
        v189 += 2;
      }
      while (2 * v117 != v189);
      v193 = 0;
      do
      {
        v194 = *((_BYTE *)__dst + v193) & 0x7F;
        if (v194 >= 0x40)
          goto LABEL_299;
        v190 &= ~(1 << v194);
        v193 += 2;
      }
      while (2 * v117 != v193);
      v195 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
      v195.i16[0] = vaddlv_u8(v195);
      v196 = v195.i32[0];
      v197 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v190));
      v197.i16[0] = vaddlv_u8(v197);
      if (!(v197.i32[0] + v196))
      {
        v208 = *(_BYTE *)__dst;
        v209 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v209, v74, v75, v76, v77, v78);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v302) - 2);
        v210 = --HIDWORD(v302);
        if (HIDWORD(v302))
        {
          v211 = __dst;
          v212 = 2 * v210;
          while (*v211 != v209)
          {
            v211 += 2;
            v212 -= 2;
            if (!v212)
              goto LABEL_203;
          }
          *v211 = v208;
        }
LABEL_203:
        v71 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v294, 0);
        v117 = HIDWORD(v302);
        goto LABEL_211;
      }
      v198 = 0;
      v199 = v117 <= 1 ? 1 : v117;
      v200 = 2 * v199;
      while (1)
      {
        v201 = *((unsigned __int8 *)__dst + v198 + 1);
        if ((v201 & 0x7Fu) >= 0x40)
          goto LABEL_299;
        if (((v190 >> (v201 & 0x7F)) & 1) != 0)
          break;
        v198 += 2;
        if (v200 == v198)
          goto LABEL_211;
      }
      v202 = *((unsigned __int8 *)__dst + v198);
      if (v202 != v201)
        break;
LABEL_210:
      v71 = (unint64_t)memmove(&v191[v198], &v191[v198 + 2], 2 * v192 - v198 - 2);
      v117 = --HIDWORD(v302);
LABEL_211:
      if (!v117)
      {
        v213 = __dst;
        if (v303 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v302) = 0;
          WTF::fastFree((unint64_t)v213, v72, v73, v74, v75, v76, v77, v78);
        }
        goto LABEL_213;
      }
    }
    v203 = (char)v202;
    if ((char)v202 == 63)
    {
      v204 = *((_DWORD *)this + 50);
      v205 = *((_DWORD *)this + 48);
      if ((char)v201 != 31)
      {
        v207 = v201 & 0x1F | 0xD2800000;
        goto LABEL_207;
      }
    }
    else
    {
      v204 = *((_DWORD *)this + 50);
      v205 = *((_DWORD *)this + 48);
      if (v201 != 31 && v203 != 31)
      {
        v207 = v201 & 0xFFE0FFFF | ((v203 & 0x1F) << 16) | 0xAA0003E0;
LABEL_207:
        if (v204 + 4 > v205)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v72, v73, v74, v75, v76, v77, v78);
          v204 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v204) = v207;
        *((_DWORD *)this + 50) += 4;
        v191 = (char *)__dst;
        v192 = HIDWORD(v302);
        goto LABEL_210;
      }
    }
    v207 = (char)v201 | (32 * v203) | 0x91000000;
    goto LABEL_207;
  }
  if ((_DWORD)v36)
  {
    if ((_DWORD)v36 == 20)
    {
      v289 = (JSC::ARM64LogicalImmediate *)(v35 & 0xFF00FFFFFFFFFFFFLL);
      if ((v35 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_217;
      v37 = ~*(_DWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v37 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197C01D30);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v37 + 12))
      {
        v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v29, a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v294, this, v39, v40, v41, v42, v43, v44);
        if ((_DWORD)v38 != -1)
          goto LABEL_219;
      }
      else
      {
LABEL_217:
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v294, this, v29, a4, a5, a6, a7, a8);
      }
      v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v35, v45, v46, v47, v48, v49, v50);
LABEL_219:
      v220 = (char)v295;
      v221 = v295;
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v34 + 8 * v33), v38, v46, v47, v48, v49, v50);
      JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)this, *(_QWORD *)(v34 + 8 * v33), v38, v220, v222, v223, v224, v225);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v226, v227, v228, v229, v230, v231);
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v232, v233, v234, v235, v236, v237, v238);
      v71 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v239, v240, v241, v242, v243, v244);
      v79 = v71;
      v80 = (unint64_t)v72;
      __dst = v303;
      v302 = 5;
      if (v293 == 1)
      {
        v245 = 0;
      }
      else
      {
        v303[0] = v293 | 0x100;
        v245 = 1;
        HIDWORD(v302) = 1;
      }
      if (v221 != 2)
      {
        v303[v245++] = v221 | 0x200;
        HIDWORD(v302) = v245;
      }
      if (v19 != 3)
      {
        v303[v245++] = v19 | 0x300;
        HIDWORD(v302) = v245;
      }
      if (v24 != 4)
      {
        v303[v245++] = v24 | 0x400;
        HIDWORD(v302) = v245;
      }
      if (v30 == 5)
      {
        if (v245)
          goto LABEL_232;
LABEL_270:
        if ((_DWORD)v79 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v80, 0, v74, v75, v76, v77, v78);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v79 << 35) + 0x380000001ALL, 0, v74, v75, v76, v77, v78);
        v149 = v291;
        v148 = v292;
        v150 = v290;
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationDefineAccessorPropertyStringIdent, v271, v272, v273, v274, v275, v276, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v277, v278, v279, v280, v281, v282);
        if (v294)
        {
          v283 = (char)v295;
          if ((char)v295 != -1)
          {
            if ((char)v295 > 15)
              v283 = -1;
            --*(_DWORD *)(v294 + 12 * v283 + 4784);
          }
        }
        goto LABEL_277;
      }
      v303[v245++] = v30 | 0x500;
      HIDWORD(v302) = v245;
LABEL_232:
      while (1)
      {
        v246 = 0;
        v247 = 0;
        v248 = (char *)__dst;
        v249 = v245;
        do
        {
          if ((*((_BYTE *)__dst + v246 + 1) & 0x40) != 0)
            goto LABEL_299;
          v247 |= 1 << *((_BYTE *)__dst + v246 + 1);
          v246 += 2;
        }
        while (2 * v245 != v246);
        v250 = 0;
        do
        {
          v251 = *((_BYTE *)__dst + v250) & 0x7F;
          if (v251 >= 0x40)
            goto LABEL_299;
          v247 &= ~(1 << v251);
          v250 += 2;
        }
        while (2 * v245 != v250);
        v252 = (uint8x8_t)vcnt_s8((int8x8_t)v247);
        v252.i16[0] = vaddlv_u8(v252);
        v253 = v252.i32[0];
        v254 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v247));
        v254.i16[0] = vaddlv_u8(v254);
        if (v254.i32[0] + v253)
          break;
        v265 = *(_BYTE *)__dst;
        v266 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v266, v74, v75, v76, v77, v78);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v302) - 2);
        v267 = --HIDWORD(v302);
        if (HIDWORD(v302))
        {
          v268 = __dst;
          v269 = 2 * v267;
          while (*v268 != v266)
          {
            v268 += 2;
            v269 -= 2;
            if (!v269)
              goto LABEL_260;
          }
          *v268 = v265;
        }
LABEL_260:
        v71 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v300, 0);
        v245 = HIDWORD(v302);
LABEL_268:
        if (!v245)
        {
          v270 = __dst;
          if (v303 != __dst && __dst)
          {
            __dst = 0;
            LODWORD(v302) = 0;
            WTF::fastFree((unint64_t)v270, v72, v73, v74, v75, v76, v77, v78);
          }
          goto LABEL_270;
        }
      }
      v255 = 0;
      if (v245 <= 1)
        v256 = 1;
      else
        v256 = v245;
      v257 = 2 * v256;
      while (1)
      {
        v258 = *((unsigned __int8 *)__dst + v255 + 1);
        if ((v258 & 0x7Fu) >= 0x40)
          goto LABEL_299;
        if (((v247 >> (v258 & 0x7F)) & 1) != 0)
          break;
        v255 += 2;
        if (v257 == v255)
          goto LABEL_268;
      }
      v259 = *((unsigned __int8 *)__dst + v255);
      if (v259 == v258)
      {
LABEL_267:
        v71 = (unint64_t)memmove(&v248[v255], &v248[v255 + 2], 2 * v249 - v255 - 2);
        v245 = --HIDWORD(v302);
        goto LABEL_268;
      }
      v260 = (char)v259;
      if ((char)v259 == 63)
      {
        v261 = *((_DWORD *)this + 50);
        v262 = *((_DWORD *)this + 48);
        if ((char)v258 != 31)
        {
          v264 = v258 & 0x1F | 0xD2800000;
          goto LABEL_264;
        }
      }
      else
      {
        v261 = *((_DWORD *)this + 50);
        v262 = *((_DWORD *)this + 48);
        if (v258 != 31 && v260 != 31)
        {
          v264 = v258 & 0xFFE0FFFF | ((v260 & 0x1F) << 16) | 0xAA0003E0;
LABEL_264:
          if (v261 + 4 > v262)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v72, v73, v74, v75, v76, v77, v78);
            v261 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v261) = v264;
          *((_DWORD *)this + 50) += 4;
          v248 = (char *)__dst;
          v249 = HIDWORD(v302);
          goto LABEL_267;
        }
      }
      v264 = (char)v258 | (32 * v260) | 0x91000000;
      goto LABEL_264;
    }
LABEL_325:
    __break(0xC471u);
    JUMPOUT(0x197C01CE0);
  }
  v80 = v35 & 0xFF00FFFFFFFFFFFFLL;
  if ((v35 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_48;
  v82 = ~*(_DWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v82 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C01D40);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v82 + 12)
    || (LODWORD(v38) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v35, v29, a4, a5, a6, a7, a8),
        (_DWORD)v38 == -1))
  {
LABEL_48:
    LODWORD(v38) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v35, v29, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v29, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v83, v84, v85, v86, v87, v88, v89);
  v71 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v90, v91, v92, v93, v94, v95);
  v79 = v71;
  __dst = v303;
  v302 = 5;
  if (v293 == 1)
  {
    v96 = 0;
  }
  else
  {
    v303[0] = v293 | 0x100;
    v96 = 1;
    HIDWORD(v302) = 1;
  }
  if ((_DWORD)v38 != 2)
  {
    v303[v96++] = v38 | 0x200;
    HIDWORD(v302) = v96;
  }
  if (v19 != 3)
  {
    v303[v96++] = v19 | 0x300;
    HIDWORD(v302) = v96;
  }
  if (v24 != 4)
  {
    v303[v96++] = v24 | 0x400;
    HIDWORD(v302) = v96;
  }
  if (v30 == 5)
  {
    if (!v96)
      goto LABEL_170;
  }
  else
  {
    v303[v96++] = v30 | 0x500;
    HIDWORD(v302) = v96;
  }
  v289 = v72;
  do
  {
    v152 = 0;
    v153 = 0;
    v154 = (char *)__dst;
    v155 = v96;
    do
    {
      if ((*((_BYTE *)__dst + v152 + 1) & 0x40) != 0)
        goto LABEL_299;
      v153 |= 1 << *((_BYTE *)__dst + v152 + 1);
      v152 += 2;
    }
    while (2 * v96 != v152);
    v156 = 0;
    do
    {
      v157 = *((_BYTE *)__dst + v156) & 0x7F;
      if (v157 >= 0x40)
        goto LABEL_299;
      v153 &= ~(1 << v157);
      v156 += 2;
    }
    while (2 * v96 != v156);
    v158 = (uint8x8_t)vcnt_s8((int8x8_t)v153);
    v158.i16[0] = vaddlv_u8(v158);
    v159 = v158.i32[0];
    v160 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v153));
    v160.i16[0] = vaddlv_u8(v160);
    if (v160.i32[0] + v159)
    {
      v161 = 0;
      if (v96 <= 1)
        v162 = 1;
      else
        v162 = v96;
      v163 = 2 * v162;
      while (1)
      {
        v164 = *((unsigned __int8 *)__dst + v161 + 1);
        if ((v164 & 0x7Fu) >= 0x40)
          goto LABEL_299;
        if (((v153 >> (v164 & 0x7F)) & 1) != 0)
          break;
        v161 += 2;
        if (v163 == v161)
          goto LABEL_168;
      }
      v165 = *((unsigned __int8 *)__dst + v161);
      if (v165 == v164)
      {
LABEL_167:
        v71 = (unint64_t)memmove(&v154[v161], &v154[v161 + 2], 2 * v155 - v161 - 2);
        v96 = --HIDWORD(v302);
        continue;
      }
      v166 = (char)v165;
      if ((char)v165 == 63)
      {
        v167 = *((_DWORD *)this + 50);
        v168 = *((_DWORD *)this + 48);
        if ((char)v164 != 31)
        {
          v170 = v164 & 0x1F | 0xD2800000;
          goto LABEL_164;
        }
      }
      else
      {
        v167 = *((_DWORD *)this + 50);
        v168 = *((_DWORD *)this + 48);
        if (v164 != 31 && v166 != 31)
        {
          v170 = v164 & 0xFFE0FFFF | ((v166 & 0x1F) << 16) | 0xAA0003E0;
LABEL_164:
          if (v167 + 4 > v168)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v72, v73, v74, v75, v76, v77, v78);
            v167 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v167) = v170;
          *((_DWORD *)this + 50) += 4;
          v154 = (char *)__dst;
          v155 = HIDWORD(v302);
          goto LABEL_167;
        }
      }
      v170 = (char)v164 | (32 * v166) | 0x91000000;
      goto LABEL_164;
    }
    v171 = *(_BYTE *)__dst;
    v172 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v172, v74, v75, v76, v77, v78);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v302) - 2);
    v173 = --HIDWORD(v302);
    if (HIDWORD(v302))
    {
      v174 = __dst;
      v175 = 2 * v173;
      while (*v174 != v172)
      {
        v174 += 2;
        v175 -= 2;
        if (!v175)
          goto LABEL_160;
      }
      *v174 = v171;
    }
LABEL_160:
    v71 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v294, 0);
    v96 = HIDWORD(v302);
LABEL_168:
    ;
  }
  while (v96);
  v176 = __dst;
  v72 = v289;
  if (v303 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v302) = 0;
    WTF::fastFree((unint64_t)v176, v289, v73, v74, v75, v76, v77, v78);
    v72 = v289;
  }
LABEL_170:
  if ((_DWORD)v79 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v72, 0, v74, v75, v76, v77, v78);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v79 << 35) + 0x380000001ALL, 0, v74, v75, v76, v77, v78);
  v149 = v291;
  v148 = v292;
  v150 = v290;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationDefineAccessorProperty, v177, v178, v179, v180, v181, v182, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v183, v184, v185, v186, v187, v188);
  if (v80)
    goto LABEL_278;
LABEL_282:
  v285 = v298;
  if (v298 > 15)
    v285 = -1;
  --*((_DWORD *)v296 + 3 * v285 + 1196);
  if (v150)
  {
    if (v24 > 15)
      v286 = -1;
    else
      v286 = v24;
    --*((_DWORD *)this + 3 * v286 + 1196);
  }
  if (v149)
  {
    if (v19 > 15)
      v287 = -1;
    else
      v287 = v19;
    --*((_DWORD *)this + 3 * v287 + 1196);
  }
  if (v148)
  {
    v288 = v293;
    if (v293 > 15)
      v288 = -1;
    --*((_DWORD *)this + 3 * v288 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileNormalizeMapKey(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  int *v14;
  uint64_t *v15;
  int *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int *v58;
  _BYTE *v59;
  int i;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  _DWORD *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  char v105;
  int *v106;
  int *v107;
  int v108;
  _DWORD *v109;
  _QWORD *v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t *v133;
  int v134;
  _DWORD *v135;
  uint64_t *v136;
  _DWORD *v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  char v142;
  int *v143;
  int *v144;
  int v145;
  _DWORD *v146;
  _QWORD *v147;
  int *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF *v188;
  unint64_t v190;
  char *v191;
  char *v192;
  unsigned int v193;
  char v194;
  char v195;
  JSC::AssemblerBuffer *v196;
  unint64_t v197;
  JSC::DFG::Node *v198;
  unint64_t v199;
  char *v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  int v205;
  char v206;
  __int16 v207;
  char v208;
  int v209;
  uint64_t v210;
  int v211;
  int v212;
  char v213;
  __int16 v214;
  char v215;
  unsigned int v216[3];
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned int v223[3];
  WTF *v224;
  uint64_t v225;
  _BYTE v226[24];
  _BYTE *v227;
  uint64_t v228;
  _BYTE v229[24];
  uint64_t v230;
  char v231;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_142;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_170:
    JUMPOUT(0x197C02964);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_142:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C02B7CLL);
  }
  v14 = &v222;
  v15 = &v220;
  v16 = &v218;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v17 = -1;
    else
      v17 = v12;
    ++*((_DWORD *)this + 3 * v17 + 1196);
    v18 = v12;
  }
  else
  {
    v18 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v230, this, a3, a4, a5, a6, a7, a8);
  v25 = 0;
  v200 = (char *)this + 4968;
  v26 = (_DWORD *)((char *)this + 4976);
  v27 = 0x17u;
  v28 = -1;
  while (*v26)
  {
LABEL_18:
    ++v25;
    v26 += 3;
    if (v25 == 23)
    {
      v25 = v27;
      v30 = &v200[12 * v27];
      v31 = *(_DWORD *)v30;
      *(_QWORD *)v30 = 0xFFFFFFFF3FFFFFFFLL;
      v26 = v30 + 8;
      goto LABEL_21;
    }
  }
  v29 = *(v26 - 1);
  if (v29 != -1)
  {
    if (v29 < v28)
    {
      v27 = v25;
      v28 = *(v26 - 1);
    }
    goto LABEL_18;
  }
  v31 = *(v26 - 2);
  *((_QWORD *)v26 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_21:
  *v26 = 1;
  v202 = JSC::FPRInfo::toRegister::registerForIndex[v25];
  if (v31 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, v19, v20, v21, v22, v23, v24);
  v32 = 0;
  v33 = (_DWORD *)((char *)this + 4976);
  v34 = 0x17u;
  v35 = -1;
  while (2)
  {
    if (*v33)
    {
LABEL_28:
      ++v32;
      v33 += 3;
      if (v32 == 23)
      {
        v32 = v34;
        v37 = &v200[12 * v34];
        v38 = *(_DWORD *)v37;
        *(_QWORD *)v37 = 0xFFFFFFFF3FFFFFFFLL;
        v33 = v37 + 8;
        goto LABEL_31;
      }
      continue;
    }
    break;
  }
  v36 = *(v33 - 1);
  if (v36 != -1)
  {
    if (v36 < v35)
    {
      v34 = v32;
      v35 = *(v33 - 1);
    }
    goto LABEL_28;
  }
  v38 = *(v33 - 2);
  *((_QWORD *)v33 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_31:
  *v33 = 1;
  v201 = JSC::FPRInfo::toRegister::registerForIndex[v32];
  if (v38 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v38, v19, v20, v21, v22, v23, v24);
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v19, v20, v21, v22, v23, v24);
  v39 = v231;
  v227 = v229;
  v228 = 2;
  v224 = (WTF *)v226;
  v225 = 2;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v12, 1, v20, v21, v22, v23, v24, (uint64_t)v223);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_170;
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x500000000, *((char *)this + 304), v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 3, v45, v46, v47, v48, (uint64_t)&v221);
  v56 = v221;
  if (v221 != -1)
  {
    v57 = HIDWORD(v228);
    if (HIDWORD(v228) == (_DWORD)v228)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v227, (void *)(HIDWORD(v228) + 1), (unint64_t)&v221, v51, v52, v53, v54, v55);
      v14 = v58 + 1;
      v56 = *v58;
      v57 = HIDWORD(v228);
    }
    v59 = &v227[12 * v57];
    *(_DWORD *)v59 = v56;
    *(_QWORD *)(v59 + 4) = *(_QWORD *)v14;
    ++HIDWORD(v228);
  }
  v198 = a2;
  v196 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v196, v49, v50, v51, v52, v53, v54, v55);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v61 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v49, v50, v51, v52, v53, v54, v55);
    v61 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v61) = 335544320;
  *((_DWORD *)this + 50) += 4;
  v62 = 0xFF000F4500000000;
  if (!*((_BYTE *)this + 328))
    v62 = 0xFF000F4100000000;
  v197 = v62;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v223, (uint64_t)this, v50, v51, v52, v53, v54, v55);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v12, 27, v63, v64, v65, v66, (uint64_t)&v219);
  v72 = v219;
  if (v219 != -1)
  {
    v73 = HIDWORD(v228);
    if (HIDWORD(v228) == (_DWORD)v228)
    {
      v74 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v227, (void *)(HIDWORD(v228) + 1), (unint64_t)&v219, v67, v68, v69, v70, v71);
      v15 = (uint64_t *)(v74 + 1);
      v72 = *v74;
      v73 = HIDWORD(v228);
    }
    v75 = &v227[12 * v73];
    *(_DWORD *)v75 = v72;
    *(_QWORD *)(v75 + 4) = *v15;
    ++HIDWORD(v228);
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v12, 27, v68, v69, v70, v71, (uint64_t)&v217);
  v81 = v217;
  if (v217 != -1)
  {
    v82 = HIDWORD(v228);
    if (HIDWORD(v228) == (_DWORD)v228)
    {
      v83 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v227, (void *)(HIDWORD(v228) + 1), (unint64_t)&v217, v76, v77, v78, v79, v80);
      v16 = v83 + 1;
      v81 = *v83;
      v82 = HIDWORD(v228);
    }
    v84 = &v227[12 * v82];
    *(_DWORD *)v84 = v81;
    *(_QWORD *)(v84 + 4) = *(_QWORD *)v16;
    ++HIDWORD(v228);
  }
  v199 = v10 & 0xFF00FFFFFFFFFFFFLL;
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(this, v12, v39, v202, 1, v78, v79, v80);
  v92 = *((_DWORD *)this + 50);
  if (v92 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v85, v86, v87, v88, v89, v90, v91);
    v92 = *((_DWORD *)this + 50);
  }
  v93 = 32 * v202;
  *(_DWORD *)(*((_QWORD *)this + 7) + v92) = (32 * v202) | (v202 << 16) | 0x1E602000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 0, v86, v87, v88, v89, v90, v91, (uint64_t)v216);
  v101 = *((_DWORD *)this + 50);
  if (v101 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v94, v95, v96, v97, v98, v99, v100);
    v101 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v101) = v18 & 0x1F | 0xD2EFFF40;
  v102 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v102;
  if (v102 < *((_DWORD *)this + 13))
  {
    v103 = v201;
    do
    {
      if ((v102 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v196, v94, v95, v96, v97, v98, v99, v100);
        v102 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v102) = -721215457;
      v102 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v102;
    }
    while (v102 < *((_DWORD *)this + 13));
  }
  else
  {
    v103 = v201;
  }
  v104 = v102;
  if ((v102 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v94, v95, v96, v97, v98, v99, v100);
    v104 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v104) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v105 = 69;
  else
    v105 = 65;
  v211 = v102;
  v212 = 0;
  v213 = v105;
  v214 = 15;
  v215 = -1;
  if (v102 != -1)
  {
    if (HIDWORD(v225) == (_DWORD)v225)
    {
      v106 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v224, (void *)(HIDWORD(v225) + 1), (unint64_t)&v211, v96, v97, v98, v99, v100);
      v108 = *v106;
      v107 = v106 + 1;
      v109 = (_DWORD *)((char *)v224 + 12 * HIDWORD(v225));
      *v109 = v108;
      v110 = v109 + 1;
    }
    else
    {
      v111 = (int *)((char *)v224 + 12 * HIDWORD(v225));
      *v111 = v102;
      v110 = v111 + 1;
      v107 = &v212;
    }
    *v110 = *(_QWORD *)v107;
    ++HIDWORD(v225);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v216, (uint64_t)this, v95, v96, v97, v98, v99, v100);
  v119 = *((_DWORD *)this + 50);
  if (v119 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v112, v113, v114, v115, v116, v117, v118);
    v119 = *((_DWORD *)this + 50);
  }
  v120 = v39 & 0x1F;
  *(_DWORD *)(*((_QWORD *)this + 7) + v119) = v93 | v120 | 0x1E780000;
  v121 = *((_DWORD *)this + 50);
  v122 = v121 + 4;
  *((_DWORD *)this + 50) = v121 + 4;
  if ((v121 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v112, v113, v114, v115, v116, v117, v118);
    v122 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v122) = v103 | (32 * v120) | 0x1E620000;
  v123 = *((_DWORD *)this + 50);
  v124 = v123 + 4;
  *((_DWORD *)this + 50) = v123 + 4;
  if ((v123 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v112, v113, v114, v115, v116, v117, v118);
    v124 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v124) = v93 | (v103 << 16) | 0x1E602000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 7, v113, v114, v115, v116, v117, v118, (uint64_t)&v209);
  if (v209 != -1)
  {
    if (HIDWORD(v228) == (_DWORD)v228)
    {
      v132 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v227, (void *)(HIDWORD(v228) + 1), (unint64_t)&v209, v127, v128, v129, v130, v131);
      v134 = *v132;
      v133 = (uint64_t *)(v132 + 1);
      v135 = &v227[12 * HIDWORD(v228)];
      *v135 = v134;
      v136 = (uint64_t *)(v135 + 1);
    }
    else
    {
      v137 = &v227[12 * HIDWORD(v228)];
      *v137 = v209;
      v136 = (uint64_t *)(v137 + 1);
      v133 = &v210;
    }
    *v136 = *v133;
    ++HIDWORD(v228);
  }
  v138 = v18 & 0x1F;
  v139 = *((_DWORD *)this + 50);
  if (v139 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v125, v126, v127, v128, v129, v130, v131);
    v139 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v139) = v138 | (v120 << 16) | 0xAA000360;
  v140 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v140; v140 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v140)
  {
    if ((v140 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v196, v125, v126, v127, v128, v129, v130, v131);
      v140 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v140) = -721215457;
    v140 = *((_DWORD *)this + 50) + 4;
  }
  v141 = v140;
  if ((v140 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v196, v125, v126, v127, v128, v129, v130, v131);
    v141 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v141) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v142 = 69;
  else
    v142 = 65;
  v204 = v140;
  v205 = 0;
  v206 = v142;
  v207 = 15;
  v208 = -1;
  if (v140 != -1)
  {
    if (HIDWORD(v225) == (_DWORD)v225)
    {
      v143 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v224, (void *)(HIDWORD(v225) + 1), (unint64_t)&v204, v127, v128, v129, v130, v131);
      v145 = *v143;
      v144 = v143 + 1;
      v146 = (_DWORD *)((char *)v224 + 12 * HIDWORD(v225));
      *v146 = v145;
      v147 = v146 + 1;
    }
    else
    {
      v148 = (int *)((char *)v224 + 12 * HIDWORD(v225));
      *v148 = v140;
      v147 = v148 + 1;
      v144 = &v205;
    }
    *v147 = *(_QWORD *)v144;
    ++HIDWORD(v225);
  }
  if (HIDWORD(v228))
  {
    v149 = 0;
    v150 = 0;
    v151 = 12 * HIDWORD(v228);
    do
    {
      if (v150 >= HIDWORD(v228))
      {
        __break(0xC471u);
        JUMPOUT(0x197C02B6CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v227[v149], (uint64_t)this, v126, v127, v128, v129, v130, v131);
      ++v150;
      v149 += 12;
    }
    while (v151 != v149);
  }
  if (v12 != v18)
  {
    if (v12 == 63)
    {
      v152 = *((_DWORD *)this + 50);
      if (v18 == 31)
        goto LABEL_147;
      v155 = v138 | 0xD2800000;
    }
    else
    {
      v152 = *((_DWORD *)this + 50);
      if (v18 != 31 && v12 != 31)
      {
        v153 = v18 | ((v12 & 0x1F) << 16);
        v154 = -1442839584;
        goto LABEL_102;
      }
LABEL_147:
      v153 = v18 | (32 * v12);
      v154 = -1862270976;
LABEL_102:
      v155 = v153 | v154;
    }
    if (v152 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v196, v125, v126, v127, v128, v129, v130, v131);
      v152 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v152) = v155;
    *((_DWORD *)this + 50) += 4;
  }
  v156 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v157 = WTF::fastMalloc((WTF *)0x98);
  v158 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v157, this);
  *(_QWORD *)v158 = off_1E35746F0;
  *(_DWORD *)(v158 + 48) = i;
  *(_QWORD *)(v158 + 52) = v197;
  v166 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v158 + 60) = v166; v166 < *((_DWORD *)this + 13); *(_DWORD *)(v157 + 60) = v166)
  {
    if ((v166 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v196, v159, v160, v161, v162, v163, v164, v165);
      v166 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v166) = -721215457;
    v166 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v166;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v157 = off_1E3573EC0;
  *(_QWORD *)(v157 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v157 + 72) = 256;
  *(_BYTE *)(v157 + 74) = v18;
  *(_QWORD *)(v157 + 80) = v157 + 96;
  *(_QWORD *)(v157 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v157 + 80, v18, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v164, v165);
  *(_QWORD *)v157 = &off_1E3573E90;
  *(_QWORD *)(v157 + 128) = operationNormalizeMapKeyHeapBigInt;
  *(_QWORD *)(v157 + 136) = v156;
  *(_BYTE *)(v157 + 144) = v12;
  v203 = v157;
  v173 = (_QWORD *)((char *)this + 5656);
  v174 = *((unsigned int *)this + 1417);
  if ((_DWORD)v174 == *((_DWORD *)this + 1416))
  {
    v176 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v173, v174 + 1, (unint64_t)&v203);
    v174 = *((unsigned int *)this + 1417);
    v175 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v174);
    v157 = *v176;
  }
  else
  {
    v175 = (uint64_t *)(*v173 + 8 * v174);
    v176 = &v203;
  }
  *v176 = 0;
  *v175 = v157;
  *((_DWORD *)this + 1417) = v174 + 1;
  v177 = v203;
  v203 = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  if (HIDWORD(v225))
  {
    v178 = 0;
    v179 = 0;
    v180 = 12 * HIDWORD(v225);
    do
    {
      if (v179 >= HIDWORD(v225))
      {
        __break(0xC471u);
        JUMPOUT(0x197C02B74);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v224 + v178), (uint64_t)this, v167, v168, v169, v170, v171, v172);
      ++v179;
      v178 += 12;
    }
    while (v180 != v178);
  }
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v18, (uint64_t)v198, 16, 0, v170, v171, v172);
  v188 = v224;
  if (v226 != (_BYTE *)v224 && v224 != 0)
  {
    v224 = 0;
    LODWORD(v225) = 0;
    WTF::fastFree((unint64_t)v188, v181, v182, v183, v184, v185, v186, v187);
  }
  v190 = (unint64_t)v227;
  if (v229 != v227 && v227)
  {
    v227 = 0;
    LODWORD(v228) = 0;
    WTF::fastFree(v190, v181, v182, v183, v184, v185, v186, v187);
  }
  if (this)
  {
    v191 = &v200[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v201]];
    --*((_DWORD *)v191 + 2);
    v192 = &v200[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v202]];
    --*((_DWORD *)v192 + 2);
  }
  if (v230)
  {
    v193 = v231;
    if (v231 != -1)
    {
      if (v231 > 15)
        v193 = -1;
      --*(_DWORD *)(v230 + 12 * v193 + 4784);
    }
  }
  if (this && v18 != -1)
  {
    if (v18 > 15)
      v194 = -1;
    else
      v194 = v18;
    --*((_DWORD *)this + 3 * v194 + 1196);
  }
  if (v199)
  {
    if (v12 > 15)
      v195 = -1;
    else
      v195 = v12;
    --*((_DWORD *)this + 3 * v195 + 1196);
  }
}

void JSC::MacroAssemblerARM64::truncateDoubleToInt32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x1E780000;
  a1[50] += 4;
}

void JSC::AssemblyHelpers::moveValueRegs(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (a2 == a3)
    return;
  if (a2 == 63)
  {
    if (a3 != 31)
    {
      v10 = a3 & 0x1F | 0xD2800000;
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if (a2 == 31 || a3 == 31)
  {
LABEL_13:
    v8 = (char)a3 | (32 * (char)a2);
    v9 = -1862270976;
    goto LABEL_6;
  }
  v8 = a3 & 0x1F | ((a2 & 0x1F) << 16);
  v9 = -1442839584;
LABEL_6:
  v10 = v8 | v9;
LABEL_7:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileMapStorage(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::DFG::Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *result;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C02ECCLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 3);
  v15 = (v14 >> 50) & 0x3F;
  if ((_DWORD)v15 == 30)
  {
    JSC::DFG::SpeculativeJIT::speculateMapObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
  }
  else
  {
    if ((_DWORD)v15 != 31)
    {
      __break(0xC471u);
      goto LABEL_25;
    }
    JSC::DFG::SpeculativeJIT::speculateSetObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, v17, v18, v19, v20, v21, v22);
  ++*((_DWORD *)this + 1196);
  v29 = *((unsigned int *)this + 1194);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, (uint64_t)v23, v24, v25, v26, v27, v28);
  }
  if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
    v30 = (unsigned __int8 *)operationMapStorage;
  else
    v30 = (unsigned __int8 *)operationSetStorage;
  v31 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v23, v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, v30, 0, v31, v32, v13, v33, v34, &v47);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v35, v36, v37, v38, v39, v40);
  v42 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v42;
  *((_DWORD *)this + 1195) = 4;
  v43 = ~v42;
  if (v43 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x197C02EC4);
  }
  v44 = *((_QWORD *)this + 499) + 24 * (int)v43;
  v45 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v44 = a2;
  *(_DWORD *)(v44 + 8) = v45;
  *(_BYTE *)(v44 + 12) = 6;
  *(_DWORD *)(v44 + 13) = 0;
  *(_BYTE *)(v44 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v11)
  {
    if ((int)v13 > 15)
      v46 = -1;
    else
      v46 = v13;
    --*((_DWORD *)this + 3 * v46 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIteratorNext(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::DFG::Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  int v40;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_21;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 3);
  v15 = (v14 >> 50) & 0x3F;
  if ((_DWORD)v15 == 33)
  {
    JSC::DFG::SpeculativeJIT::speculateSetIteratorObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  if ((_DWORD)v15 != 32)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197C03098);
  }
  JSC::DFG::SpeculativeJIT::speculateMapIteratorObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
LABEL_8:
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, v17, v18, v19, v20, v21, v22);
  ++*((_DWORD *)this + 1196);
  v29 = *((unsigned int *)this + 1194);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, (uint64_t)v23, v24, v25, v26, v27, v28);
  }
  if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
    v30 = (unsigned __int8 *)operationMapIteratorNext;
  else
    v30 = (unsigned __int8 *)operationSetIteratorNext;
  v31 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v23, v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, v30, 0, v31, v32, v13, v33, v34, &v40);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v35, v36, v37);
  --*((_DWORD *)this + 1196);
  if (v11)
  {
    if ((int)v13 > 15)
      v39 = -1;
    else
      v39 = v13;
    --*((_DWORD *)this + 3 * v39 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIteratorKey(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::DFG::Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  int v40;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_21;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 3);
  v15 = (v14 >> 50) & 0x3F;
  if ((_DWORD)v15 == 32)
  {
    JSC::DFG::SpeculativeJIT::speculateMapIteratorObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  if ((_DWORD)v15 != 33)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197C03264);
  }
  JSC::DFG::SpeculativeJIT::speculateSetIteratorObject((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
LABEL_10:
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, v17, v18, v19, v20, v21, v22);
  ++*((_DWORD *)this + 1196);
  v29 = *((unsigned int *)this + 1194);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, (uint64_t)v23, v24, v25, v26, v27, v28);
  }
  if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
    v30 = (unsigned __int8 *)operationMapIteratorKey;
  else
    v30 = (unsigned __int8 *)operationSetIteratorKey;
  v31 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v23, v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, v30, 0, v31, v32, v13, v33, v34, &v40);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v35, v36, v37);
  --*((_DWORD *)this + 1196);
  if (v11)
  {
    if ((int)v13 > 15)
      v39 = -1;
    else
      v39 = v13;
    --*((_DWORD *)this + 3 * v39 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIteratorValue(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;

  v9 = (unsigned int *)this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateMapIteratorObject((uint64_t)v9, *((_QWORD *)a2 + 3), v12, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v13, v14, v15, v16, v17, v18, v19);
  ++v9[1196];
  v26 = v9[1194];
  if ((_DWORD)v26 != 0x3FFFFFFF)
  {
    *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v26, (uint64_t)v20, v21, v22, v23, v24, v25);
  }
  v27 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v20, v21, v22, v23, v24, v25);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)v9, (unsigned __int8 *)operationMapIteratorValue, 0, v27, v28, v12, v29, v30, &v35);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v31, v32, v33);
  --v9[1196];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v12 > 15)
      v34 = -1;
    else
      v34 = v12;
    --v9[3 * v34 + 1196];
  }
  return this;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileMapIterationNext(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::DFG::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t (*v41)(uint64_t, JSC::VM *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *result;
  unsigned int v47;
  unsigned int v48;
  int v49;
  JSC::DFG::SpeculativeJIT *v50[2];
  unsigned __int8 v51;
  _BYTE v52[7];
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 v55;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v53, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)v50, (uint64_t)this, *((_QWORD *)a2 + 4), 0, v10, v11, v12, v13);
  v20 = v55;
  if (v55 == 255)
  {
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v53, v54, v14, v15, v16, v17, v18, v19);
    v55 = v20;
  }
  v21 = v51;
  if (v51 == 255)
  {
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v50[0], (unint64_t)v50[1], (uint64_t)v52, v15, v16, v17, v18, v19);
    v51 = v21;
  }
  v22 = (char)v20;
  JSC::DFG::SpeculativeJIT::speculateImmutableButterfly((uint64_t)this, *((_QWORD *)a2 + 3), v22, v15, v16, v17, v18, v19);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v23, v24, v25, v26, v27, v28, v29);
  ++*((_DWORD *)this + 1196);
  v36 = *((unsigned int *)this + 1194);
  if ((_DWORD)v36 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v36, (uint64_t)v30, v31, v32, v33, v34, v35);
  }
  v37 = *((_DWORD *)a2 + 18);
  v39 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v30, v31, v32, v33, v34, v35);
  if (v37)
    v41 = operationSetIterationNext;
  else
    v41 = operationMapIterationNext;
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v49, (int *)this, (uint64_t)v41, v39, v38, v22, (char)v21, v40);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v42, v43, v44, v45);
  --*((_DWORD *)this + 1196);
  v47 = (char)v51;
  if ((char)v51 > 15)
    v47 = -1;
  --*((_DWORD *)v50[0] + 3 * v47 + 1196);
  if ((v54 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v48 = (char)v55;
    if ((char)v55 > 15)
      v48 = -1;
    --*(_DWORD *)(v53 + 12 * v48 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIterationEntry(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v45, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v16 = v47;
  if (v47 == 255)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v45, v46, v10, v11, v12, v13, v14, v15);
    v47 = v16;
  }
  v17 = (char)v16;
  JSC::DFG::SpeculativeJIT::speculateImmutableButterfly((uint64_t)this, *((_QWORD *)a2 + 3), v17, v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  ++*((_DWORD *)this + 1196);
  v31 = *((unsigned int *)this + 1194);
  if ((_DWORD)v31 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, (uint64_t)v25, v26, v27, v28, v29, v30);
  }
  v32 = *((_DWORD *)a2 + 18);
  v33 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
  v37 = v36;
  if (v32)
    v38 = (unsigned __int8 *)operationSetIterationEntry;
  else
    v38 = (unsigned __int8 *)operationMapIterationEntry;
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, v38, 0, v33, v37, v17, v34, v35, &v44);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v39, v40, v41);
  --*((_DWORD *)this + 1196);
  if ((v46 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v43 = (char)v47;
    if ((char)v47 > 15)
      v43 = -1;
    --*(_DWORD *)(v45 + 12 * v43 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIterationEntryKey(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v45, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v16 = v47;
  if (v47 == 255)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v45, v46, v10, v11, v12, v13, v14, v15);
    v47 = v16;
  }
  v17 = (char)v16;
  JSC::DFG::SpeculativeJIT::speculateImmutableButterfly((uint64_t)this, *((_QWORD *)a2 + 3), v17, v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  ++*((_DWORD *)this + 1196);
  v31 = *((unsigned int *)this + 1194);
  if ((_DWORD)v31 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, (uint64_t)v25, v26, v27, v28, v29, v30);
  }
  v32 = *((_DWORD *)a2 + 18);
  v33 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
  v37 = v36;
  if (v32)
    v38 = (unsigned __int8 *)operationSetIterationEntryKey;
  else
    v38 = (unsigned __int8 *)operationMapIterationEntryKey;
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, v38, 0, v33, v37, v17, v34, v35, &v44);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v39, v40, v41);
  --*((_DWORD *)this + 1196);
  if ((v46 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v43 = (char)v47;
    if ((char)v47 > 15)
      v43 = -1;
    --*(_DWORD *)(v45 + 12 * v43 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapIterationEntryValue(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v42, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v16 = v44;
  if (v44 == 255)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v42, v43, v10, v11, v12, v13, v14, v15);
    v44 = v16;
  }
  v17 = (char)v16;
  JSC::DFG::SpeculativeJIT::speculateImmutableButterfly((uint64_t)this, *((_QWORD *)a2 + 3), v17, v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  ++*((_DWORD *)this + 1196);
  v31 = *((unsigned int *)this + 1194);
  if ((_DWORD)v31 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, (uint64_t)v25, v26, v27, v28, v29, v30);
  }
  v32 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, (unsigned __int8 *)operationMapIterationEntryValue, 0, v32, v33, v17, v34, v35, &v41);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v36, v37, v38);
  --*((_DWORD *)this + 1196);
  if ((v43 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v40 = (char)v44;
    if ((char)v44 > 15)
      v40 = -1;
    --*(_DWORD *)(v42 + 12 * v40 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileExtractValueFromWeakMapGet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  char v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  char v38;
  unsigned int v39[3];

  v11 = *((_QWORD *)a2 + 3);
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_35;
  v12 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x197C03BB4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_35:
    v13 = -1;
  v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
    goto LABEL_40;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 8) == 1)
  {
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    if (v13 > 15)
      v15 = -1;
    else
      v15 = v13;
    ++*((_DWORD *)this + 3 * v15 + 1196);
    v16 = v13;
  }
  else
  {
    v16 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  if (v13 != v16)
  {
    if (v13 == 63)
    {
      if (v16 != 31)
      {
        v19 = v16 & 0x1F | 0xD2800000;
        goto LABEL_21;
      }
    }
    else if (v16 != 31 && v13 != 31)
    {
      v17 = v16 & 0x1F | ((v13 & 0x1F) << 16);
      v18 = -1442839584;
LABEL_20:
      v19 = v17 | v18;
LABEL_21:
      v21 = (unsigned int *)((char *)this + 200);
      v20 = *((_DWORD *)this + 50);
      if (v20 + 4 > *((_DWORD *)this + 48))
      {
        a9 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
        v20 = *v21;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v20) = v19;
      *v21 += 4;
      goto LABEL_24;
    }
    v17 = v16 | (32 * v13);
    v18 = -1862270976;
    goto LABEL_20;
  }
LABEL_24:
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v16, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)v39, a9);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, v16, v22, v23, v24, v25, v26);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v39, (uint64_t)this, v27, v28, v29, v30, v31, v32);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v16, (uint64_t)a2, 16, 0, v33, v34, v35);
  if (v16 != -1)
  {
    if (v16 > 15)
      v37 = -1;
    else
      v37 = v16;
    --*((_DWORD *)this + 3 * v37 + 1196);
  }
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v13 > 15)
      v38 = -1;
    else
      v38 = v13;
    --*((_DWORD *)this + 3 * v38 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileThrow(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  JSC::DFG::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v9 = (_DWORD *)this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillJSValue(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v12, a3, a4, a5, a6, a7, a8);
  v20 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v14, v15, v16, v17, v18, v19);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((__int16 *)v9, (unsigned __int8 *)operationThrowDFG, v20, v21, v13, v22, v23, v24, &v34);
  v32 = v9[50];
  if (v32 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v25, v26, v27, v28, v29, v30, v31);
    v32 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v32) = -734491104;
  v9[50] += 4;
  this = JSC::DFG::SpeculativeJIT::noResult((uint64_t)v9, (uint64_t)a2, 0, v27, v28, v29, v30, v31);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v13 > 15)
      v33 = -1;
    else
      v33 = v13;
    --v9[3 * v33 + 1196];
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(__int16 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  __int16 *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 *v58;
  int v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  _BYTE v64[6];

  v11 = (uint64_t)a2;
  v12 = (uint64_t)a1;
  v14 = &v63;
  if (a5 != 1)
  {
    v63 = a5 | 0x100;
    v61 = 1;
    v60 = (JSC::AssemblerBuffer *)(a1 + 28);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v64[v16 - 1] & 0x40) != 0)
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v17 |= 1 << v64[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v64[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_57;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v64[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_57;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v64[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v12 + 200);
          if (v31 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v60, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v31) = v30;
          *(_DWORD *)(v12 + 200) += 4;
          v18 = v61;
        }
        a1 = (__int16 *)memmove(&v64[v24 - 2], &v64[v24], 2 * v18 - v24 - 2);
        v15 = v61 - 1;
        goto LABEL_32;
      }
      v58 = v14;
      v32 = HIBYTE(v63);
      v33 = v63;
      JSC::MacroAssemblerARM64::swap(v12, (char)v63, SHIBYTE(v63), a4, a5, a6, a7, a8);
      a1 = (__int16 *)memmove(&v63, v64, 2 * v61 - 2);
      v34 = v61 - 1;
      v29 = v61 == 1;
      v62 = v34;
      v35 = (char *)&v63;
      v36 = &v64[2 * v34 - 2];
      if (v29)
      {
        v37 = 0;
        v38 = 0;
        v59 = 0;
        a2 = &v64[2 * v34 - 2];
      }
      else
      {
        v40 = 2 * v34;
        v41 = &v63;
        while (*(unsigned __int8 *)v41 != v32)
        {
          ++v41;
          v40 -= 2;
          if (!v40)
            goto LABEL_43;
        }
        *(_BYTE *)v41 = v33;
LABEL_43:
        v59 = 0;
        v42 = (char *)&v63;
        a2 = (unsigned __int8 *)v36;
        v43 = v36;
        do
        {
          if (*v35 == v35[1])
          {
            v44 = v35;
            if (v43 != &v64[2 * v62 - 2])
            {
              if (v35 == (char *)a2)
              {
                v44 = v43;
              }
              else
              {
                v45 = v42 - (char *)a2;
                a1 = (__int16 *)memmove(v43, a2, v42 - (char *)a2);
                v44 = &v43[v45];
              }
            }
            a2 = (unsigned __int8 *)(v35 + 2);
            ++v59;
            v43 = v44;
          }
          v35 += 2;
          v42 += 2;
        }
        while (v35 < v36);
        v37 = v62;
        v38 = v62;
        v36 = v43;
      }
      v39 = &v64[2 * v37 - 2];
      if (a2 != v39)
      {
        a1 = (__int16 *)memmove(v36, a2, v39 - a2);
        v38 = v62;
      }
      v15 = v38 - v59;
      v14 = v58;
LABEL_32:
      v61 = v15;
LABEL_33:
      ;
    }
    while (v15);
    a1 = &v63;
    if (v14 == &v63)
      goto LABEL_54;
LABEL_58:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v46, v47, v48, v49, v50, v51, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0, v52, v53, v54, v55, v56, v57);
}

uint64_t JSC::DFG::SpeculativeJIT::compileThrowStaticError(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;

  v9 = (_DWORD *)this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v9, *((_QWORD *)a2 + 3), v12, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v13, v14, v15, v16, v17, v18, v19);
  v26 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v20, v21, v22, v23, v24, v25);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSString *,unsigned int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned int>((char *)v9, (unsigned __int8 *)operationThrowStaticError, v26, v27, v12, *((unsigned int *)a2 + 18), v28, v29, &v39);
  v37 = v9[50];
  if (v37 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v30, v31, v32, v33, v34, v35, v36);
    v37 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v37) = -734491104;
  v9[50] += 4;
  this = JSC::DFG::SpeculativeJIT::noResult((uint64_t)v9, (uint64_t)a2, 0, v32, v33, v34, v35, v36);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v12 > 15)
      v38 = -1;
    else
      v38 = v12;
    --v9[3 * v38 + 1196];
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSString *,unsigned int),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned int>(char *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unsigned __int8 *v61;
  char v62;
  int v63;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v65;
  unsigned int v66;
  unsigned int v67;
  __int16 v68;
  _BYTE v69[6];

  v9 = a6;
  v12 = (uint64_t)a2;
  v13 = (uint64_t)a1;
  if ((_DWORD)a5 != 1)
  {
    v68 = a5 | 0x100;
    v66 = 1;
    v65 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v69[v16 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          if (a1)
            WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v17 |= 1 << v69[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v69[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_56;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v69[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v69[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v13 + 200);
          if (v31 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v65, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v31) = v30;
          *(_DWORD *)(v13 + 200) += 4;
          v18 = v66;
        }
        a1 = (char *)memmove(&v69[v24 - 2], &v69[v24], 2 * v18 - v24 - 2);
        v15 = v66 - 1;
        goto LABEL_32;
      }
      v32 = HIBYTE(v68);
      v62 = v68;
      JSC::MacroAssemblerARM64::swap(v13, (char)v68, SHIBYTE(v68), a4, a5, a6, a7, a8);
      a1 = (char *)memmove(&v68, v69, 2 * v66 - 2);
      v33 = v66 - 1;
      v29 = v66 == 1;
      v67 = v33;
      v34 = (unsigned __int8 *)&v68;
      __src = &v69[2 * v33 - 2];
      if (v29)
      {
        v35 = 0;
        v36 = 0;
        v63 = 0;
        a2 = &v69[2 * v33 - 2];
      }
      else
      {
        v38 = 2 * v33;
        v39 = &v68;
        while (*(unsigned __int8 *)v39 != v32)
        {
          ++v39;
          v38 -= 2;
          if (!v38)
            goto LABEL_43;
        }
        *(_BYTE *)v39 = v62;
LABEL_43:
        v63 = 0;
        v40 = (char *)&v68;
        a2 = __src;
        v41 = __src;
        do
        {
          if (*v34 == v34[1])
          {
            v42 = v34;
            if (v41 != &v69[2 * v67 - 2])
            {
              if (v34 == a2)
              {
                v42 = v41;
              }
              else
              {
                v60 = v40 - (char *)a2;
                v61 = v41;
                a1 = (char *)memmove(v41, a2, v40 - (char *)a2);
                v42 = &v61[v60];
              }
            }
            a2 = v34 + 2;
            ++v63;
            v41 = v42;
          }
          v34 += 2;
          v40 += 2;
        }
        while (v34 < __src);
        v35 = v67;
        v36 = v67;
        __src = v41;
      }
      v37 = &v69[2 * v35 - 2];
      if (a2 != v37)
      {
        a1 = (char *)memmove(__src, a2, v37 - a2);
        v36 = v67;
      }
      v15 = v36 - v63;
LABEL_32:
      v66 = v15;
LABEL_33:
      ;
    }
    while (v15);
  }
LABEL_53:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v13, (JSC::ARM64LogicalImmediate *)v9, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a4, 0, v43, v44, v45, v46, v47);
  else
    JSC::MacroAssemblerARM64::load64(v13, (a3 << 35) + 0x380000001ALL, 0, v43, v44, v45, v46, v47);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v12, v48, v49, v50, v51, v52, v53, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 0, v54, v55, v56, v57, v58, v59);
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorNextUpdateIndexAndMode(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int8x8_t v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  char v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unsigned int v120;
  char v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  char v130;
  unsigned __int8 v131;
  JSC::DFG::Node *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint8x8_t v150;
  __int32 v151;
  uint8x8_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char v198;
  char v199;
  char v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int8x8_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unint64_t v243;
  unint64_t v244;
  unsigned __int8 v245;
  JSC::ARM64LogicalImmediate *v246;
  unsigned __int8 v247;
  int v248[3];
  int v249[3];
  unsigned int v250;
  void *__dst;
  uint64_t p_dst;
  _QWORD v253[8];
  uint64_t v254;
  int v255;
  unsigned int v256;
  int v257[3];
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  char v264;
  _QWORD v265[2];
  char v266;

  v8 = *((_QWORD *)this + 495);
  v9 = *((_QWORD *)a2 + 3);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197C0563CLL);
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197C05644);
  }
  v12 = *(_QWORD *)(v8 + 152);
  v13 = *(_QWORD *)(v12 + 8 * *((_QWORD *)a2 + 3));
  v14 = *(_QWORD *)(v12 + 8 * (v9 + 1));
  v265[0] = this;
  v265[1] = v14;
  v266 = -1;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0564CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    v18 = v17;
    v266 = v17;
    v8 = *((_QWORD *)this + 495);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
    v18 = -1;
  }
  if (v10 <= (int)v9 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197C05654);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 2));
  v20 = v19 & 0xFF00FFFFFFFFFFFFLL;
  v21 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0565CLL);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 2));
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
    v24 = v23;
    v8 = *((_QWORD *)this + 495);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
    v24 = -1;
  }
  v25 = v9 + 3;
  if (v10 <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x197C05664);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v25);
  v244 = v26 & 0xFF00FFFFFFFFFFFFLL;
  if ((v26 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_95;
  v27 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v27 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0566CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v27 + 12))
    LOBYTE(v28) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
  else
LABEL_95:
    LOBYTE(v28) = -1;
  if (v18 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    v18 = v29;
    v266 = v29;
  }
  v245 = v18;
  v264 = v18;
  v30 = -1;
  LOBYTE(v31) = v24;
  if (v24 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
    LOBYTE(v31) = v32;
  }
  v263 = v31;
  if ((_BYTE)v28 == 0xFF)
    LOBYTE(v28) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
  v262 = (char)v28;
  v33 = *((unsigned __int8 *)a2 + 80);
  v247 = v28;
  if (v33 == 2)
  {
    if ((v13 & 0xFC000000000000) == 0x20000000000000)
    {
      v34 = v13 & 0xFF00FFFFFFFFFFFFLL;
      if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_153;
      v35 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v35 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197C05694);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v35 + 12))
        v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
      else
LABEL_153:
        v36 = -1;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&__dst, this, a3, a4, a5, a6, a7, a8);
      v44 = ~*(_DWORD *)(v20 + 48);
      if (v44 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197C05674);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v44 + 8) == 1)
      {
        v45 = v31;
        if ((_BYTE)v31 == 0xFF)
        {
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v22, v38, v39, v40, v41, v42, v43);
          v45 = v46;
        }
        if (v45 > 15)
          v47 = -1;
        else
          v47 = v45;
        ++*((_DWORD *)this + 3 * v47 + 1196);
        v48 = v45;
      }
      else
      {
        v48 = JSC::DFG::SpeculativeJIT::allocate(this, v37, v38, v39, v40, v41, v42, v43);
        v45 = v31;
      }
      if (v36 == -1)
        v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, v38, v39, v40, v41, v42, v43);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v36, (char)p_dst, v39, v40, v41, v42, v43);
      if (*((_BYTE *)this + 212))
      {
        v54 = v31;
        v55 = (char)p_dst;
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v247 | 0x1000000000, *((char *)this + 304), v49, v50, v51, v52, v53);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v55, 17, v56, v57, v58, v59, (uint64_t)v249);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 5uLL, (JSC::DFG::Node *)0xFF80000000, a2, v249);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v247 | 0x2400000000, (char)p_dst, v60, v61, v62, v63, v64);
        JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)7, p_dst, (char)p_dst);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, (char)p_dst, 2, v65, v66, v67, v68, (uint64_t)v248);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 5uLL, (JSC::DFG::Node *)0xFF80000000, a2, v248);
        if (p_dst == v245)
        {
LABEL_47:
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v54, v72, v73, v74, v75, (uint64_t)&v260, v76);
          v89 = (char)p_dst | (32 * (char)p_dst) | 0x11000400;
          v90 = *((_DWORD *)this + 50);
          if (v90 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v82, v83, v84, v85, v86, v87, v88);
            v90 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v90) = v89;
          *((_DWORD *)this + 50) += 4;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v260, (uint64_t)this, v83, v84, v85, v86, v87, v88);
          v97 = *((_QWORD *)this + 495);
          if (*(_DWORD *)(v97 + 308) <= -*((_DWORD *)a2 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x197C0567CLL);
          }
          if (*(_WORD *)(*(_QWORD *)(v97 + 296) + 8 * -*((_DWORD *)a2 + 12)))
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)2, v48, v92, v93, v94, v95, v96);
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v91, v92, v93, v94, v95, v96);
          v98 = *((_QWORD *)this + 495);
          v99 = *((_DWORD *)a2 + 12);
          v100 = ~v99;
          v101 = *(_DWORD *)(v98 + 308);
          if (v101 <= v100)
          {
            __break(0xC471u);
            JUMPOUT(0x197C05684);
          }
          v102 = *(_QWORD *)(v98 + 296);
          v103 = *(unsigned __int16 *)(v102 + 8 * ~v99);
          if (*(_WORD *)(v102 + 8 * ~v99))
          {
            v104 = *(_DWORD *)(v102 + 8 * v100 + 4);
            v105 = ~v104;
            if (v105 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197C0569CLL);
            }
            v106 = p_dst;
            v107 = *((_QWORD *)this + 499) + 24 * (int)v105;
            if ((char)p_dst > 15)
              v108 = -1;
            else
              v108 = (char)p_dst;
            v109 = (char *)this + 12 * v108;
            *((_DWORD *)v109 + 1194) = v104;
            *((_DWORD *)v109 + 1195) = 5;
            *(_QWORD *)v107 = a2;
            *(_DWORD *)(v107 + 8) = v103;
            *(_BYTE *)(v107 + 17) = v106;
            *(_DWORD *)(v107 + 12) = 1;
            *(_BYTE *)(v107 + 16) = 0;
            v98 = *((_QWORD *)this + 495);
            v99 = *((_DWORD *)a2 + 12);
            v101 = *(_DWORD *)(v98 + 308);
          }
          v110 = -v99;
          if (v101 <= v110)
          {
            __break(0xC471u);
            JUMPOUT(0x197C0568CLL);
          }
          v111 = *(_QWORD *)(v98 + 296);
          v112 = *(unsigned __int16 *)(v111 + 8 * v110);
          if (*(_WORD *)(v111 + 8 * v110))
          {
            v113 = *(_DWORD *)(v111 + 8 * v110 + 4);
            v114 = ~v113;
            if (v114 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197C056A4);
            }
            if (v48 > 15)
              v115 = -1;
            else
              v115 = v48;
            v116 = (char *)this + 12 * v115;
            v117 = *((_QWORD *)this + 499);
            *((_DWORD *)v116 + 1194) = v113;
            v118 = v117 + 24 * (int)v114;
            *((_DWORD *)v116 + 1195) = 5;
            *(_QWORD *)v118 = a2;
            *(_DWORD *)(v118 + 8) = v112;
            *(_BYTE *)(v118 + 17) = v48;
            *(_DWORD *)(v118 + 12) = 1;
            *(_BYTE *)(v118 + 16) = 0;
          }
          if (v48 != -1)
          {
            if (v48 > 15)
              v119 = -1;
            else
              v119 = v48;
            --*((_DWORD *)this + 3 * v119 + 1196);
          }
          if (__dst)
          {
            v120 = (char)p_dst;
            if ((char)p_dst != -1)
            {
              if ((char)p_dst > 15)
                v120 = -1;
              --*((_DWORD *)__dst + 3 * v120 + 1196);
            }
          }
          if (v34)
          {
            if (v36 > 15)
              v121 = -1;
            else
              v121 = v36;
            --*((_DWORD *)this + 3 * v121 + 1196);
          }
          LOBYTE(v28) = v247;
          goto LABEL_82;
        }
        if (v245 == 63)
        {
          if (p_dst != 31)
          {
            v79 = p_dst & 0x1F | 0xD2800000;
            goto LABEL_44;
          }
        }
        else if (v245 != 31 && (char)p_dst != 31)
        {
          v77 = p_dst | ((v245 & 0x1F) << 16);
          v78 = -1442839584;
LABEL_43:
          v79 = v77 | v78;
LABEL_44:
          v81 = (unsigned int *)((char *)this + 200);
          v80 = *((_DWORD *)this + 50);
          if (v80 + 4 > *((_DWORD *)this + 48))
          {
            v76 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v69, v70, v71, v72, v73, v74, v75).n128_u64[0];
            v80 = *v81;
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v80) = v79;
          *v81 += 4;
          goto LABEL_47;
        }
        v77 = (char)p_dst | (32 * (char)v245);
        v78 = -1862270976;
        goto LABEL_43;
      }
      __break(0xC471u);
LABEL_232:
      JUMPOUT(0x197C055BCLL);
    }
  }
  else if (v33 == 1)
  {
LABEL_190:
    v45 = v31;
    JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateStrictInt32Operand>((uint64_t)&v260, this, (uint64_t)v265, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v258, this, v204, v205, v206, v207, v208, v209);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v28 | 0x1C00000000, 0, v210, v211, v212, v213, (uint64_t)v257);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 5uLL, (JSC::DFG::Node *)0xFF80000000, a2, v257);
    v256 = -1;
    v254 = 0xFFFFFFFFLL;
    v255 = -16773311;
    __dst = WTF::ScopedLambdaFunctor<std::tuple<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID> ()(void),JSC::DFG::SpeculativeJIT::compileEnumeratorNextUpdateIndexAndMode(JSC::DFG::Node *)::$_0>::implFunction;
    p_dst = (uint64_t)&__dst;
    v253[0] = &v260;
    v253[1] = &v258;
    v253[2] = this;
    v253[3] = &v264;
    v253[4] = &v263;
    v253[5] = &v256;
    v253[6] = &v254;
    v253[7] = &v262;
    JSC::DFG::SpeculativeJIT::compileHasIndexedProperty((uint64_t)this, (uint64_t)a2, (uint64_t)operationHasEnumerableIndexedProperty, (uint64_t)&__dst, v214, v215, v216, v217);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v259, v218, v219, v220, v221, (uint64_t)&__dst, v222);
    v250 = v256;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, &v250, (uint64_t)this, v223, v224, v225, v226, v227);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v254, (uint64_t)this, v228, v229, v230, v231, v232, v233);
    v240 = *((_QWORD *)this + 495);
    if (*(_DWORD *)(v240 + 308) > -*((_DWORD *)a2 + 12))
    {
      if (*(_WORD *)(*(_QWORD *)(v240 + 296) + 8 * -*((_DWORD *)a2 + 12)))
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)1, v259, v235, v236, v237, v238, v239);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v234, v235, v236, v237, v238, v239);
      JSC::DFG::SpeculativeJIT::strictInt32TupleResultWithoutUsingChildren((uint64_t)this, v261, (uint64_t)a2, 0);
      JSC::DFG::SpeculativeJIT::strictInt32TupleResultWithoutUsingChildren((uint64_t)this, v259, (uint64_t)a2, 1);
      if (v258)
      {
        v241 = v259;
        if (v259 != -1)
        {
          if (v259 > 15)
            v241 = -1;
          --*(_DWORD *)(v258 + 12 * v241 + 4784);
        }
      }
      if (v260)
      {
        v242 = v261;
        if (v261 != -1)
        {
          if (v261 > 15)
            v242 = -1;
          --*(_DWORD *)(v260 + 12 * v242 + 4784);
        }
      }
      goto LABEL_82;
    }
    __break(0xC471u);
    goto LABEL_232;
  }
  v125 = *((unsigned int *)this + 1001);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v126 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v126 >= v125)
    {
      __break(0xC471u);
      JUMPOUT(0x197C056ACLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v126 + 12))
    {
      v30 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
      LODWORD(v125) = *((_DWORD *)this + 1001);
    }
  }
  v127 = ~*(_DWORD *)(v20 + 48);
  if (v127 >= v125)
  {
    __break(0xC471u);
    JUMPOUT(0x197C056B4);
  }
  v243 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v127 + 8) == 1)
  {
    v45 = v31;
    if ((_BYTE)v31 == 0xFF)
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
      v45 = v128;
    }
    if (v45 > 15)
      v129 = -1;
    else
      v129 = v45;
    ++*((_DWORD *)this + 3 * v129 + 1196);
    v130 = v45;
  }
  else
  {
    v130 = JSC::DFG::SpeculativeJIT::allocate(this, v19, a3, a4, a5, a6, a7, a8);
    v45 = v31;
  }
  v131 = v31;
  if (v30 == -1)
    v30 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v19, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v138 = *((unsigned int *)this + 1194);
  LOBYTE(v31) = -1;
  if ((_DWORD)v138 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v138, (uint64_t)v132, v133, v134, v135, v136, v137);
  }
  ++*((_DWORD *)this + 1199);
  v139 = *((unsigned int *)this + 1197);
  if ((_DWORD)v139 != 0x3FFFFFFF)
  {
    *(_QWORD *)((char *)this + 4788) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v139, (uint64_t)v132, v133, v134, v135, v136, v137);
  }
  v142 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v132, v133, v134, v135, v136, v137);
  v28 = v253;
  __dst = v253;
  p_dst = 4;
  if (v30 == 1)
  {
    v143 = 0;
  }
  else
  {
    LOWORD(v253[0]) = v30 | 0x100;
    v143 = 1;
    HIDWORD(p_dst) = 1;
  }
  if (v245 != 2)
  {
    *((_WORD *)v253 + v143++) = v245 | 0x200;
    HIDWORD(p_dst) = v143;
  }
  if (v131 != 3)
  {
    *((_WORD *)v253 + v143++) = v131 | 0x300;
    HIDWORD(p_dst) = v143;
  }
  if (v247 == 4)
  {
    if (!v143)
      goto LABEL_155;
  }
  else
  {
    *((_WORD *)v253 + v143++) = v247 | 0x400;
    HIDWORD(p_dst) = v143;
  }
  v246 = (JSC::ARM64LogicalImmediate *)v140;
  do
  {
    v144 = 0;
    v145 = 0;
    v146 = (char *)__dst;
    v147 = v143;
    do
    {
      if ((*((_BYTE *)__dst + v144 + 1) & 0x40) != 0)
      {
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
      v145 |= 1 << *((_BYTE *)__dst + v144 + 1);
      v144 += 2;
    }
    while (2 * v143 != v144);
    v148 = 0;
    do
    {
      v149 = *((_BYTE *)__dst + v148) & 0x7F;
      if (v149 >= 0x40)
        goto LABEL_189;
      v145 &= ~(1 << v149);
      v148 += 2;
    }
    while (2 * v143 != v148);
    v150 = (uint8x8_t)vcnt_s8((int8x8_t)v145);
    v150.i16[0] = vaddlv_u8(v150);
    v151 = v150.i32[0];
    v152 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v145));
    v152.i16[0] = vaddlv_u8(v152);
    if (v152.i32[0] + v151)
    {
      v31 = 0;
      if (v143 <= 1uLL)
        v153 = 1;
      else
        v153 = v143;
      v154 = 2 * v153;
      while (1)
      {
        v155 = *((unsigned __int8 *)__dst + v31 + 1);
        if ((v155 & 0x7Fu) >= 0x40)
          goto LABEL_189;
        if (((v145 >> (v155 & 0x7F)) & 1) != 0)
          break;
        v31 += 2;
        if (v154 == v31)
          goto LABEL_150;
      }
      v156 = *((unsigned __int8 *)__dst + v31);
      if (v156 != v155)
      {
        v157 = (char)v156;
        if ((char)v156 == 63)
        {
          v158 = *((_DWORD *)this + 50);
          v159 = *((_DWORD *)this + 48);
          if (v155 == 31)
            goto LABEL_152;
          v161 = v155 & 0x1F | 0xD2800000;
        }
        else
        {
          v158 = *((_DWORD *)this + 50);
          v159 = *((_DWORD *)this + 48);
          if ((char)v155 != 31 && v157 != 31)
          {
            v161 = v155 & 0xFFE0FFFF | ((v157 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_146;
          }
LABEL_152:
          v161 = (char)v155 | (32 * v157) | 0x91000000;
        }
LABEL_146:
        if (v158 + 4 > v159)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v140, v141, a4, a5, a6, a7, a8);
          v158 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v158) = v161;
        *((_DWORD *)this + 50) += 4;
        v146 = (char *)__dst;
        v147 = HIDWORD(p_dst);
      }
      memmove(&v146[v31], &v146[v31 + 2], 2 * v147 - v31 - 2);
      v143 = --HIDWORD(p_dst);
    }
    else
    {
      v200 = *(_BYTE *)__dst;
      LOBYTE(v31) = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v31, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(p_dst) - 2);
      v201 = --HIDWORD(p_dst);
      if (HIDWORD(p_dst))
      {
        v202 = __dst;
        v203 = 2 * v201;
        while (*v202 != v31)
        {
          v202 += 2;
          v203 -= 2;
          if (!v203)
            goto LABEL_184;
        }
        *v202 = v200;
      }
LABEL_184:
      WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,4u>(std::array<JSC::ARM64Registers::RegisterID,4u>,std::array<JSC::ARM64Registers::RegisterID,4u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v260, 0);
      v143 = HIDWORD(p_dst);
    }
LABEL_150:
    ;
  }
  while (v143);
  v162 = __dst;
  v140 = (uint64_t)v246;
  if (v253 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(p_dst) = 0;
    WTF::fastFree((unint64_t)v162, v246, v141, a4, a5, a6, a7, a8);
    v140 = (uint64_t)v246;
  }
LABEL_155:
  if ((_DWORD)v142 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v140, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v142 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  LOBYTE(v28) = v247;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationEnumeratorNextUpdateIndexAndMode, v163, v164, v165, v166, v167, v168, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0xFFFFFFFFLL, v169, v170, v171, v172, v173, v174);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v175, v176, v177, v178, v179, v180);
  v181 = *((_QWORD *)this + 495);
  v182 = *((_DWORD *)a2 + 12);
  v183 = ~v182;
  v184 = *(_DWORD *)(v181 + 308);
  if (v184 <= v183)
  {
    __break(0xC471u);
    JUMPOUT(0x197C056BCLL);
  }
  v185 = *(_QWORD *)(v181 + 296);
  v186 = *(unsigned __int16 *)(v185 + 8 * ~v182);
  if (*(_WORD *)(v185 + 8 * ~v182))
  {
    v187 = *(_DWORD *)(v185 + 8 * v183 + 4);
    v188 = ~v187;
    if (v188 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C056CCLL);
    }
    v189 = *((_QWORD *)this + 499) + 24 * (int)v188;
    *((_DWORD *)this + 1194) = v187;
    *((_DWORD *)this + 1195) = 5;
    *(_QWORD *)v189 = a2;
    *(_DWORD *)(v189 + 8) = v186;
    *(_BYTE *)(v189 + 12) = 1;
    *(_DWORD *)(v189 + 13) = 0;
    *(_BYTE *)(v189 + 17) = 0;
    v181 = *((_QWORD *)this + 495);
    v182 = *((_DWORD *)a2 + 12);
    v184 = *(_DWORD *)(v181 + 308);
  }
  v190 = -v182;
  if (v184 <= v190)
  {
    __break(0xC471u);
    JUMPOUT(0x197C056C4);
  }
  v191 = *(_QWORD *)(v181 + 296);
  v192 = *(unsigned __int16 *)(v191 + 8 * v190);
  if (*(_WORD *)(v191 + 8 * v190))
  {
    v193 = *(_DWORD *)(v191 + 8 * v190 + 4);
    v194 = ~v193;
    if (v194 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C056D4);
    }
    v195 = *((_QWORD *)this + 499);
    *((_DWORD *)this + 1197) = v193;
    v196 = v195 + 24 * (int)v194;
    *((_DWORD *)this + 1198) = 5;
    *(_QWORD *)v196 = a2;
    *(_DWORD *)(v196 + 8) = v192;
    *(_BYTE *)(v196 + 17) = 1;
    *(_DWORD *)(v196 + 12) = 1;
    *(_BYTE *)(v196 + 16) = 0;
  }
  v197 = (char *)this + 4776;
  --*((_DWORD *)this + 1199);
  --*((_DWORD *)this + 1196);
  if (v130 != -1)
  {
    if (v130 > 15)
      v198 = -1;
    else
      v198 = v130;
    --*(_DWORD *)&v197[12 * v198 + 8];
  }
  if (v243)
  {
    if (v30 > 15)
      v199 = -1;
    else
      v199 = v30;
    --*(_DWORD *)&v197[12 * v199 + 8];
  }
LABEL_82:
  if (v244)
  {
    if ((char)v28 > 15)
      v122 = -1;
    else
      v122 = (char)v28;
    --*((_DWORD *)this + 3 * v122 + 1196);
  }
  if (v45 > 15)
    v123 = -1;
  else
    v123 = v45;
  --*((_DWORD *)this + 3 * v123 + 1196);
  v124 = v266;
  if (v266 > 15)
    v124 = -1;
  --*(_DWORD *)(v265[0] + 12 * v124 + 4784);
}

void JSC::DFG::SpeculativeJIT::compileHasIndexedProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  JSC::DFG::Node *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  unsigned int v74;
  _BYTE *v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  _BYTE *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  WTF *v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  _DWORD *v132;
  uint64_t *v133;
  int v134;
  unsigned int v135;
  _DWORD *v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int8x8_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  unint64_t v274;
  WTF *v275;
  unsigned int v276;
  _BYTE v277[24];
  uint64_t v278;
  _DWORD v279[2];
  char v280;
  __int16 v281;
  char v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  WTF *v307;
  uint64_t v308;
  _BYTE v309[24];
  _BYTE v310[12];
  unsigned int v311;
  _BYTE v312[24];
  _BYTE v313[12];
  unsigned int v314;
  _BYTE v315[24];
  _BYTE v316[12];
  unsigned int v317;
  _BYTE v318[24];
  __int128 v319;
  _BYTE v320[32];

  v8 = *(_QWORD *)(a1 + 3960);
  if (*(_DWORD *)(v8 + 164) <= *(_QWORD *)(a2 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197C066ACLL);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C066B4);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v14 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v13, a3, a4, a5, a6, a7, a8), (_DWORD)v15 == -1))
  {
LABEL_6:
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v13, a3, a4, a5, a6, a7, a8);
  }
  if ((v13 & 0xFC000000000000) == 0x2C000000000000)
    JSC::DFG::SpeculativeJIT::speculateObject(a1, v13, v15, a4, a5, a6, a7, a8);
  v307 = (WTF *)v309;
  v308 = 2;
  v274 = v13 & 0xFF00FFFFFFFFFFFFLL;
  v272 = a3;
  if (*(_WORD *)(a2 + 18) == 146)
    v16 = *(_DWORD *)(a2 + 80);
  else
    v16 = *(_DWORD *)(a2 + 72);
  v17 = BYTE2(v16);
  v273 = v15;
  if (v16 == 9)
    goto LABEL_12;
  if (v16 != 8)
  {
    if (v16 == 10)
    {
      v187 = *(_QWORD *)(a1 + 3960);
      v193 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a2) + *(_DWORD *)(a2 + 24);
      if (*(_DWORD *)(v187 + 164) > v193)
      {
        JSC::DFG::StorageOperand::StorageOperand((uint64_t)&v319, a1, *(_QWORD *)(*(_QWORD *)(v187 + 152) + 8 * v193), v188, v189, v190, v191, v192);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v316, (JSC::DFG::SpeculativeJIT *)a1, v194, v195, v196, v197, v198, v199);
        v206 = v320[0];
        if (v320[0] == 255)
        {
          v206 = JSC::DFG::SpeculativeJIT::fillStorage(v319, *((unint64_t *)&v319 + 1), v200, v201, v202, v203, v204, v205);
          v320[0] = v206;
        }
        v207 = v316[8];
        v48 = (*(uint64_t (**)(_QWORD))a4)(*(_QWORD *)(a4 + 8));
        JSC::MacroAssemblerARM64::branch32(a1, 2, (char)v48, v206 | 0xFFFFFFFC00000000, v208, v209, v210, v211, (uint64_t)v313);
        if (v17 <= 1)
        {
          v289 = *(_DWORD *)v313;
          v290 = *(_QWORD *)&v313[4];
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v289);
        }
        else
        {
          v287 = *(_DWORD *)v313;
          v288 = *(_QWORD *)&v313[4];
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v307, &v287, v212, v213, v214, v215, v216, v217);
        }
        JSC::MacroAssemblerARM64::load64(a1, v206 | ((unint64_t)v48 << 8) | 0x300000000, 0x200000010uLL, v207, v218, v219, v220, v221);
        if (v17)
        {
          JSC::MacroAssemblerARM64::branchTest64(a1, 0, v207, 0xFFFFFFFFLL, v223, v224, v225, v226, (uint64_t)v310, v227);
          if (v17 < 2)
          {
            v283 = *(_DWORD *)v310;
            v284 = *(_QWORD *)&v310[4];
            JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v283);
          }
          else
          {
            v285 = *(_DWORD *)v310;
            v286 = *(_QWORD *)&v310[4];
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v307, &v285, v228, v229, v230, v231, v232, v233);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, (v48 >> 8), v234, v235, v236, v237, v238);
        }
        else
        {
          JSC::AssemblyHelpers::isNotEmpty((_DWORD *)a1, v207, (v48 >> 8), v222, v223, v224, v225, v226);
        }
        if (*(_QWORD *)v316)
        {
          v239 = v316[8];
          if (v316[8] != -1)
          {
            if (v316[8] > 15)
              v239 = -1;
            --*(_DWORD *)(*(_QWORD *)v316 + 12 * v239 + 4784);
          }
        }
        v240 = v320[0];
        if (v320[0] != -1)
        {
          if (v320[0] > 15)
            v240 = -1;
          --*(_DWORD *)(v319 + 12 * v240 + 4784);
        }
        v59 = HIBYTE(v48);
        goto LABEL_36;
      }
      goto LABEL_196;
    }
    if (v16 != 7)
    {
      v48 = (*(uint64_t (**)(_QWORD))a4)(*(_QWORD *)(a4 + 8));
      v59 = HIBYTE(v48);
      JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v241, v242, v243, v244, v245, v246, v247, (int *)&v319);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v248, v249, v250, v251, v252, v253);
      if (*(_BYTE *)(a1 + 328))
        v260 = 69;
      else
        v260 = 65;
      v279[0] = v319;
      v279[1] = 0;
      v280 = v260;
      v281 = 15;
      v282 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v307, v279, v254, v255, v256, v257, v258, v259);
      goto LABEL_36;
    }
LABEL_12:
    v18 = *(_QWORD *)(a1 + 3960);
    v25 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a2) + *(_DWORD *)(a2 + 24);
    if (*(_DWORD *)(v18 + 164) <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066BCLL);
    }
    v26 = *(_QWORD *)(*(_QWORD *)(v18 + 152) + 8 * v25);
    v27 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v27 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C066C4);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v27 + 12))
    {
      v28 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v26, v19, v20, v21, v22, v23, v24);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v319, (JSC::DFG::SpeculativeJIT *)a1, v29, v30, v31, v32, v33, v34);
      if (v28 != -1)
        goto LABEL_17;
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v319, (JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24);
    }
    LOBYTE(v28) = JSC::DFG::SpeculativeJIT::fillStorage(a1, v26, v35, v36, v37, v38, v39, v40);
LABEL_17:
    v41 = BYTE8(v319);
    v42 = (*(uint64_t (**)(_QWORD))a4)(*(_QWORD *)(a4 + 8));
    if (*(_BYTE *)(a1 + 212))
    {
      v48 = v42;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load32(a1, v28 | 0xFFFFFFF800000000, *(char *)(a1 + 304), v43, v44, v45, v46, v47);
      JSC::MacroAssemblerARM64::branch32(a1, 2, (char)v48, 17, v49, v50, v51, v52, (uint64_t)v316);
      v58 = *(_DWORD *)v316;
      if (v17 > 1)
      {
        v303 = *(_DWORD *)v316;
        v304 = *(_QWORD *)&v316[4];
        if (*(_DWORD *)v316 != -1)
        {
          v131 = HIDWORD(v308);
          if (HIDWORD(v308) == (_DWORD)v308)
          {
            v132 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v307, (void *)(HIDWORD(v308) + 1), (unint64_t)&v303, v53, v54, v55, v56, v57);
            v134 = *v132;
            v133 = (uint64_t *)(v132 + 1);
            v58 = v134;
            v131 = HIDWORD(v308);
          }
          else
          {
            v133 = &v304;
          }
          v185 = (char *)v307 + 12 * v131;
          *(_DWORD *)v185 = v58;
          *(_QWORD *)(v185 + 4) = *v133;
          ++HIDWORD(v308);
        }
      }
      else
      {
        v305 = *(_DWORD *)v316;
        v306 = *(_QWORD *)&v316[4];
        JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v305);
      }
      v59 = HIBYTE(v48);
      JSC::MacroAssemblerARM64::load64(a1, v28 | ((unint64_t)v48 << 8) | 0x300000000, 0x200000000uLL, v41, v54, v55, v56, v57);
      if (v17)
      {
        JSC::MacroAssemblerARM64::branchTest64(a1, 0, v41, 0xFFFFFFFFLL, v63, v64, v65, v66, (uint64_t)v313, v67);
        v129 = *(_DWORD *)v313;
        if (v17 >= 2)
        {
          v301 = *(_DWORD *)v313;
          v302 = *(_QWORD *)&v313[4];
          if (*(_DWORD *)v313 != -1)
          {
            v135 = HIDWORD(v308);
            if (HIDWORD(v308) == (_DWORD)v308)
            {
              v136 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v307, (void *)(HIDWORD(v308) + 1), (unint64_t)&v301, v62, v63, v64, v65, v66);
              v138 = *v136;
              v137 = (uint64_t *)(v136 + 1);
              v129 = v138;
              v135 = HIDWORD(v308);
            }
            else
            {
              v137 = &v302;
            }
            v186 = (char *)v307 + 12 * v135;
            *(_DWORD *)v186 = v129;
            *(_QWORD *)(v186 + 4) = *v137;
            ++HIDWORD(v308);
          }
        }
        else
        {
          v299 = *(_DWORD *)v313;
          v300 = *(_QWORD *)&v313[4];
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v299);
        }
        v130 = *(_DWORD *)(a1 + 200);
        if (v130 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v128, (uint64_t)v61, v62, v63, v64, v65, v66);
          v130 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v130) = (v48 >> 8) | 0x320003E0;
      }
      else
      {
        v68 = (unsigned __int16)(32 * (v41 & 0x1F)) | ((v41 & 0x1F) << 16) | 0xEA00001F;
        v69 = *(_DWORD *)(a1 + 200);
        if (v69 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, (uint64_t)v61, v62, v63, v64, v65, v66);
          v69 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = v68;
        v70 = *(_DWORD *)(a1 + 200);
        v71 = v70 + 4;
        *(_DWORD *)(a1 + 200) = v70 + 4;
        if ((v70 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, (uint64_t)v61, v62, v63, v64, v65, v66);
          v71 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = HIBYTE(v48) | 0x1A9F07E0;
      }
      *(_DWORD *)(a1 + 200) += 4;
      if ((_QWORD)v319)
      {
        v72 = SBYTE8(v319);
        if (SBYTE8(v319) != -1)
        {
          if (SBYTE8(v319) > 15)
            v72 = -1;
          --*(_DWORD *)(v319 + 12 * v72 + 4784);
        }
      }
      if (v28 != 255)
      {
        if ((char)v28 > 15)
          v73 = -1;
        else
          v73 = v28;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
LABEL_196:
    __break(0xC471u);
    JUMPOUT(0x197C06534);
  }
  v139 = *(_QWORD *)(a1 + 3960);
  v146 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a2) + *(_DWORD *)(a2 + 24);
  if (*(_DWORD *)(v139 + 164) <= v146)
  {
    __break(0xC471u);
    JUMPOUT(0x197C066F4);
  }
  v147 = *(_QWORD *)(*(_QWORD *)(v139 + 152) + 8 * v146);
  v148 = ~*(_DWORD *)((v147 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v148 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C066FCLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v148 + 12))
    v149 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v147, v140, v141, v142, v143, v144, v145);
  else
    v149 = -1;
  v150 = 0;
  v151 = a1 + 4968;
  v152 = (_DWORD *)(a1 + 4976);
  v153 = 0x17u;
  v154 = -1;
  while (*v152)
  {
LABEL_122:
    ++v150;
    v152 += 3;
    if (v150 == 23)
    {
      v150 = v153;
      v156 = (unsigned int *)(v151 + 12 * v153);
      v157 = *v156;
      *(_QWORD *)v156 = 0xFFFFFFFF3FFFFFFFLL;
      v152 = v156 + 2;
      goto LABEL_125;
    }
  }
  v155 = *(v152 - 1);
  if (v155 != -1)
  {
    if (v155 < v154)
    {
      v153 = v150;
      v154 = *(v152 - 1);
    }
    goto LABEL_122;
  }
  v157 = *(v152 - 2);
  *((_QWORD *)v152 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_125:
  *v152 = 1;
  v158 = JSC::FPRInfo::toRegister::registerForIndex[v150];
  if (v157 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(a1, v157, v140, v141, v142, v143, v144, v145);
  if (v149 == 0xFF)
    v149 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v147, v140, v141, v142, v143, v144, v145);
  v159 = (*(uint64_t (**)(_QWORD))a4)(*(_QWORD *)(a4 + 8));
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C06674);
  }
  v48 = v159;
  v165 = v149;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, v149 | 0xFFFFFFF800000000, *(char *)(a1 + 304), v160, v161, v162, v163, v164);
  JSC::MacroAssemblerARM64::branch32(a1, 2, (char)v48, 17, v166, v167, v168, v169, (uint64_t)&v319);
  if (v17 > 1)
  {
    v295 = v319;
    v296 = *(_QWORD *)((char *)&v319 + 4);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v307, &v295, v170, v171, v172, v173, v174, v175);
  }
  else
  {
    v297 = v319;
    v298 = *(_QWORD *)((char *)&v319 + 4);
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v297);
  }
  v59 = HIBYTE(v48);
  JSC::MacroAssemblerARM64::loadDouble(a1, v165 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v48 << 8) | 0x300000000, 0x200000000uLL, v158, v176, v177, v178, v179);
  if (v17)
  {
    JSC::AssemblyHelpers::branchIfNaN((_DWORD *)a1, v158, (uint64_t)v61, v62, v63, v64, v65, v66, (uint64_t)v316);
    if (v17 >= 2)
    {
      v293 = *(_DWORD *)v316;
      v294 = *(_QWORD *)&v316[4];
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v307, &v293, v261, v262, v263, v264, v265, v266);
    }
    else
    {
      v291 = *(_DWORD *)v316;
      v292 = *(_QWORD *)&v316[4];
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v291);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, (v48 >> 8), v267, v268, v269, v270, v271);
  }
  else
  {
    v181 = *(_DWORD *)(a1 + 200);
    if (v181 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v180, (uint64_t)v61, v62, v63, v64, v65, v66);
      v181 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v181) = (32 * v158) | ((_DWORD)v158 << 16) | 0x1E602000;
    v182 = *(_DWORD *)(a1 + 200);
    v183 = v182 + 4;
    *(_DWORD *)(a1 + 200) = v182 + 4;
    if ((v182 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v180, (uint64_t)v61, v62, v63, v64, v65, v66);
      v183 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v183) = HIBYTE(v48) | 0x1A9F17E0;
    *(_DWORD *)(a1 + 200) += 4;
    v59 = HIBYTE(v48);
  }
  v184 = v151 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v158];
  --*(_DWORD *)(v184 + 8);
  if ((_DWORD)v165 != 255)
  {
    if ((char)v165 > 15)
      v73 = -1;
    else
      v73 = v165;
LABEL_35:
    --*(_DWORD *)(a1 + 12 * v73 + 4784);
  }
LABEL_36:
  v74 = HIDWORD(v308);
  v275 = (WTF *)v277;
  v276 = HIDWORD(v308);
  if (HIDWORD(v308) < 3)
  {
    v75 = v277;
  }
  else
  {
    if (HIDWORD(v308) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066CCLL);
    }
    v75 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v308)));
    v275 = (WTF *)v75;
    v74 = HIDWORD(v308);
  }
  if (v74)
  {
    v76 = v307;
    v77 = (WTF *)((char *)v307 + 12 * v74);
    do
    {
      *(_DWORD *)v75 = *(_DWORD *)v76;
      *(_QWORD *)(v75 + 4) = *(_QWORD *)((char *)v76 + 4);
      v76 = (WTF *)((char *)v76 + 12);
      v75 += 12;
    }
    while (v76 != v77);
  }
  v78 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v61, v62, v63, v64, v65, v66);
  v80 = v79;
  v81 = v276;
  *(_QWORD *)v310 = v312;
  *(_DWORD *)&v310[8] = 2;
  v311 = v276;
  if (v276 < 3)
  {
    v82 = v312;
  }
  else
  {
    if (v276 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066D4);
    }
    v82 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v276));
    *(_DWORD *)&v310[8] = 12 * v276 / 0xC;
    *(_QWORD *)v310 = v82;
    v81 = v276;
  }
  if (v81)
  {
    v83 = v275;
    v84 = (WTF *)((char *)v275 + 12 * v81);
    do
    {
      *(_DWORD *)v82 = *(_DWORD *)v83;
      *(_QWORD *)(v82 + 4) = *(_QWORD *)((char *)v83 + 4);
      v83 = (WTF *)((char *)v83 + 12);
      v82 += 12;
    }
    while (v83 != v84);
  }
  v85 = WTF::fastMalloc((WTF *)0xB8);
  v86 = v311;
  *(_QWORD *)v313 = v315;
  *(_DWORD *)&v313[8] = 2;
  v314 = v311;
  if (v311 < 3)
  {
    v88 = v315;
  }
  else
  {
    if (v311 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066DCLL);
    }
    v87 = 12 * v311;
    v88 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v311));
    *(_DWORD *)&v313[8] = (v87 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v313 = v88;
    v86 = v311;
  }
  if (v86)
  {
    v89 = *(_QWORD *)v310;
    v90 = *(_QWORD *)v310 + 12 * v86;
    do
    {
      *(_DWORD *)v88 = *(_DWORD *)v89;
      *(_QWORD *)(v88 + 4) = *(_QWORD *)(v89 + 4);
      v89 += 12;
      v88 += 12;
    }
    while (v89 != v90);
  }
  v91 = v314;
  *(_QWORD *)v316 = v318;
  *(_DWORD *)&v316[8] = 2;
  v317 = v314;
  if (v314 < 3)
  {
    v92 = v78;
    v94 = v318;
  }
  else
  {
    if (v314 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066E4);
    }
    v92 = v78;
    v93 = 12 * v314;
    v94 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v314));
    *(_DWORD *)&v316[8] = (v93 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v316 = v94;
    v91 = v314;
  }
  if (v91)
  {
    v95 = *(_QWORD *)v313;
    v96 = *(_QWORD *)v313 + 12 * v91;
    do
    {
      *(_DWORD *)v94 = *(_DWORD *)v95;
      *(_QWORD *)(v94 + 4) = *(_QWORD *)(v95 + 4);
      v95 += 12;
      v94 += 12;
    }
    while (v95 != v96);
  }
  v97 = v317;
  *(_QWORD *)&v319 = v320;
  DWORD2(v319) = 2;
  HIDWORD(v319) = v317;
  if (v317 < 3)
  {
    v99 = v320;
  }
  else
  {
    if (v317 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C066ECLL);
    }
    v98 = 12 * v317;
    v99 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v317));
    DWORD2(v319) = (v98 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v319 = v99;
    v97 = v317;
  }
  if (v97)
  {
    v100 = *(_QWORD *)v316;
    v101 = *(_QWORD *)v316 + 12 * v97;
    do
    {
      *(_DWORD *)v99 = *(_DWORD *)v100;
      *(_QWORD *)(v99 + 4) = *(_QWORD *)(v100 + 4);
      v100 += 12;
      v99 += 12;
    }
    while (v100 != v101);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v85, (uint64_t *)&v319, (_DWORD *)a1);
  v109 = v319;
  if (v320 != (_BYTE *)v319 && (_QWORD)v319 != 0)
  {
    *(_QWORD *)&v319 = 0;
    DWORD2(v319) = 0;
    WTF::fastFree(v109, v102, v103, v104, v105, v106, v107, v108);
  }
  *(_QWORD *)v85 = off_1E3574280;
  *(_QWORD *)(v85 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v85 + 100) = 0;
  *(_BYTE *)(v85 + 102) = v59;
  *(_QWORD *)(v85 + 104) = v85 + 120;
  *(_QWORD *)(v85 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v85 + 104, v59, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v107, v108);
  v118 = *(_QWORD *)v316;
  if (v318 != *(_BYTE **)v316 && *(_QWORD *)v316)
  {
    memset(v316, 0, sizeof(v316));
    WTF::fastFree(v118, v111, v112, v113, v114, v115, v116, v117);
  }
  *(_QWORD *)v85 = &off_1E3574250;
  *(_QWORD *)(v85 + 152) = v272;
  *(_QWORD *)(v85 + 160) = v92;
  *(_QWORD *)(v85 + 168) = v80;
  *(_BYTE *)(v85 + 176) = v273;
  *(_BYTE *)(v85 + 177) = v48;
  v278 = v85;
  v119 = *(_QWORD *)v313;
  if (v315 != *(_BYTE **)v313 && *(_QWORD *)v313)
  {
    memset(v313, 0, sizeof(v313));
    WTF::fastFree(v119, v111, v112, v113, v114, v115, v116, v117);
  }
  v120 = *(_QWORD *)v310;
  if (v312 != *(_BYTE **)v310 && *(_QWORD *)v310)
  {
    memset(v310, 0, sizeof(v310));
    WTF::fastFree(v120, v111, v112, v113, v114, v115, v116, v117);
  }
  v121 = (_QWORD *)(a1 + 5656);
  v122 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v122 == *(_DWORD *)(a1 + 5664))
  {
    v124 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v278);
    v122 = *(unsigned int *)(a1 + 5668);
    v123 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v122);
    v85 = *v124;
  }
  else
  {
    v123 = (uint64_t *)(*v121 + 8 * v122);
    v124 = &v278;
  }
  *v124 = 0;
  *v123 = v85;
  *(_DWORD *)(a1 + 5668) = v122 + 1;
  v125 = v278;
  v278 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v277 != (_BYTE *)v275 && v275)
    WTF::fastFree((unint64_t)v275, v111, v112, v113, v114, v115, v116, v117);
  v126 = v307;
  if (v309 != (_BYTE *)v307 && v307)
  {
    v307 = 0;
    LODWORD(v308) = 0;
    WTF::fastFree((unint64_t)v126, v111, v112, v113, v114, v115, v116, v117);
  }
  if (v274)
  {
    if (v273 > 15)
      v127 = -1;
    else
      v127 = v273;
    --*(_DWORD *)(a1 + 12 * v127 + 4784);
  }
}

double JSC::DFG::SpeculativeJIT::strictInt32TupleResultWithoutUsingChildren(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v4 = *(_QWORD *)(a1 + 3960);
  v5 = (~*(_DWORD *)(a3 + 48) + a4);
  if (*(_DWORD *)(v4 + 308) <= v5)
    goto LABEL_9;
  v6 = *(_QWORD *)(v4 + 296);
  v7 = *(unsigned __int16 *)(v6 + 8 * (~*(_DWORD *)(a3 + 48) + a4));
  if (!*(_WORD *)(v6 + 8 * (~*(_DWORD *)(a3 + 48) + a4)))
    return result;
  v8 = *(_DWORD *)(v6 + 8 * v5 + 4);
  v9 = ~v8;
  if (v9 >= *(unsigned int *)(a1 + 4004))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197C06798);
  }
  if (a2 > 15)
    v10 = -1;
  else
    v10 = a2;
  v11 = a1 + 12 * v10;
  v12 = *(_QWORD *)(a1 + 3992);
  *(_DWORD *)(v11 + 4776) = v8;
  v13 = v12 + 24 * (int)v9;
  *(_DWORD *)(v11 + 4780) = 5;
  *(_QWORD *)v13 = a3;
  *(_DWORD *)(v13 + 8) = v7;
  *(_BYTE *)(v13 + 17) = a2;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(v13 + 12) = 1;
  *(_BYTE *)(v13 + 16) = 0;
  return result;
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorNextUpdatePropertyName(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  JSC::DFG::Node *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int i;
  unsigned int v68;
  char v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int j;
  unsigned int v93;
  char v94;
  int *v95;
  int *v96;
  int v97;
  char *v98;
  uint64_t v99;
  JSC::ARM64LogicalImmediate *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::ARM64LogicalImmediate *v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint8x8_t v115;
  __int32 v116;
  uint8x8_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v127;
  char v128;
  unsigned __int8 v129;
  int v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  int v137;
  JSC::ARM64LogicalImmediate *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int v174;
  char v175;
  unsigned int v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  WTF *v181;
  unint64_t v182;
  unsigned int v183;
  char v184;
  char v185;
  char v186;
  unint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  JSC::AssemblerBuffer *v191;
  int v192;
  JSC::ARM64LogicalImmediate *v193;
  unsigned int v194;
  uint64_t v195;
  WTF *v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  char v202;
  __int16 v203;
  char v204;
  unsigned int v205;
  JSC::ARM64LogicalImmediate *v206;
  int v207;
  int v208;
  char v209;
  __int16 v210;
  char v211;
  _BYTE v212[12];
  WTF *v213;
  uint64_t v214;
  _BYTE v215[24];
  uint64_t v216;
  unsigned __int8 v217;
  __int128 v218;
  _WORD v219[8];

  v8 = *((_QWORD *)a2 + 3);
  v9 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v10 = *((unsigned int *)this + 1001);
  if (v9 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197C07370);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v9 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v14 = v13;
    v10 = *((unsigned int *)this + 1001);
  }
  else
  {
    v14 = 255;
  }
  v15 = *((_QWORD *)a2 + 4);
  v16 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197C07378);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    v18 = v17;
  }
  else
  {
    v18 = 255;
  }
  v19 = *((_QWORD *)a2 + 5);
  v197 = v19 & 0xFF00FFFFFFFFFFFFLL;
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_139;
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C07380);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
  else
LABEL_139:
    v21 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v216, this, a3, a4, a5, a6, a7, a8);
  if ((_BYTE)v14 == 0xFF)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v8, v23, v24, v25, v26, v27, v28);
    v14 = v29;
  }
  if ((_BYTE)v18 == 0xFF)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v15, v23, v24, v25, v26, v27, v28);
    v18 = v30;
  }
  if (v21 == 0xFF)
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, v23, v24, v25, v26, v27, v28);
  v198 = v217;
  v31 = (char)v217;
  v32 = *((_DWORD *)a2 + 20);
  v196 = (WTF *)v215;
  v213 = (WTF *)v215;
  v214 = 2;
  *(_QWORD *)v212 = 0xFFFFFFFFLL;
  *(_DWORD *)&v212[8] = -16773311;
  v39 = JSC::DFG::SpeculativeJIT::flushRegisters(this, v22, v23, v24, v25, v26, v27, v28);
  v40 = (char)v18;
  v41 = (char)v14;
  v199 = v31;
  if ((v32 & 6) != 0)
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 1, (char)v18, v35, v36, v37, v38, (uint64_t)&v218, *(int8x8_t *)&v39);
    *(_DWORD *)v212 = v218;
    *(_QWORD *)&v212[4] = *(_QWORD *)((char *)&v218 + 4);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v21 | 0x1C00000000, *((char *)this + 304), v42, v43, v44, v45, v46);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v14, 17, v47, v48, v49, v50, (uint64_t)&v218);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v21 | 0x800000000, v31, v51, v52, v53, v54, v55);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v198 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v14 << 8) | 0x300000000, 0x200000000uLL, v31, v56, v57, v58, v59);
    for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v60, v61, v62, v63, v64, v65, v66);
        i = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
      i = *((_DWORD *)this + 50) + 4;
    }
    v68 = i;
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v60, v61, v62, v63, v64, v65, v66);
      v68 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v68) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v69 = 69;
    else
      v69 = 65;
    v207 = i;
    v208 = 0;
    v209 = v69;
    v210 = 15;
    v211 = -1;
    v70 = v199;
    if (i != -1)
    {
      if (HIDWORD(v214) == (_DWORD)v214)
      {
        v71 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v213, (void *)(HIDWORD(v214) + 1), (unint64_t)&v207, v62, v63, v64, v65, v66);
        v73 = *v71;
        v72 = v71 + 1;
        v74 = (char *)v213 + 12 * HIDWORD(v214);
        *(_DWORD *)v74 = v73;
      }
      else
      {
        v72 = &v208;
        v74 = (char *)v213 + 12 * HIDWORD(v214);
        *(_DWORD *)v74 = i;
      }
      *(_QWORD *)(v74 + 4) = *(_QWORD *)v72;
      ++HIDWORD(v214);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v218, (uint64_t)this, v61, v62, v63, v64, v65, v66);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v205, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 42208), v75, v76, v77, v78, v79);
    if (v205 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v206, v70, v80, v81, v82, v83, v84);
    else
      JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v205 << 35) + 0x380000001ALL, v70, v80, v81, v82, v83, v84);
    for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
    {
      if ((j + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v85, v86, v87, v88, v89, v90, v91);
        j = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
      j = *((_DWORD *)this + 50) + 4;
    }
    v93 = j;
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v85, v86, v87, v88, v89, v90, v91);
      v93 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v93) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v94 = 69;
    else
      v94 = 65;
    v200 = j;
    v201 = 0;
    v202 = v94;
    v203 = 15;
    v204 = -1;
    if (j != -1)
    {
      if (HIDWORD(v214) == (_DWORD)v214)
      {
        v95 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v213, (void *)(HIDWORD(v214) + 1), (unint64_t)&v200, v87, v88, v89, v90, v91);
        v97 = *v95;
        v96 = v95 + 1;
        v98 = (char *)v213 + 12 * HIDWORD(v214);
        *(_DWORD *)v98 = v97;
      }
      else
      {
        v96 = &v201;
        v98 = (char *)v213 + 12 * HIDWORD(v214);
        *(_DWORD *)v98 = j;
      }
      *(_QWORD *)(v98 + 4) = *(_QWORD *)v96;
      ++HIDWORD(v214);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v212, (uint64_t)this, v86, v87, v88, v89, v90, v91);
  }
  v99 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v33, v34, v35, v36, v37, v38);
  v107 = v100;
  *(_QWORD *)&v218 = v219;
  *((_QWORD *)&v218 + 1) = 3;
  if (v14 == 1)
  {
    v108 = 0;
  }
  else
  {
    v219[0] = v14 | 0x100;
    v108 = 1;
    HIDWORD(v218) = 1;
  }
  v195 = v99;
  if (v18 != 2)
  {
    v219[v108++] = v18 | 0x200;
    HIDWORD(v218) = v108;
  }
  if (v21 == 3)
  {
    if (!v108)
      goto LABEL_99;
  }
  else
  {
    v219[v108++] = v21 | 0x300;
    HIDWORD(v218) = v108;
  }
  v193 = v100;
  v191 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v192 = -1862270976;
  v194 = (char)v18;
  do
  {
    v109 = 0;
    v110 = 0;
    v111 = v218;
    v112 = v108;
    do
    {
      if ((*(_BYTE *)(v218 + v109 + 1) & 0x40) != 0)
      {
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
      v110 |= 1 << *(_BYTE *)(v218 + v109 + 1);
      v109 += 2;
    }
    while (2 * v108 != v109);
    v113 = 0;
    do
    {
      v114 = *(_BYTE *)(v218 + v113) & 0x7F;
      if (v114 >= 0x40)
        goto LABEL_140;
      v110 &= ~(1 << v114);
      v113 += 2;
    }
    while (2 * v108 != v113);
    v115 = (uint8x8_t)vcnt_s8((int8x8_t)v110);
    v115.i16[0] = vaddlv_u8(v115);
    v116 = v115.i32[0];
    v117 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v110));
    v117.i16[0] = vaddlv_u8(v117);
    if (v117.i32[0] + v116)
    {
      v118 = 0;
      if (v108 <= 1uLL)
        v119 = 1;
      else
        v119 = v108;
      v120 = 2 * v119;
      while (1)
      {
        v121 = *(unsigned __int8 *)(v218 + v118 + 1);
        if ((v121 & 0x7Fu) >= 0x40)
          goto LABEL_140;
        if (((v110 >> (v121 & 0x7F)) & 1) != 0)
          break;
        v118 += 2;
        if (v120 == v118)
          goto LABEL_78;
      }
      v122 = *(unsigned __int8 *)(v218 + v118);
      if (v122 == v121)
        goto LABEL_76;
      v123 = (char)v122;
      if ((char)v122 == 63)
      {
        v124 = *((_DWORD *)this + 50);
        v125 = *((_DWORD *)this + 48);
        if ((char)v121 != 31)
        {
          v127 = v121 & 0x1F | 0xD2800000;
          goto LABEL_73;
        }
      }
      else
      {
        v124 = *((_DWORD *)this + 50);
        v125 = *((_DWORD *)this + 48);
        if (v121 != 31 && v123 != 31)
        {
          v127 = v121 & 0xFFE0FFFF | ((v123 & 0x1F) << 16) | 0xAA0003E0;
LABEL_73:
          if (v124 + 4 > v125)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v191, (uint64_t)v100, v101, v102, v103, v104, v105, v106);
            v124 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v124) = v127;
          *((_DWORD *)this + 50) += 4;
          v111 = v218;
          v112 = HIDWORD(v218);
          v40 = v194;
LABEL_76:
          memmove((void *)(v111 + v118), (const void *)(v111 + v118 + 2), 2 * v112 - v118 - 2);
          v108 = HIDWORD(v218) - 1;
          goto LABEL_77;
        }
      }
      v127 = (char)v121 | (32 * v123) | v192;
      goto LABEL_73;
    }
    v189 = v18;
    v190 = v14;
    v128 = *(_BYTE *)v218;
    v129 = *(_BYTE *)(v218 + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v218, (char)v129, v102, v103, v104, v105, v106);
    memmove((void *)v218, (const void *)(v218 + 2), 2 * HIDWORD(v218) - 2);
    v130 = HIDWORD(v218);
    v131 = (HIDWORD(v218) - 1);
    HIDWORD(v218) = v131;
    v14 = v218;
    v40 = v218 + 2 * v131;
    v188 = v41;
    if (v130 == 1)
    {
      v136 = 0;
      v137 = 0;
      v132 = 0;
      v100 = (JSC::ARM64LogicalImmediate *)(v218 + 2 * v131);
    }
    else
    {
      LOBYTE(v108) = v128;
      LODWORD(v111) = v129;
      v112 = 2 * v131;
      v110 = v218;
      while (*(unsigned __int8 *)v110 != (_DWORD)v111)
      {
LABEL_141:
        v110 += 2;
        v112 -= 2;
        if (!v112)
          goto LABEL_84;
      }
      *(_BYTE *)v110 = v108;
LABEL_84:
      v132 = 0;
      v133 = v14;
      v100 = (JSC::ARM64LogicalImmediate *)v40;
      v134 = (char *)v40;
      do
      {
        if (*(unsigned __int8 *)v14 == *(unsigned __int8 *)(v14 + 1))
        {
          v135 = (char *)v14;
          if (v134 != (char *)(v218 + 2 * HIDWORD(v218)))
          {
            if ((JSC::ARM64LogicalImmediate *)v14 == v100)
            {
              v135 = v134;
            }
            else
            {
              v187 = v133 - (_QWORD)v100;
              memmove(v134, v100, v133 - (_QWORD)v100);
              v135 = &v134[v187];
            }
          }
          v100 = (JSC::ARM64LogicalImmediate *)(v14 + 2);
          ++v132;
          v134 = v135;
        }
        v14 += 2;
        v133 += 2;
      }
      while (v14 < v40);
      v14 = v218;
      v136 = HIDWORD(v218);
      v137 = HIDWORD(v218);
      v40 = (unint64_t)v134;
    }
    v138 = (JSC::ARM64LogicalImmediate *)(v14 + 2 * v136);
    v41 = v188;
    if (v100 != v138)
    {
      memmove((void *)v40, v100, v138 - v100);
      v137 = HIDWORD(v218);
    }
    v108 = v137 - v132;
    v14 = v190;
    v18 = v189;
    v40 = v194;
LABEL_77:
    HIDWORD(v218) = v108;
LABEL_78:
    ;
  }
  while (v108);
  v139 = v218;
  v107 = v193;
  if (v219 != (_WORD *)v218 && (_QWORD)v218)
  {
    *(_QWORD *)&v218 = 0;
    DWORD2(v218) = 0;
    WTF::fastFree(v139, v100, v101, v102, v103, v104, v105, v106);
  }
LABEL_99:
  if ((_DWORD)v195 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v107, 0, v102, v103, v104, v105, v106);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v195 << 35) + 0x380000001ALL, 0, v102, v103, v104, v105, v106);
  v146 = v198;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationEnumeratorNextUpdatePropertyName, v140, v141, v142, v143, v144, v145, (int *)&v218);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v147, v148, v149, v150, v151, v152);
  if (v146)
  {
    if (v146 == 31)
    {
      v160 = -1862270945;
    }
    else if (v146 == 255)
    {
      v160 = -1442774017;
    }
    else
    {
      v160 = v146 | 0xAA0003E0;
    }
    v162 = (unsigned int *)((char *)this + 200);
    v161 = *((_DWORD *)this + 50);
    if (v161 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v153, v154, v155, v156, v157, v158, v159);
      v161 = *v162;
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v161) = v160;
    *v162 += 4;
  }
  if (HIDWORD(v214))
  {
    v163 = 0;
    v164 = 0;
    v165 = 12 * HIDWORD(v214);
    do
    {
      if (v164 >= HIDWORD(v214))
      {
        __break(0xC471u);
        JUMPOUT(0x197C07368);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v213 + v163), (uint64_t)this, v154, v155, v156, v157, v158, v159);
      ++v164;
      v163 += 12;
    }
    while (v165 != v163);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v154, v155, v156, v157, v158, v159);
  v173 = (char *)this + 4776;
  v174 = *((_DWORD *)a2 + 12);
  v175 = v199;
  if (v199 > 15)
    v176 = -1;
  else
    v176 = v199;
  v177 = &v173[12 * v176];
  *(_DWORD *)v177 = v174;
  *((_DWORD *)v177 + 1) = 4;
  v178 = ~v174;
  if (v178 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_166:
    JUMPOUT(0x197C071F0);
  }
  v179 = *((_QWORD *)this + 499) + 24 * (int)v178;
  v180 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v179 = a2;
  *(_DWORD *)(v179 + 8) = v180;
  *(_BYTE *)(v179 + 17) = v175;
  *(_DWORD *)(v179 + 12) = 6;
  *(_BYTE *)(v179 + 16) = 0;
  v181 = v213;
  if (v196 != v213 && v213)
  {
    v213 = 0;
    LODWORD(v214) = 0;
    WTF::fastFree((unint64_t)v181, v166, v167, v168, v169, v170, v171, v172);
  }
  v182 = v197;
  if (v216)
  {
    v183 = (char)v217;
    if ((char)v217 != -1)
    {
      if ((char)v217 > 15)
        v183 = -1;
      --*(_DWORD *)(v216 + 12 * v183 + 4784);
    }
  }
  if (v182)
  {
    if ((char)v21 > 15)
      v184 = -1;
    else
      v184 = v21;
    --*(_DWORD *)&v173[12 * v184 + 8];
  }
  if ((int)v40 > 15)
    v185 = -1;
  else
    v185 = v18;
  --*(_DWORD *)&v173[12 * v185 + 8];
  if (v41 > 15)
    v186 = -1;
  else
    v186 = v14;
  --*(_DWORD *)&v173[12 * v186 + 8];
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v33 = a3;
  v8 = *(_QWORD *)(a1 + 3960);
  if (*(_DWORD *)(v8 + 164) <= *(_QWORD *)(a2 + 24))
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  v31[0] = a1;
  v31[1] = (uint64_t)&v34;
  v31[2] = (uint64_t)&v32;
  v31[3] = (uint64_t)&v33;
  v32 = v10;
  v11 = (v10 >> 50) & 0x3F;
  if ((v11 - 8) >= 2)
  {
    v21 = v11 > 0x26;
    v22 = (1 << v11) & 0x7FEAB7F800;
    if (v21 || v22 == 0)
    {
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_23;
      v24 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v24 < *(unsigned int *)(a1 + 4004))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v24 + 12))
        {
          v13 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v10, a3, a4, a5, a6, a7, a8);
          if (v13 != -1)
            goto LABEL_7;
        }
LABEL_23:
        v13 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v10, a3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(JSC::DFG::Node *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int))::{lambda(JSC::JSValueRegs)#1}::operator()(v31, v13, v25, v26, v27, v28, v29, v30);
        if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
        goto LABEL_9;
      }
      __break(0xC471u);
LABEL_28:
      JUMPOUT(0x197C07538);
    }
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_8;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C07540);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v10, a3, a4, a5, a6, a7, a8), v13 == -1))
  {
LABEL_8:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v10, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(JSC::DFG::Node *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int))::{lambda(JSC::JSValueRegs)#1}::operator()(v31, v13, v14, v15, v16, v17, v18, v19);
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      return;
    goto LABEL_9;
  }
LABEL_7:
  JSC::DFG::SpeculativeJIT::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(JSC::DFG::Node *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int))::{lambda(JSC::JSValueRegs)#1}::operator()(v31, v13, a3, a4, a5, a6, a7, a8);
LABEL_9:
  if (v13 > 15)
    v20 = -1;
  else
    v20 = v13;
  --*(_DWORD *)(a1 + 12 * v20 + 4784);
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutByIdFlush(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  signed __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  char v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  JSC::DFG::SpeculativeJIT *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;

  LOBYTE(v67) = 0;
  v69 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_50;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0797CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_50:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  v57 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_49;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_79;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_49:
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v62, this, a3, a4, a5, a6, a7, a8);
  v24 = -1;
  v25 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_10;
  v61 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v67, &v61, v18, v19, v20, v21, v22, v23);
  v61 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v64, &v61, v46, v47, v48, v49, v50, v51);
  if (!v69 || !v66)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    JUMPOUT(0x197C078CCLL);
  }
  v25 = v68;
  v24 = v65;
LABEL_10:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v18, v19, v20, v21, v22, v23);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, v18, v19, v20, v21, v22, v23);
  v26 = v63;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v17, v18, v19, v20, v21, v22, v23);
  v27 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v52 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || ((v53 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v53 != 0x3FFFFFFF)
        ? (v54 = (_DWORD)v53 == -1)
        : (v54 = 1),
          v54))
    {
      v55 = 2;
    }
    else if (v53 >> 28)
    {
      v56 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v56 = v52;
      *(_DWORD *)(v56 + 8) = v53;
      v55 = 1;
      v52 = v56;
    }
    else
    {
      v55 = v52;
      v52 = v53 << 36;
    }
    v27 = v52 | v55;
  }
  v60 = v27;
  v28 = JSC::DFG::Node::cacheableIdentifier(a2);
  v29 = *((unsigned __int16 *)a2 + 9);
  if (v29 == 6)
    goto LABEL_16;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v29 - 101) < 4)
      goto LABEL_54;
    goto LABEL_60;
  }
  v45 = v29 - 117;
  if ((v29 - 117) > 0x3C)
  {
LABEL_58:
    if (v29 == 391)
      goto LABEL_54;
    if (v29 != 253)
    {
LABEL_60:
      __break(0xC471u);
      goto LABEL_80;
    }
LABEL_16:
    v30 = (char *)a2 + 72;
    goto LABEL_17;
  }
  if (((1 << v45) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v45) & 0x4020) != 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_54:
  v30 = (char *)a2 + 80;
LABEL_17:
  if (*v30)
    v31 = 7;
  else
    v31 = 6;
  v58 = 0xFFFFFFFFLL;
  v59 = -16773311;
  JSC::DFG::SpeculativeJIT::cachedPutById(this, (JSC::CodeOrigin *)&v60, v12, v16, v25, v26, v24, v28, v31, (int *)&v58, 1u);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v34, v35, v36, v37, v38);
  if (v62)
  {
    v40 = v63;
    if (v63 != -1)
    {
      if (v63 > 15)
        v40 = -1;
      --*(_DWORD *)(v62 + 12 * v40 + 4784);
    }
  }
  if (v14)
  {
    if (v16 > 15)
      v41 = -1;
    else
      v41 = v16;
    --*((_DWORD *)this + 3 * v41 + 1196);
  }
  if (v57)
  {
    if (v12 > 15)
      v42 = -1;
    else
      v42 = v12;
    --*((_DWORD *)this + 3 * v42 + 1196);
  }
  if (v66)
  {
    if (v64)
    {
      v43 = v65;
      if (v65 != -1)
      {
        if (v65 > 15)
          v43 = -1;
        --*(_DWORD *)(v64 + 12 * v43 + 4784);
      }
    }
  }
  if (v69)
  {
    if (v67)
    {
      v44 = v68;
      if (v68 != -1)
      {
        if (v68 > 15)
          v44 = -1;
        --*(_DWORD *)(v67 + 12 * v44 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  signed __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  JSC::DFG::SpeculativeJIT *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;

  LOBYTE(v66) = 0;
  v68 = 0;
  LOBYTE(v63) = 0;
  v65 = 0;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_50;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C07DACLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_50:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  v56 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_49;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_79;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_49:
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v61, this, a3, a4, a5, a6, a7, a8);
  v23 = -1;
  v24 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_10;
  v60 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v66, &v60, v17, v18, v19, v20, v21, v22);
  v60 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v63, &v60, v49, v50, v51, v52, v53, v54);
  if (!v68 || !v65)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    JUMPOUT(0x197C07CFCLL);
  }
  v24 = v67;
  v23 = v64;
LABEL_10:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v17, v18, v19, v20, v21, v22);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, v17, v18, v19, v20, v21, v22);
  v25 = v62;
  v26 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v45 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v46 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v55 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = v45;
      *(_DWORD *)(v55 + 8) = v46;
      v48 = 1;
      v45 = v55;
    }
    else
    {
      v48 = v45;
      v45 = v46 << 36;
    }
    v26 = v45 | v48;
  }
  v59 = v26;
  v27 = JSC::DFG::Node::cacheableIdentifier(a2);
  v28 = *((unsigned __int16 *)a2 + 9);
  if (v28 == 6)
    goto LABEL_16;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v28 - 101) < 4)
      goto LABEL_54;
    goto LABEL_60;
  }
  v44 = v28 - 117;
  if ((v28 - 117) > 0x3C)
  {
LABEL_58:
    if (v28 == 391)
      goto LABEL_54;
    if (v28 != 253)
    {
LABEL_60:
      __break(0xC471u);
      goto LABEL_80;
    }
LABEL_16:
    v29 = (char *)a2 + 72;
    goto LABEL_17;
  }
  if (((1 << v44) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v44) & 0x4020) != 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_54:
  v29 = (char *)a2 + 80;
LABEL_17:
  if (*v29)
    v30 = 7;
  else
    v30 = 6;
  v57 = 0xFFFFFFFFLL;
  v58 = -16773311;
  JSC::DFG::SpeculativeJIT::cachedPutById(this, (JSC::CodeOrigin *)&v59, v12, v16, v24, v25, v23, v27, v30, (int *)&v57, 0);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v31, v32, v33, v34, v35, v36, v37);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v33, v34, v35, v36, v37);
  if (v61)
  {
    v39 = v62;
    if (v62 != -1)
    {
      if (v62 > 15)
        v39 = -1;
      --*(_DWORD *)(v61 + 12 * v39 + 4784);
    }
  }
  if (v14)
  {
    if (v16 > 15)
      v40 = -1;
    else
      v40 = v16;
    --*((_DWORD *)this + 3 * v40 + 1196);
  }
  if (v56)
  {
    if (v12 > 15)
      v41 = -1;
    else
      v41 = v12;
    --*((_DWORD *)this + 3 * v41 + 1196);
  }
  if (v65)
  {
    if (v63)
    {
      v42 = v64;
      if (v64 != -1)
      {
        if (v64 > 15)
          v42 = -1;
        --*(_DWORD *)(v63 + 12 * v42 + 4784);
      }
    }
  }
  if (v68)
  {
    if (v66)
    {
      v43 = v67;
      if (v67 != -1)
      {
        if (v67 > 15)
          v43 = -1;
        --*(_DWORD *)(v66 + 12 * v43 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutByIdDirect(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  signed __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  JSC::DFG::SpeculativeJIT *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;

  LOBYTE(v66) = 0;
  v68 = 0;
  LOBYTE(v63) = 0;
  v65 = 0;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_50;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C081DCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_50:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  v56 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_49;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_79;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_49:
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v61, this, a3, a4, a5, a6, a7, a8);
  v23 = -1;
  v24 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_10;
  v60 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v66, &v60, v17, v18, v19, v20, v21, v22);
  v60 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v63, &v60, v45, v46, v47, v48, v49, v50);
  if (!v68 || !v65)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    JUMPOUT(0x197C0812CLL);
  }
  v24 = v67;
  v23 = v64;
LABEL_10:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v17, v18, v19, v20, v21, v22);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, v17, v18, v19, v20, v21, v22);
  v25 = v62;
  v26 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v51 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v52 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v52 != 0x3FFFFFFF)
        ? (v53 = (_DWORD)v52 == -1)
        : (v53 = 1),
          v53))
    {
      v54 = 2;
    }
    else if (v52 >> 28)
    {
      v55 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = v51;
      *(_DWORD *)(v55 + 8) = v52;
      v54 = 1;
      v51 = v55;
    }
    else
    {
      v54 = v51;
      v51 = v52 << 36;
    }
    v26 = v51 | v54;
  }
  v59 = v26;
  v27 = JSC::DFG::Node::cacheableIdentifier(a2);
  v28 = *((unsigned __int16 *)a2 + 9);
  if (v28 == 6)
    goto LABEL_16;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v28 - 101) < 4)
      goto LABEL_54;
    goto LABEL_60;
  }
  v44 = v28 - 117;
  if ((v28 - 117) > 0x3C)
  {
LABEL_58:
    if (v28 == 391)
      goto LABEL_54;
    if (v28 != 253)
    {
LABEL_60:
      __break(0xC471u);
      goto LABEL_80;
    }
LABEL_16:
    v29 = (char *)a2 + 72;
    goto LABEL_17;
  }
  if (((1 << v44) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v44) & 0x4020) != 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_54:
  v29 = (char *)a2 + 80;
LABEL_17:
  if (*v29)
    v30 = 9;
  else
    v30 = 8;
  v57 = 0xFFFFFFFFLL;
  v58 = -16773311;
  JSC::DFG::SpeculativeJIT::cachedPutById(this, (JSC::CodeOrigin *)&v59, v12, v16, v24, v25, v23, v27, v30, (int *)&v57, 0);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v31, v32, v33, v34, v35, v36, v37);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v33, v34, v35, v36, v37);
  if (v61)
  {
    v39 = v62;
    if (v62 != -1)
    {
      if (v62 > 15)
        v39 = -1;
      --*(_DWORD *)(v61 + 12 * v39 + 4784);
    }
  }
  if (v14)
  {
    if (v16 > 15)
      v40 = -1;
    else
      v40 = v16;
    --*((_DWORD *)this + 3 * v40 + 1196);
  }
  if (v56)
  {
    if (v12 > 15)
      v41 = -1;
    else
      v41 = v12;
    --*((_DWORD *)this + 3 * v41 + 1196);
  }
  if (v65)
  {
    if (v63)
    {
      v42 = v64;
      if (v64 != -1)
      {
        if (v64 > 15)
          v42 = -1;
        --*(_DWORD *)(v63 + 12 * v42 + 4784);
      }
    }
  }
  if (v68)
  {
    if (v66)
    {
      v43 = v67;
      if (v67 != -1)
      {
        if (v67 > 15)
          v43 = -1;
        --*(_DWORD *)(v66 + 12 * v43 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutByIdWithThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  JSC::DFG::Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  JSC::ARM64LogicalImmediate *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint8x8_t v46;
  __int32 v47;
  uint8x8_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  char v59;
  char v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  _BYTE *v65;
  int v66;
  unsigned __int8 *v67;
  char *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  int v71;
  unsigned __int8 *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(JSC::JSGlobalObject *, uint64_t, uint64_t, const JSC::PropertyTable *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  char v101;
  int64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  JSC::ARM64LogicalImmediate *v106;
  JSC::ARM64LogicalImmediate *v107;
  uint64_t v108;
  int v109;
  void *__dst;
  uint64_t v111;
  _WORD v112[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C088B0);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_10;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C088B8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12)
    || (v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8),
        v17 == -1))
  {
LABEL_10:
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  }
  v18 = *((_QWORD *)a2 + 5);
  v19 = v18 & 0xFF00FFFFFFFFFFFFLL;
  if ((v18 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_15;
  v20 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_117:
    JUMPOUT(0x197C0888CLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12)
    || (v22 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 5), a3, a4, a5, a6, a7, a8),
        v22 == -1))
  {
LABEL_15:
    v22 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v18, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v21, a3, a4, a5, a6, a7, a8);
  v29 = *((unsigned __int16 *)a2 + 9);
  if (v29 == 6)
    goto LABEL_17;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v29 - 101) >= 4)
    {
LABEL_112:
      __break(0xC471u);
      goto LABEL_117;
    }
    goto LABEL_110;
  }
  v101 = v29 - 117;
  if ((v29 - 117) <= 0x3C)
  {
    if (((1 << v101) & 0x100000000000201FLL) != 0)
      goto LABEL_110;
    if (((1 << v101) & 0x4020) != 0)
    {
LABEL_17:
      v30 = (unsigned __int8 *)a2 + 72;
      goto LABEL_18;
    }
  }
  if (v29 != 391)
  {
    if (v29 != 253)
      goto LABEL_112;
    goto LABEL_17;
  }
LABEL_110:
  v30 = (unsigned __int8 *)a2 + 80;
LABEL_18:
  v109 = *v30;
  v108 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v23, v24, v25, v26, v27, v28);
  v106 = v31;
  v107 = (JSC::ARM64LogicalImmediate *)JSC::DFG::Node::cacheableIdentifier(a2);
  __dst = v112;
  v111 = 3;
  if (v13 == 1)
  {
    v39 = 0;
  }
  else
  {
    v112[0] = v13 | 0x100;
    v39 = 1;
    HIDWORD(v111) = 1;
  }
  if (v17 != 2)
  {
    v112[v39++] = v17 | 0x200;
    HIDWORD(v111) = v39;
  }
  if (v22 == 3)
  {
    if (!v39)
      goto LABEL_81;
  }
  else
  {
    v112[v39++] = v22 | 0x300;
    HIDWORD(v111) = v39;
  }
  do
  {
    v40 = 0;
    v41 = 0;
    v42 = (char *)__dst;
    v43 = v39;
    do
    {
      if ((*((_BYTE *)__dst + v40 + 1) & 0x40) != 0)
      {
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      v41 |= 1 << *((_BYTE *)__dst + v40 + 1);
      v40 += 2;
    }
    while (2 * v39 != v40);
    v44 = 0;
    do
    {
      v45 = *((_BYTE *)__dst + v44) & 0x7F;
      if (v45 >= 0x40)
        goto LABEL_111;
      v41 &= ~(1 << v45);
      v44 += 2;
    }
    while (2 * v39 != v44);
    v46 = (uint8x8_t)vcnt_s8((int8x8_t)v41);
    v46.i16[0] = vaddlv_u8(v46);
    v47 = v46.i32[0];
    v48 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v41));
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.i32[0] + v47)
    {
      v49 = 0;
      if (v39 <= 1)
        v50 = 1;
      else
        v50 = v39;
      v51 = 2 * v50;
      while (1)
      {
        v52 = *((unsigned __int8 *)__dst + v49 + 1);
        if ((v52 & 0x7Fu) >= 0x40)
          goto LABEL_111;
        if (((v41 >> (v52 & 0x7F)) & 1) != 0)
          break;
        v49 += 2;
        if (v51 == v49)
          goto LABEL_74;
      }
      v53 = *((unsigned __int8 *)__dst + v49);
      if (v53 != v52)
      {
        v54 = (char)v53;
        if ((char)v53 == 63)
        {
          v55 = *((_DWORD *)this + 50);
          v56 = *((_DWORD *)this + 48);
          if ((char)v52 == 31)
            goto LABEL_68;
          v58 = v52 & 0x1F | 0xD2800000;
        }
        else
        {
          v55 = *((_DWORD *)this + 50);
          v56 = *((_DWORD *)this + 48);
          v57 = v52 == 31 || v54 == 31;
          if (!v57)
          {
            v58 = v52 & 0xFFE0FFFF | ((v54 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_69;
          }
LABEL_68:
          v58 = (char)v52 | (32 * v54) | 0x91000000;
        }
LABEL_69:
        if (v55 + 4 > v56)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v32, v33, v34, v35, v36, v37, v38);
          v55 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v55) = v58;
        *((_DWORD *)this + 50) += 4;
        v42 = (char *)__dst;
        v43 = HIDWORD(v111);
        v19 = v18 & 0xFF00FFFFFFFFFFFFLL;
      }
      memmove(&v42[v49], &v42[v49 + 2], 2 * v43 - v49 - 2);
      v39 = HIDWORD(v111) - 1;
    }
    else
    {
      v105 = v11;
      v59 = *(_BYTE *)__dst;
      v60 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v60, v34, v35, v36, v37, v38);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v111) - 2);
      v61 = (HIDWORD(v111) - 1);
      v57 = HIDWORD(v111) == 1;
      HIDWORD(v111) = v61;
      v62 = (unsigned __int8 *)__dst;
      v63 = (unsigned __int8 *)__dst + 2 * v61;
      if (v57)
      {
        v70 = 0;
        v71 = 0;
        v66 = 0;
        v32 = v63;
      }
      else
      {
        v64 = 2 * v61;
        v65 = __dst;
        while (*v65 != v60)
        {
          v65 += 2;
          v64 -= 2;
          if (!v64)
            goto LABEL_53;
        }
        *v65 = v59;
LABEL_53:
        v66 = 0;
        v67 = v62;
        v32 = v63;
        v68 = (char *)v63;
        do
        {
          if (*v62 == v62[1])
          {
            v69 = v62;
            if (v68 != (char *)__dst + 2 * HIDWORD(v111))
            {
              v104 = (char *)v63;
              if (v62 == v32)
              {
                v69 = (unsigned __int8 *)v68;
              }
              else
              {
                v102 = v67 - v32;
                v103 = v68;
                memmove(v68, v32, v67 - v32);
                v69 = (unsigned __int8 *)&v103[v102];
              }
              v63 = (unsigned __int8 *)v104;
            }
            v32 = v62 + 2;
            ++v66;
            v68 = (char *)v69;
          }
          v62 += 2;
          v67 += 2;
        }
        while (v62 < v63);
        v62 = (unsigned __int8 *)__dst;
        v70 = HIDWORD(v111);
        v71 = HIDWORD(v111);
        v63 = (unsigned __int8 *)v68;
      }
      v72 = &v62[2 * v70];
      v11 = v105;
      if (v32 != v72)
      {
        memmove(v63, v32, v72 - v32);
        v71 = HIDWORD(v111);
      }
      v39 = v71 - v66;
      v19 = v18 & 0xFF00FFFFFFFFFFFFLL;
    }
    HIDWORD(v111) = v39;
LABEL_74:
    ;
  }
  while (v39);
  v73 = __dst;
  if (v112 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((unint64_t)v73, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_81:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v107, 4, v34, v35, v36, v37, v38);
  if ((_DWORD)v108 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v106, 0, v74, v75, v76, v77, v78);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v108 << 35) + 0x380000001ALL, 0, v74, v75, v76, v77, v78);
  if (v109)
    v85 = operationPutByIdWithThis;
  else
    v85 = operationPutByIdWithThisStrict;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v85, v79, v80, v81, v82, v83, v84, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v86, v87, v88, v89, v90, v91);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v92, v93, v94, v95, v96);
  if (v19)
  {
    if (v22 > 15)
      v98 = -1;
    else
      v98 = v22;
    --*((_DWORD *)this + 3 * v98 + 1196);
  }
  if (v15)
  {
    if (v17 > 15)
      v99 = -1;
    else
      v99 = v17;
    --*((_DWORD *)this + 3 * v99 + 1196);
  }
  if (v11)
  {
    if (v13 > 15)
      v100 = -1;
    else
      v100 = v13;
    --*((_DWORD *)this + 3 * v100 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetByOffset(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v13;
  char v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;

  v8 = *((_QWORD *)a2 + 3);
  v9 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v10 = *((unsigned int *)this + 1001);
  if (v9 >= v10
    || (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v9 + 12)
      ? (v13 = -1)
      : (v13 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
         v10 = *((unsigned int *)this + 1001),
         v9 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30)),
        v9 >= v10))
  {
    __break(0xC471u);
    JUMPOUT(0x197C08A9CLL);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v9 + 8) == 1)
  {
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v8, a3, a4, a5, a6, a7, a8);
    if (v13 > 15)
      v23 = -1;
    else
      v23 = v13;
    ++*((_DWORD *)this + 3 * v23 + 1196);
    v14 = v13;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v8, a3, a4, a5, a6, a7, a8);
  v15 = **((_DWORD **)a2 + 9);
  if (v15 <= 63)
    v16 = (8 * v15 + 16);
  else
    v16 = (496 - 8 * v15);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | ((unint64_t)(v16 >> 3) << 35), v14, a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v14, (uint64_t)a2, 16, 0, v17, v18, v19);
  if (v14 != -1)
  {
    if (v14 > 15)
      v21 = -1;
    else
      v21 = v14;
    --*((_DWORD *)this + 3 * v21 + 1196);
  }
  if (v13 != -1)
  {
    if (v13 > 15)
      v22 = -1;
    else
      v22 = v13;
    --*((_DWORD *)this + 3 * v22 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutByOffset(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  char v30;

  v8 = *((_QWORD *)a2 + 3);
  v9 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v9 >= *((unsigned int *)this + 1001))
    goto LABEL_28;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v9 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
    v12 = -1;
  v13 = *((_QWORD *)a2 + 5);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_26;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197C08C6CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 5), a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
LABEL_26:
  v15 = -1;
LABEL_8:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v8, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 4), a4, a5, a6, a7, a8);
  v21 = **((_DWORD **)a2 + 9);
  if (v21 <= 63)
    v22 = (8 * v21 + 16);
  else
    v22 = (496 - 8 * v21);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v15, v12 | ((unint64_t)(v22 >> 3) << 35), v16, v17, v18, v19, v20);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v23, v24, v25, v26, v27);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v29 = -1;
    else
      v29 = v15;
    --*((_DWORD *)this + 3 * v29 + 1196);
  }
  if (v12 != -1)
  {
    if (v12 > 15)
      v30 = -1;
    else
      v30 = v12;
    --*((_DWORD *)this + 3 * v30 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileMatchStructure(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  unsigned int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  _DWORD *v61;
  _QWORD *v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  WTF *v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  JSC::AssemblerBuffer *v89;
  int v90;
  unint64_t v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  WTF *v97;
  uint64_t v98;
  _BYTE v99[24];
  int v100[6];
  WTF *v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  int v109;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE v117[128];
  uint64_t v118;
  char v119;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_64;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_77;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
  {
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v118, this, v13, v14, v15, v16, v17, v18);
    if (v12 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_64:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v118, this, a3, a4, a5, a6, a7, a8);
  }
  v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v19, v20, v21, v22, v23, v24);
LABEL_6:
  v25 = v119;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v12, v119, v20, v21, v22, v23, v24);
  v26 = *((_QWORD *)a2 + 9);
  v27 = v117;
  v115 = v117;
  v116 = 16;
  v28 = *(unsigned int *)(v26 + 12);
  v90 = v12;
  v91 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD **)v26;
    v30 = 16 * v28;
    do
    {
      v31 = *v29 >> 4;
      v100[0] = v31;
      v32 = HIDWORD(v116);
      if (HIDWORD(v116) == (_DWORD)v116)
      {
        WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v115, v100);
      }
      else
      {
        *(_QWORD *)&v115[8 * HIDWORD(v116)] = (int)v31;
        HIDWORD(v116) = v32 + 1;
      }
      v29 += 2;
      v30 -= 16;
    }
    while (v30);
    v27 = v115;
    v33 = HIDWORD(v116);
  }
  else
  {
    v33 = 0;
  }
  v34 = v25;
  JSC::BinarySwitch::BinarySwitch((uint64_t)v100, v25, (uint64_t)v27, v33, 0);
  v97 = (WTF *)v99;
  v98 = 2;
  if (JSC::BinarySwitch::advance((JSC::BinarySwitch *)v100, this, v35, v36, v37, v38, v39, v40))
  {
    v89 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    do
    {
      if (v103 <= v114)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0915CLL);
      }
      v46 = *((unsigned int *)v101 + 4 * v114 + 2);
      if (*(_DWORD *)(v26 + 12) <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197C09164);
      }
      if (*(_BYTE *)(*(_QWORD *)v26 + 16 * v46 + 8))
        v47 = 7;
      else
        v47 = 6;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v47, v34, v41, v42, v43, v44, v45);
      for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
      {
        if ((i + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v89, v48, v49, v50, v51, v52, v53, v54);
          i = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
        i = *((_DWORD *)this + 50) + 4;
      }
      v56 = i;
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v89, v48, v49, v50, v51, v52, v53, v54);
        v56 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v56) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v57 = 69;
      else
        v57 = 65;
      v92 = i;
      v93 = 0;
      v94 = v57;
      v95 = 15;
      v96 = -1;
      if (i != -1)
      {
        if (HIDWORD(v98) == (_DWORD)v98)
        {
          v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, (void *)(HIDWORD(v98) + 1), (unint64_t)&v92, v50, v51, v52, v53, v54);
          v60 = *v58;
          v59 = v58 + 1;
          v61 = (_DWORD *)((char *)v97 + 12 * HIDWORD(v98));
          *v61 = v60;
          v62 = v61 + 1;
        }
        else
        {
          v63 = (int *)((char *)v97 + 12 * HIDWORD(v98));
          *v63 = i;
          v62 = v63 + 1;
          v59 = &v93;
        }
        *v62 = *(_QWORD *)v59;
        ++HIDWORD(v98);
      }
    }
    while ((JSC::BinarySwitch::advance((JSC::BinarySwitch *)v100, this, v49, v50, v51, v52, v53, v54) & 1) != 0);
  }
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 5uLL, (JSC::DFG::Node *)0xFF80000000, a2, (unsigned int *)&v111);
  if (HIDWORD(v98))
  {
    v70 = 0;
    v71 = 0;
    v72 = 12 * HIDWORD(v98);
    while (v71 < HIDWORD(v98))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v97 + v70), (uint64_t)this, v64, v65, v66, v67, v68, v69);
      ++v71;
      v70 += 12;
      if (v72 == v70)
        goto LABEL_36;
    }
    __break(0xC471u);
LABEL_77:
    JUMPOUT(0x197C09154);
  }
LABEL_36:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v34, (uint64_t)a2, 21, 0, v67, v68, v69);
  v80 = v97;
  if (v99 != (_BYTE *)v97 && v97 != 0)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  }
  v82 = (unint64_t)v111;
  if (&v113 != v111 && v111)
  {
    v111 = 0;
    v112 = 0;
    WTF::fastFree(v82, v73, v74, v75, v76, v77, v78, v79);
  }
  v83 = (unint64_t)v108;
  if (&v110 != v108 && v108)
  {
    v108 = 0;
    v109 = 0;
    WTF::fastFree(v83, v73, v74, v75, v76, v77, v78, v79);
  }
  v84 = (unint64_t)v105;
  if (&v107 != v105 && v105)
  {
    v105 = 0;
    v106 = 0;
    WTF::fastFree(v84, v73, v74, v75, v76, v77, v78, v79);
  }
  v85 = v101;
  if (&v104 != (uint64_t *)v101 && v101)
  {
    v101 = 0;
    v102 = 0;
    WTF::fastFree((unint64_t)v85, v73, v74, v75, v76, v77, v78, v79);
  }
  v86 = (unint64_t)v115;
  if (v117 != v115 && v115)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree(v86, v73, v74, v75, v76, v77, v78, v79);
  }
  if (v118)
  {
    v87 = v119;
    if (v119 != -1)
    {
      if (v119 > 15)
        v87 = -1;
      --*(_DWORD *)(v118 + 12 * v87 + 4784);
    }
  }
  if (v91)
  {
    if (v90 > 15)
      v88 = -1;
    else
      v88 = v90;
    --*((_DWORD *)this + 3 * v88 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileGetPropertyEnumerator(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int *v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::VM *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int i;
  unsigned int v73;
  char v74;
  int *v75;
  int *v76;
  int v77;
  char *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x8_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  _DWORD *v100;
  uint64_t *v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int *v115;
  int *v116;
  int v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x8_t v129;
  int v130;
  int v131;
  _DWORD *v132;
  uint64_t *v133;
  int v134;
  _BYTE *v135;
  uint64_t v136;
  JSC::DFG::Node *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int *v145;
  int *v146;
  int v147;
  _BYTE *v148;
  int j;
  unsigned int v150;
  char v151;
  int *v152;
  int *v153;
  int v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  char *v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  WTF *v215;
  unint64_t v216;
  unsigned int v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint8x8_t v226;
  __int32 v227;
  uint8x8_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  BOOL v234;
  unsigned int v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  JSC::DFG::Node *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  _BOOL4 v263;
  BOOL v264;
  uint64_t v265;
  char v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char v288;
  char v289;
  uint64_t v290;
  unint64_t v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  char v300;
  uint64_t v301;
  unsigned __int8 *v302;
  uint64_t v303;
  unsigned int v304;
  char *v305;
  uint64_t v306;
  _BYTE *v307;
  unsigned __int8 *v308;
  char *v309;
  unsigned __int8 *v310;
  uint64_t v311;
  int64_t v312;
  char *v313;
  char v314;
  int v315;
  char *__dst;
  uint64_t v317;
  JSC::AssemblerBuffer *v318;
  unint64_t *v319;
  unint64_t v320;
  unsigned __int8 v321;
  int v322;
  int v323;
  int v324;
  char v325;
  __int16 v326;
  char v327;
  int v328;
  int v329;
  int v330;
  uint64_t v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  int v339;
  char v340;
  __int16 v341;
  char v342;
  unsigned int v343;
  JSC::ARM64LogicalImmediate *v344;
  WTF *v345;
  uint64_t v346;
  _BYTE v347[24];
  _BYTE *v348;
  uint64_t v349;
  _BYTE v350[24];
  uint64_t v351;
  unsigned __int8 v352;
  unint64_t v353;
  int v354;
  unsigned int v355;
  __int16 v356;
  unint64_t v357;
  unsigned int *v358;

  v10 = *((_QWORD *)a2 + 3);
  if (((v10 >> 50) & 0x3D | 2) != 0xA)
  {
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_163;
    v238 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v238 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C0A4FCLL);
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v238 + 12)
      || (v198 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
          v198 == -1))
    {
LABEL_163:
      LOBYTE(v198) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v239, a3, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v246 = *((unsigned int *)this + 1194);
    if ((_DWORD)v246 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v246, (uint64_t)v240, v241, v242, v243, v244, v245);
    }
    v247 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v240, v241, v242, v243, v244, v245);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v348, (unsigned __int8 *)this, (uint64_t)operationGetPropertyEnumerator, v247, v248, v198, v249, v250);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v251, v252, v253, v254, v255, v256);
    v257 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 1194) = v257;
    *((_DWORD *)this + 1195) = 4;
    v258 = ~v257;
    if (v258 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C0A504);
    }
    v259 = *((_QWORD *)this + 499) + 24 * (int)v258;
    v260 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v259 = a2;
    *(_DWORD *)(v259 + 8) = v260;
    *(_BYTE *)(v259 + 12) = 6;
    *(_DWORD *)(v259 + 13) = 0;
    *(_BYTE *)(v259 + 17) = 0;
    --*((_DWORD *)this + 1196);
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
      goto LABEL_121;
    return;
  }
  v320 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_31;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0A4ECLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  else
LABEL_31:
    v12 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v351, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculate(this, v13, *((_QWORD *)a2 + 3), v14, v15, v16, v17, v18);
  if (v12 == 0xFF)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
  v26 = v352;
  v27 = (char)v352;
  v348 = v350;
  v349 = 2;
  v345 = (WTF *)v347;
  v346 = 2;
  v28 = *((_QWORD *)a2 + 3);
  if ((v28 & 0xFC000000000000) == 0x28000000000000)
  {
    JSC::MacroAssemblerARM64::and64((uint64_t)this, -9, v12, (char)v352);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, (char)v26, 2, v49, v50, v51, v52, (uint64_t)&v353);
    v58 = *(JSC::VM **)(*((_QWORD *)this + 44) + 16);
    v59 = *((_QWORD *)v58 + 5229);
    if (!v59)
      v59 = JSC::VM::emptyPropertyNameEnumeratorSlow(v58);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v343, this, v59, v53, v54, v55, v56, v57);
    if (v343 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v344, (char)v26, v60, v61, v62, v63, v64);
    else
      JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v343 << 35) + 0x380000001ALL, (char)v26, v60, v61, v62, v63, v64);
    for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
        i = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
      i = *((_DWORD *)this + 50) + 4;
    }
    v73 = i;
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
      v73 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v73) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v74 = 69;
    else
      v74 = 65;
    v338 = i;
    v339 = 0;
    v340 = v74;
    v341 = 15;
    v342 = -1;
    if (i != -1)
    {
      if (HIDWORD(v346) == (_DWORD)v346)
      {
        v75 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v345, (void *)(HIDWORD(v346) + 1), (unint64_t)&v338, v67, v68, v69, v70, v71);
        v77 = *v75;
        v76 = v75 + 1;
        v78 = (char *)v345 + 12 * HIDWORD(v346);
        *(_DWORD *)v78 = v77;
      }
      else
      {
        v76 = &v339;
        v78 = (char *)v345 + 12 * HIDWORD(v346);
        *(_DWORD *)v78 = i;
      }
      *(_QWORD *)(v78 + 4) = *(_QWORD *)v76;
      ++HIDWORD(v346);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v353, (uint64_t)this, v66, v67, v68, v69, v70, v71);
    v28 = *((_QWORD *)a2 + 3);
  }
  v321 = v12;
  v29 = *((_QWORD *)this + 688);
  v30 = *(unsigned int *)((v28 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v31 = (uint64_t *)(v29 + 24);
  v32 = (uint64_t *)(v29 + 8);
  if ((v28 & 1) != 0)
    v33 = v31;
  else
    v33 = v32;
  v34 = *v33;
  v35 = *v33 + 32 * v30;
  v36 = *((_DWORD *)this + 1396);
  v37 = *(_DWORD *)(v35 + 20);
  if (v36 != v37)
  {
    if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v37 ^ v36) >= 2)
      {
        v265 = *(_QWORD *)v35;
        if (*(_QWORD *)v35 != 4)
        {
          *(_QWORD *)v35 = v265 | 2;
          v270 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v265 & 1) != 0)
          {
            v296 = 2 * *v270;
            while (v296 * 4)
            {
              v297 = *(_QWORD *)&v270[v296];
              if ((*(_BYTE *)(v297 + 19) & 0xC) == 0)
              {
                v298 = *(_QWORD *)(v297 + 96);
                v299 = (v298 & 1) != 0 ? (v298 >> 1) & 3 : *(unsigned __int8 *)(v298 + 4);
                v296 -= 2;
                if (v299 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v270, v19, v20, v21, v22, v23, v24, v25);
              goto LABEL_204;
            }
          }
          else if (v270)
          {
            if ((*((_BYTE *)v270 + 19) & 0xC) != 0
              || ((v271 = *((_QWORD *)v270 + 12), (v271 & 1) != 0)
                ? (v272 = (v271 >> 1) & 3)
                : (v272 = *(unsigned __int8 *)(v271 + 4)),
                  v272 == 2))
            {
LABEL_204:
              *(_QWORD *)v35 = 4;
            }
          }
        }
        *(_DWORD *)(v34 + 32 * v30 + 16) = -21020677;
      }
      if ((v36 & 1) != 0)
        *(_QWORD *)v35 &= ~2uLL;
    }
    *(_DWORD *)(v35 + 20) = v36;
  }
  if ((*(_QWORD *)(v35 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    v38 = 0;
    v39 = 0;
    goto LABEL_15;
  }
  v261 = *(_QWORD *)v35;
  if (*(_QWORD *)v35 == 4 || (*(_QWORD *)v35 & 2) != 0)
    goto LABEL_173;
  v39 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v261 & 1) != 0)
  {
    if (!*v39)
      goto LABEL_36;
    v266 = 0;
    v267 = (uint64_t *)(v39 + 2);
    v268 = *v39;
    do
    {
      v269 = *v267++;
      if ((*(_BYTE *)(v269 + 8) & 0xC) != 0)
        v266 = 1;
      --v268;
    }
    while (v268);
    v264 = v266 == 0;
    if (*v39 != 1)
    {
      if (!v266)
        goto LABEL_36;
LABEL_173:
      v38 = 0;
      v39 = 0;
      goto LABEL_15;
    }
    v39 = (unsigned int *)*((_QWORD *)v39 + 1);
  }
  else
  {
    if (v39)
      v263 = (v39[2] & 0xC) != 0;
    else
      v263 = 0;
    v264 = !v263;
  }
  if (v39 && (v279 = *((_QWORD *)v39 + 8)) != 0)
  {
    if (*(_BYTE *)(v279 + 5) == 1)
      v38 = 0;
    else
      v38 = *((_QWORD *)v39 + 8);
    if (v264)
      goto LABEL_34;
  }
  else
  {
    if (v264)
      goto LABEL_35;
    v38 = 0;
  }
LABEL_15:
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x400000000, (char)v26, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xF, v26, (char)v26);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, (char)v26, 3, v40, v41, v42, v43, (uint64_t)&v336);
  v44 = v336;
  if (v336 != -1)
  {
    v45 = HIDWORD(v349);
    if (HIDWORD(v349) == (_DWORD)v349)
    {
      v46 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v348, (void *)(HIDWORD(v349) + 1), (unint64_t)&v336, v21, v22, v23, v24, v25);
      v48 = *v46;
      v47 = v46 + 1;
      v44 = v48;
      v45 = HIDWORD(v349);
    }
    else
    {
      v47 = &v337;
    }
    v79 = &v348[12 * v45];
    *(_DWORD *)v79 = v44;
    *(_QWORD *)(v79 + 4) = *(_QWORD *)v47;
    ++HIDWORD(v349);
  }
LABEL_34:
  if (v38)
  {
    v273 = *(_QWORD *)JSC::DFG::Graph::freeze(*((_QWORD *)this + 495), v38, v20, v21, v22, v23, v24, v25);
    if ((v273 & 0xFFFE000000000002) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C0A364);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v273, (char)v26, v274, v275, v276, v277, v278);
    goto LABEL_50;
  }
LABEL_35:
  if (!v39)
  {
LABEL_36:
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v12, (char)v26, v21, v22, v23, v24, v25);
    v87 = *((_DWORD *)this + 50);
    if (v87 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v80, v81, v82, v83, v84, v85, v86);
      v87 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v87) = v26 & 0x1F | (32 * (v26 & 0x1F)) | 0xD37CEC00;
    *((_DWORD *)this + 50) += 4;
    goto LABEL_39;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v39, (char)v26, v21, v22, v23, v24, v25);
LABEL_39:
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v26 | 0x4000000000, (char)v26, v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v26, 0xFFFFFFFFLL, v88, v89, v90, v91, (uint64_t)&v334, v92);
  v98 = v334;
  if (v334 != -1)
  {
    v99 = HIDWORD(v349);
    if (HIDWORD(v349) == (_DWORD)v349)
    {
      v100 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v348, (void *)(HIDWORD(v349) + 1), (unint64_t)&v334, v93, v94, v95, v96, v97);
      v102 = *v100;
      v101 = (uint64_t *)(v100 + 1);
      v98 = v102;
      v99 = HIDWORD(v349);
    }
    else
    {
      v101 = &v335;
    }
    v103 = &v348[12 * v99];
    *(_DWORD *)v103 = v98;
    *(_QWORD *)(v103 + 4) = *v101;
    ++HIDWORD(v349);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0A0E4);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v26 | 0x500000000, *((char *)this + 304), v93, v94, v95, v96, v97);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 1, v104, v105, v106, v107, (uint64_t)&v332);
  v113 = v332;
  if (v332 != -1)
  {
    v114 = HIDWORD(v349);
    if (HIDWORD(v349) == (_DWORD)v349)
    {
      v115 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v348, (void *)(HIDWORD(v349) + 1), (unint64_t)&v332, v108, v109, v110, v111, v112);
      v117 = *v115;
      v116 = v115 + 1;
      v113 = v117;
      v114 = HIDWORD(v349);
    }
    else
    {
      v116 = &v333;
    }
    v118 = &v348[12 * v114];
    *(_DWORD *)v118 = v113;
    *(_QWORD *)(v118 + 4) = *(_QWORD *)v116;
    ++HIDWORD(v349);
  }
LABEL_50:
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v26 | 0x800000000, (char)v26, v108, v109, v110, v111, v112);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v26, 0xFFFFFFFFLL, v119, v120, v121, v122, (uint64_t)&v330, v123);
  v130 = v330;
  if (v330 != -1)
  {
    v131 = HIDWORD(v349);
    if (HIDWORD(v349) == (_DWORD)v349)
    {
      v132 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v348, (void *)(HIDWORD(v349) + 1), (unint64_t)&v330, v124, v125, v126, v127, v128);
      v134 = *v132;
      v133 = (uint64_t *)(v132 + 1);
      v130 = v134;
      v131 = HIDWORD(v349);
    }
    else
    {
      v133 = &v331;
    }
    v135 = &v348[12 * v131];
    *(_DWORD *)v135 = v130;
    *(_QWORD *)(v135 + 4) = *v133;
    ++HIDWORD(v349);
  }
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v26, 1, v125, v126, v127, v128, (uint64_t)&v328, v129);
  v143 = v328;
  if (v328 != -1)
  {
    v144 = HIDWORD(v349);
    if (HIDWORD(v349) == (_DWORD)v349)
    {
      v145 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v348, (void *)(HIDWORD(v349) + 1), (unint64_t)&v328, v138, v139, v140, v141, v142);
      v147 = *v145;
      v146 = v145 + 1;
      v143 = v147;
      v144 = HIDWORD(v349);
    }
    else
    {
      v146 = &v329;
    }
    v148 = &v348[12 * v144];
    *(_DWORD *)v148 = v143;
    *(_QWORD *)(v148 + 4) = *(_QWORD *)v146;
    ++HIDWORD(v349);
  }
  v318 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v318, v136, (uint64_t)v137, v138, v139, v140, v141, v142);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  v150 = j;
  if ((j + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v318, v136, (uint64_t)v137, v138, v139, v140, v141, v142);
    v150 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v150) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v151 = 69;
  else
    v151 = 65;
  v323 = j;
  v324 = 0;
  v325 = v151;
  v326 = 15;
  v327 = -1;
  if (j != -1)
  {
    if (HIDWORD(v346) == (_DWORD)v346)
    {
      v152 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v345, (void *)(HIDWORD(v346) + 1), (unint64_t)&v323, v138, v139, v140, v141, v142);
      v154 = *v152;
      v153 = v152 + 1;
      v155 = (char *)v345 + 12 * HIDWORD(v346);
      *(_DWORD *)v155 = v154;
    }
    else
    {
      v153 = &v324;
      v155 = (char *)v345 + 12 * HIDWORD(v346);
      *(_DWORD *)v155 = j;
    }
    *(_QWORD *)(v155 + 4) = *(_QWORD *)v153;
    ++HIDWORD(v346);
  }
  if (HIDWORD(v349))
  {
    v156 = 0;
    v157 = 0;
    v158 = 12 * HIDWORD(v349);
    do
    {
      if (v157 >= HIDWORD(v349))
      {
        __break(0xC471u);
        goto LABEL_292;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v348[v156], (uint64_t)this, (uint64_t)v137, v138, v139, v140, v141, v142);
      ++v157;
      v156 += 12;
    }
    while (v158 != v156);
  }
  v159 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v137, v138, v139, v140, v141, v142);
  v161 = v160;
  v319 = (unint64_t *)((char *)this + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 1, (uint64_t)this + 5752, (char)v26, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v162, v163);
  v353 = (unint64_t)&v356;
  v354 = 1;
  if (v12 == 1)
    goto LABEL_76;
  v356 = v12 | 0x100;
  v355 = 1;
  v219 = 1;
  v317 = v161;
  do
  {
    v220 = 0;
    v221 = 0;
    v222 = v353;
    v223 = v219;
    do
    {
      if ((*(_BYTE *)(v353 + v220 + 1) & 0x40) != 0)
        goto LABEL_292;
      v221 |= 1 << *(_BYTE *)(v353 + v220 + 1);
      v220 += 2;
    }
    while (2 * v219 != v220);
    v224 = 0;
    do
    {
      v225 = *(_BYTE *)(v353 + v224) & 0x7F;
      if (v225 >= 0x40)
        goto LABEL_292;
      v221 &= ~(1 << v225);
      v224 += 2;
    }
    while (2 * v219 != v224);
    v226 = (uint8x8_t)vcnt_s8((int8x8_t)v221);
    v226.i16[0] = vaddlv_u8(v226);
    v227 = v226.i32[0];
    v228 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v221));
    v228.i16[0] = vaddlv_u8(v228);
    if (v228.i32[0] + v227)
    {
      v229 = 0;
      if (v219 <= 1uLL)
        v230 = 1;
      else
        v230 = v219;
      v231 = 2 * v230;
      while (1)
      {
        v232 = *(unsigned __int8 *)(v353 + v229 + 1);
        if ((v232 & 0x7Fu) >= 0x40)
          goto LABEL_292;
        if (((v221 >> (v232 & 0x7F)) & 1) != 0)
          break;
        v229 += 2;
        if (v231 == v229)
          goto LABEL_152;
      }
      v233 = *(unsigned __int8 *)(v353 + v229);
      if (v233 == v232)
        goto LABEL_150;
      v233 = (char)v233;
      if ((char)v233 == 63)
      {
        if ((char)v232 != 31)
        {
          v235 = v232 & 0x1F | 0xD2800000;
          goto LABEL_147;
        }
      }
      else
      {
        v234 = v232 == 31 || v233 == 31;
        if (!v234)
        {
          v235 = v232 & 0xFFE0FFFF | ((v233 & 0x1F) << 16) | 0xAA0003E0;
LABEL_147:
          v236 = *((_DWORD *)this + 50);
          if (v236 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v318, (uint64_t)v164, v165, v166, v167, v168, v169, v170);
            v236 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v236) = v235;
          *((_DWORD *)this + 50) += 4;
          v222 = v353;
          v223 = v355;
LABEL_150:
          memmove((void *)(v222 + v229), (const void *)(v222 + v229 + 2), 2 * v223 - v229 - 2);
          v219 = v355 - 1;
          goto LABEL_151;
        }
      }
      v235 = (char)v232 | (32 * v233) | 0x91000000;
      goto LABEL_147;
    }
    v300 = *(_BYTE *)(v353 + 1);
    v314 = *(_BYTE *)v353;
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v353, v300, v166, v167, v168, v169, v170);
    memmove((void *)v353, (const void *)(v353 + 2), 2 * v355 - 2);
    v301 = v355 - 1;
    v234 = v355 == 1;
    v355 = v301;
    v302 = (unsigned __int8 *)v353;
    __dst = (char *)(v353 + 2 * v301);
    if (v234)
    {
      v303 = 0;
      v304 = 0;
      v315 = 0;
      v164 = (char *)(v353 + 2 * v301);
    }
    else
    {
      v306 = 2 * v301;
      v307 = (_BYTE *)v353;
      while (*v307 != v300)
      {
        v307 += 2;
        v306 -= 2;
        if (!v306)
          goto LABEL_280;
      }
      *v307 = v314;
LABEL_280:
      v315 = 0;
      v308 = v302;
      v164 = __dst;
      v309 = __dst;
      do
      {
        if (*v302 == v302[1])
        {
          v310 = v302;
          if (v309 != (char *)(v353 + 2 * v355))
          {
            if (v302 == (unsigned __int8 *)v164)
            {
              v310 = (unsigned __int8 *)v309;
            }
            else
            {
              v312 = v308 - (unsigned __int8 *)v164;
              v313 = v309;
              memmove(v309, v164, v308 - (unsigned __int8 *)v164);
              v310 = (unsigned __int8 *)&v313[v312];
            }
          }
          v164 = (char *)(v302 + 2);
          ++v315;
          v309 = (char *)v310;
        }
        v302 += 2;
        v308 += 2;
      }
      while (v302 < (unsigned __int8 *)__dst);
      v302 = (unsigned __int8 *)v353;
      v303 = v355;
      v304 = v355;
      __dst = v309;
    }
    v305 = (char *)&v302[2 * v303];
    if (v164 != v305)
    {
      memmove(__dst, v164, v305 - v164);
      v304 = v355;
    }
    v219 = v304 - v315;
LABEL_151:
    v355 = v219;
LABEL_152:
    v161 = v317;
  }
  while (v219);
  v237 = v353;
  if (&v356 != (__int16 *)v353 && v353)
  {
    v353 = 0;
    v354 = 0;
    WTF::fastFree(v237, v164, v165, v166, v167, v168, v169, v170);
  }
LABEL_76:
  if ((_DWORD)v159 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v161, 0, v166, v167, v168, v169, v170);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v159 << 35) + 0x380000001ALL, 0, v166, v167, v168, v169, v170);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationGetPropertyEnumeratorCell, v171, v172, v173, v174, v175, v176, &v322);
  v353 = 2;
  v358 = 0;
  v181 = *((_QWORD *)this + 495);
  v182 = *(_QWORD *)(*((_QWORD *)this + 497) + 8);
  if ((v182 & 1) != 0)
  {
    v280 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
    if ((v182 & 2) != 0
      || ((v281 = *(unsigned int *)((v182 & 0xFFFFFFFF8) + 8), (_DWORD)v281 != 0x3FFFFFFF)
        ? (v282 = (_DWORD)v281 == -1)
        : (v282 = 1),
          v282))
    {
      v283 = 2;
    }
    else if (v281 >> 28)
    {
      v311 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v311 = v280;
      *(_DWORD *)(v311 + 8) = v281;
      v283 = 1;
      v280 = v311;
    }
    else
    {
      v283 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
      v280 = v281 << 36;
    }
    v182 = v280 | v283;
  }
  v357 = v182;
  v190 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v181, &v357, (uint64_t *)&v353, &v358, v177, v178, v179, v180);
  if ((v357 & 1) != 0 && (v357 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v357 & 0xFFFFFFFF8, v183, v184, v185, v186, v187, v188, v189);
  if ((v190 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v184, v185, v186, v187, v188, v189);
    LOBYTE(v191) = 0;
    goto LABEL_82;
  }
  v284 = *((unsigned int *)this + 1441);
  if ((_DWORD)v284)
  {
    v285 = 0;
    v286 = 16 * v284;
    v287 = (char *)(*((_QWORD *)this + 719) + 2);
    while (1)
    {
      v289 = *v287;
      v287 += 16;
      v288 = v289;
      if ((v289 & 0x40) != 0)
        goto LABEL_292;
      v285 |= 1 << v288;
      v286 -= 16;
      if (!v286)
        goto LABEL_238;
    }
  }
  v285 = 0;
LABEL_238:
  if ((v27 & 0x40) != 0)
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  LOBYTE(v191) = 1;
  v290 = v285 | (1 << v26);
  if ((v290 & 2) != 0)
  {
    v291 = (unsigned __int16)~(_WORD)v290 & 0xFFFE;
    if (v291)
    {
      v191 = __clz(__rbit64(v291));
      if (v191 != 1)
      {
        if (v191 == 31)
        {
          v293 = *((_DWORD *)this + 50);
          v294 = v293 + 4;
          v295 = *((_DWORD *)this + 48);
          v292 = -1862270913;
        }
        else
        {
          v292 = v191 | 0xAA0103E0;
          v293 = *((_DWORD *)this + 50);
          v294 = v293 + 4;
          v295 = *((_DWORD *)this + 48);
        }
        if (v294 > v295)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v318, (uint64_t)v183, v184, v185, v186, v187, v188, v189);
          v293 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v293) = v292;
        *((_DWORD *)this + 50) += 4;
      }
    }
    else
    {
      LOBYTE(v191) = -1;
    }
  }
LABEL_82:
  if ((v353 & 1) != 0 && (v353 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v353 & 0xFFFFFFFF8, v183, v184, v185, v186, v187, v188, v189);
  if ((_DWORD)v26)
  {
    if ((_DWORD)v26 == 31)
    {
      v192 = -1862270945;
    }
    else if ((_DWORD)v26 == 255)
    {
      v192 = -1442774017;
    }
    else
    {
      v192 = v26 | 0xAA0003E0;
    }
    v193 = *((_DWORD *)this + 50);
    if (v193 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v318, (uint64_t)v183, v184, v185, v186, v187, v188, v189);
      v193 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v193) = v192;
    *((_DWORD *)this + 50) += 4;
  }
  v194 = *((_DWORD *)this + 1441);
  if (v194)
  {
    v195 = v194 - 1;
    v196 = 16 * (v194 - 1);
    do
    {
      if (*((_DWORD *)this + 1441) <= v195)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0A4E4);
      }
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)this, *((_QWORD *)this + 719) + v196, v184, v185, v186, v187, v188, v189);
      v196 -= 16;
      --v195;
    }
    while (v195 != -1);
  }
  *((_BYTE *)this + 5768) = 0;
  if (*((_DWORD *)this + 1440))
  {
    if (*((_DWORD *)this + 1441))
      *((_DWORD *)this + 1441) = 0;
    v197 = *v319;
    if (*v319)
    {
      *((_QWORD *)this + 719) = 0;
      *((_DWORD *)this + 1440) = 0;
      WTF::fastFree(v197, v183, v184, v185, v186, v187, v188, v189);
    }
  }
  if (v190)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, (char)v191, v184, v185, v186, v187, v188, v189);
  LOBYTE(v198) = v321;
  if (HIDWORD(v346))
  {
    v199 = 0;
    v200 = 0;
    v201 = 12 * HIDWORD(v346);
    while (v200 < HIDWORD(v346))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v345 + v199), (uint64_t)this, v184, v185, v186, v187, v188, v189);
      ++v200;
      v199 += 12;
      if (v201 == v199)
        goto LABEL_105;
    }
LABEL_293:
    __break(0xC471u);
    JUMPOUT(0x197C0A4DCLL);
  }
LABEL_105:
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v184, v185, v186, v187, v188, v189);
  if (v27 > 15)
    v209 = -1;
  else
    v209 = v27;
  v210 = (char *)this + 12 * v209;
  v211 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v210 + 1194) = v211;
  *((_DWORD *)v210 + 1195) = 4;
  v212 = ~v211;
  if (v212 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0A4F4);
  }
  v213 = *((_QWORD *)this + 499) + 24 * (int)v212;
  v214 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v213 = a2;
  *(_DWORD *)(v213 + 8) = v214;
  *(_BYTE *)(v213 + 17) = v27;
  *(_DWORD *)(v213 + 12) = 6;
  *(_BYTE *)(v213 + 16) = 0;
  v215 = v345;
  if (v347 != (_BYTE *)v345 && v345)
  {
    v345 = 0;
    LODWORD(v346) = 0;
    WTF::fastFree((unint64_t)v215, v202, v203, v204, v205, v206, v207, v208);
  }
  v216 = (unint64_t)v348;
  if (v350 != v348 && v348)
  {
    v348 = 0;
    LODWORD(v349) = 0;
    WTF::fastFree(v216, v202, v203, v204, v205, v206, v207, v208);
  }
  if (v351)
  {
    v217 = (char)v352;
    if ((char)v352 != -1)
    {
      if ((char)v352 > 15)
        v217 = -1;
      --*(_DWORD *)(v351 + 12 * v217 + 4784);
    }
  }
  if (v320)
  {
LABEL_121:
    if ((char)v198 > 15)
      v218 = -1;
    else
      v218 = v198;
    --*((_DWORD *)this + 3 * v218 + 1196);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetExecutable(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *result;
  char *v51;
  int v52;
  char v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  unsigned int v60[3];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_30;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_30:
    LOBYTE(v12) = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0A7A4);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if ((_BYTE)v12 == 0xFF)
      LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if ((char)v12 > 15)
      v59 = -1;
    else
      v59 = v12;
    ++*((_DWORD *)this + 3 * v59 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)a2 + 3);
  if ((_BYTE)v12 == 0xFF)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v12 = v16;
    JSC::DFG::SpeculativeJIT::speculateFunction((uint64_t)this, v15, v16, v17, v18, v19, v20, v21);
    if (v12 == -1)
      LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    JSC::DFG::SpeculativeJIT::speculateFunction((uint64_t)this, *((_QWORD *)a2 + 3), (char)v12, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x1800000000, v14, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v14, 1, v28, v29, v30, v31, (uint64_t)v60, v32);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v14 | 0x2F00000000, v14, v33, v34, v35, v36, v37);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v60, (uint64_t)this, v38, v39, v40, v41, v42, v43);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v44, v45, v46, v47, v48, v49);
  v51 = (char *)this + 4776;
  v52 = *((_DWORD *)a2 + 12);
  if (v14 > 15)
    v53 = -1;
  else
    v53 = v14;
  v54 = &v51[12 * v53];
  *(_DWORD *)v54 = v52;
  *((_DWORD *)v54 + 1) = 4;
  v55 = ~v52;
  if (v55 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x197C0A79CLL);
  }
  v56 = *((_QWORD *)this + 499) + 24 * (int)v55;
  v57 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v56 = a2;
  *(_DWORD *)(v56 + 8) = v57;
  *(_BYTE *)(v56 + 17) = v14;
  *(_DWORD *)(v56 + 12) = 6;
  *(_BYTE *)(v56 + 16) = 0;
  if (v14 != -1)
    --*(_DWORD *)&v51[12 * v53 + 8];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((char)v12 > 15)
      v58 = -1;
    else
      v58 = v12;
    --*(_DWORD *)&v51[12 * v58 + 8];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetGetter(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  char *v22;
  int v23;
  char v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_31;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_28:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0A9B8);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v30 = -1;
    else
      v30 = v12;
    ++*((_DWORD *)this + 3 * v30 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x800000000, v14, a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v15, v16, v17, v18, v19, v20);
  v22 = (char *)this + 4776;
  v23 = *((_DWORD *)a2 + 12);
  if (v14 > 15)
    v24 = -1;
  else
    v24 = v14;
  v25 = &v22[12 * v24];
  *(_DWORD *)v25 = v23;
  *((_DWORD *)v25 + 1) = 4;
  v26 = ~v23;
  if (v26 >= *((unsigned int *)this + 1001))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197C0A9B0);
  }
  v27 = *((_QWORD *)this + 499) + 24 * (int)v26;
  v28 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v27 = a2;
  *(_DWORD *)(v27 + 8) = v28;
  *(_BYTE *)(v27 + 17) = v14;
  *(_DWORD *)(v27 + 12) = 6;
  *(_BYTE *)(v27 + 16) = 0;
  if (v14 != -1)
    --*(_DWORD *)&v22[12 * v24 + 8];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v29 = -1;
    else
      v29 = v12;
    --*(_DWORD *)&v22[12 * v29 + 8];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetSetter(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *result;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v32, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateCellOperand>((uint64_t)&v30, this, (uint64_t)&v32, v10, v11, v12, v13, v14);
  v21 = v34;
  if (v34 == 255)
  {
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v32, v33, v15, v16, v17, v18, v19, v20);
    v34 = v21;
  }
  v22 = v31;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v21 | 0x1000000000, v31, v16, v17, v18, v19, v20);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, v22, a2, 0, v23, v24, v25, v26);
  if (v30)
  {
    v28 = v31;
    if (v31 != -1)
    {
      if (v31 > 15)
        v28 = -1;
      --*(_DWORD *)(v30 + 12 * v28 + 4784);
    }
  }
  if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v29 = (char)v34;
    if ((char)v34 > 15)
      v29 = -1;
    --*(_DWORD *)(v32 + 12 * v29 + 4784);
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetCallee(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *result;
  unsigned int v21;
  char *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v28, this, a3, a4, a5, a6, a7, a8);
  v17 = v29 & 0x1F | 0xF84183A0;
  v18 = *((_DWORD *)this + 50);
  if (v18 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v10, v11, v12, v13, v14, v15, v16);
    v18 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v18) = v17;
  *((_DWORD *)this + 50) += 4;
  v19 = v29;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v11, v12, v13, v14, v15, v16);
  if (v19 > 15)
    v21 = -1;
  else
    v21 = v19;
  v22 = (char *)this + 12 * v21;
  v23 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v22 + 1194) = v23;
  *((_DWORD *)v22 + 1195) = 4;
  v24 = ~v23;
  if (v24 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v25 = *((_QWORD *)this + 499) + 24 * (int)v24;
    v26 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v25 = a2;
    *(_DWORD *)(v25 + 8) = v26;
    *(_BYTE *)(v25 + 17) = v19;
    *(_DWORD *)(v25 + 12) = 6;
    *(_BYTE *)(v25 + 16) = 0;
    if (v28)
    {
      v27 = v29;
      if (v29 != -1)
      {
        if (v29 > 15)
          v27 = -1;
        --*(_DWORD *)(v28 + 12 * v27 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileSetCallee(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v9 = (_DWORD *)this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = v9[50];
  if (v14 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v12, a3, a4, a5, a6, a7, a8);
    v14 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v14) = v13 & 0x1F | 0xF80183A0;
  v9[50] += 4;
  this = JSC::DFG::SpeculativeJIT::noResult((uint64_t)v9, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v13 > 15)
      v15 = -1;
    else
      v15 = v13;
    --v9[3 * v15 + 1196];
  }
  return this;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetArgumentCountIncludingThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *result;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v33, this, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)a2 + 9);
  if (v15)
    v16 = ((unint64_t)*(unsigned int *)(v15 + 36) << 35) | 0x1D;
  else
    v16 = 0x200000001DLL;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v16, v34, v10, v11, v12, v13, v14);
  v17 = v34;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v18, v19, v20, v21, v22, v23);
  v25 = *((_DWORD *)a2 + 12);
  v26 = ~v25;
  if (v26 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v27 = *((_QWORD *)this + 499);
    if (v17 > 15)
      v28 = -1;
    else
      v28 = v17;
    v29 = (char *)this + 12 * v28;
    *((_DWORD *)v29 + 1194) = v25;
    *((_DWORD *)v29 + 1195) = 5;
    v30 = v27 + 24 * (int)v26;
    v31 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v30 = a2;
    *(_DWORD *)(v30 + 8) = v31;
    *(_BYTE *)(v30 + 17) = v17;
    *(_DWORD *)(v30 + 12) = 1;
    *(_BYTE *)(v30 + 16) = 0;
    if (v33)
    {
      v32 = v34;
      if (v34 != -1)
      {
        if (v34 > 15)
          v32 = -1;
        --*(_DWORD *)(v33 + 12 * v32 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileSetArgumentCountIncludingThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;

  v10 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v10)
  {
    if (!*((_BYTE *)this + 212))
    {
      result = 6200;
      __break(0xC471u);
      return result;
    }
    v11 = -1207827536;
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v10, (uint64_t)this + 264, a4, a5, a6, a7, a8);
    v13 = (unsigned int *)((char *)this + 200);
    v12 = *((_DWORD *)this + 50);
    v14 = v12 + 4;
    v15 = *((_DWORD *)this + 48);
  }
  else
  {
    v13 = (unsigned int *)((char *)this + 200);
    v12 = *((_DWORD *)this + 50);
    v14 = v12 + 4;
    v15 = *((_DWORD *)this + 48);
    v11 = -1207827521;
  }
  if (v14 > v15)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), v10, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v12) = v11;
  *((_DWORD *)this + 50) += 4;
  return JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileStrCat(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *result;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  signed __int8 v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;

  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v55, (uint64_t)this, *((_QWORD *)a2 + 3), 1, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v52, (uint64_t)this, *((_QWORD *)a2 + 4), 1, v10, v11, v12, v13);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v49, (uint64_t)this, *((_QWORD *)a2 + 5), 1, v14, v15, v16, v17);
  v25 = v57;
  if (v57 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillJSValue(v55, v56, v19, v20, v21, v22, v23, v24);
    v57 = v25;
  }
  v26 = v54;
  if (v54 == 255)
  {
    v26 = JSC::DFG::SpeculativeJIT::fillJSValue(v52, v53, v19, v20, v21, v22, v23, v24);
    v54 = v26;
  }
  if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v27 = v51;
    if (v51 == 255)
    {
      v27 = JSC::DFG::SpeculativeJIT::fillJSValue(v49, v50, v19, v20, v21, v22, v23, v24);
      v51 = v27;
    }
  }
  else
  {
    v27 = -1;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  ++*((_DWORD *)this + 1196);
  v34 = *((unsigned int *)this + 1194);
  if ((_DWORD)v34 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v34, (uint64_t)v28, v29, v30, v31, v32, v33);
  }
  v35 = *((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL;
  v37 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
  if (v35)
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>(&v48, (unsigned __int8 *)this, v37, v36, v25, v26, v27, v39);
  else
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v48, (int *)this, v37, v36, v25, v26, v38, v39);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v40, v41, v42, v43);
  --*((_DWORD *)this + 1196);
  if ((v50 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v45 = v51;
    if (v51 > 15)
      v45 = -1;
    --*(_DWORD *)(v49 + 12 * v45 + 4784);
  }
  if ((v53 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v46 = (char)v54;
    if ((char)v54 > 15)
      v46 = -1;
    --*(_DWORD *)(v52 + 12 * v46 + 4784);
  }
  if ((v56 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v47 = (char)v57;
    if ((char)v57 > 15)
      v47 = -1;
    --*(_DWORD *)(v55 + 12 * v47 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint8x8_t v18;
  __int32 v19;
  uint8x8_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  _BYTE v63[6];

  v10 = a2;
  v60 = 0;
  if (a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v62 = a5 | 0x100;
    v12 = 1;
    v60 = 1;
  }
  if (a6 != 2)
  {
    *(_WORD *)&v63[2 * v12++ - 2] = a6 | 0x200;
    v60 = v12;
  }
  if (a7 == 3)
  {
    if (!v12)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v63[2 * v12++ - 2] = a7 | 0x300;
    v60 = v12;
  }
  do
  {
    v13 = 0;
    v14 = 0;
    v15 = v12;
    do
    {
      if ((v63[v13 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v14 |= 1 << v63[v13 - 1];
      v13 += 2;
    }
    while (2 * v12 != v13);
    v16 = 0;
    do
    {
      v17 = v63[v16 - 2] & 0x7F;
      if (v17 >= 0x40)
        goto LABEL_64;
      v14 &= ~(1 << v17);
      v16 += 2;
    }
    while (2 * v12 != v16);
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.i32[0];
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v14));
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.i32[0] + v19)
    {
      v21 = 0;
      if (v12 <= 1)
        v22 = 1;
      else
        v22 = v12;
      v23 = 2 * v22;
      while (1)
      {
        v24 = v63[v21 - 1];
        if ((v24 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v14 >> (v24 & 0x7F)) & 1) != 0)
          break;
        v21 += 2;
        if (v23 == v21)
          goto LABEL_57;
      }
      v25 = v63[v21 - 2];
      if (v25 != v24)
      {
        v26 = (char)v25;
        if ((char)v25 == 63)
        {
          v27 = *((_DWORD *)v10 + 50);
          v28 = *((_DWORD *)v10 + 48);
          if (v24 == 31)
            goto LABEL_51;
          v30 = v24 & 0x1F | 0xD2800000;
        }
        else
        {
          v27 = *((_DWORD *)v10 + 50);
          v28 = *((_DWORD *)v10 + 48);
          v29 = (char)v24 == 31 || v26 == 31;
          if (!v29)
          {
            v30 = v24 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v30 = (char)v24 | (32 * v26) | 0x91000000;
        }
LABEL_52:
        if (v27 + 4 > v28)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v27 = *((_DWORD *)v10 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v10 + 7) + v27) = v30;
        *((_DWORD *)v10 + 50) += 4;
        v15 = v60;
      }
      memmove(&v63[v21 - 2], &v63[v21], 2 * v15 - v21 - 2);
      v12 = v60 - 1;
      goto LABEL_56;
    }
    v31 = HIBYTE(v62);
    v32 = v62;
    JSC::MacroAssemblerARM64::swap((uint64_t)v10, (char)v62, SHIBYTE(v62), a4, a5, a6, a7, a8);
    memmove(&v62, v63, 2 * v60 - 2);
    v33 = v60 - 1;
    v29 = v60 == 1;
    v61 = v33;
    v34 = (unsigned __int8 *)&v62;
    v35 = &v63[2 * v33 - 2];
    if (v29)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = v35;
    }
    else
    {
      v36 = 2 * v33;
      v37 = &v62;
      while (*(unsigned __int8 *)v37 != v31)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v32;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v62;
      a2 = v35;
      v40 = v35;
      do
      {
        if (*v34 == v34[1])
        {
          v41 = v34;
          if (v40 != &v63[2 * v61 - 2])
          {
            v59 = v35;
            if (v34 == a2)
            {
              v41 = v40;
            }
            else
            {
              v57 = v39 - (char *)a2;
              v58 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = &v58[v57];
            }
            v35 = v59;
          }
          a2 = v34 + 2;
          ++v38;
          v40 = v41;
        }
        v34 += 2;
        v39 += 2;
      }
      while (v34 < v35);
      v42 = v61;
      v43 = v61;
      v35 = v40;
    }
    v44 = &v63[2 * v42 - 2];
    if (a2 != v44)
    {
      memmove(v35, a2, v44 - a2);
      v43 = v61;
    }
    v12 = v43 - v38;
LABEL_56:
    v60 = v12;
LABEL_57:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_65:
    JSC::MacroAssemblerARM64::load64((uint64_t)v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v10, (uint64_t)operationStrCat3, v45, v46, v47, v48, v49, v50, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v10, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  int *v58;
  int *v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  _BYTE v64[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  if (a5 == 1)
  {
    if (a6 == 2)
      goto LABEL_61;
    v12 = 0;
    goto LABEL_6;
  }
  v63 = a5 | 0x100;
  v12 = 1;
  v61 = 1;
  if (a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v64[2 * v12++ - 2] = a6 | 0x200;
    v61 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v64[v14 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v15 |= 1 << v64[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v64[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_64;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v64[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v64[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v61;
      }
      a1 = (int *)memmove(&v64[v22 - 2], &v64[v22], 2 * v16 - v22 - 2);
      v12 = v61 - 1;
      goto LABEL_57;
    }
    v60 = v13;
    v32 = HIBYTE(v63);
    v33 = v63;
    JSC::MacroAssemblerARM64::swap(v10, (char)v63, SHIBYTE(v63), a4, a5, a6, a7, a8);
    memmove(&v63, v64, 2 * v61 - 2);
    v34 = v61 - 1;
    v30 = v61 == 1;
    v62 = v34;
    v35 = (int *)&v63;
    a1 = (int *)&v64[2 * v34 - 2];
    if (v30)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = a1;
    }
    else
    {
      v36 = 2 * v34;
      v37 = &v63;
      while (*(unsigned __int8 *)v37 != v32)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v33;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v63;
      a2 = a1;
      v40 = a1;
      do
      {
        if (*(unsigned __int8 *)v35 == *((unsigned __int8 *)v35 + 1))
        {
          v41 = v35;
          if (v40 != (int *)&v64[2 * v62 - 2])
          {
            v59 = a1;
            if (v35 == a2)
            {
              v41 = v40;
            }
            else
            {
              v57 = v39 - (char *)a2;
              v58 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = (int *)((char *)v58 + v57);
            }
            a1 = v59;
          }
          a2 = (int *)((char *)v35 + 2);
          ++v38;
          v40 = v41;
        }
        v35 = (int *)((char *)v35 + 2);
        v39 += 2;
      }
      while (v35 < a1);
      v42 = v62;
      v43 = v62;
      a1 = v40;
    }
    v44 = (int *)&v64[2 * v42 - 2];
    v13 = v60;
    if (a2 != v44)
    {
      a1 = (int *)memmove(a1, a2, (char *)v44 - (char *)a2);
      v43 = v62;
    }
    v12 = v43 - v38;
LABEL_57:
    v61 = v12;
LABEL_58:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationStrCat2, v45, v46, v47, v48, v49, v50, v11);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::compileNewArrayBuffer(JSC::DFG::SpeculativeJIT *this, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  _BYTE *v72;
  WTF *v73;
  WTF *v74;
  unsigned __int8 v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  _BYTE *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  WTF *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char *v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  WTF *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  int v155;
  JSC::DFG::Node *v156;
  __int128 v157;
  WTF *v158;
  unsigned int v159;
  unsigned int v160;
  _BYTE v161[24];
  uint64_t v162;
  WTF *v163;
  uint64_t v164;
  _BYTE v165[24];
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  unsigned __int8 v171;
  _BYTE *v172;
  unsigned int v173;
  unsigned int v174;
  _BYTE v175[24];
  _BYTE *v176;
  unsigned int v177;
  unsigned int v178;
  _BYTE v179[24];
  _BYTE *v180;
  uint64_t v181;
  _BYTE v182[32];

  v10 = *((_QWORD *)this + 495);
  v11 = (uint64_t)*a2;
  if ((*a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v143 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v144 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v144 != 0x3FFFFFFF) ? (v145 = v144 == -1) : (v145 = 1), v145))
  {
    v146 = 2;
  }
  else if (v144 >> 28)
  {
    v152 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v152 = v143;
    *(_DWORD *)(v152 + 8) = v144;
    v146 = 1;
    v143 = v152;
  }
  else
  {
    v146 = v143;
    v143 = 0;
  }
  v11 = v143 | v146;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v143 | v146) & 1) == 0)
    goto LABEL_3;
  v147 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v148 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v148 != 0x3FFFFFFF) ? (v149 = v148 == -1) : (v149 = 1), v149))
  {
    v150 = 2;
  }
  else if (v148 >> 28)
  {
    v153 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v153 = v147;
    *(_DWORD *)(v153 + 8) = v148;
    v150 = 1;
    v147 = v153;
  }
  else
  {
    v150 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v147 = 0;
  }
  v151 = v147 | v150;
  v13 = (_QWORD *)(v151 & 0xFFFFFFFF8);
  if ((v151 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = a2[9];
  v19 = *((unsigned __int16 *)a2 + 9);
  if (v19 == 267 || v19 == 352)
  {
    LODWORD(v20) = *((_DWORD *)a2 + 21);
  }
  else if (v19 == 264)
  {
    v20 = (unint64_t)v18 >> 32;
  }
  else
  {
    v20 = (unint64_t)a2[9];
  }
  v21 = *v18;
  v22 = (v20 >> 1) & 7;
  if ((v20 & 0x10) != 0)
    v22 = ((v20 & 0xE) + 10) >> 1;
  v23 = *(_DWORD *)(v17 + 4 * v22 + 892);
  if (v23)
    v24 = 16 * (v23 & 0xFFFFFFFE);
  else
    v24 = 0;
  v32 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v24, (int *)&v180, a4, a5, a6, a7, a8);
  if ((v20 & 0xE) > 9 || *(_BYTE *)(*(_QWORD *)(v17 + 2048) + 4) == 2)
  {
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v25, v26, v27, v28, v29, v30, v31);
    ++*((_DWORD *)this + 1196);
    v137 = *((unsigned int *)this + 1194);
    if ((_DWORD)v137 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v137, v131, v132, v133, v134, v135, v136);
    }
    v138 = *a2[9];
    if ((v138 & 0xFFFE000000000002) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C0C210);
    }
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v180, this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v32, v138, v134, v135, v136);
    JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, (JSC::DFG::Node *)a2, 0, v139, v140, v141, v142);
    --*((_DWORD *)this + 1196);
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v170, this, v26, v27, v28, v29, v30, v31);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v168, this, v33, v34, v35, v36, v37, v38);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v166, this, v39, v40, v41, v42, v43, v44);
    v46 = v171;
    v163 = (WTF *)v165;
    v164 = 2;
    v47 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    if (*(_DWORD *)(v47 + 37620) <= 0xFu)
    {
      __break(0xC471u);
      JUMPOUT(0x197C0C170);
    }
    v180 = 0;
    v181 = v47 + 37560;
    JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v171, (uint64_t)&v180, v169, v167, (uint64_t)&v163, 1, v45, (int8x8_t)2);
    v53 = (v32 >> 4) | ((unint64_t)*(unsigned int *)(v32 + 8) << 32);
    if (v53)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C1B0);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, v53, (uint64_t)this + 264, v48, v49, v50, v51, v52);
      v54 = 16;
    }
    else
    {
      v54 = 63;
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v54, v46, v48, v49, v50, v51, v52);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C0C190);
    }
    v155 = (char)v46;
    v156 = (JSC::DFG::Node *)a2;
    JSC::MacroAssemblerARM64::moveToCachedReg(this, v21 + 16, (uint64_t)this + 264, v55, v56, v57, v58, v59);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v46 | 0x800000000, v60, v61, v62, v63, v64);
    v70 = HIDWORD(v164);
    v158 = (WTF *)v161;
    v159 = 2;
    v160 = HIDWORD(v164);
    if (HIDWORD(v164) < 3)
    {
      v72 = v161;
    }
    else
    {
      if (HIDWORD(v164) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C290);
      }
      v71 = 12 * HIDWORD(v164);
      v72 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v164)));
      v159 = (v71 & 0xFFFFFFFC) / 0xC;
      v158 = (WTF *)v72;
      v70 = HIDWORD(v164);
    }
    if (v70)
    {
      v73 = v163;
      v74 = (WTF *)((char *)v163 + 12 * v70);
      do
      {
        *(_DWORD *)v72 = *(_DWORD *)v73;
        *(_QWORD *)(v72 + 4) = *(_QWORD *)((char *)v73 + 4);
        v73 = (WTF *)((char *)v73 + 12);
        v72 += 12;
      }
      while (v73 != v74);
    }
    v75 = v171;
    v76 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v157, this, v21, v65, v66, v67, v68, v69);
    v77 = v160;
    v172 = v175;
    v173 = 2;
    v174 = v160;
    v154 = v157;
    if (v160 < 3)
    {
      v79 = v175;
    }
    else
    {
      if (v160 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C298);
      }
      v78 = 12 * v160;
      v79 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v160));
      v173 = (v78 & 0xFFFFFFFC) / 0xC;
      v172 = v79;
      v77 = v160;
    }
    if (v77)
    {
      v80 = v158;
      v81 = (WTF *)((char *)v158 + 12 * v77);
      do
      {
        *(_DWORD *)v79 = *(_DWORD *)v80;
        *(_QWORD *)(v79 + 4) = *(_QWORD *)((char *)v80 + 4);
        v80 = (WTF *)((char *)v80 + 12);
        v79 += 12;
      }
      while (v80 != v81);
    }
    v82 = WTF::fastMalloc((WTF *)0xC0);
    v83 = v174;
    v176 = v179;
    v177 = 2;
    v178 = v174;
    if (v174 < 3)
    {
      v87 = v179;
    }
    else
    {
      if (v174 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C2A0);
      }
      v84 = v32;
      v85 = v76;
      v86 = 12 * v174;
      v87 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v174));
      v177 = (v86 & 0xFFFFFFFC) / 0xC;
      v176 = v87;
      v83 = v174;
      v76 = v85;
      v32 = v84;
    }
    if (v83)
    {
      v88 = v172;
      v89 = &v172[12 * v83];
      do
      {
        *(_DWORD *)v87 = *(_DWORD *)v88;
        *(_QWORD *)(v87 + 4) = *(_QWORD *)(v88 + 4);
        v88 += 12;
        v87 += 12;
      }
      while (v88 != v89);
    }
    v90 = v178;
    v180 = v182;
    LODWORD(v181) = 2;
    HIDWORD(v181) = v178;
    if (v178 < 3)
    {
      v94 = v182;
    }
    else
    {
      if (v178 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C2A8);
      }
      v91 = v32;
      v92 = v76;
      v93 = 12 * v178;
      v94 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v178));
      LODWORD(v181) = (v93 & 0xFFFFFFFC) / 0xC;
      v180 = v94;
      v90 = v178;
      v76 = v92;
      v32 = v91;
    }
    if (v90)
    {
      v95 = v176;
      v96 = &v176[12 * v90];
      do
      {
        *(_DWORD *)v94 = *(_DWORD *)v95;
        *(_QWORD *)(v94 + 4) = *(_QWORD *)(v95 + 4);
        v95 += 12;
        v94 += 12;
      }
      while (v95 != v96);
    }
    JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v82, (uint64_t *)&v180, this, 0, 0, (char)v75);
    v104 = (unint64_t)v180;
    if (v182 != v180 && v180 != 0)
    {
      v180 = 0;
      LODWORD(v181) = 0;
      WTF::fastFree(v104, v97, v98, v99, v100, v101, v102, v103);
    }
    *(_QWORD *)v82 = &off_1E3573EF0;
    *(_QWORD *)(v82 + 152) = operationNewArrayBuffer;
    *(_QWORD *)(v82 + 160) = v76;
    *(_QWORD *)(v82 + 168) = v32;
    *(_OWORD *)(v82 + 176) = v154;
    v162 = v82;
    v106 = (unint64_t)v176;
    if (v179 != v176 && v176)
    {
      v176 = 0;
      v177 = 0;
      WTF::fastFree(v106, v97, v98, v99, v100, v101, v102, v103);
    }
    v107 = (unint64_t)v172;
    if (v175 != v172 && v172)
    {
      v172 = 0;
      v173 = 0;
      WTF::fastFree(v107, v97, v98, v99, v100, v101, v102, v103);
    }
    v108 = (_QWORD *)((char *)this + 5656);
    v109 = *((unsigned int *)this + 1417);
    if ((_DWORD)v109 == *((_DWORD *)this + 1416))
    {
      v111 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v109 + 1, (unint64_t)&v162);
      v109 = *((unsigned int *)this + 1417);
      v110 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v109);
      v82 = *v111;
    }
    else
    {
      v110 = (uint64_t *)(*v108 + 8 * v109);
      v111 = &v162;
    }
    *v111 = 0;
    *v110 = v82;
    *((_DWORD *)this + 1417) = v109 + 1;
    v112 = v162;
    v162 = 0;
    if (v112)
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
    v113 = v158;
    if (v161 != (_BYTE *)v158 && v158)
    {
      v158 = 0;
      v159 = 0;
      WTF::fastFree((unint64_t)v113, v97, v98, v99, v100, v101, v102, v103);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), v156, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3B00, "void JSC::DFG::SpeculativeJIT::compileNewArrayBuffer(Node *)", "indexingMode & IsArray");
      __break(0xC471u);
      JUMPOUT(0x197C0C280);
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v156, v98, v99, v100, v101, v102, v103);
    if (v155 > 15)
      v121 = -1;
    else
      v121 = v155;
    v122 = (char *)this + 12 * v121;
    v123 = *((_DWORD *)v156 + 12);
    *((_DWORD *)v122 + 1194) = v123;
    *((_DWORD *)v122 + 1195) = 4;
    v124 = ~v123;
    if (v124 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C0C288);
    }
    v125 = *((_QWORD *)this + 499) + 24 * (int)v124;
    v126 = *((_DWORD *)v156 + 13);
    *(_QWORD *)v125 = v156;
    *(_DWORD *)(v125 + 8) = v126;
    *(_BYTE *)(v125 + 17) = v155;
    *(_DWORD *)(v125 + 12) = 6;
    *(_BYTE *)(v125 + 16) = 0;
    v127 = v163;
    if (v165 != (_BYTE *)v163 && v163)
    {
      v163 = 0;
      LODWORD(v164) = 0;
      WTF::fastFree((unint64_t)v127, v114, v115, v116, v117, v118, v119, v120);
    }
    if (v166)
    {
      v128 = v167;
      if (v167 != -1)
      {
        if (v167 > 15)
          v128 = -1;
        --*(_DWORD *)(v166 + 12 * v128 + 4784);
      }
    }
    if (v168)
    {
      v129 = v169;
      if (v169 != -1)
      {
        if (v169 > 15)
          v129 = -1;
        --*(_DWORD *)(v168 + 12 * v129 + 4784);
      }
    }
    if (v170)
    {
      v130 = (char)v171;
      if ((char)v171 != -1)
      {
        if ((char)v171 > 15)
          v130 = -1;
        --*(_DWORD *)(v170 + 12 * v130 + 4784);
      }
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a5, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a4, 1, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a3, 0, v17, v18, v19, v20, v21);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, (uint64_t)operationNewArrayBuffer, v22, v23, v24, v25, v26, v27, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, 1, v28, v29, v30, v31, v32, v33);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewArrayWithSize(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *result;
  char *v47;
  int v48;
  unsigned int v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  JSC::DFG::Node *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160[2];
  char v161;
  __int16 v162;
  char v163;
  unsigned int v164[3];
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 v167;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v148 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v149 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v149 != 0x3FFFFFFF) ? (v150 = v149 == -1) : (v150 = 1), v150))
  {
    v151 = 2;
  }
  else if (v149 >> 28)
  {
    v157 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v157 = v148;
    *(_DWORD *)(v157 + 8) = v149;
    v151 = 1;
    v148 = v157;
  }
  else
  {
    v151 = v148;
    v148 = 0;
  }
  v11 = v148 | v151;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v148 | v151) & 1) == 0)
    goto LABEL_3;
  v152 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v153 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v153 != 0x3FFFFFFF) ? (v154 = v153 == -1) : (v154 = 1), v154))
  {
    v155 = 2;
  }
  else if (v153 >> 28)
  {
    v158 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v158 = v152;
    *(_DWORD *)(v158 + 8) = v153;
    v155 = 1;
    v152 = v158;
  }
  else
  {
    v155 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v152 = 0;
  }
  v156 = v152 | v155;
  v13 = (_QWORD *)(v156 & 0xFFFFFFFF8);
  if ((v156 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(*(_QWORD *)(v17 + 2048) + 4) != 2)
  {
    v18 = *((unsigned __int16 *)a2 + 9);
    if (v18 != 267)
    {
      if (v18 == 264)
      {
        v19 = *((_DWORD *)a2 + 19);
        goto LABEL_39;
      }
      if (v18 != 352)
      {
        v19 = *((_DWORD *)a2 + 18);
        goto LABEL_14;
      }
    }
    v19 = *((_DWORD *)a2 + 21);
LABEL_39:
    LOBYTE(v19) = v19 & 0xF;
LABEL_14:
    if ((v19 & 0xEu) <= 9)
    {
      v20 = *((_QWORD *)a2 + 3);
      v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v21 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197C0C87CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        v23 = v22;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v165, this, v24, v25, v26, v27, v28, v29);
        if ((_DWORD)v23 != -1)
          goto LABEL_21;
      }
      else
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v165, this, a3, a4, a5, a6, a7, a8);
      }
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v20, v30, v31, v32, v33, v34, v35);
      v23 = v36;
LABEL_21:
      v37 = (char)v166;
      v38 = *((unsigned __int16 *)a2 + 9);
      if (v38 != 267)
      {
        if (v38 == 264)
        {
          v39 = *((_DWORD *)a2 + 19);
          goto LABEL_41;
        }
        if (v38 != 352)
        {
          v39 = *((_DWORD *)a2 + 18);
LABEL_25:
          JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize(this, (uint64_t *)a2, (char)v166, v23, v39, 1, v34, v35);
          result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v40, v41, v42, v43, v44, v45);
          v47 = (char *)this + 4776;
          v48 = *((_DWORD *)a2 + 12);
          if (v37 > 15)
            v49 = -1;
          else
            v49 = v37;
          v50 = &v47[12 * v49];
          *(_DWORD *)v50 = v48;
          *((_DWORD *)v50 + 1) = 4;
          v51 = ~v48;
          if (v51 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197C0C884);
          }
          v52 = *((_QWORD *)this + 499) + 24 * (int)v51;
          v53 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v52 = a2;
          *(_DWORD *)(v52 + 8) = v53;
          *(_BYTE *)(v52 + 17) = v37;
          *(_DWORD *)(v52 + 12) = 6;
          *(_BYTE *)(v52 + 16) = 0;
          if (v165)
          {
            v54 = (char)v166;
            if ((char)v166 != -1)
            {
              if ((char)v166 > 15)
                v54 = -1;
              --*(_DWORD *)(v165 + 12 * v54 + 4784);
            }
          }
          if ((int)v23 > 15)
            v55 = -1;
          else
            v55 = v23;
          --*(_DWORD *)&v47[12 * v55 + 8];
          return result;
        }
      }
      v39 = *((_DWORD *)a2 + 21);
LABEL_41:
      LOBYTE(v39) = v39 & 0xF;
      goto LABEL_25;
    }
  }
  JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)&v165, (uint64_t)this, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
  v63 = v167;
  if (v167 == 255)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v165, v166, v57, v58, v59, v60, v61, v62);
    v63 = v64;
    v167 = v64;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v56, v57, v58, v59, v60, v61, v62);
  ++*((_DWORD *)this + 1196);
  v71 = *((unsigned int *)this + 1194);
  if ((_DWORD)v71 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v71, v65, v66, v67, v68, v69, v70);
  }
  v72 = (char)v63;
  v73 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID>(v72);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v72, 0x8000000, v74, v75, v76, v77, (uint64_t)v164);
  v83 = *((unsigned __int16 *)a2 + 9);
  switch(v83)
  {
    case 267:
      goto LABEL_92;
    case 264:
      v84 = *((_DWORD *)a2 + 19);
      goto LABEL_93;
    case 352:
LABEL_92:
      v84 = *((_DWORD *)a2 + 21);
LABEL_93:
      LOBYTE(v84) = v84 & 0xF;
      goto LABEL_52;
  }
  v84 = *((_DWORD *)a2 + 18);
LABEL_52:
  if ((v84 & 0x10) != 0)
    v85 = ((v84 & 0xEu) + 10) >> 1;
  else
    v85 = (v84 >> 1) & 7;
  v86 = *(_DWORD *)(v17 + 4 * v85 + 892);
  if (v86)
    v87 = 16 * (v86 & 0xFFFFFFFE);
  else
    v87 = 0;
  v88 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v87, v160, v78, v79, v80, v81, v82);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v88, v73, v89, v90, v91, v92, v93);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v94, v95, v96, v97, v98, v99, v100, &v159);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v101, v102, v103, v104, v105, v106);
  if (*((_BYTE *)this + 328))
    v113 = 69;
  else
    v113 = 65;
  v160[0] = v159;
  v160[1] = 0;
  v161 = v113;
  v162 = 15;
  v163 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v164, (uint64_t)this, v107, v108, v109, v110, v111, v112);
  v119 = *(_DWORD *)(v17 + 912);
  if (v119)
    v120 = 16 * (v119 & 0xFFFFFFFE);
  else
    v120 = 0;
  v121 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v120, &v159, v114, v115, v116, v117, v118);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v121, v73, v122, v123, v124, v125, v126);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v160, (uint64_t)this, v127, v128, v129, v130, v131, v132);
  v139 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v133, v134, v135, v136, v137, v138);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,int,JSC::Butterfly *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(&v159, (unsigned __int8 *)this, v139, v140, v73, v72, v141, v142);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v143, v144, v145, v146);
  --*((_DWORD *)this + 1196);
  v147 = (char)v167;
  if ((char)v167 > 15)
    v147 = -1;
  --*(_DWORD *)(v165 + 12 * v147 + 4784);
  return result;
}

uint64_t JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID>(int a1)
{
  uint64_t v1;
  uint64_t result;

  if (a1 == -1)
    return 0;
  LOWORD(v1) = a1;
  if ((a1 & 0x40) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a1 & 0x3F) != 0)
      return 0;
    v1 = 1 << a1;
    if (((1 << a1) & 2) == 0)
      return 1;
    if ((v1 & 4) == 0)
      return 2;
    if ((v1 & 8) == 0)
      return 3;
    if ((v1 & 0x10) == 0)
      return 4;
    if ((v1 & 0x20) == 0)
      return 5;
    if ((v1 & 0x40) == 0)
      return 6;
    if ((v1 & 0x80) == 0)
      return 7;
    if ((v1 & 0x100) == 0)
      return 8;
    if ((v1 & 0x200) == 0)
      return 9;
    if ((v1 & 0x400) == 0)
      return 10;
  }
  if ((v1 & 0x800) == 0)
    return 11;
  if ((v1 & 0x1000) == 0)
    return 12;
  if ((v1 & 0x2000) == 0)
    return 13;
  if ((v1 & 0x4000) == 0)
    return 14;
  if ((v1 & 0x8000) == 0)
    return 15;
  result = 1379;
  __break(0xC471u);
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,int,JSC::Butterfly *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v10 = a2;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v12 = 0;
    goto LABEL_6;
  }
  v65 = a5 | 0x100;
  v12 = 1;
  v63 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v66[2 * v12++ - 2] = a6 | 0x200;
    v63 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v66[v14 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v15 |= 1 << v66[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v66[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_65;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v66[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v66[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *((_DWORD *)v10 + 50);
          v29 = *((_DWORD *)v10 + 48);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *((_DWORD *)v10 + 50);
          v29 = *((_DWORD *)v10 + 48);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *((_DWORD *)v10 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v10 + 7) + v28) = v31;
        *((_DWORD *)v10 + 50) += 4;
        v16 = v63;
      }
      memmove(&v66[v22 - 2], &v66[v22], 2 * v16 - v22 - 2);
      v12 = v63 - 1;
      goto LABEL_57;
    }
    v62 = v13;
    v32 = HIBYTE(v65);
    v33 = v65;
    JSC::MacroAssemblerARM64::swap((uint64_t)v10, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
    memmove(&v65, v66, 2 * v63 - 2);
    v34 = v63 - 1;
    v30 = v63 == 1;
    v64 = v34;
    v35 = (unsigned __int8 *)&v65;
    v36 = &v66[2 * v34 - 2];
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v65;
      while (*(unsigned __int8 *)v38 != v32)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v33;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v65;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v66[2 * v64 - 2])
          {
            v61 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v59 = v40 - (char *)a2;
              v60 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v60[v59];
            }
            v36 = v61;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v64;
      v44 = v64;
      v36 = v41;
    }
    v45 = &v66[2 * v43 - 2];
    v13 = v62;
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v64;
    }
    v12 = v44 - v39;
LABEL_57:
    v63 = v12;
LABEL_58:
    ;
  }
  while (v12);
LABEL_61:
  v46 = *((_DWORD *)v10 + 50);
  if (v46 + 4 > *((_DWORD *)v10 + 48))
  {
LABEL_66:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v46 = *((_DWORD *)v10 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v10 + 7) + v46) = -763363325;
  *((_DWORD *)v10 + 50) += 4;
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v10, (uint64_t)operationNewArrayWithSize, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v10, 1, v53, v54, v55, v56, v57, v58);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewArrayWithConstantSize(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *result;
  unsigned int v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v44, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v42, this, v10, v11, v12, v13, v14, v15);
  v16 = v45;
  v17 = v43;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)*((unsigned int *)a2 + 20), v45, v18, v19, v20, v21, v22);
  v25 = *((unsigned __int16 *)a2 + 9);
  if (v25 != 267)
  {
    if (v25 == 264)
    {
      v26 = *((_DWORD *)a2 + 19);
      goto LABEL_21;
    }
    if (v25 != 352)
    {
      v26 = *((_DWORD *)a2 + 18);
      goto LABEL_5;
    }
  }
  v26 = *((_DWORD *)a2 + 21);
LABEL_21:
  LOBYTE(v26) = v26 & 0xF;
LABEL_5:
  JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize(this, (uint64_t *)a2, v17, v16, v26, 0, v23, v24);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v27, v28, v29, v30, v31, v32);
  if ((int)v17 > 15)
    v34 = -1;
  else
    v34 = v17;
  v35 = (char *)this + 12 * v34;
  v36 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v35 + 1194) = v36;
  *((_DWORD *)v35 + 1195) = 4;
  v37 = ~v36;
  if (v37 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v38 = *((_QWORD *)this + 499) + 24 * (int)v37;
    v39 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v38 = a2;
    *(_DWORD *)(v38 + 8) = v39;
    *(_BYTE *)(v38 + 17) = v17;
    *(_DWORD *)(v38 + 12) = 6;
    *(_BYTE *)(v38 + 16) = 0;
    if (v42)
    {
      v40 = v43;
      if (v43 != -1)
      {
        if (v43 > 15)
          v40 = -1;
        --*(_DWORD *)(v42 + 12 * v40 + 4784);
      }
    }
    if (v44)
    {
      v41 = v45;
      if (v45 != -1)
      {
        if (v45 > 15)
          v41 = -1;
        --*(_DWORD *)(v44 + 12 * v41 + 4784);
      }
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewArrayWithSpecies(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ARM64LogicalImmediate *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint8x8_t v42;
  __int32 v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *result;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  char *v85;
  JSC::DFG::SpeculativeJIT *v86;
  int v87;
  char v88;
  uint64_t v89;
  unsigned __int8 *v90;
  JSC::ARM64LogicalImmediate *v91;
  uint64_t v92;
  _BYTE *v93;
  int v94;
  unsigned __int8 *v95;
  char *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  char v115;
  JSC::DFG::Node *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  int64_t v134;
  char *v135;
  int v136;
  char v137;
  JSC::ARM64LogicalImmediate *v138;
  JSC::ARM64LogicalImmediate *v139;
  int v140;
  JSC::DFG::SpeculativeJIT *v141;
  unint64_t v142;
  char v143;
  _BYTE v144[7];
  void *__dst;
  uint64_t v146;
  _WORD v147[4];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0x4000000000000)
  {
    v141 = this;
    v142 = v10;
    v143 = -1;
    v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v11 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      goto LABEL_122;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    {
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v144, a4, a5, a6, a7, a8);
      v143 = v12;
    }
    else
    {
      v12 = -1;
    }
    v13 = *((_QWORD *)a2 + 4);
    v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
    if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_69;
    v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v15 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    {
      v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
      v12 = v143;
    }
    else
    {
LABEL_69:
      v16 = -1;
    }
    if (v12 == 0xFF)
    {
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v141, v142, (uint64_t)v144, a4, a5, a6, a7, a8);
      v143 = v12;
    }
    if (v16 == -1)
      v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v23 = *((unsigned int *)this + 1194);
    if ((_DWORD)v23 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v23, (uint64_t)v17, v18, v19, v20, v21, v22);
    }
    v24 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v17, v18, v19, v20, v21, v22);
    v32 = *((unsigned __int16 *)a2 + 9);
    v139 = v25;
    if (v32 != 267)
    {
      if (v32 == 264)
      {
        v33 = v24;
        v101 = *((_DWORD *)a2 + 19);
        goto LABEL_85;
      }
      if (v32 != 352)
      {
        v33 = v24;
        v34 = *((unsigned __int8 *)a2 + 72);
LABEL_19:
        __dst = v147;
        LODWORD(v146) = 2;
        if (v12 == 1)
        {
          if (v16 == 2)
            goto LABEL_56;
          v35 = 0;
        }
        else
        {
          v147[0] = v12 | 0x100;
          v35 = 1;
          HIDWORD(v146) = 1;
          if (v16 == 2)
            goto LABEL_25;
        }
        v147[v35++] = v16 | 0x200;
        HIDWORD(v146) = v35;
        while (1)
        {
LABEL_25:
          v36 = 0;
          v37 = 0;
          v38 = (char *)__dst;
          v39 = v35;
          do
          {
            if ((*((_BYTE *)__dst + v36 + 1) & 0x40) != 0)
              goto LABEL_120;
            v37 |= 1 << *((_BYTE *)__dst + v36 + 1);
            v36 += 2;
          }
          while (2 * v35 != v36);
          v40 = 0;
          do
          {
            v41 = *((_BYTE *)__dst + v40) & 0x7F;
            if (v41 >= 0x40)
              goto LABEL_120;
            v37 &= ~(1 << v41);
            v40 += 2;
          }
          while (2 * v35 != v40);
          v42 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
          v42.i16[0] = vaddlv_u8(v42);
          v43 = v42.i32[0];
          v44 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v37));
          v44.i16[0] = vaddlv_u8(v44);
          if (!(v44.i32[0] + v43))
          {
            v88 = *(_BYTE *)__dst;
            v137 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v137, v27, v28, v29, v30, v31);
            memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v146) - 2);
            v89 = (HIDWORD(v146) - 1);
            v53 = HIDWORD(v146) == 1;
            HIDWORD(v146) = v89;
            v90 = (unsigned __int8 *)__dst;
            v91 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v89);
            if (v53)
            {
              v98 = 0;
              v99 = 0;
              v94 = 0;
              v25 = v91;
            }
            else
            {
              v92 = 2 * v89;
              v93 = __dst;
              while (*v93 != v137)
              {
                v93 += 2;
                v92 -= 2;
                if (!v92)
                  goto LABEL_75;
              }
              *v93 = v88;
LABEL_75:
              v94 = 0;
              v95 = v90;
              v25 = v91;
              v96 = (char *)v91;
              do
              {
                if (*v90 == v90[1])
                {
                  v97 = v90;
                  if (v96 != (char *)__dst + 2 * HIDWORD(v146))
                  {
                    v136 = v94;
                    v138 = v91;
                    if (v90 == (unsigned __int8 *)v25)
                    {
                      v97 = (unsigned __int8 *)v96;
                    }
                    else
                    {
                      v134 = v95 - (unsigned __int8 *)v25;
                      v135 = v96;
                      memmove(v96, v25, v95 - (unsigned __int8 *)v25);
                      v97 = (unsigned __int8 *)&v135[v134];
                    }
                    v91 = v138;
                    v94 = v136;
                  }
                  v25 = (JSC::ARM64LogicalImmediate *)(v90 + 2);
                  ++v94;
                  v96 = (char *)v97;
                }
                v90 += 2;
                v95 += 2;
              }
              while (v90 < (unsigned __int8 *)v91);
              v90 = (unsigned __int8 *)__dst;
              v98 = HIDWORD(v146);
              v99 = HIDWORD(v146);
              v91 = (JSC::ARM64LogicalImmediate *)v96;
            }
            v100 = &v90[2 * v98];
            if (v25 != (JSC::ARM64LogicalImmediate *)v100)
            {
              v133 = v94;
              memmove(v91, v25, v100 - (unsigned __int8 *)v25);
              v94 = v133;
              v99 = HIDWORD(v146);
            }
            v35 = v99 - v94;
            goto LABEL_49;
          }
          v45 = 0;
          v46 = v35 <= 1uLL ? 1 : v35;
          v47 = 2 * v46;
          while (1)
          {
            v48 = *((unsigned __int8 *)__dst + v45 + 1);
            if ((v48 & 0x7Fu) >= 0x40)
              goto LABEL_120;
            if (((v37 >> (v48 & 0x7F)) & 1) != 0)
              break;
            v45 += 2;
            if (v47 == v45)
              goto LABEL_50;
          }
          v49 = *((unsigned __int8 *)__dst + v45);
          if (v49 != v48)
            break;
LABEL_48:
          memmove(&v38[v45], &v38[v45 + 2], 2 * v39 - v45 - 2);
          v35 = HIDWORD(v146) - 1;
LABEL_49:
          HIDWORD(v146) = v35;
LABEL_50:
          if (!v35)
          {
            v55 = __dst;
            if (v147 != __dst && __dst)
            {
              __dst = 0;
              LODWORD(v146) = 0;
              WTF::fastFree((unint64_t)v55, v25, v26, v27, v28, v29, v30, v31);
            }
LABEL_56:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v34, 3, v27, v28, v29, v30, v31);
            if ((_DWORD)v33 == -1)
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v139, 0, v56, v57, v58, v59, v60);
            else
              JSC::MacroAssemblerARM64::load64((uint64_t)this, (v33 << 35) + 0x380000001ALL, 0, v56, v57, v58, v59, v60);
            JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewArrayWithSpeciesInt32, v61, v62, v63, v64, v65, v66, (int *)&__dst);
            JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v67, v68, v69, v70, v71, v72);
            result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v73, v74, v75, v76, v77, v78);
            v80 = *((_DWORD *)a2 + 12);
            *((_DWORD *)this + 1194) = v80;
            *((_DWORD *)this + 1195) = 4;
            v81 = ~v80;
            if (v81 < *((unsigned int *)this + 1001))
            {
              v82 = *((_QWORD *)this + 499) + 24 * (int)v81;
              v83 = *((_DWORD *)a2 + 13);
              *(_QWORD *)v82 = a2;
              *(_DWORD *)(v82 + 8) = v83;
              *(_BYTE *)(v82 + 12) = 6;
              *(_DWORD *)(v82 + 13) = 0;
              *(_BYTE *)(v82 + 17) = 0;
              --*((_DWORD *)this + 1196);
              if (v14)
              {
                if (v16 > 15)
                  v84 = -1;
                else
                  v84 = v16;
                v85 = (char *)this + 12 * v84 + 4776;
                --*((_DWORD *)v85 + 2);
              }
              v86 = v141;
              v87 = v143;
LABEL_65:
              if (v87 > 15)
                v87 = -1;
              --*((_DWORD *)v86 + 3 * v87 + 1196);
              return result;
            }
LABEL_121:
            __break(0xC471u);
LABEL_122:
            JUMPOUT(0x197C0D754);
          }
        }
        v50 = (char)v49;
        if ((char)v49 == 63)
        {
          v51 = *((_DWORD *)this + 50);
          v52 = *((_DWORD *)this + 48);
          if ((char)v48 != 31)
          {
            v54 = v48 & 0x1F | 0xD2800000;
            goto LABEL_45;
          }
        }
        else
        {
          v51 = *((_DWORD *)this + 50);
          v52 = *((_DWORD *)this + 48);
          v53 = v48 == 31 || v50 == 31;
          if (!v53)
          {
            v54 = v48 & 0xFFE0FFFF | ((v50 & 0x1F) << 16) | 0xAA0003E0;
LABEL_45:
            if (v51 + 4 > v52)
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
              v51 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v51) = v54;
            *((_DWORD *)this + 50) += 4;
            v38 = (char *)__dst;
            v39 = HIDWORD(v146);
            goto LABEL_48;
          }
        }
        v54 = (char)v48 | (32 * v50) | 0x91000000;
        goto LABEL_45;
      }
    }
    v33 = v24;
    v101 = *((_DWORD *)a2 + 21);
LABEL_85:
    v34 = v101 & 0xF;
    goto LABEL_19;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&__dst, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v141, (uint64_t)this, *((_QWORD *)a2 + 4), v102, v103, v104, v105, v106);
  v114 = v147[0];
  if (LOBYTE(v147[0]) == 255)
  {
    v114 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)__dst, v146, v108, v109, v110, v111, v112, v113);
    LOBYTE(v147[0]) = v114;
  }
  v115 = v143;
  if (v143 == 255)
  {
    v115 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v141, v142, v108, v109, v110, v111, v112, v113);
    v143 = v115;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v107, v108, v109, v110, v111, v112, v113);
  ++*((_DWORD *)this + 1196);
  v122 = *((unsigned int *)this + 1194);
  if ((_DWORD)v122 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v122, (uint64_t)v116, v117, v118, v119, v120, v121);
  }
  v124 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v116, v117, v118, v119, v120, v121);
  v126 = *((unsigned __int16 *)a2 + 9);
  if (v126 != 267)
  {
    if (v126 == 264)
    {
      v127 = *((_DWORD *)a2 + 19);
      goto LABEL_106;
    }
    if (v126 != 352)
    {
      v127 = *((_DWORD *)a2 + 18);
      goto LABEL_97;
    }
  }
  v127 = *((_DWORD *)a2 + 21);
LABEL_106:
  LOBYTE(v127) = v127 & 0xF;
LABEL_97:
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSObject *> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,unsigned char),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,unsigned char>(&v140, (int *)this, v124, v123, v114, v115, v127, v125);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v128, v129, v130, v131);
  --*((_DWORD *)this + 1196);
  if ((v142 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v132 = v143;
    if (v143 > 15)
      v132 = -1;
    --*((_DWORD *)v141 + 3 * v132 + 1196);
  }
  if ((v146 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v86 = (JSC::DFG::SpeculativeJIT *)__dst;
    v87 = SLOBYTE(v147[0]);
    goto LABEL_65;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSObject *> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,unsigned char),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,unsigned char>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int *v64;
  int *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v8 = a7;
  v11 = (uint64_t)a2;
  v12 = a1;
  if (a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v69 = a5 | 0x100;
  v13 = 1;
  v67 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v13++ - 2] = a6 | 0x200;
    v67 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v67;
      }
      a1 = (int *)memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v13 = v67 - 1;
      goto LABEL_57;
    }
    v66 = v14;
    v33 = HIBYTE(v69);
    v34 = v69;
    JSC::MacroAssemblerARM64::swap(v11, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v35 = v67 - 1;
    v31 = v67 == 1;
    v68 = v35;
    v36 = (int *)&v69;
    a1 = (int *)&v70[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v70[2 * v68 - 2])
          {
            v65 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v63 = v40 - (char *)a2;
              v64 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v64 + v63);
            }
            a1 = v65;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v68;
      v44 = v68;
      a1 = v41;
    }
    v45 = (int *)&v70[2 * v43 - 2];
    v14 = v66;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v68;
    }
    v13 = v44 - v39;
LABEL_57:
    v67 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v11, (JSC::ARM64LogicalImmediate *)v8, 3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a4, 0, v46, v47, v48, v49, v50);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a3 << 35) + 0x380000001ALL, 0, v46, v47, v48, v49, v50);
  JSC::DFG::SpeculativeJIT::appendCall(v11, (uint64_t)operationNewArrayWithSpecies, v51, v52, v53, v54, v55, v56, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v57, v58, v59, v60, v61, v62);
}

void JSC::DFG::SpeculativeJIT::compileNewTypedArray(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithSize(this, a2, v10, a4, a5, a6, a7, a8);
  }
  else if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 52)
      JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithInt52Size(this, a2, v10, a4, a5, a6, a7, a8);
    else
      __break(0xC471u);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v44, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    v19 = v46;
    if (v46 == 255)
    {
      v19 = JSC::DFG::SpeculativeJIT::fillJSValue(v44, v45, v13, v14, v15, v16, v17, v18);
      v46 = v19;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v12, v13, v14, v15, v16, v17, v18);
    ++*((_DWORD *)this + 1196);
    v26 = *((unsigned int *)this + 1194);
    if ((_DWORD)v26 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v26, v20, v21, v22, v23, v24, v25);
    }
    v27 = (unsigned __int8 *)JSC::DFG::operationNewTypedArrayWithOneArgumentForType(*((unsigned __int8 *)a2 + 72));
    v34 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, v27, 0, v34, v35, v19, v36, v37, &v43);
    JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v38, v39, v40, v41);
    --*((_DWORD *)this + 1196);
    if ((v45 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v42 = (char)v46;
      if ((char)v46 > 15)
        v42 = -1;
      --*(_DWORD *)(v44 + 12 * v42 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int64_t v57;
  unsigned __int8 *v58;
  char v59;
  int v60;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  v13 = a1;
  if (a6 != 1)
  {
    v65 = a6 | 0x100;
    v63 = 1;
    v62 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v66[v16 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v17 |= 1 << v66[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v66[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_63;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v66[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v66[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v13 + 200);
          if (v31 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v62, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v31) = v30;
          *(_DWORD *)(v13 + 200) += 4;
          v18 = v63;
        }
        memmove(&v66[v24 - 2], &v66[v24], 2 * v18 - v24 - 2);
        v15 = v63 - 1;
        goto LABEL_32;
      }
      v32 = HIBYTE(v65);
      v59 = v65;
      JSC::MacroAssemblerARM64::swap(v13, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
      memmove(&v65, v66, 2 * v63 - 2);
      v33 = v63 - 1;
      v29 = v63 == 1;
      v64 = v33;
      v34 = (unsigned __int8 *)&v65;
      __src = &v66[2 * v33 - 2];
      if (v29)
      {
        v35 = 0;
        v36 = 0;
        v60 = 0;
        a2 = &v66[2 * v33 - 2];
      }
      else
      {
        v38 = 2 * v33;
        v39 = &v65;
        while (*(unsigned __int8 *)v39 != v32)
        {
          ++v39;
          v38 -= 2;
          if (!v38)
            goto LABEL_43;
        }
        *(_BYTE *)v39 = v59;
LABEL_43:
        v60 = 0;
        v40 = (char *)&v65;
        a2 = __src;
        v41 = __src;
        do
        {
          if (*v34 == v34[1])
          {
            v42 = v34;
            if (v41 != &v66[2 * v64 - 2])
            {
              if (v34 == a2)
              {
                v42 = v41;
              }
              else
              {
                v57 = v40 - (char *)a2;
                v58 = v41;
                memmove(v41, a2, v40 - (char *)a2);
                v42 = &v58[v57];
              }
            }
            a2 = v34 + 2;
            ++v60;
            v41 = v42;
          }
          v34 += 2;
          v40 += 2;
        }
        while (v34 < __src);
        v35 = v64;
        v36 = v64;
        __src = v41;
      }
      v37 = &v66[2 * v35 - 2];
      if (a2 != v37)
      {
        memmove(__src, a2, v37 - a2);
        v36 = v64;
      }
      v15 = v36 - v60;
LABEL_32:
      v63 = v15;
LABEL_33:
      ;
    }
    while (v15);
  }
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v13, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v12, v43, v44, v45, v46, v47, v48, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 1, v49, v50, v51, v52, v53, v54);
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 31)
    {
      LODWORD(v12) = -1862270945;
    }
    else if ((_DWORD)v11 == -1)
    {
      LODWORD(v12) = -1442774017;
    }
    else
    {
      LODWORD(v12) = v11 & 0x1F | 0xAA0003E0;
    }
    v56 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v55 = v56;
    v11 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v56 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v55 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v55) = v12;
    *(_DWORD *)v13 += 4;
  }
}

uint64_t JSC::DFG::operationNewTypedArrayWithOneArgumentForType(int a1)
{
  uint64_t result;

  if ((a1 - 1) < 0xB)
    return (uint64_t)*(&off_1E3574950 + (char)(a1 - 1));
  result = 491;
  __break(0xC471u);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileToThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int *v51;
  int *v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  JSC::DFG::Node *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  JSC::DFG::Node *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  void *v89;
  unsigned int v90;
  _BYTE *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _BYTE *v98;
  WTF *v99;
  WTF *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  unsigned int v144;
  _BYTE v145[24];
  uint64_t v146;
  unsigned int v147[3];
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  _BYTE v154[24];
  uint64_t v155;
  unsigned __int8 v156;
  WTF *v157;
  unsigned int v158;
  unsigned int v159;
  _BYTE v160[30];
  __int16 v161;
  void *v162;
  _DWORD *v163;
  char v164;
  __int128 v165;
  char v166[9];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0EA10);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, this, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
LABEL_8:
  v26 = v156;
  v152 = (WTF *)v154;
  v153 = 2;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, v21, v22, v23, v24, v25, (uint64_t)&v150);
  v32 = v150;
  if (v150 != -1)
  {
    v33 = HIDWORD(v153);
    if (HIDWORD(v153) == (_DWORD)v153)
    {
      v34 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, (void *)(HIDWORD(v153) + 1), (unint64_t)&v150, v27, v28, v29, v30, v31);
      v36 = *v34;
      v35 = (uint64_t *)(v34 + 1);
      v32 = v36;
      v33 = HIDWORD(v153);
    }
    else
    {
      v35 = &v151;
    }
    v37 = (char *)v152 + 12 * v33;
    *(_DWORD *)v37 = v32;
    *(_QWORD *)(v37 + 4) = *v35;
    ++HIDWORD(v153);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0E9ACLL);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v38, v39, v40, v41, (uint64_t)&v148);
  v49 = v148;
  if (v148 != -1)
  {
    v50 = HIDWORD(v153);
    if (HIDWORD(v153) == (_DWORD)v153)
    {
      v51 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, (void *)(HIDWORD(v153) + 1), (unint64_t)&v148, v44, v45, v46, v47, v48);
      v53 = *v51;
      v52 = v51 + 1;
      v49 = v53;
      v50 = HIDWORD(v153);
    }
    else
    {
      v52 = &v149;
    }
    v54 = (char *)v152 + 12 * v50;
    *(_DWORD *)v54 = v49;
    *(_QWORD *)(v54 + 4) = *(_QWORD *)v52;
    ++HIDWORD(v153);
  }
  v55 = (char)v26;
  v142 = v26;
  if ((_DWORD)v26 != v13)
  {
    v56 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if (v13 == 63)
    {
      if ((_DWORD)v26 != 31)
      {
        v57 = (char)v26;
        v60 = v26 & 0x1F | 0xD2800000;
        goto LABEL_25;
      }
    }
    else if (v13 != 31 && (_DWORD)v26 != 31)
    {
      v57 = (char)v26;
      v58 = v26 & 0xFFE0FFFF | ((v13 & 0x1F) << 16);
      v59 = -1442839584;
LABEL_24:
      v60 = v58 | v59;
LABEL_25:
      v62 = (unsigned int *)((char *)this + 200);
      v61 = *((_DWORD *)this + 50);
      if (v61 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v42, v43, v44, v45, v46, v47, v48);
        v61 = *v62;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v61) = v60;
      *v62 += 4;
      v55 = v57;
      v11 = v56;
      goto LABEL_28;
    }
    v57 = (char)v26;
    v58 = v55 | (32 * v13);
    v59 = -1862270976;
    goto LABEL_24;
  }
LABEL_28:
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C0E9CCLL);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v63 = *((char *)this + 272);
  v64 = *((_BYTE *)this + 272);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, v63, v44, v45, v46, v47, v48);
  v72 = *((_DWORD *)this + 50);
  if (v72 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
    v72 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v72) = v63 | (32 * v63) | 0x5100CC00;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v64, 5, v68, v69, v70, v71, (uint64_t)v147);
  v79 = *((unsigned __int16 *)a2 + 9);
  if (v79 == 6)
    goto LABEL_32;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v79 - 101) < 4)
      goto LABEL_81;
LABEL_97:
    __break(0xC471u);
    goto LABEL_111;
  }
  v128 = v79 - 117;
  if ((v79 - 117) > 0x3C)
  {
LABEL_95:
    if (v79 == 391)
      goto LABEL_81;
    if (v79 != 253)
      goto LABEL_97;
LABEL_32:
    v80 = (char *)a2 + 72;
    goto LABEL_33;
  }
  if (((1 << v128) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v128) & 0x4020) != 0)
      goto LABEL_32;
    goto LABEL_95;
  }
LABEL_81:
  v80 = (char *)a2 + 80;
LABEL_33:
  if (*v80)
  {
    v130 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v73, v74, v75, v76, v77, v78);
    if ((_DWORD)v130 == -1)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v131, v55, v132, v133, v134, v135, v136);
    else
      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v130 << 35) + 0x380000001ALL, v55, v132, v133, v134, v135, v136);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v142 | 0x4000000000, v55, v137, v138, v139, v140, v141);
  }
  else
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, v55, v74, v75, v76, v77, v78);
  }
  v87 = *((unsigned __int16 *)a2 + 9);
  if (v87 == 6)
    goto LABEL_36;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v87 - 101) < 4)
      goto LABEL_85;
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x197C0E964);
  }
  v129 = v87 - 117;
  if ((v87 - 117) > 0x3C)
  {
LABEL_99:
    if (v87 == 391)
      goto LABEL_85;
    if (v87 != 253)
      goto LABEL_101;
LABEL_36:
    v88 = (char *)a2 + 72;
    goto LABEL_37;
  }
  if (((1 << v129) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v129) & 0x4020) != 0)
      goto LABEL_36;
    goto LABEL_99;
  }
LABEL_85:
  v88 = (char *)a2 + 80;
LABEL_37:
  if (*v88)
    v89 = operationToThis;
  else
    v89 = operationToThisStrict;
  v90 = HIDWORD(v153);
  v143 = (WTF *)v145;
  v144 = HIDWORD(v153);
  if (HIDWORD(v153) < 3)
  {
    v91 = v145;
  }
  else
  {
    if (HIDWORD(v153) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C0EA18);
    }
    v91 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v153)));
    v143 = (WTF *)v91;
    v90 = HIDWORD(v153);
  }
  if (v90)
  {
    v92 = v152;
    v93 = (WTF *)((char *)v152 + 12 * v90);
    do
    {
      *(_DWORD *)v91 = *(_DWORD *)v92;
      *(_QWORD *)(v91 + 4) = *(_QWORD *)((char *)v92 + 4);
      v92 = (WTF *)((char *)v92 + 12);
      v91 += 12;
    }
    while (v92 != v93);
  }
  v94 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v81, v82, v83, v84, v85, v86);
  v96 = v95;
  v97 = v144;
  v157 = (WTF *)v160;
  v158 = 2;
  v159 = v144;
  if (v144 >= 3)
  {
    if (v144 < 0x15555556)
    {
      v98 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v144));
      v158 = 12 * v144 / 0xC;
      v157 = (WTF *)v98;
      v97 = v144;
      goto LABEL_49;
    }
    __break(0xC471u);
LABEL_111:
    JUMPOUT(0x197C0E920);
  }
  v98 = v160;
LABEL_49:
  if (v97)
  {
    v99 = v143;
    v100 = (WTF *)((char *)v143 + 12 * v97);
    do
    {
      *(_DWORD *)v98 = *(_DWORD *)v99;
      *(_QWORD *)(v98 + 4) = *(_QWORD *)((char *)v99 + 4);
      v99 = (WTF *)((char *)v99 + 12);
      v98 += 12;
    }
    while (v99 != v100);
  }
  v166[0] = v142;
  *(_QWORD *)&v165 = v94;
  *((_QWORD *)&v165 + 1) = v96;
  v164 = v13;
  v162 = v89;
  v163 = this;
  v161 = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(&v146, (uint64_t *)&v157, &v163, (uint64_t *)&v162, (unsigned __int8 *)&v161 + 1, (char *)&v161, v166, &v165, &v164);
  v108 = v157;
  if (v160 != (_BYTE *)v157 && v157)
  {
    v157 = 0;
    v158 = 0;
    WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
  }
  v109 = (_QWORD *)((char *)this + 5656);
  v110 = *((unsigned int *)this + 1417);
  if ((_DWORD)v110 == *((_DWORD *)this + 1416))
  {
    v112 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v146);
    v110 = *((unsigned int *)this + 1417);
    v111 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v110);
  }
  else
  {
    v111 = (uint64_t *)(*v109 + 8 * v110);
    v112 = &v146;
  }
  v113 = *v112;
  *v112 = 0;
  *v111 = v113;
  *((_DWORD *)this + 1417) = v110 + 1;
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v145 != (_BYTE *)v143 && v143)
    WTF::fastFree((unint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v147, (uint64_t)this, v102, v103, v104, v105, v106, v107);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v55, (uint64_t)a2, 16, 0, v115, v116, v117);
  v125 = v152;
  if (v154 != (_BYTE *)v152 && v152)
  {
    v152 = 0;
    LODWORD(v153) = 0;
    WTF::fastFree((unint64_t)v125, v118, v119, v120, v121, v122, v123, v124);
  }
  if (v155)
  {
    v126 = (char)v156;
    if ((char)v156 != -1)
    {
      if ((char)v156 > 15)
        v126 = -1;
      --*(_DWORD *)(v155 + 12 * v126 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v127 = -1;
    else
      v127 = v13;
    --*((_DWORD *)this + 3 * v127 + 1196);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  int v31;
  _BYTE v32[30];
  __int16 v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  __int128 v37;
  char v38;

  v16 = *((unsigned int *)a2 + 3);
  v29 = (WTF *)v32;
  v30 = 2;
  v31 = v16;
  if (v16 < 3)
  {
    v18 = v32;
    if (!(_DWORD)v16)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v16 >= 0x15555556)
  {
    __break(0xC471u);
    return;
  }
  v17 = 12 * v16;
  v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v16));
  v30 = (v17 & 0xFFFFFFFC) / 0xC;
  v29 = (WTF *)v18;
  LODWORD(v16) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v16)
  {
LABEL_6:
    v19 = *a2;
    v20 = *a2 + 12 * v16;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
LABEL_8:
  v38 = a5;
  *(_QWORD *)&v37 = a6;
  *((_QWORD *)&v37 + 1) = a7;
  v36 = a8;
  v34 = a4;
  v35 = a3;
  v33 = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(a1, (uint64_t *)&v29, &v35, &v34, (unsigned __int8 *)&v33 + 1, (char *)&v33, &v38, &v37, &v36);
  v28 = v29;
  if (v32 != (_BYTE *)v29)
  {
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileOwnPropertyKeysVariant(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  _DWORD *v88;
  uint64_t *v89;
  int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int *v103;
  int *v104;
  int v105;
  char *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  _DWORD *v121;
  uint64_t *v122;
  int v123;
  char *v124;
  JSC::DFG::Graph *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int8x8_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  _BYTE *v164;
  WTF *v165;
  WTF *v166;
  uint64_t v167;
  unsigned int v168;
  char *v169;
  char v170;
  WTF *v171;
  WTF *v172;
  void *v173;
  JSC::DFG::Node *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  WTF *v186;
  unsigned int v187;
  _BYTE *v188;
  WTF *v189;
  WTF *v190;
  unsigned int v191;
  uint64_t (*v192)();
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  _BYTE *v196;
  WTF *v197;
  WTF *v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  _BYTE *v202;
  WTF *v203;
  WTF *v204;
  unsigned int v205;
  int v206;
  _BYTE *v207;
  uint64_t v208;
  _BYTE *v209;
  unsigned int v210;
  int v211;
  char *v212;
  uint64_t v213;
  _BYTE *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  WTF *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  int v246;
  unsigned int v247;
  char *v248;
  unint64_t v249;
  uint64_t v250;
  int v251;
  WTF *v252;
  WTF *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  char v259;
  char *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  JSC::DFG::Node *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  char *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  unsigned int v305;
  uint8x8_t v306;
  __int32 v307;
  uint8x8_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  char *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unsigned int v319;
  unsigned int v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  JSC::DFG::Node *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  int v369;
  char *v370;
  uint64_t v371;
  _BYTE *v372;
  char *v373;
  char *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  JSC::AssemblerBuffer *v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  char v384;
  char *v385;
  int v386;
  _QWORD *v387;
  char v388;
  int v389;
  WTF *v390;
  unsigned int v391;
  _BYTE v392[24];
  uint64_t v393;
  WTF *v394;
  unsigned int v395;
  unsigned int v396;
  _BYTE v397[24];
  uint64_t v398;
  WTF *v399;
  uint64_t v400;
  _BYTE v401[28];
  int v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  WTF *v408;
  uint64_t v409;
  _BYTE v410[24];
  uint64_t v411;
  unsigned __int8 v412;
  uint64_t v413;
  char v414;
  uint64_t v415;
  char v416;
  uint64_t v417;
  unsigned __int8 v418;
  uint64_t v419;
  unsigned __int8 v420;
  char v421;
  char v422;
  __int16 v423;
  uint64_t (*v424)(JSC::CommonSlowPaths *, JSC::VM *, JSC::Structure *, JSC::JSImmutableButterfly *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  WTF *v425;
  unsigned int v426;
  unsigned int v427;
  _BYTE v428[24];
  _BYTE *v429;
  unsigned int v430;
  unsigned int v431;
  _BYTE v432[24];
  _BYTE *v433;
  unsigned int v434;
  unsigned int v435;
  _BYTE v436[24];
  char *v437;
  unint64_t v438;
  char v439[32];

  v15 = *((_QWORD *)a2 + 3);
  v16 = (v15 >> 50) & 0x3F;
  if ((_DWORD)v16 == 11)
  {
    if (!JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this[495], a2, a3, a4, a5, a6, a7, a8))
    {
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v437, (uint64_t)this, *((_QWORD *)a2 + 3), v18, v19, v20, v21, v22);
      v328 = v439[0];
      if (v439[0] == 255)
      {
        v328 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v437, v438, v322, v323, v324, v325, v326, v327);
        v439[0] = v328;
      }
      v329 = v328;
      JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 3), v329, v323, v324, v325, v326, v327);
      JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v330, v331, v332, v333, v334, v335, v336);
      ++*((_DWORD *)this + 1196);
      v343 = *((unsigned int *)this + 1194);
      if ((_DWORD)v343 != 0x3FFFFFFF)
      {
        this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v343, v337, v338, v339, v340, v341, v342);
      }
      v344 = JSC::DFG::operationOwnPropertyKeysVariantObject(*((unsigned __int16 *)a2 + 9));
      v351 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v345, v346, v347, v348, v349, v350);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((int *)&v433, (unsigned __int8 *)this, v344, v351, v352, v329, v353, v354);
      JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v355, v356, v357, v358);
      --*((_DWORD *)this + 1196);
      if ((v438 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v359 = v439[0];
        if (v439[0] > 15)
          v359 = -1;
        --*(_DWORD *)&v437[12 * v359 + 4784];
      }
      return;
    }
    v23 = *((_QWORD *)a2 + 3);
    v24 = v23 & 0xFF00FFFFFFFFFFFFLL;
    if ((v23 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_199;
    v25 = ~*(_DWORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v25 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C101FCLL);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v25 + 12))
      v26 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), v17, v18, v19, v20, v21, v22);
    else
LABEL_199:
      v26 = -1;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v419, (JSC::DFG::SpeculativeJIT *)this, v17, v18, v19, v20, v21, v22);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v417, (JSC::DFG::SpeculativeJIT *)this, v27, v28, v29, v30, v31, v32);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v415, (JSC::DFG::SpeculativeJIT *)this, v33, v34, v35, v36, v37, v38);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v413, (JSC::DFG::SpeculativeJIT *)this, v39, v40, v41, v42, v43, v44);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v411, (JSC::DFG::SpeculativeJIT *)this, v45, v46, v47, v48, v49, v50);
    if (v26 == -1)
      v26 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v23, v51, v52, v53, v54, v55, v56);
    v57 = (char)v420;
    v58 = v420;
    v59 = v420;
    v60 = v418;
    v61 = (char)v418;
    v384 = v416;
    v386 = v414;
    v62 = v412;
    v378 = v26;
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 3), v26, v52, v53, v54, v55, v56);
    v408 = (WTF *)v410;
    v409 = 2;
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v26, v57, v63, v64, v65, v66, v67);
    v75 = *((_DWORD *)this + 50);
    if (v75 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v68, v69, v70, v71, v72, v73, v74);
      v75 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)((char *)this[7] + v75) = v59 & 0x1F | (32 * (v59 & 0x1F)) | 0xD37CEC00;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v58 | 0x4000000000, (char)v60, v70, v71, v72, v73, v74);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v61, 0xFFFFFFFFLL, v76, v77, v78, v79, (uint64_t)&v406, v80);
    v86 = v406;
    if (v406 != -1)
    {
      v87 = HIDWORD(v409);
      if (HIDWORD(v409) == (_DWORD)v409)
      {
        v88 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v408, (void *)(HIDWORD(v409) + 1), (unint64_t)&v406, v81, v82, v83, v84, v85);
        v90 = *v88;
        v89 = (uint64_t *)(v88 + 1);
        v86 = v90;
        v87 = HIDWORD(v409);
      }
      else
      {
        v89 = &v407;
      }
      v91 = (char *)v408 + 12 * v87;
      *(_DWORD *)v91 = v86;
      *(_QWORD *)(v91 + 4) = *v89;
      ++HIDWORD(v409);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C0FE74);
    }
    *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v60 | 0x500000000, *((char *)this + 304), v81, v82, v83, v84, v85);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 1, v92, v93, v94, v95, (uint64_t)&v404);
    v101 = v404;
    if (v404 != -1)
    {
      v102 = HIDWORD(v409);
      if (HIDWORD(v409) == (_DWORD)v409)
      {
        v103 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v408, (void *)(HIDWORD(v409) + 1), (unint64_t)&v404, v96, v97, v98, v99, v100);
        v105 = *v103;
        v104 = v103 + 1;
        v101 = v105;
        v102 = HIDWORD(v409);
      }
      else
      {
        v104 = &v405;
      }
      v106 = (char *)v408 + 12 * v102;
      *(_DWORD *)v106 = v101;
      *(_QWORD *)(v106 + 4) = *(_QWORD *)v104;
      ++HIDWORD(v409);
    }
    v107 = *((unsigned __int16 *)a2 + 9) - 197;
    if (v107 >= 5 || ((0x17u >> (*((_WORD *)a2 + 9) + 59)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C10090);
    }
    JSC::MacroAssemblerARM64::load64((uint64_t)this, qword_199123EA0[(__int16)v107] | v60, (char)v60, v96, v97, v98, v99, v100);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 9, v61, 1, v108, v109, v110, v111, (uint64_t)&v402);
    v119 = v402;
    if (v402 != -1)
    {
      v120 = HIDWORD(v409);
      if (HIDWORD(v409) == (_DWORD)v409)
      {
        v121 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v408, (void *)(HIDWORD(v409) + 1), (unint64_t)&v402, v114, v115, v116, v117, v118);
        v123 = *v121;
        v122 = (uint64_t *)(v121 + 1);
        v119 = v123;
        v120 = HIDWORD(v409);
      }
      else
      {
        v122 = &v403;
      }
      v124 = (char *)v408 + 12 * v120;
      *(_DWORD *)v124 = v119;
      *(_QWORD *)(v124 + 4) = *v122;
      ++HIDWORD(v409);
    }
    v381 = v24;
    v399 = (WTF *)v401;
    v400 = 2;
    v125 = this[495];
    v126 = *(_QWORD *)a2;
    v388 = v26;
    v380 = (JSC::AssemblerBuffer *)(this + 7);
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v360 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
      if ((v126 & 2) != 0 || (v361 = *(_DWORD *)((v126 & 0xFFFFFFFF8) + 8), v361 == 0x3FFFFFFF) || v361 == -1)
      {
        v362 = 2;
      }
      else if (v361 >> 28)
      {
        v376 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v376 = v360;
        *(_DWORD *)(v376 + 8) = v361;
        v362 = 1;
        v360 = v376;
      }
      else
      {
        v362 = v360;
        v360 = 0;
      }
      v126 = v360 | v362;
      v127 = *((_QWORD *)v125 + 4);
      if (((v360 | v362) & 1) != 0)
      {
        v363 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
        if ((v126 & 2) != 0 || (v364 = *(_DWORD *)((v126 & 0xFFFFFFFF8) + 8), v364 == 0x3FFFFFFF) || v364 == -1)
        {
          v365 = 2;
        }
        else if (v364 >> 28)
        {
          v377 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v377 = v363;
          *(_DWORD *)(v377 + 8) = v364;
          v365 = 1;
          v363 = v377;
        }
        else
        {
          v365 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
          v363 = 0;
        }
        v366 = v363 | v365;
        v128 = (_QWORD *)(v366 & 0xFFFFFFFF8);
        if ((v366 & 1) != 0)
        {
          v129 = 0;
          v130 = 0;
          v131 = (_QWORD *)*v128;
LABEL_33:
          if (v131)
            v127 = v131[1];
          v132 = *(_QWORD *)(v127 + 8);
          if ((v129 & 1) == 0 && v128)
            WTF::fastFree((unint64_t)v128, v112, v113, v114, v115, v116, v117, v118);
          if ((v130 & 1) == 0 && (v126 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v126 & 0xFFFFFFFF8, v112, v113, v114, v115, v116, v117, v118);
          v133 = *(_DWORD *)(v132 + 928);
          if (v133)
            v134 = 16 * (v133 & 0xFFFFFFFE);
          else
            v134 = 0;
          v142 = JSC::DFG::Graph::registerStructure((uint64_t)this[495], v134, (int *)&v437, v114, v115, v116, v117, v118);
          if ((_DWORD)v60 == v386)
          {
            v146 = *((_DWORD *)this + 50);
            goto LABEL_48;
          }
          if ((_DWORD)v60 == 63)
          {
            if (v386 != 31)
            {
              v144 = v386 & 0x1F | 0xD2800000;
              goto LABEL_45;
            }
          }
          else if ((_DWORD)v61 != 31 && v386 != 31)
          {
            v144 = v386 | ((v61 & 0x1F) << 16) | 0xAA0003E0;
LABEL_45:
            v145 = *((_DWORD *)this + 50);
            if (v145 + 4 > *((_DWORD *)this + 48))
            {
              v143 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v380, v135, v136, v137, v138, v139, v140, v141).n128_u64[0];
              v145 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)((char *)this[7] + v145) = v144;
            v146 = *((_DWORD *)this + 50) + 4;
            *((_DWORD *)this + 50) = v146;
LABEL_48:
            v147 = (char)v60 | (32 * (char)v60) | 0x91004000;
            if (v146 + 4 > *((_DWORD *)this + 48))
            {
              v143 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v380, v135, v136, v137, v138, v139, v140, v141).n128_u64[0];
              v146 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)((char *)this[7] + v146) = v147;
            *((_DWORD *)this + 50) += 4;
            v148 = *((_QWORD *)this[44] + 2);
            if (*(_DWORD *)(v148 + 37620) <= 0xFu)
            {
              __break(0xC471u);
              JUMPOUT(0x197C0FF38);
            }
            v149 = (char)v62;
            v437 = 0;
            v438 = v148 + 37560;
            JSC::AssemblyHelpers::emitAllocate((uint64_t)this, v149, (uint64_t)&v437, (char)v59, v384, (uint64_t)&v399, 1, v141, v143);
            v155 = (v142 >> 4) | ((unint64_t)*(unsigned int *)(v142 + 8) << 32);
            if (v155)
            {
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197C0FF80);
              }
              JSC::MacroAssemblerARM64::moveToCachedReg(this, v155, (uint64_t)(this + 33), v150, v151, v152, v153, v154);
              v156 = 16;
            }
            else
            {
              v156 = 63;
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v156, v62, v150, v151, v152, v153, v154);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v61, v62 | 0x800000000, v157, v158, v159, v160, v161);
            v162 = HIDWORD(v400);
            v394 = (WTF *)v397;
            v395 = 2;
            v396 = HIDWORD(v400);
            if (HIDWORD(v400) < 3)
            {
              v164 = v397;
            }
            else
            {
              if (HIDWORD(v400) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C10204);
              }
              v163 = 12 * HIDWORD(v400);
              v164 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v400)));
              v395 = (v163 & 0xFFFFFFFC) / 0xC;
              v394 = (WTF *)v164;
              v162 = HIDWORD(v400);
            }
            if (v162)
            {
              v165 = v399;
              v166 = (WTF *)((char *)v399 + 12 * v162);
              do
              {
                *(_DWORD *)v164 = *(_DWORD *)v165;
                *(_QWORD *)(v164 + 4) = *(_QWORD *)((char *)v165 + 4);
                v165 = (WTF *)((char *)v165 + 12);
                v164 += 12;
              }
              while (v165 != v166);
            }
            v167 = *((_QWORD *)this[44] + 2);
            v168 = v396;
            v437 = v439;
            LODWORD(v438) = 2;
            HIDWORD(v438) = v396;
            if (v396 < 3)
            {
              v169 = v439;
            }
            else
            {
              if (v396 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C1020CLL);
              }
              v169 = (char *)WTF::fastMalloc((WTF *)(12 * v396));
              LODWORD(v438) = 12 * v396 / 0xC;
              v437 = v169;
              v168 = v396;
            }
            v170 = v388;
            if (v168)
            {
              v171 = v394;
              v172 = (WTF *)((char *)v394 + 12 * v168);
              do
              {
                *(_DWORD *)v169 = *(_DWORD *)v171;
                *(_QWORD *)(v169 + 4) = *(_QWORD *)((char *)v171 + 4);
                v171 = (WTF *)((char *)v171 + 12);
                v169 += 12;
              }
              while (v171 != v172);
            }
            v433 = (_BYTE *)v167;
            v429 = (_BYTE *)v142;
            v424 = operationNewArrayBuffer;
            v425 = (WTF *)this;
            v423 = 0;
            v422 = v149;
            v421 = v386;
            std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::RegisteredStructure&,JSC::ARM64Registers::RegisterID&>(&v398, (uint64_t *)&v437, (_DWORD **)&v425, (uint64_t *)&v424, (unsigned __int8 *)&v423 + 1, (char *)&v423, &v422, (uint64_t *)&v433, (uint64_t *)&v429, &v421);
            v180 = (unint64_t)v437;
            if (v439 != v437 && v437)
            {
              v437 = 0;
              LODWORD(v438) = 0;
              WTF::fastFree(v180, v173, (uint64_t)v174, v175, v176, v177, v178, v179);
            }
            v181 = *((unsigned int *)this + 1417);
            if ((_DWORD)v181 == *((_DWORD *)this + 1416))
            {
              v183 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(this + 707), v181 + 1, (unint64_t)&v398);
              v181 = *((unsigned int *)this + 1417);
              v182 = (uint64_t *)((char *)this[707] + 8 * v181);
            }
            else
            {
              v182 = (uint64_t *)((char *)this[707] + 8 * v181);
              v183 = &v398;
            }
            v184 = *v183;
            *v183 = 0;
            *v182 = v184;
            *((_DWORD *)this + 1417) = v181 + 1;
            v185 = v398;
            v398 = 0;
            if (v185)
              (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
            v186 = v394;
            if (v397 != (_BYTE *)v394 && v394)
            {
              v394 = 0;
              v395 = 0;
              WTF::fastFree((unint64_t)v186, v173, (uint64_t)v174, v175, v176, v177, v178, v179);
            }
            v187 = HIDWORD(v409);
            v390 = (WTF *)v392;
            v391 = HIDWORD(v409);
            if (HIDWORD(v409) < 3)
            {
              v188 = v392;
            }
            else
            {
              if (HIDWORD(v409) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C10214);
              }
              v188 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v409)));
              v390 = (WTF *)v188;
              v187 = HIDWORD(v409);
            }
            if (v187)
            {
              v189 = v408;
              v190 = (WTF *)((char *)v408 + 12 * v187);
              do
              {
                *(_DWORD *)v188 = *(_DWORD *)v189;
                *(_QWORD *)(v188 + 4) = *(_QWORD *)((char *)v189 + 4);
                v189 = (WTF *)((char *)v189 + 12);
                v188 += 12;
              }
              while (v189 != v190);
            }
            v191 = *((unsigned __int16 *)a2 + 9) - 197;
            if (v191 >= 5 || ((0x17u >> (*((_WORD *)a2 + 9) + 59)) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x197C100B0);
            }
            v192 = off_1E35749D0[(__int16)v191];
            v193 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v174, v175, v176, v177, v178, v179);
            v379 = v194;
            v195 = v391;
            v425 = (WTF *)v428;
            v426 = 2;
            v427 = v391;
            if (v391 < 3)
            {
              v196 = v428;
            }
            else
            {
              if (v391 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C1021CLL);
              }
              v196 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v391));
              v426 = 12 * v391 / 0xC;
              v425 = (WTF *)v196;
              v195 = v391;
            }
            v387 = this + 707;
            if (v195)
            {
              v197 = v390;
              v198 = (WTF *)((char *)v390 + 12 * v195);
              do
              {
                *(_DWORD *)v196 = *(_DWORD *)v197;
                *(_QWORD *)(v196 + 4) = *(_QWORD *)((char *)v197 + 4);
                v197 = (WTF *)((char *)v197 + 12);
                v196 += 12;
              }
              while (v197 != v198);
            }
            v199 = WTF::fastMalloc((WTF *)0xB8);
            v200 = v427;
            v429 = v432;
            v430 = 2;
            v431 = v427;
            if (v427 < 3)
            {
              v202 = v432;
            }
            else
            {
              if (v427 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C10224);
              }
              v201 = 12 * v427;
              v202 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v427));
              v430 = (v201 & 0xFFFFFFFC) / 0xC;
              v429 = v202;
              v200 = v427;
              v170 = v388;
            }
            if (v200)
            {
              v203 = v425;
              v204 = (WTF *)((char *)v425 + 12 * v200);
              do
              {
                *(_DWORD *)v202 = *(_DWORD *)v203;
                *(_QWORD *)(v202 + 4) = *(_QWORD *)((char *)v203 + 4);
                v203 = (WTF *)((char *)v203 + 12);
                v202 += 12;
              }
              while (v203 != v204);
            }
            v205 = v431;
            v433 = v436;
            v434 = 2;
            v435 = v431;
            if (v431 < 3)
            {
              v207 = v436;
            }
            else
            {
              if (v431 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C1022CLL);
              }
              v206 = 12 * v431;
              v207 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v431));
              v434 = (v206 & 0xFFFFFFFC) / 0xC;
              v433 = v207;
              v205 = v431;
              v170 = v388;
            }
            if (v205)
            {
              v208 = (uint64_t)v429;
              v209 = &v429[12 * v205];
              do
              {
                *(_DWORD *)v207 = *(_DWORD *)v208;
                *(_QWORD *)(v207 + 4) = *(_QWORD *)(v208 + 4);
                v208 += 12;
                v207 += 12;
              }
              while ((_BYTE *)v208 != v209);
            }
            v210 = v435;
            v437 = v439;
            LODWORD(v438) = 2;
            HIDWORD(v438) = v435;
            if (v435 < 3)
            {
              v212 = v439;
            }
            else
            {
              if (v435 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197C10234);
              }
              v211 = 12 * v435;
              v212 = (char *)WTF::fastMalloc((WTF *)(12 * v435));
              LODWORD(v438) = (v211 & 0xFFFFFFFC) / 0xC;
              v437 = v212;
              v210 = v435;
              v170 = v388;
            }
            if (v210)
            {
              v213 = (uint64_t)v433;
              v214 = &v433[12 * v210];
              do
              {
                *(_DWORD *)v212 = *(_DWORD *)v213;
                *(_QWORD *)(v212 + 4) = *(_QWORD *)(v213 + 4);
                v213 += 12;
                v212 += 12;
              }
              while ((_BYTE *)v213 != v214);
            }
            JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v199, (uint64_t *)&v437, this);
            v222 = (unint64_t)v437;
            if (v439 != v437 && v437 != 0)
            {
              v437 = 0;
              LODWORD(v438) = 0;
              WTF::fastFree(v222, v215, v216, v217, v218, v219, v220, v221);
            }
            *(_QWORD *)v199 = off_1E3573FB0;
            *(_QWORD *)(v199 + 92) = 0xFFFFFFFFLL;
            *(_WORD *)(v199 + 100) = 0;
            *(_BYTE *)(v199 + 102) = v149;
            *(_QWORD *)(v199 + 104) = v199 + 120;
            *(_QWORD *)(v199 + 112) = 2;
            JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v199 + 104, v149, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v220, v221);
            v231 = (unint64_t)v433;
            if (v436 != v433 && v433)
            {
              v433 = 0;
              v434 = 0;
              WTF::fastFree(v231, v224, v225, v226, v227, v228, v229, v230);
            }
            *(_QWORD *)v199 = &off_1E3573F80;
            *(_QWORD *)(v199 + 152) = v192;
            *(_QWORD *)(v199 + 160) = v193;
            *(_QWORD *)(v199 + 168) = v379;
            *(_BYTE *)(v199 + 176) = v170;
            v393 = v199;
            v232 = (unint64_t)v429;
            if (v432 != v429 && v429)
            {
              v429 = 0;
              v430 = 0;
              WTF::fastFree(v232, v224, v225, v226, v227, v228, v229, v230);
            }
            v233 = v425;
            if (v428 != (_BYTE *)v425 && v425)
            {
              v425 = 0;
              v426 = 0;
              WTF::fastFree((unint64_t)v233, v224, v225, v226, v227, v228, v229, v230);
            }
            v234 = *((unsigned int *)this + 1417);
            if ((_DWORD)v234 == *((_DWORD *)this + 1416))
            {
              v236 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v387, v234 + 1, (unint64_t)&v393);
              v234 = *((unsigned int *)this + 1417);
              v235 = (uint64_t *)((char *)this[707] + 8 * v234);
              v199 = *v236;
            }
            else
            {
              v235 = (uint64_t *)(*v387 + 8 * v234);
              v236 = &v393;
            }
            *v236 = 0;
            *v235 = v199;
            *((_DWORD *)this + 1417) = v234 + 1;
            v237 = v393;
            v393 = 0;
            if (v237)
              (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
            if (v392 != (_BYTE *)v390 && v390)
              WTF::fastFree((unint64_t)v390, v224, v225, v226, v227, v228, v229, v230);
            JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v225, v226, v227, v228, v229, v230);
            v245 = (char *)(this + 597);
            v246 = *((_DWORD *)a2 + 12);
            if ((int)v149 > 15)
              v247 = -1;
            else
              v247 = v149;
            v248 = &v245[12 * v247];
            *(_DWORD *)v248 = v246;
            *((_DWORD *)v248 + 1) = 4;
            v249 = ~v246;
            if (v249 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197C101F4);
            }
            v250 = (uint64_t)this[499] + 24 * (int)v249;
            v251 = *((_DWORD *)a2 + 13);
            *(_QWORD *)v250 = a2;
            *(_DWORD *)(v250 + 8) = v251;
            *(_BYTE *)(v250 + 17) = v149;
            *(_DWORD *)(v250 + 12) = 6;
            *(_BYTE *)(v250 + 16) = 0;
            v252 = v399;
            if (v401 != (_BYTE *)v399 && v399)
            {
              v399 = 0;
              LODWORD(v400) = 0;
              WTF::fastFree((unint64_t)v252, v238, v239, v240, v241, v242, v243, v244);
            }
            v253 = v408;
            if (v410 != (_BYTE *)v408 && v408)
            {
              v408 = 0;
              LODWORD(v409) = 0;
              WTF::fastFree((unint64_t)v253, v238, v239, v240, v241, v242, v243, v244);
            }
            if (v411)
            {
              v254 = (char)v412;
              if ((char)v412 != -1)
              {
                if ((char)v412 > 15)
                  v254 = -1;
                --*(_DWORD *)(v411 + 12 * v254 + 4784);
              }
            }
            if (v413)
            {
              v255 = v414;
              if (v414 != -1)
              {
                if (v414 > 15)
                  v255 = -1;
                --*(_DWORD *)(v413 + 12 * v255 + 4784);
              }
            }
            if (v415)
            {
              v256 = v416;
              if (v416 != -1)
              {
                if (v416 > 15)
                  v256 = -1;
                --*(_DWORD *)(v415 + 12 * v256 + 4784);
              }
            }
            if (v417)
            {
              v257 = (char)v418;
              if ((char)v418 != -1)
              {
                if ((char)v418 > 15)
                  v257 = -1;
                --*(_DWORD *)(v417 + 12 * v257 + 4784);
              }
            }
            if (v419)
            {
              v258 = (char)v420;
              if ((char)v420 != -1)
              {
                if ((char)v420 > 15)
                  v258 = -1;
                --*(_DWORD *)(v419 + 12 * v258 + 4784);
              }
            }
            if (v381)
            {
              if (v378 > 15)
                v259 = -1;
              else
                v259 = v170;
              v260 = &v245[12 * v259];
LABEL_175:
              --*((_DWORD *)v260 + 2);
              return;
            }
            return;
          }
          v144 = v386 | (32 * v61) | 0x91000000;
          goto LABEL_45;
        }
        v130 = 0;
        v129 = 1;
LABEL_32:
        v131 = v128;
        goto LABEL_33;
      }
    }
    else
    {
      v127 = *((_QWORD *)v125 + 4);
    }
    v128 = (_QWORD *)(v126 & 0xFFFFFFFF8);
    v129 = 1;
    v130 = 1;
    goto LABEL_32;
  }
  if ((_DWORD)v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197C0FD38);
  }
  v261 = v15 & 0xFF00FFFFFFFFFFFFLL;
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_185;
  v262 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v262 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1023CLL);
  }
  if (!*((_BYTE *)this[499] + 24 * (int)v262 + 12)
    || (v264 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v264 == -1))
  {
LABEL_185:
    v264 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v263, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v272 = *((unsigned int *)this + 1194);
  if ((_DWORD)v272 != 0x3FFFFFFF)
  {
    this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v272, (uint64_t)v265, v266, v267, v268, v269, v270);
  }
  v273 = *((unsigned __int16 *)a2 + 9) - 197;
  if (v273 >= 5 || ((0x17u >> (*((_WORD *)a2 + 9) + 59)) & 1) == 0)
  {
    v275 = "JSC::OperationReturnType<JSArray *> (*JSC::DFG::operationOwnPropertyKeysVariant(NodeType))(JSGlobalObject *, EncodedJSValue)";
    v276 = 492;
    __break(0xC471u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  v15 = (unint64_t)off_1E35749A8[(__int16)v273];
  v9 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v265, v266, v267, v268, v269, v270);
  v8 = (uint64_t)v274;
  v10 = v439;
  v437 = v439;
  v11 = 1;
  LODWORD(v438) = 1;
  if (v264 != 1)
  {
    *(_WORD *)v439 = v264 | 0x100;
    HIDWORD(v438) = 1;
    v300 = 1;
    while (1)
    {
      v301 = 0;
      v302 = 0;
      v303 = v437;
      v271 = v300;
      do
      {
        if ((v437[v301 + 1] & 0x40) != 0)
          goto LABEL_281;
        v302 |= 1 << v437[v301 + 1];
        v301 += 2;
      }
      while (2 * v300 != v301);
      v304 = 0;
      do
      {
        v305 = v437[v304] & 0x7F;
        if (v305 >= 0x40)
          goto LABEL_281;
        v302 &= ~(1 << v305);
        v304 += 2;
      }
      while (2 * v300 != v304);
      v306 = (uint8x8_t)vcnt_s8((int8x8_t)v302);
      v306.i16[0] = vaddlv_u8(v306);
      v307 = v306.i32[0];
      v308 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v302));
      v308.i16[0] = vaddlv_u8(v308);
      if (v308.i32[0] + v307)
        break;
      v383 = v261;
      v385 = v10;
      v382 = v9;
      LOBYTE(v12) = *v437;
      LOBYTE(v10) = v437[1];
      JSC::MacroAssemblerARM64::swap((uint64_t)this, *v437, (char)v10, v276, v267, v268, v269, v270);
      memmove(v437, v437 + 2, 2 * HIDWORD(v438) - 2);
      v367 = HIDWORD(v438);
      v271 = (HIDWORD(v438) - 1);
      HIDWORD(v438) = v271;
      v11 = (unint64_t)v437;
      v9 = (unint64_t)&v437[2 * v271];
      if (v367 == 1)
      {
        v368 = 0;
        v369 = 0;
        v389 = 0;
        v274 = &v437[2 * v271];
      }
      else
      {
LABEL_282:
        v371 = 2 * v271;
        v372 = (_BYTE *)v11;
        while (*v372 != v10)
        {
          v372 += 2;
          v371 -= 2;
          if (!v371)
            goto LABEL_285;
        }
        *v372 = v12;
LABEL_285:
        v389 = 0;
        v12 = v11;
        v373 = (char *)v9;
        v274 = (char *)v9;
        do
        {
          if (*(unsigned __int8 *)v11 == *(unsigned __int8 *)(v11 + 1))
          {
            v374 = (char *)v11;
            if (v373 != &v437[2 * HIDWORD(v438)])
            {
              if ((char *)v11 == v274)
              {
                v374 = v373;
              }
              else
              {
                v375 = v12 - (_QWORD)v274;
                memmove(v373, v274, v12 - (_QWORD)v274);
                v374 = &v373[v375];
              }
            }
            v274 = (char *)(v11 + 2);
            ++v389;
            v373 = v374;
          }
          v11 += 2;
          v12 += 2;
        }
        while (v11 < v9);
        v11 = (unint64_t)v437;
        v368 = HIDWORD(v438);
        v369 = HIDWORD(v438);
        v9 = (unint64_t)v373;
      }
      v370 = (char *)(v11 + 2 * v368);
      if (v274 != v370)
      {
        memmove((void *)v9, v274, v370 - v274);
        v369 = HIDWORD(v438);
      }
      v300 = v369 - v389;
      v9 = v382;
      v261 = v383;
      v10 = v385;
      v11 = 1;
LABEL_225:
      HIDWORD(v438) = v300;
LABEL_226:
      if (!v300)
      {
        v321 = (unint64_t)v437;
        if (v10 != v437 && v437)
        {
          v437 = 0;
          LODWORD(v438) = 0;
          WTF::fastFree(v321, v274, (uint64_t)v275, v276, v267, v268, v269, v270);
        }
        goto LABEL_191;
      }
    }
    v12 = 0;
    if (v300 <= 1uLL)
      v309 = 1;
    else
      v309 = v300;
    v310 = 2 * v309;
    while (1)
    {
      v311 = v437[v12 + 1];
      if ((v311 & 0x7Fu) >= 0x40)
        goto LABEL_281;
      if (((v302 >> (v311 & 0x7F)) & 1) != 0)
        break;
      v12 += 2;
      if (v310 == v12)
        goto LABEL_226;
    }
    v312 = v437[v12];
    if (v312 == v311)
    {
LABEL_224:
      memmove(&v303[v12], &v303[v12 + 2], 2 * v271 - v12 - 2);
      v300 = HIDWORD(v438) - 1;
      goto LABEL_225;
    }
    v313 = v10;
    v314 = v261;
    v315 = v9;
    v316 = v8;
    v312 = (char)v312;
    v317 = v15;
    if ((char)v312 == 63)
    {
      if ((char)v311 != 31)
      {
        v319 = v311 & 0x1F | 0xD2800000;
        goto LABEL_221;
      }
    }
    else if (v311 != 31 && v312 != 31)
    {
      v319 = v311 & 0xFFE0FFFF | ((v312 & 0x1F) << 16) | 0xAA0003E0;
LABEL_221:
      v320 = *((_DWORD *)this + 50);
      if (v320 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), (uint64_t)v274, (uint64_t)v275, v276, v267, v268, v269, v270);
        v320 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v320) = v319;
      *((_DWORD *)this + 50) += 4;
      v303 = v437;
      v271 = HIDWORD(v438);
      v15 = v317;
      v8 = v316;
      v9 = v315;
      v261 = v314;
      v10 = v313;
      v11 = 1;
      goto LABEL_224;
    }
    v319 = (char)v311 | (32 * v312) | 0x91000000;
    goto LABEL_221;
  }
LABEL_191:
  if ((_DWORD)v9 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v8, 0, v276, v267, v268, v269, v270);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v9 << 35) + 0x380000001ALL, 0, v276, v267, v268, v269, v270);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, v15, v277, v278, v279, v280, v281, v282, (int *)&v437);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v283, v284, v285, v286, v287, v288);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v289, v290, v291, v292, v293, v294);
  v295 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v295;
  *((_DWORD *)this + 1195) = 4;
  v296 = ~v295;
  if (v296 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C10244);
  }
  v297 = (uint64_t)this[499] + 24 * (int)v296;
  v298 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v297 = a2;
  *(_DWORD *)(v297 + 8) = v298;
  *(_BYTE *)(v297 + 12) = 6;
  *(_DWORD *)(v297 + 13) = 0;
  *(_BYTE *)(v297 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v261)
  {
    if (v264 > 15)
      v299 = -1;
    else
      v299 = v264;
    v260 = (char *)this + 12 * v299 + 4776;
    goto LABEL_175;
  }
}

unint64_t JSC::DFG::Node::cachedPropertyNamesKind(JSC::DFG::Node *this)
{
  unint64_t result;

  if (*((unsigned __int16 *)this + 9) - 197 < 5 && ((0x17u >> (*((_WORD *)this + 9) + 59)) & 1) != 0)
    return (0x300020100uLL >> (8 * (*((_WORD *)this + 9) + 59))) & 3;
  result = 3563;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::operationOwnPropertyKeysVariantObject(int a1)
{
  uint64_t result;

  if ((a1 - 197) < 5 && ((0x17u >> (a1 + 59)) & 1) != 0)
    return (uint64_t)off_1E35749D0[(__int16)(a1 - 197)];
  result = 524;
  __break(0xC471u);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileObjectAssign(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int *v65;
  int *v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  JSC::DFG::Node *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  _DWORD *v90;
  uint64_t *v91;
  int v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  JSC::ARM64LogicalImmediate *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint8x8_t v112;
  __int32 v113;
  uint8x8_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF *v154;
  void *v156;
  unsigned int v157;
  char v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  JSC::DFG::Node *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint8x8_t v183;
  __int32 v184;
  uint8x8_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  signed __int8 v214;
  unsigned int v215;
  uint64_t v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  uint64_t v219;
  char *v220;
  int v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unsigned int v226;
  unsigned __int8 *v227;
  char v228;
  uint64_t v229;
  unsigned __int8 *v230;
  JSC::AssemblerBuffer *v231;
  uint64_t v232;
  _BYTE *v233;
  int v234;
  unsigned __int8 *v235;
  JSC::AssemblerBuffer *v236;
  JSC::AssemblerBuffer *v237;
  uint64_t v238;
  int v239;
  unsigned __int8 *v240;
  int v241;
  int v242;
  int64_t v243;
  unsigned __int8 *v244;
  int v245;
  char v246;
  unsigned __int8 *v247;
  int64_t v248;
  JSC::AssemblerBuffer *v249;
  JSC::ARM64LogicalImmediate *v250;
  int v251;
  char v252;
  JSC::AssemblerBuffer *v253;
  JSC::AssemblerBuffer *v254;
  unsigned __int8 *v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  WTF *v264;
  uint64_t v265;
  _BYTE v266[24];
  void *__dst;
  uint64_t v268;
  _WORD v269[12];
  uint64_t v270;
  unsigned __int8 v271;
  char *v272;
  int v273;
  unsigned int v274;
  _WORD v275[8];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_117;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C11190);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_117:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = (v14 >> 50) & 0x3F;
  if ((_DWORD)v15 != 11)
  {
    if ((_DWORD)v15)
    {
      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3C25, "void JSC::DFG::SpeculativeJIT::compileObjectAssign(Node *)", "Bad use kind");
      __break(0xC471u);
    }
    else
    {
      v160 = v14 & 0xFF00FFFFFFFFFFFFLL;
      if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_157;
      v161 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v161 < *((unsigned int *)this + 1001))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v161 + 12))
        {
          v18 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
LABEL_110:
          if (v13 == 0xFF)
            v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
          if (v18 == 0xFF)
            v18 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
          JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v175 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v162, v163, v164, v165, v166, v167);
          __dst = v269;
          LODWORD(v268) = 2;
          if (v13 == 1)
          {
            if (v18 == 2)
              goto LABEL_153;
            v255 = v168;
            v257 = v10 & 0xFF00FFFFFFFFFFFFLL;
            v176 = 0;
          }
          else
          {
            v255 = v168;
            v257 = v10 & 0xFF00FFFFFFFFFFFFLL;
            v269[0] = v13 | 0x100;
            v176 = 1;
            HIDWORD(v268) = 1;
            if (v18 == 2)
              goto LABEL_122;
          }
          v269[v176++] = v18 | 0x200;
          HIDWORD(v268) = v176;
          while (1)
          {
LABEL_122:
            v177 = 0;
            v178 = 0;
            v179 = (char *)__dst;
            v180 = v176;
            do
            {
              if ((*((_BYTE *)__dst + v177 + 1) & 0x40) != 0)
                goto LABEL_213;
              v178 |= 1 << *((_BYTE *)__dst + v177 + 1);
              v177 += 2;
            }
            while (2 * v176 != v177);
            v181 = 0;
            do
            {
              v182 = *((_BYTE *)__dst + v181) & 0x7F;
              if (v182 >= 0x40)
                goto LABEL_213;
              v178 &= ~(1 << v182);
              v181 += 2;
            }
            while (2 * v176 != v181);
            v183 = (uint8x8_t)vcnt_s8((int8x8_t)v178);
            v183.i16[0] = vaddlv_u8(v183);
            v184 = v183.i32[0];
            v185 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v178));
            v185.i16[0] = vaddlv_u8(v185);
            if (!(v185.i32[0] + v184))
            {
              v228 = *((_BYTE *)__dst + 1);
              v252 = *(_BYTE *)__dst;
              JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v228, v170, v171, v172, v173, v174);
              memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v268) - 2);
              v229 = (HIDWORD(v268) - 1);
              v123 = HIDWORD(v268) == 1;
              HIDWORD(v268) = v229;
              v230 = (unsigned __int8 *)__dst;
              v231 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v229);
              if (v123)
              {
                v238 = 0;
                v239 = 0;
                v234 = 0;
                v168 = (unsigned __int8 *)v231;
              }
              else
              {
                v232 = 2 * v229;
                v233 = __dst;
                while (*v233 != v228)
                {
                  v233 += 2;
                  v232 -= 2;
                  if (!v232)
                    goto LABEL_175;
                }
                *v233 = v252;
LABEL_175:
                v234 = 0;
                v235 = v230;
                v168 = (unsigned __int8 *)v231;
                v236 = v231;
                do
                {
                  if (*v230 == v230[1])
                  {
                    v237 = (JSC::AssemblerBuffer *)v230;
                    if (v236 != (JSC::AssemblerBuffer *)((char *)__dst + 2 * HIDWORD(v268)))
                    {
                      v251 = v234;
                      v253 = v231;
                      if (v230 == v168)
                      {
                        v237 = v236;
                      }
                      else
                      {
                        v248 = v235 - v168;
                        v249 = v236;
                        memmove(v236, v168, v235 - v168);
                        v237 = (JSC::AssemblerBuffer *)((char *)v249 + v248);
                      }
                      v231 = v253;
                      v234 = v251;
                    }
                    v168 = v230 + 2;
                    ++v234;
                    v236 = v237;
                  }
                  v230 += 2;
                  v235 += 2;
                }
                while (v230 < (unsigned __int8 *)v231);
                v230 = (unsigned __int8 *)__dst;
                v238 = HIDWORD(v268);
                v239 = HIDWORD(v268);
                v231 = v236;
              }
              v240 = &v230[2 * v238];
              if (v168 != v240)
              {
                v242 = v234;
                memmove(v231, v168, v240 - v168);
                v234 = v242;
                v239 = HIDWORD(v268);
              }
              v176 = v239 - v234;
              goto LABEL_146;
            }
            v186 = 0;
            v187 = v176 <= 1uLL ? 1 : v176;
            v188 = 2 * v187;
            while (1)
            {
              v189 = *((unsigned __int8 *)__dst + v186 + 1);
              if ((v189 & 0x7Fu) >= 0x40)
                goto LABEL_213;
              if (((v178 >> (v189 & 0x7F)) & 1) != 0)
                break;
              v186 += 2;
              if (v188 == v186)
                goto LABEL_147;
            }
            v190 = *((unsigned __int8 *)__dst + v186);
            if (v190 != v189)
              break;
LABEL_145:
            memmove(&v179[v186], &v179[v186 + 2], 2 * v180 - v186 - 2);
            v176 = HIDWORD(v268) - 1;
LABEL_146:
            HIDWORD(v268) = v176;
LABEL_147:
            if (!v176)
            {
              v196 = __dst;
              v168 = v255;
              v11 = v257;
              if (v269 != __dst && __dst)
              {
                __dst = 0;
                LODWORD(v268) = 0;
                WTF::fastFree((unint64_t)v196, v255, v169, v170, v171, v172, v173, v174);
                v168 = v255;
              }
LABEL_153:
              if ((_DWORD)v175 == -1)
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v168, 0, v170, v171, v172, v173, v174);
              else
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v175 << 35) + 0x380000001ALL, 0, v170, v171, v172, v173, v174);
              JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationObjectAssignUntyped, v197, v198, v199, v200, v201, v202, (int *)&__dst);
              JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v203, v204, v205, v206, v207, v208);
              JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v209, v210, v211, v212, v213);
              if (v160)
                goto LABEL_95;
              goto LABEL_99;
            }
          }
          v191 = (char)v190;
          if ((char)v190 == 63)
          {
            v192 = *((_DWORD *)this + 50);
            v193 = *((_DWORD *)this + 48);
            if ((char)v189 != 31)
            {
              v195 = v189 & 0x1F | 0xD2800000;
              goto LABEL_142;
            }
          }
          else
          {
            v192 = *((_DWORD *)this + 50);
            v193 = *((_DWORD *)this + 48);
            if (v189 != 31 && v191 != 31)
            {
              v195 = v189 & 0xFFE0FFFF | ((v191 & 0x1F) << 16) | 0xAA0003E0;
LABEL_142:
              if (v192 + 4 > v193)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v168, v169, v170, v171, v172, v173, v174);
                v192 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v192) = v195;
              *((_DWORD *)this + 50) += 4;
              v179 = (char *)__dst;
              v180 = HIDWORD(v268);
              goto LABEL_145;
            }
          }
          v195 = (char)v189 | (32 * v191) | 0x91000000;
          goto LABEL_142;
        }
LABEL_157:
        v18 = -1;
        goto LABEL_110;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197C10F74);
  }
  v16 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_118;
  v17 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C11198);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_118:
    v18 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v270, this, a3, a4, a5, a6, a7, a8);
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v19, v20, v21, v22, v23, v24);
  if (v18 == 0xFF)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, v19, v20, v21, v22, v23, v24);
  v25 = v271;
  JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 4), (char)v18, v20, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v26, v27, v28, v29, v30, v31, v32);
  __dst = v269;
  v268 = 2;
  v264 = (WTF *)v266;
  v265 = 2;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C10FC0);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v18 | 0x500000000, *((char *)this + 304), v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 24, v38, v39, v40, v41, (uint64_t)&v262);
  v47 = v262;
  if (v262 != -1)
  {
    v48 = HIDWORD(v265);
    if (HIDWORD(v265) == (_DWORD)v265)
    {
      v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v264, (void *)(HIDWORD(v265) + 1), (unint64_t)&v262, v42, v43, v44, v45, v46);
      v51 = *v49;
      v50 = (uint64_t *)(v49 + 1);
      v47 = v51;
      v48 = HIDWORD(v265);
    }
    else
    {
      v50 = &v263;
    }
    v52 = (char *)v264 + 12 * v48;
    *(_DWORD *)v52 = v47;
    *(_QWORD *)(v52 + 4) = *v50;
    ++HIDWORD(v265);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C10FE0);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v18 | 0x400000000, *((char *)this + 304), v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xE, (uint64_t)this, 1, 17, v53, v54, v55, v56, (uint64_t)&v260, v57);
  v63 = v260;
  if (v260 != -1)
  {
    v64 = HIDWORD(v265);
    if (HIDWORD(v265) == (_DWORD)v265)
    {
      v65 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v264, (void *)(HIDWORD(v265) + 1), (unint64_t)&v260, v58, v59, v60, v61, v62);
      v67 = *v65;
      v66 = v65 + 1;
      v63 = v67;
      v64 = HIDWORD(v265);
    }
    else
    {
      v66 = &v261;
    }
    v68 = (char *)v264 + 12 * v64;
    *(_DWORD *)v68 = v63;
    *(_QWORD *)(v68 + 4) = *(_QWORD *)v66;
    ++HIDWORD(v265);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v18, (char)v25, v58, v59, v60, v61, v62);
  v76 = *((_DWORD *)this + 50);
  if (v76 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v69, v70, v71, v72, v73, v74, v75);
    v76 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v76) = v25 & 0x1F | (32 * (v25 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C11010);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v25 | 0x2000000000, *((char *)this + 304), v71, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, 17, v77, v78, v79, v80, (uint64_t)&v258, v81);
  v88 = v258;
  if (v258 != -1)
  {
    v89 = HIDWORD(v268);
    if (HIDWORD(v268) == (_DWORD)v268)
    {
      v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(HIDWORD(v268) + 1), (unint64_t)&v258, v83, v84, v85, v86, v87);
      v92 = *v90;
      v91 = (uint64_t *)(v90 + 1);
      v88 = v92;
      v89 = HIDWORD(v268);
    }
    else
    {
      v91 = &v259;
    }
    v93 = (char *)__dst + 12 * v89;
    *(_DWORD *)v93 = v88;
    *(_QWORD *)(v93 + 4) = *v91;
    ++HIDWORD(v268);
  }
  if (HIDWORD(v265))
  {
    v94 = 0;
    v95 = 0;
    v96 = 12 * HIDWORD(v265);
    while (v95 < HIDWORD(v265))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v264 + v94), (uint64_t)this, (uint64_t)v82, v83, v84, v85, v86, v87);
      ++v95;
      v94 += 12;
      if (v96 == v94)
        goto LABEL_38;
    }
    __break(0xC471u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
LABEL_38:
  v254 = (JSC::AssemblerBuffer *)v16;
  v104 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v82, v83, v84, v85, v86, v87);
  v250 = v97;
  v272 = (char *)v275;
  v273 = 2;
  if (v13 == 1)
  {
    if (v18 == 2)
      goto LABEL_75;
    v256 = v11;
    v105 = 0;
  }
  else
  {
    v256 = v11;
    v275[0] = v13 | 0x100;
    v105 = 1;
    v274 = 1;
    if (v18 == 2)
      goto LABEL_44;
  }
  v275[v105++] = v18 | 0x200;
  v274 = v105;
  do
  {
LABEL_44:
    v106 = 0;
    v107 = 0;
    v108 = v272;
    v109 = v105;
    do
    {
      if ((v272[v106 + 1] & 0x40) != 0)
        goto LABEL_213;
      v107 |= 1 << v272[v106 + 1];
      v106 += 2;
    }
    while (2 * v105 != v106);
    v110 = 0;
    do
    {
      v111 = v272[v110] & 0x7F;
      if (v111 >= 0x40)
        goto LABEL_213;
      v107 &= ~(1 << v111);
      v110 += 2;
    }
    while (2 * v105 != v110);
    v112 = (uint8x8_t)vcnt_s8((int8x8_t)v107);
    v112.i16[0] = vaddlv_u8(v112);
    v113 = v112.i32[0];
    v114 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v107));
    v114.i16[0] = vaddlv_u8(v114);
    if (v114.i32[0] + v113)
    {
      v115 = 0;
      if (v105 <= 1uLL)
        v116 = 1;
      else
        v116 = v105;
      v117 = 2 * v116;
      while (1)
      {
        v118 = v272[v115 + 1];
        if ((v118 & 0x7Fu) >= 0x40)
          goto LABEL_213;
        if (((v107 >> (v118 & 0x7F)) & 1) != 0)
          break;
        v115 += 2;
        if (v117 == v115)
          goto LABEL_69;
      }
      v119 = v272[v115];
      if (v119 == v118)
        goto LABEL_67;
      v120 = (char)v119;
      if ((char)v119 == 63)
      {
        v121 = *((_DWORD *)this + 50);
        v122 = *((_DWORD *)this + 48);
        if ((char)v118 != 31)
        {
          v124 = v118 & 0x1F | 0xD2800000;
          goto LABEL_64;
        }
      }
      else
      {
        v121 = *((_DWORD *)this + 50);
        v122 = *((_DWORD *)this + 48);
        v123 = v118 == 31 || v120 == 31;
        if (!v123)
        {
          v124 = v118 & 0xFFE0FFFF | ((v120 & 0x1F) << 16) | 0xAA0003E0;
LABEL_64:
          if (v121 + 4 > v122)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v97, v98, v99, v100, v101, v102, v103);
            v121 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v121) = v124;
          *((_DWORD *)this + 50) += 4;
          v108 = v272;
          v109 = v274;
LABEL_67:
          memmove(&v108[v115], &v108[v115 + 2], 2 * v109 - v115 - 2);
          v105 = v274 - 1;
          goto LABEL_68;
        }
      }
      v124 = (char)v118 | (32 * v120) | 0x91000000;
      goto LABEL_64;
    }
    v214 = v272[1];
    v246 = *v272;
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *v272, v214, v99, v100, v101, v102, v103);
    memmove(v272, v272 + 2, 2 * v274 - 2);
    v215 = v274;
    v216 = v274 - 1;
    v274 = v216;
    v217 = (unsigned __int8 *)v272;
    v218 = (unsigned __int8 *)&v272[2 * v216];
    if (v215 == 1)
    {
      v225 = 0;
      v226 = 0;
      v221 = 0;
      v97 = (JSC::ARM64LogicalImmediate *)v218;
    }
    else
    {
      v219 = 2 * v216;
      v220 = v272;
      while (*v220 != v214)
      {
        v220 += 2;
        v219 -= 2;
        if (!v219)
          goto LABEL_162;
      }
      *v220 = v246;
LABEL_162:
      v221 = 0;
      v222 = v217;
      v97 = (JSC::ARM64LogicalImmediate *)v218;
      v223 = v218;
      do
      {
        if (*v217 == v217[1])
        {
          v224 = v217;
          if (v223 != (unsigned __int8 *)&v272[2 * v274])
          {
            v245 = v221;
            v247 = v218;
            if (v217 == (unsigned __int8 *)v97)
            {
              v224 = v223;
            }
            else
            {
              v243 = v222 - (unsigned __int8 *)v97;
              v244 = v223;
              memmove(v223, v97, v222 - (unsigned __int8 *)v97);
              v224 = &v244[v243];
            }
            v218 = v247;
            v221 = v245;
          }
          v97 = (JSC::ARM64LogicalImmediate *)(v217 + 2);
          ++v221;
          v223 = v224;
        }
        v217 += 2;
        v222 += 2;
      }
      while (v217 < v218);
      v217 = (unsigned __int8 *)v272;
      v225 = v274;
      v226 = v274;
      v218 = v223;
    }
    v227 = &v217[2 * v225];
    if (v97 != (JSC::ARM64LogicalImmediate *)v227)
    {
      v241 = v221;
      memmove(v218, v97, v227 - (unsigned __int8 *)v97);
      v221 = v241;
      v226 = v274;
    }
    v105 = v226 - v221;
LABEL_68:
    v274 = v105;
LABEL_69:
    ;
  }
  while (v105);
  v125 = (unint64_t)v272;
  v11 = v256;
  if (v275 != (_WORD *)v272 && v272)
  {
    v272 = 0;
    v273 = 0;
    WTF::fastFree(v125, v97, v98, v99, v100, v101, v102, v103);
  }
LABEL_75:
  if ((_DWORD)v104 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v250, 0, v99, v100, v101, v102, v103);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v104 << 35) + 0x380000001ALL, 0, v99, v100, v101, v102, v103);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationObjectAssignObject, v126, v127, v128, v129, v130, v131, (int *)&v272);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v132, v133, v134, v135, v136, v137);
  if (HIDWORD(v268))
  {
    v144 = 0;
    v145 = 0;
    v146 = 12 * HIDWORD(v268);
    while (v145 < HIDWORD(v268))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)__dst + v144), (uint64_t)this, v138, v139, v140, v141, v142, v143);
      ++v145;
      v144 += 12;
      if (v146 == v144)
        goto LABEL_81;
    }
LABEL_214:
    __break(0xC471u);
    JUMPOUT(0x197C11188);
  }
LABEL_81:
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v139, v140, v141, v142, v143);
  v154 = v264;
  if (v266 != (_BYTE *)v264 && v264 != 0)
  {
    v264 = 0;
    LODWORD(v265) = 0;
    WTF::fastFree((unint64_t)v154, v147, v148, v149, v150, v151, v152, v153);
  }
  v156 = __dst;
  if (v269 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v268) = 0;
    WTF::fastFree((unint64_t)v156, v147, v148, v149, v150, v151, v152, v153);
  }
  if (v270)
  {
    v157 = (char)v271;
    if ((char)v271 != -1)
    {
      if ((char)v271 > 15)
        v157 = -1;
      --*(_DWORD *)(v270 + 12 * v157 + 4784);
    }
  }
  if (v254)
  {
LABEL_95:
    if ((char)v18 > 15)
      v158 = -1;
    else
      v158 = v18;
    --*((_DWORD *)this + 3 * v158 + 1196);
  }
LABEL_99:
  if (v11)
  {
    if ((char)v13 > 15)
      v159 = -1;
    else
      v159 = v13;
    --*((_DWORD *)this + 3 * v159 + 1196);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileObjectCreate(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Node *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *result;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint8x8_t v70;
  __int32 v71;
  uint8x8_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  JSC::DFG::Node *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  char v106;
  char v107;
  uint64_t v108;
  unsigned __int8 *v109;
  char *v110;
  uint64_t v111;
  int v112;
  char *v113;
  uint64_t v114;
  _BYTE *v115;
  unsigned __int8 *v116;
  char *v117;
  unsigned __int8 *v118;
  int64_t v119;
  unint64_t v120;
  __int16 *v121;
  int v122;
  int v123;
  void *__dst;
  uint64_t v125;
  __int16 v126;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 11)
  {
    v12 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_6;
    v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v13 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(0xC471u);
LABEL_87:
      JUMPOUT(0x197C11638);
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12)
      || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
          (_DWORD)v14 == -1))
    {
LABEL_6:
      v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 3), v14, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v15, v16, v17, v18, v19, v20, v21);
    ++*((_DWORD *)this + 1196);
    v28 = *((unsigned int *)this + 1194);
    if ((_DWORD)v28 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v28, (uint64_t)v22, v23, v24, v25, v26, v27);
    }
    v36 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v22, v23, v24, v25, v26, v27);
    v37 = (uint64_t)v29;
    v38 = &v126;
    __dst = &v126;
    LODWORD(v125) = 1;
    if ((_DWORD)v14 == 1)
    {
LABEL_10:
      if ((_DWORD)v36 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v37, 0, v31, v32, v33, v34, v35);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v36 << 35) + 0x380000001ALL, 0, v31, v32, v33, v34, v35);
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationObjectCreateObject, v39, v40, v41, v42, v43, v44, (int *)&__dst);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v45, v46, v47, v48, v49, v50);
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v51, v52, v53, v54, v55, v56);
      v58 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 1194) = v58;
      *((_DWORD *)this + 1195) = 4;
      v59 = ~v58;
      if (v59 < *((unsigned int *)this + 1001))
      {
        v60 = *((_QWORD *)this + 499) + 24 * (int)v59;
        v61 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v60 = a2;
        *(_DWORD *)(v60 + 8) = v61;
        *(_BYTE *)(v60 + 12) = 6;
        *(_DWORD *)(v60 + 13) = 0;
        *(_BYTE *)(v60 + 17) = 0;
        --*((_DWORD *)this + 1196);
        if (v12)
        {
          if ((int)v14 > 15)
            v62 = -1;
          else
            v62 = v14;
          --*((_DWORD *)this + 3 * v62 + 1196);
        }
        return result;
      }
      goto LABEL_86;
    }
    v126 = v14 | 0x100;
    HIDWORD(v125) = 1;
    v63 = 1;
    while (1)
    {
      v64 = 0;
      v65 = 0;
      v66 = (char *)__dst;
      v67 = v63;
      do
      {
        if ((*((_BYTE *)__dst + v64 + 1) & 0x40) != 0)
          goto LABEL_85;
        v65 |= 1 << *((_BYTE *)__dst + v64 + 1);
        v64 += 2;
      }
      while (2 * v63 != v64);
      v68 = 0;
      do
      {
        v69 = *((_BYTE *)__dst + v68) & 0x7F;
        if (v69 >= 0x40)
          goto LABEL_85;
        v65 &= ~(1 << v69);
        v68 += 2;
      }
      while (2 * v63 != v68);
      v70 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
      v70.i16[0] = vaddlv_u8(v70);
      v71 = v70.i32[0];
      v72 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v65));
      v72.i16[0] = vaddlv_u8(v72);
      if (!(v72.i32[0] + v71))
      {
        v120 = v12;
        v121 = v38;
        v106 = *(_BYTE *)__dst;
        v107 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v107, v31, v32, v33, v34, v35);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v125) - 2);
        v108 = (HIDWORD(v125) - 1);
        v78 = HIDWORD(v125) == 1;
        HIDWORD(v125) = v108;
        v109 = (unsigned __int8 *)__dst;
        v110 = (char *)__dst + 2 * v108;
        if (v78)
        {
          v111 = 0;
          v112 = 0;
          v122 = 0;
          v29 = (char *)__dst + 2 * v108;
        }
        else
        {
          v114 = 2 * v108;
          v115 = __dst;
          while (*v115 != v107)
          {
            v115 += 2;
            v114 -= 2;
            if (!v114)
              goto LABEL_74;
          }
          *v115 = v106;
LABEL_74:
          v122 = 0;
          v116 = v109;
          v29 = v110;
          v117 = v110;
          do
          {
            if (*v109 == v109[1])
            {
              v118 = v109;
              if (v117 != (char *)__dst + 2 * HIDWORD(v125))
              {
                if (v109 == (unsigned __int8 *)v29)
                {
                  v118 = (unsigned __int8 *)v117;
                }
                else
                {
                  v119 = v116 - (unsigned __int8 *)v29;
                  memmove(v117, v29, v116 - (unsigned __int8 *)v29);
                  v118 = (unsigned __int8 *)&v117[v119];
                }
              }
              v29 = (char *)(v109 + 2);
              ++v122;
              v117 = (char *)v118;
            }
            v109 += 2;
            v116 += 2;
          }
          while (v109 < (unsigned __int8 *)v110);
          v109 = (unsigned __int8 *)__dst;
          v111 = HIDWORD(v125);
          v112 = HIDWORD(v125);
          v110 = v117;
        }
        v113 = (char *)&v109[2 * v111];
        if (v29 != v113)
        {
          memmove(v110, v29, v113 - v29);
          v112 = HIDWORD(v125);
        }
        v63 = v112 - v122;
        v12 = v120;
        v38 = v121;
        goto LABEL_44;
      }
      v73 = 0;
      v74 = v63 <= 1uLL ? 1 : v63;
      v75 = 2 * v74;
      while (1)
      {
        v76 = *((unsigned __int8 *)__dst + v73 + 1);
        if ((v76 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v65 >> (v76 & 0x7F)) & 1) != 0)
          break;
        v73 += 2;
        if (v75 == v73)
          goto LABEL_45;
      }
      v77 = *((unsigned __int8 *)__dst + v73);
      if (v77 != v76)
        break;
LABEL_43:
      memmove(&v66[v73], &v66[v73 + 2], 2 * v67 - v73 - 2);
      v63 = HIDWORD(v125) - 1;
LABEL_44:
      HIDWORD(v125) = v63;
LABEL_45:
      if (!v63)
      {
        v81 = __dst;
        if (v38 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v125) = 0;
          WTF::fastFree((unint64_t)v81, v29, v30, v31, v32, v33, v34, v35);
        }
        goto LABEL_10;
      }
    }
    if ((char)v77 == 63)
    {
      if ((char)v76 != 31)
      {
        v79 = v76 & 0x1F | 0xD2800000;
        goto LABEL_40;
      }
    }
    else
    {
      v78 = v76 == 31 || (char)v77 == 31;
      if (!v78)
      {
        v79 = v76 & 0xFFE0FFFF | ((v77 & 0x1F) << 16) | 0xAA0003E0;
LABEL_40:
        v80 = *((_DWORD *)this + 50);
        if (v80 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v29, v30, v31, v32, v33, v34, v35);
          v80 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v80) = v79;
        *((_DWORD *)this + 50) += 4;
        v66 = (char *)__dst;
        v67 = HIDWORD(v125);
        goto LABEL_43;
      }
    }
    v79 = (char)v76 | (32 * (char)v77) | 0x91000000;
    goto LABEL_40;
  }
  if ((_DWORD)v11)
  {
    __break(0xC471u);
    goto LABEL_87;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&__dst, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  v89 = v126;
  if (v126 == 255)
  {
    v89 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)__dst, v125, v83, v84, v85, v86, v87, v88);
    LOBYTE(v126) = v89;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v82, v83, v84, v85, v86, v87, v88);
  ++*((_DWORD *)this + 1196);
  v96 = *((unsigned int *)this + 1194);
  if ((_DWORD)v96 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v96, (uint64_t)v90, v91, v92, v93, v94, v95);
  }
  v97 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v90, v91, v92, v93, v94, v95);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v123, (unsigned __int8 *)this, (uint64_t)operationObjectCreate, v97, v98, v89, v99, v100);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v101, v102, v103, v104);
  --*((_DWORD *)this + 1196);
  if ((v125 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v105 = (char)v126;
    if ((char)v126 > 15)
      v105 = -1;
    --*((_DWORD *)__dst + 3 * v105 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileObjectToString(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  uint64_t *v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int *v93;
  int *v94;
  int v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x8_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  _DWORD *v109;
  uint64_t *v110;
  int v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  JSC::DFG::Node *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  int *v125;
  int *v126;
  int v127;
  char *v128;
  unsigned int v129;
  _BYTE *v130;
  WTF *v131;
  WTF *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  _BYTE *v136;
  WTF *v137;
  WTF *v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  _BYTE *v142;
  WTF *v143;
  WTF *v144;
  unsigned int v145;
  int v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  unsigned int v150;
  int v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  WTF *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  char *v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  WTF *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  WTF *v196;
  unsigned int v197;
  _BYTE v198[24];
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  WTF *v208;
  uint64_t v209;
  _BYTE v210[24];
  uint64_t v211;
  unsigned __int8 v212;
  WTF *v213;
  unsigned int v214;
  unsigned int v215;
  _BYTE v216[24];
  _BYTE *v217;
  unsigned int v218;
  unsigned int v219;
  _BYTE v220[24];
  _BYTE *v221;
  unsigned int v222;
  unsigned int v223;
  _BYTE v224[24];
  _BYTE *v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE v228[32];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != 11)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3C7D, "void JSC::DFG::SpeculativeJIT::compileObjectToString(Node *)", "Bad UseKind");
      __break(0xC471u);
      goto LABEL_128;
    }
    v37 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_115;
    v38 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v38 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C122BCLL);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v38 + 12))
    {
      v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v211, (JSC::DFG::SpeculativeJIT *)this, v39, v40, v41, v42, v43, v44);
      if ((_DWORD)v14 != -1)
      {
LABEL_22:
        v51 = v212;
        v52 = (char)v212;
        JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 3), v14, v46, v47, v48, v49, v50);
        v208 = (WTF *)v210;
        v209 = 2;
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v14, v52, v53, v54, v55, v56, v57);
        v65 = *((_DWORD *)this + 50);
        if (v65 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v58, v59, v60, v61, v62, v63, v64);
          v65 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)((char *)this[7] + v65) = v51 & 0x1F | (32 * (v51 & 0x1F)) | 0xD37CEC00;
        *((_DWORD *)this + 50) += 4;
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v51 | 0x4000000000, v52, v60, v61, v62, v63, v64);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v52, 0xFFFFFFFFLL, v66, v67, v68, v69, (uint64_t)&v206, v70);
        v76 = v206;
        if (v206 != -1)
        {
          v77 = HIDWORD(v209);
          if (HIDWORD(v209) == (_DWORD)v209)
          {
            v78 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v208, (void *)(HIDWORD(v209) + 1), (unint64_t)&v206, v71, v72, v73, v74, v75);
            v80 = *v78;
            v79 = (uint64_t *)(v78 + 1);
            v76 = v80;
            v77 = HIDWORD(v209);
          }
          else
          {
            v79 = &v207;
          }
          v81 = (char *)v208 + 12 * v77;
          *(_DWORD *)v81 = v76;
          *(_QWORD *)(v81 + 4) = *v79;
          ++HIDWORD(v209);
        }
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197C122A4);
        }
        *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load8((uint64_t)this, v51 | 0x500000000, *((char *)this + 304), v71, v72, v73, v74, v75);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 1, v82, v83, v84, v85, (uint64_t)&v204);
        v91 = v204;
        if (v204 != -1)
        {
          v92 = HIDWORD(v209);
          if (HIDWORD(v209) == (_DWORD)v209)
          {
            v93 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v208, (void *)(HIDWORD(v209) + 1), (unint64_t)&v204, v86, v87, v88, v89, v90);
            v95 = *v93;
            v94 = v93 + 1;
            v91 = v95;
            v92 = HIDWORD(v209);
          }
          else
          {
            v94 = &v205;
          }
          v96 = (char *)v208 + 12 * v92;
          *(_DWORD *)v96 = v91;
          *(_QWORD *)(v96 + 4) = *(_QWORD *)v94;
          ++HIDWORD(v209);
        }
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v51 | 0x4000000000, v52, v86, v87, v88, v89, v90);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v52, 0xFFFFFFFFLL, v97, v98, v99, v100, (uint64_t)&v202, v101);
        v107 = v202;
        if (v202 != -1)
        {
          v108 = HIDWORD(v209);
          if (HIDWORD(v209) == (_DWORD)v209)
          {
            v109 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v208, (void *)(HIDWORD(v209) + 1), (unint64_t)&v202, v102, v103, v104, v105, v106);
            v111 = *v109;
            v110 = (uint64_t *)(v109 + 1);
            v107 = v111;
            v108 = HIDWORD(v209);
          }
          else
          {
            v110 = &v203;
          }
          v112 = (char *)v208 + 12 * v108;
          *(_DWORD *)v112 = v107;
          *(_QWORD *)(v112 + 4) = *v110;
          ++HIDWORD(v209);
        }
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v51 | 0x1000000000, v52, v102, v103, v104, v105, v106);
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 9, v52, 1, v113, v114, v115, v116, (uint64_t)&v200);
        v123 = v200;
        v124 = HIDWORD(v209);
        if (v200 != -1)
        {
          if (HIDWORD(v209) == (_DWORD)v209)
          {
            v125 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v208, (void *)(HIDWORD(v209) + 1), (unint64_t)&v200, v118, v119, v120, v121, v122);
            v127 = *v125;
            v126 = v125 + 1;
            v123 = v127;
            v124 = HIDWORD(v209);
          }
          else
          {
            v126 = &v201;
          }
          v128 = (char *)v208 + 12 * v124;
          *(_DWORD *)v128 = v123;
          *(_QWORD *)(v128 + 4) = *(_QWORD *)v126;
          v124 = ++HIDWORD(v209);
        }
        v129 = v124;
        v196 = (WTF *)v198;
        v197 = v124;
        if (v124 < 3)
        {
          v130 = v198;
        }
        else
        {
          if (v124 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197C122CCLL);
          }
          v130 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v124));
          v196 = (WTF *)v130;
          v129 = HIDWORD(v209);
          v124 = HIDWORD(v209);
        }
        if (v124)
        {
          v131 = v208;
          v132 = (WTF *)((char *)v208 + 12 * v129);
          do
          {
            *(_DWORD *)v130 = *(_DWORD *)v131;
            *(_QWORD *)(v130 + 4) = *(_QWORD *)((char *)v131 + 4);
            v131 = (WTF *)((char *)v131 + 12);
            v130 += 12;
          }
          while (v131 != v132);
        }
        v133 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v117, v118, v119, v120, v121, v122);
        v134 = v197;
        v213 = (WTF *)v216;
        v214 = 2;
        v215 = v197;
        v194 = v135;
        v195 = v133;
        if (v197 < 3)
        {
          v136 = v216;
        }
        else
        {
          if (v197 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197C122D4);
          }
          v136 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v197));
          v214 = 12 * v197 / 0xC;
          v213 = (WTF *)v136;
          v134 = v197;
        }
        if (v134)
        {
          v137 = v196;
          v138 = (WTF *)((char *)v196 + 12 * v134);
          do
          {
            *(_DWORD *)v136 = *(_DWORD *)v137;
            *(_QWORD *)(v136 + 4) = *(_QWORD *)((char *)v137 + 4);
            v137 = (WTF *)((char *)v137 + 12);
            v136 += 12;
          }
          while (v137 != v138);
        }
        v139 = WTF::fastMalloc((WTF *)0xB8);
        v140 = v215;
        v217 = v220;
        v218 = 2;
        v219 = v215;
        if (v215 < 3)
        {
          v142 = v220;
        }
        else
        {
          if (v215 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197C122DCLL);
          }
          v141 = 12 * v215;
          v142 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v215));
          v218 = (v141 & 0xFFFFFFFC) / 0xC;
          v217 = v142;
          v140 = v215;
        }
        if (v140)
        {
          v143 = v213;
          v144 = (WTF *)((char *)v213 + 12 * v140);
          do
          {
            *(_DWORD *)v142 = *(_DWORD *)v143;
            *(_QWORD *)(v142 + 4) = *(_QWORD *)((char *)v143 + 4);
            v143 = (WTF *)((char *)v143 + 12);
            v142 += 12;
          }
          while (v143 != v144);
        }
        v145 = v219;
        v221 = v224;
        v222 = 2;
        v223 = v219;
        if (v219 < 3)
        {
          v147 = v224;
        }
        else
        {
          if (v219 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197C122E4);
          }
          v146 = 12 * v219;
          v147 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v219));
          v222 = (v146 & 0xFFFFFFFC) / 0xC;
          v221 = v147;
          v145 = v219;
        }
        if (v145)
        {
          v148 = v217;
          v149 = &v217[12 * v145];
          do
          {
            *(_DWORD *)v147 = *(_DWORD *)v148;
            *(_QWORD *)(v147 + 4) = *(_QWORD *)(v148 + 4);
            v148 += 12;
            v147 += 12;
          }
          while (v148 != v149);
        }
        v150 = v223;
        v225 = v228;
        v226 = 2;
        v227 = v223;
        if (v223 < 3)
        {
          v152 = v228;
LABEL_76:
          if (v150)
          {
            v153 = v221;
            v154 = &v221[12 * v150];
            do
            {
              *(_DWORD *)v152 = *(_DWORD *)v153;
              *(_QWORD *)(v152 + 4) = *(_QWORD *)(v153 + 4);
              v153 += 12;
              v152 += 12;
            }
            while (v153 != v154);
          }
          JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v139, (uint64_t *)&v225, this);
          v162 = (unint64_t)v225;
          if (v228 != v225 && v225 != 0)
          {
            v225 = 0;
            v226 = 0;
            WTF::fastFree(v162, v155, v156, v157, v158, v159, v160, v161);
          }
          *(_QWORD *)v139 = off_1E3574010;
          *(_QWORD *)(v139 + 92) = 0xFFFFFFFFLL;
          *(_WORD *)(v139 + 100) = 0;
          *(_BYTE *)(v139 + 102) = v52;
          *(_QWORD *)(v139 + 104) = v139 + 120;
          *(_QWORD *)(v139 + 112) = 2;
          JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v139 + 104, v52, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v160, v161);
          v171 = (unint64_t)v221;
          if (v224 != v221 && v221)
          {
            v221 = 0;
            v222 = 0;
            WTF::fastFree(v171, v164, v165, v166, v167, v168, v169, v170);
          }
          *(_QWORD *)v139 = &off_1E3573FE0;
          *(_QWORD *)(v139 + 152) = operationObjectToStringObjectSlow;
          *(_QWORD *)(v139 + 160) = v195;
          *(_QWORD *)(v139 + 168) = v194;
          *(_BYTE *)(v139 + 176) = v14;
          v199 = v139;
          v172 = (unint64_t)v217;
          if (v220 != v217 && v217)
          {
            v217 = 0;
            v218 = 0;
            WTF::fastFree(v172, v164, v165, v166, v167, v168, v169, v170);
          }
          v173 = v213;
          if (v216 != (_BYTE *)v213 && v213)
          {
            v213 = 0;
            v214 = 0;
            WTF::fastFree((unint64_t)v173, v164, v165, v166, v167, v168, v169, v170);
          }
          v174 = this + 707;
          v175 = *((unsigned int *)this + 1417);
          if ((_DWORD)v175 == *((_DWORD *)this + 1416))
          {
            v177 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v174, v175 + 1, (unint64_t)&v199);
            v175 = *((unsigned int *)this + 1417);
            v176 = (uint64_t *)((char *)this[707] + 8 * v175);
            v139 = *v177;
          }
          else
          {
            v176 = (uint64_t *)(*v174 + 8 * v175);
            v177 = &v199;
          }
          *v177 = 0;
          *v176 = v139;
          *((_DWORD *)this + 1417) = v175 + 1;
          v178 = v199;
          v199 = 0;
          if (v178)
            (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
          if (v198 != (_BYTE *)v196 && v196)
            WTF::fastFree((unint64_t)v196, v164, v165, v166, v167, v168, v169, v170);
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v165, v166, v167, v168, v169, v170);
          if ((int)v52 > 15)
            v186 = -1;
          else
            v186 = v52;
          v187 = (char *)this + 12 * v186;
          v188 = *((_DWORD *)a2 + 12);
          *((_DWORD *)v187 + 1194) = v188;
          *((_DWORD *)v187 + 1195) = 4;
          v189 = ~v188;
          if (v189 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197C122C4);
          }
          v190 = (uint64_t)this[499] + 24 * (int)v189;
          v191 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v190 = a2;
          *(_DWORD *)(v190 + 8) = v191;
          *(_BYTE *)(v190 + 17) = v52;
          *(_DWORD *)(v190 + 12) = 6;
          *(_BYTE *)(v190 + 16) = 0;
          v192 = v208;
          if (v210 != (_BYTE *)v208 && v208)
          {
            v208 = 0;
            LODWORD(v209) = 0;
            WTF::fastFree((unint64_t)v192, v179, v180, v181, v182, v183, v184, v185);
          }
          if (v211)
          {
            v193 = (char)v212;
            if ((char)v212 != -1)
            {
              if ((char)v212 > 15)
                v193 = -1;
              --*(_DWORD *)(v211 + 12 * v193 + 4784);
            }
          }
          if (v37)
            goto LABEL_11;
          return;
        }
        if (v223 < 0x15555556)
        {
          v151 = 12 * v223;
          v152 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v223));
          v226 = (v151 & 0xFFFFFFFC) / 0xC;
          v225 = v152;
          v150 = v223;
          goto LABEL_76;
        }
        __break(0xC471u);
LABEL_128:
        JUMPOUT(0x197C12274);
      }
    }
    else
    {
LABEL_115:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v211, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    }
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v45, v46, v47, v48, v49, v50);
    goto LABEL_22;
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C122ACLL);
  }
  if (!*((_BYTE *)this[499] + 24 * (int)v12 + 12)
    || (LODWORD(v14) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v14 == -1))
  {
LABEL_6:
    LODWORD(v14) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v13, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v21 = *((unsigned int *)this + 1194);
  if ((_DWORD)v21 != 0x3FFFFFFF)
  {
    this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v21, (uint64_t)v15, v16, v17, v18, v19, v20);
  }
  v22 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v15, v16, v17, v18, v19, v20);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v225, (unsigned __int8 *)this, (uint64_t)operationObjectToStringUntyped, v22, v23, v14, v24, v25);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v26, v27, v28, v29, v30, v31);
  v32 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v32;
  *((_DWORD *)this + 1195) = 4;
  v33 = ~v32;
  if (v33 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C122B4);
  }
  v34 = (uint64_t)this[499] + 24 * (int)v33;
  v35 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v34 = a2;
  *(_DWORD *)(v34 + 8) = v35;
  *(_BYTE *)(v34 + 12) = 6;
  *(_DWORD *)(v34 + 13) = 0;
  *(_BYTE *)(v34 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
LABEL_11:
    if ((int)v14 > 15)
      v36 = -1;
    else
      v36 = v14;
    --*((_DWORD *)this + 3 * v36 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileCreateThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t *v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int *v70;
  int *v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int8x8_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  JSC::DFG::Node *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  _BYTE *v137;
  WTF *v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  _BYTE *v144;
  WTF *v145;
  WTF *v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  _BYTE *v150;
  WTF *v151;
  WTF *v152;
  unsigned int v153;
  char v154;
  int v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  unsigned int v159;
  int v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  WTF *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  int v196;
  unsigned int v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  WTF *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  char v207;
  uint64_t v208;
  JSC::DFG::Node *v209;
  WTF *v210;
  unsigned int v211;
  _BYTE v212[24];
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  WTF *v218;
  uint64_t v219;
  _BYTE v220[24];
  uint64_t v221;
  char v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  unsigned __int8 v228;
  WTF *v229;
  unsigned int v230;
  unsigned int v231;
  _BYTE v232[24];
  _BYTE *v233;
  unsigned int v234;
  unsigned int v235;
  _BYTE v236[24];
  _BYTE *v237;
  unsigned int v238;
  unsigned int v239;
  _BYTE v240[24];
  __int128 v241;
  _BYTE v242[32];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_109;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C12CBCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_109:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v227, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v225, this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v223, this, v20, v21, v22, v23, v24, v25);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v221, this, v26, v27, v28, v29, v30, v31);
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v32, v33, v34, v35, v36, v37);
  v38 = v228;
  v39 = v226;
  v40 = v224;
  v41 = v222;
  v218 = (WTF *)v220;
  v219 = 2;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  v42 = (char)v228;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 26, v43, v44, v45, v46, (uint64_t)&v216);
  v52 = v216;
  if (v216 != -1)
  {
    v53 = HIDWORD(v219);
    if (HIDWORD(v219) == (_DWORD)v219)
    {
      v54 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, (void *)(HIDWORD(v219) + 1), (unint64_t)&v216, v47, v48, v49, v50, v51);
      v56 = *v54;
      v55 = (uint64_t *)(v54 + 1);
      v52 = v56;
      v53 = HIDWORD(v219);
    }
    else
    {
      v55 = &v217;
    }
    v57 = (char *)v218 + 12 * v53;
    *(_DWORD *)v57 = v52;
    *(_QWORD *)(v57 + 4) = *v55;
    ++HIDWORD(v219);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x1800000000, (char)v40, v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v40, 1, v58, v59, v60, v61, (uint64_t)&v214, v62);
  v68 = v214;
  if (v214 != -1)
  {
    v69 = HIDWORD(v219);
    if (HIDWORD(v219) == (_DWORD)v219)
    {
      v70 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, (void *)(HIDWORD(v219) + 1), (unint64_t)&v214, v63, v64, v65, v66, v67);
      v72 = *v70;
      v71 = v70 + 1;
      v68 = v72;
      v69 = HIDWORD(v219);
    }
    else
    {
      v71 = &v215;
    }
    v73 = (char *)v218 + 12 * v69;
    *(_DWORD *)v73 = v68;
    *(_QWORD *)(v73 + 4) = *(_QWORD *)v71;
    ++HIDWORD(v219);
  }
  v74 = v39;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v40 | 0x700000000, v74, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v40 | 0xF00000000, (char)v40, v75, v76, v77, v78, v79);
  v241 = xmmword_199123080;
  v80 = v41;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v38, (uint64_t)&v241, v74, v80, (uint64_t)&v218, 1, v81, (int8x8_t)1);
  JSC::MacroAssemblerARM64::urshift64(this, (char)v40, 4, v80, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v80, v38, v86, v87, v88, v89, v90);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v40 | 0x800000000, v80, v91, v92, v93, v94, v95);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v80, v38 | 0x400000000, v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v38 | 0x800000000, v101, v102, v103, v104, v105);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v40 | 0xE00000000, (char)v40, v106, v107, v108, v109, v110);
  JSC::AssemblyHelpers::emitInitializeInlineStorage((uint64_t)this, v38, (char)v40, v116, v111, v112, v113, v114, v115);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v117, v118, v119, v120, v121, (uint64_t)&v241);
  v129 = *((_DWORD *)this + 50);
  if (v129 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v122, v123, v124, v125, v126, v127, v128);
    v129 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v129) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v241, (uint64_t)this, v123, v124, v125, v126, v127, v128);
  v136 = HIDWORD(v219);
  v210 = (WTF *)v212;
  v211 = HIDWORD(v219);
  if (HIDWORD(v219) < 3)
  {
    v137 = v212;
  }
  else
  {
    if (HIDWORD(v219) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C12CCCLL);
    }
    v137 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v219)));
    v210 = (WTF *)v137;
    v136 = HIDWORD(v219);
  }
  if (v136)
  {
    v138 = v218;
    v139 = (WTF *)((char *)v218 + 12 * v136);
    do
    {
      *(_DWORD *)v137 = *(_DWORD *)v138;
      *(_QWORD *)(v137 + 4) = *(_QWORD *)((char *)v138 + 4);
      v138 = (WTF *)((char *)v138 + 12);
      v137 += 12;
    }
    while (v138 != v139);
  }
  v140 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v130, v131, v132, v133, v134, v135);
  v208 = v141;
  v142 = *((_DWORD *)a2 + 18);
  v143 = v211;
  v229 = (WTF *)v232;
  v230 = 2;
  v231 = v211;
  if (v211 < 3)
  {
    v144 = v232;
  }
  else
  {
    if (v211 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C12CD4);
    }
    v144 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v211));
    v230 = 12 * v211 / 0xC;
    v229 = (WTF *)v144;
    v143 = v211;
  }
  if (v143)
  {
    v145 = v210;
    v146 = (WTF *)((char *)v210 + 12 * v143);
    do
    {
      *(_DWORD *)v144 = *(_DWORD *)v145;
      *(_QWORD *)(v144 + 4) = *(_QWORD *)((char *)v145 + 4);
      v145 = (WTF *)((char *)v145 + 12);
      v144 += 12;
    }
    while (v145 != v146);
  }
  v147 = WTF::fastMalloc((WTF *)0xB8);
  v148 = v231;
  v233 = v236;
  v234 = 2;
  v235 = v231;
  if (v231 < 3)
  {
    v150 = v236;
  }
  else
  {
    if (v231 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C12CDCLL);
    }
    v149 = 12 * v231;
    v150 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v231));
    v234 = (v149 & 0xFFFFFFFC) / 0xC;
    v233 = v150;
    v148 = v231;
  }
  if (v148)
  {
    v151 = v229;
    v152 = (WTF *)((char *)v229 + 12 * v148);
    do
    {
      *(_DWORD *)v150 = *(_DWORD *)v151;
      *(_QWORD *)(v150 + 4) = *(_QWORD *)((char *)v151 + 4);
      v151 = (WTF *)((char *)v151 + 12);
      v150 += 12;
    }
    while (v151 != v152);
  }
  v153 = v235;
  v237 = v240;
  v238 = 2;
  v239 = v235;
  v209 = a2;
  if (v235 < 3)
  {
    v154 = v13;
    v156 = v240;
  }
  else
  {
    if (v235 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C12CE4);
    }
    v154 = v13;
    v155 = 12 * v235;
    v156 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v235));
    v238 = (v155 & 0xFFFFFFFC) / 0xC;
    v237 = v156;
    v153 = v235;
  }
  if (v153)
  {
    v157 = v233;
    v158 = &v233[12 * v153];
    do
    {
      *(_DWORD *)v156 = *(_DWORD *)v157;
      *(_QWORD *)(v156 + 4) = *(_QWORD *)(v157 + 4);
      v157 += 12;
      v156 += 12;
    }
    while (v157 != v158);
  }
  v159 = v239;
  *(_QWORD *)&v241 = v242;
  DWORD2(v241) = 2;
  HIDWORD(v241) = v239;
  if (v239 >= 3)
  {
    if (v239 < 0x15555556)
    {
      v160 = 12 * v239;
      v161 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v239));
      DWORD2(v241) = (v160 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)&v241 = v161;
      v159 = v239;
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_119:
    JUMPOUT(0x197C12CA4);
  }
  v161 = v242;
LABEL_51:
  if (v159)
  {
    v162 = v237;
    v163 = &v237[12 * v159];
    do
    {
      *(_DWORD *)v161 = *(_DWORD *)v162;
      *(_QWORD *)(v161 + 4) = *(_QWORD *)(v162 + 4);
      v162 += 12;
      v161 += 12;
    }
    while (v162 != v163);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v147, (uint64_t *)&v241, this);
  v171 = v241;
  if (v242 != (_BYTE *)v241 && (_QWORD)v241 != 0)
  {
    *(_QWORD *)&v241 = 0;
    DWORD2(v241) = 0;
    WTF::fastFree(v171, v164, v165, v166, v167, v168, v169, v170);
  }
  *(_QWORD *)v147 = off_1E3574070;
  *(_QWORD *)(v147 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v147 + 100) = 0;
  *(_BYTE *)(v147 + 102) = v42;
  *(_QWORD *)(v147 + 104) = v147 + 120;
  *(_QWORD *)(v147 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v147 + 104, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v169, v170);
  v180 = (unint64_t)v237;
  if (v240 != v237 && v237)
  {
    v237 = 0;
    v238 = 0;
    WTF::fastFree(v180, v173, v174, v175, v176, v177, v178, v179);
  }
  *(_QWORD *)v147 = &off_1E3574040;
  *(_QWORD *)(v147 + 152) = operationCreateThis;
  *(_QWORD *)(v147 + 160) = v140;
  *(_QWORD *)(v147 + 168) = v208;
  *(_BYTE *)(v147 + 176) = v154;
  *(_DWORD *)(v147 + 180) = v142;
  v213 = v147;
  v181 = (unint64_t)v233;
  if (v236 != v233 && v233)
  {
    v233 = 0;
    v234 = 0;
    WTF::fastFree(v181, v173, v174, v175, v176, v177, v178, v179);
  }
  v182 = v229;
  if (v232 != (_BYTE *)v229 && v229)
  {
    v229 = 0;
    v230 = 0;
    WTF::fastFree((unint64_t)v182, v173, v174, v175, v176, v177, v178, v179);
  }
  v183 = (_QWORD *)((char *)this + 5656);
  v184 = *((unsigned int *)this + 1417);
  if ((_DWORD)v184 == *((_DWORD *)this + 1416))
  {
    v186 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v183, v184 + 1, (unint64_t)&v213);
    v184 = *((unsigned int *)this + 1417);
    v185 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v184);
    v147 = *v186;
  }
  else
  {
    v185 = (uint64_t *)(*v183 + 8 * v184);
    v186 = &v213;
  }
  *v186 = 0;
  *v185 = v147;
  *((_DWORD *)this + 1417) = v184 + 1;
  v187 = v213;
  v213 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  if (v212 != (_BYTE *)v210 && v210)
    WTF::fastFree((unint64_t)v210, v173, v174, v175, v176, v177, v178, v179);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v209, v174, v175, v176, v177, v178, v179);
  v195 = (char *)this + 4776;
  v196 = *((_DWORD *)v209 + 12);
  if ((int)v42 > 15)
    v197 = -1;
  else
    v197 = v42;
  v198 = &v195[12 * v197];
  *(_DWORD *)v198 = v196;
  *((_DWORD *)v198 + 1) = 4;
  v199 = ~v196;
  if (v199 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C12CC4);
  }
  v200 = *((_QWORD *)this + 499) + 24 * (int)v199;
  v201 = *((_DWORD *)v209 + 13);
  *(_QWORD *)v200 = v209;
  *(_DWORD *)(v200 + 8) = v201;
  *(_BYTE *)(v200 + 17) = v42;
  *(_DWORD *)(v200 + 12) = 6;
  *(_BYTE *)(v200 + 16) = 0;
  v202 = v218;
  if (v220 != (_BYTE *)v218 && v218)
  {
    v218 = 0;
    LODWORD(v219) = 0;
    WTF::fastFree((unint64_t)v202, v188, v189, v190, v191, v192, v193, v194);
  }
  if (v221)
  {
    v203 = v222;
    if (v222 != -1)
    {
      if (v222 > 15)
        v203 = -1;
      --*(_DWORD *)(v221 + 12 * v203 + 4784);
    }
  }
  if (v223)
  {
    v204 = (char)v224;
    if ((char)v224 != -1)
    {
      if ((char)v224 > 15)
        v204 = -1;
      --*(_DWORD *)(v223 + 12 * v204 + 4784);
    }
  }
  if (v225)
  {
    v205 = v226;
    if (v226 != -1)
    {
      if (v226 > 15)
        v205 = -1;
      --*(_DWORD *)(v225 + 12 * v205 + 4784);
    }
  }
  if (v227)
  {
    v206 = (char)v228;
    if ((char)v228 != -1)
    {
      if ((char)v228 > 15)
        v206 = -1;
      --*(_DWORD *)(v227 + 12 * v206 + 4784);
    }
  }
  if (v11)
  {
    if (v154 > 15)
      v207 = -1;
    else
      v207 = v154;
    --*(_DWORD *)&v195[12 * v207 + 8];
  }
}

unsigned int *JSC::AssemblyHelpers::emitInitializeInlineStorage(uint64_t a1, unsigned __int8 a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::AssemblerBuffer *v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::AssemblerBuffer *v39;
  int v40;
  unsigned int v41[3];
  unsigned int v42[3];

  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, a3, a6, a7, a8, a9, (uint64_t)v42, a4);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v39 = v19;
      JSC::AssemblerBuffer::outOfLineGrow(v19, v12, v13, v14, v15, v16, v17, v18);
      v19 = v39;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v21 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v12, v13, v14, v15, v16, v17, v18);
    v21 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = a3 | (32 * a3) | 0x51000400;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 63, a2 | ((unint64_t)a3 << 8) | 0x300000000, 0x200000010uLL, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, a3, v22, v23, v24, v25, (uint64_t)v41, v26);
  v40 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v41, (unsigned int *)&v40, a1, v27, v28, v29, v30, v31);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v42, a1, v32, v33, v34, v35, v36, v37);
}

void JSC::DFG::SpeculativeJIT::compileCreatePromise(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  _DWORD *v84;
  uint64_t *v85;
  int v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x8_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int *v101;
  int *v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x8_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  _DWORD *v119;
  uint64_t *v120;
  int v121;
  char *v122;
  unsigned int v123;
  char **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  JSC::DFG::Node *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  int *v151;
  int *v152;
  int v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  _DWORD *v180;
  uint64_t *v181;
  int v182;
  char *v183;
  uint64_t v184;
  int8x8_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  JSC::DFG::SpeculativeJIT *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  JSC::DFG::Node *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  _BYTE *v271;
  WTF *v272;
  WTF *v273;
  unint64_t (*v274)(JSC::InternalFunction *, JSC::ProxyObject *, uint64_t, JSC::Structure *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  _BYTE *v279;
  WTF *v280;
  WTF *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  int v304;
  unsigned int v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  int v309;
  WTF *v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  char v315;
  uint64_t v316;
  unsigned int v317;
  BOOL v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  BOOL v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  JSC::AssemblerBuffer *v327;
  unint64_t v328;
  WTF *v329;
  unsigned int v330;
  _BYTE v331[24];
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  WTF *v343;
  uint64_t v344;
  _BYTE v345[24];
  uint64_t v346[2];
  unsigned int v347[3];
  uint64_t v348;
  unsigned __int8 v349;
  uint64_t v350;
  char v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  unsigned __int8 v355;
  _BYTE *v356;
  uint64_t v357;
  _BYTE v358[28];
  char v359;
  char v360;
  __int16 v361;
  unint64_t (*v362)(JSC::InternalFunction *, JSC::ProxyObject *, uint64_t, JSC::Structure *, uint64_t, unint64_t, uint64_t, uint64_t);
  _DWORD *v363;
  __int128 v364;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v316 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v317 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v317 != 0x3FFFFFFF) ? (v318 = v317 == -1) : (v318 = 1), v318))
  {
    v319 = 2;
  }
  else if (v317 >> 28)
  {
    v325 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v325 = v316;
    *(_DWORD *)(v325 + 8) = v317;
    v319 = 1;
    v316 = v325;
  }
  else
  {
    v319 = v316;
    v316 = 0;
  }
  v11 = v316 | v319;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v316 | v319) & 1) == 0)
    goto LABEL_3;
  v320 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v321 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v321 != 0x3FFFFFFF) ? (v322 = v321 == -1) : (v322 = 1), v322))
  {
    v323 = 2;
  }
  else if (v321 >> 28)
  {
    v326 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v326 = v320;
    *(_DWORD *)(v326 + 8) = v321;
    v323 = 1;
    v320 = v326;
  }
  else
  {
    v323 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v320 = 0;
  }
  v324 = v320 | v323;
  v13 = (_QWORD *)(v324 & 0xFFFFFFFF8);
  if ((v324 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)a2 + 3);
  if ((v18 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_128;
  v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13BC8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_128:
    v20 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v354, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v352, this, v21, v22, v23, v24, v25, v26);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v350, this, v27, v28, v29, v30, v31, v32);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v348, this, v33, v34, v35, v36, v37, v38);
  if (v20 == -1)
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v18, v39, v40, v41, v42, v43, v44);
  v45 = v355;
  v46 = v353;
  v47 = v351;
  v48 = v349;
  v49 = 1184;
  if (!*((_DWORD *)a2 + 20))
    v49 = 1164;
  v50 = *(_DWORD *)(v17 + v49);
  if (v50)
    v51 = 16 * (v50 & 0xFFFFFFFE);
  else
    v51 = 0;
  v52 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v51, (int *)&v356, v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v52, v46, v53, v54, v55, v56, v57);
  v63 = 272;
  if (!*((_DWORD *)a2 + 20))
    v63 = 264;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v346, this, *(_QWORD *)(v17 + v63), v58, v59, v60, v61, v62);
  JSC::DFG::JITCompiler::branchLinkableConstant((uint64_t)v347, (uint64_t)this, v20, v346[0], v346[1], v64, v65, v66);
  v343 = (WTF *)v345;
  v344 = 2;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13A00);
  }
  v328 = v18 & 0xFF00FFFFFFFFFFFFLL;
  v72 = v46;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v20 | 0x500000000, *((char *)this + 304), v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 26, v73, v74, v75, v76, (uint64_t)&v341);
  v82 = v341;
  if (v341 != -1)
  {
    v83 = HIDWORD(v344);
    if (HIDWORD(v344) == (_DWORD)v344)
    {
      v84 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v343, (void *)(HIDWORD(v344) + 1), (unint64_t)&v341, v77, v78, v79, v80, v81);
      v86 = *v84;
      v85 = (uint64_t *)(v84 + 1);
      v82 = v86;
      v83 = HIDWORD(v344);
    }
    else
    {
      v85 = &v342;
    }
    v87 = (char *)v343 + 12 * v83;
    *(_DWORD *)v87 = v82;
    *(_QWORD *)(v87 + 4) = *v85;
    ++HIDWORD(v344);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v20 | 0x1800000000, (char)v46, v77, v78, v79, v80, v81);
  v88 = (char)v46;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v88, 1, v89, v90, v91, v92, (uint64_t)&v339, v93);
  v99 = v339;
  if (v339 != -1)
  {
    v100 = HIDWORD(v344);
    if (HIDWORD(v344) == (_DWORD)v344)
    {
      v101 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v343, (void *)(HIDWORD(v344) + 1), (unint64_t)&v339, v94, v95, v96, v97, v98);
      v103 = *v101;
      v102 = v101 + 1;
      v99 = v103;
      v100 = HIDWORD(v344);
    }
    else
    {
      v102 = &v340;
    }
    v104 = (char *)v343 + 12 * v100;
    *(_DWORD *)v104 = v99;
    *(_QWORD *)(v104 + 4) = *(_QWORD *)v102;
    ++HIDWORD(v344);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x2700000000, (char)v46, v94, v95, v96, v97, v98);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, (char)v46, v105, v106, v107, v108, (uint64_t)&v337, v109);
  v117 = v337;
  if (v337 != -1)
  {
    v118 = HIDWORD(v344);
    if (HIDWORD(v344) == (_DWORD)v344)
    {
      v119 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v343, (void *)(HIDWORD(v344) + 1), (unint64_t)&v337, v112, v113, v114, v115, v116);
      v121 = *v119;
      v120 = (uint64_t *)(v119 + 1);
      v117 = v121;
      v118 = HIDWORD(v344);
    }
    else
    {
      v120 = &v338;
    }
    v122 = (char *)v343 + 12 * v118;
    *(_DWORD *)v122 = v117;
    *(_QWORD *)(v122 + 4) = *v120;
    ++HIDWORD(v344);
  }
  v327 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v123 = *((_DWORD *)this + 50);
  if (v123 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v327, v110, v111, v112, v113, v114, v115, v116);
    v123 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v123) = v46 & 0x1F | (32 * (v46 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (*((_DWORD *)a2 + 20))
    v124 = &JSC::JSInternalPromise::s_info;
  else
    v124 = &JSC::JSPromise::s_info;
  v125 = v47;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v124, v125, v112, v113, v114, v115, v116);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x4C00000000, (char)v48, v126, v127, v128, v129, v130);
  v138 = *((_DWORD *)this + 50);
  if (v138 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v327, v131, v132, v133, v134, v135, v136, v137);
    v138 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v138) = v48 & 0x1F | (32 * (v48 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13A40);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v48, *((char *)this + 304), v133, v134, v135, v136, v137);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v47, 17, v139, v140, v141, v142, (uint64_t)&v335);
  v149 = v335;
  if (v335 != -1)
  {
    v150 = HIDWORD(v344);
    if (HIDWORD(v344) == (_DWORD)v344)
    {
      v151 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v343, (void *)(HIDWORD(v344) + 1), (unint64_t)&v335, v144, v145, v146, v147, v148);
      v153 = *v151;
      v152 = v151 + 1;
      v149 = v153;
      v150 = HIDWORD(v344);
    }
    else
    {
      v152 = &v336;
    }
    v154 = (char *)v343 + 12 * v150;
    *(_DWORD *)v154 = v149;
    *(_QWORD *)(v154 + 4) = *(_QWORD *)v152;
    ++HIDWORD(v344);
  }
  v155 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v143, v144, v145, v146, v147, v148);
  if ((_DWORD)v155 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v156, v47, v157, v158, v159, v160, v161);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v155 << 35) + 0x380000001ALL, v47, v157, v158, v159, v160, v161);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13A60);
  }
  v167 = (char)v45;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v72 | 0x2800000000, *((char *)this + 304), v162, v163, v164, v165, v166);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v47, 17, v168, v169, v170, v171, (uint64_t)&v333);
  v178 = v333;
  if (v333 != -1)
  {
    v179 = HIDWORD(v344);
    if (HIDWORD(v344) == (_DWORD)v344)
    {
      v180 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v343, (void *)(HIDWORD(v344) + 1), (unint64_t)&v333, v173, v174, v175, v176, v177);
      v182 = *v180;
      v181 = (uint64_t *)(v180 + 1);
      v178 = v182;
      v179 = HIDWORD(v344);
    }
    else
    {
      v181 = &v334;
    }
    v183 = (char *)v343 + 12 * v179;
    *(_DWORD *)v183 = v178;
    *(_QWORD *)(v183 + 4) = *v181;
    ++HIDWORD(v344);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v347, (uint64_t)this, v172, v173, v174, v175, v176, v177);
  v186 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v187 = *(_DWORD *)(v186 + 39028);
  if (*((_DWORD *)a2 + 20))
  {
    if (v187 <= 0x1F)
    {
      __break(0xC471u);
      JUMPOUT(0x197C13AD0);
    }
    v356 = 0;
    v357 = v186 + 38968;
    v188 = (char)v48;
    JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v45, (uint64_t)&v356, v125, v188, (uint64_t)&v343, 1, v184, v185);
    JSC::MacroAssemblerARM64::urshift64(this, v88, 4, v188, v189, v190, v191, v192);
    JSC::MacroAssemblerARM64::store32((uint64_t)this, v188, v45, v193, v194, v195, v196, v197);
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v72 | 0x800000000, v188, v198, v199, v200, v201, v202);
    v208 = v45 | 0x400000000;
    v209 = this;
    v210 = v188;
  }
  else
  {
    if (v187 <= 0x1F)
    {
      __break(0xC471u);
      JUMPOUT(0x197C13AF0);
    }
    v356 = 0;
    v357 = v186 + 38968;
    v211 = (char)v48;
    JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v45, (uint64_t)&v356, v47, v211, (uint64_t)&v343, 1, v184, v185);
    JSC::MacroAssemblerARM64::urshift64(this, (char)v72, 4, v211, v212, v213, v214, v215);
    JSC::MacroAssemblerARM64::store32((uint64_t)this, v211, v45, v216, v217, v218, v219, v220);
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v72 | 0x800000000, v211, v221, v222, v223, v224, v225);
    v208 = v45 | 0x400000000;
    v209 = this;
    v210 = v211;
  }
  JSC::MacroAssemblerARM64::store32((uint64_t)v209, v210, v208, v203, v204, v205, v206, v207);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v45 | 0x800000000, v226, v227, v228, v229, v230);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13A80);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 0xFFFE000000000000, (uint64_t)this + 264, v231, v232, v233, v234, v235);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v45 | 0x1000000000, v236, v237, v238, v239, v240);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13AA0);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v241, v242, v243, v244, v245);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v45 | 0x1800000000, v246, v247, v248, v249, v250);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v251, v252, v253, v254, v255, (uint64_t)&v356);
  v263 = *((_DWORD *)this + 50);
  if (v263 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v327, v256, v257, v258, v259, v260, v261, v262);
    v263 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v263) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v356, (uint64_t)this, v257, v258, v259, v260, v261, v262);
  v270 = HIDWORD(v344);
  v329 = (WTF *)v331;
  v330 = HIDWORD(v344);
  if (HIDWORD(v344) < 3)
  {
    v271 = v331;
    if (!HIDWORD(v344))
      goto LABEL_76;
LABEL_74:
    v272 = v343;
    v273 = (WTF *)((char *)v343 + 12 * v270);
    do
    {
      *(_DWORD *)v271 = *(_DWORD *)v272;
      *(_QWORD *)(v271 + 4) = *(_QWORD *)((char *)v272 + 4);
      v272 = (WTF *)((char *)v272 + 12);
      v271 += 12;
    }
    while (v272 != v273);
    goto LABEL_76;
  }
  if (HIDWORD(v344) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197C13BD0);
  }
  v271 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v344)));
  v329 = (WTF *)v271;
  v270 = HIDWORD(v344);
  if (HIDWORD(v344))
    goto LABEL_74;
LABEL_76:
  if (*((_DWORD *)a2 + 20))
    v274 = operationCreateInternalPromise;
  else
    v274 = operationCreatePromise;
  v275 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v264, v265, v266, v267, v268, v269);
  v277 = v276;
  v278 = v330;
  v356 = v358;
  LODWORD(v357) = 2;
  HIDWORD(v357) = v330;
  if (v330 < 3)
  {
    v279 = v358;
    if (!v330)
      goto LABEL_85;
  }
  else
  {
    if (v330 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C13BD8);
    }
    v279 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v330));
    LODWORD(v357) = 12 * v330 / 0xC;
    v356 = v279;
    v278 = v330;
  }
  v280 = v329;
  v281 = (WTF *)((char *)v329 + 12 * v278);
  do
  {
    *(_DWORD *)v279 = *(_DWORD *)v280;
    *(_QWORD *)(v279 + 4) = *(_QWORD *)((char *)v280 + 4);
    v280 = (WTF *)((char *)v280 + 12);
    v279 += 12;
  }
  while (v280 != v281);
LABEL_85:
  *(_QWORD *)&v364 = v275;
  *((_QWORD *)&v364 + 1) = v277;
  v362 = v274;
  v363 = this;
  v361 = 0;
  v360 = v167;
  v359 = v20;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&>(&v332, (uint64_t *)&v356, &v363, (uint64_t *)&v362, (unsigned __int8 *)&v361 + 1, (char *)&v361, &v360, &v364, &v359);
  v289 = (unint64_t)v356;
  if (v358 != v356 && v356)
  {
    v356 = 0;
    LODWORD(v357) = 0;
    WTF::fastFree(v289, v282, v283, v284, v285, v286, v287, v288);
  }
  v290 = (_QWORD *)((char *)this + 5656);
  v291 = *((unsigned int *)this + 1417);
  if ((_DWORD)v291 == *((_DWORD *)this + 1416))
  {
    v293 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v290, v291 + 1, (unint64_t)&v332);
    v291 = *((unsigned int *)this + 1417);
    v292 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v291);
  }
  else
  {
    v292 = (uint64_t *)(*v290 + 8 * v291);
    v293 = &v332;
  }
  v294 = *v293;
  *v293 = 0;
  *v292 = v294;
  *((_DWORD *)this + 1417) = v291 + 1;
  v295 = v332;
  v332 = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  if (v331 != (_BYTE *)v329 && v329)
    WTF::fastFree((unint64_t)v329, v282, v283, v284, v285, v286, v287, v288);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v283, v284, v285, v286, v287, v288);
  v303 = (char *)this + 4776;
  v304 = *((_DWORD *)a2 + 12);
  if (v167 > 15)
    v305 = -1;
  else
    v305 = v167;
  v306 = &v303[12 * v305];
  *(_DWORD *)v306 = v304;
  *((_DWORD *)v306 + 1) = 4;
  v307 = ~v304;
  if (v307 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C13BC0);
  }
  v308 = *((_QWORD *)this + 499) + 24 * (int)v307;
  v309 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v308 = a2;
  *(_DWORD *)(v308 + 8) = v309;
  *(_BYTE *)(v308 + 17) = v167;
  *(_DWORD *)(v308 + 12) = 6;
  *(_BYTE *)(v308 + 16) = 0;
  v310 = v343;
  if (v345 != (_BYTE *)v343 && v343)
  {
    v343 = 0;
    LODWORD(v344) = 0;
    WTF::fastFree((unint64_t)v310, v296, v297, v298, v299, v300, v301, v302);
  }
  if (v348)
  {
    v311 = (char)v349;
    if ((char)v349 != -1)
    {
      if ((char)v349 > 15)
        v311 = -1;
      --*(_DWORD *)(v348 + 12 * v311 + 4784);
    }
  }
  if (v350)
  {
    v312 = v351;
    if (v351 != -1)
    {
      if (v351 > 15)
        v312 = -1;
      --*(_DWORD *)(v350 + 12 * v312 + 4784);
    }
  }
  if (v352)
  {
    v313 = v353;
    if (v353 != -1)
    {
      if (v353 > 15)
        v313 = -1;
      --*(_DWORD *)(v352 + 12 * v313 + 4784);
    }
  }
  if (v354)
  {
    v314 = (char)v355;
    if ((char)v355 != -1)
    {
      if ((char)v355 > 15)
        v314 = -1;
      --*(_DWORD *)(v354 + 12 * v314 + 4784);
    }
  }
  if (v328)
  {
    if (v20 > 15)
      v315 = -1;
    else
      v315 = v20;
    --*(_DWORD *)&v303[12 * v315 + 8];
  }
}

void JSC::MacroAssembler::branchPtr(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch64(a1, a2, a3, 17, v13, v14, v15, v16, a9);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::SpeculativeJIT::compileCreateGenerator(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int *v69;
  int *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t *v88;
  int v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::DFG::Node *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int *v119;
  int *v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int8x8_t v144;
  int v145;
  unsigned int v146;
  _DWORD *v147;
  uint64_t *v148;
  int v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  JSC::DFG::Node *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  _BYTE *v258;
  WTF *v259;
  WTF *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  _BYTE *v265;
  WTF *v266;
  WTF *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  int v290;
  unsigned int v291;
  char *v292;
  unint64_t v293;
  uint64_t v294;
  int v295;
  WTF *v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  char v301;
  JSC::AssemblerBuffer *v302;
  unint64_t v303;
  WTF *v304;
  unsigned int v305;
  _BYTE v306[24];
  uint64_t v307;
  int v308;
  uint64_t v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  WTF *v318;
  uint64_t v319;
  _BYTE v320[24];
  uint64_t v321;
  unsigned __int8 v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  unsigned __int8 v326;
  uint64_t v327;
  unsigned __int8 v328;
  _BYTE *v329;
  uint64_t v330;
  _BYTE v331[28];
  unsigned __int8 v332;
  char v333;
  __int16 v334;
  void (*v335)(uint64_t, JSC::JSGlobalObject *, uint64_t, JSC::Structure *, uint64_t, unint64_t, uint64_t, uint64_t);
  _DWORD *v336;
  __int128 v337;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_107;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C147FCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_107:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v327, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v325, this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v323, this, v20, v21, v22, v23, v24, v25);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v321, this, v26, v27, v28, v29, v30, v31);
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v32, v33, v34, v35, v36, v37);
  v38 = v328;
  v39 = v326;
  v40 = v324;
  v41 = v322;
  v318 = (WTF *)v320;
  v319 = 2;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C14748);
  }
  v303 = v11;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 26, v42, v43, v44, v45, (uint64_t)&v316);
  v51 = v316;
  if (v316 != -1)
  {
    v52 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, (void *)(HIDWORD(v319) + 1), (unint64_t)&v316, v46, v47, v48, v49, v50);
      v55 = *v53;
      v54 = (uint64_t *)(v53 + 1);
      v51 = v55;
      v52 = HIDWORD(v319);
    }
    else
    {
      v54 = &v317;
    }
    v56 = (char *)v318 + 12 * v52;
    *(_DWORD *)v56 = v51;
    *(_QWORD *)(v56 + 4) = *v54;
    ++HIDWORD(v319);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x1800000000, (char)v39, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v39, 1, v57, v58, v59, v60, (uint64_t)&v314, v61);
  v67 = v314;
  if (v314 != -1)
  {
    v68 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v69 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, (void *)(HIDWORD(v319) + 1), (unint64_t)&v314, v62, v63, v64, v65, v66);
      v71 = *v69;
      v70 = v69 + 1;
      v67 = v71;
      v68 = HIDWORD(v319);
    }
    else
    {
      v70 = &v315;
    }
    v72 = (char *)v318 + 12 * v68;
    *(_DWORD *)v72 = v67;
    *(_QWORD *)(v72 + 4) = *(_QWORD *)v70;
    ++HIDWORD(v319);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x2700000000, (char)v39, v62, v63, v64, v65, v66);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, (char)v39, v73, v74, v75, v76, (uint64_t)&v312, v77);
  v85 = v312;
  if (v312 != -1)
  {
    v86 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, (void *)(HIDWORD(v319) + 1), (unint64_t)&v312, v80, v81, v82, v83, v84);
      v89 = *v87;
      v88 = (uint64_t *)(v87 + 1);
      v85 = v89;
      v86 = HIDWORD(v319);
    }
    else
    {
      v88 = &v313;
    }
    v90 = (char *)v318 + 12 * v86;
    *(_DWORD *)v90 = v85;
    *(_QWORD *)(v90 + 4) = *v88;
    ++HIDWORD(v319);
  }
  v302 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v91 = *((_DWORD *)this + 50);
  if (v91 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v302, v78, v79, v80, v81, v82, v83, v84);
    v91 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v91) = v39 & 0x1F | (32 * (v39 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  v92 = v40;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)&JSC::JSGenerator::s_info, v92, v80, v81, v82, v83, v84);
  v93 = (char)v41;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x4C00000000, v93, v94, v95, v96, v97, v98);
  v106 = *((_DWORD *)this + 50);
  if (v106 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v302, v99, v100, v101, v102, v103, v104, v105);
    v106 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v106) = v41 & 0x1F | (32 * (v41 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C14788);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v41, *((char *)this + 304), v101, v102, v103, v104, v105);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v92, 17, v107, v108, v109, v110, (uint64_t)&v310);
  v117 = v310;
  if (v310 != -1)
  {
    v118 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v119 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, (void *)(HIDWORD(v319) + 1), (unint64_t)&v310, v112, v113, v114, v115, v116);
      v121 = *v119;
      v120 = v119 + 1;
      v117 = v121;
      v118 = HIDWORD(v319);
    }
    else
    {
      v120 = &v311;
    }
    v122 = (char *)v318 + 12 * v118;
    *(_DWORD *)v122 = v117;
    *(_QWORD *)(v122 + 4) = *(_QWORD *)v120;
    ++HIDWORD(v319);
  }
  v123 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v111, v112, v113, v114, v115, v116);
  if ((_DWORD)v123 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v124, v92, v125, v126, v127, v128, v129);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v123 << 35) + 0x380000001ALL, v92, v125, v126, v127, v128, v129);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C147A8);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v39 | 0x2800000000, *((char *)this + 304), v130, v131, v132, v133, v134);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v92, 17, v135, v136, v137, v138, (uint64_t)&v308);
  v145 = v308;
  if (v308 != -1)
  {
    v146 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v147 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, (void *)(HIDWORD(v319) + 1), (unint64_t)&v308, v139, v140, v141, v142, v143);
      v149 = *v147;
      v148 = (uint64_t *)(v147 + 1);
      v145 = v149;
      v146 = HIDWORD(v319);
    }
    else
    {
      v148 = &v309;
    }
    v150 = (char *)v318 + 12 * v146;
    *(_DWORD *)v150 = v145;
    *(_QWORD *)(v150 + 4) = *v148;
    ++HIDWORD(v319);
  }
  v151 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 40488);
  if (v151 && *(_DWORD *)(v151 + 60) <= 0x3Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C147D8);
  }
  v152 = (char)v38;
  v329 = 0;
  v330 = v151;
  v153 = (char)v41;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v38, (uint64_t)&v329, v92, v153, (uint64_t)&v318, 1, v143, v144);
  JSC::MacroAssemblerARM64::urshift64(this, (char)v39, 4, v93, v154, v155, v156, v157);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v153, v38, v158, v159, v160, v161, v162);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x800000000, v153, v163, v164, v165, v166, v167);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v93, v38 | 0x400000000, v168, v169, v170, v171, v172);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v38 | 0x800000000, v173, v174, v175, v176, v177);
  if (!*((_BYTE *)this + 212))
    goto LABEL_109;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 2, (uint64_t)this + 264, v178, v179, v180, v181, v182);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x1000000000, v183, v184, v185, v186, v187);
  if (!*((_BYTE *)this + 212))
    goto LABEL_109;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 0xFFFE000000000000, (uint64_t)this + 264, v188, v189, v190, v191, v192);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x1800000000, v193, v194, v195, v196, v197);
  if (!*((_BYTE *)this + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v198, v199, v200, v201, v202),
        JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x2000000000, v203, v204, v205, v206, v207),
        !*((_BYTE *)this + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v208, v209, v210, v211, v212),
        JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x2800000000, v213, v214, v215, v216, v217),
        !*((_BYTE *)this + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v218, v219, v220, v221, v222),
        JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x3000000000, v223, v224, v225, v226, v227),
        !*((_BYTE *)this + 212)))
  {
LABEL_109:
    __break(0xC471u);
    goto LABEL_119;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v228, v229, v230, v231, v232);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x3800000000, v233, v234, v235, v236, v237);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v238, v239, v240, v241, v242, (uint64_t)&v329);
  v250 = *((_DWORD *)this + 50);
  if (v250 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v302, v243, v244, v245, v246, v247, v248, v249);
    v250 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v250) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v329, (uint64_t)this, v244, v245, v246, v247, v248, v249);
  v257 = HIDWORD(v319);
  v304 = (WTF *)v306;
  v305 = HIDWORD(v319);
  if (HIDWORD(v319) < 3)
  {
    v258 = v306;
    if (!HIDWORD(v319))
      goto LABEL_58;
    goto LABEL_56;
  }
  if (HIDWORD(v319) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1480CLL);
  }
  v258 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v319)));
  v304 = (WTF *)v258;
  v257 = HIDWORD(v319);
  if (HIDWORD(v319))
  {
LABEL_56:
    v259 = v318;
    v260 = (WTF *)((char *)v318 + 12 * v257);
    do
    {
      *(_DWORD *)v258 = *(_DWORD *)v259;
      *(_QWORD *)(v258 + 4) = *(_QWORD *)((char *)v259 + 4);
      v259 = (WTF *)((char *)v259 + 12);
      v258 += 12;
    }
    while (v259 != v260);
  }
LABEL_58:
  v261 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v251, v252, v253, v254, v255, v256);
  v263 = v262;
  v264 = v305;
  v329 = v331;
  LODWORD(v330) = 2;
  HIDWORD(v330) = v305;
  if (v305 < 3)
  {
    v265 = v331;
    if (!v305)
      goto LABEL_64;
    goto LABEL_62;
  }
  if (v305 >= 0x15555556)
  {
    __break(0xC471u);
LABEL_119:
    JUMPOUT(0x197C14728);
  }
  v265 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v305));
  LODWORD(v330) = 12 * v305 / 0xC;
  v329 = v265;
  v264 = v305;
LABEL_62:
  v266 = v304;
  v267 = (WTF *)((char *)v304 + 12 * v264);
  do
  {
    *(_DWORD *)v265 = *(_DWORD *)v266;
    *(_QWORD *)(v265 + 4) = *(_QWORD *)((char *)v266 + 4);
    v266 = (WTF *)((char *)v266 + 12);
    v265 += 12;
  }
  while (v266 != v267);
LABEL_64:
  *(_QWORD *)&v337 = v261;
  *((_QWORD *)&v337 + 1) = v263;
  v335 = operationCreateGenerator;
  v336 = this;
  v334 = 0;
  v333 = v152;
  v332 = v13;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&>(&v307, (uint64_t *)&v329, &v336, (uint64_t *)&v335, (unsigned __int8 *)&v334 + 1, (char *)&v334, &v333, &v337, (char *)&v332);
  v275 = (unint64_t)v329;
  if (v331 != v329 && v329)
  {
    v329 = 0;
    LODWORD(v330) = 0;
    WTF::fastFree(v275, v268, v269, v270, v271, v272, v273, v274);
  }
  v276 = (_QWORD *)((char *)this + 5656);
  v277 = *((unsigned int *)this + 1417);
  if ((_DWORD)v277 == *((_DWORD *)this + 1416))
  {
    v279 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v276, v277 + 1, (unint64_t)&v307);
    v277 = *((unsigned int *)this + 1417);
    v278 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v277);
  }
  else
  {
    v278 = (uint64_t *)(*v276 + 8 * v277);
    v279 = &v307;
  }
  v280 = *v279;
  *v279 = 0;
  *v278 = v280;
  *((_DWORD *)this + 1417) = v277 + 1;
  v281 = v307;
  v307 = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  if (v306 != (_BYTE *)v304 && v304)
    WTF::fastFree((unint64_t)v304, v268, v269, v270, v271, v272, v273, v274);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v269, v270, v271, v272, v273, v274);
  v289 = (char *)this + 4776;
  v290 = *((_DWORD *)a2 + 12);
  if (v152 > 15)
    v291 = -1;
  else
    v291 = v152;
  v292 = &v289[12 * v291];
  *(_DWORD *)v292 = v290;
  *((_DWORD *)v292 + 1) = 4;
  v293 = ~v290;
  if (v293 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C14804);
  }
  v294 = *((_QWORD *)this + 499) + 24 * (int)v293;
  v295 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v294 = a2;
  *(_DWORD *)(v294 + 8) = v295;
  *(_BYTE *)(v294 + 17) = v152;
  *(_DWORD *)(v294 + 12) = 6;
  *(_BYTE *)(v294 + 16) = 0;
  v296 = v318;
  if (v320 != (_BYTE *)v318 && v318)
  {
    v318 = 0;
    LODWORD(v319) = 0;
    WTF::fastFree((unint64_t)v296, v282, v283, v284, v285, v286, v287, v288);
  }
  if (v321)
  {
    v297 = (char)v322;
    if ((char)v322 != -1)
    {
      if ((char)v322 > 15)
        v297 = -1;
      --*(_DWORD *)(v321 + 12 * v297 + 4784);
    }
  }
  if (v323)
  {
    v298 = v324;
    if (v324 != -1)
    {
      if (v324 > 15)
        v298 = -1;
      --*(_DWORD *)(v323 + 12 * v298 + 4784);
    }
  }
  if (v325)
  {
    v299 = (char)v326;
    if ((char)v326 != -1)
    {
      if ((char)v326 > 15)
        v299 = -1;
      --*(_DWORD *)(v325 + 12 * v299 + 4784);
    }
  }
  if (v327)
  {
    v300 = (char)v328;
    if ((char)v328 != -1)
    {
      if ((char)v328 > 15)
        v300 = -1;
      --*(_DWORD *)(v327 + 12 * v300 + 4784);
    }
  }
  if (v303)
  {
    if ((char)v13 > 15)
      v301 = -1;
    else
      v301 = v13;
    --*(_DWORD *)&v289[12 * v301 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::compileCreateAsyncGenerator(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int *v69;
  int *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t *v88;
  int v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::DFG::Node *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int *v119;
  int *v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int8x8_t v144;
  int v145;
  unsigned int v146;
  _DWORD *v147;
  uint64_t *v148;
  int v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  JSC::DFG::Node *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  _BYTE *v278;
  WTF *v279;
  WTF *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  _BYTE *v285;
  WTF *v286;
  WTF *v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  int v310;
  unsigned int v311;
  char *v312;
  unint64_t v313;
  uint64_t v314;
  int v315;
  WTF *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  char v321;
  JSC::AssemblerBuffer *v322;
  unint64_t v323;
  WTF *v324;
  unsigned int v325;
  _BYTE v326[24];
  uint64_t v327;
  int v328;
  uint64_t v329;
  int v330;
  int v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  WTF *v338;
  uint64_t v339;
  _BYTE v340[24];
  uint64_t v341;
  unsigned __int8 v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  unsigned __int8 v346;
  uint64_t v347;
  unsigned __int8 v348;
  _BYTE *v349;
  uint64_t v350;
  _BYTE v351[28];
  unsigned __int8 v352;
  char v353;
  __int16 v354;
  void (*v355)(uint64_t, JSC::JSGlobalObject *, uint64_t, JSC::Structure *, uint64_t, unint64_t, uint64_t, uint64_t);
  _DWORD *v356;
  __int128 v357;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_109;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C153FCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_109:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v347, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v345, this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v343, this, v20, v21, v22, v23, v24, v25);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v341, this, v26, v27, v28, v29, v30, v31);
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v32, v33, v34, v35, v36, v37);
  v38 = v348;
  v39 = v346;
  v40 = v344;
  v41 = v342;
  v338 = (WTF *)v340;
  v339 = 2;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C15348);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 26, v42, v43, v44, v45, (uint64_t)&v336);
  v51 = v336;
  if (v336 != -1)
  {
    v52 = HIDWORD(v339);
    if (HIDWORD(v339) == (_DWORD)v339)
    {
      v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v338, (void *)(HIDWORD(v339) + 1), (unint64_t)&v336, v46, v47, v48, v49, v50);
      v55 = *v53;
      v54 = (uint64_t *)(v53 + 1);
      v51 = v55;
      v52 = HIDWORD(v339);
    }
    else
    {
      v54 = &v337;
    }
    v56 = (char *)v338 + 12 * v52;
    *(_DWORD *)v56 = v51;
    *(_QWORD *)(v56 + 4) = *v54;
    ++HIDWORD(v339);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x1800000000, (char)v39, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v39, 1, v57, v58, v59, v60, (uint64_t)&v334, v61);
  v67 = v334;
  if (v334 != -1)
  {
    v68 = HIDWORD(v339);
    if (HIDWORD(v339) == (_DWORD)v339)
    {
      v69 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v338, (void *)(HIDWORD(v339) + 1), (unint64_t)&v334, v62, v63, v64, v65, v66);
      v71 = *v69;
      v70 = v69 + 1;
      v67 = v71;
      v68 = HIDWORD(v339);
    }
    else
    {
      v70 = &v335;
    }
    v72 = (char *)v338 + 12 * v68;
    *(_DWORD *)v72 = v67;
    *(_QWORD *)(v72 + 4) = *(_QWORD *)v70;
    ++HIDWORD(v339);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x2700000000, (char)v39, v62, v63, v64, v65, v66);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, (char)v39, v73, v74, v75, v76, (uint64_t)&v332, v77);
  v85 = v332;
  if (v332 != -1)
  {
    v86 = HIDWORD(v339);
    if (HIDWORD(v339) == (_DWORD)v339)
    {
      v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v338, (void *)(HIDWORD(v339) + 1), (unint64_t)&v332, v80, v81, v82, v83, v84);
      v89 = *v87;
      v88 = (uint64_t *)(v87 + 1);
      v85 = v89;
      v86 = HIDWORD(v339);
    }
    else
    {
      v88 = &v333;
    }
    v90 = (char *)v338 + 12 * v86;
    *(_DWORD *)v90 = v85;
    *(_QWORD *)(v90 + 4) = *v88;
    ++HIDWORD(v339);
  }
  v322 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v323 = v11;
  v91 = *((_DWORD *)this + 50);
  if (v91 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v322, v78, v79, v80, v81, v82, v83, v84);
    v91 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v91) = v39 & 0x1F | (32 * (v39 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  v92 = v40;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)&JSC::JSAsyncGenerator::s_info, v92, v80, v81, v82, v83, v84);
  v93 = (char)v41;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x4C00000000, v93, v94, v95, v96, v97, v98);
  v106 = *((_DWORD *)this + 50);
  if (v106 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v322, v99, v100, v101, v102, v103, v104, v105);
    v106 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v106) = v41 & 0x1F | (32 * (v41 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C15388);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v41, *((char *)this + 304), v101, v102, v103, v104, v105);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v92, 17, v107, v108, v109, v110, (uint64_t)&v330);
  v117 = v330;
  if (v330 != -1)
  {
    v118 = HIDWORD(v339);
    if (HIDWORD(v339) == (_DWORD)v339)
    {
      v119 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v338, (void *)(HIDWORD(v339) + 1), (unint64_t)&v330, v112, v113, v114, v115, v116);
      v121 = *v119;
      v120 = v119 + 1;
      v117 = v121;
      v118 = HIDWORD(v339);
    }
    else
    {
      v120 = &v331;
    }
    v122 = (char *)v338 + 12 * v118;
    *(_DWORD *)v122 = v117;
    *(_QWORD *)(v122 + 4) = *(_QWORD *)v120;
    ++HIDWORD(v339);
  }
  v123 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v111, v112, v113, v114, v115, v116);
  if ((_DWORD)v123 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v124, v92, v125, v126, v127, v128, v129);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v123 << 35) + 0x380000001ALL, v92, v125, v126, v127, v128, v129);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C153A8);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v39 | 0x2800000000, *((char *)this + 304), v130, v131, v132, v133, v134);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v92, 17, v135, v136, v137, v138, (uint64_t)&v328);
  v145 = v328;
  if (v328 != -1)
  {
    v146 = HIDWORD(v339);
    if (HIDWORD(v339) == (_DWORD)v339)
    {
      v147 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v338, (void *)(HIDWORD(v339) + 1), (unint64_t)&v328, v139, v140, v141, v142, v143);
      v149 = *v147;
      v148 = (uint64_t *)(v147 + 1);
      v145 = v149;
      v146 = HIDWORD(v339);
    }
    else
    {
      v148 = &v329;
    }
    v150 = (char *)v338 + 12 * v146;
    *(_DWORD *)v150 = v145;
    *(_QWORD *)(v150 + 4) = *v148;
    ++HIDWORD(v339);
  }
  v151 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 40336);
  if (v151 && *(_DWORD *)(v151 + 60) <= 0x4Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C153D8);
  }
  v152 = (char)v38;
  v349 = 0;
  v350 = v151;
  v153 = (char)v41;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v38, (uint64_t)&v349, v92, v153, (uint64_t)&v338, 1, v143, v144);
  JSC::MacroAssemblerARM64::urshift64(this, (char)v39, 4, v93, v154, v155, v156, v157);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v153, v38, v158, v159, v160, v161, v162);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v39 | 0x800000000, v153, v163, v164, v165, v166, v167);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v93, v38 | 0x400000000, v168, v169, v170, v171, v172);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v38 | 0x800000000, v173, v174, v175, v176, v177);
  if (!*((_BYTE *)this + 212))
    goto LABEL_111;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 2, (uint64_t)this + 264, v178, v179, v180, v181, v182);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x1000000000, v183, v184, v185, v186, v187);
  if (!*((_BYTE *)this + 212))
    goto LABEL_111;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 0xFFFE0000FFFFFFFDLL, (uint64_t)this + 264, v188, v189, v190, v191, v192);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x1800000000, v193, v194, v195, v196, v197);
  if (!*((_BYTE *)this + 212))
    goto LABEL_111;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v198, v199, v200, v201, v202);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x2000000000, v203, v204, v205, v206, v207);
  if (!*((_BYTE *)this + 212))
    goto LABEL_111;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v208, v209, v210, v211, v212);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x2800000000, v213, v214, v215, v216, v217);
  if (!*((_BYTE *)this + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v218, v219, v220, v221, v222),
        JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x3000000000, v223, v224, v225, v226, v227),
        !*((_BYTE *)this + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(this, 0xFFFE000000000000, (uint64_t)this + 264, v228, v229, v230, v231, v232), JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x3800000000, v233, v234, v235, v236, v237), !*((_BYTE *)this + 212))|| (JSC::MacroAssemblerARM64::moveToCachedReg(this, 2, (uint64_t)this + 264, v238, v239, v240, v241, v242), JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x4000000000, v243, v244, v245, v246, v247), !*((_BYTE *)this + 212)))
  {
LABEL_111:
    __break(0xC471u);
    goto LABEL_121;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 2, (uint64_t)this + 264, v248, v249, v250, v251, v252);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v38 | 0x4800000000, v253, v254, v255, v256, v257);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v258, v259, v260, v261, v262, (uint64_t)&v349);
  v270 = *((_DWORD *)this + 50);
  if (v270 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v322, v263, v264, v265, v266, v267, v268, v269);
    v270 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v270) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v349, (uint64_t)this, v264, v265, v266, v267, v268, v269);
  v277 = HIDWORD(v339);
  v324 = (WTF *)v326;
  v325 = HIDWORD(v339);
  if (HIDWORD(v339) < 3)
  {
    v278 = v326;
    if (!HIDWORD(v339))
      goto LABEL_60;
    goto LABEL_58;
  }
  if (HIDWORD(v339) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1540CLL);
  }
  v278 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v339)));
  v324 = (WTF *)v278;
  v277 = HIDWORD(v339);
  if (HIDWORD(v339))
  {
LABEL_58:
    v279 = v338;
    v280 = (WTF *)((char *)v338 + 12 * v277);
    do
    {
      *(_DWORD *)v278 = *(_DWORD *)v279;
      *(_QWORD *)(v278 + 4) = *(_QWORD *)((char *)v279 + 4);
      v279 = (WTF *)((char *)v279 + 12);
      v278 += 12;
    }
    while (v279 != v280);
  }
LABEL_60:
  v281 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v271, v272, v273, v274, v275, v276);
  v283 = v282;
  v284 = v325;
  v349 = v351;
  LODWORD(v350) = 2;
  HIDWORD(v350) = v325;
  if (v325 < 3)
  {
    v285 = v351;
    if (!v325)
      goto LABEL_66;
    goto LABEL_64;
  }
  if (v325 >= 0x15555556)
  {
    __break(0xC471u);
LABEL_121:
    JUMPOUT(0x197C15328);
  }
  v285 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v325));
  LODWORD(v350) = 12 * v325 / 0xC;
  v349 = v285;
  v284 = v325;
LABEL_64:
  v286 = v324;
  v287 = (WTF *)((char *)v324 + 12 * v284);
  do
  {
    *(_DWORD *)v285 = *(_DWORD *)v286;
    *(_QWORD *)(v285 + 4) = *(_QWORD *)((char *)v286 + 4);
    v286 = (WTF *)((char *)v286 + 12);
    v285 += 12;
  }
  while (v286 != v287);
LABEL_66:
  *(_QWORD *)&v357 = v281;
  *((_QWORD *)&v357 + 1) = v283;
  v355 = operationCreateAsyncGenerator;
  v356 = this;
  v354 = 0;
  v353 = v152;
  v352 = v13;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&>(&v327, (uint64_t *)&v349, &v356, (uint64_t *)&v355, (unsigned __int8 *)&v354 + 1, (char *)&v354, &v353, &v357, (char *)&v352);
  v295 = (unint64_t)v349;
  if (v351 != v349 && v349)
  {
    v349 = 0;
    LODWORD(v350) = 0;
    WTF::fastFree(v295, v288, v289, v290, v291, v292, v293, v294);
  }
  v296 = (_QWORD *)((char *)this + 5656);
  v297 = *((unsigned int *)this + 1417);
  if ((_DWORD)v297 == *((_DWORD *)this + 1416))
  {
    v299 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v296, v297 + 1, (unint64_t)&v327);
    v297 = *((unsigned int *)this + 1417);
    v298 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v297);
  }
  else
  {
    v298 = (uint64_t *)(*v296 + 8 * v297);
    v299 = &v327;
  }
  v300 = *v299;
  *v299 = 0;
  *v298 = v300;
  *((_DWORD *)this + 1417) = v297 + 1;
  v301 = v327;
  v327 = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  if (v326 != (_BYTE *)v324 && v324)
    WTF::fastFree((unint64_t)v324, v288, v289, v290, v291, v292, v293, v294);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v289, v290, v291, v292, v293, v294);
  v309 = (char *)this + 4776;
  v310 = *((_DWORD *)a2 + 12);
  if (v152 > 15)
    v311 = -1;
  else
    v311 = v152;
  v312 = &v309[12 * v311];
  *(_DWORD *)v312 = v310;
  *((_DWORD *)v312 + 1) = 4;
  v313 = ~v310;
  if (v313 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C15404);
  }
  v314 = *((_QWORD *)this + 499) + 24 * (int)v313;
  v315 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v314 = a2;
  *(_DWORD *)(v314 + 8) = v315;
  *(_BYTE *)(v314 + 17) = v152;
  *(_DWORD *)(v314 + 12) = 6;
  *(_BYTE *)(v314 + 16) = 0;
  v316 = v338;
  if (v340 != (_BYTE *)v338 && v338)
  {
    v338 = 0;
    LODWORD(v339) = 0;
    WTF::fastFree((unint64_t)v316, v302, v303, v304, v305, v306, v307, v308);
  }
  if (v341)
  {
    v317 = (char)v342;
    if ((char)v342 != -1)
    {
      if ((char)v342 > 15)
        v317 = -1;
      --*(_DWORD *)(v341 + 12 * v317 + 4784);
    }
  }
  if (v343)
  {
    v318 = v344;
    if (v344 != -1)
    {
      if (v344 > 15)
        v318 = -1;
      --*(_DWORD *)(v343 + 12 * v318 + 4784);
    }
  }
  if (v345)
  {
    v319 = (char)v346;
    if ((char)v346 != -1)
    {
      if ((char)v346 > 15)
        v319 = -1;
      --*(_DWORD *)(v345 + 12 * v319 + 4784);
    }
  }
  if (v347)
  {
    v320 = (char)v348;
    if ((char)v348 != -1)
    {
      if ((char)v348 > 15)
        v320 = -1;
      --*(_DWORD *)(v347 + 12 * v320 + 4784);
    }
  }
  if (v323)
  {
    if ((char)v13 > 15)
      v321 = -1;
    else
      v321 = v13;
    --*(_DWORD *)&v309[12 * v321 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::compileNewObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  unsigned int v67;
  _BYTE *v68;
  WTF *v69;
  WTF *v70;
  _QWORD *v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  _BYTE *v75;
  WTF *v76;
  WTF *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  WTF *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD **v100;
  _QWORD *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  char *v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  WTF *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  WTF *v132;
  unsigned int v133;
  _BYTE v134[24];
  _QWORD *v135;
  _DWORD v136[2];
  char v137;
  __int16 v138;
  char v139;
  WTF *v140;
  uint64_t v141;
  _BYTE v142[24];
  uint64_t v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  unsigned __int8 v148;
  WTF *v149;
  unsigned int v150;
  unsigned int v151;
  _BYTE v152[24];
  _BYTE *v153;
  unsigned int v154;
  unsigned int v155;
  _BYTE v156[24];
  _BYTE *v157;
  uint64_t v158;
  _BYTE v159[32];

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v147, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v145, this, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v143, this, v16, v17, v18, v19, v20, v21);
  v29 = v148;
  v30 = (char)v148;
  v140 = (WTF *)v142;
  v141 = 2;
  v31 = *((_QWORD *)a2 + 9);
  v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16)
                  + (((8 * *(unsigned __int8 *)(v31 + 14) + 31) >> 1) & 0x7F8)
                  + 15024);
  if (v32)
  {
    v157 = 0;
    v158 = v32;
    v33 = v144;
    JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v148, (uint64_t)&v157, v146, v33, (uint64_t)&v140, 0, v28, (int8x8_t)2);
    v39 = (v31 >> 4) | ((unint64_t)*(unsigned int *)(v31 + 8) << 32);
    if (v39)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        goto LABEL_89;
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, v39, (uint64_t)this + 264, v34, v35, v36, v37, v38);
      v40 = 16;
    }
    else
    {
      v40 = 63;
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v40, v29, v34, v35, v36, v37, v38);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v29 | 0x800000000, v41, v42, v43, v44, v45);
    JSC::AssemblyHelpers::emitFillStorageWithJSEmpty((uint64_t)this, v30, 16, *(unsigned __int8 *)(v31 + 14), v33, v46, v47, v48);
    JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v49, v50, v51, v52, v53, (uint64_t)&v157);
    v61 = *((_DWORD *)this + 50);
    if (v61 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v54, v55, v56, v57, v58, v59, v60);
      v61 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v61) = -721208641;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v157, (uint64_t)this, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    JSC::ARM64Assembler::label((_DWORD *)this + 8, v22, v23, v24, v25, v26, v27, v28, (int *)&v157);
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v119, v120, v121, v122, v123, v124);
    if (*((_BYTE *)this + 328))
      v131 = 69;
    else
      v131 = 65;
    v136[0] = (_DWORD)v157;
    v136[1] = 0;
    v137 = v131;
    v138 = 15;
    v139 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v140, v136, v125, v126, v127, v128, v129, v130);
  }
  v62 = HIDWORD(v141);
  v132 = (WTF *)v134;
  v133 = HIDWORD(v141);
  if (HIDWORD(v141) < 3)
  {
    v63 = v134;
  }
  else
  {
    if (HIDWORD(v141) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C15B18);
    }
    v63 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v141)));
    v132 = (WTF *)v63;
    v62 = HIDWORD(v141);
  }
  if (v62)
  {
    v64 = v140;
    v65 = (WTF *)((char *)v140 + 12 * v62);
    do
    {
      *(_DWORD *)v63 = *(_DWORD *)v64;
      *(_QWORD *)(v63 + 4) = *(_QWORD *)((char *)v64 + 4);
      v64 = (WTF *)((char *)v64 + 12);
      v63 += 12;
    }
    while (v64 != v65);
  }
  v66 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v67 = v133;
  v149 = (WTF *)v152;
  v150 = 2;
  v151 = v133;
  if (v133 < 3)
  {
    v68 = v152;
  }
  else
  {
    if (v133 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C15B20);
    }
    v68 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v133));
    v150 = 12 * v133 / 0xC;
    v149 = (WTF *)v68;
    v67 = v133;
  }
  if (v67)
  {
    v69 = v132;
    v70 = (WTF *)((char *)v132 + 12 * v67);
    do
    {
      *(_DWORD *)v68 = *(_DWORD *)v69;
      *(_QWORD *)(v68 + 4) = *(_QWORD *)((char *)v69 + 4);
      v69 = (WTF *)((char *)v69 + 12);
      v68 += 12;
    }
    while (v69 != v70);
  }
  v71 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
  v72 = v151;
  v153 = v156;
  v154 = 2;
  v155 = v151;
  if (v151 < 3)
  {
    v75 = v156;
  }
  else
  {
    if (v151 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C15B28);
    }
    v73 = v66;
    v74 = 12 * v151;
    v75 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v151));
    v154 = (v74 & 0xFFFFFFFC) / 0xC;
    v153 = v75;
    v72 = v151;
    v66 = v73;
  }
  if (v72)
  {
    v76 = v149;
    v77 = (WTF *)((char *)v149 + 12 * v72);
    do
    {
      *(_DWORD *)v75 = *(_DWORD *)v76;
      *(_QWORD *)(v75 + 4) = *(_QWORD *)((char *)v76 + 4);
      v76 = (WTF *)((char *)v76 + 12);
      v75 += 12;
    }
    while (v76 != v77);
  }
  v78 = v155;
  v157 = v159;
  LODWORD(v158) = 2;
  HIDWORD(v158) = v155;
  if (v155 >= 3)
  {
    if (v155 < 0x15555556)
    {
      v79 = v31;
      v80 = v30;
      v81 = v66;
      v82 = 12 * v155;
      v83 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v155));
      LODWORD(v158) = (v82 & 0xFFFFFFFC) / 0xC;
      v157 = v83;
      v78 = v155;
      v66 = v81;
      v30 = v80;
      v31 = v79;
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_89:
    JUMPOUT(0x197C15AB0);
  }
  v83 = v159;
LABEL_31:
  if (v78)
  {
    v84 = v153;
    v85 = &v153[12 * v78];
    do
    {
      *(_DWORD *)v83 = *(_DWORD *)v84;
      *(_QWORD *)(v83 + 4) = *(_QWORD *)(v84 + 4);
      v84 += 12;
      v83 += 12;
    }
    while (v84 != v85);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator((uint64_t)v71, (uint64_t *)&v157, this, 0, 0, v30);
  v93 = (unint64_t)v157;
  if (v159 != v157 && v157 != 0)
  {
    v157 = 0;
    LODWORD(v158) = 0;
    WTF::fastFree(v93, v86, v87, v88, v89, v90, v91, v92);
  }
  *v71 = &off_1E3574100;
  v71[19] = operationNewObject;
  v71[20] = v66;
  v71[21] = v31;
  v135 = v71;
  v95 = (unint64_t)v153;
  if (v156 != v153 && v153)
  {
    v153 = 0;
    v154 = 0;
    WTF::fastFree(v95, v86, v87, v88, v89, v90, v91, v92);
  }
  v96 = v149;
  if (v152 != (_BYTE *)v149 && v149)
  {
    v149 = 0;
    v150 = 0;
    WTF::fastFree((unint64_t)v96, v86, v87, v88, v89, v90, v91, v92);
  }
  v97 = (_QWORD *)((char *)this + 5656);
  v98 = *((unsigned int *)this + 1417);
  if ((_DWORD)v98 == *((_DWORD *)this + 1416))
  {
    v100 = (_QWORD **)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)&v135);
    v98 = *((unsigned int *)this + 1417);
    v99 = (_QWORD *)(*((_QWORD *)this + 707) + 8 * v98);
    v71 = *v100;
  }
  else
  {
    v99 = (_QWORD *)(*v97 + 8 * v98);
    v100 = &v135;
  }
  *v100 = 0;
  *v99 = v71;
  *((_DWORD *)this + 1417) = v98 + 1;
  v101 = v135;
  v135 = 0;
  if (v101)
    (*(void (**)(_QWORD *))(*v101 + 8))(v101);
  if (v134 != (_BYTE *)v132 && v132)
    WTF::fastFree((unint64_t)v132, v86, v87, v88, v89, v90, v91, v92);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v87, v88, v89, v90, v91, v92);
  if ((int)v30 > 15)
    v109 = -1;
  else
    v109 = v30;
  v110 = (char *)this + 12 * v109;
  v111 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v110 + 1194) = v111;
  *((_DWORD *)v110 + 1195) = 4;
  v112 = ~v111;
  if (v112 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C15B10);
  }
  v113 = *((_QWORD *)this + 499) + 24 * (int)v112;
  v114 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v113 = a2;
  *(_DWORD *)(v113 + 8) = v114;
  *(_BYTE *)(v113 + 17) = v30;
  *(_DWORD *)(v113 + 12) = 6;
  *(_BYTE *)(v113 + 16) = 0;
  v115 = v140;
  if (v142 != (_BYTE *)v140 && v140)
  {
    v140 = 0;
    LODWORD(v141) = 0;
    WTF::fastFree((unint64_t)v115, v102, v103, v104, v105, v106, v107, v108);
  }
  if (v143)
  {
    v116 = v144;
    if (v144 != -1)
    {
      if (v144 > 15)
        v116 = -1;
      --*(_DWORD *)(v143 + 12 * v116 + 4784);
    }
  }
  if (v145)
  {
    v117 = v146;
    if (v146 != -1)
    {
      if (v146 > 15)
        v117 = -1;
      --*(_DWORD *)(v145 + 12 * v117 + 4784);
    }
  }
  if (v147)
  {
    v118 = (char)v148;
    if ((char)v148 != -1)
    {
      if ((char)v148 > 15)
        v118 = -1;
      --*(_DWORD *)(v147 + 12 * v118 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSGenerator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  _BYTE *v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  _BYTE *v130;
  WTF *v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  char *v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  WTF *v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  WTF *v164;
  unsigned int v165;
  _BYTE v166[24];
  uint64_t v167;
  WTF *v168;
  uint64_t v169;
  _BYTE v170[24];
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  unsigned __int8 v176;
  WTF *v177;
  uint64_t v178;
  _BYTE v179[29];
  char v180;
  __int16 v181;
  uint64_t v182;
  _DWORD *v183;
  uint64_t v184;
  uint64_t v185;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v175, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v173, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v171, a1, v17, v18, v19, v20, v21, v22);
  v23 = v176;
  v24 = v174;
  v25 = v172;
  v168 = (WTF *)v170;
  v169 = 2;
  v32 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), *(_QWORD *)(a2 + 72), v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1615CLL);
  }
  v36 = (uint64_t *)v32;
  v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40488);
  if (v37 && *(_DWORD *)(v37 + 60) <= 0x3Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C161ACLL);
  }
  v177 = 0;
  v178 = v37;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v23, (uint64_t)&v177, v24, v25, (uint64_t)&v168, 1, v33, v34);
  v43 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
  if (v43)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C161CCLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v43, (uint64_t)a1 + 264, v38, v39, v40, v41, v42);
    v44 = 16;
  }
  else
  {
    v44 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, v23, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v23 | 0x800000000, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_65;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1000000000, v55, v56, v57, v58, v59);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_65;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v60, v61, v62, v63, v64);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1800000000, v65, v66, v67, v68, v69);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v70, v71, v72, v73, v74),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2000000000, v75, v76, v77, v78, v79),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v80, v81, v82, v83, v84),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2800000000, v85, v86, v87, v88, v89),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v90, v91, v92, v93, v94),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x3000000000, v95, v96, v97, v98, v99),
        !*((_BYTE *)a1 + 212)))
  {
LABEL_65:
    __break(0xC471u);
    goto LABEL_73;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v100, v101, v102, v103, v104);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x3800000000, v105, v106, v107, v108, v109);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v110, v111, v112, v113, v114, (uint64_t)&v177);
  v122 = *((_DWORD *)a1 + 50);
  if (v122 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v115, v116, v117, v118, v119, v120, v121);
    v122 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v122) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v177, (uint64_t)a1, v116, v117, v118, v119, v120, v121);
  v123 = HIDWORD(v169);
  v164 = (WTF *)v166;
  v165 = HIDWORD(v169);
  if (HIDWORD(v169) < 3)
  {
    v124 = v166;
  }
  else
  {
    if (HIDWORD(v169) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C161DCLL);
    }
    v124 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v169)));
    v164 = (WTF *)v124;
    v123 = HIDWORD(v169);
  }
  if (v123)
  {
    v125 = v168;
    v126 = (WTF *)((char *)v168 + 12 * v123);
    do
    {
      *(_DWORD *)v124 = *(_DWORD *)v125;
      *(_QWORD *)(v124 + 4) = *(_QWORD *)((char *)v125 + 4);
      v125 = (WTF *)((char *)v125 + 12);
      v124 += 12;
    }
    while (v125 != v126);
  }
  v127 = *v36;
  if ((*v36 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1618CLL);
  }
  v128 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  v129 = v165;
  v177 = (WTF *)v179;
  LODWORD(v178) = 2;
  HIDWORD(v178) = v165;
  if (v165 >= 3)
  {
    if (v165 < 0x15555556)
    {
      v130 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v165));
      LODWORD(v178) = 12 * v165 / 0xC;
      v177 = (WTF *)v130;
      v129 = v165;
      goto LABEL_25;
    }
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x197C1613CLL);
  }
  v130 = v179;
LABEL_25:
  if (v129)
  {
    v131 = v164;
    v132 = (WTF *)((char *)v164 + 12 * v129);
    do
    {
      *(_DWORD *)v130 = *(_DWORD *)v131;
      *(_QWORD *)(v130 + 4) = *(_QWORD *)((char *)v131 + 4);
      v131 = (WTF *)((char *)v131 + 12);
      v130 += 12;
    }
    while (v131 != v132);
  }
  v184 = v127;
  v185 = v128;
  v182 = a3;
  v183 = a1;
  v181 = 0;
  v180 = v23;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v167, (uint64_t *)&v177, &v183, &v182, (unsigned __int8 *)&v181 + 1, (char *)&v181, &v180, &v185, &v184);
  v140 = v177;
  if (v179 != (_BYTE *)v177 && v177)
  {
    v177 = 0;
    LODWORD(v178) = 0;
    WTF::fastFree((unint64_t)v140, v133, v134, v135, v136, v137, v138, v139);
  }
  v141 = (_QWORD *)((char *)a1 + 5656);
  v142 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v142 == *((_DWORD *)a1 + 1416))
  {
    v144 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v141, v142 + 1, (unint64_t)&v167);
    v142 = *((unsigned int *)a1 + 1417);
    v143 = (_QWORD *)(*((_QWORD *)a1 + 707) + 8 * v142);
  }
  else
  {
    v143 = (_QWORD *)(*v141 + 8 * v142);
    v144 = &v167;
  }
  v145 = *v144;
  *v144 = 0;
  *v143 = v145;
  *((_DWORD *)a1 + 1417) = v142 + 1;
  v146 = v167;
  v167 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  if (v166 != (_BYTE *)v164 && v164)
    WTF::fastFree((unint64_t)v164, v133, v134, v135, v136, v137, v138, v139);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v134, v135, v136, v137, v138, v139);
  if ((char)v23 > 15)
    v154 = -1;
  else
    v154 = (char)v23;
  v155 = (char *)a1 + 12 * v154;
  v156 = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v155 + 1194) = v156;
  *((_DWORD *)v155 + 1195) = 4;
  v157 = ~v156;
  if (v157 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C161D4);
  }
  v158 = *((_QWORD *)a1 + 499) + 24 * (int)v157;
  v159 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v158 = a2;
  *(_DWORD *)(v158 + 8) = v159;
  *(_BYTE *)(v158 + 17) = v23;
  *(_DWORD *)(v158 + 12) = 6;
  *(_BYTE *)(v158 + 16) = 0;
  v160 = v168;
  if (v170 != (_BYTE *)v168 && v168)
  {
    v168 = 0;
    LODWORD(v169) = 0;
    WTF::fastFree((unint64_t)v160, v147, v148, v149, v150, v151, v152, v153);
  }
  if (v171)
  {
    v161 = v172;
    if (v172 != -1)
    {
      if (v172 > 15)
        v161 = -1;
      --*(_DWORD *)(v171 + 12 * v161 + 4784);
    }
  }
  if (v173)
  {
    v162 = v174;
    if (v174 != -1)
    {
      if (v174 > 15)
        v162 = -1;
      --*(_DWORD *)(v173 + 12 * v162 + 4784);
    }
  }
  if (v175)
  {
    v163 = (char)v176;
    if ((char)v176 != -1)
    {
      if ((char)v176 > 15)
        v163 = -1;
      --*(_DWORD *)(v175 + 12 * v163 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSAsyncGenerator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  WTF *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  uint64_t v146;
  _BYTE v147[24];
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unsigned __int8 v153;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v152, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v150, a1, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v148, a1, v16, v17, v18, v19, v20, v21);
  v22 = v153;
  v23 = v151;
  v24 = v149;
  v145 = (WTF *)v147;
  v146 = 2;
  v31 = (unint64_t *)JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), a2[9], v25, v26, v27, v28, v29, v30);
  if ((*v31 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C165C0);
  }
  v34 = (uint64_t *)v31;
  JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSAsyncGenerator,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40336), (char)v22, *v31, v23, v24, (uint64_t)&v145, v32, v33);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_35;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x1000000000, v40, v41, v42, v43, v44);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_35;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE0000FFFFFFFDLL, (uint64_t)a1 + 264, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x1800000000, v50, v51, v52, v53, v54);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_35;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v55, v56, v57, v58, v59);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x2000000000, v60, v61, v62, v63, v64);
  if (!*((_BYTE *)a1 + 212))
    goto LABEL_35;
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v65, v66, v67, v68, v69);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x2800000000, v70, v71, v72, v73, v74);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v75, v76, v77, v78, v79),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x3000000000, v80, v81, v82, v83, v84),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v85, v86, v87, v88, v89),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x3800000000, v90, v91, v92, v93, v94),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v95, v96, v97, v98, v99),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x4000000000, v100, v101, v102, v103, v104),
        !*((_BYTE *)a1 + 212)))
  {
LABEL_35:
    __break(0xC471u);
    goto LABEL_38;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v105, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v22 | 0x4800000000, v110, v111, v112, v113, v114);
  JSC::AssemblyHelpers::mutatorFence(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v115, v116, v117, v118, v119, v120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v141, (uint64_t *)&v145);
  if ((*v34 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x197C165A0);
  }
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v144, (uint64_t *)&v141, a1, (uint64_t)operationNewAsyncGenerator, v22, *(_QWORD *)(*((_QWORD *)a1 + 44) + 16), *v34);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)a1, (unint64_t)&v144);
  v128 = v144;
  v144 = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = v141;
  if (&v143 != (uint64_t *)v141 && v141)
  {
    v141 = 0;
    v142 = 0;
    WTF::fastFree((unint64_t)v129, v121, v122, v123, v124, v125, v126, v127);
  }
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)a1, (char)v22, (JSC::DFG::Node *)a2, 0, v124, v125, v126, v127);
  v137 = v145;
  if (v147 != (_BYTE *)v145 && v145)
  {
    v145 = 0;
    LODWORD(v146) = 0;
    WTF::fastFree((unint64_t)v137, v130, v131, v132, v133, v134, v135, v136);
  }
  if (v148)
  {
    v138 = v149;
    if (v149 != -1)
    {
      if (v149 > 15)
        v138 = -1;
      --*(_DWORD *)(v148 + 12 * v138 + 4784);
    }
  }
  if (v150)
  {
    v139 = v151;
    if (v151 != -1)
    {
      if (v151 > 15)
        v139 = -1;
      --*(_DWORD *)(v150 + 12 * v139 + 4784);
    }
  }
  if (v152)
  {
    v140 = (char)v153;
    if ((char)v153 != -1)
    {
      if ((char)v153 > 15)
        v140 = -1;
      --*(_DWORD *)(v152 + 12 * v140 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObject(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v8 = *((_QWORD *)a2 + 9);
  v9 = *(unsigned __int8 *)(v8 + 9);
  switch(v9)
  {
    case '@':
      JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, (uint64_t)operationNewArrayIterator, a4, a5, a6, a7, a8);
      break;
    case 'D':
      if (&JSC::JSInternalPromise::s_info == (char **)(16 * *(unsigned int *)(v8 + 76)))
        JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>((JSC::DFG::SpeculativeJIT *)this, (unint64_t *)a2, (uint64_t)operationNewInternalPromise, a4, a5, a6, a7, a8);
      else
        JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, (uint64_t)operationNewPromise, a4, a5, a6, a7, a8);
      break;
    case 'A':
      JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, (uint64_t)operationNewMapIterator, a4, a5, a6, a7, a8);
      break;
    case 'B':
      JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, (uint64_t)operationNewSetIterator, a4, a5, a6, a7, a8);
      break;
    default:
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3D6F, "void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObject(Node *)", "Bad structure");
      __break(0xC471u);
      break;
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _BYTE *v100;
  WTF *v101;
  WTF *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  char *v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  WTF *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  WTF *v134;
  unsigned int v135;
  _BYTE v136[24];
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  _BYTE v140[24];
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  unsigned __int8 v146;
  WTF *v147;
  uint64_t v148;
  _BYTE v149[29];
  char v150;
  __int16 v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v145, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v143, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v141, a1, v17, v18, v19, v20, v21, v22);
  v23 = v146;
  v24 = v144;
  v25 = v142;
  v138 = (WTF *)v140;
  v139 = 2;
  v32 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), *(_QWORD *)(a2 + 72), v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C16C74);
  }
  v36 = (uint64_t *)v32;
  v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40328);
  if (v37 && *(_DWORD *)(v37 + 60) <= 0x27u)
  {
    __break(0xC471u);
    JUMPOUT(0x197C16C94);
  }
  v147 = 0;
  v148 = v37;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v23, (uint64_t)&v147, v24, v25, (uint64_t)&v138, 1, v33, v34);
  v43 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
  if (v43)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C16CE4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v43, (uint64_t)a1 + 264, v38, v39, v40, v41, v42);
    v44 = 16;
  }
  else
  {
    v44 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, v23, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v23 | 0x800000000, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v50, v51, v52, v53, v54),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1000000000, v55, v56, v57, v58, v59),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v60, v61, v62, v63, v64),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1800000000, v65, v66, v67, v68, v69),
        !*((_BYTE *)a1 + 212)))
  {
    __break(0xC471u);
    goto LABEL_70;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v70, v71, v72, v73, v74);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2000000000, v75, v76, v77, v78, v79);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v80, v81, v82, v83, v84, (uint64_t)&v147);
  v92 = *((_DWORD *)a1 + 50);
  if (v92 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v85, v86, v87, v88, v89, v90, v91);
    v92 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v92) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v147, (uint64_t)a1, v86, v87, v88, v89, v90, v91);
  v93 = HIDWORD(v139);
  v134 = (WTF *)v136;
  v135 = HIDWORD(v139);
  if (HIDWORD(v139) < 3)
  {
    v94 = v136;
  }
  else
  {
    if (HIDWORD(v139) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C16CF4);
    }
    v94 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v139)));
    v134 = (WTF *)v94;
    v93 = HIDWORD(v139);
  }
  if (v93)
  {
    v95 = v138;
    v96 = (WTF *)((char *)v138 + 12 * v93);
    do
    {
      *(_DWORD *)v94 = *(_DWORD *)v95;
      *(_QWORD *)(v94 + 4) = *(_QWORD *)((char *)v95 + 4);
      v95 = (WTF *)((char *)v95 + 12);
      v94 += 12;
    }
    while (v95 != v96);
  }
  v97 = *v36;
  if ((*v36 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C16CC4);
  }
  v98 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  v99 = v135;
  v147 = (WTF *)v149;
  LODWORD(v148) = 2;
  HIDWORD(v148) = v135;
  if (v135 >= 3)
  {
    if (v135 < 0x15555556)
    {
      v100 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v135));
      LODWORD(v148) = 12 * v135 / 0xC;
      v147 = (WTF *)v100;
      v99 = v135;
      goto LABEL_22;
    }
    __break(0xC471u);
LABEL_70:
    JUMPOUT(0x197C16C54);
  }
  v100 = v149;
LABEL_22:
  if (v99)
  {
    v101 = v134;
    v102 = (WTF *)((char *)v134 + 12 * v99);
    do
    {
      *(_DWORD *)v100 = *(_DWORD *)v101;
      *(_QWORD *)(v100 + 4) = *(_QWORD *)((char *)v101 + 4);
      v101 = (WTF *)((char *)v101 + 12);
      v100 += 12;
    }
    while (v101 != v102);
  }
  v154 = v97;
  v155 = v98;
  v152 = a3;
  v153 = a1;
  v151 = 0;
  v150 = v23;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v137, (uint64_t *)&v147, &v153, &v152, (unsigned __int8 *)&v151 + 1, (char *)&v151, &v150, &v155, &v154);
  v110 = v147;
  if (v149 != (_BYTE *)v147 && v147)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v110, v103, v104, v105, v106, v107, v108, v109);
  }
  v111 = (_QWORD *)((char *)a1 + 5656);
  v112 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v112 == *((_DWORD *)a1 + 1416))
  {
    v114 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v112 + 1, (unint64_t)&v137);
    v112 = *((unsigned int *)a1 + 1417);
    v113 = (_QWORD *)(*((_QWORD *)a1 + 707) + 8 * v112);
  }
  else
  {
    v113 = (_QWORD *)(*v111 + 8 * v112);
    v114 = &v137;
  }
  v115 = *v114;
  *v114 = 0;
  *v113 = v115;
  *((_DWORD *)a1 + 1417) = v112 + 1;
  v116 = v137;
  v137 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v136 != (_BYTE *)v134 && v134)
    WTF::fastFree((unint64_t)v134, v103, v104, v105, v106, v107, v108, v109);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v104, v105, v106, v107, v108, v109);
  if ((char)v23 > 15)
    v124 = -1;
  else
    v124 = (char)v23;
  v125 = (char *)a1 + 12 * v124;
  v126 = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v125 + 1194) = v126;
  *((_DWORD *)v125 + 1195) = 4;
  v127 = ~v126;
  if (v127 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C16CECLL);
  }
  v128 = *((_QWORD *)a1 + 499) + 24 * (int)v127;
  v129 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v128 = a2;
  *(_DWORD *)(v128 + 8) = v129;
  *(_BYTE *)(v128 + 17) = v23;
  *(_DWORD *)(v128 + 12) = 6;
  *(_BYTE *)(v128 + 16) = 0;
  v130 = v138;
  if (v140 != (_BYTE *)v138 && v138)
  {
    v138 = 0;
    LODWORD(v139) = 0;
    WTF::fastFree((unint64_t)v130, v117, v118, v119, v120, v121, v122, v123);
  }
  if (v141)
  {
    v131 = v142;
    if (v142 != -1)
    {
      if (v142 > 15)
        v131 = -1;
      --*(_DWORD *)(v141 + 12 * v131 + 4784);
    }
  }
  if (v143)
  {
    v132 = v144;
    if (v144 != -1)
    {
      if (v144 > 15)
        v132 = -1;
      --*(_DWORD *)(v143 + 12 * v132 + 4784);
    }
  }
  if (v145)
  {
    v133 = (char)v146;
    if ((char)v146 != -1)
    {
      if ((char)v146 > 15)
        v133 = -1;
      --*(_DWORD *)(v145 + 12 * v133 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _BYTE *v104;
  WTF *v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _BYTE *v110;
  WTF *v111;
  WTF *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  char *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  WTF *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  WTF *v144;
  unsigned int v145;
  _BYTE v146[24];
  uint64_t v147;
  WTF *v148;
  uint64_t v149;
  _BYTE v150[24];
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  unsigned __int8 v156;
  WTF *v157;
  uint64_t v158;
  _BYTE v159[29];
  char v160;
  __int16 v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v151, a1, v17, v18, v19, v20, v21, v22);
  v23 = v156;
  v24 = v154;
  v25 = v152;
  v148 = (WTF *)v150;
  v149 = 2;
  v32 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), *(_QWORD *)(a2 + 72), v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C172D0);
  }
  v36 = (uint64_t *)v32;
  v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40656);
  if (v37 && *(_DWORD *)(v37 + 60) <= 0x2Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C17320);
  }
  v157 = 0;
  v158 = v37;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v23, (uint64_t)&v157, v24, v25, (uint64_t)&v148, 1, v33, v34);
  v43 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
  if (v43)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C17340);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v43, (uint64_t)a1 + 264, v38, v39, v40, v41, v42);
    v44 = 16;
  }
  else
  {
    v44 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, v23, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v23 | 0x800000000, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v50, v51, v52, v53, v54),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1000000000, v55, v56, v57, v58, v59),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v60, v61, v62, v63, v64),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1800000000, v65, v66, v67, v68, v69),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v70, v71, v72, v73, v74),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2000000000, v75, v76, v77, v78, v79),
        !*((_BYTE *)a1 + 212)))
  {
    __break(0xC471u);
    goto LABEL_71;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v80, v81, v82, v83, v84);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2800000000, v85, v86, v87, v88, v89);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v90, v91, v92, v93, v94, (uint64_t)&v157);
  v102 = *((_DWORD *)a1 + 50);
  if (v102 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v95, v96, v97, v98, v99, v100, v101);
    v102 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v102) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v157, (uint64_t)a1, v96, v97, v98, v99, v100, v101);
  v103 = HIDWORD(v149);
  v144 = (WTF *)v146;
  v145 = HIDWORD(v149);
  if (HIDWORD(v149) < 3)
  {
    v104 = v146;
  }
  else
  {
    if (HIDWORD(v149) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C17350);
    }
    v104 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v149)));
    v144 = (WTF *)v104;
    v103 = HIDWORD(v149);
  }
  if (v103)
  {
    v105 = v148;
    v106 = (WTF *)((char *)v148 + 12 * v103);
    do
    {
      *(_DWORD *)v104 = *(_DWORD *)v105;
      *(_QWORD *)(v104 + 4) = *(_QWORD *)((char *)v105 + 4);
      v105 = (WTF *)((char *)v105 + 12);
      v104 += 12;
    }
    while (v105 != v106);
  }
  v107 = *v36;
  if ((*v36 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C17300);
  }
  v108 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  v109 = v145;
  v157 = (WTF *)v159;
  LODWORD(v158) = 2;
  HIDWORD(v158) = v145;
  if (v145 >= 3)
  {
    if (v145 < 0x15555556)
    {
      v110 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v145));
      LODWORD(v158) = 12 * v145 / 0xC;
      v157 = (WTF *)v110;
      v109 = v145;
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_71:
    JUMPOUT(0x197C172B0);
  }
  v110 = v159;
LABEL_23:
  if (v109)
  {
    v111 = v144;
    v112 = (WTF *)((char *)v144 + 12 * v109);
    do
    {
      *(_DWORD *)v110 = *(_DWORD *)v111;
      *(_QWORD *)(v110 + 4) = *(_QWORD *)((char *)v111 + 4);
      v111 = (WTF *)((char *)v111 + 12);
      v110 += 12;
    }
    while (v111 != v112);
  }
  v164 = v107;
  v165 = v108;
  v162 = a3;
  v163 = a1;
  v161 = 0;
  v160 = v23;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v147, (uint64_t *)&v157, &v163, &v162, (unsigned __int8 *)&v161 + 1, (char *)&v161, &v160, &v165, &v164);
  v120 = v157;
  if (v159 != (_BYTE *)v157 && v157)
  {
    v157 = 0;
    LODWORD(v158) = 0;
    WTF::fastFree((unint64_t)v120, v113, v114, v115, v116, v117, v118, v119);
  }
  v121 = (_QWORD *)((char *)a1 + 5656);
  v122 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v122 == *((_DWORD *)a1 + 1416))
  {
    v124 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v147);
    v122 = *((unsigned int *)a1 + 1417);
    v123 = (_QWORD *)(*((_QWORD *)a1 + 707) + 8 * v122);
  }
  else
  {
    v123 = (_QWORD *)(*v121 + 8 * v122);
    v124 = &v147;
  }
  v125 = *v124;
  *v124 = 0;
  *v123 = v125;
  *((_DWORD *)a1 + 1417) = v122 + 1;
  v126 = v147;
  v147 = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (v146 != (_BYTE *)v144 && v144)
    WTF::fastFree((unint64_t)v144, v113, v114, v115, v116, v117, v118, v119);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v114, v115, v116, v117, v118, v119);
  if ((char)v23 > 15)
    v134 = -1;
  else
    v134 = (char)v23;
  v135 = (char *)a1 + 12 * v134;
  v136 = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v135 + 1194) = v136;
  *((_DWORD *)v135 + 1195) = 4;
  v137 = ~v136;
  if (v137 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C17348);
  }
  v138 = *((_QWORD *)a1 + 499) + 24 * (int)v137;
  v139 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v138 = a2;
  *(_DWORD *)(v138 + 8) = v139;
  *(_BYTE *)(v138 + 17) = v23;
  *(_DWORD *)(v138 + 12) = 6;
  *(_BYTE *)(v138 + 16) = 0;
  v140 = v148;
  if (v150 != (_BYTE *)v148 && v148)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree((unint64_t)v140, v127, v128, v129, v130, v131, v132, v133);
  }
  if (v151)
  {
    v141 = v152;
    if (v152 != -1)
    {
      if (v152 > 15)
        v141 = -1;
      --*(_DWORD *)(v151 + 12 * v141 + 4784);
    }
  }
  if (v153)
  {
    v142 = v154;
    if (v154 != -1)
    {
      if (v154 > 15)
        v142 = -1;
      --*(_DWORD *)(v153 + 12 * v142 + 4784);
    }
  }
  if (v155)
  {
    v143 = (char)v156;
    if ((char)v156 != -1)
    {
      if ((char)v156 > 15)
        v143 = -1;
      --*(_DWORD *)(v155 + 12 * v143 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _BYTE *v104;
  WTF *v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _BYTE *v110;
  WTF *v111;
  WTF *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  char *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  WTF *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  WTF *v144;
  unsigned int v145;
  _BYTE v146[24];
  uint64_t v147;
  WTF *v148;
  uint64_t v149;
  _BYTE v150[24];
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  unsigned __int8 v156;
  WTF *v157;
  uint64_t v158;
  _BYTE v159[29];
  char v160;
  __int16 v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v151, a1, v17, v18, v19, v20, v21, v22);
  v23 = v156;
  v24 = v154;
  v25 = v152;
  v148 = (WTF *)v150;
  v149 = 2;
  v32 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), *(_QWORD *)(a2 + 72), v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1792CLL);
  }
  v36 = (uint64_t *)v32;
  v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40736);
  if (v37 && *(_DWORD *)(v37 + 60) <= 0x2Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1797CLL);
  }
  v157 = 0;
  v158 = v37;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v23, (uint64_t)&v157, v24, v25, (uint64_t)&v148, 1, v33, v34);
  v43 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
  if (v43)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C1799CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v43, (uint64_t)a1 + 264, v38, v39, v40, v41, v42);
    v44 = 16;
  }
  else
  {
    v44 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, v23, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v23 | 0x800000000, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v50, v51, v52, v53, v54),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1000000000, v55, v56, v57, v58, v59),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v60, v61, v62, v63, v64),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1800000000, v65, v66, v67, v68, v69),
        !*((_BYTE *)a1 + 212))
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 2, (uint64_t)a1 + 264, v70, v71, v72, v73, v74),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2000000000, v75, v76, v77, v78, v79),
        !*((_BYTE *)a1 + 212)))
  {
    __break(0xC471u);
    goto LABEL_71;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v80, v81, v82, v83, v84);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x2800000000, v85, v86, v87, v88, v89);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v90, v91, v92, v93, v94, (uint64_t)&v157);
  v102 = *((_DWORD *)a1 + 50);
  if (v102 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v95, v96, v97, v98, v99, v100, v101);
    v102 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v102) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v157, (uint64_t)a1, v96, v97, v98, v99, v100, v101);
  v103 = HIDWORD(v149);
  v144 = (WTF *)v146;
  v145 = HIDWORD(v149);
  if (HIDWORD(v149) < 3)
  {
    v104 = v146;
  }
  else
  {
    if (HIDWORD(v149) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C179ACLL);
    }
    v104 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v149)));
    v144 = (WTF *)v104;
    v103 = HIDWORD(v149);
  }
  if (v103)
  {
    v105 = v148;
    v106 = (WTF *)((char *)v148 + 12 * v103);
    do
    {
      *(_DWORD *)v104 = *(_DWORD *)v105;
      *(_QWORD *)(v104 + 4) = *(_QWORD *)((char *)v105 + 4);
      v105 = (WTF *)((char *)v105 + 12);
      v104 += 12;
    }
    while (v105 != v106);
  }
  v107 = *v36;
  if ((*v36 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1795CLL);
  }
  v108 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  v109 = v145;
  v157 = (WTF *)v159;
  LODWORD(v158) = 2;
  HIDWORD(v158) = v145;
  if (v145 >= 3)
  {
    if (v145 < 0x15555556)
    {
      v110 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v145));
      LODWORD(v158) = 12 * v145 / 0xC;
      v157 = (WTF *)v110;
      v109 = v145;
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_71:
    JUMPOUT(0x197C1790CLL);
  }
  v110 = v159;
LABEL_23:
  if (v109)
  {
    v111 = v144;
    v112 = (WTF *)((char *)v144 + 12 * v109);
    do
    {
      *(_DWORD *)v110 = *(_DWORD *)v111;
      *(_QWORD *)(v110 + 4) = *(_QWORD *)((char *)v111 + 4);
      v111 = (WTF *)((char *)v111 + 12);
      v110 += 12;
    }
    while (v111 != v112);
  }
  v164 = v107;
  v165 = v108;
  v162 = a3;
  v163 = a1;
  v161 = 0;
  v160 = v23;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v147, (uint64_t *)&v157, &v163, &v162, (unsigned __int8 *)&v161 + 1, (char *)&v161, &v160, &v165, &v164);
  v120 = v157;
  if (v159 != (_BYTE *)v157 && v157)
  {
    v157 = 0;
    LODWORD(v158) = 0;
    WTF::fastFree((unint64_t)v120, v113, v114, v115, v116, v117, v118, v119);
  }
  v121 = (_QWORD *)((char *)a1 + 5656);
  v122 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v122 == *((_DWORD *)a1 + 1416))
  {
    v124 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v147);
    v122 = *((unsigned int *)a1 + 1417);
    v123 = (_QWORD *)(*((_QWORD *)a1 + 707) + 8 * v122);
  }
  else
  {
    v123 = (_QWORD *)(*v121 + 8 * v122);
    v124 = &v147;
  }
  v125 = *v124;
  *v124 = 0;
  *v123 = v125;
  *((_DWORD *)a1 + 1417) = v122 + 1;
  v126 = v147;
  v147 = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (v146 != (_BYTE *)v144 && v144)
    WTF::fastFree((unint64_t)v144, v113, v114, v115, v116, v117, v118, v119);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v114, v115, v116, v117, v118, v119);
  if ((char)v23 > 15)
    v134 = -1;
  else
    v134 = (char)v23;
  v135 = (char *)a1 + 12 * v134;
  v136 = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v135 + 1194) = v136;
  *((_DWORD *)v135 + 1195) = 4;
  v137 = ~v136;
  if (v137 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C179A4);
  }
  v138 = *((_QWORD *)a1 + 499) + 24 * (int)v137;
  v139 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v138 = a2;
  *(_DWORD *)(v138 + 8) = v139;
  *(_BYTE *)(v138 + 17) = v23;
  *(_DWORD *)(v138 + 12) = 6;
  *(_BYTE *)(v138 + 16) = 0;
  v140 = v148;
  if (v150 != (_BYTE *)v148 && v148)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree((unint64_t)v140, v127, v128, v129, v130, v131, v132, v133);
  }
  if (v151)
  {
    v141 = v152;
    if (v152 != -1)
    {
      if (v152 > 15)
        v141 = -1;
      --*(_DWORD *)(v151 + 12 * v141 + 4784);
    }
  }
  if (v153)
  {
    v142 = v154;
    if (v154 != -1)
    {
      if (v154 > 15)
        v142 = -1;
      --*(_DWORD *)(v153 + 12 * v142 + 4784);
    }
  }
  if (v155)
  {
    v143 = (char)v156;
    if ((char)v156 != -1)
    {
      if ((char)v156 > 15)
        v143 = -1;
      --*(_DWORD *)(v155 + 12 * v143 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  int8x8_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  WTF *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  _BYTE v78[24];
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unsigned __int8 v84;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v83, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v81, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v79, a1, v17, v18, v19, v20, v21, v22);
  v23 = v84;
  v24 = v82;
  v25 = v80;
  v76 = (WTF *)v78;
  v77 = 2;
  v32 = (unint64_t *)JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), a2[9], v26, v27, v28, v29, v30, v31);
  if ((*v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v35 = (uint64_t *)v32;
  JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSInternalPromise,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*((_QWORD *)a1 + 44) + 16), (char)v23, *v32, v24, v25, (uint64_t)&v76, v33, v34);
  JSC::AssemblyHelpers::storeTrustedValue((uint64_t)a1, 0xFFFE000000000000, v23 | 0x1000000000, v36, v37, v38, v39, v40);
  JSC::AssemblyHelpers::storeTrustedValue((uint64_t)a1, 10, v23 | 0x1800000000, v41, v42, v43, v44, v45);
  JSC::AssemblyHelpers::mutatorFence(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v46, v47, v48, v49, v50, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v72, (uint64_t *)&v76);
  if ((*v35 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197C17C1CLL);
  }
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v75, (uint64_t *)&v72, a1, a3, v23, *(_QWORD *)(*((_QWORD *)a1 + 44) + 16), *v35);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)a1, (unint64_t)&v75);
  v59 = v75;
  v75 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = v72;
  if (&v74 != (uint64_t *)v72 && v72)
  {
    v72 = 0;
    v73 = 0;
    WTF::fastFree((unint64_t)v60, v52, v53, v54, v55, v56, v57, v58);
  }
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)a1, (char)v23, (JSC::DFG::Node *)a2, 0, v55, v56, v57, v58);
  v68 = v76;
  if (v78 != (_BYTE *)v76 && v76)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    WTF::fastFree((unint64_t)v68, v61, v62, v63, v64, v65, v66, v67);
  }
  if (v79)
  {
    v69 = v80;
    if (v80 != -1)
    {
      if (v80 > 15)
        v69 = -1;
      --*(_DWORD *)(v79 + 12 * v69 + 4784);
    }
  }
  if (v81)
  {
    v70 = v82;
    if (v82 != -1)
    {
      if (v82 > 15)
        v70 = -1;
      --*(_DWORD *)(v81 + 12 * v70 + 4784);
    }
  }
  if (v83)
  {
    v71 = (char)v84;
    if ((char)v84 != -1)
    {
      if ((char)v84 > 15)
        v71 = -1;
      --*(_DWORD *)(v83 + 12 * v71 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _BYTE *v84;
  WTF *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _BYTE *v90;
  WTF *v91;
  WTF *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  char *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  WTF *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  WTF *v124;
  unsigned int v125;
  _BYTE v126[24];
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  _BYTE v130[24];
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unsigned __int8 v136;
  WTF *v137;
  uint64_t v138;
  _BYTE v139[29];
  char v140;
  __int16 v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  uint64_t v145;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v135, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v133, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v131, a1, v17, v18, v19, v20, v21, v22);
  v23 = v136;
  v24 = v134;
  v25 = v132;
  v128 = (WTF *)v130;
  v129 = 2;
  v32 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)a1 + 495), *(_QWORD *)(a2 + 72), v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C181B4);
  }
  v36 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  if (*(_DWORD *)(v36 + 39028) <= 0x1Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C181D4);
  }
  v37 = (uint64_t *)v32;
  v137 = 0;
  v138 = v36 + 38968;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v23, (uint64_t)&v137, v24, v25, (uint64_t)&v128, 1, v33, v34);
  v43 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
  if (v43)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C18224);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v43, (uint64_t)a1 + 264, v38, v39, v40, v41, v42);
    v44 = 16;
  }
  else
  {
    v44 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, v23, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v23 | 0x800000000, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212)
    || (JSC::MacroAssemblerARM64::moveToCachedReg(a1, 0xFFFE000000000000, (uint64_t)a1 + 264, v50, v51, v52, v53, v54),
        JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1000000000, v55, v56, v57, v58, v59),
        !*((_BYTE *)a1 + 212)))
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(a1, 10, (uint64_t)a1 + 264, v60, v61, v62, v63, v64);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 16, v23 | 0x1800000000, v65, v66, v67, v68, v69);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v70, v71, v72, v73, v74, (uint64_t)&v137);
  v82 = *((_DWORD *)a1 + 50);
  if (v82 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v75, v76, v77, v78, v79, v80, v81);
    v82 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v82) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v137, (uint64_t)a1, v76, v77, v78, v79, v80, v81);
  v83 = HIDWORD(v129);
  v124 = (WTF *)v126;
  v125 = HIDWORD(v129);
  if (HIDWORD(v129) < 3)
  {
    v84 = v126;
  }
  else
  {
    if (HIDWORD(v129) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C18234);
    }
    v84 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v129)));
    v124 = (WTF *)v84;
    v83 = HIDWORD(v129);
  }
  if (v83)
  {
    v85 = v128;
    v86 = (WTF *)((char *)v128 + 12 * v83);
    do
    {
      *(_DWORD *)v84 = *(_DWORD *)v85;
      *(_QWORD *)(v84 + 4) = *(_QWORD *)((char *)v85 + 4);
      v85 = (WTF *)((char *)v85 + 12);
      v84 += 12;
    }
    while (v85 != v86);
  }
  v87 = *v37;
  if ((*v37 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C18204);
  }
  v88 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  v89 = v125;
  v137 = (WTF *)v139;
  LODWORD(v138) = 2;
  HIDWORD(v138) = v125;
  if (v125 >= 3)
  {
    if (v125 < 0x15555556)
    {
      v90 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v125));
      LODWORD(v138) = 12 * v125 / 0xC;
      v137 = (WTF *)v90;
      v89 = v125;
      goto LABEL_20;
    }
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x197C18194);
  }
  v90 = v139;
LABEL_20:
  if (v89)
  {
    v91 = v124;
    v92 = (WTF *)((char *)v124 + 12 * v89);
    do
    {
      *(_DWORD *)v90 = *(_DWORD *)v91;
      *(_QWORD *)(v90 + 4) = *(_QWORD *)((char *)v91 + 4);
      v91 = (WTF *)((char *)v91 + 12);
      v90 += 12;
    }
    while (v91 != v92);
  }
  v144 = v87;
  v145 = v88;
  v142 = a3;
  v143 = a1;
  v141 = 0;
  v140 = v23;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v127, (uint64_t *)&v137, &v143, &v142, (unsigned __int8 *)&v141 + 1, (char *)&v141, &v140, &v145, &v144);
  v100 = v137;
  if (v139 != (_BYTE *)v137 && v137)
  {
    v137 = 0;
    LODWORD(v138) = 0;
    WTF::fastFree((unint64_t)v100, v93, v94, v95, v96, v97, v98, v99);
  }
  v101 = (_QWORD *)((char *)a1 + 5656);
  v102 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v102 == *((_DWORD *)a1 + 1416))
  {
    v104 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v127);
    v102 = *((unsigned int *)a1 + 1417);
    v103 = (_QWORD *)(*((_QWORD *)a1 + 707) + 8 * v102);
  }
  else
  {
    v103 = (_QWORD *)(*v101 + 8 * v102);
    v104 = &v127;
  }
  v105 = *v104;
  *v104 = 0;
  *v103 = v105;
  *((_DWORD *)a1 + 1417) = v102 + 1;
  v106 = v127;
  v127 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  if (v126 != (_BYTE *)v124 && v124)
    WTF::fastFree((unint64_t)v124, v93, v94, v95, v96, v97, v98, v99);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v94, v95, v96, v97, v98, v99);
  if ((char)v23 > 15)
    v114 = -1;
  else
    v114 = (char)v23;
  v115 = (char *)a1 + 12 * v114;
  v116 = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v115 + 1194) = v116;
  *((_DWORD *)v115 + 1195) = 4;
  v117 = ~v116;
  if (v117 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1822CLL);
  }
  v118 = *((_QWORD *)a1 + 499) + 24 * (int)v117;
  v119 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v118 = a2;
  *(_DWORD *)(v118 + 8) = v119;
  *(_BYTE *)(v118 + 17) = v23;
  *(_DWORD *)(v118 + 12) = 6;
  *(_BYTE *)(v118 + 16) = 0;
  v120 = v128;
  if (v130 != (_BYTE *)v128 && v128)
  {
    v128 = 0;
    LODWORD(v129) = 0;
    WTF::fastFree((unint64_t)v120, v107, v108, v109, v110, v111, v112, v113);
  }
  if (v131)
  {
    v121 = v132;
    if (v132 != -1)
    {
      if (v132 > 15)
        v121 = -1;
      --*(_DWORD *)(v131 + 12 * v121 + 4784);
    }
  }
  if (v133)
  {
    v122 = v134;
    if (v134 != -1)
    {
      if (v134 > 15)
        v122 = -1;
      --*(_DWORD *)(v133 + 12 * v122 + 4784);
    }
  }
  if (v135)
  {
    v123 = (char)v136;
    if ((char)v136 != -1)
    {
      if ((char)v136 > 15)
        v123 = -1;
      --*(_DWORD *)(v135 + 12 * v123 + 4784);
    }
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileToPrimitive(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::DFG::Node *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t result;
  char *v69;
  int v70;
  char v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  JSC::AssemblerBuffer *v77;
  JSC::AssemblerBuffer *v78;
  JSC::DFG::Node *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83[3];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3D75, "void JSC::DFG::SpeculativeJIT::compileToPrimitive(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197C18760);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_43;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C18768);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_43:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C18770);
  }
  if (*((_DWORD *)this[499] + 6 * (int)v13 + 2) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v14 = -1;
    else
      v14 = v12;
    ++*((_DWORD *)this + 3 * v14 + 1196);
    v15 = v12;
  }
  else
  {
    v15 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v12, 1, v16, v17, v18, v19, v20, (uint64_t)v83);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x500000000, *((char *)this + 304), v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, 17, 23, v26, v27, v28, v29, (uint64_t)&v81);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v83, (uint64_t)this, v30, v31, v32, v33, v34, v35);
  if (v12 != v15)
  {
    if (v12 == 63)
    {
      if (v15 != 31)
      {
        v45 = v15 & 0x1F | 0xD2800000;
        goto LABEL_23;
      }
    }
    else if (v15 != 31 && v12 != 31)
    {
      v43 = v15 & 0x1F | ((v12 & 0x1F) << 16);
      v44 = -1442839584;
LABEL_22:
      v45 = v43 | v44;
LABEL_23:
      v47 = (unsigned int *)(this + 25);
      v46 = *((_DWORD *)this + 50);
      if (v46 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v36, (uint64_t)v37, v38, v39, v40, v41, v42);
        v46 = *v47;
      }
      *(_DWORD *)((char *)this[7] + v46) = v45;
      *v47 += 4;
      goto LABEL_26;
    }
    v43 = v15 | (32 * v12);
    v44 = -1862270976;
    goto LABEL_22;
  }
LABEL_26:
  v48 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v49 = v81;
  v50 = v82;
  v79 = a2;
  v51 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v37, v38, v39, v40, v41, v42);
  v53 = v52;
  v54 = WTF::fastMalloc((WTF *)0xA0);
  v55 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v54, (JSC::DFG::SpeculativeJIT *)this);
  *(_QWORD *)v55 = off_1E35746F0;
  *(_DWORD *)(v55 + 48) = v49;
  *(_QWORD *)(v55 + 52) = v50;
  v63 = *((_DWORD *)this + 50);
  *(_DWORD *)(v55 + 60) = v63;
  if (v63 < *((_DWORD *)this + 13))
  {
    v77 = (JSC::AssemblerBuffer *)(this + 7);
    do
    {
      if ((v63 + 4) > *((_DWORD *)this + 48))
      {
        v78 = v77;
        JSC::AssemblerBuffer::outOfLineGrow(v77, v56, v57, v58, v59, v60, v61, v62);
        v77 = v78;
        v63 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v63) = -721215457;
      v63 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v63;
      *(_DWORD *)(v54 + 60) = v63;
    }
    while (v63 < *((_DWORD *)this + 13));
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v54 = off_1E35741C0;
  *(_QWORD *)(v54 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v54 + 72) = 0;
  *(_BYTE *)(v54 + 74) = v15;
  *(_QWORD *)(v54 + 80) = v54 + 96;
  *(_QWORD *)(v54 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v54 + 80, v15, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v61, v62);
  *(_QWORD *)v54 = &off_1E3574190;
  *(_QWORD *)(v54 + 128) = operationToPrimitive;
  *(_QWORD *)(v54 + 136) = v51;
  *(_QWORD *)(v54 + 144) = v53;
  *(_BYTE *)(v54 + 152) = v12;
  v80 = v54;
  v64 = this + 707;
  v65 = *((unsigned int *)this + 1417);
  if ((_DWORD)v65 == *((_DWORD *)this + 1416))
  {
    v67 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v80);
    v65 = *((unsigned int *)this + 1417);
    v66 = (uint64_t *)((char *)this[707] + 8 * v65);
    v54 = *v67;
  }
  else
  {
    v66 = (uint64_t *)(*v64 + 8 * v65);
    v67 = &v80;
  }
  *v67 = 0;
  *v66 = v54;
  *((_DWORD *)this + 1417) = v65 + 1;
  result = v80;
  v80 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v69 = (char *)(this + 597);
  v70 = *((_DWORD *)v79 + 12);
  if (v15 > 15)
    v71 = -1;
  else
    v71 = v15;
  v72 = &v69[12 * v71];
  *(_DWORD *)v72 = v70;
  *((_DWORD *)v72 + 1) = 4;
  v73 = ~v70;
  if (v73 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_59:
    JUMPOUT(0x197C186BCLL);
  }
  v74 = (uint64_t)this[499] + 24 * (int)v73;
  v75 = *((_DWORD *)v79 + 13);
  *(_QWORD *)v74 = v79;
  *(_DWORD *)(v74 + 8) = v75;
  *(_BYTE *)(v74 + 17) = v15;
  *(_DWORD *)(v74 + 12) = 16;
  *(_BYTE *)(v74 + 16) = 0;
  if (v15 != -1)
    --*(_DWORD *)&v69[12 * v71 + 8];
  if (v48)
  {
    if (v12 > 15)
      v76 = -1;
    else
      v76 = v12;
    --*(_DWORD *)&v69[12 * v76 + 8];
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileToPropertyKey(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::DFG::Node *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  unsigned int v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD v93[3];
  unsigned int v94[3];
  _DWORD v95[3];
  WTF *v96;
  uint64_t v97;
  _BYTE v98[24];
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t *v101;
  uint64_t v102;
  unsigned __int8 v103;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3D8B, "void JSC::DFG::SpeculativeJIT::compileToPropertyKey(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v101, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    JSC::DFG::JSValueRegsTemporary::JSValueRegsTemporary((uint64_t)&v99, (JSC::DFG::SpeculativeJIT *)this, (uint64_t)&v101, v11, v12, v13, v14, v15);
    v22 = v103;
    if (v103 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v101, v102, v16, v17, v18, v19, v20, v21);
      v103 = v22;
    }
    v23 = v100;
    JSC::DFG::SpeculativeJIT::use(v101, (JSC::DFG::Node *)(v102 & 0xFF00FFFFFFFFFFFFLL), v16, v17, v18, v19, v20, v21);
    v96 = (WTF *)v98;
    v97 = 2;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v22, 1, v24, v25, v26, v27, v28, (uint64_t)v95);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v96, v95, v29, v30, v31, v32, v33, v34);
    JSC::AssemblyHelpers::branchIfSymbol((uint64_t)this, v22, v35, v36, v37, v38, v39, (uint64_t)v94);
    JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v22, v40, v41, v42, v43, v44, (uint64_t)v93);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v96, v93, v45, v46, v47, v48, v49, v50);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v94, (uint64_t)this, v51, v52, v53, v54, v55, v56);
    JSC::AssemblyHelpers::moveValueRegs(this, v22, v23, v57, v58, v59, v60, v61);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v89, (uint64_t *)&v96);
    v68 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v62, v63, v64, v65, v66, v67);
    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v92, (uint64_t *)&v89, this, (uint64_t)operationToPropertyKey, v23, v68, v69, v22);
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v92);
    v77 = v92;
    v92 = 0;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
    v78 = v89;
    if (&v91 != (uint64_t *)v89 && v89)
    {
      v89 = 0;
      v90 = 0;
      WTF::fastFree((unint64_t)v78, v70, v71, v72, v73, v74, v75, v76);
    }
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v23, (uint64_t)a2, 22, 1, v74, v75, v76);
    v86 = v96;
    if (v98 != (_BYTE *)v96 && v96)
    {
      v96 = 0;
      LODWORD(v97) = 0;
      WTF::fastFree((unint64_t)v86, v79, v80, v81, v82, v83, v84, v85);
    }
    if (v99)
    {
      v87 = (char)v100;
      if ((char)v100 != -1)
      {
        if ((char)v100 > 15)
          v87 = -1;
        --*(_DWORD *)(v99 + 12 * v87 + 4784);
      }
    }
    if ((v102 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v88 = (char)v103;
      if ((char)v103 > 15)
        v88 = -1;
      --*((_DWORD *)v101 + 3 * v88 + 1196);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileToPropertyKeyOrNumber(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t *v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::DFG::Node *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  int *v77;
  int *v78;
  int v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  _BYTE *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  _BYTE *v97;
  WTF *v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  char v116;
  int v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  WTF *v122;
  WTF *v123;
  unsigned int v124;
  char v125;
  WTF *v126;
  unsigned int v127;
  _BYTE v128[24];
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  _BYTE v140[24];
  WTF *v141;
  uint64_t v142;
  _BYTE v143[24];
  uint64_t v144;
  char v145;
  _BYTE *v146;
  unsigned int v147;
  unsigned int v148;
  _BYTE v149[30];
  __int16 v150;
  unsigned __int8 *(*v151)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::DFG::Graph **v152;
  char v153;
  __int128 v154;
  char v155[9];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3DA3, "void JSC::DFG::SpeculativeJIT::compileToPropertyKeyOrNumber(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197C192ACLL);
  }
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C192B4);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_6:
    v13 = -1;
  v14 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C192BCLL);
  }
  if (*((_DWORD *)this[499] + 6 * (int)v14 + 2) == 1)
  {
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v13 > 15)
      v15 = -1;
    else
      v15 = v13;
    ++*((_DWORD *)this + 3 * v15 + 1196);
    v16 = v13;
  }
  else
  {
    v16 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v144, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v17, v18, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), v17, v18, v19, v20, v21, v22);
  v141 = (WTF *)v143;
  v142 = 2;
  v138 = (WTF *)v140;
  v139 = 2;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v13, 27, v23, v24, v25, v26, (uint64_t)&v136);
  v32 = v136;
  if (v136 != -1)
  {
    v33 = HIDWORD(v142);
    if (HIDWORD(v142) == (_DWORD)v142)
    {
      v34 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v141, (void *)(HIDWORD(v142) + 1), (unint64_t)&v136, v27, v28, v29, v30, v31);
      v36 = *v34;
      v35 = (uint64_t *)(v34 + 1);
      v32 = v36;
      v33 = HIDWORD(v142);
    }
    else
    {
      v35 = &v137;
    }
    v37 = (char *)v141 + 12 * v33;
    *(_DWORD *)v37 = v32;
    *(_QWORD *)(v37 + 4) = *v35;
    ++HIDWORD(v142);
  }
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, v27, v28, v29, v30, v31, (uint64_t)&v134);
  v43 = v134;
  if (v134 != -1)
  {
    v44 = HIDWORD(v139);
    if (HIDWORD(v139) == (_DWORD)v139)
    {
      v45 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v134, v38, v39, v40, v41, v42);
      v47 = *v45;
      v46 = v45 + 1;
      v43 = v47;
      v44 = HIDWORD(v139);
    }
    else
    {
      v46 = &v135;
    }
    v48 = (char *)v138 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)v46;
    ++HIDWORD(v139);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_112;
  }
  *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 4, v49, v50, v51, v52, (uint64_t)&v132);
  v58 = v132;
  if (v132 != -1)
  {
    v59 = HIDWORD(v142);
    if (HIDWORD(v142) == (_DWORD)v142)
    {
      v60 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v141, (void *)(HIDWORD(v142) + 1), (unint64_t)&v132, v53, v54, v55, v56, v57);
      v62 = *v60;
      v61 = (uint64_t *)(v60 + 1);
      v58 = v62;
      v59 = HIDWORD(v142);
    }
    else
    {
      v61 = &v133;
    }
    v63 = (char *)v141 + 12 * v59;
    *(_DWORD *)v63 = v58;
    *(_QWORD *)(v63 + 4) = *v61;
    ++HIDWORD(v142);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1925CLL);
  }
  *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v64, v65, v66, v67, (uint64_t)&v130);
  v75 = v130;
  if (v130 != -1)
  {
    v76 = HIDWORD(v139);
    if (HIDWORD(v139) == (_DWORD)v139)
    {
      v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v130, v70, v71, v72, v73, v74);
      v79 = *v77;
      v78 = v77 + 1;
      v75 = v79;
      v76 = HIDWORD(v139);
    }
    else
    {
      v78 = &v131;
    }
    v80 = (char *)v138 + 12 * v76;
    *(_DWORD *)v80 = v75;
    *(_QWORD *)(v80 + 4) = *(_QWORD *)v78;
    ++HIDWORD(v139);
  }
  if (HIDWORD(v142))
  {
    v81 = 0;
    v82 = 0;
    v83 = 12 * HIDWORD(v142);
    do
    {
      if (v82 >= HIDWORD(v142))
      {
        __break(0xC471u);
        JUMPOUT(0x197C19274);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v141 + v81), (uint64_t)this, (uint64_t)v69, v70, v71, v72, v73, v74);
      ++v82;
      v81 += 12;
    }
    while (v83 != v81);
  }
  if (v13 != v16)
  {
    if (v13 == 63)
    {
      if (v16 != 31)
      {
        v86 = v16 & 0x1F | 0xD2800000;
LABEL_53:
        v88 = (unsigned int *)(this + 25);
        v87 = *((_DWORD *)this + 50);
        if (v87 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v68, (uint64_t)v69, v70, v71, v72, v73, v74);
          v87 = *v88;
        }
        *(_DWORD *)((char *)this[7] + v87) = v86;
        *v88 += 4;
        goto LABEL_56;
      }
    }
    else if (v16 != 31 && v13 != 31)
    {
      v84 = v16 & 0x1F | ((v13 & 0x1F) << 16);
      v85 = -1442839584;
LABEL_52:
      v86 = v84 | v85;
      goto LABEL_53;
    }
    v84 = v16 | (32 * v13);
    v85 = -1862270976;
    goto LABEL_52;
  }
LABEL_56:
  v89 = HIDWORD(v139);
  v126 = (WTF *)v128;
  v127 = HIDWORD(v139);
  if (HIDWORD(v139) < 3)
  {
    v90 = v128;
  }
  else
  {
    if (HIDWORD(v139) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C192CCLL);
    }
    v90 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v139)));
    v126 = (WTF *)v90;
    v89 = HIDWORD(v139);
  }
  if (v89)
  {
    v91 = v138;
    v92 = (WTF *)((char *)v138 + 12 * v89);
    do
    {
      *(_DWORD *)v90 = *(_DWORD *)v91;
      *(_QWORD *)(v90 + 4) = *(_QWORD *)((char *)v91 + 4);
      v91 = (WTF *)((char *)v91 + 12);
      v90 += 12;
    }
    while (v91 != v92);
  }
  v93 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v69, v70, v71, v72, v73, v74);
  v95 = v94;
  v96 = v127;
  v146 = v149;
  v147 = 2;
  v148 = v127;
  if (v127 < 3)
  {
    v97 = v149;
    if (!v127)
      goto LABEL_69;
    goto LABEL_67;
  }
  if (v127 >= 0x15555556)
  {
    __break(0xC471u);
LABEL_112:
    JUMPOUT(0x197C1923CLL);
  }
  v97 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v127));
  v147 = 12 * v127 / 0xC;
  v146 = v97;
  v96 = v127;
LABEL_67:
  v98 = v126;
  v99 = (WTF *)((char *)v126 + 12 * v96);
  do
  {
    *(_DWORD *)v97 = *(_DWORD *)v98;
    *(_QWORD *)(v97 + 4) = *(_QWORD *)((char *)v98 + 4);
    v98 = (WTF *)((char *)v98 + 12);
    v97 += 12;
  }
  while (v98 != v99);
LABEL_69:
  v155[0] = v16;
  *(_QWORD *)&v154 = v93;
  *((_QWORD *)&v154 + 1) = v95;
  v153 = v13;
  v151 = operationToPropertyKeyOrNumber;
  v152 = this;
  v150 = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(&v129, (uint64_t *)&v146, (_DWORD **)&v152, (uint64_t *)&v151, (unsigned __int8 *)&v150 + 1, (char *)&v150, v155, &v154, &v153);
  v107 = (unint64_t)v146;
  if (v149 != v146 && v146)
  {
    v146 = 0;
    v147 = 0;
    WTF::fastFree(v107, v100, v101, v102, v103, v104, v105, v106);
  }
  v108 = this + 707;
  v109 = *((unsigned int *)this + 1417);
  if ((_DWORD)v109 == *((_DWORD *)this + 1416))
  {
    v111 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v109 + 1, (unint64_t)&v129);
    v109 = *((unsigned int *)this + 1417);
    v110 = (uint64_t *)((char *)this[707] + 8 * v109);
  }
  else
  {
    v110 = (uint64_t *)(*v108 + 8 * v109);
    v111 = &v129;
  }
  v112 = *v111;
  *v111 = 0;
  *v110 = v112;
  *((_DWORD *)this + 1417) = v109 + 1;
  v113 = v129;
  v129 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  if (v128 != (_BYTE *)v126 && v126)
    WTF::fastFree((unint64_t)v126, v100, v101, v102, v103, v104, v105, v106);
  v114 = (char *)(this + 597);
  v115 = *((_DWORD *)a2 + 12);
  if (v16 > 15)
    v116 = -1;
  else
    v116 = v16;
  v117 = v116;
  v118 = &v114[12 * v116];
  *(_DWORD *)v118 = v115;
  *((_DWORD *)v118 + 1) = 4;
  v119 = ~v115;
  if (v119 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C192C4);
  }
  v120 = (uint64_t)this[499] + 24 * (int)v119;
  v121 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v120 = a2;
  *(_DWORD *)(v120 + 8) = v121;
  *(_BYTE *)(v120 + 17) = v16;
  *(_DWORD *)(v120 + 12) = 16;
  *(_BYTE *)(v120 + 16) = 0;
  v122 = v138;
  if (v140 != (_BYTE *)v138 && v138)
  {
    v138 = 0;
    LODWORD(v139) = 0;
    WTF::fastFree((unint64_t)v122, v100, v101, v102, v103, v104, v105, v106);
  }
  v123 = v141;
  if (v143 != (_BYTE *)v141 && v141)
  {
    v141 = 0;
    LODWORD(v142) = 0;
    WTF::fastFree((unint64_t)v123, v100, v101, v102, v103, v104, v105, v106);
  }
  if (v144)
  {
    v124 = v145;
    if (v145 != -1)
    {
      if (v145 > 15)
        v124 = -1;
      --*(_DWORD *)(v144 + 12 * v124 + 4784);
    }
  }
  if (v16 != -1)
    --*(_DWORD *)&v114[12 * v117 + 8];
  if (v11)
  {
    if (v13 > 15)
      v125 = -1;
    else
      v125 = v13;
    --*(_DWORD *)&v114[12 * v125 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::compileToNumeric(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  JSC::DFG::Node *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  WTF *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD v117[3];
  unsigned int v118[2];
  char v119;
  __int16 v120;
  char v121;
  _DWORD v122[3];
  unsigned int v123[3];
  WTF *v124;
  uint64_t v125;
  _BYTE v126[24];
  uint64_t v127;
  char v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned int v134;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3DC0, "void JSC::DFG::SpeculativeJIT::compileToNumeric(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v131, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v129, (JSC::DFG::SpeculativeJIT *)this, v11, v12, v13, v14, v15, v16);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v127, (JSC::DFG::SpeculativeJIT *)this, v17, v18, v19, v20, v21, v22);
    v29 = v133;
    if (v133 == 255)
    {
      v29 = JSC::DFG::SpeculativeJIT::fillJSValue(v131, v132, v23, v24, v25, v26, v27, v28);
      v133 = v29;
    }
    v30 = v130;
    v124 = (WTF *)v126;
    v125 = 2;
    v31 = v29;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v29, 1, v24, v25, v26, v27, v28, (uint64_t)v123);
    v32 = (char)v29;
    JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v32, v33, v34, v35, v36, v37, (uint64_t)v122);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v124, v122, v38, v39, v40, v41, v42, v43);
    JSC::ARM64Assembler::label((_DWORD *)this + 8, v44, v45, v46, v47, v48, v49, v50, (int *)&v134);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v51, v52, v53, v54, v55, v56);
    if (*((_BYTE *)this + 328))
      v63 = 69;
    else
      v63 = 65;
    v118[0] = v134;
    v118[1] = 0;
    v119 = v63;
    v120 = 15;
    v121 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v123, (uint64_t)this, v57, v58, v59, v60, v61, v62);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v32, 27, v64, v65, v66, v67, (uint64_t)v117);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v124, v117, v68, v69, v70, v71, v72, v73);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v118, (uint64_t)this, v74, v75, v76, v77, v78, v79);
    JSC::AssemblyHelpers::moveValueRegs(this, v31, v30, v80, v81, v82, v83, v84);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v113, (uint64_t *)&v124);
    v91 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v85, v86, v87, v88, v89, v90);
    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v116, (uint64_t *)&v113, this, (uint64_t)operationToNumeric, v30, v91, v92, v31);
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v116);
    v100 = v116;
    v116 = 0;
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    v101 = v113;
    if (&v115 != (uint64_t *)v113 && v113)
    {
      v113 = 0;
      v114 = 0;
      WTF::fastFree((unint64_t)v101, v93, v94, v95, v96, v97, v98, v99);
    }
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v30, (uint64_t)a2, 16, 0, v97, v98, v99);
    v109 = v124;
    if (v126 != (_BYTE *)v124 && v124)
    {
      v124 = 0;
      LODWORD(v125) = 0;
      WTF::fastFree((unint64_t)v109, v102, v103, v104, v105, v106, v107, v108);
    }
    if (v127)
    {
      v110 = v128;
      if (v128 != -1)
      {
        if (v128 > 15)
          v110 = -1;
        --*(_DWORD *)(v127 + 12 * v110 + 4784);
      }
    }
    if (v129)
    {
      v111 = (char)v130;
      if ((char)v130 != -1)
      {
        if ((char)v130 > 15)
          v111 = -1;
        --*(_DWORD *)(v129 + 12 * v111 + 4784);
      }
    }
    if ((v132 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v112 = (char)v133;
      if ((char)v133 > 15)
        v112 = -1;
      --*(_DWORD *)(v131 + 12 * v112 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileCallNumberConstructor(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t *v38;
  int v39;
  char *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  _BYTE *v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  WTF *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  WTF *v82;
  unsigned int v83;
  _BYTE v84[24];
  uint64_t v85;
  int v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[24];
  uint64_t v91;
  char v92;
  uint64_t v93;
  unsigned __int8 v94;
  WTF *v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE v98[30];
  __int16 v99;
  unint64_t (*v100)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  JSC::DFG::Graph **v101;
  char v102;
  __int128 v103;
  char v104[9];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3DEC, "void JSC::DFG::SpeculativeJIT::compileCallNumberConstructor(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    goto LABEL_73;
  }
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C19B40);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_6:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v93, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v91, (JSC::DFG::SpeculativeJIT *)this, v14, v15, v16, v17, v18, v19);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
  v26 = (char)v94;
  v27 = v94;
  v88 = (WTF *)v90;
  v89 = 2;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v13, 27, v22, v23, v24, v25, (uint64_t)&v86);
  v35 = v86;
  if (v86 != -1)
  {
    v36 = HIDWORD(v89);
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v37 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v86, v30, v31, v32, v33, v34);
      v39 = *v37;
      v38 = (uint64_t *)(v37 + 1);
      v35 = v39;
      v36 = HIDWORD(v89);
    }
    else
    {
      v38 = &v87;
    }
    v40 = (char *)v88 + 12 * v36;
    *(_DWORD *)v40 = v35;
    *(_QWORD *)(v40 + 4) = *v38;
    ++HIDWORD(v89);
  }
  if (v27 != v13)
  {
    if (v13 == 63)
    {
      if (v27 != 31)
      {
        v43 = v27 & 0x1F | 0xD2800000;
LABEL_23:
        v45 = (unsigned int *)(this + 25);
        v44 = *((_DWORD *)this + 50);
        if (v44 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v28, (uint64_t)v29, v30, v31, v32, v33, v34);
          v44 = *v45;
        }
        *(_DWORD *)((char *)this[7] + v44) = v43;
        *v45 += 4;
        goto LABEL_26;
      }
    }
    else if (v13 != 31 && v27 != 31)
    {
      v41 = v27 & 0xFFE0FFFF | ((v13 & 0x1F) << 16);
      v42 = -1442839584;
LABEL_22:
      v43 = v41 | v42;
      goto LABEL_23;
    }
    v41 = v26 | (32 * v13);
    v42 = -1862270976;
    goto LABEL_22;
  }
LABEL_26:
  v46 = HIDWORD(v89);
  v82 = (WTF *)v84;
  v83 = HIDWORD(v89);
  if (HIDWORD(v89) < 3)
  {
    v47 = v84;
  }
  else
  {
    if (HIDWORD(v89) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C19B48);
    }
    v47 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v89)));
    v82 = (WTF *)v47;
    v46 = HIDWORD(v89);
  }
  if (v46)
  {
    v48 = v88;
    v49 = (WTF *)((char *)v88 + 12 * v46);
    do
    {
      *(_DWORD *)v47 = *(_DWORD *)v48;
      *(_QWORD *)(v47 + 4) = *(_QWORD *)((char *)v48 + 4);
      v48 = (WTF *)((char *)v48 + 12);
      v47 += 12;
    }
    while (v48 != v49);
  }
  v50 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v29, v30, v31, v32, v33, v34);
  v52 = v51;
  v53 = v83;
  v95 = (WTF *)v98;
  v96 = 2;
  v97 = v83;
  if (v83 < 3)
  {
    v54 = v98;
    if (!v83)
      goto LABEL_39;
    goto LABEL_37;
  }
  if (v83 >= 0x15555556)
  {
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x197C19B38);
  }
  v54 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v83));
  v96 = 12 * v83 / 0xC;
  v95 = (WTF *)v54;
  v53 = v83;
LABEL_37:
  v55 = v82;
  v56 = (WTF *)((char *)v82 + 12 * v53);
  do
  {
    *(_DWORD *)v54 = *(_DWORD *)v55;
    *(_QWORD *)(v54 + 4) = *(_QWORD *)((char *)v55 + 4);
    v55 = (WTF *)((char *)v55 + 12);
    v54 += 12;
  }
  while (v55 != v56);
LABEL_39:
  v104[0] = v27;
  *(_QWORD *)&v103 = v50;
  *((_QWORD *)&v103 + 1) = v52;
  v102 = v13;
  v100 = operationCallNumberConstructor;
  v101 = this;
  v99 = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(&v85, (uint64_t *)&v95, (_DWORD **)&v101, (uint64_t *)&v100, (unsigned __int8 *)&v99 + 1, (char *)&v99, v104, &v103, &v102);
  v64 = v95;
  if (v98 != (_BYTE *)v95 && v95)
  {
    v95 = 0;
    v96 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = this + 707;
  v66 = *((unsigned int *)this + 1417);
  if ((_DWORD)v66 == *((_DWORD *)this + 1416))
  {
    v68 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v85);
    v66 = *((unsigned int *)this + 1417);
    v67 = (uint64_t *)((char *)this[707] + 8 * v66);
  }
  else
  {
    v67 = (uint64_t *)(*v65 + 8 * v66);
    v68 = &v85;
  }
  v69 = *v68;
  *v68 = 0;
  *v67 = v69;
  *((_DWORD *)this + 1417) = v66 + 1;
  v70 = v85;
  v85 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  if (v84 != (_BYTE *)v82 && v82)
    WTF::fastFree((unint64_t)v82, v57, v58, v59, v60, v61, v62, v63);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v27, (uint64_t)a2, 16, 0, v61, v62, v63);
  v78 = v88;
  if (v90 != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v78, v71, v72, v73, v74, v75, v76, v77);
  }
  if (v91)
  {
    v79 = v92;
    if (v92 != -1)
    {
      if (v92 > 15)
        v79 = -1;
      --*(_DWORD *)(v91 + 12 * v79 + 4784);
    }
  }
  if (v93)
  {
    v80 = (char)v94;
    if ((char)v94 != -1)
    {
      if ((char)v94 > 15)
        v80 = -1;
      --*(_DWORD *)(v93 + 12 * v80 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v81 = -1;
    else
      v81 = v13;
    --*((_DWORD *)this + 3 * v81 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileLogShadowChickenPrologue(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  signed __int8 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v53 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v54 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
        ? (v55 = (_DWORD)v54 == -1)
        : (v55 = 1),
          v55))
    {
      v56 = 2;
    }
    else if (v54 >> 28)
    {
      v57 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v57 = v53;
      *(_DWORD *)(v57 + 8) = v54;
      v56 = 1;
      v53 = v57;
    }
    else
    {
      v56 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v53 = v54 << 36;
    }
    v16 = v53 | v56;
  }
  v62 = v16;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v62, v10, v11, v12, v13, v14, v15);
  if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  ++*((_DWORD *)this + 1220);
  v24 = *((unsigned int *)this + 1218);
  if ((_DWORD)v24 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 609) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v24, v18, v19, v20, v21, v22, v23);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v60, this, v18, v19, v20, v21, v22, v23);
  v25 = v61;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v58, this, v26, v27, v28, v29, v30, v31);
  v32 = v59;
  JSC::CCallHelpers::ensureShadowChickenPacket(this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v59, 8, v25, v33, v34, v35);
  v42 = *((_QWORD *)a2 + 3);
  if ((v42 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v43 = ~*(_DWORD *)((v42 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v43 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v43 + 12)
    || (v44 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), v36, v37, v38, v39, v40, v41), (_DWORD)v44 == -1))
  {
LABEL_9:
    v44 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v42, v36, v37, v38, v39, v40, v41);
  }
  JSC::CCallHelpers::logShadowChickenProloguePacket(this, v32, 8, v44, v38, v39, v40, v41);
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v45, v46, v47, v48, v49);
  if ((v42 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v44 > 15)
      v50 = -1;
    else
      v50 = v44;
    --*((_DWORD *)this + 3 * v50 + 1196);
  }
  if (v58)
  {
    v51 = v59;
    if (v59 != -1)
    {
      if (v59 > 15)
        v51 = -1;
      --*(_DWORD *)(v58 + 12 * v51 + 4784);
    }
  }
  if (v60)
  {
    v52 = v61;
    if (v61 != -1)
    {
      if (v61 > 15)
        v52 = -1;
      --*(_DWORD *)(v60 + 12 * v52 + 4784);
    }
  }
  --*((_DWORD *)this + 1220);
}

uint64_t JSC::DFG::SpeculativeJIT::compileLogShadowChickenTail(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  signed __int8 v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v65 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v66 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
        ? (v67 = (_DWORD)v66 == -1)
        : (v67 = 1),
          v67))
    {
      v68 = 2;
    }
    else if (v66 >> 28)
    {
      v69 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v69 = v65;
      *(_DWORD *)(v69 + 8) = v66;
      v68 = 1;
      v65 = v69;
    }
    else
    {
      v68 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v65 = v66 << 36;
    }
    v16 = v65 | v68;
  }
  v74 = v16;
  v24 = JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v74, v10, v11, v12, v13, v14, v15);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  ++*((_DWORD *)this + 1220);
  v25 = *((unsigned int *)this + 1218);
  if ((_DWORD)v25 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 609) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v25, v18, v19, v20, v21, v22, v23);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, v18, v19, v20, v21, v22, v23);
  v26 = v73;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v70, this, v27, v28, v29, v30, v31, v32);
  v33 = v71;
  JSC::CCallHelpers::ensureShadowChickenPacket(this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v71, 8, v26, v34, v35, v36);
  v43 = *((_QWORD *)a2 + 3);
  v44 = v43 & 0xFF00FFFFFFFFFFFFLL;
  if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v45 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v45 >= *((unsigned int *)this + 1001))
    goto LABEL_51;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v45 + 12)
    || (v46 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), v37, v38, v39, v40, v41, v42),
        v46 == -1))
  {
LABEL_9:
    v46 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v37, v38, v39, v40, v41, v42);
  }
  v47 = *((_QWORD *)a2 + 4);
  v48 = v47 & 0xFF00FFFFFFFFFFFFLL;
  if ((v47 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
LABEL_14:
    v51 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v47, v37, v38, v39, v40, v41, v42);
    goto LABEL_15;
  }
  v49 = ~*(_DWORD *)((v47 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v49 >= *((unsigned int *)this + 1001))
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197C1A0E4);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v49 + 12))
    goto LABEL_14;
  v51 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), v37, v38, v39, v40, v41, v42);
  if ((_DWORD)v51 == -1)
    goto LABEL_14;
LABEL_15:
  v52 = v33;
  v53 = *((_DWORD *)this + 50);
  if (v53 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v50, v37, v38, v39, v40, v41, v42);
    v53 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v53) = -129956952;
  v54 = (char *)this + 4776;
  *((_DWORD *)this + 50) += 4;
  JSC::CCallHelpers::logShadowChickenTailPacketImpl<JSC::ARM64Registers::RegisterID>((uint64_t)this, v52, v46, v51, 8, v24, v41, v42);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v55, v56, v57, v58, v59);
  if (v48)
  {
    if ((int)v51 > 15)
      v61 = -1;
    else
      v61 = v51;
    --*(_DWORD *)&v54[12 * v61 + 8];
  }
  if (v44)
  {
    if (v46 > 15)
      v62 = -1;
    else
      v62 = v46;
    --*(_DWORD *)&v54[12 * v62 + 8];
  }
  if (v70)
  {
    v63 = v71;
    if (v71 != -1)
    {
      if (v71 > 15)
        v63 = -1;
      --*(_DWORD *)(v70 + 12 * v63 + 4784);
    }
  }
  if (v72)
  {
    v64 = v73;
    if (v73 != -1)
    {
      if (v73 > 15)
        v64 = -1;
      --*(_DWORD *)(v72 + 12 * v64 + 4784);
    }
  }
  --*((_DWORD *)this + 1220);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileSetAdd(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::ARM64LogicalImmediate *v34;
  JSC::ARM64LogicalImmediate *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint8x8_t v49;
  __int32 v50;
  uint8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  char v61;
  unsigned __int8 v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  unsigned int v90;
  char v91;
  char v92;
  uint64_t v93;
  char *v94;
  JSC::ARM64LogicalImmediate *v95;
  unint64_t v96;
  JSC::ARM64LogicalImmediate *v97;
  JSC::ARM64LogicalImmediate *v98;
  unint64_t v99;
  char v100;
  _BYTE v101[7];
  void *__dst;
  uint64_t v103;
  _WORD v104[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_88;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_102;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_88:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_87;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1A74CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_87:
    v16 = -1;
  v17 = *((_QWORD *)a2 + 5);
  v99 = v17;
  v100 = -1;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
LABEL_102:
    __break(0xC471u);
    JUMPOUT(0x197C1A744);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    v100 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v17, (uint64_t)v101, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v19 = v100;
  if (v100 == 255)
  {
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v99, (uint64_t)v101, a4, a5, a6, a7, a8);
    v100 = v19;
  }
  JSC::DFG::SpeculativeJIT::speculateSetObject((uint64_t)this, *((_QWORD *)a2 + 3), v13, a4, a5, a6, a7, a8);
  v20 = (unsigned __int8 *)v13;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v21, v22, v23, v24, v25, v26, v27);
  v34 = (JSC::ARM64LogicalImmediate *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
  v97 = v35;
  __dst = v104;
  v103 = 3;
  if (v13 == 1)
  {
    v42 = 0;
  }
  else
  {
    v104[0] = v13 | 0x100;
    v42 = 1;
    HIDWORD(v103) = 1;
  }
  v98 = v34;
  if (v16 != 2)
  {
    v104[v42++] = v16 | 0x200;
    HIDWORD(v103) = v42;
  }
  if (v19 != 3)
  {
    v104[v42++] = v19 | 0x300;
    HIDWORD(v103) = v42;
    goto LABEL_24;
  }
  if (v42)
  {
    while (1)
    {
LABEL_24:
      v43 = 0;
      v44 = 0;
      v45 = __dst;
      v46 = v42;
      do
      {
        if ((*((_BYTE *)__dst + v43 + 1) & 0x40) != 0)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        v44 |= 1 << *((_BYTE *)__dst + v43 + 1);
        v43 += 2;
      }
      while (2 * v42 != v43);
      v47 = 0;
      do
      {
        v48 = *((_BYTE *)__dst + v47) & 0x7F;
        if (v48 >= 0x40)
          goto LABEL_89;
        v44 &= ~(1 << v48);
        v47 += 2;
      }
      while (2 * v42 != v47);
      v49 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
      v49.i16[0] = vaddlv_u8(v49);
      v50 = v49.i32[0];
      v51 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v44));
      v51.i16[0] = vaddlv_u8(v51);
      if (!(v51.i32[0] + v50))
      {
        v96 = v11;
        v61 = *(_BYTE *)__dst;
        v62 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v62, v37, v38, v39, v40, v41);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v103) - 2);
        v63 = (HIDWORD(v103) - 1);
        v59 = HIDWORD(v103) == 1;
        HIDWORD(v103) = v63;
        v20 = (unsigned __int8 *)__dst;
        v34 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v63);
        if (v59)
        {
          v68 = 0;
          v69 = 0;
          v64 = 0;
          v35 = v34;
        }
        else
        {
          LOBYTE(v42) = v61;
          LODWORD(v45) = v62;
          v46 = 2 * v63;
          v44 = (unint64_t)__dst;
          while (*(unsigned __int8 *)v44 != (_DWORD)v45)
          {
LABEL_90:
            v44 += 2;
            v46 -= 2;
            if (!v46)
              goto LABEL_57;
          }
          *(_BYTE *)v44 = v42;
LABEL_57:
          v64 = 0;
          v65 = v20;
          v35 = v34;
          v66 = (char *)v34;
          do
          {
            if (*v20 == v20[1])
            {
              v67 = (char *)v20;
              if (v66 != (char *)__dst + 2 * HIDWORD(v103))
              {
                v95 = v34;
                if (v20 == (unsigned __int8 *)v35)
                {
                  v67 = v66;
                }
                else
                {
                  v93 = v65 - (unsigned __int8 *)v35;
                  v94 = v66;
                  memmove(v66, v35, v65 - (unsigned __int8 *)v35);
                  v67 = &v94[v93];
                }
                v34 = v95;
              }
              v35 = (JSC::ARM64LogicalImmediate *)(v20 + 2);
              ++v64;
              v66 = v67;
            }
            v20 += 2;
            v65 += 2;
          }
          while (v20 < (unsigned __int8 *)v34);
          v20 = (unsigned __int8 *)__dst;
          v68 = HIDWORD(v103);
          v69 = HIDWORD(v103);
          v34 = (JSC::ARM64LogicalImmediate *)v66;
        }
        v70 = &v20[2 * v68];
        v11 = v96;
        if (v35 != (JSC::ARM64LogicalImmediate *)v70)
        {
          v34 = (JSC::ARM64LogicalImmediate *)memmove(v34, v35, v70 - (unsigned __int8 *)v35);
          v69 = HIDWORD(v103);
        }
        v42 = v69 - v64;
        goto LABEL_50;
      }
      v20 = 0;
      v52 = v42 <= 1uLL ? 1 : v42;
      v53 = 2 * v52;
      while (1)
      {
        v54 = v20[(_QWORD)__dst + 1];
        if ((v54 & 0x7Fu) >= 0x40)
          goto LABEL_89;
        if (((v44 >> (v54 & 0x7F)) & 1) != 0)
          break;
        v20 += 2;
        if ((unsigned __int8 *)v53 == v20)
          goto LABEL_51;
      }
      v55 = v20[(_QWORD)__dst];
      if (v55 != v54)
        break;
LABEL_49:
      v34 = (JSC::ARM64LogicalImmediate *)memmove(&v20[(_QWORD)v45], &v20[(_QWORD)v45 + 2], 2 * v46 - (_QWORD)v20 - 2);
      v42 = HIDWORD(v103) - 1;
LABEL_50:
      HIDWORD(v103) = v42;
LABEL_51:
      if (!v42)
      {
        v71 = __dst;
        if (v104 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v103) = 0;
          WTF::fastFree((unint64_t)v71, v35, v36, v37, v38, v39, v40, v41);
        }
        goto LABEL_72;
      }
    }
    v56 = (char)v55;
    if ((char)v55 == 63)
    {
      v57 = *((_DWORD *)this + 50);
      v58 = *((_DWORD *)this + 48);
      if ((char)v54 != 31)
      {
        v60 = v54 & 0x1F | 0xD2800000;
        goto LABEL_46;
      }
    }
    else
    {
      v57 = *((_DWORD *)this + 50);
      v58 = *((_DWORD *)this + 48);
      v59 = v54 == 31 || v56 == 31;
      if (!v59)
      {
        v60 = v54 & 0xFFE0FFFF | ((v56 & 0x1F) << 16) | 0xAA0003E0;
LABEL_46:
        if (v57 + 4 > v58)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
          v57 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v57) = v60;
        *((_DWORD *)this + 50) += 4;
        v45 = __dst;
        v46 = HIDWORD(v103);
        goto LABEL_49;
      }
    }
    v60 = (char)v54 | (32 * v56) | 0x91000000;
    goto LABEL_46;
  }
LABEL_72:
  if ((_DWORD)v98 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v97, 0, v37, v38, v39, v40, v41);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v98 << 35) + 0x380000001ALL, 0, v37, v38, v39, v40, v41);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationSetAdd, v72, v73, v74, v75, v76, v77, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v78, v79, v80, v81, v82, v83);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v84, v85, v86, v87, v88);
  v90 = v100;
  if (v100 > 15)
    v90 = -1;
  --*((_DWORD *)this + 3 * v90 + 1196);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v16 > 15)
      v91 = -1;
    else
      v91 = v16;
    --*((_DWORD *)this + 3 * v91 + 1196);
  }
  if (v11)
  {
    if (v13 > 15)
      v92 = -1;
    else
      v92 = v13;
    --*((_DWORD *)this + 3 * v92 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapSet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::DFG::Node *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::ARM64LogicalImmediate *v41;
  JSC::ARM64LogicalImmediate *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint8x8_t v56;
  __int32 v57;
  uint8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  unsigned __int8 *v68;
  int v69;
  char *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  unsigned __int8 *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  unsigned int v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  int v100;
  char *v101;
  int64_t v102;
  int v103;
  unsigned __int8 v104;
  JSC::ARM64LogicalImmediate *v105;
  JSC::ARM64LogicalImmediate *v106;
  JSC::ARM64LogicalImmediate *v107;
  unint64_t v108;
  char v109;
  _BYTE v110[7];
  void *__dst;
  uint64_t v112;
  _WORD v113[4];

  v9 = *((_QWORD *)this + 495);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *(_DWORD *)(v9 + 164);
  if (v11 <= v10)
  {
    __break(0xC471u);
    goto LABEL_129;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * *((_QWORD *)a2 + 3));
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_101;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF18);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * *((_QWORD *)a2 + 3)), a3, a4, a5, a6, a7, a8);
    v9 = *((_QWORD *)this + 495);
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
LABEL_101:
    v16 = -1;
  }
  if (v11 <= (int)v10 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF20);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 1));
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_99;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF28);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
  {
    v19 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
    v9 = *((_QWORD *)this + 495);
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
LABEL_99:
    v19 = -1;
  }
  if (v11 <= (int)v10 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF30);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 2));
  if ((v20 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_100;
  v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF38);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
  {
    v22 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
    v9 = *((_QWORD *)this + 495);
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
LABEL_100:
    v22 = -1;
  }
  v23 = v10 + 3;
  if (v11 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF40);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v23);
  v108 = v24;
  v109 = -1;
  v25 = ~*(_DWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v25 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1AF48);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v25 + 12))
    v109 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v24, (uint64_t)v110, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  if (v19 == -1)
    v19 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
  if (v22 == -1)
    v22 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
  v26 = v109;
  if (v109 == 255)
  {
    v26 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v108, (uint64_t)v110, a4, a5, a6, a7, a8);
    v109 = v26;
  }
  v27 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v27 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
LABEL_129:
    JUMPOUT(0x197C1AF10);
  }
  JSC::DFG::SpeculativeJIT::speculateMapObject((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v27 + 152) + 8 * *((_QWORD *)a2 + 3)), v16, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v28, v29, v30, v31, v32, v33, v34);
  v41 = (JSC::ARM64LogicalImmediate *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v35, v36, v37, v38, v39, v40);
  v106 = v42;
  __dst = v113;
  v112 = 4;
  if (v16 == 1)
  {
    v49 = 0;
  }
  else
  {
    v113[0] = v16 | 0x100;
    v49 = 1;
    HIDWORD(v112) = 1;
  }
  if (v19 != 2)
  {
    v113[v49++] = v19 | 0x200;
    HIDWORD(v112) = v49;
  }
  v107 = v41;
  if (v22 != 3)
  {
    v113[v49++] = v22 | 0x300;
    HIDWORD(v112) = v49;
  }
  if (v26 != 4)
  {
    v113[v49++] = v26 | 0x400;
    HIDWORD(v112) = v49;
    goto LABEL_37;
  }
  if (v49)
  {
    while (1)
    {
LABEL_37:
      v50 = 0;
      v51 = 0;
      v52 = (char *)__dst;
      v53 = v49;
      do
      {
        if ((*((_BYTE *)__dst + v50 + 1) & 0x40) != 0)
        {
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
        v51 |= 1 << *((_BYTE *)__dst + v50 + 1);
        v50 += 2;
      }
      while (2 * v49 != v50);
      v54 = 0;
      do
      {
        v55 = *((_BYTE *)__dst + v54) & 0x7F;
        if (v55 >= 0x40)
          goto LABEL_107;
        v51 &= ~(1 << v55);
        v54 += 2;
      }
      while (2 * v49 != v54);
      v56 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
      v56.i16[0] = vaddlv_u8(v56);
      v57 = v56.i32[0];
      v58 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v51));
      v58.i16[0] = vaddlv_u8(v58);
      if (!(v58.i32[0] + v57))
      {
        v98 = *(_BYTE *)__dst;
        v104 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v104, v44, v45, v46, v47, v48);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v112) - 2);
        v99 = (HIDWORD(v112) - 1);
        v67 = HIDWORD(v112) == 1;
        HIDWORD(v112) = v99;
        v8 = (unsigned __int8 *)__dst;
        v41 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v99);
        if (v67)
        {
          v72 = 0;
          v73 = 0;
          v69 = 0;
          v42 = v41;
        }
        else
        {
          LOBYTE(v49) = v98;
          LODWORD(v52) = v104;
          v53 = 2 * v99;
          v51 = (unint64_t)__dst;
          while (*(unsigned __int8 *)v51 != (_DWORD)v52)
          {
LABEL_108:
            v51 += 2;
            v53 -= 2;
            if (!v53)
              goto LABEL_106;
          }
          *(_BYTE *)v51 = v49;
LABEL_106:
          v69 = 0;
          v71 = v8;
          v42 = v41;
          v70 = (char *)v41;
          do
          {
            if (*v8 == v8[1])
            {
              v68 = v8;
              if (v70 != (char *)__dst + 2 * HIDWORD(v112))
              {
                v103 = v69;
                v105 = v41;
                if (v8 == (unsigned __int8 *)v42)
                {
                  v68 = (unsigned __int8 *)v70;
                }
                else
                {
                  v101 = v70;
                  v102 = v71 - (unsigned __int8 *)v42;
                  memmove(v70, v42, v71 - (unsigned __int8 *)v42);
                  v68 = (unsigned __int8 *)&v101[v102];
                }
                v41 = v105;
                v69 = v103;
              }
              v42 = (JSC::ARM64LogicalImmediate *)(v8 + 2);
              ++v69;
              v70 = (char *)v68;
            }
            v8 += 2;
            v71 += 2;
          }
          while (v8 < (unsigned __int8 *)v41);
          v8 = (unsigned __int8 *)__dst;
          v72 = HIDWORD(v112);
          v73 = HIDWORD(v112);
          v41 = (JSC::ARM64LogicalImmediate *)v70;
        }
        v74 = &v8[2 * v72];
        if (v42 != (JSC::ARM64LogicalImmediate *)v74)
        {
          v100 = v69;
          v41 = (JSC::ARM64LogicalImmediate *)memmove(v41, v42, v74 - (unsigned __int8 *)v42);
          v69 = v100;
          v73 = HIDWORD(v112);
        }
        v49 = v73 - v69;
        goto LABEL_63;
      }
      v59 = 0;
      v60 = v49 <= 1uLL ? 1 : v49;
      v61 = 2 * v60;
      while (1)
      {
        v62 = *((unsigned __int8 *)__dst + v59 + 1);
        if ((v62 & 0x7Fu) >= 0x40)
          goto LABEL_107;
        if (((v51 >> (v62 & 0x7F)) & 1) != 0)
          break;
        v59 += 2;
        if (v61 == v59)
          goto LABEL_64;
      }
      v63 = *((unsigned __int8 *)__dst + v59);
      if (v63 != v62)
        break;
LABEL_62:
      v41 = (JSC::ARM64LogicalImmediate *)memmove(&v52[v59], &v52[v59 + 2], 2 * v53 - v59 - 2);
      v49 = HIDWORD(v112) - 1;
LABEL_63:
      HIDWORD(v112) = v49;
LABEL_64:
      if (!v49)
      {
        v75 = __dst;
        if (v113 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v112) = 0;
          WTF::fastFree((unint64_t)v75, v42, v43, v44, v45, v46, v47, v48);
        }
        goto LABEL_76;
      }
    }
    v64 = (char)v63;
    if ((char)v63 == 63)
    {
      v65 = *((_DWORD *)this + 50);
      v66 = *((_DWORD *)this + 48);
      if ((char)v62 != 31)
      {
        v8 = (unsigned __int8 *)(v62 & 0x1F | 0xD2800000);
        goto LABEL_59;
      }
    }
    else
    {
      v65 = *((_DWORD *)this + 50);
      v66 = *((_DWORD *)this + 48);
      v67 = v62 == 31 || v64 == 31;
      if (!v67)
      {
        v8 = (unsigned __int8 *)(v62 & 0xFFE0FFFF | ((v64 & 0x1F) << 16) | 0xAA0003E0);
LABEL_59:
        if (v65 + 4 > v66)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v42, v43, v44, v45, v46, v47, v48);
          v65 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v65) = (_DWORD)v8;
        *((_DWORD *)this + 50) += 4;
        v52 = (char *)__dst;
        v53 = HIDWORD(v112);
        goto LABEL_62;
      }
    }
    v8 = (unsigned __int8 *)((char)v62 | (32 * v64) | 0x91000000);
    goto LABEL_59;
  }
LABEL_76:
  if ((_DWORD)v107 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v106, 0, v44, v45, v46, v47, v48);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v107 << 35) + 0x380000001ALL, 0, v44, v45, v46, v47, v48);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationMapSet, v76, v77, v78, v79, v80, v81, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v82, v83, v84, v85, v86, v87);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v88, v89, v90, v91, v92);
  v94 = v109;
  if (v109 > 15)
    v94 = -1;
  --*((_DWORD *)this + 3 * v94 + 1196);
  if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v22 > 15)
      v95 = -1;
    else
      v95 = v22;
    --*((_DWORD *)this + 3 * v95 + 1196);
  }
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v19 > 15)
      v96 = -1;
    else
      v96 = v19;
    --*((_DWORD *)this + 3 * v96 + 1196);
  }
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v16 > 15)
      v97 = -1;
    else
      v97 = v16;
    --*((_DWORD *)this + 3 * v97 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileMapOrSetDelete(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::DFG::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::ARM64LogicalImmediate *v37;
  JSC::ARM64LogicalImmediate *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint8x8_t v52;
  __int32 v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  char v64;
  unsigned __int8 v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  JSC::ARM64LogicalImmediate *v69;
  char *v70;
  uint64_t v71;
  int v72;
  JSC::ARM64LogicalImmediate *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  unsigned int v95;
  char v96;
  char v97;
  unint64_t v98;
  JSC::ARM64LogicalImmediate *v99;
  JSC::ARM64LogicalImmediate *v100;
  unint64_t v101;
  JSC::AssemblerBuffer *v102;
  JSC::ARM64LogicalImmediate *v103;
  uint64_t v104;
  JSC::ARM64LogicalImmediate *v105;
  unint64_t v106;
  JSC::DFG::SpeculativeJIT *v107;
  unint64_t v108;
  char v109;
  _BYTE v110[7];
  void *__dst;
  uint64_t v112;
  _WORD v113[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_98;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1B670);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_98:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = 255;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_97;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1B678);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_97:
    v17 = -1;
  v18 = *((_QWORD *)a2 + 5);
  v107 = this;
  v108 = v18;
  v109 = -1;
  v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_114;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
    v109 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v18, (uint64_t)v110, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v106 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v20 = v109;
  if (v109 == 255)
  {
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v107, v108, (uint64_t)v110, a4, a5, a6, a7, a8);
    v109 = v20;
  }
  v21 = *((_QWORD *)a2 + 3);
  v22 = (v21 >> 50) & 0x3F;
  if ((_DWORD)v22 != 30)
  {
    if ((_DWORD)v22 == 31)
    {
      JSC::DFG::SpeculativeJIT::speculateSetObject((uint64_t)this, v21, v13, a4, a5, a6, a7, a8);
      goto LABEL_20;
    }
    __break(0xC471u);
LABEL_114:
    JUMPOUT(0x197C1B5C8);
  }
  JSC::DFG::SpeculativeJIT::speculateMapObject((uint64_t)this, v21, v13, a4, a5, a6, a7, a8);
LABEL_20:
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v23, v24, v25, v26, v27, v28, v29);
  ++*((_DWORD *)this + 1196);
  v36 = *((unsigned int *)this + 1194);
  if ((_DWORD)v36 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v36, (uint64_t)v30, v31, v32, v33, v34, v35);
  }
  v104 = *((_QWORD *)a2 + 3);
  v37 = (JSC::ARM64LogicalImmediate *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v30, v31, v32, v33, v34, v35);
  v103 = v38;
  __dst = v113;
  v112 = 3;
  if (v13 == 1)
  {
    v45 = 0;
  }
  else
  {
    v113[0] = v13 | 0x100;
    v45 = 1;
    HIDWORD(v112) = 1;
  }
  v105 = v37;
  if (v17 != 2)
  {
    v113[v45++] = v17 | 0x200;
    HIDWORD(v112) = v45;
  }
  if (v20 == 3)
  {
    if (!v45)
      goto LABEL_77;
  }
  else
  {
    v113[v45++] = v20 | 0x300;
    HIDWORD(v112) = v45;
  }
  v102 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  do
  {
    v46 = 0;
    v47 = 0;
    v48 = (char *)__dst;
    v49 = v45;
    do
    {
      if ((*((_BYTE *)__dst + v46 + 1) & 0x40) != 0)
      {
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      v47 |= 1 << *((_BYTE *)__dst + v46 + 1);
      v46 += 2;
    }
    while (2 * v45 != v46);
    v50 = 0;
    do
    {
      v51 = *((_BYTE *)__dst + v50) & 0x7F;
      if (v51 >= 0x40)
        goto LABEL_99;
      v47 &= ~(1 << v51);
      v50 += 2;
    }
    while (2 * v45 != v50);
    v52 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
    v52.i16[0] = vaddlv_u8(v52);
    v53 = v52.i32[0];
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v47));
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.i32[0] + v53)
    {
      v15 = 0;
      if (v45 <= 1uLL)
        v55 = 1;
      else
        v55 = v45;
      v56 = 2 * v55;
      while (1)
      {
        v57 = *((unsigned __int8 *)__dst + v15 + 1);
        if ((v57 & 0x7Fu) >= 0x40)
          goto LABEL_99;
        if (((v47 >> (v57 & 0x7F)) & 1) != 0)
          break;
        v15 += 2;
        if (v56 == v15)
          goto LABEL_56;
      }
      v58 = *((unsigned __int8 *)__dst + v15);
      if (v58 == v57)
        goto LABEL_54;
      v59 = (char)v58;
      if ((char)v58 == 63)
      {
        v60 = *((_DWORD *)this + 50);
        v61 = *((_DWORD *)this + 48);
        if ((char)v57 != 31)
        {
          v63 = v57 & 0x1F | 0xD2800000;
          goto LABEL_51;
        }
      }
      else
      {
        v60 = *((_DWORD *)this + 50);
        v61 = *((_DWORD *)this + 48);
        v62 = v57 == 31 || v59 == 31;
        if (!v62)
        {
          v63 = v57 & 0xFFE0FFFF | ((v59 & 0x1F) << 16) | 0xAA0003E0;
LABEL_51:
          if (v60 + 4 > v61)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v102, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
            v60 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v60) = v63;
          *((_DWORD *)this + 50) += 4;
          v48 = (char *)__dst;
          v49 = HIDWORD(v112);
LABEL_54:
          v37 = (JSC::ARM64LogicalImmediate *)memmove(&v48[v15], &v48[v15 + 2], 2 * v49 - v15 - 2);
          v45 = HIDWORD(v112) - 1;
          goto LABEL_55;
        }
      }
      v63 = (char)v57 | (32 * v59) | 0x91000000;
      goto LABEL_51;
    }
    v101 = v11;
    v64 = *(_BYTE *)__dst;
    v65 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v65, v40, v41, v42, v43, v44);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v112) - 2);
    v66 = (HIDWORD(v112) - 1);
    v62 = HIDWORD(v112) == 1;
    HIDWORD(v112) = v66;
    v15 = (unint64_t)__dst;
    v37 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v66);
    if (v62)
    {
      v71 = 0;
      v72 = 0;
      v67 = 0;
      v38 = v37;
    }
    else
    {
      LOBYTE(v45) = v64;
      LODWORD(v48) = v65;
      v49 = 2 * v66;
      v47 = (unint64_t)__dst;
      while (*(unsigned __int8 *)v47 != (_DWORD)v48)
      {
LABEL_100:
        v47 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_62;
      }
      *(_BYTE *)v47 = v45;
LABEL_62:
      v67 = 0;
      v68 = v15;
      v38 = v37;
      v69 = v37;
      do
      {
        if (*(unsigned __int8 *)v15 == *(unsigned __int8 *)(v15 + 1))
        {
          v70 = (char *)v15;
          if (v69 != (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * HIDWORD(v112)))
          {
            v100 = v37;
            if ((JSC::ARM64LogicalImmediate *)v15 == v38)
            {
              v70 = (char *)v69;
            }
            else
            {
              v98 = v68 - (_QWORD)v38;
              v99 = v69;
              memmove(v69, v38, v68 - (_QWORD)v38);
              v70 = (char *)v99 + v98;
            }
            v37 = v100;
          }
          v38 = (JSC::ARM64LogicalImmediate *)(v15 + 2);
          ++v67;
          v69 = (JSC::ARM64LogicalImmediate *)v70;
        }
        v15 += 2;
        v68 += 2;
      }
      while (v15 < (unint64_t)v37);
      v15 = (unint64_t)__dst;
      v71 = HIDWORD(v112);
      v72 = HIDWORD(v112);
      v37 = v69;
    }
    v73 = (JSC::ARM64LogicalImmediate *)(v15 + 2 * v71);
    v11 = v101;
    if (v38 != v73)
    {
      v37 = (JSC::ARM64LogicalImmediate *)memmove(v37, v38, v73 - v38);
      v72 = HIDWORD(v112);
    }
    v45 = v72 - v67;
LABEL_55:
    HIDWORD(v112) = v45;
LABEL_56:
    ;
  }
  while (v45);
  v74 = __dst;
  if (v113 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v74, v38, v39, v40, v41, v42, v43, v44);
  }
LABEL_77:
  v75 = v104 & 0xFC000000000000;
  if ((_DWORD)v105 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v103, 0, v40, v41, v42, v43, v44);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v105 << 35) + 0x380000001ALL, 0, v40, v41, v42, v43, v44);
  v82 = v106;
  v83 = (char *)this + 4776;
  if (v75 == 0x78000000000000)
    v84 = operationMapDelete;
  else
    v84 = operationSetDelete;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v84, v76, v77, v78, v79, v80, v81, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v85, v86, v87, v88, v89, v90);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 21, 0, v91, v92, v93);
  --*((_DWORD *)this + 1196);
  v95 = v109;
  if (v109 > 15)
    v95 = -1;
  --*((_DWORD *)v107 + 3 * v95 + 1196);
  if (v82)
  {
    if (v17 > 15)
      v96 = -1;
    else
      v96 = v17;
    --*(_DWORD *)&v83[12 * v96 + 8];
  }
  if (v11)
  {
    if (v13 > 15)
      v97 = -1;
    else
      v97 = v13;
    --*(_DWORD *)&v83[12 * v97 + 8];
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileWeakMapGet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x8_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t result;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  JSC::DFG::SpeculativeJIT *v145;
  JSC::AssemblerBuffer *v146;
  unint64_t v147;
  char v148;
  int v149;
  unsigned int v150[2];
  char v151;
  __int16 v152;
  char v153;
  unsigned int v154[3];
  unsigned int v155[3];
  JSC::DFG::SpeculativeJIT *v156;
  unint64_t v157;
  char v158;
  _BYTE v159[7];
  uint64_t v160;
  char v161;
  uint64_t v162;
  unsigned __int8 v163;
  uint64_t v164;
  char v165;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v164, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v162, this, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v160, this, v16, v17, v18, v19, v20, v21);
  v27 = v165;
  v28 = v163;
  v29 = v161;
  v30 = *((_QWORD *)a2 + 5);
  v156 = this;
  v157 = v30;
  v158 = -1;
  v31 = ~*(_DWORD *)((v30 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v31 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_122;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v31 + 12))
  {
    v32 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v30, (uint64_t)v159, v22, v23, v24, v25, v26);
    v158 = v32;
    v30 = v157;
    if (v32 != -1)
    {
      v34 = v32;
      goto LABEL_5;
    }
    v145 = v156;
  }
  else
  {
    v145 = this;
  }
  v34 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v145, v30, (uint64_t)v159, v22, v23, v24, v25, v26);
  v158 = v34;
  v30 = v157;
LABEL_5:
  v35 = ~*(_DWORD *)((v30 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v35 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1BEE0);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v35 + 8) == 1)
  {
    v36 = v34;
    if (v34 == -1)
    {
      v36 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v156, v30, (uint64_t)v159, v22, v23, v24, v25, v26);
      v158 = v36;
    }
    if (v36 > 15)
      v37 = -1;
    else
      v37 = v36;
    ++*((_DWORD *)this + 3 * v37 + 1196);
  }
  else
  {
    v36 = JSC::DFG::SpeculativeJIT::allocate(this, v30, v33, v22, v23, v24, v25, v26);
  }
  if (v34 != v36)
  {
    if (v34 == 63)
    {
      if (v36 != 31)
      {
        v40 = v36 & 0x1F | 0xD2800000;
        goto LABEL_19;
      }
    }
    else if (v34 != 31 && v36 != 31)
    {
      v38 = v36 & 0x1F | ((v34 & 0x1F) << 16);
      v39 = -1442839584;
LABEL_18:
      v40 = v38 | v39;
LABEL_19:
      v42 = (unsigned int *)((char *)this + 200);
      v41 = *((_DWORD *)this + 50);
      if (v41 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v30, v33, v22, v23, v24, v25, v26);
        v41 = *v42;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v41) = v40;
      *v42 += 4;
      goto LABEL_22;
    }
    v38 = v36 | (32 * v34);
    v39 = -1862270976;
    goto LABEL_18;
  }
LABEL_22:
  v43 = v158;
  if (v158 > 15)
    v43 = -1;
  --*((_DWORD *)v156 + 3 * v43 + 1196);
  v44 = *((_QWORD *)a2 + 3);
  if ((v44 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v45 = ~*(_DWORD *)((v44 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v45 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1BEE8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v45 + 12)
    || (v46 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), v33, v22, v23, v24, v25, v26), (_DWORD)v46 == -1))
  {
LABEL_28:
    v46 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v44, v33, v22, v23, v24, v25, v26);
  }
  v47 = *((_QWORD *)a2 + 3);
  if ((v47 & 0xFC000000000000) == 0x88000000000000)
    JSC::DFG::SpeculativeJIT::speculateWeakMapObject((uint64_t)this, v47, v46, v22, v23, v24, v25, v26);
  else
    JSC::DFG::SpeculativeJIT::speculateCellType((uint64_t)this, v47, v46, 0x1000000uLL, 72, v24, v25, v26);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x1800000000, v27, v48, v49, v50, v51, v52);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v46 | 0x1000000000, (char)v28, v53, v54, v55, v56, v57);
  if ((v44 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v46 > 15)
      v64 = -1;
    else
      v64 = v46;
    --*((_DWORD *)this + 3 * v64 + 1196);
  }
  v65 = *((_QWORD *)a2 + 4);
  if ((v65 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_40;
  v66 = ~*(_DWORD *)((v65 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v66 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_122:
    JUMPOUT(0x197C1BED8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v66 + 12)
    || (v67 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), v58, v59, v60, v61, v62, v63), (_DWORD)v67 == -1))
  {
LABEL_40:
    v67 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v65, v58, v59, v60, v61, v62, v63);
  }
  v68 = *((_QWORD *)a2 + 4);
  v69 = (v68 >> 50) & 0x3F;
  v147 = v65 & 0xFF00FFFFFFFFFFFFLL;
  if ((_DWORD)v69 == 11)
  {
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, v68, v67, v59, v60, v61, v62, v63);
  }
  else if ((_DWORD)v69 == 25)
  {
    JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, v68, v67, v59, v60, v61, v62, v63);
  }
  v148 = v29;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v156, this, v58, v59, v60, v61, v62, v63);
  v77 = (char)v157;
  v146 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v78 = *((_DWORD *)this + 50);
  if (v78 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v146, v70, v71, v72, v73, v74, v75, v76);
    v78 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v78) = v27 | (32 * v27) | 0x51000400;
  v79 = v77;
  v80 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v80; v80 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v80)
  {
    if ((v80 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v146, v70, v71, v72, v73, v74, v75, v76);
      v80 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v80) = -721215457;
    v80 = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v81 = v80;
  if ((v80 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v146, v70, v71, v72, v73, v74, v75, v76);
    v81 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v81) = ((v27 & 0x1F) << 16) | (32 * (v36 & 0x1F)) | v36 & 0x1F | 0xA000000;
  *((_DWORD *)this + 50) += 4;
  v82 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v36, (char)v77);
  if (v82 == 0x8C000000000000)
    v87 = 3;
  else
    v87 = 4;
  JSC::MacroAssemblerARM64::lshift64(this, (char)v77, v87, (char)v77, v83, v84, v85, v86);
  if (v28 == 31)
  {
    v96 = v77 | ((v77 & 0x1F) << 16);
    v97 = -1960811552;
    goto LABEL_54;
  }
  v95 = (v28 & 0x1F) << 16;
  if (v77 != 31)
  {
    v96 = v95 | (32 * (v77 & 0x1F));
    v97 = v77 & 0x1F | 0x8B000000;
LABEL_54:
    v98 = v96 | v97;
    goto LABEL_55;
  }
  v98 = v95 | 0x8B2063FF;
LABEL_55:
  v99 = *((_DWORD *)this + 50);
  if (v99 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v146, v88, v89, v90, v91, v92, v93, v94);
    v99 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v99) = v98;
  *((_DWORD *)this + 50) += 4;
  v100 = v148;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v77, v100, v90, v91, v92, v93, v94);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v100, v67, v101, v102, v103, v104, (uint64_t)v155);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v100, 0xFFFFFFFFLL, v105, v106, v107, v108, (uint64_t)v154, v109);
  v117 = *((_DWORD *)this + 50);
  if (v117 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v146, v110, v111, v112, v113, v114, v115, v116);
    v117 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v117) = v36 | (32 * v36) | 0x11000400;
  v118 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v118; v118 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v118)
  {
    if ((v118 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v146, v110, v111, v112, v113, v114, v115, v116);
      v118 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v118) = -721215457;
    v118 = *((_DWORD *)this + 50) + 4;
  }
  v119 = v118;
  if ((v118 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v146, v110, v111, v112, v113, v114, v115, v116);
    v119 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v119) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v120 = 69;
  else
    v120 = 65;
  v150[0] = v118;
  v150[1] = 0;
  v151 = v120;
  v152 = 15;
  v153 = -1;
  v149 = v80;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v150, (unsigned int *)&v149, (uint64_t)this, v112, v113, v114, v115, v116);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v154, (uint64_t)this, v121, v122, v123, v124, v125, v126);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v155, (uint64_t)this, v127, v128, v129, v130, v131, v132);
  if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000)
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v79 | 0x800000000, v100, v133, v134, v135, v136, v137);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v100, (uint64_t)a2, 16, 0, v135, v136, v137);
  if (v156)
  {
    v139 = (char)v157;
    if ((char)v157 != -1)
    {
      if ((char)v157 > 15)
        v139 = -1;
      --*((_DWORD *)v156 + 3 * v139 + 1196);
    }
  }
  if (v147)
  {
    if ((int)v67 > 15)
      v140 = -1;
    else
      v140 = v67;
    --*((_DWORD *)this + 3 * v140 + 1196);
  }
  if (v36 != -1)
  {
    if (v36 > 15)
      v141 = -1;
    else
      v141 = v36;
    --*((_DWORD *)this + 3 * v141 + 1196);
  }
  if (v160)
  {
    v142 = v161;
    if (v161 != -1)
    {
      if (v161 > 15)
        v142 = -1;
      --*(_DWORD *)(v160 + 12 * v142 + 4784);
    }
  }
  if (v162)
  {
    v143 = (char)v163;
    if ((char)v163 != -1)
    {
      if ((char)v163 > 15)
        v143 = -1;
      --*(_DWORD *)(v162 + 12 * v143 + 4784);
    }
  }
  if (v164)
  {
    v144 = v165;
    if (v165 != -1)
    {
      if (v165 > 15)
        v144 = -1;
      --*(_DWORD *)(v164 + 12 * v144 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileWeakSetAdd(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ARM64LogicalImmediate *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint8x8_t v49;
  __int32 v50;
  uint8x8_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int v61;
  char v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;
  JSC::ARM64LogicalImmediate *v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  unsigned __int8 *v70;
  char *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  unsigned int v95;
  char v96;
  char v97;
  int64_t v98;
  char *v99;
  JSC::ARM64LogicalImmediate *v100;
  unint64_t v101;
  JSC::ARM64LogicalImmediate *v102;
  unint64_t v103;
  void *v104;
  unint64_t v105;
  char v106;
  _BYTE v107[7];
  void *__dst;
  uint64_t v109;
  _WORD v110[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_99;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_105;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_99:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_100;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1C57CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_100:
    v16 = -1;
  v17 = *((_QWORD *)a2 + 5);
  v105 = v17;
  v106 = -1;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x197C1C574);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    v106 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v17, (uint64_t)v107, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v19 = v106;
  if (v106 == 255)
  {
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v105, (uint64_t)v107, a4, a5, a6, a7, a8);
    v106 = v19;
  }
  v103 = v14 & 0xFF00FFFFFFFFFFFFLL;
  JSC::DFG::SpeculativeJIT::speculateCellType((uint64_t)this, *((_QWORD *)a2 + 3), v13, 0x1000000uLL, 72, a6, a7, a8);
  v26 = *((_QWORD *)a2 + 4);
  v27 = v16;
  if ((v26 & 0xFC000000000000) == 0x2C000000000000)
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, v26, v16, v21, v22, v23, v24, v25);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v26, v20, v21, v22, v23, v24, v25);
  v34 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
  v102 = v35;
  __dst = v110;
  v109 = 3;
  if (v13 == 1)
  {
    v42 = 0;
  }
  else
  {
    v110[0] = v13 | 0x100;
    v42 = 1;
    HIDWORD(v109) = 1;
  }
  v104 = (void *)v34;
  if (v16 != 2)
  {
    v110[v42++] = v16 | 0x200;
    HIDWORD(v109) = v42;
  }
  if (v19 == 3)
  {
    if (!v42)
      goto LABEL_84;
  }
  else
  {
    v110[v42++] = v19 | 0x300;
    HIDWORD(v109) = v42;
  }
  v27 = 1;
  do
  {
    v43 = 0;
    v44 = 0;
    v45 = __dst;
    v46 = v42;
    do
    {
      if ((*((_BYTE *)__dst + v43 + 1) & 0x40) != 0)
      {
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      v44 |= 1 << *((_BYTE *)__dst + v43 + 1);
      v43 += 2;
    }
    while (2 * v42 != v43);
    v47 = 0;
    do
    {
      v48 = *((_BYTE *)__dst + v47) & 0x7F;
      if (v48 >= 0x40)
        goto LABEL_101;
      v44 &= ~(1 << v48);
      v47 += 2;
    }
    while (2 * v42 != v47);
    v49 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
    v49.i16[0] = vaddlv_u8(v49);
    v50 = v49.i32[0];
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v44));
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.i32[0] + v50)
    {
      v52 = 0;
      if (v42 <= 1)
        v53 = 1;
      else
        v53 = v42;
      v54 = 2 * v53;
      while (1)
      {
        v55 = *((unsigned __int8 *)__dst + v52 + 1);
        if ((v55 & 0x7Fu) >= 0x40)
          goto LABEL_101;
        if (((v44 >> (v55 & 0x7F)) & 1) != 0)
          break;
        v52 += 2;
        if (v54 == v52)
          goto LABEL_77;
      }
      v56 = *((unsigned __int8 *)__dst + v52);
      if (v56 != v55)
      {
        v57 = (char)v56;
        if ((char)v56 == 63)
        {
          v58 = *((_DWORD *)this + 50);
          v59 = *((_DWORD *)this + 48);
          if ((char)v55 == 31)
            goto LABEL_71;
          v61 = v55 & 0x1F | 0xD2800000;
        }
        else
        {
          v58 = *((_DWORD *)this + 50);
          v59 = *((_DWORD *)this + 48);
          v60 = v55 == 31 || v57 == 31;
          if (!v60)
          {
            v61 = v55 & 0xFFE0FFFF | ((v57 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_72;
          }
LABEL_71:
          v61 = (char)v55 | (32 * v57) | 0x91000000;
        }
LABEL_72:
        if (v58 + 4 > v59)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
          v58 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v58) = v61;
        *((_DWORD *)this + 50) += 4;
        v45 = __dst;
        v46 = HIDWORD(v109);
      }
      memmove((char *)v45 + v52, (char *)v45 + v52 + 2, 2 * v46 - v52 - 2);
      v42 = HIDWORD(v109) - 1;
      goto LABEL_76;
    }
    v101 = v11;
    v62 = *(_BYTE *)__dst;
    v63 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v63, v37, v38, v39, v40, v41);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v109) - 2);
    v64 = (HIDWORD(v109) - 1);
    v60 = HIDWORD(v109) == 1;
    HIDWORD(v109) = v64;
    v65 = (unsigned __int8 *)__dst;
    v66 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v64);
    if (v60)
    {
      v73 = 0;
      v74 = 0;
      v69 = 0;
      v35 = v66;
    }
    else
    {
      v67 = 2 * v64;
      v68 = __dst;
      while (*v68 != v63)
      {
        v68 += 2;
        v67 -= 2;
        if (!v67)
          goto LABEL_56;
      }
      *v68 = v62;
LABEL_56:
      v69 = 0;
      v70 = v65;
      v35 = v66;
      v71 = (char *)v66;
      do
      {
        if (*v65 == v65[1])
        {
          v72 = v65;
          if (v71 != (char *)__dst + 2 * HIDWORD(v109))
          {
            v100 = v66;
            if (v65 == (unsigned __int8 *)v35)
            {
              v72 = (unsigned __int8 *)v71;
            }
            else
            {
              v98 = v70 - (unsigned __int8 *)v35;
              v99 = v71;
              memmove(v71, v35, v70 - (unsigned __int8 *)v35);
              v72 = (unsigned __int8 *)&v99[v98];
            }
            v66 = v100;
          }
          v35 = (JSC::ARM64LogicalImmediate *)(v65 + 2);
          ++v69;
          v71 = (char *)v72;
        }
        v65 += 2;
        v70 += 2;
      }
      while (v65 < (unsigned __int8 *)v66);
      v65 = (unsigned __int8 *)__dst;
      v73 = HIDWORD(v109);
      v74 = HIDWORD(v109);
      v66 = (JSC::ARM64LogicalImmediate *)v71;
    }
    v75 = &v65[2 * v73];
    v11 = v101;
    if (v35 != (JSC::ARM64LogicalImmediate *)v75)
    {
      memmove(v66, v35, v75 - (unsigned __int8 *)v35);
      v74 = HIDWORD(v109);
    }
    v42 = v74 - v69;
LABEL_76:
    HIDWORD(v109) = v42;
LABEL_77:
    ;
  }
  while (v42);
  v76 = __dst;
  v27 = v16;
  if (v110 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v76, v35, v36, v37, v38, v39, v40, v41);
  }
LABEL_84:
  v45 = v104;
  if ((_DWORD)v104 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v102, 0, v37, v38, v39, v40, v41);
  else
LABEL_102:
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v45 << 35) + 0x380000001ALL, 0, v37, v38, v39, v40, v41);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationWeakSetAdd, v77, v78, v79, v80, v81, v82, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v83, v84, v85, v86, v87, v88);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v89, v90, v91, v92, v93);
  v95 = v106;
  if (v106 > 15)
    v95 = -1;
  --*((_DWORD *)this + 3 * v95 + 1196);
  if (v103)
  {
    if (v27 > 15)
      v96 = -1;
    else
      v96 = v16;
    --*((_DWORD *)this + 3 * v96 + 1196);
  }
  if (v11)
  {
    if (v13 > 15)
      v97 = -1;
    else
      v97 = v13;
    --*((_DWORD *)this + 3 * v97 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileWeakMapSet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  JSC::DFG::Node *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint8x8_t v57;
  __int32 v58;
  uint8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  unsigned int v95;
  char v96;
  char v97;
  char v98;
  char v99;
  int v100;
  int v101;
  char *v102;
  unint64_t v103;
  int v104;
  char v105;
  char *v106;
  JSC::ARM64LogicalImmediate *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  _BYTE v112[7];
  char *v113;
  uint64_t v114;
  _WORD v115[4];

  v8 = *((_QWORD *)this + 495);
  v9 = *((_QWORD *)a2 + 3);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    goto LABEL_133;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3));
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_103;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CD84);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3)), a3, a4, a5, a6, a7, a8);
    v8 = *((_QWORD *)this + 495);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_103:
    v15 = -1;
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CD8CLL);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 1));
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_104;
  v17 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CD94);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
  {
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
    v8 = *((_QWORD *)this + 495);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_104:
    v18 = -1;
  }
  if (v10 <= (int)v9 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CD9CLL);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 2));
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_102;
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CDA4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
  {
    v21 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
    v8 = *((_QWORD *)this + 495);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_102:
    v21 = -1;
  }
  v22 = v9 + 3;
  if (v10 <= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CDACLL);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v22);
  v110 = v23;
  v111 = -1;
  v24 = ~*(_DWORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v24 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CDB4);
  }
  v109 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v24 + 12))
    v111 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v23, (uint64_t)v112, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  if (v18 == -1)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
  v25 = v111;
  if (v111 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v110, (uint64_t)v112, a4, a5, a6, a7, a8);
    v111 = v25;
  }
  v26 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v26 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1CDBCLL);
  }
  JSC::DFG::SpeculativeJIT::speculateWeakMapObject((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v26 + 152) + 8 * *((_QWORD *)a2 + 3)), v15, a4, a5, a6, a7, a8);
  v33 = *((_QWORD *)this + 495);
  v34 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v33 + 164) <= v34)
  {
    __break(0xC471u);
LABEL_133:
    JUMPOUT(0x197C1CD7CLL);
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v33 + 152) + 8 * v34);
  if ((v35 & 0xFC000000000000) == 0x2C000000000000)
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, v35, v18, v28, v29, v30, v31, v32);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v35, v27, v28, v29, v30, v31, v32);
  v42 = (char *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v36, v37, v38, v39, v40, v41);
  v107 = (JSC::ARM64LogicalImmediate *)v43;
  v113 = (char *)v115;
  v114 = 4;
  if (v15 == 1)
  {
    v50 = 0;
  }
  else
  {
    v115[0] = v15 | 0x100;
    v50 = 1;
    HIDWORD(v114) = 1;
  }
  if (v18 != 2)
  {
    v115[v50++] = v18 | 0x200;
    HIDWORD(v114) = v50;
  }
  v108 = v42;
  if (v21 != 3)
  {
    v115[v50++] = v21 | 0x300;
    HIDWORD(v114) = v50;
  }
  if (v25 != 4)
  {
    v115[v50++] = v25 | 0x400;
    HIDWORD(v114) = v50;
    goto LABEL_40;
  }
  if (v50)
  {
    while (1)
    {
LABEL_40:
      v51 = 0;
      v52 = 0;
      v53 = v113;
      v54 = v50;
      do
      {
        if ((v113[v51 + 1] & 0x40) != 0)
        {
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        v52 |= 1 << v113[v51 + 1];
        v51 += 2;
      }
      while (2 * v50 != v51);
      v55 = 0;
      do
      {
        v56 = v113[v55] & 0x7F;
        if (v56 >= 0x40)
          goto LABEL_110;
        v52 &= ~(1 << v56);
        v55 += 2;
      }
      while (2 * v50 != v55);
      v57 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
      v57.i16[0] = vaddlv_u8(v57);
      v58 = v57.i32[0];
      v59 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v52));
      v59.i16[0] = vaddlv_u8(v59);
      if (!(v59.i32[0] + v58))
      {
        v99 = v113[1];
        v105 = *v113;
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *v113, v99, v45, v46, v47, v48, v49);
        memmove(v113, v113 + 2, 2 * HIDWORD(v114) - 2);
        v100 = HIDWORD(v114);
        v70 = (HIDWORD(v114) - 1);
        HIDWORD(v114) = v70;
        v25 = (unint64_t)v113;
        v42 = &v113[2 * v70];
        if (v100 == 1)
        {
          v73 = 0;
          v74 = 0;
          v43 = &v113[2 * v70];
        }
        else
        {
          LOBYTE(v50) = v105;
          LODWORD(v53) = v99;
          v54 = 2 * v70;
          v52 = (unint64_t)v113;
          while (*(unsigned __int8 *)v52 != (_DWORD)v53)
          {
LABEL_111:
            v52 += 2;
            v54 -= 2;
            if (!v54)
              goto LABEL_109;
          }
          *(_BYTE *)v52 = v50;
LABEL_109:
          LODWORD(v70) = 0;
          v72 = v25;
          v43 = v42;
          v71 = v42;
          do
          {
            if (*(unsigned __int8 *)v25 == *(unsigned __int8 *)(v25 + 1))
            {
              v69 = (char *)v25;
              if (v71 != &v113[2 * HIDWORD(v114)])
              {
                v104 = v70;
                v106 = v42;
                if ((char *)v25 == v43)
                {
                  v69 = v71;
                }
                else
                {
                  v102 = v71;
                  v103 = v72 - (_QWORD)v43;
                  memmove(v71, v43, v72 - (_QWORD)v43);
                  v69 = &v102[v103];
                }
                v42 = v106;
                LODWORD(v70) = v104;
              }
              v43 = (char *)(v25 + 2);
              LODWORD(v70) = v70 + 1;
              v71 = v69;
            }
            v25 += 2;
            v72 += 2;
          }
          while (v25 < (unint64_t)v42);
          v25 = (unint64_t)v113;
          v73 = HIDWORD(v114);
          v74 = HIDWORD(v114);
          v42 = v71;
        }
        v75 = (char *)(v25 + 2 * v73);
        if (v43 != v75)
        {
          v101 = v70;
          v42 = (char *)memmove(v42, v43, v75 - v43);
          LODWORD(v70) = v101;
          v74 = HIDWORD(v114);
        }
        v50 = v74 - v70;
        goto LABEL_66;
      }
      v25 = 0;
      v60 = v50 <= 1uLL ? 1 : v50;
      v61 = 2 * v60;
      while (1)
      {
        v62 = v113[v25 + 1];
        if ((v62 & 0x7Fu) >= 0x40)
          goto LABEL_110;
        if (((v52 >> (v62 & 0x7F)) & 1) != 0)
          break;
        v25 += 2;
        if (v61 == v25)
          goto LABEL_67;
      }
      v63 = v113[v25];
      if (v63 != v62)
        break;
LABEL_65:
      v42 = (char *)memmove(&v53[v25], &v53[v25 + 2], 2 * v54 - v25 - 2);
      v50 = HIDWORD(v114) - 1;
LABEL_66:
      HIDWORD(v114) = v50;
LABEL_67:
      if (!v50)
      {
        v76 = (unint64_t)v113;
        if (v115 != (_WORD *)v113 && v113)
        {
          v113 = 0;
          LODWORD(v114) = 0;
          WTF::fastFree(v76, v43, v44, v45, v46, v47, v48, v49);
        }
        goto LABEL_79;
      }
    }
    v64 = (char)v63;
    if ((char)v63 == 63)
    {
      v65 = *((_DWORD *)this + 50);
      v66 = *((_DWORD *)this + 48);
      if ((char)v62 != 31)
      {
        v68 = v62 & 0x1F | 0xD2800000;
        goto LABEL_62;
      }
    }
    else
    {
      v65 = *((_DWORD *)this + 50);
      v66 = *((_DWORD *)this + 48);
      if (v62 != 31 && v64 != 31)
      {
        v68 = v62 & 0xFFE0FFFF | ((v64 & 0x1F) << 16) | 0xAA0003E0;
LABEL_62:
        if (v65 + 4 > v66)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v43, v44, v45, v46, v47, v48, v49);
          v65 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v65) = v68;
        *((_DWORD *)this + 50) += 4;
        v53 = v113;
        v54 = HIDWORD(v114);
        goto LABEL_65;
      }
    }
    v68 = (char)v62 | (32 * v64) | 0x91000000;
    goto LABEL_62;
  }
LABEL_79:
  if ((_DWORD)v108 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v107, 0, v45, v46, v47, v48, v49);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v108 << 35) + 0x380000001ALL, 0, v45, v46, v47, v48, v49);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationWeakMapSet, v77, v78, v79, v80, v81, v82, (int *)&v113);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v83, v84, v85, v86, v87, v88);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v89, v90, v91, v92, v93);
  v95 = v111;
  if (v111 > 15)
    v95 = -1;
  --*((_DWORD *)this + 3 * v95 + 1196);
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v21 > 15)
      v96 = -1;
    else
      v96 = v21;
    --*((_DWORD *)this + 3 * v96 + 1196);
  }
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v18 > 15)
      v97 = -1;
    else
      v97 = v18;
    --*((_DWORD *)this + 3 * v97 + 1196);
  }
  if (v109)
  {
    if (v15 > 15)
      v98 = -1;
    else
      v98 = v15;
    --*((_DWORD *)this + 3 * v98 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int *v96;
  int *v97;
  int v98;
  char *v99;
  JSC::DFG::Node *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  _BYTE *v107;
  WTF *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _BYTE *v114;
  WTF *v115;
  WTF *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF **v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::DFG::Node *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF **v175;
  unsigned int v176;
  WTF *v177;
  unsigned int v178;
  _BYTE v179[24];
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  WTF *v185;
  unint64_t v186;
  _BYTE v187[24];
  WTF *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 v193;
  WTF **v194;
  uint64_t v195;
  _BYTE v196[30];
  __int16 v197;
  uint64_t (*v198)(unint64_t, uint64_t);
  _DWORD *v199;
  char v200;
  __int128 v201;
  char v202[9];

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v192, this, a3, a4, a5, a6, a7, a8);
  v16 = v193;
  v17 = *((_QWORD *)a2 + 3);
  v18 = (v17 >> 50) & 0x3F;
  if ((v18 - 12) >= 3)
  {
    if ((_DWORD)v18 == 11)
    {
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v185, (uint64_t)this, *((_QWORD *)a2 + 3), v11, v12, v13, v14, v15);
      v146 = v187[0];
      if (v187[0] == 255)
      {
        v146 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v185, v186, v140, v141, v142, v143, v144, v145);
        v187[0] = v146;
      }
      v147 = v146;
      JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *((_QWORD *)a2 + 3), v147, v141, v142, v143, v144, v145);
      v194 = (WTF **)v196;
      v195 = 2;
      JSC::AssemblyHelpers::emitLoadPrototype((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v147, v16, (uint64_t)&v194, v148, v149, v150);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v188, (uint64_t *)&v194);
      v157 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v151, v152, v153, v154, v155, v156);
      JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v191, (uint64_t *)&v188, this, v16, v157, v158, v147);
      JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v191);
      v166 = v191;
      v191 = 0;
      if (v166)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
      v167 = v188;
      if (&v190 != (uint64_t *)v188 && v188)
      {
        v188 = 0;
        v189 = 0;
        WTF::fastFree((unint64_t)v167, v159, v160, v161, v162, v163, v164, v165);
      }
      JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v16, (uint64_t)a2, 16, 0, v163, v164, v165);
      v175 = v194;
      if (v196 != (_BYTE *)v194 && v194)
      {
        v194 = 0;
        LODWORD(v195) = 0;
        WTF::fastFree((unint64_t)v175, v168, v169, v170, v171, v172, v173, v174);
      }
      if ((v186 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v176 = v187[0];
        if (v187[0] > 15)
          v176 = -1;
        v70 = (char *)v185 + 12 * v176;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    v72 = v17 & 0xFF00FFFFFFFFFFFFLL;
    if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_44;
    v73 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v73 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C1D6C0);
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v73 + 12)
      || (LODWORD(v21) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), v10, v11, v12, v13, v14, v15), (_DWORD)v21 == -1))
    {
LABEL_44:
      LODWORD(v21) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, v10, v11, v12, v13, v14, v15);
    }
    v185 = (WTF *)v187;
    v186 = 2;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v21, 1, v11, v12, v13, v14, v15, (uint64_t)&v183);
    v79 = v183;
    if (v183 != -1)
    {
      v80 = HIDWORD(v186);
      if (HIDWORD(v186) == (_DWORD)v186)
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v183, v74, v75, v76, v77, v78);
        v83 = *v81;
        v82 = (uint64_t *)(v81 + 1);
        v79 = v83;
        v80 = HIDWORD(v186);
      }
      else
      {
        v82 = &v184;
      }
      v84 = (char *)v185 + 12 * v80;
      *(_DWORD *)v84 = v79;
      *(_QWORD *)(v84 + 4) = *v82;
      ++HIDWORD(v186);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C1D6B0);
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v21 | 0x500000000, *((char *)this + 304), v74, v75, v76, v77, v78);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v85, v86, v87, v88, (uint64_t)&v181);
    v94 = v181;
    if (v181 != -1)
    {
      v95 = HIDWORD(v186);
      if (HIDWORD(v186) == (_DWORD)v186)
      {
        v96 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v181, v89, v90, v91, v92, v93);
        v98 = *v96;
        v97 = v96 + 1;
        v94 = v98;
        v95 = HIDWORD(v186);
      }
      else
      {
        v97 = &v182;
      }
      v99 = (char *)v185 + 12 * v95;
      *(_DWORD *)v99 = v94;
      *(_QWORD *)(v99 + 4) = *(_QWORD *)v97;
      ++HIDWORD(v186);
    }
    JSC::AssemblyHelpers::emitLoadPrototype((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v21, v16, (uint64_t)&v185, v91, v92, v93);
    v106 = HIDWORD(v186);
    v177 = (WTF *)v179;
    v178 = HIDWORD(v186);
    if (HIDWORD(v186) < 3)
    {
      v107 = v179;
    }
    else
    {
      if (HIDWORD(v186) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C1D6C8);
      }
      v107 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v186)));
      v177 = (WTF *)v107;
      v106 = HIDWORD(v186);
    }
    if (v106)
    {
      v108 = v185;
      v109 = (WTF *)((char *)v185 + 12 * v106);
      do
      {
        *(_DWORD *)v107 = *(_DWORD *)v108;
        *(_QWORD *)(v107 + 4) = *(_QWORD *)((char *)v108 + 4);
        v108 = (WTF *)((char *)v108 + 12);
        v107 += 12;
      }
      while (v108 != v109);
    }
    v110 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v100, v101, v102, v103, v104, v105);
    v112 = v111;
    v113 = v178;
    v194 = (WTF **)v196;
    LODWORD(v195) = 2;
    HIDWORD(v195) = v178;
    if (v178 < 3)
    {
      v114 = v196;
    }
    else
    {
      if (v178 >= 0x15555556)
      {
        __break(0xC471u);
LABEL_118:
        JUMPOUT(0x197C1D680);
      }
      v114 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v178));
      LODWORD(v195) = 12 * v178 / 0xC;
      v194 = (WTF **)v114;
      v113 = v178;
    }
    if (v113)
    {
      v115 = v177;
      v116 = (WTF *)((char *)v177 + 12 * v113);
      do
      {
        *(_DWORD *)v114 = *(_DWORD *)v115;
        *(_QWORD *)(v114 + 4) = *(_QWORD *)((char *)v115 + 4);
        v115 = (WTF *)((char *)v115 + 12);
        v114 += 12;
      }
      while (v115 != v116);
    }
    v202[0] = v16;
    *(_QWORD *)&v201 = v110;
    *((_QWORD *)&v201 + 1) = v112;
    v200 = v21;
    v198 = operationGetPrototypeOf;
    v199 = this;
    v197 = 0;
    std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(&v180, (uint64_t *)&v194, &v199, (uint64_t *)&v198, (unsigned __int8 *)&v197 + 1, (char *)&v197, v202, &v201, &v200);
    v124 = v194;
    if (v196 != (_BYTE *)v194 && v194)
    {
      v194 = 0;
      LODWORD(v195) = 0;
      WTF::fastFree((unint64_t)v124, v117, v118, v119, v120, v121, v122, v123);
    }
    v125 = (_QWORD *)((char *)this + 5656);
    v126 = *((unsigned int *)this + 1417);
    if ((_DWORD)v126 == *((_DWORD *)this + 1416))
    {
      v128 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, v126 + 1, (unint64_t)&v180);
      v126 = *((unsigned int *)this + 1417);
      v127 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v126);
    }
    else
    {
      v127 = (uint64_t *)(*v125 + 8 * v126);
      v128 = &v180;
    }
    v129 = *v128;
    *v128 = 0;
    *v127 = v129;
    *((_DWORD *)this + 1417) = v126 + 1;
    v130 = v180;
    v180 = 0;
    if (v130)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
    if (v179 != (_BYTE *)v177 && v177)
      WTF::fastFree((unint64_t)v177, v117, v118, v119, v120, v121, v122, v123);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v16, (uint64_t)a2, 16, 0, v121, v122, v123);
    v138 = v185;
    if (v187 != (_BYTE *)v185 && v185)
    {
      v185 = 0;
      LODWORD(v186) = 0;
      WTF::fastFree((unint64_t)v138, v131, v132, v133, v134, v135, v136, v137);
    }
    if (v72)
      goto LABEL_26;
    goto LABEL_31;
  }
  v19 = v17 & 0xFF00FFFFFFFFFFFFLL;
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v20 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C1D6B8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12)
    || (v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), v10, v11, v12, v13, v14, v15), (_DWORD)v21 == -1))
  {
LABEL_6:
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, v10, v11, v12, v13, v14, v15);
  }
  v22 = *((_QWORD *)a2 + 3);
  v23 = (v22 >> 50) & 0x3F;
  if ((_DWORD)v23 == 13)
  {
    JSC::DFG::SpeculativeJIT::speculateFunction((uint64_t)this, v22, v21, v11, v12, v13, v14, v15);
    goto LABEL_9;
  }
  if ((_DWORD)v23 == 14)
  {
    JSC::DFG::SpeculativeJIT::speculateFinalObject((uint64_t)this, v22, v21, v11, v12, v13, v14, v15);
    goto LABEL_9;
  }
  if ((_DWORD)v23 != 12)
  {
    __break(0xC471u);
    goto LABEL_118;
  }
  JSC::DFG::SpeculativeJIT::speculateArray((uint64_t)this, v22, v21, v11, v12, v13, v14, v15);
LABEL_9:
  v29 = (char)v16;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v21, v29, v24, v25, v26, v27, v28);
  v37 = *((_DWORD *)this + 50);
  if (v37 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v30, v31, v32, v33, v34, v35, v36);
    v37 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v37) = v16 & 0x1F | (32 * (v16 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  v38 = *((_QWORD *)a2 + 3);
  v39 = *((_QWORD *)this + 688);
  v40 = *(unsigned int *)((v38 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v41 = (_QWORD *)(v39 + 24);
  v42 = (_QWORD *)(v39 + 8);
  if ((v38 & 1) != 0)
    v43 = v41;
  else
    v43 = v42;
  v44 = *v43 + 32 * v40;
  v45 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v45 != *(_DWORD *)(v44 + 20))
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v44, v45, v31, v32, v33, v34, v35, v36);
    else
      *(_DWORD *)(v44 + 20) = (_DWORD)v45;
  }
  v46 = *(_QWORD *)(v44 + 8);
  if (v46)
    v47 = (v46 & 0xFFFFDFFFF0000008) == 0;
  else
    v47 = 0;
  if (!v47)
    goto LABEL_24;
  v48 = *(_QWORD *)v44;
  if (*(_QWORD *)v44 == 4 || (*(_QWORD *)v44 & 2) != 0)
    goto LABEL_24;
  LOBYTE(v185) = 0;
  LOBYTE(v201) = 0;
  v194 = &v185;
  v195 = (uint64_t)&v201;
  JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::Node *)::$_0>(v48, (_BYTE **)&v194);
  if (!(_BYTE)v201 || (_BYTE)v185)
  {
    if ((_BYTE)v201 || !(_BYTE)v185)
    {
LABEL_24:
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v16 | 0x3000000000, (char)v16, v32, v33, v34, v35, v36);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v16, 0xFFFFFFFFLL, v50, v51, v52, v53, (uint64_t)&v194, v54);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v21 | 0x1000000000, (char)v16, v55, v56, v57, v58, v59);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v194, (uint64_t)this, v60, v61, v62, v63, v64, v65);
      goto LABEL_25;
    }
    v139 = 0x1000000000;
    v16 = v21;
  }
  else
  {
    v139 = 0x3000000000;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v139 | v16, v29, v32, v33, v34, v35, v36);
LABEL_25:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v29, (uint64_t)a2, 16, 0, v66, v67, v68);
  if (v19)
  {
LABEL_26:
    if ((int)v21 > 15)
      v69 = -1;
    else
      v69 = v21;
    v70 = (char *)this + 12 * v69;
LABEL_30:
    --*((_DWORD *)v70 + 1196);
  }
LABEL_31:
  if (v192)
  {
    v71 = (char)v193;
    if ((char)v193 != -1)
    {
      if ((char)v193 > 15)
        v71 = -1;
      --*(_DWORD *)(v192 + 12 * v71 + 4784);
    }
  }
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::Node *)::$_0>(uint64_t result, _BYTE **a2)
{
  unsigned int *v2;
  _BYTE **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE **v7;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v4 = *v2;
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v2 + 2);
      do
      {
        v6 = *v5++;
        if (*(_QWORD *)(v6 + 48))
          v7 = a2 + 1;
        else
          v7 = a2;
        **v7 = 1;
        --v4;
      }
      while (v4);
    }
  }
  else if (v2)
  {
    v3 = a2 + 1;
    if (!*((_QWORD *)v2 + 6))
      v3 = a2;
    **v3 = 1;
  }
  return result;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE *v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v53;
  unsigned int v54;
  _BYTE v55[24];
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[32];

  v13 = *((unsigned int *)a2 + 3);
  v53 = (WTF *)v55;
  v54 = v13;
  if (v13 < 3)
  {
    v14 = v55;
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  else
  {
    if (v13 >= 0x15555556)
      goto LABEL_47;
    v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v13));
    v53 = (WTF *)v14;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  v15 = *a2;
  v16 = *a2 + 12 * v13;
  do
  {
    *(_DWORD *)v14 = *(_DWORD *)v15;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
    v15 += 12;
    v14 += 12;
  }
  while (v15 != v16);
LABEL_8:
  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = v54;
  v56 = (WTF *)v59;
  v57 = 2;
  v58 = v54;
  if (v54 < 3)
  {
    v19 = v59;
  }
  else
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C1DB10);
    }
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
    v57 = 12 * v54 / 0xC;
    v56 = (WTF *)v19;
    v18 = v54;
  }
  if (v18)
  {
    v20 = v53;
    v21 = (WTF *)((char *)v53 + 12 * v18);
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)((char *)v20 + 4);
      v20 = (WTF *)((char *)v20 + 12);
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  v51 = a5;
  if (v58 < 3)
  {
    v23 = a6;
    v25 = v63;
  }
  else
  {
    if (v58 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C1DB18);
    }
    v23 = a6;
    v24 = 12 * v58;
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
    v61 = (v24 & 0xFFFFFFFC) / 0xC;
    v60 = (WTF *)v25;
    v22 = v58;
  }
  if (v22)
  {
    v26 = v56;
    v27 = (WTF *)((char *)v56 + 12 * v22);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v62;
  v64 = v67;
  v65 = 2;
  v66 = v62;
  if (v62 < 3)
  {
    v30 = v67;
    if (!v62)
      goto LABEL_29;
LABEL_27:
    v31 = v60;
    v32 = (WTF *)((char *)v60 + 12 * v28);
    do
    {
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)((char *)v31 + 4);
      v31 = (WTF *)((char *)v31 + 12);
      v30 += 12;
    }
    while (v31 != v32);
    goto LABEL_29;
  }
  if (v62 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197C1DB08);
  }
  v29 = 12 * v62;
  v30 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
  v65 = (v29 & 0xFFFFFFFC) / 0xC;
  v64 = v30;
  v28 = v62;
  if (v62)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v64, a3);
  v40 = (unint64_t)v64;
  if (v67 != v64 && v64 != 0)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  }
  *(_QWORD *)v17 = off_1E3574220;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 100) = 0;
  *(_BYTE *)(v17 + 102) = a4;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  *(_QWORD *)(v17 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v17 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v38, v39);
  v49 = v60;
  if (v63 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v17 = &off_1E35741F0;
  *(_QWORD *)(v17 + 152) = operationGetPrototypeOfObject;
  *(_QWORD *)(v17 + 160) = v51;
  *(_QWORD *)(v17 + 168) = v23;
  *(_BYTE *)(v17 + 176) = a7;
  *a1 = v17;
  v50 = v56;
  if (v59 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
  }
  if (v55 != (_BYTE *)v53)
  {
    if (v53)
      WTF::fastFree((unint64_t)v53, v42, v43, v44, v45, v46, v47, v48);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetWebAssemblyInstanceExports(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *result;
  char *v39;
  int v40;
  unsigned int v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char v49;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v48, this, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v48, this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
LABEL_8:
  v26 = v49;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x3000000000, v26, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v26 | 0x9000000000, v26, v27, v28, v29, v30, v31);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v32, v33, v34, v35, v36, v37);
  v39 = (char *)this + 4776;
  v40 = *((_DWORD *)a2 + 12);
  if ((int)v26 > 15)
    v41 = -1;
  else
    v41 = v26;
  v42 = &v39[12 * v41];
  *(_DWORD *)v42 = v40;
  *((_DWORD *)v42 + 1) = 4;
  v43 = ~v40;
  if (v43 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x197C1DCC4);
  }
  v44 = *((_QWORD *)this + 499) + 24 * (int)v43;
  v45 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v44 = a2;
  *(_DWORD *)(v44 + 8) = v45;
  *(_BYTE *)(v44 + 17) = v26;
  *(_DWORD *)(v44 + 12) = 6;
  *(_BYTE *)(v44 + 16) = 0;
  if (v48)
  {
    v46 = v49;
    if (v49 != -1)
    {
      if (v49 > 15)
        v46 = -1;
      --*(_DWORD *)(v48 + 12 * v46 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v47 = -1;
    else
      v47 = v13;
    --*(_DWORD *)&v39[12 * v47 + 8];
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileIdentity(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t result;
  char v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  JSC::DFG::SpeculativeJIT *v71;
  unint64_t v72;
  unsigned __int8 v73;

  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)a2 + 3);
  v18 = (v17 >> 50) & 0x3F;
  if ((v18 - 49) < 3)
  {
    JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v71, (uint64_t)this, *((_QWORD *)a2 + 3), v12, v13, v14, v15, v16);
    JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v69, (uint64_t)this, (uint64_t)&v71, v33, v34, v35, v36, v37);
    v44 = v73;
    if (v73 == 255)
    {
      v44 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v71, v72, v38, v39, v40, v41, v42, v43);
      v73 = v44;
    }
    JSC::MacroAssemblerARM64::moveDouble(this, (char)v44, (char)v70, v39, v40, v41, v42, v43);
    result = (uint64_t)JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, (char)v70, a2, 0, v45, v46, v47, v48);
    if (v69)
    {
      v49 = v69 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v70];
      --*(_DWORD *)(v49 + 4976);
    }
    v50 = (char *)v71 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v73];
    --*((_DWORD *)v50 + 1244);
    return result;
  }
  if ((_DWORD)v18 == 52)
  {
    JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand((uint64_t)&v71, (uint64_t)this, *((_QWORD *)a2 + 3), v12, v13, v14, v15, v16);
    JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt52Operand>((uint64_t)&v69, this, (uint64_t)&v71, v51, v52, v53, v54, v55);
    v61 = v73;
    if (v73 == 255)
    {
      v61 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v71, v72, 2, v56, v57, v58, v59, v60);
      v73 = v61;
    }
    JSC::MacroAssemblerARM64::move(this, (char)v61, (char)v70, v56, v57, v58, v59, v60);
    result = (uint64_t)JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v70, a2, v62, v63, v64, v65, v66);
    if (v69)
    {
      v67 = (char)v70;
      if ((char)v70 != -1)
      {
        if ((char)v70 > 15)
          v67 = -1;
        --*(_DWORD *)(v69 + 12 * v67 + 4784);
      }
    }
    v68 = (char)v73;
    if ((char)v73 > 15)
      v68 = -1;
    v32 = (char *)v71 + 12 * v68;
    goto LABEL_36;
  }
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_38;
  v19 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *((unsigned int *)this + 1001))
  {
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x197C1E0A0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
    v20 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), v11, v12, v13, v14, v15, v16);
  else
LABEL_38:
    v20 = -1;
  v21 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *((unsigned int *)this + 1001))
    goto LABEL_58;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 8) == 1)
  {
    if (v20 == -1)
      v20 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, v11, v12, v13, v14, v15, v16);
    if (v20 > 15)
      v22 = -1;
    else
      v22 = v20;
    ++*((_DWORD *)this + 3 * v22 + 1196);
    v23 = v20;
  }
  else
  {
    v23 = JSC::DFG::SpeculativeJIT::allocate(this, v10, v11, v12, v13, v14, v15, v16);
  }
  if (v20 == -1)
    v20 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, v11, v12, v13, v14, v15, v16);
  if (v20 != v23)
  {
    if (v20 == 63)
    {
      if (v23 != 31)
      {
        v26 = v23 & 0x1F | 0xD2800000;
        goto LABEL_23;
      }
    }
    else if (v23 != 31 && v20 != 31)
    {
      v24 = v23 & 0x1F | ((v20 & 0x1F) << 16);
      v25 = -1442839584;
LABEL_22:
      v26 = v24 | v25;
LABEL_23:
      v28 = (unsigned int *)((char *)this + 200);
      v27 = *((_DWORD *)this + 50);
      if (v27 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v10, v11, v12, v13, v14, v15, v16);
        v27 = *v28;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v27) = v26;
      *v28 += 4;
      goto LABEL_26;
    }
    v24 = v23 | (32 * v20);
    v25 = -1862270976;
    goto LABEL_22;
  }
LABEL_26:
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v23, (uint64_t)a2, 16, 0, v14, v15, v16);
  if (v23 != -1)
  {
    if (v23 > 15)
      v30 = -1;
    else
      v30 = v23;
    --*((_DWORD *)this + 3 * v30 + 1196);
  }
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v20 > 15)
      v31 = -1;
    else
      v31 = v20;
    v32 = (char *)this + 12 * v31;
LABEL_36:
    --*((_DWORD *)v32 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt52Operand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a3 + 16);
      if (v13 == 255)
      {
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(*(JSC::DFG::SpeculativeJIT **)a3, v9, 2, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v13;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::Node::storageChildIndex(JSC::DFG::Node *this)
{
  int v1;
  uint64_t result;

  v1 = *((unsigned __int16 *)this + 9);
  result = 2;
  if (v1 > 383)
  {
    switch(v1)
    {
      case 384:
      case 388:
        return result;
      case 386:
        return 4;
      case 391:
        return 3;
      default:
        goto LABEL_11;
    }
  }
  if (v1 > 201)
  {
    switch(v1)
    {
      case 202:
      case 203:
      case 205:
      case 208:
      case 209:
      case 210:
      case 211:
        return 3;
      case 204:
        return 4;
      case 207:
      case 213:
        return result;
      case 212:
        return 0;
      default:
        goto LABEL_11;
    }
  }
  if ((v1 - 101) < 4)
    return 3;
  if ((v1 - 158) >= 3 && (v1 - 92) >= 2)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x197C1E230);
  }
  return result;
}

void JSC::AssemblyHelpers::isNotEmpty(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v8 = a3;
  v10 = (unsigned __int16)(32 * (a2 & 0x1F)) | ((a2 & 0x1F) << 16) | 0xEA00001F;
  v11 = (JSC::AssemblerBuffer *)(a1 + 14);
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v10;
  v13 = a1[50];
  v14 = v13 + 4;
  a1[50] = v13 + 4;
  if ((v13 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = v8 & 0x1F | 0x1A9F07E0;
  a1[50] += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileExtractCatchLocal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned int v28;
  uint64_t v29;
  char v30;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v29, this, a3, a4, a5, a6, a7, a8);
  v15 = v30;
  v16 = *((_QWORD *)this + 46);
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(v16 + 224) + 8 * *((unsigned int *)a2 + 18) + 8;
  v20 = (unsigned int *)(v16 + 8);
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)(v16 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  }
  v23 = v15;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v19, v23, v10, v11, v12, v13, v14);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v23, (uint64_t)a2, 16, 0, v24, v25, v26);
  if (v29)
  {
    v28 = v30;
    if (v30 != -1)
    {
      if (v30 > 15)
        v28 = -1;
      --*(_DWORD *)(v29 + 12 * v28 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileClearCatchLocals(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 v36;

  v10 = *((_QWORD *)this + 46);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(v10 + 224);
  v14 = (unsigned int *)(v10 + 8);
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(v10 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v35, this, a3, a4, a5, a6, a7, a8);
  v17 = v36;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v13, (char)v36, v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v17, v23, v24, v25, v26, v27);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v28, v29, v30, v31, v32);
  if (v35)
  {
    v34 = (char)v36;
    if ((char)v36 != -1)
    {
      if ((char)v36 > 15)
        v34 = -1;
      --*(_DWORD *)(v35 + 12 * v34 + 4784);
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileProfileType(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t *v45;
  int v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  int v55;
  unsigned int v56;
  void *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int *v76;
  int *v77;
  int v78;
  _DWORD *v79;
  _QWORD *v80;
  int v81;
  _DWORD *v82;
  char *v83;
  char *v84;
  JSC::DFG::Node *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int i;
  unsigned int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF *v192;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  char v197;
  JSC::AssemblerBuffer *v198;
  int v199;
  unsigned __int8 v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unsigned int v204[2];
  char v205;
  __int16 v206;
  char v207;
  int v208;
  int v209;
  unsigned int v210[3];
  _DWORD v211[3];
  _DWORD v212[3];
  _DWORD v213[3];
  _DWORD v214[3];
  _DWORD v215[3];
  int v216;
  uint64_t v217;
  WTF *v218;
  uint64_t v219;
  _BYTE v220[24];
  uint64_t v221;
  char v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  unsigned __int8 v226;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_105;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_5:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v225, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v223, this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v221, this, v20, v21, v22, v23, v24, v25);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v26, v27, v28, v29, v30, v31);
  v33 = v226;
  v34 = v224;
  v35 = v222;
  v218 = (WTF *)v220;
  v219 = 2;
  v36 = v13;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v36, 0xFFFFFFFFLL, v28, v29, v30, v31, (uint64_t)&v216, v32);
  v42 = v216;
  if (v216 != -1)
  {
    v43 = HIDWORD(v219);
    if (HIDWORD(v219) == (_DWORD)v219)
    {
      v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, (void *)(HIDWORD(v219) + 1), (unint64_t)&v216, v37, v38, v39, v40, v41);
      v46 = *v44;
      v45 = (uint64_t *)(v44 + 1);
      v42 = v46;
      v43 = HIDWORD(v219);
    }
    else
    {
      v45 = &v217;
    }
    v47 = (char *)v218 + 12 * v43;
    *(_DWORD *)v47 = v42;
    *(_QWORD *)(v47 + 4) = *v45;
    ++HIDWORD(v219);
  }
  v48 = *((_QWORD *)a2 + 9);
  v49 = *(unsigned __int16 *)(v48 + 40);
  v199 = v36;
  v200 = v13;
  if (v49 > 0xF)
  {
    if (v49 == 16)
    {
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v13, 27, v38, v39, v40, v41, (uint64_t)v212);
      v55 = v212[0];
      if (v212[0] == -1)
        goto LABEL_50;
      v56 = HIDWORD(v219);
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        v57 = (void *)(HIDWORD(v219) + 1);
        v58 = v212;
        goto LABEL_39;
      }
      v82 = v212;
      goto LABEL_45;
    }
    if (v49 == 32)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v13, 27, v38, v39, v40, v41, (uint64_t)v211);
      v55 = v211[0];
      if (v211[0] == -1)
        goto LABEL_50;
      v56 = HIDWORD(v219);
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        v57 = (void *)(HIDWORD(v219) + 1);
        v58 = v211;
        goto LABEL_39;
      }
      v82 = v211;
      goto LABEL_45;
    }
    if (v49 != 64)
      goto LABEL_50;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, v37, v38, v39, v40, v41, (uint64_t)v210);
    if (*((_BYTE *)this + 212))
    {
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v59, v60, v61, v62, v63);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 2, v64, v65, v66, v67, (uint64_t)&v208);
      v74 = v208;
      v36 = v36;
      if (v208 != -1)
      {
        v75 = HIDWORD(v219);
        if (HIDWORD(v219) == (_DWORD)v219)
        {
          v76 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, (void *)(HIDWORD(v219) + 1), (unint64_t)&v208, v69, v70, v71, v72, v73);
          v78 = *v76;
          v77 = v76 + 1;
          v74 = v78;
          v75 = HIDWORD(v219);
        }
        else
        {
          v77 = &v209;
        }
        v84 = (char *)v218 + 12 * v75;
        *(_DWORD *)v84 = v74;
        *(_QWORD *)(v84 + 4) = *(_QWORD *)v77;
        ++HIDWORD(v219);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v210, (uint64_t)this, v68, v69, v70, v71, v72, v73);
      goto LABEL_50;
    }
    __break(0xC471u);
LABEL_105:
    JUMPOUT(0x197C1EE80);
  }
  switch(v49)
  {
    case 2u:
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v13, 10, v38, v39, v40, v41, (uint64_t)v215);
      v55 = v215[0];
      if (v215[0] == -1)
        break;
      v56 = HIDWORD(v219);
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        v57 = (void *)(HIDWORD(v219) + 1);
        v58 = v215;
        goto LABEL_39;
      }
      v82 = v215;
LABEL_45:
      v80 = v82 + 1;
      goto LABEL_46;
    case 4u:
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v13, 2, v38, v39, v40, v41, (uint64_t)v214);
      v55 = v214[0];
      if (v214[0] == -1)
        break;
      v56 = HIDWORD(v219);
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        v57 = (void *)(HIDWORD(v219) + 1);
        v58 = v214;
        goto LABEL_39;
      }
      v82 = v214;
      goto LABEL_45;
    case 8u:
      JSC::MacroAssemblerARM64::xor64((uint64_t)this, 6, v36, (char)v33, v38, v39, v40, v41);
      v36 = v36;
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v33, 4294967294, v50, v51, v52, v53, (uint64_t)v213, v54);
      v55 = v213[0];
      if (v213[0] != -1)
      {
        v56 = HIDWORD(v219);
        if (HIDWORD(v219) == (_DWORD)v219)
        {
          v57 = (void *)(HIDWORD(v219) + 1);
          v58 = v213;
LABEL_39:
          v79 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, v57, (unint64_t)v58, v37, v38, v39, v40, v41);
          v81 = *v79;
          v80 = v79 + 1;
          v55 = v81;
          v56 = HIDWORD(v219);
LABEL_46:
          v83 = (char *)v218 + 12 * v56;
          *(_DWORD *)v83 = v55;
          *(_QWORD *)(v83 + 4) = *v80;
          ++HIDWORD(v219);
          break;
        }
        v82 = v213;
        goto LABEL_45;
      }
      break;
  }
LABEL_50:
  v85 = a2;
  v86 = v11;
  v87 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93176);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v87, (char)v34, v37, v38, v39, v40, v41);
  v88 = v34 | 0x1800000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v88, (char)v33, v89, v90, v91, v92, v93);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v36, v33, v94, v95, v96, v97, v98);
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v200, 1, v99, v100, v101, v102, v103, (uint64_t)v210);
  v104 = v35;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v200, v104, v105, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v104, v33 | 0x1000000000, v110, v111, v112, v113, v114);
  v198 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v198, v115, v116, v117, v118, v119, v120, v121);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v123 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v198, v115, v116, v117, v118, v119, v120, v121);
    v123 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v123) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v124 = 69;
  else
    v124 = 65;
  v204[0] = i;
  v204[1] = 0;
  v205 = v124;
  v206 = 15;
  v207 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v210, (uint64_t)this, v116, v117, v118, v119, v120, v121);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, 63, v33 | 0x1000000000, v125, v126, v127, v128, v129);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v204, (uint64_t)this, v130, v131, v132, v133, v134, v135);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v48, v104, v136, v137, v138, v139, v140);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v104, v33 | 0x800000000, v141, v142, v143, v144, v145);
  v153 = *((_DWORD *)this + 50);
  if (v153 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v198, v146, v147, v148, v149, v150, v151, v152);
    v153 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v153) = (char)v33 | (32 * (char)v33) | 0x91006000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)this, (char)v33, v88, v148, v149, v150, v151, v152);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v33, *(_QWORD *)(v87 + 32), v154, v155, v156, v157, (uint64_t)&v202);
  v158 = v202;
  v159 = v203;
  v160 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v161 = WTF::fastMalloc((WTF *)0x90);
  v162 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v161, this);
  *(_QWORD *)v162 = off_1E35746F0;
  *(_DWORD *)(v162 + 48) = v158;
  *(_QWORD *)(v162 + 52) = v159;
  v170 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v162 + 60) = v170; v170 < *((_DWORD *)this + 13); *(_DWORD *)(v161 + 60) = v170)
  {
    if ((v170 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v198, v163, v164, v165, v166, v167, v168, v169);
      v170 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v170) = -721215457;
    v170 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v170;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v161 = off_1E35742E0;
  *(_QWORD *)(v161 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v161 + 72) = 0;
  *(_DWORD *)(v161 + 76) = 0;
  *(_QWORD *)(v161 + 80) = v161 + 96;
  *(_QWORD *)(v161 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v161 + 80, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v168, v169);
  *(_QWORD *)v161 = &off_1E35742B0;
  *(_QWORD *)(v161 + 128) = operationProcessTypeProfilerLogDFG;
  *(_QWORD *)(v161 + 136) = v160;
  v201 = v161;
  v177 = (_QWORD *)((char *)this + 5656);
  v178 = *((unsigned int *)this + 1417);
  if ((_DWORD)v178 == *((_DWORD *)this + 1416))
  {
    v180 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, v178 + 1, (unint64_t)&v201);
    v178 = *((unsigned int *)this + 1417);
    v179 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v178);
    v161 = *v180;
  }
  else
  {
    v179 = (uint64_t *)(*v177 + 8 * v178);
    v180 = &v201;
  }
  *v180 = 0;
  *v179 = v161;
  *((_DWORD *)this + 1417) = v178 + 1;
  v181 = v201;
  v201 = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  if (HIDWORD(v219))
  {
    v182 = 0;
    v183 = 0;
    v184 = 12 * HIDWORD(v219);
    do
    {
      if (v183 >= HIDWORD(v219))
      {
        __break(0xC471u);
        JUMPOUT(0x197C1EE88);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v218 + v182), (uint64_t)this, v171, v172, v173, v174, v175, v176);
      ++v183;
      v182 += 12;
    }
    while (v184 != v182);
  }
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)v85, 0, v172, v173, v174, v175, v176);
  v192 = v218;
  if (v220 != (_BYTE *)v218 && v218 != 0)
  {
    v218 = 0;
    LODWORD(v219) = 0;
    WTF::fastFree((unint64_t)v192, v185, v186, v187, v188, v189, v190, v191);
  }
  if (v221)
  {
    v194 = v222;
    if (v222 != -1)
    {
      if (v222 > 15)
        v194 = -1;
      --*(_DWORD *)(v221 + 12 * v194 + 4784);
    }
  }
  if (v223)
  {
    v195 = (char)v224;
    if ((char)v224 != -1)
    {
      if ((char)v224 > 15)
        v195 = -1;
      --*(_DWORD *)(v223 + 12 * v195 + 4784);
    }
  }
  if (v225)
  {
    v196 = (char)v226;
    if ((char)v226 != -1)
    {
      if ((char)v226 > 15)
        v196 = -1;
      --*(_DWORD *)(v225 + 12 * v196 + 4784);
    }
  }
  if (v86)
  {
    if (v199 > 15)
      v197 = -1;
    else
      v197 = v200;
    --*((_DWORD *)this + 3 * v197 + 1196);
  }
}

BOOL JSC::DFG::SpeculativeJIT::isKnownInteger(JSC::DFG::SpeculativeJIT *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v8 = *((_QWORD *)this + 688);
  v9 = (_QWORD *)(v8 + 24);
  v10 = (_QWORD *)(v8 + 8);
  if ((a2 & 1) != 0)
    v10 = v9;
  v11 = *v10 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v12 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v12 != *(_DWORD *)(v11 + 20))
  {
    if ((*(_QWORD *)(v11 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v11, v12, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v11 + 20) = (_DWORD)v12;
  }
  return (*(_QWORD *)(v11 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0;
}

void JSC::DFG::SpeculativeJIT::compileMakeRope(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int canBeRope;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int i;
  unsigned int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t j;
  JSC::DFG::Edge *v144;
  uint64_t v145;
  BOOL v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int k;
  unsigned int v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  int v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int8x8_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  JSC::DFG::Node *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  int v270;
  _BYTE *v271;
  WTF *v272;
  WTF *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  _BYTE *v278;
  WTF *v279;
  WTF *v280;
  uint64_t v281;
  unsigned int v282;
  int v283;
  _BYTE *v284;
  WTF *v285;
  WTF *v286;
  unsigned int v287;
  uint64_t v288;
  int v289;
  _BYTE *v290;
  int v291;
  _BYTE *v292;
  WTF *v293;
  WTF *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  _BYTE *v299;
  WTF *v300;
  WTF *v301;
  uint64_t v302;
  unsigned int v303;
  int v304;
  _BYTE *v305;
  WTF *v306;
  WTF *v307;
  unsigned int v308;
  uint64_t v309;
  int v310;
  _BYTE *v311;
  WTF *v312;
  WTF *v313;
  unsigned int v314;
  int v315;
  _BYTE *v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  WTF *v337;
  WTF *v338;
  JSC::DFG::Node *v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t v345;
  WTF *v346;
  unint64_t v347;
  char v348;
  int v349;
  unsigned int *v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  int v359;
  unsigned int v360;
  char *v361;
  unint64_t v362;
  uint64_t v363;
  int v364;
  WTF *v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  char v370;
  char v371;
  char v372;
  WTF *v373;
  WTF *v374;
  unsigned int v375;
  int v376;
  _BYTE *v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v389;
  WTF *v390;
  WTF *v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  JSC::AssemblerBuffer *v402;
  char v403;
  unint64_t v404;
  unint64_t v405;
  char v406;
  unint64_t v407;
  unint64_t v408;
  char v409;
  __int128 v410;
  char v411;
  JSC::DFG::Node *v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  unsigned __int8 v416;
  WTF *v417;
  unsigned int v418;
  unsigned int v419;
  _BYTE v420[24];
  uint64_t v421;
  WTF *v422;
  unsigned int v423;
  unsigned int v424;
  _BYTE v425[24];
  uint64_t v426;
  unsigned int v427;
  JSC::ARM64LogicalImmediate *v428;
  unsigned int v429[3];
  int v430[3];
  int v431[3];
  int v432[3];
  WTF *v433;
  uint64_t v434;
  _BYTE v435[24];
  uint64_t v436;
  unsigned __int8 v437;
  uint64_t v438;
  char v439;
  uint64_t v440;
  char v441;
  uint64_t v442;
  unsigned __int8 v443;
  _BYTE v444[3];
  WTF *v445;
  unsigned int v446;
  unsigned int v447;
  _BYTE v448[24];
  WTF *v449;
  unsigned int v450;
  unsigned int v451;
  _BYTE v452[24];
  _BYTE v453[12];
  unsigned int v454;
  _BYTE v455[24];
  __int128 v456;
  _BYTE v457[24];
  __int128 v458;
  uint64_t v459;
  uint64_t v460;

  v460 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_256;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20734);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_256:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_257;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C2073CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_257:
    v17 = -1;
  v18 = *((_QWORD *)a2 + 5);
  v408 = v18 & 0xFF00FFFFFFFFFFFFLL;
  if ((v18 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_258;
  v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20744);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
    v409 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v18, a3, a4, a5, a6, a7, a8);
  else
LABEL_258:
    v409 = -1;
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v444[0] = v13;
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v444[1] = v17;
  v20 = *((_QWORD *)a2 + 5);
  v21 = -1;
  v407 = v20 & 0xFF00FFFFFFFFFFFFLL;
  if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v409 == -1)
    {
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v18, a3, a4, a5, a6, a7, a8);
      v20 = *((_QWORD *)a2 + 5);
      v414 = 3;
      v409 = v21;
    }
    else
    {
      v414 = 3;
      v21 = v409;
    }
  }
  else
  {
    v414 = 2;
  }
  v444[2] = v21;
  v410 = *(_OWORD *)((char *)a2 + 24);
  v458 = v410;
  v459 = v20;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v442, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v440, this, v22, v23, v24, v25, v26, v27);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v438, this, v28, v29, v30, v31, v32, v33);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v436, this, v34, v35, v36, v37, v38, v39);
  v45 = v439;
  v46 = v437;
  v433 = (WTF *)v435;
  v434 = 2;
  v47 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  if (*(_DWORD *)(v47 + 39468) <= 0x1Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197C20604);
  }
  v403 = v21;
  v412 = a2;
  v413 = v443;
  v411 = v17;
  v48 = (char)v443;
  *(_QWORD *)&v456 = 0;
  *((_QWORD *)&v456 + 1) = v47 + 39408;
  v49 = v441;
  v50 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), *(_QWORD *)(v47 + 41512), (int *)v453, v40, v41, v42, v43, v44);
  v406 = v49;
  v51 = v49;
  v52 = v45;
  v415 = v48;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, v48, (uint64_t)&v456, v51, v52, (uint64_t)&v433, 1, v53, v54);
  v60 = (v50 >> 4) | ((unint64_t)*(unsigned int *)(v50 + 8) << 32);
  if (v60)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C206D0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(this, v60, (uint64_t)this + 264, v55, v56, v57, v58, v59);
    v61 = 16;
  }
  else
  {
    v61 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v61, v413, v55, v56, v57, v58, v59);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20624);
  }
  v404 = v15;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 1, (uint64_t)this + 264, v62, v63, v64, v65, v66);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v413 | 0x800000000, v67, v68, v69, v70, v71);
  v405 = v11;
  v416 = v13;
  if (*(unsigned __int16 *)((v410 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && (v78 = **(_QWORD **)((v410 & 0xFF00FFFFFFFFFFFFLL) + 0x48)) != 0
    && (v78 & 0xFFFE000000000002) == 0
    && *(_BYTE *)(v78 + 5) == 2)
  {
    v79 = *(_QWORD *)(v78 + 8);
    if ((v79 & 1) != 0)
      v79 = (v79 >> 2) & 1;
    else
      LODWORD(v79) = (*(unsigned __int8 *)(v79 + 16) >> 2) & 1;
    if ((_DWORD)v79)
      v80 = 4;
    else
      v80 = 0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v80, v45, v73, v74, v75, v76, v77);
    v86 = *(_QWORD *)(v78 + 8);
    if ((v86 & 1) != 0)
      v87 = (unsigned int *)(v78 + 16);
    else
      v87 = (unsigned int *)(v86 + 4);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)*v87, v51, v81, v82, v83, v84, v85);
  }
  else
  {
    canBeRope = JSC::DFG::SpeculativeJIT::canBeRope(this, (JSC::DFG::Edge *)&v458, v72, v73, v74, v75, v76, v77);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x800000000, (char)v46, v95, v96, v97, v98, v99);
    *(_QWORD *)&v456 = 0xFFFFFFFFLL;
    DWORD2(v456) = -16773311;
    if (canBeRope)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v46, 1, v101, v102, v103, v104, (uint64_t)v453, (int8x8_t)4278193985);
      LODWORD(v456) = *(_DWORD *)v453;
      *(_QWORD *)((char *)&v456 + 4) = *(_QWORD *)&v453[4];
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x1000000000, v45, v105, v106, v107, v108, v109);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x400000000, v51, v110, v111, v112, v113, v114);
      for (i = *((_DWORD *)this + 50); (signed int)i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
      {
        if (i + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v115, v116, v117, v118, v119, v120, v121);
          i = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
        i = *((_DWORD *)this + 50) + 4;
      }
      v123 = i;
      if (i + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v115, v116, v117, v118, v119, v120, v121);
        v123 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v123) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v124 = 69;
      else
        v124 = 65;
      *(_QWORD *)v453 = i;
      v453[8] = v124;
      *(_WORD *)&v453[9] = 15;
      v453[11] = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v456, (uint64_t)this, v116, v117, v118, v119, v120, v121);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v13 | 0x800000000, v45, v125, v126, v127, v128, v129);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v13 | 0x1000000000, v51, v130, v131, v132, v133, v134);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v453, (uint64_t)this, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x1000000000, v45, v100, v101, v102, v103, v104);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x400000000, v51, v397, v398, v399, v400, v401);
    }
  }
  v402 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v141 = v45 & 0x1F;
  v142 = v141 | (32 * v141) | 0xA100000;
  for (j = 1; j != v414; ++j)
  {
    v144 = (JSC::DFG::Edge *)((char *)&v458 + 8 * j);
    if (*(unsigned __int16 *)((*(_QWORD *)v144 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
      && ((v145 = **(_QWORD **)((*(_QWORD *)v144 & 0xFF00FFFFFFFFFFFFLL) + 0x48)) != 0
        ? (v146 = (v145 & 0xFFFE000000000002) == 0)
        : (v146 = 0),
          v146 && *(_BYTE *)(v145 + 5) == 2))
    {
      v196 = *(_QWORD *)(v145 + 8);
      if ((v196 & 1) != 0)
        v196 = (v196 >> 2) & 1;
      else
        LODWORD(v196) = (*(unsigned __int8 *)(v196 + 16) >> 2) & 1;
      if ((_DWORD)v196)
        v197 = 4;
      else
        v197 = 0;
      JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)v197, v52, v52);
      v201 = *(_QWORD *)(v145 + 8);
      if ((v201 & 1) != 0)
        v202 = (unsigned int *)(v145 + 16);
      else
        v202 = (unsigned int *)(v201 + 4);
      JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, v51, *v202, v51, v198, v199, v200, (uint64_t)v432);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v432);
    }
    else
    {
      v147 = JSC::DFG::SpeculativeJIT::canBeRope(this, v144, v88, v89, v90, v91, v92, v93);
      v148 = v444[j];
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v148 | 0x800000000, (char)v46, v149, v150, v151, v152, v153);
      *(_QWORD *)&v456 = 0xFFFFFFFFLL;
      DWORD2(v456) = -16773311;
      if (v147)
      {
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v46, 1, v155, v156, v157, v158, (uint64_t)v453, (int8x8_t)4278193985);
        LODWORD(v456) = *(_DWORD *)v453;
        *(_QWORD *)((char *)&v456 + 4) = *(_QWORD *)&v453[4];
      }
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        goto LABEL_292;
      }
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x1000000000, *((char *)this + 272), v154, v155, v156, v157, v158);
      v166 = *((_DWORD *)this + 50);
      if (v166 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v402, v159, v160, v161, v162, v163, v164, v165);
        v166 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v166) = v142;
      *((_DWORD *)this + 50) += 4;
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197C20568);
      }
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v46 | 0x400000000, *((char *)this + 272), v161, v162, v163, v164, v165);
      JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, v51, 16, v51, v167, v168, v169, (uint64_t)v431);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v431);
      if (v147)
      {
        for (k = *((_DWORD *)this + 50); (signed int)k < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = k)
        {
          if (k + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v402, v170, v88, v89, v90, v91, v92, v93);
            k = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + k) = -721215457;
          k = *((_DWORD *)this + 50) + 4;
        }
        v172 = k;
        if (k + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v402, v170, v88, v89, v90, v91, v92, v93);
          v172 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v172) = 335544320;
        *((_DWORD *)this + 50) += 4;
        if (*((_BYTE *)this + 328))
          v173 = 69;
        else
          v173 = 65;
        *(_QWORD *)v453 = k;
        v453[8] = v173;
        *(_WORD *)&v453[9] = 15;
        v453[11] = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v456, (uint64_t)this, v88, v89, v90, v91, v92, v93);
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197C205D4);
        }
        *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v148 | 0x800000000, *((char *)this + 272), v174, v175, v176, v177, v178);
        v186 = *((_DWORD *)this + 50);
        if (v186 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v402, v179, v180, v181, v182, v183, v184, v185);
          v186 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v186) = v142;
        *((_DWORD *)this + 50) += 4;
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v148 | 0x1000000000, (char)v46, v181, v182, v183, v184, v185);
        JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, v51, (char)v46, v51, v187, v188, v189, (uint64_t)v430);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v430);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v453, (uint64_t)this, v190, v191, v192, v193, v194, v195);
      }
    }
  }
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)4, v52, v52);
  v210 = *((_DWORD *)this + 50);
  if (v210 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v402, v203, v204, v205, v206, v207, v208, v209);
    v210 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v210) = ((v416 & 0x1F) << 16) | (32 * v141) | v141 | 0xAA000000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)this, (JSC::ARM64LogicalImmediate *)1, v52);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v52, v413 | 0x800000000, v211, v212, v213, v214, v215);
  v223 = *((_DWORD *)this + 50);
  if (v223 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v402, v216, v217, v218, v219, v220, v221, v222);
    v223 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v223) = ((v411 & 0x1F) << 16) | (32 * (v406 & 0x1F)) | v141 | 0xAA008000;
  v224 = *((_DWORD *)this + 50);
  v225 = v224 + 4;
  *((_DWORD *)this + 50) = v224 + 4;
  if ((v224 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v402, v216, v217, v218, v219, v220, v221, v222);
    v225 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v225) = v46 & 0x1F | (32 * (v411 & 0x1F)) | 0x9360FC00;
  v226 = *((_DWORD *)this + 50);
  v227 = v226 + 4;
  *((_DWORD *)this + 50) = v226 + 4;
  v228 = v413;
  if (v407)
  {
    if ((v226 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v402, v216, v217, v218, v219, v220, v221, v222);
      v228 = v413;
      v227 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v227) = ((v403 & 0x1F) << 16) | (32 * (v46 & 0x1F)) | v46 & 0x1F | 0xAA004000;
    *((_DWORD *)this + 50) += 4;
  }
  JSC::MacroAssemblerARM64::storePair64(this, v52, (char)v46, v228 | 0x1000000000, v219, v220, v221, v222);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v51, v229, v230, v231, v232, (uint64_t)v429, v233);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v427, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 41968), v234, v235, v236, v237, v238);
  if (v427 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v428, v415, v239, v240, v241, v242, v243);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v427 << 35) + 0x380000001ALL, v415, v239, v240, v241, v242, v243);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v429, (uint64_t)this, v244, v245, v246, v247, v248, v249);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v250, v251, v252, v253, v254, (uint64_t)&v456);
  v262 = *((_DWORD *)this + 50);
  if (v262 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v402, v255, v256, v257, v258, v259, v260, v261);
    v262 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v262) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v456, (uint64_t)this, v256, v257, v258, v259, v260, v261);
  v269 = HIDWORD(v434);
  if (v407)
  {
    v417 = (WTF *)v420;
    v418 = 2;
    v419 = HIDWORD(v434);
    if (HIDWORD(v434) < 3)
    {
      v292 = v420;
    }
    else
    {
      if (HIDWORD(v434) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2077CLL);
      }
      v291 = 12 * HIDWORD(v434);
      v292 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v434)));
      v418 = (v291 & 0xFFFFFFFC) / 0xC;
      v417 = (WTF *)v292;
      v269 = HIDWORD(v434);
    }
    if (v269)
    {
      v293 = v433;
      v294 = (WTF *)((char *)v433 + 12 * v269);
      do
      {
        *(_DWORD *)v292 = *(_DWORD *)v293;
        *(_QWORD *)(v292 + 4) = *(_QWORD *)((char *)v293 + 4);
        v293 = (WTF *)((char *)v293 + 12);
        v292 += 12;
      }
      while (v293 != v294);
    }
    v295 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v412, v263, v264, v265, v266, v267, v268);
    v297 = v296;
    v298 = v419;
    v445 = (WTF *)v448;
    v446 = 2;
    v447 = v419;
    if (v419 < 3)
    {
      v299 = v448;
    }
    else
    {
      if (v419 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C20784);
      }
      v299 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v419));
      v446 = 12 * v419 / 0xC;
      v445 = (WTF *)v299;
      v298 = v419;
    }
    if (v298)
    {
      v300 = v417;
      v301 = (WTF *)((char *)v417 + 12 * v298);
      do
      {
        *(_DWORD *)v299 = *(_DWORD *)v300;
        *(_QWORD *)(v299 + 4) = *(_QWORD *)((char *)v300 + 4);
        v300 = (WTF *)((char *)v300 + 12);
        v299 += 12;
      }
      while (v300 != v301);
    }
    v302 = WTF::fastMalloc((WTF *)0xB8);
    v303 = v447;
    v449 = (WTF *)v452;
    v450 = 2;
    v451 = v447;
    if (v447 < 3)
    {
      v305 = v452;
    }
    else
    {
      if (v447 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2078CLL);
      }
      v304 = 12 * v447;
      v305 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v447));
      v450 = (v304 & 0xFFFFFFFC) / 0xC;
      v449 = (WTF *)v305;
      v303 = v447;
    }
    if (v303)
    {
      v306 = v445;
      v307 = (WTF *)((char *)v445 + 12 * v303);
      do
      {
        *(_DWORD *)v305 = *(_DWORD *)v306;
        *(_QWORD *)(v305 + 4) = *(_QWORD *)((char *)v306 + 4);
        v306 = (WTF *)((char *)v306 + 12);
        v305 += 12;
      }
      while (v306 != v307);
    }
    v308 = v451;
    *(_QWORD *)v453 = v455;
    *(_DWORD *)&v453[8] = 2;
    v454 = v451;
    if (v451 < 3)
    {
      v309 = v297;
      v311 = v455;
    }
    else
    {
      if (v451 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C20794);
      }
      v309 = v297;
      v310 = 12 * v451;
      v311 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v451));
      *(_DWORD *)&v453[8] = (v310 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v453 = v311;
      v308 = v451;
    }
    if (v308)
    {
      v373 = v449;
      v374 = (WTF *)((char *)v449 + 12 * v308);
      do
      {
        *(_DWORD *)v311 = *(_DWORD *)v373;
        *(_QWORD *)(v311 + 4) = *(_QWORD *)((char *)v373 + 4);
        v373 = (WTF *)((char *)v373 + 12);
        v311 += 12;
      }
      while (v373 != v374);
    }
    v375 = v454;
    *(_QWORD *)&v456 = v457;
    DWORD2(v456) = 2;
    HIDWORD(v456) = v454;
    if (v454 < 3)
    {
      v377 = v457;
    }
    else
    {
      if (v454 >= 0x15555556)
      {
        __break(0xC471u);
LABEL_292:
        JUMPOUT(0x197C20538);
      }
      v376 = 12 * v454;
      v377 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v454));
      DWORD2(v456) = (v376 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)&v456 = v377;
      v375 = v454;
    }
    v317 = v411;
    if (v375)
    {
      v378 = *(_QWORD *)v453;
      v379 = *(_QWORD *)v453 + 12 * v375;
      do
      {
        *(_DWORD *)v377 = *(_DWORD *)v378;
        *(_QWORD *)(v377 + 4) = *(_QWORD *)(v378 + 4);
        v378 += 12;
        v377 += 12;
      }
      while (v378 != v379);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v302, (uint64_t *)&v456, this);
    v387 = v456;
    if (v457 != (_BYTE *)v456 && (_QWORD)v456 != 0)
    {
      *(_QWORD *)&v456 = 0;
      DWORD2(v456) = 0;
      WTF::fastFree(v387, v380, v381, v382, v383, v384, v385, v386);
    }
    *(_QWORD *)v302 = off_1E35743A0;
    *(_QWORD *)(v302 + 92) = 0xFFFFFFFFLL;
    *(_WORD *)(v302 + 100) = 0;
    *(_BYTE *)(v302 + 102) = v415;
    *(_QWORD *)(v302 + 104) = v302 + 120;
    *(_QWORD *)(v302 + 112) = 2;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v302 + 104, v415, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v385, v386);
    v389 = *(_QWORD *)v453;
    if (v455 != *(_BYTE **)v453 && *(_QWORD *)v453)
    {
      memset(v453, 0, sizeof(v453));
      WTF::fastFree(v389, v329, v330, v331, v332, v333, v334, v335);
    }
    *(_QWORD *)v302 = &off_1E3574370;
    *(_QWORD *)(v302 + 152) = operationMakeRope3;
    *(_QWORD *)(v302 + 160) = v295;
    *(_QWORD *)(v302 + 168) = v309;
    v348 = v416;
    *(_BYTE *)(v302 + 176) = v416;
    *(_BYTE *)(v302 + 177) = v411;
    *(_BYTE *)(v302 + 178) = v403;
    v421 = v302;
    v390 = v449;
    if (v452 != (_BYTE *)v449 && v449)
    {
      v449 = 0;
      v450 = 0;
      WTF::fastFree((unint64_t)v390, v329, v330, v331, v332, v333, v334, v335);
    }
    v391 = v445;
    v347 = v405;
    v339 = v412;
    v349 = v415;
    if (v448 != (_BYTE *)v445 && v445)
    {
      v445 = 0;
      v446 = 0;
      WTF::fastFree((unint64_t)v391, v329, v330, v331, v332, v333, v334, v335);
    }
    v392 = (_QWORD *)((char *)this + 5656);
    v393 = *((unsigned int *)this + 1417);
    v342 = v404;
    if ((_DWORD)v393 == *((_DWORD *)this + 1416))
    {
      v395 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v392, v393 + 1, (unint64_t)&v421);
      v393 = *((unsigned int *)this + 1417);
      v394 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v393);
      v302 = *v395;
    }
    else
    {
      v394 = (uint64_t *)(*v392 + 8 * v393);
      v395 = &v421;
    }
    *v395 = 0;
    *v394 = v302;
    *((_DWORD *)this + 1417) = v393 + 1;
    v396 = v421;
    v421 = 0;
    if (v396)
      (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
    v346 = v417;
    if (v420 != (_BYTE *)v417 && v417)
    {
      v350 = &v418;
      goto LABEL_176;
    }
  }
  else
  {
    v422 = (WTF *)v425;
    v423 = 2;
    v424 = HIDWORD(v434);
    if (HIDWORD(v434) < 3)
    {
      v271 = v425;
    }
    else
    {
      if (HIDWORD(v434) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C20754);
      }
      v270 = 12 * HIDWORD(v434);
      v271 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v434)));
      v423 = (v270 & 0xFFFFFFFC) / 0xC;
      v422 = (WTF *)v271;
      v269 = HIDWORD(v434);
    }
    if (v269)
    {
      v272 = v433;
      v273 = (WTF *)((char *)v433 + 12 * v269);
      do
      {
        *(_DWORD *)v271 = *(_DWORD *)v272;
        *(_QWORD *)(v271 + 4) = *(_QWORD *)((char *)v272 + 4);
        v272 = (WTF *)((char *)v272 + 12);
        v271 += 12;
      }
      while (v272 != v273);
    }
    v274 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v412, v263, v264, v265, v266, v267, v268);
    v276 = v275;
    v277 = v424;
    v445 = (WTF *)v448;
    v446 = 2;
    v447 = v424;
    if (v424 < 3)
    {
      v278 = v448;
    }
    else
    {
      if (v424 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2075CLL);
      }
      v278 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v424));
      v446 = 12 * v424 / 0xC;
      v445 = (WTF *)v278;
      v277 = v424;
    }
    if (v277)
    {
      v279 = v422;
      v280 = (WTF *)((char *)v422 + 12 * v277);
      do
      {
        *(_DWORD *)v278 = *(_DWORD *)v279;
        *(_QWORD *)(v278 + 4) = *(_QWORD *)((char *)v279 + 4);
        v279 = (WTF *)((char *)v279 + 12);
        v278 += 12;
      }
      while (v279 != v280);
    }
    v281 = WTF::fastMalloc((WTF *)0xB8);
    v282 = v447;
    v449 = (WTF *)v452;
    v450 = 2;
    v451 = v447;
    if (v447 < 3)
    {
      v284 = v452;
    }
    else
    {
      if (v447 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C20764);
      }
      v283 = 12 * v447;
      v284 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v447));
      v450 = (v283 & 0xFFFFFFFC) / 0xC;
      v449 = (WTF *)v284;
      v282 = v447;
    }
    if (v282)
    {
      v285 = v445;
      v286 = (WTF *)((char *)v445 + 12 * v282);
      do
      {
        *(_DWORD *)v284 = *(_DWORD *)v285;
        *(_QWORD *)(v284 + 4) = *(_QWORD *)((char *)v285 + 4);
        v285 = (WTF *)((char *)v285 + 12);
        v284 += 12;
      }
      while (v285 != v286);
    }
    v287 = v451;
    *(_QWORD *)v453 = v455;
    *(_DWORD *)&v453[8] = 2;
    v454 = v451;
    if (v451 < 3)
    {
      v288 = v276;
      v290 = v455;
    }
    else
    {
      if (v451 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2076CLL);
      }
      v288 = v276;
      v289 = 12 * v451;
      v290 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v451));
      *(_DWORD *)&v453[8] = (v289 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v453 = v290;
      v287 = v451;
    }
    if (v287)
    {
      v312 = v449;
      v313 = (WTF *)((char *)v449 + 12 * v287);
      do
      {
        *(_DWORD *)v290 = *(_DWORD *)v312;
        *(_QWORD *)(v290 + 4) = *(_QWORD *)((char *)v312 + 4);
        v312 = (WTF *)((char *)v312 + 12);
        v290 += 12;
      }
      while (v312 != v313);
    }
    v314 = v454;
    *(_QWORD *)&v456 = v457;
    DWORD2(v456) = 2;
    HIDWORD(v456) = v454;
    if (v454 < 3)
    {
      v316 = v457;
    }
    else
    {
      if (v454 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C20774);
      }
      v315 = 12 * v454;
      v316 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v454));
      DWORD2(v456) = (v315 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)&v456 = v316;
      v314 = v454;
    }
    v317 = v411;
    if (v314)
    {
      v318 = *(_QWORD *)v453;
      v319 = *(_QWORD *)v453 + 12 * v314;
      do
      {
        *(_DWORD *)v316 = *(_DWORD *)v318;
        *(_QWORD *)(v316 + 4) = *(_QWORD *)(v318 + 4);
        v318 += 12;
        v316 += 12;
      }
      while (v318 != v319);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v281, (uint64_t *)&v456, this);
    v327 = v456;
    if (v457 != (_BYTE *)v456 && (_QWORD)v456 != 0)
    {
      *(_QWORD *)&v456 = 0;
      DWORD2(v456) = 0;
      WTF::fastFree(v327, v320, v321, v322, v323, v324, v325, v326);
    }
    *(_QWORD *)v281 = off_1E3574340;
    *(_QWORD *)(v281 + 92) = 0xFFFFFFFFLL;
    *(_WORD *)(v281 + 100) = 0;
    *(_BYTE *)(v281 + 102) = v415;
    *(_QWORD *)(v281 + 104) = v281 + 120;
    *(_QWORD *)(v281 + 112) = 2;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v281 + 104, v415, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v325, v326);
    v336 = *(_QWORD *)v453;
    if (v455 != *(_BYTE **)v453 && *(_QWORD *)v453)
    {
      memset(v453, 0, sizeof(v453));
      WTF::fastFree(v336, v329, v330, v331, v332, v333, v334, v335);
    }
    *(_QWORD *)v281 = &off_1E3574310;
    *(_QWORD *)(v281 + 152) = operationMakeRope2;
    *(_QWORD *)(v281 + 160) = v274;
    *(_QWORD *)(v281 + 168) = v288;
    *(_BYTE *)(v281 + 176) = v416;
    *(_BYTE *)(v281 + 177) = v411;
    v426 = v281;
    v337 = v449;
    if (v452 != (_BYTE *)v449 && v449)
    {
      v449 = 0;
      v450 = 0;
      WTF::fastFree((unint64_t)v337, v329, v330, v331, v332, v333, v334, v335);
    }
    v338 = v445;
    v339 = v412;
    if (v448 != (_BYTE *)v445 && v445)
    {
      v445 = 0;
      v446 = 0;
      WTF::fastFree((unint64_t)v338, v329, v330, v331, v332, v333, v334, v335);
    }
    v340 = (_QWORD *)((char *)this + 5656);
    v341 = *((unsigned int *)this + 1417);
    v342 = v404;
    if ((_DWORD)v341 == *((_DWORD *)this + 1416))
    {
      v344 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v340, v341 + 1, (unint64_t)&v426);
      v341 = *((unsigned int *)this + 1417);
      v343 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v341);
      v281 = *v344;
    }
    else
    {
      v343 = (uint64_t *)(*v340 + 8 * v341);
      v344 = &v426;
    }
    *v344 = 0;
    *v343 = v281;
    *((_DWORD *)this + 1417) = v341 + 1;
    v345 = v426;
    v426 = 0;
    if (v345)
      (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
    v346 = v422;
    v347 = v405;
    v348 = v416;
    v349 = v415;
    if (v425 != (_BYTE *)v422 && v422)
    {
      v350 = &v423;
      v422 = 0;
LABEL_176:
      *v350 = 0;
      WTF::fastFree((unint64_t)v346, v329, v330, v331, v332, v333, v334, v335);
    }
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v339, v330, v331, v332, v333, v334, v335);
  v358 = (char *)this + 4776;
  v359 = *((_DWORD *)v339 + 12);
  if (v349 > 15)
    v360 = -1;
  else
    v360 = v349;
  v361 = &v358[12 * v360];
  *(_DWORD *)v361 = v359;
  *((_DWORD *)v361 + 1) = 4;
  v362 = ~v359;
  if (v362 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C2074CLL);
  }
  v363 = *((_QWORD *)this + 499) + 24 * (int)v362;
  v364 = *((_DWORD *)v339 + 13);
  *(_QWORD *)v363 = v339;
  *(_DWORD *)(v363 + 8) = v364;
  *(_BYTE *)(v363 + 17) = v349;
  *(_DWORD *)(v363 + 12) = 6;
  *(_BYTE *)(v363 + 16) = 0;
  v365 = v433;
  if (v435 != (_BYTE *)v433 && v433)
  {
    v433 = 0;
    LODWORD(v434) = 0;
    WTF::fastFree((unint64_t)v365, v351, v352, v353, v354, v355, v356, v357);
  }
  if (v436)
  {
    v366 = (char)v437;
    if ((char)v437 != -1)
    {
      if ((char)v437 > 15)
        v366 = -1;
      --*(_DWORD *)(v436 + 12 * v366 + 4784);
    }
  }
  if (v438)
  {
    v367 = v439;
    if (v439 != -1)
    {
      if (v439 > 15)
        v367 = -1;
      --*(_DWORD *)(v438 + 12 * v367 + 4784);
    }
  }
  if (v440)
  {
    v368 = v441;
    if (v441 != -1)
    {
      if (v441 > 15)
        v368 = -1;
      --*(_DWORD *)(v440 + 12 * v368 + 4784);
    }
  }
  if (v442)
  {
    v369 = (char)v443;
    if ((char)v443 != -1)
    {
      if ((char)v443 > 15)
        v369 = -1;
      --*(_DWORD *)(v442 + 12 * v369 + 4784);
    }
  }
  if (v408)
  {
    if (v409 > 15)
      v370 = -1;
    else
      v370 = v409;
    --*(_DWORD *)&v358[12 * v370 + 8];
  }
  if (v342)
  {
    if (v317 > 15)
      v371 = -1;
    else
      v371 = v317;
    --*(_DWORD *)&v358[12 * v371 + 8];
  }
  if (v347)
  {
    if (v348 > 15)
      v372 = -1;
    else
      v372 = v348;
    --*(_DWORD *)&v358[12 * v372 + 8];
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileMakeAtomString(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  int v21;
  JSC::DFG::Node *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *result;
  int v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_41;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20B78);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_41:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v52 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_42;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20B80);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_42:
    v15 = -1;
  v16 = *((_QWORD *)a2 + 5);
  v17 = -1;
  v53 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_43;
  v18 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20B70);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  else
LABEL_43:
    v19 = -1;
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v20 = -1;
  if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 == -1)
      v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
    if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (v19 == -1)
        v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
      v21 = 3;
      v20 = v15;
      v17 = v19;
    }
    else
    {
      v21 = 2;
      v20 = v15;
    }
  }
  else
  {
    v21 = 1;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v28 = *((unsigned int *)this + 1194);
  if ((_DWORD)v28 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v28, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  if (v21 == 2)
  {
    v29 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v22, v23, v24, v25, v26, v27);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v54, (int *)this, (uint64_t)operationMakeAtomString2, v29, v30, v12, v20, v31);
  }
  else
  {
    v47 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v22, v23, v24, v25, v26, v27);
    if (v21 == 3)
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v54, (unsigned __int8 *)this, (uint64_t)operationMakeAtomString3, v47, v48, v12, v20, v17);
    else
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v54, (unsigned __int8 *)this, v47, v48, v12, v49, v50, v51);
  }
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v32, v33, v34, v35, v36, v37);
  v39 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v39;
  *((_DWORD *)this + 1195) = 4;
  v40 = ~v39;
  if (v40 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C20B88);
  }
  v41 = (char *)this + 4776;
  v42 = *((_QWORD *)this + 499) + 24 * (int)v40;
  v43 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v42 = a2;
  *(_DWORD *)(v42 + 8) = v43;
  *(_BYTE *)(v42 + 12) = 6;
  *(_DWORD *)(v42 + 13) = 0;
  *(_BYTE *)(v42 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v19 > 15)
      v44 = -1;
    else
      v44 = v19;
    --*(_DWORD *)&v41[12 * v44 + 8];
  }
  if (v52)
  {
    if (v15 > 15)
      v45 = -1;
    else
      v45 = v15;
    --*(_DWORD *)&v41[12 * v45 + 8];
  }
  if (v53)
  {
    if (v12 > 15)
      v46 = -1;
    else
      v46 = v12;
    --*(_DWORD *)&v41[12 * v46 + 8];
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  JSC::AssemblerBuffer *v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  _BYTE v62[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  v12 = &v61;
  if ((_DWORD)a5 != 1)
  {
    v61 = a5 | 0x100;
    v59 = 1;
    v58 = (JSC::AssemblerBuffer *)(a2 + 56);
    v13 = 1;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = v13;
      do
      {
        if ((v62[v14 - 1] & 0x40) != 0)
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v15 |= 1 << v62[v14 - 1];
        v14 += 2;
      }
      while (2 * v13 != v14);
      v17 = 0;
      do
      {
        v18 = v62[v17 - 2] & 0x7F;
        if (v18 >= 0x40)
          goto LABEL_57;
        v15 &= ~(1 << v18);
        v17 += 2;
      }
      while (2 * v13 != v17);
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v19.i16[0] = vaddlv_u8(v19);
      v20 = v19.i32[0];
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.i32[0] + v20)
      {
        v22 = 0;
        if (v13 <= 1)
          v23 = 1;
        else
          v23 = v13;
        v24 = 2 * v23;
        while (1)
        {
          v25 = v62[v22 - 1];
          if ((v25 & 0x7Fu) >= 0x40)
            goto LABEL_57;
          if (((v15 >> (v25 & 0x7F)) & 1) != 0)
            break;
          v22 += 2;
          if (v24 == v22)
            goto LABEL_33;
        }
        v26 = v62[v22 - 2];
        if (v26 != v25)
        {
          if ((char)v26 == 63)
          {
            if (v25 == 31)
              goto LABEL_27;
            v28 = v25 & 0x1F | 0xD2800000;
          }
          else
          {
            v27 = (char)v25 == 31 || (char)v26 == 31;
            if (!v27)
            {
              v28 = v25 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v28 = (char)v25 | (32 * (char)v26) | 0x91000000;
          }
LABEL_28:
          v29 = *(_DWORD *)(v10 + 200);
          if (v29 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v58, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v29 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v29) = v28;
          *(_DWORD *)(v10 + 200) += 4;
          v16 = v59;
        }
        a1 = (int *)memmove(&v62[v22 - 2], &v62[v22], 2 * v16 - v22 - 2);
        v13 = v59 - 1;
        goto LABEL_32;
      }
      v57 = v12;
      v30 = HIBYTE(v61);
      v31 = v61;
      JSC::MacroAssemblerARM64::swap(v10, (char)v61, SHIBYTE(v61), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v61, v62, 2 * v59 - 2);
      v32 = v59 - 1;
      v27 = v59 == 1;
      v60 = v32;
      v33 = (char *)&v61;
      v34 = &v62[2 * v32 - 2];
      if (v27)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        a2 = &v62[2 * v32 - 2];
      }
      else
      {
        v39 = 2 * v32;
        v40 = &v61;
        while (*(unsigned __int8 *)v40 != v30)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v31;
LABEL_43:
        v37 = 0;
        v41 = (char *)&v61;
        a2 = (unsigned __int8 *)v34;
        v42 = v34;
        do
        {
          if (*v33 == v33[1])
          {
            v43 = v33;
            if (v42 != &v62[2 * v60 - 2])
            {
              if (v33 == (char *)a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - (char *)a2;
                a1 = (int *)memmove(v42, a2, v41 - (char *)a2);
                v43 = &v42[v44];
              }
            }
            a2 = (unsigned __int8 *)(v33 + 2);
            ++v37;
            v42 = v43;
          }
          v33 += 2;
          v41 += 2;
        }
        while (v33 < v34);
        v35 = v60;
        v36 = v60;
        v34 = v42;
      }
      v38 = &v62[2 * v35 - 2];
      if (a2 != v38)
      {
        a1 = (int *)memmove(v34, a2, v38 - a2);
        v36 = v60;
      }
      v13 = v36 - v37;
      v12 = v57;
LABEL_32:
      v59 = v13;
LABEL_33:
      ;
    }
    while (v13);
    a1 = (int *)&v61;
    if (v12 == &v61)
      goto LABEL_54;
LABEL_58:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationMakeAtomString1, v45, v46, v47, v48, v49, v50, v11);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  unint64_t v38;
  JSC::DFG::Node *v39;

  v39 = a2;
  v8 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v8 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3));
  v37[0] = this;
  v37[1] = &v39;
  v37[2] = &v38;
  v38 = v10;
  v11 = (v10 >> 50) & 0x3F;
  if ((v11 - 8) >= 2)
  {
    v27 = v11 > 0x26;
    v28 = (1 << v11) & 0x7FEAB7F800;
    if (v27 || v28 == 0)
    {
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_24;
      v30 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v30 < *((unsigned int *)this + 1001))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v30 + 12))
        {
          v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
          if (v13 != -1)
            goto LABEL_7;
        }
LABEL_24:
        v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator()((uint64_t)v37, v13, v31, v32, v33, v34, v35, v36);
        if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
        goto LABEL_10;
      }
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x197C21130);
    }
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_8;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197C21138);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
LABEL_8:
    JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, v10, a4, a5, a6, a7, a8);
LABEL_9:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator()((uint64_t)v37, v13, v20, v21, v22, v23, v24, v25);
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      return;
    goto LABEL_10;
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculate(this, v14, v38, v15, v16, v17, v18, v19);
  if (v13 == -1)
    goto LABEL_9;
LABEL_7:
  JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator()((uint64_t)v37, v13, a3, a4, a5, a6, a7, a8);
LABEL_10:
  if (v13 > 15)
    v26 = -1;
  else
    v26 = v13;
  --*((_DWORD *)this + 3 * v26 + 1196);
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator()(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  JSC::DFG::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  _BYTE *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  _QWORD *v44;
  _BYTE *v45;
  _BYTE *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int v69;
  WTF *v70;
  char v71;
  char v72;
  char v73;
  WTF *v74;
  unsigned int v75;
  _BYTE v76[24];
  uint64_t v77;
  WTF *v78;
  WTF **v79;
  _QWORD v80[10];
  WTF *v81;
  uint64_t v82;
  _BYTE v83[29];
  char v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  _BYTE v96[24];
  _BYTE *v97;
  unsigned int v98;
  unsigned int v99;
  _BYTE v100[24];
  _BYTE *v101;
  unsigned int v102;
  unsigned int v103;
  _BYTE v104[32];

  v92 = a2;
  v89 = (WTF *)v91;
  v90 = 2;
  v87 = 0;
  v88 = -1;
  v86 = -1;
  v85 = 0;
  v84 = 0;
  v81 = (WTF *)v83;
  v82 = 2;
  v10 = *(_QWORD *)a1;
  v9 = *(uint64_t **)(a1 + 8);
  v11 = *v9;
  v12 = *(_QWORD *)(a1 + 16);
  v78 = (WTF *)WTF::ScopedLambdaFunctor<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat),JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator() const(JSC::JSValueRegs)::{lambda(JSC::DataFormat)#1}>::implFunction;
  v79 = &v78;
  v80[0] = v10;
  v80[1] = v9;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v87;
  v80[5] = &v86;
  v80[6] = &v81;
  v80[7] = v12;
  v80[8] = &v92;
  v80[9] = &v89;
  JSC::DFG::SpeculativeJIT::compileGetByVal(v10, v11, (uint64_t)&v78, a4, a5, a6, a7, a8);
  if (HIDWORD(v82))
  {
    v74 = (WTF *)v76;
    v75 = HIDWORD(v82);
    if (HIDWORD(v82) <= 2)
    {
      v21 = v81;
      v22 = (WTF *)((char *)v81 + 12 * HIDWORD(v82));
      v20 = v76;
    }
    else
    {
      if (HIDWORD(v82) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C217B0);
      }
      v20 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v82)));
      v74 = (WTF *)v20;
      if (!HIDWORD(v82))
        goto LABEL_8;
      v21 = v81;
      v22 = (WTF *)((char *)v81 + 12 * HIDWORD(v82));
    }
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *(_QWORD *)(v20 + 4) = *(_QWORD *)((char *)v21 + 4);
      v21 = (WTF *)((char *)v21 + 12);
      v20 += 12;
    }
    while (v21 != v22);
LABEL_8:
    v71 = v86;
    v23 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v10, **(JSC::DFG::JITCompiler ***)(a1 + 8), v14, v15, v16, v17, v18, v19);
    v25 = v24;
    v26 = v92;
    v27 = v75;
    v93 = v96;
    v94 = 2;
    v95 = v75;
    v72 = v84;
    v73 = v85;
    if (v75 < 3)
    {
      v28 = v96;
    }
    else
    {
      if (v75 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C217B8);
      }
      v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v75));
      v94 = 12 * v75 / 0xC;
      v93 = v28;
      v27 = v75;
    }
    v29 = v74;
    v30 = (WTF *)((char *)v74 + 12 * v27);
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)((char *)v29 + 4);
      v29 = (WTF *)((char *)v29 + 12);
      v28 += 12;
    }
    while (v29 != v30);
    v31 = WTF::fastMalloc((WTF *)0xB8);
    v32 = v95;
    v97 = v100;
    v98 = 2;
    v99 = v95;
    if (v95 < 3)
    {
      v34 = v100;
    }
    else
    {
      if (v95 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C217C0);
      }
      v33 = 12 * v95;
      v34 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v95));
      v98 = (v33 & 0xFFFFFFFC) / 0xC;
      v97 = v34;
      v32 = v95;
    }
    if (v32)
    {
      v35 = v93;
      v36 = &v93[12 * v32];
      do
      {
        *(_DWORD *)v34 = *(_DWORD *)v35;
        *(_QWORD *)(v34 + 4) = *(_QWORD *)(v35 + 4);
        v35 += 12;
        v34 += 12;
      }
      while (v35 != v36);
    }
    v37 = v99;
    v101 = v104;
    v102 = 2;
    v103 = v99;
    if (v99 < 3)
    {
      v39 = v104;
    }
    else
    {
      if (v99 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197C217C8);
      }
      v38 = 12 * v99;
      v39 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v99));
      v102 = (v38 & 0xFFFFFFFC) / 0xC;
      v101 = v39;
      v37 = v99;
    }
    if (v37)
    {
      v40 = v97;
      v41 = &v97[12 * v37];
      do
      {
        *(_DWORD *)v39 = *(_DWORD *)v40;
        *(_QWORD *)(v39 + 4) = *(_QWORD *)(v40 + 4);
        v40 += 12;
        v39 += 12;
      }
      while (v40 != v41);
    }
    v42 = v103;
    v78 = (WTF *)v80;
    LODWORD(v79) = 2;
    HIDWORD(v79) = v103;
    if (v103 < 3)
    {
      v44 = v80;
    }
    else
    {
      if (v103 >= 0x15555556)
        goto LABEL_80;
      v43 = 12 * v103;
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v103));
      LODWORD(v79) = (v43 & 0xFFFFFFFC) / 0xC;
      v78 = (WTF *)v44;
      v42 = v103;
    }
    if (v42)
    {
      v45 = v101;
      v46 = &v101[12 * v42];
      do
      {
        *(_DWORD *)v44 = *(_DWORD *)v45;
        *(_QWORD *)((char *)v44 + 4) = *(_QWORD *)(v45 + 4);
        v45 += 12;
        v44 = (_QWORD *)((char *)v44 + 12);
      }
      while (v45 != v46);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v31, (uint64_t *)&v78, (_DWORD *)v10);
    v54 = v78;
    if (v80 != (_QWORD *)v78 && v78 != 0)
    {
      v78 = 0;
      LODWORD(v79) = 0;
      WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
    }
    *(_QWORD *)v31 = off_1E3572BE0;
    *(_QWORD *)(v31 + 92) = 0xFFFFFFFFLL;
    *(_WORD *)(v31 + 100) = 0;
    *(_BYTE *)(v31 + 102) = v71;
    *(_QWORD *)(v31 + 104) = v31 + 120;
    *(_QWORD *)(v31 + 112) = 2;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v10, 0, v31 + 104, v71, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v52, v53);
    v56 = (unint64_t)v101;
    if (v104 != v101 && v101)
    {
      v101 = 0;
      v102 = 0;
      WTF::fastFree(v56, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    }
    *(_QWORD *)v31 = &off_1E3572BB0;
    *(_QWORD *)(v31 + 152) = operationEnumeratorRecoverNameAndGetByVal;
    *(_QWORD *)(v31 + 160) = v23;
    *(_QWORD *)(v31 + 168) = v25;
    *(_BYTE *)(v31 + 176) = v26;
    *(_BYTE *)(v31 + 177) = v73;
    *(_BYTE *)(v31 + 178) = v72;
    v77 = v31;
    v57 = (unint64_t)v97;
    if (v100 != v97 && v97)
    {
      v97 = 0;
      v98 = 0;
      WTF::fastFree(v57, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    }
    v58 = (unint64_t)v93;
    if (v96 != v93 && v93)
    {
      v93 = 0;
      v94 = 0;
      WTF::fastFree(v58, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    }
    v59 = (_QWORD *)(v10 + 5656);
    v60 = *(unsigned int *)(v10 + 5668);
    if ((_DWORD)v60 == *(_DWORD *)(v10 + 5664))
    {
      v62 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v77);
      v60 = *(unsigned int *)(v10 + 5668);
      v61 = (uint64_t *)(*(_QWORD *)(v10 + 5656) + 8 * v60);
      v31 = *v62;
    }
    else
    {
      v61 = (uint64_t *)(*v59 + 8 * v60);
      v62 = &v77;
    }
    *v62 = 0;
    *v61 = v31;
    *(_DWORD *)(v10 + 5668) = v60 + 1;
    v63 = v77;
    v77 = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    if (v76 != (_BYTE *)v74 && v74)
      WTF::fastFree((unint64_t)v74, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
  }
  if (HIDWORD(v90))
  {
    v64 = 0;
    v65 = 0;
    v66 = 12 * HIDWORD(v90);
    while (v65 < HIDWORD(v90))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v64), v10, (uint64_t)v14, v15, v16, v17, v18, v19);
      ++v65;
      v64 += 12;
      if (v66 == v64)
        goto LABEL_60;
    }
LABEL_80:
    __break(0xC471u);
    JUMPOUT(0x197C217A8);
  }
LABEL_60:
  v67 = v81;
  if (v83 != (_BYTE *)v81 && v81 != 0)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree((unint64_t)v67, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
  }
  if (v87)
  {
    v69 = v88;
    if (v88 != -1)
    {
      if (v88 > 15)
        v69 = -1;
      --*(_DWORD *)(v87 + 12 * v69 + 4784);
    }
  }
  v70 = v89;
  if (v91 != (_BYTE *)v89)
  {
    if (v89)
    {
      v89 = 0;
      LODWORD(v90) = 0;
      WTF::fastFree((unint64_t)v70, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    }
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileStringLocaleCompare(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::DFG::Node *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *result;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v57, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v54, (uint64_t)this, *((_QWORD *)a2 + 4), v10, v11, v12, v13, v14);
  v21 = v59;
  if (v59 == 255)
  {
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v57, v58, v15, v16, v17, v18, v19, v20);
    v59 = v21;
  }
  v22 = v56;
  if (v56 == 255)
  {
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v54, v55, v15, v16, v17, v18, v19, v20);
    v56 = v22;
  }
  v23 = (char)v21;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v23, v16, v17, v18, v19, v20);
  v24 = (char)v22;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v24, v25, v26, v27, v28, v29);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v30, v31, v32, v33, v34, v35, v36);
  ++*((_DWORD *)this + 1196);
  v43 = *((unsigned int *)this + 1194);
  if ((_DWORD)v43 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v43, (uint64_t)v37, v38, v39, v40, v41, v42);
  }
  v44 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v37, v38, v39, v40, v41, v42);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v53, (int *)this, (uint64_t)operationStringLocaleCompare, v44, v45, v23, v24, v46);
  result = JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, 0, a2, 1, 0, v47, v48, v49);
  --*((_DWORD *)this + 1196);
  if ((v55 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v51 = (char)v56;
    if ((char)v56 > 15)
      v51 = -1;
    --*(_DWORD *)(v54 + 12 * v51 + 4784);
  }
  if ((v58 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v52 = (char)v59;
    if ((char)v59 > 15)
      v52 = -1;
    --*(_DWORD *)(v57 + 12 * v52 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileStringIndexOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::DFG::Graph *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::DFG::Node *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char v88;
  char v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint8x8_t v98;
  __int32 v99;
  uint8x8_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  __int128 *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::DFG::Node *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  char v171;
  char v172;
  int v173;
  uint64_t v174;
  unsigned __int8 *v175;
  char *v176;
  uint64_t v177;
  int v178;
  unsigned __int8 *v179;
  uint64_t v180;
  _BYTE *v181;
  unsigned __int8 *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  char *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  JSC::DFG::SpeculativeJIT *v194[2];
  unsigned __int8 v195;
  _BYTE v196[7];
  uint64_t v197;
  unint64_t v198;
  unsigned __int8 v199;
  WTF::StringImpl *v200;
  __int128 v201;
  char v202[16];

  v10 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
  v11 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
  v12 = *(unsigned __int16 *)(v10 + 18);
  if (v12 <= 2)
    goto LABEL_81;
  if (*(unsigned __int16 *)(v10 + 18) > 0xB5u)
  {
    if (v12 == 182)
    {
LABEL_81:
      v113 = *(__int128 **)(v10 + 72);
LABEL_82:
      DWORD2(v201) = 0;
      *(_QWORD *)&v201 = v113;
      goto LABEL_83;
    }
    if (v12 == 355 || v12 == 348)
    {
      v113 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      goto LABEL_82;
    }
LABEL_3:
    v13 = 0;
    v200 = 0;
LABEL_4:
    v14 = 1;
    goto LABEL_5;
  }
  if (v12 != 3)
    goto LABEL_3;
  v201 = *(_OWORD *)*(_QWORD *)(v10 + 72);
LABEL_83:
  JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v201, v11, a4, a5, a6, a7, a8, (int **)&v200);
  if (!v200 || *((_DWORD *)v200 + 1) != 1)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v122 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
  v14 = 0;
  if ((*((_BYTE *)v200 + 16) & 4) != 0)
    v13 = *v122;
  else
    v13 = *(unsigned __int16 *)v122;
LABEL_5:
  if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
    v15 = *((_QWORD *)a2 + 3);
    v16 = v15 & 0xFF00FFFFFFFFFFFFLL;
    if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_87;
    v17 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C222E0);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_87:
      v18 = -1;
    v19 = *((_QWORD *)a2 + 4);
    if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_88;
    v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v20 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
    else
LABEL_88:
      v21 = -1;
    if (v18 == -1)
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
    if (v21 == -1)
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
    v22 = v18;
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v22, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v21, v23, v24, v25, v26, v27);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v28, v29, v30, v31, v32, v33, v34);
    ++*((_DWORD *)this + 1196);
    v41 = *((unsigned int *)this + 1194);
    if ((_DWORD)v41 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v41, (uint64_t)v35, v36, v37, v38, v39, v40);
    }
    v42 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v35, v36, v37, v38, v39, v40);
    v49 = v42;
    v50 = (uint64_t)v43;
    if ((v14 & 1) != 0)
    {
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v201, (int *)this, (uint64_t)operationStringIndexOf, v42, (uint64_t)v43, v18, v21, v48);
      goto LABEL_25;
    }
    v191 = v42;
    v192 = v16;
    v51 = v202;
    *(_QWORD *)&v201 = v202;
    DWORD2(v201) = 1;
    if (v18 == 1)
      goto LABEL_22;
    *(_WORD *)v202 = v18 | 0x100;
    HIDWORD(v201) = 1;
    v91 = 1;
    v190 = (uint64_t)v43;
    while (1)
    {
      v92 = 0;
      v93 = 0;
      v94 = v201;
      v95 = v91;
      do
      {
        if ((*(_BYTE *)(v201 + v92 + 1) & 0x40) != 0)
          goto LABEL_139;
        v93 |= 1 << *(_BYTE *)(v201 + v92 + 1);
        v92 += 2;
      }
      while (2 * v91 != v92);
      v96 = 0;
      do
      {
        v97 = *(_BYTE *)(v201 + v96) & 0x7F;
        if (v97 >= 0x40)
          goto LABEL_139;
        v93 &= ~(1 << v97);
        v96 += 2;
      }
      while (2 * v91 != v96);
      v98 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
      v98.i16[0] = vaddlv_u8(v98);
      v99 = v98.i32[0];
      v100 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v93));
      v100.i16[0] = vaddlv_u8(v100);
      if (!(v100.i32[0] + v99))
      {
        v188 = v51;
        v186 = v13;
        v187 = v22;
        v171 = *(_BYTE *)v201;
        v172 = *(_BYTE *)(v201 + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v201, v172, v49, v45, v46, v47, v48);
        memmove((void *)v201, (const void *)(v201 + 2), 2 * HIDWORD(v201) - 2);
        v173 = HIDWORD(v201);
        v174 = (HIDWORD(v201) - 1);
        HIDWORD(v201) = v174;
        v175 = (unsigned __int8 *)v201;
        v176 = (char *)(v201 + 2 * v174);
        if (v173 == 1)
        {
          v177 = 0;
          v178 = 0;
          v189 = 0;
          v43 = (unsigned __int8 *)(v201 + 2 * v174);
        }
        else
        {
          v180 = 2 * v174;
          v181 = (_BYTE *)v201;
          while (*v181 != v172)
          {
            v181 += 2;
            v180 -= 2;
            if (!v180)
              goto LABEL_126;
          }
          *v181 = v171;
LABEL_126:
          v189 = 0;
          v182 = v175;
          v183 = v176;
          v43 = (unsigned __int8 *)v176;
          do
          {
            if (*v175 == v175[1])
            {
              v184 = (char *)v175;
              if (v183 != (char *)(v201 + 2 * HIDWORD(v201)))
              {
                if (v175 == v43)
                {
                  v184 = v183;
                }
                else
                {
                  v185 = v182 - v43;
                  memmove(v183, v43, v182 - v43);
                  v184 = &v183[v185];
                }
              }
              v43 = v175 + 2;
              ++v189;
              v183 = v184;
            }
            v175 += 2;
            v182 += 2;
          }
          while (v175 < (unsigned __int8 *)v176);
          v175 = (unsigned __int8 *)v201;
          v177 = HIDWORD(v201);
          v178 = HIDWORD(v201);
          v176 = v183;
        }
        v179 = &v175[2 * v177];
        if (v43 != v179)
        {
          memmove(v176, v43, v179 - v43);
          v178 = HIDWORD(v201);
        }
        v91 = v178 - v189;
        v13 = v186;
        v22 = v187;
        v51 = v188;
        goto LABEL_68;
      }
      v101 = 0;
      v102 = v91 <= 1uLL ? 1 : v91;
      v103 = 2 * v102;
      while (1)
      {
        v104 = *(unsigned __int8 *)(v201 + v101 + 1);
        if ((v104 & 0x7Fu) >= 0x40)
          goto LABEL_139;
        if (((v93 >> (v104 & 0x7F)) & 1) != 0)
          break;
        v101 += 2;
        if (v103 == v101)
          goto LABEL_69;
      }
      v105 = *(unsigned __int8 *)(v201 + v101);
      if (v105 != v104)
        break;
LABEL_67:
      memmove((void *)(v94 + v101), (const void *)(v94 + v101 + 2), 2 * v95 - v101 - 2);
      v91 = HIDWORD(v201) - 1;
LABEL_68:
      HIDWORD(v201) = v91;
LABEL_69:
      v50 = v190;
      if (!v91)
      {
        v112 = v201;
        if (v51 != (char *)v201 && (_QWORD)v201)
        {
          *(_QWORD *)&v201 = 0;
          DWORD2(v201) = 0;
          WTF::fastFree(v112, v43, v44, v49, v45, v46, v47, v48);
        }
LABEL_22:
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v13, 2, v49, v45, v46, v47, v48);
        if ((_DWORD)v191 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v50, 0, v52, v53, v54, v55, v56);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v191 << 35) + 0x380000001ALL, 0, v52, v53, v54, v55, v56);
        v16 = v192;
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringIndexOfWithOneChar, v57, v58, v59, v60, v61, v62, (int *)&v201);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v63, v64, v65, v66, v67, v68);
LABEL_25:
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v69, v70, v71, v72, v73, v74);
        v82 = *((_DWORD *)a2 + 12);
        v83 = ~v82;
        if (v83 < *((unsigned int *)this + 1001))
        {
          v84 = (char *)this + 4776;
          v85 = *((_QWORD *)this + 499);
          *((_DWORD *)this + 1194) = v82;
          *((_DWORD *)this + 1195) = 5;
          v86 = v85 + 24 * (int)v83;
          v87 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v86 = a2;
          *(_DWORD *)(v86 + 8) = v87;
          *(_BYTE *)(v86 + 12) = 1;
          *(_DWORD *)(v86 + 13) = 0;
          *(_BYTE *)(v86 + 17) = 0;
          --*((_DWORD *)this + 1196);
          if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if (v21 > 15)
              v88 = -1;
            else
              v88 = v21;
            --*(_DWORD *)&v84[12 * v88 + 8];
          }
          if (v16)
          {
            if ((int)v22 > 15)
              v89 = -1;
            else
              v89 = v18;
            --*(_DWORD *)&v84[12 * v89 + 8];
          }
          goto LABEL_36;
        }
        __break(0xC471u);
LABEL_140:
        JUMPOUT(0x197C222D8);
      }
    }
    v106 = v51;
    v107 = v22;
    v108 = v13;
    if ((char)v105 == 63)
    {
      if ((char)v104 != 31)
      {
        v110 = v104 & 0x1F | 0xD2800000;
        goto LABEL_64;
      }
    }
    else if (v104 != 31 && (char)v105 != 31)
    {
      v110 = v104 & 0xFFE0FFFF | ((v105 & 0x1F) << 16) | 0xAA0003E0;
LABEL_64:
      v111 = *((_DWORD *)this + 50);
      if (v111 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v43, v44, v49, v45, v46, v47, v48);
        v111 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v111) = v110;
      *((_DWORD *)this + 50) += 4;
      v94 = v201;
      v95 = HIDWORD(v201);
      v13 = v108;
      v22 = v107;
      v51 = v106;
      goto LABEL_67;
    }
    v110 = (char)v104 | (32 * (char)v105) | 0x91000000;
    goto LABEL_64;
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v201, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v197, (uint64_t)this, *((_QWORD *)a2 + 4), v123, v124, v125, v126, v127);
  JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)v194, (uint64_t)this, *((_QWORD *)a2 + 5), 0, v128, v129, v130, v131);
  v138 = v202[0];
  if (v202[0] == 255)
  {
    v138 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v201, *((unint64_t *)&v201 + 1), v132, v133, v134, v135, v136, v137);
    v202[0] = v138;
  }
  v139 = v199;
  if (v199 == 255)
  {
    v139 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v197, v198, v132, v133, v134, v135, v136, v137);
    v199 = v139;
  }
  v140 = v195;
  if (v195 == 255)
  {
    v140 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v194[0], (unint64_t)v194[1], (uint64_t)v196, v133, v134, v135, v136, v137);
    v195 = v140;
  }
  v141 = v138;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v141, v133, v134, v135, v136, v137);
  v142 = (char)v139;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v142, v143, v144, v145, v146, v147);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v148, v149, v150, v151, v152, v153, v154);
  ++*((_DWORD *)this + 1196);
  v161 = *((unsigned int *)this + 1194);
  if ((_DWORD)v161 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v161, (uint64_t)v155, v156, v157, v158, v159, v160);
  }
  v163 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v155, v156, v157, v158, v159, v160);
  if ((v14 & 1) != 0)
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v193, (unsigned __int8 *)this, v163, v162, v141, v142, (char)v140, v164);
  else
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(&v193, (int *)this, v163, v162, v141, (char)v140, v13, v164);
  JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, 0, a2, 1, 0, v165, v166, v167);
  --*((_DWORD *)this + 1196);
  v168 = (char)v195;
  if ((char)v195 > 15)
    v168 = -1;
  --*((_DWORD *)v194[0] + 3 * v168 + 1196);
  if ((v198 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v169 = (char)v199;
    if ((char)v199 > 15)
      v169 = -1;
    --*(_DWORD *)(v197 + 12 * v169 + 4784);
  }
  if ((*((_QWORD *)&v201 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v170 = v202[0];
    if (v202[0] > 15)
      v170 = -1;
    --*(_DWORD *)(v201 + 12 * v170 + 4784);
  }
LABEL_36:
  v90 = v200;
  v200 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int *v64;
  int *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v8 = a7;
  v11 = (uint64_t)a2;
  v12 = a1;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v69 = a5 | 0x100;
  v13 = 1;
  v67 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v13++ - 2] = a6 | 0x200;
    v67 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v67;
      }
      a1 = (int *)memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v13 = v67 - 1;
      goto LABEL_57;
    }
    v66 = v14;
    v33 = HIBYTE(v69);
    v34 = v69;
    JSC::MacroAssemblerARM64::swap(v11, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v35 = v67 - 1;
    v31 = v67 == 1;
    v68 = v35;
    v36 = (int *)&v69;
    a1 = (int *)&v70[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v70[2 * v68 - 2])
          {
            v65 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v63 = v40 - (char *)a2;
              v64 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v64 + v63);
            }
            a1 = v65;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v68;
      v44 = v68;
      a1 = v41;
    }
    v45 = (int *)&v70[2 * v43 - 2];
    v14 = v66;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v68;
    }
    v13 = v44 - v39;
LABEL_57:
    v67 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v11, (JSC::ARM64LogicalImmediate *)v8, 3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a4, 0, v46, v47, v48, v49, v50);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a3 << 35) + 0x380000001ALL, 0, v46, v47, v48, v49, v50);
  JSC::DFG::SpeculativeJIT::appendCall(v11, (uint64_t)operationStringIndexOfWithIndexWithOneChar, v51, v52, v53, v54, v55, v56, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v57, v58, v59, v60, v61, v62);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint8x8_t v18;
  __int32 v19;
  uint8x8_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  _BYTE v63[6];

  v10 = a2;
  v60 = 0;
  if ((_DWORD)a5 == 1)
  {
    v12 = 0;
  }
  else
  {
    v62 = a5 | 0x100;
    v12 = 1;
    v60 = 1;
  }
  if ((_DWORD)a6 != 2)
  {
    *(_WORD *)&v63[2 * v12++ - 2] = a6 | 0x200;
    v60 = v12;
  }
  if ((_DWORD)a7 == 3)
  {
    if (!v12)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v63[2 * v12++ - 2] = a7 | 0x300;
    v60 = v12;
  }
  do
  {
    v13 = 0;
    v14 = 0;
    v15 = v12;
    do
    {
      if ((v63[v13 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v14 |= 1 << v63[v13 - 1];
      v13 += 2;
    }
    while (2 * v12 != v13);
    v16 = 0;
    do
    {
      v17 = v63[v16 - 2] & 0x7F;
      if (v17 >= 0x40)
        goto LABEL_64;
      v14 &= ~(1 << v17);
      v16 += 2;
    }
    while (2 * v12 != v16);
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.i32[0];
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v14));
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.i32[0] + v19)
    {
      v21 = 0;
      if (v12 <= 1)
        v22 = 1;
      else
        v22 = v12;
      v23 = 2 * v22;
      while (1)
      {
        v24 = v63[v21 - 1];
        if ((v24 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v14 >> (v24 & 0x7F)) & 1) != 0)
          break;
        v21 += 2;
        if (v23 == v21)
          goto LABEL_57;
      }
      v25 = v63[v21 - 2];
      if (v25 != v24)
      {
        v26 = (char)v25;
        if ((char)v25 == 63)
        {
          v27 = *((_DWORD *)v10 + 50);
          v28 = *((_DWORD *)v10 + 48);
          if (v24 == 31)
            goto LABEL_51;
          v30 = v24 & 0x1F | 0xD2800000;
        }
        else
        {
          v27 = *((_DWORD *)v10 + 50);
          v28 = *((_DWORD *)v10 + 48);
          v29 = (char)v24 == 31 || v26 == 31;
          if (!v29)
          {
            v30 = v24 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v30 = (char)v24 | (32 * v26) | 0x91000000;
        }
LABEL_52:
        if (v27 + 4 > v28)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v27 = *((_DWORD *)v10 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v10 + 7) + v27) = v30;
        *((_DWORD *)v10 + 50) += 4;
        v15 = v60;
      }
      memmove(&v63[v21 - 2], &v63[v21], 2 * v15 - v21 - 2);
      v12 = v60 - 1;
      goto LABEL_56;
    }
    v31 = HIBYTE(v62);
    v32 = v62;
    JSC::MacroAssemblerARM64::swap((uint64_t)v10, (char)v62, SHIBYTE(v62), a4, a5, a6, a7, a8);
    memmove(&v62, v63, 2 * v60 - 2);
    v33 = v60 - 1;
    v29 = v60 == 1;
    v61 = v33;
    v34 = (unsigned __int8 *)&v62;
    v35 = &v63[2 * v33 - 2];
    if (v29)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = v35;
    }
    else
    {
      v36 = 2 * v33;
      v37 = &v62;
      while (*(unsigned __int8 *)v37 != v31)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v32;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v62;
      a2 = v35;
      v40 = v35;
      do
      {
        if (*v34 == v34[1])
        {
          v41 = v34;
          if (v40 != &v63[2 * v61 - 2])
          {
            v59 = v35;
            if (v34 == a2)
            {
              v41 = v40;
            }
            else
            {
              v57 = v39 - (char *)a2;
              v58 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = &v58[v57];
            }
            v35 = v59;
          }
          a2 = v34 + 2;
          ++v38;
          v40 = v41;
        }
        v34 += 2;
        v39 += 2;
      }
      while (v34 < v35);
      v42 = v61;
      v43 = v61;
      v35 = v40;
    }
    v44 = &v63[2 * v42 - 2];
    if (a2 != v44)
    {
      memmove(v35, a2, v44 - a2);
      v43 = v61;
    }
    v12 = v43 - v38;
LABEL_56:
    v60 = v12;
LABEL_57:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v10, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_65:
    JSC::MacroAssemblerARM64::load64((uint64_t)v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v10, (uint64_t)operationStringIndexOfWithIndex, v45, v46, v47, v48, v49, v50, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v10, 1, v51, v52, v53, v54, v55, v56);
}

uint64_t JSC::DFG::SpeculativeJIT::compileGlobalIsNaN(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::DFG::Graph *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  char v60;
  JSC::DFG::Node *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::DFG::Node *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _BYTE v94[12];
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 49)
  {
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 < *((unsigned int *)this + 1001))
    {
      if (*((_BYTE *)this[499] + 24 * (int)v12 + 12))
      {
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v97, (JSC::DFG::SpeculativeJIT *)this, v14, v15, v16, v17, v18, v19);
        if (v13 != -1)
        {
LABEL_6:
          v27 = v98;
          v28 = *((_DWORD *)this + 50);
          if (v28 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v20, v21, v22, v23, v24, v25, v26);
            v28 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)((char *)this[7] + v28) = (32 * v13) | (v13 << 16) | 0x1E602000;
          v29 = *((_DWORD *)this + 50);
          v30 = v29 + 4;
          *((_DWORD *)this + 50) = v29 + 4;
          if ((v29 + 8) > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v20, v21, v22, v23, v24, v25, v26);
            v30 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)((char *)this[7] + v30) = v27 | 0x1A9F07E0;
          *((_DWORD *)this + 50) += 4;
          JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v27, (char)v27);
          result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v27, (uint64_t)a2, 21, 0, v31, v32, v33);
          if (v97)
          {
            v35 = (char)v98;
            if ((char)v98 != -1)
            {
              if ((char)v98 > 15)
                v35 = -1;
              --*(_DWORD *)(v97 + 12 * v35 + 4784);
            }
          }
          v36 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v13];
          --*((_DWORD *)v36 + 1244);
          return result;
        }
      }
      else
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v97, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
      }
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, v21, v22, v23, v24, v25, v26);
      goto LABEL_6;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x197C22EE4);
  }
  if ((_DWORD)v11)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x4371, "void JSC::DFG::SpeculativeJIT::compileGlobalIsNaN(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_42;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v97, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v95, (JSC::DFG::SpeculativeJIT *)this, v37, v38, v39, v40, v41, v42);
  v49 = *((_QWORD *)a2 + 3);
  v50 = this[702];
  v51 = *((_QWORD *)v50 + 1);
  v52 = *(unsigned int *)((v49 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v53 = (_QWORD *)(v51 + 24);
  v54 = (_QWORD *)(v51 + 8);
  if ((v49 & 1) != 0)
    v55 = v53;
  else
    v55 = v54;
  v56 = *v55 + 32 * v52;
  v57 = *((unsigned int *)v50 + 22);
  if ((_DWORD)v57 != *(_DWORD *)(v56 + 20))
  {
    if ((*(_QWORD *)(v56 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v56, (void *)v57, v43, v44, v45, v46, v47, v48);
    else
      *(_DWORD *)(v56 + 20) = v57;
  }
  v58 = *(_QWORD *)(v56 + 8) & 0x300000000;
  v59 = v99;
  if (v99 == 255)
  {
    v59 = JSC::DFG::SpeculativeJIT::fillJSValue(v97, v98, v43, v44, v45, v46, v47, v48);
    v99 = v59;
  }
  v60 = v96;
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v57, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)v94 = 0xFFFFFFFFLL;
  *(_DWORD *)&v94[8] = -16773311;
  v67 = v60;
  if (v58)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, 0, v67, v62, v63, v64, v65, v66);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, (char)v59, 27, v68, v69, v70, v71, (uint64_t)&v92);
    *(_DWORD *)v94 = v92;
    *(_QWORD *)&v94[4] = v93;
    v78 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v72, v73, v74, v75, v76, v77);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v92, (unsigned __int8 *)this, (uint64_t)operationIsNaN, v67, v78, v79, v59, v80);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v94, (uint64_t)this, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    v89 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v61, v62, v63, v64, v65, v66);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v92, (unsigned __int8 *)this, (uint64_t)operationIsNaN, v67, v89, v90, v59, v91);
  }
  result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v67, (uint64_t)a2, 0);
  if (v95)
  {
    v87 = v96;
    if (v96 != -1)
    {
      if (v96 > 15)
        v87 = -1;
      --*(_DWORD *)(v95 + 12 * v87 + 4784);
    }
  }
  if ((v98 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v88 = (char)v99;
    if ((char)v99 > 15)
      v88 = -1;
    --*(_DWORD *)(v97 + 12 * v88 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileNumberIsNaN(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Graph *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _BYTE v77[12];
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 v80;
  JSC::DFG::Graph **v81;
  uint64_t v82;
  char *v83;
  unsigned __int8 v84;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != 49)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x439A, "void JSC::DFG::SpeculativeJIT::compileNumberIsNaN(Node *)", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197C23270);
    }
    JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v78, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v77, (JSC::DFG::SpeculativeJIT *)this, v59, v60, v61, v62, v63, v64);
    v71 = v80;
    if (v80 == 255)
    {
      v71 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v78, v79, v65, v66, v67, v68, v69, v70);
      v80 = v71;
    }
    v72 = v77[8];
    LOBYTE(v75) = v71;
    v84 = v71;
    v81 = this;
    v82 = (uint64_t)&v75;
    v83 = (char *)&v84;
    JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>((uint64_t)this, 1, v77[8], (char **)&v81, v67, v68, v69, v70);
    result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v72, (uint64_t)a2, 0);
    if (*(_QWORD *)v77)
    {
      v73 = v77[8];
      if (v77[8] != -1)
      {
        if (v77[8] > 15)
          v73 = -1;
        --*(_DWORD *)(*(_QWORD *)v77 + 12 * v73 + 4784);
      }
    }
    v74 = v78 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v80];
    --*(_DWORD *)(v74 + 4976);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v81, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v78, (JSC::DFG::SpeculativeJIT *)this, v12, v13, v14, v15, v16, v17);
    v24 = *((_QWORD *)a2 + 3);
    v25 = this[702];
    v26 = *((_QWORD *)v25 + 1);
    v27 = *(unsigned int *)((v24 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v28 = (_QWORD *)(v26 + 24);
    v29 = (_QWORD *)(v26 + 8);
    if ((v24 & 1) != 0)
      v30 = v28;
    else
      v30 = v29;
    v31 = *v30 + 32 * v27;
    v32 = *((unsigned int *)v25 + 22);
    if ((_DWORD)v32 != *(_DWORD *)(v31 + 20))
    {
      if ((*(_QWORD *)(v31 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v31, (void *)v32, v18, v19, v20, v21, v22, v23);
      else
        *(_DWORD *)(v31 + 20) = v32;
    }
    v33 = *(_QWORD *)(v31 + 8) & 0x300000000;
    v34 = v83;
    if (v83 == 255)
    {
      v34 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v81, v82, v18, v19, v20, v21, v22, v23);
      LOBYTE(v83) = v34;
    }
    v35 = v79;
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v32, v18, v19, v20, v21, v22, v23);
    *(_QWORD *)v77 = 0xFFFFFFFFLL;
    *(_DWORD *)&v77[8] = -16773311;
    v41 = v35;
    if (v33)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, 0, v41, v36, v37, v38, v39, v40);
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, (char)v34, 27, v42, v43, v44, v45, (uint64_t)&v75);
      *(_DWORD *)v77 = v75;
      *(_QWORD *)&v77[4] = v76;
      JSC::DFG::SpeculativeJIT::callOperation<unsigned long long (*)(long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v75, (char *)this, v41, v34, v46, v47, v48, v49);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v77, (uint64_t)this, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      JSC::DFG::SpeculativeJIT::callOperation<unsigned long long (*)(long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v75, (char *)this, v41, v34, v37, v38, v39, v40);
    }
    result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v41, (uint64_t)a2, 0);
    if (v78)
    {
      v57 = (char)v79;
      if ((char)v79 != -1)
      {
        if ((char)v79 > 15)
          v57 = -1;
        --*(_DWORD *)(v78 + 12 * v57 + 4784);
      }
    }
    if ((v82 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v58 = (char)v83;
      if ((char)v83 > 15)
        v58 = -1;
      --*((_DWORD *)v81 + 3 * v58 + 1196);
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<unsigned long long (*)(long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  char *v9;
  __int16 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  char *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  __int16 *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  _BYTE v58[6];

  v8 = (JSC::AssemblerBuffer *)a3;
  v9 = a2;
  v11 = &v57;
  if ((_BYTE)a4)
  {
    v57 = a4;
    v55 = 1;
    v12 = -1862270976;
    v13 = 1;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = v13;
      do
      {
        if ((v58[v14 - 1] & 0x40) != 0)
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v15 |= 1 << v58[v14 - 1];
        v14 += 2;
      }
      while (2 * v13 != v14);
      v17 = 0;
      do
      {
        v18 = v58[v17 - 2] & 0x7F;
        if (v18 >= 0x40)
          goto LABEL_62;
        v15 &= ~(1 << v18);
        v17 += 2;
      }
      while (2 * v13 != v17);
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v19.i16[0] = vaddlv_u8(v19);
      v20 = v19.i32[0];
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.i32[0] + v20)
      {
        v22 = 0;
        if (v13 <= 1)
          v23 = 1;
        else
          v23 = v13;
        v24 = 2 * v23;
        while (1)
        {
          v25 = v58[v22 - 1];
          if ((v25 & 0x7Fu) >= 0x40)
            goto LABEL_62;
          if (((v15 >> (v25 & 0x7F)) & 1) != 0)
            break;
          v22 += 2;
          if (v24 == v22)
            goto LABEL_33;
        }
        v26 = v58[v22 - 2];
        if (v26 != v25)
        {
          if ((char)v26 == 63)
          {
            if (v25 == 31)
              goto LABEL_27;
            v28 = v25 & 0x1F | 0xD2800000;
          }
          else
          {
            v27 = (char)v25 == 31 || (char)v26 == 31;
            if (!v27)
            {
              v28 = v25 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v28 = (char)v25 | (32 * (char)v26) | v12;
          }
LABEL_28:
          v29 = *((_DWORD *)v9 + 50);
          if (v29 + 4 > *((_DWORD *)v9 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v29 = *((_DWORD *)v9 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v9 + 7) + v29) = v28;
          *((_DWORD *)v9 + 50) += 4;
          v16 = v55;
        }
        memmove(&v58[v22 - 2], &v58[v22], 2 * v16 - v22 - 2);
        v13 = v55 - 1;
        goto LABEL_32;
      }
      v54 = v12;
      v53 = v11;
      v30 = HIBYTE(v57);
      v31 = v57;
      JSC::MacroAssemblerARM64::swap((uint64_t)v9, (char)v57, SHIBYTE(v57), a4, a5, a6, a7, a8);
      memmove(&v57, v58, 2 * v55 - 2);
      v32 = v55 - 1;
      v27 = v55 == 1;
      v56 = v32;
      v33 = (char *)&v57;
      v34 = &v58[2 * v32 - 2];
      if (v27)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        a2 = &v58[2 * v32 - 2];
      }
      else
      {
        v39 = 2 * v32;
        v40 = &v57;
        while (*(unsigned __int8 *)v40 != v30)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v31;
LABEL_43:
        v37 = 0;
        v41 = (char *)&v57;
        a2 = v34;
        v42 = v34;
        do
        {
          if (*v33 == v33[1])
          {
            v43 = v33;
            if (v42 != &v58[2 * v56 - 2])
            {
              if (v33 == a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - a2;
                memmove(v42, a2, v41 - a2);
                v43 = &v42[v44];
              }
            }
            a2 = v33 + 2;
            ++v37;
            v42 = v43;
          }
          v33 += 2;
          v41 += 2;
        }
        while (v33 < v34);
        v35 = v56;
        v36 = v56;
        v34 = v42;
      }
      v38 = &v58[2 * v35 - 2];
      if (a2 != v38)
      {
        memmove(v34, a2, v38 - a2);
        v36 = v56;
      }
      v13 = v36 - v37;
      v11 = v53;
      v12 = v54;
LABEL_32:
      v55 = v13;
LABEL_33:
      ;
    }
    while (v13);
    if (v11 != &v57 && &v57)
      WTF::fastFree((unint64_t)&v57, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationNumberIsNaN, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 0xFFFFFFFFLL, v45, v46, v47, v48, v49, v50);
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v8 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v8 & 0x1F | 0xAA0003E0;
    }
    v52 = *((_DWORD *)v9 + 50);
    v9 += 200;
    v51 = v52;
    v8 = (JSC::AssemblerBuffer *)(v9 - 144);
    if (v52 + 4 > *((_DWORD *)v9 - 2))
    {
LABEL_63:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v51 = *(_DWORD *)v9;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v51) = (_DWORD)a1;
    *(_DWORD *)v9 += 4;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileToIntegerOrInfinity(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  JSC::DFG::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  JSC::DFG::Node *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _BYTE v92[12];
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (!(_DWORD)v11)
  {
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_34;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 < *((unsigned int *)this + 1001))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      {
        v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        goto LABEL_6;
      }
LABEL_34:
      v13 = -1;
LABEL_6:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v93, this, a3, a4, a5, a6, a7, a8);
      v20 = *((_QWORD *)a2 + 3);
      v21 = *((_QWORD *)this + 702);
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(unsigned int *)((v20 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v24 = (_QWORD *)(v22 + 24);
      v25 = (_QWORD *)(v22 + 8);
      if ((v20 & 1) != 0)
        v26 = v24;
      else
        v26 = v25;
      v27 = *v26 + 32 * v23;
      v28 = *(unsigned int *)(v21 + 88);
      if ((_DWORD)v28 != *(_DWORD *)(v27 + 20))
      {
        if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v27, (void *)v28, v14, v15, v16, v17, v18, v19);
        else
          *(_DWORD *)(v27 + 20) = v28;
      }
      v29 = *(_QWORD *)(v27 + 8) & 0x300000000;
      if (v13 == -1)
        v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v14, v15, v16, v17, v18, v19);
      v30 = (char)v94;
      v31 = v94;
      v32 = v94;
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v28, v14, v15, v16, v17, v18, v19);
      *(_QWORD *)v92 = 0xFFFFFFFFLL;
      *(_DWORD *)&v92[8] = -16773311;
      if (!v29)
      {
        v86 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v34, v35, v36, v37, v38, v39);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationToIntegerOrInfinityUntyped, v31, v86, v87, v13, v88, v89, &v90);
LABEL_23:
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v32, (uint64_t)a2, 16, 0, v61, v62, v63);
        if (v93)
        {
          v65 = (char)v94;
          if ((char)v94 != -1)
          {
            if ((char)v94 > 15)
              v65 = -1;
            --*(_DWORD *)(v93 + 12 * v65 + 4784);
          }
        }
        if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if (v13 > 15)
            v66 = -1;
          else
            v66 = v13;
          --*((_DWORD *)this + 3 * v66 + 1196);
        }
        return result;
      }
      if ((_DWORD)v31 == v13)
      {
LABEL_22:
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v13, 27, v36, v37, v38, v39, (uint64_t)&v90);
        *(_DWORD *)v92 = v90;
        *(_QWORD *)&v92[4] = v91;
        v51 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v45, v46, v47, v48, v49, v50);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationToIntegerOrInfinityUntyped, v31, v51, v52, v13, v53, v54, &v90);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v92, (uint64_t)this, v55, v56, v57, v58, v59, v60);
        goto LABEL_23;
      }
      if (v13 == 63)
      {
        if (v32 != 31)
        {
          v42 = v32 & 0x1F | 0xD2800000;
          goto LABEL_19;
        }
      }
      else if (v13 != 31 && v30 != 31)
      {
        v40 = v32 & 0xFFE0FFFF | ((v13 & 0x1F) << 16);
        v41 = -1442839584;
LABEL_18:
        v42 = v40 | v41;
LABEL_19:
        v44 = (unsigned int *)((char *)this + 200);
        v43 = *((_DWORD *)this + 50);
        if (v43 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v33, (uint64_t)v34, v35, v36, v37, v38, v39);
          v43 = *v44;
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v43) = v42;
        *v44 += 4;
        goto LABEL_22;
      }
      v40 = v30 | (32 * v13);
      v41 = -1862270976;
      goto LABEL_18;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x197C23A60);
  }
  if ((_DWORD)v11 != 49)
  {
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x43C4, "void JSC::DFG::SpeculativeJIT::compileToIntegerOrInfinity(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_50;
  }
  JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v93, (uint64_t)this, v10, a4, a5, a6, a7, a8);
  v74 = v95;
  if (v95 == 255)
  {
    v74 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v93, v94, v68, v69, v70, v71, v72, v73);
    v95 = v74;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v67, v68, v69, v70, v71, v72, v73);
  ++*((_DWORD *)this + 1196);
  v81 = *((unsigned int *)this + 1194);
  if ((_DWORD)v81 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v81, v75, v76, v77, v78, v79, v80);
  }
  JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<long long (*)(double),JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID>((int *)v92, (int *)this, (uint64_t)operationToIntegerOrInfinityDouble, (char)v74, v77, v78, v79, v80);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v82, v83, v84);
  --*((_DWORD *)this + 1196);
  v85 = v93 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v95];
  --*(_DWORD *)(v85 + 4976);
  return result;
}

int *JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<long long (*)(double),JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID>(int *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  int *v37;
  unsigned __int8 *v38;
  int64_t v39;
  int *v40;
  int *v41;
  int *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  __int16 v46;
  _BYTE v47[6];

  v9 = a2;
  v10 = result;
  if (!(_DWORD)a4)
    return (int *)JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, v10);
  v46 = a4;
  v44 = 1;
  v11 = 1;
LABEL_4:
  v12 = 0;
  v13 = 0;
  while (((v47[v12 - 1] + 32) & 0x40) == 0)
  {
    v13 |= 1 << (v47[v12 - 1] + 32);
    v12 += 2;
    if (2 * v11 == v12)
    {
      v14 = 0;
      while (1)
      {
        v15 = (v47[v14 - 2] + 32) & 0x7F;
        if (v15 >= 0x40)
          goto LABEL_45;
        v13 &= ~(1 << v15);
        v14 += 2;
        if (2 * v11 == v14)
        {
          v16 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
          v16.i16[0] = vaddlv_u8(v16);
          v17 = v16.i32[0];
          v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v13));
          v18.i16[0] = vaddlv_u8(v18);
          if (v18.i32[0] + v17)
          {
            v19 = 0;
            if (v11 <= 1)
              v20 = 1;
            else
              v20 = v11;
            v21 = 2 * v20;
            while (1)
            {
              v22 = (char)v47[v19 - 1];
              v23 = (v47[v19 - 1] + 32) & 0x7F;
              if (v23 >= 0x40)
                goto LABEL_45;
              if (((v13 >> v23) & 1) != 0)
              {
                v24 = (char)v47[v19 - 2];
                v25 = v9[50];
                if (v25 + 4 > v9[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v25 = v9[50];
                }
                *(_DWORD *)(*((_QWORD *)v9 + 7) + v25) = v22 | (32 * v24) | 0x1E604000;
                v9[50] += 4;
                result = (int *)memmove(&v47[v19 - 2], &v47[v19], 2 * v44 - v19 - 2);
                v11 = v44 - 1;
                goto LABEL_22;
              }
              v19 += 2;
              if (v21 == v19)
                goto LABEL_23;
            }
          }
          v26 = HIBYTE(v46);
          v27 = v46;
          JSC::MacroAssemblerARM64::swapDouble(v9, (char)v46, SHIBYTE(v46), a4, a5, a6, a7, a8);
          memmove(&v46, v47, 2 * v44 - 2);
          v29 = v44 - 1;
          v28 = v44 == 1;
          v45 = v29;
          v30 = (unsigned __int8 *)&v46;
          result = (int *)&v47[2 * v29 - 2];
          if (v28)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            a2 = (int *)&v47[2 * v29 - 2];
          }
          else
          {
            v31 = 2 * v29;
            v32 = &v46;
            while (*(unsigned __int8 *)v32 != v26)
            {
              ++v32;
              v31 -= 2;
              if (!v31)
                goto LABEL_32;
            }
            *(_BYTE *)v32 = v27;
LABEL_32:
            v35 = 0;
            v36 = (char *)&v46;
            a2 = result;
            v37 = result;
            v41 = result;
            do
            {
              if (*v30 == v30[1])
              {
                v38 = v30;
                if (v37 != (int *)&v47[2 * v45 - 2])
                {
                  if (v30 == (unsigned __int8 *)a2)
                  {
                    v38 = (unsigned __int8 *)v37;
                  }
                  else
                  {
                    v43 = v35;
                    v39 = v36 - (char *)a2;
                    v42 = v37;
                    memmove(v37, a2, v36 - (char *)a2);
                    result = v41;
                    v38 = (unsigned __int8 *)v42 + v39;
                    v35 = v43;
                  }
                }
                a2 = (int *)(v30 + 2);
                ++v35;
                v37 = (int *)v38;
              }
              v30 += 2;
              v36 += 2;
            }
            while (v30 < (unsigned __int8 *)result);
            v33 = v45;
            v34 = v45;
            result = v37;
          }
          v40 = (int *)&v47[2 * v33 - 2];
          if (a2 != v40)
          {
            result = (int *)memmove(result, a2, (char *)v40 - (char *)a2);
            v34 = v45;
          }
          v11 = v34 - v35;
LABEL_22:
          v44 = v11;
LABEL_23:
          if (!v11)
            return (int *)JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, v10);
          goto LABEL_4;
        }
      }
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileToLength(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  int v35;
  unint64_t v36;
  JSC::DFG::Graph *v37;
  unsigned int v38;
  char *v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::DFG::Graph *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  JSC::DFG::Node *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  JSC::DFG::Node *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _BYTE v151[12];
  _BYTE v152[12];
  uint64_t v153;
  char v154;
  JSC::DFG::Graph **v155;
  unint64_t v156;
  char v157;
  _BYTE v158[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    v155 = this;
    v156 = v10;
    v157 = -1;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197C2447CLL);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v12 + 12))
      v157 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)this, v10, (uint64_t)v158, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    v20 = v157;
    if (v157 == 255)
    {
      v20 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v155, v156, (uint64_t)v158, v15, v16, v17, v18, v19);
      v157 = v20;
    }
    v21 = v154;
    v22 = v154 & 0x1F | 0x52800000;
    v23 = *((_DWORD *)this + 50);
    if (v23 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, v14, v15, v16, v17, v18, v19);
      v23 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)((char *)this[7] + v23) = v22;
    v24 = *((_DWORD *)this + 50);
    v25 = v24 + 4;
    *((_DWORD *)this + 50) = v24 + 4;
    if ((v24 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, v14, v15, v16, v17, v18, v19);
      v25 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)((char *)this[7] + v25) = (unsigned __int16)(32 * (v20 & 0x1F)) | ((v20 & 0x1F) << 16) | 0x6A00001F;
    v26 = *((_DWORD *)this + 50);
    v27 = v26 + 4;
    *((_DWORD *)this + 50) = v26 + 4;
    if ((v26 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, v14, v15, v16, v17, v18, v19);
      v27 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)((char *)this[7] + v27) = ((v20 & 0x1F) << 16) | (32 * (v21 & 0x1F)) | v21 & 0x1F | 0x9A804000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v21, v21);
    result = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v28, v29, v30, v31, v32, v33);
    v35 = *((_DWORD *)a2 + 12);
    v36 = ~v35;
    if (v36 < *((unsigned int *)this + 1001))
    {
      v37 = this[499];
      if (v21 > 15)
        v38 = -1;
      else
        v38 = v21;
      v39 = (char *)this + 12 * v38;
      *((_DWORD *)v39 + 1194) = v35;
      *((_DWORD *)v39 + 1195) = 5;
      v40 = (char *)v37 + 24 * (int)v36;
      v41 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v40 = a2;
      *((_DWORD *)v40 + 2) = v41;
      v40[17] = v21;
      *((_DWORD *)v40 + 3) = 1;
      v40[16] = 0;
      if (v153)
      {
        v42 = v154;
        if (v154 != -1)
        {
          if (v154 > 15)
            v42 = -1;
          --*(_DWORD *)(v153 + 12 * v42 + 4784);
        }
      }
      v43 = v157;
      if (v157 > 15)
        v43 = -1;
      v44 = (char *)v155 + 12 * v43;
LABEL_25:
      --*((_DWORD *)v44 + 1196);
      return result;
    }
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x197C243FCLL);
  }
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != 49)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x4404, "void JSC::DFG::SpeculativeJIT::compileToLength(Node *)", "Bad use kind");
      __break(0xC471u);
      goto LABEL_60;
    }
    JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v155, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    v52 = v157;
    if (v157 == 255)
    {
      v52 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v155, v156, v46, v47, v48, v49, v50, v51);
      v157 = v52;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v45, v46, v47, v48, v49, v50, v51);
    ++*((_DWORD *)this + 1196);
    v59 = *((unsigned int *)this + 1194);
    if ((_DWORD)v59 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v59, v53, v54, v55, v56, v57, v58);
    }
    JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<long long (*)(double),JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID>((int *)&v153, (int *)this, (uint64_t)operationToLengthDouble, v52, v55, v56, v57, v58);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v60, v61, v62);
    --*((_DWORD *)this + 1196);
    v63 = (char *)v155 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v157];
    --*((_DWORD *)v63 + 1244);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v155, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, (JSC::DFG::SpeculativeJIT *)this, v64, v65, v66, v67, v68, v69);
    v76 = *((_QWORD *)a2 + 3);
    v77 = this[702];
    v78 = *((_QWORD *)v77 + 1);
    v79 = *(unsigned int *)((v76 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v80 = (_QWORD *)(v78 + 24);
    v81 = (_QWORD *)(v78 + 8);
    if ((v76 & 1) != 0)
      v82 = v80;
    else
      v82 = v81;
    v83 = *v82 + 32 * v79;
    v84 = *((unsigned int *)v77 + 22);
    if ((_DWORD)v84 != *(_DWORD *)(v83 + 20))
    {
      if ((*(_QWORD *)(v83 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v83, (void *)v84, v70, v71, v72, v73, v74, v75);
      else
        *(_DWORD *)(v83 + 20) = v84;
    }
    v85 = *(_QWORD *)(v83 + 8) & 0x300000000;
    v86 = v157;
    if (v157 == 255)
    {
      v86 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v155, v156, v70, v71, v72, v73, v74, v75);
      v157 = v86;
    }
    v87 = v154;
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v84, v70, v71, v72, v73, v74, v75);
    *(_QWORD *)v152 = 0xFFFFFFFFLL;
    *(_DWORD *)&v152[8] = -16773311;
    *(_QWORD *)v151 = 0xFFFFFFFFLL;
    *(_DWORD *)&v151[8] = -16773311;
    if (v85)
    {
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, v86, 27, v90, v91, v92, v93, (uint64_t)&v149);
      *(_DWORD *)v152 = v149;
      *(_QWORD *)&v152[4] = v150;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, 0, (char)v87, v94, v95, v96, v97, v98);
      JSC::MacroAssemblerARM64::moveConditionally32((uint64_t)this, 11, v86, 0, (char)v87, v86, (char)v87, v99);
      JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v87, (char)v87);
      JSC::AssemblyHelpers::boxInt32(this, (char)v87, v87, 1, v100, v101, v102, v103);
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v104, v105, v106, v107, v108, v109, v110, &v149);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v111, v112, v113, v114, v115, v116);
      v123 = 0xFF000F4500000000;
      if (!*((_BYTE *)this + 328))
        v123 = 0xFF000F4100000000;
      *(_DWORD *)v151 = v149;
      *(_QWORD *)&v151[4] = v123;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v152, (uint64_t)this, v117, v118, v119, v120, v121, v122);
      v130 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v124, v125, v126, v127, v128, v129);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationToLengthUntyped, v87, v130, v131, v86, v132, v133, &v149);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v151, (uint64_t)this, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      v145 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v88, v89, v90, v91, v92, v93);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationToLengthUntyped, v87, v145, v146, v86, v147, v148, &v149);
    }
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v87, (uint64_t)a2, 16, 0, v140, v141, v142);
    if (v153)
    {
      v143 = v154;
      if (v154 != -1)
      {
        if (v154 > 15)
          v143 = -1;
        --*(_DWORD *)(v153 + 12 * v143 + 4784);
      }
    }
    if ((v156 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v144 = v157;
      if (v157 > 15)
        v144 = -1;
      v44 = (char *)v155 + 12 * v144;
      goto LABEL_25;
    }
  }
  return result;
}

void JSC::MacroAssemblerARM64::moveConditionally32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  int v42;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a3;
  v12 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v18 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v14 = 0;
          v15 = 0;
          v17 = 0;
          LOBYTE(v18) = 0;
          v16 = 0;
        }
        else
        {
          v33 = (int)a4 >> 12;
          v34 = BYTE3(a4);
          v35 = 0xC00000000;
          v36 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v35 = 0;
          if (-v33 <= 0xFFF)
          {
            v37 = 0x100000000;
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
          if (-v33 <= 0xFFF)
            v38 = -v33;
          else
            LOBYTE(v38) = 0;
          if (-v33 <= 0xFFF)
            v39 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v39 = 0;
          v17 = 0x100000000;
          v40 = v34 == 0;
          if (v34)
            v14 = v35;
          else
            v14 = 0xC00000000;
          if (v40)
            v15 = 0;
          else
            v15 = v36;
          if (v40)
          {
            LOBYTE(v18) = (int)a4 >> 12;
          }
          else
          {
            v17 = v37;
            LOBYTE(v18) = v38;
          }
          if (v40)
            v16 = v33 & 0xFFFFFF00;
          else
            v16 = v39;
        }
      }
      else
      {
        v14 = 0;
        v16 = v18 & 0xFFFFFF00;
        v17 = 0x100000000;
        v15 = 1;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = a4 & 0xFFFFFF00;
      v17 = 0x100000000;
      LOBYTE(v18) = a4;
    }
    v19 = v14 | v16 | v18;
    v20 = v17 | v15;
    goto LABEL_16;
  }
  v19 = 0;
  v20 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v12 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v12 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v20 & 0xFF00000000) != 0)
    {
      v21 = (JSC::AssemblerBuffer *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v20)
        v23 = 822083615;
      else
        v23 = 1895825439;
      if ((v19 & 0xFFFFFFFF00000000) == 0xC00000000)
        v23 |= 0x400000u;
      v25 = v23 | ((v19 & 0xFFF) << 10) | (32 * a3);
      if (v22 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v21, a2, a3, a4, a5, a6, a7, a8);
        v22 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v25;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197C24794);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
      if (v11 == 31)
      {
        v24 = *(_DWORD *)(a1 + 200);
        if (v24 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = 1798333439;
      }
      else
      {
        v41 = *(_DWORD *)(a1 + 200);
        if (v41 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v41 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = (32 * (v11 & 0x1F)) | 0x6B10001F;
      }
    }
    v26 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v26;
    v27 = (v12 << 12) | ((v9 & 0x1F) << 16) | (32 * (v10 & 0x1F)) | v8 & 0x1F;
    v28 = (_QWORD *)(a1 + 56);
    v29 = (unsigned int *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *v29;
    }
    goto LABEL_32;
  }
  v12 = 0x4000;
LABEL_35:
  v30 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
  v29 = (unsigned int *)(a1 + 200);
  v31 = *(_DWORD *)(a1 + 200);
  v28 = (_QWORD *)(a1 + 56);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    v42 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v30 = v42;
    v31 = *v29;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v30;
  v32 = *(_DWORD *)(a1 + 200);
  v26 = v32 + 4;
  *(_DWORD *)(a1 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v26 = *v29;
  }
  v27 = v12 | ((v9 & 0x1F) << 16) | (32 * (v10 & 0x1F)) | v8 & 0x1F;
LABEL_32:
  *(_DWORD *)(*v28 + v26) = v27 | 0x9A800000;
  *v29 += 4;
}

void JSC::AssemblerBuffer::putInt(JSC::AssemblerBuffer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;

  v8 = a2;
  v10 = *((_DWORD *)this + 36);
  if (v10 + 4 > *((_DWORD *)this + 34))
  {
    JSC::AssemblerBuffer::outOfLineGrow(this, a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_DWORD *)this + 36);
  }
  *(_DWORD *)(*(_QWORD *)this + v10) = v8;
  *((_DWORD *)this + 36) += 4;
}

__n128 JSC::AssemblerBuffer::outOfLineGrow(JSC::AssemblerBuffer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  __int128 *v10;
  __n128 result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v9 = (*((_DWORD *)this + 34) + (*((_DWORD *)this + 34) >> 1));
  *((_DWORD *)this + 34) = v9;
  v10 = *(__int128 **)this;
  if (*(JSC::AssemblerBuffer **)this == (JSC::AssemblerBuffer *)((char *)this + 8))
  {
    v12 = WTF::fastMalloc((WTF *)v9);
    *(_QWORD *)this = v12;
    v13 = v10[3];
    v15 = *v10;
    v14 = v10[1];
    *(_OWORD *)(v12 + 32) = v10[2];
    *(_OWORD *)(v12 + 48) = v13;
    *(_OWORD *)v12 = v15;
    *(_OWORD *)(v12 + 16) = v14;
    result = (__n128)v10[6];
    v16 = v10[7];
    v18 = v10[4];
    v17 = v10[5];
    *(__n128 *)(v12 + 96) = result;
    *(_OWORD *)(v12 + 112) = v16;
    *(_OWORD *)(v12 + 64) = v18;
    *(_OWORD *)(v12 + 80) = v17;
  }
  else
  {
    *(_QWORD *)this = WTF::fastRealloc(*(_QWORD *)this, v9, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

void JSC::MacroAssemblerARM64::add64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;

  v8 = a4;
  v9 = a3;
  if (a2 < 0x1000)
  {
    v11 = 0x80000000;
LABEL_3:
    v12 = a4 | (32 * a3) | v11 | ((a2 & 0xFFF) << 10);
LABEL_7:
    v15 = 285212672;
    goto LABEL_8;
  }
  v13 = -(int)a2;
  if (-(int)a2 < 0x1000)
  {
    v14 = -1073741824;
LABEL_6:
    v12 = a4 | (32 * a3) | v14 | (v13 << 10);
    goto LABEL_7;
  }
  if ((a2 & 0xFFF) == 0)
  {
    v20 = (int)a2 >> 12;
    if (!BYTE3(a2))
    {
      v11 = -2143289344;
      a2 = ((int)a2 >> 12);
      goto LABEL_3;
    }
    v13 = -v20;
    if (-v20 < 0x1000)
    {
      v14 = -1069547520;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (v9 == 31 || v8 == 31)
  {
    v12 = v8 | (32 * v9);
    v15 = -1959763968;
  }
  else
  {
    v12 = v8 & 0x1F | (32 * (v9 & 0x1F));
    v15 = -1961885696;
  }
LABEL_8:
  v16 = v12 | v15;
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

{
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v8 = a4;
  v9 = a3;
  if ((unint64_t)a2 < 0x1000)
  {
    v11 = 0x80000000;
LABEL_3:
    v12 = a4 | (32 * a3) | v11 | ((a2 & 0xFFF) << 10);
LABEL_4:
    v13 = 285212672;
    goto LABEL_11;
  }
  v14 = -a2;
  if ((unint64_t)-a2 < 0x1000)
  {
    v20 = -1073741824;
    goto LABEL_20;
  }
  if ((a2 & 0xFFF) == 0)
  {
    v19 = a2 >> 12;
    if (!((unint64_t)a2 >> 24))
    {
      v11 = -2143289344;
      a2 >>= 12;
      goto LABEL_3;
    }
    v14 = -v19;
    if ((unint64_t)-v19 < 0x1000)
    {
      v20 = -1069547520;
LABEL_20:
      v12 = a4 | (32 * a3) | v20 | ((_DWORD)v14 << 10);
      goto LABEL_4;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (v9 == 31 || v8 == 31)
  {
    v12 = v8 | (32 * v9);
    v13 = -1959763968;
  }
  else
  {
    v12 = v8 & 0x1F | (32 * (v9 & 0x1F));
    v13 = -1961885696;
  }
LABEL_11:
  v15 = v12 | v13;
  v18 = *(_DWORD *)(a1 + 200);
  v17 = (unsigned int *)(a1 + 200);
  v16 = v18;
  if (v18 + 4 > *(v17 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36), a2, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
  *v17 += 4;
}

uint64_t std::__throw_bad_optional_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return JSC::MacroAssemblerARM64::swap();
}

void JSC::MacroAssemblerARM64::swap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  unsigned int v20;
  unsigned int v21;
  JSC::AssemblerBuffer *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;

  if ((_DWORD)a2 == (_DWORD)a3)
    return;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C24ED8);
  }
  v9 = a3;
  v10 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v11 = *(unsigned __int8 *)(a1 + 272);
  if (v11 != a2)
  {
    if ((_DWORD)a2 == 63)
    {
      if (v11 != 31)
      {
        v12 = v11 & 0x1F | 0xD2800000;
        goto LABEL_8;
      }
    }
    else if ((_DWORD)a2 != 31 && (char)v11 != 31)
    {
      v12 = v11 & 0xFFE0FFFF | ((a2 & 0x1F) << 16) | 0xAA0003E0;
LABEL_8:
      v14 = (unsigned int *)(a1 + 200);
      v13 = *(_DWORD *)(a1 + 200);
      v15 = (_QWORD *)(a1 + 56);
      if (v13 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v13 = *v14;
      }
      *(_DWORD *)(*v15 + v13) = v12;
      *v14 += 4;
      goto LABEL_11;
    }
    v12 = (char)v11 | (32 * a2) | 0x91000000;
    goto LABEL_8;
  }
LABEL_11:
  if (v9 == 63)
  {
    if (v10 != 31)
    {
      v16 = v10 & 0x1F | 0xD2800000;
      v18 = (unsigned int *)(a1 + 200);
      v28 = *(unsigned int *)(a1 + 200);
      v19 = (JSC::AssemblerBuffer *)(a1 + 56);
      if ((v28 + 4) <= *(_DWORD *)(a1 + 192))
      {
        *(_DWORD *)(*(_QWORD *)v19 + v28) = v16;
        v20 = *v18 + 4;
        *v18 = v20;
        goto LABEL_19;
      }
      goto LABEL_33;
    }
  }
  else if (v10 != 31 && v9 != 31)
  {
    v16 = v10 | ((v9 & 0x1F) << 16) | 0xAA0003E0;
    goto LABEL_15;
  }
  v16 = v10 | (32 * v9) | 0x91000000;
LABEL_15:
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
LABEL_33:
    JSC::AssemblerBuffer::outOfLineGrow(v19, a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v17) = v16;
  *v18 += 4;
  if (v9 == 16)
    return;
  if (v9 == 31)
  {
    v27 = *(_DWORD *)(a1 + 200);
    v26 = (unsigned int *)(a1 + 200);
    v20 = v27;
    v22 = (JSC::AssemblerBuffer *)(v26 - 36);
    v23 = v26;
    v24 = v27 + 4;
    v25 = *(v26 - 2);
    v21 = -1862270433;
    goto LABEL_20;
  }
  v20 = *(_DWORD *)(a1 + 200);
LABEL_19:
  v21 = v9 | 0xAA1003E0;
  v22 = (JSC::AssemblerBuffer *)(a1 + 56);
  v23 = (unsigned int *)(a1 + 200);
  v24 = v20 + 4;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_20:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v22, a2, a3, a4, a5, a6, a7, a8);
    v20 = *v23;
  }
  *(_DWORD *)(*(_QWORD *)v22 + v20) = v21;
  *v23 += 4;
}

void JSC::MacroAssemblerARM64::swapDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_DWORD)a2 != (_DWORD)a3)
  {
    JSC::MacroAssemblerARM64::moveDouble(a1, a2, 31, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::moveDouble(a1, a3, a2, v11, v12, v13, v14, v15);
    JSC::MacroAssemblerARM64::moveDouble(a1, 31, a3, v16, v17, v18, v19, v20);
  }
}

_QWORD *WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(_QWORD *a1, pthread_key_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char v17;
  char **v18;
  char *v19;

  a1[18] = a2;
  pthread_setspecific(*a2, a1);
  *a1 = a1 + 1;
  *((_DWORD *)a1 + 34) = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(v12, v4);
  }
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (*((_DWORD *)a1 + 34) < v14)
    {
      v15 = *a1;
      if (*a1 && (_QWORD *)v15 != a1 + 1)
      {
        WTF::fastFree(v15, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      *a1 = v13;
      *((_DWORD *)a1 + 34) = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  return a1;
}

void JSC::LinkBuffer::~LinkBuffer(JSC::LinkBuffer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  pthread_key_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::LinkBuffer *v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int **v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char **v51;
  char *v52;

  v9 = *((unsigned int *)this + 55);
  if ((_DWORD)v9)
  {
    v30 = (unsigned int **)*((_QWORD *)this + 26);
    v31 = &v30[v9];
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      ++v30;
    }
    while (v30 != v31);
  }
  v10 = *((_QWORD *)this + 26);
  if (v10)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((unsigned int *)this + 51);
  if ((_DWORD)v11)
  {
    v36 = (unsigned int **)*((_QWORD *)this + 24);
    v37 = &v36[v11];
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
      {
        v39 = v38 + 2;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v38 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
        }
      }
      ++v36;
    }
    while (v36 != v37);
  }
  v12 = *((_QWORD *)this + 24);
  if (v12)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v13 != -1)
  {
    v52 = &v50;
    v51 = &v52;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v14 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v22 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v22)
  {
    v22 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v22, v14);
  }
  v23 = (JSC::LinkBuffer *)*((_QWORD *)this + 3);
  v24 = (char *)this + 32;
  if (v23 != (JSC::LinkBuffer *)((char *)this + 32))
  {
    v28 = *((_DWORD *)this + 40);
    if (*(_DWORD *)(v22 + 136) >= v28)
    {
      if (v23)
      {
        WTF::fastFree((unint64_t)v23, v15, v16, v17, v18, v19, v20, v21);
        *((_DWORD *)this + 40) = 128;
        *((_QWORD *)this + 3) = v24;
      }
    }
    else
    {
      if (*(_QWORD *)v22)
        v29 = *(_QWORD *)v22 == v22 + 8;
      else
        v29 = 1;
      if (!v29)
      {
        WTF::fastFree(*(_QWORD *)v22, v15, v16, v17, v18, v19, v20, v21);
        v23 = (JSC::LinkBuffer *)*((_QWORD *)this + 3);
        v28 = *((_DWORD *)this + 40);
      }
      *(_QWORD *)v22 = v23;
      *(_DWORD *)(v22 + 136) = v28;
      *((_QWORD *)this + 3) = v24;
      *((_DWORD *)this + 40) = 128;
    }
  }
  v25 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
  }
}

void JSC::MacroAssemblerARM64::moveToCachedReg(unsigned int *a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v23;

  v9 = this;
  v11 = (int)this;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 208) & *(_DWORD *)(a3 + 24)) != 0)
  {
    v12 = *(_QWORD *)(a3 + 16);
    if (v12 == (int)this)
      return;
    v13 = JSC::ARM64LogicalImmediate::create32(this);
    if (v13 != -1)
    {
      v16 = *(char *)(a3 + 8) | (v13 << 10);
      v17 = 838861792;
LABEL_5:
      v18 = v16 | v17;
      v19 = a1[50];
      if (v19 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v14, v15, a4, a5, a6, a7, a8);
        v19 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = v18;
      a1[50] += 4;
      goto LABEL_16;
    }
    v20 = v12 ^ v11;
    if (!((v12 ^ v11) >> 32))
    {
      if ((v9 & 0xFFFF0000) != (unint64_t)(v12 & 0xFFFF0000))
      {
        v21 = ((v9 & 0xFFFF0000) >> 11) | 0x72A00000 | *(_BYTE *)(a3 + 8) & 0x1F;
        v22 = a1[50];
        if (v22 + 4 > a1[48])
        {
          v23 = v20;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v14, v15, a4, a5, a6, a7, a8);
          v20 = v23;
          v22 = a1[50];
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = v21;
        a1[50] += 4;
      }
      if (!v20)
        goto LABEL_16;
      v16 = *(_BYTE *)(a3 + 8) & 0x1F | (32 * (unsigned __int16)v9);
      v17 = 1920991232;
      goto LABEL_5;
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)v9, *(char *)(a3 + 8), a4, a5, a6, a7, a8);
LABEL_16:
  *(_QWORD *)(a3 + 16) = v11;
  *(_DWORD *)(*(_QWORD *)a3 + 208) |= *(_DWORD *)(a3 + 24);
}

_DWORD *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v9;
  JSC::AssemblerBuffer *v10;
  _DWORD *v11;

  v8 = result[50];
  if (v8 < result[13])
  {
    v9 = (JSC::AssemblerBuffer *)(result + 14);
    do
    {
      if ((v8 + 4) > result[48])
      {
        v10 = v9;
        v11 = result;
        JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
        v9 = v10;
        result = v11;
        v8 = v11[50];
      }
      *(_DWORD *)(*((_QWORD *)result + 7) + v8) = -721215457;
      v8 = result[50] + 4;
      result[50] = v8;
    }
    while (v8 < result[13]);
  }
  result[52] = 0;
  return result;
}

void JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(unsigned int *a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  unsigned int v16;
  JSC::AssemblerBuffer *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;

  v8 = a3;
  v9 = this;
  if ((_DWORD)this == -1)
  {
    v11 = 310378496;
    goto LABEL_5;
  }
  if (!(_DWORD)this)
  {
    v11 = 1384120320;
LABEL_5:
    v13 = a1 + 50;
    v12 = a1[50];
    v14 = v11 & 0xFFFFFFE0 | a3 & 0x1F;
LABEL_8:
    v17 = (JSC::AssemblerBuffer *)(v13 - 36);
    v18 = v12 + 4;
    v19 = *(v13 - 2);
    v20 = v13;
LABEL_9:
    if (v18 > v19)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v17, (uint64_t)this, a3, a4, a5, a6, a7, a8);
      v12 = *v20;
    }
    *(_DWORD *)(*(_QWORD *)v17 + v12) = v14;
    *v20 += 4;
    return;
  }
  v15 = JSC::ARM64LogicalImmediate::create32(this);
  if (v15 != -1)
  {
    v16 = a1[50];
    v13 = a1 + 50;
    v12 = v16;
    v14 = v8 | (v15 << 10) | 0x320003E0;
    goto LABEL_8;
  }
  if ((unsigned __int16)v9 == 0xFFFF)
    v21 = -1;
  else
    v21 = 0;
  if ((_WORD)v9)
    v22 = v21;
  else
    v22 = 1;
  v23 = HIWORD(v9);
  if (!HIWORD(v9))
  {
    if (!(_WORD)v9)
      return;
    v24 = v8 & 0x1F;
    v17 = (JSC::AssemblerBuffer *)(a1 + 14);
    v20 = a1 + 50;
    v25 = a1 + 48;
    goto LABEL_27;
  }
  if (HIWORD(v9) == 0xFFFF)
    --v22;
  v24 = v8 & 0x1F;
  v17 = (JSC::AssemblerBuffer *)(a1 + 14);
  v20 = a1 + 50;
  v25 = a1 + 48;
  if ((v22 & 0x80000000) == 0)
  {
    if (!(_WORD)v9)
    {
      v26 = v24 | (32 * HIWORD(v9));
      v27 = 1386217472;
LABEL_34:
      v14 = v26 | v27;
      v12 = *v20;
      v18 = *v20 + 4;
      goto LABEL_35;
    }
LABEL_27:
    v28 = v24 & 0xFFE0001F | (32 * (unsigned __int16)v9) | 0x52800000;
    v29 = *v20;
    if (*v20 + 4 > *v25)
    {
      v35 = v24;
      v33 = v24 & 0xFFE0001F | (32 * (unsigned __int16)v9) | 0x52800000;
      JSC::AssemblerBuffer::outOfLineGrow(v17, (uint64_t)this, a3, a4, a5, a6, a7, a8);
      v28 = v33;
      v23 = HIWORD(v9);
      v24 = v35;
      v29 = *v20;
    }
    *(_DWORD *)(*(_QWORD *)v17 + v29) = v28;
    v30 = *v20;
    v12 = *v20 + 4;
    *v20 = v12;
    if (v23)
      goto LABEL_30;
    return;
  }
  if ((unsigned __int16)v9 == 0xFFFF)
  {
    if (HIWORD(v9) == 0xFFFF)
      return;
    v26 = v24 | (32 * (HIWORD(v9) ^ 0xFFFF));
    v27 = 312475648;
    goto LABEL_34;
  }
  v31 = v24 | (32 * ((unsigned __int16)v9 ^ 0xFFFF)) | 0x12800000;
  v32 = *v20;
  if (*v20 + 4 > *v25)
  {
    v36 = v24;
    v34 = v24 | (32 * ((unsigned __int16)v9 ^ 0xFFFF)) | 0x12800000;
    JSC::AssemblerBuffer::outOfLineGrow(v17, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    v31 = v34;
    v23 = HIWORD(v9);
    v24 = v36;
    v32 = *v20;
  }
  *(_DWORD *)(*(_QWORD *)v17 + v32) = v31;
  v30 = *v20;
  v12 = *v20 + 4;
  *v20 = v12;
  if (v23 != 0xFFFF)
  {
LABEL_30:
    v14 = v24 | (32 * HIWORD(v9)) | 0x72A00000;
    v18 = v30 + 8;
LABEL_35:
    v19 = *v25;
    goto LABEL_9;
  }
}

uint64_t JSC::ARM64LogicalImmediate::create64(uint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if ((unint64_t)(this + 1) < 2)
    return 0xFFFFFFFFLL;
  v1 = this ^ (this >> 63);
  v2 = HIDWORD(v1);
  if (!HIDWORD(v1))
    v2 = this ^ (this >> 63);
  if (v2 < 0x10000)
  {
    v3 = 32 * (HIDWORD(v1) != 0);
  }
  else
  {
    v2 >>= 16;
    v3 = (32 * (HIDWORD(v1) != 0)) | 0x10;
  }
  if (v2 >= 0x100)
  {
    v2 >>= 8;
    v3 |= 8u;
  }
  if (v2 >= 0x10)
  {
    v2 >>= 4;
    v3 |= 4u;
  }
  if (v2 >= 4)
  {
    v2 >>= 2;
    v3 += 2;
  }
  if (v2 <= 1)
    v4 = v3;
  else
    v4 = v3 + 1;
  v5 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v4) ^ v1;
  if (!v5)
  {
    v9 = 0;
    goto LABEL_34;
  }
  v6 = HIDWORD(v5);
  if (!HIDWORD(v5))
    v6 = v5;
  v7 = (32 * (HIDWORD(v5) != 0)) | 0x10;
  if (v6 < 0x10000)
    v7 = 32 * (HIDWORD(v5) != 0);
  else
    v6 >>= 16;
  if (v6 >= 0x100)
  {
    v6 >>= 8;
    v7 |= 8u;
  }
  if (v6 >= 0x10)
  {
    v6 >>= 4;
    v7 |= 4u;
  }
  if (v6 >= 4)
  {
    v6 >>= 2;
    v7 += 2;
  }
  if (v6 > 1)
    ++v7;
  if (v5 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7)
  {
    v9 = v7 + 1;
LABEL_34:
    v10 = 63 - v4;
    v11 = v4 - v9;
    v12 = v9 - v4 + 62;
    if (this < 0)
    {
      v13 = v10;
    }
    else
    {
      v12 = v11;
      v13 = -v9 & 0x3F;
    }
    return v12 | (v13 << 6) | 0x1000u;
  }
  if ((_DWORD)this != HIDWORD(this))
    return 0xFFFFFFFFLL;
  return JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)this);
}

uint64_t JSC::ARM64LogicalImmediate::create32(JSC::ARM64LogicalImmediate *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int8 v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  if (((_DWORD)this + 1) < 2)
    return 0xFFFFFFFFLL;
  v36 = v1;
  v37 = v2;
  v3 = this & 0x80000000;
  v33 = v3 >> 31;
  if (v3)
    v4 = this ^ 0xFFFFFFFFLL;
  else
    v4 = this;
  v5 = v4 >> 16;
  if (v4 < 0x10000)
    v5 = v4;
  if (v5 < 0x100)
  {
    v6 = 16 * (v4 >> 16 != 0);
  }
  else
  {
    v5 >>= 8;
    v6 = (16 * (v4 >> 16 != 0)) | 8;
  }
  if (v5 >= 0x10)
  {
    v5 >>= 4;
    v6 |= 4u;
  }
  if (v5 >= 4)
  {
    v5 >>= 2;
    v6 |= 2u;
  }
  if (v5 <= 1)
    v7 = v6;
  else
    v7 = v6 + 1;
  v35 = v7;
  v8 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7) ^ v4;
  if (!v8)
  {
    v14 = 0;
    goto LABEL_37;
  }
  v9 = 0xFFFFFFFFuLL >> (63 - v7);
  if (HIDWORD(v8))
  {
    v10 = 1;
  }
  else
  {
    v9 = v8;
    v10 = 0;
  }
  if (v9 < 0x10000)
  {
    v11 = 32 * v10;
  }
  else
  {
    v9 >>= 16;
    v11 = (32 * (v10 & 1)) | 0x10;
  }
  if (v9 >= 0x100)
  {
    v9 >>= 8;
    v11 |= 8u;
  }
  if (v9 >= 0x10)
  {
    v9 >>= 4;
    v11 |= 4u;
  }
  if (v9 >= 4)
  {
    v9 >>= 2;
    v11 += 2;
  }
  if (v9 <= 1)
    v12 = v11;
  else
    v12 = v11 + 1;
  v34 = v12;
  if (v8 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v12)
  {
    v14 = v12 + 1;
LABEL_37:
    v15 = (v3 >> 31);
    v16 = v7 - v14;
    v17 = 31 - v7;
    v18 = v14 - v7 + 30;
    v19 = v15 == 0;
    if (v15)
      v20 = v18;
    else
      v20 = v16;
    if (v19)
      v21 = -v14 & 0x1F;
    else
      v21 = v17;
    return v20 | (v21 << 6);
  }
  if ((unsigned __int16)this != this >> 16)
    return 0xFFFFFFFFLL;
  v32 = this;
  v22 = (unsigned __int16)this;
  if (JSC::ARM64LogicalImmediate::findBitRange<16u>((unsigned __int16)this, &v35, &v34, &v33))
  {
    if (v33)
    {
      v26 = 15 - v35;
      v27 = v34 - v35 + 14;
    }
    else
    {
      v26 = -v34 & 0xF;
      v27 = v35 - v34;
    }
    return v27 | (v26 << 6) | 0x20u;
  }
  else
  {
    if (v32 != v22 >> 8)
      return 0xFFFFFFFFLL;
    if (JSC::ARM64LogicalImmediate::findBitRange<8u>(v32, &v35, &v34, &v33))
    {
      if (v33)
      {
        v28 = 7 - v35;
        v29 = v34 - v35 + 6;
      }
      else
      {
        v28 = -v34 & 7;
        v29 = v35 - v34;
      }
      return v29 | (v28 << 6) | 0x30u;
    }
    else
    {
      if ((v32 & 0xF) != v32 >> 4)
        return 0xFFFFFFFFLL;
      if (JSC::ARM64LogicalImmediate::findBitRange<4u>(v32 & 0xF, &v35, &v34, &v33))
      {
        if (v33)
        {
          v30 = 3 - v35;
          v31 = v34 - v35 + 2;
        }
        else
        {
          v30 = -v34 & 3;
          v31 = v35 - v34;
        }
        return v31 | (v30 << 6) | 0x38u;
      }
      else
      {
        v23 = v32 & 3;
        if ((_DWORD)v23 != (v32 & 0xF) >> 2
          || !JSC::ARM64LogicalImmediate::findBitRange<2u>(v23, &v35, &v34, &v33))
        {
          return 0xFFFFFFFFLL;
        }
        v24 = v35 - v34;
        if (v33)
        {
          v24 = v34 - v35;
          v25 = 1 - v35;
        }
        else
        {
          v25 = v34 & 1;
        }
        return v24 | (v25 << 6) | 0x3Cu;
      }
    }
  }
}

uint64_t JSC::ARM64LogicalImmediate::highestSetBit(unint64_t this)
{
  unint64_t v1;
  unsigned int v2;

  v1 = HIDWORD(this);
  if (!HIDWORD(this))
    v1 = this;
  if (v1 < 0x10000)
  {
    v2 = 32 * (HIDWORD(this) != 0);
  }
  else
  {
    v1 >>= 16;
    v2 = (32 * (HIDWORD(this) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8u;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4u;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  if (v1 <= 1)
    return v2;
  else
    return v2 + 1;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<16u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  int v12;

  *a4 = (unint64_t)((unsigned __int16)a1 & 0x8000) >> 15;
  if ((a1 & 0x8000) != 0)
    v6 = a1 ^ 0xFFFF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  *a2 = v7;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v9 = v8 ^ v6;
  if (v8 == v6)
  {
    v12 = 0;
LABEL_8:
    *a3 = v12;
    return 1;
  }
  v10 = JSC::ARM64LogicalImmediate::highestSetBit(v8 ^ v6);
  result = 0;
  *a3 = v10;
  if (v9 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v10)
  {
    v12 = v10 + 1;
    goto LABEL_8;
  }
  return result;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<8u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;

  *a4 = (a1 & 0x80) >> 7;
  if ((a1 & 0x80) != 0)
    v6 = a1 ^ 0xFF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  *a2 = v7;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v9 = v8 ^ v6;
  if (v8 == v6)
  {
    v11 = 0;
    goto LABEL_7;
  }
  v10 = JSC::ARM64LogicalImmediate::highestSetBit(v8 ^ v6);
  *a3 = v10;
  if (v9 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v10)
  {
    v11 = v10 + 1;
LABEL_7:
    *a3 = v11;
    return 1;
  }
  return 0;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<4u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  int v12;

  *a4 = (a1 & 8) >> 3;
  if ((a1 & 8) != 0)
    v6 = a1 ^ 0xF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  v8 = 0;
  *a2 = v7;
  v9 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v10 = v9 ^ v6;
  if (v9 == v6)
    goto LABEL_5;
  v12 = JSC::ARM64LogicalImmediate::highestSetBit(v9 ^ v6);
  result = 0;
  *a3 = v12;
  if (v10 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v12)
  {
    v8 = v12 + 1;
LABEL_5:
    *a3 = v8;
    return 1;
  }
  return result;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<2u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  int v12;

  *a4 = (a1 & 2) >> 1;
  if ((a1 & 2) != 0)
    v6 = a1 ^ 3;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  v8 = 0;
  *a2 = v7;
  v9 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v10 = v9 ^ v6;
  if (v9 == v6)
    goto LABEL_5;
  v12 = JSC::ARM64LogicalImmediate::highestSetBit(v9 ^ v6);
  result = 0;
  *a3 = v12;
  if (v10 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v12)
  {
    v8 = v12 + 1;
LABEL_5:
    *a3 = v8;
    return 1;
  }
  return result;
}

void JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(_DWORD *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  JSC::AssemblerBuffer *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;

  v8 = a3;
  if (this == -1)
  {
    v11 = -1837105152;
    goto LABEL_5;
  }
  if (!this)
  {
    v11 = -763363328;
LABEL_5:
    v13 = a1 + 50;
    v12 = a1[50];
    v14 = v11 & 0xFFFFFFE0 | a3 & 0x1F;
LABEL_8:
    v17 = (JSC::AssemblerBuffer *)(v13 - 36);
    v18 = v12 + 4;
    v19 = *(v13 - 2);
    v20 = v13;
    goto LABEL_9;
  }
  v15 = JSC::ARM64LogicalImmediate::create64(this);
  if (v15 != -1)
  {
    v16 = a1[50];
    v13 = a1 + 50;
    v12 = v16;
    v14 = v8 | (v15 << 10) | 0xB20003E0;
    goto LABEL_8;
  }
  if ((unsigned __int16)this == 0xFFFF)
    v21 = -1;
  else
    v21 = 0;
  if (!(_WORD)this)
    v21 = 1;
  v22 = WORD1(this);
  if (WORD1(this) == 0xFFFF)
    v23 = v21 - 1;
  else
    v23 = v21;
  if (WORD1(this))
    v24 = v23;
  else
    v24 = v21 + 1;
  v25 = WORD2(this);
  if (WORD2(this))
  {
    if (WORD2(this) == 0xFFFF)
      --v24;
  }
  else
  {
    ++v24;
  }
  v26 = HIWORD(this);
  if (HIWORD(this))
  {
    if ((_DWORD)v26 == 0xFFFF)
      --v24;
  }
  else
  {
    ++v24;
  }
  v27 = v8 & 0x1F;
  v17 = (JSC::AssemblerBuffer *)(a1 + 14);
  v20 = a1 + 50;
  if (v24 < 0)
  {
    if ((unsigned __int16)this == 0xFFFF)
    {
      if (WORD1(this) == 0xFFFF)
      {
        if (WORD2(this) == 0xFFFF)
        {
          if ((_DWORD)v26 == 0xFFFF)
            return;
          v14 = v27 | (32 * (v26 ^ 0xFFFF)) | 0x92E00000;
          v12 = a1[50];
          goto LABEL_78;
        }
        v12 = a1[50];
        v44 = v12 + 4;
        v45 = a1[48];
        v46 = v27 | (32 * (WORD2(this) ^ 0xFFFF)) | 0x92C00000;
        goto LABEL_73;
      }
      v42 = v27 | (32 * (WORD1(this) ^ 0xFFFF)) | 0x92A00000;
      v12 = a1[50];
      v43 = v12 + 4;
    }
    else
    {
      v39 = v27 | (32 * ((unsigned __int16)this ^ 0xFFFF)) | 0x92800000;
      v40 = a1[50];
      if (v40 + 4 > a1[48])
      {
        v60 = v27;
        v48 = v27 | (32 * ((unsigned __int16)this ^ 0xFFFF)) | 0x92800000;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
        v39 = v48;
        v22 = WORD1(this);
        v25 = WORD2(this);
        v27 = v60;
        v26 = HIWORD(this);
        v40 = *v20;
      }
      *(_DWORD *)(*(_QWORD *)v17 + v40) = v39;
      v41 = *v20;
      v12 = *v20 + 4;
      *v20 = v12;
      if (v22 == 0xFFFF)
        goto LABEL_68;
      v42 = v27 | (32 * WORD1(this)) | 0xF2A00000;
      v43 = v41 + 8;
    }
    if (v43 > a1[48])
    {
      v52 = v25;
      v55 = v26;
      v50 = v42;
      v61 = v27;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
      v42 = v50;
      v25 = v52;
      LODWORD(v26) = v55;
      v27 = v61;
      v12 = *v20;
    }
    *(_DWORD *)(*(_QWORD *)v17 + v12) = v42;
    v12 = *v20 + 4;
    *v20 = v12;
LABEL_68:
    if (v25 == 0xFFFF)
    {
LABEL_76:
      if ((_DWORD)v26 == 0xFFFF)
        return;
      v14 = v27 | (32 * v26) | 0xF2E00000;
LABEL_78:
      v18 = v12 + 4;
      v19 = a1[48];
LABEL_9:
      if (v18 <= v19)
      {
LABEL_10:
        *(_DWORD *)(*(_QWORD *)v17 + v12) = v14;
        *v20 += 4;
        return;
      }
LABEL_59:
      JSC::AssemblerBuffer::outOfLineGrow(v17, this, a3, a4, a5, a6, a7, a8);
      v12 = *v20;
      goto LABEL_10;
    }
    v44 = v12 + 4;
    v45 = a1[48];
    v46 = v27 & 0xFFE0001F | (32 * WORD2(this)) | 0xF2C00000;
LABEL_73:
    if (v44 > v45)
    {
      v56 = v26;
      v62 = v27;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
      v27 = v62;
      LODWORD(v26) = v56;
      v12 = *v20;
    }
    *(_DWORD *)(*(_QWORD *)v17 + v12) = v46;
    v12 = *v20 + 4;
    *v20 = v12;
    goto LABEL_76;
  }
  if (!(_WORD)this)
  {
    if (!WORD1(this))
    {
      LOBYTE(v22) = 1;
      if (!WORD2(this))
        goto LABEL_54;
      goto LABEL_48;
    }
    v32 = v27 | (32 * WORD1(this)) | 0xD2A00000;
    v31 = a1[50];
    v33 = v31 + 4;
    goto LABEL_44;
  }
  v28 = v27 & 0xFFE0001F | (32 * (unsigned __int16)this) | 0xD2800000;
  v29 = a1[50];
  if (v29 + 4 > a1[48])
  {
    v57 = v27;
    v47 = v27 & 0xFFE0001F | (32 * (unsigned __int16)this) | 0xD2800000;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
    v28 = v47;
    v22 = WORD1(this);
    v25 = WORD2(this);
    v27 = v57;
    v26 = HIWORD(this);
    v29 = *v20;
  }
  *(_DWORD *)(*(_QWORD *)v17 + v29) = v28;
  v30 = *v20;
  v31 = *v20 + 4;
  *v20 = v31;
  if (v22)
  {
    v32 = v27 | (32 * WORD1(this)) | 0xF2A00000;
    v33 = v30 + 8;
LABEL_44:
    if (v33 > a1[48])
    {
      v51 = v25;
      v53 = v26;
      v49 = v32;
      v58 = v27;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
      v32 = v49;
      v25 = v51;
      LODWORD(v26) = v53;
      v27 = v58;
      v31 = *v20;
    }
    LOBYTE(v22) = 0;
    *(_DWORD *)(*(_QWORD *)v17 + v31) = v32;
    *v20 += 4;
  }
  if (!v25)
    goto LABEL_54;
LABEL_48:
  v34 = a1[50];
  if ((v22 & 1) != 0)
    v35 = -759169024;
  else
    v35 = -222298112;
  v36 = v27 & 0xFFE0001F | (32 * WORD2(this)) | v35;
  if (v34 + 4 > a1[48])
  {
    v54 = v26;
    v59 = v27;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), this, a3, a4, a5, a6, a7, a8);
    v27 = v59;
    LODWORD(v26) = v54;
    v34 = *v20;
  }
  LOBYTE(v22) = 0;
  *(_DWORD *)(*(_QWORD *)v17 + v34) = v36;
  *v20 += 4;
LABEL_54:
  if ((_DWORD)v26)
  {
    v37 = v27 | (32 * v26);
    v12 = a1[50];
    if ((v22 & 1) != 0)
      v38 = -757071872;
    else
      v38 = -220200960;
    v14 = v37 | v38;
    if (v12 + 4 <= a1[48])
      goto LABEL_10;
    goto LABEL_59;
  }
}

_DWORD *JSC::ARM64Assembler::label@<X0>(_DWORD *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  int v9;
  JSC::AssemblerBuffer *v10;
  JSC::AssemblerBuffer *v11;
  int *v12;
  uint64_t v13;

  v9 = this[42];
  *a9 = v9;
  if (v9 < this[5])
  {
    v10 = (JSC::AssemblerBuffer *)(this + 6);
    do
    {
      if ((v9 + 4) > this[40])
      {
        v13 = (uint64_t)this;
        v11 = v10;
        v12 = a9;
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v10 = v11;
        a9 = v12;
        this = (_DWORD *)v13;
        v9 = *(_DWORD *)(v13 + 168);
      }
      *(_DWORD *)(*((_QWORD *)this + 3) + v9) = -721215457;
      v9 = this[42] + 4;
      this[42] = v9;
      *a9 = v9;
    }
    while (v9 < this[5]);
  }
  return this;
}

uint64_t JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v6 = (_QWORD *)JSC::DFG::SlowPathGenerator::SlowPathGenerator(a1, (JSC::DFG::SpeculativeJIT *)a3);
  *v6 = off_1E3574808;
  result = (uint64_t)(v6 + 8);
  v15 = *((unsigned int *)a2 + 3);
  *(_QWORD *)(a1 + 48) = result;
  *(_DWORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 60) = v15;
  if (v15 >= 3)
  {
    if (v15 >= 0x15555556)
    {
      __break(0xC471u);
      return result;
    }
    v16 = 12 * v15;
    result = WTF::fastMalloc((WTF *)(12 * v15));
    *(_DWORD *)(a1 + 56) = (v16 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)(a1 + 48) = result;
  }
  v17 = *((_DWORD *)a2 + 3);
  if (v17)
  {
    v18 = *a2;
    v19 = *a2 + 12 * v17;
    do
    {
      *(_DWORD *)result = *(_DWORD *)v18;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v18 + 4);
      v18 += 12;
      result += 12;
    }
    while (v18 != v19);
  }
  v20 = a3[50];
  for (*(_DWORD *)(a1 + 88) = v20; v20 < a3[13]; *(_DWORD *)(a1 + 88) = v20)
  {
    if ((v20 + 4) > a3[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 14), v7, v8, v9, v10, v11, v12, v13);
      v20 = a3[50];
    }
    *(_DWORD *)(*((_QWORD *)a3 + 7) + v20) = -721215457;
    v20 = a3[50] + 4;
    a3[50] = v20;
  }
  a3[52] = 0;
  return a1;
}

void JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  __int128 v95;

  v8 = a5;
  v9 = a4;
  v10 = (_QWORD *)a3;
  v11 = a1;
  if ((a2 & 1) == 0)
  {
    v12 = 0;
    v13 = a1 + 4776;
    v14 = (_DWORD *)(a3 + 12);
    v15 = (_DWORD *)(a3 + 8);
    a3 = 0xFFFE000000000002;
    a4 = 1536;
    a5 = 5120;
    a7 = 4096;
    while (1)
    {
      if (v12 != v8 && v12 != v9)
      {
        v55 = *(_DWORD *)(v13 + 12 * v12);
        if (v55 != 0x3FFFFFFF)
          break;
      }
LABEL_47:
      v12 = (v12 + 1);
      if ((_DWORD)v12 == 16)
        goto LABEL_13;
    }
    v56 = ~v55;
    if (v56 >= *(unsigned int *)(v11 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C26EB4);
    }
    v57 = *(_QWORD *)(v11 + 3992);
    v58 = (uint64_t *)(v57 + 24 * (int)v56);
    v59 = *v58;
    v60 = *((unsigned __int8 *)v58 + 12);
    if (*((_BYTE *)v58 + 14))
    {
      v61 = 0;
      goto LABEL_57;
    }
    if (v60 != 1)
    {
      if ((v60 & 0xFE) == 6)
        v61 = 3;
      else
        v61 = 4;
LABEL_57:
      v62 = v60 - 1;
      v51 = 4864;
      switch(v62)
      {
        case 0:
          goto LABEL_85;
        case 1:
          v76 = v13;
          v77 = a8;
          v86 = v15;
          v89 = v10;
          v94 = a2;
          v83 = a6;
          v81 = *v58;
          if ((JSC::DFG::Node::hasConstant((JSC::DFG::Node *)v59) & 1) != 0)
          {
            v51 = 512;
            goto LABEL_96;
          }
          v79 = *(unsigned __int8 *)(v57 + 24 * (int)v56 + 13);
          if (v79 == 2 || v79 == 0)
            goto LABEL_95;
          if (v79 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197C26EACLL);
          }
          v51 = 5632;
          goto LABEL_96;
        case 2:
          v76 = v13;
          v77 = a8;
          v86 = v15;
          v89 = v10;
          v94 = a2;
          v83 = a6;
          v81 = *v58;
          if ((JSC::DFG::Node::hasConstant((JSC::DFG::Node *)v59) & 1) != 0)
          {
            v51 = 768;
          }
          else
          {
            v78 = *(unsigned __int8 *)(v57 + 24 * (int)v56 + 13);
            if (!*(_BYTE *)(v57 + 24 * (int)v56 + 13))
              goto LABEL_95;
            if (v78 != 2)
            {
              if (v78 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x197C26E0CLL);
              }
LABEL_95:
              v51 = 5120;
              goto LABEL_96;
            }
            v51 = 5376;
          }
LABEL_96:
          v59 = v81;
          a6 = v83;
          v15 = v86;
          v10 = v89;
          a2 = v94;
          a3 = 0xFFFE000000000002;
          a4 = 1536;
          a5 = 5120;
          a7 = 4096;
          a8 = v77;
          v13 = v76;
          break;
        case 4:
          __break(0xC471u);
          JUMPOUT(0x197C26E74);
        case 5:
          v63 = *(unsigned __int16 *)(v59 + 18);
          if (v63 <= 0xB5)
          {
            if (v63 >= 3)
              goto LABEL_67;
          }
          else if (v63 != 182 && v63 != 355 && v63 != 348)
          {
LABEL_67:
            v51 = 4864;
            goto LABEL_44;
          }
          if (v63 > 2
            || ((v72 = **(_QWORD **)(v59 + 72)) != 0 ? (v73 = (v72 & 0xFFFE000000000002) == 0) : (v73 = 0), !v73))
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v11 + 3960), *(JSC::DFG::Node **)(v11 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x2F2, "SilentRegisterSavePlan JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(VirtualRegister, GPRReg)", "node->isCellConstant()");
            __break(0xC471u);
            JUMPOUT(0x197C26CE0);
          }
          v51 = 1280;
          goto LABEL_44;
        case 6:
          goto LABEL_44;
        default:
          v50 = *(unsigned __int16 *)(v59 + 18);
          if (v50 > 0xB5)
          {
            if (v50 != 182 && v50 != 355 && v50 != 348)
            {
LABEL_41:
              if (*(_BYTE *)(v57 + 24 * (int)v56 + 13) == 1)
                v51 = 4096;
              else
                v51 = 5120;
              goto LABEL_44;
            }
          }
          else if (v50 >= 3)
          {
            goto LABEL_41;
          }
          if (v50 <= 2 && (v74 = **(_QWORD **)(v59 + 72)) != 0)
          {
            if ((v74 & 0xFFFE000000000002) != 0)
              v51 = 1792;
            else
              v51 = 1536;
          }
          else
          {
            v51 = 1792;
          }
          goto LABEL_44;
      }
      goto LABEL_44;
    }
    v61 = 2;
LABEL_85:
    v75 = *(unsigned __int16 *)(v59 + 18);
    if (v75 > 0xB5)
    {
      if (v75 == 182 || v75 == 355 || v75 == 348)
        goto LABEL_87;
    }
    else if (v75 < 3)
    {
LABEL_87:
      v51 = 256;
LABEL_44:
      *(_QWORD *)&v95 = v51 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(v12 & 0x7F) << 16) | v61;
      *((_QWORD *)&v95 + 1) = v59;
      v52 = *v14;
      if ((_DWORD)v52 == *v15)
      {
        v64 = a2;
        v65 = a6;
        v66 = v10;
        v93 = v13;
        v67 = v15;
        v68 = v14;
        v69 = v11;
        v70 = a8;
        v71 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v52 + 1), (unint64_t)&v95, 1536, 5120, a6, 4096, a8);
        a8 = v70;
        v11 = v69;
        v14 = v68;
        a7 = 4096;
        a5 = 5120;
        a4 = 1536;
        a3 = 0xFFFE000000000002;
        v15 = v67;
        v13 = v93;
        a2 = v64;
        v10 = v66;
        a6 = v65;
        v52 = *((unsigned int *)v66 + 3);
        v53 = *v66;
        v54 = *v71;
      }
      else
      {
        v53 = *v10;
        v54 = v95;
      }
      *(_OWORD *)(v53 + 16 * v52) = v54;
      ++*v14;
      goto LABEL_47;
    }
    v51 = 3840;
    goto LABEL_44;
  }
  v90 = a2;
  v82 = a6;
  v16 = 0;
  *(_BYTE *)(a1 + 5768) = 1;
  v18 = a1 + 4776;
  v14 = (_DWORD *)(a3 + 12);
  v19 = a3;
  v20 = (_DWORD *)(a3 + 8);
  do
  {
    if (v16 != v8 && v16 != v9)
    {
      v21 = *(_DWORD *)(v18 + 12 * v16);
      if (v21 != 0x3FFFFFFF)
      {
        *(_QWORD *)&v95 = JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(a1, v21, v16);
        *((_QWORD *)&v95 + 1) = v22;
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a1, (uint64_t)&v95, v23, v24, v25, v26, v27, v28);
        v30 = *v14;
        if ((_DWORD)v30 == *v20)
        {
          v33 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, (void *)(v30 + 1), (unint64_t)&v95, a4, a5, v29, a7, a8);
          v30 = *(unsigned int *)(v19 + 12);
          v31 = *(_QWORD *)v19;
          v32 = *v33;
        }
        else
        {
          v31 = *(_QWORD *)v19;
          v32 = v95;
        }
        *(_OWORD *)(v31 + 16 * v30) = v32;
        ++*v14;
      }
    }
    v16 = (v16 + 1);
  }
  while ((_DWORD)v16 != 16);
  a6 = v82;
  v10 = (_QWORD *)v19;
  LODWORD(a2) = v90;
  v15 = v20;
  v11 = a1;
LABEL_13:
  v34 = 0;
  do
  {
    v35 = *(_DWORD *)(v11 + 4968 + 12 * v34);
    if (v35 == 0x3FFFFFFF)
      goto LABEL_15;
    v36 = JSC::FPRInfo::toRegister::registerForIndex[v34];
    if (v36 == a6)
      goto LABEL_15;
    v37 = ~v35;
    if (v37 >= *(unsigned int *)(v11 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C26A98);
    }
    v38 = *(_QWORD *)(v11 + 3992) + 24 * (int)v37;
    v39 = *(_QWORD *)v38;
    v40 = *(unsigned __int8 *)(v38 + 14);
    v41 = *(unsigned __int16 *)(v39 + 18);
    v42 = 3328;
    if (v41 <= 0xB5)
    {
      if (v41 < 3)
        goto LABEL_26;
      goto LABEL_25;
    }
    if (v41 != 182)
    {
      if (v41 == 355 || v41 == 348)
      {
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
        v42 = 3328;
        goto LABEL_26;
      }
LABEL_25:
      v42 = 5888;
    }
LABEL_26:
    if (v40)
      v43 = 0;
    else
      v43 = 5;
    *(_QWORD *)&v95 = v42 | ((unint64_t)(((_BYTE)v36 + 32) & 0x7F) << 16) | v43;
    *((_QWORD *)&v95 + 1) = v39;
    if ((_DWORD)a2)
    {
      v92 = a2;
      v49 = a6;
      v85 = v15;
      v88 = v10;
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v11, (uint64_t)&v95, a3, a4, a5, a6, a7, a8);
      v15 = v85;
      v10 = v88;
      LODWORD(a2) = v92;
      a6 = v49;
    }
    v44 = *v14;
    if ((_DWORD)v44 == *v15)
    {
      v91 = a2;
      v47 = a6;
      v84 = v15;
      v87 = v10;
      v48 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v44 + 1), (unint64_t)&v95, a4, a5, a6, a7, a8);
      v15 = v84;
      v10 = v87;
      LODWORD(a2) = v91;
      a6 = v47;
      v44 = *((unsigned int *)v87 + 3);
      v45 = *v87;
      v46 = *v48;
    }
    else
    {
      v45 = *v10;
      v46 = v95;
    }
    *(_OWORD *)(v45 + 16 * v44) = v46;
    ++*v14;
LABEL_15:
    v34 = (v34 + 1);
  }
  while ((_DWORD)v34 != 23);
}

void JSC::DFG::CallArrayAllocatorSlowPathGenerator::~CallArrayAllocatorSlowPathGenerator(JSC::DFG::CallArrayAllocatorSlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::CallArrayAllocatorSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorSlowPathGenerator *)*((_QWORD *)this + 15);
  if ((JSC::DFG::CallArrayAllocatorSlowPathGenerator *)((char *)this + 136) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::CallArrayAllocatorSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorSlowPathGenerator *)*((_QWORD *)this + 15);
  if ((JSC::DFG::CallArrayAllocatorSlowPathGenerator *)((char *)this + 136) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SlowPathGenerator::call(JSC::DFG::SlowPathGenerator *this)
{
  __break(0xC471u);
}

void JSC::DFG::CallArrayAllocatorSlowPathGenerator::generateInternal(JSC::DFG::CallArrayAllocatorSlowPathGenerator *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::ARM64LogicalImmediate *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint8x8_t v69;
  __int32 v70;
  uint8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  unsigned __int8 *v101;
  JSC::DFG::SpeculativeJIT *v102;
  uint64_t v103;
  unsigned int v104;
  JSC::DFG::SpeculativeJIT *v105;
  uint64_t v106;
  _BYTE *v107;
  unsigned __int8 *v108;
  JSC::DFG::SpeculativeJIT *v109;
  unsigned __int8 *v110;
  int64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  JSC::ARM64LogicalImmediate *v117;
  JSC::ARM64LogicalImmediate *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  void *__dst;
  int v123;
  unsigned int v124;
  __int16 v125;
  unint64_t v126;
  unsigned int *v127;

  v8 = a2;
  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    while (v12 < *((unsigned int *)this + 15))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*((_QWORD *)this + 6) + v11), (uint64_t)v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v13 == v11)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_115;
  }
LABEL_5:
  v14 = *((unsigned int *)this + 33);
  v15 = *((unsigned __int8 *)this + 104);
  v118 = *(JSC::ARM64LogicalImmediate **)(*((_QWORD *)v8 + 44) + 16);
  v119 = *((_QWORD *)this + 12);
  v120 = *((_QWORD *)this + 15);
  v117 = (JSC::ARM64LogicalImmediate *)*((_QWORD *)this + 14);
  v16 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)this + 27);
  v17 = *((unsigned __int8 *)this + 105);
  v18 = (char *)v8 + 5768;
  *((_BYTE *)v8 + 5768) = 1;
  if ((_DWORD)v14)
  {
    v19 = v14;
    v20 = v120;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v8, v20, a3, a4, a5, a6, a7, a8);
      v20 += 16;
      --v19;
    }
    while (v19);
  }
  __dst = &v125;
  v123 = 1;
  if (v17 != 3)
  {
    v125 = v17 | 0x300;
    v124 = 1;
    v62 = 1;
    while (1)
    {
      v63 = 0;
      v64 = 0;
      v65 = (char *)__dst;
      v66 = v62;
      do
      {
        if ((*((_BYTE *)__dst + v63 + 1) & 0x40) != 0)
          goto LABEL_115;
        v64 |= 1 << *((_BYTE *)__dst + v63 + 1);
        v63 += 2;
      }
      while (2 * v62 != v63);
      v67 = 0;
      do
      {
        v68 = *((_BYTE *)__dst + v67) & 0x7F;
        if (v68 >= 0x40)
          goto LABEL_115;
        v64 &= ~(1 << v68);
        v67 += 2;
      }
      while (2 * v62 != v67);
      v69 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
      v69.i16[0] = vaddlv_u8(v69);
      v70 = v69.i32[0];
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v64));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.i32[0] + v70)
        break;
      v114 = v14;
      v115 = v15;
      v113 = v18;
      v98 = *(_BYTE *)__dst;
      v99 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst, v99, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v124 - 2);
      v100 = v124 - 1;
      v77 = v124 == 1;
      v124 = v100;
      v101 = (unsigned __int8 *)__dst;
      v102 = (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v100);
      if (v77)
      {
        v103 = 0;
        v104 = 0;
        v116 = 0;
        a2 = (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v100);
      }
      else
      {
        v106 = 2 * v100;
        v107 = __dst;
        while (*v107 != v99)
        {
          v107 += 2;
          v106 -= 2;
          if (!v106)
            goto LABEL_103;
        }
        *v107 = v98;
LABEL_103:
        v116 = 0;
        v108 = v101;
        a2 = v102;
        v109 = v102;
        do
        {
          if (*v101 == v101[1])
          {
            v110 = v101;
            if (v109 != (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v124))
            {
              if (v101 == (unsigned __int8 *)a2)
              {
                v110 = (unsigned __int8 *)v109;
              }
              else
              {
                v111 = v108 - (unsigned __int8 *)a2;
                memmove(v109, a2, v108 - (unsigned __int8 *)a2);
                v110 = (unsigned __int8 *)v109 + v111;
              }
            }
            a2 = (JSC::DFG::SpeculativeJIT *)(v101 + 2);
            ++v116;
            v109 = (JSC::DFG::SpeculativeJIT *)v110;
          }
          v101 += 2;
          v108 += 2;
        }
        while (v101 < (unsigned __int8 *)v102);
        v101 = (unsigned __int8 *)__dst;
        v103 = v124;
        v104 = v124;
        v102 = v109;
      }
      v105 = (JSC::DFG::SpeculativeJIT *)&v101[2 * v103];
      if (a2 != v105)
      {
        memmove(v102, a2, v105 - a2);
        v104 = v124;
      }
      v62 = v104 - v116;
      v18 = v113;
      v14 = v114;
      v15 = v115;
LABEL_52:
      v124 = v62;
LABEL_53:
      if (!v62)
      {
        v80 = __dst;
        if (&v125 != __dst && __dst)
        {
          __dst = 0;
          v123 = 0;
          WTF::fastFree((unint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_9;
      }
    }
    v72 = 0;
    if (v62 <= 1uLL)
      v73 = 1;
    else
      v73 = v62;
    v74 = 2 * v73;
    while (1)
    {
      v75 = *((unsigned __int8 *)__dst + v72 + 1);
      if ((v75 & 0x7Fu) >= 0x40)
        goto LABEL_115;
      if (((v64 >> (v75 & 0x7F)) & 1) != 0)
        break;
      v72 += 2;
      if (v74 == v72)
        goto LABEL_53;
    }
    v76 = *((unsigned __int8 *)__dst + v72);
    if (v76 == v75)
    {
LABEL_51:
      memmove(&v65[v72], &v65[v72 + 2], 2 * v66 - v72 - 2);
      v62 = v124 - 1;
      goto LABEL_52;
    }
    v76 = (char)v76;
    if ((char)v76 == 63)
    {
      if ((char)v75 != 31)
      {
        v78 = v75 & 0x1F | 0xD2800000;
        goto LABEL_48;
      }
    }
    else
    {
      v77 = v75 == 31 || v76 == 31;
      if (!v77)
      {
        v78 = v75 & 0xFFE0FFFF | ((v76 & 0x1F) << 16) | 0xAA0003E0;
LABEL_48:
        v79 = *((_DWORD *)v8 + 50);
        if (v79 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v79 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v79) = v78;
        *((_DWORD *)v8 + 50) += 4;
        v65 = (char *)__dst;
        v66 = v124;
        goto LABEL_51;
      }
    }
    v78 = (char)v75 | (32 * v76) | 0x91000000;
    goto LABEL_48;
  }
LABEL_9:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v16, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v117, 1, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v118, 0, v26, v27, v28, v29, v30);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, v119, v31, v32, v33, v34, v35, v36, &v121);
  __dst = (void *)2;
  v127 = 0;
  v41 = *((_QWORD *)v8 + 495);
  v42 = *(_QWORD *)(*((_QWORD *)v8 + 497) + 8);
  if ((v42 & 1) != 0)
  {
    v94 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v95 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v94;
      *(_DWORD *)(v112 + 8) = v95;
      v97 = 1;
      v94 = v112;
    }
    else
    {
      v97 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v42 = v94 | v97;
  }
  v126 = v42;
  v50 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v41, &v126, (uint64_t *)&__dst, &v127, v37, v38, v39, v40);
  if ((v126 & 1) != 0 && (v126 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v126 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((v50 & 1) != 0)
  {
    v81 = 0;
    if ((_DWORD)v14)
    {
      v82 = 16 * v14;
      v83 = (char *)(v120 + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_64;
      }
    }
    else
    {
LABEL_64:
      if ((v15 & 0x40) == 0)
      {
        LOBYTE(v51) = 1;
        v86 = v81 | (1 << v15);
        if ((v86 & 2) != 0)
        {
          v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
          if (v87)
          {
            v51 = __clz(__rbit64(v87));
            if (v51 != 1)
            {
              if (v51 == 31)
              {
                v90 = (unsigned int *)((char *)v8 + 200);
                v89 = *((_DWORD *)v8 + 50);
                v91 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
                v92 = v89 + 4;
                v93 = *((_DWORD *)v8 + 48);
                v88 = -1862270913;
              }
              else
              {
                v88 = v51 | 0xAA0103E0;
                v90 = (unsigned int *)((char *)v8 + 200);
                v89 = *((_DWORD *)v8 + 50);
                v91 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
                v92 = v89 + 4;
                v93 = *((_DWORD *)v8 + 48);
              }
              if (v92 > v93)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v43, v44, v45, v46, v47, v48, v49);
                v89 = *v90;
              }
              *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
              *v90 += 4;
            }
          }
          else
          {
            LOBYTE(v51) = -1;
          }
        }
        goto LABEL_13;
      }
    }
LABEL_115:
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v44, v45, v46, v47, v48, v49);
  LOBYTE(v51) = 0;
LABEL_13:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 31)
    {
      v52 = -1862270945;
    }
    else if ((_DWORD)v15 == 255)
    {
      v52 = -1442774017;
    }
    else
    {
      v52 = v15 | 0xAA0003E0;
    }
    v54 = (unsigned int *)((char *)v8 + 200);
    v53 = *((_DWORD *)v8 + 50);
    if (v53 + 4 > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)v43, v44, v45, v46, v47, v48, v49);
      v53 = *v54;
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + v53) = v52;
    *v54 += 4;
  }
  if ((_DWORD)v14)
  {
    v55 = 16 * v14;
    do
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v8, v120 - 16 + v55, v44, v45, v46, v47, v48, v49);
      v55 -= 16;
    }
    while (v55);
  }
  *v18 = 0;
  if (v50)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, (char)v51, v44, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::load64((uint64_t)v8, *((unsigned __int8 *)this + 104) | 0x800000000, *((char *)this + 105), v45, v46, v47, v48, v49);
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo((uint64_t)this, (uint64_t)v8, v56, v57, v58, v59, v60, v61);
}

uint64_t JSC::DFG::SlowPathGenerator::SlowPathGenerator(uint64_t this, JSC::DFG::SpeculativeJIT *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  JSC::DFG::SpeculativeJIT *v17;
  JSC::DFG::SpeculativeJIT *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((_QWORD *)a2 + 497);
  *(_QWORD *)this = off_1E3574838;
  *(_QWORD *)(this + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 1411);
  *(_DWORD *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = v2;
  v3 = *((_QWORD *)a2 + 684);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v6 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v6 != 0x3FFFFFFF)
        ? (v7 = (_DWORD)v6 == -1)
        : (v7 = 1),
          v7))
    {
      v8 = 2;
    }
    else if (v6 >> 28)
    {
      v17 = a2;
      v19 = this;
      v13 = v5;
      v14 = v6;
      v5 = WTF::fastMalloc((WTF *)0x10);
      a2 = v17;
      this = v19;
      *(_QWORD *)v5 = v13;
      *(_DWORD *)(v5 + 8) = v14;
      v8 = 1;
    }
    else
    {
      v8 = v5;
      v5 = v6 << 36;
    }
    v3 = v5 | v8;
  }
  *(_QWORD *)(this + 24) = v3;
  v4 = *((_QWORD *)a2 + 685);
  if ((v4 & 1) != 0)
  {
    v9 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v10 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
        ? (v11 = (_DWORD)v10 == -1)
        : (v11 = 1),
          v11))
    {
      v12 = 2;
    }
    else if (v10 >> 28)
    {
      v18 = a2;
      v20 = this;
      v15 = v9;
      v16 = v10;
      v9 = WTF::fastMalloc((WTF *)0x10);
      a2 = v18;
      this = v20;
      *(_QWORD *)v9 = v15;
      *(_DWORD *)(v9 + 8) = v16;
      v12 = 1;
    }
    else
    {
      v12 = v9;
      v9 = v10 << 36;
    }
    v4 = v9 | v12;
  }
  *(_QWORD *)(this + 32) = v4;
  *(_WORD *)(this + 40) = *((_WORD *)a2 + 2744);
  return this;
}

uint64_t WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 3)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_13:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 3)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 2;
    goto LABEL_11;
  }
  if (!(v11 >> 28))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  unsigned int v17[2];
  char v18;
  __int16 v19;
  char v20;

  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v13 = 69;
  else
    v13 = 65;
  v17[0] = i;
  v17[1] = 0;
  v18 = v13;
  v19 = 15;
  v20 = -1;
  v16 = *(_DWORD *)(a1 + 88);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v17, &v16, a2, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::sub32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;

  v8 = a4;
  v9 = a2;
  if (a3 < 0x1000)
  {
    v11 = 0;
LABEL_3:
    v12 = a4 | (32 * a2) | v11 | ((a3 & 0xFFF) << 10);
    v13 = 1358954496;
    goto LABEL_12;
  }
  v14 = -(int)a3;
  if (-(int)a3 < 0x1000)
  {
    v15 = 0;
LABEL_6:
    v12 = a4 | (32 * a2) | (v14 << 10);
    v13 = v15 | 0x11000000;
    goto LABEL_12;
  }
  if ((a3 & 0xFFF) == 0)
  {
    v20 = (int)a3 >> 12;
    if (!BYTE3(a3))
    {
      v11 = 0x400000;
      a3 = ((int)a3 >> 12);
      goto LABEL_3;
    }
    v14 = -v20;
    if (-v20 < 0x1000)
    {
      v15 = 0x400000;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C27D08);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (v9 == 31 || v8 == 31)
  {
    v12 = v8 | (32 * v9);
    v13 = 1261461504;
  }
  else
  {
    v12 = v8 & 0x1F | (32 * (v9 & 0x1F));
    v13 = 1259339776;
  }
LABEL_12:
  v16 = v12 | v13;
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CCDF60);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = 1358956048;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a2, v12, v13, v14, v15, v16);
}

uint64_t WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v4 = (*(_QWORD *)a1)++;
  v5 = v4 >> 2;
  v6 = *(unsigned int *)(a1 + 20);
  if (v4 >> 2 >= v6)
  {
    v16 = (_QWORD *)(a1 + 8);
    v17 = WTF::fastMalloc((WTF *)0x100);
    v36 = v17;
    v18 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 16))
    {
      v29 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v18 + 1, (unint64_t)&v36);
      v18 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = *v29;
    }
    else
    {
      *(_QWORD *)(*v16 + 8 * v18) = v17;
    }
    v6 = (v18 + 1);
    *(_DWORD *)(a1 + 20) = v6;
    v4 = *(_QWORD *)a1 - 1;
    v5 = v4 >> 2;
  }
  if (v5 >= v6)
    goto LABEL_33;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5);
  v8 = v4 & 3;
  v9 = v7 + (v8 << 6);
  v10 = *((unsigned int *)a2 + 3);
  result = v9 + 16;
  *(_QWORD *)v9 = v9 + 16;
  *(_DWORD *)(v9 + 8) = 2;
  *(_DWORD *)(v9 + 12) = v10;
  if (v10 < 3)
    goto LABEL_18;
  if (v10 >= 0x15555556)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x197C27FBCLL);
  }
  v12 = 12 * v10;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v13)
    goto LABEL_9;
  v14 = (unint64_t)(v12 + 15) >> 4;
  if (v10 <= 0x22)
  {
    v15 = 23 * v14 + 7;
    goto LABEL_14;
  }
  if (v10 <= 0x341)
  {
    v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
    if (*(_DWORD *)(v13 + 8052) > v15)
    {
LABEL_14:
      v19 = v13 + 8 * v15;
      v20 = v19 + 8064;
      *(_BYTE *)(v19 + 8064) = 1;
      v21 = *(unsigned int *)(v19 + 8080);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(v20 + 16) = v21 - *(_DWORD *)(v20 + 20);
        result = *(_QWORD *)(v20 + 8) - v21;
      }
      else
      {
        v26 = *(_QWORD *)(v20 + 40);
        v27 = *(_QWORD *)(v20 + 24);
        if (!v26)
        {
          if (*(_BYTE *)(v20 + 5) == 6)
          {
            v30 = *(unsigned int *)(v20 + 32);
            v31 = *(_DWORD *)(v20 + 36);
            if (v30 < v31)
            {
              *(_QWORD *)(v20 + 8 * v30 + 56) = 0;
              v32 = (unint64_t *)(8 * v15 + 8 * v30 + v13 + 8128);
              v33 = v31 - 1 - v30;
              while (v33)
              {
                v27 += 1024;
                v35 = *v32++;
                v34 = v35;
                LODWORD(v30) = v30 + 1;
                --v33;
                if (v35)
                {
                  v26 = __rbit64(v34);
                  *(_DWORD *)(v20 + 32) = v30;
                  *(_QWORD *)(v20 + 24) = v27;
                  goto LABEL_23;
                }
              }
              *(_DWORD *)(v20 + 32) = v31;
            }
          }
          *(_BYTE *)v20 = 0;
          goto LABEL_9;
        }
LABEL_23:
        v28 = __clz(v26);
        *(_QWORD *)(v20 + 40) = v26 & ~(0x8000000000000000 >> v28);
        result = v27 + 16 * v28;
      }
      *(_BYTE *)v20 = 0;
      goto LABEL_17;
    }
  }
LABEL_9:
  result = bmalloc_allocate_casual(v12, 1);
LABEL_17:
  *(_DWORD *)(v9 + 8) = v12 / 0xC;
  *(_QWORD *)v9 = result;
LABEL_18:
  v22 = *((_DWORD *)a2 + 3);
  if (v22)
  {
    v23 = *a2;
    v24 = *a2 + 12 * v22;
    do
    {
      *(_DWORD *)result = *(_DWORD *)v23;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      result += 12;
    }
    while (v23 != v24);
  }
  v25 = v7 + (v8 << 6);
  *(_DWORD *)(v25 + 40) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(v25 + 44) = *((_DWORD *)a2 + 11);
  *(_DWORD *)(v25 + 48) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(v25 + 52) = *(uint64_t *)((char *)a2 + 52);
  return result;
}

unint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v8 = result;
  if (a2 == (unsigned int *)result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = a2[3];
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
LABEL_28:
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)v8;
    if (v11)
    {
      v21 = v19 + 12 * v11;
      do
      {
        *(_DWORD *)v20 = *(_DWORD *)v19;
        *(_QWORD *)(v20 + 4) = *(_QWORD *)(v19 + 4);
        v19 += 12;
        v20 += 12;
      }
      while (v19 != v21);
      v19 = *(_QWORD *)a2;
      v11 = *(_DWORD *)(v8 + 12);
      v20 = *(_QWORD *)v8;
    }
    v22 = a2[3];
    if (v11 != v22)
    {
      v23 = v19 + 12 * v22;
      v24 = v20 + 12 * v11;
      v25 = v19 + 12 * v11;
      do
      {
        *(_DWORD *)v24 = *(_DWORD *)v25;
        *(_QWORD *)(v24 + 4) = *(_QWORD *)(v25 + 4);
        v25 += 12;
        v24 += 12;
      }
      while (v25 != v23);
      v11 = a2[3];
    }
    *(_DWORD *)(v8 + 12) = v11;
    return v8;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
    goto LABEL_27;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v12 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      *(_QWORD *)v8 = v8 + 16;
      v12 = 2;
      *(_DWORD *)(v8 + 8) = 2;
    }
  }
  v13 = a2[3];
  if (v12 >= v13)
  {
LABEL_27:
    v11 = *(_DWORD *)(v8 + 12);
    goto LABEL_28;
  }
  v14 = *(_QWORD *)v8;
  v15 = *(_DWORD *)(v8 + 12);
  if (v13 < 3)
  {
    v17 = v8 + 16;
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 2;
    goto LABEL_19;
  }
  if (v13 < 0x15555556)
  {
    v16 = 12 * v13;
    v17 = WTF::fastMalloc((WTF *)(12 * v13));
    *(_DWORD *)(v8 + 8) = (v16 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v8 = v17;
LABEL_19:
    if (v15)
    {
      v18 = v14;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v18;
        *(_QWORD *)(v17 + 4) = *(_QWORD *)(v18 + 4);
        v18 += 12;
        v17 += 12;
      }
      while (v18 != v14 + 12 * v15);
    }
    if (v8 + 16 != v14 && v14)
    {
      if (*(_QWORD *)v8 == v14)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_27;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(char **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v5[72 * *(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x38E38E4)
  {
    v9 = &v5[72 * *(unsigned int *)(result + 12)];
    v10 = 72 * v8;
    v11 = WTF::fastMalloc((WTF *)(72 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,JSC::DFG::OSRExit>::move(v5, v9, v11, v12, v13, v14, v15, v16);
    if (v5)
    {
      if (*(char **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x197C28528);
    }
    v6 = *(char **)a1;
    v7 = (char *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
    v8 = 72 * v4;
    v9 = WTF::fastMalloc((WTF *)(72 * v4));
    *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v9;
    WTF::VectorMover<false,JSC::DFG::OSRExit>::move(v6, v7, v9, v10, v11, v12, v13, v14);
    if (v6)
    {
      if (*(char **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v6, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return 1;
}

void WTF::VectorMover<false,JSC::DFG::OSRExit>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *(_DWORD *)v10;
      *(_WORD *)(v8 + 4) = *((_WORD *)v10 + 2);
      *(_DWORD *)v8 = v11;
      v12 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v12;
      v13 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)(v8 + 16) = v13;
      *(_QWORD *)(v8 + 24) = *((_QWORD *)v10 + 3);
      v14 = *((_QWORD *)v10 + 4);
      *(_QWORD *)(v8 + 37) = *(_QWORD *)(v10 + 37);
      *(_QWORD *)(v8 + 32) = v14;
      v15 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 6) = 0;
      *(_QWORD *)(v8 + 48) = v15;
      LODWORD(v15) = *((_DWORD *)v10 + 14);
      *(_BYTE *)(v8 + 60) = v10[60];
      *(_DWORD *)(v8 + 56) = v15;
      *(_QWORD *)(v8 + 64) = *((_QWORD *)v10 + 8);
      v16 = *((_QWORD *)v10 + 6);
      if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v17 = *((_QWORD *)v10 + 2);
      if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v18 = *((_QWORD *)v10 + 1);
      if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v10 += 72;
      v8 += 72;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::Vector<JSC::DFG::SpeculationRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SpeculationRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::SpeculationRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (uint64_t *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::MacroAssemblerARM64::load8SignedExtendTo32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v12 = 947912704;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0xFFF)
  {
    v11 = ((WORD2(a2) & 0xFFF) << 10) | a3 & 0x1F | (32 * (char)a2);
    v12 = 964689920;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v8 & 0x1F | (32 * v9) | 0x38F16800;
LABEL_4:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::xor32(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  v8 = a4;
  v9 = a3;
  v10 = this;
  if ((_DWORD)this == -1)
  {
    v13 = a4 & 0x1F | ((a3 & 0x1F) << 16);
    v14 = 706741216;
  }
  else
  {
    v12 = JSC::ARM64LogicalImmediate::create32(this);
    if (v12 == -1)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v10, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
      v13 = v8 & 0x1F | (32 * (v9 & 0x1F));
      v14 = 1242562560;
    }
    else
    {
      v13 = (32 * (v9 & 0x1F)) | (v12 << 10);
      v14 = v8 | 0x52000000;
    }
  }
  v15 = v13 | v14;
  v18 = *(_DWORD *)(a1 + 200);
  v17 = (unsigned int *)(a1 + 200);
  v16 = v18;
  if (v18 + 4 > *(v17 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36), (uint64_t)this, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
  *v17 += 4;
}

void JSC::MacroAssemblerARM64::lshift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  int v12;
  int v13;

  if (!(_DWORD)a3)
  {
    if ((_DWORD)a2 == (_DWORD)a4)
      return;
    if ((_DWORD)a2 == 63)
    {
      if ((_DWORD)a4 != 31)
      {
        v8 = a4 & 0x1F | 0xD2800000;
        goto LABEL_3;
      }
    }
    else if ((_DWORD)a2 != 31 && (_DWORD)a4 != 31)
    {
      v12 = a4 & 0x1F | ((a2 & 0x1F) << 16);
      v13 = -1442839584;
LABEL_15:
      v8 = v12 | v13;
      goto LABEL_3;
    }
    v12 = a4 | (32 * a2);
    v13 = -1862270976;
    goto LABEL_15;
  }
  v8 = ((-65536 * a3) & 0x3F0000 | (32 * (a2 & 0x1F)) & 0x3E0 | ((a3 & 0x3F) << 10) | a4 & 0x1F) ^ 0xD340FC00;
LABEL_3:
  v10 = a1 + 50;
  v9 = a1[50];
  v11 = a1 + 14;
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = *v10;
  }
  *(_DWORD *)(*v11 + v9) = v8;
  *v10 += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9AC02000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::rshift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (!(_DWORD)a3)
  {
    if ((_DWORD)a2 == (_DWORD)a4)
      return;
    if ((_DWORD)a2 == 63)
    {
      if ((_DWORD)a4 != 31)
      {
        v10 = a4 & 0x1F | 0xD2800000;
        goto LABEL_4;
      }
    }
    else if ((_DWORD)a2 != 31 && (_DWORD)a4 != 31)
    {
      v8 = a4 & 0x1F | ((a2 & 0x1F) << 16);
      v9 = -1442839584;
      goto LABEL_3;
    }
    v8 = a4 | (32 * a2);
    v9 = -1862270976;
    goto LABEL_3;
  }
  v8 = (unsigned __int16)(32 * (a2 & 0x1F)) | ((a3 & 0x3F) << 16) | a4 & 0x1F;
  v9 = -1824457728;
LABEL_3:
  v10 = v8 | v9;
LABEL_4:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9AC02800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::and32(uint64_t a1, JSC::ARM64LogicalImmediate *this, char a3, int a4)
{
  unsigned int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v6 = this;
  v8 = JSC::ARM64LogicalImmediate::create32(this);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v6, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = 168820736;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0x12000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

void JSC::DFG::ArrayifySlowPathGenerator::~ArrayifySlowPathGenerator(JSC::DFG::ArrayifySlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::ArrayifySlowPathGenerator *v9;
  JSC::DFG::ArrayifySlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::ArrayifySlowPathGenerator *)*((_QWORD *)this + 15);
  if ((JSC::DFG::ArrayifySlowPathGenerator *)((char *)this + 136) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::ArrayifySlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::ArrayifySlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::ArrayifySlowPathGenerator *v9;
  JSC::DFG::ArrayifySlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::ArrayifySlowPathGenerator *)*((_QWORD *)this + 15);
  if ((JSC::DFG::ArrayifySlowPathGenerator *)((char *)this + 136) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::ArrayifySlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::ArrayifySlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::DFG::ArrayifySlowPathGenerator::generateInternal(JSC::DFG::ArrayifySlowPathGenerator *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  WTF *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *((unsigned int *)this + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x197C29140);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*((_QWORD *)this + 6) + v11), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  v14 = *((unsigned __int8 *)this + 109);
  if (v14 != 255 && *((unsigned __int8 *)this + 104) - 7 <= 2)
  {
    JSC::MacroAssemblerARM64::branch32((uint64_t)a2, 2, (char)v14, 100000, a5, a6, a7, a8, (uint64_t)&v64);
    v66 = (WTF *)&v68;
    v67 = 2;
    if (v64 != -1)
    {
      v69 = v65;
      HIDWORD(v67) = 1;
      v68 = v64;
    }
    v21 = *((unsigned int *)this + 28);
    if ((_DWORD)v21 != -1)
    {
      if (v21 >> 2 >= *((unsigned int *)a2 + 951))
      {
        __break(0xC471u);
        JUMPOUT(0x197C29150);
      }
      WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(*(_QWORD *)(*((_QWORD *)a2 + 474) + 8 * (v21 >> 2)) + ((v21 & 3) << 6), (unsigned int *)&v66, v15, v16, v17, v18, v19, v20);
      v29 = v66;
      if (&v68 != (int *)v66 && v66)
      {
        v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
      }
    }
  }
  v30 = *((unsigned __int8 *)this + 104);
  if (v30 == 9)
  {
    v31 = *((_QWORD *)this + 15);
    v32 = *((unsigned int *)this + 33);
    v33 = *((char *)this + 110);
    v34 = *((char *)this + 108);
    v35 = operationEnsureContiguous;
  }
  else if (v30 == 8)
  {
    v31 = *((_QWORD *)this + 15);
    v32 = *((unsigned int *)this + 33);
    v33 = *((char *)this + 110);
    v34 = *((char *)this + 108);
    v35 = operationEnsureDouble;
  }
  else if ((v30 - 10) >= 2)
  {
    if (v30 != 7)
    {
      __break(0xC471u);
      JUMPOUT(0x197C29158);
    }
    v31 = *((_QWORD *)this + 15);
    v32 = *((unsigned int *)this + 33);
    v33 = *((char *)this + 110);
    v34 = *((char *)this + 108);
    v35 = operationEnsureInt32;
  }
  else
  {
    v31 = *((_QWORD *)this + 15);
    v32 = *((unsigned int *)this + 33);
    v33 = *((char *)this + 110);
    v34 = *((char *)this + 108);
    v35 = operationEnsureArrayStorage;
  }
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((int *)&v66, (char *)a2, v31, v32, (uint64_t)v35, v33, *(JSC::ARM64LogicalImmediate **)(*((_QWORD *)a2 + 44) + 16), v34);
  if (*((_WORD *)this + 46) != 146)
  {
    JSC::MacroAssemblerARM64::load8((uint64_t)a2, *((unsigned __int8 *)this + 108) | 0x400000000, *((char *)this + 111), v36, v37, v38, v39, v40);
    JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode((uint64_t)&v66, (uint64_t)a2, *((char *)this + 111), *((_DWORD *)this + 26), v57, v58, v59, v60);
    v61 = *((unsigned int *)this + 29);
    if ((_DWORD)v61 != -1)
    {
      if (v61 >> 2 >= *((unsigned int *)a2 + 951))
      {
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x197C29138);
      }
      WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(*(_QWORD *)(*((_QWORD *)a2 + 474) + 8 * (v61 >> 2)) + ((v61 & 3) << 6), (unsigned int *)&v66, v47, v48, v49, v50, v51, v52);
    }
    v55 = v66;
    if (&v68 == (int *)v66)
      return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo((uint64_t)this, (uint64_t)a2, v47, v48, v49, v50, v51, v52);
    goto LABEL_23;
  }
  if (!*((_BYTE *)a2 + 212))
    goto LABEL_42;
  v41 = *((unsigned __int8 *)this + 108);
  v42 = (*((_QWORD *)this + 12) >> 4);
  *(_DWORD *)(*((_QWORD *)a2 + 37) + 208) &= ~*((_DWORD *)a2 + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)a2, v41, *((char *)a2 + 304), v36, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::branch32((uint64_t)a2, 1, 17, v42, v43, v44, v45, v46, (uint64_t)&v62);
  v66 = (WTF *)&v68;
  v67 = 2;
  if (v62 != -1)
  {
    v69 = v63;
    HIDWORD(v67) = 1;
    v68 = v62;
  }
  v53 = *((unsigned int *)this + 29);
  if ((_DWORD)v53 != -1)
  {
    if (v53 >> 2 >= *((unsigned int *)a2 + 951))
    {
      __break(0xC471u);
      JUMPOUT(0x197C29148);
    }
    WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(*(_QWORD *)(*((_QWORD *)a2 + 474) + 8 * (v53 >> 2)) + ((v53 & 3) << 6), (unsigned int *)&v66, v47, v48, v49, v50, v51, v52);
    v55 = v66;
    if (&v68 != (int *)v66)
    {
LABEL_23:
      if (v55)
      {
        v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree((unint64_t)v55, v54, v47, v48, v49, v50, v51, v52);
      }
    }
  }
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo((uint64_t)this, (uint64_t)a2, v47, v48, v49, v50, v51, v52);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(int *a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, JSC::ARM64LogicalImmediate *this, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  _BYTE *v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  JSC::AssemblerBuffer *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  _BYTE *v85;
  int v86;
  char *__src;
  unsigned __int8 v88;
  void *__dst;
  int v90;
  unsigned int v91;
  __int16 v92;
  unint64_t v93;
  unsigned int *v94;

  v8 = a8;
  v88 = a6;
  v10 = a5;
  v12 = a3;
  v13 = (uint64_t)a2;
  v15 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v13, v12 + 16 * v16, a3, a4, a5, a6, (uint64_t)this, a8);
      v16 = v17;
    }
    while (a4 > v17++);
  }
  __dst = &v92;
  v90 = 1;
  if (v8 != 1)
  {
    v92 = v8 | 0x100;
    v91 = 1;
    v19 = 1;
    while (1)
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_92;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_92;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (!(v28.i32[0] + v27))
      {
        v85 = v15;
        v38 = *(_BYTE *)__dst;
        v39 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(v13, *(char *)__dst, v39, a4, a5, a6, (uint64_t)this, a8);
        memmove(__dst, (char *)__dst + 2, 2 * v91 - 2);
        v40 = v91 - 1;
        v35 = v91 == 1;
        v91 = v40;
        v41 = (unsigned __int8 *)__dst;
        __src = (char *)__dst + 2 * v40;
        if (v35)
        {
          v42 = 0;
          v43 = 0;
          v86 = 0;
          a2 = (char *)__dst + 2 * v40;
        }
        else
        {
          v45 = 2 * v40;
          v46 = __dst;
          while (*v46 != v39)
          {
            v46 += 2;
            v45 -= 2;
            if (!v45)
              goto LABEL_46;
          }
          *v46 = v38;
LABEL_46:
          v86 = 0;
          v47 = v41;
          v48 = __src;
          a2 = __src;
          do
          {
            if (*v41 == v41[1])
            {
              v49 = v41;
              if (v48 != (char *)__dst + 2 * v91)
              {
                if (v41 == (unsigned __int8 *)a2)
                {
                  v49 = (unsigned __int8 *)v48;
                }
                else
                {
                  v84 = v47 - (unsigned __int8 *)a2;
                  memmove(v48, a2, v47 - (unsigned __int8 *)a2);
                  v49 = (unsigned __int8 *)&v48[v84];
                }
              }
              a2 = (char *)(v41 + 2);
              ++v86;
              v48 = (char *)v49;
            }
            v41 += 2;
            v47 += 2;
          }
          while (v41 < (unsigned __int8 *)__src);
          v41 = (unsigned __int8 *)__dst;
          v42 = v91;
          v43 = v91;
          __src = v48;
        }
        v44 = (char *)&v41[2 * v42];
        if (a2 != v44)
        {
          memmove(__src, a2, v44 - a2);
          v43 = v91;
        }
        v19 = v43 - v86;
        v15 = v85;
        goto LABEL_35;
      }
      v29 = 0;
      v30 = v19 <= 1 ? 1 : v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_92;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_36;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 != v32)
        break;
LABEL_34:
      memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
      v19 = v91 - 1;
LABEL_35:
      v91 = v19;
LABEL_36:
      if (!(_DWORD)v19)
      {
        v50 = __dst;
        if (&v92 != __dst && __dst)
        {
          __dst = 0;
          v90 = 0;
          WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, (uint64_t)this, a8);
        }
        goto LABEL_57;
      }
    }
    v33 = (char)v33;
    v34 = v15;
    if ((char)v33 == 63)
    {
      if (v32 != 31)
      {
        v36 = v32 & 0x1F | 0xD2800000;
        goto LABEL_31;
      }
    }
    else
    {
      v35 = (char)v32 == 31 || v33 == 31;
      if (!v35)
      {
        v36 = v32 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_31:
        v37 = *(_DWORD *)(v13 + 200);
        if (v37 + 4 > *(_DWORD *)(v13 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), (uint64_t)a2, a3, a4, a5, a6, (uint64_t)this, a8);
          v37 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v37) = v36;
        *(_DWORD *)(v13 + 200) += 4;
        v22 = (char *)__dst;
        v23 = v91;
        v15 = v34;
        goto LABEL_34;
      }
    }
    v36 = (char)v32 | (32 * v33) | 0x91000000;
    goto LABEL_31;
  }
LABEL_57:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, (uint64_t)this, 0, a4, a5, a6, (uint64_t)this, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v10, v51, v52, v53, v54, v55, v56, a1);
  __dst = (void *)2;
  v94 = 0;
  v10 = *(_QWORD *)(v13 + 3960);
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 3976) + 8);
  if ((v19 & 1) != 0)
    goto LABEL_93;
  v57 = v88;
  while (1)
  {
    v58 = v57;
    v93 = v19;
    v10 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v10, &v93, (uint64_t *)&__dst, &v94, a5, a6, (uint64_t)this, a8);
    if ((v93 & 1) != 0 && (v93 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v93 & 0xFFFFFFFF8, v59, v60, v61, a5, a6, (uint64_t)this, a8);
    if ((v10 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 1, v60, v61, a5, a6, (uint64_t)this, a8);
      LOBYTE(v62) = 0;
      goto LABEL_62;
    }
    v19 = 0;
    if (a4)
    {
      v67 = 16 * a4;
      v68 = (char *)(v12 + 2);
      do
      {
        v70 = *v68;
        v68 += 16;
        v69 = v70;
        if ((v70 & 0x40) != 0)
          goto LABEL_92;
        v19 |= 1 << v69;
        v67 -= 16;
      }
      while (v67);
    }
    if ((v57 & 0x40) == 0)
      break;
LABEL_92:
    __break(1u);
LABEL_93:
    v79 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    v57 = v88;
    if ((v19 & 2) != 0
      || ((v80 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v83 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v83 = v79;
      *(_DWORD *)(v83 + 8) = v80;
      v82 = 1;
      v79 = v83;
    }
    else
    {
      v82 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v19 = v79 | v82;
  }
  LOBYTE(v62) = 1;
  v71 = v19 | (1 << v57);
  if ((v71 & 2) != 0)
  {
    v72 = (unsigned __int16)~(_WORD)v71 & 0xFFFE;
    if (v72)
    {
      v62 = __clz(__rbit64(v72));
      if (v62 != 1)
      {
        if (v62 == 31)
        {
          v75 = (unsigned int *)(v13 + 200);
          v74 = *(_DWORD *)(v13 + 200);
          v76 = (JSC::AssemblerBuffer *)(v13 + 56);
          v77 = v74 + 4;
          v78 = *(_DWORD *)(v13 + 192);
          v73 = -1862270913;
        }
        else
        {
          v73 = v62 | 0xAA0103E0;
          v75 = (unsigned int *)(v13 + 200);
          v74 = *(_DWORD *)(v13 + 200);
          v76 = (JSC::AssemblerBuffer *)(v13 + 56);
          v77 = v74 + 4;
          v78 = *(_DWORD *)(v13 + 192);
        }
        if (v77 > v78)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v76, (uint64_t)v59, v60, v61, a5, a6, (uint64_t)this, a8);
          v74 = *v75;
        }
        *(_DWORD *)(*(_QWORD *)v76 + v74) = v73;
        *v75 += 4;
        v57 = v88;
      }
    }
    else
    {
      LOBYTE(v62) = -1;
    }
  }
LABEL_62:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v59, v60, v61, a5, a6, (uint64_t)this, a8);
  if (v58)
  {
    if (v58 == 31)
    {
      v63 = -1862270945;
    }
    else if (v58 == 255)
    {
      v63 = -1442774017;
    }
    else
    {
      v63 = v57 & 0x1F | 0xAA0003E0;
    }
    v65 = (unsigned int *)(v13 + 200);
    v64 = *(_DWORD *)(v13 + 200);
    if (v64 + 4 > *(_DWORD *)(v13 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), (uint64_t)v59, v60, v61, a5, a6, (uint64_t)this, a8);
      v64 = *v65;
    }
    *(_DWORD *)(*(_QWORD *)(v13 + 56) + v64) = v63;
    *v65 += 4;
  }
  v19 = a4;
  if ((_DWORD)a4)
  {
    v12 -= 16;
    v66 = 16 * a4;
    while ((unint64_t)a4 - 1 < a4)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v13, v12 + v66, v60, v61, a5, a6, (uint64_t)this, a8);
      v66 -= 16;
      if (!v66)
        goto LABEL_75;
    }
    goto LABEL_92;
  }
LABEL_75:
  *v15 = 0;
  if ((_DWORD)v10)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v13, (char)v62, v60, v61, a5, a6, (uint64_t)this, a8);
}

void JSC::DFG::SpeculativeJIT::spill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  _BYTE *v31;
  __int16 v32;
  uint64_t *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BYTE v42[14];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = ~(_DWORD)a2;
  if (v8 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C29CB4);
  }
  v10 = a2;
  v11 = *(_QWORD *)(a1 + 3992);
  v12 = (_BYTE *)(v11 + 24 * (int)v8);
  v13 = v12 + 14;
  if (v12[14])
  {
    v28 = v11 + 24 * (int)v8;
    *(_BYTE *)(v28 + 12) = 0;
    if (*(_BYTE *)(v28 + 15))
    {
      v29 = *(_DWORD *)(*(_QWORD *)v12 + 20);
      if (v29 >= 0xFFFFFFFE)
      {
        __break(0xC471u);
        JUMPOUT(0x197C29BBCLL);
      }
      v22 = (_QWORD *)(a1 + 5632);
      v30 = *(_BYTE *)(v11 + 24 * (int)v8 + 13);
      v23 = a2 | ((((unint64_t)a2 >> 31) & 1) << 32);
      v42[12] = 5;
      v42[13] = v30;
LABEL_20:
      *(_DWORD *)v42 = v29;
LABEL_13:
      *(_QWORD *)&v42[4] = v23;
      v24 = *(unsigned int *)(a1 + 5644);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 5640))
      {
        v33 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v24 + 1, (unint64_t)v42, a4, a5, a6, a7, a8);
        v25 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
        v26 = *v33;
        v27 = *(uint64_t *)((char *)v33 + 6);
      }
      else
      {
        v25 = (_QWORD *)(*v22 + 14 * v24);
        v26 = *(_QWORD *)v42;
        v27 = *(_QWORD *)&v42[6];
      }
      *(_QWORD *)((char *)v25 + 6) = v27;
      *v25 = v26;
      ++*(_DWORD *)(a1 + 5644);
    }
  }
  else
  {
    v14 = v11 + 24 * (int)v8;
    v17 = *(unsigned __int8 *)(v14 + 12);
    v16 = (_BYTE *)(v14 + 12);
    v15 = v17;
    switch(v17)
    {
      case 1u:
        v31 = (_BYTE *)(v11 + 24 * (int)v8);
        JSC::MacroAssemblerARM64::store32(a1, (char)v31[17], (a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
        *v16 = 0;
        v31[13] = 1;
        *v13 = 1;
        if (v31[15])
        {
          v29 = *(_DWORD *)(*(_QWORD *)v12 + 20);
          if (v29 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C29BDCLL);
          }
          v22 = (_QWORD *)(a1 + 5632);
          v23 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v10 >> 31) & 1) << 32);
          v32 = 261;
          goto LABEL_24;
        }
        break;
      case 2u:
      case 3u:
        JSC::MacroAssemblerARM64::store64(a1, *(char *)(v11 + 24 * (int)v8 + 17), (a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
        JSC::DFG::GenerationInfo::spill(v11 + 24 * (int)v8, a1 + 5632, v10, v15, v36, v37, v38, v39);
        break;
      case 4u:
        v34 = (_BYTE *)(v11 + 24 * (int)v8);
        JSC::MacroAssemblerARM64::storeDouble(a1, (char)v34[17], (a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
        *v16 = 0;
        v34[13] = 4;
        *v13 = 1;
        if (v34[15])
        {
          v29 = *(_DWORD *)(*(_QWORD *)v12 + 20);
          if (v29 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C29C64);
          }
          v22 = (_QWORD *)(a1 + 5632);
          v23 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v10 >> 31) & 1) << 32);
          v32 = 1029;
          goto LABEL_24;
        }
        break;
      case 7u:
        v35 = (_BYTE *)(v11 + 24 * (int)v8);
        JSC::MacroAssemblerARM64::store64(a1, (char)v35[17], (a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
        *v16 = 0;
        v35[13] = 7;
        *v13 = 1;
        if (v35[15])
        {
          v29 = *(_DWORD *)(*(_QWORD *)v12 + 20);
          if (v29 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C29CA8);
          }
          v22 = (_QWORD *)(a1 + 5632);
          v23 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v10 >> 31) & 1) << 32);
          v32 = 1797;
LABEL_24:
          *(_WORD *)&v42[12] = v32;
          goto LABEL_20;
        }
        break;
      default:
        if ((_DWORD)v15 != 6 && (v15 & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197C29B9CLL);
        }
        v19 = *(char *)(v11 + 24 * (int)v8 + 17);
        if ((_DWORD)v15 == 1)
        {
          v40 = a2;
          v41 = *(char *)(v11 + 24 * (int)v8 + 17);
          JSC::MacroAssemblerARM64::or64((_DWORD *)a1, 27, v19, a4, a5, a6, a7, a8);
          v19 = v41;
          a2 = v40;
        }
        JSC::MacroAssemblerARM64::store64(a1, v19, (a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
        *v16 = 0;
        v20 = v11 + 24 * (int)v8;
        *(_BYTE *)(v20 + 13) = v15 | 0x10;
        *v13 = 1;
        if (*(_BYTE *)(v20 + 15))
        {
          v21 = *(_DWORD *)(*(_QWORD *)v12 + 20);
          if (v21 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C29B7CLL);
          }
          v22 = (_QWORD *)(a1 + 5632);
          v23 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v10 >> 31) & 1) << 32);
          v42[12] = 5;
          v42[13] = v15 | 0x10;
          *(_DWORD *)v42 = v21;
          goto LABEL_13;
        }
        break;
    }
  }
}

uint64_t JSC::DFG::GenerationInfo::spill(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[14];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 13) = a4;
  *(_BYTE *)(result + 14) = 1;
  if (*(_BYTE *)(result + 15))
  {
    v8 = *(_DWORD *)(*(_QWORD *)result + 20);
    if (v8 >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197C29DFCLL);
    }
    v14[12] = 5;
    v14[13] = a4;
    *(_DWORD *)v14 = v8;
    *(_QWORD *)&v14[4] = a3 | (((a3 >> 31) & 1) << 32);
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)v14, a4, a5, a6, a7, a8);
      v11 = (_QWORD *)(*(_QWORD *)a2 + 14 * *(unsigned int *)(a2 + 12));
      v12 = *(_QWORD *)result;
      v13 = *(_QWORD *)(result + 6);
    }
    else
    {
      v11 = (_QWORD *)(*(_QWORD *)a2 + 14 * v10);
      v12 = *(_QWORD *)v14;
      v13 = *(_QWORD *)&v14[6];
    }
    *(_QWORD *)((char *)v11 + 6) = v13;
    *v11 = v12;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t JSC::DFG::GenerationInfo::appendSpill(uint64_t result, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[14];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v8 >= 0xFFFFFFFE)
  {
    __break(0xC471u);
    JUMPOUT(0x197C29F14);
  }
  v10 = *(_BYTE *)(result + 13);
  v15[12] = a2;
  v15[13] = v10;
  *(_DWORD *)v15 = v8;
  *(_QWORD *)&v15[4] = a4 | (((a4 >> 31) & 1) << 32);
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a3 + 8))
  {
    result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)v15, a4, a5, a6, a7, a8);
    v12 = (_QWORD *)(*(_QWORD *)a3 + 14 * *(unsigned int *)(a3 + 12));
    v13 = *(_QWORD *)result;
    v14 = *(_QWORD *)(result + 6);
  }
  else
  {
    v12 = (_QWORD *)(*(_QWORD *)a3 + 14 * v11);
    v13 = *(_QWORD *)v15;
    v14 = *(_QWORD *)&v15[6];
  }
  *(_QWORD *)((char *)v12 + 6) = v14;
  *v12 = v13;
  ++*(_DWORD *)(a3 + 12);
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::use(uint64_t *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[14];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 56) & 7) == 0)
    return this;
  v8 = (uint64_t)this;
  v9 = ~*((_DWORD *)a2 + 12);
  if (v9 >= *((unsigned int *)this + 1001))
    goto LABEL_18;
  v10 = this[499];
  v11 = (_DWORD *)(v10 + 24 * (int)v9);
  v12 = v11[2] - 1;
  v11[2] = v12;
  if (v12)
    return this;
  if (!*(_BYTE *)(v10 + 24 * (int)v9 + 15))
    goto LABEL_10;
  v13 = *(_DWORD *)(*(_QWORD *)v11 + 20);
  if (v13 >= 0xFFFFFFFE)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197C2A100);
  }
  this += 704;
  *(_QWORD *)&v21[4] = 0x3FFFFFFFLL;
  *(_DWORD *)v21 = v13;
  *(_WORD *)&v21[12] = 6;
  v14 = *(unsigned int *)(v8 + 5644);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 5640))
  {
    this = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v14 + 1, (unint64_t)v21, a4, a5, a6, a7, a8);
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 5632) + 14 * *(unsigned int *)(v8 + 5644));
    v16 = *this;
    v17 = *(uint64_t *)((char *)this + 6);
  }
  else
  {
    v15 = (_QWORD *)(*this + 14 * v14);
    v16 = *(_QWORD *)v21;
    v17 = *(_QWORD *)&v21[6];
  }
  *(_QWORD *)((char *)v15 + 6) = v17;
  *v15 = v16;
  ++*(_DWORD *)(v8 + 5644);
LABEL_10:
  if (*(_BYTE *)(v10 + 24 * (int)v9 + 12))
  {
    if (*(_BYTE *)(v10 + 24 * (int)v9 + 12) == 4)
    {
      v19 = v8
          + 12
          * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v10
                                                                                               + 24 * (int)v9
                                                                                               + 17)];
      *(_DWORD *)(v19 + 4968) = 0x3FFFFFFF;
      v20 = 4972;
    }
    else
    {
      v18 = *(char *)(v10 + 24 * (int)v9 + 17);
      if (v18 > 15)
        v18 = -1;
      v19 = v8 + 12 * v18;
      *(_DWORD *)(v19 + 4776) = 0x3FFFFFFF;
      v20 = 4780;
    }
    *(_DWORD *)(v19 + v20) = -1;
  }
  return this;
}

void JSC::MacroAssemblerARM64::branchTest64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  char v18;
  char v19;
  unsigned int i;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  unsigned int v28;

  v9 = a2;
  if ((_DWORD)a3 == (_DWORD)a4 && a2 <= 1)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); a3 = v27)
      {
        v27 = a3;
        if (i + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          i = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
        i = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = i;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    else
    {
      i = *(_DWORD *)(a1 + 200);
    }
    if (v9)
      v21 = -1258291200;
    else
      v21 = -1275068416;
    v22 = a3 & 0x1F | v21;
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      v28 = a3;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      a3 = v28;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v22;
    v23 = *(_DWORD *)(a1 + 200);
    v16 = v23 + 4;
    *(_DWORD *)(a1 + 200) = v23 + 4;
    v24 = v23 + 8;
    v25 = v23 + 4;
    if (v24 > *(_DWORD *)(a1 + 192))
    {
      v26 = a3;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      LOBYTE(a3) = v26;
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v19 = -121;
    else
      v19 = -125;
    v18 = 1;
  }
  else
  {
    v12 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    v14 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v14;
    if (*(_BYTE *)(a1 + 328))
    {
      while ((signed int)v14 < *(_DWORD *)(a1 + 52))
      {
        if (v14 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v14 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = -721215457;
        v14 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v14;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v14 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | 0x54000000;
    v15 = *(_DWORD *)(a1 + 200);
    v16 = v15 + 4;
    *(_DWORD *)(a1 + 200) = v15 + 4;
    v17 = v15 + 4;
    if ((v15 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(a1 + 200);
    }
    v18 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v19 = -122;
    else
      v19 = -126;
    LOBYTE(a3) = -1;
  }
  *(_DWORD *)a9 = v16;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v19;
  *(_BYTE *)(a9 + 9) = v9;
  *(_BYTE *)(a9 + 10) = v18;
  *(_BYTE *)(a9 + 11) = a3;
}

double WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  double result;

  v9 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  v11 = *(_OWORD *)v9;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
  result = *(double *)(v9 + 32);
  *(double *)(v10 + 32) = result;
  *(_DWORD *)(v10 + 40) = *(_DWORD *)(v9 + 40);
  *(_QWORD *)(v10 + 44) = *(_QWORD *)(v9 + 44);
  *(_QWORD *)(v10 + 56) = *(_QWORD *)(v9 + 56);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 < 5)
  {
    v12 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4;
    if (!(_DWORD)v11)
      goto LABEL_9;
  }
  else
  {
    if (a2 >> 26)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_9;
  }
  v13 = v10;
  do
  {
    v14 = *(_OWORD *)v13;
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_OWORD *)v12 = v14;
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
    *(_QWORD *)(v12 + 44) = *(_QWORD *)(v13 + 44);
    *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
    v13 += 64;
    v12 += 64;
  }
  while (v13 != v10 + (v11 << 6));
LABEL_9:
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

double JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  result = *((double *)a2 + 4);
  *(double *)(a1 + 32) = result;
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  return result;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_QWORD *)a1;
      v13 = v4 << 6;
      v14 = (__int128 *)v3;
      do
      {
        JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(v12, v14);
        v12 = v15 + 64;
        v14 += 4;
        v13 -= 64;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
  }
  else
  {
    v3 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v9 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  v11 = *(_OWORD *)v9;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v9 + 32);
  *(_DWORD *)(v10 + 40) = *(_DWORD *)(v9 + 40);
  *(_QWORD *)(v10 + 44) = *(_QWORD *)(v9 + 44);
  *(_QWORD *)(v10 + 56) = *(_QWORD *)(v9 + 56);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v8 = a2;
  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(unsigned int *)(result + 12);
  if (a2 < 5)
  {
    v12 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 4;
    if (!(_DWORD)v11)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (!(a2 >> 26))
  {
    v12 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v9 + 8) = v8;
    *(_QWORD *)v9 = v12;
    if (!(_DWORD)v11)
      goto LABEL_9;
LABEL_7:
    v13 = v10;
    do
    {
      v14 = *(_OWORD *)v13;
      *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
      *(_OWORD *)v12 = v14;
      *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      *(_QWORD *)(v12 + 44) = *(_QWORD *)(v13 + 44);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
      v13 += 64;
      v12 += 64;
    }
    while (v13 != v10 + (v11 << 6));
LABEL_9:
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileHasPrivate(JSC::DFG::Node *,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x80u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileHasPrivate(JSC::DFG::Node *,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileHasPrivate(JSC::DFG::Node *,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

uint64_t JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::WatchpointSet>((uint64_t)this, v15, *(_QWORD *)(v15 + 2040), 6, a5, a6, a7, a8);
}

uint64_t JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::WatchpointSet>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _BYTE v36[24];

  v10 = *(_QWORD *)(a1 + 24);
  if (((*(_DWORD *)(v10 + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == a2)
    {
      v35 = a4 << 48;
      v26 = (uint64_t *)(a1 + 928);
      if (WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::contains((uint64_t *)(a1 + 928), &v35))
      {
        return 1;
      }
      if (*(_BYTE *)(a3 + 4) != 2)
      {
        v32 = *v26;
        if (*v26)
          LODWORD(v32) = *(_DWORD *)(v32 - 12);
        v34 = v32;
        WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t *)(a1 + 928), &v35, &v34, v27, v28, v29, v30, v31, (uint64_t)v36);
        v33 = *(unsigned int *)(a1 + 924);
        if ((_DWORD)v33 == *(_DWORD *)(a1 + 920))
        {
          WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITConstant<JSC::DFG::LinkerIR::Type>&>(a1 + 912, (unint64_t)&v35);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v33) = v35;
          *(_DWORD *)(a1 + 924) = v33 + 1;
        }
        return 1;
      }
    }
    return 0;
  }
  v11 = *(_QWORD *)(v10 + 136);
  if (!v11)
  {
LABEL_10:
    if (*(_BYTE *)(a3 + 4) != 2)
    {
      JSC::DFG::Graph::freeze(a1, a2, a3, a4, a5, a6, a7, a8);
      v20 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 136);
      v35 = a3;
      WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v20, &v35, v21, v22, v23, v24, v25, (uint64_t)v36);
      return 1;
    }
    return 0;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(_QWORD *)(v11 + 8 * v16);
  if (v17 != a3)
  {
    v19 = 1;
    result = 1;
    while (v17)
    {
      v16 = (v16 + v19) & v12;
      v17 = *(_QWORD *)(v11 + 8 * v16);
      ++v19;
      if (v17 == a3)
        return result;
    }
    goto LABEL_10;
  }
  return 1;
}

BOOL WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::contains(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL8 result;
  int v14;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v6 = v5 + (unsigned __int16)WORD2(*a2) + (v5 >> 11);
  v7 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v6 << 16) ^ v6;
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v10 & v3;
  v12 = *(_QWORD *)(v2 + 16 * (v10 & v3));
  if (v12 == v4)
    return 1;
  v14 = 1;
  do
  {
    result = v12 != 0;
    if (!v12)
      break;
    v11 = (v11 + v14) & v3;
    v12 = *(_QWORD *)(v2 + 16 * v11);
    ++v14;
  }
  while (v12 != v4);
  return result;
}

uint64_t *WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>>,JSC::DFG::LinkerIR::ValueHash,WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::DFG::LinkerIR::ValueTraits>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                             - 1640531527);
  v18 = v17 + (unsigned __int16)WORD2(*a2) + (v17 >> 11);
  v19 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v18 << 16) ^ v18;
  v20 = (v19 + (v19 >> 11)) ^ (8 * (v19 + (v19 >> 11)));
  v21 = (v20 + (v20 >> 5)) ^ (4 * (v20 + (v20 >> 5)));
  v22 = (v21 + (v21 >> 15)) ^ ((v21 + (v21 >> 15)) << 10);
  if (!v22)
    v22 = 0x800000;
  v23 = v22 & v15;
  v24 = v13 + 16 * (v22 & v15);
  v25 = *(_QWORD *)v24;
  if (*(_QWORD *)v24)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v25 == v16)
      {
        if ((v14 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v13 - 4);
        v36 = 0;
        v37 = v13 + 16 * v30;
        goto LABEL_34;
      }
      if (v25 == 1)
        v26 = (_QWORD *)v24;
      v23 = (v23 + v27) & v15;
      v24 = v13 + 16 * v23;
      v25 = *(_QWORD *)v24;
      ++v27;
    }
    while (*(_QWORD *)v24);
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v24 = (uint64_t)v26;
    }
  }
  *(_QWORD *)v24 = v16;
  *(_DWORD *)(v24 + 8) = *a3;
  v28 = *v11;
  if (*v11)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v31 = *v11;
  if (*v11)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33)
      goto LABEL_25;
  }
  else if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v35 = 8;
LABEL_30:
      result = (uint64_t *)WTF::HashTable<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>>,JSC::DFG::LinkerIR::ValueHash,WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::DFG::LinkerIR::ValueTraits>::rehash(v11, v35, v24, a4, a5, a6, a7, a8);
      v24 = (uint64_t)result;
      v31 = *v11;
      if (*v11)
        v34 = *(unsigned int *)(v31 - 4);
      else
        v34 = 0;
      goto LABEL_33;
    }
LABEL_25:
    v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
    goto LABEL_30;
  }
LABEL_33:
  v37 = v31 + 16 * v34;
  v36 = 1;
LABEL_34:
  *(_QWORD *)a9 = v24;
  *(_QWORD *)(a9 + 8) = v37;
  *(_BYTE *)(a9 + 16) = v36;
  return result;
}

_OWORD *WTF::HashTable<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int>>,JSC::DFG::LinkerIR::ValueHash,WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::DFG::LinkerIR::ValueTraits>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (unint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = 0;
        v29 = (v25 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v25 - 1640531527) << 16) ^ ((unsigned __int16)v25 - 1640531527);
        v30 = (v25 >> 37) & 0x7FFF800 ^ ((v29 + WORD2(v25) + (v29 >> 11)) << 16) ^ (v29 + WORD2(v25) + (v29 >> 11));
        v31 = (v30 + (v30 >> 11)) ^ (8 * (v30 + (v30 >> 11)));
        v32 = (v31 + (v31 >> 5)) ^ (4 * (v31 + (v31 >> 5)));
        v33 = (v32 + (v32 >> 15)) ^ ((v32 + (v32 >> 15)) << 10);
        if (!v33)
          v33 = 0x800000;
        do
        {
          v34 = v33 & v27;
          v33 = ++v28 + v34;
        }
        while (*(_QWORD *)(v26 + 16 * v34));
        v35 = (_OWORD *)(v26 + 16 * v34);
        *v35 = *(_OWORD *)v24;
        if (v24 == (unint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITConstant<JSC::DFG::LinkerIR::Type>&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), v5 + 8 * v6 <= a3))
  {
    v20 = *(unsigned int *)(a1 + 8);
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= a2)
      v23 = a2;
    else
      v23 = v22;
    if (v23 > v20)
    {
      if (v23 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2B370);
      }
      v24 = *(unsigned int *)(a1 + 12);
      v25 = WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)(a1 + 8) = v23;
      *(_QWORD *)a1 = v25;
      if ((_DWORD)v24)
      {
        v33 = 8 * v24;
        v34 = (_QWORD *)v25;
        v35 = (uint64_t *)v5;
        do
        {
          v36 = *v35++;
          *v34++ = v36;
          v33 -= 8;
        }
        while (v33);
      }
      if (v5)
      {
        if (v25 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v11 = *(_QWORD *)a1;
    }
    else
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197C2B384);
      }
      v11 = WTF::fastMalloc((WTF *)(8 * v10));
      v19 = 0;
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      do
      {
        *(_QWORD *)(v11 + v19) = *(_QWORD *)(v5 + v19);
        v19 += 8;
      }
      while (8 * v6 != v19);
      if (v5)
      {
        if (v11 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
        v11 = *(_QWORD *)a1;
      }
    }
    return v11 + 8 * ((uint64_t)(v3 - v5) >> 3);
  }
  return v3;
}

void JSC::MacroAssemblerARM64::and64(uint64_t a1, JSC::ARM64LogicalImmediate *this, char a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v8 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)this, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = -1978662912;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0x92000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

uint64_t JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  int v17;
  int v19;

  if (!(_DWORD)a3)
  {
    v13 = 1;
    v14 = a2;
    return v14 | (v13 << 8);
  }
  if (a3 < 0x1000)
  {
    v8 = 0x80000000;
    goto LABEL_4;
  }
  v15 = -(int)a3;
  if (-(int)a3 < 0x1000)
  {
    v16 = -1073741824;
    goto LABEL_9;
  }
  if ((a3 & 0xFFF) != 0)
  {
    v14 = 0;
    v13 = 0;
    return v14 | (v13 << 8);
  }
  v19 = (int)a3 >> 12;
  if (BYTE3(a3))
  {
    v14 = 0;
    v13 = 0;
    v15 = -v19;
    if (-v19 >= 0x1000)
      return v14 | (v13 << 8);
    v16 = -1069547520;
LABEL_9:
    if (*(_BYTE *)(a1 + 212))
    {
      v10 = (unsigned int *)(a1 + 200);
      v9 = *(_DWORD *)(a1 + 200);
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      v12 = v16 | (32 * (char)a2) | (v15 << 10) | *(char *)(a1 + 304);
      v11 = 285212672;
      goto LABEL_11;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197C2B5FCLL);
  }
  v8 = -2143289344;
  a3 = ((int)a3 >> 12);
LABEL_4:
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_21;
  v10 = (unsigned int *)(a1 + 200);
  v9 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v11 = *(char *)(a1 + 304);
  v12 = v8 | (32 * (char)a2) | ((a3 & 0xFFF) << 10) | 0x11000000;
LABEL_11:
  v17 = v12 | v11;
  if (v9 + 4 > *(v10 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 - 36), a2, a3, a4, a5, a6, a7, a8);
    v9 = *v10;
  }
  *(_DWORD *)(*((_QWORD *)v10 - 18) + v9) = v17;
  *v10 += 4;
  v13 = 1;
  v14 = 17;
  return v14 | (v13 << 8);
}

void JSC::MacroAssemblerARM64::store64(uint64_t a1, uint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v19;
  JSC::AssemblerBuffer *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_25;
  v9 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) & *(_DWORD *)(a1 + 320)) == 0)
    goto LABEL_12;
  v11 = *(_QWORD *)(a1 + 312);
  v12 = this - v11;
  if (this - v11 == (_DWORD)this - (_DWORD)v11)
  {
    if (v12 + 256 <= 0x1FF)
    {
      v13 = a2 & 0x1F | ((v12 & 0x1FF) << 12);
      v14 = -134217184;
LABEL_6:
      v16 = a1 + 200;
      v15 = *(_DWORD *)(a1 + 200);
      v17 = v13 | v14;
LABEL_14:
      v20 = (JSC::AssemblerBuffer *)(v16 - 144);
      v21 = v15 + 4;
      v22 = *(_DWORD *)(v16 - 8);
      v23 = (unsigned int *)v16;
      goto LABEL_15;
    }
    if (v12 <= 0x7FF8 && (v12 & 7) == 0)
    {
      v13 = a2 & 0x1F | (((v12 >> 3) & 0xFFF) << 10);
      v14 = -117439968;
      goto LABEL_6;
    }
  }
  if ((v11 ^ (unint64_t)this) >> 16)
  {
LABEL_12:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, this, 17, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C2B974);
    }
    v19 = *(_DWORD *)(a1 + 200);
    v16 = a1 + 200;
    v15 = v19;
    *(_QWORD *)(v16 + 112) = this;
    *(_DWORD *)(*(_QWORD *)(v16 + 96) + 208) |= *(_DWORD *)(v16 + 120);
    v17 = v9 & 0x1F | 0xF83F6A20;
    goto LABEL_14;
  }
  v24 = (32 * (unsigned __int16)this) | 0xF2800011;
  v23 = (unsigned int *)(a1 + 200);
  v25 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, this, a4, a5, a6, a7, a8);
    v24 = (32 * (unsigned __int16)this) | 0xF2800011;
    v25 = *v23;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v24;
  v26 = *(_DWORD *)(a1 + 200);
  v15 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197C2B944);
  }
  *(_QWORD *)(a1 + 312) = this;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
  v17 = v9 & 0x1F | 0xF83F6A20;
  v21 = v26 + 8;
  v22 = *(_DWORD *)(a1 + 192);
LABEL_15:
  if (v21 > v22)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, a2, this, a4, a5, a6, a7, a8);
    v15 = *v23;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v15) = v17;
  *v23 += 4;
}

uint64_t WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *casual;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 14 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v13 = a2;
  if (v13 <= v11)
    return v8;
  if (v13 < 0x12492493)
  {
    v14 = *(unsigned int *)(result + 12);
    v15 = 14 * v13;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v17 = *(_QWORD *)(StatusReg + 752);
    if (v17)
    {
      v18 = (unint64_t)(v15 + 15) >> 4;
      if (v13 <= 0x1D)
      {
        v19 = 23 * v18 + 7;
      }
      else
      {
        if (v13 > 0x2CA)
          goto LABEL_14;
        v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v18 + 626);
        if (*(_DWORD *)(v17 + 8052) <= v19)
          goto LABEL_14;
      }
      v21 = v17 + 8 * v19;
      v22 = v21 + 8064;
      *(_BYTE *)(v21 + 8064) = 1;
      v23 = *(unsigned int *)(v21 + 8080);
      if ((_DWORD)v23)
      {
        *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
        casual = (_QWORD *)(*(_QWORD *)(v22 + 8) - v23);
      }
      else
      {
        v29 = *(_QWORD *)(v22 + 40);
        v30 = *(_QWORD *)(v22 + 24);
        if (!v29)
        {
          if (*(_BYTE *)(v22 + 5) == 6)
          {
            v32 = *(unsigned int *)(v22 + 32);
            v33 = *(_DWORD *)(v22 + 36);
            if (v32 < v33)
            {
              *(_QWORD *)(v22 + 8 * v32 + 56) = 0;
              v34 = (unint64_t *)(8 * v19 + 8 * v32 + v17 + 8128);
              v35 = v33 - 1 - v32;
              while (v35)
              {
                v30 += 1024;
                v37 = *v34++;
                v36 = v37;
                LODWORD(v32) = v32 + 1;
                --v35;
                if (v37)
                {
                  v29 = __rbit64(v36);
                  *(_DWORD *)(v22 + 32) = v32;
                  *(_QWORD *)(v22 + 24) = v30;
                  goto LABEL_32;
                }
              }
              *(_DWORD *)(v22 + 32) = v33;
            }
          }
          *(_BYTE *)v22 = 0;
          goto LABEL_14;
        }
LABEL_32:
        v31 = __clz(v29);
        *(_QWORD *)(v22 + 40) = v29 & ~(0x8000000000000000 >> v31);
        casual = (_QWORD *)(v30 + 16 * v31);
      }
      *(_BYTE *)v22 = 0;
LABEL_19:
      *(_DWORD *)(v9 + 8) = v15 / 0xE;
      *(_QWORD *)v9 = casual;
      if ((_DWORD)v14)
      {
        v24 = 14 * v14;
        v25 = (uint64_t *)v10;
        do
        {
          v26 = *v25;
          *(_QWORD *)((char *)casual + 6) = *(uint64_t *)((char *)v25 + 6);
          *casual = v26;
          casual = (_QWORD *)((char *)casual + 14);
          v25 = (uint64_t *)((char *)v25 + 14);
          v24 -= 14;
        }
        while (v24);
      }
      if (!v10)
        return v8;
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      v27 = *(_QWORD *)(StatusReg + 752);
      if (v27)
      {
        if (!(v10 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) != 0)
        {
          goto LABEL_28;
        }
        if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_28:
            v28 = *(unsigned int *)(v27 + 8000);
            if (v28 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v27, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v27 + 8 * v28) = v10 | 0x5000000000000;
              *(_DWORD *)(v27 + 8000) = v28 + 1;
            }
            return v8;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v27, v10, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      }
      return v8;
    }
LABEL_14:
    casual = (_QWORD *)bmalloc_allocate_casual(v15, 1);
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x12492493)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 14 * v4;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(14 * v4));
    *(_DWORD *)(v5 + 8) = v8 / 0xE;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 14 * v7;
      v18 = (uint64_t *)v6;
      do
      {
        v19 = *v18;
        *(_QWORD *)((char *)v9 + 6) = *(uint64_t *)((char *)v18 + 6);
        *v9 = v19;
        v9 = (_QWORD *)((char *)v9 + 14);
        v18 = (uint64_t *)((char *)v18 + 14);
        v17 -= 14;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::MacroAssemblerHelpers::load8OnCondition<JSC::MacroAssemblerARM64,JSC::MacroAssemblerARM64::ResultCondition,void const*,JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v8 = a4;
  if (a2 > 1)
  {
    JSC::MacroAssemblerARM64::load8SignedExtendTo32(a1, a3, a4, a4, a5, a6, a7, a8);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C2BE70);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a3, a1 + 296, a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(a1 + 200);
    if (v17 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
      v17 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v8 & 0x1F | 0x387F6A20;
    *(_DWORD *)(a1 + 200) += 4;
    if (v8 == 17)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197C2BEA0);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    }
  }
}

void JSC::MacroAssemblerARM64::load8SignedExtendTo32(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_8;
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a2, a1 + 296, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = a3 & 0x1F | 0x38FF6A20;
  *(_DWORD *)(a1 + 200) += 4;
  if (a3 == 17)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      return;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197C2BF6CLL);
  }
}

void JSC::MacroAssemblerARM64::moveToCachedReg(_DWORD *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;

  if ((*(_DWORD *)(*(_QWORD *)a3 + 208) & *(_DWORD *)(a3 + 24)) != 0)
  {
    v11 = *(_QWORD *)(a3 + 16);
    if (v11 == this)
      return;
    v12 = JSC::ARM64LogicalImmediate::create64(this);
    if (v12 != -1)
    {
      v15 = *(char *)(a3 + 8) | (v12 << 10);
      v16 = -1308621856;
LABEL_5:
      v17 = v15 | v16;
      v18 = a1[50];
      if (v18 + 4 > a1[48])
      {
        v22 = v17;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v13, v14, a4, a5, a6, a7, a8);
        v17 = v22;
        v18 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v17;
      a1[50] += 4;
      goto LABEL_16;
    }
    v19 = v11 ^ this;
    if (!((v11 ^ this) >> 32))
    {
      v16 = -226492416;
      if ((this & 0xFFFF0000) != (v11 & 0xFFFF0000))
      {
        v20 = ((this & 0xFFFF0000) >> 11) | 0xF2A00000 | *(_BYTE *)(a3 + 8) & 0x1F;
        v21 = a1[50];
        if (v21 + 4 > a1[48])
        {
          v23 = ((this & 0xFFFF0000) >> 11) | 0xF2A00000 | *(_BYTE *)(a3 + 8) & 0x1F;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v13, v14, a4, a5, a6, a7, a8);
          v20 = v23;
          v19 = v11 ^ this;
          v16 = -226492416;
          v21 = a1[50];
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = v20;
        a1[50] += 4;
      }
      if (!v19)
        goto LABEL_16;
      v15 = *(_BYTE *)(a3 + 8) & 0x1F | (32 * (unsigned __int16)this);
      goto LABEL_5;
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, this, *(char *)(a3 + 8), a4, a5, a6, a7, a8);
LABEL_16:
  *(_QWORD *)(a3 + 16) = this;
  *(_DWORD *)(*(_QWORD *)a3 + 208) |= *(_DWORD *)(a3 + 24);
}

void WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_DWORD *)(v7 + 24);
    do
    {
      *((_QWORD *)v16 - 1) = 0;
      *v16 = -1;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = *(_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(v18 + 1) >= 2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        v25 = 1;
        do
        {
          v26 = v24;
          v8 = *(void **)(v19 + 16 * v24);
          v24 = (v24 + v25++) & v20;
        }
        while (v8);
        v27 = v19 + 16 * v26;
        *(_QWORD *)v27 = v18;
        *(_DWORD *)(v27 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::Vector<JSC::DFG::MinifiedNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 13 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::MinifiedNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x13B13B14)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 13 * v8;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(13 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 0xD;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v19 = 13 * v9;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20;
        *(_QWORD *)((char *)v11 + 5) = *(uint64_t *)((char *)v20 + 5);
        *v11 = v21;
        v11 = (_QWORD *)((char *)v11 + 13);
        v20 = (uint64_t *)((char *)v20 + 13);
        v19 -= 13;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::MinifiedNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x13B13B14)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 13 * v4;
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(13 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0xD;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = 13 * v7;
        v18 = (uint64_t *)v6;
        do
        {
          v19 = *v18;
          *(_QWORD *)((char *)v9 + 5) = *(uint64_t *)((char *)v18 + 5);
          *v9 = v19;
          v9 = (_QWORD *)((char *)v9 + 13);
          v18 = (uint64_t *)((char *)v18 + 13);
          v17 -= 13;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::MacroAssemblerARM64::xor64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  v8 = a4;
  v9 = a3;
  v11 = a2;
  if (a2 == 0xFFFFFFFFLL)
  {
    v12 = a4 & 0x1F | ((a3 & 0x1F) << 16);
    v13 = -1440742432;
  }
  else
  {
    v14 = JSC::ARM64LogicalImmediate::create64((int)a2);
    if (v14 == -1)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v11, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
      v12 = v8 & 0x1F | (32 * (v9 & 0x1F));
      v13 = -904921088;
    }
    else
    {
      v12 = (32 * (v9 & 0x1F)) | (v14 << 10);
      v13 = v8 | 0xD2000000;
    }
  }
  v15 = v12 | v13;
  v18 = *(_DWORD *)(a1 + 200);
  v17 = (unsigned int *)(a1 + 200);
  v16 = v18;
  if (v18 + 4 > *(v17 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36), a2, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
  *v17 += 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*a1)[1];
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 32;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)v8[1];
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 64;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)v8[1];
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 128;
LABEL_19:
    *(_WORD *)(v9 + 129) |= v41;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*a1)[1];
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 2;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)v8[1];
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 1;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)v8[1];
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 4;
LABEL_19:
    *(_BYTE *)(v9 + 1) |= v41;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*a1)[1];
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 2;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)v8[1];
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 1;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)v8[1];
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 4;
LABEL_19:
    *(_BYTE *)(v9 + 1) |= v41;
  }
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_QWORD *)a1;
      v13 = v4 << 6;
      v14 = (__int128 *)v3;
      do
      {
        JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(v12, v14);
        v12 = v15 + 64;
        v14 += 4;
        v13 -= 64;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 26))
  {
    v4 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>(uint64_t a1, unint64_t a2, JSC::InlineWatchpointSet *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::InlineWatchpointSet *v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[24];
  uint64_t v40;

  v10 = *(_QWORD *)(a1 + 24);
  if (((*(_DWORD *)(v10 + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == a2)
    {
      v40 = a4 << 48;
      v28 = (uint64_t *)(a1 + 928);
      if (WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::contains((uint64_t *)(a1 + 928), &v40))
      {
        return 1;
      }
      v34 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 1) != 0)
        v35 = (v34 >> 1) & 3;
      else
        v35 = *(unsigned __int8 *)(v34 + 4);
      if (v35 != 2)
      {
        v36 = *v28;
        if (*v28)
          LODWORD(v36) = *(_DWORD *)(v36 - 12);
        v38 = v36;
        WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t *)(a1 + 928), &v40, &v38, v29, v30, v31, v32, v33, (uint64_t)v39);
        v37 = *(unsigned int *)(a1 + 924);
        if ((_DWORD)v37 == *(_DWORD *)(a1 + 920))
        {
          WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITConstant<JSC::DFG::LinkerIR::Type>&>(a1 + 912, (unint64_t)&v40);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v37) = v40;
          *(_DWORD *)(a1 + 924) = v37 + 1;
        }
        return 1;
      }
    }
    return 0;
  }
  v11 = *(_QWORD *)(v10 + 152);
  if (!v11)
  {
LABEL_10:
    v20 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
      v21 = (v20 >> 1) & 3;
    else
      v21 = *(unsigned __int8 *)(v20 + 4);
    if (v21 != 2)
    {
      JSC::DFG::Graph::freeze(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(a1 + 24) + 136), a3, v22, v23, v24, v25, v26, v27);
      return 1;
    }
    return 0;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(JSC::InlineWatchpointSet **)(v11 + 8 * v16);
  if (v17 != a3)
  {
    v19 = 1;
    result = 1;
    while (v17)
    {
      v16 = (v16 + v19) & v12;
      v17 = *(JSC::InlineWatchpointSet **)(v11 + 8 * v16);
      ++v19;
      if (v17 == a3)
        return result;
    }
    goto LABEL_10;
  }
  return 1;
}

void std::make_unique[abi:sn180100]<JSC::DFG::SaneStringGetByValSlowPathGenerator,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump &,JSC::DFG::SpeculativeJIT *,JSC::JSValueRegs &,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID &,JSC::ARM64Registers::RegisterID &>(uint64_t *a1, int *a2, uint64_t *a3, char *a4, uint64_t *a5, char *a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  JSC::AssemblerBuffer *v32;
  JSC::AssemblerBuffer *v33;

  v14 = WTF::fastMalloc((WTF *)0x90);
  v15 = *a3;
  v16 = *a4;
  v18 = *a5;
  v17 = a5[1];
  v19 = *a6;
  v20 = *a7;
  v21 = *a2;
  v22 = *(_QWORD *)(a2 + 1);
  v23 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v14, (JSC::DFG::SpeculativeJIT *)v15);
  *(_QWORD *)v23 = off_1E35746F0;
  *(_DWORD *)(v23 + 48) = v21;
  *(_QWORD *)(v23 + 52) = v22;
  v31 = *(_DWORD *)(v15 + 200);
  *(_DWORD *)(v23 + 60) = v31;
  if (v31 < *(_DWORD *)(v15 + 52))
  {
    v32 = (JSC::AssemblerBuffer *)(v15 + 56);
    do
    {
      if ((v31 + 4) > *(_DWORD *)(v15 + 192))
      {
        v33 = v32;
        JSC::AssemblerBuffer::outOfLineGrow(v32, v24, v25, v26, v27, v28, v29, v30);
        v32 = v33;
        v31 = *(_DWORD *)(v15 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v15 + 56) + v31) = -721215457;
      v31 = *(_DWORD *)(v15 + 200) + 4;
      *(_DWORD *)(v15 + 200) = v31;
      *(_DWORD *)(v14 + 60) = v31;
    }
    while (v31 < *(_DWORD *)(v15 + 52));
  }
  *(_DWORD *)(v15 + 208) = 0;
  *(_QWORD *)v14 = off_1E3572A00;
  *(_BYTE *)(v14 + 64) = v16;
  *(_QWORD *)(v14 + 72) = v18;
  *(_QWORD *)(v14 + 80) = v17;
  *(_BYTE *)(v14 + 88) = v19;
  *(_BYTE *)(v14 + 89) = v20;
  *(_QWORD *)(v14 + 96) = v14 + 112;
  *(_QWORD *)(v14 + 104) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v15, 0, v14 + 96, v16, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v29, v30);
  *a1 = v14;
}

void JSC::DFG::SaneStringGetByValSlowPathGenerator::~SaneStringGetByValSlowPathGenerator(JSC::DFG::SaneStringGetByValSlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SaneStringGetByValSlowPathGenerator *v9;
  uint64_t v11;
  uint64_t v12;

  v9 = (JSC::DFG::SaneStringGetByValSlowPathGenerator *)*((_QWORD *)this + 12);
  if ((JSC::DFG::SaneStringGetByValSlowPathGenerator *)((char *)this + 112) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::SaneStringGetByValSlowPathGenerator *v9;
  uint64_t v11;
  uint64_t v12;

  v9 = (JSC::DFG::SaneStringGetByValSlowPathGenerator *)*((_QWORD *)this + 12);
  if ((JSC::DFG::SaneStringGetByValSlowPathGenerator *)((char *)this + 112) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::DFG::SaneStringGetByValSlowPathGenerator::generateInternal(JSC::DFG::SaneStringGetByValSlowPathGenerator *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  unsigned int v39[3];

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)this + 12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest32((uint64_t)a2, 4, *((char *)this + 89), *((char *)this + 89), v10, v11, v12, v13, (uint64_t)v39);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, 10, *((char *)this + 64), v14, v15, v16, v17, v18);
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo((uint64_t)this, (uint64_t)a2, v19, v20, v21, v22, v23, v24);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v39, (uint64_t)a2, v25, v26, v27, v28, v29, v30);
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v38, (unsigned __int8 *)a2, *((_QWORD *)this + 12), *((unsigned int *)this + 27), *((char *)this + 64), *((_QWORD *)this + 9), *((JSC::ARM64LogicalImmediate **)this + 10), *((char *)this + 88), *((_BYTE *)this + 89));
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo((uint64_t)this, (uint64_t)a2, v31, v32, v33, v34, v35, v36);
}

unsigned int *JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  unsigned int v17[2];
  char v18;
  __int16 v19;
  char v20;

  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v13 = 69;
  else
    v13 = 65;
  v17[0] = i;
  v17[1] = 0;
  v18 = v13;
  v19 = 15;
  v20 = -1;
  v16 = *(_DWORD *)(a1 + 60);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v17, &v16, a2, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, JSC::ARM64LogicalImmediate *this, uint64_t a8, unsigned __int8 a9)
{
  unsigned __int8 *v9;
  int v10;
  JSC::ARM64LogicalImmediate *v11;
  uint64_t v12;
  JSC::AssemblerBuffer *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  unsigned int v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  char *v64;
  uint64_t v66;
  JSC::AssemblerBuffer *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v10 = a8;
  v11 = this;
  v12 = a6;
  v13 = (JSC::AssemblerBuffer *)a5;
  v14 = a2;
  v66 = a3;
  v67 = (JSC::AssemblerBuffer *)a4;
  v15 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v18 = 0;
    LODWORD(v9) = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v14, a3 + 16 * v18, a3, a4, a5, a6, (uint64_t)this, a8);
      v18 = v9;
      v19 = a4 > v9;
      LODWORD(v9) = (_DWORD)v9 + 1;
    }
    while (v19);
  }
  __dst = v71;
  v69 = 2;
  if (v10 != 1)
  {
    v71[0] = v10 | 0x100;
    v20 = 1;
    v70 = 1;
    if (a9 == 2)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (a9 != 2)
  {
    v20 = 0;
LABEL_9:
    v71[v20++] = a9 | 0x200;
    v70 = v20;
    while (1)
    {
LABEL_10:
      v21 = 0;
      v22 = 0;
      v23 = __dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_80;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_80;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (!(v29.i32[0] + v28))
      {
        v39 = *(_BYTE *)__dst;
        v40 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v14, *(char *)__dst, v40, a4, a5, a6, (uint64_t)this, a8);
        memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
        v41 = v70 - 1;
        v37 = v70 == 1;
        v70 = v41;
        v9 = (unsigned __int8 *)__dst;
        v42 = (char *)__dst + 2 * v41;
        if (v37)
        {
          v49 = 0;
          v50 = 0;
          v45 = 0;
          a2 = (unsigned __int8 *)v42;
        }
        else
        {
          v43 = 2 * v41;
          v44 = __dst;
          while (*v44 != v40)
          {
            v44 += 2;
            v43 -= 2;
            if (!v43)
              goto LABEL_38;
          }
          *v44 = v39;
LABEL_38:
          v45 = 0;
          v46 = v9;
          a2 = (unsigned __int8 *)v42;
          v47 = v42;
          do
          {
            if (*v9 == v9[1])
            {
              v48 = v9;
              if (v47 != (char *)__dst + 2 * v70)
              {
                v64 = v42;
                if (v9 == a2)
                {
                  v48 = (unsigned __int8 *)v47;
                }
                else
                {
                  v62 = v46 - a2;
                  v63 = v47;
                  memmove(v47, a2, v46 - a2);
                  v48 = (unsigned __int8 *)&v63[v62];
                }
                v42 = v64;
              }
              a2 = v9 + 2;
              ++v45;
              v47 = (char *)v48;
            }
            v9 += 2;
            v46 += 2;
          }
          while (v9 < (unsigned __int8 *)v42);
          v9 = (unsigned __int8 *)__dst;
          v49 = v70;
          v50 = v70;
          v42 = v47;
        }
        v51 = &v9[2 * v49];
        if (a2 != v51)
        {
          memmove(v42, a2, v51 - a2);
          v50 = v70;
        }
        v20 = v50 - v45;
        goto LABEL_59;
      }
      v9 = 0;
      v30 = v20 <= 1 ? 1 : v20;
      v31 = 2 * v30;
      while (1)
      {
        v32 = v9[(_QWORD)__dst + 1];
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v22 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v9 += 2;
        if ((unsigned __int8 *)v31 == v9)
          goto LABEL_60;
      }
      v33 = v9[(_QWORD)__dst];
      if (v33 != v32)
        break;
LABEL_58:
      memmove(&v9[(_QWORD)v23], &v9[(_QWORD)v23 + 2], 2 * v24 - (_QWORD)v9 - 2);
      v20 = v70 - 1;
LABEL_59:
      v70 = v20;
LABEL_60:
      if (!v20)
      {
        v52 = __dst;
        if (v71 != __dst && __dst)
        {
          __dst = 0;
          v69 = 0;
          WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, (uint64_t)this, a8);
        }
        goto LABEL_64;
      }
    }
    v34 = (char)v33;
    if ((char)v33 == 63)
    {
      v35 = *((_DWORD *)v14 + 50);
      v36 = *((_DWORD *)v14 + 48);
      if (v32 != 31)
      {
        v38 = v32 & 0x1F | 0xD2800000;
        goto LABEL_55;
      }
    }
    else
    {
      v35 = *((_DWORD *)v14 + 50);
      v36 = *((_DWORD *)v14 + 48);
      v37 = (char)v32 == 31 || v34 == 31;
      if (!v37)
      {
        v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_55:
        if (v35 + 4 > v36)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), (uint64_t)a2, a3, a4, a5, a6, (uint64_t)this, a8);
          v35 = *((_DWORD *)v14 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v14 + 7) + v35) = v38;
        *((_DWORD *)v14 + 50) += 4;
        v23 = __dst;
        v24 = v70;
        goto LABEL_58;
      }
    }
    v38 = (char)v32 | (32 * v34) | 0x91000000;
    goto LABEL_55;
  }
LABEL_64:
  if ((_DWORD)v12 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v14, (uint64_t)v11, 0, a4, a5, a6, (uint64_t)this, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v14, (v12 << 35) + 0x380000001ALL, 0, a4, a5, a6, (uint64_t)this, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v14, (uint64_t)operationGetByValStringInt, v53, v54, v55, v56, v57, v58, a1);
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,std::span<JSC::DFG::SilentRegisterSavePlan const,18446744073709551615ul>>((uint64_t)v14, &v66, (char)v13);
  LOWORD(v9) = v59;
  switch((_DWORD)v13)
  {
    case 0:
      goto LABEL_73;
    case 0x1F:
      LODWORD(v11) = -1862270945;
      break;
    case 0xFFFFFFFF:
      LODWORD(v11) = -1442774017;
      break;
    default:
      LODWORD(v11) = v13 | 0xAA0003E0;
      break;
  }
  v12 = (uint64_t)(v14 + 200);
  v60 = *((_DWORD *)v14 + 50);
  v13 = (JSC::AssemblerBuffer *)(v14 + 56);
  if (v60 + 4 > *((_DWORD *)v14 + 48))
    goto LABEL_81;
  while (1)
  {
    *(_DWORD *)(*(_QWORD *)v13 + v60) = (_DWORD)v11;
    *(_DWORD *)v12 += 4;
LABEL_73:
    v13 = v67;
    if (!(_DWORD)v67)
      break;
    v11 = (JSC::ARM64LogicalImmediate *)(v67 - 1);
    v12 = v66 - 16;
    v61 = 16 * v67;
    while (v11 < v13)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v14, v12 + v61, a3, a4, a5, a6, (uint64_t)this, a8);
      v61 -= 16;
      if (!v61)
        goto LABEL_77;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, (uint64_t)this, a8);
    v60 = *(_DWORD *)v12;
  }
LABEL_77:
  *v15 = 0;
  if ((unsigned __int16)v9 >= 0x100u)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v14, (char)v9, a3, a4, a5, a6, (uint64_t)this, a8);
}

void JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,std::span<JSC::DFG::SilentRegisterSavePlan const,18446744073709551615ul>>(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 2;
  v6 = *(_QWORD *)(a1 + 3960);
  JSC::CodeOrigin::CodeOrigin(&v27, (const JSC::CodeOrigin *)(*(_QWORD *)(a1 + 3976) + 8));
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v6, (unint64_t *)&v27, &v29, &v28, v7, v8, v9, v10);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = a2[1];
    if (v19)
    {
      v20 = 0;
      v21 = 16 * v19;
      v22 = (char *)(*a2 + 2);
      while (1)
      {
        v24 = *v22;
        v22 += 16;
        v23 = v24;
        if ((v24 & 0x40) != 0)
          break;
        v20 |= 1 << v23;
        v21 -= 16;
        if (!v21)
          goto LABEL_10;
      }
    }
    else
    {
      v20 = 0;
LABEL_10:
      if ((a3 & 0x40) == 0)
      {
        v25 = v20 | (1 << a3);
        if ((v25 & 2) != 0)
        {
          v26 = (unsigned __int16)~(_WORD)v25 & 0xFFFE;
          if (v26)
            JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, __clz(__rbit64(v26)), v13, v14, v15, v16, v17);
        }
        goto LABEL_4;
      }
    }
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v12, v13, v14, v15, v16, v17);
LABEL_4:
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (unsigned __int8 *)(*a1 + 2 * v5);
  if (v5 <= a3)
  {
    v7 = 0;
    v10 = v6;
  }
  else
  {
    v7 = 0;
    v8 = (unsigned __int8 *)(v4 + 2 * a3);
    v9 = v8;
    v10 = v6;
    v11 = v6;
    do
    {
      if (*v9 == v9[1])
      {
        v12 = (char *)v9;
        if (v11 != (unsigned __int8 *)(*a1 + 2 * *((unsigned int *)a1 + 3)))
        {
          if (v9 == v10)
          {
            v12 = (char *)v11;
          }
          else
          {
            v15 = v8 - v10;
            v18 = v9;
            v19 = v6;
            v16 = (char *)v11;
            v17 = v8;
            memmove(v11, v10, v8 - v10);
            v8 = v17;
            v9 = v18;
            v6 = v19;
            v12 = &v16[v15];
          }
        }
        v10 = v9 + 2;
        v7 = (v7 + 1);
        v11 = (unsigned __int8 *)v12;
      }
      v9 += 2;
      v8 += 2;
    }
    while (v9 < v6);
    v4 = *a1;
    v5 = *((unsigned int *)a1 + 3);
    v6 = v11;
  }
  v13 = (unsigned __int8 *)(v4 + 2 * v5);
  if (v10 != v13)
  {
    memmove(v6, v10, v13 - v10);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v5 - v7;
  return v7;
}

void JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v48;
  __int128 v49;

  v48 = a6;
  v8 = a5;
  v9 = a4;
  v12 = 0;
  if ((a2 & 1) != 0)
  {
    *(_BYTE *)(a1 + 5768) = 1;
    v13 = (_DWORD *)(a3 + 12);
    v14 = (_DWORD *)(a3 + 8);
    do
    {
      if (v12 != v8 && v12 != v9)
      {
        v19 = *(_DWORD *)(a1 + 4776 + 12 * v12);
        if (v19 != 0x3FFFFFFF)
        {
          *(_QWORD *)&v49 = JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(a1, v19, v12);
          *((_QWORD *)&v49 + 1) = v20;
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a1, (uint64_t)&v49, v21, v22, v23, v24, v25, v26);
          v16 = *v13;
          if ((_DWORD)v16 == *v14)
          {
            v15 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v16 + 1, (unint64_t)&v49);
            v16 = *(unsigned int *)(a3 + 12);
            v17 = *(_QWORD *)a3;
            v18 = *v15;
          }
          else
          {
            v17 = *(_QWORD *)a3;
            v18 = v49;
          }
          *(_OWORD *)(v17 + 16 * v16) = v18;
          ++*v13;
        }
      }
      v12 = (v12 + 1);
    }
    while ((_DWORD)v12 != 16);
  }
  else
  {
    v13 = (_DWORD *)(a3 + 12);
    v14 = (_DWORD *)(a3 + 8);
    do
    {
      if (v12 != v8 && v12 != v9)
      {
        v27 = *(_DWORD *)(a1 + 4776 + 12 * v12);
        if (v27 != 0x3FFFFFFF)
        {
          *(_QWORD *)&v49 = JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(a1, v27, v12);
          *((_QWORD *)&v49 + 1) = v28;
          v29 = *v13;
          if ((_DWORD)v29 == *v14)
          {
            v30 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v29 + 1, (unint64_t)&v49);
            v29 = *(unsigned int *)(a3 + 12);
            v31 = *(_QWORD *)a3;
            v32 = *v30;
          }
          else
          {
            v31 = *(_QWORD *)a3;
            v32 = v49;
          }
          *(_OWORD *)(v31 + 16 * v29) = v32;
          ++*v13;
        }
      }
      v12 = (v12 + 1);
    }
    while ((_DWORD)v12 != 16);
  }
  v33 = 0;
  do
  {
    v34 = *(_DWORD *)(a1 + 4968 + 12 * v33);
    if (v34 == 0x3FFFFFFF)
      goto LABEL_23;
    v35 = JSC::FPRInfo::toRegister::registerForIndex[v33];
    if (v35 == v48)
      goto LABEL_23;
    v36 = ~v34;
    if (v36 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C2E3F8);
    }
    v37 = *(_QWORD *)(a1 + 3992) + 24 * (int)v36;
    v38 = *(_QWORD *)v37;
    v39 = *(unsigned __int8 *)(v37 + 14);
    v40 = *(unsigned __int16 *)(v38 + 18);
    v41 = 3328;
    if (v40 <= 0xB5)
    {
      if (v40 < 3)
        goto LABEL_34;
      goto LABEL_33;
    }
    if (v40 != 182)
    {
      if (v40 == 355 || v40 == 348)
      {
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
        v41 = 3328;
        goto LABEL_34;
      }
LABEL_33:
      v41 = 5888;
    }
LABEL_34:
    if (v39)
      v42 = 0;
    else
      v42 = 5;
    *(_QWORD *)&v49 = v41 | ((unint64_t)(((_BYTE)v35 + 32) & 0x7F) << 16) | v42;
    *((_QWORD *)&v49 + 1) = v38;
    if (a2)
      JSC::DFG::SpeculativeJIT::silentSpillImpl(a1, (uint64_t)&v49, a3, a4, a5, a6, a7, a8);
    v43 = *v13;
    if ((_DWORD)v43 == *v14)
    {
      v44 = (__int128 *)WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v43 + 1, (unint64_t)&v49);
      v43 = *(unsigned int *)(a3 + 12);
      v45 = *(_QWORD *)a3;
      v46 = *v44;
    }
    else
    {
      v45 = *(_QWORD *)a3;
      v46 = v49;
    }
    *(_OWORD *)(v45 + 16 * v43) = v46;
    ++*v13;
LABEL_23:
    v33 = (v33 + 1);
  }
  while ((_DWORD)v33 != 23);
}

uint64_t WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 16 * v8;
      v18 = (__int128 *)v7;
      do
      {
        v19 = *v18++;
        *v9++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  JSC::ArrayBuffer *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (unint64_t *)a2, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_10;
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v17 = *(_QWORD *)(a1 + 24);
    v18 = v17 & 0xFFFFFFFFFFFFFF00;
    return v18 | v17;
  }
  v20 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)a1, v10, v11, v12, v13, v14, v15, v16);
  if (!v20)
  {
LABEL_10:
    LOBYTE(v17) = 0;
    v18 = 0;
    return v18 | v17;
  }
  *(_DWORD *)v20 += 2;
  if (*(_BYTE *)(a2 + 8))
  {
    v28 = *(_QWORD *)a2;
  }
  else
  {
    if (*((_BYTE *)v20 + 64) && (v31 = *((_QWORD *)v20 + 4)) != 0)
      v28 = atomic_load((unint64_t *)(v31 + 32));
    else
      v28 = *((_QWORD *)v20 + 6);
    *(_QWORD *)a2 = v28;
    *(_BYTE *)(a2 + 8) = 1;
  }
  v29 = v28 - *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
    LOBYTE(v30) = 0;
  else
    v30 = qword_199123EC8[(char)(*(_BYTE *)(a1 + 5) - 42)];
  v17 = v29 >> v30;
  v18 = (v29 >> v30) & 0xFFFFFFFFFFFFFF00;
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20, v21, v22, v23, v24, v25, v26, v27);
  return v18 | v17;
}

uint64_t JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  JSC::ArrayBuffer *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v10 = *(unsigned __int8 *)(a1 + 40);
  if ((v10 & 8) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((v10 & 6) == 0)
    return 0;
  if (v10 == 88)
    goto LABEL_10;
  v19 = v10 == 48 || v10 == 16;
  if (v19)
  {
    v14 = JSC::JSArrayBufferView::slowDownAndWasteMemory(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = 1;
    v29 = v10 - 90;
    if (v29 > 0x33)
      return v12;
    if (((1 << v29) & 0xF400000000000) == 0)
    {
      if (((1 << v29) & 0xF) == 0)
        return v12;
LABEL_10:
      v14 = *(JSC::ArrayBuffer **)(*(_QWORD *)(a1 + 8) - 8);
      goto LABEL_11;
    }
    v14 = *(JSC::ArrayBuffer **)(a1 + 48);
  }
LABEL_11:
  if (!v14)
    return 1;
  *(_DWORD *)v14 += 2;
  if (*((_BYTE *)a2 + 8))
  {
    v15 = *a2;
  }
  else
  {
    if (*((_BYTE *)v14 + 64) && (v30 = *((_QWORD *)v14 + 4)) != 0)
      v15 = atomic_load((unint64_t *)(v30 + 32));
    else
      v15 = *((_QWORD *)v14 + 6);
    *a2 = v15;
    *((_BYTE *)a2 + 8) = 1;
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = v15;
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
      LOBYTE(v18) = 0;
    else
      v18 = qword_199123EC8[(char)(*(_BYTE *)(a1 + 5) - 42)];
    v17 = (*(_QWORD *)(a1 + 24) << v18) + v16;
  }
  v12 = v16 > v15 || v17 > v15;
  v19 = *(_DWORD *)v14 == 2;
  *(_DWORD *)v14 -= 2;
  if (v19)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v14, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  return v12;
}

JSC::ArrayBuffer *JSC::JSArrayBufferView::possiblySharedBuffer(JSC::JSArrayBufferView *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v12;

  v8 = *((unsigned __int8 *)this + 40);
  if (v8 == 88)
    return *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
  if (v8 != 48 && v8 != 16)
  {
    v9 = 0;
    v12 = v8 - 90;
    if (v12 > 0x33)
      return (JSC::ArrayBuffer *)v9;
    if (((1 << v12) & 0xF400000000000) != 0)
      return (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
    if (((1 << v12) & 0xF) == 0)
      return (JSC::ArrayBuffer *)v9;
    return *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
  }
  return JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(JSC::JSArrayBufferView *this, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  JSC::ArrayBuffer *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;

  v10 = *((unsigned __int8 *)this + 40);
  if ((v10 & 8) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    if (!v11
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((v10 & 6) == 0)
    return 0;
  if (v10 == 88)
    goto LABEL_10;
  v27 = v10 == 48 || v10 == 16;
  if (v27)
  {
    v14 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = 1;
    v28 = v10 - 90;
    if (v28 > 0x33)
      return v12;
    if (((1 << v28) & 0xF400000000000) == 0)
    {
      if (((1 << v28) & 0xF) == 0)
        return v12;
LABEL_10:
      v14 = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
      goto LABEL_11;
    }
    v14 = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
  }
LABEL_11:
  if (!v14)
    return 1;
  *(_DWORD *)v14 += 2;
  if (*((_BYTE *)a2 + 8))
  {
    v15 = *a2;
  }
  else
  {
    if (*((_BYTE *)v14 + 64) && (v29 = *((_QWORD *)v14 + 4)) != 0)
      v15 = atomic_load((unint64_t *)(v29 + 32));
    else
      v15 = *((_QWORD *)v14 + 6);
    *a2 = v15;
    *((_BYTE *)a2 + 8) = 1;
  }
  v16 = *((_QWORD *)this + 4);
  v17 = v15;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    v17 = JSC::JSArrayBufferView::byteLengthRaw(this) + v16;
  v12 = v16 > v15 || v17 > v15;
  v27 = *(_DWORD *)v14 == 2;
  *(_DWORD *)v14 -= 2;
  if (v27)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v14, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  return v12;
}

uint64_t JSC::JSArrayBufferView::byteLengthRaw(JSC::JSArrayBufferView *this)
{
  if ((*((_BYTE *)this + 5) - 42) > 7u)
    return *((_QWORD *)this + 3);
  else
    return *((_QWORD *)this + 3) << qword_199123EC8[(char)(*((_BYTE *)this + 5) - 42)];
}

void WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(JSC::ArrayBuffer *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_DWORD *)a1 == 2;
  *(_DWORD *)a1 -= 2;
  if (v8)
  {
    JSC::ArrayBuffer::~ArrayBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::ArrayBuffer::~ArrayBuffer(JSC::ArrayBuffer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t **v27;
  uint64_t *i;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  JSC::BufferMemoryHandle *v39;

  v9 = *((_QWORD *)this + 10);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  v10 = *((_QWORD *)this + 9);
  if ((v10 & 1) == 0)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v10);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v10));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v10);
      v27 = (uint64_t **)(v10 + 8);
      for (i = *(uint64_t **)(v10 + 8); i != (uint64_t *)v27; i = *v27)
      {
        v38 = *i;
        v37 = (uint64_t *)i[1];
        *v37 = *i;
        *(_QWORD *)(v38 + 8) = v37;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *((_QWORD *)this + 2);
    if (v12 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v12);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v39 = (JSC::BufferMemoryHandle *)v13;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v39);
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v16, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  v19 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) == 0 && v23)
  {
    v24 = *(_QWORD *)v23;
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)v23 = 0;
      *(_DWORD *)(v23 + 8) = 0;
      WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::BufferMemoryHandle **a1)
{
  JSC::BufferMemoryHandle *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  if (v1)
  {
    JSC::BufferMemoryHandle::~BufferMemoryHandle(v1);
    WTF::fastFree(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

BOOL JSC::JSValue::isAnyInt(JSC::JSValue *this)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  double v5;

  v1 = *(_QWORD *)this;
  *(_QWORD *)&v2 = *(_QWORD *)this - 0x2000000000000;
  if (*(_QWORD *)&v2 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((double)(uint64_t)v2 != v2)
      return 0;
    v4 = (uint64_t)v2;
    if ((uint64_t)v2)
    {
      if (v4 > 0x7FFFFFFFFFFFFLL)
        return 0;
      return v4 > (uint64_t)0xFFF7FFFFFFFFFFFFLL;
    }
    goto LABEL_13;
  }
  if ((unint64_t)v1 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (!((unint64_t)v1 >> 49))
      return 0;
    *(_QWORD *)&v5 = v1 - 0x2000000000000;
    if ((double)(uint64_t)v5 != v5)
      return 0;
    v4 = (uint64_t)v5;
    if ((uint64_t)v5)
    {
      if (v4 >= 0x8000000000000)
        return 0;
      return v4 > (uint64_t)0xFFF7FFFFFFFFFFFFLL;
    }
LABEL_13:
    if (v1 < 0x2000000000000)
      return 0;
    return v4 > (uint64_t)0xFFF7FFFFFFFFFFFFLL;
  }
  return 1;
}

void JSC::MacroAssemblerARM64::or64(uint64_t a1, JSC::ARM64LogicalImmediate *this, char a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v8 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)this, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = -1441792000;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0xB2000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

void JSC::MacroAssemblerARM64::xor64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0xCA000000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xCA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::sub64(uint64_t a1, uint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  v8 = a4;
  v9 = a2;
  if ((unint64_t)this < 0x1000)
  {
    v11 = -1073741824;
LABEL_3:
    v12 = a4 | (32 * a2) | v11 | ((this & 0xFFF) << 10);
LABEL_4:
    v13 = 285212672;
LABEL_10:
    v15 = v12 | v13;
    goto LABEL_11;
  }
  v14 = -this;
  if ((unint64_t)-this < 0x1000)
  {
    v20 = 0x80000000;
    goto LABEL_19;
  }
  if ((this & 0xFFF) == 0)
  {
    v19 = this >> 12;
    if (!((unint64_t)this >> 24))
    {
      v11 = -1069547520;
      this >>= 12;
      goto LABEL_3;
    }
    v14 = -v19;
    if ((unint64_t)-v19 < 0x1000)
    {
      v20 = -2143289344;
LABEL_19:
      v12 = a4 | (32 * a2) | v20 | ((_DWORD)v14 << 10);
      goto LABEL_4;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C2F1CCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, this, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (v8 == 31 || v9 == 31)
  {
    v12 = v8 | (32 * v9);
    v13 = -886022144;
    goto LABEL_10;
  }
  v15 = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0xCB100000;
LABEL_11:
  v18 = *(_DWORD *)(a1 + 200);
  v17 = (unsigned int *)(a1 + 200);
  v16 = v18;
  if (v18 + 4 > *(v17 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36), a2, this, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
  *v17 += 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *,JSC::JSValueRegs,JSC::JSValueRegs)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x80u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *,JSC::JSValueRegs,JSC::JSValueRegs)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *,JSC::JSValueRegs,JSC::JSValueRegs)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, char a7, char a8, uint64_t a9, char a10)
{
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  WTF *v24;
  WTF *v25;
  unsigned int v26;
  int v27;
  _BYTE *v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v40;
  WTF *v43;
  unsigned int v44;
  _BYTE v45[24];
  WTF *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[24];
  WTF *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[24];

  v16 = *((unsigned int *)a2 + 3);
  v43 = (WTF *)v45;
  v44 = v16;
  if (v16 < 3)
  {
    v17 = v45;
  }
  else
  {
    if (v16 >= 0x15555556)
      goto LABEL_36;
    v17 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v16));
    v43 = (WTF *)v17;
    LODWORD(v16) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v16)
  {
    v18 = *a2;
    v19 = *a2 + 12 * v16;
    do
    {
      *(_DWORD *)v17 = *(_DWORD *)v18;
      *(_QWORD *)(v17 + 4) = *(_QWORD *)(v18 + 4);
      v18 += 12;
      v17 += 12;
    }
    while (v18 != v19);
  }
  v20 = WTF::fastMalloc((WTF *)0xB8);
  v21 = v44;
  v46 = (WTF *)v49;
  v47 = 2;
  v48 = v44;
  if (v44 < 3)
  {
    v22 = a4;
    v23 = v49;
  }
  else
  {
    if (v44 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C2F520);
    }
    v22 = a4;
    v23 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v44));
    v47 = 12 * v44 / 0xC;
    v46 = (WTF *)v23;
    v21 = v44;
  }
  if (v21)
  {
    v24 = v43;
    v25 = (WTF *)((char *)v43 + 12 * v21);
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v24;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)((char *)v24 + 4);
      v24 = (WTF *)((char *)v24 + 12);
      v23 += 12;
    }
    while (v24 != v25);
  }
  v26 = v48;
  v50 = (WTF *)v53;
  v51 = 2;
  v52 = v48;
  if (v48 >= 3)
  {
    if (v48 < 0x15555556)
    {
      v27 = 12 * v48;
      v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
      v51 = (v27 & 0xFFFFFFFC) / 0xC;
      v50 = (WTF *)v28;
      v26 = v48;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197C2F518);
  }
  v28 = v53;
LABEL_19:
  if (v26)
  {
    v29 = v46;
    v30 = (WTF *)((char *)v46 + 12 * v26);
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)((char *)v29 + 4);
      v29 = (WTF *)((char *)v29 + 12);
      v28 += 12;
    }
    while (v29 != v30);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v20, (uint64_t *)&v50, a3, 0, 0, a7);
  v38 = v50;
  if (v53 != (_BYTE *)v50 && v50 != 0)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  }
  *(_QWORD *)v20 = &off_1E3572A48;
  *(_BYTE *)(v20 + 152) = a5;
  *(_QWORD *)(v20 + 156) = a6;
  *(_QWORD *)(v20 + 168) = operationGetPrivateNameOptimize;
  *(_BYTE *)(v20 + 176) = a8;
  *(_BYTE *)(v20 + 177) = a9;
  *(_BYTE *)(v20 + 178) = a10;
  *(_DWORD *)(v20 + 180) = v22;
  *a1 = v20;
  v40 = v46;
  if (v49 != (_BYTE *)v46 && v46)
  {
    v46 = 0;
    v47 = 0;
    WTF::fastFree((unint64_t)v40, v31, v32, v33, v34, v35, v36, v37);
  }
  if (v45 != (_BYTE *)v43)
  {
    if (v43)
      WTF::fastFree((unint64_t)v43, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3572A78;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572A78;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572A78;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v69 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v71 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::appendCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v10 = **(_QWORD **)(a1 + 3976);
  if ((v10 & 1) != 0)
  {
    v26 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v27 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v30 = v26;
      v31 = v27;
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = v30;
      *(_DWORD *)(v26 + 8) = v31;
      v29 = 1;
    }
    else
    {
      v29 = v26;
      v26 = v27 << 36;
    }
    v10 = v26 | v29;
  }
  v32 = v10;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin(a1, &v32, a3, a4, a5, a6, a7, a8);
  if ((v32 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C2FDC8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a2, *(char *)(a1 + 272), v13, v14, v15, v16, v17);
  *(_DWORD *)(a1 + 208) = 0;
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -700513792;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::AssemblerBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_5;
  }
  LOBYTE(v13) = *(_BYTE *)(a1 + 102);
  v40 = 0;
  v41 = 2;
  v21 = *(_QWORD *)(a2 + 3960);
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v22 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v9 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v9 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v9 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v8;
      *(_DWORD *)(v38 + 8) = v9;
      v37 = 1;
      v8 = v38;
    }
    else
    {
      v37 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    v22 = v8 | v37;
    v21 = v35;
  }
  v39 = v22;
  v23 = (JSC::AssemblerBuffer *)JSC::DFG::Graph::willCatchExceptionInMachineFrame(v21, &v39, &v41, &v40, a5, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v23 & 1) != 0)
  {
    v24 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          break;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_36;
      }
    }
    else
    {
      v25 = 0;
LABEL_36:
      if ((v13 & 0x40) == 0)
      {
        v12 = 1;
        v30 = v25 | (1 << v13);
        LOBYTE(v13) = 1;
        if ((v30 & 2) == 0)
          goto LABEL_27;
        v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
        if (!v31)
        {
          v12 = 1;
          LOBYTE(v13) = -1;
          goto LABEL_27;
        }
        v13 = __clz(__rbit64(v31));
        if (v13 == 1)
        {
          v12 = 1;
          goto LABEL_27;
        }
        if (v13 == 31)
        {
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
          LODWORD(v9) = -1862270913;
        }
        else
        {
          LODWORD(v9) = v13 | 0xAA0103E0;
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
        }
        if (v33 <= v34)
        {
LABEL_46:
          *(_DWORD *)(*(_QWORD *)v23 + v32) = v9;
          *(_DWORD *)v8 += 4;
          v12 = 1;
          goto LABEL_27;
        }
LABEL_61:
        JSC::AssemblerBuffer::outOfLineGrow(v23, a2, a3, a4, a5, a6, a7, a8);
        v32 = *(_DWORD *)v8;
        goto LABEL_46;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v13) = 0;
  v12 = 0;
LABEL_27:
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v14 == 31)
    {
      v15 = -1862270945;
    }
    else if (v14 == 255)
    {
      v15 = -1442774017;
    }
    else
    {
      v15 = v14 | 0xAA0003E0;
    }
    v17 = (unsigned int *)(a2 + 200);
    v16 = *(_DWORD *)(a2 + 200);
    if (v16 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15;
    *v17 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v18 = *(_DWORD *)(a1 + 116);
  if (!v18)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v13, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v19 = v18 - 1;
  v20 = 16 * (v18 - 1);
  while (*(_DWORD *)(a1 + 116) > v19)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v20, a3, a4, a5, a6, a7, a8);
    v20 -= 16;
    if (--v19 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, char *a8, char *a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  int v43;
  uint64_t v44;
  _BYTE *v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];

  v17 = WTF::fastMalloc((WTF *)0xB0);
  v18 = *((unsigned int *)a2 + 3);
  v46 = v48;
  v47 = v18;
  if (v18 < 3)
  {
    v19 = v48;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_23;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v46 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v44 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v26 = *a8;
  v27 = *a9;
  v28 = *a10;
  v29 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 >= 3)
  {
    v43 = v23;
    if (v47 < 0x15555556)
    {
      v30 = v22;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
      v50 = 12 * v47 / 0xC;
      v49 = (WTF *)v31;
      v29 = v47;
      v22 = v30;
      v23 = v43;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C303C0);
  }
  v31 = v52;
  if (v47)
  {
LABEL_12:
    v32 = v46;
    v33 = &v46[12 * v29];
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)(v32 + 4);
      v32 += 12;
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v17, (uint64_t *)&v49, v22, v23, v24, v25);
  v41 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v17 = &off_1E3572AA8;
  *(_QWORD *)(v17 + 152) = v44;
  *(_BYTE *)(v17 + 160) = v26;
  *(_BYTE *)(v17 + 161) = v27;
  *(_QWORD *)(v17 + 168) = v28;
  *a1 = v17;
  if (v48 != v46)
  {
    if (v46)
      WTF::fastFree((unint64_t)v46, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572A78;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572A78;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>::InlineCacheWrapper(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

uint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(__int128 **)a1;
    v4 = (__int128 *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6));
    WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>>::move(v3, v4, *(_QWORD *)a1);
    if ((__int128 *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(__int128 **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return 1;
}

__int128 *WTF::VectorMover<false,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>>::move(__int128 *result, __int128 *a2, uint64_t a3)
{
  __int128 v3;

  while (result != a2)
  {
    v3 = *result;
    *(_BYTE *)(a3 + 16) = *((_BYTE *)result + 16);
    *(_OWORD *)a3 = v3;
    *(_DWORD *)(a3 + 20) = *((_DWORD *)result + 5);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)result + 6);
    *(_DWORD *)(a3 + 28) = *((_DWORD *)result + 7);
    *(_QWORD *)(a3 + 32) = *((_QWORD *)result + 4);
    *(_WORD *)(a3 + 40) = *((_WORD *)result + 20);
    *(_DWORD *)(a3 + 44) = *((_DWORD *)result + 11);
    *(_QWORD *)(a3 + 48) = *((_QWORD *)result + 6);
    *(_QWORD *)(a3 + 56) = *((_QWORD *)result + 7);
    result += 4;
    a3 += 64;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutPrivateName(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x80u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutPrivateName(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compilePutPrivateName(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileCheckPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x80u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileCheckPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileCheckPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

double JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>::InlineCacheWrapper(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  result = *((double *)a2 + 4);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)((char *)a2 + 44);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  return result;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>::InlineCacheWrapper(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(__int128 **)a1;
    v4 = (__int128 *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6));
    WTF::VectorBuffer<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>::move(v3, v4, *(_QWORD *)a1);
    if ((__int128 *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(__int128 **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

__int128 *WTF::VectorMover<false,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>::move(__int128 *result, __int128 *a2, uint64_t a3)
{
  __int128 v3;

  while (result != a2)
  {
    v3 = *result;
    *(_BYTE *)(a3 + 16) = *((_BYTE *)result + 16);
    *(_OWORD *)a3 = v3;
    *(_DWORD *)(a3 + 20) = *((_DWORD *)result + 5);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)result + 6);
    *(_DWORD *)(a3 + 28) = *((_DWORD *)result + 7);
    *(_QWORD *)(a3 + 32) = *((_QWORD *)result + 4);
    *(_DWORD *)(a3 + 40) = *((_DWORD *)result + 10);
    *(_QWORD *)(a3 + 44) = *(_QWORD *)((char *)result + 44);
    *(_QWORD *)(a3 + 56) = *((_QWORD *)result + 7);
    result += 4;
    a3 += 64;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileSetPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x80u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileSetPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileSetPrivateBrand(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 4u;
}

void JSC::MacroAssemblerARM64::test32(uint64_t a1, uint64_t a2, JSC::ARM64LogicalImmediate *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char v9;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  v8 = this;
  v9 = a2;
  if ((_DWORD)this == -1)
  {
    v12 = (unsigned __int16)(32 * (a2 & 0x1F)) | ((a2 & 0x1F) << 16);
    v13 = 1778384927;
    goto LABEL_5;
  }
  v11 = JSC::ARM64LogicalImmediate::create32(this);
  if (v11 != -1)
  {
    v12 = (32 * (v9 & 0x1F)) | (v11 << 10);
    v13 = 1912602655;
LABEL_5:
    v14 = v12 | v13;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v8, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v14 = (32 * (v9 & 0x1F)) | 0x6A10001F;
LABEL_8:
  v17 = *(_DWORD *)(a1 + 200);
  v16 = (unsigned int *)(a1 + 200);
  v15 = v17;
  if (v17 + 4 > *(v16 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 - 36), a2, (uint64_t)this, a4, a5, a6, a7, a8);
    v15 = *v16;
  }
  *(_DWORD *)(*((_QWORD *)v16 - 18) + v15) = v14;
  *v16 += 4;
}

void JSC::MacroAssemblerARM64::or32(uint64_t a1, JSC::ARM64LogicalImmediate *this, char a3, int a4)
{
  unsigned int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v6 = this;
  v8 = JSC::ARM64LogicalImmediate::create32(this);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v6, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = 705691648;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0x32000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

uint64_t JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 17) = JSC::DFG::SpeculativeJIT::betterUseStrictInt52(a2, a3);
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v13 = ~*(_DWORD *)((*(_QWORD *)(a1 + 8) & 0xFF00FFFFFFFFFFFFLL) + 0x30), v13 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197C31378);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v13 + 12))
    JSC::DFG::SpeculateWhicheverInt52Operand::gpr((JSC::DFG::SpeculateWhicheverInt52Operand *)a1, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

BOOL JSC::DFG::SpeculativeJIT::betterUseStrictInt52(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v2 >= *(unsigned int *)(result + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(result + 3992);
    return *(_BYTE *)(v3 + 24 * (int)v2 + 12) != 2 && *(unsigned __int8 *)(v3 + 24 * (int)v2 + 13) != 2;
  }
  return result;
}

uint64_t JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a4 + 17);
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v8 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197C31478);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    JSC::DFG::SpeculateWhicheverInt52Operand::gpr((JSC::DFG::SpeculateWhicheverInt52Operand *)a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::MacroAssemblerARM64::branchAdd64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v9;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;

  v9 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31 || (_DWORD)a5 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v12 | a5 & 0x1F | (32 * a3) | 0xAB206000, a3, a4, a5 & 0x1F | (32 * a3), a6, a7, a8);
  }
  else
  {
    v13 = a5 & 0x1F | (32 * (a3 & 0x1F)) | v12 | 0xAB000000;
    v14 = *(_DWORD *)(a1 + 200);
    if (v14 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v13;
    *(_DWORD *)(a1 + 200) += 4;
  }
  if (*(_BYTE *)(a1 + 328))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v9 | 0x54000000;
  v16 = *(_DWORD *)(a1 + 200);
  v17 = v16 + 4;
  *(_DWORD *)(a1 + 200) = v16 + 4;
  v18 = v16 + 8;
  v19 = v16 + 4;
  if (v18 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v20 = -122;
  else
    v20 = -126;
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v20;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::MacroAssemblerARM64::branchSub64(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v12 = -352321536;
  v13 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31 || a5 == 31)
  {
    v15 = a5 & 0x1F | (32 * a3);
    v12 = -350199808;
  }
  else
  {
    v14 = a5 & 0x1F | (32 * (a3 & 0x1F));
    v15 = (a4 & 0x1F) << 16;
    v13 = v14;
  }
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v13 | v15 | v12, a3, a4, v15, a6, a7, a8);
  if (*(_BYTE *)(a1 + 328))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v16, v17, v18, v19, v20, v21, v22);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a2 | 0x54000000u, v17, v18, v19, v20, v21, v22);
  v23 = *(_DWORD *)(a1 + 200);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v24, v25, v26, v27, v28, v29);
  if (*(_BYTE *)(a1 + 328))
    v30 = -122;
  else
    v30 = -126;
  *(_DWORD *)a9 = v23;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 9) = a2;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::MacroAssembler::mul32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  uint8x8_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v8 = a4;
  v9 = a3;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.i32[0] == 1)
  {
    v12 = __clz(__rbit32(a2));
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    v15 = (unsigned int *)(a1 + 56);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    v16 = ((-65536 * v12) & 0x1F0000 | (32 * (v9 & 0x1F)) & 0x83E0 | ((v12 & 0x1F) << 10) | v8 & 0x1F) ^ 0x53007C00;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C31A78);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a1 + 200);
    v14 = (unsigned int *)(a1 + 200);
    v13 = v24;
    v15 = v14 - 36;
    if (v24 + 4 > *(v14 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 - 36), v17, v18, v19, v20, v21, v22, v23);
      v13 = *v14;
    }
    v16 = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0x1B107C00;
  }
  *(_DWORD *)(*(_QWORD *)v15 + v13) = v16;
  *v14 += 4;
}

JSC::DFG::SpeculateWhicheverInt52Operand *JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculateWhicheverInt52Operand *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_BYTE *)this + 16) = -1;
  *((_BYTE *)this + 17) = a4 ^ 1;
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v8 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197C31B28);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    JSC::DFG::SpeculateWhicheverInt52Operand::gpr(this, a2, a3, a4, a5, a6, a7, a8);
  return this;
}

void JSC::MacroAssemblerARM64::branchMul64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;

  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a2 == 6)
  {
    v13 = v12 | (32 * (a3 & 0x1F));
    v14 = a5 & 0x1F;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v13 | v14 | 0x9B007C00 | 0x400000, a3, a4, a5, a6, a7, a8);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v13 | a6 & 0x1F | 0x9B007C00, v15, v16, v17, v18, v19, v20);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * v14) & 0xFFE0FFFF | ((a6 & 0x1F) << 16) | 0xEB80FC1F, v21, v22, v23, v24, v25, v26);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v27, v28, v29, v30, v31, v32, v33);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286145, v28, v29, v30, v31, v32, v33);
    v34 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v35, v36, v37, v38, v39, v40);
    if (*(_BYTE *)(a1 + 328))
      v41 = -122;
    else
      v41 = -126;
    *(_DWORD *)a9 = v34;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v41;
    *(_WORD *)(a9 + 9) = 1;
    *(_BYTE *)(a9 + 11) = -1;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a6 & 0x1F | (32 * (a3 & 0x1F)) | v12 | 0x9B007C00, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest64(a1, a2, a6, 0xFFFFFFFFLL, v43, v44, v45, v46, a9, v47);
  }
}

void JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v11;
  unsigned int j;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  char v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  int i;
  unsigned int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD v51[2];
  char v52;
  __int16 v53;
  char v54;
  unsigned int v55;
  int v56;
  char v57;
  __int16 v58;
  char v59;

  if ((_DWORD)a2 == 7)
  {
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
    if (v18 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v18 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = 1409286150;
    v19 = *(_DWORD *)(a1 + 200);
    v20 = v19 + 4;
    *(_DWORD *)(a1 + 200) = v19 + 4;
    v21 = v19 + 8;
    v22 = v19 + 4;
    if (v21 > *(_DWORD *)(a1 + 192))
    {
      v49 = v20;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v20 = v49;
      v22 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = -721215457;
    v23 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v23;
    v24 = *(unsigned __int8 *)(a1 + 328);
    if (*(_BYTE *)(a1 + 328))
      v25 = -122;
    else
      v25 = -126;
    v55 = v20;
    v56 = 0;
    v57 = v25;
    v58 = 6;
    v59 = -1;
    if (v24)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(a1 + 200);
    }
    if (v23 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = 1409286145;
    v26 = *(_DWORD *)(a1 + 200);
    v27 = v26 + 4;
    *(_DWORD *)(a1 + 200) = v26 + 4;
    v28 = v26 + 8;
    v29 = v26 + 4;
    if (v28 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v30 = -122;
    else
      v30 = -126;
    *(_DWORD *)a9 = v27;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v30;
    *(_WORD *)(a9 + 9) = 1;
    *(_BYTE *)(a9 + 11) = -1;
    v31 = &v55;
    goto LABEL_32;
  }
  v11 = a2;
  if ((_DWORD)a2 == 6)
  {
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    v32 = *(_DWORD *)(a1 + 200);
    if (v32 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v32 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = 1409286150;
    v33 = *(_DWORD *)(a1 + 200);
    v34 = v33 + 4;
    *(_DWORD *)(a1 + 200) = v33 + 4;
    v35 = v33 + 8;
    v36 = v33 + 4;
    if (v35 > *(_DWORD *)(a1 + 192))
    {
      v50 = v34;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v34 = v50;
      v36 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = -721215457;
    v37 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v37;
    v38 = *(unsigned __int8 *)(a1 + 328);
    if (*(_BYTE *)(a1 + 328))
      v39 = -122;
    else
      v39 = -126;
    v55 = v34;
    v56 = 0;
    v57 = v39;
    v58 = 6;
    v59 = -1;
    if (v38)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      v37 = *(_DWORD *)(a1 + 200);
    }
    if (v37 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v37 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = 1409286145;
    v40 = *(_DWORD *)(a1 + 200);
    v41 = v40 + 4;
    *(_DWORD *)(a1 + 200) = v40 + 4;
    v42 = v40 + 8;
    v43 = v40 + 4;
    if (v42 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v43 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v44 = -122;
    else
      v44 = -126;
    v51[0] = v41;
    v51[1] = 0;
    v52 = v44;
    v53 = 1;
    v54 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v55, a1, a3, a4, a5, a6, a7, a8);
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v45, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v47 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v45, a3, a4, a5, a6, a7, a8);
      v47 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v48 = 69;
    else
      v48 = 65;
    *(_DWORD *)a9 = i;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v48;
    *(_WORD *)(a9 + 9) = 15;
    *(_BYTE *)(a9 + 11) = -1;
    v31 = v51;
LABEL_32:
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v31, a1, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    j = *(_DWORD *)(a1 + 200);
  }
  if (j + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    j = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = v11 | 0x54000000;
  v13 = *(_DWORD *)(a1 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a1 + 200) = v13 + 4;
  v15 = v13 + 8;
  v16 = v13 + 4;
  if (v15 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v17 = -122;
  else
    v17 = -126;
  *(_DWORD *)a9 = v14;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v17;
  *(_BYTE *)(a9 + 9) = v11;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v11;
  char *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  char v78;
  __int16 v79;
  char v80;

  v9 = a3;
  if ((_DWORD)a2 == 7)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(a4, v18, v19, v20, v21, v22, v23, v24);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v25, v26, v27, v28, v29, v30, v31);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v26, v27, v28, v29, v30, v31);
    v33 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v34, v35, v36, v37, v38, v39);
    if (*(_BYTE *)(a1 + 328))
      v46 = -122;
    else
      v46 = -126;
    v76 = v33;
    v77 = 0;
    v78 = v46;
    v79 = 6;
    v80 = -1;
    v47 = (v9 & 0x1F | 0x1A9F17E0u) - 4096;
    goto LABEL_20;
  }
  v11 = a2;
  if ((_DWORD)a2 == 6)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, a3, (uint64_t)a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(a4, v48, v49, v50, v51, v52, v53, v54);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v55, v56, v57, v58, v59, v60, v61);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v56, v57, v58, v59, v60, v61);
    v62 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v63, v64, v65, v66, v67, v68);
    if (*(_BYTE *)(a1 + 328))
      v69 = -122;
    else
      v69 = -126;
    v76 = v62;
    v77 = 0;
    v78 = v69;
    v79 = 6;
    v80 = -1;
    v47 = v9 & 0x1F | 0x1A9F17E0u;
LABEL_20:
    JSC::AssemblerBuffer::putInt(v32, v47, v40, v41, v42, v43, v44, v45);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v76, a1, v70, v71, v72, v73, v74, v75);
    return;
  }
  v12 = *a4;
  v13 = *a4[1];
  v14 = *a4[2];
  v15 = *((_DWORD *)*a4 + 50);
  if (v15 + 4 > *((_DWORD *)*a4 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v15 = *((_DWORD *)v12 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v15) = (32 * v13) | (v14 << 16) | 0x1E602000;
  *((_DWORD *)v12 + 50) += 4;
  v16 = (v9 & 0x1F | ((v11 & 0xF) << 12)) ^ 0x1A9F17E0;
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  int v9;
  int v10;
  unsigned int v11;

  v8 = *a1;
  v9 = *a1[1];
  v10 = *a1[2];
  v11 = *((_DWORD *)*a1 + 50);
  if (v11 + 4 > *((_DWORD *)*a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v11) = (32 * v9) | (v10 << 16) | 0x1E602000;
  *((_DWORD *)v8 + 50) += 4;
}

void JSC::MacroAssemblerARM64::and64(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v7 = a2;
  v8 = JSC::ARM64LogicalImmediate::create64(a2);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v7, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = -1978662912;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0x92000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

void JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator::~CallCreateDirectArgumentsSlowPathGenerator(JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *v9;
  JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)*((_QWORD *)this + 14);
  if ((JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *v9;
  JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)*((_QWORD *)this + 14);
  if ((JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator::generateInternal(JSC::DFG::CallCreateDirectArgumentsSlowPathGenerator *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::ARM64LogicalImmediate *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint8x8_t v69;
  __int32 v70;
  uint8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  unsigned __int8 *v101;
  JSC::DFG::SpeculativeJIT *v102;
  uint64_t v103;
  unsigned int v104;
  JSC::DFG::SpeculativeJIT *v105;
  uint64_t v106;
  _BYTE *v107;
  unsigned __int8 *v108;
  JSC::DFG::SpeculativeJIT *v109;
  unsigned __int8 *v110;
  int64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  JSC::ARM64LogicalImmediate *v117;
  JSC::ARM64LogicalImmediate *v118;
  uint64_t v119;
  int v120;
  void *__dst;
  int v122;
  unsigned int v123;
  __int16 v124;
  unint64_t v125;
  unsigned int *v126;

  v8 = a2;
  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    while (v12 < *((unsigned int *)this + 15))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*((_QWORD *)this + 6) + v11), (uint64_t)v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v13 == v11)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_114;
  }
LABEL_5:
  v14 = *((unsigned int *)this + 31);
  v15 = *((unsigned __int8 *)this + 92);
  v118 = *(JSC::ARM64LogicalImmediate **)(*((_QWORD *)v8 + 44) + 16);
  v119 = *((_QWORD *)this + 14);
  v117 = (JSC::ARM64LogicalImmediate *)*((_QWORD *)this + 12);
  v16 = *((unsigned __int8 *)this + 104);
  v17 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)this + 27);
  v18 = (char *)v8 + 5768;
  *((_BYTE *)v8 + 5768) = 1;
  if ((_DWORD)v14)
  {
    v19 = v14;
    v20 = v119;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v8, v20, a3, a4, a5, a6, a7, a8);
      v20 += 16;
      --v19;
    }
    while (v19);
  }
  __dst = &v124;
  v122 = 1;
  if (v16 != 2)
  {
    v124 = v16 | 0x200;
    v123 = 1;
    v62 = 1;
    while (1)
    {
      v63 = 0;
      v64 = 0;
      v65 = (char *)__dst;
      v66 = v62;
      do
      {
        if ((*((_BYTE *)__dst + v63 + 1) & 0x40) != 0)
          goto LABEL_114;
        v64 |= 1 << *((_BYTE *)__dst + v63 + 1);
        v63 += 2;
      }
      while (2 * v62 != v63);
      v67 = 0;
      do
      {
        v68 = *((_BYTE *)__dst + v67) & 0x7F;
        if (v68 >= 0x40)
          goto LABEL_114;
        v64 &= ~(1 << v68);
        v67 += 2;
      }
      while (2 * v62 != v67);
      v69 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
      v69.i16[0] = vaddlv_u8(v69);
      v70 = v69.i32[0];
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v64));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.i32[0] + v70)
        break;
      v114 = v14;
      v115 = v15;
      v113 = v18;
      v98 = *(_BYTE *)__dst;
      v99 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst, v99, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v123 - 2);
      v100 = v123 - 1;
      v77 = v123 == 1;
      v123 = v100;
      v101 = (unsigned __int8 *)__dst;
      v102 = (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v100);
      if (v77)
      {
        v103 = 0;
        v104 = 0;
        v116 = 0;
        a2 = (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v100);
      }
      else
      {
        v106 = 2 * v100;
        v107 = __dst;
        while (*v107 != v99)
        {
          v107 += 2;
          v106 -= 2;
          if (!v106)
            goto LABEL_102;
        }
        *v107 = v98;
LABEL_102:
        v116 = 0;
        v108 = v101;
        a2 = v102;
        v109 = v102;
        do
        {
          if (*v101 == v101[1])
          {
            v110 = v101;
            if (v109 != (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v123))
            {
              if (v101 == (unsigned __int8 *)a2)
              {
                v110 = (unsigned __int8 *)v109;
              }
              else
              {
                v111 = v108 - (unsigned __int8 *)a2;
                memmove(v109, a2, v108 - (unsigned __int8 *)a2);
                v110 = (unsigned __int8 *)v109 + v111;
              }
            }
            a2 = (JSC::DFG::SpeculativeJIT *)(v101 + 2);
            ++v116;
            v109 = (JSC::DFG::SpeculativeJIT *)v110;
          }
          v101 += 2;
          v108 += 2;
        }
        while (v101 < (unsigned __int8 *)v102);
        v101 = (unsigned __int8 *)__dst;
        v103 = v123;
        v104 = v123;
        v102 = v109;
      }
      v105 = (JSC::DFG::SpeculativeJIT *)&v101[2 * v103];
      if (a2 != v105)
      {
        memmove(v102, a2, v105 - a2);
        v104 = v123;
      }
      v62 = v104 - v116;
      v18 = v113;
      v14 = v114;
      v15 = v115;
LABEL_52:
      v123 = v62;
LABEL_53:
      if (!v62)
      {
        v80 = __dst;
        if (&v124 != __dst && __dst)
        {
          __dst = 0;
          v122 = 0;
          WTF::fastFree((unint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_9;
      }
    }
    v72 = 0;
    if (v62 <= 1uLL)
      v73 = 1;
    else
      v73 = v62;
    v74 = 2 * v73;
    while (1)
    {
      v75 = *((unsigned __int8 *)__dst + v72 + 1);
      if ((v75 & 0x7Fu) >= 0x40)
        goto LABEL_114;
      if (((v64 >> (v75 & 0x7F)) & 1) != 0)
        break;
      v72 += 2;
      if (v74 == v72)
        goto LABEL_53;
    }
    v76 = *((unsigned __int8 *)__dst + v72);
    if (v76 == v75)
    {
LABEL_51:
      memmove(&v65[v72], &v65[v72 + 2], 2 * v66 - v72 - 2);
      v62 = v123 - 1;
      goto LABEL_52;
    }
    v76 = (char)v76;
    if ((char)v76 == 63)
    {
      if ((char)v75 != 31)
      {
        v78 = v75 & 0x1F | 0xD2800000;
        goto LABEL_48;
      }
    }
    else
    {
      v77 = v75 == 31 || v76 == 31;
      if (!v77)
      {
        v78 = v75 & 0xFFE0FFFF | ((v76 & 0x1F) << 16) | 0xAA0003E0;
LABEL_48:
        v79 = *((_DWORD *)v8 + 50);
        if (v79 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v79 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v79) = v78;
        *((_DWORD *)v8 + 50) += 4;
        v65 = (char *)__dst;
        v66 = v123;
        goto LABEL_51;
      }
    }
    v78 = (char)v75 | (32 * v76) | 0x91000000;
    goto LABEL_48;
  }
LABEL_9:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v17, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v117, 1, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v118, 0, v26, v27, v28, v29, v30);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationCreateDirectArguments, v31, v32, v33, v34, v35, v36, &v120);
  __dst = (void *)2;
  v126 = 0;
  v41 = *((_QWORD *)v8 + 495);
  v42 = *(_QWORD *)(*((_QWORD *)v8 + 497) + 8);
  if ((v42 & 1) != 0)
  {
    v94 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v95 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v94;
      *(_DWORD *)(v112 + 8) = v95;
      v97 = 1;
      v94 = v112;
    }
    else
    {
      v97 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v42 = v94 | v97;
  }
  v125 = v42;
  v50 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v41, &v125, (uint64_t *)&__dst, &v126, v37, v38, v39, v40);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((v50 & 1) != 0)
  {
    v81 = 0;
    if ((_DWORD)v14)
    {
      v82 = 16 * v14;
      v83 = (char *)(v119 + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_64;
      }
    }
    else
    {
LABEL_64:
      if ((v15 & 0x40) == 0)
      {
        LOBYTE(v51) = 1;
        v86 = v81 | (1 << v15);
        if ((v86 & 2) != 0)
        {
          v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
          if (v87)
          {
            v51 = __clz(__rbit64(v87));
            if (v51 != 1)
            {
              if (v51 == 31)
              {
                v90 = (unsigned int *)((char *)v8 + 200);
                v89 = *((_DWORD *)v8 + 50);
                v91 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
                v92 = v89 + 4;
                v93 = *((_DWORD *)v8 + 48);
                v88 = -1862270913;
              }
              else
              {
                v88 = v51 | 0xAA0103E0;
                v90 = (unsigned int *)((char *)v8 + 200);
                v89 = *((_DWORD *)v8 + 50);
                v91 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
                v92 = v89 + 4;
                v93 = *((_DWORD *)v8 + 48);
              }
              if (v92 > v93)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v43, v44, v45, v46, v47, v48, v49);
                v89 = *v90;
              }
              *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
              *v90 += 4;
            }
          }
          else
          {
            LOBYTE(v51) = -1;
          }
        }
        goto LABEL_13;
      }
    }
LABEL_114:
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v44, v45, v46, v47, v48, v49);
  LOBYTE(v51) = 0;
LABEL_13:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 31)
    {
      v52 = -1862270945;
    }
    else if ((_DWORD)v15 == 255)
    {
      v52 = -1442774017;
    }
    else
    {
      v52 = v15 | 0xAA0003E0;
    }
    v54 = (unsigned int *)((char *)v8 + 200);
    v53 = *((_DWORD *)v8 + 50);
    if (v53 + 4 > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)v43, v44, v45, v46, v47, v48, v49);
      v53 = *v54;
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + v53) = v52;
    *v54 += 4;
  }
  if ((_DWORD)v14)
  {
    v55 = 16 * v14;
    do
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v8, v119 - 16 + v55, v44, v45, v46, v47, v48, v49);
      v55 -= 16;
    }
    while (v55);
  }
  *v18 = 0;
  if (v50)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, (char)v51, v44, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::load64((uint64_t)v8, *((unsigned __int8 *)this + 92) | 0x2000000000, *((char *)this + 104), v45, v46, v47, v48, v49);
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo((uint64_t)this, (uint64_t)v8, v56, v57, v58, v59, v60, v61);
}

_QWORD *JSC::DFG::JITCompiler::appendCall<(WTF::PtrTag)64323>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v12;
  unsigned int i;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD v26[2];
  uint64_t v27;

  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C32FCCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v14 = *(_BYTE *)(a1 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v14 | 0xD2800000;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14 | 0xF2A00000;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v14 | 0xF2C00000;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  *(_DWORD *)(a1 + 208) = 0;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -700513792;
  v21 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v21; v21 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v21)
  {
    if ((v21 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
    v21 = *(_DWORD *)(a1 + 200) + 4;
  }
  *a9 = v21;
  a9[1] = 1;
  result = (_QWORD *)(a1 + 376);
  v26[0] = v21;
  v26[1] = 1;
  v27 = a2;
  v23 = *(unsigned int *)(a1 + 388);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 384))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::CallLinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v23 + 1, (unint64_t)v26);
    v25 = (_QWORD *)(*(_QWORD *)(a1 + 376) + 16 * *(unsigned int *)(a1 + 388));
    *v25 = *result;
    v25[1] = result[1];
  }
  else
  {
    v24 = *result + 16 * v23;
    *(_DWORD *)v24 = v21;
    *(_DWORD *)(v24 + 4) = 1;
    *(_QWORD *)(v24 + 8) = a2;
  }
  ++*(_DWORD *)(a1 + 388);
  return result;
}

void JSC::MacroAssemblerARM64::moveWithFixedWidth(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v10 = a3 & 0x1F;
  v11 = v10 | (32 * (unsigned __int16)a2) | 0xD2800000;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v11;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v10 | (32 * WORD1(a2)) | 0xF2A00000;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (a2 >> 27) & 0x1FFFE0 | v10 | 0xF2C00000;
  a1[50] += 4;
}

uint64_t WTF::Vector<JSC::DFG::CallLinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::CallLinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (_QWORD *)v5;
      do
      {
        *v11 = *v19;
        v11[1] = v19[1];
        v19 += 2;
        v11 += 2;
      }
      while (v19 != (_QWORD *)(v5 + 16 * v10));
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::CallLinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = (_QWORD *)v7;
      do
      {
        *v9 = *v17;
        v9[1] = v17[1];
        v17 += 2;
        v9 += 2;
      }
      while (v17 != (_QWORD *)(v7 + 16 * v8));
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator::~CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator(JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)*((_QWORD *)this + 17);
  if ((JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)((char *)this + 152) != v9
    && v9 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)((char *)this + 64) != v11
    && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)*((_QWORD *)this + 17);
  if ((JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)((char *)this + 152) != v9
    && v9 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator *)((char *)this + 64) != v11
    && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::DFG::CallArrayAllocatorWithVariableStructureVariableSizeSlowPathGenerator::generateInternal(unsigned int *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  JSC::DFG::SpeculativeJIT *v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  unsigned __int8 *v51;
  JSC::DFG::SpeculativeJIT *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  JSC::DFG::SpeculativeJIT *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  JSC::DFG::SpeculativeJIT *v90;
  JSC::DFG::SpeculativeJIT *v91;
  JSC::ARM64LogicalImmediate *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *__dst;
  uint64_t v97;
  _WORD v98[4];
  unint64_t v99;
  unsigned int *v100;

  v8 = a2;
  v9 = (uint64_t)this;
  v10 = this[15];
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *(unsigned int *)(v9 + 60))
      {
        __break(0xC471u);
        return this;
      }
      this = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v9 + 48) + v11), (uint64_t)v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  v14 = *(unsigned int *)(v9 + 148);
  v93 = *(_QWORD *)(v9 + 96);
  v94 = *(_QWORD *)(v9 + 136);
  v15 = *(unsigned __int8 *)(v9 + 104);
  v16 = *(unsigned int *)(v9 + 112);
  v17 = *(unsigned __int8 *)(v9 + 128);
  v18 = *(unsigned __int8 *)(v9 + 129);
  v19 = *(unsigned __int8 *)(v9 + 130);
  v92 = *(JSC::ARM64LogicalImmediate **)(v9 + 120);
  *((_BYTE *)v8 + 5768) = 1;
  if ((_DWORD)v14)
  {
    v20 = v14;
    v21 = v94;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v8, v21, a3, a4, a5, a6, a7, a8);
      v21 += 16;
      --v20;
    }
    while (v20);
  }
  __dst = v98;
  v97 = 3;
  if (v17 == 1)
  {
    v22 = 0;
  }
  else
  {
    v98[0] = v17 | 0x100;
    v22 = 1;
    HIDWORD(v97) = 1;
  }
  if (v18 != 2)
  {
    v98[v22] = v18 | 0x200;
    v22 = (v22 + 1);
    HIDWORD(v97) = v22;
  }
  if (v19 != 3)
  {
    v98[v22] = v19 | 0x300;
    v22 = (v22 + 1);
    HIDWORD(v97) = v22;
LABEL_14:
    v23 = 1;
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = (char *)__dst;
      v27 = v22;
      do
      {
        if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
          goto LABEL_101;
        v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
        v24 += 2;
      }
      while (2 * v22 != v24);
      v28 = 0;
      do
      {
        v29 = *((_BYTE *)__dst + v28) & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_101;
        v25 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v32.i16[0] = vaddlv_u8(v32);
      if (!(v32.i32[0] + v31))
      {
        v43 = *(_BYTE *)__dst;
        v44 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst, v44, a4, a5, a6, a7, a8);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v97) - 2);
        v45 = (HIDWORD(v97) - 1);
        v41 = HIDWORD(v97) == 1;
        HIDWORD(v97) = v45;
        v46 = (unsigned __int8 *)__dst;
        v47 = (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * v45);
        if (v41)
        {
          v54 = 0;
          v55 = 0;
          v50 = 0;
          a2 = v47;
        }
        else
        {
          v48 = 2 * v45;
          v49 = __dst;
          while (*v49 != v44)
          {
            v49 += 2;
            v48 -= 2;
            if (!v48)
              goto LABEL_48;
          }
          *v49 = v43;
LABEL_48:
          v50 = 0;
          v51 = v46;
          a2 = v47;
          v52 = v47;
          do
          {
            if (*v46 == v46[1])
            {
              v53 = v46;
              if (v52 != (JSC::DFG::SpeculativeJIT *)((char *)__dst + 2 * HIDWORD(v97)))
              {
                v91 = v47;
                if (v46 == (unsigned __int8 *)a2)
                {
                  v53 = (unsigned __int8 *)v52;
                }
                else
                {
                  v89 = v51 - (unsigned __int8 *)a2;
                  v90 = v52;
                  memmove(v52, a2, v51 - (unsigned __int8 *)a2);
                  v53 = (unsigned __int8 *)v90 + v89;
                }
                v47 = v91;
              }
              a2 = (JSC::DFG::SpeculativeJIT *)(v46 + 2);
              ++v50;
              v52 = (JSC::DFG::SpeculativeJIT *)v53;
            }
            v46 += 2;
            v51 += 2;
          }
          while (v46 < (unsigned __int8 *)v47);
          v46 = (unsigned __int8 *)__dst;
          v54 = HIDWORD(v97);
          v55 = HIDWORD(v97);
          v47 = v52;
        }
        v56 = (JSC::DFG::SpeculativeJIT *)&v46[2 * v54];
        if (a2 != v56)
        {
          memmove(v47, a2, v56 - a2);
          v55 = HIDWORD(v97);
        }
        v22 = (v55 - v50);
        goto LABEL_41;
      }
      v33 = 0;
      v34 = v22 <= 1uLL ? 1 : v22;
      v35 = 2 * v34;
      while (1)
      {
        v36 = *((unsigned __int8 *)__dst + v33 + 1);
        if ((v36 & 0x7Fu) >= 0x40)
          goto LABEL_101;
        if (((v25 >> (v36 & 0x7F)) & 1) != 0)
          break;
        v33 += 2;
        if (v35 == v33)
          goto LABEL_42;
      }
      v37 = *((unsigned __int8 *)__dst + v33);
      if (v37 != v36)
        break;
LABEL_40:
      memmove(&v26[v33], &v26[v33 + 2], 2 * v27 - v33 - 2);
      v22 = (HIDWORD(v97) - 1);
LABEL_41:
      HIDWORD(v97) = v22;
LABEL_42:
      if (!(_DWORD)v22)
      {
        v57 = __dst;
        if (v98 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v97) = 0;
          WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_63;
      }
    }
    v38 = (char)v37;
    if ((char)v37 == 63)
    {
      v39 = *((_DWORD *)v8 + 50);
      v40 = *((_DWORD *)v8 + 48);
      if ((char)v36 != 31)
      {
        v42 = v36 & 0x1F | 0xD2800000;
        goto LABEL_37;
      }
    }
    else
    {
      v39 = *((_DWORD *)v8 + 50);
      v40 = *((_DWORD *)v8 + 48);
      v41 = v36 == 31 || v38 == 31;
      if (!v41)
      {
        v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
LABEL_37:
        if (v39 + 4 > v40)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v39 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v39) = v42;
        *((_DWORD *)v8 + 50) += 4;
        v26 = (char *)__dst;
        v27 = HIDWORD(v97);
        goto LABEL_40;
      }
    }
    v42 = (char)v36 | (32 * v38) | 0x91000000;
    goto LABEL_37;
  }
  if ((_DWORD)v22)
    goto LABEL_14;
LABEL_63:
  if (v16 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v92, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v8, (v16 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, v93, v58, v59, v60, v61, v62, v63, &v95);
  __dst = (void *)2;
  v100 = 0;
  v23 = *((_QWORD *)v8 + 495);
  v22 = *(_QWORD *)(*((_QWORD *)v8 + 497) + 8);
  if ((v22 & 1) != 0)
    goto LABEL_102;
  while (1)
  {
    v99 = v22;
    v23 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v23, &v99, (uint64_t *)&__dst, &v100, a5, a6, a7, a8);
    if ((v99 & 1) != 0 && (v99 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v99 & 0xFFFFFFFF8, v64, v65, v66, a5, a6, a7, a8);
    if ((v23 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v65, v66, a5, a6, a7, a8);
      LOBYTE(v67) = 0;
      goto LABEL_69;
    }
    v22 = 0;
    if ((_DWORD)v14)
    {
      v72 = 16 * v14;
      v73 = (char *)(v94 + 2);
      do
      {
        v75 = *v73;
        v73 += 16;
        v74 = v75;
        if ((v75 & 0x40) != 0)
          goto LABEL_101;
        v22 |= 1 << v74;
        v72 -= 16;
      }
      while (v72);
    }
    if ((v15 & 0x40) == 0)
      break;
LABEL_101:
    __break(1u);
LABEL_102:
    v84 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v85 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v84;
      *(_DWORD *)(v88 + 8) = v85;
      v87 = 1;
      v84 = v88;
    }
    else
    {
      v87 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v22 = v84 | v87;
  }
  LOBYTE(v67) = 1;
  v76 = v22 | (1 << v15);
  if ((v76 & 2) != 0)
  {
    v77 = (unsigned __int16)~(_WORD)v76 & 0xFFFE;
    if (v77)
    {
      v67 = __clz(__rbit64(v77));
      if (v67 != 1)
      {
        if (v67 == 31)
        {
          v80 = (unsigned int *)((char *)v8 + 200);
          v79 = *((_DWORD *)v8 + 50);
          v81 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
          v82 = v79 + 4;
          v83 = *((_DWORD *)v8 + 48);
          v78 = -1862270913;
        }
        else
        {
          v78 = v67 | 0xAA0103E0;
          v80 = (unsigned int *)((char *)v8 + 200);
          v79 = *((_DWORD *)v8 + 50);
          v81 = (JSC::DFG::SpeculativeJIT *)((char *)v8 + 56);
          v82 = v79 + 4;
          v83 = *((_DWORD *)v8 + 48);
        }
        if (v82 > v83)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)v64, v65, v66, a5, a6, a7, a8);
          v79 = *v80;
        }
        *(_DWORD *)(*(_QWORD *)v81 + v79) = v78;
        *v80 += 4;
      }
    }
    else
    {
      LOBYTE(v67) = -1;
    }
  }
LABEL_69:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v64, v65, v66, a5, a6, a7, a8);
  if (v15)
  {
    if (v15 == 31)
    {
      v68 = -1862270945;
    }
    else if (v15 == 255)
    {
      v68 = -1442774017;
    }
    else
    {
      v68 = v15 | 0xAA0003E0;
    }
    v70 = (unsigned int *)((char *)v8 + 200);
    v69 = *((_DWORD *)v8 + 50);
    if (v69 + 4 > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v8 + 56), (uint64_t)v64, v65, v66, a5, a6, a7, a8);
      v69 = *v70;
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + v69) = v68;
    *v70 += 4;
  }
  if ((_DWORD)v14)
  {
    v71 = 16 * v14;
    do
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v8, v94 - 16 + v71, v65, v66, a5, a6, a7, a8);
      v71 -= 16;
    }
    while (v71);
  }
  *((_BYTE *)v8 + 5768) = 0;
  if ((_DWORD)v23)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, (char)v67, v65, v66, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(v9, (uint64_t)v8, v65, v66, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::getEffectiveAddress(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  _QWORD *v18;

  v9 = a3;
  v11 = ((_DWORD)a2 << 8) & 0x1F0000;
  v12 = a2 >> 22;
  if ((_DWORD)a4 == 31 || a2 == 31)
  {
    v13 = a4 | (32 * (char)a2) | v12 & 0x1C00;
    v11 |= 0x8B000000;
    v14 = 2121728;
  }
  else
  {
    v13 = v12 & 0xFC00 | (32 * (a2 & 0x1F)) | a4 & 0x1F;
    v14 = -1962934272;
  }
  v15 = v13 | v11 | v14;
  v17 = a1 + 50;
  v16 = a1[50];
  v18 = a1 + 14;
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*v18 + v16) = v15;
  *v17 += 4;
  if (v9)
    JSC::MacroAssemblerARM64::add64((uint64_t)a1, v9, a4, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!HIDWORD(v5))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v11;
      v20 = v5;
      do
      {
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v20 = 0;
        *(_BYTE *)(v20 + 8) = -1;
        v20 += 16;
        v19 += 16;
      }
      while (v20 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7;
        do
        {
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
          *(_QWORD *)v18 = 0;
          *(_BYTE *)(v18 + 8) = -1;
          v18 += 16;
          v17 += 16;
        }
        while (v18 != v7 + 16 * v8);
      }
      if (v7)
      {
        if (v9 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::ARM64Registers::FPRegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::FPRegisterID>(uint64_t a1, unint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;

  v3 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::FPRTemporary>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;

  result = WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  *(_QWORD *)v6 = *(_QWORD *)result;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(result + 8);
  *(_QWORD *)result = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = (_QWORD *)(v5 + v19);
          *(_QWORD *)v20 = *(_QWORD *)(v5 + v19);
          *(_BYTE *)(v20 + 8) = *(_BYTE *)(v5 + v19 + 8);
          *v21 = 0;
          v19 += 16;
        }
        while (v21 + 2 != v6);
        if (v5)
        {
          if (v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x197C3424CLL);
    }
  }
  v22 = *(unsigned int *)(a1 + 8);
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a2)
    v25 = a2;
  else
    v25 = v24;
  if (v25 > v22)
  {
    if (v25 >> 28)
      goto LABEL_35;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = WTF::fastMalloc((WTF *)(16 * v25));
    *(_DWORD *)(a1 + 8) = v25;
    *(_QWORD *)a1 = v27;
    if ((_DWORD)v26)
    {
      v35 = v27;
      v36 = v5;
      do
      {
        *(_QWORD *)v35 = *(_QWORD *)v36;
        *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
        *(_QWORD *)v36 = 0;
        v36 += 16;
        v35 += 16;
      }
      while (v36 != v5 + 16 * v26);
    }
    if (v5)
    {
      if (v27 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  return v3;
}

void JSC::MacroAssemblerARM64::store8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0xFFF)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v11 = v9 & 0x1F | (32 * v8) | 0x38316800;
    }
    else
    {
      v11 = ((WORD2(a3) & 0xFFF) << 10) | a2 & 0x1F | (32 * (char)a3) | 0x39000000;
    }
  }
  else
  {
    v11 = ((WORD2(a3) & 0x1FF) << 12) | a2 & 0x1F | (32 * (char)a3) | 0x38000000;
  }
  v14 = *(_DWORD *)(a1 + 200);
  v13 = (unsigned int *)(a1 + 200);
  v12 = v14;
  if (v14 + 4 > *(v13 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
  *v13 += 4;
}

uint64_t WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(_DWORD *)(result + 12);
  if (v13 < 9)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 8;
    goto LABEL_11;
  }
  if (v13 < 0xAAAAAAB)
  {
    v15 = 24 * v13;
    v16 = WTF::fastMalloc((WTF *)(24 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v9 = v16;
LABEL_11:
    if (v14)
    {
      v17 = v10;
      do
      {
        *(_DWORD *)v16 = *(_DWORD *)v17;
        *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
        v17 += 24;
        v16 += 24;
      }
      while (v17 != v10 + 24 * v14);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 <= v8)
    return 1;
  v11 = result;
  v12 = *(_QWORD *)result;
  v13 = *(_DWORD *)(result + 12);
  if (v10 < 9)
  {
    v15 = result + 16;
    *(_QWORD *)v11 = v11 + 16;
    *(_DWORD *)(v11 + 8) = 8;
    goto LABEL_10;
  }
  if (v10 < 0xAAAAAAB)
  {
    v14 = 24 * v10;
    v15 = WTF::fastMalloc((WTF *)(24 * v10));
    *(_DWORD *)(v11 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v11 = v15;
LABEL_10:
    if (v13)
    {
      v16 = v12;
      do
      {
        *(_DWORD *)v15 = *(_DWORD *)v16;
        *(_QWORD *)(v15 + 4) = *(_QWORD *)(v16 + 4);
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
        v16 += 24;
        v15 += 24;
      }
      while (v16 != v12 + 24 * v13);
    }
    if (v11 + 16 != v12 && v12)
    {
      if (*(_QWORD *)v11 == v12)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,false>(uint64_t *a1, unint64_t *a2, WTF::StringImpl *a3, char a4)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  char v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t *v60;
  JSC::DFG *v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  WTF::StringImpl *v82;
  uint64_t *v83;
  char v84;
  unint64_t v85;
  BOOL v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

LABEL_1:
  v7 = (unint64_t *)a1;
  while (2)
  {
    v8 = 1 - (_QWORD)a3;
LABEL_3:
    a1 = (uint64_t *)v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = ((char *)a2 - (char *)v7) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v61 = (JSC::DFG *)*(a2 - 2);
        v60 = a2 - 2;
        if (JSC::DFG::stringLessThan(v61, (WTF::StringImpl *)*v7, a3))
        {
          v87 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v60;
          *(_OWORD *)v60 = v87;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, (uint64_t *)a2 - 2);
        return;
      case 4uLL:
        v12 = v7 + 2;
        v13 = v7 + 4;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, (uint64_t *)v7 + 4);
        v16 = *(a2 - 2);
        v15 = a2 - 2;
        v14 = v16;
        v17 = a1[4];
        v18 = *(_DWORD *)(v16 + 4);
        v19 = *(_DWORD *)(v17 + 4);
        if (v19 >= v18)
          v20 = v18;
        else
          v20 = v19;
        if (!(_DWORD)v20)
          goto LABEL_13;
        v21 = *(_DWORD *)(v14 + 16);
        v22 = *(_QWORD *)(v14 + 8);
        v23 = *(_DWORD *)(v17 + 16);
        v24 = *(_QWORD *)(v17 + 8);
        if ((v21 & 4) != 0)
        {
          if ((v23 & 4) == 0)
          {
            i = 0;
            while (*(_WORD *)(v24 + 2 * i) == *(unsigned __int8 *)(v22 + i))
            {
              if (v20 == ++i)
                goto LABEL_13;
            }
LABEL_151:
            v26 = 1;
LABEL_23:
            if ((v21 & 4) != 0)
              v27 = *(unsigned __int8 *)(v22 + i);
            else
              v27 = *(unsigned __int16 *)(v22 + 2 * i);
            if ((v26 & 1) != 0)
              v28 = *(unsigned __int16 *)(v24 + 2 * i);
            else
              v28 = *(unsigned __int8 *)(v24 + i);
            if (v27 >= v28)
              return;
LABEL_28:
            v29 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v29;
            v30 = *v13;
            v31 = *v12;
            v32 = *(_DWORD *)(*v13 + 4);
            v33 = *(_DWORD *)(*v12 + 4);
            if (v33 >= v32)
              v34 = v32;
            else
              v34 = v33;
            if (!(_DWORD)v34)
            {
LABEL_37:
              if (v32 >= v33)
                return;
              goto LABEL_101;
            }
            v35 = *(_DWORD *)(v30 + 16);
            v36 = *(_QWORD *)(v30 + 8);
            v37 = *(_DWORD *)(v31 + 16);
            v38 = *(_QWORD *)(v31 + 8);
            if ((v35 & 4) != 0)
            {
              if ((v37 & 4) != 0)
              {
                v39 = 0;
                while (*(unsigned __int8 *)(v36 + v39) == *(unsigned __int8 *)(v38 + v39))
                {
                  if (v34 == ++v39)
                    goto LABEL_37;
                }
LABEL_95:
                v62 = 0;
                goto LABEL_96;
              }
              v39 = 0;
              while (*(_WORD *)(v38 + 2 * v39) == *(unsigned __int8 *)(v36 + v39))
              {
                if (v34 == ++v39)
                  goto LABEL_37;
              }
            }
            else
            {
              if ((v37 & 4) != 0)
              {
                v39 = 0;
                while (*(_WORD *)(v36 + 2 * v39) == *(unsigned __int8 *)(v38 + v39))
                {
                  if (v34 == ++v39)
                    goto LABEL_37;
                }
                goto LABEL_95;
              }
              v39 = 0;
              while (*(unsigned __int16 *)(v36 + 2 * v39) == *(unsigned __int16 *)(v38 + 2 * v39))
              {
                if (v34 == ++v39)
                  goto LABEL_37;
              }
            }
            v62 = 1;
LABEL_96:
            if ((v35 & 4) != 0)
              v63 = *(unsigned __int8 *)(v36 + v39);
            else
              v63 = *(unsigned __int16 *)(v36 + 2 * v39);
            if ((v62 & 1) != 0)
              v64 = *(unsigned __int16 *)(v38 + 2 * v39);
            else
              v64 = *(unsigned __int8 *)(v38 + v39);
            if (v63 >= v64)
              return;
LABEL_101:
            v65 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v65;
            v66 = a1[2];
            v67 = *a1;
            v68 = *(_DWORD *)(v66 + 4);
            v69 = *(_DWORD *)(*a1 + 4);
            if (v69 >= v68)
              v70 = v68;
            else
              v70 = v69;
            if (!(_DWORD)v70)
            {
LABEL_110:
              if (v68 >= v69)
                return;
              goto LABEL_129;
            }
            v71 = *(_DWORD *)(v66 + 16);
            v72 = *(_QWORD *)(v66 + 8);
            v73 = *(_DWORD *)(v67 + 16);
            v74 = *(_QWORD *)(v67 + 8);
            if ((v71 & 4) != 0)
            {
              if ((v73 & 4) != 0)
              {
                v75 = 0;
                while (*(unsigned __int8 *)(v72 + v75) == *(unsigned __int8 *)(v74 + v75))
                {
                  if (v70 == ++v75)
                    goto LABEL_110;
                }
LABEL_123:
                v76 = 0;
                goto LABEL_124;
              }
              v75 = 0;
              while (*(_WORD *)(v74 + 2 * v75) == *(unsigned __int8 *)(v72 + v75))
              {
                if (v70 == ++v75)
                  goto LABEL_110;
              }
            }
            else
            {
              if ((v73 & 4) != 0)
              {
                v75 = 0;
                while (*(_WORD *)(v72 + 2 * v75) == *(unsigned __int8 *)(v74 + v75))
                {
                  if (v70 == ++v75)
                    goto LABEL_110;
                }
                goto LABEL_123;
              }
              v75 = 0;
              while (*(unsigned __int16 *)(v72 + 2 * v75) == *(unsigned __int16 *)(v74 + 2 * v75))
              {
                if (v70 == ++v75)
                  goto LABEL_110;
              }
            }
            v76 = 1;
LABEL_124:
            if ((v71 & 4) != 0)
              v77 = *(unsigned __int8 *)(v72 + v75);
            else
              v77 = *(unsigned __int16 *)(v72 + 2 * v75);
            if ((v76 & 1) != 0)
              v78 = *(unsigned __int16 *)(v74 + 2 * v75);
            else
              v78 = *(unsigned __int8 *)(v74 + v75);
            if (v77 >= v78)
              return;
LABEL_129:
            v88 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v88;
            return;
          }
          i = 0;
          while (*(unsigned __int8 *)(v22 + i) == *(unsigned __int8 *)(v24 + i))
          {
            if (v20 == ++i)
              goto LABEL_13;
          }
        }
        else
        {
          if ((v23 & 4) == 0)
          {
            for (i = 0; i != v20; ++i)
            {
              if (*(unsigned __int16 *)(v22 + 2 * i) != *(unsigned __int16 *)(v24 + 2 * i))
                goto LABEL_151;
            }
LABEL_13:
            if (v18 >= v19)
              return;
            goto LABEL_28;
          }
          i = 0;
          while (*(_WORD *)(v22 + 2 * i) == *(unsigned __int8 *)(v24 + i))
          {
            if (v20 == ++i)
              goto LABEL_13;
          }
        }
        v26 = 0;
        goto LABEL_23;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, (uint64_t *)v7 + 4, (uint64_t *)v7 + 6, (uint64_t *)a2 - 2);
        return;
      default:
        if (v10 > 383)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t)v7, a2, a2);
            return;
          }
          v79 = (uint64_t *)(a2 - 2);
          v80 = v11 >> 1;
          v81 = (uint64_t *)&v7[2 * v80];
          if ((unint64_t)v10 >= 0x801)
          {
            v85 = v80;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)&v7[2 * v80], v79);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1 + 2, v81 - 2, (uint64_t *)a2 - 4);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1 + 4, &a1[2 * v85 + 2], (uint64_t *)a2 - 6);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(v81 - 2, v81, &a1[2 * v85 + 2]);
            v89 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v81;
            *(_OWORD *)v81 = v89;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)&v7[2 * v80], (uint64_t *)v7, v79);
          }
          if ((a4 & 1) == 0 && !JSC::DFG::stringLessThan((JSC::DFG *)*(a1 - 2), (WTF::StringImpl *)*a1, v82))
          {
            v7 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>(a1, (unint64_t)a2);
            goto LABEL_143;
          }
          v83 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>(a1, a2);
          if ((v84 & 1) == 0)
            goto LABEL_142;
          v86 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, v83);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(v83 + 2, (uint64_t *)a2))
          {
            v8 = v9 + 1;
            v7 = (unint64_t *)(v83 + 2);
            if (!v86)
            {
LABEL_142:
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,false>(a1, v83, -v9, a4 & 1);
              v7 = (unint64_t *)(v83 + 2);
LABEL_143:
              a4 = 0;
              a3 = (WTF::StringImpl *)-v9;
              continue;
            }
            goto LABEL_3;
          }
          a3 = (WTF::StringImpl *)-v9;
          a2 = (unint64_t *)v83;
          if (v86)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(v7, a2);
          return;
        }
        if (v7 != a2)
        {
          v40 = v7 + 2;
          if (v7 + 2 != a2)
          {
            v41 = v7;
            while (2)
            {
              v42 = v40;
              v43 = v41[2];
              if (!JSC::DFG::stringLessThan((JSC::DFG *)v43, (WTF::StringImpl *)*v41, a3))
                goto LABEL_86;
              v44 = v41[3];
              *(_OWORD *)v42 = *(_OWORD *)v41;
              v45 = a1;
              if (v41 == (unint64_t *)a1)
                goto LABEL_85;
              v46 = (uint64_t *)v41;
              while (1)
              {
                v48 = *(v46 - 2);
                v46 -= 2;
                v47 = v48;
                v49 = *(_DWORD *)(v43 + 4);
                v50 = *(_DWORD *)(v48 + 4);
                v51 = v50 >= v49 ? v49 : v50;
                if ((_DWORD)v51)
                  break;
LABEL_62:
                if (v49 >= v50)
                  goto LABEL_84;
LABEL_75:
                *(_OWORD *)v41 = *(_OWORD *)v46;
                v41 = (unint64_t *)v46;
                if (v46 == a1)
                {
                  v45 = a1;
                  goto LABEL_85;
                }
              }
              v52 = *(_DWORD *)(v43 + 16);
              v53 = *(_QWORD *)(v43 + 8);
              v54 = *(_DWORD *)(v47 + 16);
              v55 = *(_QWORD *)(v47 + 8);
              if ((v52 & 4) != 0)
              {
                if ((v54 & 4) != 0)
                {
                  v56 = 0;
                  while (*(unsigned __int8 *)(v53 + v56) == *(unsigned __int8 *)(v55 + v56))
                  {
                    if (v51 == ++v56)
                      goto LABEL_62;
                  }
                  goto LABEL_69;
                }
                v56 = 0;
                while (*(_WORD *)(v55 + 2 * v56) == *(unsigned __int8 *)(v53 + v56))
                {
                  if (v51 == ++v56)
                    goto LABEL_62;
                }
LABEL_83:
                v57 = 1;
              }
              else
              {
                if ((v54 & 4) == 0)
                {
                  v56 = 0;
                  while (*(unsigned __int16 *)(v53 + 2 * v56) == *(unsigned __int16 *)(v55 + 2 * v56))
                  {
                    if (v51 == ++v56)
                      goto LABEL_62;
                  }
                  goto LABEL_83;
                }
                v56 = 0;
                while (*(_WORD *)(v53 + 2 * v56) == *(unsigned __int8 *)(v55 + v56))
                {
                  if (v51 == ++v56)
                    goto LABEL_62;
                }
LABEL_69:
                v57 = 0;
              }
              if ((v52 & 4) != 0)
                v58 = *(unsigned __int8 *)(v53 + v56);
              else
                v58 = *(unsigned __int16 *)(v53 + 2 * v56);
              if ((v57 & 1) != 0)
                v59 = *(unsigned __int16 *)(v55 + 2 * v56);
              else
                v59 = *(unsigned __int8 *)(v55 + v56);
              if (v58 < v59)
                goto LABEL_75;
LABEL_84:
              v45 = (uint64_t *)v41;
LABEL_85:
              *v45 = v43;
              v45[1] = v44;
LABEL_86:
              v40 = v42 + 2;
              v41 = v42;
              if (v42 + 2 == a2)
                return;
              continue;
            }
          }
        }
        return;
    }
  }
}

  v7 = a1;
LABEL_2:
  v8 = 1 - (_QWORD)a3;
  while (2)
  {
    a1 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = ((char *)a2 - (char *)v7) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = (JSC::DFG *)*(a2 - 2);
        v21 = a2 - 2;
        if (JSC::DFG::stringLessThan(v22, (WTF::StringImpl *)*v7, a3))
        {
          v31 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v21;
          *(_OWORD *)v21 = v31;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, a2 - 2);
        return;
      case 4uLL:
        v12 = (WTF::StringImpl **)(v7 + 2);
        v13 = (JSC::DFG **)(v7 + 4);
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, (uint64_t *)v7 + 4);
        v15 = (JSC::DFG *)*(a2 - 2);
        v14 = a2 - 2;
        if (JSC::DFG::stringLessThan(v15, (WTF::StringImpl *)v7[4], v16))
        {
          v18 = *(_OWORD *)v13;
          *(_OWORD *)v13 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v18;
          if (JSC::DFG::stringLessThan(*v13, *v12, v17))
          {
            v20 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v20;
            if (JSC::DFG::stringLessThan((JSC::DFG *)v7[2], (WTF::StringImpl *)*v7, v19))
            {
              v30 = *(_OWORD *)v7;
              *(_OWORD *)v7 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v30;
            }
          }
        }
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)v7 + 2, (uint64_t *)v7 + 4, (uint64_t *)v7 + 6, a2 - 2);
        return;
      default:
        if (v10 > 383)
        {
          if (v9 == 1)
          {
            std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t)v7, a2, a2);
            return;
          }
          v23 = a2 - 2;
          v24 = v11 >> 1;
          v25 = (uint64_t *)&v7[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)&v7[2 * (v11 >> 1)], (uint64_t *)v7, v23);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7, (uint64_t *)&v7[2 * (v11 >> 1)], v23);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7 + 2, v25 - 2, a2 - 4);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t *)v7 + 4, (uint64_t *)&v7[2 * v24 + 2], a2 - 6);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(v25 - 2, v25, (uint64_t *)&v7[2 * v24 + 2]);
            v32 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v25;
            *(_OWORD *)v25 = v32;
          }
          if ((a4 & 1) == 0 && !JSC::DFG::stringLessThan((JSC::DFG *)*(v7 - 2), (WTF::StringImpl *)*v7, v26))
          {
            v7 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>((uint64_t *)v7, (unint64_t)a2);
            goto LABEL_27;
          }
          v27 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>(v7, a2);
          if ((v28 & 1) == 0)
            goto LABEL_26;
          v7 = (unint64_t *)(v27 + 2);
          {
            v8 = v9 + 1;
            if (v29)
              continue;
LABEL_26:
            v7 = (unint64_t *)(v27 + 2);
LABEL_27:
            a4 = 0;
            a3 = (WTF::StringImpl *)-v9;
            goto LABEL_2;
          }
          a3 = (WTF::StringImpl *)-v9;
          a2 = v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        else
          std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(v7, a2);
        return;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = (unint64_t)a1;
  while (2)
  {
    a1 = (__n128 *)v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (a2[-1].n128_u64[0] > *(_QWORD *)(v12 + 8))
        {
          v219 = *(_QWORD *)(v12 + 16);
          v194 = *(__n128 *)v12;
          v98 = *(__int128 *)((char *)&a2[-2] + 8);
          *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
          *(_OWORD *)v12 = v98;
          a2[-1].n128_u64[1] = v219;
          *(__n128 *)((char *)a2 - 24) = v194;
        }
        return;
      case 3:
        v65 = (__n128 *)(v12 + 24);
        v99 = *(_QWORD *)(v12 + 32);
        v100 = a2[-1].n128_u64[0];
        if (v99 > *(_QWORD *)(v12 + 8))
        {
          if (v100 <= v99)
            goto LABEL_183;
          v220 = *(_QWORD *)(v12 + 16);
          v195 = *(__n128 *)v12;
          v101 = *v9;
          *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
          *(__n128 *)v12 = v101;
          v102 = v195;
          a2[-1].n128_u64[1] = v220;
          goto LABEL_185;
        }
        if (v100 > v99)
        {
          v159 = *v65;
          v160 = *(_QWORD *)(v12 + 40);
          v161 = a2[-1].n128_u64[1];
          *v65 = *v9;
          *(_QWORD *)(v12 + 40) = v161;
          a2[-1].n128_u64[1] = v160;
          *v9 = v159;
          if (*(_QWORD *)(v12 + 32) > *(_QWORD *)(v12 + 8))
          {
            v223 = *(_QWORD *)(v12 + 16);
            v198 = *(__n128 *)v12;
            *(__n128 *)v12 = *v65;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            *v65 = v198;
            *(_QWORD *)(v12 + 40) = v223;
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5);
        return;
      case 5:
        v103 = (__n128 *)(v12 + 24);
        v104 = (__n128 *)(v12 + 48);
        v105 = (__n128 *)(v12 + 72);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), a5);
        if (a2[-1].n128_u64[0] > *(_QWORD *)(v12 + 80))
        {
          v106 = *v105;
          v107 = *(_QWORD *)(v12 + 88);
          v108 = a2[-1].n128_u64[1];
          *v105 = *(__n128 *)((char *)a2 - 24);
          *(_QWORD *)(v12 + 88) = v108;
          a2[-1].n128_u64[1] = v107;
          *(__n128 *)((char *)a2 - 24) = v106;
          if (*(_QWORD *)(v12 + 80) > *(_QWORD *)(v12 + 56))
          {
            v109 = *(_QWORD *)(v12 + 64);
            v110 = *v104;
            *v104 = *v105;
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 88);
            *v105 = v110;
            *(_QWORD *)(v12 + 88) = v109;
            if (*(_QWORD *)(v12 + 56) > *(_QWORD *)(v12 + 32))
            {
              v111 = *(_QWORD *)(v12 + 40);
              v112 = *v103;
              *v103 = *v104;
              *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
              *v104 = v112;
              *(_QWORD *)(v12 + 64) = v111;
              if (*(_QWORD *)(v12 + 32) > *(_QWORD *)(v12 + 8))
              {
                v221 = *(_QWORD *)(v12 + 16);
                v196 = *(__n128 *)v12;
                *(__n128 *)v12 = *v103;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
                *v103 = v196;
                *(_QWORD *)(v12 + 40) = v221;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v124 = (unint64_t)(v14 - 2) >> 1;
              v125 = v124;
              do
              {
                if (v124 >= v125)
                {
                  v126 = (2 * v125) | 1;
                  v127 = (_QWORD *)(v12 + 24 * v126);
                  if (2 * v125 + 2 < v14)
                  {
                    v128 = v127[1];
                    v129 = v127[4];
                    v127 += 3 * (v128 > v129);
                    if (v128 > v129)
                      v126 = 2 * v125 + 2;
                  }
                  v130 = (_QWORD *)(v12 + 24 * v125);
                  v131 = v130[1];
                  if (v127[1] <= v131)
                  {
                    v132 = *v130;
                    v133 = v130[2];
                    do
                    {
                      v134 = v130;
                      v130 = v127;
                      v135 = *(_OWORD *)v127;
                      v134[2] = v127[2];
                      *(_OWORD *)v134 = v135;
                      if (v124 < v126)
                        break;
                      v136 = (2 * v126) | 1;
                      v127 = (_QWORD *)(v12 + 24 * v136);
                      v137 = 2 * v126 + 2;
                      if (v137 < v14)
                      {
                        v138 = v127[1];
                        v139 = v127[4];
                        v127 += 3 * (v138 > v139);
                        if (v138 > v139)
                          v136 = v137;
                      }
                      v126 = v136;
                    }
                    while (v127[1] <= v131);
                    *v130 = v132;
                    v130[1] = v131;
                    v130[2] = v133;
                  }
                }
                v140 = v125-- <= 0;
              }
              while (!v140);
              v141 = v13 / 0x18uLL;
              do
              {
                v142 = 0;
                v222 = *(_QWORD *)(v12 + 16);
                v197 = *(__n128 *)v12;
                v143 = v12;
                do
                {
                  v144 = v143 + 24 * v142 + 24;
                  v145 = (2 * v142) | 1;
                  v146 = 2 * v142 + 2;
                  if (v146 < v141)
                  {
                    v147 = *(_QWORD *)(v144 + 8);
                    v148 = *(_QWORD *)(v144 + 32);
                    v144 += 24 * (v147 > v148);
                    if (v147 > v148)
                      v145 = v146;
                  }
                  v149 = *(_OWORD *)v144;
                  *(_QWORD *)(v143 + 16) = *(_QWORD *)(v144 + 16);
                  *(_OWORD *)v143 = v149;
                  v143 = v144;
                  v142 = v145;
                }
                while (v145 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if ((__n128 *)v144 == a2)
                {
                  *(_QWORD *)(v144 + 16) = v222;
                  *(__n128 *)v144 = v197;
                }
                else
                {
                  v150 = *a2;
                  *(_QWORD *)(v144 + 16) = a2[1].n128_u64[0];
                  *(__n128 *)v144 = v150;
                  a2[1].n128_u64[0] = v222;
                  *a2 = v197;
                  v151 = v144 - v12 + 24;
                  if (v151 >= 25)
                  {
                    v152 = (v151 / 0x18uLL - 2) >> 1;
                    v153 = v12 + 24 * v152;
                    v154 = *(_QWORD *)(v144 + 8);
                    if (*(_QWORD *)(v153 + 8) > v154)
                    {
                      v155 = *(_QWORD *)v144;
                      v156 = *(_QWORD *)(v144 + 16);
                      do
                      {
                        v157 = v144;
                        v144 = v153;
                        v158 = *(_OWORD *)v153;
                        *(_QWORD *)(v157 + 16) = *(_QWORD *)(v153 + 16);
                        *(_OWORD *)v157 = v158;
                        if (!v152)
                          break;
                        v152 = (v152 - 1) >> 1;
                        v153 = v12 + 24 * v152;
                      }
                      while (*(_QWORD *)(v153 + 8) > v154);
                      *(_QWORD *)v144 = v155;
                      *(_QWORD *)(v144 + 8) = v154;
                      *(_QWORD *)(v144 + 16) = v156;
                    }
                  }
                }
                v140 = v141-- <= 2;
              }
              while (!v140);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_u64[0];
          if ((unint64_t)v13 >= 0xC01)
          {
            v18 = v16->n128_u64[1];
            if (v18 <= *(_QWORD *)(v12 + 8))
            {
              if (v17 > v18)
              {
                v202 = v16[1].n128_u64[0];
                v177 = *v16;
                v22 = *v9;
                v16[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v16 = v22;
                a2[-1].n128_u64[1] = v202;
                *v9 = v177;
                if (v16->n128_u64[1] > *(_QWORD *)(v12 + 8))
                {
                  v203 = *(_QWORD *)(v12 + 16);
                  v178 = *(__n128 *)v12;
                  v23 = *v16;
                  *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                  *(__n128 *)v12 = v23;
                  v16[1].n128_u64[0] = v203;
                  *v16 = v178;
                }
              }
            }
            else
            {
              if (v17 <= v18)
              {
                v206 = *(_QWORD *)(v12 + 16);
                v181 = *(__n128 *)v12;
                v26 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v26;
                v16[1].n128_u64[0] = v206;
                *v16 = v181;
                if (a2[-1].n128_u64[0] <= v16->n128_u64[1])
                  goto LABEL_21;
                v200 = v16[1].n128_u64[0];
                v175 = *v16;
                v27 = *v9;
                v16[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v16 = v27;
              }
              else
              {
                v200 = *(_QWORD *)(v12 + 16);
                v175 = *(__n128 *)v12;
                v19 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = v19;
              }
              a2[-1].n128_u64[1] = v200;
              *v9 = v175;
            }
LABEL_21:
            v28 = (__n128 *)(v12 + 24);
            v29 = v12 + 24 * v15;
            v30 = (__n128 *)(v29 - 24);
            v31 = *(_QWORD *)(v29 - 16);
            v32 = a2[-3].n128_u64[1];
            if (v31 <= *(_QWORD *)(v12 + 32))
            {
              if (v32 > v31)
              {
                v207 = v30[1].n128_u64[0];
                v182 = *v30;
                v36 = *v10;
                v30[1].n128_u64[0] = a2[-2].n128_u64[0];
                *v30 = v36;
                a2[-2].n128_u64[0] = v207;
                *v10 = v182;
                if (v30->n128_u64[1] > *(_QWORD *)(v12 + 32))
                {
                  v37 = *v28;
                  v38 = *(_QWORD *)(v12 + 40);
                  v39 = v30[1].n128_i64[0];
                  *v28 = *v30;
                  *(_QWORD *)(v12 + 40) = v39;
                  v30[1].n128_u64[0] = v38;
                  *v30 = v37;
                }
              }
            }
            else
            {
              if (v32 <= v31)
              {
                v42 = *v28;
                v43 = *(_QWORD *)(v12 + 40);
                v44 = v30[1].n128_i64[0];
                *v28 = *v30;
                *(_QWORD *)(v12 + 40) = v44;
                v30[1].n128_u64[0] = v43;
                *v30 = v42;
                if (a2[-3].n128_u64[1] <= v30->n128_u64[1])
                  goto LABEL_33;
                v209 = v30[1].n128_u64[0];
                v184 = *v30;
                v45 = *v10;
                v30[1].n128_u64[0] = a2[-2].n128_u64[0];
                *v30 = v45;
                v33 = v184;
                a2[-2].n128_u64[0] = v209;
              }
              else
              {
                v33 = *v28;
                v34 = *(_QWORD *)(v12 + 40);
                v35 = a2[-2].n128_u64[0];
                *v28 = *v10;
                *(_QWORD *)(v12 + 40) = v35;
                a2[-2].n128_u64[0] = v34;
              }
              *v10 = v33;
            }
LABEL_33:
            v46 = (__n128 *)(v12 + 48);
            v47 = v12 + 24 * v15;
            v48 = (__n128 *)(v47 + 24);
            v49 = *(_QWORD *)(v47 + 32);
            v50 = a2[-4].n128_u64[0];
            if (v49 <= *(_QWORD *)(v12 + 56))
            {
              if (v50 > v49)
              {
                v210 = v48[1].n128_u64[0];
                v185 = *v48;
                v54 = *(__n128 *)v11;
                v48[1].n128_u64[0] = a2[-4].n128_u64[1];
                *v48 = v54;
                a2[-4].n128_u64[1] = v210;
                *(__n128 *)v11 = v185;
                if (v48->n128_u64[1] > *(_QWORD *)(v12 + 56))
                {
                  v55 = *v46;
                  v56 = *(_QWORD *)(v12 + 64);
                  v57 = v48[1].n128_i64[0];
                  *v46 = *v48;
                  *(_QWORD *)(v12 + 64) = v57;
                  v48[1].n128_u64[0] = v56;
                  *v48 = v55;
                }
              }
            }
            else
            {
              if (v50 <= v49)
              {
                v58 = *v46;
                v59 = *(_QWORD *)(v12 + 64);
                v60 = v48[1].n128_i64[0];
                *v46 = *v48;
                *(_QWORD *)(v12 + 64) = v60;
                v48[1].n128_u64[0] = v59;
                *v48 = v58;
                if (a2[-4].n128_u64[0] <= v48->n128_u64[1])
                  goto LABEL_42;
                v211 = v48[1].n128_u64[0];
                v186 = *v48;
                v61 = *(__n128 *)v11;
                v48[1].n128_u64[0] = a2[-4].n128_u64[1];
                *v48 = v61;
                v51 = v186;
                a2[-4].n128_u64[1] = v211;
              }
              else
              {
                v51 = *v46;
                v52 = *(_QWORD *)(v12 + 64);
                v53 = a2[-4].n128_u64[1];
                *v46 = *(__n128 *)v11;
                *(_QWORD *)(v12 + 64) = v53;
                a2[-4].n128_u64[1] = v52;
              }
              *(__n128 *)v11 = v51;
            }
LABEL_42:
            v62 = v16->n128_u64[1];
            v63 = v48->n128_u64[1];
            if (v62 <= v30->n128_u64[1])
            {
              if (v63 > v62)
              {
                v213 = v16[1].n128_u64[0];
                v188 = *v16;
                *v16 = *v48;
                v16[1].n128_u64[0] = v48[1].n128_u64[0];
                v48[1].n128_u64[0] = v213;
                *v48 = v188;
                if (v16->n128_u64[1] > v30->n128_u64[1])
                {
                  v214 = v30[1].n128_u64[0];
                  v189 = *v30;
                  *v30 = *v16;
                  v30[1].n128_u64[0] = v16[1].n128_u64[0];
                  v16[1].n128_u64[0] = v214;
                  *v16 = v189;
                }
              }
              goto LABEL_51;
            }
            if (v63 <= v62)
            {
              v215 = v30[1].n128_u64[0];
              v190 = *v30;
              *v30 = *v16;
              v30[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v215;
              *v16 = v190;
              if (v48->n128_u64[1] <= v16->n128_u64[1])
              {
LABEL_51:
                v216 = *(_QWORD *)(v12 + 16);
                v191 = *(__n128 *)v12;
                v64 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v64;
                a5 = v191;
                v16[1].n128_u64[0] = v216;
                *v16 = v191;
                goto LABEL_52;
              }
              v212 = v16[1].n128_u64[0];
              v187 = *v16;
              *v16 = *v48;
              v16[1].n128_u64[0] = v48[1].n128_u64[0];
            }
            else
            {
              v212 = v30[1].n128_u64[0];
              v187 = *v30;
              *v30 = *v48;
              v30[1].n128_u64[0] = v48[1].n128_u64[0];
            }
            v48[1].n128_u64[0] = v212;
            *v48 = v187;
            goto LABEL_51;
          }
          v20 = *(_QWORD *)(v12 + 8);
          if (v20 <= v16->n128_u64[1])
          {
            if (v17 > v20)
            {
              v204 = *(_QWORD *)(v12 + 16);
              v179 = *(__n128 *)v12;
              v24 = *v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)v12 = v24;
              a5 = v179;
              a2[-1].n128_u64[1] = v204;
              *v9 = v179;
              if (*(_QWORD *)(v12 + 8) > v16->n128_u64[1])
              {
                v205 = v16[1].n128_u64[0];
                v180 = *v16;
                v25 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = v25;
                a5 = v180;
                *(_QWORD *)(v12 + 16) = v205;
                *(__n128 *)v12 = v180;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              v208 = v16[1].n128_u64[0];
              v183 = *v16;
              v40 = *(__n128 *)v12;
              v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
              *v16 = v40;
              a5 = v183;
              *(_QWORD *)(v12 + 16) = v208;
              *(__n128 *)v12 = v183;
              if (a2[-1].n128_u64[0] <= *(_QWORD *)(v12 + 8))
                goto LABEL_52;
              v201 = *(_QWORD *)(v12 + 16);
              v176 = *(__n128 *)v12;
              v41 = *v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)v12 = v41;
            }
            else
            {
              v201 = v16[1].n128_u64[0];
              v176 = *v16;
              v21 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v21;
            }
            a5 = v176;
            a2[-1].n128_u64[1] = v201;
            *v9 = v176;
          }
LABEL_52:
          --a3;
          if ((a4 & 1) == 0)
          {
            v65 = *(__n128 **)(v12 + 8);
            if (*(_QWORD *)(v12 - 16) > (unint64_t)v65)
              goto LABEL_55;
            v84 = *(_QWORD *)v12;
            v85 = *(_QWORD *)(v12 + 16);
            if ((unint64_t)v65 <= a2[-1].n128_u64[0])
            {
              v88 = v12 + 24;
              do
              {
                v12 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v89 = *(_QWORD *)(v88 + 8);
                v88 += 24;
              }
              while ((unint64_t)v65 <= v89);
            }
            else
            {
              v86 = (__n128 *)(v12 + 24);
              do
              {
                if (v86 == a2)
                  goto LABEL_182;
                v87 = v86->n128_u64[1];
                v86 = (__n128 *)((char *)v86 + 24);
              }
              while ((unint64_t)v65 <= v87);
              v12 = (unint64_t)&v86[-2].n128_u64[1];
            }
            v90 = a2;
            if (v12 < (unint64_t)a2)
            {
              v91 = a2;
              while (v91 != a1)
              {
                v90 = (__n128 *)((char *)v91 - 24);
                v92 = v91[-1].n128_u64[0];
                v91 = (__n128 *)((char *)v91 - 24);
                if ((unint64_t)v65 <= v92)
                  goto LABEL_94;
              }
              goto LABEL_182;
            }
LABEL_94:
            if (v12 < (unint64_t)v90)
            {
              do
              {
                v218 = *(_QWORD *)(v12 + 16);
                v193 = *(__n128 *)v12;
                v93 = *v90;
                *(_QWORD *)(v12 + 16) = v90[1].n128_u64[0];
                *(__n128 *)v12 = v93;
                a5 = v193;
                v90[1].n128_u64[0] = v218;
                *v90 = v193;
                v94 = (__n128 *)(v12 + 24);
                do
                {
                  if (v94 == a2)
                    goto LABEL_182;
                  v95 = v94->n128_u64[1];
                  v94 = (__n128 *)((char *)v94 + 24);
                }
                while ((unint64_t)v65 <= v95);
                v12 = (unint64_t)&v94[-2].n128_u64[1];
                do
                {
                  if (v90 == a1)
                    goto LABEL_182;
                  v96 = (unint64_t)&v90[-2].n128_u64[1];
                  v97 = v90[-1].n128_u64[0];
                  v90 = (__n128 *)((char *)v90 - 24);
                }
                while ((unint64_t)v65 > v97);
                v90 = (__n128 *)v96;
              }
              while (v12 < v96);
            }
            if ((__n128 *)(v12 - 24) != a1)
            {
              a5 = *(__n128 *)(v12 - 24);
              a1[1].n128_u64[0] = *(_QWORD *)(v12 - 8);
              *a1 = a5;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v84;
            *(_QWORD *)(v12 - 16) = v65;
            *(_QWORD *)(v12 - 8) = v85;
            continue;
          }
          v65 = *(__n128 **)(v12 + 8);
LABEL_55:
          v66 = 0;
          v67 = *(_QWORD *)v12;
          v68 = *(_QWORD *)(v12 + 16);
          do
          {
            if ((__n128 *)(v12 + v66 + 24) == a2)
              goto LABEL_182;
            v69 = *(_QWORD *)(v12 + v66 + 32);
            v66 += 24;
          }
          while (v69 > (unint64_t)v65);
          v70 = v12 + v66;
          v71 = a2;
          if (v66 != 24)
          {
            while (v71 != (__n128 *)v12)
            {
              v72 = (__n128 *)((char *)v71 - 24);
              v73 = v71[-1].n128_u64[0];
              v71 = (__n128 *)((char *)v71 - 24);
              if (v73 > (unint64_t)v65)
                goto LABEL_67;
            }
            goto LABEL_182;
          }
          v74 = a2;
          while (v70 < (unint64_t)v74)
          {
            v72 = (__n128 *)((char *)v74 - 24);
            v75 = v74[-1].n128_u64[0];
            v74 = (__n128 *)((char *)v74 - 24);
            if (v75 > (unint64_t)v65)
              goto LABEL_67;
          }
          v72 = v74;
LABEL_67:
          v12 = v70;
          if (v70 < (unint64_t)v72)
          {
            v76 = v72;
            do
            {
              v217 = *(_QWORD *)(v12 + 16);
              v192 = *(__n128 *)v12;
              v77 = *v76;
              *(_QWORD *)(v12 + 16) = v76[1].n128_u64[0];
              *(__n128 *)v12 = v77;
              a5 = v192;
              v76[1].n128_u64[0] = v217;
              *v76 = v192;
              v78 = (__n128 *)(v12 + 24);
              do
              {
                if (v78 == a2)
                  goto LABEL_182;
                v79 = v78->n128_u64[1];
                v78 = (__n128 *)((char *)v78 + 24);
              }
              while (v79 > (unint64_t)v65);
              v12 = (unint64_t)&v78[-2].n128_u64[1];
              do
              {
                if (v76 == a1)
                  goto LABEL_182;
                v80 = (unint64_t)&v76[-2].n128_u64[1];
                v81 = v76[-1].n128_u64[0];
                v76 = (__n128 *)((char *)v76 - 24);
              }
              while (v81 <= (unint64_t)v65);
              v76 = (__n128 *)v80;
            }
            while (v12 < v80);
          }
          if ((__n128 *)(v12 - 24) != a1)
          {
            a5 = *(__n128 *)(v12 - 24);
            a1[1].n128_u64[0] = *(_QWORD *)(v12 - 8);
            *a1 = a5;
          }
          *(_QWORD *)(v12 - 24) = v67;
          *(_QWORD *)(v12 - 16) = v65;
          *(_QWORD *)(v12 - 8) = v68;
          if (v70 < (unint64_t)v72)
            goto LABEL_81;
          v82 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>((uint64_t)a1, (__n128 *)(v12 - 24), a5);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>(v12, a2, v83))
          {
            if (v82)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v82)
            return;
          goto LABEL_1;
        }
        v65 = (__n128 *)(v12 + 24);
        v114 = (__n128 *)v12 == a2 || v65 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v114)
          {
            v115 = 0;
            n128_u64 = (_QWORD *)v12;
            do
            {
              v117 = v65;
              v118 = n128_u64[4];
              if (v118 > n128_u64[1])
              {
                v119 = v117->n128_u64[0];
                v120 = n128_u64[5];
                v121 = v115;
                while (1)
                {
                  v122 = v12 + v121;
                  *(_OWORD *)(v122 + 24) = *(_OWORD *)(v12 + v121);
                  *(_QWORD *)(v122 + 40) = *(_QWORD *)(v12 + v121 + 16);
                  if (!v121)
                    break;
                  v121 -= 24;
                  if (v118 <= *(_QWORD *)(v122 - 16))
                  {
                    v123 = (_QWORD *)(v12 + v121 + 24);
                    goto LABEL_134;
                  }
                }
                v123 = (_QWORD *)v12;
LABEL_134:
                *v123 = v119;
                v123[1] = v118;
                v123[2] = v120;
              }
              v65 = (__n128 *)((char *)v117 + 24);
              v115 += 24;
              n128_u64 = v117->n128_u64;
            }
            while (&v117[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v114)
        {
          v162 = -2;
          v163 = 1;
          v164 = (_QWORD *)v12;
          while (1)
          {
            v165 = v164[4];
            if (v165 > v164[1])
              break;
LABEL_180:
            v164 = (_QWORD *)(v12 + 24 * v163++);
            v65 = (__n128 *)((char *)v65 + 24);
            --v162;
            if (v65 == a2)
              return;
          }
          v166 = v65->n128_u64[0];
          v167 = v164[5];
          v168 = v162;
          v169 = v65;
          while (1)
          {
            *v169 = *(__n128 *)((char *)v169 - 24);
            v169[1].n128_u64[0] = v169[-1].n128_u64[1];
            if (__CFADD__(v168++, 1))
              break;
            v171 = &v169[-2].n128_u64[1];
            v172 = v169[-3].n128_u64[1];
            v169 = (__n128 *)((char *)v169 - 24);
            if (v165 <= v172)
            {
              *v171 = v166;
              v171[1] = v165;
              v171[2] = v167;
              goto LABEL_180;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v224 = a1[1].n128_u64[0];
          v199 = *a1;
          *a1 = *v65;
          a1[1].n128_u64[0] = v65[1].n128_u64[0];
          *v65 = v199;
          v65[1].n128_u64[0] = v224;
          if (a2[-1].n128_u64[0] > a1[2].n128_u64[0])
          {
            v102 = *v65;
            v173 = v65[1].n128_u64[0];
            v174 = a2[-1].n128_u64[1];
            *v65 = *v9;
            v65[1].n128_u64[0] = v174;
            a2[-1].n128_u64[1] = v173;
LABEL_185:
            *v9 = v102;
          }
        }
        return;
    }
  }
}

  v6 = 1 - a4;
  while (2)
  {
    v7 = v6;
    v8 = (char *)a2 - (char *)result;
    v9 = ((char *)a2 - (char *)result) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (a2[-1].i32[2] < (unsigned __int32)result->i32[0])
        {
          v10 = result->i64[0];
          goto LABEL_6;
        }
        return result;
      case 3uLL:
        v11 = result->u32[2];
        v12 = a2[-1].u32[2];
        if (v11 < result->i32[0])
        {
          v10 = result->i64[0];
          if (v12 < v11)
          {
LABEL_6:
            result->i64[0] = a2[-1].i64[1];
          }
          else
          {
            result->i64[0] = result->i64[1];
            result->i64[1] = v10;
            if (a2[-1].i32[2] >= v10)
              return result;
            result->i64[1] = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v10;
          return result;
        }
        if (v12 < v11)
        {
          v13 = result->i64[1];
          result->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v13;
          if (result->i32[2] < (unsigned __int32)result->i32[0])
            *result = vextq_s8(*result, *result, 8uLL);
        }
        return result;
      case 4uLL:
        v14 = result->u32[2];
        v15 = result->i32[0];
        LODWORD(v16) = result[1].i32[0];
        if (v14 >= result->i32[0])
        {
          if (v16 < v14)
          {
            v16 = result->i64[1];
            v22 = result[1].i64[0];
            result->i64[1] = v22;
            result[1].i64[0] = v16;
            if (v15 > v22)
            {
              v23 = result->i64[0];
              result->i64[0] = v22;
              result->i64[1] = v23;
            }
          }
        }
        else
        {
          v17 = result->i64[0];
          if (v16 < v14)
          {
            result->i64[0] = result[1].i64[0];
LABEL_18:
            result[1].i64[0] = v17;
            LODWORD(v16) = v17;
            goto LABEL_19;
          }
          result->i64[0] = result->i64[1];
          result->i64[1] = v17;
          if (v16 < v17)
          {
            result->i64[1] = result[1].i64[0];
            goto LABEL_18;
          }
        }
LABEL_19:
        if (a2[-1].i32[2] < v16)
        {
          v18 = result[1].i64[0];
          result[1].i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (result[1].i32[0] < (unsigned __int32)result->i32[2])
          {
            v20 = result->i64[1];
            v19 = result[1].i64[0];
            result->i64[1] = v19;
            result[1].i64[0] = v20;
            if (result->i32[0] > v19)
            {
              v21 = result->i64[0];
              result->i64[0] = v19;
              result->i64[1] = v21;
            }
          }
        }
        return result;
      case 5uLL:
        return (int8x16_t *)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(result->i64, &result->u32[2], (unsigned int *)&result[1], &result[1].i64[1], &a2[-1].i64[1]);
      default:
        v24 = a5;
        v33 = a3;
        v34 = a2;
        v35 = result;
        if (v8 <= 191)
        {
          if ((a5 & 1) != 0)
            return (int8x16_t *)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>((uint64_t)result, a2);
          else
            return (int8x16_t *)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(result, a2);
        }
        if (v7 != 1)
        {
          v25 = &a2[-1].u32[2];
          v26 = v9 >> 1;
          v27 = (unsigned int *)result + 2 * (v9 >> 1);
          if ((unint64_t)v8 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(&result->i64[v26], (unsigned int *)result, v25);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(result->i64, (unsigned int *)result + 2 * v26, v25);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(&v35->i64[1], v27 - 2, (unsigned int *)&v34[-1]);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(v35[1].i64, &v35->u32[2 * v26 + 2], &v34[-2].u32[2]);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>((uint64_t *)v27 - 1, v27, &v35->u32[2 * v26 + 2]);
            v28 = v35->i64[0];
            v35->i64[0] = *(_QWORD *)v27;
            *(_QWORD *)v27 = v28;
          }
          if ((v24 & 1) == 0 && v35[-1].i32[2] >= (unsigned __int32)v35->i32[0])
          {
            result = (int8x16_t *)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Range<unsigned int> *,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &>((unsigned int *)v35, (unsigned int *)v34);
            goto LABEL_46;
          }
          v29 = (int8x16_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Range<unsigned int> *,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &>((unsigned int *)v35, (unsigned int *)v34);
          a3 = v33;
          v30 = v29;
          LOBYTE(a5) = v24;
          if ((v31 & 1) == 0)
            goto LABEL_42;
          v32 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(v35, v29);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>((int8x16_t *)&v30->u64[1], v34))
          {
            v6 = v7 + 1;
            a3 = v33;
            a2 = v34;
            a5 = v24;
            result = (int8x16_t *)&v30->u64[1];
            if (v32)
              continue;
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(v35, v30, a3, -v7, a5 & 1);
            result = (int8x16_t *)&v30->u64[1];
LABEL_46:
            a5 = 0;
            a4 = -v7;
            a3 = v33;
            a2 = v34;
            goto LABEL_1;
          }
          a4 = -v7;
          a2 = v30;
          result = v35;
          a3 = v33;
          a5 = v24;
          if (v32)
            return result;
          goto LABEL_1;
        }
        if (result != a2)
          return (int8x16_t *)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,WTF::Range<unsigned int>*>(result->i8, a2->i8, a2->i8);
        return result;
    }
  }
}

  v7 = a1;
  while (2)
  {
    v8 = 1 - a3;
LABEL_3:
    a1 = v7;
    v9 = v8;
    v10 = a2 - (char *)v7;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v7) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v13 = *((_QWORD *)a2 - 3);
        v12 = a2 - 24;
        if (v13 < *v7)
          goto LABEL_8;
        return;
      case 3uLL:
        v14 = (__n128 *)(v7 + 3);
        v15 = v7[3];
        v17 = *((_QWORD *)a2 - 3);
        v12 = a2 - 24;
        v16 = v17;
        if (v15 >= *v7)
        {
          if (v16 < v15)
          {
            v19 = v7[5];
            v20 = *v14;
            v21 = *((_QWORD *)v12 + 2);
            *v14 = *(__n128 *)v12;
            v7[5] = v21;
            *(__n128 *)v12 = v20;
            *((_QWORD *)v12 + 2) = v19;
            if (v7[3] < *v7)
            {
              v56 = v7[2];
              v51 = *(__n128 *)v7;
              *(__n128 *)v7 = *v14;
              v7[2] = v7[5];
              *v14 = v51;
              v7[5] = v56;
            }
          }
        }
        else if (v16 >= v15)
        {
          v57 = v7[2];
          v52 = *(__n128 *)v7;
          *(__n128 *)v7 = *v14;
          v7[2] = v7[5];
          *v14 = v52;
          v7[5] = v57;
          if (*(_QWORD *)v12 < v7[3])
          {
            v22 = v7[5];
            v23 = *v14;
            v24 = *((_QWORD *)v12 + 2);
            *v14 = *(__n128 *)v12;
            v7[5] = v24;
            *(__n128 *)v12 = v23;
            *((_QWORD *)v12 + 2) = v22;
          }
        }
        else
        {
LABEL_8:
          v55 = v7[2];
          v50 = *(__n128 *)v7;
          v18 = *(__n128 *)v12;
          v7[2] = *((_QWORD *)v12 + 2);
          *(__n128 *)v7 = v18;
          *(__n128 *)v12 = v50;
          *((_QWORD *)v12 + 2) = v55;
        }
        return;
      case 4uLL:
        return;
      case 5uLL:
        v25 = (__n128 *)(v7 + 3);
        v26 = (__n128 *)(v7 + 6);
        v27 = (__n128 *)(a1 + 9);
        v29 = *((_QWORD *)a2 - 3);
        v28 = a2 - 24;
        if (v29 < a1[9])
        {
          v30 = a1[11];
          v31 = *v27;
          v32 = *((_QWORD *)v28 + 2);
          *v27 = *(__n128 *)v28;
          a1[11] = v32;
          *(__n128 *)v28 = v31;
          *((_QWORD *)v28 + 2) = v30;
          if ((int64_t)v27->n128_u64[0] < (int64_t)v26->n128_u64[0])
          {
            v33 = a1[8];
            v34 = *v26;
            *v26 = *v27;
            a1[8] = a1[11];
            *v27 = v34;
            a1[11] = v33;
            if ((int64_t)v26->n128_u64[0] < (int64_t)v25->n128_u64[0])
            {
              v35 = a1[5];
              v36 = *v25;
              *v25 = *v26;
              a1[5] = a1[8];
              *v26 = v36;
              a1[8] = v35;
              if (a1[3] < *a1)
              {
                v58 = a1[2];
                v53 = *(__n128 *)a1;
                *(__n128 *)a1 = *v25;
                a1[2] = a1[5];
                *v25 = v53;
                a1[5] = v58;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          if ((a4 & 1) != 0)
          else
          return;
        }
        if (v9 == 1)
        {
          return;
        }
        v37 = a4;
        v38 = v9;
        v39 = (uint64_t *)(a2 - 24);
        v40 = v11 >> 1;
        v41 = &v7[3 * (v11 >> 1)];
        if ((unint64_t)v10 >= 0xC01)
        {
          v47 = 3 * v40;
          v48 = &v7[3 * v40 - 3];
          v59 = v7[2];
          v54 = *(__n128 *)v7;
          v49 = v41[2];
          *(_OWORD *)v7 = *(_OWORD *)v41;
          v7[2] = v49;
          v41[2] = v59;
          *(__n128 *)v41 = v54;
        }
        else
        {
        }
        if ((v37 & 1) == 0 && *(v7 - 3) >= *v7)
        {
          goto LABEL_29;
        }
        LOBYTE(a4) = v37;
        if ((v44 & 1) == 0)
          goto LABEL_28;
        v7 = v42 + 3;
        {
          v8 = v38 + 1;
          a4 = v37;
          if (!v45)
          {
LABEL_28:
            v7 = v42 + 3;
LABEL_29:
            a4 = 0;
            a3 = -v38;
            continue;
          }
          goto LABEL_3;
        }
        a3 = -v38;
        a2 = (char *)v42;
        a4 = v37;
        if (!v45)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = &a2[-2].n128_u64[1];
  v10 = a2 - 3;
  v11 = &a2[-5].n128_u64[1];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v92 = a2[-2].n128_u64[1];
        a2 = (__n128 *)((char *)a2 - 24);
        if (v92 < *(_QWORD *)v12)
          goto LABEL_109;
        return result;
      case 3:
        v67 = (__n128 *)(v12 + 24);
        v93 = *(_QWORD *)(v12 + 24);
        v95 = a2[-2].n128_u64[1];
        a2 = (__n128 *)((char *)a2 - 24);
        v94 = v95;
        if (v93 < *(_QWORD *)v12)
        {
          if (v94 >= v93)
            goto LABEL_189;
LABEL_109:
          v204 = *(_QWORD *)(v12 + 16);
          v177 = *(__n128 *)v12;
          v96 = *a2;
          *(_QWORD *)(v12 + 16) = a2[1].n128_u64[0];
          *(__n128 *)v12 = v96;
          result = v177;
          a2[1].n128_u64[0] = v204;
          goto LABEL_110;
        }
        if (v94 < v93)
        {
          result = *v67;
          v143 = *(_QWORD *)(v12 + 40);
          v144 = a2[1].n128_u64[0];
          *v67 = *a2;
          *(_QWORD *)(v12 + 40) = v144;
          a2[1].n128_u64[0] = v143;
          *a2 = result;
          if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
          {
            v207 = *(_QWORD *)(v12 + 16);
            v182 = *(__n128 *)v12;
            *(__n128 *)v12 = *v67;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            result = v182;
            *v67 = v182;
            *(_QWORD *)(v12 + 40) = v207;
          }
        }
        return result;
      case 4:
        return result;
      case 5:
        v97 = (__n128 *)(v12 + 24);
        v98 = (__n128 *)(v12 + 48);
        v99 = (__n128 *)(v12 + 72);
        v101 = a2[-2].n128_u64[1];
        v100 = (__n128 *)((char *)a2 - 24);
        if (v101 < *(_QWORD *)(v12 + 72))
        {
          result = *v99;
          v102 = *(_QWORD *)(v12 + 88);
          v103 = v100[1].n128_u64[0];
          *v99 = *v100;
          *(_QWORD *)(v12 + 88) = v103;
          v100[1].n128_u64[0] = v102;
          *v100 = result;
          if (v99->n128_u64[0] < v98->n128_u64[0])
          {
            v104 = *(_QWORD *)(v12 + 64);
            result = *v98;
            *v98 = *v99;
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 88);
            *v99 = result;
            *(_QWORD *)(v12 + 88) = v104;
            if (v98->n128_u64[0] < v97->n128_u64[0])
            {
              v105 = *(_QWORD *)(v12 + 40);
              result = *v97;
              *v97 = *v98;
              *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
              *v98 = result;
              *(_QWORD *)(v12 + 64) = v105;
              if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
              {
                v205 = *(_QWORD *)(v12 + 16);
                v178 = *(__n128 *)v12;
                *(__n128 *)v12 = *v97;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
                result = v178;
                *v97 = v178;
                *(_QWORD *)(v12 + 40) = v205;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 575)
        {
          v67 = (__n128 *)(v12 + 24);
          v107 = (__n128 *)v12 == a2 || v67 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = 0;
              v109 = (__n128 *)v12;
              do
              {
                v110 = v67;
                v111 = v67->n128_u64[0];
                if (v111 < v109->n128_u64[0])
                {
                  v179 = v109[2];
                  v112 = v108;
                  while (1)
                  {
                    v113 = v12 + v112;
                    *(_OWORD *)(v113 + 24) = *(_OWORD *)(v12 + v112);
                    *(_QWORD *)(v113 + 40) = *(_QWORD *)(v12 + v112 + 16);
                    if (!v112)
                      break;
                    v112 -= 24;
                    if (v111 >= *(_QWORD *)(v113 - 24))
                    {
                      v114 = v12 + v112 + 24;
                      goto LABEL_132;
                    }
                  }
                  v114 = v12;
LABEL_132:
                  *(_QWORD *)v114 = v111;
                  result = v179;
                  *(__n128 *)(v114 + 8) = v179;
                }
                v67 = (__n128 *)((char *)v110 + 24);
                v108 += 24;
                v109 = v110;
              }
              while (&v110[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v107)
          {
            v145 = -2;
            v146 = 1;
            v147 = (__n128 *)v12;
            while (1)
            {
              v148 = v67->n128_u64[0];
              if (v67->n128_u64[0] < v147->n128_u64[0])
                break;
LABEL_186:
              v147 = (__n128 *)(v12 + 24 * v146++);
              v67 = (__n128 *)((char *)v67 + 24);
              --v145;
              if (v67 == a2)
                return result;
            }
            v183 = v147[2];
            v149 = v145;
            v150 = v67;
            while (1)
            {
              *v150 = *(__n128 *)((char *)v150 - 24);
              v150[1].n128_u64[0] = v150[-1].n128_u64[1];
              v120 = __CFADD__(v149++, 1);
              if (v120)
                break;
              v151 = &v150[-2].n128_i8[8];
              v152 = v150[-3].n128_u64[0];
              v150 = (__n128 *)((char *)v150 - 24);
              if (v148 >= v152)
              {
                *(_QWORD *)v151 = v148;
                result = v183;
                *(__n128 *)(v151 + 8) = v183;
                goto LABEL_186;
              }
            }
LABEL_188:
            __break(1u);
LABEL_189:
            v208 = *(_QWORD *)(a1 + 16);
            v184 = *(__n128 *)a1;
            *(__n128 *)a1 = *v67;
            *(_QWORD *)(a1 + 16) = v67[1].n128_u64[0];
            result = v184;
            *v67 = v184;
            v67[1].n128_u64[0] = v208;
            if (a2->n128_u64[0] < *(_QWORD *)(a1 + 24))
            {
              result = *v67;
              v153 = v67[1].n128_u64[0];
              v154 = a2[1].n128_u64[0];
              *v67 = *a2;
              v67[1].n128_u64[0] = v154;
              a2[1].n128_u64[0] = v153;
LABEL_110:
              *a2 = result;
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((__n128 *)v12 != a2)
          {
            v115 = (unint64_t)(v14 - 2) >> 1;
            v116 = v115;
            do
            {
              if (v115 >= v116)
              {
                v117 = (2 * v116) | 1;
                v118 = (unint64_t *)(v12 + 24 * v117);
                if (2 * v116 + 2 >= v14)
                {
                  v119 = *v118;
                }
                else
                {
                  v119 = v118[3];
                  v120 = *v118 >= v119;
                  if (*v118 > v119)
                    v119 = *v118;
                  if (!v120)
                  {
                    v118 += 3;
                    v117 = 2 * v116 + 2;
                  }
                }
                v121 = (unint64_t *)(v12 + 24 * v116);
                v122 = *v121;
                if (v119 >= *v121)
                {
                  v180 = *(_OWORD *)(v121 + 1);
                  do
                  {
                    v123 = v121;
                    v121 = v118;
                    v124 = *(_OWORD *)v118;
                    v123[2] = v118[2];
                    *(_OWORD *)v123 = v124;
                    if (v115 < v117)
                      break;
                    v125 = (2 * v117) | 1;
                    v118 = (unint64_t *)(v12 + 24 * v125);
                    v117 = 2 * v117 + 2;
                    if (v117 >= v14)
                    {
                      v126 = *v118;
                      v117 = v125;
                    }
                    else
                    {
                      v126 = *v118;
                      v127 = v118[3];
                      if (*v118 <= v127)
                        v126 = v118[3];
                      if (*v118 >= v127)
                        v117 = v125;
                      else
                        v118 += 3;
                    }
                  }
                  while (v126 >= v122);
                  *v121 = v122;
                  *(_OWORD *)(v121 + 1) = v180;
                }
              }
              v128 = v116-- <= 0;
            }
            while (!v128);
            v129 = v13 / 0x18uLL;
            do
            {
              v130 = 0;
              v206 = *(_QWORD *)(v12 + 16);
              v181 = *(__n128 *)v12;
              v131 = v12;
              do
              {
                v132 = v131 + 24 * v130 + 24;
                v133 = (2 * v130) | 1;
                v134 = 2 * v130 + 2;
                if (v134 < v129 && *(_QWORD *)v132 < *(_QWORD *)(v132 + 24))
                {
                  v132 += 24;
                  v133 = v134;
                }
                v135 = *(_OWORD *)v132;
                *(_QWORD *)(v131 + 16) = *(_QWORD *)(v132 + 16);
                *(_OWORD *)v131 = v135;
                v131 = v132;
                v130 = v133;
              }
              while (v133 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
              a2 = (__n128 *)((char *)a2 - 24);
              if ((__n128 *)v132 == a2)
              {
                result = v181;
                *(_QWORD *)(v132 + 16) = v206;
                *(__n128 *)v132 = v181;
              }
              else
              {
                v136 = *a2;
                *(_QWORD *)(v132 + 16) = a2[1].n128_u64[0];
                *(__n128 *)v132 = v136;
                result = v181;
                a2[1].n128_u64[0] = v206;
                *a2 = v181;
                v137 = v132 - v12 + 24;
                if (v137 >= 25)
                {
                  v138 = (v137 / 0x18uLL - 2) >> 1;
                  v139 = v12 + 24 * v138;
                  v140 = *(_QWORD *)v132;
                  if (*(_QWORD *)v139 < *(_QWORD *)v132)
                  {
                    v157 = *(__n128 *)(v132 + 8);
                    do
                    {
                      v141 = v132;
                      v132 = v139;
                      v142 = *(_OWORD *)v139;
                      *(_QWORD *)(v141 + 16) = *(_QWORD *)(v139 + 16);
                      *(_OWORD *)v141 = v142;
                      if (!v138)
                        break;
                      v138 = (v138 - 1) >> 1;
                      v139 = v12 + 24 * v138;
                    }
                    while (*(_QWORD *)v139 < v140);
                    *(_QWORD *)v132 = v140;
                    result = v157;
                    *(__n128 *)(v132 + 8) = v157;
                  }
                }
              }
              v128 = v129-- <= 2;
            }
            while (!v128);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = (unint64_t *)(v12 + 24 * ((unint64_t)v14 >> 1));
        v17 = *v9;
        if ((unint64_t)v13 >= 0xC01)
        {
          v18 = *v16;
          if (*v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v187 = v16[2];
              v160 = *(__n128 *)v16;
              v22 = *(_OWORD *)v9;
              v16[2] = a2[-1].n128_u64[1];
              *(_OWORD *)v16 = v22;
              a2[-1].n128_u64[1] = v187;
              *(__n128 *)v9 = v160;
              if (*v16 < *(_QWORD *)v12)
              {
                v188 = *(_QWORD *)(v12 + 16);
                v161 = *(__n128 *)v12;
                v23 = *(__n128 *)v16;
                *(_QWORD *)(v12 + 16) = v16[2];
                *(__n128 *)v12 = v23;
                v16[2] = v188;
                *(__n128 *)v16 = v161;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v185 = *(_QWORD *)(v12 + 16);
              v158 = *(__n128 *)v12;
              v19 = *(_OWORD *)v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(_OWORD *)v12 = v19;
              goto LABEL_20;
            }
            v191 = *(_QWORD *)(v12 + 16);
            v164 = *(__n128 *)v12;
            v26 = *(__n128 *)v16;
            *(_QWORD *)(v12 + 16) = v16[2];
            *(__n128 *)v12 = v26;
            v16[2] = v191;
            *(__n128 *)v16 = v164;
            if (*v9 < *v16)
            {
              v185 = v16[2];
              v158 = *(__n128 *)v16;
              v27 = *(_OWORD *)v9;
              v16[2] = a2[-1].n128_u64[1];
              *(_OWORD *)v16 = v27;
LABEL_20:
              a2[-1].n128_u64[1] = v185;
              *(__n128 *)v9 = v158;
            }
          }
          v28 = (__n128 *)(v12 + 24);
          v29 = v12 + 24 * v15;
          v32 = *(_QWORD *)(v29 - 24);
          v30 = v29 - 24;
          v31 = v32;
          v33 = v10->n128_u64[0];
          if (v32 >= *(_QWORD *)(v12 + 24))
          {
            if (v33 < v31)
            {
              v192 = *(_QWORD *)(v30 + 16);
              v165 = *(__n128 *)v30;
              v37 = *v10;
              *(_QWORD *)(v30 + 16) = a2[-2].n128_u64[0];
              *(__n128 *)v30 = v37;
              a2[-2].n128_u64[0] = v192;
              *v10 = v165;
              if (*(_QWORD *)v30 < v28->n128_u64[0])
              {
                v38 = *v28;
                v39 = *(_QWORD *)(v12 + 40);
                v40 = *(_QWORD *)(v30 + 16);
                *v28 = *(__n128 *)v30;
                *(_QWORD *)(v12 + 40) = v40;
                *(_QWORD *)(v30 + 16) = v39;
                *(__n128 *)v30 = v38;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(_QWORD *)(v12 + 40);
              v36 = a2[-2].n128_u64[0];
              *v28 = *v10;
              *(_QWORD *)(v12 + 40) = v36;
              a2[-2].n128_u64[0] = v35;
              goto LABEL_32;
            }
            v43 = *v28;
            v44 = *(_QWORD *)(v12 + 40);
            v45 = *(_QWORD *)(v30 + 16);
            *v28 = *(__n128 *)v30;
            *(_QWORD *)(v12 + 40) = v45;
            *(_QWORD *)(v30 + 16) = v44;
            *(__n128 *)v30 = v43;
            if (v10->n128_u64[0] < *(_QWORD *)v30)
            {
              v194 = *(_QWORD *)(v30 + 16);
              v167 = *(__n128 *)v30;
              v46 = *v10;
              *(_QWORD *)(v30 + 16) = a2[-2].n128_u64[0];
              *(__n128 *)v30 = v46;
              v34 = v167;
              a2[-2].n128_u64[0] = v194;
LABEL_32:
              *v10 = v34;
            }
          }
          v47 = (__int128 *)(v12 + 48);
          v48 = v12 + 24 * v15;
          v51 = *(_QWORD *)(v48 + 24);
          v49 = v48 + 24;
          v50 = v51;
          v52 = *v11;
          if (v51 >= *(_QWORD *)(v12 + 48))
          {
            if (v52 < v50)
            {
              v195 = *(_QWORD *)(v49 + 16);
              v168 = *(_OWORD *)v49;
              v56 = *(_OWORD *)v11;
              *(_QWORD *)(v49 + 16) = a2[-4].n128_u64[1];
              *(_OWORD *)v49 = v56;
              a2[-4].n128_u64[1] = v195;
              *(_OWORD *)v11 = v168;
              if (*(_QWORD *)v49 < *(_QWORD *)v47)
              {
                v57 = *v47;
                v58 = *(_QWORD *)(v12 + 64);
                v59 = *(_QWORD *)(v49 + 16);
                *v47 = *(_OWORD *)v49;
                *(_QWORD *)(v12 + 64) = v59;
                *(_QWORD *)(v49 + 16) = v58;
                *(_OWORD *)v49 = v57;
              }
            }
          }
          else
          {
            if (v52 < v50)
            {
              v53 = *v47;
              v54 = *(_QWORD *)(v12 + 64);
              v55 = a2[-4].n128_u64[1];
              *v47 = *(_OWORD *)v11;
              *(_QWORD *)(v12 + 64) = v55;
              a2[-4].n128_u64[1] = v54;
              goto LABEL_41;
            }
            v60 = *v47;
            v61 = *(_QWORD *)(v12 + 64);
            v62 = *(_QWORD *)(v49 + 16);
            *v47 = *(_OWORD *)v49;
            *(_QWORD *)(v12 + 64) = v62;
            *(_QWORD *)(v49 + 16) = v61;
            *(_OWORD *)v49 = v60;
            if (*v11 < *(_QWORD *)v49)
            {
              v196 = *(_QWORD *)(v49 + 16);
              v169 = *(_OWORD *)v49;
              v63 = *(_OWORD *)v11;
              *(_QWORD *)(v49 + 16) = a2[-4].n128_u64[1];
              *(_OWORD *)v49 = v63;
              v53 = v169;
              a2[-4].n128_u64[1] = v196;
LABEL_41:
              *(_OWORD *)v11 = v53;
            }
          }
          v64 = *v16;
          v65 = *(_QWORD *)v49;
          if (*v16 >= *(_QWORD *)v30)
          {
            if (v65 < v64)
            {
              v198 = v16[2];
              v171 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              v16[2] = *(_QWORD *)(v49 + 16);
              *(_QWORD *)(v49 + 16) = v198;
              *(__n128 *)v49 = v171;
              if (*v16 < *(_QWORD *)v30)
              {
                v199 = *(_QWORD *)(v30 + 16);
                v172 = *(__n128 *)v30;
                *(_OWORD *)v30 = *(_OWORD *)v16;
                *(_QWORD *)(v30 + 16) = v16[2];
                v16[2] = v199;
                *(__n128 *)v16 = v172;
              }
            }
          }
          else
          {
            if (v65 < v64)
            {
              v197 = *(_QWORD *)(v30 + 16);
              v170 = *(__n128 *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v49;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v49 + 16);
              goto LABEL_50;
            }
            v200 = *(_QWORD *)(v30 + 16);
            v173 = *(__n128 *)v30;
            *(_OWORD *)v30 = *(_OWORD *)v16;
            *(_QWORD *)(v30 + 16) = v16[2];
            v16[2] = v200;
            *(__n128 *)v16 = v173;
            if (*(_QWORD *)v49 < *v16)
            {
              v197 = v16[2];
              v170 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              v16[2] = *(_QWORD *)(v49 + 16);
LABEL_50:
              *(_QWORD *)(v49 + 16) = v197;
              *(__n128 *)v49 = v170;
            }
          }
          v201 = *(_QWORD *)(v12 + 16);
          v174 = *(__n128 *)v12;
          v66 = *(__n128 *)v16;
          *(_QWORD *)(v12 + 16) = v16[2];
          *(__n128 *)v12 = v66;
          v16[2] = v201;
          *(__n128 *)v16 = v174;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *v16)
        {
          if (v17 < v20)
          {
            v189 = *(_QWORD *)(v12 + 16);
            v162 = *(__n128 *)v12;
            v24 = *(_OWORD *)v9;
            *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
            *(_OWORD *)v12 = v24;
            a2[-1].n128_u64[1] = v189;
            *(__n128 *)v9 = v162;
            if (*(_QWORD *)v12 < *v16)
            {
              v190 = v16[2];
              v163 = *(__n128 *)v16;
              v25 = *(__n128 *)v12;
              v16[2] = *(_QWORD *)(v12 + 16);
              *(__n128 *)v16 = v25;
              *(_QWORD *)(v12 + 16) = v190;
              *(__n128 *)v12 = v163;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v193 = v16[2];
            v166 = *(__n128 *)v16;
            v41 = *(__n128 *)v12;
            v16[2] = *(_QWORD *)(v12 + 16);
            *(__n128 *)v16 = v41;
            *(_QWORD *)(v12 + 16) = v193;
            *(__n128 *)v12 = v166;
            if (*v9 >= *(_QWORD *)v12)
              goto LABEL_52;
            v186 = *(_QWORD *)(v12 + 16);
            v159 = *(__n128 *)v12;
            v42 = *(_OWORD *)v9;
            *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
            *(_OWORD *)v12 = v42;
          }
          else
          {
            v186 = v16[2];
            v159 = *(__n128 *)v16;
            v21 = *(_OWORD *)v9;
            v16[2] = a2[-1].n128_u64[1];
            *(_OWORD *)v16 = v21;
          }
          a2[-1].n128_u64[1] = v186;
          *(__n128 *)v9 = v159;
        }
LABEL_52:
        --a3;
        v67 = *(__n128 **)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 24) >= (unint64_t)v67)
        {
          v156 = *(__n128 *)(v12 + 8);
          if ((unint64_t)v67 >= *v9)
          {
            v84 = v12 + 24;
            do
            {
              v12 = v84;
              if (v84 >= (unint64_t)a2)
                break;
              v84 += 24;
            }
            while ((unint64_t)v67 >= *(_QWORD *)v12);
          }
          else
          {
            v82 = (__n128 *)(v12 + 24);
            do
            {
              if (v82 == a2)
                goto LABEL_188;
              v83 = v82->n128_u64[0];
              v82 = (__n128 *)((char *)v82 + 24);
            }
            while ((unint64_t)v67 >= v83);
            v12 = (unint64_t)&v82[-2].n128_u64[1];
          }
          v85 = (unint64_t)a2;
          if (v12 < (unint64_t)a2)
          {
            v85 = (unint64_t)a2;
            while (v85 != a1)
            {
              v86 = *(_QWORD *)(v85 - 24);
              v85 -= 24;
              if ((unint64_t)v67 >= v86)
                goto LABEL_98;
            }
            goto LABEL_188;
          }
LABEL_98:
          if (v12 < v85)
          {
            v203 = *(_QWORD *)(v12 + 16);
            v176 = *(__n128 *)v12;
            v87 = *(__n128 *)v85;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v85 + 16);
            *(__n128 *)v12 = v87;
            *(_QWORD *)(v85 + 16) = v203;
            *(__n128 *)v85 = v176;
            v88 = (__n128 *)(v12 + 24);
            while (v88 != a2)
            {
              v89 = v88->n128_u64[0];
              v88 = (__n128 *)((char *)v88 + 24);
              if ((unint64_t)v67 < v89)
              {
                v12 = (unint64_t)&v88[-2].n128_u64[1];
                while (v85 != a1)
                {
                  v90 = *(_QWORD *)(v85 - 24);
                  v85 -= 24;
                  if ((unint64_t)v67 >= v90)
                    goto LABEL_98;
                }
                goto LABEL_188;
              }
            }
            goto LABEL_188;
          }
          if (v12 - 24 != a1)
          {
            v91 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)a1 = v91;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 24) = v67;
          result = v156;
          *(__n128 *)(v12 - 16) = v156;
          continue;
        }
        v68 = 0;
        v155 = *(__n128 *)(v12 + 8);
        do
        {
          v69 = (__n128 *)(v12 + v68 + 24);
          if (v69 == a2)
            goto LABEL_188;
          v68 += 24;
        }
        while (v69->n128_u64[0] < (unint64_t)v67);
        v70 = v12 + v68;
        v71 = a2;
        if (v68 != 24)
        {
          while (v71 != (__n128 *)v12)
          {
            v72 = v71[-2].n128_u64[1];
            v71 = (__n128 *)((char *)v71 - 24);
            if (v72 < (unint64_t)v67)
              goto LABEL_64;
          }
          goto LABEL_188;
        }
        v71 = a2;
        do
        {
          if (v70 >= (unint64_t)v71)
            break;
          v73 = v71[-2].n128_u64[1];
          v71 = (__n128 *)((char *)v71 - 24);
        }
        while (v73 >= (unint64_t)v67);
LABEL_64:
        v12 += v68;
        if (v70 < (unint64_t)v71)
        {
          v74 = (unint64_t)v71;
          do
          {
            v202 = *(_QWORD *)(v12 + 16);
            v175 = *(__n128 *)v12;
            v75 = *(__n128 *)v74;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v74 + 16);
            *(__n128 *)v12 = v75;
            *(_QWORD *)(v74 + 16) = v202;
            *(__n128 *)v74 = v175;
            v76 = (__n128 *)(v12 + 24);
            do
            {
              if (v76 == a2)
                goto LABEL_188;
              v77 = v76->n128_u64[0];
              v76 = (__n128 *)((char *)v76 + 24);
            }
            while (v77 < (unint64_t)v67);
            v12 = (unint64_t)&v76[-2].n128_u64[1];
            do
            {
              if (v74 == a1)
                goto LABEL_188;
              v78 = *(_QWORD *)(v74 - 24);
              v74 -= 24;
            }
            while (v78 >= (unint64_t)v67);
          }
          while (v12 < v74);
        }
        if (v12 - 24 != a1)
        {
          v79 = *(_OWORD *)(v12 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
          *(_OWORD *)a1 = v79;
        }
        *(_QWORD *)(v12 - 24) = v67;
        *(__n128 *)(v12 - 16) = v155;
        if (v70 < (unint64_t)v71)
        {
LABEL_78:
          a4 = 0;
          continue;
        }
        {
          if (v80)
            continue;
          goto LABEL_78;
        }
        a2 = (__n128 *)(v12 - 24);
        if (!v80)
          goto LABEL_1;
        return result;
    }
  }
}

  v6 = a1;
  while (2)
  {
    v7 = 1 - a3;
LABEL_3:
    v8 = v7;
    v9 = (char *)a2 - (char *)v6;
    v10 = ((char *)a2 - (char *)v6) >> 4;
    if (v10 < 2)
      return;
    a1 = v6;
    switch(v10)
    {
      case 2uLL:
        v12 = *(a2 - 2);
        v11 = a2 - 2;
        v13 = v12 == *(_QWORD *)v6;
        if (v12 < *(_QWORD *)v6 || v13 && ((_BYTE)v11[1] & 0x7Fu) < (*((_BYTE *)v6 + 8) & 0x7Fu))
        {
          v34 = *v6;
          v14 = *v11;
          *((_WORD *)v6 + 4) = *((_WORD *)v11 + 4);
          *(_QWORD *)v6 = v14;
          *v11 = v34;
          *((_WORD *)v11 + 4) = WORD4(v34);
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        v15 = v6 + 1;
        v16 = v6 + 2;
        v18 = *(a2 - 2);
        v17 = a2 - 2;
        v19 = *((_QWORD *)a1 + 4);
        v20 = v18 == v19;
        if (v18 < v19 || v20 && ((_BYTE)v17[1] & 0x7Fu) < (*((_BYTE *)a1 + 40) & 0x7Fu))
        {
          v35 = *v16;
          v21 = *((_WORD *)v17 + 4);
          *(_QWORD *)v16 = *v17;
          *((_WORD *)a1 + 20) = v21;
          *v17 = v35;
          *((_WORD *)v17 + 4) = WORD4(v35);
          v22 = *((_QWORD *)a1 + 4);
          v23 = *((_QWORD *)a1 + 2);
          if (v22 < v23 || v22 == v23 && (*((_BYTE *)a1 + 40) & 0x7Fu) < (*((_BYTE *)a1 + 24) & 0x7Fu))
          {
            v36 = *v15;
            *(_QWORD *)v15 = *(_QWORD *)v16;
            *((_WORD *)a1 + 12) = *((_WORD *)a1 + 20);
            *(_QWORD *)v16 = v36;
            *((_WORD *)a1 + 20) = WORD4(v36);
            v24 = *((_QWORD *)a1 + 2);
            if (v24 < *(_QWORD *)a1
              || v24 == *(_QWORD *)a1 && (*((_BYTE *)a1 + 24) & 0x7Fu) < (*((_BYTE *)a1 + 8) & 0x7Fu))
            {
              v37 = *a1;
              *(_QWORD *)a1 = *(_QWORD *)v15;
              *((_WORD *)a1 + 4) = *((_WORD *)a1 + 12);
              *(_QWORD *)v15 = v37;
              *((_WORD *)a1 + 12) = WORD4(v37);
            }
          }
        }
        return;
      case 5uLL:
        return;
      default:
        v25 = a4;
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          else
          return;
        }
        if (v8 == 1)
        {
          return;
        }
        v26 = (unint64_t *)(a2 - 2);
        v27 = v10 >> 1;
        v28 = &v6[v10 >> 1];
        if ((unint64_t)v9 >= 0x801)
        {
          v38 = *v6;
          v32 = *(_QWORD *)v28;
          *((_WORD *)v6 + 4) = *((_WORD *)v28 + 4);
          *(_QWORD *)v6 = v32;
          *((_WORD *)v28 + 4) = WORD4(v38);
          *(_QWORD *)v28 = v38;
        }
        else
        {
        }
        if ((v25 & 1) == 0)
        {
          v33 = *((_QWORD *)v6 - 2);
          if (v33 >= *(_QWORD *)v6
            && (v33 != *(_QWORD *)v6 || (*((_BYTE *)v6 - 8) & 0x7Fu) >= (*((_BYTE *)v6 + 8) & 0x7Fu)))
          {
            goto LABEL_33;
          }
        }
        LOBYTE(a4) = v25;
        if ((v30 & 1) == 0)
          goto LABEL_32;
        v6 = (__int128 *)(v29 + 16);
        {
          v7 = v8 + 1;
          a4 = v25;
          if (!v31)
          {
LABEL_32:
            v6 = (__int128 *)(v29 + 16);
LABEL_33:
            a4 = 0;
            a3 = -v8;
            continue;
          }
          goto LABEL_3;
        }
        a3 = -v8;
        a2 = (uint64_t *)v29;
        a4 = v25;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

  v6 = a1;
LABEL_2:
  v7 = 1 - a3;
  while (2)
  {
    a1 = v6;
    v8 = v7;
    v9 = (char *)a2 - (char *)v6;
    v10 = ((char *)a2 - (char *)v6) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_DWORD *)a2 - 2) > *((_DWORD *)v6 + 2))
        {
          v31 = (__n128)*v6;
          v11 = *(a2 - 2);
          *((_DWORD *)v6 + 2) = *((_DWORD *)a2 - 2);
          *(_QWORD *)v6 = v11;
          *(a2 - 2) = v31.n128_u64[0];
          *((_DWORD *)a2 - 2) = v31.n128_u32[2];
        }
        return;
      case 3uLL:
        v12 = (uint64_t *)(v6 + 1);
        v13 = a2 - 2;
        v14 = *((_DWORD *)v6 + 6);
        v15 = *((_DWORD *)a2 - 2);
        if (v14 > *((_DWORD *)v6 + 2))
        {
          if (v15 <= v14)
          {
            v39 = *v6;
            *(_QWORD *)v6 = *v12;
            *((_DWORD *)v6 + 2) = *((_DWORD *)v6 + 6);
            *v12 = v39;
            *((_DWORD *)v6 + 6) = DWORD2(v39);
            if (*((_DWORD *)a2 - 2) <= *((_DWORD *)v6 + 6))
              return;
            v32 = *(_OWORD *)v12;
            v22 = *((_DWORD *)a2 - 2);
            *v12 = *v13;
            *((_DWORD *)v6 + 6) = v22;
          }
          else
          {
            v32 = *v6;
            v16 = *v13;
            *((_DWORD *)v6 + 2) = *((_DWORD *)a2 - 2);
            *(_QWORD *)v6 = v16;
          }
          *v13 = v32;
          *((_DWORD *)a2 - 2) = DWORD2(v32);
          return;
        }
        if (v15 > v14)
        {
          v33 = *(_OWORD *)v12;
          v17 = *((_DWORD *)a2 - 2);
          *v12 = *v13;
          *((_DWORD *)v6 + 6) = v17;
          *v13 = v33;
          *((_DWORD *)a2 - 2) = DWORD2(v33);
          if (*((_DWORD *)v6 + 6) > *((_DWORD *)v6 + 2))
          {
            v34 = *v6;
            *(_QWORD *)v6 = *v12;
            *((_DWORD *)v6 + 2) = *((_DWORD *)v6 + 6);
            *v12 = v34;
            *((_DWORD *)v6 + 6) = DWORD2(v34);
          }
        }
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((__n128 *)v6, (__n128 *)v6 + 1, v6 + 2, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        v18 = v6 + 1;
        v19 = v6 + 2;
        v20 = a1 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((__n128 *)a1, (__n128 *)a1 + 1, a1 + 2, (uint64_t)(a1 + 3));
        if (*((_DWORD *)a2 - 2) > *((_DWORD *)a1 + 14))
        {
          v35 = *v20;
          v21 = *((_DWORD *)a2 - 2);
          *(_QWORD *)v20 = *(a2 - 2);
          *((_DWORD *)a1 + 14) = v21;
          *(a2 - 2) = v35;
          *((_DWORD *)a2 - 2) = DWORD2(v35);
          if (*((_DWORD *)a1 + 14) > *((_DWORD *)a1 + 10))
          {
            v36 = *v19;
            *(_QWORD *)v19 = *(_QWORD *)v20;
            *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 14);
            *(_QWORD *)v20 = v36;
            *((_DWORD *)a1 + 14) = DWORD2(v36);
            if (*((_DWORD *)a1 + 10) > *((_DWORD *)a1 + 6))
            {
              v37 = *v18;
              *(_QWORD *)v18 = *(_QWORD *)v19;
              *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
              *(_QWORD *)v19 = v37;
              *((_DWORD *)a1 + 10) = DWORD2(v37);
              if (*((_DWORD *)a1 + 6) > *((_DWORD *)a1 + 2))
              {
                v38 = (__n128)*a1;
                *(_QWORD *)a1 = *(_QWORD *)v18;
                *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
                *(_QWORD *)v18 = v38.n128_u64[0];
                *((_DWORD *)a1 + 6) = v38.n128_u32[2];
              }
            }
          }
        }
        return;
      default:
        v23 = a4;
        if (v9 > 383)
        {
          if (v8 == 1)
          {
            std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,JSC::CallEdge *>((uint64_t)v6, a2, (__int128 *)a2);
            return;
          }
          v24 = (uint64_t)(a2 - 2);
          v25 = v10 >> 1;
          v26 = &v6[v10 >> 1];
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(&v6[v10 >> 1], v6, v24);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(v6, &v6[v10 >> 1], v24);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(v6 + 1, v26 - 1, (uint64_t)(a2 - 4));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(v6 + 2, &v6[v25 + 1], (uint64_t)(a2 - 6));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(v26 - 1, v26, (uint64_t)&v6[v25 + 1]);
            v40 = (__n128)*v6;
            v27 = *(_QWORD *)v26;
            *((_DWORD *)v6 + 2) = *((_DWORD *)v26 + 2);
            *(_QWORD *)v6 = v27;
            *((_DWORD *)v26 + 2) = v40.n128_u32[2];
            *(_QWORD *)v26 = v40.n128_u64[0];
          }
          if ((v23 & 1) == 0 && *((_DWORD *)v6 - 2) <= *((_DWORD *)v6 + 2))
          {
            v6 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallEdge *,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &>(v6, a2);
            goto LABEL_36;
          }
          v28 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallEdge *,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &>(v6, a2);
          LOBYTE(a4) = v23;
          if ((v29 & 1) == 0)
            goto LABEL_35;
          v30 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((uint64_t)v6, (uint64_t)v28);
          v6 = v28 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((uint64_t)(v28 + 1), (uint64_t)a2))
          {
            v7 = v8 + 1;
            a4 = v23;
            if (v30)
              continue;
LABEL_35:
            std::__introsort<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,false>(a1, v28, -v8, a4 & 1);
            v6 = v28 + 1;
LABEL_36:
            a4 = 0;
            a3 = -v8;
            goto LABEL_2;
          }
          a3 = -v8;
          a2 = (uint64_t *)v28;
          a4 = v23;
          if (v30)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
          std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((uint64_t)v6, (uint64_t)a2);
        else
          std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(v6, a2);
        return;
    }
  }
}

  v4 = 1 - a3;
  while (2)
  {
    v5 = v4;
    v6 = a2 - (unsigned __int8 *)result;
    v7 = (a2 - (unsigned __int8 *)result) >> 3;
    if (v7 < 2)
      return result;
    switch(v7)
    {
      case 2uLL:
        if (__PAIR64__(*(a2 - 3), *(a2 - 4)) < __PAIR64__(*((unsigned __int8 *)result + 5), *((unsigned __int8 *)result + 4)))
        {
          v8 = (uint64_t *)(a2 - 8);
          v9 = *result;
          v10 = *((_DWORD *)a2 - 2);
          *((_WORD *)result + 2) = *((_WORD *)a2 - 2);
          *(_DWORD *)result = v10;
          *((_DWORD *)a2 - 2) = v9;
          v11 = HIDWORD(v9);
          goto LABEL_12;
        }
        return result;
      case 3uLL:
        v8 = result + 1;
        v12 = a2 - 8;
        v13 = *((unsigned __int8 *)result + 12);
        v14 = *((unsigned __int8 *)result + 13);
        if (__PAIR64__(v14, v13) >= __PAIR64__(*((unsigned __int8 *)result + 5), *((unsigned __int8 *)result + 4)))
        {
          if (__PAIR64__(*(a2 - 3), *(a2 - 4)) >= __PAIR64__(v14, v13))
            return result;
          v17 = result[1];
          v18 = *(_DWORD *)v12;
          *((_WORD *)result + 6) = *((_WORD *)a2 - 2);
          *(_DWORD *)v8 = v18;
          *(_DWORD *)v12 = v17;
          *((_WORD *)a2 - 2) = WORD2(v17);
          if (__PAIR64__(*((unsigned __int8 *)result + 13), *((unsigned __int8 *)result + 12)) >= __PAIR64__(*((unsigned __int8 *)result + 5), *((unsigned __int8 *)result + 4)))return result;
          v15 = *result;
          *(_DWORD *)result = *(_DWORD *)v8;
          *((_WORD *)result + 2) = *((_WORD *)result + 6);
        }
        else
        {
          if (__PAIR64__(*(a2 - 3), *(a2 - 4)) >= __PAIR64__(v14, v13))
          {
            v19 = *result;
            *(_DWORD *)result = *(_DWORD *)v8;
            *((_WORD *)result + 2) = *((_WORD *)result + 6);
            *((_DWORD *)result + 2) = v19;
            *((_WORD *)result + 6) = WORD2(v19);
            if (__PAIR64__(*(a2 - 3), *(a2 - 4)) >= __PAIR64__(BYTE5(v19), BYTE4(v19)))
              return result;
            v15 = *v8;
            v20 = *(_DWORD *)v12;
            *((_WORD *)result + 6) = *((_WORD *)a2 - 2);
            *(_DWORD *)v8 = v20;
          }
          else
          {
            v15 = *result;
            v16 = *(_DWORD *)v12;
            *((_WORD *)result + 2) = *((_WORD *)a2 - 2);
            *(_DWORD *)result = v16;
          }
          v8 = (uint64_t *)(a2 - 8);
        }
        *(_DWORD *)v8 = v15;
        v11 = HIDWORD(v15);
LABEL_12:
        *((_WORD *)v8 + 2) = v11;
        return result;
      case 4uLL:
        v21 = result + 1;
        v22 = result + 2;
        v23 = *((unsigned __int8 *)result + 12);
        v24 = *((unsigned __int8 *)result + 13);
        v25 = *((unsigned __int8 *)result + 5);
        if (v24 < v25 || (v26 = *((unsigned __int8 *)result + 4), v24 == v25) && v23 < v26)
        {
          v27 = *((unsigned __int8 *)result + 21);
          if (v27 < v24 || (v28 = *((unsigned __int8 *)result + 20), v27 == v24) && v28 < v23)
          {
            v29 = *result;
            *(_DWORD *)result = *v22;
            *((_WORD *)result + 2) = *((_WORD *)result + 10);
LABEL_25:
            v30 = result + 2;
LABEL_26:
            *(_DWORD *)v30 = v29;
            *((_WORD *)v30 + 2) = WORD2(v29);
            v27 = *((unsigned __int8 *)result + 21);
            goto LABEL_27;
          }
          v38 = *result;
          *(_DWORD *)result = *v21;
          *((_WORD *)result + 2) = *((_WORD *)result + 6);
          *((_DWORD *)result + 2) = v38;
          *((_WORD *)result + 6) = WORD2(v38);
          if (v27 < BYTE5(v38) || v27 == BYTE5(v38) && v28 < BYTE4(v38))
          {
            v29 = *(_QWORD *)v21;
            *v21 = *v22;
            *((_WORD *)result + 6) = *((_WORD *)result + 10);
            goto LABEL_25;
          }
        }
        else
        {
          v27 = *((unsigned __int8 *)result + 21);
          if (__PAIR64__(v27, *((unsigned __int8 *)result + 20)) < __PAIR64__(v24, v23))
          {
            v36 = result[1];
            *((_WORD *)result + 6) = *((_WORD *)result + 10);
            *v21 = *v22;
            *((_DWORD *)result + 4) = v36;
            *((_WORD *)result + 10) = WORD2(v36);
            v37 = *((unsigned __int8 *)result + 13);
            if (v37 < v25 || (v27 = BYTE5(v36), v37 == v25) && *((unsigned __int8 *)result + 12) < v26)
            {
              v29 = *result;
              *(_DWORD *)result = *v21;
              *((_WORD *)result + 2) = *((_WORD *)result + 6);
              v30 = result + 1;
              goto LABEL_26;
            }
          }
        }
LABEL_27:
        if (__PAIR64__(*(a2 - 3), *(a2 - 4)) < __PAIR64__(v27, *((unsigned __int8 *)result + 20)))
        {
          v31 = a2 - 8;
          v32 = result[2];
          v33 = *((_DWORD *)a2 - 2);
          *((_WORD *)result + 10) = *((_WORD *)a2 - 2);
          *v22 = v33;
          *(_DWORD *)v31 = v32;
          *((_WORD *)v31 + 2) = WORD2(v32);
          if (__PAIR64__(*((unsigned __int8 *)result + 21), *((unsigned __int8 *)result + 20)) < __PAIR64__(*((unsigned __int8 *)result + 13), *((unsigned __int8 *)result + 12)))
          {
            v34 = result[1];
            *((_WORD *)result + 6) = *((_WORD *)result + 10);
            *v21 = *v22;
            *((_DWORD *)result + 4) = v34;
            *((_WORD *)result + 10) = WORD2(v34);
            if (__PAIR64__(*((unsigned __int8 *)result + 13), *((unsigned __int8 *)result + 12)) < __PAIR64__(*((unsigned __int8 *)result + 5), *((unsigned __int8 *)result + 4)))
            {
              v35 = *result;
              *(_DWORD *)result = *v21;
              *((_WORD *)result + 2) = *((_WORD *)result + 6);
              *((_DWORD *)result + 2) = v35;
              *((_WORD *)result + 6) = WORD2(v35);
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,0>((uint64_t)result, (int *)result + 2, (int *)result + 4, (int *)result + 6, (int *)a2 - 2);
      default:
        v48 = v5;
        v49 = (int *)a2;
        v39 = a4;
        v50 = (uint64_t)result;
        if (v6 <= 191)
        {
          if ((a4 & 1) != 0)
            return (uint64_t *)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t)result, (uint64_t)a2);
          else
            return (uint64_t *)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((unsigned __int8 *)result, a2);
        }
        if (v5 == 1)
          return (uint64_t *)std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t)result, (int *)a2, (uint64_t *)a2);
        v40 = (int *)(a2 - 8);
        v41 = v7 >> 1;
        v42 = &result[v7 >> 1];
        if ((unint64_t)v6 < 0x401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(&result[v41], (int *)result, v40);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(result, (int *)&result[v41], v40);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)(v50 + 8), (int *)v42 - 2, v49 - 4);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)(v50 + 16), (int *)(v50 + 8 + 8 * v41), v49 - 6);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(v42 - 1, (int *)v42, (int *)(v50 + 8 + 8 * v41));
          v43 = *(_QWORD *)v50;
          v44 = *(_DWORD *)v42;
          *(_WORD *)(v50 + 4) = *((_WORD *)v42 + 2);
          *(_DWORD *)v50 = v44;
          *(_DWORD *)v42 = v43;
          *((_WORD *)v42 + 2) = WORD2(v43);
        }
        if ((v39 & 1) == 0
          && __PAIR64__(*(unsigned __int8 *)(v50 - 3), *(unsigned __int8 *)(v50 - 4)) >= __PAIR64__(*(unsigned __int8 *)(v50 + 5), *(unsigned __int8 *)(v50 + 4)))
        {
          result = (uint64_t *)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &>((uint64_t *)v50, v49);
          goto LABEL_52;
        }
        v45 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &>((uint64_t *)v50, (unint64_t)v49);
        LOBYTE(a4) = v39;
        if ((v46 & 1) == 0)
          goto LABEL_51;
        v47 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(v50, v45);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(v45 + 8, (uint64_t)v49))
        {
          a2 = (unsigned __int8 *)v49;
          v4 = v48 + 1;
          a4 = v39;
          result = (uint64_t *)(v45 + 8);
          if (v47)
            continue;
LABEL_51:
          std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(v50, v45, -v48, a4 & 1);
          result = (uint64_t *)(v45 + 8);
LABEL_52:
          a4 = 0;
          a2 = (unsigned __int8 *)v49;
          a3 = -v48;
          goto LABEL_1;
        }
        a3 = -v48;
        a2 = (unsigned __int8 *)v45;
        result = (uint64_t *)v50;
        a4 = v39;
        if (v47)
          return result;
        goto LABEL_1;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v168 = a2[-1].n128_i32[0];
        v167 = a2 - 1;
        v169 = v167->n128_i32[2];
        v170 = v12->n128_i32[2];
        v171 = v168 < (signed __int32)v12->n128_u32[0];
        v205 = v169 == v170;
        v172 = v169 < v170;
        if (!v205)
          v171 = v172;
        if (v171)
        {
          v320 = *v12;
          *v12 = *v167;
          *v167 = v320;
        }
        return;
      case 3:
        v106 = v12 + 1;
        v173 = v12[1].n128_i32[0];
        v107 = (uint64_t)&a2[-1];
        v174 = v12[1].n128_i32[2];
        v175 = v12->n128_i32[2];
        v176 = v173 < (signed __int32)v12->n128_u32[0];
        v205 = v174 == v175;
        v177 = v174 < v175;
        if (!v205)
          v176 = v177;
        v178 = a2[-1].n128_i32[2];
        v179 = (signed __int32)a2[-1].n128_u32[0] < v173;
        if (v178 != v174)
          v179 = v178 < v174;
        if (v176)
        {
          if (!v179)
            goto LABEL_286;
          v321 = *v12;
          *v12 = *(__n128 *)v107;
          v180 = v321;
          goto LABEL_290;
        }
        if (v179)
        {
          v275 = *v106;
          *v106 = *(__n128 *)v107;
          *(__n128 *)v107 = v275;
          v276 = v12[1].n128_i32[2];
          v277 = v12->n128_i32[2];
          v278 = (signed __int32)v12[1].n128_u32[0] < (signed __int32)v12->n128_u32[0];
          v205 = v276 == v277;
          v279 = v276 < v277;
          if (!v205)
            v278 = v279;
          if (v278)
          {
            v324 = *v12;
            *v12 = *v106;
            *v106 = v324;
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v181 = v12 + 1;
        v182 = v12 + 2;
        v183 = v12 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        v185 = a2[-1].n128_i32[0];
        v184 = a2 - 1;
        v186 = v184->n128_i32[2];
        v187 = v12[3].n128_i32[2];
        v188 = v185 < (signed __int32)v12[3].n128_u32[0];
        v205 = v186 == v187;
        v189 = v186 < v187;
        if (!v205)
          v188 = v189;
        if (v188)
        {
          v190 = *v183;
          *v183 = *v184;
          *v184 = v190;
          v191 = v12[3].n128_i32[2];
          v192 = v12[2].n128_i32[2];
          v193 = (signed __int32)v12[3].n128_u32[0] < (signed __int32)v12[2].n128_u32[0];
          v205 = v191 == v192;
          v194 = v191 < v192;
          if (!v205)
            v193 = v194;
          if (v193)
          {
            v195 = *v182;
            *v182 = *v183;
            *v183 = v195;
            v196 = v12[2].n128_i32[2];
            v197 = v12[1].n128_i32[2];
            v198 = (signed __int32)v12[2].n128_u32[0] < (signed __int32)v12[1].n128_u32[0];
            v205 = v196 == v197;
            v199 = v196 < v197;
            if (!v205)
              v198 = v199;
            if (v198)
            {
              v200 = *v181;
              *v181 = *v182;
              *v182 = v200;
              v201 = v12[1].n128_i32[2];
              v202 = v12->n128_i32[2];
              v203 = (signed __int32)v12[1].n128_u32[0] < (signed __int32)v12->n128_u32[0];
              v205 = v201 == v202;
              v204 = v201 < v202;
              if (!v205)
                v203 = v204;
              if (v203)
              {
                v322 = *v12;
                *v12 = *v181;
                *v181 = v322;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v224 = (unint64_t)(v14 - 2) >> 1;
              v225 = v224;
              do
              {
                v226 = v225;
                if (v224 >= v225)
                {
                  v227 = (2 * v225) | 1;
                  v228 = &v12[v227];
                  if (2 * v226 + 2 >= v14)
                  {
                    v230 = v228->n128_u32[0];
                  }
                  else
                  {
                    v229 = v228->n128_i32[2];
                    v230 = v228[1].n128_i32[0];
                    v231 = v228[1].n128_i32[2];
                    v205 = v229 == v231;
                    v232 = v229 < v231;
                    if (v205)
                      v232 = (signed __int32)v228->n128_u32[0] < v230;
                    if (v232)
                    {
                      ++v228;
                      v227 = 2 * v226 + 2;
                    }
                    else
                    {
                      v230 = v228->n128_u32[0];
                    }
                  }
                  v233 = &v12[v226];
                  v234 = v228->n128_i32[2];
                  v235 = v233->n128_u32[0];
                  v236 = v233->n128_i32[2];
                  v237 = v230 < (signed __int32)v233->n128_u32[0];
                  v205 = v234 == v236;
                  v238 = v234 < v236;
                  if (!v205)
                    v237 = v238;
                  if (!v237)
                  {
                    v239 = v233->n128_u32[1];
                    v240 = v233->n128_u32[3];
                    do
                    {
                      v241 = v233;
                      v233 = v228;
                      *v241 = *v228;
                      if (v224 < v227)
                        break;
                      v242 = (2 * v227) | 1;
                      v228 = &v12[v242];
                      v227 = 2 * v227 + 2;
                      if (v227 >= v14)
                      {
                        v243 = v228->n128_u32[0];
                        v227 = v242;
                      }
                      else
                      {
                        v243 = v228->n128_u32[0];
                        v244 = v228->n128_i32[2];
                        v245 = v228[1].n128_i32[2];
                        v205 = v244 == v245;
                        v246 = v244 < v245;
                        if (v205)
                          v246 = (signed __int32)v228->n128_u32[0] < (signed __int32)v228[1].n128_u32[0];
                        if (v246)
                        {
                          v243 = v228[1].n128_i32[0];
                          ++v228;
                        }
                        else
                        {
                          v227 = v242;
                        }
                      }
                      v247 = v228->n128_i32[2];
                      v248 = v243 < v235;
                      v205 = v247 == v236;
                      v249 = v247 < v236;
                      if (v205)
                        v249 = v248;
                    }
                    while (!v249);
                    v233->n128_u32[0] = v235;
                    v233->n128_u32[1] = v239;
                    v233->n128_u32[2] = v236;
                    v233->n128_u32[3] = v240;
                  }
                }
                v225 = v226 - 1;
              }
              while (v226);
              v250 = (unint64_t)v13 >> 4;
              do
              {
                v251 = 0;
                v323 = *v12;
                v252 = v12;
                do
                {
                  v253 = &v252[v251 + 1];
                  v254 = (2 * v251) | 1;
                  v255 = 2 * v251 + 2;
                  if (v255 < v250)
                  {
                    v256 = v253->n128_i32[2];
                    v257 = v253[1].n128_i32[2];
                    v258 = (signed __int32)v253->n128_u32[0] < (signed __int32)v253[1].n128_u32[0];
                    v205 = v256 == v257;
                    v259 = v256 < v257;
                    if (!v205)
                      v258 = v259;
                    if (v258)
                    {
                      ++v253;
                      v254 = v255;
                    }
                  }
                  *v252 = *v253;
                  v252 = v253;
                  v251 = v254;
                }
                while (v254 <= (uint64_t)((unint64_t)(v250 - 2) >> 1));
                if (v253 == --a2)
                {
                  *v253 = v323;
                }
                else
                {
                  *v253 = *a2;
                  *a2 = v323;
                  v260 = (char *)v253 - (char *)v12 + 16;
                  if (v260 >= 17)
                  {
                    v261 = (((unint64_t)v260 >> 4) - 2) >> 1;
                    v262 = &v12[v261];
                    v263 = v262->n128_i32[2];
                    v264 = v253->n128_u32[0];
                    v265 = v253->n128_i32[2];
                    v266 = (signed __int32)v262->n128_u32[0] < (signed __int32)v253->n128_u32[0];
                    v205 = v263 == v265;
                    v267 = v263 < v265;
                    if (!v205)
                      v266 = v267;
                    if (v266)
                    {
                      v268 = v253->n128_u32[1];
                      v269 = v253->n128_u32[3];
                      do
                      {
                        v270 = v253;
                        v253 = v262;
                        *v270 = *v262;
                        if (!v261)
                          break;
                        v261 = (v261 - 1) >> 1;
                        v262 = &v12[v261];
                        v271 = v262->n128_i32[2];
                        v272 = (signed __int32)v262->n128_u32[0] < v264;
                        v205 = v271 == v265;
                        v273 = v271 < v265;
                        if (!v205)
                          v272 = v273;
                      }
                      while (v272);
                      v253->n128_u32[0] = v264;
                      v253->n128_u32[1] = v268;
                      v253->n128_u32[2] = v265;
                      v253->n128_u32[3] = v269;
                    }
                  }
                }
              }
              while (v250-- > 2);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_i32[0];
          v18 = a2[-1].n128_i32[2];
          if ((unint64_t)v13 >= 0x801)
          {
            v19 = v16->n128_i32[2];
            v20 = v12->n128_i32[2];
            v21 = (signed __int32)v16->n128_u32[0] < (signed __int32)v12->n128_u32[0];
            v205 = v19 == v20;
            v22 = v19 < v20;
            if (!v205)
              v21 = v22;
            v23 = v17 < (signed __int32)v16->n128_u32[0];
            v205 = v18 == v19;
            v24 = v18 < v19;
            if (!v205)
              v23 = v24;
            if (v21)
            {
              if (v23)
              {
                v301 = *v12;
                *v12 = *v9;
LABEL_34:
                *v9 = v301;
                goto LABEL_35;
              }
              v307 = *v12;
              *v12 = *v16;
              *v16 = v307;
              v39 = a2[-1].n128_i32[2];
              v40 = v16->n128_i32[2];
              v41 = (signed __int32)a2[-1].n128_u32[0] < (signed __int32)v16->n128_u32[0];
              v205 = v39 == v40;
              v42 = v39 < v40;
              if (!v205)
                v41 = v42;
              if (v41)
              {
                v301 = *v16;
                *v16 = *v9;
                goto LABEL_34;
              }
            }
            else if (v23)
            {
              v303 = *v16;
              *v16 = *v9;
              *v9 = v303;
              v31 = v16->n128_i32[2];
              v32 = v12->n128_i32[2];
              v33 = (signed __int32)v16->n128_u32[0] < (signed __int32)v12->n128_u32[0];
              v205 = v31 == v32;
              v34 = v31 < v32;
              if (!v205)
                v33 = v34;
              if (v33)
              {
                v304 = *v12;
                *v12 = *v16;
                *v16 = v304;
              }
            }
LABEL_35:
            v43 = v12 + 1;
            v44 = &v12[v15];
            v47 = v44[-1].n128_i32[0];
            v45 = v44 - 1;
            v46 = v47;
            v48 = v45->n128_i32[2];
            v49 = v12[1].n128_i32[2];
            v50 = v47 < (signed __int32)v12[1].n128_u32[0];
            v205 = v48 == v49;
            v51 = v48 < v49;
            if (v205)
              v51 = v50;
            v52 = a2[-2].n128_i32[2];
            v53 = (signed __int32)a2[-2].n128_u32[0] < v46;
            if (v52 != v48)
              v53 = v52 < v48;
            if (v51)
            {
              if (v53)
              {
                v54 = *v43;
                *v43 = *v10;
LABEL_56:
                *v10 = v54;
                goto LABEL_57;
              }
              v64 = *v43;
              *v43 = *v45;
              *v45 = v64;
              v65 = a2[-2].n128_i32[2];
              v66 = v45->n128_i32[2];
              v67 = (signed __int32)a2[-2].n128_u32[0] < (signed __int32)v45->n128_u32[0];
              v205 = v65 == v66;
              v68 = v65 < v66;
              if (!v205)
                v67 = v68;
              if (v67)
              {
                v310 = *v45;
                *v45 = *v10;
                v54 = v310;
                goto LABEL_56;
              }
            }
            else if (v53)
            {
              v308 = *v45;
              *v45 = *v10;
              *v10 = v308;
              v55 = v45->n128_i32[2];
              v56 = v12[1].n128_i32[2];
              v57 = (signed __int32)v45->n128_u32[0] < (signed __int32)v12[1].n128_u32[0];
              v205 = v55 == v56;
              v58 = v55 < v56;
              if (!v205)
                v57 = v58;
              if (v57)
              {
                v59 = *v43;
                *v43 = *v45;
                *v45 = v59;
              }
            }
LABEL_57:
            v69 = v12 + 2;
            v70 = &v12[v15];
            v73 = v70[1].n128_i32[0];
            v71 = v70 + 1;
            v72 = v73;
            v74 = v71->n128_i32[2];
            v75 = v12[2].n128_i32[2];
            v76 = v73 < (signed __int32)v12[2].n128_u32[0];
            v205 = v74 == v75;
            v77 = v74 < v75;
            if (v205)
              v77 = v76;
            v78 = a2[-3].n128_i32[2];
            v79 = (signed __int32)a2[-3].n128_u32[0] < v72;
            if (v78 != v74)
              v79 = v78 < v74;
            if (v77)
            {
              if (v79)
              {
                v80 = *v69;
                *v69 = *v11;
LABEL_73:
                *v11 = v80;
                goto LABEL_74;
              }
              v86 = *v69;
              *v69 = *v71;
              *v71 = v86;
              v87 = a2[-3].n128_i32[2];
              v88 = v71->n128_i32[2];
              v89 = (signed __int32)a2[-3].n128_u32[0] < (signed __int32)v71->n128_u32[0];
              v205 = v87 == v88;
              v90 = v87 < v88;
              if (!v205)
                v89 = v90;
              if (v89)
              {
                v312 = *v71;
                *v71 = *v11;
                v80 = v312;
                goto LABEL_73;
              }
            }
            else if (v79)
            {
              v311 = *v71;
              *v71 = *v11;
              *v11 = v311;
              v81 = v71->n128_i32[2];
              v82 = v12[2].n128_i32[2];
              v83 = (signed __int32)v71->n128_u32[0] < (signed __int32)v12[2].n128_u32[0];
              v205 = v81 == v82;
              v84 = v81 < v82;
              if (!v205)
                v83 = v84;
              if (v83)
              {
                v85 = *v69;
                *v69 = *v71;
                *v71 = v85;
              }
            }
LABEL_74:
            v91 = v16->n128_i32[2];
            v92 = v45->n128_i32[2];
            v93 = (signed __int32)v16->n128_u32[0] < (signed __int32)v45->n128_u32[0];
            v205 = v91 == v92;
            v94 = v91 < v92;
            if (!v205)
              v93 = v94;
            v95 = v71->n128_i32[2];
            v96 = (signed __int32)v71->n128_u32[0] < (signed __int32)v16->n128_u32[0];
            v205 = v95 == v91;
            v97 = v95 < v91;
            if (!v205)
              v96 = v97;
            if (!v93)
            {
              if (v96)
              {
                v314 = *v16;
                *v16 = *v71;
                *v71 = v314;
                v98 = v16->n128_i32[2];
                v99 = v45->n128_i32[2];
                v100 = (signed __int32)v16->n128_u32[0] < (signed __int32)v45->n128_u32[0];
                v205 = v98 == v99;
                v101 = v98 < v99;
                if (!v205)
                  v100 = v101;
                if (v100)
                {
                  v315 = *v45;
                  *v45 = *v16;
                  *v16 = v315;
                }
              }
              goto LABEL_91;
            }
            if (v96)
            {
              v313 = *v45;
              *v45 = *v71;
            }
            else
            {
              v316 = *v45;
              *v45 = *v16;
              *v16 = v316;
              v102 = v71->n128_i32[2];
              v103 = v16->n128_i32[2];
              v104 = (signed __int32)v71->n128_u32[0] < (signed __int32)v16->n128_u32[0];
              v205 = v102 == v103;
              v105 = v102 < v103;
              if (!v205)
                v104 = v105;
              if (!v104)
                goto LABEL_91;
              v313 = *v16;
              *v16 = *v71;
            }
            *v71 = v313;
LABEL_91:
            v317 = *v12;
            *v12 = *v16;
            a5 = v317;
            *v16 = v317;
            goto LABEL_92;
          }
          v25 = v12->n128_i32[2];
          v26 = v16->n128_i32[2];
          v27 = (signed __int32)v12->n128_u32[0] < (signed __int32)v16->n128_u32[0];
          v205 = v25 == v26;
          v28 = v25 < v26;
          if (!v205)
            v27 = v28;
          v29 = v17 < (signed __int32)v12->n128_u32[0];
          v205 = v18 == v25;
          v30 = v18 < v25;
          if (!v205)
            v29 = v30;
          if (v27)
          {
            if (v29)
            {
              v302 = *v16;
              *v16 = *v9;
LABEL_51:
              a5 = v302;
              *v9 = v302;
              goto LABEL_92;
            }
            v309 = *v16;
            *v16 = *v12;
            a5 = v309;
            *v12 = v309;
            v60 = a2[-1].n128_i32[2];
            v61 = v12->n128_i32[2];
            v62 = (signed __int32)a2[-1].n128_u32[0] < (signed __int32)v12->n128_u32[0];
            v205 = v60 == v61;
            v63 = v60 < v61;
            if (!v205)
              v62 = v63;
            if (v62)
            {
              v302 = *v12;
              *v12 = *v9;
              goto LABEL_51;
            }
          }
          else if (v29)
          {
            v305 = *v12;
            *v12 = *v9;
            a5 = v305;
            *v9 = v305;
            v35 = v12->n128_i32[2];
            v36 = v16->n128_i32[2];
            v37 = (signed __int32)v12->n128_u32[0] < (signed __int32)v16->n128_u32[0];
            v205 = v35 == v36;
            v38 = v35 < v36;
            if (!v205)
              v37 = v38;
            if (v37)
            {
              v306 = *v16;
              *v16 = *v12;
              a5 = v306;
              *v12 = v306;
            }
          }
LABEL_92:
          --a3;
          v106 = (__n128 *)v12->n128_u32[0];
          if ((a4 & 1) == 0)
          {
            v108 = v12[-1].n128_i32[2];
            v107 = v12->n128_u32[2];
            v109 = (signed __int32)v12[-1].n128_u32[0] < (int)v106;
            v205 = v108 == (_DWORD)v107;
            v110 = v108 < (int)v107;
            if (!v205)
              v109 = v110;
            if (v109)
              goto LABEL_97;
            v140 = v12->n128_u32[1];
            v141 = v12->n128_u32[3];
            v142 = a2[-1].n128_i32[2];
            v143 = (int)v106 < (signed __int32)a2[-1].n128_u32[0];
            v205 = (_DWORD)v107 == v142;
            v144 = (int)v107 < v142;
            if (!v205)
              v143 = v144;
            if (v143)
            {
              v145 = v12 + 1;
              do
              {
                if (v145 == a2)
                  goto LABEL_285;
                v146 = v145->n128_i32[2];
                v147 = (int)v106 < (signed __int32)v145->n128_u32[0];
                v205 = (_DWORD)v107 == v146;
                v148 = (int)v107 < v146;
                if (!v205)
                  v147 = v148;
                ++v145;
              }
              while (!v147);
              v12 = v145 - 1;
            }
            else
            {
              v149 = v12 + 1;
              do
              {
                v12 = v149;
                if (v149 >= a2)
                  break;
                v150 = v149->n128_i32[2];
                v151 = (int)v106 < (signed __int32)v149->n128_u32[0];
                v205 = (_DWORD)v107 == v150;
                v152 = (int)v107 < v150;
                if (v205)
                  v152 = v151;
                v149 = v12 + 1;
              }
              while (!v152);
            }
            v153 = a2;
            if (v12 < a2)
            {
              v153 = a2;
              while (v153 != a1)
              {
                v154 = v153[-1].n128_i32[0];
                --v153;
                v155 = v153->n128_i32[2];
                v156 = (int)v106 < v154;
                v205 = (_DWORD)v107 == v155;
                v157 = (int)v107 < v155;
                if (!v205)
                  v156 = v157;
                if (!v156)
                  goto LABEL_163;
              }
              goto LABEL_285;
            }
LABEL_163:
            if (v12 < v153)
            {
              v319 = *v12;
              *v12 = *v153;
              a5 = v319;
              *v153 = v319;
              v158 = v12 + 1;
              while (v158 != a2)
              {
                v159 = v158->n128_i32[2];
                v160 = (int)v106 < (signed __int32)v158->n128_u32[0];
                v205 = (_DWORD)v107 == v159;
                v161 = (int)v107 < v159;
                if (!v205)
                  v160 = v161;
                ++v158;
                if (v160)
                {
                  v12 = v158 - 1;
                  while (v153 != a1)
                  {
                    v162 = v153[-1].n128_i32[0];
                    --v153;
                    v163 = v153->n128_i32[2];
                    v164 = (int)v106 < v162;
                    v205 = (_DWORD)v107 == v163;
                    v165 = (int)v107 < v163;
                    if (!v205)
                      v164 = v165;
                    if (!v164)
                      goto LABEL_163;
                  }
                  goto LABEL_285;
                }
              }
              goto LABEL_285;
            }
            v166 = v12 - 1;
            if (&v12[-1] != a1)
            {
              a5 = *v166;
              *a1 = *v166;
            }
            a4 = 0;
            v12[-1].n128_u32[0] = v106;
            v12[-1].n128_u32[1] = v140;
            v12[-1].n128_u32[2] = v107;
            v12[-1].n128_u32[3] = v141;
            continue;
          }
          v107 = v12->n128_u32[2];
LABEL_97:
          v111 = 0;
          v112 = v12->n128_u32[1];
          v113 = v12->n128_u32[3];
          do
          {
            v114 = &v12[v111 + 1];
            if (v114 == a2)
              goto LABEL_285;
            v115 = v12[v111 + 1].n128_i32[2];
            v116 = (signed __int32)v114->n128_u32[0] < (int)v106;
            v205 = v115 == (_DWORD)v107;
            v117 = v115 < (int)v107;
            if (v205)
              v117 = v116;
            ++v111;
          }
          while (v117);
          v118 = &v12[v111];
          v119 = a2;
          if (v111 != 1)
          {
            while (v119 != v12)
            {
              v120 = v119[-1].n128_i32[0];
              --v119;
              v121 = v119->n128_i32[2];
              v122 = v120 < (int)v106;
              v205 = v121 == (_DWORD)v107;
              v123 = v121 < (int)v107;
              if (!v205)
                v122 = v123;
              if (v122)
                goto LABEL_113;
            }
            goto LABEL_285;
          }
          v119 = a2;
          do
          {
            if (v118 >= v119)
              break;
            v124 = v119[-1].n128_i32[0];
            --v119;
            v125 = v119->n128_i32[2];
            v126 = v124 < (int)v106;
            v205 = v125 == (_DWORD)v107;
            v127 = v125 < (int)v107;
            if (!v205)
              v126 = v127;
          }
          while (!v126);
LABEL_113:
          v12 = v118;
          if (v118 < v119)
          {
            v128 = v119;
            do
            {
              v318 = *v12;
              *v12 = *v128;
              a5 = v318;
              *v128 = v318;
              v129 = v12 + 1;
              do
              {
                if (v129 == a2)
                  goto LABEL_285;
                v130 = v129->n128_i32[2];
                v131 = (signed __int32)v129->n128_u32[0] < (int)v106;
                v205 = v130 == (_DWORD)v107;
                v132 = v130 < (int)v107;
                if (!v205)
                  v131 = v132;
                ++v129;
              }
              while (v131);
              v12 = v129 - 1;
              do
              {
                if (v128 == a1)
                  goto LABEL_285;
                v133 = v128[-1].n128_i32[0];
                --v128;
                v134 = v128->n128_i32[2];
                v135 = v133 < (int)v106;
                v205 = v134 == (_DWORD)v107;
                v136 = v134 < (int)v107;
                if (!v205)
                  v135 = v136;
              }
              while (!v135);
            }
            while (v12 < v128);
          }
          v137 = v12 - 1;
          if (&v12[-1] != a1)
          {
            a5 = *v137;
            *a1 = *v137;
          }
          v12[-1].n128_u32[0] = v106;
          v12[-1].n128_u32[1] = v112;
          v12[-1].n128_u32[2] = v107;
          v12[-1].n128_u32[3] = v113;
          if (v118 < v119)
            goto LABEL_131;
          v138 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(a1, v12 - 1, a5);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(v12, a2, v139))
          {
            if (v138)
              continue;
LABEL_131:
            std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v138)
            return;
          goto LABEL_1;
        }
        v106 = v12 + 1;
        v205 = v12 == a2 || v106 == a2;
        v206 = v205;
        if ((a4 & 1) != 0)
        {
          if ((v206 & 1) == 0)
          {
            v207 = 0;
            v208 = v12;
            do
            {
              v209 = v106;
              v210 = v106->n128_u32[0];
              v211 = v208[1].n128_i32[2];
              v212 = v208->n128_i32[2];
              v213 = v210 < (signed __int32)v208->n128_u32[0];
              v205 = v211 == v212;
              v214 = v211 < v212;
              if (!v205)
                v213 = v214;
              if (v213)
              {
                v215 = v208[1].n128_u32[1];
                v216 = v208[1].n128_u32[3];
                v217 = v207;
                while (1)
                {
                  v218 = (char *)v12 + v217;
                  *(__n128 *)((char *)v12 + v217 + 16) = *(__n128 *)((char *)v12 + v217);
                  if (!v217)
                    break;
                  v219 = *((_DWORD *)v218 - 4);
                  v220 = *((_DWORD *)v218 - 2);
                  v221 = v210 < v219;
                  v205 = v211 == v220;
                  v222 = v211 < v220;
                  if (v205)
                    v222 = v221;
                  v217 -= 16;
                  if (!v222)
                  {
                    v223 = (__n128 *)((char *)v12 + v217 + 16);
                    goto LABEL_214;
                  }
                }
                v223 = v12;
LABEL_214:
                v223->n128_u32[0] = v210;
                v223->n128_u32[1] = v215;
                v223->n128_u32[2] = v211;
                v223->n128_u32[3] = v216;
              }
              v106 = v209 + 1;
              v207 += 16;
              v208 = v209;
            }
            while (&v209[1] != a2);
          }
        }
        else if ((v206 & 1) == 0)
        {
          v107 = -2;
          v280 = 1;
          v281 = v12;
          while (1)
          {
            v282 = v106->n128_u32[0];
            v283 = v281[1].n128_i32[2];
            v284 = v281->n128_i32[2];
            v285 = (signed __int32)v106->n128_u32[0] < (signed __int32)v281->n128_u32[0];
            v205 = v283 == v284;
            v286 = v283 < v284;
            if (!v205)
              v285 = v286;
            if (v285)
              break;
LABEL_283:
            v281 = &v12[v280++];
            ++v106;
            --v107;
            if (v106 == a2)
              return;
          }
          v287 = v281[1].n128_u32[1];
          v288 = v281[1].n128_u32[3];
          v289 = v107;
          v290 = (signed __int32 *)v106;
          while (1)
          {
            *(_OWORD *)v290 = *((_OWORD *)v290 - 1);
            if (__CFADD__(v289++, 1))
              break;
            v292 = v290 - 4;
            v293 = *(v290 - 8);
            v294 = *(v290 - 6);
            v295 = v282 < v293;
            v205 = v283 == v294;
            v296 = v283 < v294;
            if (!v205)
              v295 = v296;
            v290 = v292;
            if (!v295)
            {
              *v292 = v282;
              v292[1] = v287;
              v292[2] = v283;
              v292[3] = v288;
              goto LABEL_283;
            }
          }
LABEL_285:
          __break(1u);
LABEL_286:
          v325 = *a1;
          *a1 = *v106;
          *v106 = v325;
          v297 = a2[-1].n128_i32[2];
          v298 = a1[1].n128_i32[2];
          v299 = (signed __int32)a2[-1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0];
          v205 = v297 == v298;
          v300 = v297 < v298;
          if (!v205)
            v299 = v300;
          if (v299)
          {
            v180 = *v106;
            *v106 = *(__n128 *)v107;
LABEL_290:
            *(__n128 *)v107 = v180;
          }
        }
        return;
    }
  }
}

  v4 = 1 - a3;
  while (2)
  {
    v5 = v4;
    v6 = (char *)a2 - (char *)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * (a2 - result);
    if (v7 < 2)
      return result;
    switch(v7)
    {
      case 2uLL:
        v8 = a2 - 3;
        v9 = *(a2 - 3);
        v10 = *result;
        if (v9 != *result || (v9 = *(a2 - 2), v10 = result[1], v9 != v10))
        {
          v11 = v9 & 1;
          v12 = v10 & 1;
          v13 = (v9 & 0xFFFFFFFFFFFFFFFELL) < (v10 & 0xFFFFFFFFFFFFFFFELL);
          if (v11 != v12)
            v13 = v11 < v12;
          if (!v13)
            return result;
LABEL_113:
          v287 = result[2];
          v276 = *(_OWORD *)result;
          v123 = *(_OWORD *)v8;
          result[2] = *(a2 - 1);
          *(_OWORD *)result = v123;
          goto LABEL_133;
        }
        v120 = *((_DWORD *)a2 - 2);
        v121 = *((_DWORD *)result + 4);
        v122 = v120 < v121;
        if (v120 == v121)
          v122 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 5);
        if (v122)
          goto LABEL_113;
        return result;
      case 3uLL:
        v8 = result + 3;
        v14 = result[3];
        v15 = a2 - 3;
        if (v14 == *result)
        {
          v16 = result[4];
          v17 = result[1];
          if (v16 == v17)
          {
            v124 = *((_DWORD *)result + 10);
            v125 = *((_DWORD *)result + 4);
            v126 = v124 < v125;
            if (v124 == v125)
              v126 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
            if (v126)
            {
LABEL_19:
              if (*v15 == v14)
              {
                v24 = *(a2 - 2);
                v25 = result[4];
                if (v24 == v25)
                {
                  v157 = *((_DWORD *)a2 - 2);
                  v158 = *((_DWORD *)result + 10);
                  v159 = v157 < v158;
                  if (v157 == v158)
                    v159 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 11);
                  if (v159)
                    goto LABEL_28;
                  goto LABEL_160;
                }
                v26 = *(a2 - 2) & 1;
                v27 = result[4] & 1;
                v28 = (v24 & 0xFFFFFFFFFFFFFFFELL) >= (v25 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                v26 = *v15 & 1;
                v27 = result[3] & 1;
                v28 = (*v15 & 0xFFFFFFFFFFFFFFFELL) >= (v14 & 0xFFFFFFFFFFFFFFFELL);
              }
              v29 = !v28;
              if ((_DWORD)v26 != (_DWORD)v27)
                v29 = v26 < v27;
              if (v29)
              {
LABEL_28:
                v283 = result[2];
                v272 = *(_OWORD *)result;
                v30 = *(_OWORD *)v15;
                result[2] = *(a2 - 1);
                *(_OWORD *)result = v30;
                *(_OWORD *)v15 = v272;
                v31 = v283;
LABEL_29:
                *(a2 - 1) = v31;
                return result;
              }
LABEL_160:
              v289 = result[2];
              v278 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v8;
              result[2] = result[5];
              *(_OWORD *)v8 = v278;
              result[5] = v289;
              v160 = *v15;
              v161 = result[3];
              if (*v15 == v161 && (v160 = *(a2 - 2), v161 = result[4], v160 == v161))
              {
                v212 = *((_DWORD *)a2 - 2);
                v213 = *((_DWORD *)result + 10);
                v214 = v212 < v213;
                if (v212 == v213)
                  v214 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 11);
                if (v214)
                  goto LABEL_165;
              }
              else
              {
                v162 = v160 & 1;
                v163 = (v160 & 0xFFFFFFFFFFFFFFFELL) < (v161 & 0xFFFFFFFFFFFFFFFELL);
                v22 = v162 == (v161 & 1);
                v164 = v162 < (v161 & 1u);
                if (v22)
                  v164 = v163;
                if (v164)
                {
LABEL_165:
                  v31 = result[5];
                  v165 = *(_OWORD *)v8;
                  v166 = *(a2 - 1);
                  *(_OWORD *)v8 = *(_OWORD *)v15;
                  result[5] = v166;
                  *(_OWORD *)v15 = v165;
                  goto LABEL_29;
                }
              }
              return result;
            }
LABEL_117:
            if (*v15 == v14)
            {
              v127 = *(a2 - 2);
              v128 = result[4];
              if (v127 == v128)
              {
                v167 = *((_DWORD *)a2 - 2);
                v168 = *((_DWORD *)result + 10);
                v169 = v167 < v168;
                if (v167 == v168)
                  v169 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 11);
                if (!v169)
                  return result;
LABEL_126:
                v65 = result[5];
                v66 = *(_OWORD *)v8;
                v67 = *(a2 - 1);
                *(_OWORD *)v8 = *(_OWORD *)v15;
                goto LABEL_127;
              }
              v129 = *(a2 - 2) & 1;
              v130 = result[4] & 1;
              v131 = (v127 & 0xFFFFFFFFFFFFFFFELL) >= (v128 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              v129 = *v15 & 1;
              v130 = result[3] & 1;
              v131 = (*v15 & 0xFFFFFFFFFFFFFFFELL) >= (v14 & 0xFFFFFFFFFFFFFFFELL);
            }
            v132 = !v131;
            if ((_DWORD)v129 != (_DWORD)v130)
              v132 = v129 < v130;
            if (!v132)
              return result;
            goto LABEL_126;
          }
          v18 = result[4] & 1;
          v19 = result[1] & 1;
          v20 = (v16 & 0xFFFFFFFFFFFFFFFELL) < (v17 & 0xFFFFFFFFFFFFFFFELL);
          v21 = v18 >= v19;
          v22 = (_DWORD)v18 == (_DWORD)v19;
        }
        else
        {
          v257 = result[3] & 1;
          v258 = *result & 1;
          v20 = (v14 & 0xFFFFFFFFFFFFFFFELL) < (*result & 0xFFFFFFFFFFFFFFFELL);
          v21 = v257 >= v258;
          v22 = (_DWORD)v257 == (_DWORD)v258;
        }
        v23 = !v21;
        if (!v22)
          v20 = v23;
        if (v20)
          goto LABEL_19;
        goto LABEL_117;
      case 4uLL:
        v8 = result + 3;
        v32 = result[3];
        v15 = result + 6;
        v33 = a2 - 3;
        if (v32 != *result)
        {
          v259 = result[3] & 1;
          v260 = *result & 1;
          v38 = (v32 & 0xFFFFFFFFFFFFFFFELL) < (*result & 0xFFFFFFFFFFFFFFFELL);
          v39 = v259 >= v260;
          v40 = (_DWORD)v259 == (_DWORD)v260;
LABEL_33:
          v41 = !v39;
          if (!v40)
            v38 = v41;
          if (v38)
            goto LABEL_39;
LABEL_137:
          if (*v15 == v32)
          {
            v141 = result[7];
            v142 = result[4];
            if (v141 == v142)
            {
              v209 = *((_DWORD *)result + 16);
              v210 = *((_DWORD *)result + 10);
              v211 = v209 < v210;
              if (v209 == v210)
                v211 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
              if (!v211)
                goto LABEL_50;
              goto LABEL_146;
            }
            v143 = result[7] & 1;
            v144 = result[4] & 1;
            v145 = (v141 & 0xFFFFFFFFFFFFFFFELL) >= (v142 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            v143 = *v15 & 1;
            v144 = result[3] & 1;
            v145 = (*v15 & 0xFFFFFFFFFFFFFFFELL) >= (v32 & 0xFFFFFFFFFFFFFFFELL);
          }
          v146 = !v145;
          if ((_DWORD)v143 != (_DWORD)v144)
            v146 = v143 < v144;
          if (!v146)
            goto LABEL_50;
LABEL_146:
          v147 = result[5];
          v148 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v15;
          result[5] = result[8];
          *(_OWORD *)v15 = v148;
          result[8] = v147;
          v149 = result[3];
          v150 = *result;
          if (v149 == *result && (v149 = result[4], v150 = result[1], v149 == v150))
          {
            v235 = *((_DWORD *)result + 10);
            v236 = *((_DWORD *)result + 4);
            v237 = v235 < v236;
            if (v235 == v236)
              v237 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
            if (!v237)
              goto LABEL_50;
          }
          else
          {
            v151 = v149 & 1;
            v152 = v150 & 1;
            v153 = (v149 & 0xFFFFFFFFFFFFFFFELL) < (v150 & 0xFFFFFFFFFFFFFFFELL);
            if (v151 != v152)
              v153 = v151 < v152;
            if (!v153)
              goto LABEL_50;
          }
          v288 = result[2];
          v277 = *(_OWORD *)result;
          *(_OWORD *)result = *(_OWORD *)v8;
          result[2] = result[5];
          *(_OWORD *)v8 = v277;
          result[5] = v288;
          goto LABEL_50;
        }
        v34 = result[4];
        v35 = result[1];
        if (v34 != v35)
        {
          v36 = result[4] & 1;
          v37 = result[1] & 1;
          v38 = (v34 & 0xFFFFFFFFFFFFFFFELL) < (v35 & 0xFFFFFFFFFFFFFFFELL);
          v39 = v36 >= v37;
          v40 = (_DWORD)v36 == (_DWORD)v37;
          goto LABEL_33;
        }
        v138 = *((_DWORD *)result + 10);
        v139 = *((_DWORD *)result + 4);
        v140 = v138 < v139;
        if (v138 == v139)
          v140 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
        if (!v140)
          goto LABEL_137;
LABEL_39:
        v42 = *v15;
        if (*v15 != v32)
        {
          v263 = *v15 & 1;
          v264 = result[3] & 1;
          v47 = (v42 & 0xFFFFFFFFFFFFFFFELL) < (v32 & 0xFFFFFFFFFFFFFFFELL);
          v48 = v263 >= v264;
          v49 = (_DWORD)v263 == (_DWORD)v264;
LABEL_42:
          v50 = !v48;
          if (!v49)
            v47 = v50;
          if (v47)
          {
LABEL_48:
            v284 = result[2];
            v273 = *(_OWORD *)result;
            *(_OWORD *)result = *(_OWORD *)v15;
            result[2] = result[8];
            *(_OWORD *)v15 = v273;
            v51 = v284;
LABEL_49:
            result[8] = v51;
            goto LABEL_50;
          }
          goto LABEL_211;
        }
        v43 = result[7];
        v44 = result[4];
        if (v43 != v44)
        {
          v45 = result[7] & 1;
          v46 = result[4] & 1;
          v47 = (v43 & 0xFFFFFFFFFFFFFFFELL) < (v44 & 0xFFFFFFFFFFFFFFFELL);
          v48 = v45 >= v46;
          v49 = (_DWORD)v45 == (_DWORD)v46;
          goto LABEL_42;
        }
        v198 = *((_DWORD *)result + 16);
        v199 = *((_DWORD *)result + 10);
        v200 = v198 < v199;
        if (v198 == v199)
          v200 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
        if (v200)
          goto LABEL_48;
LABEL_211:
        v291 = result[2];
        v280 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)v8;
        result[2] = result[5];
        *(_OWORD *)v8 = v280;
        result[5] = v291;
        v201 = result[3];
        if (v42 != v201)
        {
          LODWORD(v204) = v42 & 1;
          v205 = result[3] & 1;
          v206 = (v42 & 0xFFFFFFFFFFFFFFFELL) >= (v201 & 0xFFFFFFFFFFFFFFFELL);
LABEL_214:
          v207 = !v206;
          if ((_DWORD)v204 != (_DWORD)v205)
            v207 = v204 < v205;
          if (v207)
          {
LABEL_220:
            v51 = result[5];
            v208 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v15;
            result[5] = result[8];
            *(_OWORD *)v15 = v208;
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        v202 = result[7];
        v203 = result[4];
        if (v202 != v203)
        {
          v204 = result[7] & 1;
          v205 = result[4] & 1;
          v206 = (v202 & 0xFFFFFFFFFFFFFFFELL) >= (v203 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_214;
        }
        v238 = *((_DWORD *)result + 16);
        v239 = *((_DWORD *)result + 10);
        v240 = v238 < v239;
        if (v238 == v239)
          v240 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
        if (v240)
          goto LABEL_220;
LABEL_50:
        v52 = *v33;
        v53 = *v15;
        if (*v33 == *v15 && (v52 = *(a2 - 2), v53 = result[7], v52 == v53))
        {
          v154 = *((_DWORD *)a2 - 2);
          v155 = *((_DWORD *)result + 16);
          v156 = v154 < v155;
          if (v154 == v155)
            v156 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 17);
          if (!v156)
            return result;
        }
        else
        {
          v54 = v52 & 1;
          v55 = v53 & 1;
          v56 = (v52 & 0xFFFFFFFFFFFFFFFELL) < (v53 & 0xFFFFFFFFFFFFFFFELL);
          if (v54 != v55)
            v56 = v54 < v55;
          if (!v56)
            return result;
        }
        v57 = result[8];
        v58 = *(_OWORD *)v15;
        v59 = *(a2 - 1);
        *(_OWORD *)v15 = *(_OWORD *)v33;
LABEL_56:
        v15[2] = v59;
        *(_OWORD *)v33 = v58;
        v33[2] = v57;
        v60 = *v15;
        v61 = *v8;
        if (*v15 == *v8 && (v60 = result[7], v61 = result[4], v60 == v61))
        {
          v173 = *((_DWORD *)result + 16);
          v174 = *((_DWORD *)result + 10);
          v175 = v173 < v174;
          if (v173 == v174)
            v175 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
          if (!v175)
            return result;
        }
        else
        {
          v62 = v60 & 1;
          v63 = v61 & 1;
          v64 = (v60 & 0xFFFFFFFFFFFFFFFELL) < (v61 & 0xFFFFFFFFFFFFFFFELL);
          if (v62 != v63)
            v64 = v62 < v63;
          if (!v64)
            return result;
        }
        v65 = v8[2];
        v66 = *(_OWORD *)v8;
        *(_OWORD *)v8 = *(_OWORD *)v15;
        v67 = v15[2];
LABEL_127:
        v8[2] = v67;
        *(_OWORD *)v15 = v66;
        v15[2] = v65;
        v133 = result[3];
        v134 = *result;
        if (v133 == *result && (v133 = result[4], v134 = result[1], v133 == v134))
        {
          v170 = *((_DWORD *)result + 10);
          v171 = *((_DWORD *)result + 4);
          v172 = v170 < v171;
          if (v170 == v171)
            v172 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
          if (!v172)
            return result;
        }
        else
        {
          v135 = v133 & 1;
          v136 = v134 & 1;
          v137 = (v133 & 0xFFFFFFFFFFFFFFFELL) < (v134 & 0xFFFFFFFFFFFFFFFELL);
          if (v135 != v136)
            v137 = v135 < v136;
          if (!v137)
            return result;
        }
        v287 = result[2];
        v276 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)v8;
        result[2] = v8[2];
LABEL_133:
        *(_OWORD *)v8 = v276;
        v8[2] = v287;
        return result;
      case 5uLL:
        v8 = result + 3;
        v68 = result[3];
        v15 = result + 6;
        v33 = result + 9;
        v69 = a2 - 3;
        if (v68 == *result)
        {
          v70 = result[4];
          v71 = result[1];
          if (v70 == v71)
          {
            v176 = *((_DWORD *)result + 10);
            v177 = *((_DWORD *)result + 4);
            v178 = v176 < v177;
            if (v176 == v177)
              v178 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
            if (v178)
            {
LABEL_71:
              v78 = *v15;
              if (*v15 == v68)
              {
                v79 = result[7];
                v80 = result[4];
                if (v79 == v80)
                {
                  v215 = *((_DWORD *)result + 16);
                  v216 = *((_DWORD *)result + 10);
                  v217 = v215 < v216;
                  if (v215 == v216)
                    v217 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
                  if (v217)
                    goto LABEL_80;
                  goto LABEL_234;
                }
                v81 = result[7] & 1;
                v82 = result[4] & 1;
                v83 = (v79 & 0xFFFFFFFFFFFFFFFELL) < (v80 & 0xFFFFFFFFFFFFFFFELL);
                v84 = v81 >= v82;
                v85 = (_DWORD)v81 == (_DWORD)v82;
              }
              else
              {
                v265 = *v15 & 1;
                v266 = result[3] & 1;
                v83 = (v78 & 0xFFFFFFFFFFFFFFFELL) < (v68 & 0xFFFFFFFFFFFFFFFELL);
                v84 = v265 >= v266;
                v85 = (_DWORD)v265 == (_DWORD)v266;
              }
              v86 = !v84;
              if (!v85)
                v83 = v86;
              if (v83)
              {
LABEL_80:
                v285 = result[2];
                v274 = *(_OWORD *)result;
                *(_OWORD *)result = *(_OWORD *)v15;
                result[2] = result[8];
                *(_OWORD *)v15 = v274;
                v87 = v285;
LABEL_81:
                result[8] = v87;
                goto LABEL_82;
              }
LABEL_234:
              v292 = result[2];
              v281 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v8;
              result[2] = result[5];
              *(_OWORD *)v8 = v281;
              result[5] = v292;
              v218 = result[3];
              if (v78 == v218)
              {
                v219 = result[7];
                v220 = result[4];
                if (v219 == v220)
                {
                  v247 = *((_DWORD *)result + 16);
                  v248 = *((_DWORD *)result + 10);
                  v249 = v247 < v248;
                  if (v247 == v248)
                    v249 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
                  if (v249)
                    goto LABEL_243;
                  goto LABEL_82;
                }
                v221 = result[7] & 1;
                v222 = result[4] & 1;
                v223 = (v219 & 0xFFFFFFFFFFFFFFFELL) >= (v220 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                LODWORD(v221) = v78 & 1;
                v222 = result[3] & 1;
                v223 = (v78 & 0xFFFFFFFFFFFFFFFELL) >= (v218 & 0xFFFFFFFFFFFFFFFELL);
              }
              v224 = !v223;
              if ((_DWORD)v221 != (_DWORD)v222)
                v224 = v221 < v222;
              if (v224)
              {
LABEL_243:
                v87 = result[5];
                v225 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v15;
                result[5] = result[8];
                *(_OWORD *)v15 = v225;
                goto LABEL_81;
              }
LABEL_82:
              v88 = *v33;
              v89 = *v15;
              if (*v33 == *v15 && (v88 = result[10], v89 = result[7], v88 == v89))
              {
                v192 = *((_DWORD *)result + 22);
                v193 = *((_DWORD *)result + 16);
                v194 = v192 < v193;
                if (v192 == v193)
                  v194 = *((_DWORD *)result + 23) < *((_DWORD *)result + 17);
                if (!v194)
                  goto LABEL_98;
              }
              else
              {
                v90 = v88 & 1;
                v91 = v89 & 1;
                v92 = (v88 & 0xFFFFFFFFFFFFFFFELL) < (v89 & 0xFFFFFFFFFFFFFFFELL);
                if (v90 != v91)
                  v92 = v90 < v91;
                if (!v92)
                  goto LABEL_98;
              }
              v93 = result[8];
              v94 = *(_OWORD *)v15;
              *(_OWORD *)v15 = *(_OWORD *)v33;
              result[8] = result[11];
              *(_OWORD *)v33 = v94;
              result[11] = v93;
              v95 = *v15;
              v96 = *v8;
              if (*v15 == *v8 && (v95 = result[7], v96 = result[4], v95 == v96))
              {
                v226 = *((_DWORD *)result + 16);
                v227 = *((_DWORD *)result + 10);
                v228 = v226 < v227;
                if (v226 == v227)
                  v228 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
                if (!v228)
                  goto LABEL_98;
              }
              else
              {
                v97 = v95 & 1;
                v98 = v96 & 1;
                v99 = (v95 & 0xFFFFFFFFFFFFFFFELL) < (v96 & 0xFFFFFFFFFFFFFFFELL);
                if (v97 != v98)
                  v99 = v97 < v98;
                if (!v99)
                  goto LABEL_98;
              }
              v100 = result[5];
              v101 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v15;
              result[5] = result[8];
              *(_OWORD *)v15 = v101;
              result[8] = v100;
              v102 = result[3];
              v103 = *result;
              if (v102 == *result && (v102 = result[4], v103 = result[1], v102 == v103))
              {
                v241 = *((_DWORD *)result + 10);
                v242 = *((_DWORD *)result + 4);
                v243 = v241 < v242;
                if (v241 == v242)
                  v243 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
                if (!v243)
                  goto LABEL_98;
              }
              else
              {
                v104 = v102 & 1;
                v105 = v103 & 1;
                v106 = (v102 & 0xFFFFFFFFFFFFFFFELL) < (v103 & 0xFFFFFFFFFFFFFFFELL);
                if (v104 != v105)
                  v106 = v104 < v105;
                if (!v106)
                  goto LABEL_98;
              }
              v286 = result[2];
              v275 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v8;
              result[2] = result[5];
              *(_OWORD *)v8 = v275;
              result[5] = v286;
LABEL_98:
              v107 = *v69;
              v108 = *v33;
              if (*v69 == *v33 && (v107 = *(a2 - 2), v108 = result[10], v107 == v108))
              {
                v195 = *((_DWORD *)a2 - 2);
                v196 = *((_DWORD *)result + 22);
                v197 = v195 < v196;
                if (v195 == v196)
                  v197 = *((_DWORD *)a2 - 1) < *((_DWORD *)result + 23);
                if (!v197)
                  return result;
              }
              else
              {
                v109 = v107 & 1;
                v110 = v108 & 1;
                v111 = (v107 & 0xFFFFFFFFFFFFFFFELL) < (v108 & 0xFFFFFFFFFFFFFFFELL);
                if (v109 != v110)
                  v111 = v109 < v110;
                if (!v111)
                  return result;
              }
              v112 = result[11];
              v113 = *(_OWORD *)v33;
              v114 = *(a2 - 1);
              *(_OWORD *)v33 = *(_OWORD *)v69;
              result[11] = v114;
              *(_OWORD *)v69 = v113;
              *(a2 - 1) = v112;
              v115 = *v33;
              v116 = *v15;
              if (*v33 == *v15 && (v115 = result[10], v116 = result[7], v115 == v116))
              {
                v229 = *((_DWORD *)result + 22);
                v230 = *((_DWORD *)result + 16);
                v231 = v229 < v230;
                if (v229 == v230)
                  v231 = *((_DWORD *)result + 23) < *((_DWORD *)result + 17);
                if (!v231)
                  return result;
              }
              else
              {
                v117 = v115 & 1;
                v118 = v116 & 1;
                v119 = (v115 & 0xFFFFFFFFFFFFFFFELL) < (v116 & 0xFFFFFFFFFFFFFFFELL);
                if (v117 != v118)
                  v119 = v117 < v118;
                if (!v119)
                  return result;
              }
              v57 = result[8];
              v58 = *(_OWORD *)v15;
              *(_OWORD *)v15 = *(_OWORD *)v33;
              v59 = result[11];
              goto LABEL_56;
            }
LABEL_184:
            if (*v15 == v68)
            {
              v179 = result[7];
              v180 = result[4];
              if (v179 == v180)
              {
                v232 = *((_DWORD *)result + 16);
                v233 = *((_DWORD *)result + 10);
                v234 = v232 < v233;
                if (v232 == v233)
                  v234 = *((_DWORD *)result + 17) < *((_DWORD *)result + 11);
                if (!v234)
                  goto LABEL_82;
LABEL_193:
                v185 = result[5];
                v186 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v15;
                result[5] = result[8];
                *(_OWORD *)v15 = v186;
                result[8] = v185;
                v187 = result[3];
                v188 = *result;
                if (v187 == *result && (v187 = result[4], v188 = result[1], v187 == v188))
                {
                  v244 = *((_DWORD *)result + 10);
                  v245 = *((_DWORD *)result + 4);
                  v246 = v244 < v245;
                  if (v244 == v245)
                    v246 = *((_DWORD *)result + 11) < *((_DWORD *)result + 5);
                  if (!v246)
                    goto LABEL_82;
                }
                else
                {
                  v189 = v187 & 1;
                  v190 = v188 & 1;
                  v191 = (v187 & 0xFFFFFFFFFFFFFFFELL) < (v188 & 0xFFFFFFFFFFFFFFFELL);
                  if (v189 != v190)
                    v191 = v189 < v190;
                  if (!v191)
                    goto LABEL_82;
                }
                v290 = result[2];
                v279 = *(_OWORD *)result;
                *(_OWORD *)result = *(_OWORD *)v8;
                result[2] = result[5];
                *(_OWORD *)v8 = v279;
                result[5] = v290;
                goto LABEL_82;
              }
              v181 = result[7] & 1;
              v182 = result[4] & 1;
              v183 = (v179 & 0xFFFFFFFFFFFFFFFELL) >= (v180 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              v181 = *v15 & 1;
              v182 = result[3] & 1;
              v183 = (*v15 & 0xFFFFFFFFFFFFFFFELL) >= (v68 & 0xFFFFFFFFFFFFFFFELL);
            }
            v184 = !v183;
            if ((_DWORD)v181 != (_DWORD)v182)
              v184 = v181 < v182;
            if (!v184)
              goto LABEL_82;
            goto LABEL_193;
          }
          v72 = result[4] & 1;
          v73 = result[1] & 1;
          v74 = (v70 & 0xFFFFFFFFFFFFFFFELL) < (v71 & 0xFFFFFFFFFFFFFFFELL);
          v75 = v72 >= v73;
          v76 = (_DWORD)v72 == (_DWORD)v73;
        }
        else
        {
          v261 = result[3] & 1;
          v262 = *result & 1;
          v74 = (v68 & 0xFFFFFFFFFFFFFFFELL) < (*result & 0xFFFFFFFFFFFFFFFELL);
          v75 = v261 >= v262;
          v76 = (_DWORD)v261 == (_DWORD)v262;
        }
        v77 = !v75;
        if (!v76)
          v74 = v77;
        if (v74)
          goto LABEL_71;
        goto LABEL_184;
      default:
        v250 = a4;
        v270 = (unint64_t)a2;
        v271 = result;
        if (v6 <= 575)
        {
          if ((a4 & 1) != 0)
          else
        }
        if (v5 == 1)
        v251 = a2 - 3;
        v252 = v7 >> 1;
        v253 = &result[3 * (v7 >> 1)];
        if ((unint64_t)v6 >= 0xC01)
        {
          v267 = 3 * v252;
          v268 = &v271[3 * v252 - 3];
          v293 = v271[2];
          v282 = *(_OWORD *)v271;
          v269 = v253[2];
          *(_OWORD *)v271 = *(_OWORD *)v253;
          v271[2] = v269;
          v253[2] = v293;
          *(_OWORD *)v253 = v282;
        }
        else
        {
        }
        if ((v250 & 1) == 0
        {
          goto LABEL_310;
        }
        LOBYTE(a4) = v250;
        if ((v255 & 1) == 0)
          goto LABEL_309;
        {
          a3 = -v5;
          a2 = (uint64_t *)v254;
          result = v271;
          a4 = v250;
          if (v256)
            return result;
        }
        else
        {
          v4 = v5 + 1;
          a2 = (uint64_t *)v270;
          a4 = v250;
          result = (uint64_t *)(v254 + 24);
          if (v256)
            continue;
LABEL_309:
          result = (uint64_t *)(v254 + 24);
LABEL_310:
          a4 = 0;
          a3 = -v5;
          a2 = (uint64_t *)v270;
        }
        goto LABEL_1;
    }
  }
}

  v8 = 1 - a3;
  while (2)
  {
    v9 = v8;
    v10 = (char *)a2 - (char *)a1;
    v11 = ((char *)a2 - (char *)a1) >> 4;
    if (v11 < 2)
      return;
    switch(v11)
    {
      case 2uLL:
        v12 = *(a2 - 2);
        v13 = *a1;
        if (v12 < *a1)
        {
          v14 = a1[1];
          *a1 = v12;
          a1[1] = 0;
          if (a1 != a2 - 2)
          {
            v15 = *(a2 - 1);
            *(a2 - 1) = 0;
            a1[1] = v15;
          }
          *(a2 - 2) = v13;
          v16 = *(a2 - 1);
          if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
          {
            v18 = a2;
            WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            a2 = v18;
          }
          *(a2 - 1) = v14;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        v17 = a4;
        v63 = a2;
        v64 = a1;
        if (v10 > 383)
        {
          if (v9 == 1)
          {
            return;
          }
          v19 = a2 - 2;
          v20 = v11 >> 1;
          v21 = &a1[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
          }
          else
          {
          }
          if ((v17 & 1) == 0 && *(v64 - 2) >= *v64)
          {
            goto LABEL_31;
          }
          LOBYTE(a4) = v17;
          if ((v55 & 1) == 0)
            goto LABEL_28;
          {
            v8 = v9 + 1;
            a2 = v63;
            a4 = v17;
            a1 = v54 + 2;
            if (v56)
              continue;
LABEL_28:
            a1 = v54 + 2;
LABEL_31:
            a4 = 0;
            a3 = -v9;
            a2 = v63;
            goto LABEL_1;
          }
          a3 = -v9;
          a2 = v54;
          a1 = v64;
          a4 = v17;
          if (v56)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        else
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 16);
  v9 = (unint64_t *)(a2 - 32);
  v10 = (unint64_t *)(a2 - 48);
  v11 = (unint64_t)a1;
  while (2)
  {
    a1 = (__n128 *)v11;
    v12 = a2 - v11;
    v13 = (uint64_t)(a2 - v11) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v81 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        if (v81 < *(_QWORD *)v11)
          goto LABEL_109;
        return result;
      case 3:
        v55 = (__n128 *)(v11 + 16);
        v82 = *(_QWORD *)(v11 + 16);
        v84 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v83 = v84;
        if (v82 < *(_QWORD *)v11)
        {
          if (v83 >= v82)
            goto LABEL_188;
LABEL_109:
          result = *(__n128 *)v11;
          v166 = *(__n128 *)v11;
          v85 = *(_QWORD *)a2;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 + 8);
          *(_QWORD *)v11 = v85;
          goto LABEL_110;
        }
        if (v83 < v82)
        {
          result = *v55;
          v172 = *v55;
          v131 = *(_QWORD *)a2;
          *(_DWORD *)(v11 + 24) = *(_DWORD *)(a2 + 8);
          v55->n128_u64[0] = v131;
          *(_DWORD *)(a2 + 8) = v172.n128_u32[2];
          *(_QWORD *)a2 = v172.n128_u64[0];
          if (*(_QWORD *)(v11 + 16) < *(_QWORD *)v11)
          {
            result = *(__n128 *)v11;
            v173 = *(__n128 *)v11;
            *(_QWORD *)v11 = v55->n128_u64[0];
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 24);
            v55->n128_u64[0] = v173.n128_u64[0];
            *(_DWORD *)(v11 + 24) = v173.n128_u32[2];
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>((__n128 *)v11, (__n128 *)(v11 + 16), (__int128 *)(v11 + 32), a2 - 16).n128_u64[0];
        return result;
      case 5:
        v86 = (__n128 *)(v11 + 16);
        v87 = (__n128 *)(v11 + 32);
        v88 = (__n128 *)(v11 + 48);
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>((__n128 *)v11, (__n128 *)(v11 + 16), (__int128 *)(v11 + 32), v11 + 48).n128_u64[0];
        v90 = *(_QWORD *)(a2 - 16);
        v89 = a2 - 16;
        if (v90 < *(_QWORD *)(v11 + 48))
        {
          result = *v88;
          v167 = *v88;
          v91 = *(_QWORD *)v89;
          *(_DWORD *)(v11 + 56) = *(_DWORD *)(v89 + 8);
          v88->n128_u64[0] = v91;
          *(_DWORD *)(v89 + 8) = v167.n128_u32[2];
          *(_QWORD *)v89 = v167.n128_u64[0];
          if (v88->n128_u64[0] < v87->n128_u64[0])
          {
            result = *v87;
            v168 = *v87;
            v87->n128_u64[0] = v88->n128_u64[0];
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 56);
            v88->n128_u64[0] = v168.n128_u64[0];
            *(_DWORD *)(v11 + 56) = v168.n128_u32[2];
            if (v87->n128_u64[0] < v86->n128_u64[0])
            {
              result = *v86;
              v169 = *v86;
              v86->n128_u64[0] = v87->n128_u64[0];
              *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 40);
              v87->n128_u64[0] = v169.n128_u64[0];
              *(_DWORD *)(v11 + 40) = v169.n128_u32[2];
              if (*(_QWORD *)(v11 + 16) < *(_QWORD *)v11)
              {
                result = *(__n128 *)v11;
                v170 = *(__n128 *)v11;
                *(_QWORD *)v11 = v86->n128_u64[0];
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 24);
                v86->n128_u64[0] = v170.n128_u64[0];
                *(_DWORD *)(v11 + 24) = v170.n128_u32[2];
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 383)
        {
          v55 = (__n128 *)(v11 + 16);
          v93 = v11 == a2 || v55 == (__n128 *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v93)
            {
              v94 = 0;
              v95 = v11;
              do
              {
                v96 = v55;
                v97 = v55->n128_u64[0];
                if (v97 < *(_QWORD *)v95)
                {
                  v98 = *(_DWORD *)(v95 + 24);
                  v99 = v94;
                  while (1)
                  {
                    v100 = v11 + v99;
                    *(_QWORD *)(v100 + 16) = *(_QWORD *)(v11 + v99);
                    *(_DWORD *)(v100 + 24) = *(_DWORD *)(v11 + v99 + 8);
                    if (!v99)
                      break;
                    v99 -= 16;
                    if (v97 >= *(_QWORD *)(v100 - 16))
                    {
                      v101 = v11 + v99 + 16;
                      goto LABEL_132;
                    }
                  }
                  v101 = v11;
LABEL_132:
                  *(_QWORD *)v101 = v97;
                  *(_DWORD *)(v101 + 8) = v98;
                }
                v55 = v96 + 1;
                v94 += 16;
                v95 = (unint64_t)v96;
              }
              while (&v96[1] != (__n128 *)a2);
            }
          }
          else if (!v93)
          {
            v132 = -2;
            v133 = 1;
            v134 = v11;
            while (1)
            {
              v135 = v55->n128_u64[0];
              if (v55->n128_u64[0] < *(_QWORD *)v134)
                break;
LABEL_185:
              v134 = v11 + 16 * v133++;
              ++v55;
              --v132;
              if (v55 == (__n128 *)a2)
                return result;
            }
            v136 = *(_DWORD *)(v134 + 24);
            v137 = v132;
            v138 = v55;
            v139 = v55;
            while (1)
            {
              v140 = v139[-1].n128_u64[0];
              --v139;
              v138->n128_u64[0] = v140;
              v138->n128_u32[2] = v138[-1].n128_u32[2];
              v107 = __CFADD__(v137++, 1);
              if (v107)
                break;
              v141 = v138[-2].n128_u64[0];
              v138 = v139;
              if (v135 >= v141)
              {
                v139->n128_u64[0] = v135;
                v139->n128_u32[2] = v136;
                goto LABEL_185;
              }
            }
LABEL_187:
            __break(1u);
LABEL_188:
            result = *a1;
            v174 = *a1;
            a1->n128_u64[0] = v55->n128_u64[0];
            a1->n128_u32[2] = v55->n128_u32[2];
            v55->n128_u64[0] = v174.n128_u64[0];
            v55->n128_u32[2] = v174.n128_u32[2];
            if (*(_QWORD *)a2 < a1[1].n128_u64[0])
            {
              result = *v55;
              v166 = *v55;
              v142 = *(_QWORD *)a2;
              v55->n128_u32[2] = *(_DWORD *)(a2 + 8);
              v55->n128_u64[0] = v142;
LABEL_110:
              *(_DWORD *)(a2 + 8) = v166.n128_u32[2];
              *(_QWORD *)a2 = v166.n128_u64[0];
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v11 != a2)
          {
            v102 = (unint64_t)(v13 - 2) >> 1;
            v103 = v102;
            do
            {
              if (v102 >= v103)
              {
                v104 = (2 * v103) | 1;
                v105 = (unint64_t *)(v11 + 16 * v104);
                if (2 * v103 + 2 >= v13)
                {
                  v106 = *v105;
                }
                else
                {
                  v106 = v105[2];
                  v107 = *v105 >= v106;
                  if (*v105 < v106)
                    v105 += 2;
                  else
                    v106 = *v105;
                  if (!v107)
                    v104 = 2 * v103 + 2;
                }
                v108 = (unint64_t *)(v11 + 16 * v103);
                v109 = *v108;
                if (v106 >= *v108)
                {
                  v110 = *((_DWORD *)v108 + 2);
                  do
                  {
                    v111 = v108;
                    v108 = v105;
                    v112 = *v105;
                    *((_DWORD *)v111 + 2) = *((_DWORD *)v108 + 2);
                    *v111 = v112;
                    if (v102 < v104)
                      break;
                    v113 = (2 * v104) | 1;
                    v105 = (unint64_t *)(v11 + 16 * v113);
                    v104 = 2 * v104 + 2;
                    if (v104 >= v13)
                    {
                      v114 = *v105;
                      v104 = v113;
                    }
                    else
                    {
                      v114 = *v105;
                      if (*v105 >= v105[2])
                      {
                        v104 = v113;
                      }
                      else
                      {
                        v114 = v105[2];
                        v105 += 2;
                      }
                    }
                  }
                  while (v114 >= v109);
                  *v108 = v109;
                  *((_DWORD *)v108 + 2) = v110;
                }
              }
              v115 = v103-- <= 0;
            }
            while (!v115);
            v116 = (unint64_t)v12 >> 4;
            do
            {
              v117 = 0;
              result = *(__n128 *)v11;
              v171 = *(__n128 *)v11;
              v118 = v11;
              do
              {
                v119 = v118 + 16 * v117 + 16;
                v120 = (2 * v117) | 1;
                v121 = 2 * v117 + 2;
                if (v121 < v116 && *(_QWORD *)v119 < *(_QWORD *)(v119 + 16))
                {
                  v119 += 16;
                  v120 = v121;
                }
                v122 = *(_QWORD *)v119;
                *(_DWORD *)(v118 + 8) = *(_DWORD *)(v119 + 8);
                *(_QWORD *)v118 = v122;
                v118 = v119;
                v117 = v120;
              }
              while (v120 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
              a2 -= 16;
              if (v119 == a2)
              {
                *(_DWORD *)(v119 + 8) = v171.n128_u32[2];
                *(_QWORD *)v119 = v171.n128_u64[0];
              }
              else
              {
                v123 = *(_QWORD *)a2;
                *(_DWORD *)(v119 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v119 = v123;
                *(_DWORD *)(a2 + 8) = v171.n128_u32[2];
                *(_QWORD *)a2 = v171.n128_u64[0];
                v124 = v119 - v11 + 16;
                if (v124 >= 17)
                {
                  v125 = (((unint64_t)v124 >> 4) - 2) >> 1;
                  v126 = (unint64_t *)(v11 + 16 * v125);
                  v127 = *(_QWORD *)v119;
                  if (*v126 < *(_QWORD *)v119)
                  {
                    v128 = *(_DWORD *)(v119 + 8);
                    do
                    {
                      v129 = v119;
                      v119 = (uint64_t)v126;
                      v130 = *v126;
                      *(_DWORD *)(v129 + 8) = *(_DWORD *)(v119 + 8);
                      *(_QWORD *)v129 = v130;
                      if (!v125)
                        break;
                      v125 = (v125 - 1) >> 1;
                      v126 = (unint64_t *)(v11 + 16 * v125);
                    }
                    while (*v126 < v127);
                    *(_QWORD *)v119 = v127;
                    *(_DWORD *)(v119 + 8) = v128;
                  }
                }
              }
              v115 = v116-- <= 2;
            }
            while (!v115);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = (__n128 *)(v11 + 16 * ((unint64_t)v13 >> 1));
        v16 = *v8;
        if ((unint64_t)v12 >= 0x801)
        {
          v17 = v15->n128_u64[0];
          if (v15->n128_u64[0] >= *(_QWORD *)v11)
          {
            if (v16 < v17)
            {
              v145 = *v15;
              v22 = *v8;
              v15->n128_u32[2] = *(_DWORD *)(a2 - 8);
              v15->n128_u64[0] = v22;
              *(_DWORD *)(a2 - 8) = v145.n128_u32[2];
              *v8 = v145.n128_u64[0];
              if (v15->n128_u64[0] < *(_QWORD *)v11)
              {
                v146 = *(__n128 *)v11;
                v23 = v15->n128_u64[0];
                *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
                *(_QWORD *)v11 = v23;
                v15->n128_u32[2] = v146.n128_u32[2];
                v15->n128_u64[0] = v146.n128_u64[0];
              }
            }
          }
          else
          {
            if (v16 < v17)
            {
              v143 = *(__n128 *)v11;
              v18 = *v8;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 8);
              *(_QWORD *)v11 = v18;
              goto LABEL_20;
            }
            v149 = *(__n128 *)v11;
            v26 = v15->n128_u64[0];
            *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
            *(_QWORD *)v11 = v26;
            v15->n128_u32[2] = v149.n128_u32[2];
            v15->n128_u64[0] = v149.n128_u64[0];
            if (*v8 < v15->n128_u64[0])
            {
              v143 = *v15;
              v27 = *v8;
              v15->n128_u32[2] = *(_DWORD *)(a2 - 8);
              v15->n128_u64[0] = v27;
LABEL_20:
              *(_DWORD *)(a2 - 8) = v143.n128_u32[2];
              *v8 = v143.n128_u64[0];
            }
          }
          v28 = (__n128 *)(v11 + 16);
          v29 = v11 + 16 * v14;
          v32 = *(_QWORD *)(v29 - 16);
          v30 = (__n128 *)(v29 - 16);
          v31 = v32;
          v33 = *v9;
          if (v32 >= *(_QWORD *)(v11 + 16))
          {
            if (v33 < v31)
            {
              v151 = *v30;
              v35 = *v9;
              v30->n128_u32[2] = *(_DWORD *)(a2 - 24);
              v30->n128_u64[0] = v35;
              *(_DWORD *)(a2 - 24) = v151.n128_u32[2];
              *v9 = v151.n128_u64[0];
              if (v30->n128_u64[0] < v28->n128_u64[0])
              {
                v152 = *v28;
                v36 = v30->n128_u64[0];
                *(_DWORD *)(v11 + 24) = v30->n128_u32[2];
                v28->n128_u64[0] = v36;
                v30->n128_u32[2] = v152.n128_u32[2];
                v30->n128_u64[0] = v152.n128_u64[0];
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v150 = *v28;
              v34 = *v9;
              *(_DWORD *)(v11 + 24) = *(_DWORD *)(a2 - 24);
              v28->n128_u64[0] = v34;
              goto LABEL_32;
            }
            v154 = *v28;
            v39 = v30->n128_u64[0];
            *(_DWORD *)(v11 + 24) = v30->n128_u32[2];
            v28->n128_u64[0] = v39;
            v30->n128_u32[2] = v154.n128_u32[2];
            v30->n128_u64[0] = v154.n128_u64[0];
            if (*v9 < v30->n128_u64[0])
            {
              v150 = *v30;
              v40 = *v9;
              v30->n128_u32[2] = *(_DWORD *)(a2 - 24);
              v30->n128_u64[0] = v40;
LABEL_32:
              *(_DWORD *)(a2 - 24) = v150.n128_u32[2];
              *v9 = v150.n128_u64[0];
            }
          }
          v41 = (__int128 *)(v11 + 32);
          v42 = v11 + 16 * v14;
          v45 = *(_QWORD *)(v42 + 16);
          v43 = v42 + 16;
          v44 = v45;
          v46 = *v10;
          if (v45 >= *(_QWORD *)(v11 + 32))
          {
            if (v46 < v44)
            {
              v156 = *(_OWORD *)v43;
              v48 = *v10;
              *(_DWORD *)(v43 + 8) = *(_DWORD *)(a2 - 40);
              *(_QWORD *)v43 = v48;
              *(_DWORD *)(a2 - 40) = DWORD2(v156);
              *v10 = v156;
              if (*(_QWORD *)v43 < *(_QWORD *)v41)
              {
                v157 = *v41;
                v49 = *(_QWORD *)v43;
                *(_DWORD *)(v11 + 40) = *(_DWORD *)(v43 + 8);
                *(_QWORD *)v41 = v49;
                *(_DWORD *)(v43 + 8) = DWORD2(v157);
                *(_QWORD *)v43 = v157;
              }
            }
          }
          else
          {
            if (v46 < v44)
            {
              v155 = *v41;
              v47 = *v10;
              *(_DWORD *)(v11 + 40) = *(_DWORD *)(a2 - 40);
              *(_QWORD *)v41 = v47;
              goto LABEL_41;
            }
            v158 = *v41;
            v50 = *(_QWORD *)v43;
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v43 + 8);
            *(_QWORD *)v41 = v50;
            *(_DWORD *)(v43 + 8) = DWORD2(v158);
            *(_QWORD *)v43 = v158;
            if (*v10 < *(_QWORD *)v43)
            {
              v155 = *(_OWORD *)v43;
              v51 = *v10;
              *(_DWORD *)(v43 + 8) = *(_DWORD *)(a2 - 40);
              *(_QWORD *)v43 = v51;
LABEL_41:
              *(_DWORD *)(a2 - 40) = DWORD2(v155);
              *v10 = v155;
            }
          }
          v52 = v15->n128_u64[0];
          v53 = *(_QWORD *)v43;
          if (v15->n128_u64[0] >= v30->n128_u64[0])
          {
            if (v53 < v52)
            {
              v160 = *v15;
              v15->n128_u64[0] = *(_QWORD *)v43;
              v15->n128_u32[2] = *(_DWORD *)(v43 + 8);
              *(_QWORD *)v43 = v160.n128_u64[0];
              *(_DWORD *)(v43 + 8) = v160.n128_u32[2];
              if (v15->n128_u64[0] < v30->n128_u64[0])
              {
                v161 = *v30;
                v30->n128_u64[0] = v15->n128_u64[0];
                v30->n128_u32[2] = v15->n128_u32[2];
                v15->n128_u64[0] = v161.n128_u64[0];
                v15->n128_u32[2] = v161.n128_u32[2];
              }
            }
          }
          else
          {
            if (v53 < v52)
            {
              v159 = *v30;
              v30->n128_u64[0] = *(_QWORD *)v43;
              v30->n128_u32[2] = *(_DWORD *)(v43 + 8);
              goto LABEL_50;
            }
            v162 = *v30;
            v30->n128_u64[0] = v15->n128_u64[0];
            v30->n128_u32[2] = v15->n128_u32[2];
            v15->n128_u64[0] = v162.n128_u64[0];
            v15->n128_u32[2] = v162.n128_u32[2];
            if (*(_QWORD *)v43 < v162.n128_u64[0])
            {
              v159 = *v15;
              v15->n128_u64[0] = *(_QWORD *)v43;
              v15->n128_u32[2] = *(_DWORD *)(v43 + 8);
LABEL_50:
              *(_QWORD *)v43 = v159.n128_u64[0];
              *(_DWORD *)(v43 + 8) = v159.n128_u32[2];
            }
          }
          result = *(__n128 *)v11;
          v163 = *(__n128 *)v11;
          v54 = v15->n128_u64[0];
          *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
          *(_QWORD *)v11 = v54;
          v15->n128_u32[2] = v163.n128_u32[2];
          v15->n128_u64[0] = v163.n128_u64[0];
          goto LABEL_52;
        }
        v19 = *(_QWORD *)v11;
        if (*(_QWORD *)v11 >= v15->n128_u64[0])
        {
          if (v16 < v19)
          {
            result = *(__n128 *)v11;
            v147 = *(__n128 *)v11;
            v24 = *v8;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v11 = v24;
            *(_DWORD *)(a2 - 8) = v147.n128_u32[2];
            *v8 = v147.n128_u64[0];
            if (*(_QWORD *)v11 < v15->n128_u64[0])
            {
              result = *v15;
              v148 = *v15;
              v25 = *(_QWORD *)v11;
              v15->n128_u32[2] = *(_DWORD *)(v11 + 8);
              v15->n128_u64[0] = v25;
              *(_DWORD *)(v11 + 8) = v148.n128_u32[2];
              *(_QWORD *)v11 = v148.n128_u64[0];
            }
          }
        }
        else
        {
          if (v16 >= v19)
          {
            result = *v15;
            v153 = *v15;
            v37 = *(_QWORD *)v11;
            v15->n128_u32[2] = *(_DWORD *)(v11 + 8);
            v15->n128_u64[0] = v37;
            *(_DWORD *)(v11 + 8) = v153.n128_u32[2];
            *(_QWORD *)v11 = v153.n128_u64[0];
            if (*v8 >= *(_QWORD *)v11)
              goto LABEL_52;
            result = *(__n128 *)v11;
            v144 = *(__n128 *)v11;
            v38 = *v8;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v11 = v38;
          }
          else
          {
            result = *v15;
            v144 = *v15;
            v21 = *v8;
            v15->n128_u32[2] = *(_DWORD *)(a2 - 8);
            v15->n128_u64[0] = v21;
          }
          *(_DWORD *)(a2 - 8) = v144.n128_u32[2];
          *v8 = v144.n128_u64[0];
        }
LABEL_52:
        --a3;
        v55 = *(__n128 **)v11;
        if ((a4 & 1) == 0 && *(_QWORD *)(v11 - 16) >= (unint64_t)v55)
        {
          v70 = *(_QWORD *)(v11 + 8);
          if ((unint64_t)v55 >= *v8)
          {
            v73 = v11 + 16;
            do
            {
              v11 = v73;
              if (v73 >= a2)
                break;
              v73 += 16;
            }
            while ((unint64_t)v55 >= *(_QWORD *)v11);
          }
          else
          {
            v71 = (unint64_t *)(v11 + 16);
            do
            {
              if (v71 == (unint64_t *)a2)
                goto LABEL_187;
              v72 = *v71;
              v71 += 2;
            }
            while ((unint64_t)v55 >= v72);
            v11 = (unint64_t)(v71 - 2);
          }
          v74 = (__n128 *)a2;
          if (v11 < a2)
          {
            v74 = (__n128 *)a2;
            while (v74 != a1)
            {
              v75 = v74[-1].n128_u64[0];
              --v74;
              if ((unint64_t)v55 >= v75)
                goto LABEL_98;
            }
            goto LABEL_187;
          }
LABEL_98:
          if (v11 < (unint64_t)v74)
          {
            result = *(__n128 *)v11;
            v165 = *(__n128 *)v11;
            v76 = v74->n128_u64[0];
            *(_DWORD *)(v11 + 8) = v74->n128_u32[2];
            *(_QWORD *)v11 = v76;
            v74->n128_u32[2] = v165.n128_u32[2];
            v74->n128_u64[0] = v165.n128_u64[0];
            v77 = (unint64_t *)(v11 + 16);
            while (v77 != (unint64_t *)a2)
            {
              v78 = *v77;
              v77 += 2;
              if ((unint64_t)v55 < v78)
              {
                v11 = (unint64_t)(v77 - 2);
                while (v74 != a1)
                {
                  v79 = v74[-1].n128_u64[0];
                  --v74;
                  if ((unint64_t)v55 >= v79)
                    goto LABEL_98;
                }
                goto LABEL_187;
              }
            }
            goto LABEL_187;
          }
          if ((__n128 *)(v11 - 16) != a1)
          {
            v80 = *(_QWORD *)(v11 - 16);
            a1->n128_u32[2] = *(_DWORD *)(v11 - 8);
            a1->n128_u64[0] = v80;
          }
          a4 = 0;
          *(_QWORD *)(v11 - 16) = v55;
          *(_DWORD *)(v11 - 8) = v70;
          continue;
        }
        v56 = 0;
        v57 = *(_QWORD *)(v11 + 8);
        do
        {
          v58 = (_QWORD *)(v11 + v56 + 16);
          if (v58 == (_QWORD *)a2)
            goto LABEL_187;
          v56 += 16;
        }
        while (*v58 < (unint64_t)v55);
        v59 = v11 + v56;
        v60 = a2;
        if (v56 != 16)
        {
          while (v60 != v11)
          {
            v61 = *(_QWORD *)(v60 - 16);
            v60 -= 16;
            if (v61 < (unint64_t)v55)
              goto LABEL_64;
          }
          goto LABEL_187;
        }
        v60 = a2;
        do
        {
          if (v59 >= v60)
            break;
          v62 = *(_QWORD *)(v60 - 16);
          v60 -= 16;
        }
        while (v62 >= (unint64_t)v55);
LABEL_64:
        v11 += v56;
        if (v59 < v60)
        {
          v63 = (__n128 *)v60;
          do
          {
            v164 = *(__n128 *)v11;
            v64 = v63->n128_u64[0];
            *(_DWORD *)(v11 + 8) = v63->n128_u32[2];
            *(_QWORD *)v11 = v64;
            v63->n128_u32[2] = v164.n128_u32[2];
            v63->n128_u64[0] = v164.n128_u64[0];
            v65 = (unint64_t *)(v11 + 16);
            do
            {
              if (v65 == (unint64_t *)a2)
                goto LABEL_187;
              v66 = *v65;
              v65 += 2;
            }
            while (v66 < (unint64_t)v55);
            v11 = (unint64_t)(v65 - 2);
            do
            {
              if (v63 == a1)
                goto LABEL_187;
              v67 = v63[-1].n128_u64[0];
              --v63;
            }
            while (v67 >= (unint64_t)v55);
          }
          while (v11 < (unint64_t)v63);
        }
        if ((__n128 *)(v11 - 16) != a1)
        {
          v68 = *(_QWORD *)(v11 - 16);
          a1->n128_u32[2] = *(_DWORD *)(v11 - 8);
          a1->n128_u64[0] = v68;
        }
        *(_QWORD *)(v11 - 16) = v55;
        *(_DWORD *)(v11 - 8) = v57;
        if (v59 < v60)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *,false>(a1, v11 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>((uint64_t)a1, v11 - 16);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>(v11, a2))
        {
          if (v69)
            continue;
          goto LABEL_78;
        }
        a2 = v11 - 16;
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 8;
  v10 = a2 - 16;
  v11 = a2 - 24;
  v12 = (unsigned int *)a1;
  while (2)
  {
    a1 = (uint64_t)v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = ((char *)a2 - (char *)v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v86 = *(a2 - 8);
        a2 -= 8;
        if (v86 < *v12)
          goto LABEL_109;
        return;
      case 3:
        v61 = v12 + 8;
        v87 = v12[8];
        v89 = *(a2 - 8);
        a2 -= 8;
        v88 = v89;
        if (v87 < *v12)
        {
          if (v88 >= v87)
            goto LABEL_189;
LABEL_109:
          *(_OWORD *)v175 = *(_OWORD *)v12;
          *(_OWORD *)&v175[16] = *((_OWORD *)v12 + 1);
          v90 = *(_OWORD *)a2;
          *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a2 + 9);
          *(_OWORD *)v12 = v90;
          v91 = *(_OWORD *)v175;
          goto LABEL_110;
        }
        if (v88 < v87)
        {
          *(_OWORD *)v183 = *(_OWORD *)v61;
          v138 = *(_OWORD *)v61;
          *(_OWORD *)&v183[16] = *((_OWORD *)v12 + 3);
          v139 = *(_OWORD *)((char *)a2 + 9);
          *(_OWORD *)v61 = *(_OWORD *)a2;
          *(_OWORD *)((char *)v12 + 41) = v139;
          *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v183[9];
          *(_OWORD *)a2 = v138;
          if (v12[8] < *v12)
          {
            *(_OWORD *)v184 = *(_OWORD *)v12;
            *(_OWORD *)&v184[16] = *((_OWORD *)v12 + 1);
            *(_OWORD *)v12 = *(_OWORD *)v61;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v12 + 41);
            *(_OWORD *)v61 = *(_OWORD *)v184;
            *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)&v184[9];
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>(v12, (int *)v12 + 8, (int *)v12 + 16, (_OWORD *)a2 - 2, a5);
        return;
      case 5:
        v92 = v12 + 8;
        v93 = v12 + 16;
        v94 = v12 + 24;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>(v12, (int *)v12 + 8, (int *)v12 + 16, (_OWORD *)v12 + 6, a5);
        v96 = *(a2 - 8);
        v95 = a2 - 8;
        if (v96 < v12[24])
        {
          *(_OWORD *)v176 = *v94;
          v97 = *v94;
          *(_OWORD *)&v176[16] = *((_OWORD *)v12 + 7);
          v98 = *(_OWORD *)((char *)v95 + 9);
          *v94 = *(_OWORD *)v95;
          *(_OWORD *)((char *)v12 + 105) = v98;
          *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)&v176[9];
          *(_OWORD *)v95 = v97;
          if (*(_DWORD *)v94 < *(_DWORD *)v93)
          {
            *(_OWORD *)v177 = *v93;
            v99 = *v93;
            *(_OWORD *)&v177[16] = *((_OWORD *)v12 + 5);
            *v93 = *v94;
            *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)((char *)v12 + 105);
            *v94 = v99;
            *(_OWORD *)((char *)v12 + 105) = *(_OWORD *)&v177[9];
            if (*(_DWORD *)v93 < *(_DWORD *)v92)
            {
              *(_OWORD *)v178 = *v92;
              v100 = *v92;
              *(_OWORD *)&v178[16] = *((_OWORD *)v12 + 3);
              *v92 = *v93;
              *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)v12 + 73);
              *v93 = v100;
              *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)&v178[9];
              if (v12[8] < *v12)
              {
                *(_OWORD *)v179 = *(_OWORD *)v12;
                *(_OWORD *)&v179[16] = *((_OWORD *)v12 + 1);
                *(_OWORD *)v12 = *v92;
                *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v12 + 41);
                *v92 = *(_OWORD *)v179;
                *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)&v179[9];
              }
            }
          }
        }
        return;
      default:
        if (v13 <= 767)
        {
          v61 = v12 + 8;
          v102 = v12 == a2 || v61 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v12;
              do
              {
                v105 = v61;
                v106 = *v61;
                if (v106 < *v104)
                {
                  *(_OWORD *)v180 = *(_OWORD *)(v104 + 9);
                  *(_OWORD *)&v180[12] = *((_OWORD *)v104 + 3);
                  v107 = v103;
                  while (1)
                  {
                    v108 = (char *)v12 + v107;
                    *((_OWORD *)v108 + 2) = *(_OWORD *)((char *)v12 + v107);
                    *(_OWORD *)(v108 + 41) = *(_OWORD *)((char *)v12 + v107 + 9);
                    if (!v107)
                      break;
                    v107 -= 32;
                    if (v106 >= *((_DWORD *)v108 - 8))
                    {
                      v109 = (uint64_t)v12 + v107 + 32;
                      goto LABEL_132;
                    }
                  }
                  v109 = (uint64_t)v12;
LABEL_132:
                  *(_DWORD *)v109 = v106;
                  *(_QWORD *)(v109 + 17) = *(_QWORD *)&v180[13];
                  *(_OWORD *)(v109 + 4) = *(_OWORD *)v180;
                }
                v61 = v105 + 8;
                v103 += 32;
                v104 = v105;
              }
              while (v105 + 8 != a2);
            }
          }
          else if (!v102)
          {
            v140 = -2;
            v141 = 1;
            v142 = v12;
            while (1)
            {
              v143 = *v61;
              if (*v61 < *v142)
                break;
LABEL_186:
              v142 = &v12[8 * v141++];
              v61 += 8;
              --v140;
              if (v61 == a2)
                return;
            }
            *(_OWORD *)v185 = *(_OWORD *)(v142 + 9);
            *(_OWORD *)&v185[12] = *((_OWORD *)v142 + 3);
            v144 = v140;
            v145 = v61;
            while (1)
            {
              *(_OWORD *)v145 = *((_OWORD *)v145 - 2);
              *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v145 - 23);
              v115 = __CFADD__(v144++, 1);
              if (v115)
                break;
              v146 = v145 - 8;
              v147 = *(v145 - 16);
              v145 -= 8;
              if (v143 >= v147)
              {
                *v146 = v143;
                *(_QWORD *)((char *)v146 + 17) = *(_QWORD *)&v185[13];
                *(_OWORD *)(v146 + 1) = *(_OWORD *)v185;
                goto LABEL_186;
              }
            }
LABEL_188:
            __break(1u);
LABEL_189:
            *(_OWORD *)v186 = *(_OWORD *)a1;
            *(_OWORD *)&v186[16] = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v61;
            *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)v61 + 9);
            *(_OWORD *)v61 = *(_OWORD *)v186;
            *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)&v186[9];
            if (*a2 < *(_DWORD *)(a1 + 32))
            {
              v91 = *(_OWORD *)v61;
              *(_OWORD *)v175 = *(_OWORD *)v61;
              *(_OWORD *)&v175[16] = *((_OWORD *)v61 + 1);
              v148 = *(_OWORD *)((char *)a2 + 9);
              *(_OWORD *)v61 = *(_OWORD *)a2;
              *(_OWORD *)((char *)v61 + 9) = v148;
LABEL_110:
              *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v175[9];
              *(_OWORD *)a2 = v91;
            }
          }
          return;
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v110 = (unint64_t)(v14 - 2) >> 1;
            v111 = v110;
            do
            {
              if (v110 >= v111)
              {
                v112 = (2 * v111) | 1;
                v113 = &v12[8 * v112];
                if (2 * v111 + 2 >= v14)
                {
                  v114 = *v113;
                }
                else
                {
                  v114 = v113[8];
                  v115 = *v113 >= v114;
                  if (*v113 > v114)
                    v114 = *v113;
                  if (!v115)
                  {
                    v113 += 8;
                    v112 = 2 * v111 + 2;
                  }
                }
                v116 = &v12[8 * v111];
                v117 = *v116;
                if (v114 >= *v116)
                {
                  *(_OWORD *)&v181[12] = *((_OWORD *)v116 + 1);
                  *(_OWORD *)v181 = *(_OWORD *)(v116 + 1);
                  do
                  {
                    v118 = v116;
                    v116 = v113;
                    v119 = *(_OWORD *)v113;
                    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)v113 + 9);
                    *(_OWORD *)v118 = v119;
                    if (v110 < v112)
                      break;
                    v120 = (2 * v112) | 1;
                    v113 = &v12[8 * v120];
                    v112 = 2 * v112 + 2;
                    if (v112 >= v14)
                    {
                      v121 = *v113;
                      v112 = v120;
                    }
                    else
                    {
                      v121 = *v113;
                      v122 = v113[8];
                      if (*v113 <= v122)
                        v121 = v113[8];
                      if (*v113 >= v122)
                        v112 = v120;
                      else
                        v113 += 8;
                    }
                  }
                  while (v121 >= v117);
                  *v116 = v117;
                  *(_QWORD *)((char *)v116 + 17) = *(_QWORD *)&v181[13];
                  *(_OWORD *)(v116 + 1) = *(_OWORD *)v181;
                }
              }
              v123 = v111-- <= 0;
            }
            while (!v123);
            v124 = (unint64_t)v13 >> 5;
            do
            {
              v125 = 0;
              *(_OWORD *)v182 = *(_OWORD *)v12;
              *(_OWORD *)&v182[16] = *((_OWORD *)v12 + 1);
              v126 = v12;
              do
              {
                v127 = (uint64_t)&v126[2 * v125 + 2];
                v128 = (2 * v125) | 1;
                v129 = 2 * v125 + 2;
                if (v129 < v124 && *(_DWORD *)v127 < *(_DWORD *)(v127 + 32))
                {
                  v127 += 32;
                  v128 = v129;
                }
                v130 = *(_OWORD *)v127;
                *(_OWORD *)((char *)v126 + 9) = *(_OWORD *)(v127 + 9);
                *v126 = v130;
                v126 = (_OWORD *)v127;
                v125 = v128;
              }
              while (v128 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
              a2 -= 8;
              if ((unsigned int *)v127 == a2)
              {
                *(_OWORD *)(v127 + 9) = *(_OWORD *)&v182[9];
                *(_OWORD *)v127 = *(_OWORD *)v182;
              }
              else
              {
                v131 = *(_OWORD *)a2;
                *(_OWORD *)(v127 + 9) = *(_OWORD *)((char *)a2 + 9);
                *(_OWORD *)v127 = v131;
                *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v182[9];
                *(_OWORD *)a2 = *(_OWORD *)v182;
                v132 = v127 - (_QWORD)v12 + 32;
                if (v132 >= 33)
                {
                  v133 = (((unint64_t)v132 >> 5) - 2) >> 1;
                  v134 = &v12[8 * v133];
                  v135 = *(_DWORD *)v127;
                  if (*v134 < *(_DWORD *)v127)
                  {
                    *(_OWORD *)&v151[12] = *(_OWORD *)(v127 + 16);
                    *(_OWORD *)v151 = *(_OWORD *)(v127 + 4);
                    do
                    {
                      v136 = (_OWORD *)v127;
                      v127 = (uint64_t)v134;
                      v137 = *(_OWORD *)v134;
                      *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)((char *)v134 + 9);
                      *v136 = v137;
                      if (!v133)
                        break;
                      v133 = (v133 - 1) >> 1;
                      v134 = &v12[8 * v133];
                    }
                    while (*v134 < v135);
                    *(_DWORD *)v127 = v135;
                    *(_QWORD *)(v127 + 17) = *(_QWORD *)&v151[13];
                    *(_OWORD *)(v127 + 4) = *(_OWORD *)v151;
                  }
                }
              }
              v123 = v124-- <= 2;
            }
            while (!v123);
          }
          return;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = &v12[8 * ((unint64_t)v14 >> 1)];
        v17 = *v9;
        if ((unint64_t)v13 > 0x1000)
        {
          v18 = *v16;
          if (*v16 >= *v12)
          {
            if (v17 < v18)
            {
              *(_OWORD *)v154 = *(_OWORD *)v16;
              *(_OWORD *)&v154[16] = *((_OWORD *)v16 + 1);
              v22 = *(_OWORD *)v9;
              *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 - 23);
              *(_OWORD *)v16 = v22;
              *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v154[9];
              *(_OWORD *)v9 = *(_OWORD *)v154;
              if (*v16 < *v12)
              {
                *(_OWORD *)v155 = *(_OWORD *)v12;
                *(_OWORD *)&v155[16] = *((_OWORD *)v12 + 1);
                v23 = *(_OWORD *)v16;
                *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v16 + 9);
                *(_OWORD *)v12 = v23;
                *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v155[9];
                *(_OWORD *)v16 = *(_OWORD *)v155;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              *(_OWORD *)v152 = *(_OWORD *)v12;
              *(_OWORD *)&v152[16] = *((_OWORD *)v12 + 1);
              v19 = *(_OWORD *)v9;
              *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a2 - 23);
              *(_OWORD *)v12 = v19;
              goto LABEL_20;
            }
            *(_OWORD *)v158 = *(_OWORD *)v12;
            *(_OWORD *)&v158[16] = *((_OWORD *)v12 + 1);
            v26 = *(_OWORD *)v16;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v16 + 9);
            *(_OWORD *)v12 = v26;
            *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v158[9];
            *(_OWORD *)v16 = *(_OWORD *)v158;
            if (*v9 < *v16)
            {
              *(_OWORD *)v152 = *(_OWORD *)v16;
              *(_OWORD *)&v152[16] = *((_OWORD *)v16 + 1);
              v27 = *(_OWORD *)v9;
              *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 - 23);
              *(_OWORD *)v16 = v27;
LABEL_20:
              *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v152[9];
              *(_OWORD *)v9 = *(_OWORD *)v152;
            }
          }
          v28 = v12 + 8;
          v29 = &v12[8 * v15];
          v32 = *(v29 - 8);
          v30 = v29 - 8;
          v31 = v32;
          v33 = *v10;
          if (v32 >= v12[8])
          {
            if (v33 < v31)
            {
              *(_OWORD *)v160 = *(_OWORD *)v30;
              *(_OWORD *)&v160[16] = *((_OWORD *)v30 + 1);
              v36 = *(_OWORD *)v10;
              *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)a2 - 55);
              *(_OWORD *)v30 = v36;
              *(_OWORD *)((char *)a2 - 55) = *(_OWORD *)&v160[9];
              *(_OWORD *)v10 = *(_OWORD *)v160;
              if (*v30 < *(_DWORD *)v28)
              {
                *(_OWORD *)v161 = *v28;
                v37 = *v28;
                *(_OWORD *)&v161[16] = *((_OWORD *)v12 + 3);
                v38 = *(_OWORD *)((char *)v30 + 9);
                *v28 = *(_OWORD *)v30;
                *(_OWORD *)((char *)v12 + 41) = v38;
                *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)&v161[9];
                *(_OWORD *)v30 = v37;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              *(_OWORD *)v159 = *v28;
              *(_OWORD *)&v159[16] = *((_OWORD *)v12 + 3);
              v35 = *(_OWORD *)((char *)a2 - 55);
              *v28 = *(_OWORD *)v10;
              *(_OWORD *)((char *)v12 + 41) = v35;
              goto LABEL_32;
            }
            *(_OWORD *)v163 = *v28;
            v41 = *v28;
            *(_OWORD *)&v163[16] = *((_OWORD *)v12 + 3);
            v42 = *(_OWORD *)((char *)v30 + 9);
            *v28 = *(_OWORD *)v30;
            *(_OWORD *)((char *)v12 + 41) = v42;
            *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)&v163[9];
            *(_OWORD *)v30 = v41;
            if (*v10 < *v30)
            {
              *(_OWORD *)v159 = *(_OWORD *)v30;
              *(_OWORD *)&v159[16] = *((_OWORD *)v30 + 1);
              v43 = *(_OWORD *)v10;
              *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)a2 - 55);
              *(_OWORD *)v30 = v43;
              v34 = *(_OWORD *)v159;
LABEL_32:
              *(_OWORD *)((char *)a2 - 55) = *(_OWORD *)&v159[9];
              *(_OWORD *)v10 = v34;
            }
          }
          v44 = v12 + 16;
          v45 = &v12[8 * v15];
          v48 = v45[8];
          v46 = v45 + 8;
          v47 = v48;
          v49 = *v11;
          if (v48 >= v12[16])
          {
            if (v49 < v47)
            {
              *(_OWORD *)v165 = *v46;
              *(_OWORD *)&v165[16] = v46[1];
              v52 = *(_OWORD *)v11;
              *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)a2 - 87);
              *v46 = v52;
              *(_OWORD *)((char *)a2 - 87) = *(_OWORD *)&v165[9];
              *(_OWORD *)v11 = *(_OWORD *)v165;
              if (*(_DWORD *)v46 < *(_DWORD *)v44)
              {
                *(_OWORD *)v166 = *v44;
                v53 = *v44;
                *(_OWORD *)&v166[16] = *((_OWORD *)v12 + 5);
                v54 = *(_OWORD *)((char *)v46 + 9);
                *v44 = *v46;
                *(_OWORD *)((char *)v12 + 73) = v54;
                *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)&v166[9];
                *v46 = v53;
              }
            }
          }
          else
          {
            if (v49 < v47)
            {
              v50 = *v44;
              *(_OWORD *)v164 = *v44;
              *(_OWORD *)&v164[16] = *((_OWORD *)v12 + 5);
              v51 = *(_OWORD *)((char *)a2 - 87);
              *v44 = *(_OWORD *)v11;
              *(_OWORD *)((char *)v12 + 73) = v51;
              goto LABEL_41;
            }
            *(_OWORD *)v167 = *v44;
            v55 = *v44;
            *(_OWORD *)&v167[16] = *((_OWORD *)v12 + 5);
            v56 = *(_OWORD *)((char *)v46 + 9);
            *v44 = *v46;
            *(_OWORD *)((char *)v12 + 73) = v56;
            *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)&v167[9];
            *v46 = v55;
            if (*v11 < *(_DWORD *)v46)
            {
              *(_OWORD *)v164 = *v46;
              *(_OWORD *)&v164[16] = v46[1];
              v57 = *(_OWORD *)v11;
              *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)a2 - 87);
              *v46 = v57;
              v50 = *(_OWORD *)v164;
LABEL_41:
              *(_OWORD *)((char *)a2 - 87) = *(_OWORD *)&v164[9];
              *(_OWORD *)v11 = v50;
            }
          }
          v58 = *v16;
          v59 = *(_DWORD *)v46;
          if (*v16 >= *v30)
          {
            if (v59 < v58)
            {
              *(_OWORD *)v169 = *(_OWORD *)v16;
              *(_OWORD *)&v169[16] = *((_OWORD *)v16 + 1);
              *(_OWORD *)v16 = *v46;
              *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v46 + 9);
              *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)&v169[9];
              *v46 = *(_OWORD *)v169;
              if (*v16 < *v30)
              {
                *(_OWORD *)v170 = *(_OWORD *)v30;
                *(_OWORD *)&v170[16] = *((_OWORD *)v30 + 1);
                *(_OWORD *)v30 = *(_OWORD *)v16;
                *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)v16 + 9);
                *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v170[9];
                *(_OWORD *)v16 = *(_OWORD *)v170;
              }
            }
          }
          else
          {
            if (v59 < v58)
            {
              *(_OWORD *)v168 = *(_OWORD *)v30;
              *(_OWORD *)&v168[16] = *((_OWORD *)v30 + 1);
              *(_OWORD *)v30 = *v46;
              *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)v46 + 9);
              goto LABEL_50;
            }
            *(_OWORD *)v171 = *(_OWORD *)v30;
            *(_OWORD *)&v171[16] = *((_OWORD *)v30 + 1);
            *(_OWORD *)v30 = *(_OWORD *)v16;
            *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)v16 + 9);
            *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v171[9];
            *(_OWORD *)v16 = *(_OWORD *)v171;
            if (*(_DWORD *)v46 < *v16)
            {
              *(_OWORD *)v168 = *(_OWORD *)v16;
              *(_OWORD *)&v168[16] = *((_OWORD *)v16 + 1);
              *(_OWORD *)v16 = *v46;
              *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v46 + 9);
LABEL_50:
              *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)&v168[9];
              *v46 = *(_OWORD *)v168;
            }
          }
          *(_OWORD *)v172 = *(_OWORD *)v12;
          *(_OWORD *)&v172[16] = *((_OWORD *)v12 + 1);
          v60 = *(_OWORD *)v16;
          *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v16 + 9);
          *(_OWORD *)v12 = v60;
          *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v172[9];
          *(_OWORD *)v16 = *(_OWORD *)v172;
          goto LABEL_52;
        }
        v20 = *v12;
        if (*v12 >= *v16)
        {
          if (v17 < v20)
          {
            *(_OWORD *)v156 = *(_OWORD *)v12;
            *(_OWORD *)&v156[16] = *((_OWORD *)v12 + 1);
            v24 = *(_OWORD *)v9;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a2 - 23);
            *(_OWORD *)v12 = v24;
            *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v156[9];
            *(_OWORD *)v9 = *(_OWORD *)v156;
            if (*v12 < *v16)
            {
              *(_OWORD *)v157 = *(_OWORD *)v16;
              *(_OWORD *)&v157[16] = *((_OWORD *)v16 + 1);
              v25 = *(_OWORD *)v12;
              *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v12 + 9);
              *(_OWORD *)v16 = v25;
              *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)&v157[9];
              *(_OWORD *)v12 = *(_OWORD *)v157;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            *(_OWORD *)v162 = *(_OWORD *)v16;
            *(_OWORD *)&v162[16] = *((_OWORD *)v16 + 1);
            v39 = *(_OWORD *)v12;
            *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v12 + 9);
            *(_OWORD *)v16 = v39;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)&v162[9];
            *(_OWORD *)v12 = *(_OWORD *)v162;
            if (*v9 >= *v12)
              goto LABEL_52;
            *(_OWORD *)v153 = *(_OWORD *)v12;
            *(_OWORD *)&v153[16] = *((_OWORD *)v12 + 1);
            v40 = *(_OWORD *)v9;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a2 - 23);
            *(_OWORD *)v12 = v40;
          }
          else
          {
            *(_OWORD *)v153 = *(_OWORD *)v16;
            *(_OWORD *)&v153[16] = *((_OWORD *)v16 + 1);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 - 23);
            *(_OWORD *)v16 = v21;
          }
          *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v153[9];
          *(_OWORD *)v9 = *(_OWORD *)v153;
        }
LABEL_52:
        --a3;
        v61 = (unsigned int *)*v12;
        if ((a4 & 1) == 0 && *(v12 - 8) >= v61)
        {
          *(_OWORD *)&v150[12] = *((_OWORD *)v12 + 1);
          *(_OWORD *)v150 = *(_OWORD *)(v12 + 1);
          if (v61 >= *v9)
          {
            v78 = v12 + 8;
            do
            {
              v12 = v78;
              if (v78 >= a2)
                break;
              v78 += 8;
            }
            while (v61 >= *v12);
          }
          else
          {
            v76 = v12 + 8;
            do
            {
              if (v76 == a2)
                goto LABEL_188;
              v77 = *v76;
              v76 += 8;
            }
            while (v61 >= v77);
            v12 = v76 - 8;
          }
          v79 = a2;
          if (v12 < a2)
          {
            v79 = a2;
            while (v79 != (unsigned int *)a1)
            {
              v80 = *(v79 - 8);
              v79 -= 8;
              if (v61 >= v80)
                goto LABEL_98;
            }
            goto LABEL_188;
          }
LABEL_98:
          if (v12 < v79)
          {
            *(_OWORD *)v174 = *(_OWORD *)v12;
            *(_OWORD *)&v174[16] = *((_OWORD *)v12 + 1);
            v81 = *(_OWORD *)v79;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v79 + 9);
            *(_OWORD *)v12 = v81;
            *(_OWORD *)((char *)v79 + 9) = *(_OWORD *)&v174[9];
            *(_OWORD *)v79 = *(_OWORD *)v174;
            v82 = v12 + 8;
            while (v82 != a2)
            {
              v83 = *v82;
              v82 += 8;
              if (v61 < v83)
              {
                v12 = v82 - 8;
                while (v79 != (unsigned int *)a1)
                {
                  v84 = *(v79 - 8);
                  v79 -= 8;
                  if (v61 >= v84)
                    goto LABEL_98;
                }
                goto LABEL_188;
              }
            }
            goto LABEL_188;
          }
          if (v12 - 8 != (unsigned int *)a1)
          {
            v85 = *((_OWORD *)v12 - 2);
            *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)v12 - 23);
            *(_OWORD *)a1 = v85;
          }
          a4 = 0;
          *(v12 - 8) = v61;
          a5 = *(__n128 *)v150;
          *(_QWORD *)((char *)v12 - 15) = *(_QWORD *)&v150[13];
          *(_OWORD *)(v12 - 7) = *(_OWORD *)v150;
          continue;
        }
        v62 = 0;
        *(_OWORD *)&v149[12] = *((_OWORD *)v12 + 1);
        *(_OWORD *)v149 = *(_OWORD *)(v12 + 1);
        do
        {
          v63 = &v12[v62 + 8];
          if (v63 == a2)
            goto LABEL_188;
          v62 += 8;
        }
        while (*v63 < v61);
        v64 = &v12[v62];
        v65 = a2;
        if (v62 != 8)
        {
          while (v65 != v12)
          {
            v66 = *(v65 - 8);
            v65 -= 8;
            if (v66 < v61)
              goto LABEL_64;
          }
          goto LABEL_188;
        }
        v65 = a2;
        do
        {
          if (v64 >= v65)
            break;
          v67 = *(v65 - 8);
          v65 -= 8;
        }
        while (v67 >= v61);
LABEL_64:
        v12 = (unsigned int *)((char *)v12 + v62 * 4);
        if (v64 < v65)
        {
          v68 = v65;
          do
          {
            *(_OWORD *)v173 = *(_OWORD *)v12;
            *(_OWORD *)&v173[16] = *((_OWORD *)v12 + 1);
            v69 = *(_OWORD *)v68;
            *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v68 + 9);
            *(_OWORD *)v12 = v69;
            *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v173[9];
            *(_OWORD *)v68 = *(_OWORD *)v173;
            v70 = v12 + 8;
            do
            {
              if (v70 == a2)
                goto LABEL_188;
              v71 = *v70;
              v70 += 8;
            }
            while (v71 < v61);
            v12 = v70 - 8;
            do
            {
              if (v68 == (unsigned int *)a1)
                goto LABEL_188;
              v72 = *(v68 - 8);
              v68 -= 8;
            }
            while (v72 >= v61);
          }
          while (v12 < v68);
        }
        if (v12 - 8 != (unsigned int *)a1)
        {
          v73 = *((_OWORD *)v12 - 2);
          *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)v12 - 23);
          *(_OWORD *)a1 = v73;
        }
        *(v12 - 8) = v61;
        *(_QWORD *)((char *)v12 - 15) = *(_QWORD *)&v149[13];
        *(_OWORD *)(v12 - 7) = *(_OWORD *)v149;
        if (v64 < v65)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *,false>(a1, v12 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v74 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>(a1, (_OWORD *)v12 - 2, *(__n128 *)v149);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>((uint64_t)v12, a2, v75))
        {
          if (v74)
            continue;
          goto LABEL_78;
        }
        a2 = v12 - 8;
        if (!v74)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = a2[-1].n128_u64[0];
        --a2;
        if (v65 < v12->n128_u64[0])
          goto LABEL_109;
        return result;
      case 3:
        v40 = v12 + 1;
        v66 = v12[1].n128_u64[0];
        v68 = a2[-1].n128_u64[0];
        --a2;
        v67 = v68;
        if (v66 < v12->n128_u64[0])
        {
          if (v67 >= v66)
            goto LABEL_189;
LABEL_109:
          v138 = *v12;
          *v12 = *a2;
          result = v138;
          goto LABEL_110;
        }
        if (v67 < v66)
        {
          result = *v40;
          *v40 = *a2;
          *a2 = result;
          if (v12[1].n128_u64[0] < v12->n128_u64[0])
          {
            v141 = *v12;
            *v12 = *v40;
            result = v141;
            *v40 = v141;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      case 5:
        v69 = v12 + 1;
        v70 = v12 + 2;
        v71 = v12 + 3;
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, result).n128_u64[0];
        v73 = a2[-1].n128_u64[0];
        v72 = a2 - 1;
        if (v73 < v12[3].n128_u64[0])
        {
          result = *v71;
          *v71 = *v72;
          *v72 = result;
          if (v71->n128_u64[0] < v70->n128_u64[0])
          {
            result = *v70;
            *v70 = *v71;
            *v71 = result;
            if (v70->n128_u64[0] < v69->n128_u64[0])
            {
              result = *v69;
              *v69 = *v70;
              *v70 = result;
              if (v12[1].n128_u64[0] < v12->n128_u64[0])
              {
                v139 = *v12;
                *v12 = *v69;
                result = v139;
                *v69 = v139;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 383)
        {
          v40 = v12 + 1;
          v75 = v12 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v75)
            {
              v76 = 0;
              v77 = v12;
              do
              {
                v78 = v40;
                v79 = v40->n128_u64[0];
                if (v79 < v77->n128_u64[0])
                {
                  v80 = v77[1].n128_i64[1];
                  v81 = v76;
                  while (1)
                  {
                    result = *(__n128 *)((char *)v12 + v81);
                    *(__n128 *)((char *)v12 + v81 + 16) = result;
                    if (!v81)
                      break;
                    v82 = *(unint64_t *)((char *)v12[-1].n128_u64 + v81);
                    v81 -= 16;
                    if (v79 >= v82)
                    {
                      v83 = (__n128 *)((char *)v12 + v81 + 16);
                      goto LABEL_132;
                    }
                  }
                  v83 = v12;
LABEL_132:
                  v83->n128_u64[0] = v79;
                  v83->n128_u64[1] = v80;
                }
                v40 = v78 + 1;
                v76 += 16;
                v77 = v78;
              }
              while (&v78[1] != a2);
            }
          }
          else if (!v75)
          {
            v110 = -2;
            v111 = 1;
            v112 = v12;
            while (1)
            {
              v113 = v40->n128_u64[0];
              if (v40->n128_u64[0] < v112->n128_u64[0])
                break;
LABEL_186:
              v112 = &v12[v111++];
              ++v40;
              --v110;
              if (v40 == a2)
                return result;
            }
            v114 = v112[1].n128_u64[1];
            v115 = v110;
            v116 = v40;
            while (1)
            {
              result = v116[-1];
              *v116 = result;
              v89 = __CFADD__(v115++, 1);
              if (v89)
                break;
              v117 = v116 - 1;
              v118 = v116[-2].n128_u64[0];
              --v116;
              if (v113 >= v118)
              {
                v117->n128_u64[0] = v113;
                v117->n128_u64[1] = v114;
                goto LABEL_186;
              }
            }
LABEL_188:
            __break(1u);
LABEL_189:
            v142 = *a1;
            *a1 = *v40;
            result = v142;
            *v40 = v142;
            if (a2->n128_u64[0] < a1[1].n128_u64[0])
            {
              result = *v40;
              *v40 = *a2;
LABEL_110:
              *a2 = result;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v84 = (unint64_t)(v14 - 2) >> 1;
            v85 = v84;
            do
            {
              if (v84 >= v85)
              {
                v86 = (2 * v85) | 1;
                v87 = &v12[v86];
                if (2 * v85 + 2 >= v14)
                {
                  v88 = v87->n128_u64[0];
                }
                else
                {
                  v88 = v87[1].n128_u64[0];
                  v89 = v87->n128_u64[0] >= v88;
                  if (v87->n128_u64[0] > v88)
                    v88 = v87->n128_u64[0];
                  if (!v89)
                  {
                    ++v87;
                    v86 = 2 * v85 + 2;
                  }
                }
                v90 = &v12[v85];
                v91 = v90->n128_u64[0];
                if (v88 >= v90->n128_u64[0])
                {
                  v92 = v90->n128_i64[1];
                  do
                  {
                    v93 = v90;
                    v90 = v87;
                    *v93 = *v87;
                    if (v84 < v86)
                      break;
                    v94 = (2 * v86) | 1;
                    v87 = &v12[v94];
                    v86 = 2 * v86 + 2;
                    if (v86 >= v14)
                    {
                      v95 = v87->n128_u64[0];
                      v86 = v94;
                    }
                    else
                    {
                      v95 = v87->n128_u64[0];
                      v96 = v87[1].n128_u64[0];
                      if (v87->n128_u64[0] <= v96)
                        v95 = v87[1].n128_u64[0];
                      if (v87->n128_u64[0] >= v96)
                        v86 = v94;
                      else
                        ++v87;
                    }
                  }
                  while (v95 >= v91);
                  v90->n128_u64[0] = v91;
                  v90->n128_u64[1] = v92;
                }
              }
              v97 = v85-- <= 0;
            }
            while (!v97);
            v98 = (unint64_t)v13 >> 4;
            do
            {
              v99 = 0;
              v140 = *v12;
              v100 = v12;
              do
              {
                v101 = &v100[v99 + 1];
                v102 = (2 * v99) | 1;
                v103 = 2 * v99 + 2;
                if (v103 < v98 && v101->n128_u64[0] < v101[1].n128_u64[0])
                {
                  ++v101;
                  v102 = v103;
                }
                *v100 = *v101;
                v100 = v101;
                v99 = v102;
              }
              while (v102 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
              if (v101 == --a2)
              {
                result = v140;
                *v101 = v140;
              }
              else
              {
                *v101 = *a2;
                result = v140;
                *a2 = v140;
                v104 = (char *)v101 - (char *)v12 + 16;
                if (v104 >= 17)
                {
                  v105 = (((unint64_t)v104 >> 4) - 2) >> 1;
                  v106 = &v12[v105];
                  v107 = v101->n128_u64[0];
                  if (v106->n128_u64[0] < v101->n128_u64[0])
                  {
                    v108 = v101->n128_u64[1];
                    do
                    {
                      v109 = v101;
                      v101 = v106;
                      result = *v106;
                      *v109 = *v106;
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                      v106 = &v12[v105];
                    }
                    while (v106->n128_u64[0] < v107);
                    v101->n128_u64[0] = v107;
                    v101->n128_u64[1] = v108;
                  }
                }
              }
              v97 = v98-- <= 2;
            }
            while (!v97);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = &v12[(unint64_t)v14 >> 1];
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 >= 0x801)
        {
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v121 = *v16;
              *v16 = *v9;
              *v9 = v121;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v122 = *v12;
                *v12 = *v16;
                *v16 = v122;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v119 = *v12;
              *v12 = *v9;
              goto LABEL_20;
            }
            v125 = *v12;
            *v12 = *v16;
            *v16 = v125;
            if (v9->n128_u64[0] < v16->n128_u64[0])
            {
              v119 = *v16;
              *v16 = *v9;
LABEL_20:
              *v9 = v119;
            }
          }
          v20 = v12 + 1;
          v21 = &v12[v15];
          v24 = v21[-1].n128_u64[0];
          v22 = v21 - 1;
          v23 = v24;
          v25 = v10->n128_u64[0];
          if (v24 >= v12[1].n128_u64[0])
          {
            if (v25 < v23)
            {
              v126 = *v22;
              *v22 = *v10;
              *v10 = v126;
              if (v22->n128_u64[0] < v20->n128_u64[0])
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v25 < v23)
            {
              v26 = *v20;
              *v20 = *v10;
              goto LABEL_32;
            }
            v28 = *v20;
            *v20 = *v22;
            *v22 = v28;
            if (v10->n128_u64[0] < v22->n128_u64[0])
            {
              v128 = *v22;
              *v22 = *v10;
              v26 = v128;
LABEL_32:
              *v10 = v26;
            }
          }
          v29 = v12 + 2;
          v30 = &v12[v15];
          v33 = v30[1].n128_u64[0];
          v31 = v30 + 1;
          v32 = v33;
          v34 = v11->n128_u64[0];
          if (v33 >= v12[2].n128_u64[0])
          {
            if (v34 < v32)
            {
              v129 = *v31;
              *v31 = *v11;
              *v11 = v129;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v36 = *v29;
                *v29 = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v34 < v32)
            {
              v35 = *v29;
              *v29 = *v11;
              goto LABEL_41;
            }
            v37 = *v29;
            *v29 = *v31;
            *v31 = v37;
            if (v11->n128_u64[0] < v31->n128_u64[0])
            {
              v130 = *v31;
              *v31 = *v11;
              v35 = v130;
LABEL_41:
              *v11 = v35;
            }
          }
          v38 = v16->n128_u64[0];
          v39 = v31->n128_u64[0];
          if (v16->n128_u64[0] >= v22->n128_u64[0])
          {
            if (v39 < v38)
            {
              v132 = *v16;
              *v16 = *v31;
              *v31 = v132;
              if (v16->n128_u64[0] < v22->n128_u64[0])
              {
                v133 = *v22;
                *v22 = *v16;
                *v16 = v133;
              }
            }
          }
          else
          {
            if (v39 < v38)
            {
              v131 = *v22;
              *v22 = *v31;
              goto LABEL_50;
            }
            v134 = *v22;
            *v22 = *v16;
            *v16 = v134;
            if (v31->n128_u64[0] < v16->n128_u64[0])
            {
              v131 = *v16;
              *v16 = *v31;
LABEL_50:
              *v31 = v131;
            }
          }
          v135 = *v12;
          *v12 = *v16;
          result = v135;
          *v16 = v135;
          goto LABEL_52;
        }
        v19 = v12->n128_u64[0];
        if (v12->n128_u64[0] >= v16->n128_u64[0])
        {
          if (v17 < v19)
          {
            v123 = *v12;
            *v12 = *v9;
            result = v123;
            *v9 = v123;
            if (v12->n128_u64[0] < v16->n128_u64[0])
            {
              v124 = *v16;
              *v16 = *v12;
              result = v124;
              *v12 = v124;
            }
          }
        }
        else
        {
          if (v17 >= v19)
          {
            v127 = *v16;
            *v16 = *v12;
            result = v127;
            *v12 = v127;
            if (v9->n128_u64[0] >= v12->n128_u64[0])
              goto LABEL_52;
            v120 = *v12;
            *v12 = *v9;
          }
          else
          {
            v120 = *v16;
            *v16 = *v9;
          }
          result = v120;
          *v9 = v120;
        }
LABEL_52:
        --a3;
        v40 = (__n128 *)v12->n128_u64[0];
        if ((a4 & 1) == 0 && v12[-1].n128_u64[0] >= (unint64_t)v40)
        {
          v55 = v12->n128_u64[1];
          if ((unint64_t)v40 >= v9->n128_u64[0])
          {
            n128_u64 = (unint64_t)v12[1].n128_u64;
            do
            {
              v12 = (__n128 *)n128_u64;
              if (n128_u64 >= (unint64_t)a2)
                break;
              n128_u64 += 16;
            }
            while ((unint64_t)v40 >= v12->n128_u64[0]);
          }
          else
          {
            v56 = v12 + 1;
            do
            {
              if (v56 == a2)
                goto LABEL_188;
              v57 = v56->n128_u64[0];
              ++v56;
            }
            while ((unint64_t)v40 >= v57);
            v12 = v56 - 1;
          }
          v59 = a2;
          if (v12 < a2)
          {
            v59 = a2;
            while (v59 != a1)
            {
              v60 = v59[-1].n128_u64[0];
              --v59;
              if ((unint64_t)v40 >= v60)
                goto LABEL_98;
            }
            goto LABEL_188;
          }
LABEL_98:
          if (v12 < v59)
          {
            v137 = *v12;
            *v12 = *v59;
            result = v137;
            *v59 = v137;
            v61 = v12 + 1;
            while (v61 != a2)
            {
              v62 = v61->n128_u64[0];
              ++v61;
              if ((unint64_t)v40 < v62)
              {
                v12 = v61 - 1;
                while (v59 != a1)
                {
                  v63 = v59[-1].n128_u64[0];
                  --v59;
                  if ((unint64_t)v40 >= v63)
                    goto LABEL_98;
                }
                goto LABEL_188;
              }
            }
            goto LABEL_188;
          }
          v64 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v64;
            *a1 = *v64;
          }
          a4 = 0;
          v12[-1].n128_u64[0] = (unint64_t)v40;
          v12[-1].n128_u64[1] = v55;
          continue;
        }
        v41 = 0;
        v42 = v12->n128_u64[1];
        do
        {
          v43 = &v12[v41 + 1];
          if (v43 == a2)
            goto LABEL_188;
          ++v41;
        }
        while (v43->n128_u64[0] < (unint64_t)v40);
        v44 = &v12[v41];
        v45 = a2;
        if (v41 != 1)
        {
          while (v45 != v12)
          {
            v46 = v45[-1].n128_u64[0];
            --v45;
            if (v46 < (unint64_t)v40)
              goto LABEL_64;
          }
          goto LABEL_188;
        }
        v45 = a2;
        do
        {
          if (v44 >= v45)
            break;
          v47 = v45[-1].n128_u64[0];
          --v45;
        }
        while (v47 >= (unint64_t)v40);
LABEL_64:
        v12 = (__n128 *)((char *)v12 + v41 * 16);
        if (v44 < v45)
        {
          v48 = v45;
          do
          {
            v136 = *v12;
            *v12 = *v48;
            result = v136;
            *v48 = v136;
            v49 = v12 + 1;
            do
            {
              if (v49 == a2)
                goto LABEL_188;
              v50 = v49->n128_u64[0];
              ++v49;
            }
            while (v50 < (unint64_t)v40);
            v12 = v49 - 1;
            do
            {
              if (v48 == a1)
                goto LABEL_188;
              v51 = v48[-1].n128_u64[0];
              --v48;
            }
            while (v51 >= (unint64_t)v40);
          }
          while (v12 < v48);
        }
        v52 = v12 - 1;
        if (&v12[-1] != a1)
        {
          result = *v52;
          *a1 = *v52;
        }
        v12[-1].n128_u64[0] = (unint64_t)v40;
        v12[-1].n128_u64[1] = v42;
        if (v44 < v45)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *,false>(a1, &v12[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(a1, v12 - 1, result);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(v12, a2, v54))
        {
          if (v53)
            continue;
          goto LABEL_78;
        }
        a2 = v12 - 1;
        if (!v53)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 8;
  i = a1;
  v277 = a2;
  while (2)
  {
    a1 = i;
    v11 = a2 - i;
    v12 = (a2 - i) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v120 = *((_QWORD *)a2 - 1);
        v121 = *(_QWORD *)a1;
        LODWORD(v21) = *(unsigned __int8 *)(v120 + 36);
        LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)a1 + 36);
        if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
        {
          v244 = (double)*(unint64_t *)(v120 + 24);
          v245 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v120 + 16))(*((_QWORD *)a2 - 1), *(_QWORD *)(a3 + 8))+ v244;
          v246 = (double)*(unint64_t *)(v121 + 24);
          v247 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 16))(v121, *(_QWORD *)(a3 + 8)) + v246;
          if (v245 == v247)
          {
            if (*(unsigned __int8 *)(v120 + 36) > *(unsigned __int8 *)(v121 + 36))
              goto LABEL_524;
          }
          else if (v245 > v247)
          {
            goto LABEL_524;
          }
        }
        else
        {
          if (!**(_BYTE **)a3)
            goto LABEL_517;
          if ((_DWORD)v21 == 2 && (_DWORD)v16 != 2)
            goto LABEL_524;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, (_QWORD *)a1 + 1, v9, a3);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, (_QWORD *)a1 + 1, (_QWORD *)a1 + 2, v9, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,0>(a1, (_QWORD *)a1 + 1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 3, v9, a3);
        return;
      default:
        if (v11 <= 191)
        {
          v123 = a1 + 8;
          v125 = a1 == a2 || v123 == a2;
          if ((a5 & 1) == 0)
          {
            if (v125)
              return;
            v248 = 0;
            v249 = 1;
            while (1)
            {
              v250 = v248;
              v248 = v249;
              v251 = *(_QWORD *)v123;
              v252 = *(_QWORD *)&a1[8 * v250];
              v253 = *(unsigned __int8 *)(*(_QWORD *)v123 + 36);
              v254 = *(unsigned __int8 *)(v252 + 36);
              if ((v253 == 2) != (v254 == 2))
                break;
              v256 = (double)*(unint64_t *)(v251 + 24);
              v257 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v251 + 16))(*(_QWORD *)v123, *(_QWORD *)(a3 + 8))+ v256;
              v258 = (double)*(unint64_t *)(v252 + 24);
              v259 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v252 + 16))(v252, *(_QWORD *)(a3 + 8))
                   + v258;
              if (v257 != v259)
              {
                if (v257 <= v259)
                  goto LABEL_514;
                goto LABEL_492;
              }
              if (*(unsigned __int8 *)(v251 + 36) > *(unsigned __int8 *)(v252 + 36))
                goto LABEL_492;
LABEL_514:
              v249 = v248 + 1;
              v123 = &a1[8 * v248 + 8];
              if (v123 == a2)
                return;
            }
            if (**(_BYTE **)a3)
            {
              if (v253 != 2 || v254 == 2)
                goto LABEL_514;
            }
            else if (v254 != 2 || v253 == 2)
            {
              goto LABEL_514;
            }
LABEL_492:
            v261 = *(_QWORD *)v123;
            *(_QWORD *)v123 = *(_QWORD *)&a1[8 * v250];
            while (1)
            {
              a2 = &a1[8 * v250];
              v262 = *((_QWORD *)a2 - 1);
              v263 = *(unsigned __int8 *)(v261 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(v262 + 36);
              if ((v263 == 2) == ((_DWORD)v16 == 2))
              {
                v265 = (double)*(unint64_t *)(v261 + 24);
                v266 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v261 + 16))(v261, *(_QWORD *)(a3 + 8))
                     + v265;
                v267 = (double)*(unint64_t *)(v262 + 24);
                v268 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v262 + 16))(v262, *(_QWORD *)(a3 + 8))
                     + v267;
                if (v266 == v268)
                {
                  LODWORD(v16) = *(unsigned __int8 *)(v262 + 36);
                  if (*(unsigned __int8 *)(v261 + 36) <= v16)
                    goto LABEL_513;
                }
                else if (v266 <= v268)
                {
                  goto LABEL_513;
                }
              }
              else if (**(_BYTE **)a3)
              {
                if (v263 != 2 || (_DWORD)v16 == 2)
                  goto LABEL_513;
              }
              else if ((_DWORD)v16 != 2 || v263 == 2)
              {
LABEL_513:
                *(_QWORD *)&a1[8 * v250] = v261;
                a2 = v277;
                goto LABEL_514;
              }
              --v250;
              v21 = *((_QWORD *)a2 - 1);
              *(_QWORD *)a2 = v21;
              if (v250 == -1)
                goto LABEL_516;
            }
          }
          if (v125)
            return;
          v126 = 0;
          v127 = a1;
LABEL_284:
          v128 = v127;
          v127 = v123;
          v130 = *(_QWORD *)v128;
          v129 = *((_QWORD *)v128 + 1);
          v131 = *(unsigned __int8 *)(v129 + 36);
          v132 = *(unsigned __int8 *)(*(_QWORD *)v128 + 36);
          if ((v131 == 2) == (v132 == 2))
          {
            v134 = (double)*(unint64_t *)(v129 + 24);
            v135 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v129 + 16))(*((_QWORD *)v128 + 1), *(_QWORD *)(a3 + 8))+ v134;
            v136 = (double)*(unint64_t *)(v130 + 24);
            v137 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 16))(v130, *(_QWORD *)(a3 + 8))
                 + v136;
            if (v135 == v137)
            {
              if (*(unsigned __int8 *)(v129 + 36) <= *(unsigned __int8 *)(v130 + 36))
                goto LABEL_327;
            }
            else if (v135 <= v137)
            {
              goto LABEL_327;
            }
          }
          else if (**(_BYTE **)a3)
          {
            if (v131 != 2 || v132 == 2)
              goto LABEL_327;
          }
          else if (v132 != 2 || v131 == 2)
          {
            goto LABEL_327;
          }
          v139 = *((_QWORD *)v128 + 1);
          *((_QWORD *)v128 + 1) = *(_QWORD *)v128;
          v140 = a1;
          if (v128 == a1)
            goto LABEL_326;
          v141 = v126;
          while (1)
          {
            v142 = *(_QWORD *)&a1[v141 - 8];
            v143 = *(unsigned __int8 *)(v139 + 36);
            v144 = *(unsigned __int8 *)(v142 + 36);
            if ((v143 == 2) == (v144 == 2))
            {
              v146 = (double)*(unint64_t *)(v139 + 24);
              v147 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 16))(v139, *(_QWORD *)(a3 + 8))
                   + v146;
              v148 = (double)*(unint64_t *)(v142 + 24);
              v149 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v142 + 16))(v142, *(_QWORD *)(a3 + 8))
                   + v148;
              if (v147 == v149)
              {
                if (*(unsigned __int8 *)(v139 + 36) <= *(unsigned __int8 *)(v142 + 36))
                {
                  v140 = &a1[v141];
LABEL_325:
                  a2 = v277;
LABEL_326:
                  *(_QWORD *)v140 = v139;
LABEL_327:
                  v123 += 8;
                  v126 += 8;
                  if (v127 + 8 == a2)
                    return;
                  goto LABEL_284;
                }
              }
              else if (v147 <= v149)
              {
                goto LABEL_324;
              }
            }
            else if (**(_BYTE **)a3)
            {
              if (v143 != 2 || v144 == 2)
                goto LABEL_324;
            }
            else if (v144 != 2 || v143 == 2)
            {
LABEL_324:
              v140 = v128;
              goto LABEL_325;
            }
            v128 -= 8;
            *(_QWORD *)&a1[v141] = *(_QWORD *)&a1[v141 - 8];
            v141 -= 8;
            if (!v141)
            {
              v140 = a1;
              goto LABEL_325;
            }
          }
        }
        if (!a4)
        {
          if (a1 == a2)
            return;
          v272 = v11;
          v151 = (unint64_t)(v12 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v153 = v152;
            if (v151 < v152)
              goto LABEL_396;
            v154 = (2 * v152) | 1;
            v155 = &a1[8 * v154];
            v156 = 2 * v152 + 2;
            v275 = v152;
            if (v156 >= v12)
              goto LABEL_347;
            v157 = *(_QWORD *)v155;
            v158 = *((_QWORD *)v155 + 1);
            v159 = *(unsigned __int8 *)(*(_QWORD *)v155 + 36);
            v160 = *(unsigned __int8 *)(v158 + 36);
            if ((v159 == 2) == (v160 == 2))
            {
              v162 = (double)*(unint64_t *)(v157 + 24);
              v163 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v157 + 16))(*(_QWORD *)v155, *(_QWORD *)(a3 + 8))+ v162;
              v164 = (double)*(unint64_t *)(v158 + 24);
              v165 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 16))(v158, *(_QWORD *)(a3 + 8))
                   + v164;
              if (v163 == v165)
              {
                v153 = v275;
                if (*(unsigned __int8 *)(v157 + 36) <= *(unsigned __int8 *)(v158 + 36))
                  goto LABEL_347;
              }
              else
              {
                v153 = v275;
                if (v163 <= v165)
                  goto LABEL_347;
              }
            }
            else
            {
              if (**(_BYTE **)a3)
                v161 = v159 != 2 || v160 == 2;
              else
                v161 = v160 != 2 || v159 == 2;
              v153 = v275;
              if (v161)
                goto LABEL_347;
            }
            v155 += 8;
            v154 = v156;
LABEL_347:
            v166 = *(_QWORD *)v155;
            v167 = *(_QWORD *)&a1[8 * v153];
            v168 = *(unsigned __int8 *)(*(_QWORD *)v155 + 36);
            v169 = *(unsigned __int8 *)(v167 + 36);
            if ((v168 == 2) == (v169 == 2))
            {
              v171 = (double)*(unint64_t *)(v166 + 24);
              v172 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v166 + 16))(*(_QWORD *)v155, *(_QWORD *)(a3 + 8))+ v171;
              v173 = (double)*(unint64_t *)(v167 + 24);
              v174 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 16))(v167, *(_QWORD *)(a3 + 8))
                   + v173;
              a2 = v277;
              v151 = (unint64_t)(v12 - 2) >> 1;
              if (v172 == v174)
              {
                v153 = v275;
                if (*(unsigned __int8 *)(v166 + 36) > *(unsigned __int8 *)(v167 + 36))
                  goto LABEL_396;
              }
              else
              {
                v153 = v275;
                if (v172 > v174)
                  goto LABEL_396;
              }
            }
            else
            {
              a2 = v277;
              v151 = (unint64_t)(v12 - 2) >> 1;
              if (**(_BYTE **)a3)
                v170 = v168 != 2 || v169 == 2;
              else
                v170 = v169 != 2 || v168 == 2;
              v153 = v275;
              if (!v170)
                goto LABEL_396;
            }
            v175 = *(_QWORD *)&a1[8 * v153];
            *(_QWORD *)&a1[8 * v153] = *(_QWORD *)v155;
            while (1)
            {
              if (v151 < v154)
                goto LABEL_395;
              v176 = v155;
              v177 = 2 * v154;
              v154 = (2 * v154) | 1;
              v155 = &a1[8 * v154];
              v178 = v177 + 2;
              if (v177 + 2 < v12)
              {
                v179 = *(_QWORD *)v155;
                v180 = *((_QWORD *)v155 + 1);
                v181 = *(unsigned __int8 *)(*(_QWORD *)v155 + 36);
                v182 = *(unsigned __int8 *)(v180 + 36);
                if ((v181 == 2) == (v182 == 2))
                {
                  v273 = v176;
                  v184 = (double)*(unint64_t *)(v179 + 24);
                  v185 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 16))(v179, *(_QWORD *)(a3 + 8))
                       + v184;
                  v186 = (double)*(unint64_t *)(v180 + 24);
                  v187 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v180 + 16))(v180, *(_QWORD *)(a3 + 8))
                       + v186;
                  if (v185 == v187)
                  {
                    v197 = *(unsigned __int8 *)(v180 + 36);
                    v151 = (unint64_t)(v12 - 2) >> 1;
                    v176 = v273;
                    if (*(unsigned __int8 *)(v179 + 36) > v197)
                      goto LABEL_376;
                  }
                  else
                  {
                    v151 = (unint64_t)(v12 - 2) >> 1;
                    v176 = v273;
                    if (v185 > v187)
                      goto LABEL_376;
                  }
                }
                else
                {
                  if (**(_BYTE **)a3)
                    v183 = v181 != 2 || v182 == 2;
                  else
                    v183 = v182 != 2 || v181 == 2;
                  v151 = (unint64_t)(v12 - 2) >> 1;
                  if (!v183)
                  {
LABEL_376:
                    v155 += 8;
                    v154 = v178;
                  }
                }
              }
              v188 = *(_QWORD *)v155;
              v189 = *(unsigned __int8 *)(*(_QWORD *)v155 + 36);
              v190 = *(unsigned __int8 *)(v175 + 36);
              if ((v189 == 2) == (v190 == 2))
              {
                v192 = v176;
                v193 = (double)*(unint64_t *)(v188 + 24);
                v194 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v188 + 16))(*(_QWORD *)v155, *(_QWORD *)(a3 + 8))+ v193;
                v195 = (double)*(unint64_t *)(v175 + 24);
                v196 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v175 + 16))(v175, *(_QWORD *)(a3 + 8))
                     + v195;
                a2 = v277;
                if (v194 == v196)
                {
                  v176 = v192;
                  if (*(unsigned __int8 *)(v188 + 36) > *(unsigned __int8 *)(v175 + 36))
                    goto LABEL_394;
                }
                else
                {
                  v176 = v192;
                  if (v194 > v196)
                    goto LABEL_394;
                }
                goto LABEL_391;
              }
              a2 = v277;
              if (**(_BYTE **)a3)
                break;
              if (v190 == 2 && v189 != 2)
                goto LABEL_394;
LABEL_391:
              *(_QWORD *)v176 = *(_QWORD *)v155;
            }
            if (v189 != 2 || v190 == 2)
              goto LABEL_391;
LABEL_394:
            v155 = v176;
LABEL_395:
            *(_QWORD *)v155 = v175;
            v153 = v275;
LABEL_396:
            v152 = v153 - 1;
            if (!v153)
            {
              v198 = v272 >> 3;
              while (1)
              {
                v199 = 0;
                v276 = *(_QWORD *)a1;
                v278 = a2;
                v200 = (unint64_t)(v198 - 2) >> 1;
                v201 = a1;
                v280 = v198;
                do
                {
                  v202 = v201;
                  v201 += 8 * v199 + 8;
                  v203 = 2 * v199;
                  v199 = (2 * v199) | 1;
                  v204 = v203 + 2;
                  if (v203 + 2 >= v198)
                    goto LABEL_413;
                  v205 = *(_QWORD *)v201;
                  v206 = *((_QWORD *)v201 + 1);
                  v207 = *(unsigned __int8 *)(*(_QWORD *)v201 + 36);
                  v208 = *(unsigned __int8 *)(v206 + 36);
                  if ((v207 == 2) == (v208 == 2))
                  {
                    v210 = (double)*(unint64_t *)(v205 + 24);
                    v211 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v205 + 16))(*(_QWORD *)v201, *(_QWORD *)(a3 + 8))+ v210;
                    v212 = (double)*(unint64_t *)(v206 + 24);
                    v213 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 16))(v206, *(_QWORD *)(a3 + 8))+ v212;
                    if (v211 != v213)
                    {
                      v198 = v280;
                      if (v211 <= v213)
                        goto LABEL_413;
LABEL_412:
                      v201 += 8;
                      v199 = v204;
                      goto LABEL_413;
                    }
                    v198 = v280;
                    if (*(unsigned __int8 *)(v205 + 36) > *(unsigned __int8 *)(v206 + 36))
                      goto LABEL_412;
                  }
                  else if (**(_BYTE **)a3)
                  {
                    if (v207 == 2 && v208 != 2)
                      goto LABEL_412;
                  }
                  else if (v208 == 2 && v207 != 2)
                  {
                    goto LABEL_412;
                  }
LABEL_413:
                  *(_QWORD *)v202 = *(_QWORD *)v201;
                }
                while (v199 <= v200);
                v215 = v278 - 8;
                if (v201 == v278 - 8)
                {
                  v216 = v278 - 8;
                  *(_QWORD *)v201 = v276;
                }
                else
                {
                  *(_QWORD *)v201 = *(_QWORD *)v215;
                  v216 = v278 - 8;
                  *(_QWORD *)v215 = v276;
                  v217 = v201 - a1 + 8;
                  if (v217 >= 9)
                  {
                    v218 = ((unint64_t)v217 >> 3) - 2;
                    v219 = v218 >> 1;
                    v220 = &a1[8 * (v218 >> 1)];
                    v221 = *(_QWORD *)v220;
                    v222 = *(_QWORD *)v201;
                    v223 = *(unsigned __int8 *)(*(_QWORD *)v220 + 36);
                    v224 = *(unsigned __int8 *)(*(_QWORD *)v201 + 36);
                    if ((v223 == 2) == (v224 == 2))
                    {
                      v226 = (double)*(unint64_t *)(v221 + 24);
                      v227 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v221 + 16))(*(_QWORD *)v220, *(_QWORD *)(a3 + 8))+ v226;
                      v228 = (double)*(unint64_t *)(v222 + 24);
                      v229 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v222 + 16))(v222, *(_QWORD *)(a3 + 8))+ v228;
                      if (v227 == v229)
                      {
                        v198 = v280;
                        if (*(unsigned __int8 *)(v221 + 36) > *(unsigned __int8 *)(v222 + 36))
                          goto LABEL_444;
                      }
                      else
                      {
                        v198 = v280;
                        if (v227 > v229)
                          goto LABEL_444;
                      }
                    }
                    else if (**(_BYTE **)a3)
                    {
                      if (v223 == 2 && v224 != 2)
                        goto LABEL_444;
                    }
                    else if (v224 == 2 && v223 != 2)
                    {
LABEL_444:
                      v231 = *(_QWORD *)v201;
                      *(_QWORD *)v201 = *(_QWORD *)v220;
                      if (v218 >= 2)
                      {
                        while (1)
                        {
                          v233 = v219 - 1;
                          v219 = (v219 - 1) >> 1;
                          v232 = &a1[8 * v219];
                          v234 = *(_QWORD *)v232;
                          v235 = *(unsigned __int8 *)(*(_QWORD *)v232 + 36);
                          v236 = *(unsigned __int8 *)(v231 + 36);
                          if ((v235 == 2) == (v236 == 2))
                          {
                            v238 = (double)*(unint64_t *)(v234 + 24);
                            v239 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v234 + 16))(*(_QWORD *)v232, *(_QWORD *)(a3 + 8))+ v238;
                            v240 = (double)*(unint64_t *)(v231 + 24);
                            v241 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v231 + 16))(v231, *(_QWORD *)(a3 + 8))+ v240;
                            if (v239 == v241)
                            {
                              v198 = v280;
                              if (*(unsigned __int8 *)(v234 + 36) <= *(unsigned __int8 *)(v231 + 36))
                                break;
                            }
                            else
                            {
                              v198 = v280;
                              if (v239 <= v241)
                                break;
                            }
                          }
                          else if (**(_BYTE **)a3)
                          {
                            if (v235 != 2 || v236 == 2)
                              break;
                          }
                          else if (v236 != 2 || v235 == 2)
                          {
                            break;
                          }
                          *(_QWORD *)v220 = *(_QWORD *)v232;
                          v220 = &a1[8 * v219];
                          if (v233 <= 1)
                            goto LABEL_465;
                        }
                      }
                      v232 = v220;
LABEL_465:
                      *(_QWORD *)v232 = v231;
                    }
                  }
                }
                v243 = v198-- <= 2;
                a2 = v216;
                if (v243)
                  return;
              }
            }
          }
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[8 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(v14, a1, v9, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, v14, v9, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>((_QWORD *)a1 + 1, (_QWORD *)v14 - 1, (_QWORD *)a2 - 2, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>((_QWORD *)a1 + 2, &a1[8 * v13 + 8], (_QWORD *)a2 - 3, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>((_QWORD *)v14 - 1, v14, &a1[8 * v13 + 8], a3);
          v15 = *(_QWORD *)a1;
          v16 = *(_QWORD *)v14;
          *(_QWORD *)a1 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v17 = *((_QWORD *)a1 - 1);
          v18 = *(_QWORD *)a1;
          v19 = *(unsigned __int8 *)(v17 + 36);
          LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)a1 + 36);
          if ((v19 == 2) == ((_DWORD)v16 == 2))
          {
            v69 = (double)*(unint64_t *)(v17 + 24);
            v70 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v17 + 16))(*((_QWORD *)a1 - 1), *(_QWORD *)(a3 + 8))+ v69;
            v71 = (double)*(unint64_t *)(v18 + 24);
            v72 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, *(_QWORD *)(a3 + 8)) + v71;
            if (v70 == v72)
            {
              LODWORD(v16) = *(unsigned __int8 *)(v18 + 36);
              if (*(unsigned __int8 *)(v17 + 36) > v16)
                goto LABEL_15;
            }
            else if (v70 > v72)
            {
              goto LABEL_15;
            }
          }
          else if (**(_BYTE **)a3)
          {
            v20 = v19 != 2 || (_DWORD)v16 == 2;
            if (!v20)
              goto LABEL_15;
          }
          else if ((_DWORD)v16 == 2 && v19 != 2)
          {
            goto LABEL_15;
          }
          v73 = *(_QWORD *)a1;
          v74 = *(_QWORD *)v9;
          LODWORD(v21) = *(unsigned __int8 *)(*(_QWORD *)a1 + 36);
          LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)v9 + 36);
          if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
          {
            v76 = (double)*(unint64_t *)(v73 + 24);
            v77 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v73 + 16))(*(_QWORD *)a1, *(_QWORD *)(a3 + 8))
                + v76;
            v78 = (double)*(unint64_t *)(v74 + 24);
            v79 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 16))(v74, *(_QWORD *)(a3 + 8)) + v78;
            if (v77 == v79)
            {
              LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(v74 + 36);
              if (v21 > v16)
                goto LABEL_152;
            }
            else if (v77 > v79)
            {
              goto LABEL_152;
            }
          }
          else if (**(_BYTE **)a3)
          {
            if ((_DWORD)v21 == 2 && (_DWORD)v16 != 2)
              goto LABEL_152;
          }
          else if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
          {
LABEL_152:
            for (i = a1 + 8; ; i += 8)
            {
              if (i == a2)
                goto LABEL_516;
              v80 = *(_QWORD *)i;
              LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)i + 36);
              if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
              {
                v82 = (double)*(unint64_t *)(v73 + 24);
                v83 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, *(_QWORD *)(a3 + 8))
                    + v82;
                v84 = (double)*(unint64_t *)(v80 + 24);
                v85 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 16))(v80, *(_QWORD *)(a3 + 8))
                    + v84;
                if (v83 == v85)
                {
                  LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
                  LODWORD(v16) = *(unsigned __int8 *)(v80 + 36);
                  if (v21 > v16)
                    goto LABEL_171;
                }
                else if (v83 > v85)
                {
                  goto LABEL_171;
                }
              }
              else if (**(_BYTE **)a3)
              {
                if ((_DWORD)v21 == 2 && (_DWORD)v16 != 2)
                  goto LABEL_171;
              }
              else if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
              {
LABEL_171:
                v87 = v9;
                goto LABEL_172;
              }
            }
          }
          v87 = v9;
          for (i = a1 + 8; i < a2; i += 8)
          {
            v113 = *(_QWORD *)i;
            LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
            LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)i + 36);
            if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
            {
              v115 = (double)*(unint64_t *)(v73 + 24);
              v116 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, *(_QWORD *)(a3 + 8))
                   + v115;
              v117 = (double)*(unint64_t *)(v113 + 24);
              v118 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 16))(v113, *(_QWORD *)(a3 + 8))
                   + v117;
              if (v116 == v118)
              {
                LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
                LODWORD(v16) = *(unsigned __int8 *)(v113 + 36);
                if (v21 > v16)
                  break;
              }
              else if (v116 > v118)
              {
                break;
              }
            }
            else if (**(_BYTE **)a3)
            {
              if ((_DWORD)v21 == 2 && (_DWORD)v16 != 2)
                break;
            }
            else if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
            {
              break;
            }
          }
LABEL_172:
          v88 = a2;
          if (i < a2)
          {
            v88 = v87;
            if (a2 == a1)
              goto LABEL_516;
            while (1)
            {
              v89 = *(_QWORD *)v88;
              v90 = *(unsigned __int8 *)(v73 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)v88 + 36);
              if ((v90 == 2) == ((_DWORD)v16 == 2))
              {
                v92 = (double)*(unint64_t *)(v73 + 24);
                v93 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, *(_QWORD *)(a3 + 8))
                    + v92;
                v94 = (double)*(unint64_t *)(v89 + 24);
                v95 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 16))(v89, *(_QWORD *)(a3 + 8))
                    + v94;
                if (v93 == v95)
                {
                  LODWORD(v16) = *(unsigned __int8 *)(v89 + 36);
                  if (*(unsigned __int8 *)(v73 + 36) <= v16)
                    break;
                }
                else if (v93 <= v95)
                {
                  break;
                }
              }
              else if (**(_BYTE **)a3)
              {
                if (v90 != 2 || (_DWORD)v16 == 2)
                  break;
              }
              else if ((_DWORD)v16 != 2 || v90 == 2)
              {
                break;
              }
              LODWORD(v21) = (_DWORD)v88 - 8;
              v20 = v88 == a1;
              v88 -= 8;
              if (v20)
                goto LABEL_516;
            }
          }
LABEL_195:
          if (i < v88)
          {
            v21 = *(_QWORD *)i;
            v16 = *(_QWORD *)v88;
            *(_QWORD *)i = *(_QWORD *)v88;
            i += 8;
            *(_QWORD *)v88 = v21;
            while (1)
            {
              if (i == a2)
                goto LABEL_516;
              v97 = *(_QWORD *)i;
              LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)i + 36);
              if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
              {
                v99 = (double)*(unint64_t *)(v73 + 24);
                v100 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, *(_QWORD *)(a3 + 8))
                     + v99;
                v101 = (double)*(unint64_t *)(v97 + 24);
                v102 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 16))(v97, *(_QWORD *)(a3 + 8))
                     + v101;
                if (v100 == v102)
                {
                  LODWORD(v21) = *(unsigned __int8 *)(v73 + 36);
                  LODWORD(v16) = *(unsigned __int8 *)(v97 + 36);
                  if (v21 > v16)
                    goto LABEL_215;
                }
                else if (v100 > v102)
                {
                  goto LABEL_215;
                }
              }
              else if (**(_BYTE **)a3)
              {
                if ((_DWORD)v21 == 2 && (_DWORD)v16 != 2)
                  goto LABEL_215;
              }
              else if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
              {
LABEL_215:
                if (v88 == a1)
                  goto LABEL_516;
                v88 -= 8;
                while (1)
                {
                  v104 = *(_QWORD *)v88;
                  v105 = *(unsigned __int8 *)(v73 + 36);
                  LODWORD(v16) = *(unsigned __int8 *)(*(_QWORD *)v88 + 36);
                  if ((v105 == 2) == ((_DWORD)v16 == 2))
                  {
                    v107 = (double)*(unint64_t *)(v73 + 24);
                    v108 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, *(_QWORD *)(a3 + 8))
                         + v107;
                    v109 = (double)*(unint64_t *)(v104 + 24);
                    v110 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 16))(v104, *(_QWORD *)(a3 + 8))+ v109;
                    if (v108 == v110)
                    {
                      LODWORD(v16) = *(unsigned __int8 *)(v104 + 36);
                      if (*(unsigned __int8 *)(v73 + 36) <= v16)
                        goto LABEL_195;
                    }
                    else if (v108 <= v110)
                    {
                      goto LABEL_195;
                    }
                  }
                  else if (**(_BYTE **)a3)
                  {
                    if (v105 != 2 || (_DWORD)v16 == 2)
                      goto LABEL_195;
                  }
                  else if ((_DWORD)v16 != 2 || v105 == 2)
                  {
                    goto LABEL_195;
                  }
                  LODWORD(v21) = (_DWORD)v88 - 8;
                  v20 = v88 == a1;
                  v88 -= 8;
                  if (v20)
                    goto LABEL_516;
                }
              }
              i += 8;
            }
          }
          v112 = i - 8;
          if (i - 8 != a1)
            *(_QWORD *)a1 = *(_QWORD *)v112;
          a5 = 0;
          *(_QWORD *)v112 = v73;
          v9 = v87;
          continue;
        }
LABEL_15:
        LODWORD(v21) = (_DWORD)a1 + 8;
        v22 = *(_QWORD *)a1;
        if (a1 + 8 == a2)
          goto LABEL_516;
        v23 = 8;
        while (1)
        {
          v24 = *(_QWORD *)&a1[v23];
          LODWORD(v21) = *(unsigned __int8 *)(v24 + 36);
          LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
          if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
          {
            v26 = (double)*(unint64_t *)(v24 + 24);
            v27 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v24 + 16))(*(_QWORD *)&a1[v23], *(_QWORD *)(a3 + 8))+ v26;
            v28 = (double)*(unint64_t *)(v22 + 24);
            v29 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a3 + 8)) + v28;
            if (v27 == v29)
            {
              LODWORD(v21) = *(unsigned __int8 *)(v24 + 36);
              LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
              if (v21 <= v16)
                goto LABEL_37;
            }
            else if (v27 <= v29)
            {
              goto LABEL_37;
            }
            goto LABEL_35;
          }
          if (!**(_BYTE **)a3)
            break;
          if ((_DWORD)v21 != 2 || (_DWORD)v16 == 2)
            goto LABEL_37;
LABEL_35:
          v23 += 8;
          LODWORD(v21) = (_DWORD)a1 + v23;
          if (&a1[v23] == a2)
            goto LABEL_516;
        }
        if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
          goto LABEL_35;
LABEL_37:
        v31 = &a1[v23];
        if (v23 != 8)
        {
          j = v9;
          if (a2 != a1)
          {
            do
            {
              v33 = *(_QWORD *)j;
              v34 = *(unsigned __int8 *)(*(_QWORD *)j + 36);
              LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
              if ((v34 == 2) == ((_DWORD)v16 == 2))
              {
                v36 = (double)*(unint64_t *)(v33 + 24);
                v37 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v33 + 16))(*(_QWORD *)j, *(_QWORD *)(a3 + 8))+ v36;
                v38 = (double)*(unint64_t *)(v22 + 24);
                v39 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a3 + 8))
                    + v38;
                if (v37 == v39)
                {
                  LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
                  if (*(unsigned __int8 *)(v33 + 36) > v16)
                    goto LABEL_81;
                }
                else if (v37 > v39)
                {
                  goto LABEL_81;
                }
              }
              else if (**(_BYTE **)a3)
              {
                if (v34 == 2 && (_DWORD)v16 != 2)
                  goto LABEL_81;
              }
              else if ((_DWORD)v16 == 2 && v34 != 2)
              {
                goto LABEL_81;
              }
              LODWORD(v21) = (_DWORD)j - 8;
              v20 = j == a1;
              j -= 8;
            }
            while (!v20);
          }
LABEL_516:
          __break(1u);
LABEL_517:
          if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
          {
LABEL_524:
            v271 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v271;
          }
          return;
        }
        j = a2;
        if (v31 < a2)
        {
          for (j = v9; ; j -= 8)
          {
            v41 = *(_QWORD *)j;
            v42 = *(unsigned __int8 *)(*(_QWORD *)j + 36);
            v43 = *(unsigned __int8 *)(v22 + 36);
            if ((v42 == 2) == (v43 == 2))
            {
              v45 = (double)*(unint64_t *)(v41 + 24);
              v46 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v41 + 16))(*(_QWORD *)j, *(_QWORD *)(a3 + 8))+ v45;
              v47 = (double)*(unint64_t *)(v22 + 24);
              v48 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a3 + 8)) + v47;
              if (v46 == v48)
              {
                if (v31 >= j || *(unsigned __int8 *)(v41 + 36) > *(unsigned __int8 *)(v22 + 36))
                  break;
              }
              else if (v31 >= j || v46 > v48)
              {
                break;
              }
            }
            else
            {
              if (**(_BYTE **)a3)
                v44 = v43 != 2 && v42 == 2;
              else
                v44 = v42 != 2 && v43 == 2;
              v49 = !v44;
              if (v31 >= j || (v49 & 1) == 0)
                break;
            }
          }
        }
LABEL_81:
        v274 = a4;
        v50 = v9;
        i = v31;
        if (v31 >= j)
          goto LABEL_126;
        v51 = j;
        while (2)
        {
          v21 = *(_QWORD *)i;
          v16 = *(_QWORD *)v51;
          *(_QWORD *)i = *(_QWORD *)v51;
          i += 8;
          *(_QWORD *)v51 = v21;
          while (2)
          {
            if (i == a2)
              goto LABEL_516;
            v52 = *(_QWORD *)i;
            LODWORD(v21) = *(unsigned __int8 *)(*(_QWORD *)i + 36);
            LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
            if (((_DWORD)v21 == 2) == ((_DWORD)v16 == 2))
            {
              v54 = (double)*(unint64_t *)(v52 + 24);
              v55 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v52 + 16))(*(_QWORD *)i, *(_QWORD *)(a3 + 8))+ v54;
              v56 = (double)*(unint64_t *)(v22 + 24);
              v57 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a3 + 8)) + v56;
              if (v55 == v57)
              {
                LODWORD(v21) = *(unsigned __int8 *)(v52 + 36);
                LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
                if (v21 <= v16)
                  break;
              }
              else if (v55 <= v57)
              {
                break;
              }
              goto LABEL_103;
            }
            if (**(_BYTE **)a3)
            {
              if ((_DWORD)v21 != 2 || (_DWORD)v16 == 2)
                break;
              goto LABEL_103;
            }
            if ((_DWORD)v16 == 2 && (_DWORD)v21 != 2)
            {
LABEL_103:
              i += 8;
              continue;
            }
            break;
          }
          if (v51 == a1)
            goto LABEL_516;
          v51 -= 8;
          while (2)
          {
            v59 = *(_QWORD *)v51;
            v60 = *(unsigned __int8 *)(*(_QWORD *)v51 + 36);
            LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
            if ((v60 == 2) == ((_DWORD)v16 == 2))
            {
              v62 = (double)*(unint64_t *)(v59 + 24);
              v63 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v59 + 16))(*(_QWORD *)v51, *(_QWORD *)(a3 + 8))+ v62;
              v64 = (double)*(unint64_t *)(v22 + 24);
              v65 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a3 + 8)) + v64;
              if (v63 == v65)
              {
                LODWORD(v16) = *(unsigned __int8 *)(v22 + 36);
                if (*(unsigned __int8 *)(v59 + 36) > v16)
                  goto LABEL_125;
              }
              else if (v63 > v65)
              {
                goto LABEL_125;
              }
LABEL_122:
              LODWORD(v21) = (_DWORD)v51 - 8;
              v20 = v51 == a1;
              v51 -= 8;
              if (v20)
                goto LABEL_516;
              continue;
            }
            break;
          }
          if (**(_BYTE **)a3)
          {
            if (v60 == 2 && (_DWORD)v16 != 2)
              goto LABEL_125;
            goto LABEL_122;
          }
          if ((_DWORD)v16 != 2 || v60 == 2)
            goto LABEL_122;
LABEL_125:
          if (i < v51)
            continue;
          break;
        }
LABEL_126:
        v67 = i - 8;
        if (i - 8 != a1)
          *(_QWORD *)a1 = *(_QWORD *)v67;
        *(_QWORD *)v67 = v22;
        v9 = v50;
        a4 = v274;
        if (v31 < j)
        {
LABEL_131:
          std::__introsort<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,false>(a1, i - 8, a3, v274, a5 & 1);
          a5 = 0;
          continue;
        }
        v68 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, (_QWORD *)i - 1, a3);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(i, a2, a3))
        {
          if (v68)
            continue;
          goto LABEL_131;
        }
        a2 = i - 8;
        if (!v68)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
  while (2)
  {
    v11 = 1 - a3;
LABEL_3:
    v12 = v11;
    v13 = a2 - (WTF::AtomStringImpl *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (a2 - (WTF::AtomStringImpl *)v10);
    if (v14 < 2)
      return;
    a1 = v10;
    switch(v14)
    {
      case 2uLL:
        v15 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
        v16 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        if (v15 < v16)
        {
          *v10 = *(_DWORD *)((char *)a2 - 5);
          v17 = HIDWORD(v15);
          goto LABEL_8;
        }
        return;
      case 3uLL:
        v19 = *(unsigned int *)((char *)v10 + 5) | ((unint64_t)*((unsigned __int8 *)v10 + 9) << 32);
        v16 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        v20 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
        if (v19 < v16)
        {
          if (v20 >= v19)
          {
            *v10 = *(unsigned int *)((char *)v10 + 5);
            *((_BYTE *)v10 + 4) = BYTE4(v19);
            *(unsigned int *)((char *)v10 + 5) = v16;
            v18 = HIDWORD(v16);
            *((_BYTE *)v10 + 9) = BYTE4(v16);
            v36 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
            if (v36 >= v16)
              return;
            *(unsigned int *)((char *)v10 + 5) = *(_DWORD *)((char *)a2 - 5);
            *((_BYTE *)v10 + 9) = BYTE4(v36);
          }
          else
          {
            *v10 = *(_DWORD *)((char *)a2 - 5);
            v17 = HIDWORD(v20);
LABEL_8:
            *((_BYTE *)v10 + 4) = v17;
            v18 = HIDWORD(v16);
          }
          *((_BYTE *)a2 - 1) = v18;
          *(_DWORD *)((char *)a2 - 5) = v16;
          return;
        }
        if (v20 < v19)
        {
          *(unsigned int *)((char *)v10 + 5) = *(_DWORD *)((char *)a2 - 5);
          *((_BYTE *)v10 + 9) = BYTE4(v20);
          *((_BYTE *)a2 - 1) = BYTE4(v19);
          *(_DWORD *)((char *)a2 - 5) = v19;
          v29 = *(unsigned int *)((char *)v10 + 5) | ((unint64_t)*((unsigned __int8 *)v10 + 9) << 32);
          v30 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
          if (v29 < v30)
          {
            *v10 = *(unsigned int *)((char *)v10 + 5);
            *((_BYTE *)v10 + 4) = BYTE4(v29);
            *(unsigned int *)((char *)v10 + 5) = v30;
            v31 = HIDWORD(v30);
            goto LABEL_21;
          }
        }
        return;
      case 4uLL:
        v21 = (unsigned int *)((char *)v10 + 10);
        v22 = *(unsigned int *)((char *)v10 + 5) | ((unint64_t)*((unsigned __int8 *)v10 + 9) << 32);
        v23 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        v24 = *(unsigned int *)((char *)v10 + 10) | ((unint64_t)*((unsigned __int8 *)v10 + 14) << 32);
        if (v22 >= v23)
        {
          if (v24 >= v22)
            goto LABEL_29;
          *(unsigned int *)((char *)v10 + 5) = *(unsigned int *)((char *)v10 + 10);
          *((_BYTE *)v10 + 9) = BYTE4(v24);
          v25 = v10;
          *v21 = v22;
          *((_BYTE *)v10 + 14) = BYTE4(v22);
          v26 = (char *)v10 + 5;
          v27 = v22;
          v28 = v22;
          if (v24 >= v23)
            goto LABEL_25;
LABEL_24:
          *v25 = v24;
          *((_BYTE *)v25 + 4) = BYTE4(v24);
          *(_DWORD *)v26 = v23;
          v26[4] = BYTE4(v23);
          v22 = v28;
          goto LABEL_25;
        }
        v25 = v10;
        v26 = (char *)v10 + 10;
        v27 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        v28 = v27;
        if (v24 < v22)
          goto LABEL_24;
        *a1 = v22;
        *((_BYTE *)a1 + 4) = BYTE4(v22);
        v25 = (unsigned int *)((char *)a1 + 5);
        *(unsigned int *)((char *)a1 + 5) = v23;
        *((_BYTE *)a1 + 9) = BYTE4(v23);
        v26 = (char *)a1 + 10;
        v27 = v23;
        v28 = v23;
        if (v24 < v23)
          goto LABEL_24;
LABEL_29:
        v27 = v24;
        v22 = v24;
LABEL_25:
        v32 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
        if (v27 > v32)
        {
          *v21 = *(_DWORD *)((char *)a2 - 5);
          *((_BYTE *)a1 + 14) = BYTE4(v32);
          *((_BYTE *)a2 - 1) = BYTE4(v22);
          *(_DWORD *)((char *)a2 - 5) = v22;
          v33 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 14) << 32);
          v34 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
          if (v33 < v34)
          {
            *(unsigned int *)((char *)a1 + 5) = *(unsigned int *)((char *)a1 + 10);
            *((_BYTE *)a1 + 9) = BYTE4(v33);
            *(unsigned int *)((char *)a1 + 10) = v34;
            *((_BYTE *)a1 + 14) = BYTE4(v34);
            v35 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
            if (v33 < v35)
            {
              *a1 = v33;
              *((_BYTE *)a1 + 4) = BYTE4(v33);
              *(unsigned int *)((char *)a1 + 5) = v35;
              v31 = HIDWORD(v35);
LABEL_21:
              *((_BYTE *)a1 + 9) = v31;
            }
          }
        }
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,0>(v10, (unsigned int *)((char *)v10 + 5), (unsigned int *)((char *)v10 + 10), (unsigned int *)((char *)v10 + 15), (unsigned int *)((char *)a2 - 5));
        return;
      default:
        if (v13 <= 119)
        {
          if ((a4 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((WTF::AtomStringImpl *)v10, a2, a3, a4, a5, a6, a7, a8);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((WTF::AtomStringImpl *)v10, a2, a3, a4, a5, a6, a7, a8);
          return;
        }
        if (v12 == 1)
        {
          std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((WTF::AtomStringImpl *)v10, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
          return;
        }
        v37 = a4;
        v38 = v12;
        v39 = (unsigned int *)((char *)a2 - 5);
        v40 = v14 >> 1;
        v41 = 5 * (v14 >> 1);
        v42 = (unsigned int *)((char *)v10 + v41);
        if ((unint64_t)v13 >= 0x281)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(v10, (unsigned int *)((char *)v10 + v41), v39);
          v56 = 5 * v40;
          v57 = (unsigned int *)((char *)a1 + 5 * v40 - 5);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((unsigned int *)((char *)a1 + 5), v57, (unsigned int *)((char *)a2 - 10));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a1 + v56 + 5), (unsigned int *)((char *)a2 - 15));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(v57, v42, (unsigned int *)((char *)a1 + v56 + 5));
          v58 = *a1;
          v59 = *((_BYTE *)a1 + 4);
          v60 = *((_BYTE *)v42 + 4);
          *a1 = *v42;
          *((_BYTE *)a1 + 4) = v60;
          *((_BYTE *)v42 + 4) = v59;
          *v42 = v58;
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((unsigned int *)((char *)v10 + v41), v10, v39);
        }
        if ((v37 & 1) == 0
          && (*(unsigned int *)((char *)a1 - 5) | ((unint64_t)*((unsigned __int8 *)a1 - 1) << 32)) >= (*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32)))
        {
          v10 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> *,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &>((unsigned __int8 *)a1, a2, v43, v44, v45, v46, v47, v48);
          goto LABEL_42;
        }
        v54 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> *,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &>((unsigned __int8 *)a1, a2, v43, v44, v45, v46, v47, v48);
        LOBYTE(a4) = v37;
        if ((v55 & 1) == 0)
          goto LABEL_41;
        v61 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(a1, (WTF::AtomStringImpl *)v54, v49, v37, v50, v51, v52, v53);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((unsigned int *)(v54 + 5), a2, v62, v63, v64, v65, v66, v67))
        {
          v11 = v38 + 1;
          a4 = v37;
          v10 = (unsigned int *)(v54 + 5);
          if (!v61)
          {
LABEL_41:
            std::__introsort<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,false>(a1, v54, -v38, a4 & 1);
            v10 = (unsigned int *)(v54 + 5);
LABEL_42:
            a4 = 0;
            a3 = -v38;
            continue;
          }
          goto LABEL_3;
        }
        a3 = -v38;
        a2 = (WTF::AtomStringImpl *)v54;
        a4 = v37;
        if (v61)
          return;
        goto LABEL_1;
    }
  }
}

  v10 = a1;
  while (2)
  {
    v11 = 1 - a3;
LABEL_3:
    a1 = v10;
    v12 = v11;
    v13 = a2 - (WTF::AtomStringImpl *)v10;
    v14 = (a2 - (WTF::AtomStringImpl *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (WTF::codePointCompareLessThan((WTF::AtomStringImpl *)((char *)a2 - 8), (const WTF::String *)(v10 + 1), (const WTF::String *)a3))
        {
          v15 = *a1;
          *a1 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v15;
          v16 = a1[1];
          a1[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v16;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v10, v10 + 2, (uint64_t)a2 - 16);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v10, v10 + 2, v10 + 4, (uint64_t *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,0>(v10, v10 + 2, v10 + 4, v10 + 6, (uint64_t *)a2 - 2);
        return;
      default:
        if (v13 > 383)
        {
          if (v12 == 1)
          {
            std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,std::tuple<JSC::JSValue,WTF::String>*>((uint64_t)v10, a2, a2, a4, a5, a6, a7, a8);
            return;
          }
          v90 = a4;
          v91 = v12;
          v92 = (uint64_t)a2 - 16;
          v93 = v14 >> 1;
          v94 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v10, &v10[2 * (v14 >> 1)], v92);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1 + 2, v94 - 2, (uint64_t)a2 - 32);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1 + 4, &a1[2 * v93 + 2], (uint64_t)a2 - 48);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v94 - 2, v94, (uint64_t)&a1[2 * v93 + 2]);
            v99 = *a1;
            v100 = a1[1];
            v101 = v94[1];
            *a1 = *v94;
            a1[1] = v101;
            *v94 = v99;
            v94[1] = v100;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(&v10[2 * (v14 >> 1)], v10, v92);
          }
          if ((v90 & 1) == 0
            && (WTF::codePointCompareLessThan((WTF *)(a1 - 1), (const WTF::String *)(a1 + 1), v95) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,std::tuple<JSC::JSValue,WTF::String> *,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &>(a1, (unint64_t)a2, v95);
            goto LABEL_82;
          }
          v97 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,std::tuple<JSC::JSValue,WTF::String> *,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &>((uint64_t)a1, a2, v95);
          LOBYTE(a4) = v90;
          if ((v98 & 1) == 0)
            goto LABEL_81;
          v102 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, v97, v96);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v97 + 2, (uint64_t *)a2, v103))
          {
            v11 = v91 + 1;
            a4 = v90;
            v10 = v97 + 2;
            if (!v102)
            {
LABEL_81:
              std::__introsort<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,false>(a1, v97, -v91, a4 & 1);
              v10 = v97 + 2;
LABEL_82:
              a4 = 0;
              a3 = -v91;
              continue;
            }
            goto LABEL_3;
          }
          a3 = -v91;
          a2 = (WTF::AtomStringImpl *)v97;
          a4 = v90;
          if (v102)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(v10, a2, (const WTF::String *)a3);
          return;
        }
        if (v10 != (uint64_t *)a2)
        {
          v17 = v10 + 2;
          if (v10 + 2 != (uint64_t *)a2)
          {
            v18 = 0;
            v19 = v10;
            do
            {
              v20 = v19;
              v19 = v17;
              v21 = v20 + 3;
              if (WTF::codePointCompareLessThan((WTF *)(v20 + 3), (const WTF::String *)(v20 + 1), (const WTF::String *)a3))
              {
                v28 = *v19;
                v29 = *v21;
                *v21 = 0;
                if (v29)
                {
                  v30 = v19;
                  while (1)
                  {
                    v31 = v30;
                    v30 = v20;
                    *v31 = *v20;
                    v32 = v20[1];
                    v20[1] = 0;
                    v33 = (WTF::StringImpl *)v31[1];
                    v31[1] = v32;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v33, v22, a3, v23, v24, v25, v26, v27);
                        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
                      }
                      else
                      {
                        *(_DWORD *)v33 -= 2;
                      }
                    }
                    if (v20 == a1)
                      goto LABEL_68;
                    v34 = *(v20 - 1);
                    if (!v34)
                      goto LABEL_69;
                    v35 = *(_DWORD *)(v34 + 16);
                    v36 = *(_DWORD *)(v29 + 4);
                    v37 = *(_DWORD *)(v34 + 4);
                    if (v37 >= v36)
                      v38 = v36;
                    else
                      v38 = v37;
                    if ((*(_BYTE *)(v29 + 16) & 4) != 0)
                    {
                      if ((v35 & 4) != 0)
                      {
                        if ((_DWORD)v38)
                        {
                          v52 = *(unsigned __int8 **)(v34 + 8);
                          v53 = *(unsigned __int8 **)(v29 + 8);
                          do
                          {
                            v54 = *v53;
                            v55 = *v52;
                            v43 = v54 > v55;
                            if (v54 != v55)
                              goto LABEL_54;
                            ++v53;
                            ++v52;
                          }
                          while (--v38);
                        }
                      }
                      else if ((_DWORD)v38)
                      {
                        v44 = *(unsigned __int16 **)(v34 + 8);
                        v45 = *(unsigned __int8 **)(v29 + 8);
                        while (1)
                        {
                          v46 = *v45;
                          v47 = *v44;
                          if (v47 != v46)
                            break;
                          ++v45;
                          ++v44;
                          if (!--v38)
                            goto LABEL_48;
                        }
                        if (v47 < v46)
                          goto LABEL_69;
                        goto LABEL_55;
                      }
                    }
                    else if ((v35 & 4) != 0)
                    {
                      if ((_DWORD)v38)
                      {
                        v48 = *(unsigned __int8 **)(v34 + 8);
                        v49 = *(unsigned __int16 **)(v29 + 8);
                        do
                        {
                          v50 = *v49;
                          v51 = *v48;
                          v43 = v50 > v51;
                          if (v50 != v51)
                            goto LABEL_54;
                          ++v49;
                          ++v48;
                        }
                        while (--v38);
                      }
                    }
                    else if ((_DWORD)v38)
                    {
                      v39 = *(unsigned __int16 **)(v34 + 8);
                      v40 = *(unsigned __int16 **)(v29 + 8);
                      while (1)
                      {
                        v41 = *v40;
                        v42 = *v39;
                        v43 = v41 > v42;
                        if (v41 != v42)
                          break;
                        ++v40;
                        ++v39;
                        if (!--v38)
                          goto LABEL_48;
                      }
LABEL_54:
                      if (v43)
                        goto LABEL_69;
LABEL_55:
                      v56 = -1;
                      goto LABEL_52;
                    }
LABEL_48:
                    if (v37 < v36)
                      v56 = 1;
                    else
                      v56 = -1;
                    if (v36 == v37)
                      goto LABEL_69;
LABEL_52:
                    v20 -= 2;
                    if ((v56 & 0x80000000) == 0)
                      goto LABEL_69;
                  }
                }
                v65 = v18;
                while (1)
                {
                  v66 = v65;
                  v67 = (uint64_t *)((char *)a1 + v65);
                  v68 = *v67;
                  v69 = v67[1];
                  v67[1] = 0;
                  v67[2] = v68;
                  v70 = (WTF::StringImpl *)v67[3];
                  v67[3] = v69;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v70, v22, a3, v23, v24, v25, v26, v27);
                      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
                    }
                    else
                    {
                      *(_DWORD *)v70 -= 2;
                    }
                  }
                  if (!v66)
                  {
LABEL_68:
                    v30 = a1;
                    goto LABEL_69;
                  }
                  v71 = *(uint64_t *)((char *)a1 + v66 - 8);
                  if (!v71)
                    break;
                  v20 -= 2;
                  v72 = *(_DWORD *)(v71 + 4);
                  v65 = v66 - 16;
                  if (!v72)
                  {
                    v30 = (uint64_t *)((char *)a1 + v66);
                    goto LABEL_69;
                  }
                }
                v30 = v20;
LABEL_69:
                v81 = (WTF::StringImpl *)v30[1];
                *v30 = v28;
                v30[1] = v29;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v81, v22, a3, v23, v24, v25, v26, v27);
                    WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
                  }
                  else
                  {
                    *(_DWORD *)v81 -= 2;
                  }
                }
              }
              v17 = v19 + 2;
              v18 += 16;
            }
            while (v19 + 2 != (uint64_t *)a2);
          }
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v12->n128_u64[1] < a2[-1].n128_u64[1])
        {
          v149 = *v12;
          *v12 = a2[-1];
          result = v149;
          a2[-1] = v149;
        }
        return result;
      case 3:
        v44 = v12 + 1;
        v75 = v12[1].n128_u64[1];
        v76 = a2[-1].n128_u64[1];
        if (v12->n128_u64[1] < v75)
        {
          if (v75 >= v76)
            goto LABEL_183;
          v150 = *v12;
          *v12 = *v9;
          result = v150;
          goto LABEL_185;
        }
        if (v75 < v76)
        {
          result = *v44;
          *v44 = *v9;
          *v9 = result;
          goto LABEL_192;
        }
        return result;
      case 4:
        v44 = v12 + 1;
        v77 = v12 + 2;
        v78 = v12[1].n128_u64[1];
        v79 = v12[2].n128_u64[1];
        if (v12->n128_u64[1] >= v78)
        {
          if (v78 < v79)
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v153 = *v12;
              *v12 = *v44;
              result = v153;
              *v44 = v153;
            }
          }
        }
        else
        {
          if (v78 >= v79)
          {
            v155 = *v12;
            *v12 = *v44;
            result = v155;
            *v44 = v155;
            if (v12[1].n128_u64[1] >= v79)
              goto LABEL_189;
            result = *v44;
            *v44 = *v77;
          }
          else
          {
            v151 = *v12;
            *v12 = *v77;
            result = v151;
          }
          *v77 = result;
        }
LABEL_189:
        if (v12[2].n128_u64[1] < a2[-1].n128_u64[1])
        {
          result = *v77;
          *v77 = *v9;
          *v9 = result;
          if (v12[1].n128_u64[1] < v12[2].n128_u64[1])
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
LABEL_192:
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v156 = *v12;
              *v12 = *v44;
              result = v156;
              *v44 = v156;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v90 = (unint64_t)(v14 - 2) >> 1;
              v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  v92 = (2 * v91) | 1;
                  v93 = &v12[v92];
                  if (2 * v91 + 2 < v14)
                  {
                    v94 = v93[1].n128_u64[1];
                    v95 = v93->n128_u64[1];
                    v93 += v94 < v95;
                    if (v94 < v95)
                      v92 = 2 * v91 + 2;
                  }
                  v96 = v12[v91].n128_u64[1];
                  if (v96 >= v93->n128_u64[1])
                  {
                    v97 = &v12[v91];
                    v98 = v97->n128_u64[0];
                    do
                    {
                      v99 = v97;
                      v97 = v93;
                      *v99 = *v93;
                      if (v90 < v92)
                        break;
                      v100 = (2 * v92) | 1;
                      v93 = &v12[v100];
                      v101 = 2 * v92 + 2;
                      if (v101 < v14)
                      {
                        v102 = v93[1].n128_u64[1];
                        v103 = v93->n128_u64[1];
                        v93 += v102 < v103;
                        if (v102 < v103)
                          v100 = v101;
                      }
                      v92 = v100;
                    }
                    while (v96 >= v93->n128_u64[1]);
                    v97->n128_u64[0] = v98;
                    v97->n128_u64[1] = v96;
                  }
                }
                v104 = v91-- <= 0;
              }
              while (!v104);
              v105 = (unint64_t)v13 >> 4;
              do
              {
                v106 = 0;
                v152 = *v12;
                v107 = v12;
                do
                {
                  v108 = &v107[v106 + 1];
                  v109 = (2 * v106) | 1;
                  v110 = 2 * v106 + 2;
                  if (v110 < v105)
                  {
                    v111 = v108[1].n128_u64[1];
                    v112 = v108->n128_u64[1];
                    v108 += v111 < v112;
                    if (v111 < v112)
                      v109 = v110;
                  }
                  *v107 = *v108;
                  v107 = v108;
                  v106 = v109;
                }
                while (v109 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                if (v108 == --a2)
                {
                  result = v152;
                  *v108 = v152;
                }
                else
                {
                  *v108 = *a2;
                  result = v152;
                  *a2 = v152;
                  v113 = (char *)v108 - (char *)v12 + 16;
                  if (v113 >= 17)
                  {
                    v114 = (((unint64_t)v113 >> 4) - 2) >> 1;
                    v115 = v108->n128_u64[1];
                    if (v115 < v12[v114].n128_u64[1])
                    {
                      v116 = v108->n128_u64[0];
                      do
                      {
                        v117 = v108;
                        v108 = &v12[v114];
                        result = *v108;
                        *v117 = *v108;
                        if (!v114)
                          break;
                        v114 = (v114 - 1) >> 1;
                      }
                      while (v115 < v12[v114].n128_u64[1]);
                      v108->n128_u64[0] = v116;
                      v108->n128_u64[1] = v115;
                    }
                  }
                }
                v104 = v105-- <= 2;
              }
              while (!v104);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_u64[1];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = &v12[v15].n128_u64[1];
            v19 = *v18;
            if (v12->n128_u64[1] >= *v18)
            {
              if (v19 < v17)
              {
                v132 = *v16;
                *v16 = *v9;
                *v9 = v132;
                if (v12->n128_u64[1] < *v18)
                {
                  v133 = *v12;
                  *v12 = *v16;
                  *v16 = v133;
                }
              }
            }
            else
            {
              if (v19 >= v17)
              {
                v136 = *v12;
                *v12 = *v16;
                *v16 = v136;
                if (*v18 >= a2[-1].n128_u64[1])
                  goto LABEL_21;
                v130 = *v16;
                *v16 = *v9;
              }
              else
              {
                v130 = *v12;
                *v12 = *v9;
              }
              *v9 = v130;
            }
LABEL_21:
            v22 = v12 + 1;
            v23 = &v12[v15];
            v26 = v23[-1].n128_u64[1];
            v24 = &v23[-1].n128_u64[1];
            v25 = v26;
            v27 = (__n128 *)(v24 - 1);
            v28 = a2[-2].n128_u64[1];
            if (v12[1].n128_u64[1] >= v26)
            {
              if (v25 < v28)
              {
                v137 = *v27;
                *v27 = *v10;
                *v10 = v137;
                if (v12[1].n128_u64[1] < *v24)
                {
                  v30 = *v22;
                  *v22 = *v27;
                  *v27 = v30;
                }
              }
            }
            else
            {
              if (v25 >= v28)
              {
                v31 = *v22;
                *v22 = *v27;
                *v27 = v31;
                if (*v24 >= a2[-2].n128_u64[1])
                  goto LABEL_33;
                v139 = *v27;
                *v27 = *v10;
                v29 = v139;
              }
              else
              {
                v29 = *v22;
                *v22 = *v10;
              }
              *v10 = v29;
            }
LABEL_33:
            v32 = v12 + 2;
            v33 = &v12[v15];
            v36 = v33[1].n128_u64[1];
            v34 = &v33[1].n128_u64[1];
            v35 = v36;
            v37 = (__n128 *)(v34 - 1);
            v38 = a2[-3].n128_u64[1];
            if (v12[2].n128_u64[1] >= v36)
            {
              if (v35 < v38)
              {
                v140 = *v37;
                *v37 = *v11;
                *v11 = v140;
                if (v12[2].n128_u64[1] < *v34)
                {
                  v40 = *v32;
                  *v32 = *v37;
                  *v37 = v40;
                }
              }
            }
            else
            {
              if (v35 >= v38)
              {
                v41 = *v32;
                *v32 = *v37;
                *v37 = v41;
                if (*v34 >= a2[-3].n128_u64[1])
                  goto LABEL_42;
                v141 = *v37;
                *v37 = *v11;
                v39 = v141;
              }
              else
              {
                v39 = *v32;
                *v32 = *v11;
              }
              *v11 = v39;
            }
LABEL_42:
            v42 = *v18;
            v43 = *v34;
            if (*v24 >= *v18)
            {
              if (v42 < v43)
              {
                v143 = *v16;
                *v16 = *v37;
                *v37 = v143;
                if (*v24 < *v18)
                {
                  v144 = *v27;
                  *v27 = *v16;
                  *v16 = v144;
                }
              }
              goto LABEL_51;
            }
            if (v42 >= v43)
            {
              v145 = *v27;
              *v27 = *v16;
              *v16 = v145;
              if (*v18 >= *v34)
              {
LABEL_51:
                v146 = *v12;
                *v12 = *v16;
                result = v146;
                *v16 = v146;
                goto LABEL_52;
              }
              v142 = *v16;
              *v16 = *v37;
            }
            else
            {
              v142 = *v27;
              *v27 = *v37;
            }
            *v37 = v142;
            goto LABEL_51;
          }
          v20 = v12->n128_u64[1];
          v21 = &v12[v15].n128_u64[1];
          if (*v21 >= v20)
          {
            if (v20 < v17)
            {
              v134 = *v12;
              *v12 = *v9;
              result = v134;
              *v9 = v134;
              if (*v21 < v12->n128_u64[1])
              {
                v135 = *v16;
                *v16 = *v12;
                result = v135;
                *v12 = v135;
              }
            }
          }
          else
          {
            if (v20 >= v17)
            {
              v138 = *v16;
              *v16 = *v12;
              result = v138;
              *v12 = v138;
              if (v12->n128_u64[1] >= a2[-1].n128_u64[1])
                goto LABEL_52;
              v131 = *v12;
              *v12 = *v9;
            }
            else
            {
              v131 = *v16;
              *v16 = *v9;
            }
            result = v131;
            *v9 = v131;
          }
LABEL_52:
          --a3;
          if ((a4 & 1) == 0)
          {
            v44 = (__n128 *)v12->n128_u64[1];
            if ((unint64_t)v44 < v12[-1].n128_u64[1])
              goto LABEL_55;
            v62 = v12->n128_u64[0];
            if (a2[-1].n128_u64[1] >= (unint64_t)v44)
            {
              v65 = v12 + 1;
              do
              {
                v12 = v65;
                if (v65 >= a2)
                  break;
                v66 = v65->n128_u64[1];
                ++v65;
              }
              while (v66 >= (unint64_t)v44);
            }
            else
            {
              v63 = v12 + 1;
              do
              {
                if (v63 == a2)
                  goto LABEL_182;
                v64 = v63->n128_u64[1];
                ++v63;
              }
              while (v64 >= (unint64_t)v44);
              v12 = v63 - 1;
            }
            v67 = a2;
            if (v12 < a2)
            {
              v68 = a2;
              while (v68 != a1)
              {
                v67 = v68 - 1;
                v69 = v68[-1].n128_u64[1];
                --v68;
                if (v69 >= (unint64_t)v44)
                  goto LABEL_94;
              }
              goto LABEL_182;
            }
LABEL_94:
            if (v12 < v67)
            {
              do
              {
                v148 = *v12;
                *v12 = *v67;
                result = v148;
                *v67 = v148;
                v70 = v12 + 1;
                do
                {
                  if (v70 == a2)
                    goto LABEL_182;
                  v71 = v70->n128_u64[1];
                  ++v70;
                }
                while (v71 >= (unint64_t)v44);
                v12 = v70 - 1;
                do
                {
                  if (v67 == a1)
                    goto LABEL_182;
                  v72 = v67 - 1;
                  v73 = v67[-1].n128_u64[1];
                  --v67;
                }
                while (v73 < (unint64_t)v44);
                v67 = v72;
              }
              while (v12 < v72);
            }
            v74 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v74;
              *a1 = *v74;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u64[1] = (unint64_t)v44;
            continue;
          }
          v44 = (__n128 *)v12->n128_u64[1];
LABEL_55:
          v45 = 0;
          v46 = v12->n128_u64[0];
          do
          {
            if (&v12[v45 + 1] == a2)
              goto LABEL_182;
            v47 = v12[++v45].n128_u64[1];
          }
          while ((unint64_t)v44 < v47);
          v48 = &v12[v45];
          v49 = a2;
          if (v45 != 1)
          {
            while (v49 != v12)
            {
              v50 = v49 - 1;
              v51 = v49[-1].n128_u64[1];
              --v49;
              if ((unint64_t)v44 < v51)
                goto LABEL_67;
            }
            goto LABEL_182;
          }
          v52 = a2;
          while (v48 < v52)
          {
            v50 = v52 - 1;
            v53 = v52[-1].n128_u64[1];
            --v52;
            if ((unint64_t)v44 < v53)
              goto LABEL_67;
          }
          v50 = v52;
LABEL_67:
          v12 = v48;
          if (v48 < v50)
          {
            v54 = v50;
            do
            {
              v147 = *v12;
              *v12 = *v54;
              result = v147;
              *v54 = v147;
              v55 = v12 + 1;
              do
              {
                if (v55 == a2)
                  goto LABEL_182;
                v56 = v55->n128_u64[1];
                ++v55;
              }
              while ((unint64_t)v44 < v56);
              v12 = v55 - 1;
              do
              {
                if (v54 == a1)
                  goto LABEL_182;
                v57 = v54 - 1;
                v58 = v54[-1].n128_u64[1];
                --v54;
              }
              while ((unint64_t)v44 >= v58);
              v54 = v57;
            }
            while (v12 < v57);
          }
          v59 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v59;
            *a1 = *v59;
          }
          v12[-1].n128_u64[0] = v46;
          v12[-1].n128_u64[1] = (unint64_t)v44;
          if (v48 < v50)
            goto LABEL_81;
          v60 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(v12, a2, v61))
          {
            if (v60)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v60)
            return result;
          goto LABEL_1;
        }
        v44 = v12 + 1;
        v81 = v12 == a2 || v44 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = v12;
            do
            {
              v84 = v83->n128_u64[1];
              v85 = v83[1].n128_u64[1];
              v83 = v44;
              if (v84 < v85)
              {
                v86 = v44->n128_u64[0];
                v87 = v82;
                while (1)
                {
                  result = *(__n128 *)((char *)v12 + v87);
                  *(__n128 *)((char *)v12 + v87 + 16) = result;
                  if (!v87)
                    break;
                  v88 = *(unint64_t *)((char *)&v12->n128_u64[-1] + v87);
                  v87 -= 16;
                  if (v88 >= v85)
                  {
                    v89 = (__n128 *)((char *)v12 + v87 + 16);
                    goto LABEL_132;
                  }
                }
                v89 = v12;
LABEL_132:
                v89->n128_u64[0] = v86;
                v89->n128_u64[1] = v85;
              }
              v44 = v83 + 1;
              v82 += 16;
            }
            while (&v83[1] != a2);
          }
        }
        else if (!v81)
        {
          v118 = 0;
          v119 = -2;
          v120 = 1;
          v121 = v12;
          while (1)
          {
            v122 = &v12[v118];
            v118 = v120;
            v123 = v121[1].n128_u64[1];
            if (v122->n128_u64[1] < v123)
              break;
LABEL_180:
            v121 = &v12[v118];
            v120 = v118 + 1;
            ++v44;
            --v119;
            if (v44 == a2)
              return result;
          }
          v124 = v44->n128_u64[0];
          v125 = v119;
          v126 = v44;
          while (1)
          {
            result = v126[-1];
            *v126 = result;
            if (__CFADD__(v125++, 1))
              break;
            v128 = v126 - 1;
            v129 = v126[-2].n128_u64[1];
            --v126;
            if (v129 >= v123)
            {
              v128->n128_u64[0] = v124;
              v128->n128_u64[1] = v123;
              goto LABEL_180;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v154 = *a1;
          *a1 = *v44;
          result = v154;
          *v44 = v154;
          if (a1[1].n128_u64[1] < a2[-1].n128_u64[1])
          {
            result = *v44;
            *v44 = *v9;
LABEL_185:
            *v9 = result;
          }
        }
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v12->n128_u64[1] < a2[-1].n128_u64[1])
        {
          v149 = *v12;
          *v12 = a2[-1];
          result = v149;
          a2[-1] = v149;
        }
        return result;
      case 3:
        v44 = v12 + 1;
        v75 = v12[1].n128_u64[1];
        v76 = a2[-1].n128_u64[1];
        if (v12->n128_u64[1] < v75)
        {
          if (v75 >= v76)
            goto LABEL_183;
          v150 = *v12;
          *v12 = *v9;
          result = v150;
          goto LABEL_185;
        }
        if (v75 < v76)
        {
          result = *v44;
          *v44 = *v9;
          *v9 = result;
          goto LABEL_192;
        }
        return result;
      case 4:
        v44 = v12 + 1;
        v77 = v12 + 2;
        v78 = v12[1].n128_u64[1];
        v79 = v12[2].n128_u64[1];
        if (v12->n128_u64[1] >= v78)
        {
          if (v78 < v79)
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v153 = *v12;
              *v12 = *v44;
              result = v153;
              *v44 = v153;
            }
          }
        }
        else
        {
          if (v78 >= v79)
          {
            v155 = *v12;
            *v12 = *v44;
            result = v155;
            *v44 = v155;
            if (v12[1].n128_u64[1] >= v79)
              goto LABEL_189;
            result = *v44;
            *v44 = *v77;
          }
          else
          {
            v151 = *v12;
            *v12 = *v77;
            result = v151;
          }
          *v77 = result;
        }
LABEL_189:
        if (v12[2].n128_u64[1] < a2[-1].n128_u64[1])
        {
          result = *v77;
          *v77 = *v9;
          *v9 = result;
          if (v12[1].n128_u64[1] < v12[2].n128_u64[1])
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
LABEL_192:
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v156 = *v12;
              *v12 = *v44;
              result = v156;
              *v44 = v156;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v90 = (unint64_t)(v14 - 2) >> 1;
              v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  v92 = (2 * v91) | 1;
                  v93 = &v12[v92];
                  if (2 * v91 + 2 < v14)
                  {
                    v94 = v93[1].n128_u64[1];
                    v95 = v93->n128_u64[1];
                    v93 += v94 < v95;
                    if (v94 < v95)
                      v92 = 2 * v91 + 2;
                  }
                  v96 = v12[v91].n128_u64[1];
                  if (v96 >= v93->n128_u64[1])
                  {
                    v97 = &v12[v91];
                    v98 = v97->n128_u64[0];
                    do
                    {
                      v99 = v97;
                      v97 = v93;
                      *v99 = *v93;
                      if (v90 < v92)
                        break;
                      v100 = (2 * v92) | 1;
                      v93 = &v12[v100];
                      v101 = 2 * v92 + 2;
                      if (v101 < v14)
                      {
                        v102 = v93[1].n128_u64[1];
                        v103 = v93->n128_u64[1];
                        v93 += v102 < v103;
                        if (v102 < v103)
                          v100 = v101;
                      }
                      v92 = v100;
                    }
                    while (v96 >= v93->n128_u64[1]);
                    v97->n128_u64[0] = v98;
                    v97->n128_u64[1] = v96;
                  }
                }
                v104 = v91-- <= 0;
              }
              while (!v104);
              v105 = (unint64_t)v13 >> 4;
              do
              {
                v106 = 0;
                v152 = *v12;
                v107 = v12;
                do
                {
                  v108 = &v107[v106 + 1];
                  v109 = (2 * v106) | 1;
                  v110 = 2 * v106 + 2;
                  if (v110 < v105)
                  {
                    v111 = v108[1].n128_u64[1];
                    v112 = v108->n128_u64[1];
                    v108 += v111 < v112;
                    if (v111 < v112)
                      v109 = v110;
                  }
                  *v107 = *v108;
                  v107 = v108;
                  v106 = v109;
                }
                while (v109 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                if (v108 == --a2)
                {
                  result = v152;
                  *v108 = v152;
                }
                else
                {
                  *v108 = *a2;
                  result = v152;
                  *a2 = v152;
                  v113 = (char *)v108 - (char *)v12 + 16;
                  if (v113 >= 17)
                  {
                    v114 = (((unint64_t)v113 >> 4) - 2) >> 1;
                    v115 = v108->n128_u64[1];
                    if (v115 < v12[v114].n128_u64[1])
                    {
                      v116 = v108->n128_u64[0];
                      do
                      {
                        v117 = v108;
                        v108 = &v12[v114];
                        result = *v108;
                        *v117 = *v108;
                        if (!v114)
                          break;
                        v114 = (v114 - 1) >> 1;
                      }
                      while (v115 < v12[v114].n128_u64[1]);
                      v108->n128_u64[0] = v116;
                      v108->n128_u64[1] = v115;
                    }
                  }
                }
                v104 = v105-- <= 2;
              }
              while (!v104);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_u64[1];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = &v12[v15].n128_u64[1];
            v19 = *v18;
            if (v12->n128_u64[1] >= *v18)
            {
              if (v19 < v17)
              {
                v132 = *v16;
                *v16 = *v9;
                *v9 = v132;
                if (v12->n128_u64[1] < *v18)
                {
                  v133 = *v12;
                  *v12 = *v16;
                  *v16 = v133;
                }
              }
            }
            else
            {
              if (v19 >= v17)
              {
                v136 = *v12;
                *v12 = *v16;
                *v16 = v136;
                if (*v18 >= a2[-1].n128_u64[1])
                  goto LABEL_21;
                v130 = *v16;
                *v16 = *v9;
              }
              else
              {
                v130 = *v12;
                *v12 = *v9;
              }
              *v9 = v130;
            }
LABEL_21:
            v22 = v12 + 1;
            v23 = &v12[v15];
            v26 = v23[-1].n128_u64[1];
            v24 = &v23[-1].n128_u64[1];
            v25 = v26;
            v27 = (__n128 *)(v24 - 1);
            v28 = a2[-2].n128_u64[1];
            if (v12[1].n128_u64[1] >= v26)
            {
              if (v25 < v28)
              {
                v137 = *v27;
                *v27 = *v10;
                *v10 = v137;
                if (v12[1].n128_u64[1] < *v24)
                {
                  v30 = *v22;
                  *v22 = *v27;
                  *v27 = v30;
                }
              }
            }
            else
            {
              if (v25 >= v28)
              {
                v31 = *v22;
                *v22 = *v27;
                *v27 = v31;
                if (*v24 >= a2[-2].n128_u64[1])
                  goto LABEL_33;
                v139 = *v27;
                *v27 = *v10;
                v29 = v139;
              }
              else
              {
                v29 = *v22;
                *v22 = *v10;
              }
              *v10 = v29;
            }
LABEL_33:
            v32 = v12 + 2;
            v33 = &v12[v15];
            v36 = v33[1].n128_u64[1];
            v34 = &v33[1].n128_u64[1];
            v35 = v36;
            v37 = (__n128 *)(v34 - 1);
            v38 = a2[-3].n128_u64[1];
            if (v12[2].n128_u64[1] >= v36)
            {
              if (v35 < v38)
              {
                v140 = *v37;
                *v37 = *v11;
                *v11 = v140;
                if (v12[2].n128_u64[1] < *v34)
                {
                  v40 = *v32;
                  *v32 = *v37;
                  *v37 = v40;
                }
              }
            }
            else
            {
              if (v35 >= v38)
              {
                v41 = *v32;
                *v32 = *v37;
                *v37 = v41;
                if (*v34 >= a2[-3].n128_u64[1])
                  goto LABEL_42;
                v141 = *v37;
                *v37 = *v11;
                v39 = v141;
              }
              else
              {
                v39 = *v32;
                *v32 = *v11;
              }
              *v11 = v39;
            }
LABEL_42:
            v42 = *v18;
            v43 = *v34;
            if (*v24 >= *v18)
            {
              if (v42 < v43)
              {
                v143 = *v16;
                *v16 = *v37;
                *v37 = v143;
                if (*v24 < *v18)
                {
                  v144 = *v27;
                  *v27 = *v16;
                  *v16 = v144;
                }
              }
              goto LABEL_51;
            }
            if (v42 >= v43)
            {
              v145 = *v27;
              *v27 = *v16;
              *v16 = v145;
              if (*v18 >= *v34)
              {
LABEL_51:
                v146 = *v12;
                *v12 = *v16;
                result = v146;
                *v16 = v146;
                goto LABEL_52;
              }
              v142 = *v16;
              *v16 = *v37;
            }
            else
            {
              v142 = *v27;
              *v27 = *v37;
            }
            *v37 = v142;
            goto LABEL_51;
          }
          v20 = v12->n128_u64[1];
          v21 = &v12[v15].n128_u64[1];
          if (*v21 >= v20)
          {
            if (v20 < v17)
            {
              v134 = *v12;
              *v12 = *v9;
              result = v134;
              *v9 = v134;
              if (*v21 < v12->n128_u64[1])
              {
                v135 = *v16;
                *v16 = *v12;
                result = v135;
                *v12 = v135;
              }
            }
          }
          else
          {
            if (v20 >= v17)
            {
              v138 = *v16;
              *v16 = *v12;
              result = v138;
              *v12 = v138;
              if (v12->n128_u64[1] >= a2[-1].n128_u64[1])
                goto LABEL_52;
              v131 = *v12;
              *v12 = *v9;
            }
            else
            {
              v131 = *v16;
              *v16 = *v9;
            }
            result = v131;
            *v9 = v131;
          }
LABEL_52:
          --a3;
          if ((a4 & 1) == 0)
          {
            v44 = (__n128 *)v12->n128_u64[1];
            if ((unint64_t)v44 < v12[-1].n128_u64[1])
              goto LABEL_55;
            v62 = v12->n128_u64[0];
            if (a2[-1].n128_u64[1] >= (unint64_t)v44)
            {
              v65 = v12 + 1;
              do
              {
                v12 = v65;
                if (v65 >= a2)
                  break;
                v66 = v65->n128_u64[1];
                ++v65;
              }
              while (v66 >= (unint64_t)v44);
            }
            else
            {
              v63 = v12 + 1;
              do
              {
                if (v63 == a2)
                  goto LABEL_182;
                v64 = v63->n128_u64[1];
                ++v63;
              }
              while (v64 >= (unint64_t)v44);
              v12 = v63 - 1;
            }
            v67 = a2;
            if (v12 < a2)
            {
              v68 = a2;
              while (v68 != a1)
              {
                v67 = v68 - 1;
                v69 = v68[-1].n128_u64[1];
                --v68;
                if (v69 >= (unint64_t)v44)
                  goto LABEL_94;
              }
              goto LABEL_182;
            }
LABEL_94:
            if (v12 < v67)
            {
              do
              {
                v148 = *v12;
                *v12 = *v67;
                result = v148;
                *v67 = v148;
                v70 = v12 + 1;
                do
                {
                  if (v70 == a2)
                    goto LABEL_182;
                  v71 = v70->n128_u64[1];
                  ++v70;
                }
                while (v71 >= (unint64_t)v44);
                v12 = v70 - 1;
                do
                {
                  if (v67 == a1)
                    goto LABEL_182;
                  v72 = v67 - 1;
                  v73 = v67[-1].n128_u64[1];
                  --v67;
                }
                while (v73 < (unint64_t)v44);
                v67 = v72;
              }
              while (v12 < v72);
            }
            v74 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v74;
              *a1 = *v74;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u64[1] = (unint64_t)v44;
            continue;
          }
          v44 = (__n128 *)v12->n128_u64[1];
LABEL_55:
          v45 = 0;
          v46 = v12->n128_u64[0];
          do
          {
            if (&v12[v45 + 1] == a2)
              goto LABEL_182;
            v47 = v12[++v45].n128_u64[1];
          }
          while ((unint64_t)v44 < v47);
          v48 = &v12[v45];
          v49 = a2;
          if (v45 != 1)
          {
            while (v49 != v12)
            {
              v50 = v49 - 1;
              v51 = v49[-1].n128_u64[1];
              --v49;
              if ((unint64_t)v44 < v51)
                goto LABEL_67;
            }
            goto LABEL_182;
          }
          v52 = a2;
          while (v48 < v52)
          {
            v50 = v52 - 1;
            v53 = v52[-1].n128_u64[1];
            --v52;
            if ((unint64_t)v44 < v53)
              goto LABEL_67;
          }
          v50 = v52;
LABEL_67:
          v12 = v48;
          if (v48 < v50)
          {
            v54 = v50;
            do
            {
              v147 = *v12;
              *v12 = *v54;
              result = v147;
              *v54 = v147;
              v55 = v12 + 1;
              do
              {
                if (v55 == a2)
                  goto LABEL_182;
                v56 = v55->n128_u64[1];
                ++v55;
              }
              while ((unint64_t)v44 < v56);
              v12 = v55 - 1;
              do
              {
                if (v54 == a1)
                  goto LABEL_182;
                v57 = v54 - 1;
                v58 = v54[-1].n128_u64[1];
                --v54;
              }
              while ((unint64_t)v44 >= v58);
              v54 = v57;
            }
            while (v12 < v57);
          }
          v59 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v59;
            *a1 = *v59;
          }
          v12[-1].n128_u64[0] = v46;
          v12[-1].n128_u64[1] = (unint64_t)v44;
          if (v48 < v50)
            goto LABEL_81;
          v60 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*>(v12, a2, v61))
          {
            if (v60)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v60)
            return result;
          goto LABEL_1;
        }
        v44 = v12 + 1;
        v81 = v12 == a2 || v44 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = v12;
            do
            {
              v84 = v83->n128_u64[1];
              v85 = v83[1].n128_u64[1];
              v83 = v44;
              if (v84 < v85)
              {
                v86 = v44->n128_u64[0];
                v87 = v82;
                while (1)
                {
                  result = *(__n128 *)((char *)v12 + v87);
                  *(__n128 *)((char *)v12 + v87 + 16) = result;
                  if (!v87)
                    break;
                  v88 = *(unint64_t *)((char *)&v12->n128_u64[-1] + v87);
                  v87 -= 16;
                  if (v88 >= v85)
                  {
                    v89 = (__n128 *)((char *)v12 + v87 + 16);
                    goto LABEL_132;
                  }
                }
                v89 = v12;
LABEL_132:
                v89->n128_u64[0] = v86;
                v89->n128_u64[1] = v85;
              }
              v44 = v83 + 1;
              v82 += 16;
            }
            while (&v83[1] != a2);
          }
        }
        else if (!v81)
        {
          v118 = 0;
          v119 = -2;
          v120 = 1;
          v121 = v12;
          while (1)
          {
            v122 = &v12[v118];
            v118 = v120;
            v123 = v121[1].n128_u64[1];
            if (v122->n128_u64[1] < v123)
              break;
LABEL_180:
            v121 = &v12[v118];
            v120 = v118 + 1;
            ++v44;
            --v119;
            if (v44 == a2)
              return result;
          }
          v124 = v44->n128_u64[0];
          v125 = v119;
          v126 = v44;
          while (1)
          {
            result = v126[-1];
            *v126 = result;
            if (__CFADD__(v125++, 1))
              break;
            v128 = v126 - 1;
            v129 = v126[-2].n128_u64[1];
            --v126;
            if (v129 >= v123)
            {
              v128->n128_u64[0] = v124;
              v128->n128_u64[1] = v123;
              goto LABEL_180;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v154 = *a1;
          *a1 = *v44;
          result = v154;
          *v44 = v154;
          if (a1[1].n128_u64[1] < a2[-1].n128_u64[1])
          {
            result = *v44;
            *v44 = *v9;
LABEL_185:
            *v9 = result;
          }
        }
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v12->n128_u64[1] < a2[-1].n128_u64[1])
        {
          v149 = *v12;
          *v12 = a2[-1];
          result = v149;
          a2[-1] = v149;
        }
        return result;
      case 3:
        v44 = v12 + 1;
        v75 = v12[1].n128_u64[1];
        v76 = a2[-1].n128_u64[1];
        if (v12->n128_u64[1] < v75)
        {
          if (v75 >= v76)
            goto LABEL_183;
          v150 = *v12;
          *v12 = *v9;
          result = v150;
          goto LABEL_185;
        }
        if (v75 < v76)
        {
          result = *v44;
          *v44 = *v9;
          *v9 = result;
          goto LABEL_192;
        }
        return result;
      case 4:
        v44 = v12 + 1;
        v77 = v12 + 2;
        v78 = v12[1].n128_u64[1];
        v79 = v12[2].n128_u64[1];
        if (v12->n128_u64[1] >= v78)
        {
          if (v78 < v79)
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v153 = *v12;
              *v12 = *v44;
              result = v153;
              *v44 = v153;
            }
          }
        }
        else
        {
          if (v78 >= v79)
          {
            v155 = *v12;
            *v12 = *v44;
            result = v155;
            *v44 = v155;
            if (v12[1].n128_u64[1] >= v79)
              goto LABEL_189;
            result = *v44;
            *v44 = *v77;
          }
          else
          {
            v151 = *v12;
            *v12 = *v77;
            result = v151;
          }
          *v77 = result;
        }
LABEL_189:
        if (v12[2].n128_u64[1] < a2[-1].n128_u64[1])
        {
          result = *v77;
          *v77 = *v9;
          *v9 = result;
          if (v12[1].n128_u64[1] < v12[2].n128_u64[1])
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
LABEL_192:
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v156 = *v12;
              *v12 = *v44;
              result = v156;
              *v44 = v156;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v90 = (unint64_t)(v14 - 2) >> 1;
              v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  v92 = (2 * v91) | 1;
                  v93 = &v12[v92];
                  if (2 * v91 + 2 < v14)
                  {
                    v94 = v93[1].n128_u64[1];
                    v95 = v93->n128_u64[1];
                    v93 += v94 < v95;
                    if (v94 < v95)
                      v92 = 2 * v91 + 2;
                  }
                  v96 = v12[v91].n128_u64[1];
                  if (v96 >= v93->n128_u64[1])
                  {
                    v97 = &v12[v91];
                    v98 = v97->n128_u64[0];
                    do
                    {
                      v99 = v97;
                      v97 = v93;
                      *v99 = *v93;
                      if (v90 < v92)
                        break;
                      v100 = (2 * v92) | 1;
                      v93 = &v12[v100];
                      v101 = 2 * v92 + 2;
                      if (v101 < v14)
                      {
                        v102 = v93[1].n128_u64[1];
                        v103 = v93->n128_u64[1];
                        v93 += v102 < v103;
                        if (v102 < v103)
                          v100 = v101;
                      }
                      v92 = v100;
                    }
                    while (v96 >= v93->n128_u64[1]);
                    v97->n128_u64[0] = v98;
                    v97->n128_u64[1] = v96;
                  }
                }
                v104 = v91-- <= 0;
              }
              while (!v104);
              v105 = (unint64_t)v13 >> 4;
              do
              {
                v106 = 0;
                v152 = *v12;
                v107 = v12;
                do
                {
                  v108 = &v107[v106 + 1];
                  v109 = (2 * v106) | 1;
                  v110 = 2 * v106 + 2;
                  if (v110 < v105)
                  {
                    v111 = v108[1].n128_u64[1];
                    v112 = v108->n128_u64[1];
                    v108 += v111 < v112;
                    if (v111 < v112)
                      v109 = v110;
                  }
                  *v107 = *v108;
                  v107 = v108;
                  v106 = v109;
                }
                while (v109 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                if (v108 == --a2)
                {
                  result = v152;
                  *v108 = v152;
                }
                else
                {
                  *v108 = *a2;
                  result = v152;
                  *a2 = v152;
                  v113 = (char *)v108 - (char *)v12 + 16;
                  if (v113 >= 17)
                  {
                    v114 = (((unint64_t)v113 >> 4) - 2) >> 1;
                    v115 = v108->n128_u64[1];
                    if (v115 < v12[v114].n128_u64[1])
                    {
                      v116 = v108->n128_u64[0];
                      do
                      {
                        v117 = v108;
                        v108 = &v12[v114];
                        result = *v108;
                        *v117 = *v108;
                        if (!v114)
                          break;
                        v114 = (v114 - 1) >> 1;
                      }
                      while (v115 < v12[v114].n128_u64[1]);
                      v108->n128_u64[0] = v116;
                      v108->n128_u64[1] = v115;
                    }
                  }
                }
                v104 = v105-- <= 2;
              }
              while (!v104);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_u64[1];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = &v12[v15].n128_u64[1];
            v19 = *v18;
            if (v12->n128_u64[1] >= *v18)
            {
              if (v19 < v17)
              {
                v132 = *v16;
                *v16 = *v9;
                *v9 = v132;
                if (v12->n128_u64[1] < *v18)
                {
                  v133 = *v12;
                  *v12 = *v16;
                  *v16 = v133;
                }
              }
            }
            else
            {
              if (v19 >= v17)
              {
                v136 = *v12;
                *v12 = *v16;
                *v16 = v136;
                if (*v18 >= a2[-1].n128_u64[1])
                  goto LABEL_21;
                v130 = *v16;
                *v16 = *v9;
              }
              else
              {
                v130 = *v12;
                *v12 = *v9;
              }
              *v9 = v130;
            }
LABEL_21:
            v22 = v12 + 1;
            v23 = &v12[v15];
            v26 = v23[-1].n128_u64[1];
            v24 = &v23[-1].n128_u64[1];
            v25 = v26;
            v27 = (__n128 *)(v24 - 1);
            v28 = a2[-2].n128_u64[1];
            if (v12[1].n128_u64[1] >= v26)
            {
              if (v25 < v28)
              {
                v137 = *v27;
                *v27 = *v10;
                *v10 = v137;
                if (v12[1].n128_u64[1] < *v24)
                {
                  v30 = *v22;
                  *v22 = *v27;
                  *v27 = v30;
                }
              }
            }
            else
            {
              if (v25 >= v28)
              {
                v31 = *v22;
                *v22 = *v27;
                *v27 = v31;
                if (*v24 >= a2[-2].n128_u64[1])
                  goto LABEL_33;
                v139 = *v27;
                *v27 = *v10;
                v29 = v139;
              }
              else
              {
                v29 = *v22;
                *v22 = *v10;
              }
              *v10 = v29;
            }
LABEL_33:
            v32 = v12 + 2;
            v33 = &v12[v15];
            v36 = v33[1].n128_u64[1];
            v34 = &v33[1].n128_u64[1];
            v35 = v36;
            v37 = (__n128 *)(v34 - 1);
            v38 = a2[-3].n128_u64[1];
            if (v12[2].n128_u64[1] >= v36)
            {
              if (v35 < v38)
              {
                v140 = *v37;
                *v37 = *v11;
                *v11 = v140;
                if (v12[2].n128_u64[1] < *v34)
                {
                  v40 = *v32;
                  *v32 = *v37;
                  *v37 = v40;
                }
              }
            }
            else
            {
              if (v35 >= v38)
              {
                v41 = *v32;
                *v32 = *v37;
                *v37 = v41;
                if (*v34 >= a2[-3].n128_u64[1])
                  goto LABEL_42;
                v141 = *v37;
                *v37 = *v11;
                v39 = v141;
              }
              else
              {
                v39 = *v32;
                *v32 = *v11;
              }
              *v11 = v39;
            }
LABEL_42:
            v42 = *v18;
            v43 = *v34;
            if (*v24 >= *v18)
            {
              if (v42 < v43)
              {
                v143 = *v16;
                *v16 = *v37;
                *v37 = v143;
                if (*v24 < *v18)
                {
                  v144 = *v27;
                  *v27 = *v16;
                  *v16 = v144;
                }
              }
              goto LABEL_51;
            }
            if (v42 >= v43)
            {
              v145 = *v27;
              *v27 = *v16;
              *v16 = v145;
              if (*v18 >= *v34)
              {
LABEL_51:
                v146 = *v12;
                *v12 = *v16;
                result = v146;
                *v16 = v146;
                goto LABEL_52;
              }
              v142 = *v16;
              *v16 = *v37;
            }
            else
            {
              v142 = *v27;
              *v27 = *v37;
            }
            *v37 = v142;
            goto LABEL_51;
          }
          v20 = v12->n128_u64[1];
          v21 = &v12[v15].n128_u64[1];
          if (*v21 >= v20)
          {
            if (v20 < v17)
            {
              v134 = *v12;
              *v12 = *v9;
              result = v134;
              *v9 = v134;
              if (*v21 < v12->n128_u64[1])
              {
                v135 = *v16;
                *v16 = *v12;
                result = v135;
                *v12 = v135;
              }
            }
          }
          else
          {
            if (v20 >= v17)
            {
              v138 = *v16;
              *v16 = *v12;
              result = v138;
              *v12 = v138;
              if (v12->n128_u64[1] >= a2[-1].n128_u64[1])
                goto LABEL_52;
              v131 = *v12;
              *v12 = *v9;
            }
            else
            {
              v131 = *v16;
              *v16 = *v9;
            }
            result = v131;
            *v9 = v131;
          }
LABEL_52:
          --a3;
          if ((a4 & 1) == 0)
          {
            v44 = (__n128 *)v12->n128_u64[1];
            if ((unint64_t)v44 < v12[-1].n128_u64[1])
              goto LABEL_55;
            v62 = v12->n128_u64[0];
            if (a2[-1].n128_u64[1] >= (unint64_t)v44)
            {
              v65 = v12 + 1;
              do
              {
                v12 = v65;
                if (v65 >= a2)
                  break;
                v66 = v65->n128_u64[1];
                ++v65;
              }
              while (v66 >= (unint64_t)v44);
            }
            else
            {
              v63 = v12 + 1;
              do
              {
                if (v63 == a2)
                  goto LABEL_182;
                v64 = v63->n128_u64[1];
                ++v63;
              }
              while (v64 >= (unint64_t)v44);
              v12 = v63 - 1;
            }
            v67 = a2;
            if (v12 < a2)
            {
              v68 = a2;
              while (v68 != a1)
              {
                v67 = v68 - 1;
                v69 = v68[-1].n128_u64[1];
                --v68;
                if (v69 >= (unint64_t)v44)
                  goto LABEL_94;
              }
              goto LABEL_182;
            }
LABEL_94:
            if (v12 < v67)
            {
              do
              {
                v148 = *v12;
                *v12 = *v67;
                result = v148;
                *v67 = v148;
                v70 = v12 + 1;
                do
                {
                  if (v70 == a2)
                    goto LABEL_182;
                  v71 = v70->n128_u64[1];
                  ++v70;
                }
                while (v71 >= (unint64_t)v44);
                v12 = v70 - 1;
                do
                {
                  if (v67 == a1)
                    goto LABEL_182;
                  v72 = v67 - 1;
                  v73 = v67[-1].n128_u64[1];
                  --v67;
                }
                while (v73 < (unint64_t)v44);
                v67 = v72;
              }
              while (v12 < v72);
            }
            v74 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v74;
              *a1 = *v74;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u64[1] = (unint64_t)v44;
            continue;
          }
          v44 = (__n128 *)v12->n128_u64[1];
LABEL_55:
          v45 = 0;
          v46 = v12->n128_u64[0];
          do
          {
            if (&v12[v45 + 1] == a2)
              goto LABEL_182;
            v47 = v12[++v45].n128_u64[1];
          }
          while ((unint64_t)v44 < v47);
          v48 = &v12[v45];
          v49 = a2;
          if (v45 != 1)
          {
            while (v49 != v12)
            {
              v50 = v49 - 1;
              v51 = v49[-1].n128_u64[1];
              --v49;
              if ((unint64_t)v44 < v51)
                goto LABEL_67;
            }
            goto LABEL_182;
          }
          v52 = a2;
          while (v48 < v52)
          {
            v50 = v52 - 1;
            v53 = v52[-1].n128_u64[1];
            --v52;
            if ((unint64_t)v44 < v53)
              goto LABEL_67;
          }
          v50 = v52;
LABEL_67:
          v12 = v48;
          if (v48 < v50)
          {
            v54 = v50;
            do
            {
              v147 = *v12;
              *v12 = *v54;
              result = v147;
              *v54 = v147;
              v55 = v12 + 1;
              do
              {
                if (v55 == a2)
                  goto LABEL_182;
                v56 = v55->n128_u64[1];
                ++v55;
              }
              while ((unint64_t)v44 < v56);
              v12 = v55 - 1;
              do
              {
                if (v54 == a1)
                  goto LABEL_182;
                v57 = v54 - 1;
                v58 = v54[-1].n128_u64[1];
                --v54;
              }
              while ((unint64_t)v44 >= v58);
              v54 = v57;
            }
            while (v12 < v57);
          }
          v59 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v59;
            *a1 = *v59;
          }
          v12[-1].n128_u64[0] = v46;
          v12[-1].n128_u64[1] = (unint64_t)v44;
          if (v48 < v50)
            goto LABEL_81;
          v60 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*>(v12, a2, v61))
          {
            if (v60)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v60)
            return result;
          goto LABEL_1;
        }
        v44 = v12 + 1;
        v81 = v12 == a2 || v44 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = v12;
            do
            {
              v84 = v83->n128_u64[1];
              v85 = v83[1].n128_u64[1];
              v83 = v44;
              if (v84 < v85)
              {
                v86 = v44->n128_u64[0];
                v87 = v82;
                while (1)
                {
                  result = *(__n128 *)((char *)v12 + v87);
                  *(__n128 *)((char *)v12 + v87 + 16) = result;
                  if (!v87)
                    break;
                  v88 = *(unint64_t *)((char *)&v12->n128_u64[-1] + v87);
                  v87 -= 16;
                  if (v88 >= v85)
                  {
                    v89 = (__n128 *)((char *)v12 + v87 + 16);
                    goto LABEL_132;
                  }
                }
                v89 = v12;
LABEL_132:
                v89->n128_u64[0] = v86;
                v89->n128_u64[1] = v85;
              }
              v44 = v83 + 1;
              v82 += 16;
            }
            while (&v83[1] != a2);
          }
        }
        else if (!v81)
        {
          v118 = 0;
          v119 = -2;
          v120 = 1;
          v121 = v12;
          while (1)
          {
            v122 = &v12[v118];
            v118 = v120;
            v123 = v121[1].n128_u64[1];
            if (v122->n128_u64[1] < v123)
              break;
LABEL_180:
            v121 = &v12[v118];
            v120 = v118 + 1;
            ++v44;
            --v119;
            if (v44 == a2)
              return result;
          }
          v124 = v44->n128_u64[0];
          v125 = v119;
          v126 = v44;
          while (1)
          {
            result = v126[-1];
            *v126 = result;
            if (__CFADD__(v125++, 1))
              break;
            v128 = v126 - 1;
            v129 = v126[-2].n128_u64[1];
            --v126;
            if (v129 >= v123)
            {
              v128->n128_u64[0] = v124;
              v128->n128_u64[1] = v123;
              goto LABEL_180;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v154 = *a1;
          *a1 = *v44;
          result = v154;
          *v44 = v154;
          if (a1[1].n128_u64[1] < a2[-1].n128_u64[1])
          {
            result = *v44;
            *v44 = *v9;
LABEL_185:
            *v9 = result;
          }
        }
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v12->n128_u64[1] < a2[-1].n128_u64[1])
        {
          v149 = *v12;
          *v12 = a2[-1];
          result = v149;
          a2[-1] = v149;
        }
        return result;
      case 3:
        v44 = v12 + 1;
        v75 = v12[1].n128_u64[1];
        v76 = a2[-1].n128_u64[1];
        if (v12->n128_u64[1] < v75)
        {
          if (v75 >= v76)
            goto LABEL_183;
          v150 = *v12;
          *v12 = *v9;
          result = v150;
          goto LABEL_185;
        }
        if (v75 < v76)
        {
          result = *v44;
          *v44 = *v9;
          *v9 = result;
          goto LABEL_192;
        }
        return result;
      case 4:
        v44 = v12 + 1;
        v77 = v12 + 2;
        v78 = v12[1].n128_u64[1];
        v79 = v12[2].n128_u64[1];
        if (v12->n128_u64[1] >= v78)
        {
          if (v78 < v79)
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v153 = *v12;
              *v12 = *v44;
              result = v153;
              *v44 = v153;
            }
          }
        }
        else
        {
          if (v78 >= v79)
          {
            v155 = *v12;
            *v12 = *v44;
            result = v155;
            *v44 = v155;
            if (v12[1].n128_u64[1] >= v79)
              goto LABEL_189;
            result = *v44;
            *v44 = *v77;
          }
          else
          {
            v151 = *v12;
            *v12 = *v77;
            result = v151;
          }
          *v77 = result;
        }
LABEL_189:
        if (v12[2].n128_u64[1] < a2[-1].n128_u64[1])
        {
          result = *v77;
          *v77 = *v9;
          *v9 = result;
          if (v12[1].n128_u64[1] < v12[2].n128_u64[1])
          {
            result = *v44;
            *v44 = *v77;
            *v77 = result;
LABEL_192:
            if (v12->n128_u64[1] < v12[1].n128_u64[1])
            {
              v156 = *v12;
              *v12 = *v44;
              result = v156;
              *v44 = v156;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v90 = (unint64_t)(v14 - 2) >> 1;
              v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  v92 = (2 * v91) | 1;
                  v93 = &v12[v92];
                  if (2 * v91 + 2 < v14)
                  {
                    v94 = v93[1].n128_u64[1];
                    v95 = v93->n128_u64[1];
                    v93 += v94 < v95;
                    if (v94 < v95)
                      v92 = 2 * v91 + 2;
                  }
                  v96 = v12[v91].n128_u64[1];
                  if (v96 >= v93->n128_u64[1])
                  {
                    v97 = &v12[v91];
                    v98 = v97->n128_u64[0];
                    do
                    {
                      v99 = v97;
                      v97 = v93;
                      *v99 = *v93;
                      if (v90 < v92)
                        break;
                      v100 = (2 * v92) | 1;
                      v93 = &v12[v100];
                      v101 = 2 * v92 + 2;
                      if (v101 < v14)
                      {
                        v102 = v93[1].n128_u64[1];
                        v103 = v93->n128_u64[1];
                        v93 += v102 < v103;
                        if (v102 < v103)
                          v100 = v101;
                      }
                      v92 = v100;
                    }
                    while (v96 >= v93->n128_u64[1]);
                    v97->n128_u64[0] = v98;
                    v97->n128_u64[1] = v96;
                  }
                }
                v104 = v91-- <= 0;
              }
              while (!v104);
              v105 = (unint64_t)v13 >> 4;
              do
              {
                v106 = 0;
                v152 = *v12;
                v107 = v12;
                do
                {
                  v108 = &v107[v106 + 1];
                  v109 = (2 * v106) | 1;
                  v110 = 2 * v106 + 2;
                  if (v110 < v105)
                  {
                    v111 = v108[1].n128_u64[1];
                    v112 = v108->n128_u64[1];
                    v108 += v111 < v112;
                    if (v111 < v112)
                      v109 = v110;
                  }
                  *v107 = *v108;
                  v107 = v108;
                  v106 = v109;
                }
                while (v109 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                if (v108 == --a2)
                {
                  result = v152;
                  *v108 = v152;
                }
                else
                {
                  *v108 = *a2;
                  result = v152;
                  *a2 = v152;
                  v113 = (char *)v108 - (char *)v12 + 16;
                  if (v113 >= 17)
                  {
                    v114 = (((unint64_t)v113 >> 4) - 2) >> 1;
                    v115 = v108->n128_u64[1];
                    if (v115 < v12[v114].n128_u64[1])
                    {
                      v116 = v108->n128_u64[0];
                      do
                      {
                        v117 = v108;
                        v108 = &v12[v114];
                        result = *v108;
                        *v117 = *v108;
                        if (!v114)
                          break;
                        v114 = (v114 - 1) >> 1;
                      }
                      while (v115 < v12[v114].n128_u64[1]);
                      v108->n128_u64[0] = v116;
                      v108->n128_u64[1] = v115;
                    }
                  }
                }
                v104 = v105-- <= 2;
              }
              while (!v104);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_u64[1];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = &v12[v15].n128_u64[1];
            v19 = *v18;
            if (v12->n128_u64[1] >= *v18)
            {
              if (v19 < v17)
              {
                v132 = *v16;
                *v16 = *v9;
                *v9 = v132;
                if (v12->n128_u64[1] < *v18)
                {
                  v133 = *v12;
                  *v12 = *v16;
                  *v16 = v133;
                }
              }
            }
            else
            {
              if (v19 >= v17)
              {
                v136 = *v12;
                *v12 = *v16;
                *v16 = v136;
                if (*v18 >= a2[-1].n128_u64[1])
                  goto LABEL_21;
                v130 = *v16;
                *v16 = *v9;
              }
              else
              {
                v130 = *v12;
                *v12 = *v9;
              }
              *v9 = v130;
            }
LABEL_21:
            v22 = v12 + 1;
            v23 = &v12[v15];
            v26 = v23[-1].n128_u64[1];
            v24 = &v23[-1].n128_u64[1];
            v25 = v26;
            v27 = (__n128 *)(v24 - 1);
            v28 = a2[-2].n128_u64[1];
            if (v12[1].n128_u64[1] >= v26)
            {
              if (v25 < v28)
              {
                v137 = *v27;
                *v27 = *v10;
                *v10 = v137;
                if (v12[1].n128_u64[1] < *v24)
                {
                  v30 = *v22;
                  *v22 = *v27;
                  *v27 = v30;
                }
              }
            }
            else
            {
              if (v25 >= v28)
              {
                v31 = *v22;
                *v22 = *v27;
                *v27 = v31;
                if (*v24 >= a2[-2].n128_u64[1])
                  goto LABEL_33;
                v139 = *v27;
                *v27 = *v10;
                v29 = v139;
              }
              else
              {
                v29 = *v22;
                *v22 = *v10;
              }
              *v10 = v29;
            }
LABEL_33:
            v32 = v12 + 2;
            v33 = &v12[v15];
            v36 = v33[1].n128_u64[1];
            v34 = &v33[1].n128_u64[1];
            v35 = v36;
            v37 = (__n128 *)(v34 - 1);
            v38 = a2[-3].n128_u64[1];
            if (v12[2].n128_u64[1] >= v36)
            {
              if (v35 < v38)
              {
                v140 = *v37;
                *v37 = *v11;
                *v11 = v140;
                if (v12[2].n128_u64[1] < *v34)
                {
                  v40 = *v32;
                  *v32 = *v37;
                  *v37 = v40;
                }
              }
            }
            else
            {
              if (v35 >= v38)
              {
                v41 = *v32;
                *v32 = *v37;
                *v37 = v41;
                if (*v34 >= a2[-3].n128_u64[1])
                  goto LABEL_42;
                v141 = *v37;
                *v37 = *v11;
                v39 = v141;
              }
              else
              {
                v39 = *v32;
                *v32 = *v11;
              }
              *v11 = v39;
            }
LABEL_42:
            v42 = *v18;
            v43 = *v34;
            if (*v24 >= *v18)
            {
              if (v42 < v43)
              {
                v143 = *v16;
                *v16 = *v37;
                *v37 = v143;
                if (*v24 < *v18)
                {
                  v144 = *v27;
                  *v27 = *v16;
                  *v16 = v144;
                }
              }
              goto LABEL_51;
            }
            if (v42 >= v43)
            {
              v145 = *v27;
              *v27 = *v16;
              *v16 = v145;
              if (*v18 >= *v34)
              {
LABEL_51:
                v146 = *v12;
                *v12 = *v16;
                result = v146;
                *v16 = v146;
                goto LABEL_52;
              }
              v142 = *v16;
              *v16 = *v37;
            }
            else
            {
              v142 = *v27;
              *v27 = *v37;
            }
            *v37 = v142;
            goto LABEL_51;
          }
          v20 = v12->n128_u64[1];
          v21 = &v12[v15].n128_u64[1];
          if (*v21 >= v20)
          {
            if (v20 < v17)
            {
              v134 = *v12;
              *v12 = *v9;
              result = v134;
              *v9 = v134;
              if (*v21 < v12->n128_u64[1])
              {
                v135 = *v16;
                *v16 = *v12;
                result = v135;
                *v12 = v135;
              }
            }
          }
          else
          {
            if (v20 >= v17)
            {
              v138 = *v16;
              *v16 = *v12;
              result = v138;
              *v12 = v138;
              if (v12->n128_u64[1] >= a2[-1].n128_u64[1])
                goto LABEL_52;
              v131 = *v12;
              *v12 = *v9;
            }
            else
            {
              v131 = *v16;
              *v16 = *v9;
            }
            result = v131;
            *v9 = v131;
          }
LABEL_52:
          --a3;
          if ((a4 & 1) == 0)
          {
            v44 = (__n128 *)v12->n128_u64[1];
            if ((unint64_t)v44 < v12[-1].n128_u64[1])
              goto LABEL_55;
            v62 = v12->n128_u64[0];
            if (a2[-1].n128_u64[1] >= (unint64_t)v44)
            {
              v65 = v12 + 1;
              do
              {
                v12 = v65;
                if (v65 >= a2)
                  break;
                v66 = v65->n128_u64[1];
                ++v65;
              }
              while (v66 >= (unint64_t)v44);
            }
            else
            {
              v63 = v12 + 1;
              do
              {
                if (v63 == a2)
                  goto LABEL_182;
                v64 = v63->n128_u64[1];
                ++v63;
              }
              while (v64 >= (unint64_t)v44);
              v12 = v63 - 1;
            }
            v67 = a2;
            if (v12 < a2)
            {
              v68 = a2;
              while (v68 != a1)
              {
                v67 = v68 - 1;
                v69 = v68[-1].n128_u64[1];
                --v68;
                if (v69 >= (unint64_t)v44)
                  goto LABEL_94;
              }
              goto LABEL_182;
            }
LABEL_94:
            if (v12 < v67)
            {
              do
              {
                v148 = *v12;
                *v12 = *v67;
                result = v148;
                *v67 = v148;
                v70 = v12 + 1;
                do
                {
                  if (v70 == a2)
                    goto LABEL_182;
                  v71 = v70->n128_u64[1];
                  ++v70;
                }
                while (v71 >= (unint64_t)v44);
                v12 = v70 - 1;
                do
                {
                  if (v67 == a1)
                    goto LABEL_182;
                  v72 = v67 - 1;
                  v73 = v67[-1].n128_u64[1];
                  --v67;
                }
                while (v73 < (unint64_t)v44);
                v67 = v72;
              }
              while (v12 < v72);
            }
            v74 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v74;
              *a1 = *v74;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u64[1] = (unint64_t)v44;
            continue;
          }
          v44 = (__n128 *)v12->n128_u64[1];
LABEL_55:
          v45 = 0;
          v46 = v12->n128_u64[0];
          do
          {
            if (&v12[v45 + 1] == a2)
              goto LABEL_182;
            v47 = v12[++v45].n128_u64[1];
          }
          while ((unint64_t)v44 < v47);
          v48 = &v12[v45];
          v49 = a2;
          if (v45 != 1)
          {
            while (v49 != v12)
            {
              v50 = v49 - 1;
              v51 = v49[-1].n128_u64[1];
              --v49;
              if ((unint64_t)v44 < v51)
                goto LABEL_67;
            }
            goto LABEL_182;
          }
          v52 = a2;
          while (v48 < v52)
          {
            v50 = v52 - 1;
            v53 = v52[-1].n128_u64[1];
            --v52;
            if ((unint64_t)v44 < v53)
              goto LABEL_67;
          }
          v50 = v52;
LABEL_67:
          v12 = v48;
          if (v48 < v50)
          {
            v54 = v50;
            do
            {
              v147 = *v12;
              *v12 = *v54;
              result = v147;
              *v54 = v147;
              v55 = v12 + 1;
              do
              {
                if (v55 == a2)
                  goto LABEL_182;
                v56 = v55->n128_u64[1];
                ++v55;
              }
              while ((unint64_t)v44 < v56);
              v12 = v55 - 1;
              do
              {
                if (v54 == a1)
                  goto LABEL_182;
                v57 = v54 - 1;
                v58 = v54[-1].n128_u64[1];
                --v54;
              }
              while ((unint64_t)v44 >= v58);
              v54 = v57;
            }
            while (v12 < v57);
          }
          v59 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v59;
            *a1 = *v59;
          }
          v12[-1].n128_u64[0] = v46;
          v12[-1].n128_u64[1] = (unint64_t)v44;
          if (v48 < v50)
            goto LABEL_81;
          v60 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*>(v12, a2, v61))
          {
            if (v60)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v60)
            return result;
          goto LABEL_1;
        }
        v44 = v12 + 1;
        v81 = v12 == a2 || v44 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = v12;
            do
            {
              v84 = v83->n128_u64[1];
              v85 = v83[1].n128_u64[1];
              v83 = v44;
              if (v84 < v85)
              {
                v86 = v44->n128_u64[0];
                v87 = v82;
                while (1)
                {
                  result = *(__n128 *)((char *)v12 + v87);
                  *(__n128 *)((char *)v12 + v87 + 16) = result;
                  if (!v87)
                    break;
                  v88 = *(unint64_t *)((char *)&v12->n128_u64[-1] + v87);
                  v87 -= 16;
                  if (v88 >= v85)
                  {
                    v89 = (__n128 *)((char *)v12 + v87 + 16);
                    goto LABEL_132;
                  }
                }
                v89 = v12;
LABEL_132:
                v89->n128_u64[0] = v86;
                v89->n128_u64[1] = v85;
              }
              v44 = v83 + 1;
              v82 += 16;
            }
            while (&v83[1] != a2);
          }
        }
        else if (!v81)
        {
          v118 = 0;
          v119 = -2;
          v120 = 1;
          v121 = v12;
          while (1)
          {
            v122 = &v12[v118];
            v118 = v120;
            v123 = v121[1].n128_u64[1];
            if (v122->n128_u64[1] < v123)
              break;
LABEL_180:
            v121 = &v12[v118];
            v120 = v118 + 1;
            ++v44;
            --v119;
            if (v44 == a2)
              return result;
          }
          v124 = v44->n128_u64[0];
          v125 = v119;
          v126 = v44;
          while (1)
          {
            result = v126[-1];
            *v126 = result;
            if (__CFADD__(v125++, 1))
              break;
            v128 = v126 - 1;
            v129 = v126[-2].n128_u64[1];
            --v126;
            if (v129 >= v123)
            {
              v128->n128_u64[0] = v124;
              v128->n128_u64[1] = v123;
              goto LABEL_180;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v154 = *a1;
          *a1 = *v44;
          result = v154;
          *v44 = v154;
          if (a1[1].n128_u64[1] < a2[-1].n128_u64[1])
          {
            result = *v44;
            *v44 = *v9;
LABEL_185:
            *v9 = result;
          }
        }
        return result;
    }
  }
}

_QWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = 1;
      v5 = result;
      while (1)
      {
        v6 = v3;
        v3 = v4;
        v7 = *v2;
        v8 = *v5;
        v9 = *(_DWORD *)(*v2 + 4);
        v10 = *(_DWORD *)(*v5 + 4);
        v11 = v10 >= v9 ? v9 : v10;
        if ((_DWORD)v11)
          break;
LABEL_13:
        if (v9 < v10)
          goto LABEL_24;
LABEL_59:
        v5 = &result[2 * v3];
        v4 = v3 + 1;
        v2 = &result[2 * v3 + 2];
        if (v2 == a2)
          return result;
      }
      v12 = *(_DWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 8);
      v14 = *(_DWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 8);
      if ((v12 & 4) != 0)
      {
        if ((v14 & 4) != 0)
        {
          v16 = 0;
          while (*(unsigned __int8 *)(v13 + v16) == *(unsigned __int8 *)(v15 + v16))
          {
            if (v11 == ++v16)
              goto LABEL_13;
          }
          goto LABEL_20;
        }
        v16 = 0;
        while (*(_WORD *)(v15 + 2 * v16) == *(unsigned __int8 *)(v13 + v16))
        {
          if (v11 == ++v16)
            goto LABEL_13;
        }
      }
      else
      {
        if ((v14 & 4) != 0)
        {
          v16 = 0;
          while (*(_WORD *)(v13 + 2 * v16) == *(unsigned __int8 *)(v15 + v16))
          {
            if (v11 == ++v16)
              goto LABEL_13;
          }
LABEL_20:
          v17 = 0;
          if ((v12 & 4) != 0)
            goto LABEL_21;
          goto LABEL_70;
        }
        v16 = 0;
        while (*(unsigned __int16 *)(v13 + 2 * v16) == *(unsigned __int16 *)(v15 + 2 * v16))
        {
          if (v11 == ++v16)
            goto LABEL_13;
        }
      }
      v17 = 1;
      if ((v12 & 4) != 0)
      {
LABEL_21:
        v18 = *(unsigned __int8 *)(v13 + v16);
        if ((v17 & 1) == 0)
        {
LABEL_22:
          v19 = *(unsigned __int8 *)(v15 + v16);
LABEL_23:
          if (v18 >= v19)
            goto LABEL_59;
LABEL_24:
          v20 = v5[3];
          v21 = &result[2 * v6];
          *(_OWORD *)v2 = *(_OWORD *)v21;
          while (1)
          {
            v22 = v6--;
            v23 = &result[2 * v6];
            v24 = *v23;
            v25 = *(_DWORD *)(v7 + 4);
            v26 = *(_DWORD *)(*v23 + 4);
            if (v26 >= v25)
              v27 = v25;
            else
              v27 = v26;
            if (!(_DWORD)v27)
            {
LABEL_34:
              if (v25 >= v26)
                goto LABEL_58;
              goto LABEL_45;
            }
            v28 = *(_DWORD *)(v7 + 16);
            v29 = *(_QWORD *)(v7 + 8);
            v30 = *(_DWORD *)(v24 + 16);
            v31 = *(_QWORD *)(v24 + 8);
            if ((v28 & 4) != 0)
            {
              if ((v30 & 4) != 0)
              {
                v32 = 0;
                while (*(unsigned __int8 *)(v29 + v32) == *(unsigned __int8 *)(v31 + v32))
                {
                  if (v27 == ++v32)
                    goto LABEL_34;
                }
                goto LABEL_41;
              }
              v32 = 0;
              while (*(_WORD *)(v31 + 2 * v32) == *(unsigned __int8 *)(v29 + v32))
              {
                if (v27 == ++v32)
                  goto LABEL_34;
              }
            }
            else
            {
              if ((v30 & 4) != 0)
              {
                v32 = 0;
                while (*(_WORD *)(v29 + 2 * v32) == *(unsigned __int8 *)(v31 + v32))
                {
                  if (v27 == ++v32)
                    goto LABEL_34;
                }
LABEL_41:
                v33 = 0;
                if ((v28 & 4) != 0)
                  goto LABEL_42;
                goto LABEL_56;
              }
              v32 = 0;
              while (*(unsigned __int16 *)(v29 + 2 * v32) == *(unsigned __int16 *)(v31 + 2 * v32))
              {
                if (v27 == ++v32)
                  goto LABEL_34;
              }
            }
            v33 = 1;
            if ((v28 & 4) != 0)
            {
LABEL_42:
              v34 = *(unsigned __int8 *)(v29 + v32);
              if ((v33 & 1) == 0)
                goto LABEL_43;
              goto LABEL_57;
            }
LABEL_56:
            v34 = *(unsigned __int16 *)(v29 + 2 * v32);
            if ((v33 & 1) == 0)
            {
LABEL_43:
              v35 = *(unsigned __int8 *)(v31 + v32);
              goto LABEL_44;
            }
LABEL_57:
            v35 = *(unsigned __int16 *)(v31 + 2 * v32);
LABEL_44:
            if (v34 >= v35)
            {
LABEL_58:
              *v21 = v7;
              v21[1] = v20;
              goto LABEL_59;
            }
LABEL_45:
            *(_OWORD *)v21 = *(_OWORD *)v23;
            v21 = &result[2 * v6];
            if (!v22)
            {
              __break(1u);
              return result;
            }
          }
        }
LABEL_71:
        v19 = *(unsigned __int16 *)(v15 + 2 * v16);
        goto LABEL_23;
      }
LABEL_70:
      v18 = *(unsigned __int16 *)(v13 + 2 * v16);
      if ((v17 & 1) == 0)
        goto LABEL_22;
      goto LABEL_71;
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  char v58;
  unsigned int v59;
  unsigned int v60;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 4);
  v6 = *(_DWORD *)(*result + 4);
  if (v6 >= v5)
    v7 = v5;
  else
    v7 = v6;
  if (!(_DWORD)v7)
  {
LABEL_10:
    v13 = v5 >= v6;
    goto LABEL_20;
  }
  v8 = *(_DWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_DWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v4 + 8);
  if ((v8 & 4) != 0)
  {
    if ((v10 & 4) != 0)
    {
      v12 = 0;
      while (*(unsigned __int8 *)(v9 + v12) == *(unsigned __int8 *)(v11 + v12))
      {
        if (v7 == ++v12)
          goto LABEL_10;
      }
      goto LABEL_16;
    }
    v12 = 0;
    while (*(_WORD *)(v11 + 2 * v12) == *(unsigned __int8 *)(v9 + v12))
    {
      if (v7 == ++v12)
        goto LABEL_10;
    }
  }
  else
  {
    if ((v10 & 4) != 0)
    {
      v12 = 0;
      while (*(_WORD *)(v9 + 2 * v12) == *(unsigned __int8 *)(v11 + v12))
      {
        if (v7 == ++v12)
          goto LABEL_10;
      }
LABEL_16:
      v14 = 0;
      if ((v8 & 4) != 0)
        goto LABEL_17;
LABEL_114:
      v15 = *(unsigned __int16 *)(v9 + 2 * v12);
      if ((v14 & 1) == 0)
        goto LABEL_18;
LABEL_115:
      v16 = *(unsigned __int16 *)(v11 + 2 * v12);
      goto LABEL_19;
    }
    v12 = 0;
    while (*(unsigned __int16 *)(v9 + 2 * v12) == *(unsigned __int16 *)(v11 + 2 * v12))
    {
      if (v7 == ++v12)
        goto LABEL_10;
    }
  }
  v14 = 1;
  if ((v8 & 4) == 0)
    goto LABEL_114;
LABEL_17:
  v15 = *(unsigned __int8 *)(v9 + v12);
  if ((v14 & 1) != 0)
    goto LABEL_115;
LABEL_18:
  v16 = *(unsigned __int8 *)(v11 + v12);
LABEL_19:
  v13 = v15 >= v16;
LABEL_20:
  v17 = !v13;
  v18 = *a3;
  v19 = *(_DWORD *)(*a3 + 4);
  if (v5 >= v19)
    v20 = v19;
  else
    v20 = v5;
  if (!(_DWORD)v20)
  {
LABEL_32:
    v26 = v19 >= v5;
    goto LABEL_42;
  }
  v21 = *(_DWORD *)(v18 + 16);
  v22 = *(_QWORD *)(v18 + 8);
  v23 = *(_DWORD *)(v3 + 16);
  v24 = *(_QWORD *)(v3 + 8);
  if ((v21 & 4) != 0)
  {
    if ((v23 & 4) != 0)
    {
      v25 = 0;
      while (*(unsigned __int8 *)(v22 + v25) == *(unsigned __int8 *)(v24 + v25))
      {
        if (v20 == ++v25)
          goto LABEL_32;
      }
      goto LABEL_38;
    }
    v25 = 0;
    while (*(_WORD *)(v24 + 2 * v25) == *(unsigned __int8 *)(v22 + v25))
    {
      if (v20 == ++v25)
        goto LABEL_32;
    }
  }
  else
  {
    if ((v23 & 4) != 0)
    {
      v25 = 0;
      while (*(_WORD *)(v22 + 2 * v25) == *(unsigned __int8 *)(v24 + v25))
      {
        if (v20 == ++v25)
          goto LABEL_32;
      }
LABEL_38:
      v27 = 0;
      if ((v21 & 4) != 0)
        goto LABEL_39;
LABEL_121:
      v28 = *(unsigned __int16 *)(v22 + 2 * v25);
      if ((v27 & 1) == 0)
        goto LABEL_40;
LABEL_122:
      v29 = *(unsigned __int16 *)(v24 + 2 * v25);
      goto LABEL_41;
    }
    v25 = 0;
    while (*(unsigned __int16 *)(v22 + 2 * v25) == *(unsigned __int16 *)(v24 + 2 * v25))
    {
      if (v20 == ++v25)
        goto LABEL_32;
    }
  }
  v27 = 1;
  if ((v21 & 4) == 0)
    goto LABEL_121;
LABEL_39:
  v28 = *(unsigned __int8 *)(v22 + v25);
  if ((v27 & 1) != 0)
    goto LABEL_122;
LABEL_40:
  v29 = *(unsigned __int8 *)(v24 + v25);
LABEL_41:
  v26 = v28 >= v29;
LABEL_42:
  v30 = !v26;
  if ((v17 & 1) == 0)
  {
    if (!v30)
      return result;
    v32 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v32;
    v33 = *a2;
    v34 = *result;
    v35 = *(_DWORD *)(*a2 + 4);
    v36 = *(_DWORD *)(*result + 4);
    if (v36 >= v35)
      v37 = v35;
    else
      v37 = v36;
    if (!(_DWORD)v37)
    {
LABEL_58:
      if (v35 >= v36)
        return result;
      goto LABEL_88;
    }
    v38 = *(_DWORD *)(v33 + 16);
    v39 = *(_QWORD *)(v33 + 8);
    v40 = *(_DWORD *)(v34 + 16);
    v41 = *(_QWORD *)(v34 + 8);
    if ((v38 & 4) != 0)
    {
      if ((v40 & 4) != 0)
      {
        v42 = 0;
        while (*(unsigned __int8 *)(v39 + v42) == *(unsigned __int8 *)(v41 + v42))
        {
          if (v37 == ++v42)
            goto LABEL_58;
        }
        goto LABEL_84;
      }
      v42 = 0;
      while (*(_WORD *)(v41 + 2 * v42) == *(unsigned __int8 *)(v39 + v42))
      {
        if (v37 == ++v42)
          goto LABEL_58;
      }
    }
    else
    {
      if ((v40 & 4) != 0)
      {
        v42 = 0;
        while (*(_WORD *)(v39 + 2 * v42) == *(unsigned __int8 *)(v41 + v42))
        {
          if (v37 == ++v42)
            goto LABEL_58;
        }
LABEL_84:
        v54 = 0;
        if ((v38 & 4) != 0)
          goto LABEL_85;
        goto LABEL_128;
      }
      v42 = 0;
      while (*(unsigned __int16 *)(v39 + 2 * v42) == *(unsigned __int16 *)(v41 + 2 * v42))
      {
        if (v37 == ++v42)
          goto LABEL_58;
      }
    }
    v54 = 1;
    if ((v38 & 4) != 0)
    {
LABEL_85:
      v55 = *(unsigned __int8 *)(v39 + v42);
      if ((v54 & 1) == 0)
      {
LABEL_86:
        v56 = *(unsigned __int8 *)(v41 + v42);
        goto LABEL_87;
      }
LABEL_129:
      v56 = *(unsigned __int16 *)(v41 + 2 * v42);
LABEL_87:
      if (v55 >= v56)
        return result;
LABEL_88:
      v57 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v57;
      return result;
    }
LABEL_128:
    v55 = *(unsigned __int16 *)(v39 + 2 * v42);
    if ((v54 & 1) == 0)
      goto LABEL_86;
    goto LABEL_129;
  }
  if (!v30)
  {
    v43 = *(_OWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v43;
    v44 = *a3;
    v45 = *a2;
    v46 = *(_DWORD *)(*a3 + 4);
    v47 = *(_DWORD *)(*a2 + 4);
    if (v47 >= v46)
      v48 = v46;
    else
      v48 = v47;
    if (!(_DWORD)v48)
    {
LABEL_69:
      if (v46 >= v47)
        return result;
LABEL_98:
      v31 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_99;
    }
    v49 = *(_DWORD *)(v44 + 16);
    v50 = *(_QWORD *)(v44 + 8);
    v51 = *(_DWORD *)(v45 + 16);
    v52 = *(_QWORD *)(v45 + 8);
    if ((v49 & 4) != 0)
    {
      if ((v51 & 4) != 0)
      {
        v53 = 0;
        while (*(unsigned __int8 *)(v50 + v53) == *(unsigned __int8 *)(v52 + v53))
        {
          if (v48 == ++v53)
            goto LABEL_69;
        }
        goto LABEL_94;
      }
      v53 = 0;
      while (*(_WORD *)(v52 + 2 * v53) == *(unsigned __int8 *)(v50 + v53))
      {
        if (v48 == ++v53)
          goto LABEL_69;
      }
    }
    else
    {
      if ((v51 & 4) != 0)
      {
        v53 = 0;
        while (*(_WORD *)(v50 + 2 * v53) == *(unsigned __int8 *)(v52 + v53))
        {
          if (v48 == ++v53)
            goto LABEL_69;
        }
LABEL_94:
        v58 = 0;
        if ((v49 & 4) != 0)
          goto LABEL_95;
        goto LABEL_135;
      }
      v53 = 0;
      while (*(unsigned __int16 *)(v50 + 2 * v53) == *(unsigned __int16 *)(v52 + 2 * v53))
      {
        if (v48 == ++v53)
          goto LABEL_69;
      }
    }
    v58 = 1;
    if ((v49 & 4) != 0)
    {
LABEL_95:
      v59 = *(unsigned __int8 *)(v50 + v53);
      if ((v58 & 1) == 0)
      {
LABEL_96:
        v60 = *(unsigned __int8 *)(v52 + v53);
        goto LABEL_97;
      }
LABEL_136:
      v60 = *(unsigned __int16 *)(v52 + 2 * v53);
LABEL_97:
      if (v59 >= v60)
        return result;
      goto LABEL_98;
    }
LABEL_135:
    v59 = *(unsigned __int16 *)(v50 + 2 * v53);
    if ((v58 & 1) == 0)
      goto LABEL_96;
    goto LABEL_136;
  }
  v31 = *(_OWORD *)result;
  *(_OWORD *)result = *(_OWORD *)a3;
LABEL_99:
  *(_OWORD *)a3 = v31;
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t *j;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v44;

  v4 = *(_OWORD *)a1;
  v5 = *(_QWORD *)(a2 - 16);
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 4);
  LODWORD(v8) = *(_DWORD *)(v5 + 4);
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    LODWORD(v3) = *(_DWORD *)(v6 + 16);
    v2 = *(_QWORD *)(v6 + 8);
    v10 = *(_DWORD *)(v5 + 16);
    j = *(unint64_t **)(v5 + 8);
    if ((v3 & 4) != 0)
    {
      if ((v10 & 4) == 0)
        goto LABEL_196;
      i = 0;
      while (*(unsigned __int8 *)(v2 + i) == *((unsigned __int8 *)j + i))
      {
        if (v9 == ++i)
          goto LABEL_10;
      }
      goto LABEL_50;
    }
    if ((v10 & 4) != 0)
    {
      i = 0;
      while (*(_WORD *)(v2 + 2 * i) == *((unsigned __int8 *)j + i))
      {
        if (v9 == ++i)
          goto LABEL_10;
      }
LABEL_50:
      LODWORD(v8) = 0;
      if ((v3 & 4) == 0)
        goto LABEL_205;
      goto LABEL_51;
    }
    for (i = 0; i != v9; ++i)
    {
      if (*(unsigned __int16 *)(v2 + 2 * i) != *((unsigned __int16 *)j + i))
        goto LABEL_204;
    }
  }
LABEL_10:
  if (v7 < v8)
  {
LABEL_54:
    for (j = (unint64_t *)(a1 + 2); ; j += 2)
    {
      if (j == (unint64_t *)a2)
        goto LABEL_195;
      v2 = *j;
      v9 = *(unsigned int *)(*j + 4);
      if (v9 >= v7)
        v20 = v7;
      else
        v20 = v9;
      if (!(_DWORD)v20)
      {
LABEL_65:
        if (v7 < v9)
          goto LABEL_88;
        continue;
      }
      v21 = *(_DWORD *)(v6 + 16);
      v3 = *(_QWORD *)(v6 + 8);
      v22 = *(_DWORD *)(v2 + 16);
      v2 = *(_QWORD *)(v2 + 8);
      if ((v21 & 4) != 0)
      {
        if ((v22 & 4) != 0)
        {
          v8 = 0;
          while (*(unsigned __int8 *)(v3 + v8) == *(unsigned __int8 *)(v2 + v8))
          {
            if (v20 == ++v8)
              goto LABEL_65;
          }
          goto LABEL_72;
        }
        v8 = 0;
        while (*(_WORD *)(v2 + 2 * v8) == *(unsigned __int8 *)(v3 + v8))
        {
          if (v20 == ++v8)
            goto LABEL_65;
        }
      }
      else
      {
        if ((v22 & 4) != 0)
        {
          v8 = 0;
          while (*(_WORD *)(v3 + 2 * v8) == *(unsigned __int8 *)(v2 + v8))
          {
            if (v20 == ++v8)
              goto LABEL_65;
          }
LABEL_72:
          v9 = 0;
          if ((v21 & 4) != 0)
            goto LABEL_73;
          goto LABEL_86;
        }
        v8 = 0;
        while (*(unsigned __int16 *)(v3 + 2 * v8) == *(unsigned __int16 *)(v2 + 2 * v8))
        {
          if (v20 == ++v8)
            goto LABEL_65;
        }
      }
      v9 = 1;
      if ((v21 & 4) != 0)
      {
LABEL_73:
        LODWORD(v3) = *(unsigned __int8 *)(v3 + v8);
        if ((v9 & 1) == 0)
          goto LABEL_74;
        goto LABEL_87;
      }
LABEL_86:
      LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * v8);
      if ((v9 & 1) == 0)
      {
LABEL_74:
        v2 = *(unsigned __int8 *)(v2 + v8);
        goto LABEL_75;
      }
LABEL_87:
      v2 = *(unsigned __int16 *)(v2 + 2 * v8);
LABEL_75:
      if (v3 < v2)
        goto LABEL_88;
    }
  }
LABEL_11:
  for (j = (unint64_t *)(a1 + 2); (unint64_t)j < a2; j += 2)
  {
    v13 = *j;
    v9 = *(unsigned int *)(*j + 4);
    if (v9 >= v7)
      v14 = v7;
    else
      v14 = v9;
    if (!(_DWORD)v14)
    {
LABEL_22:
      if (v7 < v9)
        break;
      continue;
    }
    v15 = *(_DWORD *)(v6 + 16);
    v3 = *(_QWORD *)(v6 + 8);
    v16 = *(_DWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 8);
    if ((v15 & 4) != 0)
    {
      if ((v16 & 4) != 0)
      {
        v8 = 0;
        while (*(unsigned __int8 *)(v3 + v8) == *(unsigned __int8 *)(v17 + v8))
        {
          if (v14 == ++v8)
            goto LABEL_22;
        }
        goto LABEL_29;
      }
      v8 = 0;
      while (*(_WORD *)(v17 + 2 * v8) == *(unsigned __int8 *)(v3 + v8))
      {
        if (v14 == ++v8)
          goto LABEL_22;
      }
    }
    else
    {
      if ((v16 & 4) != 0)
      {
        v8 = 0;
        while (*(_WORD *)(v3 + 2 * v8) == *(unsigned __int8 *)(v17 + v8))
        {
          if (v14 == ++v8)
            goto LABEL_22;
        }
LABEL_29:
        v9 = 0;
        if ((v15 & 4) != 0)
          goto LABEL_30;
        goto LABEL_43;
      }
      v8 = 0;
      while (*(unsigned __int16 *)(v3 + 2 * v8) == *(unsigned __int16 *)(v17 + 2 * v8))
      {
        if (v14 == ++v8)
          goto LABEL_22;
      }
    }
    v9 = 1;
    if ((v15 & 4) != 0)
    {
LABEL_30:
      LODWORD(v3) = *(unsigned __int8 *)(v3 + v8);
      if ((v9 & 1) == 0)
        goto LABEL_31;
      goto LABEL_44;
    }
LABEL_43:
    LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * v8);
    if ((v9 & 1) == 0)
    {
LABEL_31:
      v18 = *(unsigned __int8 *)(v17 + v8);
      goto LABEL_32;
    }
LABEL_44:
    v18 = *(unsigned __int16 *)(v17 + 2 * v8);
LABEL_32:
    if (v3 < v18)
      break;
  }
LABEL_88:
  v2 = a2;
  if ((unint64_t)j < a2)
  {
    if ((uint64_t *)a2 == a1)
      goto LABEL_195;
    v2 = a2;
    while (2)
    {
      v23 = *(_QWORD *)(v2 - 16);
      v2 -= 16;
      v3 = v23;
      v24 = *(_DWORD *)(v23 + 4);
      if (v24 >= v7)
        v25 = v7;
      else
        v25 = v24;
      if ((_DWORD)v25)
      {
        LODWORD(v8) = *(_DWORD *)(v6 + 16);
        v26 = *(_QWORD *)(v6 + 8);
        v27 = *(_DWORD *)(v3 + 16);
        v3 = *(_QWORD *)(v3 + 8);
        if ((v8 & 4) != 0)
        {
          if ((v27 & 4) != 0)
          {
            v9 = 0;
            while (*(unsigned __int8 *)(v26 + v9) == *(unsigned __int8 *)(v3 + v9))
            {
              if (v25 == ++v9)
                goto LABEL_100;
            }
            goto LABEL_107;
          }
          v9 = 0;
          while (*(_WORD *)(v3 + 2 * v9) == *(unsigned __int8 *)(v26 + v9))
          {
            if (v25 == ++v9)
              goto LABEL_100;
          }
LABEL_121:
          v28 = 1;
          if ((v8 & 4) == 0)
            goto LABEL_122;
LABEL_108:
          v29 = *(unsigned __int8 *)(v26 + v9);
          if ((v28 & 1) == 0)
            goto LABEL_109;
LABEL_123:
          LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * v9);
        }
        else
        {
          if ((v27 & 4) == 0)
          {
            v9 = 0;
            while (*(unsigned __int16 *)(v26 + 2 * v9) == *(unsigned __int16 *)(v3 + 2 * v9))
            {
              if (v25 == ++v9)
                goto LABEL_100;
            }
            goto LABEL_121;
          }
          v9 = 0;
          while (*(_WORD *)(v26 + 2 * v9) == *(unsigned __int8 *)(v3 + v9))
          {
            if (v25 == ++v9)
              goto LABEL_100;
          }
LABEL_107:
          v28 = 0;
          if ((v8 & 4) != 0)
            goto LABEL_108;
LABEL_122:
          v29 = *(unsigned __int16 *)(v26 + 2 * v9);
          if ((v28 & 1) != 0)
            goto LABEL_123;
LABEL_109:
          LODWORD(v3) = *(unsigned __int8 *)(v3 + v9);
        }
        if (v29 >= v3)
          break;
      }
      else
      {
LABEL_100:
        if (v7 >= v24)
          break;
      }
      if ((uint64_t *)v2 == a1)
        goto LABEL_195;
      continue;
    }
  }
LABEL_191:
  if ((unint64_t)j < v2)
  {
    v44 = *(_OWORD *)j;
    *(_OWORD *)j = *(_OWORD *)v2;
    j += 2;
    *(_OWORD *)v2 = v44;
    if (j == (unint64_t *)a2)
      goto LABEL_195;
    v7 = *(_DWORD *)(v6 + 4);
    while (1)
    {
      v3 = *j;
      v30 = *(_DWORD *)(*j + 4);
      if (v30 >= v7)
        v31 = v7;
      else
        v31 = v30;
      if ((_DWORD)v31)
      {
        LODWORD(v8) = *(_DWORD *)(v6 + 16);
        v32 = *(_QWORD *)(v6 + 8);
        v33 = *(_DWORD *)(v3 + 16);
        v3 = *(_QWORD *)(v3 + 8);
        if ((v8 & 4) != 0)
        {
          if ((v33 & 4) != 0)
          {
            v9 = 0;
            while (*(unsigned __int8 *)(v32 + v9) == *(unsigned __int8 *)(v3 + v9))
            {
              if (v31 == ++v9)
                goto LABEL_135;
            }
            goto LABEL_142;
          }
          v9 = 0;
          while (*(_WORD *)(v3 + 2 * v9) == *(unsigned __int8 *)(v32 + v9))
          {
            if (v31 == ++v9)
              goto LABEL_135;
          }
        }
        else
        {
          if ((v33 & 4) != 0)
          {
            v9 = 0;
            while (*(_WORD *)(v32 + 2 * v9) == *(unsigned __int8 *)(v3 + v9))
            {
              if (v31 == ++v9)
                goto LABEL_135;
            }
LABEL_142:
            v34 = 0;
            if ((v8 & 4) != 0)
              goto LABEL_143;
            goto LABEL_157;
          }
          v9 = 0;
          while (*(unsigned __int16 *)(v32 + 2 * v9) == *(unsigned __int16 *)(v3 + 2 * v9))
          {
            if (v31 == ++v9)
              goto LABEL_135;
          }
        }
        v34 = 1;
        if ((v8 & 4) != 0)
        {
LABEL_143:
          v35 = *(unsigned __int8 *)(v32 + v9);
          if ((v34 & 1) == 0)
          {
LABEL_144:
            LODWORD(v3) = *(unsigned __int8 *)(v3 + v9);
            goto LABEL_145;
          }
LABEL_158:
          LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * v9);
LABEL_145:
          if (v35 < v3)
            goto LABEL_180;
          goto LABEL_146;
        }
LABEL_157:
        v35 = *(unsigned __int16 *)(v32 + 2 * v9);
        if ((v34 & 1) == 0)
          goto LABEL_144;
        goto LABEL_158;
      }
LABEL_135:
      if (v7 < v30)
        break;
LABEL_146:
      j += 2;
      if (j == (unint64_t *)a2)
      {
LABEL_195:
        __break(1u);
LABEL_196:
        i = 0;
        while (*((_WORD *)j + i) == *(unsigned __int8 *)(v2 + i))
        {
          if (v9 == ++i)
            goto LABEL_10;
        }
LABEL_204:
        LODWORD(v8) = 1;
        if ((v3 & 4) != 0)
        {
LABEL_51:
          v2 = *(unsigned __int8 *)(v2 + i);
          if ((v8 & 1) != 0)
          {
LABEL_206:
            v19 = *((unsigned __int16 *)j + i);
LABEL_53:
            if (v2 < v19)
              goto LABEL_54;
            goto LABEL_11;
          }
        }
        else
        {
LABEL_205:
          v2 = *(unsigned __int16 *)(v2 + 2 * i);
          if ((v8 & 1) != 0)
            goto LABEL_206;
        }
        v19 = *((unsigned __int8 *)j + i);
        goto LABEL_53;
      }
    }
    while (1)
    {
      while (1)
      {
LABEL_180:
        if ((uint64_t *)v2 == a1)
          goto LABEL_195;
        v38 = *(_QWORD *)(v2 - 16);
        v2 -= 16;
        v3 = v38;
        v39 = *(_DWORD *)(v38 + 4);
        v40 = v39 >= v7 ? v7 : v39;
        if ((_DWORD)v40)
          break;
LABEL_190:
        if (v7 >= v39)
          goto LABEL_191;
      }
      LODWORD(v8) = *(_DWORD *)(v6 + 16);
      v41 = *(_QWORD *)(v6 + 8);
      v42 = *(_DWORD *)(v3 + 16);
      v3 = *(_QWORD *)(v3 + 8);
      if ((v8 & 4) != 0)
      {
        if ((v42 & 4) != 0)
        {
          v9 = 0;
          while (*(unsigned __int8 *)(v41 + v9) == *(unsigned __int8 *)(v3 + v9))
          {
            if (v40 == ++v9)
              goto LABEL_190;
          }
          goto LABEL_164;
        }
        v9 = 0;
        while (*(_WORD *)(v3 + 2 * v9) == *(unsigned __int8 *)(v41 + v9))
        {
          if (v40 == ++v9)
            goto LABEL_190;
        }
      }
      else
      {
        if ((v42 & 4) != 0)
        {
          v9 = 0;
          while (*(_WORD *)(v41 + 2 * v9) == *(unsigned __int8 *)(v3 + v9))
          {
            if (v40 == ++v9)
              goto LABEL_190;
          }
LABEL_164:
          v36 = 0;
          if ((v8 & 4) != 0)
            goto LABEL_165;
          goto LABEL_178;
        }
        v9 = 0;
        while (*(unsigned __int16 *)(v41 + 2 * v9) == *(unsigned __int16 *)(v3 + 2 * v9))
        {
          if (v40 == ++v9)
            goto LABEL_190;
        }
      }
      v36 = 1;
      if ((v8 & 4) != 0)
      {
LABEL_165:
        v37 = *(unsigned __int8 *)(v41 + v9);
        if ((v36 & 1) != 0)
          goto LABEL_179;
        goto LABEL_166;
      }
LABEL_178:
      v37 = *(unsigned __int16 *)(v41 + 2 * v9);
      if ((v36 & 1) != 0)
      {
LABEL_179:
        LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * v9);
        goto LABEL_167;
      }
LABEL_166:
      LODWORD(v3) = *(unsigned __int8 *)(v3 + v9);
LABEL_167:
      if (v37 >= v3)
        goto LABEL_191;
    }
  }
  if (j - 2 != (unint64_t *)a1)
    *(_OWORD *)a1 = *((_OWORD *)j - 1);
  *((_OWORD *)j - 1) = v4;
  return j;
}

_OWORD *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::SpeculativeJIT::StringSwitchCase *,std::__less<void,void> &>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v2;
  __int128 v3;
  unsigned int v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v45;
  _OWORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;

  v2 = result + 1;
  v3 = *result;
  if (result + 1 == a2)
    goto LABEL_183;
  v4 = *(_DWORD *)(v3 + 4);
  v5 = result;
  while (1)
  {
    v6 = v2;
    v7 = *((_QWORD *)v5 + 2);
    v8 = *(_DWORD *)(v7 + 4);
    if (v4 >= v8)
      v9 = v8;
    else
      v9 = v4;
    if (!(_DWORD)v9)
    {
LABEL_12:
      if (v8 >= v4)
        break;
      goto LABEL_23;
    }
    v10 = *(_DWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 8);
    v12 = *(_DWORD *)(v3 + 16);
    v13 = *(_QWORD *)(v3 + 8);
    if ((v10 & 4) != 0)
    {
      if ((v12 & 4) != 0)
      {
        v14 = 0;
        while (*(unsigned __int8 *)(v11 + v14) == *(unsigned __int8 *)(v13 + v14))
        {
          if (v9 == ++v14)
            goto LABEL_12;
        }
        goto LABEL_19;
      }
      v14 = 0;
      while (*(_WORD *)(v13 + 2 * v14) == *(unsigned __int8 *)(v11 + v14))
      {
        if (v9 == ++v14)
          goto LABEL_12;
      }
    }
    else
    {
      if ((v12 & 4) != 0)
      {
        v14 = 0;
        while (*(_WORD *)(v11 + 2 * v14) == *(unsigned __int8 *)(v13 + v14))
        {
          if (v9 == ++v14)
            goto LABEL_12;
        }
LABEL_19:
        v15 = 0;
        if ((v10 & 4) != 0)
          goto LABEL_20;
        goto LABEL_34;
      }
      v14 = 0;
      while (*(unsigned __int16 *)(v11 + 2 * v14) == *(unsigned __int16 *)(v13 + 2 * v14))
      {
        if (v9 == ++v14)
          goto LABEL_12;
      }
    }
    v15 = 1;
    if ((v10 & 4) != 0)
    {
LABEL_20:
      v16 = *(unsigned __int8 *)(v11 + v14);
      if ((v15 & 1) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
LABEL_34:
    v16 = *(unsigned __int16 *)(v11 + 2 * v14);
    if ((v15 & 1) == 0)
    {
LABEL_21:
      v17 = *(unsigned __int8 *)(v13 + v14);
      goto LABEL_22;
    }
LABEL_35:
    v17 = *(unsigned __int16 *)(v13 + 2 * v14);
LABEL_22:
    if (v16 >= v17)
      break;
LABEL_23:
    v2 = v6 + 1;
    v5 = v6;
    if (v6 + 1 == a2)
      goto LABEL_183;
  }
  if (v5 == result)
  {
    v18 = a2;
    if (v6 < a2)
    {
      v18 = a2;
      while (1)
      {
        v32 = *((_QWORD *)v18-- - 2);
        v31 = v32;
        v33 = *(_DWORD *)(v32 + 4);
        v34 = v4 >= v33 ? v33 : v4;
        if ((_DWORD)v34)
          break;
LABEL_83:
        v40 = v33 >= v4;
LABEL_93:
        if (!v40 || v6 >= v18)
          goto LABEL_110;
      }
      v35 = *(_DWORD *)(v31 + 16);
      v36 = *(_QWORD *)(v31 + 8);
      v37 = *(_DWORD *)(v3 + 16);
      v38 = *(_QWORD *)(v3 + 8);
      if ((v35 & 4) != 0)
      {
        if ((v37 & 4) != 0)
        {
          v39 = 0;
          while (*(unsigned __int8 *)(v36 + v39) == *(unsigned __int8 *)(v38 + v39))
          {
            if (v34 == ++v39)
              goto LABEL_83;
          }
          goto LABEL_89;
        }
        v39 = 0;
        while (*(_WORD *)(v38 + 2 * v39) == *(unsigned __int8 *)(v36 + v39))
        {
          if (v34 == ++v39)
            goto LABEL_83;
        }
      }
      else
      {
        if ((v37 & 4) != 0)
        {
          v39 = 0;
          while (*(_WORD *)(v36 + 2 * v39) == *(unsigned __int8 *)(v38 + v39))
          {
            if (v34 == ++v39)
              goto LABEL_83;
          }
LABEL_89:
          v41 = 0;
          if ((v35 & 4) != 0)
            goto LABEL_90;
          goto LABEL_108;
        }
        v39 = 0;
        while (*(unsigned __int16 *)(v36 + 2 * v39) == *(unsigned __int16 *)(v38 + 2 * v39))
        {
          if (v34 == ++v39)
            goto LABEL_83;
        }
      }
      v41 = 1;
      if ((v35 & 4) != 0)
      {
LABEL_90:
        v42 = *(unsigned __int8 *)(v36 + v39);
        if ((v41 & 1) == 0)
        {
LABEL_91:
          v43 = *(unsigned __int8 *)(v38 + v39);
LABEL_92:
          v40 = v42 >= v43;
          goto LABEL_93;
        }
LABEL_109:
        v43 = *(unsigned __int16 *)(v38 + 2 * v39);
        goto LABEL_92;
      }
LABEL_108:
      v42 = *(unsigned __int16 *)(v36 + 2 * v39);
      if ((v41 & 1) == 0)
        goto LABEL_91;
      goto LABEL_109;
    }
LABEL_110:
    v45 = (unint64_t)v6;
    if (v6 >= v18)
    {
LABEL_180:
      v71 = (_OWORD *)(v45 - 16);
      if ((_OWORD *)(v45 - 16) != result)
        *result = *v71;
      *v71 = v3;
      return (_OWORD *)(v45 - 16);
    }
    v45 = (unint64_t)v6;
    v46 = v18;
LABEL_112:
    v72 = *(_OWORD *)v45;
    *(_OWORD *)v45 = *v46;
    v45 += 16;
    *v46 = v72;
    if ((_OWORD *)v45 == a2)
      goto LABEL_183;
    v47 = *(_DWORD *)(v3 + 4);
    while (1)
    {
      v48 = *(_QWORD *)v45;
      v49 = *(_DWORD *)(*(_QWORD *)v45 + 4);
      if (v47 >= v49)
        v50 = v49;
      else
        v50 = v47;
      if ((_DWORD)v50)
      {
        v51 = *(_DWORD *)(v48 + 16);
        v52 = *(_QWORD *)(v48 + 8);
        v53 = *(_DWORD *)(v3 + 16);
        v54 = *(_QWORD *)(v3 + 8);
        if ((v51 & 4) != 0)
        {
          if ((v53 & 4) != 0)
          {
            v55 = 0;
            while (*(unsigned __int8 *)(v52 + v55) == *(unsigned __int8 *)(v54 + v55))
            {
              if (v50 == ++v55)
                goto LABEL_123;
            }
            goto LABEL_130;
          }
          v55 = 0;
          while (*(_WORD *)(v54 + 2 * v55) == *(unsigned __int8 *)(v52 + v55))
          {
            if (v50 == ++v55)
              goto LABEL_123;
          }
        }
        else
        {
          if ((v53 & 4) != 0)
          {
            v55 = 0;
            while (*(_WORD *)(v52 + 2 * v55) == *(unsigned __int8 *)(v54 + v55))
            {
              if (v50 == ++v55)
                goto LABEL_123;
            }
LABEL_130:
            v56 = 0;
            if ((v51 & 4) != 0)
              goto LABEL_131;
            goto LABEL_145;
          }
          v55 = 0;
          while (*(unsigned __int16 *)(v52 + 2 * v55) == *(unsigned __int16 *)(v54 + 2 * v55))
          {
            if (v50 == ++v55)
              goto LABEL_123;
          }
        }
        v56 = 1;
        if ((v51 & 4) != 0)
        {
LABEL_131:
          v57 = *(unsigned __int8 *)(v52 + v55);
          if ((v56 & 1) == 0)
          {
LABEL_132:
            v58 = *(unsigned __int8 *)(v54 + v55);
            goto LABEL_133;
          }
LABEL_146:
          v58 = *(unsigned __int16 *)(v54 + 2 * v55);
LABEL_133:
          if (v57 >= v58)
            goto LABEL_168;
          goto LABEL_134;
        }
LABEL_145:
        v57 = *(unsigned __int16 *)(v52 + 2 * v55);
        if ((v56 & 1) == 0)
          goto LABEL_132;
        goto LABEL_146;
      }
LABEL_123:
      if (v49 >= v47)
        break;
LABEL_134:
      v45 += 16;
      if ((_OWORD *)v45 == a2)
        goto LABEL_183;
    }
    while (1)
    {
      while (1)
      {
LABEL_168:
        if (v46 == result)
          goto LABEL_183;
        v64 = *((_QWORD *)v46-- - 2);
        v63 = v64;
        v65 = *(_DWORD *)(v64 + 4);
        v66 = v47 >= v65 ? v65 : v47;
        if ((_DWORD)v66)
          break;
LABEL_178:
        if (v65 < v47)
        {
LABEL_179:
          if (v45 < (unint64_t)v46)
            goto LABEL_112;
          goto LABEL_180;
        }
      }
      v67 = *(_DWORD *)(v63 + 16);
      v68 = *(_QWORD *)(v63 + 8);
      v69 = *(_DWORD *)(v3 + 16);
      v70 = *(_QWORD *)(v3 + 8);
      if ((v67 & 4) != 0)
      {
        if ((v69 & 4) != 0)
        {
          v59 = 0;
          while (*(unsigned __int8 *)(v68 + v59) == *(unsigned __int8 *)(v70 + v59))
          {
            if (v66 == ++v59)
              goto LABEL_178;
          }
          goto LABEL_152;
        }
        v59 = 0;
        while (*(_WORD *)(v70 + 2 * v59) == *(unsigned __int8 *)(v68 + v59))
        {
          if (v66 == ++v59)
            goto LABEL_178;
        }
      }
      else
      {
        if ((v69 & 4) != 0)
        {
          v59 = 0;
          while (*(_WORD *)(v68 + 2 * v59) == *(unsigned __int8 *)(v70 + v59))
          {
            if (v66 == ++v59)
              goto LABEL_178;
          }
LABEL_152:
          v60 = 0;
          if ((v67 & 4) != 0)
            goto LABEL_153;
          goto LABEL_166;
        }
        v59 = 0;
        while (*(unsigned __int16 *)(v68 + 2 * v59) == *(unsigned __int16 *)(v70 + 2 * v59))
        {
          if (v66 == ++v59)
            goto LABEL_178;
        }
      }
      v60 = 1;
      if ((v67 & 4) != 0)
      {
LABEL_153:
        v61 = *(unsigned __int8 *)(v68 + v59);
        if ((v60 & 1) != 0)
          goto LABEL_167;
        goto LABEL_154;
      }
LABEL_166:
      v61 = *(unsigned __int16 *)(v68 + 2 * v59);
      if ((v60 & 1) != 0)
      {
LABEL_167:
        v62 = *(unsigned __int16 *)(v70 + 2 * v59);
        goto LABEL_155;
      }
LABEL_154:
      v62 = *(unsigned __int8 *)(v70 + v59);
LABEL_155:
      if (v61 < v62)
        goto LABEL_179;
    }
  }
  if (a2 != result)
  {
    v18 = a2;
    while (1)
    {
      v20 = *((_QWORD *)v18-- - 2);
      v19 = v20;
      v21 = *(_DWORD *)(v20 + 4);
      v22 = v4 >= v21 ? v21 : v4;
      if ((_DWORD)v22)
        break;
LABEL_48:
      if (v21 < v4)
        goto LABEL_110;
LABEL_59:
      if (v18 == result)
        goto LABEL_183;
    }
    v23 = *(_DWORD *)(v19 + 16);
    v24 = *(_QWORD *)(v19 + 8);
    v25 = *(_DWORD *)(v3 + 16);
    v26 = *(_QWORD *)(v3 + 8);
    if ((v23 & 4) != 0)
    {
      if ((v25 & 4) != 0)
      {
        v27 = 0;
        while (*(unsigned __int8 *)(v24 + v27) == *(unsigned __int8 *)(v26 + v27))
        {
          if (v22 == ++v27)
            goto LABEL_48;
        }
        goto LABEL_55;
      }
      v27 = 0;
      while (*(_WORD *)(v26 + 2 * v27) == *(unsigned __int8 *)(v24 + v27))
      {
        if (v22 == ++v27)
          goto LABEL_48;
      }
LABEL_69:
      v28 = 1;
      if ((v23 & 4) == 0)
        goto LABEL_70;
LABEL_56:
      v29 = *(unsigned __int8 *)(v24 + v27);
      if ((v28 & 1) == 0)
        goto LABEL_57;
LABEL_71:
      v30 = *(unsigned __int16 *)(v26 + 2 * v27);
    }
    else
    {
      if ((v25 & 4) == 0)
      {
        v27 = 0;
        while (*(unsigned __int16 *)(v24 + 2 * v27) == *(unsigned __int16 *)(v26 + 2 * v27))
        {
          if (v22 == ++v27)
            goto LABEL_48;
        }
        goto LABEL_69;
      }
      v27 = 0;
      while (*(_WORD *)(v24 + 2 * v27) == *(unsigned __int8 *)(v26 + v27))
      {
        if (v22 == ++v27)
          goto LABEL_48;
      }
LABEL_55:
      v28 = 0;
      if ((v23 & 4) != 0)
        goto LABEL_56;
LABEL_70:
      v29 = *(unsigned __int16 *)(v24 + 2 * v27);
      if ((v28 & 1) != 0)
        goto LABEL_71;
LABEL_57:
      v30 = *(unsigned __int8 *)(v26 + v27);
    }
    if (v29 < v30)
      goto LABEL_110;
    goto LABEL_59;
  }
LABEL_183:
  __break(1u);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t j;
  char v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  __int128 v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  __int128 v98;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 2;
      v6 = *(a2 - 2);
      v8 = *a1;
      v9 = *(_DWORD *)(v6 + 4);
      v10 = *(_DWORD *)(*a1 + 4);
      if (v10 >= v9)
        v11 = v9;
      else
        v11 = v10;
      if (!(_DWORD)v11)
        goto LABEL_11;
      v12 = *(_DWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 8);
      v14 = *(_DWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 8);
      if ((v12 & 4) != 0)
      {
        if ((v14 & 4) == 0)
        {
          i = 0;
          while (*(_WORD *)(v15 + 2 * i) == *(unsigned __int8 *)(v13 + i))
          {
            if (v11 == ++i)
              goto LABEL_11;
          }
LABEL_180:
          v63 = 1;
          if ((v12 & 4) != 0)
          {
LABEL_105:
            v64 = *(unsigned __int8 *)(v13 + i);
            if ((v63 & 1) == 0)
            {
LABEL_106:
              v65 = *(unsigned __int8 *)(v15 + i);
              goto LABEL_107;
            }
LABEL_182:
            v65 = *(unsigned __int16 *)(v15 + 2 * i);
LABEL_107:
            if (v64 >= v65)
              return 1;
            goto LABEL_108;
          }
LABEL_181:
          v64 = *(unsigned __int16 *)(v13 + 2 * i);
          if ((v63 & 1) == 0)
            goto LABEL_106;
          goto LABEL_182;
        }
        i = 0;
        while (*(unsigned __int8 *)(v13 + i) == *(unsigned __int8 *)(v15 + i))
        {
          if (v11 == ++i)
            goto LABEL_11;
        }
      }
      else
      {
        if ((v14 & 4) == 0)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(unsigned __int16 *)(v13 + 2 * i) != *(unsigned __int16 *)(v15 + 2 * i))
              goto LABEL_180;
          }
LABEL_11:
          if (v9 >= v10)
            return 1;
LABEL_108:
          v66 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v7;
          *(_OWORD *)v7 = v66;
          return 1;
        }
        i = 0;
        while (*(_WORD *)(v13 + 2 * i) == *(unsigned __int8 *)(v15 + i))
        {
          if (v11 == ++i)
            goto LABEL_11;
        }
      }
      v63 = 0;
      if ((v12 & 4) != 0)
        goto LABEL_105;
      goto LABEL_181;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      v49 = a1 + 2;
      v50 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4);
      v53 = *(a2 - 2);
      v52 = a2 - 2;
      v51 = v53;
      v54 = a1[4];
      v55 = *(_DWORD *)(v53 + 4);
      v56 = *(_DWORD *)(v54 + 4);
      if (v56 >= v55)
        v57 = v55;
      else
        v57 = v56;
      if (!(_DWORD)v57)
        goto LABEL_95;
      v58 = *(_DWORD *)(v51 + 16);
      v59 = *(_QWORD *)(v51 + 8);
      v60 = *(_DWORD *)(v54 + 16);
      v61 = *(_QWORD *)(v54 + 8);
      if ((v58 & 4) != 0)
      {
        if ((v60 & 4) != 0)
        {
          v62 = 0;
          while (*(unsigned __int8 *)(v59 + v62) == *(unsigned __int8 *)(v61 + v62))
          {
            if (v57 == ++v62)
              goto LABEL_95;
          }
          goto LABEL_114;
        }
        v62 = 0;
        while (*(_WORD *)(v61 + 2 * v62) == *(unsigned __int8 *)(v59 + v62))
        {
          if (v57 == ++v62)
            goto LABEL_95;
        }
      }
      else
      {
        if ((v60 & 4) != 0)
        {
          v62 = 0;
          while (*(_WORD *)(v59 + 2 * v62) == *(unsigned __int8 *)(v61 + v62))
          {
            if (v57 == ++v62)
              goto LABEL_95;
          }
LABEL_114:
          v67 = 0;
          if ((v58 & 4) != 0)
            goto LABEL_115;
          goto LABEL_188;
        }
        v62 = 0;
        while (*(unsigned __int16 *)(v59 + 2 * v62) == *(unsigned __int16 *)(v61 + 2 * v62))
        {
          if (v57 == ++v62)
          {
LABEL_95:
            if (v55 >= v56)
              return 1;
            goto LABEL_118;
          }
        }
      }
      v67 = 1;
      if ((v58 & 4) != 0)
      {
LABEL_115:
        v68 = *(unsigned __int8 *)(v59 + v62);
        if ((v67 & 1) == 0)
        {
LABEL_116:
          v69 = *(unsigned __int8 *)(v61 + v62);
          goto LABEL_117;
        }
LABEL_189:
        v69 = *(unsigned __int16 *)(v61 + 2 * v62);
LABEL_117:
        if (v68 >= v69)
          return 1;
LABEL_118:
        v70 = *(_OWORD *)v50;
        *(_OWORD *)v50 = *(_OWORD *)v52;
        *(_OWORD *)v52 = v70;
        v71 = *v50;
        v72 = *v49;
        v73 = *(_DWORD *)(*v50 + 4);
        v74 = *(_DWORD *)(*v49 + 4);
        if (v74 >= v73)
          v75 = v73;
        else
          v75 = v74;
        if (!(_DWORD)v75)
        {
LABEL_127:
          if (v73 >= v74)
            return 1;
          goto LABEL_146;
        }
        v76 = *(_DWORD *)(v71 + 16);
        v77 = *(_QWORD *)(v71 + 8);
        v78 = *(_DWORD *)(v72 + 16);
        v79 = *(_QWORD *)(v72 + 8);
        if ((v76 & 4) != 0)
        {
          if ((v78 & 4) != 0)
          {
            v80 = 0;
            while (*(unsigned __int8 *)(v77 + v80) == *(unsigned __int8 *)(v79 + v80))
            {
              if (v75 == ++v80)
                goto LABEL_127;
            }
            goto LABEL_142;
          }
          v80 = 0;
          while (*(_WORD *)(v79 + 2 * v80) == *(unsigned __int8 *)(v77 + v80))
          {
            if (v75 == ++v80)
              goto LABEL_127;
          }
        }
        else
        {
          if ((v78 & 4) != 0)
          {
            v80 = 0;
            while (*(_WORD *)(v77 + 2 * v80) == *(unsigned __int8 *)(v79 + v80))
            {
              if (v75 == ++v80)
                goto LABEL_127;
            }
LABEL_142:
            v81 = 0;
            if ((v76 & 4) != 0)
              goto LABEL_143;
            goto LABEL_195;
          }
          v80 = 0;
          while (*(unsigned __int16 *)(v77 + 2 * v80) == *(unsigned __int16 *)(v79 + 2 * v80))
          {
            if (v75 == ++v80)
              goto LABEL_127;
          }
        }
        v81 = 1;
        if ((v76 & 4) != 0)
        {
LABEL_143:
          v82 = *(unsigned __int8 *)(v77 + v80);
          if ((v81 & 1) == 0)
          {
LABEL_144:
            v83 = *(unsigned __int8 *)(v79 + v80);
            goto LABEL_145;
          }
LABEL_196:
          v83 = *(unsigned __int16 *)(v79 + 2 * v80);
LABEL_145:
          if (v82 >= v83)
            return 1;
LABEL_146:
          v84 = *(_OWORD *)v49;
          *(_OWORD *)v49 = *(_OWORD *)v50;
          *(_OWORD *)v50 = v84;
          v85 = a1[2];
          v86 = *a1;
          v87 = *(_DWORD *)(v85 + 4);
          v88 = *(_DWORD *)(*a1 + 4);
          if (v88 >= v87)
            v89 = v87;
          else
            v89 = v88;
          if ((_DWORD)v89)
          {
            v90 = *(_DWORD *)(v85 + 16);
            v91 = *(_QWORD *)(v85 + 8);
            v92 = *(_DWORD *)(v86 + 16);
            v93 = *(_QWORD *)(v86 + 8);
            if ((v90 & 4) != 0)
            {
              if ((v92 & 4) != 0)
              {
                v94 = 0;
                while (*(unsigned __int8 *)(v91 + v94) == *(unsigned __int8 *)(v93 + v94))
                {
                  if (v89 == ++v94)
                    goto LABEL_155;
                }
                goto LABEL_166;
              }
              v94 = 0;
              while (*(_WORD *)(v93 + 2 * v94) == *(unsigned __int8 *)(v91 + v94))
              {
                if (v89 == ++v94)
                  goto LABEL_155;
              }
            }
            else
            {
              if ((v92 & 4) != 0)
              {
                v94 = 0;
                while (*(_WORD *)(v91 + 2 * v94) == *(unsigned __int8 *)(v93 + v94))
                {
                  if (v89 == ++v94)
                    goto LABEL_155;
                }
LABEL_166:
                v95 = 0;
                if ((v90 & 4) != 0)
                  goto LABEL_167;
                goto LABEL_202;
              }
              v94 = 0;
              while (*(unsigned __int16 *)(v91 + 2 * v94) == *(unsigned __int16 *)(v93 + 2 * v94))
              {
                if (v89 == ++v94)
                  goto LABEL_155;
              }
            }
            v95 = 1;
            if ((v90 & 4) != 0)
            {
LABEL_167:
              v96 = *(unsigned __int8 *)(v91 + v94);
              if ((v95 & 1) == 0)
              {
LABEL_168:
                v97 = *(unsigned __int8 *)(v93 + v94);
                goto LABEL_169;
              }
LABEL_203:
              v97 = *(unsigned __int16 *)(v93 + 2 * v94);
LABEL_169:
              if (v96 >= v97)
                return 1;
              goto LABEL_170;
            }
LABEL_202:
            v96 = *(unsigned __int16 *)(v91 + 2 * v94);
            if ((v95 & 1) == 0)
              goto LABEL_168;
            goto LABEL_203;
          }
LABEL_155:
          if (v87 < v88)
          {
LABEL_170:
            v98 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v49;
            *(_OWORD *)v49 = v98;
          }
          return 1;
        }
LABEL_195:
        v82 = *(unsigned __int16 *)(v77 + 2 * v80);
        if ((v81 & 1) == 0)
          goto LABEL_144;
        goto LABEL_196;
      }
LABEL_188:
      v68 = *(unsigned __int16 *)(v59 + 2 * v62);
      if ((v67 & 1) == 0)
        goto LABEL_116;
      goto LABEL_189;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v17 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4);
      v18 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v19 = 0;
LABEL_15:
      v20 = *v18;
      v21 = *v17;
      v22 = *(_DWORD *)(*v18 + 4);
      v23 = *(_DWORD *)(*v17 + 4);
      if (v23 >= v22)
        v24 = v22;
      else
        v24 = v23;
      if (!(_DWORD)v24)
        goto LABEL_24;
      v25 = *(_DWORD *)(v20 + 16);
      v26 = *(_QWORD *)(v20 + 8);
      v27 = *(_DWORD *)(v21 + 16);
      v28 = *(_QWORD *)(v21 + 8);
      if ((v25 & 4) != 0)
      {
        if ((v27 & 4) == 0)
        {
          j = 0;
          while (*(_WORD *)(v28 + 2 * j) == *(unsigned __int8 *)(v26 + j))
          {
            if (v24 == ++j)
              goto LABEL_24;
          }
LABEL_82:
          v30 = 1;
          if ((v25 & 4) != 0)
          {
LABEL_32:
            v31 = *(unsigned __int8 *)(v26 + j);
            if ((v30 & 1) == 0)
            {
LABEL_33:
              v32 = *(unsigned __int8 *)(v28 + j);
              goto LABEL_34;
            }
LABEL_84:
            v32 = *(unsigned __int16 *)(v28 + 2 * j);
LABEL_34:
            if (v31 >= v32)
              goto LABEL_72;
            goto LABEL_35;
          }
LABEL_83:
          v31 = *(unsigned __int16 *)(v26 + 2 * j);
          if ((v30 & 1) == 0)
            goto LABEL_33;
          goto LABEL_84;
        }
        j = 0;
        while (*(unsigned __int8 *)(v26 + j) == *(unsigned __int8 *)(v28 + j))
        {
          if (v24 == ++j)
            goto LABEL_24;
        }
LABEL_31:
        v30 = 0;
        if ((v25 & 4) != 0)
          goto LABEL_32;
        goto LABEL_83;
      }
      if ((v27 & 4) != 0)
      {
        j = 0;
        while (*(_WORD *)(v26 + 2 * j) == *(unsigned __int8 *)(v28 + j))
        {
          if (v24 == ++j)
            goto LABEL_24;
        }
        goto LABEL_31;
      }
      for (j = 0; j != v24; ++j)
      {
        if (*(unsigned __int16 *)(v26 + 2 * j) != *(unsigned __int16 *)(v28 + 2 * j))
          goto LABEL_82;
      }
LABEL_24:
      if (v22 >= v23)
        goto LABEL_72;
LABEL_35:
      v33 = v18[1];
      *(_OWORD *)v18 = *(_OWORD *)v17;
      v34 = a1;
      if (v17 == a1)
        goto LABEL_71;
      v35 = v17;
      break;
  }
  while (1)
  {
    v37 = *(v35 - 2);
    v35 -= 2;
    v36 = v37;
    v38 = *(_DWORD *)(v20 + 4);
    v39 = *(_DWORD *)(v37 + 4);
    v40 = v39 >= v38 ? v38 : v39;
    if ((_DWORD)v40)
      break;
LABEL_46:
    if (v38 >= v39)
      goto LABEL_70;
LABEL_57:
    *(_OWORD *)v17 = *(_OWORD *)v35;
    v17 = v35;
    if (v35 == a1)
    {
      v34 = a1;
      goto LABEL_71;
    }
  }
  v41 = *(_DWORD *)(v20 + 16);
  v42 = *(_QWORD *)(v20 + 8);
  v43 = *(_DWORD *)(v36 + 16);
  v44 = *(_QWORD *)(v36 + 8);
  if ((v41 & 4) != 0)
  {
    if ((v43 & 4) != 0)
    {
      v45 = 0;
      while (*(unsigned __int8 *)(v42 + v45) == *(unsigned __int8 *)(v44 + v45))
      {
        if (v40 == ++v45)
          goto LABEL_46;
      }
      goto LABEL_53;
    }
    v45 = 0;
    while (*(_WORD *)(v44 + 2 * v45) == *(unsigned __int8 *)(v42 + v45))
    {
      if (v40 == ++v45)
        goto LABEL_46;
    }
  }
  else
  {
    if ((v43 & 4) != 0)
    {
      v45 = 0;
      while (*(_WORD *)(v42 + 2 * v45) == *(unsigned __int8 *)(v44 + v45))
      {
        if (v40 == ++v45)
          goto LABEL_46;
      }
LABEL_53:
      v46 = 0;
      if ((v41 & 4) != 0)
        goto LABEL_54;
LABEL_68:
      v47 = *(unsigned __int16 *)(v42 + 2 * v45);
      if ((v46 & 1) == 0)
        goto LABEL_55;
      goto LABEL_69;
    }
    v45 = 0;
    while (*(unsigned __int16 *)(v42 + 2 * v45) == *(unsigned __int16 *)(v44 + 2 * v45))
    {
      if (v40 == ++v45)
        goto LABEL_46;
    }
  }
  v46 = 1;
  if ((v41 & 4) == 0)
    goto LABEL_68;
LABEL_54:
  v47 = *(unsigned __int8 *)(v42 + v45);
  if ((v46 & 1) == 0)
  {
LABEL_55:
    v48 = *(unsigned __int8 *)(v44 + v45);
    goto LABEL_56;
  }
LABEL_69:
  v48 = *(unsigned __int16 *)(v44 + 2 * v45);
LABEL_56:
  if (v47 < v48)
    goto LABEL_57;
LABEL_70:
  v34 = v17;
LABEL_71:
  *v34 = v20;
  v34[1] = v33;
  if (++v19 != 8)
  {
LABEL_72:
    v17 = v18;
    v18 += 2;
    if (v18 == a2)
      return 1;
    goto LABEL_15;
  }
  return v18 + 2 == a2;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unsigned int v101;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  v13 = *(_DWORD *)(*a4 + 4);
  v14 = *(_DWORD *)(*a3 + 4);
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if ((_DWORD)v15)
  {
    v16 = *(_DWORD *)(v11 + 16);
    v17 = *(_QWORD *)(v11 + 8);
    v18 = *(_DWORD *)(v12 + 16);
    v19 = *(_QWORD *)(v12 + 8);
    if ((v16 & 4) != 0)
    {
      if ((v18 & 4) != 0)
      {
        v20 = 0;
        while (*(unsigned __int8 *)(v17 + v20) == *(unsigned __int8 *)(v19 + v20))
        {
          if (v15 == ++v20)
            goto LABEL_10;
        }
        goto LABEL_17;
      }
      v20 = 0;
      while (*(_WORD *)(v19 + 2 * v20) == *(unsigned __int8 *)(v17 + v20))
      {
        if (v15 == ++v20)
          goto LABEL_10;
      }
    }
    else
    {
      if ((v18 & 4) != 0)
      {
        v20 = 0;
        while (*(_WORD *)(v17 + 2 * v20) == *(unsigned __int8 *)(v19 + v20))
        {
          if (v15 == ++v20)
            goto LABEL_10;
        }
LABEL_17:
        v21 = 0;
        if ((v16 & 4) != 0)
          goto LABEL_18;
        goto LABEL_177;
      }
      v20 = 0;
      while (*(unsigned __int16 *)(v17 + 2 * v20) == *(unsigned __int16 *)(v19 + 2 * v20))
      {
        if (v15 == ++v20)
          goto LABEL_10;
      }
    }
    v21 = 1;
    if ((v16 & 4) != 0)
    {
LABEL_18:
      v22 = *(unsigned __int8 *)(v17 + v20);
      if ((v21 & 1) == 0)
      {
LABEL_19:
        v23 = *(unsigned __int8 *)(v19 + v20);
        goto LABEL_20;
      }
LABEL_178:
      v23 = *(unsigned __int16 *)(v19 + 2 * v20);
LABEL_20:
      if (v22 >= v23)
        goto LABEL_70;
      goto LABEL_21;
    }
LABEL_177:
    v22 = *(unsigned __int16 *)(v17 + 2 * v20);
    if ((v21 & 1) == 0)
      goto LABEL_19;
    goto LABEL_178;
  }
LABEL_10:
  if (v13 >= v14)
    goto LABEL_70;
LABEL_21:
  result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  v24 = *a3;
  v25 = *a2;
  v26 = *(_DWORD *)(*a3 + 4);
  v27 = *(_DWORD *)(*a2 + 4);
  if (v27 >= v26)
    v28 = v26;
  else
    v28 = v27;
  if (!(_DWORD)v28)
  {
LABEL_30:
    if (v26 >= v27)
      goto LABEL_70;
    goto LABEL_45;
  }
  v29 = *(_DWORD *)(v24 + 16);
  v30 = *(_QWORD *)(v24 + 8);
  v31 = *(_DWORD *)(v25 + 16);
  v32 = *(_QWORD *)(v25 + 8);
  if ((v29 & 4) != 0)
  {
    if ((v31 & 4) != 0)
    {
      v33 = 0;
      while (*(unsigned __int8 *)(v30 + v33) == *(unsigned __int8 *)(v32 + v33))
      {
        if (v28 == ++v33)
          goto LABEL_30;
      }
      goto LABEL_41;
    }
    v33 = 0;
    while (*(_WORD *)(v32 + 2 * v33) == *(unsigned __int8 *)(v30 + v33))
    {
      if (v28 == ++v33)
        goto LABEL_30;
    }
  }
  else
  {
    if ((v31 & 4) != 0)
    {
      v33 = 0;
      while (*(_WORD *)(v30 + 2 * v33) == *(unsigned __int8 *)(v32 + v33))
      {
        if (v28 == ++v33)
          goto LABEL_30;
      }
LABEL_41:
      v34 = 0;
      if ((v29 & 4) != 0)
        goto LABEL_42;
LABEL_191:
      v35 = *(unsigned __int16 *)(v30 + 2 * v33);
      if ((v34 & 1) == 0)
        goto LABEL_43;
      goto LABEL_192;
    }
    v33 = 0;
    while (*(unsigned __int16 *)(v30 + 2 * v33) == *(unsigned __int16 *)(v32 + 2 * v33))
    {
      if (v28 == ++v33)
        goto LABEL_30;
    }
  }
  v34 = 1;
  if ((v29 & 4) == 0)
    goto LABEL_191;
LABEL_42:
  v35 = *(unsigned __int8 *)(v30 + v33);
  if ((v34 & 1) == 0)
  {
LABEL_43:
    v36 = *(unsigned __int8 *)(v32 + v33);
    goto LABEL_44;
  }
LABEL_192:
  v36 = *(unsigned __int16 *)(v32 + 2 * v33);
LABEL_44:
  if (v35 >= v36)
    goto LABEL_70;
LABEL_45:
  result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  v37 = *a2;
  v38 = *a1;
  v39 = *(_DWORD *)(*a2 + 4);
  v40 = *(_DWORD *)(*a1 + 4);
  if (v40 >= v39)
    v41 = v39;
  else
    v41 = v40;
  if ((_DWORD)v41)
  {
    v42 = *(_DWORD *)(v37 + 16);
    v43 = *(_QWORD *)(v37 + 8);
    v44 = *(_DWORD *)(v38 + 16);
    v45 = *(_QWORD *)(v38 + 8);
    if ((v42 & 4) != 0)
    {
      if ((v44 & 4) != 0)
      {
        v46 = 0;
        while (*(unsigned __int8 *)(v43 + v46) == *(unsigned __int8 *)(v45 + v46))
        {
          if (v41 == ++v46)
            goto LABEL_54;
        }
        goto LABEL_65;
      }
      v46 = 0;
      while (*(_WORD *)(v45 + 2 * v46) == *(unsigned __int8 *)(v43 + v46))
      {
        if (v41 == ++v46)
          goto LABEL_54;
      }
    }
    else
    {
      if ((v44 & 4) != 0)
      {
        v46 = 0;
        while (*(_WORD *)(v43 + 2 * v46) == *(unsigned __int8 *)(v45 + v46))
        {
          if (v41 == ++v46)
            goto LABEL_54;
        }
LABEL_65:
        v47 = 0;
        if ((v42 & 4) != 0)
          goto LABEL_66;
        goto LABEL_205;
      }
      v46 = 0;
      while (*(unsigned __int16 *)(v43 + 2 * v46) == *(unsigned __int16 *)(v45 + 2 * v46))
      {
        if (v41 == ++v46)
          goto LABEL_54;
      }
    }
    v47 = 1;
    if ((v42 & 4) != 0)
    {
LABEL_66:
      v48 = *(unsigned __int8 *)(v43 + v46);
      if ((v47 & 1) == 0)
      {
LABEL_67:
        v49 = *(unsigned __int8 *)(v45 + v46);
        goto LABEL_68;
      }
LABEL_206:
      v49 = *(unsigned __int16 *)(v45 + 2 * v46);
LABEL_68:
      if (v48 >= v49)
        goto LABEL_70;
      goto LABEL_69;
    }
LABEL_205:
    v48 = *(unsigned __int16 *)(v43 + 2 * v46);
    if ((v47 & 1) == 0)
      goto LABEL_67;
    goto LABEL_206;
  }
LABEL_54:
  if (v39 < v40)
  {
LABEL_69:
    result = *(__n128 *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(__n128 *)a2 = result;
  }
LABEL_70:
  v50 = *a5;
  v51 = *a4;
  v52 = *(_DWORD *)(*a5 + 4);
  v53 = *(_DWORD *)(*a4 + 4);
  if (v53 >= v52)
    v54 = v52;
  else
    v54 = v53;
  if (!(_DWORD)v54)
  {
LABEL_79:
    if (v52 >= v53)
      return result;
    goto LABEL_90;
  }
  v55 = *(_DWORD *)(v50 + 16);
  v56 = *(_QWORD *)(v50 + 8);
  v57 = *(_DWORD *)(v51 + 16);
  v58 = *(_QWORD *)(v51 + 8);
  if ((v55 & 4) != 0)
  {
    if ((v57 & 4) != 0)
    {
      v59 = 0;
      while (*(unsigned __int8 *)(v56 + v59) == *(unsigned __int8 *)(v58 + v59))
      {
        if (v54 == ++v59)
          goto LABEL_79;
      }
      goto LABEL_86;
    }
    v59 = 0;
    while (*(_WORD *)(v58 + 2 * v59) == *(unsigned __int8 *)(v56 + v59))
    {
      if (v54 == ++v59)
        goto LABEL_79;
    }
  }
  else
  {
    if ((v57 & 4) != 0)
    {
      v59 = 0;
      while (*(_WORD *)(v56 + 2 * v59) == *(unsigned __int8 *)(v58 + v59))
      {
        if (v54 == ++v59)
          goto LABEL_79;
      }
LABEL_86:
      v60 = 0;
      if ((v55 & 4) != 0)
        goto LABEL_87;
LABEL_184:
      v61 = *(unsigned __int16 *)(v56 + 2 * v59);
      if ((v60 & 1) == 0)
        goto LABEL_88;
      goto LABEL_185;
    }
    v59 = 0;
    while (*(unsigned __int16 *)(v56 + 2 * v59) == *(unsigned __int16 *)(v58 + 2 * v59))
    {
      if (v54 == ++v59)
        goto LABEL_79;
    }
  }
  v60 = 1;
  if ((v55 & 4) == 0)
    goto LABEL_184;
LABEL_87:
  v61 = *(unsigned __int8 *)(v56 + v59);
  if ((v60 & 1) == 0)
  {
LABEL_88:
    v62 = *(unsigned __int8 *)(v58 + v59);
    goto LABEL_89;
  }
LABEL_185:
  v62 = *(unsigned __int16 *)(v58 + 2 * v59);
LABEL_89:
  if (v61 >= v62)
    return result;
LABEL_90:
  result = *(__n128 *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(__n128 *)a5 = result;
  v63 = *a4;
  v64 = *a3;
  v65 = *(_DWORD *)(*a4 + 4);
  v66 = *(_DWORD *)(*a3 + 4);
  if (v66 >= v65)
    v67 = v65;
  else
    v67 = v66;
  if (!(_DWORD)v67)
  {
LABEL_99:
    if (v65 >= v66)
      return result;
    goto LABEL_114;
  }
  v68 = *(_DWORD *)(v63 + 16);
  v69 = *(_QWORD *)(v63 + 8);
  v70 = *(_DWORD *)(v64 + 16);
  v71 = *(_QWORD *)(v64 + 8);
  if ((v68 & 4) != 0)
  {
    if ((v70 & 4) != 0)
    {
      v72 = 0;
      while (*(unsigned __int8 *)(v69 + v72) == *(unsigned __int8 *)(v71 + v72))
      {
        if (v67 == ++v72)
          goto LABEL_99;
      }
      goto LABEL_110;
    }
    v72 = 0;
    while (*(_WORD *)(v71 + 2 * v72) == *(unsigned __int8 *)(v69 + v72))
    {
      if (v67 == ++v72)
        goto LABEL_99;
    }
  }
  else
  {
    if ((v70 & 4) != 0)
    {
      v72 = 0;
      while (*(_WORD *)(v69 + 2 * v72) == *(unsigned __int8 *)(v71 + v72))
      {
        if (v67 == ++v72)
          goto LABEL_99;
      }
LABEL_110:
      v73 = 0;
      if ((v68 & 4) != 0)
        goto LABEL_111;
LABEL_198:
      v74 = *(unsigned __int16 *)(v69 + 2 * v72);
      if ((v73 & 1) == 0)
        goto LABEL_112;
      goto LABEL_199;
    }
    v72 = 0;
    while (*(unsigned __int16 *)(v69 + 2 * v72) == *(unsigned __int16 *)(v71 + 2 * v72))
    {
      if (v67 == ++v72)
        goto LABEL_99;
    }
  }
  v73 = 1;
  if ((v68 & 4) == 0)
    goto LABEL_198;
LABEL_111:
  v74 = *(unsigned __int8 *)(v69 + v72);
  if ((v73 & 1) == 0)
  {
LABEL_112:
    v75 = *(unsigned __int8 *)(v71 + v72);
    goto LABEL_113;
  }
LABEL_199:
  v75 = *(unsigned __int16 *)(v71 + 2 * v72);
LABEL_113:
  if (v74 >= v75)
    return result;
LABEL_114:
  result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  v76 = *a3;
  v77 = *a2;
  v78 = *(_DWORD *)(*a3 + 4);
  v79 = *(_DWORD *)(*a2 + 4);
  if (v79 >= v78)
    v80 = v78;
  else
    v80 = v79;
  if (!(_DWORD)v80)
  {
LABEL_123:
    if (v78 >= v79)
      return result;
    goto LABEL_138;
  }
  v81 = *(_DWORD *)(v76 + 16);
  v82 = *(_QWORD *)(v76 + 8);
  v83 = *(_DWORD *)(v77 + 16);
  v84 = *(_QWORD *)(v77 + 8);
  if ((v81 & 4) != 0)
  {
    if ((v83 & 4) != 0)
    {
      v85 = 0;
      while (*(unsigned __int8 *)(v82 + v85) == *(unsigned __int8 *)(v84 + v85))
      {
        if (v80 == ++v85)
          goto LABEL_123;
      }
      goto LABEL_134;
    }
    v85 = 0;
    while (*(_WORD *)(v84 + 2 * v85) == *(unsigned __int8 *)(v82 + v85))
    {
      if (v80 == ++v85)
        goto LABEL_123;
    }
  }
  else
  {
    if ((v83 & 4) != 0)
    {
      v85 = 0;
      while (*(_WORD *)(v82 + 2 * v85) == *(unsigned __int8 *)(v84 + v85))
      {
        if (v80 == ++v85)
          goto LABEL_123;
      }
LABEL_134:
      v86 = 0;
      if ((v81 & 4) != 0)
        goto LABEL_135;
LABEL_212:
      v87 = *(unsigned __int16 *)(v82 + 2 * v85);
      if ((v86 & 1) == 0)
        goto LABEL_136;
      goto LABEL_213;
    }
    v85 = 0;
    while (*(unsigned __int16 *)(v82 + 2 * v85) == *(unsigned __int16 *)(v84 + 2 * v85))
    {
      if (v80 == ++v85)
        goto LABEL_123;
    }
  }
  v86 = 1;
  if ((v81 & 4) == 0)
    goto LABEL_212;
LABEL_135:
  v87 = *(unsigned __int8 *)(v82 + v85);
  if ((v86 & 1) == 0)
  {
LABEL_136:
    v88 = *(unsigned __int8 *)(v84 + v85);
    goto LABEL_137;
  }
LABEL_213:
  v88 = *(unsigned __int16 *)(v84 + 2 * v85);
LABEL_137:
  if (v87 >= v88)
    return result;
LABEL_138:
  result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  v89 = *a2;
  v90 = *a1;
  v91 = *(_DWORD *)(*a2 + 4);
  v92 = *(_DWORD *)(*a1 + 4);
  if (v92 >= v91)
    v93 = v91;
  else
    v93 = v92;
  if ((_DWORD)v93)
  {
    v94 = *(_DWORD *)(v89 + 16);
    v95 = *(_QWORD *)(v89 + 8);
    v96 = *(_DWORD *)(v90 + 16);
    v97 = *(_QWORD *)(v90 + 8);
    if ((v94 & 4) != 0)
    {
      if ((v96 & 4) != 0)
      {
        v98 = 0;
        while (*(unsigned __int8 *)(v95 + v98) == *(unsigned __int8 *)(v97 + v98))
        {
          if (v93 == ++v98)
            goto LABEL_147;
        }
        goto LABEL_162;
      }
      v98 = 0;
      while (*(_WORD *)(v97 + 2 * v98) == *(unsigned __int8 *)(v95 + v98))
      {
        if (v93 == ++v98)
          goto LABEL_147;
      }
    }
    else
    {
      if ((v96 & 4) != 0)
      {
        v98 = 0;
        while (*(_WORD *)(v95 + 2 * v98) == *(unsigned __int8 *)(v97 + v98))
        {
          if (v93 == ++v98)
            goto LABEL_147;
        }
LABEL_162:
        v99 = 0;
        if ((v94 & 4) != 0)
          goto LABEL_163;
        goto LABEL_219;
      }
      v98 = 0;
      while (*(unsigned __int16 *)(v95 + 2 * v98) == *(unsigned __int16 *)(v97 + 2 * v98))
      {
        if (v93 == ++v98)
          goto LABEL_147;
      }
    }
    v99 = 1;
    if ((v94 & 4) != 0)
    {
LABEL_163:
      v100 = *(unsigned __int8 *)(v95 + v98);
      if ((v99 & 1) == 0)
      {
LABEL_164:
        v101 = *(unsigned __int8 *)(v97 + v98);
        goto LABEL_165;
      }
LABEL_220:
      v101 = *(unsigned __int16 *)(v97 + 2 * v98);
LABEL_165:
      if (v100 >= v101)
        return result;
      goto LABEL_166;
    }
LABEL_219:
    v100 = *(unsigned __int16 *)(v95 + 2 * v98);
    if ((v99 & 1) == 0)
      goto LABEL_164;
    goto LABEL_220;
  }
LABEL_147:
  if (v91 >= v92)
    return result;
LABEL_166:
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  unsigned int v75;
  __int128 v76;

  if ((_OWORD *)result != a2)
  {
    v4 = a2;
    v5 = (_QWORD *)result;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (_QWORD *)(result + 16 * v8);
      do
      {
        result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      for (i = v4; i != a3; ++i)
      {
        v12 = *(_QWORD *)i;
        v13 = *v5;
        v14 = *(_DWORD *)(*(_QWORD *)i + 4);
        v15 = *(_DWORD *)(*v5 + 4);
        if (v15 >= v14)
          v16 = v14;
        else
          v16 = v15;
        if (!(_DWORD)v16)
        {
LABEL_16:
          if (v14 >= v15)
            continue;
LABEL_27:
          v25 = *i;
          *i = *(_OWORD *)v5;
          *(_OWORD *)v5 = v25;
          result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>((uint64_t)v5, v7, v5);
          continue;
        }
        v17 = *(_DWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 8);
        v19 = *(_DWORD *)(v13 + 16);
        v20 = *(_QWORD *)(v13 + 8);
        if ((v17 & 4) != 0)
        {
          if ((v19 & 4) != 0)
          {
            v21 = 0;
            while (*(unsigned __int8 *)(v18 + v21) == *(unsigned __int8 *)(v20 + v21))
            {
              if (v16 == ++v21)
                goto LABEL_16;
            }
            goto LABEL_23;
          }
          v21 = 0;
          while (*(_WORD *)(v20 + 2 * v21) == *(unsigned __int8 *)(v18 + v21))
          {
            if (v16 == ++v21)
              goto LABEL_16;
          }
        }
        else
        {
          if ((v19 & 4) != 0)
          {
            v21 = 0;
            while (*(_WORD *)(v18 + 2 * v21) == *(unsigned __int8 *)(v20 + v21))
            {
              if (v16 == ++v21)
                goto LABEL_16;
            }
LABEL_23:
            v22 = 0;
            if ((v17 & 4) != 0)
              goto LABEL_24;
            goto LABEL_39;
          }
          v21 = 0;
          while (*(unsigned __int16 *)(v18 + 2 * v21) == *(unsigned __int16 *)(v20 + 2 * v21))
          {
            if (v16 == ++v21)
              goto LABEL_16;
          }
        }
        v22 = 1;
        if ((v17 & 4) != 0)
        {
LABEL_24:
          v23 = *(unsigned __int8 *)(v18 + v21);
          if ((v22 & 1) == 0)
            goto LABEL_25;
          goto LABEL_40;
        }
LABEL_39:
        v23 = *(unsigned __int16 *)(v18 + 2 * v21);
        if ((v22 & 1) == 0)
        {
LABEL_25:
          v24 = *(unsigned __int8 *)(v20 + v21);
          goto LABEL_26;
        }
LABEL_40:
        v24 = *(unsigned __int16 *)(v20 + 2 * v21);
LABEL_26:
        if (v23 < v24)
          goto LABEL_27;
      }
    }
    if (v6 >= 17)
    {
      v26 = (unint64_t)v6 >> 4;
      do
      {
        v27 = 0;
        v76 = *(_OWORD *)v5;
        v28 = v5;
        do
        {
          v29 = &v28[v27 + 1];
          v30 = (2 * v27) | 1;
          v31 = 2 * v27 + 2;
          if (v31 >= v26)
            goto LABEL_69;
          v32 = v29[2];
          v33 = *v29;
          v34 = *(_DWORD *)(*v29 + 4);
          v35 = *(_DWORD *)(v32 + 4);
          if (v35 >= v34)
            v36 = v34;
          else
            v36 = v35;
          if (!(_DWORD)v36)
          {
LABEL_54:
            v41 = v34 >= v35;
            goto LABEL_64;
          }
          v37 = *(_DWORD *)(v33 + 16);
          v38 = *(_QWORD *)(v33 + 8);
          v39 = *(_DWORD *)(v32 + 16);
          v40 = *(_QWORD *)(v32 + 8);
          if ((v37 & 4) != 0)
          {
            if ((v39 & 4) != 0)
            {
              result = 0;
              while (*(unsigned __int8 *)(v38 + result) == *(unsigned __int8 *)(v40 + result))
              {
                if (v36 == ++result)
                  goto LABEL_54;
              }
              goto LABEL_60;
            }
            result = 0;
            while (*(_WORD *)(v40 + 2 * result) == *(unsigned __int8 *)(v38 + result))
            {
              if (v36 == ++result)
                goto LABEL_54;
            }
          }
          else
          {
            if ((v39 & 4) != 0)
            {
              result = 0;
              while (*(_WORD *)(v38 + 2 * result) == *(unsigned __int8 *)(v40 + result))
              {
                if (v36 == ++result)
                  goto LABEL_54;
              }
LABEL_60:
              v42 = 0;
              if ((v37 & 4) != 0)
                goto LABEL_61;
              goto LABEL_80;
            }
            result = 0;
            while (*(unsigned __int16 *)(v38 + 2 * result) == *(unsigned __int16 *)(v40 + 2 * result))
            {
              if (v36 == ++result)
                goto LABEL_54;
            }
          }
          v42 = 1;
          if ((v37 & 4) != 0)
          {
LABEL_61:
            v43 = *(unsigned __int8 *)(v38 + result);
            if ((v42 & 1) != 0)
              goto LABEL_81;
            goto LABEL_62;
          }
LABEL_80:
          v43 = *(unsigned __int16 *)(v38 + 2 * result);
          if ((v42 & 1) != 0)
          {
LABEL_81:
            v44 = *(unsigned __int16 *)(v40 + 2 * result);
            goto LABEL_63;
          }
LABEL_62:
          v44 = *(unsigned __int8 *)(v40 + result);
LABEL_63:
          v41 = v43 >= v44;
LABEL_64:
          if (!v41)
          {
            v29 += 2;
            v30 = v31;
          }
LABEL_69:
          *v28 = *(_OWORD *)v29;
          v28 = v29;
          v27 = v30;
        }
        while (v30 <= (uint64_t)((unint64_t)(v26 - 2) >> 1));
        if (v29 == (_QWORD *)--v4)
        {
          *(_OWORD *)v29 = v76;
          continue;
        }
        *(_OWORD *)v29 = *v4;
        *v4 = v76;
        v46 = (char *)v29 - (char *)v5 + 16;
        if (v46 < 17)
          continue;
        v47 = ((unint64_t)v46 >> 4) - 2;
        v48 = v47 >> 1;
        v49 = &v5[2 * (v47 >> 1)];
        v50 = *v49;
        v51 = *v29;
        result = *(unsigned int *)(*v49 + 4);
        v52 = *(_DWORD *)(*v29 + 4);
        if (v52 >= result)
          v53 = result;
        else
          v53 = v52;
        if ((_DWORD)v53)
        {
          v54 = *(_DWORD *)(v50 + 16);
          v55 = *(_QWORD *)(v50 + 8);
          v56 = *(_DWORD *)(v51 + 16);
          v57 = *(_QWORD *)(v51 + 8);
          if ((v54 & 4) != 0)
          {
            if ((v56 & 4) != 0)
            {
              v58 = 0;
              while (*(unsigned __int8 *)(v55 + v58) == *(unsigned __int8 *)(v57 + v58))
              {
                if (v53 == ++v58)
                  goto LABEL_93;
              }
              goto LABEL_101;
            }
            v58 = 0;
            while (*(_WORD *)(v57 + 2 * v58) == *(unsigned __int8 *)(v55 + v58))
            {
              if (v53 == ++v58)
                goto LABEL_93;
            }
LABEL_152:
            result = 1;
            if ((v54 & 4) == 0)
              goto LABEL_153;
LABEL_102:
            v59 = *(unsigned __int8 *)(v55 + v58);
            if ((result & 1) == 0)
              goto LABEL_103;
LABEL_154:
            v60 = *(unsigned __int16 *)(v57 + 2 * v58);
          }
          else
          {
            if ((v56 & 4) == 0)
            {
              v58 = 0;
              while (*(unsigned __int16 *)(v55 + 2 * v58) == *(unsigned __int16 *)(v57 + 2 * v58))
              {
                if (v53 == ++v58)
                  goto LABEL_93;
              }
              goto LABEL_152;
            }
            v58 = 0;
            while (*(_WORD *)(v55 + 2 * v58) == *(unsigned __int8 *)(v57 + v58))
            {
              if (v53 == ++v58)
                goto LABEL_93;
            }
LABEL_101:
            result = 0;
            if ((v54 & 4) != 0)
              goto LABEL_102;
LABEL_153:
            v59 = *(unsigned __int16 *)(v55 + 2 * v58);
            if ((result & 1) != 0)
              goto LABEL_154;
LABEL_103:
            v60 = *(unsigned __int8 *)(v57 + v58);
          }
          if (v59 < v60)
          {
LABEL_105:
            v61 = v29[1];
            *(_OWORD *)v29 = *(_OWORD *)v49;
            if (v47 < 2)
            {
LABEL_106:
              v62 = v49;
LABEL_107:
              *v62 = v51;
              v62[1] = v61;
              continue;
            }
            while (2)
            {
              v64 = v48 - 1;
              v48 = (v48 - 1) >> 1;
              v62 = &v5[2 * v48];
              v65 = *v62;
              v66 = *(_DWORD *)(*v62 + 4);
              v67 = *(_DWORD *)(v51 + 4);
              if (v67 >= v66)
                v68 = v66;
              else
                v68 = v67;
              if ((_DWORD)v68)
              {
                v69 = *(_DWORD *)(v65 + 16);
                v70 = *(_QWORD *)(v65 + 8);
                v71 = *(_DWORD *)(v51 + 16);
                v72 = *(_QWORD *)(v51 + 8);
                if ((v69 & 4) != 0)
                {
                  if ((v71 & 4) != 0)
                  {
                    result = 0;
                    while (*(unsigned __int8 *)(v70 + result) == *(unsigned __int8 *)(v72 + result))
                    {
                      if (v68 == ++result)
                        goto LABEL_120;
                    }
                    goto LABEL_127;
                  }
                  result = 0;
                  while (*(_WORD *)(v72 + 2 * result) == *(unsigned __int8 *)(v70 + result))
                  {
                    if (v68 == ++result)
                      goto LABEL_120;
                  }
LABEL_141:
                  v73 = 1;
                  if ((v69 & 4) == 0)
                    goto LABEL_142;
LABEL_128:
                  v74 = *(unsigned __int8 *)(v70 + result);
                  if ((v73 & 1) == 0)
                    goto LABEL_129;
LABEL_143:
                  v75 = *(unsigned __int16 *)(v72 + 2 * result);
                }
                else
                {
                  if ((v71 & 4) == 0)
                  {
                    result = 0;
                    while (*(unsigned __int16 *)(v70 + 2 * result) == *(unsigned __int16 *)(v72 + 2 * result))
                    {
                      if (v68 == ++result)
                        goto LABEL_120;
                    }
                    goto LABEL_141;
                  }
                  result = 0;
                  while (*(_WORD *)(v70 + 2 * result) == *(unsigned __int8 *)(v72 + result))
                  {
                    if (v68 == ++result)
                      goto LABEL_120;
                  }
LABEL_127:
                  v73 = 0;
                  if ((v69 & 4) != 0)
                    goto LABEL_128;
LABEL_142:
                  v74 = *(unsigned __int16 *)(v70 + 2 * result);
                  if ((v73 & 1) != 0)
                    goto LABEL_143;
LABEL_129:
                  v75 = *(unsigned __int8 *)(v72 + result);
                }
                if (v74 >= v75)
                  goto LABEL_106;
              }
              else
              {
LABEL_120:
                if (v66 >= v67)
                  goto LABEL_106;
              }
              *(_OWORD *)v49 = *(_OWORD *)v62;
              v49 = &v5[2 * v48];
              if (v64 <= 1)
                goto LABEL_107;
              continue;
            }
          }
        }
        else
        {
LABEL_93:
          if (result < v52)
            goto LABEL_105;
        }
      }
      while (v26-- > 2);
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  unsigned int v67;

  if (a2 < 2)
    return result;
  v3 = (uint64_t)a3 - result;
  v4 = (unint64_t)(a2 - 2) >> 1;
  if (v4 < ((uint64_t)a3 - result) >> 4)
    return result;
  v5 = v3 >> 3;
  v6 = (v3 >> 3) + 1;
  v7 = (_QWORD *)(result + 16 * v6);
  v8 = v5 + 2;
  if (v8 < a2)
  {
    v9 = v7[2];
    v10 = *v7;
    v11 = *(_DWORD *)(*v7 + 4);
    v12 = *(_DWORD *)(v9 + 4);
    if (v12 >= v11)
      v13 = v11;
    else
      v13 = v12;
    if (!(_DWORD)v13)
    {
LABEL_13:
      v19 = v11 >= v12;
      goto LABEL_23;
    }
    v14 = *(_DWORD *)(v10 + 16);
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_DWORD *)(v9 + 16);
    v17 = *(_QWORD *)(v9 + 8);
    if ((v14 & 4) != 0)
    {
      if ((v16 & 4) != 0)
      {
        v18 = 0;
        while (*(unsigned __int8 *)(v15 + v18) == *(unsigned __int8 *)(v17 + v18))
        {
          if (v13 == ++v18)
            goto LABEL_13;
        }
        goto LABEL_19;
      }
      v18 = 0;
      while (*(_WORD *)(v17 + 2 * v18) == *(unsigned __int8 *)(v15 + v18))
      {
        if (v13 == ++v18)
          goto LABEL_13;
      }
    }
    else
    {
      if ((v16 & 4) != 0)
      {
        v18 = 0;
        while (*(_WORD *)(v15 + 2 * v18) == *(unsigned __int8 *)(v17 + v18))
        {
          if (v13 == ++v18)
            goto LABEL_13;
        }
LABEL_19:
        v20 = 0;
        if ((v14 & 4) != 0)
          goto LABEL_20;
        goto LABEL_141;
      }
      v18 = 0;
      while (*(unsigned __int16 *)(v15 + 2 * v18) == *(unsigned __int16 *)(v17 + 2 * v18))
      {
        if (v13 == ++v18)
          goto LABEL_13;
      }
    }
    v20 = 1;
    if ((v14 & 4) != 0)
    {
LABEL_20:
      v21 = *(unsigned __int8 *)(v15 + v18);
      if ((v20 & 1) == 0)
      {
LABEL_21:
        v22 = *(unsigned __int8 *)(v17 + v18);
LABEL_22:
        v19 = v21 >= v22;
LABEL_23:
        if (!v19)
        {
          v7 += 2;
          v6 = v8;
        }
        goto LABEL_28;
      }
LABEL_142:
      v22 = *(unsigned __int16 *)(v17 + 2 * v18);
      goto LABEL_22;
    }
LABEL_141:
    v21 = *(unsigned __int16 *)(v15 + 2 * v18);
    if ((v20 & 1) == 0)
      goto LABEL_21;
    goto LABEL_142;
  }
LABEL_28:
  v24 = *v7;
  v25 = *a3;
  v26 = *(_DWORD *)(*v7 + 4);
  v27 = *(_DWORD *)(*a3 + 4);
  if (v27 >= v26)
    v28 = v26;
  else
    v28 = v27;
  if (!(_DWORD)v28)
  {
LABEL_37:
    if (v26 < v27)
      return result;
    goto LABEL_48;
  }
  v29 = *(_DWORD *)(v24 + 16);
  v30 = *(_QWORD *)(v24 + 8);
  v31 = *(_DWORD *)(v25 + 16);
  v32 = *(_QWORD *)(v25 + 8);
  if ((v29 & 4) != 0)
  {
    if ((v31 & 4) != 0)
    {
      v33 = 0;
      while (*(unsigned __int8 *)(v30 + v33) == *(unsigned __int8 *)(v32 + v33))
      {
        if (v28 == ++v33)
          goto LABEL_37;
      }
      goto LABEL_44;
    }
    v33 = 0;
    while (*(_WORD *)(v32 + 2 * v33) == *(unsigned __int8 *)(v30 + v33))
    {
      if (v28 == ++v33)
        goto LABEL_37;
    }
  }
  else
  {
    if ((v31 & 4) != 0)
    {
      v33 = 0;
      while (*(_WORD *)(v30 + 2 * v33) == *(unsigned __int8 *)(v32 + v33))
      {
        if (v28 == ++v33)
          goto LABEL_37;
      }
LABEL_44:
      v34 = 0;
      if ((v29 & 4) != 0)
        goto LABEL_45;
LABEL_134:
      v35 = *(unsigned __int16 *)(v30 + 2 * v33);
      if ((v34 & 1) == 0)
        goto LABEL_46;
      goto LABEL_135;
    }
    v33 = 0;
    while (*(unsigned __int16 *)(v30 + 2 * v33) == *(unsigned __int16 *)(v32 + 2 * v33))
    {
      if (v28 == ++v33)
        goto LABEL_37;
    }
  }
  v34 = 1;
  if ((v29 & 4) == 0)
    goto LABEL_134;
LABEL_45:
  v35 = *(unsigned __int8 *)(v30 + v33);
  if ((v34 & 1) == 0)
  {
LABEL_46:
    v36 = *(unsigned __int8 *)(v32 + v33);
    goto LABEL_47;
  }
LABEL_135:
  v36 = *(unsigned __int16 *)(v32 + 2 * v33);
LABEL_47:
  if (v35 < v36)
    return result;
LABEL_48:
  v37 = a3[1];
  *(_OWORD *)a3 = *(_OWORD *)v7;
  if (v4 >= v6)
  {
    while (1)
    {
      v39 = 2 * v6;
      v6 = (2 * v6) | 1;
      v38 = (_QWORD *)(result + 16 * v6);
      v40 = v39 + 2;
      if (v40 >= a2)
        goto LABEL_77;
      v41 = v38[2];
      v42 = *v38;
      v43 = *(_DWORD *)(*v38 + 4);
      v44 = *(_DWORD *)(v41 + 4);
      if (v44 >= v43)
        v45 = v43;
      else
        v45 = v44;
      if (!(_DWORD)v45)
      {
LABEL_62:
        v51 = v43 >= v44;
        goto LABEL_72;
      }
      v46 = *(_DWORD *)(v42 + 16);
      v47 = *(_QWORD *)(v42 + 8);
      v48 = *(_DWORD *)(v41 + 16);
      v49 = *(_QWORD *)(v41 + 8);
      if ((v46 & 4) != 0)
      {
        if ((v48 & 4) != 0)
        {
          v50 = 0;
          while (*(unsigned __int8 *)(v47 + v50) == *(unsigned __int8 *)(v49 + v50))
          {
            if (v45 == ++v50)
              goto LABEL_62;
          }
          goto LABEL_68;
        }
        v50 = 0;
        while (*(_WORD *)(v49 + 2 * v50) == *(unsigned __int8 *)(v47 + v50))
        {
          if (v45 == ++v50)
            goto LABEL_62;
        }
      }
      else
      {
        if ((v48 & 4) != 0)
        {
          v50 = 0;
          while (*(_WORD *)(v47 + 2 * v50) == *(unsigned __int8 *)(v49 + v50))
          {
            if (v45 == ++v50)
              goto LABEL_62;
          }
LABEL_68:
          v52 = 0;
          if ((v46 & 4) != 0)
            goto LABEL_69;
          goto LABEL_119;
        }
        v50 = 0;
        while (*(unsigned __int16 *)(v47 + 2 * v50) == *(unsigned __int16 *)(v49 + 2 * v50))
        {
          if (v45 == ++v50)
            goto LABEL_62;
        }
      }
      v52 = 1;
      if ((v46 & 4) != 0)
      {
LABEL_69:
        v53 = *(unsigned __int8 *)(v47 + v50);
        if ((v52 & 1) != 0)
          goto LABEL_120;
        goto LABEL_70;
      }
LABEL_119:
      v53 = *(unsigned __int16 *)(v47 + 2 * v50);
      if ((v52 & 1) != 0)
      {
LABEL_120:
        v54 = *(unsigned __int16 *)(v49 + 2 * v50);
        goto LABEL_71;
      }
LABEL_70:
      v54 = *(unsigned __int8 *)(v49 + v50);
LABEL_71:
      v51 = v53 >= v54;
LABEL_72:
      if (!v51)
      {
        v38 += 2;
        v6 = v40;
      }
LABEL_77:
      v56 = *v38;
      v57 = *(_DWORD *)(*v38 + 4);
      v58 = *(_DWORD *)(v25 + 4);
      if (v58 >= v57)
        v59 = v57;
      else
        v59 = v58;
      if ((_DWORD)v59)
      {
        v60 = *(_DWORD *)(v56 + 16);
        v61 = *(_QWORD *)(v56 + 8);
        v62 = *(_DWORD *)(v25 + 16);
        v63 = *(_QWORD *)(v25 + 8);
        if ((v60 & 4) != 0)
        {
          if ((v62 & 4) != 0)
          {
            v64 = 0;
            while (*(unsigned __int8 *)(v61 + v64) == *(unsigned __int8 *)(v63 + v64))
            {
              if (v59 == ++v64)
                goto LABEL_86;
            }
            goto LABEL_93;
          }
          v64 = 0;
          while (*(_WORD *)(v63 + 2 * v64) == *(unsigned __int8 *)(v61 + v64))
          {
            if (v59 == ++v64)
              goto LABEL_86;
          }
LABEL_111:
          v65 = 1;
          if ((v60 & 4) == 0)
            goto LABEL_112;
LABEL_94:
          v66 = *(unsigned __int8 *)(v61 + v64);
          if ((v65 & 1) == 0)
            goto LABEL_95;
LABEL_113:
          v67 = *(unsigned __int16 *)(v63 + 2 * v64);
        }
        else
        {
          if ((v62 & 4) == 0)
          {
            v64 = 0;
            while (*(unsigned __int16 *)(v61 + 2 * v64) == *(unsigned __int16 *)(v63 + 2 * v64))
            {
              if (v59 == ++v64)
                goto LABEL_86;
            }
            goto LABEL_111;
          }
          v64 = 0;
          while (*(_WORD *)(v61 + 2 * v64) == *(unsigned __int8 *)(v63 + v64))
          {
            if (v59 == ++v64)
              goto LABEL_86;
          }
LABEL_93:
          v65 = 0;
          if ((v60 & 4) != 0)
            goto LABEL_94;
LABEL_112:
          v66 = *(unsigned __int16 *)(v61 + 2 * v64);
          if ((v65 & 1) != 0)
            goto LABEL_113;
LABEL_95:
          v67 = *(unsigned __int8 *)(v63 + v64);
        }
        if (v66 < v67)
          break;
        goto LABEL_97;
      }
LABEL_86:
      if (v57 < v58)
        break;
LABEL_97:
      *(_OWORD *)v7 = *(_OWORD *)v38;
      v7 = v38;
      if (v4 < v6)
        goto LABEL_50;
    }
  }
  v38 = v7;
LABEL_50:
  *v38 = v25;
  v38[1] = v37;
  return result;
}

void JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator::~CallArrayAllocatorWithVariableSizeSlowPathGenerator(JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)*((_QWORD *)this + 19);
  if ((JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)((char *)this + 168) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

{
  JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *v9;
  JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)*((_QWORD *)this + 19);
  if ((JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)((char *)this + 168) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)*((_QWORD *)this + 6);
  if ((JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator::generateInternal(JSC::DFG::CallArrayAllocatorWithVariableSizeSlowPathGenerator *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint8x8_t v42;
  __int32 v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  char v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  unsigned __int8 *v63;
  char *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  unsigned __int8 *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int i;
  unsigned int v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  char *v131;
  char *v132;
  unint64_t v133;
  char v134;
  __int16 v135;
  char v136;
  void *__dst;
  uint64_t v138;
  _WORD v139[4];
  unint64_t v140;

  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *((unsigned int *)this + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x197C384B4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*((_QWORD *)this + 6) + v11), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  *((_BYTE *)a2 + 5768) = 1;
  if (*((_DWORD *)this + 41))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)a2, *((_QWORD *)this + 19) + v14, a3, a4, a5, a6, a7, a8);
      ++v15;
      v14 += 16;
    }
    while (v15 < *((unsigned int *)this + 41));
  }
  v21 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(*((char *)this + 144), *((_BYTE *)this + 145));
  v22 = *((_QWORD *)this + 13);
  if (v22 == *((_QWORD *)this + 14))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, v22, v21, v16, v17, v18, v19, v20);
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32((uint64_t)a2, 2, *((char *)this + 144), 0x8000000, v17, v18, v19, v20, (uint64_t)&__dst);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *((_QWORD *)this + 13), v21, v90, v91, v92, v93, v94);
    for (i = *((_DWORD *)a2 + 50); (signed int)i < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = i)
    {
      if (i + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a2 + 56), v95, v96, v97, v98, v99, v100, v101);
        i = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + i) = -721215457;
      i = *((_DWORD *)a2 + 50) + 4;
    }
    v103 = i;
    if (i + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a2 + 56), v95, v96, v97, v98, v99, v100, v101);
      v103 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v103) = 335544320;
    *((_DWORD *)a2 + 50) += 4;
    if (*((_BYTE *)a2 + 328))
      v104 = 69;
    else
      v104 = 65;
    v133 = i;
    v134 = v104;
    v135 = 15;
    v136 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, (uint64_t)a2, v96, v97, v98, v99, v100, v101);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *((_QWORD *)this + 14), v21, v105, v106, v107, v108, v109);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v133, (uint64_t)a2, v110, v111, v112, v113, v114, v115);
  }
  v30 = *((unsigned int *)this + 32);
  v31 = *((_QWORD *)this + 17);
  v32 = *((unsigned __int8 *)this + 144);
  v33 = *((unsigned __int8 *)this + 145);
  __dst = v139;
  v138 = 3;
  if ((_DWORD)v21 == 1)
  {
    v34 = 0;
  }
  else
  {
    v139[0] = v21 | 0x100;
    v34 = 1;
    HIDWORD(v138) = 1;
  }
  if (v32 != 2)
  {
    v139[v34++] = v32 | 0x200;
    HIDWORD(v138) = v34;
  }
  if (v33 == 3)
  {
    if (!v34)
      goto LABEL_65;
  }
  else
  {
    v139[v34++] = v33 | 0x300;
    HIDWORD(v138) = v34;
  }
  v35 = 1;
  do
  {
    v36 = 0;
    v37 = 0;
    v38 = (char *)__dst;
    v39 = v34;
    do
    {
      if ((*((_BYTE *)__dst + v36 + 1) & 0x40) != 0)
        goto LABEL_102;
      v37 |= 1 << *((_BYTE *)__dst + v36 + 1);
      v36 += 2;
    }
    while (2 * v34 != v36);
    v40 = 0;
    do
    {
      v41 = *((_BYTE *)__dst + v40) & 0x7F;
      if (v41 >= 0x40)
        goto LABEL_102;
      v37 &= ~(1 << v41);
      v40 += 2;
    }
    while (2 * v34 != v40);
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
    v42.i16[0] = vaddlv_u8(v42);
    v43 = v42.i32[0];
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v37));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.i32[0] + v43)
    {
      v45 = 0;
      if (v34 <= 1uLL)
        v46 = 1;
      else
        v46 = v34;
      v47 = 2 * v46;
      while (1)
      {
        v48 = *((unsigned __int8 *)__dst + v45 + 1);
        if ((v48 & 0x7Fu) >= 0x40)
          goto LABEL_102;
        if (((v37 >> (v48 & 0x7F)) & 1) != 0)
          break;
        v45 += 2;
        if (v47 == v45)
          goto LABEL_44;
      }
      v49 = *((unsigned __int8 *)__dst + v45);
      if (v49 == v48)
        goto LABEL_42;
      v50 = (char)v49;
      if ((char)v49 == 63)
      {
        v51 = *((_DWORD *)a2 + 50);
        v52 = *((_DWORD *)a2 + 48);
        if (v48 != 31)
        {
          v54 = v48 & 0x1F | 0xD2800000;
          goto LABEL_39;
        }
      }
      else
      {
        v51 = *((_DWORD *)a2 + 50);
        v52 = *((_DWORD *)a2 + 48);
        v53 = (char)v48 == 31 || v50 == 31;
        if (!v53)
        {
          v54 = v48 & 0xFFE0FFFF | ((v50 & 0x1F) << 16) | 0xAA0003E0;
LABEL_39:
          if (v51 + 4 > v52)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a2 + 56), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
            v51 = *((_DWORD *)a2 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a2 + 7) + v51) = v54;
          *((_DWORD *)a2 + 50) += 4;
          v38 = (char *)__dst;
          v39 = HIDWORD(v138);
LABEL_42:
          memmove(&v38[v45], &v38[v45 + 2], 2 * v39 - v45 - 2);
          v34 = HIDWORD(v138) - 1;
          goto LABEL_43;
        }
      }
      v54 = (char)v48 | (32 * v50) | 0x91000000;
      goto LABEL_39;
    }
    v55 = *(_BYTE *)__dst;
    v56 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)a2, *(char *)__dst, v56, v25, v26, v27, v28, v29);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v138) - 2);
    v57 = (HIDWORD(v138) - 1);
    v53 = HIDWORD(v138) == 1;
    HIDWORD(v138) = v57;
    v58 = (unsigned __int8 *)__dst;
    v59 = (unsigned __int8 *)__dst + 2 * v57;
    if (v53)
    {
      v66 = 0;
      v67 = 0;
      v62 = 0;
      v23 = v59;
    }
    else
    {
      v60 = 2 * v57;
      v61 = __dst;
      while (*v61 != v56)
      {
        v61 += 2;
        v60 -= 2;
        if (!v60)
          goto LABEL_50;
      }
      *v61 = v55;
LABEL_50:
      v62 = 0;
      v63 = v58;
      v23 = v59;
      v64 = (char *)v59;
      do
      {
        if (*v58 == v58[1])
        {
          v65 = v58;
          if (v64 != (char *)__dst + 2 * HIDWORD(v138))
          {
            v132 = (char *)v59;
            if (v58 == v23)
            {
              v65 = (unsigned __int8 *)v64;
            }
            else
            {
              v130 = v63 - v23;
              v131 = v64;
              memmove(v64, v23, v63 - v23);
              v65 = (unsigned __int8 *)&v131[v130];
            }
            v59 = (unsigned __int8 *)v132;
          }
          v23 = v58 + 2;
          ++v62;
          v64 = (char *)v65;
        }
        v58 += 2;
        v63 += 2;
      }
      while (v58 < v59);
      v58 = (unsigned __int8 *)__dst;
      v66 = HIDWORD(v138);
      v67 = HIDWORD(v138);
      v59 = (unsigned __int8 *)v64;
    }
    v68 = &v58[2 * v66];
    if (v23 != v68)
    {
      memmove(v59, v23, v68 - v23);
      v67 = HIDWORD(v138);
    }
    v34 = v67 - v62;
LABEL_43:
    HIDWORD(v138) = v34;
LABEL_44:
    ;
  }
  while (v34);
  v69 = __dst;
  if (v139 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v138) = 0;
    WTF::fastFree((unint64_t)v69, v23, v24, v25, v26, v27, v28, v29);
  }
LABEL_65:
  if (v30 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, v31, 0, v25, v26, v27, v28, v29);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a2, (v30 << 35) + 0x380000001ALL, 0, v25, v26, v27, v28, v29);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, *((_QWORD *)this + 12), v70, v71, v72, v73, v74, v75, (int *)&__dst);
  v35 = *((_BYTE *)this + 120);
  __dst = (void *)2;
  v133 = 0;
  v31 = *((_QWORD *)a2 + 495);
  v80 = *(_QWORD *)(*((_QWORD *)a2 + 497) + 8);
  if ((v80 & 1) != 0)
  {
    v125 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
    if ((v80 & 2) != 0
      || ((v126 = *(unsigned int *)((v80 & 0xFFFFFFFF8) + 8), (_DWORD)v126 != 0x3FFFFFFF)
        ? (v127 = (_DWORD)v126 == -1)
        : (v127 = 1),
          v127))
    {
      v128 = 2;
    }
    else if (v126 >> 28)
    {
      v129 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v129 = v125;
      *(_DWORD *)(v129 + 8) = v126;
      v128 = 1;
      v125 = v129;
    }
    else
    {
      v128 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
      v125 = v126 << 36;
    }
    v80 = v125 | v128;
  }
  v140 = v80;
  LODWORD(v31) = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v31, &v140, (uint64_t *)&__dst, (unsigned int **)&v133, v76, v77, v78, v79);
  if ((v140 & 1) != 0 && (v140 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v140 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  if ((v31 & 1) != 0)
  {
    v116 = *((unsigned int *)this + 41);
    if (!(_DWORD)v116)
      goto LABEL_103;
    v117 = 0;
    v118 = 16 * v116;
    v119 = (char *)(*((_QWORD *)this + 19) + 2);
    do
    {
      v121 = *v119;
      v119 += 16;
      v120 = v121;
      if ((v121 & 0x40) != 0)
        goto LABEL_102;
      v117 |= 1 << v120;
      v118 -= 16;
    }
    while (v118);
    while ((v35 & 0x40) != 0)
    {
LABEL_102:
      __break(1u);
LABEL_103:
      v117 = 0;
    }
    v81 = 1;
    v122 = v117 | (1 << v35);
    if ((v122 & 2) != 0)
    {
      v123 = (unsigned __int16)~(_WORD)v122 & 0xFFFE;
      if (v123)
      {
        v124 = __clz(__rbit64(v123));
        JSC::MacroAssemblerARM64::move(a2, 1, v124, v25, v26, v27, v28, v29);
        v81 = v124;
      }
      else
      {
        v81 = -1;
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, 1, v24, v25, v26, v27, v28, v29);
    v81 = 0;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  v82 = *((unsigned __int8 *)this + 120);
  if (*((_BYTE *)this + 120))
  {
    if (v82 == 31)
    {
      v83 = -1862270945;
LABEL_76:
      v85 = (unsigned int *)((char *)a2 + 200);
      v84 = *((_DWORD *)a2 + 50);
      if (v84 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a2 + 56), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
        v84 = *v85;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v84) = v83;
      *v85 += 4;
    }
    else
    {
      if (v82 != 255)
      {
        v83 = v82 | 0xAA0003E0;
        goto LABEL_76;
      }
      JSC::MacroAssemblerARM64::move(a2, 1, 0xFFFFFFFFLL, v25, v26, v27, v28, v29);
    }
  }
  v86 = *((_DWORD *)this + 41);
  if (v86)
  {
    v87 = v86 - 1;
    v88 = 16 * (v86 - 1);
    do
    {
      if (*((_DWORD *)this + 41) <= v87)
      {
        __break(0xC471u);
        JUMPOUT(0x197C384BCLL);
      }
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)a2, *((_QWORD *)this + 19) + v88, v24, v25, v26, v27, v28, v29);
      v88 -= 16;
      --v87;
    }
    while (v87 != -1);
  }
  *((_BYTE *)a2 + 5768) = 0;
  if ((_DWORD)v31)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, v81, v24, v25, v26, v27, v28, v29);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo((uint64_t)this, (uint64_t)a2, v24, v25, v26, v27, v28, v29);
}

uint64_t JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1 == -1)
  {
    v2 = 0;
  }
  else
  {
    LOWORD(v2) = a1;
    if ((a1 & 0x40) != 0)
      goto LABEL_29;
    v2 = 1 << a1;
  }
  if (a2 == 255)
    goto LABEL_7;
  if ((a2 & 0x40) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v2 |= 1 << a2;
LABEL_7:
  if ((v2 & 1) == 0)
    return 0;
  if ((v2 & 2) == 0)
    return 1;
  if ((v2 & 4) == 0)
    return 2;
  if ((v2 & 8) == 0)
    return 3;
  if ((v2 & 0x10) == 0)
    return 4;
  if ((v2 & 0x20) == 0)
    return 5;
  if ((v2 & 0x40) == 0)
    return 6;
  if ((v2 & 0x80) == 0)
    return 7;
  if ((v2 & 0x100) == 0)
    return 8;
  if ((v2 & 0x200) == 0)
    return 9;
  if ((v2 & 0x400) == 0)
    return 10;
LABEL_30:
  if ((v2 & 0x800) == 0)
    return 11;
  if ((v2 & 0x1000) == 0)
    return 12;
  if ((v2 & 0x2000) == 0)
    return 13;
  if ((v2 & 0x4000) == 0)
    return 14;
  if ((v2 & 0x8000) == 0)
    return 15;
  result = 1379;
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 5)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >> 26)
      {
        __break(0xC471u);
        return;
      }
      v12 = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = v10;
      do
      {
        v14 = *(_OWORD *)v13;
        *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
        *(_OWORD *)v12 = v14;
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
        *(_WORD *)(v12 + 40) = *(_WORD *)(v13 + 40);
        *(_DWORD *)(v12 + 44) = *(_DWORD *)(v13 + 44);
        *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
        *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
        v13 += 64;
        v12 += 64;
      }
      while (v13 != v10 + (v11 << 6));
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::MacroAssemblerARM64::or64(uint64_t a1, JSC::ARM64LogicalImmediate *this, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  v6 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
  if (v6 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)this, *(char *)(a1 + 272), v9, v10, v11, v12, v13);
    v14 = a3 & 0x1F | (32 * (a3 & 0x1F));
    v15 = -1441792000;
  }
  else
  {
    v14 = (32 * (a3 & 0x1F)) | (v6 << 10);
    v15 = a3 | 0xB2000000;
  }
  v16 = v14 | v15;
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), v7, v8, v9, v10, v11, v12, v13);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::storePair64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a4 & 0x700000000) != 0 || (a4 >> 35) + 64 > 0x7F)
  {
    v12 = a4 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::store64((uint64_t)a1, a2, a4 & 0xFFFFFFFF000000FFLL, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store64((uint64_t)a1, a3, v12 + 0x800000000, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = (32 * (char)a4) | a2 & 0x1F | 0xA9000000 | ((a3 & 0x1F) << 10) & 0x7FFF | (((a4 >> 35) & 0x7F) << 15);
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

{
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a5 & 7) != 0 || (((int)a5 >> 3) + 64) > 0x7F)
  {
    v13 = a4 | (unint64_t)(a5 << 32);
    JSC::MacroAssemblerARM64::store64((uint64_t)a1, a2, v13, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store64((uint64_t)a1, a3, v13 + 0x800000000, v14, v15, v16, v17, v18);
  }
  else
  {
    v10 = a2 & 0x1F | (32 * a4);
    v11 = v10 | 0xA9000000 | ((a3 & 0x1F) << 10) & 0x7FFF | ((((int)a5 >> 3) & 0x7F) << 15);
    v12 = a1[50];
    if (v12 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v10, a3, a4, a5, a6, a7, a8);
      v12 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v11;
    a1[50] += 4;
  }
}

{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a5 & 7) != 0 || (((int)a5 >> 3) + 64) > 0x7F)
  {
    v12 = a4 | (unint64_t)(a5 << 32);
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)a1, a2, v12, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)a1, a3, v12 + 0x800000000, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a2 | ((_DWORD)a3 << 10) | (32 * a4) | ((((int)a5 >> 3) & 0x7F) << 15) | 0x6D000000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

uint64_t WTF::ScopedLambdaFunctor<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat),JSC::DFG::SpeculativeJIT::compileEnumeratorGetByVal(JSC::DFG::Node *)::$_0::operator() const(JSC::JSValueRegs)::{lambda(JSC::DataFormat)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD *v60;
  uint64_t *v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  int *v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int i;
  unsigned int v118;
  char v119;
  uint64_t v120;
  int *v121;
  int *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  char v134;
  uint64_t v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  int v153;
  unsigned int v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  char v166;
  uint64_t v167;
  int *v168;
  int *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  char v178;
  char v179;
  uint64_t v180;
  char v181;
  char v182;
  char v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  char v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char v197;
  char v198;
  char v199;
  int v200;
  int v201;
  char v202;
  __int16 v203;
  char v204;
  int v205;
  int v206;
  char v207;
  __int16 v208;
  char v209;
  unsigned int v210[3];
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  _BYTE v221[32];

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 3960);
  v10 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 24);
  v11 = *(_DWORD *)(v9 + 164);
  if (v11 <= v10 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197C397E4);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 2));
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v15 >= *(unsigned int *)(v8 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C3982CLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v15 + 12))
    {
      v197 = JSC::DFG::SpeculativeJIT::fillStorage(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7, a8);
      v9 = *(_QWORD *)(v8 + 3960);
      v10 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 24);
      v11 = *(_DWORD *)(v9 + 164);
    }
    else
    {
      v197 = -1;
    }
    v16 = v8;
  }
  else
  {
    v13 = 0;
    v16 = 0;
    v197 = -1;
  }
  if (v11 <= v10 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197C397ECLL);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 3));
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C397F4);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v18 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v17, a3, a4, a5, a6, a7, a8);
    v20 = v19;
    v9 = *(_QWORD *)(v8 + 3960);
    v10 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 24);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
    v20 = -1;
  }
  if (v11 <= v10 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197C397FCLL);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 4));
  v22 = ~*(_DWORD *)((v21 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v22 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C39804);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v22 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v21, a3, a4, a5, a6, a7, a8);
    v199 = v23;
    v9 = *(_QWORD *)(v8 + 3960);
    v10 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 24);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
    v199 = -1;
  }
  v24 = v10 + 5;
  if (v11 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197C3980CLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v24);
  v195 = v25 & 0xFF00FFFFFFFFFFFFLL;
  v196 = v14;
  if ((v25 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_84;
  v26 = ~*(_DWORD *)((v25 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v26 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C39814);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v26 + 12))
    v27 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v8, v25, a3, a4, a5, a6, a7, a8);
  else
LABEL_84:
    v27 = -1;
  if (v199 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v21, a3, a4, a5, a6, a7, a8);
    v199 = v28;
  }
  v29 = v20;
  if (v20 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v17, a3, a4, a5, a6, a7, a8);
    v29 = v30;
  }
  **(_BYTE **)(a1 + 32) = v29;
  v31 = v16;
  if (v27 == -1)
    v27 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v8, v25, a3, a4, a5, a6, a7, a8);
  **(_BYTE **)(a1 + 40) = v27;
  v32 = v197;
  if (v196)
  {
    if (v197 != -1)
    {
      v191 = -1;
      v33 = 0;
      v34 = v197;
      goto LABEL_37;
    }
    v36 = JSC::DFG::SpeculativeJIT::fillStorage(v31, v13, a3, a4, a5, a6, a7, a8);
    v32 = v36;
    v33 = 0;
    v191 = -1;
LABEL_36:
    v34 = v36;
    goto LABEL_37;
  }
  v35 = ~*(_DWORD *)((v25 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v35 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
LABEL_206:
    JUMPOUT(0x197C395ECLL);
  }
  if (*(_DWORD *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v35 + 8) != 1)
  {
    v36 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v8, a2, a3, a4, a5, a6, a7, a8);
    v33 = v8;
    v191 = v36;
    goto LABEL_36;
  }
  if (v27 == -1)
    v27 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v8, v25, a3, a4, a5, a6, a7, a8);
  if (v27 > 15)
    v134 = -1;
  else
    v134 = v27;
  ++*(_DWORD *)(v8 + 12 * v134 + 4784);
  v33 = v8;
  v191 = v27;
  v34 = v27;
LABEL_37:
  v190 = v34;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v219, (JSC::DFG::SpeculativeJIT *)v8, a3, a4, a5, a6, a7, a8);
  v41 = *(_QWORD *)(a1 + 48);
  v42 = *(_BYTE **)v41;
  *(_QWORD *)v41 = v219;
  v219 = v42;
  v43 = *(char *)(v41 + 8);
  *(_BYTE *)(v41 + 8) = v220;
  if (v42 && v43 != -1)
  {
    if (v43 > 15)
      v43 = -1;
    --*(_DWORD *)&v42[12 * v43 + 4784];
  }
  v44 = *(char *)(*(_QWORD *)(a1 + 48) + 8);
  **(_BYTE **)(a1 + 56) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 8);
  v219 = v221;
  v220 = 2;
  v45 = *(_QWORD *)(v8 + 3960);
  v46 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 24);
  v47 = v46 + 1;
  v48 = *(_DWORD *)(v45 + 164);
  if (v48 <= v46 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197C3981CLL);
  }
  v49 = v46 + 3;
  if (v48 <= v49)
  {
    __break(0xC471u);
    JUMPOUT(0x197C39824);
  }
  v193 = v29;
  if ((*(_QWORD *)(*(_QWORD *)(v45 + 152) + 8 * v47) & 0xFF00FFFFFFFFFFFFLL) == (*(_QWORD *)(*(_QWORD *)(v45 + 152)
                                                                                              + 8 * v49) & 0xFF00FFFFFFFFFFFFLL))
    v50 = *(_QWORD **)(a1 + 64);
  else
    v50 = &v219;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, v8, 1, v199, v37, v38, v39, v40, (uint64_t)&v217, (int8x8_t)2);
  v58 = v217;
  if (v217 != -1)
  {
    v59 = HIDWORD(v220);
    if (HIDWORD(v220) == (_DWORD)v220)
    {
      v60 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v219, (void *)(HIDWORD(v220) + 1), (unint64_t)&v217, v53, v54, v55, v56, v57);
      v62 = *v60;
      v61 = (uint64_t *)(v60 + 1);
      v58 = v62;
      v59 = HIDWORD(v220);
    }
    else
    {
      v61 = &v218;
    }
    v63 = &v219[12 * v59];
    *(_DWORD *)v63 = v58;
    *(_QWORD *)(v63 + 4) = *v61;
    ++HIDWORD(v220);
  }
  v192 = v33;
  v64 = **(_QWORD **)(a1 + 72);
  v65 = *(_QWORD *)(v8 + 5504);
  v66 = *(unsigned int *)((v64 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v198 = v32;
  v194 = v31;
  if ((v64 & 1) != 0)
    v67 = (uint64_t *)(v65 + 24);
  else
    v67 = (uint64_t *)(v65 + 8);
  v68 = *v67;
  v69 = *v67 + 32 * v66;
  v70 = *(_DWORD *)(v8 + 5584);
  v71 = *(_DWORD *)(v69 + 20);
  if (v70 != v71)
  {
    if ((*(_QWORD *)(v69 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v71 ^ v70) >= 2)
      {
        v135 = *(_QWORD *)v69;
        if (*(_QWORD *)v69 != 4)
        {
          *(_QWORD *)v69 = v135 | 2;
          v136 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v135 & 1) != 0)
          {
            v185 = 2 * *v136;
            while (v185 * 4)
            {
              v186 = *(_QWORD *)&v136[v185];
              if ((*(_BYTE *)(v186 + 19) & 0xC) == 0)
              {
                v187 = *(_QWORD *)(v186 + 96);
                v188 = (v187 & 1) != 0 ? (v187 >> 1) & 3 : *(unsigned __int8 *)(v187 + 4);
                v185 -= 2;
                if (v188 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v136, v51, v52, v53, v54, v55, v56, v57);
              goto LABEL_188;
            }
          }
          else if (v136)
          {
            if ((*((_BYTE *)v136 + 19) & 0xC) != 0
              || ((v137 = *((_QWORD *)v136 + 12), (v137 & 1) != 0)
                ? (v138 = (v137 >> 1) & 3)
                : (v138 = *(unsigned __int8 *)(v137 + 4)),
                  v138 == 2))
            {
LABEL_188:
              *(_QWORD *)v69 = 4;
            }
          }
        }
        *(_DWORD *)(v68 + 32 * v66 + 16) = -21020677;
      }
      if ((v70 & 1) != 0)
        *(_QWORD *)v69 &= ~2uLL;
    }
    *(_DWORD *)(v69 + 20) = v70;
  }
  if ((*(_QWORD *)(v69 + 8) & 0xFFFFD7FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell(v8, **(unsigned __int8 **)(a1 + 80), 1, v53, v54, v55, v56, v57, (uint64_t)&v215);
    v72 = v215;
    if (v215 != -1)
    {
      v73 = *((unsigned int *)v50 + 3);
      if ((_DWORD)v73 == *((_DWORD *)v50 + 2))
      {
        v74 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, (void *)(v73 + 1), (unint64_t)&v215, v53, v54, v55, v56, v57);
        v76 = *v74;
        v75 = v74 + 1;
        v72 = v76;
        LODWORD(v73) = *((_DWORD *)v50 + 3);
      }
      else
      {
        v75 = &v216;
      }
      v77 = *v50 + 12 * v73;
      *(_DWORD *)v77 = v72;
      *(_QWORD *)(v77 + 4) = *(_QWORD *)v75;
      ++*((_DWORD *)v50 + 3);
    }
  }
  JSC::MacroAssemblerARM64::load32(v8, **(unsigned __int8 **)(a1 + 80), (char)v44, v53, v54, v55, v56, v57);
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    goto LABEL_206;
  }
  v83 = **(unsigned __int8 **)(a1 + 40) | 0x1000000000;
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v83, *(char *)(v8 + 304), v78, v79, v80, v81, v82);
  JSC::MacroAssemblerARM64::branch32(v8, 1, (char)v44, 17, v84, v85, v86, v87, (uint64_t)&v213);
  v93 = v213;
  v211 = v213;
  v212 = v214;
  if (v213 != -1)
  {
    v94 = *((unsigned int *)v50 + 3);
    if ((_DWORD)v94 == *((_DWORD *)v50 + 2))
    {
      v95 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, (void *)(v94 + 1), (unint64_t)&v211, v88, v89, v90, v91, v92);
      v97 = *v95;
      v96 = (uint64_t *)(v95 + 1);
      v93 = v97;
      LODWORD(v94) = *((_DWORD *)v50 + 3);
    }
    else
    {
      v96 = &v212;
    }
    v98 = *v50 + 12 * v94;
    *(_DWORD *)v98 = v93;
    *(_QWORD *)(v98 + 4) = *v96;
    ++*((_DWORD *)v50 + 3);
  }
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C3960CLL);
  }
  v99 = **(unsigned __int8 **)(a1 + 40) | 0x2000000000;
  v100 = **(char **)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v99, *(char *)(v8 + 304), v88, v89, v90, v91, v92);
  JSC::MacroAssemblerARM64::branch32(v8, 2, v100, 17, v101, v102, v103, v104, (uint64_t)v210);
  JSC::MacroAssemblerARM64::load64(v8, **(unsigned __int8 **)(a1 + 80) | ((unint64_t)**(unsigned __int8 **)(a1 + 32) << 8) | 0x300000000, 0x200000010uLL, **(char **)(a1 + 56), v105, v106, v107, v108);
  v116 = *(_QWORD *)(a1 + 88);
  for (i = *(_DWORD *)(v8 + 200); i < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v109, v110, v111, v112, v113, v114, v115);
      i = *(_DWORD *)(v8 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + i) = -721215457;
    i = *(_DWORD *)(v8 + 200) + 4;
  }
  v118 = i;
  if ((i + 4) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v109, v110, v111, v112, v113, v114, v115);
    v118 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v118) = 335544320;
  *(_DWORD *)(v8 + 200) += 4;
  if (*(_BYTE *)(v8 + 328))
    v119 = 69;
  else
    v119 = 65;
  v205 = i;
  v206 = 0;
  v207 = v119;
  v208 = 15;
  v209 = -1;
  if (i != -1)
  {
    v120 = *(unsigned int *)(v116 + 12);
    if ((_DWORD)v120 == *(_DWORD *)(v116 + 8))
    {
      v121 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v116, (void *)(v120 + 1), (unint64_t)&v205, v111, v112, v113, v114, v115);
      v123 = *v121;
      v122 = v121 + 1;
      v124 = *(_QWORD *)v116 + 12 * *(unsigned int *)(v116 + 12);
      *(_DWORD *)v124 = v123;
    }
    else
    {
      v122 = &v206;
      v124 = *(_QWORD *)v116 + 12 * v120;
      *(_DWORD *)v124 = i;
    }
    *(_QWORD *)(v124 + 4) = *(_QWORD *)v122;
    ++*(_DWORD *)(v116 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v210, v8, v110, v111, v112, v113, v114, v115);
  v132 = **(unsigned __int8 **)(a1 + 32);
  if (v132 != v44)
  {
    if ((char)v132 == 63)
    {
      if (v44 != 31)
      {
        v133 = v44 & 0x1F | 0xD2800000;
        goto LABEL_110;
      }
    }
    else if (v44 != 31 && (char)v132 != 31)
    {
      v133 = v44 | ((v132 & 0x1F) << 16) | 0xAA0003E0;
LABEL_110:
      v139 = *(_DWORD *)(v8 + 200);
      if (v139 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v125, v126, v127, v128, v129, v130, v131);
        v139 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v139) = v133;
      *(_DWORD *)(v8 + 200) += 4;
      goto LABEL_113;
    }
    v133 = v44 | (32 * (char)v132) | 0x91000000;
    goto LABEL_110;
  }
LABEL_113:
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C39688);
  }
  v140 = **(unsigned __int8 **)(a1 + 40) | 0x2000000000;
  *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
  JSC::MacroAssemblerARM64::load32(v8, v140, *(char *)(v8 + 272), v127, v128, v129, v130, v131);
  if (v44 == 31)
  {
    v149 = 1261462527;
    v189 = *(unsigned int *)(v8 + 200);
    if ((v189 + 4) <= *(_DWORD *)(v8 + 192))
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v189) = 1261462527;
      v151 = *(_DWORD *)(v8 + 200) + 4;
      *(_DWORD *)(v8 + 200) = v151;
      goto LABEL_191;
    }
  }
  else
  {
    v148 = v44 & 0x1F;
    v149 = v148 | (32 * v148) | 0x4B100000;
    v150 = *(unsigned int *)(v8 + 200);
    if ((v150 + 4) <= *(_DWORD *)(v8 + 192))
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v150) = v149;
      v151 = *(_DWORD *)(v8 + 200) + 4;
      *(_DWORD *)(v8 + 200) = v151;
LABEL_117:
      v152 = v148 | (v148 << 16) | 0x4B0003E0;
      goto LABEL_118;
    }
  }
  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v141, v142, v143, v144, v145, v146, v147);
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + *(unsigned int *)(v8 + 200)) = v149;
  v151 = *(_DWORD *)(v8 + 200) + 4;
  *(_DWORD *)(v8 + 200) = v151;
  if (v44 != 31)
  {
    v148 = v44 & 0x1F;
    goto LABEL_117;
  }
LABEL_191:
  v152 = 1262446591;
LABEL_118:
  if (v151 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v141, v142, v143, v144, v145, v146, v147);
    v151 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v151) = v152;
  v153 = *(_DWORD *)(v8 + 200);
  v154 = v153 + 4;
  *(_DWORD *)(v8 + 200) = v153 + 4;
  if ((v153 + 8) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v141, v142, v143, v144, v145, v146, v147);
    v154 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v154) = v44 & 0x1F | (32 * v44) | 0x93407C00;
  *(_DWORD *)(v8 + 200) += 4;
  if (!v196)
    JSC::MacroAssemblerARM64::load64(v8, **(unsigned __int8 **)(a1 + 80) | 0x800000000, v190, v143, v144, v145, v146, v147);
  JSC::MacroAssemblerARM64::load64(v8, v190 | ((unint64_t)v44 << 8) | 0x300000000, 0x2FFFFFFF0uLL, **(char **)(a1 + 56), v144, v145, v146, v147);
  v162 = *(_QWORD *)(a1 + 88);
  v163 = *(_DWORD *)(v8 + 200);
  if (v163 < *(_DWORD *)(v8 + 52))
  {
    v164 = v194;
    do
    {
      if ((v163 + 4) > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v155, v156, v157, v158, v159, v160, v161);
        v163 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v163) = -721215457;
      v163 = *(_DWORD *)(v8 + 200) + 4;
      *(_DWORD *)(v8 + 200) = v163;
    }
    while (v163 < *(_DWORD *)(v8 + 52));
  }
  else
  {
    v164 = v194;
  }
  v165 = v163;
  if ((v163 + 4) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v155, v156, v157, v158, v159, v160, v161);
    v165 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v165) = 335544320;
  *(_DWORD *)(v8 + 200) += 4;
  if (*(_BYTE *)(v8 + 328))
    v166 = 69;
  else
    v166 = 65;
  v200 = v163;
  v201 = 0;
  v202 = v166;
  v203 = 15;
  v204 = -1;
  if (v163 != -1)
  {
    v167 = *(unsigned int *)(v162 + 12);
    if ((_DWORD)v167 == *(_DWORD *)(v162 + 8))
    {
      v168 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162, (void *)(v167 + 1), (unint64_t)&v200, v157, v158, v159, v160, v161);
      v170 = *v168;
      v169 = v168 + 1;
      v171 = *(_QWORD *)v162 + 12 * *(unsigned int *)(v162 + 12);
      *(_DWORD *)v171 = v170;
    }
    else
    {
      v169 = &v201;
      v171 = *(_QWORD *)v162 + 12 * v167;
      *(_DWORD *)v171 = v163;
    }
    *(_QWORD *)(v171 + 4) = *(_QWORD *)v169;
    ++*(_DWORD *)(v162 + 12);
  }
  if (HIDWORD(v220))
  {
    v172 = 0;
    v173 = 0;
    v174 = 12 * HIDWORD(v220);
    do
    {
      if (v173 >= HIDWORD(v220))
      {
        __break(0xC471u);
        JUMPOUT(0x197C397DCLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v219[v172], v8, v156, v157, v158, v159, v160, v161);
      ++v173;
      v172 += 12;
    }
    while (v174 != v172);
  }
  v175 = **(unsigned __int8 **)(a1 + 56);
  v176 = (unint64_t)v219;
  if (v221 != v219 && v219 != 0)
  {
    v219 = 0;
    LODWORD(v220) = 0;
    WTF::fastFree(v176, v155, v156, v157, v158, v159, v160, v161);
  }
  if (v192 && v191 != -1)
  {
    if (v191 > 15)
      v178 = -1;
    else
      v178 = v191;
    --*(_DWORD *)(v192 + 12 * v178 + 4784);
  }
  if (v195)
  {
    if (v27 > 15)
      v179 = -1;
    else
      v179 = v27;
    --*(_DWORD *)(v8 + 12 * v179 + 4784);
  }
  v180 = v8 + 4776;
  v181 = v199;
  if (v199 > 15)
    v181 = -1;
  --*(_DWORD *)(v180 + 12 * v181 + 8);
  if (v193 > 15)
    v182 = -1;
  else
    v182 = v193;
  --*(_DWORD *)(v180 + 12 * v182 + 8);
  if (v198 != -1)
  {
    if (v198 > 15)
      v183 = -1;
    else
      v183 = v198;
    --*(_DWORD *)(v164 + 12 * v183 + 4784);
  }
  return v175 | 0x1000u;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572BE0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572BE0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int *v82;
  JSC::AssemblerBuffer *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void *__dst;
  uint64_t v92;
  _WORD v93[4];
  unint64_t v94;
  unsigned int *v95;

  v10 = (uint64_t)a2;
  v12 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v12)
  {
    v8 = 0;
    for (i = 0; i != v12; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_139;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v10, a3, a4, a5, a6, a7, a8);
      v8 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v10 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v10, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v8;
        v13 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 116));
    }
  }
  v14 = *(unsigned int *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 177);
  v18 = *(unsigned __int8 *)(a1 + 178);
  __dst = v93;
  v92 = 3;
  if (v16 == 1)
  {
    v19 = 0;
  }
  else
  {
    v93[0] = v16 | 0x100;
    v19 = 1;
    HIDWORD(v92) = 1;
  }
  if (v17 != 2)
  {
    v93[v19++] = v17 | 0x200;
    HIDWORD(v92) = v19;
  }
  v20 = 2852127712;
  if (v18 != 3)
  {
    v93[v19++] = v18 | 0x300;
    HIDWORD(v92) = v19;
    while (1)
    {
LABEL_16:
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_124;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v19 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_124;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v19 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (!(v29.i32[0] + v28))
      {
        v38 = *(_BYTE *)__dst;
        v39 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(v10, *(char *)__dst, v39, a4, a5, a6, a7, a8);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v92) - 2);
        v40 = (HIDWORD(v92) - 1);
        v37 = HIDWORD(v92) == 1;
        HIDWORD(v92) = v40;
        v8 = (unint64_t)__dst;
        v41 = (char *)__dst + 2 * v40;
        if (v37)
        {
          v47 = 0;
          v48 = 0;
          i = 0;
          a2 = v41;
        }
        else
        {
          v42 = 2 * v40;
          v43 = __dst;
          while (*v43 != v39)
          {
            v43 += 2;
            v42 -= 2;
            if (!v42)
              goto LABEL_44;
          }
          *v43 = v38;
LABEL_44:
          i = 0;
          v44 = v8;
          a2 = v41;
          v45 = v41;
          do
          {
            if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
            {
              v46 = (char *)v8;
              if (v45 != (char *)__dst + 2 * HIDWORD(v92))
              {
                v89 = v41;
                if ((_BYTE *)v8 == a2)
                {
                  v46 = v45;
                }
                else
                {
                  v87 = v44 - (_QWORD)a2;
                  v88 = v45;
                  memmove(v45, a2, v44 - (_QWORD)a2);
                  v46 = &v88[v87];
                }
                v41 = v89;
              }
              a2 = (_BYTE *)(v8 + 2);
              i = (i + 1);
              v45 = v46;
            }
            v8 += 2;
            v44 += 2;
          }
          while (v8 < (unint64_t)v41);
          v8 = (unint64_t)__dst;
          v47 = HIDWORD(v92);
          v48 = HIDWORD(v92);
          v41 = v45;
        }
        v49 = (_BYTE *)(v8 + 2 * v47);
        v20 = 2852127712;
        if (a2 != v49)
        {
          memmove(v41, a2, v49 - a2);
          v48 = HIDWORD(v92);
        }
        v19 = v48 - i;
        goto LABEL_64;
      }
      v8 = 0;
      v30 = v19 <= 1 ? 1 : v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_124;
        if (((v22 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v31 == v8)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v8);
      if (v33 != v32)
        break;
LABEL_63:
      memmove(&v23[v8], &v23[v8 + 2], 2 * v24 - v8 - 2);
      v19 = HIDWORD(v92) - 1;
LABEL_64:
      HIDWORD(v92) = v19;
LABEL_65:
      if (!v19)
      {
        v50 = __dst;
        if (v93 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v92) = 0;
          WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_72;
      }
    }
    v34 = (char)v33;
    if ((char)v33 == 63)
    {
      v35 = *(_DWORD *)(v10 + 200);
      v36 = *(_DWORD *)(v10 + 192);
      if ((char)v32 != 31)
      {
        i = v32 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v35 = *(_DWORD *)(v10 + 200);
      v36 = *(_DWORD *)(v10 + 192);
      v37 = v32 == 31 || v34 == 31;
      if (!v37)
      {
        i = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v35 + 4 > v36)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v35 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v35) = i;
        *(_DWORD *)(v10 + 200) += 4;
        v23 = (char *)__dst;
        v24 = HIDWORD(v92);
        goto LABEL_63;
      }
    }
    i = (char)v32 | (32 * v34) | 0x91000000;
    goto LABEL_60;
  }
  if (v19)
    goto LABEL_16;
LABEL_72:
  if (v14 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, v15, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (v14 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, *(_QWORD *)(a1 + 152), v51, v52, v53, v54, v55, v56, (int *)&v90);
  *(_QWORD *)(a1 + 92) = v90;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_77:
    v60 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_78;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v58, v59, a5, a6, a7, a8);
    goto LABEL_77;
  }
  LOBYTE(v8) = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v95 = 0;
  v15 = *(_QWORD *)(v10 + 3960);
  v69 = *(_QWORD *)(*(_QWORD *)(v10 + 3976) + 8);
  if ((v69 & 1) != 0)
  {
    i = *(_QWORD *)(v69 & 0xFFFFFFFF8);
    if ((v69 & 2) == 0)
    {
      v20 = *(unsigned int *)((v69 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v20 != 0x3FFFFFFF && (_DWORD)v20 != -1)
        goto LABEL_125;
    }
    v71 = 2;
    goto LABEL_127;
  }
  while (1)
  {
    v94 = v69;
    v15 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v15, &v94, (uint64_t *)&__dst, &v95, a5, a6, a7, a8);
    if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v94 & 0xFFFFFFFF8, v57, v58, v59, a5, a6, a7, a8);
    if ((v15 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v58, v59, a5, a6, a7, a8);
      LOBYTE(v8) = 0;
      v60 = 0;
      goto LABEL_100;
    }
    v72 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v72)
    {
      v73 = 0;
      v74 = 16 * v72;
      v75 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v77 = *v75;
        v75 += 16;
        v76 = v77;
        if ((v77 & 0x40) != 0)
          goto LABEL_124;
        v73 |= 1 << v76;
        v74 -= 16;
        if (!v74)
          goto LABEL_118;
      }
    }
    v73 = 0;
LABEL_118:
    if ((v8 & 0x40) == 0)
      break;
LABEL_124:
    __break(1u);
LABEL_125:
    if (v20 >> 28)
    {
      v86 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v86 = i;
      *(_DWORD *)(v86 + 8) = v20;
      v71 = 1;
      i = v86;
    }
    else
    {
      v71 = i;
      i = v20 << 36;
    }
LABEL_127:
    v69 = i | v71;
    v20 = 2852127712;
  }
  v60 = 1;
  v78 = v73 | (1 << v8);
  LOBYTE(v8) = 1;
  if ((v78 & 2) != 0)
  {
    v79 = (unsigned __int16)~(_WORD)v78 & 0xFFFE;
    if (v79)
    {
      LODWORD(v8) = __clz(__rbit64(v79));
      if ((_DWORD)v8 == 1)
      {
        v60 = 1;
      }
      else
      {
        if ((_DWORD)v8 == 31)
        {
          v82 = (unsigned int *)(v10 + 200);
          v81 = *(_DWORD *)(v10 + 200);
          v83 = (JSC::AssemblerBuffer *)(v10 + 56);
          v84 = v81 + 4;
          v85 = *(_DWORD *)(v10 + 192);
          v80 = -1862270913;
        }
        else
        {
          v80 = v8 | 0xAA0103E0;
          v82 = (unsigned int *)(v10 + 200);
          v81 = *(_DWORD *)(v10 + 200);
          v83 = (JSC::AssemblerBuffer *)(v10 + 56);
          v84 = v81 + 4;
          v85 = *(_DWORD *)(v10 + 192);
        }
        if (v84 > v85)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v83, (uint64_t)v57, v58, v59, a5, a6, a7, a8);
          v81 = *v82;
        }
        *(_DWORD *)(*(_QWORD *)v83 + v81) = v80;
        *v82 += 4;
        v60 = 1;
      }
    }
    else
    {
      v60 = 1;
      LOBYTE(v8) = -1;
    }
  }
LABEL_100:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v57, v58, v59, a5, a6, a7, a8);
LABEL_78:
  v61 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v61 == 31)
    {
      v62 = -1862270945;
    }
    else if (v61 == 255)
    {
      v62 = -1442774017;
    }
    else
    {
      v62 = v61 | 0xAA0003E0;
    }
    v64 = (unsigned int *)(v10 + 200);
    v63 = *(_DWORD *)(v10 + 200);
    if (v63 + 4 > *(_DWORD *)(v10 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)v57, v58, v59, a5, a6, a7, a8);
      v63 = *v64;
    }
    *(_DWORD *)(*(_QWORD *)(v10 + 56) + v63) = v62;
    *v64 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v65 = *(_DWORD *)(a1 + 116);
    if (v65)
    {
      v66 = v65 - 1;
      v67 = 16 * (v65 - 1);
      while (*(_DWORD *)(a1 + 116) > v66)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v10, *(_QWORD *)(a1 + 104) + v67, v58, v59, a5, a6, a7, a8);
        v67 -= 16;
        if (--v66 == -1)
          goto LABEL_91;
      }
      __break(0xC471u);
LABEL_139:
      JUMPOUT(0x197C3A174);
    }
LABEL_91:
    *(_BYTE *)(v10 + 5768) = 0;
  }
  if (v60 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v10, (char)v8, v58, v59, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v10, v58, v59, a5, a6, a7, a8);
}

unint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = v10 + 12 * *(unsigned int *)(a1 + 12);
    if (v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
      {
        v24 = *(_QWORD *)a1;
        return v24 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v14 < 3)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_32;
      }
      if (v14 < 0x15555556)
      {
        v15 = 12 * v14;
        v16 = WTF::fastMalloc((WTF *)(12 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v25 = 0;
        do
        {
          v26 = v16 + v25;
          v27 = v10 + v25;
          *(_DWORD *)v26 = *(_DWORD *)(v10 + v25);
          *(_QWORD *)(v26 + 4) = *(_QWORD *)(v10 + v25 + 4);
          v25 += 12;
        }
        while (v27 + 12 != v11);
        v24 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v24 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_QWORD *)a1;
        }
        return v24 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x197C3A3D0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(_DWORD *)(a1 + 12);
    if (v19 < 3)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      if (!v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0x15555556)
        goto LABEL_41;
      v21 = 12 * v19;
      v22 = WTF::fastMalloc((WTF *)(12 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v22;
      if (!v20)
        goto LABEL_25;
    }
    v23 = v10;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 += 12;
    }
    while (v23 != v10 + 12 * v20);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t casual;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v13 = a2;
  if (v13 <= v11)
    return v8;
  if (v13 < 0xAAAAAAB)
  {
    v14 = *(unsigned int *)(result + 12);
    v15 = 24 * v13;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v17 = *(_QWORD *)(StatusReg + 752);
    if (v17)
    {
      v18 = (unint64_t)(v15 + 15) >> 4;
      if (v13 <= 0x11)
      {
        v19 = 23 * v18 + 7;
      }
      else
      {
        if (v13 > 0x1A0)
          goto LABEL_14;
        v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v18 + 626);
        if (*(_DWORD *)(v17 + 8052) <= v19)
          goto LABEL_14;
      }
      v21 = v17 + 8 * v19;
      v22 = v21 + 8064;
      *(_BYTE *)(v21 + 8064) = 1;
      v23 = *(unsigned int *)(v21 + 8080);
      if ((_DWORD)v23)
      {
        *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
        casual = *(_QWORD *)(v22 + 8) - v23;
      }
      else
      {
        v30 = *(_QWORD *)(v22 + 40);
        v31 = *(_QWORD *)(v22 + 24);
        if (!v30)
        {
          if (*(_BYTE *)(v22 + 5) == 6)
          {
            v33 = *(unsigned int *)(v22 + 32);
            v34 = *(_DWORD *)(v22 + 36);
            if (v33 < v34)
            {
              *(_QWORD *)(v22 + 8 * v33 + 56) = 0;
              v35 = (unint64_t *)(8 * v19 + 8 * v33 + v17 + 8128);
              v36 = v34 - 1 - v33;
              while (v36)
              {
                v31 += 1024;
                v38 = *v35++;
                v37 = v38;
                LODWORD(v33) = v33 + 1;
                --v36;
                if (v38)
                {
                  v30 = __rbit64(v37);
                  *(_DWORD *)(v22 + 32) = v33;
                  *(_QWORD *)(v22 + 24) = v31;
                  goto LABEL_32;
                }
              }
              *(_DWORD *)(v22 + 32) = v34;
            }
          }
          *(_BYTE *)v22 = 0;
          goto LABEL_14;
        }
LABEL_32:
        v32 = __clz(v30);
        *(_QWORD *)(v22 + 40) = v30 & ~(0x8000000000000000 >> v32);
        casual = v31 + 16 * v32;
      }
      *(_BYTE *)v22 = 0;
LABEL_19:
      *(_DWORD *)(v9 + 8) = v15 / 0x18;
      *(_QWORD *)v9 = casual;
      if ((_DWORD)v14)
      {
        v24 = 24 * v14;
        v25 = v10;
        do
        {
          *(_QWORD *)casual = 0;
          *(_QWORD *)(casual + 8) = 0;
          *(_BYTE *)(casual + 16) = -1;
          v26 = (*(unsigned __int8 *)(casual + 19) << 16) | 0xF0000;
          *(_WORD *)(casual + 17) = 65;
          *(_BYTE *)(casual + 19) = BYTE2(v26);
          *(_WORD *)(casual + 20) &= 0xFC00u;
          v27 = *(_OWORD *)v25;
          *(_QWORD *)(casual + 16) = *(_QWORD *)(v25 + 16);
          *(_OWORD *)casual = v27;
          casual += 24;
          v25 += 24;
          v24 -= 24;
        }
        while (v24);
      }
      if (!v10)
        return v8;
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      v28 = *(_QWORD *)(StatusReg + 752);
      if (v28)
      {
        if (!(v10 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) != 0)
        {
          goto LABEL_28;
        }
        if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_28:
            v29 = *(unsigned int *)(v28 + 8000);
            if (v29 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v28, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v28 + 8 * v29) = v10 | 0x5000000000000;
              *(_DWORD *)(v28 + 8000) = v29 + 1;
            }
            return v8;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v28, v10, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      }
      return v8;
    }
LABEL_14:
    casual = bmalloc_allocate_casual(v15, 1);
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 24 * v7;
      v18 = v6;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 16) = -1;
        v19 = (*(unsigned __int8 *)(v9 + 19) << 16) | 0xF0000;
        *(_WORD *)(v9 + 17) = 65;
        *(_BYTE *)(v9 + 19) = BYTE2(v19);
        *(_WORD *)(v9 + 20) &= 0xFC00u;
        v20 = *(_OWORD *)v18;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v9 = v20;
        v9 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  int *v11;
  _BYTE *v12;
  _DWORD *v13;

  v5 = (_BYTE *)*result;
  v4 = result[1];
  if (v4)
  {
    v6 = v4 - 1;
    if ((unint64_t)(v4 - 1) >> 31)
      goto LABEL_23;
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_BYTE **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v9 = v7 - 1;
    if (!((unint64_t)(v7 - 1) >> 31))
      goto LABEL_5;
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C3A968);
  }
  v9 = 0;
LABEL_5:
  v10 = (v6 + v9);
  if (__OFADD__((_DWORD)v6, (_DWORD)v9))
    goto LABEL_18;
  if (!(_DWORD)v10)
  {
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_17;
  }
  if ((v10 & 0x80000000) != 0)
  {
LABEL_18:
    v11 = 0;
  }
  else
  {
    result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v10 + 20), &v13);
    v11 = v13;
    if (v13)
    {
      v12 = v13 + 5;
      *v13 = 2;
      v11[1] = v10;
      *((_QWORD *)v11 + 1) = v11 + 5;
      v11[4] = 4;
      if ((_DWORD)v6 == 1)
      {
        *v12 = *v5;
      }
      else if ((_DWORD)v6)
      {
        memcpy(v11 + 5, v5, v6);
      }
      result = &v12[v6];
      if ((_DWORD)v9 == 1)
      {
        *(_BYTE *)result = *v8;
      }
      else if ((_DWORD)v9)
      {
        result = memcpy(result, v8, v9);
      }
    }
  }
LABEL_17:
  *a3 = v11;
  return result;
}

void WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = v12 + v8;
    if (v12 + v8 <= v11)
      goto LABEL_20;
    v14 = v11 + (v11 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13)
      v15 = v12 + v8;
    v16 = *(_QWORD *)a1;
    if (v15 < 3)
    {
      v18 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      if (!(_DWORD)v12)
        goto LABEL_15;
    }
    else
    {
      if (v15 >= 0x15555556)
        goto LABEL_25;
      v17 = 12 * v15;
      v18 = WTF::fastMalloc((WTF *)(12 * v15));
      *(_DWORD *)(a1 + 8) = (v17 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v18;
      if (!(_DWORD)v12)
        goto LABEL_15;
    }
    v19 = v16;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v16 + 12 * v12);
LABEL_15:
    if (a1 + 16 != v16 && v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_20:
    v20 = *(unsigned int *)(a1 + 12);
    if (v13 >= v20)
    {
      v21 = *(_QWORD *)a1 + 12 * v20;
      v22 = v10 + 12 * v8;
      do
      {
        *(_DWORD *)v21 = *(_DWORD *)v10;
        *(_QWORD *)(v21 + 4) = *(_QWORD *)(v10 + 4);
        v10 += 12;
        v21 += 12;
      }
      while (v10 != v22);
      *(_DWORD *)(a1 + 12) = v13;
      return;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197C3AB00);
  }
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filter(uint64_t a1, JSC::DFG::AbstractValue *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v8 = *((_QWORD *)a2 + 1);
  v9 = v8 & a3;
  if ((v8 & a3) == v8)
    return 0;
  if ((v8 & 0x2800FFFFFFF7) == 0)
  {
    *((_QWORD *)a2 + 1) = v9;
    if (v9)
      return 0;
    JSC::DFG::AbstractValue::clear(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80) = 0;
    return 1;
  }
  result = JSC::DFG::AbstractValue::filterSlow(a2, a3, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    goto LABEL_6;
  return result;
}

void JSC::DFG::AbstractValue::clear(JSC::DFG::AbstractValue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::AbstractValue *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::DFG::AbstractValue *v13;

  v8 = this;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v9 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v11)
    {
      v13 = v8;
      pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_12;
    }
    if (!(v10 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v9 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v9)) & 1) != 0)
    {
      goto LABEL_6;
    }
    v13 = v8;
    if (v9 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v9 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v9 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v9) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_6:
        v12 = *(unsigned int *)(v11 + 8000);
        if (v12 < 0x3E7)
        {
          *(_QWORD *)(v11 + 8 * v12) = v10 | 0x5000000000000;
          *(_DWORD *)(v11 + 8000) = v12 + 1;
          goto LABEL_2;
        }
        v13 = v8;
        pas_thread_local_cache_append_deallocation_slow(v11, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
LABEL_12:
        v8 = v13;
        goto LABEL_2;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v11, v10, 1, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
LABEL_2:
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 3) = 0;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 9)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v19 = v11;
      v20 = v5 + 24 * v9;
      v21 = v5;
      do
      {
        v22 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)v19 = v22;
        v23 = *(_QWORD *)(v21 + 8);
        *(_DWORD *)(v19 + 16) = *(_DWORD *)(v21 + 16);
        *(_QWORD *)(v19 + 8) = v23;
        v24 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v21 += 24;
        v19 += 24;
      }
      while (v21 != v20);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v9;
        v18 = v6 + 24 * v7;
        v19 = v6;
        do
        {
          v20 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)v17 = v20;
          v21 = *(_QWORD *)(v19 + 8);
          *(_DWORD *)(v17 + 16) = *(_DWORD *)(v19 + 16);
          *(_QWORD *)(v17 + 8) = v21;
          v22 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 += 24;
          v17 += 24;
        }
        while (v19 != v18);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3572C40;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572C40;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572C40;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char *v53;
  int64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  _BYTE v71[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 177);
    if (*(_BYTE *)(a1 + 176))
    {
      v70 = *(unsigned __int8 *)(a1 + 176);
      v23 = 1;
      v68 = 1;
      if (v22 == 1)
        goto LABEL_15;
    }
    else
    {
      if (v22 == 1)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v59, v60, v61, v62, v63, v64);
        return;
      }
      v23 = 0;
    }
    *(_WORD *)&v71[2 * v23++ - 2] = v22 | 0x100;
    v68 = v23;
LABEL_15:
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v23;
      do
      {
        if ((v71[v24 - 1] & 0x40) != 0)
          goto LABEL_70;
        v25 |= 1 << v71[v24 - 1];
        v24 += 2;
      }
      while (2 * v23 != v24);
      v27 = 0;
      do
      {
        v28 = v71[v27 - 2] & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_70;
        v25 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v23 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
        break;
      v42 = HIBYTE(v70);
      v43 = v70;
      JSC::MacroAssemblerARM64::swap(a2, (char)v70, SHIBYTE(v70), v17, v18, v19, v20, v21);
      memmove(&v70, v71, 2 * v68 - 2);
      v44 = v68 - 1;
      v40 = v68 == 1;
      v69 = v44;
      v45 = (unsigned __int8 *)&v70;
      v46 = &v71[2 * v44 - 2];
      if (v40)
      {
        v56 = 0;
        v57 = 0;
        v49 = 0;
        v15 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = &v70;
        while (*(unsigned __int8 *)v48 != v42)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_43;
        }
        *(_BYTE *)v48 = v43;
LABEL_43:
        v49 = 0;
        v50 = (char *)&v70;
        v15 = v46;
        v51 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != &v71[2 * v69 - 2])
            {
              v67 = v49;
              v65 = v46;
              v66 = v45;
              if (v45 == v15)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50;
                v54 = v50 - (char *)v15;
                v55 = v51;
                memmove(v51, v15, v50 - (char *)v15);
                v50 = v53;
                v52 = &v55[v54];
              }
              v46 = v65;
              v45 = v66;
              v49 = v67;
            }
            v15 = v45 + 2;
            ++v49;
            v51 = v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v56 = v69;
        v57 = v69;
        v46 = v51;
      }
      v58 = &v71[2 * v56 - 2];
      if (v15 != v58)
      {
        memmove(v46, v15, v58 - v15);
        v57 = v69;
      }
      v23 = v57 - v49;
LABEL_64:
      v68 = v23;
LABEL_65:
      if (!v23)
        goto LABEL_68;
    }
    v32 = 0;
    if (v23 <= 1)
      v33 = 1;
    else
      v33 = v23;
    v34 = 2 * v33;
    while (1)
    {
      v35 = v71[v32 - 1];
      if ((v35 & 0x7Fu) >= 0x40)
        goto LABEL_70;
      if (((v25 >> (v35 & 0x7F)) & 1) != 0)
        break;
      v32 += 2;
      if (v34 == v32)
        goto LABEL_65;
    }
    v36 = v71[v32 - 2];
    if (v36 == v35)
    {
LABEL_63:
      memmove(&v71[v32 - 2], &v71[v32], 2 * v26 - v32 - 2);
      v23 = v68 - 1;
      goto LABEL_64;
    }
    v37 = (char)v36;
    if ((char)v36 == 63)
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      if ((char)v35 != 31)
      {
        v41 = v35 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      v40 = v35 == 31 || v37 == 31;
      if (!v40)
      {
        v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v38 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v68;
        goto LABEL_63;
      }
    }
    v41 = (char)v35 | (32 * v37) | 0x91000000;
    goto LABEL_60;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_70:
  __break(1u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102));
  v11 = v19;
  v10 = v20;
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v12 == 31)
    {
      v13 = -1862270945;
    }
    else if (v12 == 255)
    {
      v13 = -1442774017;
    }
    else
    {
      v13 = v12 | 0xAA0003E0;
    }
    v15 = (unsigned int *)(a2 + 200);
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
    *v15 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (!*(_BYTE *)(a1 + 101))
    {
      if (v10)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 2;
  v6 = *(_QWORD *)(a1 + 3960);
  JSC::CodeOrigin::CodeOrigin(&v27, (const JSC::CodeOrigin *)(*(_QWORD *)(a1 + 3976) + 8));
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v6, (unint64_t *)&v27, &v29, &v28, v7, v8, v9, v10);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = a2[3];
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 16 * v19;
      v22 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v24 = *v22;
        v22 += 16;
        v23 = v24;
        if ((v24 & 0x40) != 0)
          break;
        v20 |= 1 << v23;
        v21 -= 16;
        if (!v21)
          goto LABEL_10;
      }
    }
    else
    {
      v20 = 0;
LABEL_10:
      if ((a3 & 0x40) == 0)
      {
        v25 = v20 | (1 << a3);
        if ((v25 & 2) != 0)
        {
          v26 = (unsigned __int16)~(_WORD)v25 & 0xFFFE;
          if (v26)
            JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, __clz(__rbit64(v26)), v13, v14, v15, v16, v17);
        }
        goto LABEL_4;
      }
    }
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v12, v13, v14, v15, v16, v17);
LABEL_4:
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572C40;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572C40;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  int64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 *v64;
  void *__dst;
  int v66;
  unsigned int v67;
  __int16 v68;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(unsigned __int8 *)(a1 + 160);
    v16 = *(_QWORD *)(a1 + 168);
    v17 = &v68;
    __dst = &v68;
    v66 = 1;
    if (!v15)
    {
LABEL_62:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 1, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&__dst);
      *(_QWORD *)(a1 + 92) = __dst;
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v58, v59, v60, v61, v62, v63);
      return;
    }
    v68 = v15;
    v67 = 1;
    v18 = 1;
    while (1)
    {
      v19 = 0;
      v20 = 0;
      v21 = (char *)__dst;
      v22 = v18;
      do
      {
        if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
          goto LABEL_66;
        v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
        v19 += 2;
      }
      while (2 * v18 != v19);
      v23 = 0;
      do
      {
        v24 = *((_BYTE *)__dst + v23) & 0x7F;
        if (v24 >= 0x40)
          goto LABEL_66;
        v20 &= ~(1 << v24);
        v23 += 2;
      }
      while (2 * v18 != v23);
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.i32[0];
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.i32[0] + v26)
        break;
      v64 = v17;
      v36 = *(_BYTE *)__dst;
      v37 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v37, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v67 - 2);
      v38 = v67 - 1;
      v33 = v67 == 1;
      v67 = v38;
      v39 = (unsigned __int8 *)__dst;
      v40 = (char *)__dst + 2 * v38;
      if (v33)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        a2 = (char *)__dst + 2 * v38;
      }
      else
      {
        v45 = 2 * v38;
        v46 = __dst;
        while (*v46 != v37)
        {
          v46 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_51;
        }
        *v46 = v36;
LABEL_51:
        v43 = 0;
        v47 = v39;
        a2 = v40;
        v48 = v40;
        do
        {
          if (*v39 == v39[1])
          {
            v49 = v39;
            if (v48 != (char *)__dst + 2 * v67)
            {
              if (v39 == (unsigned __int8 *)a2)
              {
                v49 = (unsigned __int8 *)v48;
              }
              else
              {
                v50 = v47 - (unsigned __int8 *)a2;
                memmove(v48, a2, v47 - (unsigned __int8 *)a2);
                v49 = (unsigned __int8 *)&v48[v50];
              }
            }
            a2 = (char *)(v39 + 2);
            ++v43;
            v48 = (char *)v49;
          }
          v39 += 2;
          v47 += 2;
        }
        while (v39 < (unsigned __int8 *)v40);
        v39 = (unsigned __int8 *)__dst;
        v41 = v67;
        v42 = v67;
        v40 = v48;
      }
      v44 = (char *)&v39[2 * v41];
      if (a2 != v44)
      {
        memmove(v40, a2, v44 - a2);
        v42 = v67;
      }
      v18 = v42 - v43;
      v17 = v64;
LABEL_40:
      v67 = v18;
LABEL_41:
      if (!v18)
      {
        v51 = __dst;
        if (v17 != __dst)
        {
          if (__dst)
          {
            __dst = 0;
            v66 = 0;
            WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_62;
      }
    }
    v28 = 0;
    if (v18 <= 1)
      v29 = 1;
    else
      v29 = v18;
    v30 = 2 * v29;
    while (1)
    {
      v31 = *((unsigned __int8 *)__dst + v28 + 1);
      if ((v31 & 0x7Fu) >= 0x40)
        goto LABEL_66;
      if (((v20 >> (v31 & 0x7F)) & 1) != 0)
        break;
      v28 += 2;
      if (v30 == v28)
        goto LABEL_41;
    }
    v32 = *((unsigned __int8 *)__dst + v28);
    if (v32 == v31)
    {
LABEL_39:
      memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
      v18 = v67 - 1;
      goto LABEL_40;
    }
    v32 = (char)v32;
    if ((char)v32 == 63)
    {
      if ((char)v31 != 31)
      {
        v34 = v31 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v33 = v31 == 31 || v32 == 31;
      if (!v33)
      {
        v34 = v31 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v35 = *(_DWORD *)(v8 + 200);
        if (v35 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v35 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v34;
        *(_DWORD *)(v8 + 200) += 4;
        v21 = (char *)__dst;
        v22 = v67;
        goto LABEL_39;
      }
    }
    v34 = (char)v31 | (32 * v32) | 0x91000000;
    goto LABEL_36;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_66:
  __break(1u);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3572CD0;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572CD0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572CD0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v69 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v71 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572CD0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572CD0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3572D60;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572D60;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572D60;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char *v53;
  int64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  _BYTE v71[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 177);
    if (*(_BYTE *)(a1 + 176))
    {
      v70 = *(unsigned __int8 *)(a1 + 176);
      v23 = 1;
      v68 = 1;
      if (v22 == 1)
        goto LABEL_15;
    }
    else
    {
      if (v22 == 1)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, a2, v59, v60, v61, v62, v63, v64);
        return;
      }
      v23 = 0;
    }
    *(_WORD *)&v71[2 * v23++ - 2] = v22 | 0x100;
    v68 = v23;
LABEL_15:
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v23;
      do
      {
        if ((v71[v24 - 1] & 0x40) != 0)
          goto LABEL_70;
        v25 |= 1 << v71[v24 - 1];
        v24 += 2;
      }
      while (2 * v23 != v24);
      v27 = 0;
      do
      {
        v28 = v71[v27 - 2] & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_70;
        v25 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v23 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
        break;
      v42 = HIBYTE(v70);
      v43 = v70;
      JSC::MacroAssemblerARM64::swap(a2, (char)v70, SHIBYTE(v70), v17, v18, v19, v20, v21);
      memmove(&v70, v71, 2 * v68 - 2);
      v44 = v68 - 1;
      v40 = v68 == 1;
      v69 = v44;
      v45 = (unsigned __int8 *)&v70;
      v46 = &v71[2 * v44 - 2];
      if (v40)
      {
        v56 = 0;
        v57 = 0;
        v49 = 0;
        v15 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = &v70;
        while (*(unsigned __int8 *)v48 != v42)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_43;
        }
        *(_BYTE *)v48 = v43;
LABEL_43:
        v49 = 0;
        v50 = (char *)&v70;
        v15 = v46;
        v51 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != &v71[2 * v69 - 2])
            {
              v67 = v49;
              v65 = v46;
              v66 = v45;
              if (v45 == v15)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50;
                v54 = v50 - (char *)v15;
                v55 = v51;
                memmove(v51, v15, v50 - (char *)v15);
                v50 = v53;
                v52 = &v55[v54];
              }
              v46 = v65;
              v45 = v66;
              v49 = v67;
            }
            v15 = v45 + 2;
            ++v49;
            v51 = v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v56 = v69;
        v57 = v69;
        v46 = v51;
      }
      v58 = &v71[2 * v56 - 2];
      if (v15 != v58)
      {
        memmove(v46, v15, v58 - v15);
        v57 = v69;
      }
      v23 = v57 - v49;
LABEL_64:
      v68 = v23;
LABEL_65:
      if (!v23)
        goto LABEL_68;
    }
    v32 = 0;
    if (v23 <= 1)
      v33 = 1;
    else
      v33 = v23;
    v34 = 2 * v33;
    while (1)
    {
      v35 = v71[v32 - 1];
      if ((v35 & 0x7Fu) >= 0x40)
        goto LABEL_70;
      if (((v25 >> (v35 & 0x7F)) & 1) != 0)
        break;
      v32 += 2;
      if (v34 == v32)
        goto LABEL_65;
    }
    v36 = v71[v32 - 2];
    if (v36 == v35)
    {
LABEL_63:
      memmove(&v71[v32 - 2], &v71[v32], 2 * v26 - v32 - 2);
      v23 = v68 - 1;
      goto LABEL_64;
    }
    v37 = (char)v36;
    if ((char)v36 == 63)
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      if ((char)v35 != 31)
      {
        v41 = v35 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      v40 = v35 == 31 || v37 == 31;
      if (!v40)
      {
        v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v38 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v68;
        goto LABEL_63;
      }
    }
    v41 = (char)v35 | (32 * v37) | 0x91000000;
    goto LABEL_60;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_70:
  __break(1u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::AssemblerBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_5;
  }
  LOBYTE(v13) = *(_BYTE *)(a1 + 102);
  v40 = 0;
  v41 = 2;
  v21 = *(_QWORD *)(a2 + 3960);
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v22 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v9 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v9 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v9 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v8;
      *(_DWORD *)(v38 + 8) = v9;
      v37 = 1;
      v8 = v38;
    }
    else
    {
      v37 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    v22 = v8 | v37;
    v21 = v35;
  }
  v39 = v22;
  v23 = (JSC::AssemblerBuffer *)JSC::DFG::Graph::willCatchExceptionInMachineFrame(v21, &v39, &v41, &v40, a5, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v23 & 1) != 0)
  {
    v24 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          break;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_36;
      }
    }
    else
    {
      v25 = 0;
LABEL_36:
      if ((v13 & 0x40) == 0)
      {
        v12 = 1;
        v30 = v25 | (1 << v13);
        LOBYTE(v13) = 1;
        if ((v30 & 2) == 0)
          goto LABEL_27;
        v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
        if (!v31)
        {
          v12 = 1;
          LOBYTE(v13) = -1;
          goto LABEL_27;
        }
        v13 = __clz(__rbit64(v31));
        if (v13 == 1)
        {
          v12 = 1;
          goto LABEL_27;
        }
        if (v13 == 31)
        {
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
          LODWORD(v9) = -1862270913;
        }
        else
        {
          LODWORD(v9) = v13 | 0xAA0103E0;
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
        }
        if (v33 <= v34)
        {
LABEL_55:
          *(_DWORD *)(*(_QWORD *)v23 + v32) = v9;
          *(_DWORD *)v8 += 4;
          v12 = 1;
          goto LABEL_27;
        }
LABEL_61:
        JSC::AssemblerBuffer::outOfLineGrow(v23, a2, a3, a4, a5, a6, a7, a8);
        v32 = *(_DWORD *)v8;
        goto LABEL_55;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v13) = 0;
  v12 = 0;
LABEL_27:
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v14 == 31)
    {
      v15 = -1862270945;
    }
    else if (v14 == 255)
    {
      v15 = -1442774017;
    }
    else
    {
      v15 = v14 | 0xAA0003E0;
    }
    v17 = (unsigned int *)(a2 + 200);
    v16 = *(_DWORD *)(a2 + 200);
    if (v16 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15;
    *v17 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v18 = *(_DWORD *)(a1 + 116);
  if (!v18)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v13, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v19 = v18 - 1;
  v20 = 16 * (v18 - 1);
  while (*(_DWORD *)(a1 + 116) > v19)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v20, a3, a4, a5, a6, a7, a8);
    v20 -= 16;
    if (--v19 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572D60;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572D60;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  int64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 *v64;
  void *__dst;
  int v66;
  unsigned int v67;
  __int16 v68;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(unsigned __int8 *)(a1 + 160);
    v16 = *(_QWORD *)(a1 + 168);
    v17 = &v68;
    __dst = &v68;
    v66 = 1;
    if (!v15)
    {
LABEL_62:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 1, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&__dst);
      *(_QWORD *)(a1 + 92) = __dst;
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, v8, v58, v59, v60, v61, v62, v63);
      return;
    }
    v68 = v15;
    v67 = 1;
    v18 = 1;
    while (1)
    {
      v19 = 0;
      v20 = 0;
      v21 = (char *)__dst;
      v22 = v18;
      do
      {
        if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
          goto LABEL_66;
        v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
        v19 += 2;
      }
      while (2 * v18 != v19);
      v23 = 0;
      do
      {
        v24 = *((_BYTE *)__dst + v23) & 0x7F;
        if (v24 >= 0x40)
          goto LABEL_66;
        v20 &= ~(1 << v24);
        v23 += 2;
      }
      while (2 * v18 != v23);
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.i32[0];
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.i32[0] + v26)
        break;
      v64 = v17;
      v36 = *(_BYTE *)__dst;
      v37 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v37, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v67 - 2);
      v38 = v67 - 1;
      v33 = v67 == 1;
      v67 = v38;
      v39 = (unsigned __int8 *)__dst;
      v40 = (char *)__dst + 2 * v38;
      if (v33)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        a2 = (char *)__dst + 2 * v38;
      }
      else
      {
        v45 = 2 * v38;
        v46 = __dst;
        while (*v46 != v37)
        {
          v46 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_51;
        }
        *v46 = v36;
LABEL_51:
        v43 = 0;
        v47 = v39;
        a2 = v40;
        v48 = v40;
        do
        {
          if (*v39 == v39[1])
          {
            v49 = v39;
            if (v48 != (char *)__dst + 2 * v67)
            {
              if (v39 == (unsigned __int8 *)a2)
              {
                v49 = (unsigned __int8 *)v48;
              }
              else
              {
                v50 = v47 - (unsigned __int8 *)a2;
                memmove(v48, a2, v47 - (unsigned __int8 *)a2);
                v49 = (unsigned __int8 *)&v48[v50];
              }
            }
            a2 = (char *)(v39 + 2);
            ++v43;
            v48 = (char *)v49;
          }
          v39 += 2;
          v47 += 2;
        }
        while (v39 < (unsigned __int8 *)v40);
        v39 = (unsigned __int8 *)__dst;
        v41 = v67;
        v42 = v67;
        v40 = v48;
      }
      v44 = (char *)&v39[2 * v41];
      if (a2 != v44)
      {
        memmove(v40, a2, v44 - a2);
        v42 = v67;
      }
      v18 = v42 - v43;
      v17 = v64;
LABEL_40:
      v67 = v18;
LABEL_41:
      if (!v18)
      {
        v51 = __dst;
        if (v17 != __dst)
        {
          if (__dst)
          {
            __dst = 0;
            v66 = 0;
            WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_62;
      }
    }
    v28 = 0;
    if (v18 <= 1)
      v29 = 1;
    else
      v29 = v18;
    v30 = 2 * v29;
    while (1)
    {
      v31 = *((unsigned __int8 *)__dst + v28 + 1);
      if ((v31 & 0x7Fu) >= 0x40)
        goto LABEL_66;
      if (((v20 >> (v31 & 0x7F)) & 1) != 0)
        break;
      v28 += 2;
      if (v30 == v28)
        goto LABEL_41;
    }
    v32 = *((unsigned __int8 *)__dst + v28);
    if (v32 == v31)
    {
LABEL_39:
      memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
      v18 = v67 - 1;
      goto LABEL_40;
    }
    v32 = (char)v32;
    if ((char)v32 == 63)
    {
      if ((char)v31 != 31)
      {
        v34 = v31 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v33 = v31 == 31 || v32 == 31;
      if (!v33)
      {
        v34 = v31 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v35 = *(_DWORD *)(v8 + 200);
        if (v35 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v35 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v34;
        *(_DWORD *)(v8 + 200) += 4;
        v21 = (char *)__dst;
        v22 = v67;
        goto LABEL_39;
      }
    }
    v34 = (char)v31 | (32 * v32) | 0x91000000;
    goto LABEL_36;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_66:
  __break(1u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::JSValueRegs&,JSC::ARM64Registers::RegisterID&,decltype(nullptr) &>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, int *a3@<X2>, char *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned __int8 *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, char *a10, char *a11, char *a12, char *a13)
{
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unsigned int v36;
  _DWORD *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  int v50;
  char v51;
  char v52;
  char v53;
  int v54;
  _BYTE *v55;
  unsigned int v56;
  _BYTE v57[24];
  WTF *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[32];

  v22 = WTF::fastMalloc((WTF *)0xC8);
  v23 = *((unsigned int *)a1 + 3);
  v24 = v57;
  v55 = v57;
  v56 = v23;
  if (v23 >= 3)
  {
    if (v23 >= 0x15555556)
      goto LABEL_22;
    v24 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v23));
    v55 = v24;
    LODWORD(v23) = *((_DWORD *)a1 + 3);
  }
  if ((_DWORD)v23)
  {
    v25 = *a1;
    v26 = *a1 + 12 * v23;
    do
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)(v25 + 4);
      v25 += 12;
      v24 += 12;
    }
    while (v25 != v26);
  }
  v27 = *a2;
  v54 = *a3;
  v53 = *a4;
  v28 = *a5;
  v29 = *a6;
  v30 = *a7;
  v31 = *a8;
  v32 = *a10;
  v33 = *a11;
  v34 = *a12;
  v35 = *a13;
  v36 = v56;
  v58 = (WTF *)v61;
  v59 = 2;
  v60 = v56;
  if (v56 >= 3)
  {
    v50 = v30;
    v51 = v32;
    v52 = v31;
    if (v56 < 0x15555556)
    {
      v37 = v27;
      v38 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v56));
      v59 = 12 * v56 / 0xC;
      v58 = (WTF *)v38;
      v36 = v56;
      v27 = v37;
      v31 = v52;
      v32 = v51;
      v30 = v50;
      goto LABEL_11;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197C3E194);
  }
  v38 = v61;
  if (v56)
  {
LABEL_11:
    v39 = v55;
    v40 = &v55[12 * v36];
    do
    {
      *(_DWORD *)v38 = *(_DWORD *)v39;
      *(_QWORD *)(v38 + 4) = *(_QWORD *)(v39 + 4);
      v39 += 12;
      v38 += 12;
    }
    while (v39 != v40);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::CallSlowPathGenerator(v22, (uint64_t *)&v58, v27, v30, v31, v32);
  v48 = v58;
  if (v61 != (_BYTE *)v58 && v58 != 0)
  {
    v58 = 0;
    v59 = 0;
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  }
  *(_QWORD *)v22 = &off_1E3574720;
  *(_BYTE *)(v22 + 152) = v53;
  *(_QWORD *)(v22 + 156) = v28;
  *(_QWORD *)(v22 + 168) = v29;
  *(_BYTE *)(v22 + 176) = v33;
  *(_BYTE *)(v22 + 177) = v34;
  *(_BYTE *)(v22 + 178) = v35;
  *(_QWORD *)(v22 + 184) = 0;
  *(_DWORD *)(v22 + 192) = v54;
  *a9 = v22;
  if (v57 != v55)
  {
    if (v55)
      WTF::fastFree((unint64_t)v55, v41, v42, v43, v44, v45, v46, v47);
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574750;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574750;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574750;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::unpackAndGenerate<0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  unsigned __int8 v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  char *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  char *v55;
  int64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  __int16 v73;
  _BYTE v74[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v14 = 0;
        v15 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v14, a3, a4, a5, a6, a7, a8);
          ++v15;
          v14 += 16;
        }
        while (v15 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 192) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v23 = *(unsigned __int8 *)(a1 + 176);
    v24 = *(unsigned __int8 *)(a1 + 177);
    v25 = *(unsigned __int8 *)(a1 + 178);
    v71 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v73 = *(unsigned __int8 *)(a1 + 176);
      v23 = 1;
      v71 = 1;
    }
    if (v24 != 1)
    {
      *(_WORD *)&v74[2 * v23++ - 2] = v24 | 0x100;
      v71 = v23;
    }
    if (v25 == 2)
    {
      if (!v23)
      {
LABEL_68:
        v61 = *(_DWORD *)(a2 + 200);
        if (v61 + 4 > *(_DWORD *)(a2 + 192))
        {
LABEL_71:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
          v61 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v61) = -763363325;
        *(_DWORD *)(a2 + 200) += 4;
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v17, v18, v19, v20, v21, v22);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::tearDown(a1, a2, v62, v63, v64, v65, v66, v67);
        return;
      }
    }
    else
    {
      *(_WORD *)&v74[2 * v23++ - 2] = v25 | 0x200;
      v71 = v23;
    }
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = v23;
      do
      {
        if ((v74[v26 - 1] & 0x40) != 0)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        v27 |= 1 << v74[v26 - 1];
        v26 += 2;
      }
      while (2 * v23 != v26);
      v29 = 0;
      do
      {
        v30 = v74[v29 - 2] & 0x7F;
        if (v30 >= 0x40)
          goto LABEL_70;
        v27 &= ~(1 << v30);
        v29 += 2;
      }
      while (2 * v23 != v29);
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.i32[0] + v32)
      {
        v34 = 0;
        if (v23 <= 1)
          v35 = 1;
        else
          v35 = v23;
        v36 = 2 * v35;
        while (1)
        {
          v37 = v74[v34 - 1];
          if ((v37 & 0x7Fu) >= 0x40)
            goto LABEL_70;
          if (((v27 >> (v37 & 0x7F)) & 1) != 0)
            break;
          v34 += 2;
          if (v36 == v34)
            goto LABEL_64;
        }
        v38 = v74[v34 - 2];
        if (v38 != v37)
        {
          v39 = (char)v38;
          if ((char)v38 == 63)
          {
            v40 = *(_DWORD *)(a2 + 200);
            v41 = *(_DWORD *)(a2 + 192);
            if (v37 == 31)
              goto LABEL_58;
            v43 = v37 & 0x1F | 0xD2800000;
          }
          else
          {
            v40 = *(_DWORD *)(a2 + 200);
            v41 = *(_DWORD *)(a2 + 192);
            v42 = (char)v37 == 31 || v39 == 31;
            if (!v42)
            {
              v43 = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v43 = (char)v37 | (32 * v39) | 0x91000000;
          }
LABEL_59:
          if (v40 + 4 > v41)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            v40 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v43;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = v71;
        }
        memmove(&v74[v34 - 2], &v74[v34], 2 * v28 - v34 - 2);
        v23 = v71 - 1;
        goto LABEL_63;
      }
      v44 = HIBYTE(v73);
      v45 = v73;
      JSC::MacroAssemblerARM64::swap(a2, (char)v73, SHIBYTE(v73), v18, v19, v20, v21, v22);
      memmove(&v73, v74, 2 * v71 - 2);
      v46 = v71 - 1;
      v42 = v71 == 1;
      v72 = v46;
      v47 = (unsigned __int8 *)&v73;
      v48 = &v74[2 * v46 - 2];
      if (v42)
      {
        v58 = 0;
        v59 = 0;
        v51 = 0;
        v16 = v48;
      }
      else
      {
        v49 = 2 * v46;
        v50 = &v73;
        while (*(unsigned __int8 *)v50 != v44)
        {
          ++v50;
          v49 -= 2;
          if (!v49)
            goto LABEL_43;
        }
        *(_BYTE *)v50 = v45;
LABEL_43:
        v51 = 0;
        v52 = (char *)&v73;
        v16 = v48;
        v53 = v48;
        do
        {
          if (*v47 == v47[1])
          {
            v54 = v47;
            if (v53 != &v74[2 * v72 - 2])
            {
              v70 = v51;
              v68 = v48;
              v69 = v47;
              if (v47 == v16)
              {
                v54 = v53;
              }
              else
              {
                v55 = v52;
                v56 = v52 - (char *)v16;
                v57 = v53;
                memmove(v53, v16, v52 - (char *)v16);
                v52 = v55;
                v54 = &v57[v56];
              }
              v48 = v68;
              v47 = v69;
              v51 = v70;
            }
            v16 = v47 + 2;
            ++v51;
            v53 = v54;
          }
          v47 += 2;
          v52 += 2;
        }
        while (v47 < v48);
        v58 = v72;
        v59 = v72;
        v48 = v53;
      }
      v60 = &v74[2 * v58 - 2];
      if (v16 != v60)
      {
        memmove(v48, v16, v60 - v16);
        v59 = v72;
      }
      v23 = v59 - v51;
LABEL_63:
      v71 = v23;
LABEL_64:
      ;
    }
    while (v23);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  v13 = 12 * v10;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v13 == v11)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  v19 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), a4, a5, a6, a7, a8);
  v11 = v19;
  v10 = HIBYTE(v19);
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v12 == 31)
    {
      v13 = -1862270945;
    }
    else if (v12 == 255)
    {
      v13 = -1442774017;
    }
    else
    {
      v13 = v12 | 0xAA0003E0;
    }
    v15 = (unsigned int *)(a2 + 200);
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
    *v15 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (!*(_BYTE *)(a1 + 101))
    {
      if (v10)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_33;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_25;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      v21 = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_32;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    if ((a3 & 0x40) == 0)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_25:
    v12 = v20 | v34;
  }
  v21 = 1;
  v30 = v25 | (1 << a3);
  if ((v30 & 2) != 0)
  {
    v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
    if (v31)
    {
      v32 = __clz(__rbit64(v31));
      v22 = 1;
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v32, v15, v16, v17, v18, v19);
      v21 = v32;
    }
    else
    {
      v22 = 1;
      v21 = 255;
    }
  }
  else
  {
    v22 = 1;
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,decltype(nullptr) &>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  _BYTE *v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  char v44;
  char v46;
  int v48;
  WTF *v49;
  unsigned int v50;
  _BYTE v51[24];
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[24];

  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = *((unsigned int *)a1 + 3);
  v49 = (WTF *)v51;
  v50 = v18;
  if (v18 < 3)
  {
    v19 = v51;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_23;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v49 = (WTF *)v19;
    LODWORD(v18) = *((_DWORD *)a1 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a1;
    v21 = *a1 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a2;
  v23 = *a3;
  v24 = *a4;
  v25 = *a5;
  v26 = *a6;
  v27 = *a7;
  v28 = *a8;
  v29 = *a10;
  v30 = v50;
  v52 = (WTF *)v55;
  v53 = 2;
  v54 = v50;
  if (v50 >= 3)
  {
    v44 = v25;
    v46 = v26;
    v48 = v24;
    if (v50 < 0x15555556)
    {
      v31 = v22;
      v32 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v50));
      v53 = 12 * v50 / 0xC;
      v52 = (WTF *)v32;
      v30 = v50;
      v22 = v31;
      v24 = v48;
      v26 = v46;
      v25 = v44;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C3EF30);
  }
  v32 = v55;
  if (v50)
  {
LABEL_12:
    v33 = v49;
    v34 = (WTF *)((char *)v49 + 12 * v30);
    do
    {
      *(_DWORD *)v32 = *(_DWORD *)v33;
      *(_QWORD *)(v32 + 4) = *(_QWORD *)((char *)v33 + 4);
      v33 = (WTF *)((char *)v33 + 12);
      v32 += 12;
    }
    while (v33 != v34);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::CallSlowPathGenerator(v17, (uint64_t *)&v52, v22, v24, v25, v26);
  v42 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  *(_QWORD *)v17 = &off_1E3574780;
  *(_QWORD *)(v17 + 152) = v23;
  *(_BYTE *)(v17 + 160) = v27;
  *(_BYTE *)(v17 + 161) = v28;
  *(_QWORD *)(v17 + 168) = v29;
  *(_QWORD *)(v17 + 176) = 0;
  *a9 = v17;
  if (v51 != (_BYTE *)v49)
  {
    if (v49)
      WTF::fastFree((unint64_t)v49, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574750;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574750;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::unpackAndGenerate<0ul,1ul,2ul,3ul>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *__dst;
  int v72;
  unsigned int v73;
  _WORD v74[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_75:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v14, a3, a4, a5, a6, a7, a8);
        ++v15;
        v14 += 16;
      }
      while (v15 < *(unsigned int *)(a1 + 116));
    }
  }
  v16 = *(unsigned __int8 *)(a1 + 160);
  v17 = *(unsigned __int8 *)(a1 + 161);
  v18 = *(_QWORD *)(a1 + 168);
  __dst = v74;
  v72 = 2;
  if (v16)
  {
    v74[0] = v16;
    v19 = 1;
    v73 = 1;
    if (v17 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v17 == 1)
      goto LABEL_69;
    v19 = 0;
  }
  v74[v19++] = v17 | 0x100;
  v73 = v19;
  do
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    v22 = (char *)__dst;
    v23 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        goto LABEL_75;
      v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
      v20 += 2;
    }
    while (2 * v19 != v20);
    v24 = 0;
    do
    {
      v25 = *((_BYTE *)__dst + v24) & 0x7F;
      if (v25 >= 0x40)
        goto LABEL_75;
      v21 &= ~(1 << v25);
      v24 += 2;
    }
    while (2 * v19 != v24);
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] + v27)
    {
      v29 = 0;
      if (v19 <= 1)
        v30 = 1;
      else
        v30 = v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_75;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 == v32)
      {
LABEL_63:
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v19 = v73 - 1;
        goto LABEL_64;
      }
      v34 = (char)v33;
      if ((char)v33 == 63)
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        if (v32 != 31)
        {
          v38 = v32 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        v37 = (char)v32 == 31 || v34 == 31;
        if (!v37)
        {
          v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = v73;
          goto LABEL_63;
        }
      }
      v38 = (char)v32 | (32 * v34) | 0x91000000;
      goto LABEL_60;
    }
    v39 = *(_BYTE *)__dst;
    v40 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v73 - 2);
    v41 = v73 - 1;
    v37 = v73 == 1;
    v73 = v41;
    v42 = (unsigned __int8 *)__dst;
    v43 = (unsigned __int8 *)__dst + 2 * v41;
    if (v37)
    {
      v50 = 0;
      v51 = 0;
      v46 = 0;
      a2 = v43;
    }
    else
    {
      v44 = 2 * v41;
      v45 = __dst;
      while (*v45 != v40)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_43;
      }
      *v45 = v39;
LABEL_43:
      v46 = 0;
      v47 = v42;
      a2 = v43;
      v48 = (char *)v43;
      do
      {
        if (*v42 == v42[1])
        {
          v49 = v42;
          if (v48 != (char *)__dst + 2 * v73)
          {
            v69 = (char *)v43;
            if (v42 == a2)
            {
              v49 = (unsigned __int8 *)v48;
            }
            else
            {
              v67 = v47 - a2;
              v68 = v48;
              memmove(v48, a2, v47 - a2);
              v49 = (unsigned __int8 *)&v68[v67];
            }
            v43 = (unsigned __int8 *)v69;
          }
          a2 = v42 + 2;
          ++v46;
          v48 = (char *)v49;
        }
        v42 += 2;
        v47 += 2;
      }
      while (v42 < v43);
      v42 = (unsigned __int8 *)__dst;
      v50 = v73;
      v51 = v73;
      v43 = (unsigned __int8 *)v48;
    }
    v52 = &v42[2 * v50];
    if (a2 != v52)
    {
      memmove(v43, a2, v52 - a2);
      v51 = v73;
    }
    v19 = v51 - v46;
LABEL_64:
    v73 = v19;
LABEL_65:
    ;
  }
  while (v19);
  v53 = __dst;
  if (v74 != __dst && __dst)
  {
    __dst = 0;
    v72 = 0;
    WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  v54 = *(_DWORD *)(v8 + 200);
  if (v54 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v54 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v54) = -763363325;
  *(_DWORD *)(v8 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v55, v56, v57, v58, v59, v60, (int *)&v70);
  *(_QWORD *)(a1 + 92) = v70;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs>::tearDown(a1, v8, v61, v62, v63, v64, v65, v66);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, int *a4, char *a5, uint64_t *a6, uint64_t *a7, unsigned __int8 *a8, char *a9, char *a10, char *a11, char *a12, char *a13)
{
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  int v48;
  char v49;
  char v50;
  _DWORD *v51;
  int v52;
  _BYTE *v54;
  unsigned int v55;
  _BYTE v56[24];
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[32];

  v20 = WTF::fastMalloc((WTF *)0xB8);
  v21 = *((unsigned int *)a2 + 3);
  v54 = v56;
  v55 = v21;
  if (v21 < 3)
  {
    v22 = v56;
  }
  else
  {
    if (v21 >= 0x15555556)
      goto LABEL_23;
    v22 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v21));
    v54 = v22;
    LODWORD(v21) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v21)
  {
    v23 = *a2;
    v24 = *a2 + 12 * v21;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 += 12;
    }
    while (v23 != v24);
  }
  v25 = *a3;
  v52 = *a4;
  v26 = *a5;
  v27 = *a6;
  v28 = *a7;
  v29 = *a8;
  v30 = *a9;
  v31 = *a10;
  v32 = *a11;
  v33 = *a12;
  v34 = *a13;
  v35 = v55;
  v57 = (WTF *)v60;
  v58 = 2;
  v59 = v55;
  if (v55 >= 3)
  {
    v48 = v29;
    v49 = v31;
    v50 = v30;
    v51 = v25;
    if (v55 < 0x15555556)
    {
      v36 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v55));
      v58 = 12 * v55 / 0xC;
      v57 = (WTF *)v36;
      v35 = v55;
      v25 = v51;
      v30 = v50;
      v31 = v49;
      v29 = v48;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C3F810);
  }
  v36 = v60;
  if (v55)
  {
LABEL_12:
    v37 = v54;
    v38 = &v54[12 * v35];
    do
    {
      *(_DWORD *)v36 = *(_DWORD *)v37;
      *(_QWORD *)(v36 + 4) = *(_QWORD *)(v37 + 4);
      v37 += 12;
      v36 += 12;
    }
    while (v37 != v38);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v20, (uint64_t *)&v57, v25, v29, v30, v31);
  v46 = v57;
  if (v60 != (_BYTE *)v57 && v57 != 0)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)v20 = &off_1E3572DC0;
  *(_BYTE *)(v20 + 152) = v26;
  *(_QWORD *)(v20 + 156) = v27;
  *(_QWORD *)(v20 + 168) = v28;
  *(_BYTE *)(v20 + 176) = v32;
  *(_BYTE *)(v20 + 177) = v33;
  *(_BYTE *)(v20 + 178) = v34;
  *(_DWORD *)(v20 + 180) = v52;
  *a1 = v20;
  if (v56 != v54)
  {
    if (v54)
      WTF::fastFree((unint64_t)v54, v39, v40, v41, v42, v43, v44, v45);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572A78;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572A78;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v69 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v71 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, char *a8, char *a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  int v43;
  uint64_t v44;
  _BYTE *v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];

  v17 = WTF::fastMalloc((WTF *)0xB0);
  v18 = *((unsigned int *)a2 + 3);
  v46 = v48;
  v47 = v18;
  if (v18 < 3)
  {
    v19 = v48;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_23;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v46 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v44 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v26 = *a8;
  v27 = *a9;
  v28 = *a10;
  v29 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 >= 3)
  {
    v43 = v23;
    if (v47 < 0x15555556)
    {
      v30 = v22;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
      v50 = 12 * v47 / 0xC;
      v49 = (WTF *)v31;
      v29 = v47;
      v22 = v30;
      v23 = v43;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C40090);
  }
  v31 = v52;
  if (v47)
  {
LABEL_12:
    v32 = v46;
    v33 = &v46[12 * v29];
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)(v32 + 4);
      v32 += 12;
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v17, (uint64_t *)&v49, v22, v23, v24, v25);
  v41 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v17 = &off_1E3572DF0;
  *(_QWORD *)(v17 + 152) = v44;
  *(_BYTE *)(v17 + 160) = v26;
  *(_BYTE *)(v17 + 161) = v27;
  *(_QWORD *)(v17 + 168) = v28;
  *a1 = v17;
  if (v48 != v46)
  {
    if (v46)
      WTF::fastFree((unint64_t)v46, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572A78;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572A78;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::VM *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3572E50;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::VM *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3572E50;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::VM *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::VM *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 *v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  JSC::AssemblerBuffer *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  __int16 *v94;
  int v95;
  uint64_t v96;
  void *__dst;
  int v98;
  unsigned int v99;
  __int16 v100;
  unint64_t v101;
  unsigned int *v102;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(unsigned __int8 *)(a1 + 144);
  v21 = &v100;
  __dst = &v100;
  v98 = 1;
  if (v20 != 1)
  {
    v100 = v20 | 0x100;
    v99 = 1;
    v22 = a2 + 56;
    v23 = -1862270976;
    v24 = 1;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = (char *)__dst;
      v28 = v24;
      do
      {
        if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
          goto LABEL_96;
        v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
        v25 += 2;
      }
      while (2 * v24 != v25);
      v29 = 0;
      do
      {
        v30 = *((_BYTE *)__dst + v29) & 0x7F;
        if (v30 >= 0x40)
          goto LABEL_96;
        v26 &= ~(1 << v30);
        v29 += 2;
      }
      while (2 * v24 != v29);
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v33.i16[0] = vaddlv_u8(v33);
      if (!(v33.i32[0] + v32))
      {
        v95 = v23;
        v94 = v21;
        v42 = *(_BYTE *)__dst;
        v43 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v12, v13, v14, v15, v16);
        memmove(__dst, (char *)__dst + 2, 2 * v99 - 2);
        v44 = v99 - 1;
        v39 = v99 == 1;
        v99 = v44;
        v45 = (unsigned __int8 *)__dst;
        v46 = (char *)__dst + 2 * v44;
        if (v39)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v10 = (char *)__dst + 2 * v44;
        }
        else
        {
          v51 = 2 * v44;
          v52 = __dst;
          while (*v52 != v43)
          {
            v52 += 2;
            v51 -= 2;
            if (!v51)
              goto LABEL_47;
          }
          *v52 = v42;
LABEL_47:
          v49 = 0;
          v53 = v45;
          v10 = v46;
          v54 = v46;
          do
          {
            if (*v45 == v45[1])
            {
              v55 = v45;
              if (v54 != (char *)__dst + 2 * v99)
              {
                if (v45 == (unsigned __int8 *)v10)
                {
                  v55 = (unsigned __int8 *)v54;
                }
                else
                {
                  v56 = v53 - (unsigned __int8 *)v10;
                  memmove(v54, v10, v53 - (unsigned __int8 *)v10);
                  v55 = (unsigned __int8 *)&v54[v56];
                }
              }
              v10 = (char *)(v45 + 2);
              ++v49;
              v54 = (char *)v55;
            }
            v45 += 2;
            v53 += 2;
          }
          while (v45 < (unsigned __int8 *)v46);
          v45 = (unsigned __int8 *)__dst;
          v47 = v99;
          v48 = v99;
          v46 = v54;
        }
        v50 = (char *)&v45[2 * v47];
        if (v10 != v50)
        {
          memmove(v46, v10, v50 - v10);
          v48 = v99;
        }
        v24 = v48 - v49;
        v21 = v94;
        v23 = v95;
        goto LABEL_36;
      }
      v34 = 0;
      v35 = v24 <= 1 ? 1 : v24;
      v36 = 2 * v35;
      while (1)
      {
        v37 = *((unsigned __int8 *)__dst + v34 + 1);
        if ((v37 & 0x7Fu) >= 0x40)
          goto LABEL_96;
        if (((v26 >> (v37 & 0x7F)) & 1) != 0)
          break;
        v34 += 2;
        if (v36 == v34)
          goto LABEL_37;
      }
      v38 = *((unsigned __int8 *)__dst + v34);
      if (v38 != v37)
        break;
LABEL_35:
      memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
      v24 = v99 - 1;
LABEL_36:
      v99 = v24;
LABEL_37:
      if (!(_DWORD)v24)
      {
        v57 = __dst;
        if (v21 != __dst && __dst)
        {
          __dst = 0;
          v98 = 0;
          WTF::fastFree((unint64_t)v57, v10, v11, v12, v13, v14, v15, v16);
        }
        goto LABEL_58;
      }
    }
    v38 = (char)v38;
    if ((char)v38 == 63)
    {
      if ((char)v37 != 31)
      {
        v40 = v37 & 0x1F | 0xD2800000;
        goto LABEL_32;
      }
    }
    else
    {
      v39 = v37 == 31 || v38 == 31;
      if (!v39)
      {
        v40 = v37 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
        v41 = *(_DWORD *)(a2 + 200);
        if (v41 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          v41 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = v40;
        *(_DWORD *)(a2 + 200) += 4;
        v27 = (char *)__dst;
        v28 = v99;
        goto LABEL_35;
      }
    }
    v40 = (char)v37 | (32 * v38) | v23;
    goto LABEL_32;
  }
LABEL_58:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v19, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&v96);
  v67 = 0;
  LOBYTE(v68) = 0;
  *(_QWORD *)(a1 + 64) = v96;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_66;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v65, v66, v13, v14, v15, v16);
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_66;
  }
  v22 = *(_BYTE *)(a1 + 74);
  __dst = (void *)2;
  v102 = 0;
  v19 = *(_QWORD *)(a2 + 3960);
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v24 & 1) != 0)
    goto LABEL_97;
  while (1)
  {
    v101 = v24;
    v19 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v19, &v101, (uint64_t *)&__dst, &v102, v13, v14, v15, v16);
    if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v101 & 0xFFFFFFFF8, v64, v65, v66, v13, v14, v15, v16);
    if ((v19 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v65, v66, v13, v14, v15, v16);
      LOBYTE(v68) = 0;
      v67 = 0;
      goto LABEL_65;
    }
    v76 = *(unsigned int *)(a1 + 92);
    if (!(_DWORD)v76)
      break;
    v24 = 0;
    v77 = 16 * v76;
    v78 = (char *)(*(_QWORD *)(a1 + 80) + 2);
    while (1)
    {
      v80 = *v78;
      v78 += 16;
      v79 = v80;
      if ((v80 & 0x40) != 0)
        break;
      v24 |= 1 << v79;
      v77 -= 16;
      if (!v77)
        goto LABEL_90;
    }
LABEL_96:
    __break(1u);
LABEL_97:
    v89 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || ((v90 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v92 = 1;
      v89 = v93;
    }
    else
    {
      v92 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v24 = v89 | v92;
  }
  v24 = 0;
LABEL_90:
  if ((v22 & 0x40) != 0)
    goto LABEL_96;
  v67 = 1;
  v81 = v24 | (1 << v22);
  if ((v81 & 2) != 0)
  {
    v82 = (unsigned __int16)~(_WORD)v81 & 0xFFFE;
    if (v82)
    {
      v68 = __clz(__rbit64(v82));
      if (v68 == 1)
      {
        v67 = 1;
      }
      else
      {
        if (v68 == 31)
        {
          v85 = (unsigned int *)(a2 + 200);
          v84 = *(_DWORD *)(a2 + 200);
          v86 = (JSC::AssemblerBuffer *)(a2 + 56);
          v87 = v84 + 4;
          v88 = *(_DWORD *)(a2 + 192);
          v83 = -1862270913;
        }
        else
        {
          v83 = v68 | 0xAA0103E0;
          v85 = (unsigned int *)(a2 + 200);
          v84 = *(_DWORD *)(a2 + 200);
          v86 = (JSC::AssemblerBuffer *)(a2 + 56);
          v87 = v84 + 4;
          v88 = *(_DWORD *)(a2 + 192);
        }
        if (v87 > v88)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v86, (uint64_t)v64, v65, v66, v13, v14, v15, v16);
          v84 = *v85;
        }
        *(_DWORD *)(*(_QWORD *)v86 + v84) = v83;
        *v85 += 4;
        v67 = 1;
      }
    }
    else
    {
      v67 = 1;
      LOBYTE(v68) = -1;
    }
  }
  else
  {
    LOBYTE(v68) = 1;
  }
LABEL_65:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v64, v65, v66, v13, v14, v15, v16);
LABEL_66:
  v69 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(a2 + 200);
    v71 = *(_DWORD *)(a2 + 200);
    if (v71 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v64, v65, v66, v13, v14, v15, v16);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_80:
    if (v67)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v68, v65, v66, v13, v14, v15, v16);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v65, v66, v13, v14, v15, v16);
    return;
  }
  v73 = *(_DWORD *)(a1 + 92);
  if (!v73)
  {
LABEL_79:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_80;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 92) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v75, v65, v66, v13, v14, v15, v16);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_79;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3572EB0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3572EB0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *__dst;
  uint64_t v94;
  _WORD v95[4];
  unint64_t v96;
  unsigned int *v97;

  v9 = (uint64_t)a2;
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
  {
    v8 = 0;
    for (i = 0; i != v11; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_140;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v9, a3, a4, a5, a6, a7, a8);
      v8 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v9 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v8;
        v13 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 116));
    }
  }
  v14 = *(unsigned int *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 177);
  v18 = *(unsigned __int8 *)(a1 + 178);
  __dst = v95;
  v94 = 3;
  if (v16 == 1)
  {
    v19 = 0;
  }
  else
  {
    v95[0] = v16 | 0x100;
    v19 = 1;
    HIDWORD(v94) = 1;
  }
  if (v17 != 2)
  {
    v95[v19] = v17 | 0x200;
    v19 = (v19 + 1);
    HIDWORD(v94) = v19;
  }
  if (v18 != 3)
  {
    v95[v19] = v18 | 0x300;
    v19 = (v19 + 1);
    HIDWORD(v94) = v19;
    while (1)
    {
LABEL_16:
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_115;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_115;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (!(v28.i32[0] + v27))
      {
        v38 = *(_BYTE *)__dst;
        v39 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v39, a4, a5, a6, a7, a8);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v94) - 2);
        v40 = (HIDWORD(v94) - 1);
        v36 = HIDWORD(v94) == 1;
        HIDWORD(v94) = v40;
        v8 = (unint64_t)__dst;
        v41 = (char *)__dst + 2 * v40;
        if (v36)
        {
          v48 = 0;
          v49 = 0;
          v44 = 0;
          a2 = v41;
        }
        else
        {
          v42 = 2 * v40;
          v43 = __dst;
          while (*v43 != v39)
          {
            v43 += 2;
            v42 -= 2;
            if (!v42)
              goto LABEL_44;
          }
          *v43 = v38;
LABEL_44:
          v44 = 0;
          v45 = v8;
          a2 = v41;
          v46 = v41;
          do
          {
            if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
            {
              v47 = (char *)v8;
              if (v46 != (char *)__dst + 2 * HIDWORD(v94))
              {
                v91 = v41;
                if ((_BYTE *)v8 == a2)
                {
                  v47 = v46;
                }
                else
                {
                  v89 = v45 - (_QWORD)a2;
                  v90 = v46;
                  memmove(v46, a2, v45 - (_QWORD)a2);
                  v47 = &v90[v89];
                }
                v41 = v91;
              }
              a2 = (_BYTE *)(v8 + 2);
              ++v44;
              v46 = v47;
            }
            v8 += 2;
            v45 += 2;
          }
          while (v8 < (unint64_t)v41);
          v8 = (unint64_t)__dst;
          v48 = HIDWORD(v94);
          v49 = HIDWORD(v94);
          v41 = v46;
        }
        v50 = (_BYTE *)(v8 + 2 * v48);
        if (a2 != v50)
        {
          memmove(v41, a2, v50 - a2);
          v49 = HIDWORD(v94);
        }
        v19 = (v49 - v44);
        goto LABEL_64;
      }
      v8 = 0;
      v29 = v19 <= 1 ? 1 : v19;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_115;
        if (((v21 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v30 == v8)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v8);
      if (v32 != v31)
        break;
LABEL_63:
      memmove(&v22[v8], &v22[v8 + 2], 2 * v23 - v8 - 2);
      v19 = (HIDWORD(v94) - 1);
LABEL_64:
      HIDWORD(v94) = v19;
LABEL_65:
      if (!(_DWORD)v19)
      {
        v51 = __dst;
        if (v95 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v94) = 0;
          WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_72;
      }
    }
    v33 = (char)v32;
    if ((char)v32 == 63)
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      if ((char)v31 != 31)
      {
        v37 = v31 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      v36 = v31 == 31 || v33 == 31;
      if (!v36)
      {
        v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v34 + 4 > v35)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v34 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v34) = v37;
        *(_DWORD *)(v9 + 200) += 4;
        v22 = (char *)__dst;
        v23 = HIDWORD(v94);
        goto LABEL_63;
      }
    }
    v37 = (char)v31 | (32 * v33) | 0x91000000;
    goto LABEL_60;
  }
  if ((_DWORD)v19)
    goto LABEL_16;
LABEL_72:
  if (v14 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v15, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v9, (v14 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v9, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&v92);
  *(_QWORD *)(a1 + 92) = v92;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_77:
    v61 = 0;
    LOBYTE(v62) = 0;
    goto LABEL_78;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, v59, v60, a5, a6, a7, a8);
    goto LABEL_77;
  }
  LOBYTE(v8) = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v97 = 0;
  v15 = *(_QWORD *)(v9 + 3960);
  v19 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
  if ((v19 & 1) != 0)
    goto LABEL_116;
  while (1)
  {
    v96 = v19;
    v15 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v15, &v96, (uint64_t *)&__dst, &v97, a5, a6, a7, a8);
    if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v96 & 0xFFFFFFFF8, v58, v59, v60, a5, a6, a7, a8);
    if ((v15 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, v59, v60, a5, a6, a7, a8);
      LOBYTE(v62) = 0;
      v61 = 0;
      goto LABEL_100;
    }
    v71 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v71)
      break;
    v19 = 0;
    v72 = 16 * v71;
    v73 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v75 = *v73;
      v73 += 16;
      v74 = v75;
      if ((v75 & 0x40) != 0)
        break;
      v19 |= 1 << v74;
      v72 -= 16;
      if (!v72)
        goto LABEL_109;
    }
LABEL_115:
    __break(1u);
LABEL_116:
    v84 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v85 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v84;
      *(_DWORD *)(v88 + 8) = v85;
      v87 = 1;
      v84 = v88;
    }
    else
    {
      v87 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v19 = v84 | v87;
  }
  v19 = 0;
LABEL_109:
  if ((v8 & 0x40) != 0)
    goto LABEL_115;
  v61 = 1;
  v76 = v19 | (1 << v8);
  if ((v76 & 2) != 0)
  {
    v77 = (unsigned __int16)~(_WORD)v76 & 0xFFFE;
    if (v77)
    {
      v62 = __clz(__rbit64(v77));
      if (v62 == 1)
      {
        v61 = 1;
      }
      else
      {
        if (v62 == 31)
        {
          v80 = (unsigned int *)(v9 + 200);
          v79 = *(_DWORD *)(v9 + 200);
          v81 = (JSC::AssemblerBuffer *)(v9 + 56);
          v82 = v79 + 4;
          v83 = *(_DWORD *)(v9 + 192);
          v78 = -1862270913;
        }
        else
        {
          v78 = v62 | 0xAA0103E0;
          v80 = (unsigned int *)(v9 + 200);
          v79 = *(_DWORD *)(v9 + 200);
          v81 = (JSC::AssemblerBuffer *)(v9 + 56);
          v82 = v79 + 4;
          v83 = *(_DWORD *)(v9 + 192);
        }
        if (v82 > v83)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)v58, v59, v60, a5, a6, a7, a8);
          v79 = *v80;
        }
        *(_DWORD *)(*(_QWORD *)v81 + v79) = v78;
        *v80 += 4;
        v61 = 1;
      }
    }
    else
    {
      v61 = 1;
      LOBYTE(v62) = -1;
    }
  }
  else
  {
    LOBYTE(v62) = 1;
  }
LABEL_100:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v58, v59, v60, a5, a6, a7, a8);
LABEL_78:
  v63 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v63 == 31)
    {
      v64 = -1862270945;
    }
    else if (v63 == 255)
    {
      v64 = -1442774017;
    }
    else
    {
      v64 = v63 | 0xAA0003E0;
    }
    v66 = (unsigned int *)(v9 + 200);
    v65 = *(_DWORD *)(v9 + 200);
    if (v65 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v58, v59, v60, a5, a6, a7, a8);
      v65 = *v66;
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v65) = v64;
    *v66 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v67 = *(_DWORD *)(a1 + 116);
    if (v67)
    {
      v68 = v67 - 1;
      v69 = 16 * (v67 - 1);
      while (*(_DWORD *)(a1 + 116) > v68)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 104) + v69, v59, v60, a5, a6, a7, a8);
        v69 -= 16;
        if (--v68 == -1)
          goto LABEL_91;
      }
      __break(0xC471u);
LABEL_140:
      JUMPOUT(0x197C41808);
    }
LABEL_91:
    *(_BYTE *)(v9 + 5768) = 0;
  }
  if (v61 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, (char)v62, v59, v60, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v9, v59, v60, a5, a6, a7, a8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3572F10;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3572F10;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  JSC::AssemblerBuffer *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void *__dst;
  uint64_t v102;
  _WORD v103[4];
  unint64_t v104;
  unsigned int *v105;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = *(unsigned __int8 *)(a1 + 153);
  v23 = *(unsigned __int8 *)(a1 + 154);
  __dst = v103;
  v102 = 3;
  if (v21 == 1)
  {
    v24 = 0;
  }
  else
  {
    v103[0] = v21 | 0x100;
    v24 = 1;
    HIDWORD(v102) = 1;
  }
  if (v22 != 2)
  {
    v103[v24++] = v22 | 0x200;
    HIDWORD(v102) = v24;
  }
  if (v23 != 3)
  {
    v103[v24++] = v23 | 0x300;
    HIDWORD(v102) = v24;
LABEL_12:
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = (char *)__dst;
      v28 = v24;
      do
      {
        if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
          goto LABEL_120;
        v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
        v25 += 2;
      }
      while (2 * v24 != v25);
      v29 = 0;
      do
      {
        v30 = *((_BYTE *)__dst + v29) & 0x7F;
        if (v30 >= 0x40)
          goto LABEL_120;
        v26 &= ~(1 << v30);
        v29 += 2;
      }
      while (2 * v24 != v29);
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.i32[0] + v32)
        break;
      v44 = *(_BYTE *)__dst;
      v45 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v45, v12, v13, v14, v15, v16);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v102) - 2);
      v46 = (HIDWORD(v102) - 1);
      v42 = HIDWORD(v102) == 1;
      HIDWORD(v102) = v46;
      v47 = (unsigned __int8 *)__dst;
      v48 = (unsigned __int8 *)__dst + 2 * v46;
      if (v42)
      {
        v55 = 0;
        v56 = 0;
        v51 = 0;
        v10 = v48;
      }
      else
      {
        v49 = 2 * v46;
        v50 = __dst;
        while (*v50 != v45)
        {
          v50 += 2;
          v49 -= 2;
          if (!v49)
            goto LABEL_40;
        }
        *v50 = v44;
LABEL_40:
        v51 = 0;
        v52 = v47;
        v10 = v48;
        v53 = (char *)v48;
        do
        {
          if (*v47 == v47[1])
          {
            v54 = v47;
            if (v53 != (char *)__dst + 2 * HIDWORD(v102))
            {
              v99 = (char *)v48;
              if (v47 == v10)
              {
                v54 = (unsigned __int8 *)v53;
              }
              else
              {
                v97 = v52 - v10;
                v98 = v53;
                memmove(v53, v10, v52 - v10);
                v54 = (unsigned __int8 *)&v98[v97];
              }
              v48 = (unsigned __int8 *)v99;
            }
            v10 = v47 + 2;
            ++v51;
            v53 = (char *)v54;
          }
          v47 += 2;
          v52 += 2;
        }
        while (v47 < v48);
        v47 = (unsigned __int8 *)__dst;
        v55 = HIDWORD(v102);
        v56 = HIDWORD(v102);
        v48 = (unsigned __int8 *)v53;
      }
      v57 = &v47[2 * v55];
      if (v10 != v57)
      {
        memmove(v48, v10, v57 - v10);
        v56 = HIDWORD(v102);
      }
      v24 = v56 - v51;
LABEL_60:
      HIDWORD(v102) = v24;
LABEL_61:
      if (!v24)
      {
        v58 = __dst;
        if (v103 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v102) = 0;
          WTF::fastFree((unint64_t)v58, v10, v11, v12, v13, v14, v15, v16);
        }
        goto LABEL_68;
      }
    }
    v34 = 0;
    if (v24 <= 1)
      v35 = 1;
    else
      v35 = v24;
    v36 = 2 * v35;
    while (1)
    {
      v37 = *((unsigned __int8 *)__dst + v34 + 1);
      if ((v37 & 0x7Fu) >= 0x40)
        goto LABEL_120;
      if (((v26 >> (v37 & 0x7F)) & 1) != 0)
        break;
      v34 += 2;
      if (v36 == v34)
        goto LABEL_61;
    }
    v38 = *((unsigned __int8 *)__dst + v34);
    if (v38 == v37)
    {
LABEL_59:
      memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
      v24 = HIDWORD(v102) - 1;
      goto LABEL_60;
    }
    v39 = (char)v38;
    if ((char)v38 == 63)
    {
      v40 = *(_DWORD *)(a2 + 200);
      v41 = *(_DWORD *)(a2 + 192);
      if ((char)v37 != 31)
      {
        v43 = v37 & 0x1F | 0xD2800000;
        goto LABEL_56;
      }
    }
    else
    {
      v40 = *(_DWORD *)(a2 + 200);
      v41 = *(_DWORD *)(a2 + 192);
      v42 = v37 == 31 || v39 == 31;
      if (!v42)
      {
        v43 = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
        if (v40 + 4 > v41)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          v40 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v43;
        *(_DWORD *)(a2 + 200) += 4;
        v27 = (char *)__dst;
        v28 = HIDWORD(v102);
        goto LABEL_59;
      }
    }
    v43 = (char)v37 | (32 * v39) | 0x91000000;
    goto LABEL_56;
  }
  if (v24)
    goto LABEL_12;
LABEL_68:
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v12, v13, v14, v15, v16);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v59, v60, v61, v62, v63, v64, (int *)&v100);
  *(_QWORD *)(a1 + 64) = v100;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_73;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
LABEL_73:
    v65 = 0;
    LOBYTE(v66) = 0;
    goto LABEL_74;
  }
  v74 = *(_BYTE *)(a1 + 74);
  __dst = (void *)2;
  v105 = 0;
  v75 = *(_QWORD *)(a2 + 3960);
  v76 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v76 & 1) != 0)
  {
    v84 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
    if ((v76 & 2) != 0
      || ((v85 = *(unsigned int *)((v76 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v96 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v96 = v84;
      *(_DWORD *)(v96 + 8) = v85;
      v87 = 1;
      v84 = v96;
    }
    else
    {
      v87 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v76 = v84 | v87;
  }
  v104 = v76;
  v77 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v75, &v104, (uint64_t *)&__dst, &v105, v13, v14, v15, v16);
  if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v104 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v77 & 1) != 0)
  {
    v78 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v78)
    {
      v79 = 0;
      v80 = 16 * v78;
      v81 = (char *)(*(_QWORD *)(a1 + 80) + 2);
      while (1)
      {
        v83 = *v81;
        v81 += 16;
        v82 = v83;
        if ((v83 & 0x40) != 0)
          break;
        v79 |= 1 << v82;
        v80 -= 16;
        if (!v80)
          goto LABEL_114;
      }
    }
    else
    {
      v79 = 0;
LABEL_114:
      if ((v74 & 0x40) == 0)
      {
        v65 = 1;
        v88 = v79 | (1 << v74);
        LOBYTE(v66) = 1;
        if ((v88 & 2) == 0)
          goto LABEL_96;
        v89 = (unsigned __int16)~(_WORD)v88 & 0xFFFE;
        if (v89)
        {
          v66 = __clz(__rbit64(v89));
          if (v66 == 1)
          {
            v65 = 1;
          }
          else
          {
            if (v66 == 31)
            {
              v92 = (unsigned int *)(a2 + 200);
              v91 = *(_DWORD *)(a2 + 200);
              v93 = (JSC::AssemblerBuffer *)(a2 + 56);
              v94 = v91 + 4;
              v95 = *(_DWORD *)(a2 + 192);
              v90 = -1862270913;
            }
            else
            {
              v90 = v66 | 0xAA0103E0;
              v92 = (unsigned int *)(a2 + 200);
              v91 = *(_DWORD *)(a2 + 200);
              v93 = (JSC::AssemblerBuffer *)(a2 + 56);
              v94 = v91 + 4;
              v95 = *(_DWORD *)(a2 + 192);
            }
            if (v94 > v95)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v93, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              v91 = *v92;
            }
            *(_DWORD *)(*(_QWORD *)v93 + v91) = v90;
            *v92 += 4;
            v65 = 1;
          }
          goto LABEL_96;
        }
LABEL_121:
        v65 = 1;
        LOBYTE(v66) = -1;
        goto LABEL_96;
      }
    }
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
  LOBYTE(v66) = 0;
  v65 = 0;
LABEL_96:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
LABEL_74:
  v67 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v67 == 31)
    {
      v68 = -1862270945;
    }
    else if (v67 == 255)
    {
      v68 = -1442774017;
    }
    else
    {
      v68 = v67 | 0xAA0003E0;
    }
    v70 = (unsigned int *)(a2 + 200);
    v69 = *(_DWORD *)(a2 + 200);
    if (v69 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
      v69 = *v70;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = v68;
    *v70 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_88;
  v71 = *(_DWORD *)(a1 + 92);
  if (!v71)
  {
LABEL_87:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_88:
    if (v65)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v66, v11, v12, v13, v14, v15, v16);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v11, v12, v13, v14, v15, v16);
    return;
  }
  v72 = v71 - 1;
  v73 = 16 * (v71 - 1);
  while (*(_DWORD *)(a1 + 92) > v72)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v73, v11, v12, v13, v14, v15, v16);
    v73 -= 16;
    if (--v72 == -1)
      goto LABEL_87;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3572F70;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3572F70;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  JSC::AssemblerBuffer *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *__dst;
  int v97;
  unsigned int v98;
  _WORD v99[4];
  unint64_t v100;
  unsigned int *v101;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v19;
        v18 += 16;
      }
      while (v19 < *(unsigned int *)(a1 + 92));
    }
  }
  v20 = *(unsigned int *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(unsigned __int8 *)(a1 + 152);
  v23 = *(unsigned __int8 *)(a1 + 153);
  __dst = v99;
  v97 = 2;
  if (v22 == 1)
  {
    if (v23 == 2)
      goto LABEL_65;
    v24 = 0;
  }
  else
  {
    v99[0] = v22 | 0x100;
    v24 = 1;
    v98 = 1;
    if (v23 == 2)
      goto LABEL_11;
  }
  v99[v24++] = v23 | 0x200;
  v98 = v24;
  do
  {
LABEL_11:
    v25 = 0;
    v26 = 0;
    v27 = (char *)__dst;
    v28 = v24;
    do
    {
      if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
        goto LABEL_108;
      v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
      v25 += 2;
    }
    while (2 * v24 != v25);
    v29 = 0;
    do
    {
      v30 = *((_BYTE *)__dst + v29) & 0x7F;
      if (v30 >= 0x40)
        goto LABEL_108;
      v26 &= ~(1 << v30);
      v29 += 2;
    }
    while (2 * v24 != v29);
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.i32[0] + v32)
    {
      v34 = 0;
      if (v24 <= 1)
        v35 = 1;
      else
        v35 = v24;
      v36 = 2 * v35;
      while (1)
      {
        v37 = *((unsigned __int8 *)__dst + v34 + 1);
        if ((v37 & 0x7Fu) >= 0x40)
          goto LABEL_108;
        if (((v26 >> (v37 & 0x7F)) & 1) != 0)
          break;
        v34 += 2;
        if (v36 == v34)
          goto LABEL_61;
      }
      v38 = *((unsigned __int8 *)__dst + v34);
      if (v38 == v37)
      {
LABEL_59:
        memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
        v24 = v98 - 1;
        goto LABEL_60;
      }
      v39 = (char)v38;
      if ((char)v38 == 63)
      {
        v40 = *(_DWORD *)(a2 + 200);
        v41 = *(_DWORD *)(a2 + 192);
        if ((char)v37 != 31)
        {
          LODWORD(v8) = v37 & 0x1F | 0xD2800000;
          goto LABEL_56;
        }
      }
      else
      {
        v40 = *(_DWORD *)(a2 + 200);
        v41 = *(_DWORD *)(a2 + 192);
        v42 = v37 == 31 || v39 == 31;
        if (!v42)
        {
          LODWORD(v8) = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
          if (v40 + 4 > v41)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v40 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v8;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = (char *)__dst;
          v28 = v98;
          goto LABEL_59;
        }
      }
      LODWORD(v8) = (char)v37 | (32 * v39) | 0x91000000;
      goto LABEL_56;
    }
    v43 = *(_BYTE *)__dst;
    v44 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v44, v13, v14, v15, v16, v17);
    memmove(__dst, (char *)__dst + 2, 2 * v98 - 2);
    v45 = v98 - 1;
    v42 = v98 == 1;
    v98 = v45;
    v46 = (unsigned __int8 *)__dst;
    v47 = (unsigned __int8 *)__dst + 2 * v45;
    if (v42)
    {
      v53 = 0;
      v54 = 0;
      LODWORD(v8) = 0;
      v11 = v47;
    }
    else
    {
      v48 = 2 * v45;
      v49 = __dst;
      while (*v49 != v44)
      {
        v49 += 2;
        v48 -= 2;
        if (!v48)
          goto LABEL_39;
      }
      *v49 = v43;
LABEL_39:
      LODWORD(v8) = 0;
      v50 = v46;
      v11 = v47;
      v51 = (char *)v47;
      do
      {
        if (*v46 == v46[1])
        {
          v52 = v46;
          if (v51 != (char *)__dst + 2 * v98)
          {
            v94 = (char *)v47;
            if (v46 == v11)
            {
              v52 = (unsigned __int8 *)v51;
            }
            else
            {
              v92 = v50 - v11;
              v93 = v51;
              memmove(v51, v11, v50 - v11);
              v52 = (unsigned __int8 *)&v93[v92];
            }
            v47 = (unsigned __int8 *)v94;
          }
          v11 = v46 + 2;
          LODWORD(v8) = v8 + 1;
          v51 = (char *)v52;
        }
        v46 += 2;
        v50 += 2;
      }
      while (v46 < v47);
      v46 = (unsigned __int8 *)__dst;
      v53 = v98;
      v54 = v98;
      v47 = (unsigned __int8 *)v51;
    }
    v55 = &v46[2 * v53];
    if (v11 != v55)
    {
      memmove(v47, v11, v55 - v11);
      v54 = v98;
    }
    v24 = v54 - v8;
LABEL_60:
    v98 = v24;
LABEL_61:
    ;
  }
  while (v24);
  v56 = __dst;
  if (v99 != __dst && __dst)
  {
    __dst = 0;
    v97 = 0;
    WTF::fastFree((unint64_t)v56, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_65:
  if (v20 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v21, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v20 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v57, v58, v59, v60, v61, v62, (int *)&v95);
  *(_QWORD *)(a1 + 64) = v95;
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_70:
    LODWORD(v8) = 0;
    LOBYTE(v63) = 0;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
    goto LABEL_70;
  }
  v71 = *(_BYTE *)(a1 + 74);
  __dst = (void *)2;
  v101 = 0;
  v72 = *(_QWORD *)(a2 + 3960);
  v73 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v73 & 1) != 0)
  {
    v8 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
    if ((v73 & 2) != 0
      || ((v88 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v91 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v91 = v8;
      *(_DWORD *)(v91 + 8) = v88;
      v90 = 1;
      v8 = v91;
    }
    else
    {
      v90 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
      v8 = v88 << 36;
    }
    v73 = v8 | v90;
  }
  v100 = v73;
  v74 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v72, &v100, (uint64_t *)&__dst, &v101, v14, v15, v16, v17);
  if ((v100 & 1) != 0 && (v100 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v100 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v74 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
    LOBYTE(v63) = 0;
    LODWORD(v8) = 0;
    goto LABEL_93;
  }
  v75 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = 16 * v75;
    v78 = (char *)(*(_QWORD *)(a1 + 80) + 2);
    while (1)
    {
      v80 = *v78;
      v78 += 16;
      v79 = v80;
      if ((v80 & 0x40) != 0)
        goto LABEL_108;
      v76 |= 1 << v79;
      v77 -= 16;
      if (!v77)
        goto LABEL_102;
    }
  }
  v76 = 0;
LABEL_102:
  if ((v71 & 0x40) != 0)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  LODWORD(v8) = 1;
  v81 = v76 | (1 << v71);
  if ((v81 & 2) == 0)
  {
LABEL_109:
    LOBYTE(v63) = v8;
    goto LABEL_93;
  }
  v82 = (unsigned __int16)~(_WORD)v81 & 0xFFFE;
  if (v82)
  {
    v63 = __clz(__rbit64(v82));
    if (v63 == 1)
    {
      LODWORD(v8) = 1;
    }
    else
    {
      if (v63 == 31)
      {
        v8 = a2 + 200;
        v84 = *(_DWORD *)(a2 + 200);
        v85 = (JSC::AssemblerBuffer *)(a2 + 56);
        v86 = v84 + 4;
        v87 = *(_DWORD *)(a2 + 192);
        v83 = -1862270913;
      }
      else
      {
        v83 = v63 | 0xAA0103E0;
        v8 = a2 + 200;
        v84 = *(_DWORD *)(a2 + 200);
        v85 = (JSC::AssemblerBuffer *)(a2 + 56);
        v86 = v84 + 4;
        v87 = *(_DWORD *)(a2 + 192);
      }
      if (v86 > v87)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v85, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
        v84 = *(_DWORD *)v8;
      }
      *(_DWORD *)(*(_QWORD *)v85 + v84) = v83;
      *(_DWORD *)v8 += 4;
      LODWORD(v8) = 1;
    }
  }
  else
  {
    LODWORD(v8) = 1;
    LOBYTE(v63) = -1;
  }
LABEL_93:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
LABEL_71:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      v65 = -1862270945;
    }
    else if (v64 == 255)
    {
      v65 = -1442774017;
    }
    else
    {
      v65 = v64 | 0xAA0003E0;
    }
    v67 = (unsigned int *)(a2 + 200);
    v66 = *(_DWORD *)(a2 + 200);
    if (v66 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v66 = *v67;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = v65;
    *v67 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v68 = *(_DWORD *)(a1 + 92);
  if (!v68)
  {
LABEL_84:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_85:
    if ((_DWORD)v8)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v63, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v69 = v68 - 1;
  v70 = 16 * (v68 - 1);
  while (*(_DWORD *)(a1 + 92) > v69)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v70, v12, v13, v14, v15, v16, v17);
    v70 -= 16;
    if (--v69 == -1)
      goto LABEL_84;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::Node::hasArrayMode(JSC::DFG::Node *this)
{
  int v1;
  uint64_t result;

  v1 = *((unsigned __int16 *)this + 9) - 92;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 9:
    case 10:
    case 11:
    case 12:
    case 48:
    case 49:
    case 53:
    case 54:
    case 55:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 110:
    case 111:
    case 112:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 123:
    case 135:
    case 136:
    case 137:
    case 172:
    case 241:
    case 242:
    case 292:
    case 294:
    case 296:
    case 297:
    case 298:
    case 299:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

void WTF::toCString<char [25],WTF::ASCIILiteral>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  _BYTE *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = off_1E3572250;
  v27 = v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", a1);
  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  if (v5)
  {
    v9 = v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v23, v8);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v23 = v10;
    v24 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
  v26[5]((WTF::StringPrintStream *)&v26);
  v26[5]((WTF::StringPrintStream *)&v26);
  v19 = v27;
  v18 = v28;
  *a3 = 0;
  if (!v19)
  {
    v22 = 0;
LABEL_13:
    WTF::fastFree(v22, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if (v18 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197C42B68);
  }
  v20 = WTF::fastMalloc((WTF *)(v18 + 17));
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v18;
  *a3 = v20;
  v21 = v20 + 16;
  memcpy((void *)(v20 + 16), v19, v18);
  *(_BYTE *)(v21 + v18) = 0;
  v22 = (unint64_t)v27;
  if (v27 != v29)
    goto LABEL_13;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *casual;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = 4 * v9;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v12)
    {
      v13 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0x68)
      {
        v14 = 23 * v13 + 7;
      }
      else
      {
        if (v9 > 0x9C4)
          goto LABEL_15;
        v14 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v13 + 626);
        if (*(_DWORD *)(v12 + 8052) <= v14)
          goto LABEL_15;
      }
      v16 = v12 + 8 * v14;
      v17 = v16 + 8064;
      *(_BYTE *)(v16 + 8064) = 1;
      v18 = *(unsigned int *)(v16 + 8080);
      if ((_DWORD)v18)
      {
        *(_DWORD *)(v17 + 16) = v18 - *(_DWORD *)(v17 + 20);
        casual = (void *)(*(_QWORD *)(v17 + 8) - v18);
      }
      else
      {
        v26 = *(_QWORD *)(v17 + 40);
        v27 = *(_QWORD *)(v17 + 24);
        if (!v26)
        {
          if (*(_BYTE *)(v17 + 5) == 6)
          {
            v29 = *(unsigned int *)(v17 + 32);
            v30 = *(_DWORD *)(v17 + 36);
            if (v29 < v30)
            {
              *(_QWORD *)(v17 + 8 * v29 + 56) = 0;
              v31 = (unint64_t *)(8 * v14 + 8 * v29 + v12 + 8128);
              v32 = v30 - 1 - v29;
              while (v32)
              {
                v27 += 1024;
                v34 = *v31++;
                v33 = v34;
                LODWORD(v29) = v29 + 1;
                --v32;
                if (v34)
                {
                  v26 = __rbit64(v33);
                  *(_DWORD *)(v17 + 32) = v29;
                  *(_QWORD *)(v17 + 24) = v27;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v17 + 32) = v30;
            }
          }
          *(_BYTE *)v17 = 0;
          goto LABEL_15;
        }
LABEL_26:
        v28 = __clz(v26);
        *(_QWORD *)(v17 + 40) = v26 & ~(0x8000000000000000 >> v28);
        casual = (void *)(v27 + 16 * v28);
      }
      *(_BYTE *)v17 = 0;
LABEL_20:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, v5, 4 * v10);
      if (v5)
      {
        if (*(const void **)v4 == v5)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
      }
      return v3;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 30))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 4 * v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<char [33],int,char [3],unsigned int,char [19],unsigned int,char [2]>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "SpeculativeJIT generating Node @");
  WTF::PrintStream::printf(v8, "%d", *a1);
  WTF::PrintStream::printf(v8, "%s", " (");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", ") at JIT offset 0x");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

#error "197C42F64: too big function (funcsize=0)"

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdges(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  WTF::PrintStream *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int *v34;
  const char *v35;
  WTF::PrintStream *v36;
  WTF::PrintStream *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  WTF::PrintStream *v50;
  const char *v51;
  unint64_t v52;
  unint64_t v53;
  JSC::DFG::Graph *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  WTF::PrintStream *v97;
  WTF::PrintStream *v98;
  WTF::PrintStream *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  WTF::PrintStream *v104;
  const char *v105;
  WTF::PrintStream *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  size_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  const char *v117;
  int v118;
  WTF::PrintStream *v119;
  const char *v120;
  size_t v121;
  uint64_t v122;
  WTF::PrintStream *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  void *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  size_t v161;
  uint64_t v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  unint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  int v224;
  unsigned int *v225;
  WTF::PrintStream *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  int v232;
  _QWORD *v233;
  int v234;
  WTF::PrintStream *v235;
  const char *v236;
  WTF::PrintStream *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  size_t v244;
  unint64_t casual;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  size_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  size_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unint64_t *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  WTF::PrintStream *v347;
  WTF::PrintStream *v348;
  WTF::PrintStream *v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  const char *v353;
  WTF::PrintStream *v354;
  int v355;
  const char *v356;
  char v357;
  void **p_ptr;
  void *ptr;
  void *__src;
  size_t __n[2];
  _BYTE v362[128];
  uint64_t v363;

  v9 = result;
  v363 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    v39 = *(_DWORD *)(a2 + 32);
    if (v39 + *(_QWORD *)(a2 + 24) > *(_QWORD *)(a2 + 24))
    {
      v40 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(result + 8);
      if (*(unsigned int *)(v41 + 164) <= v40)
        v42 = *(_QWORD *)(a2 + 24);
      else
        v42 = *(unsigned int *)(v41 + 164);
      while (1)
      {
        if (v42 == v40)
        {
          __break(0xC471u);
          JUMPOUT(0x197C65F18);
        }
        v43 = *(_QWORD *)(*(_QWORD *)(v41 + 152) + 8 * v40);
        if ((v43 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          p_ptr = *(void ***)(*(_QWORD *)(v41 + 152) + 8 * v40);
          v356 = (const char *)a2;
          if (*(_WORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 386)
          {
            if (((v43 >> 50) & 0x3F) != 0 || *(_WORD *)(a2 + 18) != 30)
            {
              LOBYTE(v353) = (v43 >> 50) & 0x3F;
              v70 = *(_QWORD *)(result + 24);
              v71 = (*(_DWORD *)(a2 + 72) + ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFELL) + 0x30));
              if (*(_DWORD *)(v70 + 52) <= v71)
              {
                __break(0xC471u);
                JUMPOUT(0x197C65F20);
              }
              v354 = *(WTF::PrintStream **)(*(_QWORD *)(v70 + 40) + 32 * v71 + 8);
              WTF::toCString<char [32],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [45],JSC::DFG::UseKind,char [13],JSC::SpeculationDump>("Tuple edge verification error: ", (uint64_t *)&v356, "->", (JSC::DFG::Edge *)&p_ptr, " was expected to have Untyped use kind (had ", (unsigned __int8 *)&v353, "). Has type ", &v354, (uint64_t *)&ptr);
              if (ptr)
                v72 = (char *)ptr + 16;
              else
                v72 = 0;
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v41, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h", (const char *)0xB5, "void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]", v72);
              v78 = (unint64_t)ptr;
              ptr = 0;
              if (!v78)
              {
LABEL_105:
                __break(0xC471u);
                JUMPOUT(0x197C65C88);
              }
              if (*(_DWORD *)v78 != 1)
              {
                --*(_DWORD *)v78;
                goto LABEL_105;
              }
              v96 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v96)
              {
                pas_try_deallocate_slow_no_cache(v78, (uint64_t)&bmalloc_heap_config, 1);
                goto LABEL_105;
              }
              if (v78 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v78 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v78)) & 1) == 0)
              {
                if (v78 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v78 >> 24)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((v78 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(v78) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v73 == 1)
                    goto LABEL_411;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v96, v78, 1, v73, v74, v75, v76, v77);
                goto LABEL_105;
              }
LABEL_411:
              v219 = *(unsigned int *)(v96 + 8000);
              if (v219 < 0x3E7)
              {
                *(_QWORD *)(v96 + 8 * v219) = v78 | 0x5000000000000;
                *(_DWORD *)(v96 + 8000) = v219 + 1;
              }
              else
              {
                pas_thread_local_cache_append_deallocation_slow(v96, v78, (os_unfair_lock_s *)5, v73, v74, v75, v76, v77);
              }
              goto LABEL_105;
            }
          }
          else
          {
            v44 = *(_QWORD *)(result + 24);
            v45 = *(_QWORD *)(v44 + 8);
            v46 = (_QWORD *)(v45 + 8);
            if ((v43 & 1) != 0)
              v46 = (_QWORD *)(v45 + 24);
            v47 = (v43 >> 50) & 0x3F;
            if (v47 >= 0x35)
            {
              __break(0xC471u);
              JUMPOUT(0x197C65E18);
            }
            v48 = *(unsigned int *)((v43 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            if ((qword_199124118[v47] & *(_QWORD *)(*v46 + 32 * v48 + 8)) != 0)
            {
              v349 = (WTF::PrintStream *)qword_199123F70[v47];
              v220 = (uint64_t *)(v45 + 24);
              if ((v43 & 1) == 0)
                v220 = (uint64_t *)(v45 + 8);
              v221 = *v220;
              v222 = *v220 + 32 * v48;
              v223 = *(_DWORD *)(v44 + 88);
              v225 = (unsigned int *)(v222 + 20);
              v224 = *(_DWORD *)(v222 + 20);
              if (v223 == v224)
              {
LABEL_418:
                v226 = *(WTF::PrintStream **)(v222 + 8);
                v227 = *(unsigned int *)((v43 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                v228 = (uint64_t *)(v45 + 24);
                if ((v43 & 1) == 0)
                  v228 = (uint64_t *)(v45 + 8);
                v229 = *v228;
                v230 = *v228 + 32 * v227;
                v231 = *(_DWORD *)(v44 + 88);
                v232 = *(_DWORD *)(v230 + 20);
                if (v231 != v232)
                {
                  if ((*(_QWORD *)(v230 + 8) & 0x2800FFFFFFF7) == 0)
                    goto LABEL_422;
                  if ((v232 ^ v231) >= 2)
                  {
                    v275 = *(_QWORD *)v230;
                    if (*(_QWORD *)v230 != 4)
                    {
                      *(_QWORD *)v230 = v275 | 2;
                      v276 = v275 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v275 & 1) != 0)
                      {
                        v277 = 8 * *(unsigned int *)v276;
                        do
                        {
                          if (!v277)
                            goto LABEL_525;
                          v278 = *(_QWORD *)(v276 + v277);
                          if ((*(_BYTE *)(v278 + 19) & 0xC) != 0)
                            break;
                          v279 = *(_QWORD *)(v278 + 96);
                          v280 = (v279 & 1) != 0 ? (v279 >> 1) & 3 : *(unsigned __int8 *)(v279 + 4);
                          v277 -= 8;
                        }
                        while (v280 != 2);
                        v304 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                        if (!v304)
                        {
                          pas_try_deallocate_slow_no_cache(v275 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                          goto LABEL_524;
                        }
                        if (!(v276 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v275 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v275)) & 1) != 0)
                        {
LABEL_586:
                          v325 = *(unsigned int *)(v304 + 8000);
                          if (v325 < 0x3E7)
                          {
                            *(_QWORD *)(v304 + 8 * v325) = v276 | 0x5000000000000;
                            *(_DWORD *)(v304 + 8000) = v325 + 1;
                          }
                          else
                          {
                            pas_thread_local_cache_append_deallocation_slow(v304, v276, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                          }
                        }
                        else
                        {
                          v323 = v275 >> 24;
                          v324 = (v275 >> 24) - *off_1ECF425F8;
                          if (v323 < *off_1ECF425F8 || off_1ECF425F8[1] <= v323)
                          {
                            a4 = 0;
                          }
                          else
                          {
                            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v324 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v324 & 0xF))) & 3;
                            if ((_DWORD)a4 == 1)
                              goto LABEL_586;
                          }
                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v304, v276, 1, a4, a5, a6, a7, a8);
                        }
LABEL_524:
                        *(_QWORD *)v230 = 4;
                      }
                      else if (v276)
                      {
                        if ((*(_BYTE *)(v276 + 19) & 0xC) != 0)
                          goto LABEL_524;
                        v339 = *(_QWORD *)(v276 + 96);
                        v340 = (v339 & 1) != 0 ? (v339 >> 1) & 3 : *(unsigned __int8 *)(v339 + 4);
                        if (v340 == 2)
                          goto LABEL_524;
                      }
                    }
LABEL_525:
                    *(_DWORD *)(v229 + 32 * v227 + 16) = -21020677;
                  }
                  if ((v231 & 1) != 0)
                    *(_QWORD *)v230 &= ~2uLL;
LABEL_422:
                  *(_DWORD *)(v230 + 20) = v231;
                }
                ptr = off_1E3572250;
                __src = v362;
                v233 = (_QWORD *)(v230 + 8);
                *(_OWORD *)__n = xmmword_199122F80;
                v362[0] = 0;
                WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "Edge verification error: ");
                if (a2)
                {
                  v234 = *(_DWORD *)(a2 + 20);
                  v235 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                  WTF::PrintStream::printf(v235, "%s", "D@");
                  WTF::PrintStream::printf(v235, "%u", v234);
                  (*((void (**)(void **))ptr + 5))(&ptr);
                  if ((*(_DWORD *)(a2 + 56) & 7) != 3)
                  {
                    if ((*(_DWORD *)(a2 + 56) & 7) == 5)
                    {
                      v236 = "<Int52>";
                      goto LABEL_433;
                    }
LABEL_434:
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "->");
                    JSC::DFG::Edge::dump((JSC::DFG::Edge *)&p_ptr, (WTF::PrintStream *)&ptr);
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " was expected to have type ");
                    JSC::dumpSpeculation((JSC *)&ptr, v349);
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " but has type ");
                    JSC::dumpSpeculation((JSC *)&ptr, v226);
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " (");
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%llu", *v233);
                    WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", ")");
                    (*((void (**)(void **))ptr + 5))(&ptr);
                    v243 = __src;
                    if (!__src)
                    {
                      casual = 0;
                      v246 = 0;
                      goto LABEL_438;
                    }
                    v244 = __n[0];
                    if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197C673DCLL);
                    }
                    v274 = __n[0] + 17;
                    if (__n[0] == -17)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197C67538);
                    }
                    v289 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                    if (v289)
                    {
                      v290 = (__n[0] + 32) >> 4;
                      if (__n[0] + 32 <= 0x1AF)
                      {
                        v291 = 23 * v290 + 7;
                      }
                      else
                      {
                        if ((__n[0] + 32) >> 5 > 0x138)
                          goto LABEL_548;
                        v291 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v290 + 626);
                        if (*(_DWORD *)(v289 + 8052) <= v291)
                          goto LABEL_548;
                      }
                      v306 = v289 + 8 * v291;
                      v307 = v306 + 8064;
                      *(_BYTE *)(v306 + 8064) = 1;
                      v308 = *(unsigned int *)(v306 + 8080);
                      if ((_DWORD)v308)
                      {
                        *(_DWORD *)(v307 + 16) = v308 - *(_DWORD *)(v307 + 20);
                        casual = *(_QWORD *)(v307 + 8) - v308;
                        goto LABEL_545;
                      }
                      v309 = *(_QWORD *)(v307 + 40);
                      v310 = *(_QWORD *)(v307 + 24);
                      if (v309)
                        goto LABEL_544;
                      if (*(_BYTE *)(v307 + 5) == 6)
                      {
                        v311 = *(unsigned int *)(v307 + 32);
                        v312 = *(_DWORD *)(v307 + 36);
                        if (v311 < v312)
                        {
                          *(_QWORD *)(v307 + 8 * v311 + 56) = 0;
                          v313 = (unint64_t *)(8 * v291 + 8 * v311 + v289 + 8128);
                          v314 = v312 - 1 - v311;
                          while (v314)
                          {
                            v310 += 1024;
                            v316 = *v313++;
                            v315 = v316;
                            LODWORD(v311) = v311 + 1;
                            --v314;
                            if (v316)
                            {
                              v309 = __rbit64(v315);
                              *(_DWORD *)(v307 + 32) = v311;
                              *(_QWORD *)(v307 + 24) = v310;
LABEL_544:
                              v317 = __clz(v309);
                              *(_QWORD *)(v307 + 40) = v309 & ~(0x8000000000000000 >> v317);
                              casual = v310 + 16 * v317;
LABEL_545:
                              *(_BYTE *)v307 = 0;
LABEL_549:
                              *(_DWORD *)casual = 1;
                              *(_QWORD *)(casual + 8) = v244;
                              memcpy((void *)(casual + 16), v243, v244);
                              *(_BYTE *)(casual + 16 + v244) = 0;
                              v246 = (unint64_t)__src;
                              if (__src == v362)
                              {
                                JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v41, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h", (const char *)0xBB, "void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]", (const char *)(casual + 16));
                                goto LABEL_551;
                              }
LABEL_438:
                              v247 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                              if (!v247)
                              {
                                pas_try_deallocate_slow_no_cache(v246, (uint64_t)&bmalloc_heap_config, 1);
                                goto LABEL_440;
                              }
                              if (!(v246 >> 43)
                                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v246 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v246)) & 1) != 0)
                              {
LABEL_488:
                                v288 = *(unsigned int *)(v247 + 8000);
                                if (v288 < 0x3E7)
                                {
                                  *(_QWORD *)(v247 + 8 * v288) = v246 | 0x5000000000000;
                                  *(_DWORD *)(v247 + 8000) = v288 + 1;
                                }
                                else
                                {
                                  pas_thread_local_cache_append_deallocation_slow(v247, v246, (os_unfair_lock_s *)5, v238, v239, v240, v241, v242);
                                }
                                goto LABEL_440;
                              }
                              if (v246 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v246 >> 24)
                              {
                                v238 = 0;
                              }
                              else
                              {
                                v238 = (*(_DWORD *)((char *)off_1ECF425F8
                                                  + ((((v246 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                  + 24) >> (2 * ((BYTE3(v246) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                if ((_DWORD)v238 == 1)
                                  goto LABEL_488;
                              }
                              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v247, v246, 1, v238, v239, v240, v241, v242);
LABEL_440:
                              if (casual)
                                v248 = (const char *)(casual + 16);
                              else
                                v248 = 0;
                              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v41, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h", (const char *)0xBB, "void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]", v248);
                              if (!casual)
                              {
LABEL_444:
                                v254 = (char)p_ptr;
                                v255 = *(_QWORD *)(v9 + 24);
                                v256 = *(_QWORD *)(v255 + 8);
                                v257 = (unint64_t)p_ptr & 0xFF00FFFFFFFFFFFELL;
                                v258 = *(unsigned int *)(((unint64_t)p_ptr & 0xFF00FFFFFFFFFFFELL) + 0x14);
                                v259 = (uint64_t *)(v256 + 24);
                                v260 = (uint64_t *)(v256 + 8);
                                if ((p_ptr & 1) == 0)
                                  v259 = v260;
                                v261 = *v259;
                                v262 = *v259 + 32 * v258;
                                v263 = *(_DWORD *)(v255 + 88);
                                v264 = *(_DWORD *)(v262 + 20);
                                if (v263 != v264)
                                {
                                  if ((*(_QWORD *)(v262 + 8) & 0x2800FFFFFFF7) == 0)
                                    goto LABEL_448;
                                  if ((v264 ^ v263) >= 2)
                                  {
                                    v292 = *(_QWORD *)v262;
                                    if (*(_QWORD *)v262 != 4)
                                    {
                                      *(_QWORD *)v262 = v292 | 2;
                                      v293 = v292 & 0xFFFFFFFFFFFFFFFCLL;
                                      if ((v292 & 1) != 0)
                                      {
                                        v294 = 8 * *(unsigned int *)v293;
                                        do
                                        {
                                          if (!v294)
                                            goto LABEL_572;
                                          v295 = *(_QWORD *)(v293 + v294);
                                          if ((*(_BYTE *)(v295 + 19) & 0xC) != 0)
                                            break;
                                          v296 = *(_QWORD *)(v295 + 96);
                                          v297 = (v296 & 1) != 0
                                               ? (v296 >> 1) & 3
                                               : *(unsigned __int8 *)(v296 + 4);
                                          v294 -= 8;
                                        }
                                        while (v297 != 2);
                                        v321 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                        if (!v321)
                                        {
                                          pas_try_deallocate_slow_no_cache(v292 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                                          goto LABEL_571;
                                        }
                                        if (!(v293 >> 43)
                                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                               + ((v292 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v292)) & 1) != 0)
                                        {
LABEL_609:
                                          v331 = *(unsigned int *)(v321 + 8000);
                                          if (v331 < 0x3E7)
                                          {
                                            *(_QWORD *)(v321 + 8 * v331) = v293 | 0x5000000000000;
                                            *(_DWORD *)(v321 + 8000) = v331 + 1;
                                          }
                                          else
                                          {
                                            pas_thread_local_cache_append_deallocation_slow(v321, v293, (os_unfair_lock_s *)5, v249, v250, v251, v252, v253);
                                          }
                                        }
                                        else
                                        {
                                          v329 = v292 >> 24;
                                          v330 = (v292 >> 24) - *off_1ECF425F8;
                                          if (v329 < *off_1ECF425F8 || off_1ECF425F8[1] <= v329)
                                          {
                                            v249 = 0;
                                          }
                                          else
                                          {
                                            v249 = (*(_DWORD *)((char *)off_1ECF425F8
                                                              + ((v330 >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                              + 24) >> (2 * (v330 & 0xF))) & 3;
                                            if ((_DWORD)v249 == 1)
                                              goto LABEL_609;
                                          }
                                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v321, v293, 1, v249, v250, v251, v252, v253);
                                        }
LABEL_571:
                                        *(_QWORD *)v262 = 4;
                                      }
                                      else if (v293)
                                      {
                                        if ((*(_BYTE *)(v293 + 19) & 0xC) != 0)
                                          goto LABEL_571;
                                        v343 = *(_QWORD *)(v293 + 96);
                                        v344 = (v343 & 1) != 0
                                             ? (v343 >> 1) & 3
                                             : *(unsigned __int8 *)(v343 + 4);
                                        if (v344 == 2)
                                          goto LABEL_571;
                                      }
                                    }
LABEL_572:
                                    *(_DWORD *)(v261 + 32 * v258 + 16) = -21020677;
                                  }
                                  if ((v263 & 1) != 0)
                                    *(_QWORD *)v262 &= ~2uLL;
LABEL_448:
                                  *(_DWORD *)(v262 + 20) = v263;
                                }
                                v265 = *(_QWORD *)(v9 + 24);
                                v266 = *(_QWORD *)(v265 + 8);
                                v267 = *(unsigned int *)(v257 + 20);
                                v268 = (uint64_t *)(v266 + 24);
                                v269 = (uint64_t *)(v266 + 8);
                                if ((v254 & 1) != 0)
                                  v269 = v268;
                                v270 = *v269;
                                v271 = *v269 + 32 * v267;
                                v272 = *(_DWORD *)(v265 + 88);
                                v273 = *(_DWORD *)(v271 + 20);
                                if (v272 != v273)
                                {
                                  if ((*(_QWORD *)(v271 + 8) & 0x2800FFFFFFF7) == 0)
                                    goto LABEL_453;
                                  if ((v273 ^ v272) >= 2)
                                  {
                                    v298 = *(_QWORD *)v271;
                                    if (*(_QWORD *)v271 != 4)
                                    {
                                      *(_QWORD *)v271 = v298 | 2;
                                      v299 = v298 & 0xFFFFFFFFFFFFFFFCLL;
                                      if ((v298 & 1) != 0)
                                      {
                                        v300 = 8 * *(unsigned int *)v299;
                                        do
                                        {
                                          if (!v300)
                                            goto LABEL_578;
                                          v301 = *(_QWORD *)(v299 + v300);
                                          if ((*(_BYTE *)(v301 + 19) & 0xC) != 0)
                                            break;
                                          v302 = *(_QWORD *)(v301 + 96);
                                          v303 = (v302 & 1) != 0
                                               ? (v302 >> 1) & 3
                                               : *(unsigned __int8 *)(v302 + 4);
                                          v300 -= 8;
                                        }
                                        while (v303 != 2);
                                        v322 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                        if (!v322)
                                        {
                                          pas_try_deallocate_slow_no_cache(v298 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                                          goto LABEL_577;
                                        }
                                        if (!(v299 >> 43)
                                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                               + ((v298 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v298)) & 1) != 0)
                                        {
LABEL_616:
                                          v334 = *(unsigned int *)(v322 + 8000);
                                          if (v334 < 0x3E7)
                                          {
                                            *(_QWORD *)(v322 + 8 * v334) = v299 | 0x5000000000000;
                                            *(_DWORD *)(v322 + 8000) = v334 + 1;
                                          }
                                          else
                                          {
                                            pas_thread_local_cache_append_deallocation_slow(v322, v299, (os_unfair_lock_s *)5, v249, v250, v251, v252, v253);
                                          }
                                        }
                                        else
                                        {
                                          v332 = v298 >> 24;
                                          v333 = (v298 >> 24) - *off_1ECF425F8;
                                          if (v332 < *off_1ECF425F8 || off_1ECF425F8[1] <= v332)
                                          {
                                            v249 = 0;
                                          }
                                          else
                                          {
                                            v249 = (*(_DWORD *)((char *)off_1ECF425F8
                                                              + ((v333 >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                              + 24) >> (2 * (v333 & 0xF))) & 3;
                                            if ((_DWORD)v249 == 1)
                                              goto LABEL_616;
                                          }
                                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v322, v299, 1, v249, v250, v251, v252, v253);
                                        }
LABEL_577:
                                        *(_QWORD *)v271 = 4;
                                      }
                                      else if (v299)
                                      {
                                        if ((*(_BYTE *)(v299 + 19) & 0xC) != 0)
                                          goto LABEL_577;
                                        v345 = *(_QWORD *)(v299 + 96);
                                        v346 = (v345 & 1) != 0
                                             ? (v345 >> 1) & 3
                                             : *(unsigned __int8 *)(v345 + 4);
                                        if (v346 == 2)
                                          goto LABEL_577;
                                      }
                                    }
LABEL_578:
                                    *(_DWORD *)(v270 + 32 * v267 + 16) = -21020677;
                                  }
                                  if ((v272 & 1) != 0)
                                    *(_QWORD *)v271 &= ~2uLL;
LABEL_453:
                                  *(_DWORD *)(v271 + 20) = v272;
                                }
                                __break(0xC471u);
                                JUMPOUT(0x197C67510);
                              }
LABEL_551:
                              if (*(_DWORD *)casual != 1)
                              {
                                --*(_DWORD *)casual;
                                goto LABEL_444;
                              }
                              v318 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                              if (!v318)
                              {
                                pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
                                goto LABEL_444;
                              }
                              if (casual >> 43
                                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                     + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) == 0)
                              {
                                if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
                                {
                                  v249 = 0;
                                }
                                else
                                {
                                  v249 = (*(_DWORD *)((char *)off_1ECF425F8
                                                    + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                  if ((_DWORD)v249 == 1)
                                    goto LABEL_560;
                                }
                                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v318, casual, 1, v249, v250, v251, v252, v253);
                                goto LABEL_444;
                              }
LABEL_560:
                              v319 = *(unsigned int *)(v318 + 8000);
                              if (v319 < 0x3E7)
                              {
                                *(_QWORD *)(v318 + 8 * v319) = casual | 0x5000000000000;
                                *(_DWORD *)(v318 + 8000) = v319 + 1;
                              }
                              else
                              {
                                pas_thread_local_cache_append_deallocation_slow(v318, casual, (os_unfair_lock_s *)5, v249, v250, v251, v252, v253);
                              }
                              goto LABEL_444;
                            }
                          }
                          *(_DWORD *)(v307 + 32) = v312;
                        }
                      }
                      *(_BYTE *)v307 = 0;
                    }
LABEL_548:
                    casual = bmalloc_allocate_casual(v274, 1);
                    goto LABEL_549;
                  }
                  v236 = "<Double>";
                }
                else
                {
                  v236 = "-";
                }
LABEL_433:
                v237 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                WTF::PrintStream::printf(v237, "%s", v236);
                (*((void (**)(void **))ptr + 5))(&ptr);
                goto LABEL_434;
              }
              if ((*(_QWORD *)(v222 + 8) & 0x2800FFFFFFF7) == 0)
              {
                *v225 = v223;
                goto LABEL_418;
              }
              if ((v224 ^ v223) >= 2)
              {
                v281 = *(_QWORD *)v222;
                if (*(_QWORD *)v222 != 4)
                {
                  *(_QWORD *)v222 = v281 | 2;
                  v282 = v281 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v281 & 1) != 0)
                  {
                    v283 = 8 * *(unsigned int *)v282;
                    do
                    {
                      if (!v283)
                        goto LABEL_531;
                      v284 = *(_QWORD *)(v282 + v283);
                      if ((*(_BYTE *)(v284 + 19) & 0xC) != 0)
                        break;
                      v285 = *(_QWORD *)(v284 + 96);
                      v286 = (v285 & 1) != 0 ? (v285 >> 1) & 3 : *(unsigned __int8 *)(v285 + 4);
                      v283 -= 8;
                    }
                    while (v286 != 2);
                    v305 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                    if (!v305)
                    {
                      pas_try_deallocate_slow_no_cache(v281 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_530;
                    }
                    if (!(v282 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v281 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v281)) & 1) != 0)
                    {
LABEL_593:
                      v328 = *(unsigned int *)(v305 + 8000);
                      if (v328 < 0x3E7)
                      {
                        *(_QWORD *)(v305 + 8 * v328) = v282 | 0x5000000000000;
                        *(_DWORD *)(v305 + 8000) = v328 + 1;
                      }
                      else
                      {
                        pas_thread_local_cache_append_deallocation_slow(v305, v282, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                      }
                    }
                    else
                    {
                      v326 = v281 >> 24;
                      v327 = (v281 >> 24) - *off_1ECF425F8;
                      if (v326 < *off_1ECF425F8 || off_1ECF425F8[1] <= v326)
                      {
                        a4 = 0;
                      }
                      else
                      {
                        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v327 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v327 & 0xF))) & 3;
                        if ((_DWORD)a4 == 1)
                          goto LABEL_593;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v305, v282, 1, a4, a5, a6, a7, a8);
                    }
LABEL_530:
                    *(_QWORD *)v222 = 4;
                  }
                  else if (v282)
                  {
                    if ((*(_BYTE *)(v282 + 19) & 0xC) != 0)
                      goto LABEL_530;
                    v341 = *(_QWORD *)(v282 + 96);
                    v342 = (v341 & 1) != 0 ? (v341 >> 1) & 3 : *(unsigned __int8 *)(v341 + 4);
                    if (v342 == 2)
                      goto LABEL_530;
                  }
                }
LABEL_531:
                *(_DWORD *)(v221 + 32 * v48 + 16) = -21020677;
              }
              if ((v223 & 1) != 0)
                *(_QWORD *)v222 &= ~2uLL;
              *v225 = v223;
              v44 = *(_QWORD *)(v9 + 24);
              v45 = *(_QWORD *)(v44 + 8);
              goto LABEL_418;
            }
          }
        }
        ++v40;
        if (!--v39)
          return result;
      }
    }
    return result;
  }
  v10 = *(_QWORD *)(a2 + 24);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return result;
  v350 = a2;
  v351 = v10;
  v11 = (v10 >> 50) & 0x3F;
  if (*(_WORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 386)
  {
    if ((_DWORD)v11)
      goto LABEL_72;
    if (*(_WORD *)(a2 + 18) != 30)
      goto LABEL_71;
  }
  else
  {
    v12 = *(_QWORD *)(result + 24);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (v10 & 1) == 0;
    v15 = (_QWORD *)(v13 + 24);
    if ((v10 & 1) == 0)
      v15 = (_QWORD *)(v13 + 8);
    if (v11 >= 0x35)
      goto LABEL_135;
    v16 = v10 & 0xFF00FFFFFFFFFFFELL;
    v17 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    if ((qword_199124118[v11] & *(_QWORD *)(*v15 + 32 * v17 + 8)) != 0)
      goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 32);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return result;
  v350 = a2;
  v351 = v10;
  v11 = (v10 >> 50) & 0x3F;
  if (*(_WORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 386)
  {
    v12 = *(_QWORD *)(result + 24);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (v10 & 1) == 0;
    v18 = (_QWORD *)(v13 + 8);
    if ((v10 & 1) != 0)
      v18 = (_QWORD *)(v13 + 24);
    if (v11 <= 0x34)
    {
      v16 = v10 & 0xFF00FFFFFFFFFFFELL;
      v17 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      if ((qword_199124118[v11] & *(_QWORD *)(*v18 + 32 * v17 + 8)) != 0)
        goto LABEL_21;
      goto LABEL_15;
    }
LABEL_135:
    __break(0xC471u);
    JUMPOUT(0x197C65DF8);
  }
  if ((_DWORD)v11)
    goto LABEL_72;
  if (*(_WORD *)(a2 + 18) != 30)
  {
LABEL_71:
    LOBYTE(v11) = 0;
    goto LABEL_72;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 40);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return result;
  v350 = a2;
  v351 = v10;
  v11 = (v10 >> 50) & 0x3F;
  if (*(_WORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 386)
  {
    if (!(_DWORD)v11)
    {
      if (*(_WORD *)(a2 + 18) == 30)
        return result;
      goto LABEL_71;
    }
LABEL_72:
    v54 = *(JSC::DFG::Graph **)(result + 8);
    LOBYTE(v356) = v11;
    v55 = *(_QWORD *)(result + 24);
    v56 = (*(_DWORD *)(a2 + 72) + ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x30));
    if (*(_DWORD *)(v55 + 52) <= v56)
    {
      __break(0xC471u);
      JUMPOUT(0x197C672BCLL);
    }
    p_ptr = *(void ***)(*(_QWORD *)(v55 + 40) + 32 * v56 + 8);
    WTF::toCString<char [32],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [45],JSC::DFG::UseKind,char [13],JSC::SpeculationDump>("Tuple edge verification error: ", &v350, "->", (JSC::DFG::Edge *)&v351, " was expected to have Untyped use kind (had ", (unsigned __int8 *)&v356, "). Has type ", (WTF::PrintStream **)&p_ptr, (uint64_t *)&ptr);
    if (ptr)
      v57 = (char *)ptr + 16;
    else
      v57 = 0;
    JSC::DFG::Graph::logAssertionFailure(v54, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h", (const char *)0xB5, "void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]", v57);
    v63 = (unint64_t)ptr;
    ptr = 0;
    if (!v63)
    {
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x197C65AD0);
    }
    if (*(_DWORD *)v63 != 1)
    {
      --*(_DWORD *)v63;
      goto LABEL_77;
    }
    v287 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v287)
    {
      pas_try_deallocate_slow_no_cache(v63, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_77;
    }
    if (v63 >> 43
      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v63 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v63)) & 1) == 0)
    {
      if (v63 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v63 >> 24)
      {
        v58 = 0;
      }
      else
      {
        v58 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v63 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v63) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v58 == 1)
          goto LABEL_567;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v287, v63, 1, v58, v59, v60, v61, v62);
      goto LABEL_77;
    }
LABEL_567:
    v320 = *(unsigned int *)(v287 + 8000);
    if (v320 < 0x3E7)
    {
      *(_QWORD *)(v287 + 8 * v320) = v63 | 0x5000000000000;
      *(_DWORD *)(v287 + 8000) = v320 + 1;
    }
    else
    {
      pas_thread_local_cache_append_deallocation_slow(v287, v63, (os_unfair_lock_s *)5, v58, v59, v60, v61, v62);
    }
    goto LABEL_77;
  }
  v12 = *(_QWORD *)(result + 24);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = (v10 & 1) == 0;
  v19 = (_QWORD *)(v13 + 8);
  if ((v10 & 1) != 0)
    v19 = (_QWORD *)(v13 + 24);
  if (v11 > 0x34)
    goto LABEL_135;
  v16 = v10 & 0xFF00FFFFFFFFFFFELL;
  v17 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((qword_199124118[v11] & *(_QWORD *)(*v19 + 32 * v17 + 8)) != 0)
  {
LABEL_21:
    v347 = (WTF::PrintStream *)qword_199123F70[v11];
    v348 = *(WTF::PrintStream **)(result + 8);
    v20 = (uint64_t *)(v13 + 24);
    if (v14)
      v20 = (uint64_t *)(v13 + 8);
    v21 = *v20;
    v22 = *v20 + 32 * v17;
    v23 = *(_DWORD *)(v12 + 88);
    v25 = (unsigned int *)(v22 + 20);
    v24 = *(_DWORD *)(v22 + 20);
    if (v23 == v24)
    {
LABEL_24:
      v26 = *(WTF::PrintStream **)(v22 + 8);
      v27 = *(unsigned int *)(v16 + 20);
      v28 = (uint64_t *)(v13 + 24);
      v29 = (uint64_t *)(v13 + 8);
      if (!v14)
        v29 = v28;
      v30 = *v29;
      v31 = *v29 + 32 * v27;
      v32 = *(_DWORD *)(v12 + 88);
      v34 = (unsigned int *)(v31 + 20);
      v33 = *(_DWORD *)(v31 + 20);
      if (v32 == v33)
      {
LABEL_27:
        ptr = off_1E3572250;
        __src = v362;
        *(_OWORD *)__n = xmmword_199122F80;
        v362[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "Edge verification error: ");
        if (a2)
        {
          v49 = *(_DWORD *)(a2 + 20);
          v50 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
          WTF::PrintStream::printf(v50, "%s", "D@");
          WTF::PrintStream::printf(v50, "%u", v49);
          (*((void (**)(void **))ptr + 5))(&ptr);
          if ((*(_DWORD *)(a2 + 56) & 7) == 3)
          {
            v35 = "<Double>";
          }
          else
          {
            if ((*(_DWORD *)(a2 + 56) & 7) != 5)
            {
LABEL_30:
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "->");
              if ((v351 & 0x1000000000000) == 0)
              {
                v37 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                WTF::PrintStream::printf(v37, "%s", "Check:");
                (*((void (**)(void **))ptr + 5))(&ptr);
              }
              v38 = (*((uint64_t (**)(void **))ptr + 4))(&ptr);
              v51 = "Untyped";
              switch((v351 >> 50) & 0x3F)
              {
                case 0uLL:
                  break;
                case 1uLL:
                  v51 = "Int32";
                  break;
                case 2uLL:
                  v51 = "KnownInt32";
                  break;
                case 3uLL:
                  v51 = "AnyInt";
                  break;
                case 4uLL:
                  v51 = "Number";
                  break;
                case 5uLL:
                  v51 = "RealNumber";
                  break;
                case 6uLL:
                  v51 = "Boolean";
                  break;
                case 7uLL:
                  v51 = "KnownBoolean";
                  break;
                case 8uLL:
                  v51 = "Cell";
                  break;
                case 9uLL:
                  v51 = "KnownCell";
                  break;
                case 0xAuLL:
                  v51 = "CellOrOther";
                  break;
                case 0xBuLL:
                  v51 = "Object";
                  break;
                case 0xCuLL:
                  v51 = "Array";
                  break;
                case 0xDuLL:
                  v51 = "Function";
                  break;
                case 0xEuLL:
                  v51 = "FinalObject";
                  break;
                case 0xFuLL:
                  v51 = "PromiseObject";
                  break;
                case 0x10uLL:
                  v51 = "RegExpObject";
                  break;
                case 0x11uLL:
                  v51 = "ProxyObject";
                  break;
                case 0x12uLL:
                  v51 = "DerivedArray";
                  break;
                case 0x13uLL:
                  v51 = "ObjectOrOther";
                  break;
                case 0x14uLL:
                  v51 = "StringIdent";
                  break;
                case 0x15uLL:
                  v51 = "String";
                  break;
                case 0x16uLL:
                  v51 = "StringOrOther";
                  break;
                case 0x17uLL:
                  v51 = "KnownString";
                  break;
                case 0x18uLL:
                  v51 = "KnownPrimitive";
                  break;
                case 0x19uLL:
                  v51 = "Symbol";
                  break;
                case 0x1AuLL:
                  v51 = "AnyBigInt";
                  break;
                case 0x1BuLL:
                  v51 = "HeapBigInt";
                  break;
                case 0x1CuLL:
                  v51 = "BigInt32";
                  break;
                case 0x1DuLL:
                  v51 = "DateObject";
                  break;
                case 0x1EuLL:
                  v51 = "MapObject";
                  break;
                case 0x1FuLL:
                  v51 = "SetObject";
                  break;
                case 0x20uLL:
                  v51 = "MapIteratorObject";
                  break;
                case 0x21uLL:
                  v51 = "SetIteratorObject";
                  break;
                case 0x22uLL:
                  v51 = "WeakMapObject";
                  break;
                case 0x23uLL:
                  v51 = "WeakSetObject";
                  break;
                case 0x24uLL:
                  v51 = "DataViewObject";
                  break;
                case 0x25uLL:
                  v51 = "StringObject";
                  break;
                case 0x26uLL:
                  v51 = "StringOrStringObject";
                  break;
                case 0x27uLL:
                  v51 = "NotStringVar";
                  break;
                case 0x28uLL:
                  v51 = "NotSymbol";
                  break;
                case 0x29uLL:
                  v51 = "NotCell";
                  break;
                case 0x2AuLL:
                  v51 = "NotCellNorBigInt";
                  break;
                case 0x2BuLL:
                  v51 = "NotDouble";
                  break;
                case 0x2CuLL:
                  v51 = "NeitherDoubleNorHeapBigInt";
                  break;
                case 0x2DuLL:
                  v51 = "NeitherDoubleNorHeapBigIntNorString";
                  break;
                case 0x2EuLL:
                  v51 = "KnownOther";
                  break;
                case 0x2FuLL:
                  v51 = "Other";
                  break;
                case 0x30uLL:
                  v51 = "Misc";
                  break;
                case 0x31uLL:
                  v51 = "DoubleRep";
                  break;
                case 0x32uLL:
                  v51 = "DoubleRepReal";
                  break;
                case 0x33uLL:
                  v51 = "DoubleRepAnyInt";
                  break;
                case 0x34uLL:
                  v51 = "Int52Rep";
                  break;
                case 0x35uLL:
                  __break(0xC471u);
                  JUMPOUT(0x197C658C8);
                default:
                  __break(0xC471u);
                  JUMPOUT(0x197C65758);
              }
              v97 = (WTF::PrintStream *)v38;
              v98 = (WTF::PrintStream *)(*(uint64_t (**)(void))(*(_QWORD *)v38 + 32))();
              WTF::PrintStream::printf(v98, "%s", v51);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
              WTF::PrintStream::printf(v97, "%s", ":");
              (*((void (**)(void **))ptr + 5))(&ptr);
              if ((v351 & 0x2000000000000) != 0)
              {
                v99 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                WTF::PrintStream::printf(v99, "%s", "Kill:");
                (*((void (**)(void **))ptr + 5))(&ptr);
              }
              v100 = (_QWORD *)(v31 + 8);
              v101 = (*((uint64_t (**)(void **))ptr + 4))(&ptr);
              v102 = v101;
              if ((v351 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v103 = *(_DWORD *)((v351 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                v104 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 32))(v101);
                WTF::PrintStream::printf(v104, "%s", "D@");
                WTF::PrintStream::printf(v104, "%u", v103);
                (*(void (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
                if ((*(_DWORD *)((v351 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 3)
                {
                  v105 = "<Double>";
                }
                else
                {
                  if ((*(_DWORD *)((v351 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 5)
                    goto LABEL_216;
                  v105 = "<Int52>";
                }
              }
              else
              {
                v105 = "-";
              }
              v106 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102);
              WTF::PrintStream::printf(v106, "%s", v105);
              (*(void (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
LABEL_216:
              (*((void (**)(void **))ptr + 5))(&ptr);
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " was expected to have type ");
              JSC::dumpSpeculation((JSC *)&ptr, v347);
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " but has type ");
              JSC::dumpSpeculation((JSC *)&ptr, v26);
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", " (");
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%llu", *v100);
              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", ")");
              (*((void (**)(void **))ptr + 5))(&ptr);
              v112 = __src;
              if (!__src)
              {
                v114 = 0;
                v115 = 0;
                goto LABEL_220;
              }
              v113 = __n[0];
              if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
              {
                __break(0xC471u);
                JUMPOUT(0x197C66414);
              }
              v121 = __n[0] + 17;
              if (__n[0] == -17)
              {
                __break(0xC471u);
                JUMPOUT(0x197C66510);
              }
              v162 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (v162)
              {
                v163 = (__n[0] + 32) >> 4;
                if (__n[0] + 32 <= 0x1AF)
                {
                  v164 = 23 * v163 + 7;
                }
                else
                {
                  if ((__n[0] + 32) >> 5 > 0x138)
                    goto LABEL_308;
                  v164 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v163 + 626);
                  if (*(_DWORD *)(v162 + 8052) <= v164)
                    goto LABEL_308;
                }
                v171 = v162 + 8 * v164;
                v172 = v171 + 8064;
                *(_BYTE *)(v171 + 8064) = 1;
                v173 = *(unsigned int *)(v171 + 8080);
                if ((_DWORD)v173)
                {
                  *(_DWORD *)(v172 + 16) = v173 - *(_DWORD *)(v172 + 20);
                  v114 = *(_QWORD *)(v172 + 8) - v173;
                  goto LABEL_305;
                }
                v174 = *(_QWORD *)(v172 + 40);
                v175 = *(_QWORD *)(v172 + 24);
                if (v174)
                  goto LABEL_304;
                if (*(_BYTE *)(v172 + 5) == 6)
                {
                  v176 = *(unsigned int *)(v172 + 32);
                  v177 = *(_DWORD *)(v172 + 36);
                  if (v176 < v177)
                  {
                    *(_QWORD *)(v172 + 8 * v176 + 56) = 0;
                    v178 = (unint64_t *)(8 * v164 + 8 * v176 + v162 + 8128);
                    v179 = v177 - 1 - v176;
                    while (v179)
                    {
                      v175 += 1024;
                      v181 = *v178++;
                      v180 = v181;
                      LODWORD(v176) = v176 + 1;
                      --v179;
                      if (v181)
                      {
                        v174 = __rbit64(v180);
                        *(_DWORD *)(v172 + 32) = v176;
                        *(_QWORD *)(v172 + 24) = v175;
LABEL_304:
                        v182 = __clz(v174);
                        *(_QWORD *)(v172 + 40) = v174 & ~(0x8000000000000000 >> v182);
                        v114 = v175 + 16 * v182;
LABEL_305:
                        *(_BYTE *)v172 = 0;
LABEL_309:
                        *(_DWORD *)v114 = 1;
                        *(_QWORD *)(v114 + 8) = v113;
                        memcpy((void *)(v114 + 16), v112, v113);
                        *(_BYTE *)(v114 + 16 + v113) = 0;
                        v115 = (unint64_t)__src;
                        if (__src == v362)
                        {
LABEL_222:
                          ptr = off_1E3572250;
                          __src = v362;
                          if (v114)
                            v117 = (const char *)(v114 + 16);
                          else
                            v117 = 0;
                          *(_OWORD *)__n = xmmword_199122F80;
                          v362[0] = 0;
                          WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "While handling node ");
                          if (a2)
                          {
                            v118 = *(_DWORD *)(a2 + 20);
                            v119 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                            WTF::PrintStream::printf(v119, "%s", "D@");
                            WTF::PrintStream::printf(v119, "%u", v118);
                            (*((void (**)(void **))ptr + 5))(&ptr);
                            if ((*(_DWORD *)(a2 + 56) & 7) != 3)
                            {
                              if ((*(_DWORD *)(a2 + 56) & 7) == 5)
                              {
                                v120 = "<Int52>";
                                goto LABEL_240;
                              }
LABEL_241:
                              WTF::PrintStream::printf((WTF::PrintStream *)&ptr, "%s", "\n\n");
                              (*((void (**)(void **))ptr + 5))(&ptr);
                              v130 = __src;
                              v129 = __n[0];
                              v352 = 0;
                              if (!__src)
                              {
                                v131 = 0;
                                goto LABEL_245;
                              }
                              if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x197C66628);
                              }
                              v161 = __n[0] + 17;
                              if (__n[0] == -17)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x197C66860);
                              }
                              v168 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                              if (v168)
                              {
                                v169 = (__n[0] + 32) >> 4;
                                if (__n[0] + 32 <= 0x1AF)
                                {
                                  v170 = 23 * v169 + 7;
                                }
                                else
                                {
                                  if ((__n[0] + 32) >> 5 > 0x138)
                                    goto LABEL_350;
                                  v170 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v169 + 626);
                                  if (*(_DWORD *)(v168 + 8052) <= v170)
                                    goto LABEL_350;
                                }
                                v195 = v168 + 8 * v170;
                                v196 = v195 + 8064;
                                *(_BYTE *)(v195 + 8064) = 1;
                                v197 = *(unsigned int *)(v195 + 8080);
                                if ((_DWORD)v197)
                                {
                                  *(_DWORD *)(v196 + 16) = v197 - *(_DWORD *)(v196 + 20);
                                  v207 = *(_QWORD *)(v196 + 8) - v197;
                                  goto LABEL_347;
                                }
                                v198 = *(_QWORD *)(v196 + 40);
                                v199 = *(_QWORD *)(v196 + 24);
                                if (v198)
                                  goto LABEL_346;
                                if (*(_BYTE *)(v196 + 5) == 6)
                                {
                                  v200 = *(unsigned int *)(v196 + 32);
                                  v201 = *(_DWORD *)(v196 + 36);
                                  if (v200 < v201)
                                  {
                                    *(_QWORD *)(v196 + 8 * v200 + 56) = 0;
                                    v202 = (unint64_t *)(8 * v170 + 8 * v200 + v168 + 8128);
                                    v203 = v201 - 1 - v200;
                                    while (v203)
                                    {
                                      v199 += 1024;
                                      v205 = *v202++;
                                      v204 = v205;
                                      LODWORD(v200) = v200 + 1;
                                      --v203;
                                      if (v205)
                                      {
                                        v198 = __rbit64(v204);
                                        *(_DWORD *)(v196 + 32) = v200;
                                        *(_QWORD *)(v196 + 24) = v199;
LABEL_346:
                                        v206 = __clz(v198);
                                        *(_QWORD *)(v196 + 40) = v198 & ~(0x8000000000000000 >> v206);
                                        v207 = v199 + 16 * v206;
LABEL_347:
                                        *(_BYTE *)v196 = 0;
LABEL_351:
                                        *(_DWORD *)v207 = 1;
                                        *(_QWORD *)(v207 + 8) = v129;
                                        v352 = (void *)v207;
                                        v208 = v207 + 16;
                                        memcpy((void *)(v207 + 16), v130, v129);
                                        *(_BYTE *)(v208 + v129) = 0;
                                        v131 = (unint64_t)__src;
                                        if (__src == v362)
                                        {
LABEL_247:
                                          v356 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptC"
                                                 "ore/dfg/DFGAbstractInterpreterInlines.h";
                                          v355 = 187;
                                          v353 = v117;
                                          v354 = (WTF::PrintStream *)"void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlac"
                                                                     "eAbstractState>::verifyEdge(Node *, Edge) [Abstract"
                                                                     "StateType = JSC::DFG::InPlaceAbstractState]";
                                          if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                                          {
                                            __clrex();
                                            goto LABEL_249;
                                          }
                                          if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_249:
                                            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                                          WTF::dataLog<char [8],char const*,char [3]>("DFG ASSERTION FAILED: ", &v353, "\n");
                                          WTF::dataLog<char const*,char [2],int,char [5],char const*,char [2]>(&v356, "(", &v355, ") : ", (const char **)&v354, "\n");
                                          WTF::dataLog<char [16]>("\n");
                                          WTF::dataLog<WTF::CString>(&v352);
                                          WTF::dataLog<char [16]>("Graph at time of failure:\n");
                                          v134 = atomic_load(&WTF::initializeLogFile(void)::once);
                                          if (v134 != -1)
                                          {
                                            ptr = &v357;
                                            p_ptr = &ptr;
                                            std::__call_once(&WTF::initializeLogFile(void)::once, &p_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
                                          }
                                          JSC::DFG::Graph::dump(v348, (WTF::PrintStream *)WTF::s_file, 0);
                                          WTF::dataLog<char [16]>("\n");
                                          WTF::dataLog<char [8],char const*,char [3]>("DFG ASSERTION FAILED: ", &v353, "\n");
                                          WTF::dataLog<char const*,char [2],int,char [5],char const*,char [2]>(&v356, "(", &v355, ") : ", (const char **)&v354, "\n");
                                          v140 = (unint64_t)v352;
                                          v352 = 0;
                                          if (!v140)
                                          {
LABEL_253:
                                            if (!v114)
                                              goto LABEL_254;
                                            if (*(_DWORD *)v114 == 1)
                                            {
                                              v166 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                              if (!v166)
                                              {
                                                pas_try_deallocate_slow_no_cache(v114, (uint64_t)&bmalloc_heap_config, 1);
                                                goto LABEL_254;
                                              }
                                              if (!(v114 >> 43)
                                                && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                     + ((v114 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v114)) & 1) != 0)
                                              {
LABEL_366:
                                                v210 = *(unsigned int *)(v166 + 8000);
                                                if (v210 < 0x3E7)
                                                {
                                                  *(_QWORD *)(v166 + 8 * v210) = v114 | 0x5000000000000;
                                                  *(_DWORD *)(v166 + 8000) = v210 + 1;
                                                }
                                                else
                                                {
                                                  pas_thread_local_cache_append_deallocation_slow(v166, v114, (os_unfair_lock_s *)5, v135, v136, v137, v138, v139);
                                                }
                                              }
                                              else
                                              {
                                                if (v114 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v114 >> 24)
                                                {
                                                  v135 = 0;
                                                }
                                                else
                                                {
                                                  v135 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                    + ((((v114 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                    + 24) >> (2
                                                                            * ((BYTE3(v114) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                                  if ((_DWORD)v135 == 1)
                                                    goto LABEL_366;
                                                }
                                                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v166, v114, 1, v135, v136, v137, v138, v139);
                                              }
                                            }
                                            else
                                            {
                                              --*(_DWORD *)v114;
                                            }
LABEL_254:
                                            v141 = v351;
                                            v142 = *(_QWORD *)(v9 + 24);
                                            v143 = *(_QWORD *)(v142 + 8);
                                            v144 = v351 & 0xFF00FFFFFFFFFFFELL;
                                            v145 = *(unsigned int *)((v351 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                                            v146 = (uint64_t *)(v143 + 24);
                                            v147 = (uint64_t *)(v143 + 8);
                                            if ((v351 & 1) != 0)
                                              v147 = v146;
                                            v148 = *v147;
                                            v149 = *v147 + 32 * v145;
                                            v150 = *(_DWORD *)(v142 + 88);
                                            v151 = *(_DWORD *)(v149 + 20);
                                            if (v150 != v151)
                                            {
                                              if ((*(_QWORD *)(v149 + 8) & 0x2800FFFFFFF7) == 0)
                                                goto LABEL_258;
                                              if ((v151 ^ v150) >= 2)
                                              {
                                                v183 = *(_QWORD *)v149;
                                                if (*(_QWORD *)v149 != 4)
                                                {
                                                  *(_QWORD *)v149 = v183 | 2;
                                                  v184 = v183 & 0xFFFFFFFFFFFFFFFCLL;
                                                  if ((v183 & 1) != 0)
                                                  {
                                                    v185 = 8 * *(unsigned int *)v184;
                                                    do
                                                    {
                                                      if (!v185)
                                                        goto LABEL_371;
                                                      v186 = *(_QWORD *)(v184 + v185);
                                                      if ((*(_BYTE *)(v186 + 19) & 0xC) != 0)
                                                        break;
                                                      v187 = *(_QWORD *)(v186 + 96);
                                                      v188 = (v187 & 1) != 0
                                                           ? (v187 >> 1) & 3
                                                           : *(unsigned __int8 *)(v187 + 4);
                                                      v185 -= 8;
                                                    }
                                                    while (v188 != 2);
                                                    v211 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                                    if (!v211)
                                                    {
                                                      pas_try_deallocate_slow_no_cache(v183 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                                                      goto LABEL_370;
                                                    }
                                                    if (!(v184 >> 43)
                                                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                           + ((v183 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v183)) & 1) != 0)
                                                    {
LABEL_391:
                                                      v215 = *(unsigned int *)(v211 + 8000);
                                                      if (v215 < 0x3E7)
                                                      {
                                                        *(_QWORD *)(v211 + 8 * v215) = v184 | 0x5000000000000;
                                                        *(_DWORD *)(v211 + 8000) = v215 + 1;
                                                      }
                                                      else
                                                      {
                                                        pas_thread_local_cache_append_deallocation_slow(v211, v184, (os_unfair_lock_s *)5, v135, v136, v137, v138, v139);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v213 = v183 >> 24;
                                                      v214 = (v183 >> 24) - *off_1ECF425F8;
                                                      if (v213 < *off_1ECF425F8 || off_1ECF425F8[1] <= v213)
                                                      {
                                                        v135 = 0;
                                                      }
                                                      else
                                                      {
                                                        v135 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                          + ((v214 >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                          + 24) >> (2 * (v214 & 0xF))) & 3;
                                                        if ((_DWORD)v135 == 1)
                                                          goto LABEL_391;
                                                      }
                                                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v211, v184, 1, v135, v136, v137, v138, v139);
                                                    }
LABEL_370:
                                                    *(_QWORD *)v149 = 4;
                                                  }
                                                  else if (v184)
                                                  {
                                                    if ((*(_BYTE *)(v184 + 19) & 0xC) != 0)
                                                      goto LABEL_370;
                                                    v335 = *(_QWORD *)(v184 + 96);
                                                    v336 = (v335 & 1) != 0
                                                         ? (v335 >> 1) & 3
                                                         : *(unsigned __int8 *)(v335 + 4);
                                                    if (v336 == 2)
                                                      goto LABEL_370;
                                                  }
                                                }
LABEL_371:
                                                *(_DWORD *)(v148 + 32 * v145 + 16) = -21020677;
                                              }
                                              if ((v150 & 1) != 0)
                                                *(_QWORD *)v149 &= ~2uLL;
LABEL_258:
                                              *(_DWORD *)(v149 + 20) = v150;
                                            }
                                            v152 = *(_QWORD *)(v9 + 24);
                                            v153 = *(_QWORD *)(v152 + 8);
                                            v154 = *(unsigned int *)(v144 + 20);
                                            v155 = (uint64_t *)(v153 + 24);
                                            v156 = (uint64_t *)(v153 + 8);
                                            if ((v141 & 1) != 0)
                                              v156 = v155;
                                            v157 = *v156;
                                            v158 = *v156 + 32 * v154;
                                            v159 = *(_DWORD *)(v152 + 88);
                                            v160 = *(_DWORD *)(v158 + 20);
                                            if (v159 != v160)
                                            {
                                              if ((*(_QWORD *)(v158 + 8) & 0x2800FFFFFFF7) == 0)
                                                goto LABEL_263;
                                              if ((v160 ^ v159) >= 2)
                                              {
                                                v189 = *(_QWORD *)v158;
                                                if (*(_QWORD *)v158 != 4)
                                                {
                                                  *(_QWORD *)v158 = v189 | 2;
                                                  v190 = v189 & 0xFFFFFFFFFFFFFFFCLL;
                                                  if ((v189 & 1) != 0)
                                                  {
                                                    v191 = 8 * *(unsigned int *)v190;
                                                    do
                                                    {
                                                      if (!v191)
                                                        goto LABEL_377;
                                                      v192 = *(_QWORD *)(v190 + v191);
                                                      if ((*(_BYTE *)(v192 + 19) & 0xC) != 0)
                                                        break;
                                                      v193 = *(_QWORD *)(v192 + 96);
                                                      v194 = (v193 & 1) != 0
                                                           ? (v193 >> 1) & 3
                                                           : *(unsigned __int8 *)(v193 + 4);
                                                      v191 -= 8;
                                                    }
                                                    while (v194 != 2);
                                                    v212 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                                    if (!v212)
                                                    {
                                                      pas_try_deallocate_slow_no_cache(v189 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&bmalloc_heap_config, 1);
                                                      goto LABEL_376;
                                                    }
                                                    if (!(v190 >> 43)
                                                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                           + ((v189 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v189)) & 1) != 0)
                                                    {
LABEL_398:
                                                      v218 = *(unsigned int *)(v212 + 8000);
                                                      if (v218 < 0x3E7)
                                                      {
                                                        *(_QWORD *)(v212 + 8 * v218) = v190 | 0x5000000000000;
                                                        *(_DWORD *)(v212 + 8000) = v218 + 1;
                                                      }
                                                      else
                                                      {
                                                        pas_thread_local_cache_append_deallocation_slow(v212, v190, (os_unfair_lock_s *)5, v135, v136, v137, v138, v139);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v216 = v189 >> 24;
                                                      v217 = (v189 >> 24) - *off_1ECF425F8;
                                                      if (v216 < *off_1ECF425F8 || off_1ECF425F8[1] <= v216)
                                                      {
                                                        v135 = 0;
                                                      }
                                                      else
                                                      {
                                                        v135 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                          + ((v217 >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                          + 24) >> (2 * (v217 & 0xF))) & 3;
                                                        if ((_DWORD)v135 == 1)
                                                          goto LABEL_398;
                                                      }
                                                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v212, v190, 1, v135, v136, v137, v138, v139);
                                                    }
LABEL_376:
                                                    *(_QWORD *)v158 = 4;
                                                  }
                                                  else if (v190)
                                                  {
                                                    if ((*(_BYTE *)(v190 + 19) & 0xC) != 0)
                                                      goto LABEL_376;
                                                    v337 = *(_QWORD *)(v190 + 96);
                                                    v338 = (v337 & 1) != 0
                                                         ? (v337 >> 1) & 3
                                                         : *(unsigned __int8 *)(v337 + 4);
                                                    if (v338 == 2)
                                                      goto LABEL_376;
                                                  }
                                                }
LABEL_377:
                                                *(_DWORD *)(v157 + 32 * v154 + 16) = -21020677;
                                              }
                                              if ((v159 & 1) != 0)
                                                *(_QWORD *)v158 &= ~2uLL;
LABEL_263:
                                              *(_DWORD *)(v158 + 20) = v159;
                                            }
                                            __break(0xC471u);
                                            JUMPOUT(0x197C66850);
                                          }
                                          if (*(_DWORD *)v140 != 1)
                                          {
                                            --*(_DWORD *)v140;
                                            goto LABEL_253;
                                          }
                                          v165 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                          if (!v165)
                                          {
                                            pas_try_deallocate_slow_no_cache(v140, (uint64_t)&bmalloc_heap_config, 1);
                                            goto LABEL_253;
                                          }
                                          if (v140 >> 43
                                            || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                 + ((v140 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v140)) & 1) == 0)
                                          {
                                            if (v140 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v140 >> 24)
                                            {
                                              v135 = 0;
                                            }
                                            else
                                            {
                                              v135 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                + ((((v140 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                + 24) >> (2
                                                                        * ((BYTE3(v140) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                              if ((_DWORD)v135 == 1)
                                                goto LABEL_359;
                                            }
                                            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v165, v140, 1, v135, v136, v137, v138, v139);
                                            goto LABEL_253;
                                          }
LABEL_359:
                                          v209 = *(unsigned int *)(v165 + 8000);
                                          if (v209 < 0x3E7)
                                          {
                                            *(_QWORD *)(v165 + 8 * v209) = v140 | 0x5000000000000;
                                            *(_DWORD *)(v165 + 8000) = v209 + 1;
                                          }
                                          else
                                          {
                                            pas_thread_local_cache_append_deallocation_slow(v165, v140, (os_unfair_lock_s *)5, v135, v136, v137, v138, v139);
                                          }
                                          goto LABEL_253;
                                        }
LABEL_245:
                                        v132 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                        if (!v132)
                                        {
                                          pas_try_deallocate_slow_no_cache(v131, (uint64_t)&bmalloc_heap_config, 1);
                                          goto LABEL_247;
                                        }
                                        if (v131 >> 43
                                          || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                               + ((v131 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v131)) & 1) == 0)
                                        {
                                          if (v131 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v131 >> 24)
                                          {
                                            v124 = 0;
                                          }
                                          else
                                          {
                                            v124 = (*(_DWORD *)((char *)off_1ECF425F8
                                                              + ((((v131 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                              + 24) >> (2
                                                                      * ((BYTE3(v131) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                            if ((_DWORD)v124 == 1)
                                              goto LABEL_285;
                                          }
                                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v132, v131, 1, v124, v125, v126, v127, v128);
                                          goto LABEL_247;
                                        }
LABEL_285:
                                        v167 = *(unsigned int *)(v132 + 8000);
                                        if (v167 < 0x3E7)
                                        {
                                          *(_QWORD *)(v132 + 8 * v167) = v131 | 0x5000000000000;
                                          *(_DWORD *)(v132 + 8000) = v167 + 1;
                                        }
                                        else
                                        {
                                          pas_thread_local_cache_append_deallocation_slow(v132, v131, (os_unfair_lock_s *)5, v124, v125, v126, v127, v128);
                                        }
                                        goto LABEL_247;
                                      }
                                    }
                                    *(_DWORD *)(v196 + 32) = v201;
                                  }
                                }
                                *(_BYTE *)v196 = 0;
                              }
LABEL_350:
                              v207 = bmalloc_allocate_casual(v161, 1);
                              goto LABEL_351;
                            }
                            v120 = "<Double>";
                          }
                          else
                          {
                            v120 = "-";
                          }
LABEL_240:
                          v123 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
                          WTF::PrintStream::printf(v123, "%s", v120);
                          (*((void (**)(void **))ptr + 5))(&ptr);
                          goto LABEL_241;
                        }
LABEL_220:
                        v116 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                        if (!v116)
                        {
                          pas_try_deallocate_slow_no_cache(v115, (uint64_t)&bmalloc_heap_config, 1);
                          goto LABEL_222;
                        }
                        if (v115 >> 43
                          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v115 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v115)) & 1) == 0)
                        {
                          if (v115 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v115 >> 24)
                          {
                            v107 = 0;
                          }
                          else
                          {
                            v107 = (*(_DWORD *)((char *)off_1ECF425F8
                                              + ((((v115 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                              + 24) >> (2 * ((BYTE3(v115) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                            if ((_DWORD)v107 == 1)
                              goto LABEL_236;
                          }
                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v116, v115, 1, v107, v108, v109, v110, v111);
                          goto LABEL_222;
                        }
LABEL_236:
                        v122 = *(unsigned int *)(v116 + 8000);
                        if (v122 < 0x3E7)
                        {
                          *(_QWORD *)(v116 + 8 * v122) = v115 | 0x5000000000000;
                          *(_DWORD *)(v116 + 8000) = v122 + 1;
                        }
                        else
                        {
                          pas_thread_local_cache_append_deallocation_slow(v116, v115, (os_unfair_lock_s *)5, v107, v108, v109, v110, v111);
                        }
                        goto LABEL_222;
                      }
                    }
                    *(_DWORD *)(v172 + 32) = v177;
                  }
                }
                *(_BYTE *)v172 = 0;
              }
LABEL_308:
              v114 = bmalloc_allocate_casual(v121, 1);
              goto LABEL_309;
            }
            v35 = "<Int52>";
          }
        }
        else
        {
          v35 = "-";
        }
        v36 = (WTF::PrintStream *)(*((uint64_t (**)(void **))ptr + 4))(&ptr);
        WTF::PrintStream::printf(v36, "%s", v35);
        (*((void (**)(void **))ptr + 5))(&ptr);
        goto LABEL_30;
      }
      if ((*(_QWORD *)(v31 + 8) & 0x2800FFFFFFF7) == 0)
      {
LABEL_56:
        *v34 = v32;
        goto LABEL_27;
      }
      if ((v33 ^ v32) < 2)
      {
LABEL_67:
        if ((v32 & 1) != 0)
          *(_QWORD *)v31 &= ~2uLL;
        goto LABEL_56;
      }
      v53 = *(_QWORD *)v31;
      if (*(_QWORD *)v31 == 4)
      {
LABEL_66:
        *(_DWORD *)(v30 + 32 * v27 + 16) = -21020677;
        goto LABEL_67;
      }
      *(_QWORD *)v31 = v53 | 2;
      v67 = v53 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v53 & 1) == 0)
      {
        if (!v67)
          goto LABEL_66;
        if ((*(_BYTE *)(v67 + 19) & 0xC) == 0)
        {
          v68 = *(_QWORD *)(v67 + 96);
          v69 = (v68 & 1) != 0 ? (v68 >> 1) & 3 : *(unsigned __int8 *)(v68 + 4);
          if (v69 != 2)
            goto LABEL_66;
        }
        goto LABEL_91;
      }
      v83 = v31;
      v84 = 8 * *(unsigned int *)v67;
      do
      {
        v31 = v83;
        if (!v84)
          goto LABEL_66;
        v85 = *(_QWORD *)(v67 + v84);
        if ((*(_BYTE *)(v85 + 19) & 0xC) != 0)
          break;
        v86 = *(_QWORD *)(v85 + 96);
        v87 = (v86 & 1) != 0 ? (v86 >> 1) & 3 : *(unsigned __int8 *)(v86 + 4);
        v84 -= 8;
      }
      while (v87 != 2);
      v90 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v90)
      {
        if (!(v67 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v53 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v53)) & 1) != 0)
        {
          goto LABEL_132;
        }
        v94 = v53 >> 24;
        v95 = (v53 >> 24) - *off_1ECF425F8;
        if (v94 < *off_1ECF425F8 || off_1ECF425F8[1] <= v94)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v95 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v95 & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_132:
            v91 = *(unsigned int *)(v90 + 8000);
            if (v91 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v90, v67, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v90 + 8 * v91) = v67 | 0x5000000000000;
              *(_DWORD *)(v90 + 8000) = v91 + 1;
            }
            goto LABEL_134;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v90, v67, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v67, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_134:
      v31 = v83;
LABEL_91:
      *(_QWORD *)v31 = 4;
      goto LABEL_66;
    }
    if ((*(_QWORD *)(v22 + 8) & 0x2800FFFFFFF7) == 0)
    {
      *v25 = v23;
      goto LABEL_24;
    }
    if ((v24 ^ v23) < 2)
    {
LABEL_61:
      if ((v23 & 1) != 0)
        *(_QWORD *)v22 &= ~2uLL;
      *v25 = v23;
      v12 = *(_QWORD *)(v9 + 24);
      v13 = *(_QWORD *)(v12 + 8);
      goto LABEL_24;
    }
    v52 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 == 4)
    {
LABEL_60:
      *(_DWORD *)(v21 + 32 * v17 + 16) = -21020677;
      goto LABEL_61;
    }
    *(_QWORD *)v22 = v52 | 2;
    v64 = v52 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v52 & 1) == 0)
    {
      if (!v64)
        goto LABEL_60;
      if ((*(_BYTE *)(v64 + 19) & 0xC) == 0)
      {
        v65 = *(_QWORD *)(v64 + 96);
        v66 = (v65 & 1) != 0 ? (v65 >> 1) & 3 : *(unsigned __int8 *)(v65 + 4);
        if (v66 != 2)
          goto LABEL_60;
      }
      goto LABEL_84;
    }
    v79 = 8 * *(unsigned int *)v64;
    do
    {
      if (!v79)
        goto LABEL_60;
      v80 = *(_QWORD *)(v64 + v79);
      if ((*(_BYTE *)(v80 + 19) & 0xC) != 0)
        break;
      v81 = *(_QWORD *)(v80 + 96);
      v82 = (v81 & 1) != 0 ? (v81 >> 1) & 3 : *(unsigned __int8 *)(v81 + 4);
      v79 -= 8;
    }
    while (v82 != 2);
    v88 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v88)
    {
      if (!(v64 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v52 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v52)) & 1) != 0)
      {
        goto LABEL_127;
      }
      v92 = v52 >> 24;
      v93 = (v52 >> 24) - *off_1ECF425F8;
      if (v92 < *off_1ECF425F8 || off_1ECF425F8[1] <= v92)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v93 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v93 & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
        {
LABEL_127:
          v89 = *(unsigned int *)(v88 + 8000);
          if (v89 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v88, v64, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v88 + 8 * v89) = v64 | 0x5000000000000;
            *(_DWORD *)(v88 + 8000) = v89 + 1;
          }
          goto LABEL_84;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v88, v64, 1, a4, a5, a6, a7, a8);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v64, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_84:
    *(_QWORD *)v22 = 4;
    goto LABEL_60;
  }
  return result;
}

unint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setConstant(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;

  v29 = *(_OWORD *)a3;
  v30 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v19 = (unsigned int *)(v16 + 20);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v21 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v21 | 2;
          v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v21 & 1) != 0)
          {
            v25 = 2 * *v22;
            while (v25 * 4)
            {
              v26 = *(_QWORD *)&v22[v25];
              if ((*(_BYTE *)(v26 + 19) & 0xC) == 0)
              {
                v27 = *(_QWORD *)(v26 + 96);
                v28 = (v27 & 1) != 0 ? (v27 >> 1) & 3 : *(unsigned __int8 *)(v27 + 4);
                v25 -= 2;
                if (v28 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v22, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_19;
            }
          }
          else if (v22)
          {
            if ((*((_BYTE *)v22 + 19) & 0xC) != 0
              || ((v23 = *((_QWORD *)v22 + 12), (v23 & 1) != 0)
                ? (v24 = (v23 >> 1) & 3)
                : (v24 = *(unsigned __int8 *)(v23 + 4)),
                  v24 == 2))
            {
LABEL_19:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
      *v19 = v17;
      v10 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      *v19 = v17;
    }
  }
  JSC::DFG::AbstractValue::set(v16, *(_QWORD **)(a1 + 8), (unint64_t *)&v29, *(unsigned __int8 *)(v10 + 82), a5, a6, a7, a8);
  return JSC::DFG::AbstractValue::fixTypeForRepresentation(v16, *(JSC::DFG::Graph **)(a1 + 8), (JSC::DFG::Node *)a2);
}

uint64_t JSC::DFG::InPlaceAbstractState::operand(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  int v25;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  if (HIDWORD(a2) == 2)
  {
    v10 = *(unsigned int *)(a1 + 36);
    v9 = *(unsigned int *)(a1 + 32) + (uint64_t)(int)a2;
    goto LABEL_4;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v9 = a2 ^ 0xFFFFFFFFLL;
    v10 = *(unsigned int *)(a1 + 32);
LABEL_4:
    v11 = v9 + v10;
    goto LABEL_5;
  }
  v11 = (int)a2 - 5;
LABEL_5:
  if (((1 << v11) & *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (v11 >> 5))) == 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 + 32 * v11;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 120);
    v15 = (uint64_t *)(v14 + 32 * v11);
    v16 = *(_QWORD *)v13;
    if (v12 != v14)
    {
      if ((v16 & 1) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      v17 = *v15;
      if ((*v15 & 1) == 0 || v17 == 4)
      {
        v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
        v16 = v17 | 2;
        if ((*(_BYTE *)v13 & 2) == 0)
          v16 = v18;
        *(_QWORD *)v13 = v16;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v13, v15);
        v16 = *(_QWORD *)v13;
      }
    }
    v19 = v16 & 0xFFFFFFFFFFFFFFFDLL;
    v20 = v16 | 2;
    if ((*(_BYTE *)v15 & 2) == 0)
      v20 = v19;
    *(_QWORD *)v13 = v20;
    v21 = *(_OWORD *)(v15 + 1);
    *(_QWORD *)(v13 + 24) = v15[3];
    *(_OWORD *)(v13 + 8) = v21;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (v11 >> 5)) |= 1 << v11;
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = (uint64_t *)(v22 + 32 * v11);
  v24 = *(_DWORD *)(a1 + 88);
  v25 = *((_DWORD *)v23 + 5);
  if (v24 != v25)
  {
    if ((v23[1] & 0x2800FFFFFFF7) != 0)
    {
      if ((v25 ^ v24) >= 2)
      {
        v27 = *v23;
        if (*v23 != 4)
        {
          *v23 = v27 | 2;
          v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v27 & 1) != 0)
          {
            v31 = 2 * *v28;
            while (v31 * 4)
            {
              v32 = *(_QWORD *)&v28[v31];
              if ((*(_BYTE *)(v32 + 19) & 0xC) == 0)
              {
                v33 = *(_QWORD *)(v32 + 96);
                v34 = (v33 & 1) != 0 ? (v33 >> 1) & 3 : *(unsigned __int8 *)(v33 + 4);
                v31 -= 2;
                if (v34 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v28, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_32;
            }
          }
          else if (v28)
          {
            if ((*((_BYTE *)v28 + 19) & 0xC) != 0
              || ((v29 = *((_QWORD *)v28 + 12), (v29 & 1) != 0)
                ? (v30 = (v29 >> 1) & 3)
                : (v30 = *(unsigned __int8 *)(v29 + 4)),
                  v30 == 2))
            {
LABEL_32:
              *v23 = 4;
            }
          }
        }
        *(_DWORD *)(v22 + 32 * v11 + 16) = -21020677;
      }
      if ((v24 & 1) != 0)
        *v23 &= ~2uLL;
    }
    *((_DWORD *)v23 + 5) = v24;
  }
  return v22 + 32 * v11;
}

uint64_t JSC::DFG::AbstractValue::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;

  v10 = *(_QWORD *)a1;
  if ((uint64_t *)a1 != a2)
  {
    if ((v10 & 1) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    if ((*a2 & 1) == 0 || v11 == 4)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
      v10 = v11 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v10 = v12;
      *(_QWORD *)a1 = v10;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a2);
      v10 = *(_QWORD *)a1;
    }
  }
  v13 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  v14 = v10 | 2;
  if ((*(_BYTE *)a2 & 2) == 0)
    v14 = v13;
  *(_QWORD *)a1 = v14;
  v15 = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + 8) = v15;
  return a1;
}

void JSC::DFG::AbstractValue::makeBytecodeTop(JSC::DFG::AbstractValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_QWORD *)this + 1) = 0x3F73FFFFFFF7;
  *((_DWORD *)this + 4) = -21020677;
  if ((*(_QWORD *)this & 1) != 0)
    WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 4;
  *((_QWORD *)this + 3) = 0;
}

void JSC::DFG::AbstractValue::makeHeapTop(JSC::DFG::AbstractValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_QWORD *)this + 1) = 0x3B73FFFFFFF7;
  *((_DWORD *)this + 4) = -21020677;
  if ((*(_QWORD *)this & 1) != 0)
    WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 4;
  *((_QWORD *)this + 3) = 0;
}

BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::handleConstantBinaryBitwiseOp(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  _BOOL8 v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD v59[2];
  int v60;
  unint64_t v61[2];
  int v62;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v10 & 1) != 0)
    v14 = (uint64_t *)(v12 + 24);
  else
    v14 = (uint64_t *)(v12 + 8);
  v15 = *v14;
  v16 = *v14 + 32 * v13;
  v17 = *(_DWORD *)(v11 + 88);
  v19 = (unsigned int *)(v16 + 20);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v34 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v34 | 2;
          v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v34 & 1) != 0)
          {
            v51 = 2 * *v36;
            while (v51 * 4)
            {
              v52 = *(_QWORD *)&v36[v51];
              if ((*(_BYTE *)(v52 + 19) & 0xC) == 0)
              {
                v53 = *(_QWORD *)(v52 + 96);
                v54 = (v53 & 1) != 0 ? (v53 >> 1) & 3 : *(unsigned __int8 *)(v53 + 4);
                v51 -= 2;
                if (v54 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v36, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_40;
            }
          }
          else if (v36)
          {
            if ((*((_BYTE *)v36 + 19) & 0xC) != 0
              || ((v37 = *((_QWORD *)v36 + 12), (v37 & 1) != 0)
                ? (v38 = (v37 >> 1) & 3)
                : (v38 = *(unsigned __int8 *)(v37 + 4)),
                  v38 == 2))
            {
LABEL_40:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v13 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
      *v19 = v17;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      *v19 = v17;
    }
  }
  v20 = *(_QWORD *)(v16 + 24);
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (uint64_t *)(v12 + 24);
  v24 = (uint64_t *)(v12 + 8);
  if ((v21 & 1) != 0)
    v24 = v23;
  v25 = *v24;
  v26 = *v24 + 32 * v22;
  v27 = *(_DWORD *)(v11 + 88);
  v28 = *(_DWORD *)(v26 + 20);
  if (v27 != v28)
  {
    if ((*(_QWORD *)(v26 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v28 ^ v27) >= 2)
      {
        v35 = *(_QWORD *)v26;
        if (*(_QWORD *)v26 != 4)
        {
          *(_QWORD *)v26 = v35 | 2;
          v39 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v55 = 2 * *v39;
            while (v55 * 4)
            {
              v56 = *(_QWORD *)&v39[v55];
              if ((*(_BYTE *)(v56 + 19) & 0xC) == 0)
              {
                v57 = *(_QWORD *)(v56 + 96);
                v58 = (v57 & 1) != 0 ? (v57 >> 1) & 3 : *(unsigned __int8 *)(v57 + 4);
                v55 -= 2;
                if (v58 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v39, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_47;
            }
          }
          else if (v39)
          {
            if ((*((_BYTE *)v39 + 19) & 0xC) != 0
              || ((v40 = *((_QWORD *)v39 + 12), (v40 & 1) != 0)
                ? (v41 = (v40 >> 1) & 3)
                : (v41 = *(unsigned __int8 *)(v40 + 4)),
                  v41 == 2))
            {
LABEL_47:
              *(_QWORD *)v26 = 4;
            }
          }
        }
        *(_DWORD *)(v25 + 32 * v22 + 16) = -21020677;
      }
      if ((v27 & 1) != 0)
        *(_QWORD *)v26 &= ~2uLL;
    }
    *(_DWORD *)(v26 + 20) = v27;
  }
  v29 = *(_QWORD *)(v26 + 24);
  v32 = v20 > 0xFFFDFFFFFFFFFFFFLL && v29 != 0 && v29 > 0xFFFDFFFFFFFFFFFFLL;
  if (v32)
  {
    if ((*(_BYTE *)(a2 + 30) & 0xFC) == 0 && (*(_BYTE *)(a2 + 38) & 0xFC) == 0)
    {
      v49 = *(_QWORD *)(a1 + 24);
      v50 = *(unsigned __int8 *)(v49 + 81);
      if (v50 <= 1)
        LOBYTE(v50) = 1;
      *(_BYTE *)(v49 + 81) = v50;
    }
    switch(*(_WORD *)(a2 + 18))
    {
      case '+':
      case ',':
        v42 = v20 & v29;
        goto LABEL_51;
      case '-':
      case '.':
        v42 = v29 | v20;
        goto LABEL_51;
      case '/':
      case '0':
        v59[0] = v29 ^ v20 | 0xFFFE000000000000;
        v59[1] = 0;
        v60 = 0;
        JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setConstant(a1, a2, (uint64_t)v59, a4, a5, a6, a7, a8);
        return v32;
      case '1':
      case '2':
        v42 = ((_DWORD)v20 << v29);
        goto LABEL_51;
      case '3':
      case '4':
        v42 = ((int)v20 >> v29);
        goto LABEL_51;
      case '5':
        v42 = v20 >> v29;
LABEL_51:
        v61[0] = v42 | 0xFFFE000000000000;
        v61[1] = 0;
        v62 = 0;
        v43 = *(_QWORD *)(a1 + 24);
        v44 = *(_QWORD *)(v43 + 8);
        v45 = (_QWORD *)(v44 + 24);
        v46 = (_QWORD *)(v44 + 8);
        if ((a2 & 1) != 0)
          v46 = v45;
        v47 = *v46 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
        v48 = (void *)*(unsigned int *)(v43 + 88);
        if ((_DWORD)v48 != *(_DWORD *)(v47 + 20))
        {
          if ((*(_QWORD *)(v47 + 8) & 0x2800FFFFFFF7) != 0)
          {
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v47, v48, a3, a4, a5, a6, a7, a8);
            v43 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            *(_DWORD *)(v47 + 20) = (_DWORD)v48;
          }
        }
        JSC::DFG::AbstractValue::set(v47, *(_QWORD **)(a1 + 8), v61, *(unsigned __int8 *)(v43 + 82), a5, a6, a7, a8);
        JSC::DFG::AbstractValue::fixTypeForRepresentation(v47, *(JSC::DFG::Graph **)(a1 + 8), (JSC::DFG::Node *)a2);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197C68A98);
    }
  }
  return v32;
}

uint64_t JSC::toUInt32(JSC *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;

  v2 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  if ((v2 - 1023) > 0x53)
    return 0;
  v4 = *(_QWORD *)&a2 >> (51 - (*(_QWORD *)&a2 >> 52));
  if (v2 > 0x433)
    LODWORD(v4) = *(_QWORD *)&a2 << ((*(_QWORD *)&a2 >> 52) - 51);
  if (v2 >= 0x41F)
    v5 = v4;
  else
    v5 = (((1 << ((*(_QWORD *)&a2 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a2 >> 52) + 1));
  if (a2 >= 0.0)
    return v5;
  else
    return -v5;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::handleConstantDivOp(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  double v60;
  double v61;
  double v62;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  double v70;
  double v71;
  double v72;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  _QWORD v89[2];
  int v90;
  _QWORD v91[2];
  int v92;
  _QWORD v93[2];
  int v94;
  _QWORD v95[2];
  int v96;
  unint64_t v97[2];
  int v98;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v10 & 1) != 0)
    v14 = (uint64_t *)(v12 + 24);
  else
    v14 = (uint64_t *)(v12 + 8);
  v15 = *v14;
  v16 = *v14 + 32 * v13;
  v17 = *(_DWORD *)(v11 + 88);
  v19 = (unsigned int *)(v16 + 20);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v31 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v31 | 2;
          v45 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
          {
            v81 = 2 * *v45;
            while (v81 * 4)
            {
              v82 = *(_QWORD *)&v45[v81];
              if ((*(_BYTE *)(v82 + 19) & 0xC) == 0)
              {
                v83 = *(_QWORD *)(v82 + 96);
                v84 = (v83 & 1) != 0 ? (v83 >> 1) & 3 : *(unsigned __int8 *)(v83 + 4);
                v81 -= 2;
                if (v84 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_55;
            }
          }
          else if (v45)
          {
            if ((*((_BYTE *)v45 + 19) & 0xC) != 0
              || ((v46 = *((_QWORD *)v45 + 12), (v46 & 1) != 0)
                ? (v47 = (v46 >> 1) & 3)
                : (v47 = *(unsigned __int8 *)(v46 + 4)),
                  v47 == 2))
            {
LABEL_55:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v13 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
      *v19 = v17;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      *v19 = v17;
    }
  }
  v20 = *(_QWORD *)(v16 + 24);
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (uint64_t *)(v12 + 24);
  v24 = (uint64_t *)(v12 + 8);
  if ((v21 & 1) != 0)
    v24 = v23;
  v25 = *v24;
  v26 = *v24 + 32 * v22;
  v27 = *(_DWORD *)(v11 + 88);
  v28 = *(_DWORD *)(v26 + 20);
  if (v27 != v28)
  {
    if ((*(_QWORD *)(v26 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v28 ^ v27) >= 2)
      {
        v32 = *(_QWORD *)v26;
        if (*(_QWORD *)v26 != 4)
        {
          *(_QWORD *)v26 = v32 | 2;
          v48 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v32 & 1) != 0)
          {
            v85 = 2 * *v48;
            while (v85 * 4)
            {
              v86 = *(_QWORD *)&v48[v85];
              if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
              {
                v87 = *(_QWORD *)(v86 + 96);
                v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
                v85 -= 2;
                if (v88 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v48, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_62;
            }
          }
          else if (v48)
          {
            if ((*((_BYTE *)v48 + 19) & 0xC) != 0
              || ((v49 = *((_QWORD *)v48 + 12), (v49 & 1) != 0)
                ? (v50 = (v49 >> 1) & 3)
                : (v50 = *(unsigned __int8 *)(v49 + 4)),
                  v50 == 2))
            {
LABEL_62:
              *(_QWORD *)v26 = 4;
            }
          }
        }
        *(_DWORD *)(v25 + 32 * v22 + 16) = -21020677;
      }
      if ((v27 & 1) != 0)
        *(_QWORD *)v26 &= ~2uLL;
    }
    *(_DWORD *)(v26 + 20) = v27;
  }
  result = 0;
  if (v20)
  {
    v30 = *(_QWORD *)(v26 + 24);
    if (v30)
    {
      v33 = *(unsigned __int16 *)(a2 + 18);
      if (v20 < 0xFFFE000000000000)
      {
        result = 0;
        if (!(v20 >> 49) || !(v30 >> 49))
          return result;
      }
      else
      {
        if (v30 >= 0xFFFE000000000000)
        {
          if (v33 == 88 || v33 == 68)
            v34 = (double)(int)v20 / (double)(int)v30;
          else
            v34 = fmod((double)(int)v20, (double)(int)v30);
          if ((v33 - 68) < 3 || (v33 - 55) <= 0xB && ((1 << (v33 - 55)) & 0xE85) != 0)
          {
            v35 = *(_DWORD *)(a2 + 72);
            if (v35 == 1)
            {
              v74 = *(_QWORD *)&v34;
              v75 = (*(_QWORD *)&v34 >> 52) & 0x7FFLL;
              v76 = (*(_QWORD *)&v34 >> 52) + 1;
              v34 = 0.0;
              if ((v75 - 1023) <= 0x53)
              {
                v77 = (unint64_t)v74 >> (51 - v75);
                if (v75 > 0x433)
                  LODWORD(v77) = v74 << (v75 - 51);
                v78 = (((1 << v76) - 1) & v77) + (1 << v76);
                if (v75 >= 0x41F)
                  v79 = v77;
                else
                  v79 = v78;
                if (v74 >= 0)
                  v80 = v79;
                else
                  v80 = -v79;
                v34 = (double)v80;
              }
            }
            else if ((v35 - 3) >= 0xFFFFFFFE)
            {
              v34 = v34 + 0.0;
            }
          }
          if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v36 = (int)v34;
            if (v34 == (double)(int)v36 && ((_DWORD)v36 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
            {
              v37 = v36 | 0xFFFE000000000000;
LABEL_40:
              if ((v33 | 2) == 0x5A)
              {
                v38 = *(_QWORD *)(a1 + 24);
                v39 = *(unsigned __int8 *)(v38 + 81);
                if (v39 <= 1)
                  LOBYTE(v39) = 1;
                *(_BYTE *)(v38 + 81) = v39;
              }
              else
              {
                v38 = *(_QWORD *)(a1 + 24);
              }
              v97[0] = v37;
              v97[1] = 0;
              v98 = 0;
              v40 = *(_QWORD *)(v38 + 8);
              v41 = (_QWORD *)(v40 + 24);
              v42 = (_QWORD *)(v40 + 8);
              if ((a2 & 1) != 0)
                v42 = v41;
              v43 = *v42 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
              v44 = (void *)*(unsigned int *)(v38 + 88);
              if ((_DWORD)v44 != *(_DWORD *)(v43 + 20))
              {
                if ((*(_QWORD *)(v43 + 8) & 0x2800FFFFFFF7) != 0)
                {
                  JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v43, v44, a3, a4, a5, a6, a7, a8);
                  v38 = *(_QWORD *)(a1 + 24);
                }
                else
                {
                  *(_DWORD *)(v43 + 20) = (_DWORD)v44;
                }
              }
              JSC::DFG::AbstractValue::set(v43, *(_QWORD **)(a1 + 8), v97, *(unsigned __int8 *)(v38 + 82), a5, a6, a7, a8);
              JSC::DFG::AbstractValue::fixTypeForRepresentation(v43, *(JSC::DFG::Graph **)(a1 + 8), (JSC::DFG::Node *)a2);
              return 1;
            }
          }
          v37 = *(_QWORD *)&v34 + 0x2000000000000;
          if ((unint64_t)(*(_QWORD *)&v34 + 0x2000000000000) >= 0xFFFE000000000000)
            goto LABEL_40;
          return 0;
        }
        if (!(v30 >> 49))
          return 0;
      }
      if (v33 != 88 && v33 != 90)
      {
        if (v33 == 68)
        {
          v60 = (double)(int)v20;
          if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v60 = v20 - 0x2000000000000;
          v61 = (double)(int)v30;
          if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v61 = v30 - 0x2000000000000;
          v62 = v60 / v61;
          v93[0] = *(_QWORD *)&v62 + 0x2000000000000;
          v93[1] = 0;
          v94 = 0;
          if (v62 != NAN && ((*(_QWORD *)&v62 + 0x2000000000000) & 0xFFFE000000000002) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197C692A0);
          }
          v59 = v93;
        }
        else
        {
          v70 = (double)(int)v20;
          if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v70 = v20 - 0x2000000000000;
          v71 = (double)(int)v30;
          if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v71 = v30 - 0x2000000000000;
          v72 = fmod(v70, v71);
          v89[0] = *(_QWORD *)&v72 + 0x2000000000000;
          v89[1] = 0;
          v90 = 0;
          if (v72 != NAN && ((*(_QWORD *)&v72 + 0x2000000000000) & 0xFFFE000000000002) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197C69280);
          }
          v59 = v89;
        }
        goto LABEL_88;
      }
      v51 = *(_QWORD *)(a1 + 24);
      v52 = *(unsigned __int8 *)(v51 + 81);
      if (v52 <= 1)
        LOBYTE(v52) = 1;
      *(_BYTE *)(v51 + 81) = v52;
      if (v33 == 88)
      {
        v53 = (double)(int)v20;
        if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v53 = v20 - 0x2000000000000;
        v54 = (double)(int)v30;
        if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v54 = v30 - 0x2000000000000;
        v55 = v53 / v54;
        if ((*(_QWORD *)&v55 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v56 = (int)v55, v55 == (double)(int)v56)
          && ((_DWORD)v56 || (*(_QWORD *)&v55 & 0x8000000000000000) == 0))
        {
          v57 = v56 | 0xFFFE000000000000;
        }
        else
        {
          v57 = *(_QWORD *)&v55 + 0x2000000000000;
        }
        v95[0] = v57;
        v95[1] = 0;
        v96 = 0;
        if (v57)
          v58 = (v57 & 0xFFFE000000000002) == 0;
        else
          v58 = 0;
        if (!v58)
        {
          v59 = v95;
LABEL_88:
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setConstant(a1, a2, (uint64_t)v59, a4, a5, a6, a7, a8);
          return 1;
        }
      }
      else
      {
        v64 = (double)(int)v20;
        if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v64 = v20 - 0x2000000000000;
        v65 = (double)(int)v30;
        if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v65 = v30 - 0x2000000000000;
        v66 = fmod(v64, v65);
        if ((*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v67 = (int)v66, v66 == (double)(int)v67)
          && ((_DWORD)v67 || (*(_QWORD *)&v66 & 0x8000000000000000) == 0))
        {
          v68 = v67 | 0xFFFE000000000000;
        }
        else
        {
          v68 = *(_QWORD *)&v66 + 0x2000000000000;
        }
        v91[0] = v68;
        v91[1] = 0;
        v92 = 0;
        if (v68)
          v69 = (v68 & 0xFFFE000000000002) == 0;
        else
          v69 = 0;
        if (!v69)
        {
          v59 = v91;
          goto LABEL_88;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x197C69260);
    }
  }
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#1}>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  double v51;
  uint64_t v52;
  unsigned int v53;
  double v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD v65[2];
  int v66;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v10 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v43 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v43 | 2;
          v45 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v43 & 1) != 0)
          {
            v56 = 2 * *v45;
            while (v56 * 4)
            {
              v57 = *(_QWORD *)&v45[v56];
              if ((*(_BYTE *)(v57 + 19) & 0xC) == 0)
              {
                v58 = *(_QWORD *)(v57 + 96);
                v59 = (v58 & 1) != 0 ? (v58 >> 1) & 3 : *(unsigned __int8 *)(v58 + 4);
                v56 -= 2;
                if (v59 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_43;
            }
          }
          else if (v45)
          {
            if ((*((_BYTE *)v45 + 19) & 0xC) != 0
              || ((v46 = *((_QWORD *)v45 + 12), (v46 & 1) != 0)
                ? (v47 = (v46 >> 1) & 3)
                : (v47 = *(unsigned __int8 *)(v46 + 4)),
                  v47 == 2))
            {
LABEL_43:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  v21 = *(_QWORD *)(v18 + 24);
  if (!v21)
    goto LABEL_6;
  if (v21 >> 49)
  {
    v51 = (double)(int)v21;
    if (v21 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v51 = v21 - 0x2000000000000;
    goto LABEL_54;
  }
  if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v51 = 0.0;
    if (v21 == 7)
      v51 = 1.0;
    goto LABEL_54;
  }
  if (v21 == 10)
  {
    v51 = NAN;
    goto LABEL_54;
  }
  if (v21 == 2)
  {
    v51 = 0.0;
LABEL_54:
    if ((*(_QWORD *)(a2 + 24) & 0xFC000000000000) != 0xC4000000000000)
    {
      v52 = *(_QWORD *)(a1 + 24);
      v53 = *(unsigned __int8 *)(v52 + 81);
      if (v53 <= 1)
        LOBYTE(v53) = 1;
      *(_BYTE *)(v52 + 81) = v53;
    }
    v54 = sqrt(v51);
    v65[0] = *(_QWORD *)&v54 + 0x2000000000000;
    v65[1] = 0;
    v66 = 0;
    if (v54 != NAN && ((*(_QWORD *)&v54 + 0x2000000000000) & 0xFFFE000000000002) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C696F4);
    }
    JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setConstant(a1, a2, (uint64_t)v65, a4, a5, a6, a7, a8);
    return;
  }
LABEL_6:
  v22 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a1 + 24);
  if ((v22 & 0xFC000000000000) == 0xC4000000000000)
  {
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(unsigned int *)((v22 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v26 = (uint64_t *)(v24 + 24);
    v27 = (uint64_t *)(v24 + 8);
    if ((v22 & 1) != 0)
      v28 = v26;
    else
      v28 = v27;
    v29 = *v28;
    v30 = *v28 + 32 * v25;
    v31 = *(_DWORD *)(v23 + 88);
    v33 = (unsigned int *)(v30 + 20);
    v32 = *(_DWORD *)(v30 + 20);
    if (v31 != v32)
    {
      if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v32 ^ v31) >= 2)
        {
          v44 = *(_QWORD *)v30;
          if (*(_QWORD *)v30 != 4)
          {
            *(_QWORD *)v30 = v44 | 2;
            v48 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v44 & 1) != 0)
            {
              v60 = 2 * *v48;
              while (v60 * 4)
              {
                v61 = *(_QWORD *)&v48[v60];
                if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
                {
                  v62 = *(_QWORD *)(v61 + 96);
                  v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                  v60 -= 2;
                  if (v63 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v48, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_50;
              }
            }
            else if (v48)
            {
              if ((*((_BYTE *)v48 + 19) & 0xC) != 0
                || ((v49 = *((_QWORD *)v48 + 12), (v49 & 1) != 0)
                  ? (v50 = (v49 >> 1) & 3)
                  : (v50 = *(unsigned __int8 *)(v49 + 4)),
                    v50 == 2))
              {
LABEL_50:
                *(_QWORD *)v30 = 4;
              }
            }
          }
          *(_DWORD *)(v29 + 32 * v25 + 16) = -21020677;
        }
        if ((v31 & 1) != 0)
          *(_QWORD *)v30 &= ~2uLL;
        *v33 = v31;
        v23 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *v33 = v31;
      }
    }
    v34 = *(_QWORD *)(v30 + 8);
    if ((v34 & 0x8000000000) != 0)
      v34 |= 0xC000000000uLL;
    if ((v34 & 0x3000000000) != 0)
      v35 = v34 | 0x7000000000;
    else
      v35 = v34;
  }
  else
  {
    *(_DWORD *)(v23 + 88) = (*(_DWORD *)(v23 + 88) & 0xFFFFFFFE) + 2;
    v64 = *(unsigned __int8 *)(v23 + 81);
    if (v64 <= 3)
      LOBYTE(v64) = 3;
    *(_BYTE *)(v23 + 81) = v64;
    *(_BYTE *)(v23 + 82) = 1;
    v35 = 0x7300000000;
  }
  v36 = *(_QWORD *)(v23 + 8);
  v37 = (uint64_t *)(v36 + 24);
  v38 = (uint64_t *)(v36 + 8);
  if ((a2 & 1) != 0)
    v38 = v37;
  if ((v35 & 0x2800FFFFFFF7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197C69610);
  }
  v39 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v40 = *v38;
  v41 = (_QWORD *)(*v38 + 32 * v39);
  if ((*v41 & 1) != 0)
    WTF::fastFree(*v41 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
  *v41 = 0;
  v42 = v40 + 32 * v39;
  *(_DWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 8) = v35;
  *(_QWORD *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 20) = *(_DWORD *)(v23 + 88);
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#2}>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  double v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  double v43;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((v10 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
      v10 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
    }
  }
  v48 = *(_QWORD *)(v15 + 24);
  JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)&v48);
  v25 = v10 & 0xFC000000000000;
  if ((_BYTE)v18)
  {
    if (v25 != 0xC4000000000000)
    {
      v40 = *(_QWORD *)(a1 + 24);
      v41 = *(unsigned __int8 *)(v40 + 81);
      if (v41 <= 1)
        LOBYTE(v41) = 1;
      *(_BYTE *)(v40 + 81) = v41;
    }
    v42 = v17;
    v43 = v42;
    v46[0] = *(_QWORD *)&v43 + 0x2000000000000;
    v46[1] = 0;
    v47 = 0;
    if (v43 == NAN || ((*(_QWORD *)&v43 + 0x2000000000000) & 0xFFFE000000000002) != 0)
    {
      JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setConstant(a1, a2, (uint64_t)v46, v20, v21, v22, v23, v24);
      return;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197C699ACLL);
  }
  v26 = *(_QWORD *)(a1 + 24);
  if (v25 == 0xC4000000000000)
  {
    v27 = *(_QWORD *)(v26 + 8);
    v28 = (_QWORD *)(v27 + 24);
    v29 = (_QWORD *)(v27 + 8);
    if ((v10 & 1) != 0)
      v29 = v28;
    v30 = *v29 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v18 = (void *)*(unsigned int *)(v26 + 88);
    if ((_DWORD)v18 != *(_DWORD *)(v30 + 20))
    {
      if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v30, v18, v19, v20, v21, v22, v23, v24);
        v26 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *(_DWORD *)(v30 + 20) = (_DWORD)v18;
      }
    }
    v31 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x8000000000) != 0)
      v31 |= 0xC000000000uLL;
    if ((v31 & 0x3000000000) != 0)
      v32 = v31 | 0x7000000000;
    else
      v32 = v31;
  }
  else
  {
    *(_DWORD *)(v26 + 88) = (*(_DWORD *)(v26 + 88) & 0xFFFFFFFE) + 2;
    v45 = *(unsigned __int8 *)(v26 + 81);
    if (v45 <= 3)
      LOBYTE(v45) = 3;
    *(_BYTE *)(v26 + 81) = v45;
    *(_BYTE *)(v26 + 82) = 1;
    v32 = 0x7300000000;
  }
  v33 = *(_QWORD *)(v26 + 8);
  v34 = (uint64_t *)(v33 + 24);
  v35 = (uint64_t *)(v33 + 8);
  if ((a2 & 1) != 0)
    v35 = v34;
  if ((v32 & 0x2800FFFFFFF7) != 0)
    goto LABEL_38;
  v36 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v37 = *v35;
  v38 = (_QWORD *)(*v35 + 32 * v36);
  if ((*v38 & 1) != 0)
    WTF::fastFree(*v38 & 0xFFFFFFFFFFFFFFFCLL, v18, v19, v20, v21, v22, v23, v24);
  *v38 = 0;
  v39 = v37 + 32 * v36;
  *(_DWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 8) = v32;
  *(_QWORD *)(v39 + 24) = 0;
  *(_DWORD *)(v39 + 20) = *(_DWORD *)(v26 + 88);
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeDoubleUnaryOpEffects<double (*)(double)>(uint64_t a1, unint64_t a2, double (**a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77[2];
  int v78;

  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (uint64_t *)(v13 + 24);
  v16 = (uint64_t *)(v13 + 8);
  if ((v11 & 1) != 0)
    v17 = v15;
  else
    v17 = v16;
  v18 = *v17;
  v19 = *v17 + 32 * v14;
  v20 = *(_DWORD *)(v12 + 88);
  v21 = *(_DWORD *)(v19 + 20);
  if (v20 != v21)
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v21 ^ v20) >= 2)
      {
        v45 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 != 4)
        {
          *(_QWORD *)v19 = v45 | 2;
          v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v45 & 1) != 0)
          {
            v67 = 2 * *v47;
            while (v67 * 4)
            {
              v68 = *(_QWORD *)&v47[v67];
              if ((*(_BYTE *)(v68 + 19) & 0xC) == 0)
              {
                v69 = *(_QWORD *)(v68 + 96);
                v70 = (v69 & 1) != 0 ? (v69 >> 1) & 3 : *(unsigned __int8 *)(v69 + 4);
                v67 -= 2;
                if (v70 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_46;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_46:
              *(_QWORD *)v19 = 4;
            }
          }
        }
        *(_DWORD *)(v18 + 32 * v14 + 16) = -21020677;
      }
      if ((v20 & 1) != 0)
        *(_QWORD *)v19 &= ~2uLL;
    }
    *(_DWORD *)(v19 + 20) = v20;
  }
  v22 = *(_QWORD *)(v19 + 24);
  if (v22 && (v22 >> 49 || (v22 & 0xFFFFFFFFFFFFFFFELL) == 6 || v22 == 10 || v22 == 2))
  {
    if ((*(_QWORD *)(a2 + 24) & 0xFC000000000000) != 0xC4000000000000)
    {
      v75 = *(_QWORD *)(a1 + 24);
      v76 = *(unsigned __int8 *)(v75 + 81);
      if (v76 <= 1)
        LOBYTE(v76) = 1;
      *(_BYTE *)(v75 + 81) = v76;
    }
    v59 = (*a3)();
    if (v59 != NAN && ((*(_QWORD *)&v59 + 0x2000000000000) & 0xFFFE000000000002) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C69E80);
    }
    v77[0] = *(_QWORD *)&v59 + 0x2000000000000;
    v77[1] = 0;
    v78 = 0;
    v61 = *(_QWORD *)(a1 + 24);
    v62 = *(_QWORD *)(v61 + 8);
    v63 = (_QWORD *)(v62 + 24);
    v64 = (_QWORD *)(v62 + 8);
    if ((a2 & 1) != 0)
      v64 = v63;
    v65 = *v64 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
    v66 = (void *)*(unsigned int *)(v61 + 88);
    if ((_DWORD)v66 != *(_DWORD *)(v65 + 20))
    {
      if ((*(_QWORD *)(v65 + 8) & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v65, v66, v53, v54, v55, v56, v57, v58);
        v61 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *(_DWORD *)(v65 + 20) = (_DWORD)v66;
      }
    }
    JSC::DFG::AbstractValue::set(v65, *(_QWORD **)(a1 + 8), v77, *(unsigned __int8 *)(v61 + 82), v55, v56, v57, v58);
    JSC::DFG::AbstractValue::fixTypeForRepresentation(v65, *(JSC::DFG::Graph **)(a1 + 8), (JSC::DFG::Node *)a2);
  }
  else
  {
    v23 = *(_QWORD *)(a2 + 24);
    v24 = *(_QWORD *)(a1 + 24);
    if ((v23 & 0xFC000000000000) == 0xC4000000000000)
    {
      v25 = *(_QWORD *)(v24 + 8);
      v26 = *(unsigned int *)((v23 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v27 = (uint64_t *)(v25 + 24);
      v28 = (uint64_t *)(v25 + 8);
      if ((v23 & 1) != 0)
        v29 = v27;
      else
        v29 = v28;
      v30 = *v29;
      v31 = *v29 + 32 * v26;
      v32 = *(_DWORD *)(v24 + 88);
      v34 = (unsigned int *)(v31 + 20);
      v33 = *(_DWORD *)(v31 + 20);
      if (v32 != v33)
      {
        if ((*(_QWORD *)(v31 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v33 ^ v32) >= 2)
          {
            v46 = *(_QWORD *)v31;
            if (*(_QWORD *)v31 != 4)
            {
              *(_QWORD *)v31 = v46 | 2;
              v50 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v46 & 1) != 0)
              {
                v71 = 2 * *v50;
                while (v71 * 4)
                {
                  v72 = *(_QWORD *)&v50[v71];
                  if ((*(_BYTE *)(v72 + 19) & 0xC) == 0)
                  {
                    v73 = *(_QWORD *)(v72 + 96);
                    v74 = (v73 & 1) != 0 ? (v73 >> 1) & 3 : *(unsigned __int8 *)(v73 + 4);
                    v71 -= 2;
                    if (v74 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v50, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  goto LABEL_53;
                }
              }
              else if (v50)
              {
                if ((*((_BYTE *)v50 + 19) & 0xC) != 0
                  || ((v51 = *((_QWORD *)v50 + 12), (v51 & 1) != 0)
                    ? (v52 = (v51 >> 1) & 3)
                    : (v52 = *(unsigned __int8 *)(v51 + 4)),
                      v52 == 2))
                {
LABEL_53:
                  *(_QWORD *)v31 = 4;
                }
              }
            }
            *(_DWORD *)(v30 + 32 * v26 + 16) = -21020677;
          }
          if ((v32 & 1) != 0)
            *(_QWORD *)v31 &= ~2uLL;
          *v34 = v32;
          v24 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          *v34 = v32;
        }
      }
      v35 = *(_QWORD *)(v31 + 8);
      if ((v35 & 0x8000000000) != 0)
        v35 |= 0xC000000000uLL;
      if ((v35 & 0x3000000000) != 0)
        v36 = v35 | 0x7000000000;
      else
        v36 = v35;
    }
    else
    {
      *(_DWORD *)(v24 + 88) = (*(_DWORD *)(v24 + 88) & 0xFFFFFFFE) + 2;
      v44 = *(unsigned __int8 *)(v24 + 81);
      if (v44 <= 3)
        LOBYTE(v44) = 3;
      *(_BYTE *)(v24 + 81) = v44;
      *(_BYTE *)(v24 + 82) = 1;
      v36 = 0x7300000000;
    }
    v37 = *(_QWORD *)(v24 + 8);
    v38 = (uint64_t *)(v37 + 24);
    v39 = (uint64_t *)(v37 + 8);
    if ((a2 & 1) != 0)
      v39 = v38;
    if ((v36 & 0x2800FFFFFFF7) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C69DA8);
    }
    v40 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
    v41 = *v39;
    v42 = (_QWORD *)(*v39 + 32 * v40);
    if ((*v42 & 1) != 0)
      WTF::fastFree(*v42 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *v42 = 0;
    v43 = v41 + 32 * v40;
    *(_DWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 8) = v36;
    *(_QWORD *)(v43 + 24) = 0;
    *(_DWORD *)(v43 + 20) = *(_DWORD *)(v24 + 88);
  }
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::BOOLeanResult(_QWORD *a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v8 = a3[3];
  if (v8)
  {
    v15 = *a1;
    v16 = (uint64_t *)(*a2 & 0xFFFFFFFF8);
    if ((*a2 & 1) != 0)
    {
      v56 = v15;
      v53 = a3[3];
      v34 = *v16;
      if ((*a2 & 2) != 0
        || ((v35 = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8), v35 != 0x3FFFFFFF) ? (v36 = v35 == -1) : (v36 = 1), v36))
      {
        v37 = 2;
      }
      else if (v35 >> 28)
      {
        v45 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v45 = v34;
        *(_DWORD *)(v45 + 8) = v35;
        v37 = 1;
        v34 = v45;
      }
      else
      {
        v37 = *v16;
        v34 = 0;
      }
      v38 = v34 | v37;
      v16 = (uint64_t *)(v38 & 0xFFFFFFFF8);
      if ((v38 & 1) != 0)
      {
        v17 = 0;
        v18 = *v16;
      }
      else
      {
        v17 = 1;
        v18 = v38 & 0xFFFFFFFF8;
      }
      v8 = v53;
      v15 = v56;
    }
    else
    {
      v17 = 1;
      v18 = *a2 & 0xFFFFFFFF8;
    }
    if (v18)
      v15 = *(_QWORD *)(v18 + 8);
    if (v8 >= 0xFFFE000000000000)
    {
      v30 = (_DWORD)v8 == 0;
    }
    else
    {
      *(_QWORD *)&v19 = v8 - 0x2000000000000;
      if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v13 = v19 > 0.0 || v19 < 0.0;
LABEL_16:
        if ((v17 & 1) == 0 && v16)
        {
          v20 = v13;
          WTF::fastFree((unint64_t)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          return v20;
        }
        return v13;
      }
      if ((v8 & 0xFFFE000000000002) != 0)
      {
        v13 = v8 == 7;
        goto LABEL_16;
      }
      v28 = *(unsigned __int8 *)(v8 + 5);
      if (v28 == 2)
      {
        v31 = *(_QWORD *)(v8 + 8);
        v32 = (int *)(v8 + 16);
        if ((v31 & 1) == 0)
          v32 = (int *)(v31 + 4);
        v33 = *v32;
      }
      else
      {
        if (v28 != 3)
        {
          v29 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v29 + 10) & 1) == 0)
          {
            v13 = 1;
            goto LABEL_16;
          }
          v30 = *(_QWORD *)(v29 + 40) == *(_QWORD *)(v15 + 8);
          goto LABEL_37;
        }
        v33 = *(_DWORD *)(v8 + 8);
      }
      v30 = v33 == 0;
    }
LABEL_37:
    v13 = !v30;
    goto LABEL_16;
  }
  v9 = a3[1];
  v10 = v9 & 0x2800FFFFFFF7;
  v11 = v9 & 0xFFFFD7FF00000008;
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 0;
  if (v12)
  {
    v21 = *a3;
    if (*a3 != 4)
    {
      if ((v21 & 1) != 0)
        v22 = *(_DWORD *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v22 = v21 > 3;
      for (i = 8 * v22; ; i -= 8)
      {
        if (!i)
          return 1;
        v24 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*a3 & 1) != 0)
          v24 = *(_QWORD *)(v24 + i);
        v25 = *a1;
        v26 = *a2;
        if ((*a2 & 1) != 0)
        {
          v49 = v24;
          v50 = *a1;
          v57 = i;
          v51 = a2;
          v54 = a1;
          v48 = a3;
          v39 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
          if ((v26 & 2) != 0
            || ((v40 = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8), v40 != 0x3FFFFFFF) ? (v41 = v40 == -1) : (v41 = 1), v41))
          {
            v42 = 2;
          }
          else if (v40 >> 28)
          {
            v47 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v47 = v39;
            *(_DWORD *)(v47 + 8) = v40;
            v42 = 1;
            v39 = v47;
          }
          else
          {
            v42 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
            v39 = 0;
          }
          v26 = v39 | v42;
          a2 = v51;
          a1 = v54;
          a3 = v48;
          v24 = v49;
          i = v57;
          v25 = v50;
        }
        if ((*(_BYTE *)(v24 + 10) & 1) != 0)
        {
          v46 = (_QWORD *)(v26 & 0xFFFFFFFF8);
          if ((v26 & 1) != 0)
            v46 = (_QWORD *)*v46;
          if (v46)
            v25 = v46[1];
          if (*(_QWORD *)(v24 + 40) == *(_QWORD *)(v25 + 8))
            break;
        }
        v27 = *(unsigned __int8 *)(v24 + 9);
        if (v27 == 2)
          break;
        if ((v26 & 1) != 0)
        {
          v43 = v26 & 0xFFFFFFFF8;
          if (v43)
          {
            v52 = a2;
            v55 = a1;
            v44 = a3;
            v58 = i;
            WTF::fastFree(v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            i = v58;
            a2 = v52;
            a1 = v55;
            a3 = v44;
          }
        }
        v13 = 2;
        if (v27 == 3)
          return v13;
      }
      if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v26 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 2;
}

BOOL JSC::JSValue::strictEqual(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  int v11;
  BOOL v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int8x16_t *v23;
  int8x16_t *v24;
  __int32 v25;
  __int32 v26;
  double v27;
  double v28;
  uint8x8_t *v29;
  unsigned int v30;
  int16x8_t *v31;
  uint16x8_t v32;
  unsigned int v33;
  uint16x8_t v34;
  BOOL v35;
  int16x8_t *v36;
  unsigned int v37;
  uint8x8_t *v38;
  uint16x8_t v39;
  unsigned int v40;
  uint16x8_t v41;
  BOOL v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  __int32 v54;
  int v55;
  int v56;
  int v57;
  unsigned int *v58;
  int *v59;
  int v60;
  unint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  char *v65;
  int *v66;
  unint64_t v67;
  unint64_t v68;
  int *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  int8x16_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint16x8_t v90;
  unsigned __int8 *v91;
  uint16x8_t v92;
  int8x16_t *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  char *v97;
  int v98;
  uint8x16_t v99;
  unsigned int v100;
  uint8x16_t v101;
  BOOL v102;
  unint64_t v103;
  int16x8_t *v104;
  unsigned int v105;
  uint8x8_t *v106;
  uint16x8_t v107;
  unsigned int v108;
  uint16x8_t v109;
  BOOL v110;
  unsigned int v111;
  uint16x8_t v112;
  BOOL v113;
  uint8x8_t *v114;
  unsigned int v115;
  int16x8_t *v116;
  uint16x8_t v117;
  unsigned int v118;
  uint16x8_t v119;
  BOOL v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v129;
  int v130;
  int v131;
  __int32 v132;
  uint64_t v133;
  int v134;
  int v135;
  uint16x8_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int32 v144;
  __int32 v145;
  uint8x16_t v146;
  unsigned int v147;
  uint8x16_t v148;
  BOOL v149;
  int v150;
  __int32 v151;
  uint64_t v152;
  int v153;
  int v154;
  uint16x8_t v156;
  unsigned int v157;
  uint16x8_t v158;
  BOOL v159;

  v10 = a1;
  if (a2 >= 0xFFFE000000000000)
  {
    if (a3 >= 0xFFFE000000000000)
      return a2 == a3;
    goto LABEL_3;
  }
  if (a2 >> 49)
  {
LABEL_3:
    if (a3 >> 49)
    {
      v27 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v27 = a2 - 0x2000000000000;
      v28 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v28 = a3 - 0x2000000000000;
      return v27 == v28;
    }
  }
  if (((a2 | a3) & 0xFFFE000000000002) != 0)
    return a2 == a3;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 != 2)
  {
    if (v11 == 3 && *(_BYTE *)(a3 + 5) == 3)
      return JSC::JSBigInt::equals((JSC::JSBigInt *)a2, (JSC::JSBigInt *)a3, (JSC::JSBigInt *)a3);
    return a2 == a3;
  }
  if (*(_BYTE *)(a3 + 5) != 2)
    return a2 == a3;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a3 + 8);
  v16 = v15 & 1;
  if ((v14 & 1) == 0)
  {
    if ((v15 & 1) == 0)
    {
      v17 = *(_DWORD *)(v14 + 16);
      v18 = *(_DWORD *)(v15 + 16);
      if (v18 < 0x100 || v17 < 0x100 || (v18 ^ v17) <= 0xFF)
      {
        v19 = *(unsigned int *)(v14 + 4);
        if ((_DWORD)v19 == *(_DWORD *)(v15 + 4))
        {
          if (!(_DWORD)v19)
            return 1;
          v20 = *(unsigned __int8 **)(v14 + 8);
          v21 = *(unsigned __int8 **)(v15 + 8);
          if ((v17 & 4) != 0)
          {
            if ((v18 & 4) != 0)
            {
              if (*v20 == *v21)
              {
                v43 = v19 - 1;
                if ((_DWORD)v19 != 1)
                {
                  v23 = (int8x16_t *)(v20 + 1);
                  v24 = (int8x16_t *)(v21 + 1);
                  if ((_DWORD)v19 != 2)
                  {
                    switch(31 - __clz(v19 - 2))
                    {
                      case 0u:
                        goto LABEL_24;
                      case 1u:
                        if (v23->u16[0] != v24->u16[0])
                          return 0;
                        v51 = *(unsigned __int16 *)&v20[v19 - 2];
                        v52 = *(unsigned __int16 *)&v21[v19 - 2];
                        return v51 == v52;
                      case 2u:
                        if (v23->i32[0] != v24->i32[0])
                          return 0;
                        v51 = *(_DWORD *)&v20[v19 - 4];
                        v91 = &v21[v19];
LABEL_133:
                        v52 = *((_DWORD *)v91 - 1);
                        return v51 == v52;
                      case 3u:
                        if (v23->i64[0] != v24->i64[0])
                          return 0;
                        v88 = *(_QWORD *)&v20[v19 - 8];
                        v89 = &v21[v19];
                        return v88 == *((_QWORD *)v89 - 1);
                      case 4u:
                        v90 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v20[v19 - 16], *(int8x16_t *)&v21[v19 - 16]), vceqq_s8(*(int8x16_t *)(v20 + 1), *(int8x16_t *)(v21 + 1)));
                        v90.i8[0] = vminvq_u8((uint8x16_t)v90);
                        return v90.i32[0] != 0;
                      default:
                        v99 = (uint8x16_t)vceqq_s8(*v23, *v24);
                        v99.i8[0] = vminvq_u8(v99);
                        if (!v99.i32[0])
                          return 0;
                        if (v43 < 0x10)
                          return 1;
                        v100 = v43 & 0xF;
                        do
                        {
                          v101 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v23 + v100), *(int8x16_t *)((char *)v24 + v100));
                          v101.i8[0] = vminvq_u8(v101);
                          result = v101.i32[0] != 0;
                          v100 += 16;
                          if (v101.i32[0])
                            v102 = v100 >= v43;
                          else
                            v102 = 1;
                        }
                        while (!v102);
                        break;
                    }
                    return result;
                  }
                  v25 = v23->u8[0];
                  v26 = v24->u8[0];
                  return v25 == v26;
                }
                return 1;
              }
            }
            else if (*(_WORD *)v21 == *v20)
            {
              v29 = (uint8x8_t *)(v20 + 1);
              v30 = v19 - 1;
              v31 = (int16x8_t *)(v21 + 2);
              if (v30 < 8)
              {
                if (v30 >= 4)
                {
                  v44 = (v29->u32[0] | ((unint64_t)v29->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                  v12 = ((v44 | (v44 << 8)) & 0xFF00FF00FF00FFLL) == v31->i64[0];
                  v45 = (*(unsigned int *)((char *)v29->u32 + (v30 & 3)) | ((unint64_t)*(unsigned int *)((char *)v29->u32 + (v30 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                  v46 = (v45 | (v45 << 8)) & 0xFF00FF00FF00FFLL;
                  v47 = *(uint64_t *)((char *)v31->i64 + 2 * (v30 & 3));
                  return v12 && v46 == v47;
                }
                if (v30 >= 2)
                {
                  v53 = (v29->u16[0] | (v29->u16[0] << 8)) & 0xFF00FF;
                  v54 = v31->i32[0];
                  v55 = (*(unsigned __int16 *)((char *)v29->u16 + (v30 & 1)) | (*(unsigned __int16 *)((char *)v29->u16 + (v30 & 1)) << 8)) & 0xFF00FF;
                  v56 = *(__int32 *)((char *)v31->i32 + 2 * (v30 & 1));
                  return v53 == v54 && v55 == v56;
                }
                if (v30 == 1)
                {
                  v26 = v29->u8[0];
                  v25 = v31->u16[0];
                  return v25 == v26;
                }
                return 1;
              }
              v32 = (uint16x8_t)vceqq_s16(*v31, (int16x8_t)vmovl_u8(*v29));
              v32.i16[0] = vminvq_u16(v32);
              if (v32.i32[0])
              {
                v33 = v30 & 7;
                do
                {
                  v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v31 + 2 * v33), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v29 + v33)));
                  v34.i16[0] = vminvq_u16(v34);
                  result = v34.i32[0] != 0;
                  v33 += 8;
                  if (v34.i32[0])
                    v35 = v33 >= v30;
                  else
                    v35 = 1;
                }
                while (!v35);
                return result;
              }
            }
          }
          else if ((v18 & 4) != 0)
          {
            if (*(_WORD *)v20 == *v21)
            {
              v36 = (int16x8_t *)(v20 + 2);
              v37 = v19 - 1;
              v38 = (uint8x8_t *)(v21 + 1);
              if (v37 < 8)
              {
                if (v37 >= 4)
                {
                  v48 = (v38->u32[0] | ((unint64_t)v38->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                  v49 = (*(unsigned int *)((char *)v38->u32 + (v37 & 3)) | ((unint64_t)*(unsigned int *)((char *)v38->u32 + (v37 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                  v50 = (v49 | (v49 << 8)) & 0xFF00FF00FF00FFLL;
                  return ((v48 | (v48 << 8)) & 0xFF00FF00FF00FFLL) == v36->i64[0]
                      && v50 == *(uint64_t *)((char *)v36->i64 + 2 * (v37 & 3));
                }
                if (v37 >= 2)
                {
                  v12 = ((v38->u16[0] | (v38->u16[0] << 8)) & 0xFF00FF) == v36->i32[0];
                  v57 = (*(unsigned __int16 *)((char *)v38->u16 + (v37 & 1)) | (*(unsigned __int16 *)((char *)v38->u16 + (v37 & 1)) << 8)) & 0xFF00FF;
                  return v12 && v57 == *(__int32 *)((char *)v36->i32 + 2 * (v37 & 1));
                }
                if (v37 == 1)
                  return v36->u16[0] == v38->u8[0];
                return 1;
              }
              v39 = (uint16x8_t)vceqq_s16(*v36, (int16x8_t)vmovl_u8(*v38));
              v39.i16[0] = vminvq_u16(v39);
              if (v39.i32[0])
              {
                v40 = v37 & 7;
                do
                {
                  v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v36 + 2 * v40), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v38 + v40)));
                  v41.i16[0] = vminvq_u16(v41);
                  result = v41.i32[0] != 0;
                  v40 += 8;
                  if (v41.i32[0])
                    v42 = v40 >= v37;
                  else
                    v42 = 1;
                }
                while (!v42);
                return result;
              }
            }
          }
          else if (*(unsigned __int16 *)v20 == *(unsigned __int16 *)v21)
          {
            v22 = v19 - 1;
            if ((_DWORD)v19 != 1)
            {
              v23 = (int8x16_t *)(v20 + 2);
              v24 = (int8x16_t *)(v21 + 2);
              if ((_DWORD)v19 != 2)
              {
                switch(31 - __clz(v19 - 2))
                {
                  case 0u:
                    v25 = v23->i32[0];
                    v26 = v24->i32[0];
                    return v25 == v26;
                  case 1u:
                    if (v23->i32[0] != v24->i32[0])
                      return 0;
                    v51 = *(_DWORD *)&v20[2 * v19 - 4];
                    v91 = &v21[2 * v19];
                    goto LABEL_133;
                  case 2u:
                    if (v23->i64[0] != v24->i64[0])
                      return 0;
                    v88 = *(_QWORD *)&v20[2 * v19 - 8];
                    v89 = &v21[2 * v19];
                    return v88 == *((_QWORD *)v89 - 1);
                  case 3u:
                    v90 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v20[2 * v19 - 16], *(int16x8_t *)&v21[2 * v19 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v20 + 2), *(int16x8_t *)(v21 + 2)));
                    v90.i16[0] = vminvq_u16(v90);
                    return v90.i32[0] != 0;
                  default:
                    v92 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v23, *(int16x8_t *)v24);
                    v92.i16[0] = vminvq_u16(v92);
                    if (!v92.i32[0])
                      return 0;
                    if (v22 < 8)
                      return 1;
                    v111 = v22 & 7;
                    do
                    {
                      v112 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v23 + 2 * v111), *(int16x8_t *)((char *)v24 + 2 * v111));
                      v112.i16[0] = vminvq_u16(v112);
                      result = v112.i32[0] != 0;
                      v111 += 8;
                      if (v112.i32[0])
                        v113 = v111 >= v22;
                      else
                        v113 = 1;
                    }
                    while (!v113);
                    break;
                }
                return result;
              }
LABEL_24:
              v25 = v23->u16[0];
              v26 = v24->u16[0];
              return v25 == v26;
            }
            return 1;
          }
        }
      }
      return 0;
    }
    v16 = 1;
  }
  v58 = (unsigned int *)(a2 + 16);
  v59 = (int *)(v14 + 4);
  if ((v14 & 1) != 0)
    v59 = (int *)(a2 + 16);
  v60 = *v59;
  v61 = a3 + 16;
  v62 = (_DWORD *)(v15 + 4);
  if (v16)
    v63 = (_DWORD *)(a3 + 16);
  else
    v63 = v62;
  if (v60 != *v63)
    return 0;
  v64 = *((_QWORD *)a1 + 7);
  if ((v14 & 1) == 0)
  {
    if (v14)
    {
      v65 = *(char **)(v14 + 8);
      LODWORD(v66) = *(_DWORD *)(v14 + 4);
      v67 = ((unint64_t)*(unsigned int *)(v14 + 16) >> 2) & 1;
    }
    else
    {
      v65 = 0;
      LODWORD(v66) = 0;
      v67 = 1;
    }
LABEL_90:
    v68 = v66 | (v67 << 32);
    goto LABEL_91;
  }
  if ((v14 & 2) == 0)
  {
    v66 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v66)
    {
      v103 = v66[4];
      v65 = (char *)*((_QWORD *)v66 + 1);
      LODWORD(v66) = v66[1];
      v67 = (v103 >> 2) & 1;
    }
    else
    {
      v65 = 0;
      v67 = 1;
    }
    goto LABEL_90;
  }
  v76 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v76
    && (v77 = *(unsigned int *)(v76 + 4),
        v78 = *(_QWORD *)(a2 + 24),
        v79 = v78 >> 16,
        v77 > (v78 >> 16)))
  {
    v80 = *(unsigned int *)(v76 + 16);
    v65 = *(char **)(v76 + 8);
    v81 = *v58;
    if ((int)v77 - (int)v79 > *v58 || (v81 = v77 - v79, (_DWORD)v79))
    {
      v75 = (v78 >> 16);
      v68 = v81;
      v73 = (int8x16_t *)(v77 - v79);
      if (((v80 >> 2) & 1) != 0)
      {
        if ((unint64_t)v73 < v81)
          goto LABEL_287;
        v65 += v75;
        v68 = v81 | 0x100000000;
      }
      else
      {
        if ((unint64_t)v73 < v81)
          goto LABEL_287;
        v65 += 2 * v75;
      }
    }
    else
    {
      v68 = v77 & 0xFFFFFFFEFFFFFFFFLL | (((v80 >> 2) & 1) << 32);
    }
  }
  else
  {
    v65 = &str_105_2;
    v68 = 0x100000000;
  }
LABEL_91:
  if (*(_DWORD *)(v64 + 80))
  {
    LODWORD(v75) = *(_DWORD *)(v64 + 80);
    LODWORD(v73) = 39;
    if ((v75 & 0x27) != 0)
      goto LABEL_288;
    goto LABEL_226;
  }
  while (1)
  {
    v69 = *(int **)(a3 + 8);
    if ((v69 & 1) == 0)
    {
      if (v69)
      {
LABEL_94:
        v70 = v69[4];
        v71 = (char *)*((_QWORD *)v69 + 1);
        LODWORD(v69) = v69[1];
        v72 = (v70 >> 2) & 1;
LABEL_95:
        v61 = v69 | (unint64_t)(v72 << 32);
        v10 = (JSC::JSGlobalObject *)a3;
        goto LABEL_96;
      }
LABEL_164:
      v71 = 0;
      v72 = 1;
      goto LABEL_95;
    }
    if ((v69 & 2) == 0)
    {
      v69 = *JSC::JSRopeString::resolveRope(a3, v10, a3, a4, a9, a5, a6, a7, a8);
      if (v69)
        goto LABEL_94;
      goto LABEL_164;
    }
    v10 = (JSC::JSGlobalObject *)(*(_QWORD *)(a3 + 20) & 0xFFFFFFFFFLL);
    v82 = *((_QWORD *)v10 + 1);
    if (v82
      && (v83 = *(unsigned int *)(v82 + 4),
          v84 = *(_QWORD *)(a3 + 24),
          v73 = (int8x16_t *)(v84 >> 16),
          v83 > (v84 >> 16)))
    {
      v85 = *(unsigned int *)(v82 + 16);
      v71 = *(char **)(v82 + 8);
      v86 = *(_DWORD *)v61;
      if ((v83 - (_DWORD)v73) > *(_DWORD *)v61 || (v86 = v83 - (_DWORD)v73, (_DWORD)v73))
      {
        v87 = (v84 >> 16);
        v61 = v86;
        v75 = v83 - v73;
        if (((v85 >> 2) & 1) != 0)
        {
          if (v75 < v86)
            goto LABEL_287;
          v71 += v87;
          v61 = v86 | 0x100000000;
        }
        else
        {
          if (v75 < v86)
            goto LABEL_287;
          v71 += 2 * v87;
        }
      }
      else
      {
        v61 = v83 & 0xFFFFFFFEFFFFFFFFLL | (((v85 >> 2) & 1) << 32);
      }
    }
    else
    {
      v71 = &str_105_2;
      v61 = 0x100000000;
    }
LABEL_96:
    if (*(_DWORD *)(v64 + 80))
    {
      v130 = *(_DWORD *)(v64 + 80);
      if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v64 + 16))
        return 0;
    }
    result = 1;
    if (!v60 || v65 == v71)
      return result;
    LODWORD(v73) = v68;
    v74 = v61 & 0x100000000;
    LODWORD(v75) = v61;
    if ((v68 & 0x100000000) != 0)
    {
      if (v74)
      {
        if ((_DWORD)v68 && (_DWORD)v61)
        {
          if (*v65 != *v71)
            return 0;
          v93 = (int8x16_t *)(v65 + 1);
          v94 = v61 - 1;
          v73 = (int8x16_t *)(v71 + 1);
          if ((_DWORD)v61 != 2)
          {
            if ((_DWORD)v61 == 1)
              return result;
            v95 = 32 - __clz(v61 - 2);
            if (v95 != 3)
            {
              switch(v95)
              {
                case 1u:
                  goto LABEL_285;
                case 2u:
                  if (v93->u16[0] != v73->u16[0])
                    return 0;
                  v96 = *(unsigned __int16 *)&v65[v61 - 2];
                  v98 = *(unsigned __int16 *)&v71[v61 - 2];
                  return v96 == v98;
                case 4u:
                  if (v93->i64[0] != v73->i64[0])
                    return 0;
                  v121 = *(_QWORD *)&v65[v61 - 8];
                  v122 = &v71[v61];
                  return v121 == *((_QWORD *)v122 - 1);
                case 5u:
                  v137 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v65[v61 - 16], *(int8x16_t *)&v71[v61 - 16]), vceqq_s8(*(int8x16_t *)(v65 + 1), *(int8x16_t *)(v71 + 1)));
                  v137.i8[0] = vminvq_u8((uint8x16_t)v137);
                  return v137.i32[0] != 0;
                default:
                  v146 = (uint8x16_t)vceqq_s8(*v93, *v73);
                  v146.i8[0] = vminvq_u8(v146);
                  if (!v146.i32[0])
                    return 0;
                  if (v94 >= 0x10)
                  {
                    v147 = v94 & 0xF;
                    do
                    {
                      v148 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v93 + v147), *(int8x16_t *)((char *)v73 + v147));
                      v148.i8[0] = vminvq_u8(v148);
                      result = v148.i32[0] != 0;
                      v147 += 16;
                      if (v148.i32[0])
                        v149 = v147 >= v94;
                      else
                        v149 = 1;
                    }
                    while (!v149);
                  }
                  return result;
              }
            }
            if (v93->i32[0] == v73->i32[0])
            {
              v96 = *(_DWORD *)&v65[v61 - 4];
              v97 = &v71[v61];
LABEL_143:
              v98 = *((_DWORD *)v97 - 1);
              return v96 == v98;
            }
            return 0;
          }
          if (v61 != 1)
          {
            v144 = v93->u8[0];
            v145 = v73->u8[0];
            return v144 == v145;
          }
        }
      }
      else if ((_DWORD)v68 && (_DWORD)v61)
      {
        if (*(_WORD *)v71 != *v65)
          return 0;
        v114 = (uint8x8_t *)(v65 + 1);
        v115 = v61 - 1;
        v116 = (int16x8_t *)(v71 + 2);
        if ((v61 - 1) >= 8)
        {
          v117 = (uint16x8_t)vceqq_s16(*v116, (int16x8_t)vmovl_u8(*v114));
          v117.i16[0] = vminvq_u16(v117);
          if (v117.i32[0])
          {
            v118 = v115 & 7;
            do
            {
              v119 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v116 + 2 * v118), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v114 + v118)));
              v119.i16[0] = vminvq_u16(v119);
              result = v119.i32[0] != 0;
              v118 += 8;
              if (v119.i32[0])
                v120 = v118 >= v115;
              else
                v120 = 1;
            }
            while (!v120);
            return result;
          }
          return 0;
        }
        if (v115 >= 4)
        {
          v123 = (v114->u32[0] | ((unint64_t)v114->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v12 = ((v123 | (v123 << 8)) & 0xFF00FF00FF00FFLL) == v116->i64[0];
          v124 = v115 & 3;
          v125 = (*(unsigned int *)((char *)v114->u32 + v124) | ((unint64_t)*(unsigned int *)((char *)v114->u32 + v124) << 16)) & 0xFFFF0000FFFFLL;
          v126 = (v125 | (v125 << 8)) & 0xFF00FF00FF00FFLL;
          v127 = *(uint64_t *)((char *)v116->i64 + 2 * v124);
          return v12 && v126 == v127;
        }
        if (v115 >= 2)
        {
          v131 = (v114->u16[0] | (v114->u16[0] << 8)) & 0xFF00FF;
          v132 = v116->i32[0];
          v133 = v115 & 1;
          v134 = (*(unsigned __int16 *)((char *)v114->u16 + v133) | (*(unsigned __int16 *)((char *)v114->u16 + v133) << 8)) & 0xFF00FF;
          v135 = *(__int32 *)((char *)v116->i32 + 2 * v133);
          return v131 == v132 && v134 == v135;
        }
        if ((_DWORD)v61 != 2)
          return result;
        v145 = v114->u8[0];
        v144 = v116->u16[0];
        return v144 == v145;
      }
      goto LABEL_287;
    }
    if (v74)
      break;
    if ((_DWORD)v68 && (_DWORD)v61)
    {
      if (*(unsigned __int16 *)v65 != *(unsigned __int16 *)v71)
        return 0;
      v129 = v61 - 1;
      if ((_DWORD)v61 == 1)
        return result;
      v93 = (int8x16_t *)(v65 + 2);
      v73 = (int8x16_t *)(v71 + 2);
      if ((_DWORD)v61 != 2)
      {
        switch(31 - __clz(v61 - 2))
        {
          case 0u:
            v144 = v93->i32[0];
            v145 = v73->i32[0];
            return v144 == v145;
          case 1u:
            if (v93->i32[0] != v73->i32[0])
              return 0;
            v96 = *(_DWORD *)&v65[2 * v61 - 4];
            v97 = &v71[2 * v61];
            goto LABEL_143;
          case 2u:
            if (v93->i64[0] != v73->i64[0])
              return 0;
            v121 = *(_QWORD *)&v65[2 * v61 - 8];
            v122 = &v71[2 * v61];
            return v121 == *((_QWORD *)v122 - 1);
          case 3u:
            v137 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v65[2 * v61 - 16], *(int16x8_t *)&v71[2 * v61 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v65 + 2), *(int16x8_t *)(v71 + 2)));
            v137.i16[0] = vminvq_u16(v137);
            return v137.i32[0] != 0;
          default:
            v156 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v93, *(int16x8_t *)v73);
            v156.i16[0] = vminvq_u16(v156);
            if (!v156.i32[0])
              return 0;
            if (v129 >= 8)
            {
              v157 = v129 & 7;
              do
              {
                v158 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v93 + 2 * v157), *(int16x8_t *)((char *)v73 + 2 * v157));
                v158.i16[0] = vminvq_u16(v158);
                result = v158.i32[0] != 0;
                v157 += 8;
                if (v158.i32[0])
                  v159 = v157 >= v129;
                else
                  v159 = 1;
              }
              while (!v159);
            }
            return result;
        }
      }
LABEL_285:
      v144 = v93->u16[0];
      v145 = v73->u16[0];
      return v144 == v145;
    }
LABEL_287:
    __break(1u);
LABEL_288:
    if ((v75 & v73) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, a3, a4, a5, a6, a7, a8);
LABEL_226:
    if (*(_QWORD *)(v64 + 16))
      return 0;
  }
  if (!(_DWORD)v68 || !(_DWORD)v61)
    goto LABEL_287;
  if (*(_WORD *)v65 != *v71)
    return 0;
  v104 = (int16x8_t *)(v65 + 2);
  v105 = v61 - 1;
  v106 = (uint8x8_t *)(v71 + 1);
  if ((v61 - 1) >= 8)
  {
    v107 = (uint16x8_t)vceqq_s16(*v104, (int16x8_t)vmovl_u8(*v106));
    v107.i16[0] = vminvq_u16(v107);
    if (v107.i32[0])
    {
      v108 = v105 & 7;
      do
      {
        v109 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v104 + 2 * v108), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v106 + v108)));
        v109.i16[0] = vminvq_u16(v109);
        result = v109.i32[0] != 0;
        v108 += 8;
        if (v109.i32[0])
          v110 = v108 >= v105;
        else
          v110 = 1;
      }
      while (!v110);
      return result;
    }
    return 0;
  }
  if (v105 < 4)
  {
    if (v105 < 2)
    {
      if ((_DWORD)v61 == 2)
      {
        v98 = v106->u8[0];
        v96 = v104->u16[0];
        return v96 == v98;
      }
    }
    else
    {
      v150 = (v106->u16[0] | (v106->u16[0] << 8)) & 0xFF00FF;
      v151 = v104->i32[0];
      v152 = v105 & 1;
      v153 = (*(unsigned __int16 *)((char *)v106->u16 + v152) | (*(unsigned __int16 *)((char *)v106->u16 + v152) << 8)) & 0xFF00FF;
      v154 = *(__int32 *)((char *)v104->i32 + 2 * v152);
      return v150 == v151 && v153 == v154;
    }
  }
  else
  {
    v138 = (v106->u32[0] | ((unint64_t)v106->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    v12 = ((v138 | (v138 << 8)) & 0xFF00FF00FF00FFLL) == v104->i64[0];
    v139 = v105 & 3;
    v140 = (*(unsigned int *)((char *)v106->u32 + v139) | ((unint64_t)*(unsigned int *)((char *)v106->u32 + v139) << 16)) & 0xFFFF0000FFFFLL;
    v141 = (v140 | (v140 << 8)) & 0xFF00FF00FF00FFLL;
    v142 = *(uint64_t *)((char *)v104->i64 + 2 * v139);
    return v12 && v141 == v142;
  }
  return result;
}

uint64_t JSC::CacheableIdentifier::createFromCell(uint64_t this, JSCell *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(unsigned __int8 *)(this + 5);
  if (v2 != 2)
  {
    if (v2 == 4)
      return this;
LABEL_10:
    this = 138;
    __break(0xC471u);
    return this;
  }
  v3 = *(_QWORD *)(this + 8);
  if (v3)
    v4 = (*(_QWORD *)(this + 8) & 1) == 0;
  else
    v4 = 0;
  if (!v4 || (*(_BYTE *)(v3 + 16) & 0x10) == 0)
    goto LABEL_10;
  return this;
}

uint64_t JSC::JSFunction::asStringConcurrently(JSC::JSFunction *this)
{
  char **v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v1 == &JSC::JSBoundFunction::s_info || v1 == &JSC::JSRemoteFunction::s_info)
    return 0;
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 1) != 0)
    v4 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v4 + 5) != 8)
  {
    v6 = *(_QWORD *)(v4 + 72);
    if (v6)
    {
      v5 = v6 + 40;
      return *(_QWORD *)v5;
    }
    return 0;
  }
  v5 = v4 + 72;
  return *(_QWORD *)v5;
}

uint64_t JSC::DFG::isToThisAnIdentity(unsigned __int8 a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  _BOOL4 v13;
  unsigned int *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  unsigned int v30;

  v2 = a2[1];
  v3 = a1;
  if (a1)
    v4 = v2 & 0xFFFFDFFFF8000008;
  else
    v4 = a2[1] & 0x8000000;
  if (v2)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
    return 0;
  v6 = a2[3];
  if (v6)
    v7 = (v6 & 0xFFFE000000000002) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v19 = *(unsigned __int8 *)(v6 + 5);
    if (v19 >= 0x17)
    {
      if (a1)
        v20 = 2;
      else
        v20 = 1;
      if (v19 - 51 >= 6)
        return 0;
      else
        return v20;
    }
  }
  v9 = (v2 & 0xFFFFDFFFF0000008) == 0 && v2 != 0;
  if (a1 && !v9)
    return 3;
  v10 = *a2;
  result = 3;
  if (*a2 != 4 && (v10 & 2) == 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFDLL;
    LOBYTE(v13) = (v10 & 0xFFFFFFFFFFFFFFFDLL) != 0;
    v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v10 & 1) != 0)
    {
      v21 = *v14;
      if (!(_DWORD)v21)
        return 0;
      v15 = 0;
      v22 = 0;
      v23 = v14 + 2;
      do
      {
        v24 = *(_QWORD *)&v23[2 * v22];
        if (*(unsigned __int8 *)(v24 + 9) - 51 <= 5)
          v15 = 1;
        v25 = *(unsigned int *)(v24 + 76);
        v26 = *(_DWORD *)(v24 + 76) != 0;
        v27 = (char **)(16 * v25);
        if ((_DWORD)v25)
          v28 = v27 == &JSC::JSScope::s_info;
        else
          v28 = 1;
        if (!v28)
        {
          do
          {
            v27 = (char **)v27[2];
            v26 = v27 != 0;
          }
          while (v27 != &JSC::JSScope::s_info && v27 != 0);
        }
        v13 = v13 && v26;
        ++v22;
      }
      while (v22 != v21);
    }
    else
    {
      if (!v14)
        return 0;
      v15 = *((unsigned __int8 *)v14 + 9) - 51 <= 5;
      v16 = v14[19];
      v13 = v14[19] != 0;
      if ((_DWORD)v16)
      {
        v17 = 16 * v16;
        if ((char **)v17 != &JSC::JSScope::s_info)
        {
          do
          {
            v17 = *(_QWORD *)(v17 + 16);
            v13 = v17 != 0;
          }
          while ((char **)v17 != &JSC::JSScope::s_info && v17 != 0);
        }
      }
      if (!v12)
        v13 = 0;
    }
    if (v15)
    {
      if (v3)
        v30 = 2;
      else
        v30 = 1;
      if (v9 && v13)
        return v30;
      else
        return 3;
    }
    return 0;
  }
  return result;
}

uint64_t JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>((uint64_t)this, v15, (JSC::InlineWatchpointSet *)(v15 + 2336), 10, a5, a6, a7, a8);
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::ClassInfo const*)#1}::operator()(JSC::DFG::Node ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node **v10;
  JSC::DFG::Node *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t result;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::DFG::Node *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v10 = *a1;
  v11 = (*a1)[1];
  v12 = *(_QWORD *)*a1[1];
  if ((v12 & 1) == 0)
  {
    v13 = *((_QWORD *)v11 + 4);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_4;
  }
  v75 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v76 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v76 != 0x3FFFFFFF) ? (v77 = v76 == -1) : (v77 = 1), v77))
  {
    v78 = 2;
  }
  else if (v76 >> 28)
  {
    v88 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v88 = v75;
    *(_DWORD *)(v88 + 8) = v76;
    v78 = 1;
    v75 = v88;
  }
  else
  {
    v78 = v75;
    v75 = 0;
  }
  v12 = v75 | v78;
  v13 = *((_QWORD *)v11 + 4);
  if (((v75 | v78) & 1) == 0)
    goto LABEL_3;
  v83 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v84 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v84 != 0x3FFFFFFF) ? (v85 = v84 == -1) : (v85 = 1), v85))
  {
    v86 = 2;
  }
  else if (v84 >> 28)
  {
    v89 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v89 = v83;
    *(_DWORD *)(v89 + 8) = v84;
    v86 = 1;
    v83 = v89;
  }
  else
  {
    v86 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v83 = 0;
  }
  v87 = v83 | v86;
  v14 = (_QWORD *)(v87 & 0xFFFFFFFF8);
  if ((v87 & 1) == 0)
  {
    v16 = 0;
    v15 = 1;
LABEL_4:
    v17 = v14;
    if (!v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)*v14;
  if (*v14)
LABEL_5:
    v13 = v17[1];
LABEL_6:
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v19 = *((_QWORD *)*a1[1] + 3);
  v20 = v10[3];
  v21 = *((_QWORD *)v20 + 1);
  v22 = *(unsigned int *)((v19 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (uint64_t *)(v21 + 24);
  v24 = (uint64_t *)(v21 + 8);
  if ((v19 & 1) != 0)
    v25 = v23;
  else
    v25 = v24;
  v26 = *v25;
  v27 = *v25 + 32 * v22;
  v28 = *((_DWORD *)v20 + 22);
  v29 = *(_DWORD *)(v27 + 20);
  if (v28 != v29)
  {
    if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v29 ^ v28) >= 2)
      {
        v71 = *(_QWORD *)v27;
        if (*(_QWORD *)v27 != 4)
        {
          *(_QWORD *)v27 = v71 | 2;
          v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v71 & 1) != 0)
          {
            v79 = 2 * *v72;
            while (v79 * 4)
            {
              v80 = *(_QWORD *)&v72[v79];
              if ((*(_BYTE *)(v80 + 19) & 0xC) == 0)
              {
                v81 = *(_QWORD *)(v80 + 96);
                v82 = (v81 & 1) != 0 ? (v81 >> 1) & 3 : *(unsigned __int8 *)(v81 + 4);
                v79 -= 2;
                if (v82 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v72, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_68;
            }
          }
          else if (v72)
          {
            if ((*((_BYTE *)v72 + 19) & 0xC) != 0
              || ((v73 = *((_QWORD *)v72 + 12), (v73 & 1) != 0)
                ? (v74 = (v73 >> 1) & 3)
                : (v74 = *(unsigned __int8 *)(v73 + 4)),
                  v74 == 2))
            {
LABEL_68:
              *(_QWORD *)v27 = 4;
            }
          }
        }
        *(_DWORD *)(v26 + 32 * v22 + 16) = -21020677;
      }
      if ((v28 & 1) != 0)
        *(_QWORD *)v27 &= ~2uLL;
    }
    *(_DWORD *)(v27 + 20) = v28;
  }
  v30 = *(_QWORD *)(v27 + 24);
  if (v30)
    v31 = (v30 & 0xFFFE000000000002) == 0;
  else
    v31 = 0;
  if (!v31 || *(_BYTE *)(v30 + 5) != 26)
    return 0;
  result = 0;
  v33 = *(_QWORD *)(v30 + 24);
  if ((v33 & 1) == 0)
    return result;
  v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
  if ((v33 & 0xFFFFFFFFFFFFFFFELL) == 0)
    return result;
  v35 = *(_QWORD *)(v34 + 32);
  v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
  if (v36 == 2)
    return 0;
  result = JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(v10[1], *a1[1], a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return result;
  v43 = *(_DWORD *)(v34 + 40) & 0xFFFFFFFE;
  if (!(_DWORD)v43)
    return 0;
  v44 = 16 * v43;
  if (a2 != (void *)(16 * *(unsigned int *)(16 * v43 + 0x4C)) || *(_QWORD *)(16 * v43 + 0x28) != v18)
    return 0;
  JSC::DFG::Graph::freeze((uint64_t)v10[1], v34, v37, v38, v39, v40, v41, v42);
  JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*((_QWORD *)v10[1] + 3) + 136), (JSC::InlineWatchpointSet *)(v34 + 32), v45, v46, v47, v48, v49, v50);
  v56 = v10[3];
  v57 = *((unsigned __int8 *)v56 + 81);
  if (v57 <= 1)
    LOBYTE(v57) = 1;
  *((_BYTE *)v56 + 81) = v57;
  v58 = (uint64_t)*a1[1];
  v59 = *(unsigned int *)((v58 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v31 = (v58 & 1) == 0;
  v60 = *((_QWORD *)v56 + 1);
  v61 = (_QWORD *)(v60 + 24);
  v62 = (_QWORD *)(v60 + 8);
  if (!v31)
    v62 = v61;
  v63 = *v62 + 32 * v59;
  v64 = JSC::DFG::Graph::registerStructure(*(_QWORD *)v56, v44, &v90, v51, v52, v53, v54, v55);
  JSC::DFG::AbstractValue::set(v63, v65, v64, v66, v67, v68, v69, v70);
  *(_DWORD *)(v63 + 20) = *((_DWORD *)v56 + 22);
  return 1;
}

