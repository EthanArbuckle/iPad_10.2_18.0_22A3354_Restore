void WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock,char [6],JSC::B3::Air::Arg>(uint64_t *a1, JSC::B3::Air::Arg **a2, _DWORD *a3, JSC::B3::Air::Arg *a4)
{
  JSC::B3::Air::Kind *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::B3::Air::Arg **v23[5];
  char v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "At ");
  v8 = (JSC::B3::Air::Kind *)(a2 + 15);
  v23[0] = a2;
  v23[1] = (JSC::B3::Air::Arg **)", ";
  v23[2] = (JSC::B3::Air::Arg **)3;
  v23[3] = (JSC::B3::Air::Arg **)&str_477;
  v23[4] = (JSC::B3::Air::Arg **)1;
  v24 = 0;
  v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v25[4])(&v25);
  JSC::B3::Air::Kind::dump(v8, v9);
  WTF::PrintStream::printf(v9, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v23, (uint64_t)v9);
  v25[5]((WTF::StringPrintStream *)&v25);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", " in ");
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v25[4])(&v25);
  WTF::PrintStream::printf(v10, "%s", "#");
  WTF::PrintStream::printf(v10, "%u", *a3);
  v25[5]((WTF::StringPrintStream *)&v25);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", " arg ");
  JSC::B3::Air::Arg::dump(a4, (WTF::PrintStream *)&v25);
  v25[5]((WTF::StringPrintStream *)&v25);
  v19 = v26;
  v18 = v27;
  *a1 = 0;
  if (!v19)
  {
    v22 = 0;
LABEL_6:
    WTF::fastFree(v22, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if (v18 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F3EE8);
  }
  v20 = WTF::fastMalloc((WTF *)(v18 + 17));
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v18;
  *a1 = v20;
  v21 = v20 + 16;
  memcpy((void *)(v20 + 16), v19, v18);
  *(_BYTE *)(v21 + v18) = 0;
  v22 = (unint64_t)v26;
  if (v26 != v28)
    goto LABEL_6;
}

uint64_t WTF::PrintStream::printImpl<unsigned int,char [18],long,char [10],JSC::B3::Air::StackSlotKind>(WTF::PrintStream *a1, _DWORD *a2, const char *a3, _QWORD *a4, const char *a5, _BYTE *a6)
{
  const char *v11;
  WTF::PrintStream *v12;
  uint64_t result;

  WTF::PrintStream::printf(a1, "%u", *a2);
  WTF::PrintStream::printf(a1, "%s", a3);
  WTF::PrintStream::printf(a1, "%ld", *a4);
  WTF::PrintStream::printf(a1, "%s", a5);
  if (!*a6)
  {
    v11 = "Locked";
    goto LABEL_5;
  }
  if (*a6 == 1)
  {
    v11 = "Spill";
LABEL_5:
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v12, "%s", v11);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 47;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Vector<JSC::B3::Air::Inst *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t *v35;

  v5 = **(uint64_t ****)(result + 16);
  if (a3 == 11)
  {
    switch(*(_BYTE *)(a2 + 8))
    {
      case 1:
        v6 = *(unsigned int *)(a2 + 16);
        if ((int)v6 < 1)
          return result;
        v7 = *v5;
        if (v6 >= *((_DWORD *)*v5 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980F4260);
        }
LABEL_5:
        v8 = *v7;
        if (a3 > 0xB)
          goto LABEL_8;
        if (((1 << a3) & 0x910) != 0)
          goto LABEL_11;
        if (((1 << a3) & 0x220) != 0)
          goto LABEL_23;
LABEL_8:
        v9 = *(unsigned __int8 *)(v8 + 2 * v6);
        if (v9 <= a5)
          LOBYTE(v9) = a5;
        *(_BYTE *)(v8 + 2 * v6) = v9;
        if (a3 == 7)
        {
LABEL_23:
          v16 = (unsigned __int8 *)(v8 + 2 * v6);
          v17 = v16[1];
          if (v17 <= a5)
            LOBYTE(v17) = a5;
          goto LABEL_25;
        }
LABEL_11:
        if (a3 - 4 <= 6)
        {
          if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(v5[1][1] + 212)))
          {
            if (a4 == 1)
              v10 = 4;
            else
              v10 = 3;
          }
          else
          {
            v10 = 3;
          }
          *(_BYTE *)(v8 + 2 * v6 + 1) = v10;
        }
        break;
      case 6:
      case 7:
      case 8:
        v25 = a5;
        v26 = *(unsigned int *)(a2 + 16);
        if ((int)v26 < 1)
          return result;
        v27 = *v5;
        if (v26 >= *((_DWORD *)v27 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980F4374);
        }
        goto LABEL_49;
      case 0xB:
        v25 = a5;
        v27 = *v5;
        v30 = *(unsigned int *)(a2 + 16);
        if ((int)v30 >= 1)
        {
          if (v30 >= *((_DWORD *)v27 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F437CLL);
          }
          v31 = 2 * v30;
          v32 = *(unsigned __int8 *)(*v27 + v31);
          if (v32 <= a5)
            LOBYTE(v32) = a5;
          *(_BYTE *)(*v27 + v31) = v32;
        }
        v26 = *(unsigned int *)(a2 + 20);
        if ((int)v26 < 1)
          return result;
        if (v26 >= *((_DWORD *)v27 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980F4314);
        }
LABEL_49:
        v28 = *v27;
        v29 = 2 * v26;
        if (*(unsigned __int8 *)(v28 + v29) > v25)
          LOBYTE(v25) = *(_BYTE *)(v28 + v29);
        *(_BYTE *)(v28 + v29) = v25;
        return result;
      case 0xC:
      case 0xD:
        v33 = a5;
        v34 = *(unsigned int *)(a2 + 16);
        if ((int)v34 >= 1)
        {
          v35 = *v5;
          if (v34 >= *((_DWORD *)v35 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4384);
          }
          v16 = (unsigned __int8 *)(*v35 + 2 * v34);
          if (*v16 > a5)
            v33 = *v16;
          *v16 = v33;
          LOBYTE(v17) = 3;
LABEL_25:
          v16[1] = v17;
        }
        return result;
      default:
        return result;
    }
  }
  else
  {
    switch(*(_BYTE *)(a2 + 8))
    {
      case 1:
        v6 = *(unsigned int *)(a2 + 16);
        if ((int)v6 >= 1)
        {
          v7 = *v5;
          if (v6 >= *((_DWORD *)*v5 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4268);
          }
          goto LABEL_5;
        }
        return result;
      case 6:
      case 7:
      case 8:
        v11 = *(unsigned int *)(a2 + 16);
        if ((int)v11 >= 1)
        {
          v12 = *v5;
          if (v11 >= *((_DWORD *)v12 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F42B4);
          }
          goto LABEL_20;
        }
        return result;
      case 0xB:
        v12 = *v5;
        v18 = *(unsigned int *)(a2 + 16);
        if ((int)v18 >= 1)
        {
          if (v18 >= *((_DWORD *)v12 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F431CLL);
          }
          v19 = 2 * v18;
          v20 = *(unsigned __int8 *)(*v12 + v19);
          if (v20 <= 3)
            LOBYTE(v20) = 3;
          *(_BYTE *)(*v12 + v19) = v20;
        }
        v11 = *(unsigned int *)(a2 + 20);
        if ((int)v11 >= 1)
        {
          if (v11 >= *((_DWORD *)v12 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F41CCLL);
          }
LABEL_20:
          v13 = *v12;
          v14 = 2 * v11;
          v15 = *(unsigned __int8 *)(v13 + v14);
          if (v15 <= 3)
            LOBYTE(v15) = 3;
          *(_BYTE *)(v13 + v14) = v15;
        }
        break;
      case 0xC:
      case 0xD:
        v21 = *(unsigned int *)(a2 + 16);
        if ((int)v21 >= 1)
        {
          v22 = *v5;
          if (v21 >= *((_DWORD *)v22 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980F436CLL);
          }
          v23 = (unsigned __int8 *)(*v22 + 2 * v21);
          v24 = *v23;
          if (v24 <= 3)
            LOBYTE(v24) = 3;
          *v23 = v24;
          v23[1] = 3;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;

  v5 = **(_QWORD ***)(result + 16);
  if (a3 == 11)
  {
    switch(*(_BYTE *)(a2 + 8))
    {
      case 1:
        v22 = *(_DWORD *)(a2 + 16);
        if (v22 > 0)
          return result;
        v13 = *v5;
        v14 = -v22;
        if (*(_DWORD *)(*v5 + 28) <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F45A8);
        }
LABEL_11:
        v15 = *(_QWORD *)(v13 + 16);
        if (a3 > 0xB)
          goto LABEL_14;
        if (((1 << a3) & 0x910) != 0)
          goto LABEL_17;
        if (((1 << a3) & 0x220) != 0)
          goto LABEL_27;
LABEL_14:
        v16 = *(unsigned __int8 *)(v15 + 2 * v14);
        if (v16 <= a5)
          LOBYTE(v16) = a5;
        *(_BYTE *)(v15 + 2 * v14) = v16;
        if (a3 == 7)
        {
LABEL_27:
          v20 = (unsigned __int8 *)(v15 + 2 * v14);
          v21 = v20[1];
          if (v21 <= a5)
            LOBYTE(v21) = a5;
          goto LABEL_29;
        }
LABEL_17:
        if (a3 - 4 <= 6)
        {
          if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v5[1] + 8) + 212)))
          {
            if (a4 == 1)
              v17 = 4;
            else
              v17 = 3;
          }
          else
          {
            v17 = 3;
          }
          *(_BYTE *)(v15 + 2 * v14 + 1) = v17;
        }
        break;
      case 6:
      case 7:
      case 8:
        v32 = a5;
        v33 = *(_DWORD *)(a2 + 16);
        if (v33 > 0)
          return result;
        v34 = *v5;
        v35 = -v33;
        if (*(_DWORD *)(v34 + 28) <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F4754);
        }
        goto LABEL_45;
      case 0xB:
        v32 = a5;
        v34 = *v5;
        v38 = *(_DWORD *)(a2 + 16);
        if (v38 <= 0)
        {
          v44 = -v38;
          if (*(_DWORD *)(v34 + 28) <= v44)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F475CLL);
          }
          v45 = *(_QWORD *)(v34 + 16);
          v46 = 2 * v44;
          v47 = *(unsigned __int8 *)(v45 + v46);
          if (v47 <= a5)
            LOBYTE(v47) = a5;
          *(_BYTE *)(v45 + v46) = v47;
        }
        v39 = *(_DWORD *)(a2 + 20);
        if (v39 > 0)
          return result;
        v35 = -v39;
        if (*(_DWORD *)(v34 + 28) <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F46A4);
        }
LABEL_45:
        v36 = *(_QWORD *)(v34 + 16);
        v37 = 2 * v35;
        if (*(unsigned __int8 *)(v36 + v37) > v32)
          LOBYTE(v32) = *(_BYTE *)(v36 + v37);
        *(_BYTE *)(v36 + v37) = v32;
        return result;
      case 0xC:
      case 0xD:
        v40 = a5;
        v41 = *(_DWORD *)(a2 + 16);
        if (v41 <= 0)
        {
          v42 = *v5;
          v43 = -v41;
          if (*(_DWORD *)(v42 + 28) <= v43)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4764);
          }
          v20 = (unsigned __int8 *)(*(_QWORD *)(v42 + 16) + 2 * v43);
          if (*v20 > a5)
            v40 = *v20;
          *v20 = v40;
          LOBYTE(v21) = 3;
LABEL_29:
          v20[1] = v21;
        }
        return result;
      default:
        return result;
    }
  }
  else
  {
    switch(*(_BYTE *)(a2 + 8))
    {
      case 1:
        v6 = *(_DWORD *)(a2 + 16);
        if (v6 <= 0)
        {
          v13 = *v5;
          v14 = -v6;
          if (*(_DWORD *)(*v5 + 28) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4734);
          }
          goto LABEL_11;
        }
        return result;
      case 6:
      case 7:
      case 8:
        v7 = *(_DWORD *)(a2 + 16);
        if (v7 <= 0)
        {
          v8 = *v5;
          v9 = -v7;
          if (*(_DWORD *)(v8 + 28) <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F473CLL);
          }
          goto LABEL_7;
        }
        return result;
      case 0xB:
        v8 = *v5;
        v18 = *(_DWORD *)(a2 + 16);
        if (v18 <= 0)
        {
          v28 = -v18;
          if (*(_DWORD *)(v8 + 28) <= v28)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4744);
          }
          v29 = *(_QWORD *)(v8 + 16);
          v30 = 2 * v28;
          v31 = *(unsigned __int8 *)(v29 + v30);
          if (v31 <= 3)
            LOBYTE(v31) = 3;
          *(_BYTE *)(v29 + v30) = v31;
        }
        v19 = *(_DWORD *)(a2 + 20);
        if (v19 <= 0)
        {
          v9 = -v19;
          if (*(_DWORD *)(v8 + 28) <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F4548);
          }
LABEL_7:
          v10 = *(_QWORD *)(v8 + 16);
          v11 = 2 * v9;
          v12 = *(unsigned __int8 *)(v10 + v11);
          if (v12 <= 3)
            LOBYTE(v12) = 3;
          *(_BYTE *)(v10 + v11) = v12;
        }
        break;
      case 0xC:
      case 0xD:
        v23 = *(_DWORD *)(a2 + 16);
        if (v23 <= 0)
        {
          v24 = *v5;
          v25 = -v23;
          if (*(_DWORD *)(v24 + 28) <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F474CLL);
          }
          v26 = (unsigned __int8 *)(*(_QWORD *)(v24 + 16) + 2 * v25);
          v27 = *v26;
          if (v27 <= 3)
            LOBYTE(v27) = 3;
          *v26 = v27;
          v26[1] = 3;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t JSC::createBuiltinExecutable(uint64_t a1, unsigned int *a2, WTF::StringImpl **a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  return JSC::BuiltinExecutables::createExecutable(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

unint64_t JSC::BuiltinExecutables::createExecutable(uint64_t a1, unsigned int *a2, WTF::StringImpl **a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, unsigned int a8, unsigned int a9)
{
  unsigned int v9;
  int v10;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  int v49;
  unint64_t v50;
  int i;
  unsigned int v52;
  BOOL v53;
  __int16 v54;
  __int16 v55;
  WTF::StringImpl *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl **v65;
  WTF *v66;
  JSC::TDZEnvironmentLink *v67;
  _DWORD *v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD **v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  WTF::StringImpl **v157;
  char v158;
  JSC::TDZEnvironmentLink *v159;
  uint64_t v160;
  WTF *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  int v169;
  __int16 v170;
  _QWORD v171[2];
  _QWORD v172[2];
  int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  char v177;
  __int16 v178;
  char v179;
  int v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  _DWORD *v188;
  unint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  unsigned int v199[4];

  if (!*(_QWORD *)a2)
  {
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x1980F4E80);
  }
  v17 = a2[2];
  v18 = a2[3];
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  if (v20 <= v17)
    goto LABEL_182;
  v21 = v18 - v17;
  if ((int)v20 - (int)v17 > (v18 - v17) || (v21 = v20 - v17, (_DWORD)v17))
  {
    v22 = v21;
    v23 = v20 - v17;
    v24 = (_QWORD *)(v20 & 0xFF00000000);
    if ((v20 & 0xFF00000000) != 0)
    {
      if (v23 >= v22)
      {
        v19 += v17;
        v22 |= 0x100000000uLL;
        goto LABEL_8;
      }
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
    if (v23 < v22)
      goto LABEL_202;
    v19 += 2 * v17;
  }
  else
  {
    v22 = v20;
  }
LABEL_8:
  if (!v19)
    goto LABEL_137;
  if ((v22 & 0xFF00000000) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F4E60);
  }
  if (v22 <= 0xE)
  {
LABEL_182:
    __break(0xC471u);
    JUMPOUT(0x1980F514CLL);
  }
  if (v22 >= 0x15
    && ((v24 = *(_QWORD **)(v19 + 8), *(_QWORD *)v19 == 0x6620636E79736128)
      ? (v25 = v24 == (_QWORD *)0x206E6F6974636E75)
      : (v25 = 0),
        v25 ? (v26 = *(_BYTE *)(v19 + 16) == 40) : (v26 = 0),
        v26))
  {
    v27 = 6;
    LODWORD(v23) = 9;
  }
  else
  {
    v24 = *(_QWORD **)(v19 + 3);
    if (*(_QWORD *)v19 != 0x6F6974636E756628 || v24 != (_QWORD *)0x28206E6F6974636ELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F512CLL);
    }
    LODWORD(v23) = 0;
    v27 = 0;
  }
  v28 = v22;
  v29 = (v27 + 11);
  if (v22 <= v29)
    goto LABEL_202;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v24 = v172;
  v33 = a9;
  v34 = (v27 + 10);
  v35 = v27 | 1;
  while (1)
  {
    v36 = *(unsigned __int8 *)(v19 + v29);
    if ((_DWORD)v36 == 123)
      break;
    if (v36 > 0x2C)
      goto LABEL_207;
    if (v36 == 41)
      goto LABEL_32;
    if (((1 << v36) & 0x100001A00) != 0)
      goto LABEL_201;
    if (v36 == 44)
    {
      ++v30;
    }
    else
    {
LABEL_207:
      if ((_DWORD)v36 != 125 && (_DWORD)v36 != 160)
      {
        v142 = (v29 + 2);
        v31 = 1;
        if (v142 < v22 && (_DWORD)v36 == 46)
        {
          v143 = (v29 + 1);
          if (v22 <= v143)
            goto LABEL_202;
          if (*(_BYTE *)(v19 + v143) == 46)
          {
            if (v22 <= (unint64_t)v142)
              goto LABEL_202;
            v32 |= *(_BYTE *)(v19 + v142) == 46;
            if (*(_BYTE *)(v19 + v142) == 46)
              LODWORD(v29) = v29 + 2;
          }
          v31 = 1;
        }
      }
    }
LABEL_201:
    v29 = (v29 + 1);
    if (v22 <= v29)
      goto LABEL_202;
  }
  LODWORD(v29) = v29 + 1;
  if (v29 >= v22)
    goto LABEL_202;
  v37 = (unsigned __int8 *)(v19 + v29);
  while (1)
  {
    v39 = *v37++;
    v38 = v39;
    if (v39 == 41)
      break;
    if (v38 == 125)
      goto LABEL_201;
    LODWORD(v29) = v29 + 1;
    if ((_DWORD)v22 == (_DWORD)v29)
      goto LABEL_202;
  }
LABEL_32:
  v40 = v31 & 1;
  if (v30)
    v40 = v30 + 1;
  v154 = a8;
  if ((v32 & 1) != 0)
  {
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F516CLL);
    }
    --v40;
  }
  LOBYTE(v41) = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  do
  {
    a8 = v43;
    v48 = (unsigned __int8 *)(v19 + v43);
    v18 = *v48;
    if (v42)
      v9 = v45;
    else
      v9 = v47;
    if (v42)
      v10 = 1;
    else
      v10 = v46;
    if (v18 == 10)
    {
      v47 = v9;
      v46 = v10;
      v45 = v43;
      v44 = 0;
    }
    else
    {
      ++v44;
    }
    if (v18 == 10)
      ++v42;
    if (v41)
    {
      v41 = 1;
    }
    else
    {
      if (v22 <= (unint64_t)v43)
        goto LABEL_202;
      if ((v18 == 34 || v18 == 39) && (LOBYTE(v18) = v43 + 11, v43 + 11 < v22))
      {
        v41 = (*(_QWORD *)(v48 + 1) ^ 0x6972747320657375 | *(unsigned __int16 *)(v48 + 9) ^ 0x7463) == 0;
        if (!(*(_QWORD *)(v48 + 1) ^ 0x6972747320657375 | *(unsigned __int16 *)(v48 + 9) ^ 0x7463))
          v43 += 11;
      }
      else
      {
        v41 = 0;
      }
    }
    ++v43;
  }
  while (v43 < v22);
  v49 = (_BYTE)v46 ? v47 + 1 : 0;
  v50 = (v22 - 1);
  if (v28 <= v50)
    goto LABEL_202;
  for (i = *(unsigned __int8 *)(v19 + v50); i != 125; i = *(unsigned __int8 *)(v19 + v50))
  {
    v50 = (v50 - 1);
    if (v28 <= v50)
      goto LABEL_202;
  }
  v153 = a7;
  v52 = a2[2];
  v197 = v42;
  v198 = v52 + v45;
  a8 = v52 + v49;
  v199[0] = v52 + v49;
  a7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    ++a7[2];
    LOWORD(v45) = v178;
  }
  v17 = a1;
  v173 = 1;
  v174 = v52 + 1;
  if ((_DWORD)a5)
    v53 = (_DWORD)a5 == 3;
  else
    v53 = 1;
  v175 = v52;
  v176 = -1;
  v18 = !v53;
  v177 = 0;
  v172[0] = &off_1E3596470;
  v172[1] = &unk_1E3596490;
  v54 = v45 & 0xF800;
  if (v41)
    v55 = 4;
  else
    v55 = 0;
  v178 = a4 & 3 | (32 * (a5 & 3)) | v55 | (16 * ((_DWORD)a5 != 2)) | v54;
  v179 = v23;
  v181 = 0;
  v182 = 0;
  v183 = v34;
  v184 = v44;
  v185 = v35 + v52;
  v186 = v52 + v34;
  v187 = v52 + v34;
  v188 = 0;
  v189 = 0;
  v190 = -1;
  v191 = 0;
  v192 = 0;
  v193 = -1;
  v194 = v52 + v34;
  v195 = v40;
  if (a7)
    ++a7[2];
  a1 = v18 ^ 1u;
  v188 = a7;
  v189 = (v52 + v34) | ((unint64_t)(v52 + 1 + v50) << 32);
  v190 = v34 << 32;
  v180 = 1;
  v56 = *a3;
  if (*a3)
    *(_DWORD *)v56 += 2;
  v181 = v56;
  v10 = v197;
  v9 = v198;
  v196 = v197;
  v184 = v198 - a8;
  if (HIBYTE(dword_1ECF4C270))
  {
    v152 = a9;
    v171[0] = -1;
    LODWORD(v171[1]) = -1;
    LODWORD(v161) = 0x100000;
    v162 = 0u;
    v163 = 0u;
    v164 = 0;
    v165 = -1;
    v166 = -1;
    v167 = -1;
    v168 = 0;
    v169 = -1;
    v170 = 0;
    JSC::parseRootNode<JSC::ProgramNode>(v17, (uint64_t)a2, a4, v18 ^ 1u, 0, 0, 12, (uint64_t)&v161, a5, (uint64_t)v171, 0);
    if (!v160)
    {
      if (v170 != 1)
      {
        if (!(_BYTE)v170)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F51C8);
        }
        __break(0xC471u);
        JUMPOUT(0x1980F5270);
      }
      goto LABEL_175;
    }
    v119 = *(_QWORD ***)(v160 + 224);
    if (!v119 || (v120 = *v119) == 0 || v120 != v119[1])
    {
      __break(0xC471u);
      JUMPOUT(0x1980F510CLL);
    }
    if (((*(uint64_t (**)(_QWORD *))(*v120 + 72))(v120) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F51F0);
    }
    v121 = (_QWORD *)v120[5];
    if (!v121)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F5210);
    }
    if (((*(uint64_t (**)(_QWORD *))(*v121 + 160))(v121) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F5230);
    }
    a5 = v121[4];
    v122 = *(_QWORD *)(v160 + 192);
    if (!*(_BYTE *)(v160 + 200))
    {
      if (v122)
      {
        v123 = *(unsigned int *)(v122 - 4);
        v124 = v122 + 16 * v123;
        if (*(_DWORD *)(v122 - 12))
        {
          v125 = *(_QWORD *)(v160 + 192);
          if ((_DWORD)v123)
          {
            v126 = 16 * v123;
            v125 = *(_QWORD *)(v160 + 192);
            while ((unint64_t)(*(_QWORD *)v125 + 1) <= 1)
            {
              v125 += 16;
              v126 -= 16;
              if (!v126)
              {
                v125 = v124;
                break;
              }
            }
          }
LABEL_156:
          if (v122)
            v122 += 16 * *(unsigned int *)(v122 - 4);
          if (v122 != v125)
          {
            while ((*(_WORD *)(v125 + 8) & 1) == 0)
            {
              v127 = v125 + 16;
              v125 = v124;
              if (v127 != v124)
              {
                v125 = v127;
                while ((unint64_t)(*(_QWORD *)v125 + 1) <= 1)
                {
                  v125 += 16;
                  if (v125 == v124)
                  {
                    v125 = v124;
                    break;
                  }
                }
              }
              if (v125 == v122)
                goto LABEL_166;
            }
LABEL_188:
            __break(0xC471u);
            JUMPOUT(0x1980F51A4);
          }
          goto LABEL_166;
        }
        v125 = v122 + 16 * v123;
      }
      else
      {
        v125 = 0;
        v123 = 0;
      }
      v124 = v122 + 16 * v123;
      goto LABEL_156;
    }
    if (v122)
      LODWORD(v23) = *(_DWORD *)(v122 - 12);
    else
      LODWORD(v23) = 0;
    v24 = *(_QWORD **)(v160 + 208);
    if (!v24)
    {
LABEL_187:
      if ((_DWORD)v23 + (_DWORD)v24)
        goto LABEL_188;
LABEL_166:
      v128 = v171[0];
      v129 = HIDWORD(v171[0]);
      v130 = v171[1];
      *(_DWORD *)(a5 + 136) = v171[0];
      v131 = v129 - v130;
      *(_DWORD *)(a5 + 60) = v131;
      if (*(_QWORD *)(a5 + 40))
      {
        __break(0xC471u);
        JUMPOUT(0x1980F5250);
      }
      v132 = *a3;
      if (*a3)
      {
        *(_DWORD *)v132 += 2;
        v128 = v171[0];
        v131 = HIDWORD(v171[0]) - LODWORD(v171[1]);
      }
      *(_QWORD *)(a5 + 40) = v132;
      *(_DWORD *)(a5 + 136) = v128;
      *(_DWORD *)(a5 + 60) = v131;
      if (!JSC::FunctionMetadataNode::operator==((uint64_t)v172, a5)
        || LODWORD(v171[0]) != v10
        || *(_QWORD *)((char *)v171 + 4) != __PAIR64__(a8, v9))
      {
        WTF::dataLogLn<char [20],JSC::FunctionMetadataNode>(v172);
        WTF::dataLogLn<char [23],JSC::FunctionMetadataNode>(a5);
        WTF::dataLogLn<char [42],int>(v171);
        WTF::dataLogLn<char [44],int>((char *)v171 + 4);
        WTF::dataLogLn<char [53],int>(&v171[1]);
        WTF::dataLogLn<char [32],int>(&v197);
        WTF::dataLogLn<char [34],int>(&v198);
        WTF::dataLogLn<char [43],int>(v199);
        WTFLogAlways("Metadata of parser and hand rolled parser don't match\n", v144, v145, v146, v147, v148, v149, v150, v151);
        __break(0xC471u);
        JUMPOUT(0x1980F5380);
      }
      v112 = (WTF::AtomStringImpl *)v160;
      v160 = 0;
      if (v112)
        std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v160, (unint64_t)v112, v113, v114, v115, v116, v117, v118);
LABEL_175:
      v133 = v168;
      v168 = 0;
      v33 = v152;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
        {
          WTF::StringImpl::~StringImpl(v133, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
          v33 = v152;
        }
        else
        {
          *(_DWORD *)v133 -= 2;
        }
      }
      goto LABEL_81;
    }
LABEL_203:
    v24 = (_QWORD *)*v24;
    if (v24)
      LODWORD(v24) = *((_DWORD *)v24 - 3);
    goto LABEL_187;
  }
LABEL_81:
  v159 = 0;
  LOBYTE(v161) = 0;
  BYTE8(v162) = 0;
  LOBYTE(v157) = 0;
  v158 = 0;
  v64 = JSC::UnlinkedFunctionExecutable::create(v17, (JSC::VM *)a2, (uint64_t)v172, a1, a6, v153, 0, &v159, (uint64_t)&v161, (uint64_t)&v157, 0, v154, v33, v18);
  if (v158)
  {
    v65 = v157;
    if (v157)
    {
      v101 = *((unsigned int *)v157 - 1);
      if ((_DWORD)v101)
      {
        v102 = v157;
        do
        {
          v103 = *v102;
          if (*v102 != (WTF::StringImpl *)-1)
          {
            *v102 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
              {
                WTF::StringImpl::~StringImpl(v103, v57, v58, v59, v60, v61, v62, v63);
                WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
              }
              else
              {
                *(_DWORD *)v103 -= 2;
              }
            }
          }
          v102 += 2;
          --v101;
        }
        while (v101);
      }
      WTF::fastFree((unint64_t)(v65 - 2), v57, v58, v59, v60, v61, v62, v63);
    }
  }
  if (BYTE8(v162))
  {
    if (DWORD1(v162))
    {
      v73 = v161;
      v74 = 8 * DWORD1(v162);
      do
      {
        v75 = *(WTF::StringImpl **)v73;
        *(_QWORD *)v73 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, v57, v58, v59, v60, v61, v62, v63);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
        v73 = (WTF *)((char *)v73 + 8);
        v74 -= 8;
      }
      while (v74);
    }
    v66 = v161;
    if (v161)
    {
      v161 = 0;
      LODWORD(v162) = 0;
      WTF::fastFree((unint64_t)v66, v57, v58, v59, v60, v61, v62, v63);
    }
  }
  v67 = v159;
  v159 = 0;
  if (v67)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v67);
  v68 = v191;
  v191 = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = v188;
  v188 = 0;
  if (v69)
  {
    if (v69[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[2];
  }
  v70 = v182;
  v182 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v181;
  v181 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  if (a7)
  {
    if (a7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a7 + 8))(a7);
    else
      --a7[2];
  }
  return v64;
}

JSC::BuiltinExecutables *JSC::BuiltinExecutables::BuiltinExecutables(JSC::BuiltinExecutables *this, JSC::VM *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = a2;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2936800000002;
  *(_QWORD *)(v3 + 8) = JSC::s_JSCCombinedCode;
  *(_DWORD *)(v3 + 16) = 4;
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 109) = 0;
  *(_QWORD *)v4 = off_1E357C4B0;
  v12 = *(_DWORD *)v3;
  *(_DWORD *)v3 += 2;
  *(_QWORD *)(v4 + 120) = v3;
  *((_QWORD *)this + 1) = v4;
  if (v12)
  {
    *(_DWORD *)v3 = v12;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  bzero((char *)this + 16, 0x7C0uLL);
  return this;
}

uint64_t JSC::BuiltinExecutables::defaultConstructorSourceCode@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  int *v5;
  int v6;
  char *v7;

  if (a1 == 1)
  {
    v3 = &JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::baseConstructorCode;
      goto LABEL_3;
    JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_0::operator() const(void)::impl += 2;
    JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::baseConstructorCode = (uint64_t)&JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_0::operator() const(void)::impl;
    goto LABEL_11;
  }
  if (a1 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F5544);
  }
  v3 = &JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::derivedConstructorCode;
  {
    JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_1::operator() const(void)::impl += 2;
    JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::derivedConstructorCode = (uint64_t)&JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_1::operator() const(void)::impl;
LABEL_11:
    *v7 = 1;
  }
LABEL_3:
  result = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(result + 8) = 1;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 109) = 0;
  *(_QWORD *)result = off_1E357C4B0;
  v5 = (int *)*v3;
  if (!*v3)
    v5 = &WTF::StringImpl::s_emptyAtomString;
  v6 = v5[1];
  *v5 += 2;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 120) = v5;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

unint64_t JSC::UnlinkedFunctionExecutable::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::TDZEnvironmentLink **a8, uint64_t a9, uint64_t a10, char a11, char a12, unsigned int a13, char a14)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  JSC::TDZEnvironmentLink *v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v57;
  JSC::VM *v58;
  JSC::TDZEnvironmentLink **v59;
  uint64_t SlowCase;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  char v64;
  JSC::TDZEnvironmentLink *v65;

  v16 = a4;
  v17 = a3;
  v19 = (_QWORD *)(a1 + 41360);
  v20 = *(_QWORD *)(a1 + 41360);
  if (v20 < *(_QWORD *)(a1 + 41368))
    goto LABEL_2;
  v20 = *(_QWORD *)(a1 + 41376);
  if ((v20 & 1) == 0)
  {
    v52 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(a1 + 41384);
    *(_QWORD *)(a1 + 41368) = v20 + HIDWORD(v52);
    *(_QWORD *)(a1 + 41376) = v20 + (int)v52;
LABEL_2:
    *v19 = v20 + 96;
    goto LABEL_3;
  }
  v62 = a1 + 41336;
  v61 = a1 + 192;
  v53 = a6;
  v54 = a5;
  v57 = a7;
  v58 = a2;
  v59 = a8;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a3, a4, a7, (uint64_t)a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v62, v61, 96, 0, 0);
  a8 = v59;
  a2 = v58;
  LODWORD(a7) = v57;
  v17 = a3;
  v16 = a4;
  a5 = v54;
  a6 = v53;
  v20 = SlowCase;
LABEL_3:
  *(_DWORD *)v20 = 0;
  v21 = v19[44];
  v22 = *a8;
  *a8 = 0;
  v65 = v22;
  LOBYTE(v63) = 0;
  v64 = 0;
  if (*(_BYTE *)(a10 + 8))
  {
    v23 = *(_QWORD *)a10;
    *(_QWORD *)a10 = 0;
    v63 = (WTF::StringImpl **)v23;
    v64 = 1;
  }
  JSC::UnlinkedFunctionExecutable::UnlinkedFunctionExecutable(v20, (uint64_t)a2, v21, (uint64_t)a2, v17, v16, a5, a6, a7, (uint64_t *)&v65, a9, (uint64_t *)&v63, a11, a12, a13, a14);
  if (v64)
  {
    v31 = (uint64_t)v63;
    if (v63)
    {
      v41 = *((unsigned int *)v63 - 1);
      if ((_DWORD)v41)
      {
        v42 = v63;
        do
        {
          v43 = *v42;
          if (*v42 != (WTF::StringImpl *)-1)
          {
            if (v43)
            {
              *v42 = 0;
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v24, v25, v26, v27, v28, v29, v30);
                WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
            else
            {
              *v42 = 0;
            }
          }
          v42 += 2;
          --v41;
        }
        while (v41);
      }
      WTF::fastFree(v31 - 16, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v65);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      --*(_DWORD *)v65;
    }
  }
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return v20;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 8);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124DB0;
    *((_QWORD *)this + 2) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 0, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 2);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorInternalPromiseConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 16);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124DC0;
    *((_QWORD *)this + 3) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 3, 0, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 3);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 24);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124DD0;
    *((_QWORD *)this + 4) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 3, 0, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 4);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeRegExpStringIteratorConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 32);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124DE0;
    *((_QWORD *)this + 5) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 0, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 5);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeAdvanceStringIndexCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 40);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124DF0;
    *((_QWORD *)this + 6) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 6);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorAllCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0xD28000007D9;
  *(_OWORD *)(a2 + 8) = xmmword_199152C80;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorAllCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 48);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152C80;
    *((_QWORD *)this + 7) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorAllSettledCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 56);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E00;
    *((_QWORD *)this + 8) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 8);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeAnchorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 64);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E10;
    *((_QWORD *)this + 9) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 9);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorAnyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 72);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E20;
    *((_QWORD *)this + 10) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 10);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::functionPrototypeApplyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 80);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E30;
    *((_QWORD *)this + 11) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::reflectObjectApplyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 80);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E40;
    *((_QWORD *)this + 12) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 12);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 12);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayIteratorPrototypeArrayIteratorNextHelperCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 88);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E50;
    *((_QWORD *)this + 13) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 13);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnFulfilledContinueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 96);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E60;
    *((_QWORD *)this + 14) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 14);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 14);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnFulfilledDoneCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 104);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E70;
    *((_QWORD *)this + 15) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 15);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 15);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 112);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E80;
    *((_QWORD *)this + 16) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 16);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 16);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 120);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124E90;
    *((_QWORD *)this + 17) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 17);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeOnFulfilledCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 18);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 128);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124EA0;
    *((_QWORD *)this + 18) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 18);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 136);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124EB0;
    *((_QWORD *)this + 19) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 19);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x24440000227ELL;
  *(_OWORD *)(a2 + 8) = xmmword_199152C90;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 144);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152C90;
    *((_QWORD *)this + 20) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 20);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x264B00002444;
  *(_OWORD *)(a2 + 8) = xmmword_199152CA0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 21);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 152);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CA0;
    *((_QWORD *)this + 21) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 21);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x29170000264BLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152CB0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 160);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CB0;
    *((_QWORD *)this + 22) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 22);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x299C00002917;
  *(_OWORD *)(a2 + 8) = xmmword_199152CC0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 168);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CC0;
    *((_QWORD *)this + 23) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 23);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorRejectCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x2AF70000299CLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152CD0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorRejectCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 24);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 176);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CD0;
    *((_QWORD *)this + 24) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 24);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResolveCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x2C5B00002AF7;
  *(_OWORD *)(a2 + 8) = xmmword_199152CE0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResolveCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 25);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 184);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CE0;
    *((_QWORD *)this + 25) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 25);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x326600002C5BLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152CF0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 26);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 192);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152CF0;
    *((_QWORD *)this + 26) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 26);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x332900003266;
  *(_OWORD *)(a2 + 8) = xmmword_199152D00;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 27);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 200);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D00;
    *((_QWORD *)this + 27) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 27);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x33E300003329;
  *(_OWORD *)(a2 + 8) = xmmword_199152D10;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 28);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 208);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D10;
    *((_QWORD *)this + 28) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 28);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x34CD000033E3;
  *(_OWORD *)(a2 + 8) = xmmword_199152D20;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 29);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 216);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D20;
    *((_QWORD *)this + 29) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 29);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x35A2000034CDLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152D30;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 30);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 224);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D30;
    *((_QWORD *)this + 30) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 30);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x361C000035A2;
  *(_OWORD *)(a2 + 8) = xmmword_199152D40;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 31);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 232);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D40;
    *((_QWORD *)this + 31) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 31);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderAsyncModuleEvaluationCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 32);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 240);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124EC0;
    *((_QWORD *)this + 32) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 32);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeAtCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 33);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 248);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124ED0;
    *((_QWORD *)this + 33) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 33);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeAtCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 34);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 248);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124EE0;
    *((_QWORD *)this + 34) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 34);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeAtCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 35);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 248);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124EF0;
    *((_QWORD *)this + 35) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 35);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeAwaitValueCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x3C6C00003BCBLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152D50;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeAwaitValueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 36);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 256);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D50;
    *((_QWORD *)this + 36) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 36);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeBigCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 37);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 264);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F00;
    *((_QWORD *)this + 37) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 37);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 37);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeBlinkCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 38);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 272);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F10;
    *((_QWORD *)this + 38) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 38);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 38);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeBoldCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 39);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 280);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F20;
    *((_QWORD *)this + 39) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 39);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 39);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::iteratorHelpersBuiltinMapIterableCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 40);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 288);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F30;
    *((_QWORD *)this + 40) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 40);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 40);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::iteratorHelpersBuiltinSetIterableCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 41);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 296);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F40;
    *((_QWORD *)this + 41) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 41);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 41);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderCacheSatisfyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 42);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 304);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F50;
    *((_QWORD *)this + 42) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 42);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderCacheSatisfyAndReturnCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 43);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 312);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F60;
    *((_QWORD *)this + 43) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 43);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::functionPrototypeCallCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 44);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 320);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F70;
    *((_QWORD *)this + 44) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 44);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promisePrototypeCatchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 45);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 328);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F80;
    *((_QWORD *)this + 45) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 45);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::webAssemblyCompileStreamingCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 46);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 336);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124F90;
    *((_QWORD *)this + 46) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 46);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeConcatCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 47);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 344);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FA0;
    *((_QWORD *)this + 47) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 47);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeConcatCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 48);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 344);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FB0;
    *((_QWORD *)this + 48) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 48);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeConcatSlowPathCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 49);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 352);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FC0;
    *((_QWORD *)this + 49) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 49);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeCopyWithinCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 50);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 360);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FD0;
    *((_QWORD *)this + 50) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 50);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::injectedScriptSourceCreateArrayWithoutPrototypeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 51);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 368);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FE0;
    *((_QWORD *)this + 51) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 51);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 51);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x504B00004F6DLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152D60;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 52);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 376);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D60;
    *((_QWORD *)this + 52) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 52);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeCreateHTMLCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 53);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 384);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199124FF0;
    *((_QWORD *)this + 53) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 53);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 53);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::injectedScriptSourceCreateInspectorInjectedScriptCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 54);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 392);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125000;
    *((_QWORD *)this + 54) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 54);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 54);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::injectedScriptSourceCreateObjectWithoutPrototypeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 55);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 400);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125010;
    *((_QWORD *)this + 55) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 55);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 55);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsCreateResolvingFunctionsCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 56);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 408);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125020;
    *((_QWORD *)this + 56) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 56);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsCreateResolvingFunctionsWithoutPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 57);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 416);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125030;
    *((_QWORD *)this + 57) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 57);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::shadowRealmPrototypeCrossRealmThrowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 58);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 424);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125040;
    *((_QWORD *)this + 58) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 58);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 58);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorDefaultAsyncFromAsyncArrayLikeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 59);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 432);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125050;
    *((_QWORD *)this + 59) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 59);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 59);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorDefaultAsyncFromAsyncIteratorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 60);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 440);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125060;
    *((_QWORD *)this + 60) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 60);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 60);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::reflectObjectDeletePropertyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 61);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 448);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125070;
    *((_QWORD *)this + 61) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 61);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 61);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderDependencyKeysIfEvaluatedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 62);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 456);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125080;
    *((_QWORD *)this + 62) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 62);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeDifferenceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 63);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 464);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125090;
    *((_QWORD *)this + 63) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 63);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x115A800010D5ALL;
  *(_OWORD *)(a2 + 8) = xmmword_199152D70;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 64);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 472);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D70;
    *((_QWORD *)this + 64) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 64);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x11623000115A8;
  *(_OWORD *)(a2 + 8) = xmmword_199152D80;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 65);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 480);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D80;
    *((_QWORD *)this + 65) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 65);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1169E00011623;
  *(_OWORD *)(a2 + 8) = xmmword_199152D90;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 66);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 488);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152D90;
    *((_QWORD *)this + 66) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 66);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderEnsureRegisteredCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 67);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 496);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250A0;
    *((_QWORD *)this + 67) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 67);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::shadowRealmPrototypeEvaluateCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 68);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 504);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250B0;
    *((_QWORD *)this + 68) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 68);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 68);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeEveryCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 69);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 512);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250C0;
    *((_QWORD *)this + 69) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 69);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeEveryCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 70);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 512);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250D0;
    *((_QWORD *)this + 70) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 70);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFillCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 71);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 520);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250E0;
    *((_QWORD *)this + 71) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 71);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFilterCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 72);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 528);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991250F0;
    *((_QWORD *)this + 72) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, (_DWORD *)1, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 72);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeFilterCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 73);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 528);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125100;
    *((_QWORD *)this + 73) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 73);
  }
  return result;
}

double JSC::BuiltinExecutables::promisePrototypeFinallyCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1275100012418;
  *(_OWORD *)(a2 + 8) = xmmword_199152DA0;
  return result;
}

uint64_t JSC::BuiltinExecutables::promisePrototypeFinallyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 74);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 536);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DA0;
    *((_QWORD *)this + 74) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 74);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFindCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 75);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 544);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125110;
    *((_QWORD *)this + 75) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 75);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeFindCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 76);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 544);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125120;
    *((_QWORD *)this + 76) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 76);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFindIndexCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 77);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 552);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125130;
    *((_QWORD *)this + 77) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 77);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeFindIndexCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 78);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 552);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125140;
    *((_QWORD *)this + 78) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 78);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFindLastCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 79);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 560);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125150;
    *((_QWORD *)this + 79) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 79);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeFindLastCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 80);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 560);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125160;
    *((_QWORD *)this + 80) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 80);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFindLastIndexCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 81);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 568);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125170;
    *((_QWORD *)this + 81) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 81);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeFindLastIndexCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 82);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 568);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125180;
    *((_QWORD *)this + 82) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 82);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeFixedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 83);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 576);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125190;
    *((_QWORD *)this + 83) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 83);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 83);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFlatCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 84);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 584);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251A0;
    *((_QWORD *)this + 84) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 84);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFlatIntoArrayCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 85);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 592);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251B0;
    *((_QWORD *)this + 85) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 85);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFlatIntoArrayWithCallbackCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 86);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 600);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251C0;
    *((_QWORD *)this + 86) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 86);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeFlatMapCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 87);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 608);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251D0;
    *((_QWORD *)this + 87) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 87);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeFontcolorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 88);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 616);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251E0;
    *((_QWORD *)this + 88) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 88);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 88);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeFontsizeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 89);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 624);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991251F0;
    *((_QWORD *)this + 89) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 89);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 89);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeForEachCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 90);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 632);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125200;
    *((_QWORD *)this + 90) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 90);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::mapPrototypeForEachCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 91);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 632);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125210;
    *((_QWORD *)this + 91) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 91);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeForEachCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 92);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 632);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125220;
    *((_QWORD *)this + 92) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 92);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeForEachCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 93);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 632);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125230;
    *((_QWORD *)this + 93) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 93);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderForceFulfillPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 94);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 640);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125240;
    *((_QWORD *)this + 94) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 94);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 94);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorFromCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 95);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 648);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125250;
    *((_QWORD *)this + 95) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 95);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayConstructorFromCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 96);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 648);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125260;
    *((_QWORD *)this + 96) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 96);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorFromAsyncCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 97);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 656);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125270;
    *((_QWORD *)this + 97) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 97);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::objectConstructorFromEntriesCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 98);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 664);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125280;
    *((_QWORD *)this + 98) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 98);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderFulfillFetchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 99);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 672);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125290;
    *((_QWORD *)this + 99) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 99);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 99);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsFulfillPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 100);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 680);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252A0;
    *((_QWORD *)this + 100) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 100);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsFulfillPromiseWithFirstResolvingFunctionCallCheckCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 101);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 688);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252B0;
    *((_QWORD *)this + 101) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 101);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsFulfillWithoutPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 102);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 696);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252C0;
    *((_QWORD *)this + 102) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 102);
  }
  return result;
}

double JSC::BuiltinExecutables::generatorPrototypeGeneratorResumeCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1608500015D78;
  *(_OWORD *)(a2 + 8) = xmmword_199152DB0;
  return result;
}

uint64_t JSC::BuiltinExecutables::generatorPrototypeGeneratorResumeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 103);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 704);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DB0;
    *((_QWORD *)this + 103) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 103);
  }
  return result;
}

double JSC::BuiltinExecutables::reflectObjectGetCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x161A600016085;
  *(_OWORD *)(a2 + 8) = xmmword_199152DC0;
  return result;
}

uint64_t JSC::BuiltinExecutables::reflectObjectGetCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 104);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 712);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DC0;
    *((_QWORD *)this + 104) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 104);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeGetSetSizeAsIntCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 105);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 720);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252D0;
    *((_QWORD *)this + 105) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, (_DWORD *)1, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 105);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeGetSubstitutionCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 106);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 728);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252E0;
    *((_QWORD *)this + 106) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 106);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 106);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::mapConstructorGroupByCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 107);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 736);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991252F0;
    *((_QWORD *)this + 107) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 107);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::objectConstructorGroupByCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 108);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 736);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125300;
    *((_QWORD *)this + 108) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 108);
  }
  return result;
}

double JSC::BuiltinExecutables::reflectObjectHasCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1734800017296;
  *(_OWORD *)(a2 + 8) = xmmword_199152DD0;
  return result;
}

uint64_t JSC::BuiltinExecutables::reflectObjectHasCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 109);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 744);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DD0;
    *((_QWORD *)this + 109) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 109);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeHasObservableSideEffectsForRegExpMatchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 110);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 752);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125310;
    *((_QWORD *)this + 110) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 110);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeHasObservableSideEffectsForRegExpSplitCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 111);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 760);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125320;
    *((_QWORD *)this + 111) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 111);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeHasObservableSideEffectsForStringReplaceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 112);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 768);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125330;
    *((_QWORD *)this + 112) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 112);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::shadowRealmPrototypeImportValueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 113);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 776);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125340;
    *((_QWORD *)this + 113) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 113);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 113);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeIncludesCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 114);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 784);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125350;
    *((_QWORD *)this + 114) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 114);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::webAssemblyInstantiateStreamingCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 115);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 792);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125360;
    *((_QWORD *)this + 115) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 115);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::internalPromiseConstructorInternalAllCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 116);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 800);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125370;
    *((_QWORD *)this + 116) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 116);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeIntersectionCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 117);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 808);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125380;
    *((_QWORD *)this + 117) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 117);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorIsArrayCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 118);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 816);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125390;
    *((_QWORD *)this + 118) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 118);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeIsDisjointFromCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 119);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 824);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253A0;
    *((_QWORD *)this + 119) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 119);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeIsExecutionStateCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1917D0001900CLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152DE0;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeIsExecutionStateCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 120);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 832);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DE0;
    *((_QWORD *)this + 120) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 120);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::globalObjectIsFiniteCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 121);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 840);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253B0;
    *((_QWORD *)this + 121) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 121);
  }
  return result;
}

double JSC::BuiltinExecutables::numberConstructorIsFiniteCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x192DE00019235;
  *(_OWORD *)(a2 + 8) = xmmword_199152DF0;
  return result;
}

uint64_t JSC::BuiltinExecutables::numberConstructorIsFiniteCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 122);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 840);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152DF0;
    *((_QWORD *)this + 122) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 122);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeIsSubsetOfCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 123);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 848);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253C0;
    *((_QWORD *)this + 123) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 123);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeIsSupersetOfCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 124);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 856);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253D0;
    *((_QWORD *)this + 124) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 124);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeIsSuspendYieldStateCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1995E0001982CLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152E00;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeIsSuspendYieldStateCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 125);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 864);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E00;
    *((_QWORD *)this + 125) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 125);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeItalicsCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 126);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 872);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253E0;
    *((_QWORD *)this + 126) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 126);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 126);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderLinkCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 127);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 880);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991253F0;
    *((_QWORD *)this + 127) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 127);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeLinkCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 128);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 880);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125400;
    *((_QWORD *)this + 128) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 128);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 128);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderLinkAndEvaluateModuleCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 129);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 888);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125410;
    *((_QWORD *)this + 129) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 129);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderLoadAndEvaluateModuleCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 130);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 896);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125420;
    *((_QWORD *)this + 130) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 130);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderLoadModuleCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 131);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 904);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125430;
    *((_QWORD *)this + 131) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 131);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeMapCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 132);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 912);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125440;
    *((_QWORD *)this + 132) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 132);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeMapCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 133);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 912);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125450;
    *((_QWORD *)this + 133) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 133);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeMatchCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 134);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 920);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.match]", 0xEuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.match]", 0xEuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_199125460;
    *((_QWORD *)this + 134) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 134);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeMatchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 135);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 920);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125470;
    *((_QWORD *)this + 135) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 135);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeMatchAllCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 136);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 928);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.matchAll]", 0x11uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.matchAll]", 0x11uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_199125480;
    *((_QWORD *)this + 136) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 136);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeMatchAllCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 137);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 928);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125490;
    *((_QWORD *)this + 137) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 137);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 137);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeMatchSlowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 138);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 936);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254A0;
    *((_QWORD *)this + 138) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 138);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeMaxWithPositivesCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 139);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 944);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254B0;
    *((_QWORD *)this + 139) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 139);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 139);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeMinWithMaybeNegativeZeroAndPositiveCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 140);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 952);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254C0;
    *((_QWORD *)this + 140) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 140);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 140);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderModuleEvaluationCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 141);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 960);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254D0;
    *((_QWORD *)this + 141) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 141);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsNewHandledRejectedPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 142);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 968);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254E0;
    *((_QWORD *)this + 142) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 142);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 142);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsNewPromiseCapabilityCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 143);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 976);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991254F0;
    *((_QWORD *)this + 143) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 143);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 143);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsNewPromiseCapabilitySlowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 144);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 984);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125500;
    *((_QWORD *)this + 144) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 144);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderNewRegistryEntryCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 145);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 992);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125510;
    *((_QWORD *)this + 145) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 145);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 146);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125520;
    *((_QWORD *)this + 146) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 146);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 147);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125530;
    *((_QWORD *)this + 147) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 147);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 147);
  }
  return result;
}

double JSC::BuiltinExecutables::asyncGeneratorPrototypeNextCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1BDB60001BD49;
  *(_OWORD *)(a2 + 8) = xmmword_199152E10;
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 148);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E10;
    *((_QWORD *)this + 148) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 148);
  }
  return result;
}

double JSC::BuiltinExecutables::generatorPrototypeNextCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1BF480001BDB6;
  *(_OWORD *)(a2 + 8) = xmmword_199152E20;
  return result;
}

uint64_t JSC::BuiltinExecutables::generatorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 149);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E20;
    *((_QWORD *)this + 149) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 149);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::mapIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 150);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125540;
    *((_QWORD *)this + 150) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 150);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpStringIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 151);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125550;
    *((_QWORD *)this + 151) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 151);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 152);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125560;
    *((_QWORD *)this + 152) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 152);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringIteratorPrototypeNextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 153);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1000);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125570;
    *((_QWORD *)this + 153) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 153);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayConstructorOfCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 154);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1008);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125580;
    *((_QWORD *)this + 154) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 154);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 154);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayConstructorOfCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 155);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1008);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125590;
    *((_QWORD *)this + 155) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 155);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypePadEndCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 156);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1016);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255A0;
    *((_QWORD *)this + 156) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 156);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 156);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypePadStartCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 157);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1024);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255B0;
    *((_QWORD *)this + 157) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 157);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 157);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::iteratorHelpersPerformIterationCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 158);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1032);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255C0;
    *((_QWORD *)this + 158) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 158);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPerformPromiseThenCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 159);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1040);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255D0;
    *((_QWORD *)this + 159) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 159);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectGetCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 160);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1048);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255E0;
    *((_QWORD *)this + 160) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 160);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectGetByValCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 161);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1056);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991255F0;
    *((_QWORD *)this + 161) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 161);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectHasCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 162);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1064);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125600;
    *((_QWORD *)this + 162) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 162);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectHasByValCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 163);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1072);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125610;
    *((_QWORD *)this + 163) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 163);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetByValSloppyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 164);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1080);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125620;
    *((_QWORD *)this + 164) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 164);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetByValStrictCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 165);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1088);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125630;
    *((_QWORD *)this + 165) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 165);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetSloppyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 166);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1096);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125640;
    *((_QWORD *)this + 166) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 166);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetStrictCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 167);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1104);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125650;
    *((_QWORD *)this + 167) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 167);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorPromiseAllNewResolveElementCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1F41D0001F2A4;
  *(_OWORD *)(a2 + 8) = xmmword_199152E30;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseAllNewResolveElementCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 168);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1112);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E30;
    *((_QWORD *)this + 168) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 168);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorPromiseAllOnFulfilledCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1F5550001F41DLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152E40;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseAllOnFulfilledCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 169);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1120);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E40;
    *((_QWORD *)this + 169) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 169);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorPromiseAllSlowCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1F9EA0001F555;
  *(_OWORD *)(a2 + 8) = xmmword_199152E50;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseAllSlowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 170);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1128);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E50;
    *((_QWORD *)this + 170) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 170);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseEmptyOnFulfilledCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 171);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1136);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125660;
    *((_QWORD *)this + 171) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 171);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseEmptyOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 172);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1144);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125670;
    *((_QWORD *)this + 172) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 172);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorPromiseNewOnRejectedCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1FAF20001FA5BLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152E60;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseNewOnRejectedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 173);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1152);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E60;
    *((_QWORD *)this + 173) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 173);
  }
  return result;
}

double JSC::BuiltinExecutables::promiseConstructorPromiseOnRejectedWithContextCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x1FB860001FAF2;
  *(_OWORD *)(a2 + 8) = xmmword_199152E70;
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorPromiseOnRejectedWithContextCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 174);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1160);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E70;
    *((_QWORD *)this + 174) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 174);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseReactionJobCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 175);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1168);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125680;
    *((_QWORD *)this + 175) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 175);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseReactionJobWithoutPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 176);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1176);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125690;
    *((_QWORD *)this + 176) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 176);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseRejectSlowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 177);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1184);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256A0;
    *((_QWORD *)this + 177) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 177);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 177);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 178);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1192);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256B0;
    *((_QWORD *)this + 178) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 178);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveSlowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 179);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1200);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256C0;
    *((_QWORD *)this + 179) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 179);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 180);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1208);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256D0;
    *((_QWORD *)this + 180) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 180);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobFastCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 181);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1216);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256E0;
    *((_QWORD *)this + 181) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 181);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobWithDerivedPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 182);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1224);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991256F0;
    *((_QWORD *)this + 182) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 182);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobWithoutPromiseFastCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 183);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1232);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125700;
    *((_QWORD *)this + 183) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 183);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderProvideFetchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 184);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1240);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125710;
    *((_QWORD *)this + 184) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 184);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsPushNewPromiseReactionCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 185);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1248);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125720;
    *((_QWORD *)this + 185) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 185);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorRaceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 186);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1256);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125730;
    *((_QWORD *)this + 186) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 186);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 186);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringConstructorRawCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 187);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1264);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125740;
    *((_QWORD *)this + 187) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 187);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 187);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeReduceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 188);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1272);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125750;
    *((_QWORD *)this + 188) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 188);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeReduceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 189);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1272);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125760;
    *((_QWORD *)this + 189) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 189);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeReduceRightCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 190);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1280);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125770;
    *((_QWORD *)this + 190) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 190);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeReduceRightCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 191);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1280);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125780;
    *((_QWORD *)this + 191) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 191);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeRegExpExecCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 192);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1288);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125790;
    *((_QWORD *)this + 192) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 192);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorRejectCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 193);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1296);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257A0;
    *((_QWORD *)this + 193) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 193);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsRejectPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 194);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1304);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257B0;
    *((_QWORD *)this + 194) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 194);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsRejectPromiseWithFirstResolvingFunctionCallCheckCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 195);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1312);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257C0;
    *((_QWORD *)this + 195) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 195);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsRejectWithoutPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 196);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1320);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257D0;
    *((_QWORD *)this + 196) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 196);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeRepeatCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 197);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1328);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257E0;
    *((_QWORD *)this + 197) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 197);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 197);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeRepeatCharactersSlowPathCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 198);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1336);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991257F0;
    *((_QWORD *)this + 198) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 198);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 198);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeRepeatSlowPathCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 199);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1344);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125800;
    *((_QWORD *)this + 199) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 199);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 199);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeReplaceCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 200);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1352);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.replace]", 0x10uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.replace]", 0x10uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_199125810;
    *((_QWORD *)this + 200) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 200);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeReplaceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 201);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1352);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125820;
    *((_QWORD *)this + 201) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 201);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeReplaceAllCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 202);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1360);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125830;
    *((_QWORD *)this + 202) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 202);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderRequestFetchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 203);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1368);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125840;
    *((_QWORD *)this + 203) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 203);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderRequestImportModuleCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 204);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1376);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125850;
    *((_QWORD *)this + 204) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 204);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderRequestInstantiateCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 205);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1384);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125860;
    *((_QWORD *)this + 205) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 205);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderRequestSatisfyCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 206);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1392);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125870;
    *((_QWORD *)this + 206) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 206);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderRequestSatisfyUtilCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 207);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1400);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125880;
    *((_QWORD *)this + 207) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 2u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 207);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorResolveCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 208);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1408);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125890;
    *((_QWORD *)this + 208) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 208);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsResolvePromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 209);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1416);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258A0;
    *((_QWORD *)this + 209) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 209);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsResolvePromiseWithFirstResolvingFunctionCallCheckCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 210);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1424);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258B0;
    *((_QWORD *)this + 210) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 210);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsResolveWithoutPromiseCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 211);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1432);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258C0;
    *((_QWORD *)this + 211) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 211);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsResolveWithoutPromiseForAsyncAwaitCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 212);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1440);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258D0;
    *((_QWORD *)this + 212) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 212);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeReturnCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 213);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1448);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258E0;
    *((_QWORD *)this + 213) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 213);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 213);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeReturnCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 214);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1448);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991258F0;
    *((_QWORD *)this + 214) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 214);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 214);
  }
  return result;
}

double JSC::BuiltinExecutables::generatorPrototypeReturnCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x25936000257A9;
  *(_OWORD *)(a2 + 8) = xmmword_199152E80;
  return result;
}

uint64_t JSC::BuiltinExecutables::generatorPrototypeReturnCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 215);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1448);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E80;
    *((_QWORD *)this + 215) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 215);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeSearchCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 216);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1456);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.search]", 0xFuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.search]", 0xFuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_199125900;
    *((_QWORD *)this + 216) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 216);
  }
  return result;
}

double JSC::BuiltinExecutables::stringPrototypeSearchCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x25D6A00025BBBLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152E90;
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeSearchCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 217);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1456);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152E90;
    *((_QWORD *)this + 217) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 217);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::moduleLoaderSetStateToMaxCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 218);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1464);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125910;
    *((_QWORD *)this + 218) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 218);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeSmallCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 219);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1472);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125920;
    *((_QWORD *)this + 219) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 219);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 219);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeSomeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 220);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1480);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125930;
    *((_QWORD *)this + 220) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 220);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeSomeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 221);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1480);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125940;
    *((_QWORD *)this + 221) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 221);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::globalOperationsSpeciesConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 222);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1488);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125950;
    *((_QWORD *)this + 222) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 222);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeSplitCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 223);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1496);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.split]", 0xEuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.split]", 0xEuLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_199125960;
    *((_QWORD *)this + 223) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 223);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeSplitCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 224);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1496);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125970;
    *((_QWORD *)this + 224) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 224);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeStrikeCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 225);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1504);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125980;
    *((_QWORD *)this + 225) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 225);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 225);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeStringConcatSlowPathCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 226);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1512);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125990;
    *((_QWORD *)this + 226) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 226);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeSubCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 227);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1520);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991259A0;
    *((_QWORD *)this + 227) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 227);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 227);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::stringPrototypeSupCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 228);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1528);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991259B0;
    *((_QWORD *)this + 228) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 228);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 228);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncIteratorPrototypeSymbolAsyncIteratorGetterCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 229);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1536);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.asyncIterator]", 0x16uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.asyncIterator]", 0x16uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_1991259C0;
    *((_QWORD *)this + 229) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 229);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::functionPrototypeSymbolHasInstanceCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 230);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1544);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.hasInstance]", 0x14uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.hasInstance]", 0x14uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_1991259D0;
    *((_QWORD *)this + 230) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 230);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::iteratorPrototypeSymbolIteratorGetterCodeExecutable(JSC::BuiltinExecutables *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  WTF::StringImpl *v46;

  result = *((_QWORD *)this + 231);
  if (!result)
  {
    v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1552);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.iterator]", 0x11uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"[Symbol.iterator]", 0x11uLL, a4, a5, a6, a7, a8, &v44);
      v18 = v44;
      v46 = v44;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    ++*((_DWORD *)v19 + 2);
    v44 = v19;
    v45 = xmmword_1991259E0;
    *((_QWORD *)this + 231) = JSC::BuiltinExecutables::createExecutable(*(_QWORD *)this, (unsigned int *)&v44, &v46, 0, 0, 1, 0, 0, 0);
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      else
        --*((_DWORD *)v27 + 2);
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    return *((_QWORD *)this + 231);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeSymmetricDifferenceCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 232);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1560);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_1991259F0;
    *((_QWORD *)this + 232) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 232);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::regExpPrototypeTestCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 233);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1568);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A00;
    *((_QWORD *)this + 233) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 233);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promisePrototypeThenCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 234);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1576);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A10;
    *((_QWORD *)this + 234) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 234);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeThrowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 235);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1584);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A20;
    *((_QWORD *)this + 235) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 235);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 235);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::asyncGeneratorPrototypeThrowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 236);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1584);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A30;
    *((_QWORD *)this + 236) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 236);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 236);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::generatorPrototypeThrowCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 237);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1584);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A40;
    *((_QWORD *)this + 237) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 237);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 237);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeToLocaleStringCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 238);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1592);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A50;
    *((_QWORD *)this + 238) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 238);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeToReversedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 239);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1600);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A60;
    *((_QWORD *)this + 239) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 239);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeToSortedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 240);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1608);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A70;
    *((_QWORD *)this + 240) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 240);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeToSplicedCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 241);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1616);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A80;
    *((_QWORD *)this + 241) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 241);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseOperationsTriggerPromiseReactionsCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 242);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1624);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125A90;
    *((_QWORD *)this + 242) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 242);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorTryCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 243);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1632);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AA0;
    *((_QWORD *)this + 243) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 243);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 243);
  }
  return result;
}

double JSC::BuiltinExecutables::typedArrayPrototypeTypedArraySpeciesConstructorCodeSource@<D0>(JSC::BuiltinExecutables *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)&result = 0x28CC900028B3DLL;
  *(_OWORD *)(a2 + 8) = xmmword_199152EA0;
  return result;
}

uint64_t JSC::BuiltinExecutables::typedArrayPrototypeTypedArraySpeciesConstructorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 244);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1640);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199152EA0;
    *((_QWORD *)this + 244) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 244);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::setPrototypeUnionCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 245);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1648);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AB0;
    *((_QWORD *)this + 245) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 245);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::arrayPrototypeWithCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 246);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1656);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AC0;
    *((_QWORD *)this + 246) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 246);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::promiseConstructorWithResolversCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 247);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1664);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AD0;
    *((_QWORD *)this + 247) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 0, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((_QWORD *)this + 247);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::shadowRealmPrototypeWrapRemoteValueCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 248);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1672);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AE0;
    *((_QWORD *)this + 248) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 248);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 248);
  }
  return result;
}

uint64_t JSC::BuiltinExecutables::iteratorHelpersWrappedIteratorCodeExecutable(JSC::BuiltinExecutables *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 249);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 48) + 1680);
    if (v4)
      *(_DWORD *)v4 += 2;
    v24 = v4;
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    ++v5[2];
    v22 = v5;
    v23 = xmmword_199125AF0;
    *((_QWORD *)this + 249) = JSC::BuiltinExecutables::createExecutable(v3, (unsigned int *)&v22, &v24, 1u, 0, 1, 0, 0, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        if (v4)
        {
LABEL_8:
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::~StringImpl(v4, v6, v7, v8, v9, v10, v11, v12);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        return *((_QWORD *)this + 249);
      }
      --v13[2];
    }
    if (v4)
      goto LABEL_8;
    return *((_QWORD *)this + 249);
  }
  return result;
}

uint64_t JSC::BuiltinNames::BuiltinNames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  uint64_t v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  uint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  uint64_t v2565;
  WTF::AtomStringImpl *v2566;
  const WTF::StringImpl *v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  WTF::StringImpl *v2573;
  int v2574;
  WTF::AtomStringImpl *v2575;
  const WTF::StringImpl *v2576;
  uint64_t v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  WTF::StringImpl *v2582;
  int v2583;
  WTF::AtomStringImpl *v2584;
  const WTF::StringImpl *v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  WTF::StringImpl *v2591;
  int v2592;
  WTF::AtomStringImpl *v2593;
  const WTF::StringImpl *v2594;
  uint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  WTF::StringImpl *v2600;
  int v2601;
  WTF::AtomStringImpl *v2602;
  const WTF::StringImpl *v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  WTF::StringImpl *v2609;
  int v2610;
  WTF::AtomStringImpl *v2611;
  const WTF::StringImpl *v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t v2617;
  WTF::StringImpl *v2618;
  int v2619;
  WTF::AtomStringImpl *v2620;
  const WTF::StringImpl *v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t v2625;
  uint64_t v2626;
  WTF::StringImpl *v2627;
  int v2628;
  WTF::AtomStringImpl *v2629;
  const WTF::StringImpl *v2630;
  uint64_t v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  uint64_t v2635;
  WTF::StringImpl *v2636;
  int v2637;
  WTF::AtomStringImpl *v2638;
  const WTF::StringImpl *v2639;
  uint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  uint64_t v2643;
  uint64_t v2644;
  WTF::StringImpl *v2645;
  int v2646;
  WTF::AtomStringImpl *v2647;
  const WTF::StringImpl *v2648;
  uint64_t v2649;
  uint64_t v2650;
  uint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  WTF::StringImpl *v2654;
  int v2655;
  WTF::AtomStringImpl *v2656;
  const WTF::StringImpl *v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t v2661;
  uint64_t v2662;
  WTF::StringImpl *v2663;
  int v2664;
  WTF::AtomStringImpl *v2665;
  const WTF::StringImpl *v2666;
  uint64_t v2667;
  uint64_t v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  WTF::StringImpl *v2672;
  int v2673;
  WTF::AtomStringImpl *v2674;
  const WTF::StringImpl *v2675;
  uint64_t v2676;
  uint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  uint64_t v2680;
  WTF::StringImpl *v2681;
  int v2682;
  WTF::AtomStringImpl *v2683;
  const WTF::StringImpl *v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  uint64_t v2688;
  uint64_t v2689;
  WTF::StringImpl *v2690;
  int v2691;
  WTF::AtomStringImpl *v2692;
  const WTF::StringImpl *v2693;
  uint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  WTF::StringImpl *v2699;
  int v2700;
  WTF::StringImpl *v2701;
  int v2702;
  WTF::AtomStringImpl *v2703;
  const WTF::StringImpl *v2704;
  uint64_t v2705;
  uint64_t v2706;
  uint64_t v2707;
  uint64_t v2708;
  uint64_t v2709;
  WTF::StringImpl *v2710;
  WTF::AtomStringImpl *v2711;
  const WTF::StringImpl *v2712;
  uint64_t v2713;
  uint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t v2717;
  WTF::StringImpl *v2718;
  WTF::AtomStringImpl *v2719;
  const WTF::StringImpl *v2720;
  uint64_t v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  WTF::StringImpl *v2726;
  WTF::AtomStringImpl *v2727;
  const WTF::StringImpl *v2728;
  uint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  WTF::StringImpl *v2734;
  WTF::AtomStringImpl *v2735;
  const WTF::StringImpl *v2736;
  uint64_t v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  uint64_t v2741;
  WTF::StringImpl *v2742;
  WTF::AtomStringImpl *v2743;
  const WTF::StringImpl *v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t v2749;
  WTF::StringImpl *v2750;
  WTF::AtomStringImpl *v2751;
  const WTF::StringImpl *v2752;
  uint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  uint64_t v2756;
  uint64_t v2757;
  WTF::StringImpl *v2758;
  WTF::AtomStringImpl *v2759;
  const WTF::StringImpl *v2760;
  uint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  WTF::StringImpl *v2766;
  WTF::AtomStringImpl *v2767;
  const WTF::StringImpl *v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  uint64_t v2773;
  WTF::StringImpl *v2774;
  WTF::AtomStringImpl *v2775;
  const WTF::StringImpl *v2776;
  uint64_t v2777;
  uint64_t v2778;
  uint64_t v2779;
  uint64_t v2780;
  uint64_t v2781;
  WTF::StringImpl *v2782;
  WTF::AtomStringImpl *v2783;
  const WTF::StringImpl *v2784;
  uint64_t v2785;
  uint64_t v2786;
  uint64_t v2787;
  uint64_t v2788;
  uint64_t v2789;
  WTF::StringImpl *v2790;
  WTF::AtomStringImpl *v2791;
  const WTF::StringImpl *v2792;
  uint64_t v2793;
  uint64_t v2794;
  uint64_t v2795;
  uint64_t v2796;
  uint64_t v2797;
  WTF::StringImpl *v2798;
  WTF::AtomStringImpl *v2799;
  const WTF::StringImpl *v2800;
  uint64_t v2801;
  uint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  uint64_t v2805;
  WTF::StringImpl *v2806;
  WTF::AtomStringImpl *v2807;
  const WTF::StringImpl *v2808;
  uint64_t v2809;
  uint64_t v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  WTF::StringImpl *v2814;
  WTF::AtomStringImpl *v2815;
  const WTF::StringImpl *v2816;
  uint64_t v2817;
  uint64_t v2818;
  uint64_t v2819;
  uint64_t v2820;
  uint64_t v2821;
  WTF::StringImpl *v2822;
  WTF::AtomStringImpl *v2823;
  const WTF::StringImpl *v2824;
  uint64_t v2825;
  uint64_t v2826;
  uint64_t v2827;
  uint64_t v2828;
  uint64_t v2829;
  WTF::StringImpl *v2830;
  WTF::AtomStringImpl *v2831;
  const WTF::StringImpl *v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  WTF::StringImpl *v2838;
  WTF::AtomStringImpl *v2839;
  const WTF::StringImpl *v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  uint64_t v2844;
  uint64_t v2845;
  WTF::StringImpl *v2846;
  WTF::AtomStringImpl *v2847;
  const WTF::StringImpl *v2848;
  uint64_t v2849;
  uint64_t v2850;
  uint64_t v2851;
  uint64_t v2852;
  uint64_t v2853;
  WTF::StringImpl *v2854;
  WTF::AtomStringImpl *v2855;
  const WTF::StringImpl *v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  uint64_t v2861;
  WTF::StringImpl *v2862;
  WTF::AtomStringImpl *v2863;
  const WTF::StringImpl *v2864;
  uint64_t v2865;
  uint64_t v2866;
  uint64_t v2867;
  uint64_t v2868;
  uint64_t v2869;
  WTF::StringImpl *v2870;
  WTF::AtomStringImpl *v2871;
  const WTF::StringImpl *v2872;
  uint64_t v2873;
  uint64_t v2874;
  uint64_t v2875;
  uint64_t v2876;
  uint64_t v2877;
  WTF::StringImpl *v2878;
  WTF::AtomStringImpl *v2879;
  const WTF::StringImpl *v2880;
  uint64_t v2881;
  uint64_t v2882;
  uint64_t v2883;
  uint64_t v2884;
  uint64_t v2885;
  WTF::StringImpl *v2886;
  WTF::AtomStringImpl *v2887;
  const WTF::StringImpl *v2888;
  uint64_t v2889;
  uint64_t v2890;
  uint64_t v2891;
  uint64_t v2892;
  uint64_t v2893;
  WTF::StringImpl *v2894;
  WTF::AtomStringImpl *v2895;
  const WTF::StringImpl *v2896;
  uint64_t v2897;
  uint64_t v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  WTF::StringImpl *v2902;
  WTF::AtomStringImpl *v2903;
  const WTF::StringImpl *v2904;
  uint64_t v2905;
  uint64_t v2906;
  uint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  WTF::StringImpl *v2910;
  WTF::AtomStringImpl *v2911;
  const WTF::StringImpl *v2912;
  uint64_t v2913;
  uint64_t v2914;
  uint64_t v2915;
  uint64_t v2916;
  uint64_t v2917;
  WTF::StringImpl *v2918;
  WTF::AtomStringImpl *v2919;
  const WTF::StringImpl *v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  WTF::StringImpl *v2926;
  WTF::AtomStringImpl *v2927;
  const WTF::StringImpl *v2928;
  uint64_t v2929;
  uint64_t v2930;
  uint64_t v2931;
  uint64_t v2932;
  uint64_t v2933;
  WTF::StringImpl *v2934;
  WTF::AtomStringImpl *v2935;
  const WTF::StringImpl *v2936;
  uint64_t v2937;
  uint64_t v2938;
  uint64_t v2939;
  uint64_t v2940;
  uint64_t v2941;
  WTF::StringImpl *v2942;
  WTF::AtomStringImpl *v2943;
  const WTF::StringImpl *v2944;
  uint64_t v2945;
  uint64_t v2946;
  uint64_t v2947;
  uint64_t v2948;
  uint64_t v2949;
  WTF::StringImpl *v2950;
  WTF::AtomStringImpl *v2951;
  const WTF::StringImpl *v2952;
  uint64_t v2953;
  uint64_t v2954;
  uint64_t v2955;
  uint64_t v2956;
  uint64_t v2957;
  WTF::StringImpl *v2958;
  WTF::AtomStringImpl *v2959;
  const WTF::StringImpl *v2960;
  uint64_t v2961;
  uint64_t v2962;
  uint64_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  WTF::StringImpl *v2966;
  WTF::AtomStringImpl *v2967;
  const WTF::StringImpl *v2968;
  uint64_t v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  uint64_t v2973;
  WTF::StringImpl *v2974;
  WTF::AtomStringImpl *v2975;
  const WTF::StringImpl *v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  uint64_t v2980;
  uint64_t v2981;
  WTF::StringImpl *v2982;
  WTF::AtomStringImpl *v2983;
  const WTF::StringImpl *v2984;
  uint64_t v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  WTF::StringImpl *v2990;
  WTF::AtomStringImpl *v2991;
  const WTF::StringImpl *v2992;
  uint64_t v2993;
  uint64_t v2994;
  uint64_t v2995;
  uint64_t v2996;
  uint64_t v2997;
  WTF::StringImpl *v2998;
  WTF::AtomStringImpl *v2999;
  const WTF::StringImpl *v3000;
  uint64_t v3001;
  uint64_t v3002;
  uint64_t v3003;
  uint64_t v3004;
  uint64_t v3005;
  WTF::StringImpl *v3006;
  WTF::AtomStringImpl *v3007;
  const WTF::StringImpl *v3008;
  uint64_t v3009;
  uint64_t v3010;
  uint64_t v3011;
  uint64_t v3012;
  uint64_t v3013;
  WTF::StringImpl *v3014;
  WTF::AtomStringImpl *v3015;
  const WTF::StringImpl *v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  uint64_t v3020;
  uint64_t v3021;
  WTF::StringImpl *v3022;
  WTF::AtomStringImpl *v3023;
  const WTF::StringImpl *v3024;
  uint64_t v3025;
  uint64_t v3026;
  uint64_t v3027;
  uint64_t v3028;
  uint64_t v3029;
  WTF::StringImpl *v3030;
  WTF::AtomStringImpl *v3031;
  const WTF::StringImpl *v3032;
  uint64_t v3033;
  uint64_t v3034;
  uint64_t v3035;
  uint64_t v3036;
  uint64_t v3037;
  WTF::StringImpl *v3038;
  WTF::AtomStringImpl *v3039;
  const WTF::StringImpl *v3040;
  uint64_t v3041;
  uint64_t v3042;
  uint64_t v3043;
  uint64_t v3044;
  uint64_t v3045;
  WTF::StringImpl *v3046;
  WTF::AtomStringImpl *v3047;
  const WTF::StringImpl *v3048;
  uint64_t v3049;
  uint64_t v3050;
  uint64_t v3051;
  uint64_t v3052;
  uint64_t v3053;
  WTF::StringImpl *v3054;
  WTF::AtomStringImpl *v3055;
  const WTF::StringImpl *v3056;
  uint64_t v3057;
  uint64_t v3058;
  uint64_t v3059;
  uint64_t v3060;
  uint64_t v3061;
  WTF::StringImpl *v3062;
  WTF::AtomStringImpl *v3063;
  const WTF::StringImpl *v3064;
  uint64_t v3065;
  uint64_t v3066;
  uint64_t v3067;
  uint64_t v3068;
  uint64_t v3069;
  WTF::StringImpl *v3070;
  WTF::AtomStringImpl *v3071;
  const WTF::StringImpl *v3072;
  uint64_t v3073;
  uint64_t v3074;
  uint64_t v3075;
  uint64_t v3076;
  uint64_t v3077;
  WTF::StringImpl *v3078;
  WTF::AtomStringImpl *v3079;
  const WTF::StringImpl *v3080;
  uint64_t v3081;
  uint64_t v3082;
  uint64_t v3083;
  uint64_t v3084;
  uint64_t v3085;
  WTF::StringImpl *v3086;
  WTF::AtomStringImpl *v3087;
  const WTF::StringImpl *v3088;
  uint64_t v3089;
  uint64_t v3090;
  uint64_t v3091;
  uint64_t v3092;
  uint64_t v3093;
  WTF::StringImpl *v3094;
  WTF::AtomStringImpl *v3095;
  const WTF::StringImpl *v3096;
  uint64_t v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  WTF::StringImpl *v3102;
  WTF::AtomStringImpl *v3103;
  const WTF::StringImpl *v3104;
  uint64_t v3105;
  uint64_t v3106;
  uint64_t v3107;
  uint64_t v3108;
  uint64_t v3109;
  WTF::StringImpl *v3110;
  WTF::AtomStringImpl *v3111;
  const WTF::StringImpl *v3112;
  uint64_t v3113;
  uint64_t v3114;
  uint64_t v3115;
  uint64_t v3116;
  uint64_t v3117;
  WTF::StringImpl *v3118;
  WTF::AtomStringImpl *v3119;
  const WTF::StringImpl *v3120;
  uint64_t v3121;
  uint64_t v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  WTF::StringImpl *v3126;
  WTF::AtomStringImpl *v3127;
  const WTF::StringImpl *v3128;
  uint64_t v3129;
  uint64_t v3130;
  uint64_t v3131;
  uint64_t v3132;
  uint64_t v3133;
  WTF::StringImpl *v3134;
  WTF::AtomStringImpl *v3135;
  const WTF::StringImpl *v3136;
  uint64_t v3137;
  uint64_t v3138;
  uint64_t v3139;
  uint64_t v3140;
  uint64_t v3141;
  WTF::StringImpl *v3142;
  WTF::AtomStringImpl *v3143;
  const WTF::StringImpl *v3144;
  uint64_t v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  uint64_t v3149;
  WTF::StringImpl *v3150;
  WTF::AtomStringImpl *v3151;
  const WTF::StringImpl *v3152;
  uint64_t v3153;
  uint64_t v3154;
  uint64_t v3155;
  uint64_t v3156;
  uint64_t v3157;
  WTF::StringImpl *v3158;
  WTF::AtomStringImpl *v3159;
  const WTF::StringImpl *v3160;
  uint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  uint64_t v3164;
  uint64_t v3165;
  WTF::StringImpl *v3166;
  WTF::AtomStringImpl *v3167;
  const WTF::StringImpl *v3168;
  uint64_t v3169;
  uint64_t v3170;
  uint64_t v3171;
  uint64_t v3172;
  uint64_t v3173;
  WTF::StringImpl *v3174;
  WTF::AtomStringImpl *v3175;
  const WTF::StringImpl *v3176;
  uint64_t v3177;
  uint64_t v3178;
  uint64_t v3179;
  uint64_t v3180;
  uint64_t v3181;
  WTF::StringImpl *v3182;
  WTF::AtomStringImpl *v3183;
  const WTF::StringImpl *v3184;
  uint64_t v3185;
  uint64_t v3186;
  uint64_t v3187;
  uint64_t v3188;
  uint64_t v3189;
  WTF::StringImpl *v3190;
  WTF::AtomStringImpl *v3191;
  const WTF::StringImpl *v3192;
  uint64_t v3193;
  uint64_t v3194;
  uint64_t v3195;
  uint64_t v3196;
  uint64_t v3197;
  WTF::StringImpl *v3198;
  WTF::AtomStringImpl *v3199;
  const WTF::StringImpl *v3200;
  uint64_t v3201;
  uint64_t v3202;
  uint64_t v3203;
  uint64_t v3204;
  uint64_t v3205;
  WTF::StringImpl *v3206;
  WTF::AtomStringImpl *v3207;
  const WTF::StringImpl *v3208;
  uint64_t v3209;
  uint64_t v3210;
  uint64_t v3211;
  uint64_t v3212;
  uint64_t v3213;
  WTF::StringImpl *v3214;
  WTF::AtomStringImpl *v3215;
  const WTF::StringImpl *v3216;
  uint64_t v3217;
  uint64_t v3218;
  uint64_t v3219;
  uint64_t v3220;
  uint64_t v3221;
  WTF::StringImpl *v3222;
  WTF::AtomStringImpl *v3223;
  const WTF::StringImpl *v3224;
  uint64_t v3225;
  uint64_t v3226;
  uint64_t v3227;
  uint64_t v3228;
  uint64_t v3229;
  WTF::StringImpl *v3230;
  WTF::AtomStringImpl *v3231;
  const WTF::StringImpl *v3232;
  uint64_t v3233;
  uint64_t v3234;
  uint64_t v3235;
  uint64_t v3236;
  uint64_t v3237;
  WTF::StringImpl *v3238;
  WTF::AtomStringImpl *v3239;
  const WTF::StringImpl *v3240;
  uint64_t v3241;
  uint64_t v3242;
  uint64_t v3243;
  uint64_t v3244;
  uint64_t v3245;
  WTF::StringImpl *v3246;
  WTF::AtomStringImpl *v3247;
  const WTF::StringImpl *v3248;
  uint64_t v3249;
  uint64_t v3250;
  uint64_t v3251;
  uint64_t v3252;
  uint64_t v3253;
  WTF::StringImpl *v3254;
  WTF::AtomStringImpl *v3255;
  const WTF::StringImpl *v3256;
  uint64_t v3257;
  uint64_t v3258;
  uint64_t v3259;
  uint64_t v3260;
  uint64_t v3261;
  WTF::StringImpl *v3262;
  WTF::AtomStringImpl *v3263;
  const WTF::StringImpl *v3264;
  uint64_t v3265;
  uint64_t v3266;
  uint64_t v3267;
  uint64_t v3268;
  uint64_t v3269;
  WTF::StringImpl *v3270;
  WTF::AtomStringImpl *v3271;
  const WTF::StringImpl *v3272;
  uint64_t v3273;
  uint64_t v3274;
  uint64_t v3275;
  uint64_t v3276;
  uint64_t v3277;
  WTF::StringImpl *v3278;
  WTF::AtomStringImpl *v3279;
  const WTF::StringImpl *v3280;
  uint64_t v3281;
  uint64_t v3282;
  uint64_t v3283;
  uint64_t v3284;
  uint64_t v3285;
  WTF::StringImpl *v3286;
  WTF::AtomStringImpl *v3287;
  const WTF::StringImpl *v3288;
  uint64_t v3289;
  uint64_t v3290;
  uint64_t v3291;
  uint64_t v3292;
  uint64_t v3293;
  WTF::StringImpl *v3294;
  WTF::AtomStringImpl *v3295;
  const WTF::StringImpl *v3296;
  uint64_t v3297;
  uint64_t v3298;
  uint64_t v3299;
  uint64_t v3300;
  uint64_t v3301;
  WTF::StringImpl *v3302;
  WTF::AtomStringImpl *v3303;
  const WTF::StringImpl *v3304;
  uint64_t v3305;
  uint64_t v3306;
  uint64_t v3307;
  uint64_t v3308;
  uint64_t v3309;
  WTF::StringImpl *v3310;
  WTF::AtomStringImpl *v3311;
  const WTF::StringImpl *v3312;
  uint64_t v3313;
  uint64_t v3314;
  uint64_t v3315;
  uint64_t v3316;
  uint64_t v3317;
  WTF::StringImpl *v3318;
  WTF::AtomStringImpl *v3319;
  const WTF::StringImpl *v3320;
  uint64_t v3321;
  uint64_t v3322;
  uint64_t v3323;
  uint64_t v3324;
  uint64_t v3325;
  WTF::StringImpl *v3326;
  WTF::AtomStringImpl *v3327;
  const WTF::StringImpl *v3328;
  uint64_t v3329;
  uint64_t v3330;
  uint64_t v3331;
  uint64_t v3332;
  uint64_t v3333;
  WTF::StringImpl *v3334;
  WTF::AtomStringImpl *v3335;
  const WTF::StringImpl *v3336;
  uint64_t v3337;
  uint64_t v3338;
  uint64_t v3339;
  uint64_t v3340;
  uint64_t v3341;
  WTF::StringImpl *v3342;
  WTF::AtomStringImpl *v3343;
  const WTF::StringImpl *v3344;
  uint64_t v3345;
  uint64_t v3346;
  uint64_t v3347;
  uint64_t v3348;
  uint64_t v3349;
  WTF::StringImpl *v3350;
  WTF::AtomStringImpl *v3351;
  const WTF::StringImpl *v3352;
  uint64_t v3353;
  uint64_t v3354;
  uint64_t v3355;
  uint64_t v3356;
  uint64_t v3357;
  WTF::StringImpl *v3358;
  WTF::AtomStringImpl *v3359;
  const WTF::StringImpl *v3360;
  uint64_t v3361;
  uint64_t v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t v3365;
  WTF::StringImpl *v3366;
  WTF::AtomStringImpl *v3367;
  const WTF::StringImpl *v3368;
  uint64_t v3369;
  uint64_t v3370;
  uint64_t v3371;
  uint64_t v3372;
  uint64_t v3373;
  WTF::StringImpl *v3374;
  WTF::AtomStringImpl *v3375;
  const WTF::StringImpl *v3376;
  uint64_t v3377;
  uint64_t v3378;
  uint64_t v3379;
  uint64_t v3380;
  uint64_t v3381;
  WTF::StringImpl *v3382;
  WTF::AtomStringImpl *v3383;
  const WTF::StringImpl *v3384;
  uint64_t v3385;
  uint64_t v3386;
  uint64_t v3387;
  uint64_t v3388;
  uint64_t v3389;
  WTF::StringImpl *v3390;
  WTF::AtomStringImpl *v3391;
  const WTF::StringImpl *v3392;
  uint64_t v3393;
  uint64_t v3394;
  uint64_t v3395;
  uint64_t v3396;
  uint64_t v3397;
  WTF::StringImpl *v3398;
  WTF::AtomStringImpl *v3399;
  const WTF::StringImpl *v3400;
  uint64_t v3401;
  uint64_t v3402;
  uint64_t v3403;
  uint64_t v3404;
  uint64_t v3405;
  WTF::StringImpl *v3406;
  WTF::AtomStringImpl *v3407;
  const WTF::StringImpl *v3408;
  uint64_t v3409;
  uint64_t v3410;
  uint64_t v3411;
  uint64_t v3412;
  uint64_t v3413;
  WTF::StringImpl *v3414;
  WTF::AtomStringImpl *v3415;
  const WTF::StringImpl *v3416;
  uint64_t v3417;
  uint64_t v3418;
  uint64_t v3419;
  uint64_t v3420;
  uint64_t v3421;
  WTF::StringImpl *v3422;
  WTF::AtomStringImpl *v3423;
  const WTF::StringImpl *v3424;
  uint64_t v3425;
  uint64_t v3426;
  uint64_t v3427;
  uint64_t v3428;
  uint64_t v3429;
  WTF::StringImpl *v3430;
  WTF::AtomStringImpl *v3431;
  const WTF::StringImpl *v3432;
  uint64_t v3433;
  uint64_t v3434;
  uint64_t v3435;
  uint64_t v3436;
  uint64_t v3437;
  WTF::StringImpl *v3438;
  WTF::AtomStringImpl *v3439;
  const WTF::StringImpl *v3440;
  uint64_t v3441;
  uint64_t v3442;
  uint64_t v3443;
  uint64_t v3444;
  uint64_t v3445;
  WTF::StringImpl *v3446;
  WTF::AtomStringImpl *v3447;
  const WTF::StringImpl *v3448;
  uint64_t v3449;
  uint64_t v3450;
  uint64_t v3451;
  uint64_t v3452;
  uint64_t v3453;
  WTF::StringImpl *v3454;
  WTF::AtomStringImpl *v3455;
  const WTF::StringImpl *v3456;
  uint64_t v3457;
  uint64_t v3458;
  uint64_t v3459;
  uint64_t v3460;
  uint64_t v3461;
  WTF::StringImpl *v3462;
  WTF::AtomStringImpl *v3463;
  const WTF::StringImpl *v3464;
  uint64_t v3465;
  uint64_t v3466;
  uint64_t v3467;
  uint64_t v3468;
  uint64_t v3469;
  WTF::StringImpl *v3470;
  WTF::AtomStringImpl *v3471;
  const WTF::StringImpl *v3472;
  uint64_t v3473;
  uint64_t v3474;
  uint64_t v3475;
  uint64_t v3476;
  uint64_t v3477;
  WTF::StringImpl *v3478;
  WTF::AtomStringImpl *v3479;
  const WTF::StringImpl *v3480;
  uint64_t v3481;
  uint64_t v3482;
  uint64_t v3483;
  uint64_t v3484;
  uint64_t v3485;
  WTF::StringImpl *v3486;
  WTF::AtomStringImpl *v3487;
  const WTF::StringImpl *v3488;
  uint64_t v3489;
  uint64_t v3490;
  uint64_t v3491;
  uint64_t v3492;
  uint64_t v3493;
  WTF::StringImpl *v3494;
  WTF::AtomStringImpl *v3495;
  const WTF::StringImpl *v3496;
  uint64_t v3497;
  uint64_t v3498;
  uint64_t v3499;
  uint64_t v3500;
  uint64_t v3501;
  WTF::StringImpl *v3502;
  WTF::AtomStringImpl *v3503;
  const WTF::StringImpl *v3504;
  uint64_t v3505;
  uint64_t v3506;
  uint64_t v3507;
  uint64_t v3508;
  uint64_t v3509;
  WTF::StringImpl *v3510;
  WTF::AtomStringImpl *v3511;
  const WTF::StringImpl *v3512;
  uint64_t v3513;
  uint64_t v3514;
  uint64_t v3515;
  uint64_t v3516;
  uint64_t v3517;
  WTF::StringImpl *v3518;
  WTF::AtomStringImpl *v3519;
  const WTF::StringImpl *v3520;
  uint64_t v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  uint64_t v3525;
  WTF::StringImpl *v3526;
  WTF::AtomStringImpl *v3527;
  const WTF::StringImpl *v3528;
  uint64_t v3529;
  uint64_t v3530;
  uint64_t v3531;
  uint64_t v3532;
  uint64_t v3533;
  WTF::StringImpl *v3534;
  WTF::AtomStringImpl *v3535;
  const WTF::StringImpl *v3536;
  uint64_t v3537;
  uint64_t v3538;
  uint64_t v3539;
  uint64_t v3540;
  uint64_t v3541;
  WTF::StringImpl *v3542;
  WTF::AtomStringImpl *v3543;
  const WTF::StringImpl *v3544;
  uint64_t v3545;
  uint64_t v3546;
  uint64_t v3547;
  uint64_t v3548;
  uint64_t v3549;
  WTF::StringImpl *v3550;
  WTF::AtomStringImpl *v3551;
  const WTF::StringImpl *v3552;
  uint64_t v3553;
  uint64_t v3554;
  uint64_t v3555;
  uint64_t v3556;
  uint64_t v3557;
  WTF::StringImpl *v3558;
  WTF::AtomStringImpl *v3559;
  const WTF::StringImpl *v3560;
  uint64_t v3561;
  uint64_t v3562;
  uint64_t v3563;
  uint64_t v3564;
  uint64_t v3565;
  WTF::StringImpl *v3566;
  WTF::AtomStringImpl *v3567;
  const WTF::StringImpl *v3568;
  uint64_t v3569;
  uint64_t v3570;
  uint64_t v3571;
  uint64_t v3572;
  uint64_t v3573;
  WTF::StringImpl *v3574;
  WTF::AtomStringImpl *v3575;
  const WTF::StringImpl *v3576;
  uint64_t v3577;
  uint64_t v3578;
  uint64_t v3579;
  uint64_t v3580;
  uint64_t v3581;
  WTF::StringImpl *v3582;
  WTF::AtomStringImpl *v3583;
  const WTF::StringImpl *v3584;
  uint64_t v3585;
  uint64_t v3586;
  uint64_t v3587;
  uint64_t v3588;
  uint64_t v3589;
  WTF::StringImpl *v3590;
  WTF::AtomStringImpl *v3591;
  const WTF::StringImpl *v3592;
  uint64_t v3593;
  uint64_t v3594;
  uint64_t v3595;
  uint64_t v3596;
  uint64_t v3597;
  WTF::StringImpl *v3598;
  WTF::AtomStringImpl *v3599;
  const WTF::StringImpl *v3600;
  uint64_t v3601;
  uint64_t v3602;
  uint64_t v3603;
  uint64_t v3604;
  uint64_t v3605;
  WTF::StringImpl *v3606;
  WTF::AtomStringImpl *v3607;
  const WTF::StringImpl *v3608;
  uint64_t v3609;
  uint64_t v3610;
  uint64_t v3611;
  uint64_t v3612;
  uint64_t v3613;
  WTF::StringImpl *v3614;
  WTF::AtomStringImpl *v3615;
  const WTF::StringImpl *v3616;
  uint64_t v3617;
  uint64_t v3618;
  uint64_t v3619;
  uint64_t v3620;
  uint64_t v3621;
  WTF::StringImpl *v3622;
  WTF::AtomStringImpl *v3623;
  const WTF::StringImpl *v3624;
  uint64_t v3625;
  uint64_t v3626;
  uint64_t v3627;
  uint64_t v3628;
  uint64_t v3629;
  WTF::StringImpl *v3630;
  WTF::AtomStringImpl *v3631;
  const WTF::StringImpl *v3632;
  uint64_t v3633;
  uint64_t v3634;
  uint64_t v3635;
  uint64_t v3636;
  uint64_t v3637;
  WTF::StringImpl *v3638;
  WTF::AtomStringImpl *v3639;
  const WTF::StringImpl *v3640;
  uint64_t v3641;
  uint64_t v3642;
  uint64_t v3643;
  uint64_t v3644;
  uint64_t v3645;
  WTF::StringImpl *v3646;
  WTF::AtomStringImpl *v3647;
  const WTF::StringImpl *v3648;
  uint64_t v3649;
  uint64_t v3650;
  uint64_t v3651;
  uint64_t v3652;
  uint64_t v3653;
  WTF::StringImpl *v3654;
  WTF::AtomStringImpl *v3655;
  const WTF::StringImpl *v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  uint64_t v3660;
  uint64_t v3661;
  WTF::StringImpl *v3662;
  WTF::AtomStringImpl *v3663;
  const WTF::StringImpl *v3664;
  uint64_t v3665;
  uint64_t v3666;
  uint64_t v3667;
  uint64_t v3668;
  uint64_t v3669;
  WTF::StringImpl *v3670;
  WTF::AtomStringImpl *v3671;
  const WTF::StringImpl *v3672;
  uint64_t v3673;
  uint64_t v3674;
  uint64_t v3675;
  uint64_t v3676;
  uint64_t v3677;
  WTF::StringImpl *v3678;
  WTF::AtomStringImpl *v3679;
  const WTF::StringImpl *v3680;
  uint64_t v3681;
  uint64_t v3682;
  uint64_t v3683;
  uint64_t v3684;
  uint64_t v3685;
  WTF::StringImpl *v3686;
  WTF::AtomStringImpl *v3687;
  const WTF::StringImpl *v3688;
  uint64_t v3689;
  uint64_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  uint64_t v3693;
  WTF::StringImpl *v3694;
  WTF::AtomStringImpl *v3695;
  const WTF::StringImpl *v3696;
  uint64_t v3697;
  uint64_t v3698;
  uint64_t v3699;
  uint64_t v3700;
  uint64_t v3701;
  WTF::StringImpl *v3702;
  WTF::AtomStringImpl *v3703;
  const WTF::StringImpl *v3704;
  uint64_t v3705;
  uint64_t v3706;
  uint64_t v3707;
  uint64_t v3708;
  uint64_t v3709;
  WTF::StringImpl *v3710;
  WTF::AtomStringImpl *v3711;
  const WTF::StringImpl *v3712;
  uint64_t v3713;
  uint64_t v3714;
  uint64_t v3715;
  uint64_t v3716;
  uint64_t v3717;
  WTF::StringImpl *v3718;
  WTF::AtomStringImpl *v3719;
  const WTF::StringImpl *v3720;
  uint64_t v3721;
  uint64_t v3722;
  uint64_t v3723;
  uint64_t v3724;
  uint64_t v3725;
  WTF::StringImpl *v3726;
  WTF::AtomStringImpl *v3727;
  const WTF::StringImpl *v3728;
  uint64_t v3729;
  uint64_t v3730;
  uint64_t v3731;
  uint64_t v3732;
  uint64_t v3733;
  WTF::StringImpl *v3734;
  WTF::AtomStringImpl *v3735;
  const WTF::StringImpl *v3736;
  uint64_t v3737;
  uint64_t v3738;
  uint64_t v3739;
  uint64_t v3740;
  uint64_t v3741;
  WTF::StringImpl *v3742;
  WTF::AtomStringImpl *v3743;
  const WTF::StringImpl *v3744;
  uint64_t v3745;
  uint64_t v3746;
  uint64_t v3747;
  uint64_t v3748;
  uint64_t v3749;
  WTF::StringImpl *v3750;
  WTF::AtomStringImpl *v3751;
  const WTF::StringImpl *v3752;
  uint64_t v3753;
  uint64_t v3754;
  uint64_t v3755;
  uint64_t v3756;
  uint64_t v3757;
  WTF::StringImpl *v3758;
  WTF::AtomStringImpl *v3759;
  const WTF::StringImpl *v3760;
  uint64_t v3761;
  uint64_t v3762;
  uint64_t v3763;
  uint64_t v3764;
  uint64_t v3765;
  WTF::StringImpl *v3766;
  WTF::AtomStringImpl *v3767;
  const WTF::StringImpl *v3768;
  uint64_t v3769;
  uint64_t v3770;
  uint64_t v3771;
  uint64_t v3772;
  uint64_t v3773;
  WTF::StringImpl *v3774;
  WTF::AtomStringImpl *v3775;
  const WTF::StringImpl *v3776;
  uint64_t v3777;
  uint64_t v3778;
  uint64_t v3779;
  uint64_t v3780;
  uint64_t v3781;
  WTF::StringImpl *v3782;
  WTF::AtomStringImpl *v3783;
  const WTF::StringImpl *v3784;
  uint64_t v3785;
  uint64_t v3786;
  uint64_t v3787;
  uint64_t v3788;
  uint64_t v3789;
  WTF::StringImpl *v3790;
  WTF::AtomStringImpl *v3791;
  const WTF::StringImpl *v3792;
  uint64_t v3793;
  uint64_t v3794;
  uint64_t v3795;
  uint64_t v3796;
  uint64_t v3797;
  WTF::StringImpl *v3798;
  WTF::AtomStringImpl *v3799;
  const WTF::StringImpl *v3800;
  uint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  uint64_t v3804;
  uint64_t v3805;
  WTF::StringImpl *v3806;
  WTF::AtomStringImpl *v3807;
  const WTF::StringImpl *v3808;
  uint64_t v3809;
  uint64_t v3810;
  uint64_t v3811;
  uint64_t v3812;
  uint64_t v3813;
  WTF::StringImpl *v3814;
  WTF::AtomStringImpl *v3815;
  const WTF::StringImpl *v3816;
  uint64_t v3817;
  uint64_t v3818;
  uint64_t v3819;
  uint64_t v3820;
  uint64_t v3821;
  WTF::StringImpl *v3822;
  WTF::AtomStringImpl *v3823;
  const WTF::StringImpl *v3824;
  uint64_t v3825;
  uint64_t v3826;
  uint64_t v3827;
  uint64_t v3828;
  uint64_t v3829;
  WTF::StringImpl *v3830;
  WTF::AtomStringImpl *v3831;
  const WTF::StringImpl *v3832;
  uint64_t v3833;
  uint64_t v3834;
  uint64_t v3835;
  uint64_t v3836;
  uint64_t v3837;
  WTF::StringImpl *v3838;
  WTF::AtomStringImpl *v3839;
  const WTF::StringImpl *v3840;
  uint64_t v3841;
  uint64_t v3842;
  uint64_t v3843;
  uint64_t v3844;
  uint64_t v3845;
  WTF::StringImpl *v3846;
  WTF::AtomStringImpl *v3847;
  const WTF::StringImpl *v3848;
  uint64_t v3849;
  uint64_t v3850;
  uint64_t v3851;
  uint64_t v3852;
  uint64_t v3853;
  WTF::StringImpl *v3854;
  WTF::AtomStringImpl *v3855;
  const WTF::StringImpl *v3856;
  uint64_t v3857;
  uint64_t v3858;
  uint64_t v3859;
  uint64_t v3860;
  uint64_t v3861;
  WTF::StringImpl *v3862;
  WTF::AtomStringImpl *v3863;
  const WTF::StringImpl *v3864;
  uint64_t v3865;
  uint64_t v3866;
  uint64_t v3867;
  uint64_t v3868;
  uint64_t v3869;
  WTF::StringImpl *v3870;
  WTF::AtomStringImpl *v3871;
  const WTF::StringImpl *v3872;
  uint64_t v3873;
  uint64_t v3874;
  uint64_t v3875;
  uint64_t v3876;
  uint64_t v3877;
  WTF::StringImpl *v3878;
  WTF::AtomStringImpl *v3879;
  const WTF::StringImpl *v3880;
  uint64_t v3881;
  uint64_t v3882;
  uint64_t v3883;
  uint64_t v3884;
  uint64_t v3885;
  WTF::StringImpl *v3886;
  WTF::AtomStringImpl *v3887;
  const WTF::StringImpl *v3888;
  uint64_t v3889;
  uint64_t v3890;
  uint64_t v3891;
  uint64_t v3892;
  uint64_t v3893;
  WTF::StringImpl *v3894;
  WTF::AtomStringImpl *v3895;
  const WTF::StringImpl *v3896;
  uint64_t v3897;
  uint64_t v3898;
  uint64_t v3899;
  uint64_t v3900;
  uint64_t v3901;
  WTF::StringImpl *v3902;
  WTF::AtomStringImpl *v3903;
  const WTF::StringImpl *v3904;
  uint64_t v3905;
  uint64_t v3906;
  uint64_t v3907;
  uint64_t v3908;
  uint64_t v3909;
  WTF::StringImpl *v3910;
  WTF::AtomStringImpl *v3911;
  const WTF::StringImpl *v3912;
  uint64_t v3913;
  uint64_t v3914;
  uint64_t v3915;
  uint64_t v3916;
  uint64_t v3917;
  WTF::StringImpl *v3918;
  WTF::AtomStringImpl *v3919;
  const WTF::StringImpl *v3920;
  uint64_t v3921;
  uint64_t v3922;
  uint64_t v3923;
  uint64_t v3924;
  uint64_t v3925;
  WTF::StringImpl *v3926;
  WTF::AtomStringImpl *v3927;
  const WTF::StringImpl *v3928;
  uint64_t v3929;
  uint64_t v3930;
  uint64_t v3931;
  uint64_t v3932;
  uint64_t v3933;
  WTF::StringImpl *v3934;
  WTF::AtomStringImpl *v3935;
  const WTF::StringImpl *v3936;
  uint64_t v3937;
  uint64_t v3938;
  uint64_t v3939;
  uint64_t v3940;
  uint64_t v3941;
  WTF::StringImpl *v3942;
  WTF::AtomStringImpl *v3943;
  const WTF::StringImpl *v3944;
  uint64_t v3945;
  uint64_t v3946;
  uint64_t v3947;
  uint64_t v3948;
  uint64_t v3949;
  WTF::StringImpl *v3950;
  WTF::AtomStringImpl *v3951;
  const WTF::StringImpl *v3952;
  uint64_t v3953;
  uint64_t v3954;
  uint64_t v3955;
  uint64_t v3956;
  uint64_t v3957;
  WTF::StringImpl *v3958;
  WTF::AtomStringImpl *v3959;
  const WTF::StringImpl *v3960;
  uint64_t v3961;
  uint64_t v3962;
  uint64_t v3963;
  uint64_t v3964;
  uint64_t v3965;
  WTF::StringImpl *v3966;
  WTF::AtomStringImpl *v3967;
  const WTF::StringImpl *v3968;
  uint64_t v3969;
  uint64_t v3970;
  uint64_t v3971;
  uint64_t v3972;
  uint64_t v3973;
  WTF::StringImpl *v3974;
  WTF::AtomStringImpl *v3975;
  const WTF::StringImpl *v3976;
  uint64_t v3977;
  uint64_t v3978;
  uint64_t v3979;
  uint64_t v3980;
  uint64_t v3981;
  WTF::StringImpl *v3982;
  WTF::AtomStringImpl *v3983;
  const WTF::StringImpl *v3984;
  uint64_t v3985;
  uint64_t v3986;
  uint64_t v3987;
  uint64_t v3988;
  uint64_t v3989;
  WTF::StringImpl *v3990;
  WTF::AtomStringImpl *v3991;
  const WTF::StringImpl *v3992;
  uint64_t v3993;
  uint64_t v3994;
  uint64_t v3995;
  uint64_t v3996;
  uint64_t v3997;
  WTF::StringImpl *v3998;
  WTF::AtomStringImpl *v3999;
  const WTF::StringImpl *v4000;
  uint64_t v4001;
  uint64_t v4002;
  uint64_t v4003;
  uint64_t v4004;
  uint64_t v4005;
  WTF::StringImpl *v4006;
  WTF::AtomStringImpl *v4007;
  const WTF::StringImpl *v4008;
  uint64_t v4009;
  uint64_t v4010;
  uint64_t v4011;
  uint64_t v4012;
  uint64_t v4013;
  WTF::StringImpl *v4014;
  WTF::AtomStringImpl *v4015;
  const WTF::StringImpl *v4016;
  uint64_t v4017;
  uint64_t v4018;
  uint64_t v4019;
  uint64_t v4020;
  uint64_t v4021;
  WTF::StringImpl *v4022;
  WTF::AtomStringImpl *v4023;
  const WTF::StringImpl *v4024;
  uint64_t v4025;
  uint64_t v4026;
  uint64_t v4027;
  uint64_t v4028;
  uint64_t v4029;
  WTF::StringImpl *v4030;
  WTF::AtomStringImpl *v4031;
  const WTF::StringImpl *v4032;
  uint64_t v4033;
  uint64_t v4034;
  uint64_t v4035;
  uint64_t v4036;
  uint64_t v4037;
  WTF::StringImpl *v4038;
  WTF::AtomStringImpl *v4039;
  const WTF::StringImpl *v4040;
  uint64_t v4041;
  uint64_t v4042;
  uint64_t v4043;
  uint64_t v4044;
  uint64_t v4045;
  WTF::StringImpl *v4046;
  WTF::AtomStringImpl *v4047;
  const WTF::StringImpl *v4048;
  uint64_t v4049;
  uint64_t v4050;
  uint64_t v4051;
  uint64_t v4052;
  uint64_t v4053;
  WTF::StringImpl *v4054;
  WTF::AtomStringImpl *v4055;
  const WTF::StringImpl *v4056;
  uint64_t v4057;
  uint64_t v4058;
  uint64_t v4059;
  uint64_t v4060;
  uint64_t v4061;
  WTF::StringImpl *v4062;
  WTF::AtomStringImpl *v4063;
  const WTF::StringImpl *v4064;
  uint64_t v4065;
  uint64_t v4066;
  uint64_t v4067;
  uint64_t v4068;
  uint64_t v4069;
  WTF::StringImpl *v4070;
  WTF::AtomStringImpl *v4071;
  const WTF::StringImpl *v4072;
  uint64_t v4073;
  uint64_t v4074;
  uint64_t v4075;
  uint64_t v4076;
  uint64_t v4077;
  WTF::StringImpl *v4078;
  WTF::AtomStringImpl *v4079;
  const WTF::StringImpl *v4080;
  uint64_t v4081;
  uint64_t v4082;
  uint64_t v4083;
  uint64_t v4084;
  uint64_t v4085;
  WTF::StringImpl *v4086;
  WTF::AtomStringImpl *v4087;
  const WTF::StringImpl *v4088;
  uint64_t v4089;
  uint64_t v4090;
  uint64_t v4091;
  uint64_t v4092;
  uint64_t v4093;
  WTF::StringImpl *v4094;
  WTF::AtomStringImpl *v4095;
  const WTF::StringImpl *v4096;
  uint64_t v4097;
  uint64_t v4098;
  uint64_t v4099;
  uint64_t v4100;
  uint64_t v4101;
  WTF::StringImpl *v4102;
  WTF::AtomStringImpl *v4103;
  const WTF::StringImpl *v4104;
  uint64_t v4105;
  uint64_t v4106;
  uint64_t v4107;
  uint64_t v4108;
  uint64_t v4109;
  WTF::StringImpl *v4110;
  WTF::AtomStringImpl *v4111;
  const WTF::StringImpl *v4112;
  uint64_t v4113;
  uint64_t v4114;
  uint64_t v4115;
  uint64_t v4116;
  uint64_t v4117;
  WTF::StringImpl *v4118;
  WTF::AtomStringImpl *v4119;
  const WTF::StringImpl *v4120;
  uint64_t v4121;
  uint64_t v4122;
  uint64_t v4123;
  uint64_t v4124;
  uint64_t v4125;
  WTF::StringImpl *v4126;
  WTF::AtomStringImpl *v4127;
  const WTF::StringImpl *v4128;
  uint64_t v4129;
  uint64_t v4130;
  uint64_t v4131;
  uint64_t v4132;
  uint64_t v4133;
  WTF::StringImpl *v4134;
  WTF::AtomStringImpl *v4135;
  const WTF::StringImpl *v4136;
  uint64_t v4137;
  uint64_t v4138;
  uint64_t v4139;
  uint64_t v4140;
  uint64_t v4141;
  WTF::StringImpl *v4142;
  WTF::AtomStringImpl *v4143;
  const WTF::StringImpl *v4144;
  uint64_t v4145;
  uint64_t v4146;
  uint64_t v4147;
  uint64_t v4148;
  uint64_t v4149;
  WTF::StringImpl *v4150;
  WTF::AtomStringImpl *v4151;
  const WTF::StringImpl *v4152;
  uint64_t v4153;
  uint64_t v4154;
  uint64_t v4155;
  uint64_t v4156;
  uint64_t v4157;
  WTF::StringImpl *v4158;
  WTF::AtomStringImpl *v4159;
  const WTF::StringImpl *v4160;
  uint64_t v4161;
  uint64_t v4162;
  uint64_t v4163;
  uint64_t v4164;
  uint64_t v4165;
  WTF::StringImpl *v4166;
  WTF::AtomStringImpl *v4167;
  const WTF::StringImpl *v4168;
  uint64_t v4169;
  uint64_t v4170;
  uint64_t v4171;
  uint64_t v4172;
  uint64_t v4173;
  WTF::StringImpl *v4174;
  WTF::AtomStringImpl *v4175;
  const WTF::StringImpl *v4176;
  uint64_t v4177;
  uint64_t v4178;
  uint64_t v4179;
  uint64_t v4180;
  uint64_t v4181;
  WTF::StringImpl *v4182;
  WTF::AtomStringImpl *v4183;
  const WTF::StringImpl *v4184;
  uint64_t v4185;
  uint64_t v4186;
  uint64_t v4187;
  uint64_t v4188;
  uint64_t v4189;
  WTF::StringImpl *v4190;
  WTF::AtomStringImpl *v4191;
  const WTF::StringImpl *v4192;
  uint64_t v4193;
  uint64_t v4194;
  uint64_t v4195;
  uint64_t v4196;
  uint64_t v4197;
  WTF::StringImpl *v4198;
  WTF::AtomStringImpl *v4199;
  const WTF::StringImpl *v4200;
  uint64_t v4201;
  uint64_t v4202;
  uint64_t v4203;
  uint64_t v4204;
  uint64_t v4205;
  WTF::StringImpl *v4206;
  WTF::AtomStringImpl *v4207;
  const WTF::StringImpl *v4208;
  uint64_t v4209;
  uint64_t v4210;
  uint64_t v4211;
  uint64_t v4212;
  uint64_t v4213;
  WTF::StringImpl *v4214;
  WTF::AtomStringImpl *v4215;
  const WTF::StringImpl *v4216;
  uint64_t v4217;
  uint64_t v4218;
  uint64_t v4219;
  uint64_t v4220;
  uint64_t v4221;
  WTF::StringImpl *v4222;
  WTF::AtomStringImpl *v4223;
  const WTF::StringImpl *v4224;
  uint64_t v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint64_t v4228;
  uint64_t v4229;
  WTF::StringImpl *v4230;
  WTF::AtomStringImpl *v4231;
  const WTF::StringImpl *v4232;
  uint64_t v4233;
  uint64_t v4234;
  uint64_t v4235;
  uint64_t v4236;
  uint64_t v4237;
  WTF::StringImpl *v4238;
  WTF::AtomStringImpl *v4239;
  const WTF::StringImpl *v4240;
  uint64_t v4241;
  uint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  uint64_t v4245;
  WTF::StringImpl *v4246;
  WTF::AtomStringImpl *v4247;
  const WTF::StringImpl *v4248;
  uint64_t v4249;
  uint64_t v4250;
  uint64_t v4251;
  uint64_t v4252;
  uint64_t v4253;
  WTF::StringImpl *v4254;
  WTF::AtomStringImpl *v4255;
  const WTF::StringImpl *v4256;
  uint64_t v4257;
  uint64_t v4258;
  uint64_t v4259;
  uint64_t v4260;
  uint64_t v4261;
  WTF::StringImpl *v4262;
  WTF::AtomStringImpl *v4263;
  const WTF::StringImpl *v4264;
  uint64_t v4265;
  uint64_t v4266;
  uint64_t v4267;
  uint64_t v4268;
  uint64_t v4269;
  WTF::StringImpl *v4270;
  WTF::AtomStringImpl *v4271;
  const WTF::StringImpl *v4272;
  uint64_t v4273;
  uint64_t v4274;
  uint64_t v4275;
  uint64_t v4276;
  uint64_t v4277;
  WTF::StringImpl *v4278;
  WTF::AtomStringImpl *v4279;
  const WTF::StringImpl *v4280;
  uint64_t v4281;
  uint64_t v4282;
  uint64_t v4283;
  uint64_t v4284;
  uint64_t v4285;
  WTF::StringImpl *v4286;
  WTF::AtomStringImpl *v4287;
  const WTF::StringImpl *v4288;
  uint64_t v4289;
  uint64_t v4290;
  uint64_t v4291;
  uint64_t v4292;
  uint64_t v4293;
  WTF::StringImpl *v4294;
  WTF::AtomStringImpl *v4295;
  const WTF::StringImpl *v4296;
  uint64_t v4297;
  uint64_t v4298;
  uint64_t v4299;
  uint64_t v4300;
  uint64_t v4301;
  WTF::StringImpl *v4302;
  WTF::AtomStringImpl *v4303;
  const WTF::StringImpl *v4304;
  uint64_t v4305;
  uint64_t v4306;
  uint64_t v4307;
  uint64_t v4308;
  uint64_t v4309;
  WTF::StringImpl *v4310;
  WTF::AtomStringImpl *v4311;
  const WTF::StringImpl *v4312;
  uint64_t v4313;
  uint64_t v4314;
  uint64_t v4315;
  uint64_t v4316;
  uint64_t v4317;
  WTF::StringImpl *v4318;
  WTF::AtomStringImpl *v4319;
  const WTF::StringImpl *v4320;
  uint64_t v4321;
  uint64_t v4322;
  uint64_t v4323;
  uint64_t v4324;
  uint64_t v4325;
  WTF::StringImpl *v4326;
  WTF::AtomStringImpl *v4327;
  const WTF::StringImpl *v4328;
  uint64_t v4329;
  uint64_t v4330;
  uint64_t v4331;
  uint64_t v4332;
  uint64_t v4333;
  WTF::StringImpl *v4334;
  WTF::AtomStringImpl *v4335;
  const WTF::StringImpl *v4336;
  uint64_t v4337;
  uint64_t v4338;
  uint64_t v4339;
  uint64_t v4340;
  uint64_t v4341;
  WTF::StringImpl *v4342;
  WTF::AtomStringImpl *v4343;
  const WTF::StringImpl *v4344;
  uint64_t v4345;
  uint64_t v4346;
  uint64_t v4347;
  uint64_t v4348;
  uint64_t v4349;
  WTF::StringImpl *v4350;
  WTF::AtomStringImpl *v4351;
  const WTF::StringImpl *v4352;
  uint64_t v4353;
  uint64_t v4354;
  uint64_t v4355;
  uint64_t v4356;
  uint64_t v4357;
  WTF::StringImpl *v4358;
  WTF::AtomStringImpl *v4359;
  const WTF::StringImpl *v4360;
  uint64_t v4361;
  uint64_t v4362;
  uint64_t v4363;
  uint64_t v4364;
  uint64_t v4365;
  WTF::StringImpl *v4366;
  WTF::AtomStringImpl *v4367;
  const WTF::StringImpl *v4368;
  uint64_t v4369;
  uint64_t v4370;
  uint64_t v4371;
  uint64_t v4372;
  uint64_t v4373;
  WTF::StringImpl *v4374;
  WTF::AtomStringImpl *v4375;
  const WTF::StringImpl *v4376;
  uint64_t v4377;
  uint64_t v4378;
  uint64_t v4379;
  uint64_t v4380;
  uint64_t v4381;
  WTF::StringImpl *v4382;
  WTF::AtomStringImpl *v4383;
  const WTF::StringImpl *v4384;
  uint64_t v4385;
  uint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  uint64_t v4389;
  WTF::StringImpl *v4390;
  WTF::AtomStringImpl *v4391;
  const WTF::StringImpl *v4392;
  uint64_t v4393;
  uint64_t v4394;
  uint64_t v4395;
  uint64_t v4396;
  uint64_t v4397;
  WTF::StringImpl *v4398;
  WTF::AtomStringImpl *v4399;
  const WTF::StringImpl *v4400;
  uint64_t v4401;
  uint64_t v4402;
  uint64_t v4403;
  uint64_t v4404;
  uint64_t v4405;
  WTF::StringImpl *v4406;
  WTF::AtomStringImpl *v4407;
  const WTF::StringImpl *v4408;
  uint64_t v4409;
  uint64_t v4410;
  uint64_t v4411;
  uint64_t v4412;
  uint64_t v4413;
  WTF::StringImpl *v4414;
  WTF::AtomStringImpl *v4415;
  const WTF::StringImpl *v4416;
  uint64_t v4417;
  uint64_t v4418;
  uint64_t v4419;
  uint64_t v4420;
  uint64_t v4421;
  WTF::StringImpl *v4422;
  WTF::AtomStringImpl *v4423;
  const WTF::StringImpl *v4424;
  uint64_t v4425;
  uint64_t v4426;
  uint64_t v4427;
  uint64_t v4428;
  uint64_t v4429;
  WTF::StringImpl *v4430;
  WTF::AtomStringImpl *v4431;
  const WTF::StringImpl *v4432;
  uint64_t v4433;
  uint64_t v4434;
  uint64_t v4435;
  uint64_t v4436;
  uint64_t v4437;
  WTF::StringImpl *v4438;
  WTF::AtomStringImpl *v4439;
  const WTF::StringImpl *v4440;
  uint64_t v4441;
  uint64_t v4442;
  uint64_t v4443;
  uint64_t v4444;
  uint64_t v4445;
  WTF::StringImpl *v4446;
  WTF::AtomStringImpl *v4447;
  const WTF::StringImpl *v4448;
  uint64_t v4449;
  uint64_t v4450;
  uint64_t v4451;
  uint64_t v4452;
  uint64_t v4453;
  WTF::StringImpl *v4454;
  WTF::AtomStringImpl *v4455;
  const WTF::StringImpl *v4456;
  uint64_t v4457;
  uint64_t v4458;
  uint64_t v4459;
  uint64_t v4460;
  uint64_t v4461;
  WTF::StringImpl *v4462;
  WTF::AtomStringImpl *v4463;
  const WTF::StringImpl *v4464;
  uint64_t v4465;
  uint64_t v4466;
  uint64_t v4467;
  uint64_t v4468;
  uint64_t v4469;
  WTF::StringImpl *v4470;
  WTF::AtomStringImpl *v4471;
  const WTF::StringImpl *v4472;
  uint64_t v4473;
  uint64_t v4474;
  uint64_t v4475;
  uint64_t v4476;
  uint64_t v4477;
  WTF::StringImpl *v4478;
  WTF::AtomStringImpl *v4479;
  const WTF::StringImpl *v4480;
  uint64_t v4481;
  uint64_t v4482;
  uint64_t v4483;
  uint64_t v4484;
  uint64_t v4485;
  WTF::StringImpl *v4486;
  WTF::AtomStringImpl *v4487;
  const WTF::StringImpl *v4488;
  uint64_t v4489;
  uint64_t v4490;
  uint64_t v4491;
  uint64_t v4492;
  uint64_t v4493;
  WTF::StringImpl *v4494;
  WTF::AtomStringImpl *v4495;
  const WTF::StringImpl *v4496;
  uint64_t v4497;
  uint64_t v4498;
  uint64_t v4499;
  uint64_t v4500;
  uint64_t v4501;
  WTF::StringImpl *v4502;
  WTF::AtomStringImpl *v4503;
  const WTF::StringImpl *v4504;
  uint64_t v4505;
  uint64_t v4506;
  uint64_t v4507;
  uint64_t v4508;
  uint64_t v4509;
  WTF::StringImpl *v4510;
  WTF::AtomStringImpl *v4511;
  const WTF::StringImpl *v4512;
  uint64_t v4513;
  uint64_t v4514;
  uint64_t v4515;
  uint64_t v4516;
  uint64_t v4517;
  WTF::StringImpl *v4518;
  WTF::AtomStringImpl *v4519;
  const WTF::StringImpl *v4520;
  uint64_t v4521;
  uint64_t v4522;
  uint64_t v4523;
  uint64_t v4524;
  uint64_t v4525;
  WTF::StringImpl *v4526;
  WTF::AtomStringImpl *v4527;
  const WTF::StringImpl *v4528;
  uint64_t v4529;
  uint64_t v4530;
  uint64_t v4531;
  uint64_t v4532;
  uint64_t v4533;
  WTF::StringImpl *v4534;
  WTF::AtomStringImpl *v4535;
  const WTF::StringImpl *v4536;
  uint64_t v4537;
  uint64_t v4538;
  uint64_t v4539;
  uint64_t v4540;
  uint64_t v4541;
  WTF::StringImpl *v4542;
  WTF::AtomStringImpl *v4543;
  const WTF::StringImpl *v4544;
  uint64_t v4545;
  uint64_t v4546;
  uint64_t v4547;
  uint64_t v4548;
  uint64_t v4549;
  WTF::StringImpl *v4550;
  WTF::AtomStringImpl *v4551;
  const WTF::StringImpl *v4552;
  uint64_t v4553;
  uint64_t v4554;
  uint64_t v4555;
  uint64_t v4556;
  uint64_t v4557;
  WTF::StringImpl *v4558;
  WTF::AtomStringImpl *v4559;
  const WTF::StringImpl *v4560;
  uint64_t v4561;
  uint64_t v4562;
  uint64_t v4563;
  uint64_t v4564;
  uint64_t v4565;
  WTF::StringImpl *v4566;
  WTF::AtomStringImpl *v4567;
  const WTF::StringImpl *v4568;
  uint64_t v4569;
  uint64_t v4570;
  uint64_t v4571;
  uint64_t v4572;
  uint64_t v4573;
  WTF::StringImpl *v4574;
  WTF::AtomStringImpl *v4575;
  const WTF::StringImpl *v4576;
  uint64_t v4577;
  uint64_t v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  WTF::StringImpl *v4582;
  WTF::AtomStringImpl *v4583;
  const WTF::StringImpl *v4584;
  uint64_t v4585;
  uint64_t v4586;
  uint64_t v4587;
  uint64_t v4588;
  uint64_t v4589;
  WTF::StringImpl *v4590;
  WTF::AtomStringImpl *v4591;
  const WTF::StringImpl *v4592;
  uint64_t v4593;
  uint64_t v4594;
  uint64_t v4595;
  uint64_t v4596;
  uint64_t v4597;
  WTF::StringImpl *v4598;
  WTF::AtomStringImpl *v4599;
  const WTF::StringImpl *v4600;
  uint64_t v4601;
  uint64_t v4602;
  uint64_t v4603;
  uint64_t v4604;
  uint64_t v4605;
  WTF::StringImpl *v4606;
  WTF::AtomStringImpl *v4607;
  const WTF::StringImpl *v4608;
  uint64_t v4609;
  uint64_t v4610;
  uint64_t v4611;
  uint64_t v4612;
  uint64_t v4613;
  WTF::StringImpl *v4614;
  WTF::AtomStringImpl *v4615;
  const WTF::StringImpl *v4616;
  uint64_t v4617;
  uint64_t v4618;
  uint64_t v4619;
  uint64_t v4620;
  uint64_t v4621;
  WTF::StringImpl *v4622;
  WTF::AtomStringImpl *v4623;
  const WTF::StringImpl *v4624;
  uint64_t v4625;
  uint64_t v4626;
  uint64_t v4627;
  uint64_t v4628;
  uint64_t v4629;
  WTF::StringImpl *v4630;
  WTF::AtomStringImpl *v4631;
  const WTF::StringImpl *v4632;
  uint64_t v4633;
  uint64_t v4634;
  uint64_t v4635;
  uint64_t v4636;
  uint64_t v4637;
  WTF::StringImpl *v4638;
  WTF::AtomStringImpl *v4639;
  const WTF::StringImpl *v4640;
  uint64_t v4641;
  uint64_t v4642;
  uint64_t v4643;
  uint64_t v4644;
  uint64_t v4645;
  WTF::StringImpl *v4646;
  WTF::AtomStringImpl *v4647;
  const WTF::StringImpl *v4648;
  uint64_t v4649;
  uint64_t v4650;
  uint64_t v4651;
  uint64_t v4652;
  uint64_t v4653;
  WTF::StringImpl *v4654;
  WTF::AtomStringImpl *v4655;
  const WTF::StringImpl *v4656;
  uint64_t v4657;
  uint64_t v4658;
  uint64_t v4659;
  uint64_t v4660;
  uint64_t v4661;
  WTF::StringImpl *v4662;
  WTF::AtomStringImpl *v4663;
  const WTF::StringImpl *v4664;
  uint64_t v4665;
  uint64_t v4666;
  uint64_t v4667;
  uint64_t v4668;
  uint64_t v4669;
  WTF::StringImpl *v4670;
  WTF::AtomStringImpl *v4671;
  const WTF::StringImpl *v4672;
  uint64_t v4673;
  uint64_t v4674;
  uint64_t v4675;
  uint64_t v4676;
  uint64_t v4677;
  WTF::StringImpl *v4678;
  WTF::AtomStringImpl *v4679;
  const WTF::StringImpl *v4680;
  uint64_t v4681;
  uint64_t v4682;
  uint64_t v4683;
  uint64_t v4684;
  uint64_t v4685;
  WTF::StringImpl *v4686;
  WTF::AtomStringImpl *v4687;
  const WTF::StringImpl *v4688;
  uint64_t v4689;
  uint64_t v4690;
  uint64_t v4691;
  uint64_t v4692;
  uint64_t v4693;
  WTF::StringImpl *v4694;
  WTF::AtomStringImpl *v4695;
  const WTF::StringImpl *v4696;
  uint64_t v4697;
  uint64_t v4698;
  uint64_t v4699;
  uint64_t v4700;
  uint64_t v4701;
  WTF::StringImpl *v4702;
  WTF::AtomStringImpl *v4703;
  const WTF::StringImpl *v4704;
  uint64_t v4705;
  uint64_t v4706;
  uint64_t v4707;
  uint64_t v4708;
  uint64_t v4709;
  WTF::StringImpl *v4710;
  WTF::AtomStringImpl *v4711;
  const WTF::StringImpl *v4712;
  uint64_t v4713;
  uint64_t v4714;
  uint64_t v4715;
  uint64_t v4716;
  uint64_t v4717;
  WTF::StringImpl *v4718;
  WTF::AtomStringImpl *v4719;
  const WTF::StringImpl *v4720;
  uint64_t v4721;
  uint64_t v4722;
  uint64_t v4723;
  uint64_t v4724;
  uint64_t v4725;
  WTF::StringImpl *v4726;
  WTF::AtomStringImpl *v4727;
  const WTF::StringImpl *v4728;
  uint64_t v4729;
  uint64_t v4730;
  uint64_t v4731;
  uint64_t v4732;
  uint64_t v4733;
  WTF::StringImpl *v4734;
  WTF::AtomStringImpl *v4735;
  const WTF::StringImpl *v4736;
  uint64_t v4737;
  uint64_t v4738;
  uint64_t v4739;
  uint64_t v4740;
  uint64_t v4741;
  WTF::StringImpl *v4742;
  WTF::AtomStringImpl *v4743;
  const WTF::StringImpl *v4744;
  uint64_t v4745;
  uint64_t v4746;
  uint64_t v4747;
  uint64_t v4748;
  uint64_t v4749;
  WTF::StringImpl *v4750;
  WTF::AtomStringImpl *v4751;
  const WTF::StringImpl *v4752;
  uint64_t v4753;
  uint64_t v4754;
  uint64_t v4755;
  uint64_t v4756;
  uint64_t v4757;
  WTF::StringImpl *v4758;
  WTF::AtomStringImpl *v4759;
  const WTF::StringImpl *v4760;
  uint64_t v4761;
  uint64_t v4762;
  uint64_t v4763;
  uint64_t v4764;
  uint64_t v4765;
  WTF::StringImpl *v4766;
  WTF::AtomStringImpl *v4767;
  const WTF::StringImpl *v4768;
  uint64_t v4769;
  uint64_t v4770;
  uint64_t v4771;
  uint64_t v4772;
  uint64_t v4773;
  WTF::StringImpl *v4774;
  WTF::AtomStringImpl *v4775;
  const WTF::StringImpl *v4776;
  uint64_t v4777;
  uint64_t v4778;
  uint64_t v4779;
  uint64_t v4780;
  uint64_t v4781;
  WTF::StringImpl *v4782;
  WTF::AtomStringImpl *v4783;
  const WTF::StringImpl *v4784;
  uint64_t v4785;
  uint64_t v4786;
  uint64_t v4787;
  uint64_t v4788;
  uint64_t v4789;
  WTF::StringImpl *v4790;
  WTF::AtomStringImpl *v4791;
  const WTF::StringImpl *v4792;
  uint64_t v4793;
  uint64_t v4794;
  uint64_t v4795;
  uint64_t v4796;
  uint64_t v4797;
  WTF::StringImpl *v4798;
  WTF::AtomStringImpl *v4799;
  const WTF::StringImpl *v4800;
  uint64_t v4801;
  uint64_t v4802;
  uint64_t v4803;
  uint64_t v4804;
  uint64_t v4805;
  WTF::StringImpl *v4806;
  WTF::AtomStringImpl *v4807;
  const WTF::StringImpl *v4808;
  uint64_t v4809;
  uint64_t v4810;
  uint64_t v4811;
  uint64_t v4812;
  uint64_t v4813;
  WTF::StringImpl *v4814;
  WTF::AtomStringImpl *v4815;
  const WTF::StringImpl *v4816;
  uint64_t v4817;
  uint64_t v4818;
  uint64_t v4819;
  uint64_t v4820;
  uint64_t v4821;
  WTF::StringImpl *v4822;
  WTF::AtomStringImpl *v4823;
  const WTF::StringImpl *v4824;
  uint64_t v4825;
  uint64_t v4826;
  uint64_t v4827;
  uint64_t v4828;
  uint64_t v4829;
  WTF::StringImpl *v4830;
  WTF::AtomStringImpl *v4831;
  const WTF::StringImpl *v4832;
  uint64_t v4833;
  uint64_t v4834;
  uint64_t v4835;
  uint64_t v4836;
  uint64_t v4837;
  WTF::StringImpl *v4838;
  WTF::AtomStringImpl *v4839;
  const WTF::StringImpl *v4840;
  uint64_t v4841;
  uint64_t v4842;
  uint64_t v4843;
  uint64_t v4844;
  uint64_t v4845;
  WTF::StringImpl *v4846;
  WTF::AtomStringImpl *v4847;
  const WTF::StringImpl *v4848;
  uint64_t v4849;
  uint64_t v4850;
  uint64_t v4851;
  uint64_t v4852;
  uint64_t v4853;
  WTF::StringImpl *v4854;
  WTF::AtomStringImpl *v4855;
  const WTF::StringImpl *v4856;
  uint64_t v4857;
  uint64_t v4858;
  uint64_t v4859;
  uint64_t v4860;
  uint64_t v4861;
  WTF::StringImpl *v4862;
  WTF::AtomStringImpl *v4863;
  const WTF::StringImpl *v4864;
  uint64_t v4865;
  uint64_t v4866;
  uint64_t v4867;
  uint64_t v4868;
  uint64_t v4869;
  WTF::StringImpl *v4870;
  WTF::AtomStringImpl *v4871;
  const WTF::StringImpl *v4872;
  uint64_t v4873;
  uint64_t v4874;
  uint64_t v4875;
  uint64_t v4876;
  uint64_t v4877;
  WTF::StringImpl *v4878;
  WTF::AtomStringImpl *v4879;
  const WTF::StringImpl *v4880;
  uint64_t v4881;
  uint64_t v4882;
  uint64_t v4883;
  uint64_t v4884;
  uint64_t v4885;
  WTF::StringImpl *v4886;
  WTF::AtomStringImpl *v4887;
  const WTF::StringImpl *v4888;
  uint64_t v4889;
  uint64_t v4890;
  uint64_t v4891;
  uint64_t v4892;
  uint64_t v4893;
  WTF::StringImpl *v4894;
  WTF::AtomStringImpl *v4895;
  const WTF::StringImpl *v4896;
  uint64_t v4897;
  uint64_t v4898;
  uint64_t v4899;
  uint64_t v4900;
  uint64_t v4901;
  WTF::StringImpl *v4902;
  WTF::AtomStringImpl *v4903;
  const WTF::StringImpl *v4904;
  uint64_t v4905;
  uint64_t v4906;
  uint64_t v4907;
  uint64_t v4908;
  uint64_t v4909;
  WTF::StringImpl *v4910;
  WTF::AtomStringImpl *v4911;
  const WTF::StringImpl *v4912;
  uint64_t v4913;
  uint64_t v4914;
  uint64_t v4915;
  uint64_t v4916;
  uint64_t v4917;
  WTF::StringImpl *v4918;
  WTF::AtomStringImpl *v4919;
  const WTF::StringImpl *v4920;
  uint64_t v4921;
  uint64_t v4922;
  uint64_t v4923;
  uint64_t v4924;
  uint64_t v4925;
  WTF::StringImpl *v4926;
  WTF::AtomStringImpl *v4927;
  const WTF::StringImpl *v4928;
  uint64_t v4929;
  uint64_t v4930;
  uint64_t v4931;
  uint64_t v4932;
  uint64_t v4933;
  WTF::StringImpl *v4934;
  WTF::AtomStringImpl *v4935;
  const WTF::StringImpl *v4936;
  uint64_t v4937;
  uint64_t v4938;
  uint64_t v4939;
  uint64_t v4940;
  uint64_t v4941;
  WTF::StringImpl *v4942;
  WTF::AtomStringImpl *v4943;
  const WTF::StringImpl *v4944;
  uint64_t v4945;
  uint64_t v4946;
  uint64_t v4947;
  uint64_t v4948;
  uint64_t v4949;
  WTF::StringImpl *v4950;
  WTF::AtomStringImpl *v4951;
  const WTF::StringImpl *v4952;
  uint64_t v4953;
  uint64_t v4954;
  uint64_t v4955;
  uint64_t v4956;
  uint64_t v4957;
  WTF::StringImpl *v4958;
  WTF::AtomStringImpl *v4959;
  const WTF::StringImpl *v4960;
  uint64_t v4961;
  uint64_t v4962;
  uint64_t v4963;
  uint64_t v4964;
  uint64_t v4965;
  WTF::StringImpl *v4966;
  WTF::AtomStringImpl *v4967;
  const WTF::StringImpl *v4968;
  uint64_t v4969;
  uint64_t v4970;
  uint64_t v4971;
  uint64_t v4972;
  uint64_t v4973;
  WTF::StringImpl *v4974;
  WTF::AtomStringImpl *v4975;
  const WTF::StringImpl *v4976;
  uint64_t v4977;
  uint64_t v4978;
  uint64_t v4979;
  uint64_t v4980;
  uint64_t v4981;
  WTF::StringImpl *v4982;
  WTF::AtomStringImpl *v4983;
  const WTF::StringImpl *v4984;
  uint64_t v4985;
  uint64_t v4986;
  uint64_t v4987;
  uint64_t v4988;
  uint64_t v4989;
  WTF::StringImpl *v4990;
  WTF::AtomStringImpl *v4991;
  const WTF::StringImpl *v4992;
  uint64_t v4993;
  uint64_t v4994;
  uint64_t v4995;
  uint64_t v4996;
  uint64_t v4997;
  WTF::StringImpl *v4998;
  WTF::AtomStringImpl *v4999;
  const WTF::StringImpl *v5000;
  uint64_t v5001;
  uint64_t v5002;
  uint64_t v5003;
  uint64_t v5004;
  uint64_t v5005;
  WTF::StringImpl *v5006;
  WTF::AtomStringImpl *v5007;
  const WTF::StringImpl *v5008;
  uint64_t v5009;
  uint64_t v5010;
  uint64_t v5011;
  uint64_t v5012;
  uint64_t v5013;
  WTF::StringImpl *v5014;
  WTF::AtomStringImpl *v5015;
  const WTF::StringImpl *v5016;
  uint64_t v5017;
  uint64_t v5018;
  uint64_t v5019;
  uint64_t v5020;
  uint64_t v5021;
  WTF::StringImpl *v5022;
  WTF::AtomStringImpl *v5023;
  const WTF::StringImpl *v5024;
  uint64_t v5025;
  uint64_t v5026;
  uint64_t v5027;
  uint64_t v5028;
  uint64_t v5029;
  WTF::StringImpl *v5030;
  WTF::AtomStringImpl *v5031;
  const WTF::StringImpl *v5032;
  uint64_t v5033;
  uint64_t v5034;
  uint64_t v5035;
  uint64_t v5036;
  uint64_t v5037;
  WTF::StringImpl *v5038;
  WTF::AtomStringImpl *v5039;
  const WTF::StringImpl *v5040;
  uint64_t v5041;
  uint64_t v5042;
  uint64_t v5043;
  uint64_t v5044;
  uint64_t v5045;
  WTF::StringImpl *v5046;
  WTF::AtomStringImpl *v5047;
  const WTF::StringImpl *v5048;
  uint64_t v5049;
  uint64_t v5050;
  uint64_t v5051;
  uint64_t v5052;
  uint64_t v5053;
  WTF::StringImpl *v5054;
  WTF::AtomStringImpl *v5055;
  const WTF::StringImpl *v5056;
  uint64_t v5057;
  uint64_t v5058;
  uint64_t v5059;
  uint64_t v5060;
  uint64_t v5061;
  WTF::StringImpl *v5062;
  WTF::AtomStringImpl *v5063;
  const WTF::StringImpl *v5064;
  uint64_t v5065;
  uint64_t v5066;
  uint64_t v5067;
  uint64_t v5068;
  uint64_t v5069;
  WTF::StringImpl *v5070;
  WTF::AtomStringImpl *v5071;
  const WTF::StringImpl *v5072;
  uint64_t v5073;
  uint64_t v5074;
  uint64_t v5075;
  uint64_t v5076;
  uint64_t v5077;
  WTF::StringImpl *v5078;
  WTF::AtomStringImpl *v5079;
  const WTF::StringImpl *v5080;
  uint64_t v5081;
  uint64_t v5082;
  uint64_t v5083;
  uint64_t v5084;
  uint64_t v5085;
  WTF::StringImpl *v5086;
  WTF::AtomStringImpl *v5087;
  const WTF::StringImpl *v5088;
  uint64_t v5089;
  uint64_t v5090;
  uint64_t v5091;
  uint64_t v5092;
  uint64_t v5093;
  WTF::StringImpl *v5094;
  WTF::AtomStringImpl *v5095;
  const WTF::StringImpl *v5096;
  uint64_t v5097;
  uint64_t v5098;
  uint64_t v5099;
  uint64_t v5100;
  uint64_t v5101;
  WTF::StringImpl *v5102;
  WTF::AtomStringImpl *v5103;
  const WTF::StringImpl *v5104;
  uint64_t v5105;
  uint64_t v5106;
  uint64_t v5107;
  uint64_t v5108;
  uint64_t v5109;
  WTF::StringImpl *v5110;
  WTF::AtomStringImpl *v5111;
  const WTF::StringImpl *v5112;
  uint64_t v5113;
  uint64_t v5114;
  uint64_t v5115;
  uint64_t v5116;
  uint64_t v5117;
  WTF::StringImpl *v5118;
  WTF::AtomStringImpl *v5119;
  const WTF::StringImpl *v5120;
  uint64_t v5121;
  uint64_t v5122;
  uint64_t v5123;
  uint64_t v5124;
  uint64_t v5125;
  WTF::StringImpl *v5126;
  WTF::AtomStringImpl *v5127;
  const WTF::StringImpl *v5128;
  uint64_t v5129;
  uint64_t v5130;
  uint64_t v5131;
  uint64_t v5132;
  uint64_t v5133;
  WTF::StringImpl *v5134;
  WTF::AtomStringImpl *v5135;
  const WTF::StringImpl *v5136;
  uint64_t v5137;
  uint64_t v5138;
  uint64_t v5139;
  uint64_t v5140;
  uint64_t v5141;
  WTF::StringImpl *v5142;
  WTF::AtomStringImpl *v5143;
  const WTF::StringImpl *v5144;
  uint64_t v5145;
  uint64_t v5146;
  uint64_t v5147;
  uint64_t v5148;
  uint64_t v5149;
  WTF::StringImpl *v5150;
  WTF::AtomStringImpl *v5151;
  const WTF::StringImpl *v5152;
  uint64_t v5153;
  uint64_t v5154;
  uint64_t v5155;
  uint64_t v5156;
  uint64_t v5157;
  WTF::StringImpl *v5158;
  WTF::AtomStringImpl *v5159;
  const WTF::StringImpl *v5160;
  uint64_t v5161;
  uint64_t v5162;
  uint64_t v5163;
  uint64_t v5164;
  uint64_t v5165;
  WTF::StringImpl *v5166;
  WTF::AtomStringImpl *v5167;
  const WTF::StringImpl *v5168;
  uint64_t v5169;
  uint64_t v5170;
  uint64_t v5171;
  uint64_t v5172;
  uint64_t v5173;
  WTF::StringImpl *v5174;
  WTF::AtomStringImpl *v5175;
  const WTF::StringImpl *v5176;
  uint64_t v5177;
  uint64_t v5178;
  uint64_t v5179;
  uint64_t v5180;
  uint64_t v5181;
  WTF::StringImpl *v5182;
  WTF::AtomStringImpl *v5183;
  const WTF::StringImpl *v5184;
  uint64_t v5185;
  uint64_t v5186;
  uint64_t v5187;
  uint64_t v5188;
  uint64_t v5189;
  WTF::StringImpl *v5190;
  WTF::AtomStringImpl *v5191;
  const WTF::StringImpl *v5192;
  uint64_t v5193;
  uint64_t v5194;
  uint64_t v5195;
  uint64_t v5196;
  uint64_t v5197;
  WTF::StringImpl *v5198;
  WTF::AtomStringImpl *v5199;
  const WTF::StringImpl *v5200;
  uint64_t v5201;
  uint64_t v5202;
  uint64_t v5203;
  uint64_t v5204;
  uint64_t v5205;
  WTF::StringImpl *v5206;
  WTF::AtomStringImpl *v5207;
  const WTF::StringImpl *v5208;
  uint64_t v5209;
  uint64_t v5210;
  uint64_t v5211;
  uint64_t v5212;
  uint64_t v5213;
  WTF::StringImpl *v5214;
  WTF::AtomStringImpl *v5215;
  const WTF::StringImpl *v5216;
  uint64_t v5217;
  uint64_t v5218;
  uint64_t v5219;
  uint64_t v5220;
  uint64_t v5221;
  WTF::StringImpl *v5222;
  WTF::AtomStringImpl *v5223;
  const WTF::StringImpl *v5224;
  uint64_t v5225;
  uint64_t v5226;
  uint64_t v5227;
  uint64_t v5228;
  uint64_t v5229;
  WTF::StringImpl *v5230;
  WTF::AtomStringImpl *v5231;
  const WTF::StringImpl *v5232;
  uint64_t v5233;
  uint64_t v5234;
  uint64_t v5235;
  uint64_t v5236;
  uint64_t v5237;
  WTF::StringImpl *v5238;
  WTF::AtomStringImpl *v5239;
  const WTF::StringImpl *v5240;
  uint64_t v5241;
  uint64_t v5242;
  uint64_t v5243;
  uint64_t v5244;
  uint64_t v5245;
  WTF::StringImpl *v5246;
  WTF::AtomStringImpl *v5247;
  const WTF::StringImpl *v5248;
  uint64_t v5249;
  uint64_t v5250;
  uint64_t v5251;
  uint64_t v5252;
  uint64_t v5253;
  WTF::StringImpl *v5254;
  WTF::AtomStringImpl *v5255;
  const WTF::StringImpl *v5256;
  uint64_t v5257;
  uint64_t v5258;
  uint64_t v5259;
  uint64_t v5260;
  uint64_t v5261;
  WTF::StringImpl *v5262;
  WTF::AtomStringImpl *v5263;
  const WTF::StringImpl *v5264;
  uint64_t v5265;
  uint64_t v5266;
  uint64_t v5267;
  uint64_t v5268;
  uint64_t v5269;
  WTF::StringImpl *v5270;
  WTF::AtomStringImpl *v5271;
  const WTF::StringImpl *v5272;
  uint64_t v5273;
  uint64_t v5274;
  uint64_t v5275;
  uint64_t v5276;
  uint64_t v5277;
  WTF::StringImpl *v5278;
  WTF::AtomStringImpl *v5279;
  const WTF::StringImpl *v5280;
  uint64_t v5281;
  uint64_t v5282;
  uint64_t v5283;
  uint64_t v5284;
  uint64_t v5285;
  WTF::StringImpl *v5286;
  WTF::AtomStringImpl *v5287;
  const WTF::StringImpl *v5288;
  uint64_t v5289;
  uint64_t v5290;
  uint64_t v5291;
  uint64_t v5292;
  uint64_t v5293;
  WTF::StringImpl *v5294;
  WTF::AtomStringImpl *v5295;
  const WTF::StringImpl *v5296;
  uint64_t v5297;
  uint64_t v5298;
  uint64_t v5299;
  uint64_t v5300;
  uint64_t v5301;
  WTF::StringImpl *v5302;
  WTF::AtomStringImpl *v5303;
  const WTF::StringImpl *v5304;
  uint64_t v5305;
  uint64_t v5306;
  uint64_t v5307;
  uint64_t v5308;
  uint64_t v5309;
  WTF::StringImpl *v5310;
  WTF::AtomStringImpl *v5311;
  const WTF::StringImpl *v5312;
  uint64_t v5313;
  uint64_t v5314;
  uint64_t v5315;
  uint64_t v5316;
  uint64_t v5317;
  WTF::StringImpl *v5318;
  WTF::AtomStringImpl *v5319;
  const WTF::StringImpl *v5320;
  uint64_t v5321;
  uint64_t v5322;
  uint64_t v5323;
  uint64_t v5324;
  uint64_t v5325;
  WTF::StringImpl *v5326;
  WTF::AtomStringImpl *v5327;
  const WTF::StringImpl *v5328;
  uint64_t v5329;
  uint64_t v5330;
  uint64_t v5331;
  uint64_t v5332;
  uint64_t v5333;
  WTF::StringImpl *v5334;
  WTF::AtomStringImpl *v5335;
  const WTF::StringImpl *v5336;
  uint64_t v5337;
  uint64_t v5338;
  uint64_t v5339;
  uint64_t v5340;
  uint64_t v5341;
  WTF::StringImpl *v5342;
  WTF::AtomStringImpl *v5343;
  const WTF::StringImpl *v5344;
  uint64_t v5345;
  uint64_t v5346;
  uint64_t v5347;
  uint64_t v5348;
  uint64_t v5349;
  WTF::StringImpl *v5350;
  WTF::AtomStringImpl *v5351;
  const WTF::StringImpl *v5352;
  uint64_t v5353;
  uint64_t v5354;
  uint64_t v5355;
  uint64_t v5356;
  uint64_t v5357;
  WTF::StringImpl *v5358;
  WTF::AtomStringImpl *v5359;
  const WTF::StringImpl *v5360;
  uint64_t v5361;
  uint64_t v5362;
  uint64_t v5363;
  uint64_t v5364;
  uint64_t v5365;
  WTF::StringImpl *v5366;
  WTF::AtomStringImpl *v5367;
  const WTF::StringImpl *v5368;
  uint64_t v5369;
  uint64_t v5370;
  uint64_t v5371;
  uint64_t v5372;
  uint64_t v5373;
  WTF::StringImpl *v5374;
  WTF::AtomStringImpl *v5375;
  const WTF::StringImpl *v5376;
  uint64_t v5377;
  uint64_t v5378;
  uint64_t v5379;
  uint64_t v5380;
  uint64_t v5381;
  WTF::StringImpl *v5382;
  WTF::AtomStringImpl *v5383;
  const WTF::StringImpl *v5384;
  uint64_t v5385;
  uint64_t v5386;
  uint64_t v5387;
  uint64_t v5388;
  uint64_t v5389;
  WTF::StringImpl *v5390;
  WTF::AtomStringImpl *v5391;
  const WTF::StringImpl *v5392;
  uint64_t v5393;
  uint64_t v5394;
  uint64_t v5395;
  uint64_t v5396;
  uint64_t v5397;
  WTF::StringImpl *v5398;
  WTF::AtomStringImpl *v5399;
  const WTF::StringImpl *v5400;
  uint64_t v5401;
  uint64_t v5402;
  uint64_t v5403;
  uint64_t v5404;
  uint64_t v5405;
  WTF::StringImpl *v5406;
  WTF::AtomStringImpl *v5407;
  const WTF::StringImpl *v5408;
  uint64_t v5409;
  uint64_t v5410;
  uint64_t v5411;
  uint64_t v5412;
  uint64_t v5413;
  WTF::StringImpl *v5414;
  WTF::AtomStringImpl *v5415;
  const WTF::StringImpl *v5416;
  uint64_t v5417;
  uint64_t v5418;
  uint64_t v5419;
  uint64_t v5420;
  uint64_t v5421;
  WTF::StringImpl *v5422;
  WTF::AtomStringImpl *v5423;
  const WTF::StringImpl *v5424;
  uint64_t v5425;
  uint64_t v5426;
  uint64_t v5427;
  uint64_t v5428;
  uint64_t v5429;
  WTF::StringImpl *v5430;
  WTF::AtomStringImpl *v5431;
  const WTF::StringImpl *v5432;
  uint64_t v5433;
  uint64_t v5434;
  uint64_t v5435;
  uint64_t v5436;
  uint64_t v5437;
  WTF::StringImpl *v5438;
  WTF::AtomStringImpl *v5439;
  const WTF::StringImpl *v5440;
  uint64_t v5441;
  uint64_t v5442;
  uint64_t v5443;
  uint64_t v5444;
  uint64_t v5445;
  WTF::StringImpl *v5446;
  WTF::AtomStringImpl *v5447;
  const WTF::StringImpl *v5448;
  uint64_t v5449;
  uint64_t v5450;
  uint64_t v5451;
  uint64_t v5452;
  uint64_t v5453;
  WTF::StringImpl *v5454;
  WTF::AtomStringImpl *v5455;
  const WTF::StringImpl *v5456;
  uint64_t v5457;
  uint64_t v5458;
  uint64_t v5459;
  uint64_t v5460;
  uint64_t v5461;
  WTF::StringImpl *v5462;
  WTF::AtomStringImpl *v5463;
  const WTF::StringImpl *v5464;
  uint64_t v5465;
  uint64_t v5466;
  uint64_t v5467;
  uint64_t v5468;
  uint64_t v5469;
  WTF::StringImpl *v5470;
  WTF::AtomStringImpl *v5471;
  const WTF::StringImpl *v5472;
  uint64_t v5473;
  uint64_t v5474;
  uint64_t v5475;
  uint64_t v5476;
  uint64_t v5477;
  WTF::StringImpl *v5478;
  WTF::AtomStringImpl *v5479;
  const WTF::StringImpl *v5480;
  uint64_t v5481;
  uint64_t v5482;
  uint64_t v5483;
  uint64_t v5484;
  uint64_t v5485;
  WTF::StringImpl *v5486;
  WTF::AtomStringImpl *v5487;
  const WTF::StringImpl *v5488;
  uint64_t v5489;
  uint64_t v5490;
  uint64_t v5491;
  uint64_t v5492;
  uint64_t v5493;
  WTF::StringImpl *v5494;
  WTF::AtomStringImpl *v5495;
  const WTF::StringImpl *v5496;
  uint64_t v5497;
  uint64_t v5498;
  uint64_t v5499;
  uint64_t v5500;
  uint64_t v5501;
  WTF::StringImpl *v5502;
  WTF::AtomStringImpl *v5503;
  const WTF::StringImpl *v5504;
  uint64_t v5505;
  uint64_t v5506;
  uint64_t v5507;
  uint64_t v5508;
  uint64_t v5509;
  WTF::StringImpl *v5510;
  WTF::AtomStringImpl *v5511;
  const WTF::StringImpl *v5512;
  uint64_t v5513;
  uint64_t v5514;
  uint64_t v5515;
  uint64_t v5516;
  uint64_t v5517;
  WTF::StringImpl *v5518;
  WTF::AtomStringImpl *v5519;
  const WTF::StringImpl *v5520;
  uint64_t v5521;
  uint64_t v5522;
  uint64_t v5523;
  uint64_t v5524;
  uint64_t v5525;
  WTF::StringImpl *v5526;
  WTF::AtomStringImpl *v5527;
  const WTF::StringImpl *v5528;
  uint64_t v5529;
  uint64_t v5530;
  uint64_t v5531;
  uint64_t v5532;
  uint64_t v5533;
  WTF::StringImpl *v5534;
  WTF::AtomStringImpl *v5535;
  const WTF::StringImpl *v5536;
  uint64_t v5537;
  uint64_t v5538;
  uint64_t v5539;
  uint64_t v5540;
  uint64_t v5541;
  WTF::StringImpl *v5542;
  WTF::AtomStringImpl *v5543;
  const WTF::StringImpl *v5544;
  uint64_t v5545;
  uint64_t v5546;
  uint64_t v5547;
  uint64_t v5548;
  uint64_t v5549;
  WTF::StringImpl *v5550;
  WTF::AtomStringImpl *v5551;
  const WTF::StringImpl *v5552;
  uint64_t v5553;
  uint64_t v5554;
  uint64_t v5555;
  uint64_t v5556;
  uint64_t v5557;
  WTF::StringImpl *v5558;
  WTF::AtomStringImpl *v5559;
  const WTF::StringImpl *v5560;
  uint64_t v5561;
  uint64_t v5562;
  uint64_t v5563;
  uint64_t v5564;
  uint64_t v5565;
  WTF::StringImpl *v5566;
  WTF::AtomStringImpl *v5567;
  const WTF::StringImpl *v5568;
  uint64_t v5569;
  uint64_t v5570;
  uint64_t v5571;
  uint64_t v5572;
  uint64_t v5573;
  WTF::StringImpl *v5574;
  WTF::AtomStringImpl *v5575;
  const WTF::StringImpl *v5576;
  uint64_t v5577;
  uint64_t v5578;
  uint64_t v5579;
  uint64_t v5580;
  uint64_t v5581;
  WTF::StringImpl *v5582;
  WTF::AtomStringImpl *v5583;
  const WTF::StringImpl *v5584;
  uint64_t v5585;
  uint64_t v5586;
  uint64_t v5587;
  uint64_t v5588;
  uint64_t v5589;
  WTF::StringImpl *v5590;
  WTF::AtomStringImpl *v5591;
  const WTF::StringImpl *v5592;
  uint64_t v5593;
  uint64_t v5594;
  uint64_t v5595;
  uint64_t v5596;
  uint64_t v5597;
  WTF::StringImpl *v5598;
  WTF::AtomStringImpl *v5599;
  const WTF::StringImpl *v5600;
  uint64_t v5601;
  uint64_t v5602;
  uint64_t v5603;
  uint64_t v5604;
  uint64_t v5605;
  WTF::StringImpl *v5606;
  WTF::AtomStringImpl *v5607;
  const WTF::StringImpl *v5608;
  uint64_t v5609;
  uint64_t v5610;
  uint64_t v5611;
  uint64_t v5612;
  uint64_t v5613;
  WTF::StringImpl *v5614;
  WTF::AtomStringImpl *v5615;
  const WTF::StringImpl *v5616;
  uint64_t v5617;
  uint64_t v5618;
  uint64_t v5619;
  uint64_t v5620;
  uint64_t v5621;
  WTF::StringImpl *v5622;
  WTF::AtomStringImpl *v5623;
  const WTF::StringImpl *v5624;
  uint64_t v5625;
  uint64_t v5626;
  uint64_t v5627;
  uint64_t v5628;
  uint64_t v5629;
  WTF::StringImpl *v5630;
  WTF::AtomStringImpl *v5631;
  const WTF::StringImpl *v5632;
  uint64_t v5633;
  uint64_t v5634;
  uint64_t v5635;
  uint64_t v5636;
  uint64_t v5637;
  WTF::StringImpl *v5638;
  WTF::AtomStringImpl *v5639;
  const WTF::StringImpl *v5640;
  uint64_t v5641;
  uint64_t v5642;
  uint64_t v5643;
  uint64_t v5644;
  uint64_t v5645;
  WTF::StringImpl *v5646;
  WTF::AtomStringImpl *v5647;
  const WTF::StringImpl *v5648;
  uint64_t v5649;
  uint64_t v5650;
  uint64_t v5651;
  uint64_t v5652;
  uint64_t v5653;
  WTF::StringImpl *v5654;
  WTF::AtomStringImpl *v5655;
  const WTF::StringImpl *v5656;
  uint64_t v5657;
  uint64_t v5658;
  uint64_t v5659;
  uint64_t v5660;
  uint64_t v5661;
  WTF::StringImpl *v5662;
  WTF::AtomStringImpl *v5663;
  const WTF::StringImpl *v5664;
  uint64_t v5665;
  uint64_t v5666;
  uint64_t v5667;
  uint64_t v5668;
  uint64_t v5669;
  WTF::StringImpl *v5670;
  WTF::AtomStringImpl *v5671;
  const WTF::StringImpl *v5672;
  uint64_t v5673;
  uint64_t v5674;
  uint64_t v5675;
  uint64_t v5676;
  uint64_t v5677;
  WTF::StringImpl *v5678;
  WTF::AtomStringImpl *v5679;
  const WTF::StringImpl *v5680;
  uint64_t v5681;
  uint64_t v5682;
  uint64_t v5683;
  uint64_t v5684;
  uint64_t v5685;
  WTF::StringImpl *v5686;
  WTF::AtomStringImpl *v5687;
  const WTF::StringImpl *v5688;
  uint64_t v5689;
  uint64_t v5690;
  uint64_t v5691;
  uint64_t v5692;
  uint64_t v5693;
  WTF::StringImpl *v5694;
  WTF::AtomStringImpl *v5695;
  const WTF::StringImpl *v5696;
  uint64_t v5697;
  uint64_t v5698;
  uint64_t v5699;
  uint64_t v5700;
  uint64_t v5701;
  WTF::StringImpl *v5702;
  WTF::AtomStringImpl *v5703;
  const WTF::StringImpl *v5704;
  uint64_t v5705;
  uint64_t v5706;
  uint64_t v5707;
  uint64_t v5708;
  uint64_t v5709;
  WTF::StringImpl *v5710;
  WTF::AtomStringImpl *v5711;
  const WTF::StringImpl *v5712;
  uint64_t v5713;
  uint64_t v5714;
  uint64_t v5715;
  uint64_t v5716;
  uint64_t v5717;
  WTF::StringImpl *v5718;
  WTF::AtomStringImpl *v5719;
  const WTF::StringImpl *v5720;
  uint64_t v5721;
  uint64_t v5722;
  uint64_t v5723;
  uint64_t v5724;
  uint64_t v5725;
  WTF::StringImpl *v5726;
  WTF::AtomStringImpl *v5727;
  const WTF::StringImpl *v5728;
  uint64_t v5729;
  uint64_t v5730;
  uint64_t v5731;
  uint64_t v5732;
  uint64_t v5733;
  WTF::StringImpl *v5734;
  WTF::AtomStringImpl *v5735;
  const WTF::StringImpl *v5736;
  uint64_t v5737;
  uint64_t v5738;
  uint64_t v5739;
  uint64_t v5740;
  uint64_t v5741;
  WTF::StringImpl *v5742;
  WTF::AtomStringImpl *v5743;
  const WTF::StringImpl *v5744;
  uint64_t v5745;
  uint64_t v5746;
  uint64_t v5747;
  uint64_t v5748;
  uint64_t v5749;
  WTF::StringImpl *v5750;
  WTF::AtomStringImpl *v5751;
  const WTF::StringImpl *v5752;
  uint64_t v5753;
  uint64_t v5754;
  uint64_t v5755;
  uint64_t v5756;
  uint64_t v5757;
  WTF::StringImpl *v5758;
  WTF::AtomStringImpl *v5759;
  const WTF::StringImpl *v5760;
  uint64_t v5761;
  uint64_t v5762;
  uint64_t v5763;
  uint64_t v5764;
  uint64_t v5765;
  WTF::StringImpl *v5766;
  WTF::AtomStringImpl *v5767;
  const WTF::StringImpl *v5768;
  uint64_t v5769;
  uint64_t v5770;
  uint64_t v5771;
  uint64_t v5772;
  uint64_t v5773;
  WTF::StringImpl *v5774;
  WTF::AtomStringImpl *v5775;
  const WTF::StringImpl *v5776;
  uint64_t v5777;
  uint64_t v5778;
  uint64_t v5779;
  uint64_t v5780;
  uint64_t v5781;
  WTF::StringImpl *v5782;
  WTF::AtomStringImpl *v5783;
  const WTF::StringImpl *v5784;
  uint64_t v5785;
  uint64_t v5786;
  uint64_t v5787;
  uint64_t v5788;
  uint64_t v5789;
  WTF::StringImpl *v5790;
  WTF::AtomStringImpl *v5791;
  const WTF::StringImpl *v5792;
  uint64_t v5793;
  uint64_t v5794;
  uint64_t v5795;
  uint64_t v5796;
  uint64_t v5797;
  WTF::StringImpl *v5798;
  WTF::AtomStringImpl *v5799;
  const WTF::StringImpl *v5800;
  uint64_t v5801;
  uint64_t v5802;
  uint64_t v5803;
  uint64_t v5804;
  uint64_t v5805;
  WTF::StringImpl *v5806;
  WTF::AtomStringImpl *v5807;
  const WTF::StringImpl *v5808;
  uint64_t v5809;
  uint64_t v5810;
  uint64_t v5811;
  uint64_t v5812;
  uint64_t v5813;
  WTF::StringImpl *v5814;
  WTF::AtomStringImpl *v5815;
  const WTF::StringImpl *v5816;
  uint64_t v5817;
  uint64_t v5818;
  uint64_t v5819;
  uint64_t v5820;
  uint64_t v5821;
  WTF::StringImpl *v5822;
  WTF::AtomStringImpl *v5823;
  const WTF::StringImpl *v5824;
  uint64_t v5825;
  uint64_t v5826;
  uint64_t v5827;
  uint64_t v5828;
  uint64_t v5829;
  WTF::StringImpl *v5830;
  WTF::AtomStringImpl *v5831;
  const WTF::StringImpl *v5832;
  uint64_t v5833;
  uint64_t v5834;
  uint64_t v5835;
  uint64_t v5836;
  uint64_t v5837;
  WTF::StringImpl *v5838;
  WTF::AtomStringImpl *v5839;
  const WTF::StringImpl *v5840;
  uint64_t v5841;
  uint64_t v5842;
  uint64_t v5843;
  uint64_t v5844;
  uint64_t v5845;
  WTF::StringImpl *v5846;
  WTF::AtomStringImpl *v5847;
  const WTF::StringImpl *v5848;
  uint64_t v5849;
  uint64_t v5850;
  uint64_t v5851;
  uint64_t v5852;
  uint64_t v5853;
  WTF::StringImpl *v5854;
  WTF::AtomStringImpl *v5855;
  const WTF::StringImpl *v5856;
  uint64_t v5857;
  uint64_t v5858;
  uint64_t v5859;
  uint64_t v5860;
  uint64_t v5861;
  WTF::StringImpl *v5862;
  WTF::AtomStringImpl *v5863;
  const WTF::StringImpl *v5864;
  uint64_t v5865;
  uint64_t v5866;
  uint64_t v5867;
  uint64_t v5868;
  uint64_t v5869;
  WTF::StringImpl *v5870;
  WTF::AtomStringImpl *v5871;
  const WTF::StringImpl *v5872;
  uint64_t v5873;
  uint64_t v5874;
  uint64_t v5875;
  uint64_t v5876;
  uint64_t v5877;
  WTF::StringImpl *v5878;
  WTF::AtomStringImpl *v5879;
  const WTF::StringImpl *v5880;
  uint64_t v5881;
  uint64_t v5882;
  uint64_t v5883;
  uint64_t v5884;
  uint64_t v5885;
  WTF::StringImpl *v5886;
  WTF::AtomStringImpl *v5887;
  const WTF::StringImpl *v5888;
  uint64_t v5889;
  uint64_t v5890;
  uint64_t v5891;
  uint64_t v5892;
  uint64_t v5893;
  WTF::StringImpl *v5894;
  WTF::AtomStringImpl *v5895;
  const WTF::StringImpl *v5896;
  uint64_t v5897;
  uint64_t v5898;
  uint64_t v5899;
  uint64_t v5900;
  uint64_t v5901;
  WTF::StringImpl *v5902;
  WTF::AtomStringImpl *v5903;
  const WTF::StringImpl *v5904;
  uint64_t v5905;
  uint64_t v5906;
  uint64_t v5907;
  uint64_t v5908;
  uint64_t v5909;
  WTF::StringImpl *v5910;
  WTF::AtomStringImpl *v5911;
  const WTF::StringImpl *v5912;
  uint64_t v5913;
  uint64_t v5914;
  uint64_t v5915;
  uint64_t v5916;
  uint64_t v5917;
  WTF::StringImpl *v5918;
  WTF::AtomStringImpl *v5919;
  const WTF::StringImpl *v5920;
  uint64_t v5921;
  uint64_t v5922;
  uint64_t v5923;
  uint64_t v5924;
  uint64_t v5925;
  WTF::StringImpl *v5926;
  WTF::AtomStringImpl *v5927;
  const WTF::StringImpl *v5928;
  uint64_t v5929;
  uint64_t v5930;
  uint64_t v5931;
  uint64_t v5932;
  uint64_t v5933;
  WTF::StringImpl *v5934;
  WTF::AtomStringImpl *v5935;
  const WTF::StringImpl *v5936;
  uint64_t v5937;
  uint64_t v5938;
  uint64_t v5939;
  uint64_t v5940;
  uint64_t v5941;
  WTF::StringImpl *v5942;
  WTF::AtomStringImpl *v5943;
  const WTF::StringImpl *v5944;
  uint64_t v5945;
  uint64_t v5946;
  uint64_t v5947;
  uint64_t v5948;
  uint64_t v5949;
  WTF::StringImpl *v5950;
  WTF::AtomStringImpl *v5951;
  const WTF::StringImpl *v5952;
  uint64_t v5953;
  uint64_t v5954;
  uint64_t v5955;
  uint64_t v5956;
  uint64_t v5957;
  WTF::StringImpl *v5958;
  WTF::AtomStringImpl *v5959;
  const WTF::StringImpl *v5960;
  uint64_t v5961;
  uint64_t v5962;
  uint64_t v5963;
  uint64_t v5964;
  uint64_t v5965;
  WTF::StringImpl *v5966;
  WTF::AtomStringImpl *v5967;
  const WTF::StringImpl *v5968;
  uint64_t v5969;
  uint64_t v5970;
  uint64_t v5971;
  uint64_t v5972;
  uint64_t v5973;
  WTF::StringImpl *v5974;
  WTF::AtomStringImpl *v5975;
  const WTF::StringImpl *v5976;
  uint64_t v5977;
  uint64_t v5978;
  uint64_t v5979;
  uint64_t v5980;
  uint64_t v5981;
  WTF::StringImpl *v5982;
  WTF::AtomStringImpl *v5983;
  const WTF::StringImpl *v5984;
  uint64_t v5985;
  uint64_t v5986;
  uint64_t v5987;
  uint64_t v5988;
  uint64_t v5989;
  WTF::StringImpl *v5990;
  WTF::AtomStringImpl *v5991;
  const WTF::StringImpl *v5992;
  uint64_t v5993;
  uint64_t v5994;
  uint64_t v5995;
  uint64_t v5996;
  uint64_t v5997;
  WTF::StringImpl *v5998;
  WTF::AtomStringImpl *v5999;
  const WTF::StringImpl *v6000;
  uint64_t v6001;
  uint64_t v6002;
  uint64_t v6003;
  uint64_t v6004;
  uint64_t v6005;
  WTF::StringImpl *v6006;
  WTF::AtomStringImpl *v6007;
  const WTF::StringImpl *v6008;
  uint64_t v6009;
  uint64_t v6010;
  uint64_t v6011;
  uint64_t v6012;
  uint64_t v6013;
  WTF::StringImpl *v6014;
  WTF::AtomStringImpl *v6015;
  const WTF::StringImpl *v6016;
  uint64_t v6017;
  uint64_t v6018;
  uint64_t v6019;
  uint64_t v6020;
  uint64_t v6021;
  WTF::StringImpl *v6022;
  WTF::AtomStringImpl *v6023;
  const WTF::StringImpl *v6024;
  uint64_t v6025;
  uint64_t v6026;
  uint64_t v6027;
  uint64_t v6028;
  uint64_t v6029;
  WTF::StringImpl *v6030;
  WTF::AtomStringImpl *v6031;
  const WTF::StringImpl *v6032;
  uint64_t v6033;
  uint64_t v6034;
  uint64_t v6035;
  uint64_t v6036;
  uint64_t v6037;
  WTF::StringImpl *v6038;
  WTF::AtomStringImpl *v6039;
  const WTF::StringImpl *v6040;
  uint64_t v6041;
  uint64_t v6042;
  uint64_t v6043;
  uint64_t v6044;
  uint64_t v6045;
  WTF::StringImpl *v6046;
  WTF::AtomStringImpl *v6047;
  const WTF::StringImpl *v6048;
  uint64_t v6049;
  uint64_t v6050;
  uint64_t v6051;
  uint64_t v6052;
  uint64_t v6053;
  WTF::StringImpl *v6054;
  WTF::AtomStringImpl *v6055;
  const WTF::StringImpl *v6056;
  uint64_t v6057;
  uint64_t v6058;
  uint64_t v6059;
  uint64_t v6060;
  uint64_t v6061;
  WTF::StringImpl *v6062;
  WTF::AtomStringImpl *v6063;
  const WTF::StringImpl *v6064;
  uint64_t v6065;
  uint64_t v6066;
  uint64_t v6067;
  uint64_t v6068;
  uint64_t v6069;
  WTF::StringImpl *v6070;
  WTF::AtomStringImpl *v6071;
  const WTF::StringImpl *v6072;
  uint64_t v6073;
  uint64_t v6074;
  uint64_t v6075;
  uint64_t v6076;
  uint64_t v6077;
  WTF::StringImpl *v6078;
  WTF::AtomStringImpl *v6079;
  const WTF::StringImpl *v6080;
  uint64_t v6081;
  uint64_t v6082;
  uint64_t v6083;
  uint64_t v6084;
  uint64_t v6085;
  WTF::StringImpl *v6086;
  WTF::AtomStringImpl *v6087;
  const WTF::StringImpl *v6088;
  uint64_t v6089;
  uint64_t v6090;
  uint64_t v6091;
  uint64_t v6092;
  uint64_t v6093;
  WTF::StringImpl *v6094;
  WTF::AtomStringImpl *v6095;
  const WTF::StringImpl *v6096;
  uint64_t v6097;
  uint64_t v6098;
  uint64_t v6099;
  uint64_t v6100;
  uint64_t v6101;
  WTF::StringImpl *v6102;
  WTF::AtomStringImpl *v6103;
  const WTF::StringImpl *v6104;
  uint64_t v6105;
  uint64_t v6106;
  uint64_t v6107;
  uint64_t v6108;
  uint64_t v6109;
  WTF::StringImpl *v6110;
  WTF::AtomStringImpl *v6111;
  const WTF::StringImpl *v6112;
  uint64_t v6113;
  uint64_t v6114;
  uint64_t v6115;
  uint64_t v6116;
  uint64_t v6117;
  WTF::StringImpl *v6118;
  WTF::AtomStringImpl *v6119;
  const WTF::StringImpl *v6120;
  uint64_t v6121;
  uint64_t v6122;
  uint64_t v6123;
  uint64_t v6124;
  uint64_t v6125;
  WTF::StringImpl *v6126;
  WTF::AtomStringImpl *v6127;
  const WTF::StringImpl *v6128;
  uint64_t v6129;
  uint64_t v6130;
  uint64_t v6131;
  uint64_t v6132;
  uint64_t v6133;
  WTF::StringImpl *v6134;
  WTF::AtomStringImpl *v6135;
  const WTF::StringImpl *v6136;
  uint64_t v6137;
  uint64_t v6138;
  uint64_t v6139;
  uint64_t v6140;
  uint64_t v6141;
  WTF::StringImpl *v6142;
  WTF::AtomStringImpl *v6143;
  const WTF::StringImpl *v6144;
  uint64_t v6145;
  uint64_t v6146;
  uint64_t v6147;
  uint64_t v6148;
  uint64_t v6149;
  WTF::StringImpl *v6150;
  WTF::AtomStringImpl *v6151;
  const WTF::StringImpl *v6152;
  uint64_t v6153;
  uint64_t v6154;
  uint64_t v6155;
  uint64_t v6156;
  uint64_t v6157;
  WTF::StringImpl *v6158;
  WTF::AtomStringImpl *v6159;
  const WTF::StringImpl *v6160;
  uint64_t v6161;
  uint64_t v6162;
  uint64_t v6163;
  uint64_t v6164;
  uint64_t v6165;
  WTF::StringImpl *v6166;
  WTF::AtomStringImpl *v6167;
  const WTF::StringImpl *v6168;
  uint64_t v6169;
  uint64_t v6170;
  uint64_t v6171;
  uint64_t v6172;
  uint64_t v6173;
  WTF::StringImpl *v6174;
  WTF::AtomStringImpl *v6175;
  const WTF::StringImpl *v6176;
  uint64_t v6177;
  uint64_t v6178;
  uint64_t v6179;
  uint64_t v6180;
  uint64_t v6181;
  WTF::StringImpl *v6182;
  WTF::AtomStringImpl *v6183;
  const WTF::StringImpl *v6184;
  uint64_t v6185;
  uint64_t v6186;
  uint64_t v6187;
  uint64_t v6188;
  uint64_t v6189;
  WTF::StringImpl *v6190;
  WTF::AtomStringImpl *v6191;
  const WTF::StringImpl *v6192;
  uint64_t v6193;
  uint64_t v6194;
  uint64_t v6195;
  uint64_t v6196;
  uint64_t v6197;
  WTF::StringImpl *v6198;
  WTF::AtomStringImpl *v6199;
  const WTF::StringImpl *v6200;
  uint64_t v6201;
  uint64_t v6202;
  uint64_t v6203;
  uint64_t v6204;
  uint64_t v6205;
  WTF::StringImpl *v6206;
  WTF::AtomStringImpl *v6207;
  const WTF::StringImpl *v6208;
  uint64_t v6209;
  uint64_t v6210;
  uint64_t v6211;
  uint64_t v6212;
  uint64_t v6213;
  WTF::StringImpl *v6214;
  WTF::AtomStringImpl *v6215;
  const WTF::StringImpl *v6216;
  uint64_t v6217;
  uint64_t v6218;
  uint64_t v6219;
  uint64_t v6220;
  uint64_t v6221;
  WTF::StringImpl *v6222;
  WTF::AtomStringImpl *v6223;
  const WTF::StringImpl *v6224;
  uint64_t v6225;
  uint64_t v6226;
  uint64_t v6227;
  uint64_t v6228;
  uint64_t v6229;
  WTF::StringImpl *v6230;
  WTF::AtomStringImpl *v6231;
  const WTF::StringImpl *v6232;
  uint64_t v6233;
  uint64_t v6234;
  uint64_t v6235;
  uint64_t v6236;
  uint64_t v6237;
  WTF::StringImpl *v6238;
  WTF::AtomStringImpl *v6239;
  const WTF::StringImpl *v6240;
  uint64_t v6241;
  uint64_t v6242;
  uint64_t v6243;
  uint64_t v6244;
  uint64_t v6245;
  WTF::StringImpl *v6246;
  WTF::AtomStringImpl *v6247;
  const WTF::StringImpl *v6248;
  uint64_t v6249;
  uint64_t v6250;
  uint64_t v6251;
  uint64_t v6252;
  uint64_t v6253;
  WTF::StringImpl *v6254;
  WTF::AtomStringImpl *v6255;
  const WTF::StringImpl *v6256;
  uint64_t v6257;
  uint64_t v6258;
  uint64_t v6259;
  uint64_t v6260;
  uint64_t v6261;
  WTF::StringImpl *v6262;
  WTF::AtomStringImpl *v6263;
  const WTF::StringImpl *v6264;
  uint64_t v6265;
  uint64_t v6266;
  uint64_t v6267;
  uint64_t v6268;
  uint64_t v6269;
  WTF::StringImpl *v6270;
  WTF::AtomStringImpl *v6271;
  const WTF::StringImpl *v6272;
  uint64_t v6273;
  uint64_t v6274;
  uint64_t v6275;
  uint64_t v6276;
  uint64_t v6277;
  WTF::StringImpl *v6278;
  WTF::AtomStringImpl *v6279;
  const WTF::StringImpl *v6280;
  uint64_t v6281;
  uint64_t v6282;
  uint64_t v6283;
  uint64_t v6284;
  uint64_t v6285;
  WTF::StringImpl *v6286;
  WTF::AtomStringImpl *v6287;
  const WTF::StringImpl *v6288;
  uint64_t v6289;
  uint64_t v6290;
  uint64_t v6291;
  uint64_t v6292;
  uint64_t v6293;
  WTF::StringImpl *v6294;
  WTF::AtomStringImpl *v6295;
  const WTF::StringImpl *v6296;
  uint64_t v6297;
  uint64_t v6298;
  uint64_t v6299;
  uint64_t v6300;
  uint64_t v6301;
  WTF::StringImpl *v6302;
  WTF::AtomStringImpl *v6303;
  const WTF::StringImpl *v6304;
  uint64_t v6305;
  uint64_t v6306;
  uint64_t v6307;
  uint64_t v6308;
  uint64_t v6309;
  WTF::StringImpl *v6310;
  WTF::AtomStringImpl *v6311;
  const WTF::StringImpl *v6312;
  uint64_t v6313;
  uint64_t v6314;
  uint64_t v6315;
  uint64_t v6316;
  uint64_t v6317;
  WTF::StringImpl *v6318;
  WTF::AtomStringImpl *v6319;
  const WTF::StringImpl *v6320;
  uint64_t v6321;
  uint64_t v6322;
  uint64_t v6323;
  uint64_t v6324;
  uint64_t v6325;
  WTF::StringImpl *v6326;
  WTF::AtomStringImpl *v6327;
  const WTF::StringImpl *v6328;
  uint64_t v6329;
  uint64_t v6330;
  uint64_t v6331;
  uint64_t v6332;
  uint64_t v6333;
  WTF::StringImpl *v6334;
  WTF::AtomStringImpl *v6335;
  const WTF::StringImpl *v6336;
  uint64_t v6337;
  uint64_t v6338;
  uint64_t v6339;
  uint64_t v6340;
  uint64_t v6341;
  WTF::StringImpl *v6342;
  WTF::AtomStringImpl *v6343;
  const WTF::StringImpl *v6344;
  uint64_t v6345;
  uint64_t v6346;
  uint64_t v6347;
  uint64_t v6348;
  uint64_t v6349;
  WTF::StringImpl *v6350;
  WTF::AtomStringImpl *v6351;
  const WTF::StringImpl *v6352;
  uint64_t v6353;
  uint64_t v6354;
  uint64_t v6355;
  uint64_t v6356;
  uint64_t v6357;
  WTF::StringImpl *v6358;
  WTF::AtomStringImpl *v6359;
  const WTF::StringImpl *v6360;
  uint64_t v6361;
  uint64_t v6362;
  uint64_t v6363;
  uint64_t v6364;
  uint64_t v6365;
  WTF::StringImpl *v6366;
  WTF::AtomStringImpl *v6367;
  const WTF::StringImpl *v6368;
  uint64_t v6369;
  uint64_t v6370;
  uint64_t v6371;
  uint64_t v6372;
  uint64_t v6373;
  WTF::StringImpl *v6374;
  WTF::AtomStringImpl *v6375;
  const WTF::StringImpl *v6376;
  uint64_t v6377;
  uint64_t v6378;
  uint64_t v6379;
  uint64_t v6380;
  uint64_t v6381;
  WTF::StringImpl *v6382;
  WTF::AtomStringImpl *v6383;
  const WTF::StringImpl *v6384;
  uint64_t v6385;
  uint64_t v6386;
  uint64_t v6387;
  uint64_t v6388;
  uint64_t v6389;
  WTF::StringImpl *v6390;
  WTF::AtomStringImpl *v6391;
  const WTF::StringImpl *v6392;
  uint64_t v6393;
  uint64_t v6394;
  uint64_t v6395;
  uint64_t v6396;
  uint64_t v6397;
  WTF::StringImpl *v6398;
  WTF::AtomStringImpl *v6399;
  const WTF::StringImpl *v6400;
  uint64_t v6401;
  uint64_t v6402;
  uint64_t v6403;
  uint64_t v6404;
  uint64_t v6405;
  WTF::StringImpl *v6406;
  WTF::AtomStringImpl *v6407;
  const WTF::StringImpl *v6408;
  uint64_t v6409;
  uint64_t v6410;
  uint64_t v6411;
  uint64_t v6412;
  uint64_t v6413;
  WTF::StringImpl *v6414;
  WTF::AtomStringImpl *v6415;
  const WTF::StringImpl *v6416;
  uint64_t v6417;
  uint64_t v6418;
  uint64_t v6419;
  uint64_t v6420;
  uint64_t v6421;
  WTF::StringImpl *v6422;
  WTF::AtomStringImpl *v6423;
  const WTF::StringImpl *v6424;
  uint64_t v6425;
  uint64_t v6426;
  uint64_t v6427;
  uint64_t v6428;
  uint64_t v6429;
  WTF::StringImpl *v6430;
  WTF::AtomStringImpl *v6431;
  const WTF::StringImpl *v6432;
  uint64_t v6433;
  uint64_t v6434;
  uint64_t v6435;
  uint64_t v6436;
  uint64_t v6437;
  WTF::StringImpl *v6438;
  WTF::AtomStringImpl *v6439;
  const WTF::StringImpl *v6440;
  uint64_t v6441;
  uint64_t v6442;
  uint64_t v6443;
  uint64_t v6444;
  uint64_t v6445;
  WTF::StringImpl *v6446;
  WTF::AtomStringImpl *v6447;
  const WTF::StringImpl *v6448;
  uint64_t v6449;
  uint64_t v6450;
  uint64_t v6451;
  uint64_t v6452;
  uint64_t v6453;
  WTF::StringImpl *v6454;
  WTF::AtomStringImpl *v6455;
  const WTF::StringImpl *v6456;
  uint64_t v6457;
  uint64_t v6458;
  uint64_t v6459;
  uint64_t v6460;
  uint64_t v6461;
  WTF::StringImpl *v6462;
  WTF::AtomStringImpl *v6463;
  const WTF::StringImpl *v6464;
  uint64_t v6465;
  uint64_t v6466;
  uint64_t v6467;
  uint64_t v6468;
  uint64_t v6469;
  WTF::StringImpl *v6470;
  WTF::AtomStringImpl *v6471;
  const WTF::StringImpl *v6472;
  uint64_t v6473;
  uint64_t v6474;
  uint64_t v6475;
  uint64_t v6476;
  uint64_t v6477;
  WTF::StringImpl *v6478;
  WTF::AtomStringImpl *v6479;
  const WTF::StringImpl *v6480;
  uint64_t v6481;
  uint64_t v6482;
  uint64_t v6483;
  uint64_t v6484;
  uint64_t v6485;
  WTF::StringImpl *v6486;
  WTF::AtomStringImpl *v6487;
  const WTF::StringImpl *v6488;
  uint64_t v6489;
  uint64_t v6490;
  uint64_t v6491;
  uint64_t v6492;
  uint64_t v6493;
  WTF::StringImpl *v6494;
  WTF::AtomStringImpl *v6495;
  const WTF::StringImpl *v6496;
  uint64_t v6497;
  uint64_t v6498;
  uint64_t v6499;
  uint64_t v6500;
  uint64_t v6501;
  WTF::StringImpl *v6502;
  WTF::AtomStringImpl *v6503;
  const WTF::StringImpl *v6504;
  uint64_t v6505;
  uint64_t v6506;
  uint64_t v6507;
  uint64_t v6508;
  uint64_t v6509;
  WTF::StringImpl *v6510;
  WTF::AtomStringImpl *v6511;
  const WTF::StringImpl *v6512;
  uint64_t v6513;
  uint64_t v6514;
  uint64_t v6515;
  uint64_t v6516;
  uint64_t v6517;
  WTF::StringImpl *v6518;
  WTF::AtomStringImpl *v6519;
  const WTF::StringImpl *v6520;
  uint64_t v6521;
  uint64_t v6522;
  uint64_t v6523;
  uint64_t v6524;
  uint64_t v6525;
  WTF::StringImpl *v6526;
  WTF::AtomStringImpl *v6527;
  const WTF::StringImpl *v6528;
  uint64_t v6529;
  uint64_t v6530;
  uint64_t v6531;
  uint64_t v6532;
  uint64_t v6533;
  WTF::StringImpl *v6534;
  WTF::AtomStringImpl *v6535;
  const WTF::StringImpl *v6536;
  uint64_t v6537;
  uint64_t v6538;
  uint64_t v6539;
  uint64_t v6540;
  uint64_t v6541;
  WTF::StringImpl *v6542;
  WTF::AtomStringImpl *v6543;
  const WTF::StringImpl *v6544;
  uint64_t v6545;
  uint64_t v6546;
  uint64_t v6547;
  uint64_t v6548;
  uint64_t v6549;
  WTF::StringImpl *v6550;
  WTF::AtomStringImpl *v6551;
  const WTF::StringImpl *v6552;
  uint64_t v6553;
  uint64_t v6554;
  uint64_t v6555;
  uint64_t v6556;
  uint64_t v6557;
  WTF::StringImpl *v6558;
  WTF::AtomStringImpl *v6559;
  const WTF::StringImpl *v6560;
  uint64_t v6561;
  uint64_t v6562;
  uint64_t v6563;
  uint64_t v6564;
  uint64_t v6565;
  WTF::StringImpl *v6566;
  WTF::AtomStringImpl *v6567;
  const WTF::StringImpl *v6568;
  uint64_t v6569;
  uint64_t v6570;
  uint64_t v6571;
  uint64_t v6572;
  uint64_t v6573;
  WTF::StringImpl *v6574;
  WTF::AtomStringImpl *v6575;
  const WTF::StringImpl *v6576;
  uint64_t v6577;
  uint64_t v6578;
  uint64_t v6579;
  uint64_t v6580;
  uint64_t v6581;
  WTF::StringImpl *v6582;
  WTF::AtomStringImpl *v6583;
  const WTF::StringImpl *v6584;
  uint64_t v6585;
  uint64_t v6586;
  uint64_t v6587;
  uint64_t v6588;
  uint64_t v6589;
  WTF::StringImpl *v6590;
  WTF::AtomStringImpl *v6591;
  const WTF::StringImpl *v6592;
  uint64_t v6593;
  uint64_t v6594;
  uint64_t v6595;
  uint64_t v6596;
  uint64_t v6597;
  WTF::StringImpl *v6598;
  WTF::AtomStringImpl *v6599;
  const WTF::StringImpl *v6600;
  uint64_t v6601;
  uint64_t v6602;
  uint64_t v6603;
  uint64_t v6604;
  uint64_t v6605;
  WTF::StringImpl *v6606;
  WTF::AtomStringImpl *v6607;
  const WTF::StringImpl *v6608;
  uint64_t v6609;
  uint64_t v6610;
  uint64_t v6611;
  uint64_t v6612;
  uint64_t v6613;
  WTF::StringImpl *v6614;
  WTF::AtomStringImpl *v6615;
  const WTF::StringImpl *v6616;
  uint64_t v6617;
  uint64_t v6618;
  uint64_t v6619;
  uint64_t v6620;
  uint64_t v6621;
  WTF::StringImpl *v6622;
  WTF::AtomStringImpl *v6623;
  const WTF::StringImpl *v6624;
  uint64_t v6625;
  uint64_t v6626;
  uint64_t v6627;
  uint64_t v6628;
  uint64_t v6629;
  WTF::StringImpl *v6630;
  WTF::AtomStringImpl *v6631;
  const WTF::StringImpl *v6632;
  uint64_t v6633;
  uint64_t v6634;
  uint64_t v6635;
  uint64_t v6636;
  uint64_t v6637;
  WTF::StringImpl *v6638;
  WTF::AtomStringImpl *v6639;
  const WTF::StringImpl *v6640;
  uint64_t v6641;
  uint64_t v6642;
  uint64_t v6643;
  uint64_t v6644;
  uint64_t v6645;
  WTF::StringImpl *v6646;
  WTF::AtomStringImpl *v6647;
  const WTF::StringImpl *v6648;
  uint64_t v6649;
  uint64_t v6650;
  uint64_t v6651;
  uint64_t v6652;
  uint64_t v6653;
  WTF::StringImpl *v6654;
  WTF::AtomStringImpl *v6655;
  const WTF::StringImpl *v6656;
  uint64_t v6657;
  uint64_t v6658;
  uint64_t v6659;
  uint64_t v6660;
  uint64_t v6661;
  WTF::StringImpl *v6662;
  WTF::AtomStringImpl *v6663;
  const WTF::StringImpl *v6664;
  uint64_t v6665;
  uint64_t v6666;
  uint64_t v6667;
  uint64_t v6668;
  uint64_t v6669;
  WTF::StringImpl *v6670;
  WTF::AtomStringImpl *v6671;
  const WTF::StringImpl *v6672;
  uint64_t v6673;
  uint64_t v6674;
  uint64_t v6675;
  uint64_t v6676;
  uint64_t v6677;
  WTF::StringImpl *v6678;
  WTF::AtomStringImpl *v6679;
  const WTF::StringImpl *v6680;
  uint64_t v6681;
  uint64_t v6682;
  uint64_t v6683;
  uint64_t v6684;
  uint64_t v6685;
  WTF::StringImpl *v6686;
  WTF::AtomStringImpl *v6687;
  const WTF::StringImpl *v6688;
  uint64_t v6689;
  uint64_t v6690;
  uint64_t v6691;
  uint64_t v6692;
  uint64_t v6693;
  WTF::StringImpl *v6694;
  WTF::AtomStringImpl *v6695;
  const WTF::StringImpl *v6696;
  uint64_t v6697;
  uint64_t v6698;
  uint64_t v6699;
  uint64_t v6700;
  uint64_t v6701;
  WTF::StringImpl *v6702;
  WTF::AtomStringImpl *v6703;
  const WTF::StringImpl *v6704;
  uint64_t v6705;
  uint64_t v6706;
  uint64_t v6707;
  uint64_t v6708;
  uint64_t v6709;
  WTF::StringImpl *v6710;
  WTF::AtomStringImpl *v6711;
  const WTF::StringImpl *v6712;
  uint64_t v6713;
  uint64_t v6714;
  uint64_t v6715;
  uint64_t v6716;
  uint64_t v6717;
  WTF::StringImpl *v6718;
  WTF::AtomStringImpl *v6719;
  const WTF::StringImpl *v6720;
  uint64_t v6721;
  uint64_t v6722;
  uint64_t v6723;
  uint64_t v6724;
  uint64_t v6725;
  WTF::StringImpl *v6726;
  WTF::AtomStringImpl *v6727;
  const WTF::StringImpl *v6728;
  uint64_t v6729;
  uint64_t v6730;
  uint64_t v6731;
  uint64_t v6732;
  uint64_t v6733;
  WTF::StringImpl *v6734;
  WTF::AtomStringImpl *v6735;
  const WTF::StringImpl *v6736;
  uint64_t v6737;
  uint64_t v6738;
  uint64_t v6739;
  uint64_t v6740;
  uint64_t v6741;
  WTF::StringImpl *v6742;
  WTF::AtomStringImpl *v6743;
  const WTF::StringImpl *v6744;
  uint64_t v6745;
  uint64_t v6746;
  uint64_t v6747;
  uint64_t v6748;
  uint64_t v6749;
  WTF::StringImpl *v6750;
  WTF::AtomStringImpl *v6751;
  const WTF::StringImpl *v6752;
  uint64_t v6753;
  uint64_t v6754;
  uint64_t v6755;
  uint64_t v6756;
  uint64_t v6757;
  WTF::StringImpl *v6758;
  WTF::AtomStringImpl *v6759;
  const WTF::StringImpl *v6760;
  uint64_t v6761;
  uint64_t v6762;
  uint64_t v6763;
  uint64_t v6764;
  uint64_t v6765;
  WTF::StringImpl *v6766;
  WTF::AtomStringImpl *v6767;
  const WTF::StringImpl *v6768;
  uint64_t v6769;
  uint64_t v6770;
  uint64_t v6771;
  uint64_t v6772;
  uint64_t v6773;
  WTF::StringImpl *v6774;
  WTF::AtomStringImpl *v6775;
  const WTF::StringImpl *v6776;
  uint64_t v6777;
  uint64_t v6778;
  uint64_t v6779;
  uint64_t v6780;
  uint64_t v6781;
  WTF::StringImpl *v6782;
  WTF::AtomStringImpl *v6783;
  const WTF::StringImpl *v6784;
  uint64_t v6785;
  uint64_t v6786;
  uint64_t v6787;
  uint64_t v6788;
  uint64_t v6789;
  WTF::StringImpl *v6790;
  WTF::AtomStringImpl *v6791;
  uint64_t v6792;
  uint64_t v6793;
  uint64_t v6794;
  uint64_t v6795;
  uint64_t v6796;
  uint64_t v6797;
  WTF::StringImpl *v6798;
  WTF::StringImpl *v6799;
  WTF::AtomStringImpl *v6800;
  uint64_t v6801;
  uint64_t v6802;
  uint64_t v6803;
  uint64_t v6804;
  uint64_t v6805;
  uint64_t v6806;
  WTF::StringImpl *v6807;
  WTF::StringImpl *v6808;
  WTF::AtomStringImpl *v6809;
  uint64_t v6810;
  uint64_t v6811;
  uint64_t v6812;
  uint64_t v6813;
  uint64_t v6814;
  uint64_t v6815;
  WTF::StringImpl *v6816;
  WTF::StringImpl *v6817;
  WTF::AtomStringImpl *v6818;
  uint64_t v6819;
  uint64_t v6820;
  uint64_t v6821;
  uint64_t v6822;
  uint64_t v6823;
  uint64_t v6824;
  WTF::StringImpl *v6825;
  WTF::StringImpl *v6826;
  WTF::AtomStringImpl *v6827;
  uint64_t v6828;
  uint64_t v6829;
  uint64_t v6830;
  uint64_t v6831;
  uint64_t v6832;
  uint64_t v6833;
  WTF::StringImpl *v6834;
  WTF::StringImpl *v6835;
  WTF::AtomStringImpl *v6836;
  uint64_t v6837;
  uint64_t v6838;
  uint64_t v6839;
  uint64_t v6840;
  uint64_t v6841;
  uint64_t v6842;
  WTF::StringImpl *v6843;
  WTF::StringImpl *v6844;
  WTF::AtomStringImpl *v6845;
  uint64_t v6846;
  uint64_t v6847;
  uint64_t v6848;
  uint64_t v6849;
  uint64_t v6850;
  uint64_t v6851;
  WTF::StringImpl *v6852;
  WTF::StringImpl *v6853;
  WTF::AtomStringImpl *v6854;
  uint64_t v6855;
  uint64_t v6856;
  uint64_t v6857;
  uint64_t v6858;
  uint64_t v6859;
  uint64_t v6860;
  WTF::StringImpl *v6861;
  WTF::StringImpl *v6862;
  WTF::AtomStringImpl *v6863;
  uint64_t v6864;
  uint64_t v6865;
  uint64_t v6866;
  uint64_t v6867;
  uint64_t v6868;
  uint64_t v6869;
  WTF::StringImpl *v6870;
  WTF::StringImpl *v6871;
  WTF::AtomStringImpl *v6872;
  uint64_t v6873;
  uint64_t v6874;
  uint64_t v6875;
  uint64_t v6876;
  uint64_t v6877;
  uint64_t v6878;
  WTF::StringImpl *v6879;
  WTF::StringImpl *v6880;
  WTF::AtomStringImpl *v6881;
  uint64_t v6882;
  uint64_t v6883;
  uint64_t v6884;
  uint64_t v6885;
  uint64_t v6886;
  uint64_t v6887;
  WTF::StringImpl *v6888;
  WTF::StringImpl *v6889;
  WTF::AtomStringImpl *v6890;
  uint64_t v6891;
  uint64_t v6892;
  uint64_t v6893;
  uint64_t v6894;
  uint64_t v6895;
  uint64_t v6896;
  WTF::StringImpl *v6897;
  WTF::StringImpl *v6898;
  WTF::AtomStringImpl *v6899;
  uint64_t v6900;
  uint64_t v6901;
  uint64_t v6902;
  uint64_t v6903;
  uint64_t v6904;
  uint64_t v6905;
  WTF::StringImpl *v6906;
  WTF::StringImpl *v6907;
  WTF::AtomStringImpl *v6908;
  const WTF::StringImpl *v6909;
  uint64_t v6910;
  uint64_t v6911;
  uint64_t v6912;
  uint64_t v6913;
  uint64_t v6914;
  WTF::StringImpl *v6915;
  WTF::StringImpl *v6916;
  WTF::AtomStringImpl *v6917;
  uint64_t v6918;
  uint64_t v6919;
  uint64_t v6920;
  uint64_t v6921;
  uint64_t v6922;
  uint64_t v6923;
  WTF::StringImpl *v6924;
  unint64_t v6926;
  void *v6927;
  uint64_t v6928;
  uint64_t v6929;
  uint64_t v6930;
  uint64_t v6931;
  uint64_t v6932;
  uint64_t v6933;
  unint64_t v6934;
  void *v6935;
  uint64_t v6936;
  uint64_t v6937;
  uint64_t v6938;
  uint64_t v6939;
  uint64_t v6940;
  uint64_t v6941;
  unint64_t v6942;
  void *v6943;
  uint64_t v6944;
  uint64_t v6945;
  uint64_t v6946;
  uint64_t v6947;
  uint64_t v6948;
  uint64_t v6949;
  unint64_t v6950;
  void *v6951;
  uint64_t v6952;
  uint64_t v6953;
  uint64_t v6954;
  uint64_t v6955;
  uint64_t v6956;
  uint64_t v6957;
  unint64_t v6958;
  void *v6959;
  uint64_t v6960;
  uint64_t v6961;
  uint64_t v6962;
  uint64_t v6963;
  uint64_t v6964;
  uint64_t v6965;
  unint64_t v6966;
  void *v6967;
  uint64_t v6968;
  uint64_t v6969;
  uint64_t v6970;
  uint64_t v6971;
  uint64_t v6972;
  uint64_t v6973;
  unint64_t v6974;
  void *v6975;
  uint64_t v6976;
  uint64_t v6977;
  uint64_t v6978;
  uint64_t v6979;
  uint64_t v6980;
  uint64_t v6981;
  unint64_t v6982;
  void *v6983;
  uint64_t v6984;
  uint64_t v6985;
  uint64_t v6986;
  uint64_t v6987;
  uint64_t v6988;
  uint64_t v6989;
  unint64_t v6990;
  void *v6991;
  uint64_t v6992;
  uint64_t v6993;
  uint64_t v6994;
  uint64_t v6995;
  uint64_t v6996;
  uint64_t v6997;
  unint64_t v6998;
  void *v6999;
  uint64_t v7000;
  uint64_t v7001;
  uint64_t v7002;
  uint64_t v7003;
  uint64_t v7004;
  uint64_t v7005;
  unint64_t v7006;
  void *v7007;
  uint64_t v7008;
  uint64_t v7009;
  uint64_t v7010;
  uint64_t v7011;
  uint64_t v7012;
  uint64_t v7013;
  unint64_t v7014;
  void *v7015;
  uint64_t v7016;
  uint64_t v7017;
  uint64_t v7018;
  uint64_t v7019;
  uint64_t v7020;
  uint64_t v7021;
  unint64_t v7022;
  void *v7023;
  uint64_t v7024;
  uint64_t v7025;
  uint64_t v7026;
  uint64_t v7027;
  uint64_t v7028;
  uint64_t v7029;
  unint64_t v7030;
  void *v7031;
  uint64_t v7032;
  uint64_t v7033;
  uint64_t v7034;
  uint64_t v7035;
  uint64_t v7036;
  uint64_t v7037;
  unint64_t v7038;
  void *v7039;
  uint64_t v7040;
  uint64_t v7041;
  uint64_t v7042;
  uint64_t v7043;
  uint64_t v7044;
  uint64_t v7045;
  unint64_t v7046;
  void *v7047;
  uint64_t v7048;
  uint64_t v7049;
  uint64_t v7050;
  uint64_t v7051;
  uint64_t v7052;
  uint64_t v7053;
  unint64_t v7054;
  void *v7055;
  uint64_t v7056;
  uint64_t v7057;
  uint64_t v7058;
  uint64_t v7059;
  uint64_t v7060;
  uint64_t v7061;
  unint64_t v7062;
  void *v7063;
  uint64_t v7064;
  uint64_t v7065;
  uint64_t v7066;
  uint64_t v7067;
  uint64_t v7068;
  uint64_t v7069;
  unint64_t v7070;
  void *v7071;
  uint64_t v7072;
  uint64_t v7073;
  uint64_t v7074;
  uint64_t v7075;
  uint64_t v7076;
  uint64_t v7077;
  unint64_t v7078;
  void *v7079;
  uint64_t v7080;
  uint64_t v7081;
  uint64_t v7082;
  uint64_t v7083;
  uint64_t v7084;
  uint64_t v7085;
  unint64_t v7086;
  void *v7087;
  uint64_t v7088;
  uint64_t v7089;
  uint64_t v7090;
  uint64_t v7091;
  uint64_t v7092;
  uint64_t v7093;
  unint64_t v7094;
  void *v7095;
  uint64_t v7096;
  uint64_t v7097;
  uint64_t v7098;
  uint64_t v7099;
  uint64_t v7100;
  uint64_t v7101;
  unint64_t v7102;
  void *v7103;
  uint64_t v7104;
  uint64_t v7105;
  uint64_t v7106;
  uint64_t v7107;
  uint64_t v7108;
  uint64_t v7109;
  unint64_t v7110;
  void *v7111;
  uint64_t v7112;
  uint64_t v7113;
  uint64_t v7114;
  uint64_t v7115;
  uint64_t v7116;
  uint64_t v7117;
  unint64_t v7118;
  void *v7119;
  uint64_t v7120;
  uint64_t v7121;
  uint64_t v7122;
  uint64_t v7123;
  uint64_t v7124;
  uint64_t v7125;
  unint64_t v7126;
  void *v7127;
  uint64_t v7128;
  uint64_t v7129;
  uint64_t v7130;
  uint64_t v7131;
  uint64_t v7132;
  uint64_t v7133;
  unint64_t v7134;
  void *v7135;
  uint64_t v7136;
  uint64_t v7137;
  uint64_t v7138;
  uint64_t v7139;
  uint64_t v7140;
  uint64_t v7141;
  unint64_t v7142;
  void *v7143;
  uint64_t v7144;
  uint64_t v7145;
  uint64_t v7146;
  uint64_t v7147;
  uint64_t v7148;
  uint64_t v7149;
  unint64_t v7150;
  void *v7151;
  uint64_t v7152;
  uint64_t v7153;
  uint64_t v7154;
  uint64_t v7155;
  uint64_t v7156;
  uint64_t v7157;
  unint64_t v7158;
  void *v7159;
  uint64_t v7160;
  uint64_t v7161;
  uint64_t v7162;
  uint64_t v7163;
  uint64_t v7164;
  uint64_t v7165;
  unint64_t v7166;
  void *v7167;
  uint64_t v7168;
  uint64_t v7169;
  uint64_t v7170;
  uint64_t v7171;
  uint64_t v7172;
  uint64_t v7173;
  unint64_t v7174;
  void *v7175;
  uint64_t v7176;
  uint64_t v7177;
  uint64_t v7178;
  uint64_t v7179;
  uint64_t v7180;
  uint64_t v7181;
  unint64_t v7182;
  void *v7183;
  uint64_t v7184;
  uint64_t v7185;
  uint64_t v7186;
  uint64_t v7187;
  uint64_t v7188;
  uint64_t v7189;
  unint64_t v7190;
  void *v7191;
  uint64_t v7192;
  uint64_t v7193;
  uint64_t v7194;
  uint64_t v7195;
  uint64_t v7196;
  uint64_t v7197;
  unint64_t v7198;
  void *v7199;
  uint64_t v7200;
  uint64_t v7201;
  uint64_t v7202;
  uint64_t v7203;
  uint64_t v7204;
  uint64_t v7205;
  unint64_t v7206;
  void *v7207;
  uint64_t v7208;
  uint64_t v7209;
  uint64_t v7210;
  uint64_t v7211;
  uint64_t v7212;
  uint64_t v7213;
  unint64_t v7214;
  void *v7215;
  uint64_t v7216;
  uint64_t v7217;
  uint64_t v7218;
  uint64_t v7219;
  uint64_t v7220;
  uint64_t v7221;
  unint64_t v7222;
  void *v7223;
  uint64_t v7224;
  uint64_t v7225;
  uint64_t v7226;
  uint64_t v7227;
  uint64_t v7228;
  uint64_t v7229;
  unint64_t v7230;
  void *v7231;
  uint64_t v7232;
  uint64_t v7233;
  uint64_t v7234;
  uint64_t v7235;
  uint64_t v7236;
  uint64_t v7237;
  unint64_t v7238;
  void *v7239;
  uint64_t v7240;
  uint64_t v7241;
  uint64_t v7242;
  uint64_t v7243;
  uint64_t v7244;
  uint64_t v7245;
  unint64_t v7246;
  void *v7247;
  uint64_t v7248;
  uint64_t v7249;
  uint64_t v7250;
  uint64_t v7251;
  uint64_t v7252;
  uint64_t v7253;
  unint64_t v7254;
  void *v7255;
  uint64_t v7256;
  uint64_t v7257;
  uint64_t v7258;
  uint64_t v7259;
  uint64_t v7260;
  uint64_t v7261;
  unint64_t v7262;
  void *v7263;
  uint64_t v7264;
  uint64_t v7265;
  uint64_t v7266;
  uint64_t v7267;
  uint64_t v7268;
  uint64_t v7269;
  unint64_t v7270;
  void *v7271;
  uint64_t v7272;
  uint64_t v7273;
  uint64_t v7274;
  uint64_t v7275;
  uint64_t v7276;
  uint64_t v7277;
  unint64_t v7278;
  void *v7279;
  uint64_t v7280;
  uint64_t v7281;
  uint64_t v7282;
  uint64_t v7283;
  uint64_t v7284;
  uint64_t v7285;
  unint64_t v7286;
  void *v7287;
  uint64_t v7288;
  uint64_t v7289;
  uint64_t v7290;
  uint64_t v7291;
  uint64_t v7292;
  uint64_t v7293;
  unint64_t v7294;
  void *v7295;
  uint64_t v7296;
  uint64_t v7297;
  uint64_t v7298;
  uint64_t v7299;
  uint64_t v7300;
  uint64_t v7301;
  unint64_t v7302;
  void *v7303;
  uint64_t v7304;
  uint64_t v7305;
  uint64_t v7306;
  uint64_t v7307;
  uint64_t v7308;
  uint64_t v7309;
  unint64_t v7310;
  void *v7311;
  uint64_t v7312;
  uint64_t v7313;
  uint64_t v7314;
  uint64_t v7315;
  uint64_t v7316;
  uint64_t v7317;
  unint64_t v7318;
  void *v7319;
  uint64_t v7320;
  uint64_t v7321;
  uint64_t v7322;
  uint64_t v7323;
  uint64_t v7324;
  uint64_t v7325;
  unint64_t v7326;
  void *v7327;
  uint64_t v7328;
  uint64_t v7329;
  uint64_t v7330;
  uint64_t v7331;
  uint64_t v7332;
  uint64_t v7333;
  unint64_t v7334;
  void *v7335;
  uint64_t v7336;
  uint64_t v7337;
  uint64_t v7338;
  uint64_t v7339;
  uint64_t v7340;
  uint64_t v7341;
  unint64_t v7342;
  void *v7343;
  uint64_t v7344;
  uint64_t v7345;
  uint64_t v7346;
  uint64_t v7347;
  uint64_t v7348;
  uint64_t v7349;
  unint64_t v7350;
  void *v7351;
  uint64_t v7352;
  uint64_t v7353;
  uint64_t v7354;
  uint64_t v7355;
  uint64_t v7356;
  uint64_t v7357;
  unint64_t v7358;
  void *v7359;
  uint64_t v7360;
  uint64_t v7361;
  uint64_t v7362;
  uint64_t v7363;
  uint64_t v7364;
  uint64_t v7365;
  unint64_t v7366;
  void *v7367;
  uint64_t v7368;
  uint64_t v7369;
  uint64_t v7370;
  uint64_t v7371;
  uint64_t v7372;
  uint64_t v7373;
  unint64_t v7374;
  void *v7375;
  uint64_t v7376;
  uint64_t v7377;
  uint64_t v7378;
  uint64_t v7379;
  uint64_t v7380;
  uint64_t v7381;
  unint64_t v7382;
  void *v7383;
  uint64_t v7384;
  uint64_t v7385;
  uint64_t v7386;
  uint64_t v7387;
  uint64_t v7388;
  uint64_t v7389;
  unint64_t v7390;
  void *v7391;
  uint64_t v7392;
  uint64_t v7393;
  uint64_t v7394;
  uint64_t v7395;
  uint64_t v7396;
  uint64_t v7397;
  unint64_t v7398;
  void *v7399;
  uint64_t v7400;
  uint64_t v7401;
  uint64_t v7402;
  uint64_t v7403;
  uint64_t v7404;
  uint64_t v7405;
  unint64_t v7406;
  void *v7407;
  uint64_t v7408;
  uint64_t v7409;
  uint64_t v7410;
  uint64_t v7411;
  uint64_t v7412;
  uint64_t v7413;
  unint64_t v7414;
  void *v7415;
  uint64_t v7416;
  uint64_t v7417;
  uint64_t v7418;
  uint64_t v7419;
  uint64_t v7420;
  uint64_t v7421;
  unint64_t v7422;
  void *v7423;
  uint64_t v7424;
  uint64_t v7425;
  uint64_t v7426;
  uint64_t v7427;
  uint64_t v7428;
  uint64_t v7429;
  unint64_t v7430;
  void *v7431;
  uint64_t v7432;
  uint64_t v7433;
  uint64_t v7434;
  uint64_t v7435;
  uint64_t v7436;
  uint64_t v7437;
  unint64_t v7438;
  void *v7439;
  uint64_t v7440;
  uint64_t v7441;
  uint64_t v7442;
  uint64_t v7443;
  uint64_t v7444;
  uint64_t v7445;
  unint64_t v7446;
  void *v7447;
  uint64_t v7448;
  uint64_t v7449;
  uint64_t v7450;
  uint64_t v7451;
  uint64_t v7452;
  uint64_t v7453;
  unint64_t v7454;
  void *v7455;
  uint64_t v7456;
  uint64_t v7457;
  uint64_t v7458;
  uint64_t v7459;
  uint64_t v7460;
  uint64_t v7461;
  unint64_t v7462;
  void *v7463;
  uint64_t v7464;
  uint64_t v7465;
  uint64_t v7466;
  uint64_t v7467;
  uint64_t v7468;
  uint64_t v7469;
  unint64_t v7470;
  void *v7471;
  uint64_t v7472;
  uint64_t v7473;
  uint64_t v7474;
  uint64_t v7475;
  uint64_t v7476;
  uint64_t v7477;
  unint64_t v7478;
  void *v7479;
  uint64_t v7480;
  uint64_t v7481;
  uint64_t v7482;
  uint64_t v7483;
  uint64_t v7484;
  uint64_t v7485;
  unint64_t v7486;
  void *v7487;
  uint64_t v7488;
  uint64_t v7489;
  uint64_t v7490;
  uint64_t v7491;
  uint64_t v7492;
  uint64_t v7493;
  unint64_t v7494;
  void *v7495;
  uint64_t v7496;
  uint64_t v7497;
  uint64_t v7498;
  uint64_t v7499;
  uint64_t v7500;
  uint64_t v7501;
  unint64_t v7502;
  void *v7503;
  uint64_t v7504;
  uint64_t v7505;
  uint64_t v7506;
  uint64_t v7507;
  uint64_t v7508;
  uint64_t v7509;
  unint64_t v7510;
  void *v7511;
  uint64_t v7512;
  uint64_t v7513;
  uint64_t v7514;
  uint64_t v7515;
  uint64_t v7516;
  uint64_t v7517;
  unint64_t v7518;
  void *v7519;
  uint64_t v7520;
  uint64_t v7521;
  uint64_t v7522;
  uint64_t v7523;
  uint64_t v7524;
  uint64_t v7525;
  unint64_t v7526;
  void *v7527;
  uint64_t v7528;
  uint64_t v7529;
  uint64_t v7530;
  uint64_t v7531;
  uint64_t v7532;
  uint64_t v7533;
  unint64_t v7534;
  void *v7535;
  uint64_t v7536;
  uint64_t v7537;
  uint64_t v7538;
  uint64_t v7539;
  uint64_t v7540;
  uint64_t v7541;
  unint64_t v7542;
  void *v7543;
  uint64_t v7544;
  uint64_t v7545;
  uint64_t v7546;
  uint64_t v7547;
  uint64_t v7548;
  uint64_t v7549;
  unint64_t v7550;
  void *v7551;
  uint64_t v7552;
  uint64_t v7553;
  uint64_t v7554;
  uint64_t v7555;
  uint64_t v7556;
  uint64_t v7557;
  unint64_t v7558;
  void *v7559;
  uint64_t v7560;
  uint64_t v7561;
  uint64_t v7562;
  uint64_t v7563;
  uint64_t v7564;
  uint64_t v7565;
  unint64_t v7566;
  void *v7567;
  uint64_t v7568;
  uint64_t v7569;
  uint64_t v7570;
  uint64_t v7571;
  uint64_t v7572;
  uint64_t v7573;
  unint64_t v7574;
  void *v7575;
  uint64_t v7576;
  uint64_t v7577;
  uint64_t v7578;
  uint64_t v7579;
  uint64_t v7580;
  uint64_t v7581;
  unint64_t v7582;
  void *v7583;
  uint64_t v7584;
  uint64_t v7585;
  uint64_t v7586;
  uint64_t v7587;
  uint64_t v7588;
  uint64_t v7589;
  unint64_t v7590;
  void *v7591;
  uint64_t v7592;
  uint64_t v7593;
  uint64_t v7594;
  uint64_t v7595;
  uint64_t v7596;
  uint64_t v7597;
  unint64_t v7598;
  void *v7599;
  uint64_t v7600;
  uint64_t v7601;
  uint64_t v7602;
  uint64_t v7603;
  uint64_t v7604;
  uint64_t v7605;
  unint64_t v7606;
  void *v7607;
  uint64_t v7608;
  uint64_t v7609;
  uint64_t v7610;
  uint64_t v7611;
  uint64_t v7612;
  uint64_t v7613;
  unint64_t v7614;
  void *v7615;
  uint64_t v7616;
  uint64_t v7617;
  uint64_t v7618;
  uint64_t v7619;
  uint64_t v7620;
  uint64_t v7621;
  unint64_t v7622;
  void *v7623;
  uint64_t v7624;
  uint64_t v7625;
  uint64_t v7626;
  uint64_t v7627;
  uint64_t v7628;
  uint64_t v7629;
  unint64_t v7630;
  void *v7631;
  uint64_t v7632;
  uint64_t v7633;
  uint64_t v7634;
  uint64_t v7635;
  uint64_t v7636;
  uint64_t v7637;
  unint64_t v7638;
  void *v7639;
  uint64_t v7640;
  uint64_t v7641;
  uint64_t v7642;
  uint64_t v7643;
  uint64_t v7644;
  uint64_t v7645;
  unint64_t v7646;
  void *v7647;
  uint64_t v7648;
  uint64_t v7649;
  uint64_t v7650;
  uint64_t v7651;
  uint64_t v7652;
  uint64_t v7653;
  unint64_t v7654;
  void *v7655;
  uint64_t v7656;
  uint64_t v7657;
  uint64_t v7658;
  uint64_t v7659;
  uint64_t v7660;
  uint64_t v7661;
  unint64_t v7662;
  void *v7663;
  uint64_t v7664;
  uint64_t v7665;
  uint64_t v7666;
  uint64_t v7667;
  uint64_t v7668;
  uint64_t v7669;
  unint64_t v7670;
  void *v7671;
  uint64_t v7672;
  uint64_t v7673;
  uint64_t v7674;
  uint64_t v7675;
  uint64_t v7676;
  uint64_t v7677;
  unint64_t v7678;
  void *v7679;
  uint64_t v7680;
  uint64_t v7681;
  uint64_t v7682;
  uint64_t v7683;
  uint64_t v7684;
  uint64_t v7685;
  unint64_t v7686;
  void *v7687;
  uint64_t v7688;
  uint64_t v7689;
  uint64_t v7690;
  uint64_t v7691;
  uint64_t v7692;
  uint64_t v7693;
  unint64_t v7694;
  void *v7695;
  uint64_t v7696;
  uint64_t v7697;
  uint64_t v7698;
  uint64_t v7699;
  uint64_t v7700;
  uint64_t v7701;
  unint64_t v7702;
  void *v7703;
  uint64_t v7704;
  uint64_t v7705;
  uint64_t v7706;
  uint64_t v7707;
  uint64_t v7708;
  uint64_t v7709;
  unint64_t v7710;
  void *v7711;
  uint64_t v7712;
  uint64_t v7713;
  uint64_t v7714;
  uint64_t v7715;
  uint64_t v7716;
  uint64_t v7717;
  unint64_t v7718;
  void *v7719;
  uint64_t v7720;
  uint64_t v7721;
  uint64_t v7722;
  uint64_t v7723;
  uint64_t v7724;
  uint64_t v7725;
  unint64_t v7726;
  void *v7727;
  uint64_t v7728;
  uint64_t v7729;
  uint64_t v7730;
  uint64_t v7731;
  uint64_t v7732;
  uint64_t v7733;
  unint64_t v7734;
  void *v7735;
  uint64_t v7736;
  uint64_t v7737;
  uint64_t v7738;
  uint64_t v7739;
  uint64_t v7740;
  uint64_t v7741;
  unint64_t v7742;
  void *v7743;
  uint64_t v7744;
  uint64_t v7745;
  uint64_t v7746;
  uint64_t v7747;
  uint64_t v7748;
  uint64_t v7749;
  unint64_t v7750;
  void *v7751;
  uint64_t v7752;
  uint64_t v7753;
  uint64_t v7754;
  uint64_t v7755;
  uint64_t v7756;
  uint64_t v7757;
  unint64_t v7758;
  void *v7759;
  uint64_t v7760;
  uint64_t v7761;
  uint64_t v7762;
  uint64_t v7763;
  uint64_t v7764;
  uint64_t v7765;
  unint64_t v7766;
  void *v7767;
  uint64_t v7768;
  uint64_t v7769;
  uint64_t v7770;
  uint64_t v7771;
  uint64_t v7772;
  uint64_t v7773;
  unint64_t v7774;
  void *v7775;
  uint64_t v7776;
  uint64_t v7777;
  uint64_t v7778;
  uint64_t v7779;
  uint64_t v7780;
  uint64_t v7781;
  unint64_t v7782;
  void *v7783;
  uint64_t v7784;
  uint64_t v7785;
  uint64_t v7786;
  uint64_t v7787;
  uint64_t v7788;
  uint64_t v7789;
  unint64_t v7790;
  void *v7791;
  uint64_t v7792;
  uint64_t v7793;
  uint64_t v7794;
  uint64_t v7795;
  uint64_t v7796;
  uint64_t v7797;
  unint64_t v7798;
  void *v7799;
  uint64_t v7800;
  uint64_t v7801;
  uint64_t v7802;
  uint64_t v7803;
  uint64_t v7804;
  uint64_t v7805;
  unint64_t v7806;
  void *v7807;
  uint64_t v7808;
  uint64_t v7809;
  uint64_t v7810;
  uint64_t v7811;
  uint64_t v7812;
  uint64_t v7813;
  unint64_t v7814;
  void *v7815;
  uint64_t v7816;
  uint64_t v7817;
  uint64_t v7818;
  uint64_t v7819;
  uint64_t v7820;
  uint64_t v7821;
  unint64_t v7822;
  void *v7823;
  uint64_t v7824;
  uint64_t v7825;
  uint64_t v7826;
  uint64_t v7827;
  uint64_t v7828;
  uint64_t v7829;
  unint64_t v7830;
  void *v7831;
  uint64_t v7832;
  uint64_t v7833;
  uint64_t v7834;
  uint64_t v7835;
  uint64_t v7836;
  uint64_t v7837;
  unint64_t v7838;
  void *v7839;
  uint64_t v7840;
  uint64_t v7841;
  uint64_t v7842;
  uint64_t v7843;
  uint64_t v7844;
  uint64_t v7845;
  unint64_t v7846;
  void *v7847;
  uint64_t v7848;
  uint64_t v7849;
  uint64_t v7850;
  uint64_t v7851;
  uint64_t v7852;
  uint64_t v7853;
  unint64_t v7854;
  void *v7855;
  uint64_t v7856;
  uint64_t v7857;
  uint64_t v7858;
  uint64_t v7859;
  uint64_t v7860;
  uint64_t v7861;
  unint64_t v7862;
  void *v7863;
  uint64_t v7864;
  uint64_t v7865;
  uint64_t v7866;
  uint64_t v7867;
  uint64_t v7868;
  uint64_t v7869;
  unint64_t v7870;
  void *v7871;
  uint64_t v7872;
  uint64_t v7873;
  uint64_t v7874;
  uint64_t v7875;
  uint64_t v7876;
  uint64_t v7877;
  unint64_t v7878;
  void *v7879;
  uint64_t v7880;
  uint64_t v7881;
  uint64_t v7882;
  uint64_t v7883;
  uint64_t v7884;
  uint64_t v7885;
  unint64_t v7886;
  void *v7887;
  uint64_t v7888;
  uint64_t v7889;
  uint64_t v7890;
  uint64_t v7891;
  uint64_t v7892;
  uint64_t v7893;
  unint64_t v7894;
  void *v7895;
  uint64_t v7896;
  uint64_t v7897;
  uint64_t v7898;
  uint64_t v7899;
  uint64_t v7900;
  uint64_t v7901;
  unint64_t v7902;
  void *v7903;
  uint64_t v7904;
  uint64_t v7905;
  uint64_t v7906;
  uint64_t v7907;
  uint64_t v7908;
  uint64_t v7909;
  unint64_t v7910;
  void *v7911;
  uint64_t v7912;
  uint64_t v7913;
  uint64_t v7914;
  uint64_t v7915;
  uint64_t v7916;
  uint64_t v7917;
  unint64_t v7918;
  void *v7919;
  uint64_t v7920;
  uint64_t v7921;
  uint64_t v7922;
  uint64_t v7923;
  uint64_t v7924;
  uint64_t v7925;
  unint64_t v7926;
  void *v7927;
  uint64_t v7928;
  uint64_t v7929;
  uint64_t v7930;
  uint64_t v7931;
  uint64_t v7932;
  uint64_t v7933;
  unint64_t v7934;
  void *v7935;
  uint64_t v7936;
  uint64_t v7937;
  uint64_t v7938;
  uint64_t v7939;
  uint64_t v7940;
  uint64_t v7941;
  unint64_t v7942;
  void *v7943;
  uint64_t v7944;
  uint64_t v7945;
  uint64_t v7946;
  uint64_t v7947;
  uint64_t v7948;
  uint64_t v7949;
  unint64_t v7950;
  void *v7951;
  uint64_t v7952;
  uint64_t v7953;
  uint64_t v7954;
  uint64_t v7955;
  uint64_t v7956;
  uint64_t v7957;
  unint64_t v7958;
  void *v7959;
  uint64_t v7960;
  uint64_t v7961;
  uint64_t v7962;
  uint64_t v7963;
  uint64_t v7964;
  uint64_t v7965;
  unint64_t v7966;
  void *v7967;
  uint64_t v7968;
  uint64_t v7969;
  uint64_t v7970;
  uint64_t v7971;
  uint64_t v7972;
  uint64_t v7973;
  unint64_t v7974;
  void *v7975;
  uint64_t v7976;
  uint64_t v7977;
  uint64_t v7978;
  uint64_t v7979;
  uint64_t v7980;
  uint64_t v7981;
  unint64_t v7982;
  void *v7983;
  uint64_t v7984;
  uint64_t v7985;
  uint64_t v7986;
  uint64_t v7987;
  uint64_t v7988;
  uint64_t v7989;
  unint64_t v7990;
  void *v7991;
  uint64_t v7992;
  uint64_t v7993;
  uint64_t v7994;
  uint64_t v7995;
  uint64_t v7996;
  uint64_t v7997;
  unint64_t v7998;
  void *v7999;
  uint64_t v8000;
  uint64_t v8001;
  uint64_t v8002;
  uint64_t v8003;
  uint64_t v8004;
  uint64_t v8005;
  unint64_t v8006;
  void *v8007;
  uint64_t v8008;
  uint64_t v8009;
  uint64_t v8010;
  uint64_t v8011;
  uint64_t v8012;
  uint64_t v8013;
  unint64_t v8014;
  void *v8015;
  uint64_t v8016;
  uint64_t v8017;
  uint64_t v8018;
  uint64_t v8019;
  uint64_t v8020;
  uint64_t v8021;
  unint64_t v8022;
  void *v8023;
  uint64_t v8024;
  uint64_t v8025;
  uint64_t v8026;
  uint64_t v8027;
  uint64_t v8028;
  uint64_t v8029;
  unint64_t v8030;
  void *v8031;
  uint64_t v8032;
  uint64_t v8033;
  uint64_t v8034;
  uint64_t v8035;
  uint64_t v8036;
  uint64_t v8037;
  unint64_t v8038;
  void *v8039;
  uint64_t v8040;
  uint64_t v8041;
  uint64_t v8042;
  uint64_t v8043;
  uint64_t v8044;
  uint64_t v8045;
  unint64_t v8046;
  void *v8047;
  uint64_t v8048;
  uint64_t v8049;
  uint64_t v8050;
  uint64_t v8051;
  uint64_t v8052;
  uint64_t v8053;
  unint64_t v8054;
  void *v8055;
  uint64_t v8056;
  uint64_t v8057;
  uint64_t v8058;
  uint64_t v8059;
  uint64_t v8060;
  uint64_t v8061;
  unint64_t v8062;
  void *v8063;
  uint64_t v8064;
  uint64_t v8065;
  uint64_t v8066;
  uint64_t v8067;
  uint64_t v8068;
  uint64_t v8069;
  unint64_t v8070;
  void *v8071;
  uint64_t v8072;
  uint64_t v8073;
  uint64_t v8074;
  uint64_t v8075;
  uint64_t v8076;
  uint64_t v8077;
  unint64_t v8078;
  void *v8079;
  uint64_t v8080;
  uint64_t v8081;
  uint64_t v8082;
  uint64_t v8083;
  uint64_t v8084;
  uint64_t v8085;
  unint64_t v8086;
  void *v8087;
  uint64_t v8088;
  uint64_t v8089;
  uint64_t v8090;
  uint64_t v8091;
  uint64_t v8092;
  uint64_t v8093;
  unint64_t v8094;
  void *v8095;
  uint64_t v8096;
  uint64_t v8097;
  uint64_t v8098;
  uint64_t v8099;
  uint64_t v8100;
  uint64_t v8101;
  unint64_t v8102;
  void *v8103;
  uint64_t v8104;
  uint64_t v8105;
  uint64_t v8106;
  uint64_t v8107;
  uint64_t v8108;
  uint64_t v8109;
  unint64_t v8110;
  void *v8111;
  uint64_t v8112;
  uint64_t v8113;
  uint64_t v8114;
  uint64_t v8115;
  uint64_t v8116;
  uint64_t v8117;
  unint64_t v8118;
  void *v8119;
  uint64_t v8120;
  uint64_t v8121;
  uint64_t v8122;
  uint64_t v8123;
  uint64_t v8124;
  uint64_t v8125;
  unint64_t v8126;
  void *v8127;
  uint64_t v8128;
  uint64_t v8129;
  uint64_t v8130;
  uint64_t v8131;
  uint64_t v8132;
  uint64_t v8133;
  unint64_t v8134;
  void *v8135;
  uint64_t v8136;
  uint64_t v8137;
  uint64_t v8138;
  uint64_t v8139;
  uint64_t v8140;
  uint64_t v8141;
  unint64_t v8142;
  void *v8143;
  uint64_t v8144;
  uint64_t v8145;
  uint64_t v8146;
  uint64_t v8147;
  uint64_t v8148;
  uint64_t v8149;
  unint64_t v8150;
  void *v8151;
  uint64_t v8152;
  uint64_t v8153;
  uint64_t v8154;
  uint64_t v8155;
  uint64_t v8156;
  uint64_t v8157;
  unint64_t v8158;
  void *v8159;
  uint64_t v8160;
  uint64_t v8161;
  uint64_t v8162;
  uint64_t v8163;
  uint64_t v8164;
  uint64_t v8165;
  unint64_t v8166;
  void *v8167;
  uint64_t v8168;
  uint64_t v8169;
  uint64_t v8170;
  uint64_t v8171;
  uint64_t v8172;
  uint64_t v8173;
  unint64_t v8174;
  void *v8175;
  uint64_t v8176;
  uint64_t v8177;
  uint64_t v8178;
  uint64_t v8179;
  uint64_t v8180;
  uint64_t v8181;
  unint64_t v8182;
  void *v8183;
  uint64_t v8184;
  uint64_t v8185;
  uint64_t v8186;
  uint64_t v8187;
  uint64_t v8188;
  uint64_t v8189;
  unint64_t v8190;
  void *v8191;
  uint64_t v8192;
  uint64_t v8193;
  uint64_t v8194;
  uint64_t v8195;
  uint64_t v8196;
  uint64_t v8197;
  unint64_t v8198;
  void *v8199;
  uint64_t v8200;
  uint64_t v8201;
  uint64_t v8202;
  uint64_t v8203;
  uint64_t v8204;
  uint64_t v8205;
  unint64_t v8206;
  void *v8207;
  uint64_t v8208;
  uint64_t v8209;
  uint64_t v8210;
  uint64_t v8211;
  uint64_t v8212;
  uint64_t v8213;
  unint64_t v8214;
  void *v8215;
  uint64_t v8216;
  uint64_t v8217;
  uint64_t v8218;
  uint64_t v8219;
  uint64_t v8220;
  uint64_t v8221;
  unint64_t v8222;
  void *v8223;
  uint64_t v8224;
  uint64_t v8225;
  uint64_t v8226;
  uint64_t v8227;
  uint64_t v8228;
  uint64_t v8229;
  unint64_t v8230;
  void *v8231;
  uint64_t v8232;
  uint64_t v8233;
  uint64_t v8234;
  uint64_t v8235;
  uint64_t v8236;
  uint64_t v8237;
  unint64_t v8238;
  void *v8239;
  uint64_t v8240;
  uint64_t v8241;
  uint64_t v8242;
  uint64_t v8243;
  uint64_t v8244;
  uint64_t v8245;
  unint64_t v8246;
  void *v8247;
  uint64_t v8248;
  uint64_t v8249;
  uint64_t v8250;
  uint64_t v8251;
  uint64_t v8252;
  uint64_t v8253;
  unint64_t v8254;
  void *v8255;
  uint64_t v8256;
  uint64_t v8257;
  uint64_t v8258;
  uint64_t v8259;
  uint64_t v8260;
  uint64_t v8261;
  unint64_t v8262;
  void *v8263;
  uint64_t v8264;
  uint64_t v8265;
  uint64_t v8266;
  uint64_t v8267;
  uint64_t v8268;
  uint64_t v8269;
  unint64_t v8270;
  void *v8271;
  uint64_t v8272;
  uint64_t v8273;
  uint64_t v8274;
  uint64_t v8275;
  uint64_t v8276;
  uint64_t v8277;
  unint64_t v8278;
  void *v8279;
  uint64_t v8280;
  uint64_t v8281;
  uint64_t v8282;
  uint64_t v8283;
  uint64_t v8284;
  uint64_t v8285;
  unint64_t v8286;
  void *v8287;
  uint64_t v8288;
  uint64_t v8289;
  uint64_t v8290;
  uint64_t v8291;
  uint64_t v8292;
  uint64_t v8293;
  unint64_t v8294;
  void *v8295;
  uint64_t v8296;
  uint64_t v8297;
  uint64_t v8298;
  uint64_t v8299;
  uint64_t v8300;
  uint64_t v8301;
  unint64_t v8302;
  void *v8303;
  uint64_t v8304;
  uint64_t v8305;
  uint64_t v8306;
  uint64_t v8307;
  uint64_t v8308;
  uint64_t v8309;
  unint64_t v8310;
  void *v8311;
  uint64_t v8312;
  uint64_t v8313;
  uint64_t v8314;
  uint64_t v8315;
  uint64_t v8316;
  uint64_t v8317;
  unint64_t v8318;
  void *v8319;
  uint64_t v8320;
  uint64_t v8321;
  uint64_t v8322;
  uint64_t v8323;
  uint64_t v8324;
  uint64_t v8325;
  unint64_t v8326;
  void *v8327;
  uint64_t v8328;
  uint64_t v8329;
  uint64_t v8330;
  uint64_t v8331;
  uint64_t v8332;
  uint64_t v8333;
  unint64_t v8334;
  void *v8335;
  uint64_t v8336;
  uint64_t v8337;
  uint64_t v8338;
  uint64_t v8339;
  uint64_t v8340;
  uint64_t v8341;
  unint64_t v8342;
  void *v8343;
  uint64_t v8344;
  uint64_t v8345;
  uint64_t v8346;
  uint64_t v8347;
  uint64_t v8348;
  uint64_t v8349;
  unint64_t v8350;
  void *v8351;
  uint64_t v8352;
  uint64_t v8353;
  uint64_t v8354;
  uint64_t v8355;
  uint64_t v8356;
  uint64_t v8357;
  unint64_t v8358;
  void *v8359;
  uint64_t v8360;
  uint64_t v8361;
  uint64_t v8362;
  uint64_t v8363;
  uint64_t v8364;
  uint64_t v8365;
  unint64_t v8366;
  void *v8367;
  uint64_t v8368;
  uint64_t v8369;
  uint64_t v8370;
  uint64_t v8371;
  uint64_t v8372;
  uint64_t v8373;
  unint64_t v8374;
  void *v8375;
  uint64_t v8376;
  uint64_t v8377;
  uint64_t v8378;
  uint64_t v8379;
  uint64_t v8380;
  uint64_t v8381;
  unint64_t v8382;
  void *v8383;
  uint64_t v8384;
  uint64_t v8385;
  uint64_t v8386;
  uint64_t v8387;
  uint64_t v8388;
  uint64_t v8389;
  unint64_t v8390;
  void *v8391;
  uint64_t v8392;
  uint64_t v8393;
  uint64_t v8394;
  uint64_t v8395;
  uint64_t v8396;
  uint64_t v8397;
  unint64_t v8398;
  void *v8399;
  uint64_t v8400;
  uint64_t v8401;
  uint64_t v8402;
  uint64_t v8403;
  uint64_t v8404;
  uint64_t v8405;
  unint64_t v8406;
  void *v8407;
  uint64_t v8408;
  uint64_t v8409;
  uint64_t v8410;
  uint64_t v8411;
  uint64_t v8412;
  uint64_t v8413;
  unint64_t v8414;
  void *v8415;
  uint64_t v8416;
  uint64_t v8417;
  uint64_t v8418;
  uint64_t v8419;
  uint64_t v8420;
  uint64_t v8421;
  unint64_t v8422;
  void *v8423;
  uint64_t v8424;
  uint64_t v8425;
  uint64_t v8426;
  uint64_t v8427;
  uint64_t v8428;
  uint64_t v8429;
  unint64_t v8430;
  void *v8431;
  uint64_t v8432;
  uint64_t v8433;
  uint64_t v8434;
  uint64_t v8435;
  uint64_t v8436;
  uint64_t v8437;
  unint64_t v8438;
  void *v8439;
  uint64_t v8440;
  uint64_t v8441;
  uint64_t v8442;
  uint64_t v8443;
  uint64_t v8444;
  uint64_t v8445;
  unint64_t v8446;
  void *v8447;
  uint64_t v8448;
  uint64_t v8449;
  uint64_t v8450;
  uint64_t v8451;
  uint64_t v8452;
  uint64_t v8453;
  unint64_t v8454;
  void *v8455;
  uint64_t v8456;
  uint64_t v8457;
  uint64_t v8458;
  uint64_t v8459;
  uint64_t v8460;
  uint64_t v8461;
  unint64_t v8462;
  void *v8463;
  uint64_t v8464;
  uint64_t v8465;
  uint64_t v8466;
  uint64_t v8467;
  uint64_t v8468;
  uint64_t v8469;
  unint64_t v8470;
  void *v8471;
  uint64_t v8472;
  uint64_t v8473;
  uint64_t v8474;
  uint64_t v8475;
  uint64_t v8476;
  uint64_t v8477;
  unint64_t v8478;
  void *v8479;
  uint64_t v8480;
  uint64_t v8481;
  uint64_t v8482;
  uint64_t v8483;
  uint64_t v8484;
  uint64_t v8485;
  unint64_t v8486;
  void *v8487;
  uint64_t v8488;
  uint64_t v8489;
  uint64_t v8490;
  uint64_t v8491;
  uint64_t v8492;
  uint64_t v8493;
  unint64_t v8494;
  void *v8495;
  uint64_t v8496;
  uint64_t v8497;
  uint64_t v8498;
  uint64_t v8499;
  uint64_t v8500;
  uint64_t v8501;
  unint64_t v8502;
  void *v8503;
  uint64_t v8504;
  uint64_t v8505;
  uint64_t v8506;
  uint64_t v8507;
  uint64_t v8508;
  uint64_t v8509;
  unint64_t v8510;
  void *v8511;
  uint64_t v8512;
  uint64_t v8513;
  uint64_t v8514;
  uint64_t v8515;
  uint64_t v8516;
  uint64_t v8517;
  unint64_t v8518;
  void *v8519;
  uint64_t v8520;
  uint64_t v8521;
  uint64_t v8522;
  uint64_t v8523;
  uint64_t v8524;
  uint64_t v8525;
  unint64_t v8526;
  void *v8527;
  uint64_t v8528;
  uint64_t v8529;
  uint64_t v8530;
  uint64_t v8531;
  uint64_t v8532;
  uint64_t v8533;
  unint64_t v8534;
  void *v8535;
  uint64_t v8536;
  uint64_t v8537;
  uint64_t v8538;
  uint64_t v8539;
  uint64_t v8540;
  uint64_t v8541;
  unint64_t v8542;
  void *v8543;
  uint64_t v8544;
  uint64_t v8545;
  uint64_t v8546;
  uint64_t v8547;
  uint64_t v8548;
  uint64_t v8549;
  unint64_t v8550;
  void *v8551;
  uint64_t v8552;
  uint64_t v8553;
  uint64_t v8554;
  uint64_t v8555;
  uint64_t v8556;
  uint64_t v8557;
  unint64_t v8558;
  void *v8559;
  uint64_t v8560;
  uint64_t v8561;
  uint64_t v8562;
  uint64_t v8563;
  uint64_t v8564;
  uint64_t v8565;
  unint64_t v8566;
  void *v8567;
  uint64_t v8568;
  uint64_t v8569;
  uint64_t v8570;
  uint64_t v8571;
  uint64_t v8572;
  uint64_t v8573;
  unint64_t v8574;
  void *v8575;
  uint64_t v8576;
  uint64_t v8577;
  uint64_t v8578;
  uint64_t v8579;
  uint64_t v8580;
  uint64_t v8581;
  unint64_t v8582;
  void *v8583;
  uint64_t v8584;
  uint64_t v8585;
  uint64_t v8586;
  uint64_t v8587;
  uint64_t v8588;
  uint64_t v8589;
  unint64_t v8590;
  void *v8591;
  uint64_t v8592;
  uint64_t v8593;
  uint64_t v8594;
  uint64_t v8595;
  uint64_t v8596;
  uint64_t v8597;
  unint64_t v8598;
  void *v8599;
  uint64_t v8600;
  uint64_t v8601;
  uint64_t v8602;
  uint64_t v8603;
  uint64_t v8604;
  uint64_t v8605;
  unint64_t v8606;
  void *v8607;
  uint64_t v8608;
  uint64_t v8609;
  uint64_t v8610;
  uint64_t v8611;
  uint64_t v8612;
  uint64_t v8613;
  unint64_t v8614;
  void *v8615;
  uint64_t v8616;
  uint64_t v8617;
  uint64_t v8618;
  uint64_t v8619;
  uint64_t v8620;
  uint64_t v8621;
  unint64_t v8622;
  void *v8623;
  uint64_t v8624;
  uint64_t v8625;
  uint64_t v8626;
  uint64_t v8627;
  uint64_t v8628;
  uint64_t v8629;
  unint64_t v8630;
  void *v8631;
  uint64_t v8632;
  uint64_t v8633;
  uint64_t v8634;
  uint64_t v8635;
  uint64_t v8636;
  uint64_t v8637;
  unint64_t v8638;
  void *v8639;
  uint64_t v8640;
  uint64_t v8641;
  uint64_t v8642;
  uint64_t v8643;
  uint64_t v8644;
  uint64_t v8645;
  unint64_t v8646;
  void *v8647;
  uint64_t v8648;
  uint64_t v8649;
  uint64_t v8650;
  uint64_t v8651;
  uint64_t v8652;
  uint64_t v8653;
  unint64_t v8654;
  void *v8655;
  uint64_t v8656;
  uint64_t v8657;
  uint64_t v8658;
  uint64_t v8659;
  uint64_t v8660;
  uint64_t v8661;
  unint64_t v8662;
  void *v8663;
  uint64_t v8664;
  uint64_t v8665;
  uint64_t v8666;
  uint64_t v8667;
  uint64_t v8668;
  uint64_t v8669;
  unint64_t v8670;
  void *v8671;
  uint64_t v8672;
  uint64_t v8673;
  uint64_t v8674;
  uint64_t v8675;
  uint64_t v8676;
  uint64_t v8677;
  unint64_t v8678;
  void *v8679;
  uint64_t v8680;
  uint64_t v8681;
  uint64_t v8682;
  uint64_t v8683;
  uint64_t v8684;
  uint64_t v8685;
  unint64_t v8686;
  void *v8687;
  uint64_t v8688;
  uint64_t v8689;
  uint64_t v8690;
  uint64_t v8691;
  uint64_t v8692;
  uint64_t v8693;
  unint64_t v8694;
  void *v8695;
  uint64_t v8696;
  uint64_t v8697;
  uint64_t v8698;
  uint64_t v8699;
  uint64_t v8700;
  uint64_t v8701;
  unint64_t v8702;
  void *v8703;
  uint64_t v8704;
  uint64_t v8705;
  uint64_t v8706;
  uint64_t v8707;
  uint64_t v8708;
  uint64_t v8709;
  unint64_t v8710;
  void *v8711;
  uint64_t v8712;
  uint64_t v8713;
  uint64_t v8714;
  uint64_t v8715;
  uint64_t v8716;
  uint64_t v8717;
  unint64_t v8718;
  void *v8719;
  uint64_t v8720;
  uint64_t v8721;
  uint64_t v8722;
  uint64_t v8723;
  uint64_t v8724;
  uint64_t v8725;
  unint64_t v8726;
  void *v8727;
  uint64_t v8728;
  uint64_t v8729;
  uint64_t v8730;
  uint64_t v8731;
  uint64_t v8732;
  uint64_t v8733;
  unint64_t v8734;
  void *v8735;
  uint64_t v8736;
  uint64_t v8737;
  uint64_t v8738;
  uint64_t v8739;
  uint64_t v8740;
  uint64_t v8741;
  unint64_t v8742;
  void *v8743;
  uint64_t v8744;
  uint64_t v8745;
  uint64_t v8746;
  uint64_t v8747;
  uint64_t v8748;
  uint64_t v8749;
  unint64_t v8750;
  void *v8751;
  uint64_t v8752;
  uint64_t v8753;
  uint64_t v8754;
  uint64_t v8755;
  uint64_t v8756;
  uint64_t v8757;
  unint64_t v8758;
  void *v8759;
  uint64_t v8760;
  uint64_t v8761;
  uint64_t v8762;
  uint64_t v8763;
  uint64_t v8764;
  uint64_t v8765;
  unint64_t v8766;
  void *v8767;
  uint64_t v8768;
  uint64_t v8769;
  uint64_t v8770;
  uint64_t v8771;
  uint64_t v8772;
  uint64_t v8773;
  unint64_t v8774;
  void *v8775;
  uint64_t v8776;
  uint64_t v8777;
  uint64_t v8778;
  uint64_t v8779;
  uint64_t v8780;
  uint64_t v8781;
  unint64_t v8782;
  void *v8783;
  uint64_t v8784;
  uint64_t v8785;
  uint64_t v8786;
  uint64_t v8787;
  uint64_t v8788;
  uint64_t v8789;
  unint64_t v8790;
  void *v8791;
  uint64_t v8792;
  uint64_t v8793;
  uint64_t v8794;
  uint64_t v8795;
  uint64_t v8796;
  uint64_t v8797;
  unint64_t v8798;
  void *v8799;
  uint64_t v8800;
  uint64_t v8801;
  uint64_t v8802;
  uint64_t v8803;
  uint64_t v8804;
  uint64_t v8805;
  unint64_t v8806;
  void *v8807;
  uint64_t v8808;
  uint64_t v8809;
  uint64_t v8810;
  uint64_t v8811;
  uint64_t v8812;
  uint64_t v8813;
  unint64_t v8814;
  void *v8815;
  uint64_t v8816;
  uint64_t v8817;
  uint64_t v8818;
  uint64_t v8819;
  uint64_t v8820;
  uint64_t v8821;
  unint64_t v8822;
  void *v8823;
  uint64_t v8824;
  uint64_t v8825;
  uint64_t v8826;
  uint64_t v8827;
  uint64_t v8828;
  uint64_t v8829;
  unint64_t v8830;
  void *v8831;
  uint64_t v8832;
  uint64_t v8833;
  uint64_t v8834;
  uint64_t v8835;
  uint64_t v8836;
  uint64_t v8837;
  unint64_t v8838;
  void *v8839;
  uint64_t v8840;
  uint64_t v8841;
  uint64_t v8842;
  uint64_t v8843;
  uint64_t v8844;
  uint64_t v8845;
  unint64_t v8846;
  void *v8847;
  uint64_t v8848;
  uint64_t v8849;
  uint64_t v8850;
  uint64_t v8851;
  uint64_t v8852;
  uint64_t v8853;
  unint64_t v8854;
  void *v8855;
  uint64_t v8856;
  uint64_t v8857;
  uint64_t v8858;
  uint64_t v8859;
  uint64_t v8860;
  uint64_t v8861;
  unint64_t v8862;
  void *v8863;
  uint64_t v8864;
  uint64_t v8865;
  uint64_t v8866;
  uint64_t v8867;
  uint64_t v8868;
  uint64_t v8869;
  unint64_t v8870;
  void *v8871;
  uint64_t v8872;
  uint64_t v8873;
  uint64_t v8874;
  uint64_t v8875;
  uint64_t v8876;
  uint64_t v8877;
  unint64_t v8878;
  void *v8879;
  uint64_t v8880;
  uint64_t v8881;
  uint64_t v8882;
  uint64_t v8883;
  uint64_t v8884;
  uint64_t v8885;
  unint64_t v8886;
  void *v8887;
  uint64_t v8888;
  uint64_t v8889;
  uint64_t v8890;
  uint64_t v8891;
  uint64_t v8892;
  uint64_t v8893;
  unint64_t v8894;
  void *v8895;
  uint64_t v8896;
  uint64_t v8897;
  uint64_t v8898;
  uint64_t v8899;
  uint64_t v8900;
  uint64_t v8901;
  unint64_t v8902;
  void *v8903;
  uint64_t v8904;
  uint64_t v8905;
  uint64_t v8906;
  uint64_t v8907;
  uint64_t v8908;
  uint64_t v8909;
  unint64_t v8910;
  void *v8911;
  uint64_t v8912;
  uint64_t v8913;
  uint64_t v8914;
  uint64_t v8915;
  uint64_t v8916;
  uint64_t v8917;
  unint64_t v8918;
  void *v8919;
  uint64_t v8920;
  uint64_t v8921;
  uint64_t v8922;
  uint64_t v8923;
  uint64_t v8924;
  uint64_t v8925;
  unint64_t v8926;
  void *v8927;
  uint64_t v8928;
  uint64_t v8929;
  uint64_t v8930;
  uint64_t v8931;
  uint64_t v8932;
  uint64_t v8933;
  unint64_t v8934;
  void *v8935;
  uint64_t v8936;
  uint64_t v8937;
  uint64_t v8938;
  uint64_t v8939;
  uint64_t v8940;
  uint64_t v8941;
  unint64_t v8942;
  void *v8943;
  uint64_t v8944;
  uint64_t v8945;
  uint64_t v8946;
  uint64_t v8947;
  uint64_t v8948;
  uint64_t v8949;
  unint64_t v8950;
  void *v8951;
  uint64_t v8952;
  uint64_t v8953;
  uint64_t v8954;
  uint64_t v8955;
  uint64_t v8956;
  uint64_t v8957;
  unint64_t v8958;
  void *v8959;
  uint64_t v8960;
  uint64_t v8961;
  uint64_t v8962;
  uint64_t v8963;
  uint64_t v8964;
  uint64_t v8965;
  unint64_t v8966;
  void *v8967;
  uint64_t v8968;
  uint64_t v8969;
  uint64_t v8970;
  uint64_t v8971;
  uint64_t v8972;
  uint64_t v8973;
  unint64_t v8974;
  void *v8975;
  uint64_t v8976;
  uint64_t v8977;
  uint64_t v8978;
  uint64_t v8979;
  uint64_t v8980;
  uint64_t v8981;
  unint64_t v8982;
  void *v8983;
  uint64_t v8984;
  uint64_t v8985;
  uint64_t v8986;
  uint64_t v8987;
  uint64_t v8988;
  uint64_t v8989;
  unint64_t v8990;
  void *v8991;
  uint64_t v8992;
  uint64_t v8993;
  uint64_t v8994;
  uint64_t v8995;
  uint64_t v8996;
  uint64_t v8997;
  unint64_t v8998;
  void *v8999;
  uint64_t v9000;
  uint64_t v9001;
  uint64_t v9002;
  uint64_t v9003;
  uint64_t v9004;
  uint64_t v9005;
  unint64_t v9006;
  void *v9007;
  uint64_t v9008;
  uint64_t v9009;
  uint64_t v9010;
  uint64_t v9011;
  uint64_t v9012;
  uint64_t v9013;
  unint64_t v9014;
  void *v9015;
  uint64_t v9016;
  uint64_t v9017;
  uint64_t v9018;
  uint64_t v9019;
  uint64_t v9020;
  uint64_t v9021;
  unint64_t v9022;
  void *v9023;
  uint64_t v9024;
  uint64_t v9025;
  uint64_t v9026;
  uint64_t v9027;
  uint64_t v9028;
  uint64_t v9029;
  unint64_t v9030;
  void *v9031;
  uint64_t v9032;
  uint64_t v9033;
  uint64_t v9034;
  uint64_t v9035;
  uint64_t v9036;
  uint64_t v9037;
  unint64_t v9038;
  void *v9039;
  uint64_t v9040;
  uint64_t v9041;
  uint64_t v9042;
  uint64_t v9043;
  uint64_t v9044;
  uint64_t v9045;
  unint64_t v9046;
  void *v9047;
  uint64_t v9048;
  uint64_t v9049;
  uint64_t v9050;
  uint64_t v9051;
  uint64_t v9052;
  uint64_t v9053;
  unint64_t v9054;
  void *v9055;
  uint64_t v9056;
  uint64_t v9057;
  uint64_t v9058;
  uint64_t v9059;
  uint64_t v9060;
  uint64_t v9061;
  unint64_t v9062;
  void *v9063;
  uint64_t v9064;
  uint64_t v9065;
  uint64_t v9066;
  uint64_t v9067;
  uint64_t v9068;
  uint64_t v9069;
  unint64_t v9070;
  void *v9071;
  uint64_t v9072;
  uint64_t v9073;
  uint64_t v9074;
  uint64_t v9075;
  uint64_t v9076;
  uint64_t v9077;
  unint64_t v9078;
  void *v9079;
  uint64_t v9080;
  uint64_t v9081;
  uint64_t v9082;
  uint64_t v9083;
  uint64_t v9084;
  uint64_t v9085;
  unint64_t v9086;
  void *v9087;
  uint64_t v9088;
  uint64_t v9089;
  uint64_t v9090;
  uint64_t v9091;
  uint64_t v9092;
  uint64_t v9093;
  unint64_t v9094;
  void *v9095;
  uint64_t v9096;
  uint64_t v9097;
  uint64_t v9098;
  uint64_t v9099;
  uint64_t v9100;
  uint64_t v9101;
  unint64_t v9102;
  void *v9103;
  uint64_t v9104;
  uint64_t v9105;
  uint64_t v9106;
  uint64_t v9107;
  uint64_t v9108;
  uint64_t v9109;
  unint64_t v9110;
  void *v9111;
  uint64_t v9112;
  uint64_t v9113;
  uint64_t v9114;
  uint64_t v9115;
  uint64_t v9116;
  uint64_t v9117;
  unint64_t v9118;
  void *v9119;
  uint64_t v9120;
  uint64_t v9121;
  uint64_t v9122;
  uint64_t v9123;
  uint64_t v9124;
  uint64_t v9125;
  unint64_t v9126;
  void *v9127;
  uint64_t v9128;
  uint64_t v9129;
  uint64_t v9130;
  uint64_t v9131;
  uint64_t v9132;
  uint64_t v9133;
  unint64_t v9134;
  void *v9135;
  uint64_t v9136;
  uint64_t v9137;
  uint64_t v9138;
  uint64_t v9139;
  uint64_t v9140;
  uint64_t v9141;
  unint64_t v9142;
  void *v9143;
  uint64_t v9144;
  uint64_t v9145;
  uint64_t v9146;
  uint64_t v9147;
  uint64_t v9148;
  uint64_t v9149;
  unint64_t v9150;
  void *v9151;
  uint64_t v9152;
  uint64_t v9153;
  uint64_t v9154;
  uint64_t v9155;
  uint64_t v9156;
  uint64_t v9157;
  unint64_t v9158;
  void *v9159;
  uint64_t v9160;
  uint64_t v9161;
  uint64_t v9162;
  uint64_t v9163;
  uint64_t v9164;
  uint64_t v9165;
  unint64_t v9166;
  void *v9167;
  uint64_t v9168;
  uint64_t v9169;
  uint64_t v9170;
  uint64_t v9171;
  uint64_t v9172;
  uint64_t v9173;
  unint64_t v9174;
  void *v9175;
  uint64_t v9176;
  uint64_t v9177;
  uint64_t v9178;
  uint64_t v9179;
  uint64_t v9180;
  uint64_t v9181;
  unint64_t v9182;
  void *v9183;
  uint64_t v9184;
  uint64_t v9185;
  uint64_t v9186;
  uint64_t v9187;
  uint64_t v9188;
  uint64_t v9189;
  unint64_t v9190;
  void *v9191;
  uint64_t v9192;
  uint64_t v9193;
  uint64_t v9194;
  uint64_t v9195;
  uint64_t v9196;
  uint64_t v9197;
  unint64_t v9198;
  void *v9199;
  uint64_t v9200;
  uint64_t v9201;
  uint64_t v9202;
  uint64_t v9203;
  uint64_t v9204;
  uint64_t v9205;
  unint64_t v9206;
  void *v9207;
  uint64_t v9208;
  uint64_t v9209;
  uint64_t v9210;
  uint64_t v9211;
  uint64_t v9212;
  uint64_t v9213;
  unint64_t v9214;
  void *v9215;
  uint64_t v9216;
  uint64_t v9217;
  uint64_t v9218;
  uint64_t v9219;
  uint64_t v9220;
  uint64_t v9221;
  unint64_t v9222;
  void *v9223;
  uint64_t v9224;
  uint64_t v9225;
  uint64_t v9226;
  uint64_t v9227;
  uint64_t v9228;
  uint64_t v9229;
  unint64_t v9230;
  void *v9231;
  uint64_t v9232;
  uint64_t v9233;
  uint64_t v9234;
  uint64_t v9235;
  uint64_t v9236;
  uint64_t v9237;
  unint64_t v9238;
  void *v9239;
  uint64_t v9240;
  uint64_t v9241;
  uint64_t v9242;
  uint64_t v9243;
  uint64_t v9244;
  uint64_t v9245;
  unint64_t v9246;
  void *v9247;
  uint64_t v9248;
  uint64_t v9249;
  uint64_t v9250;
  uint64_t v9251;
  uint64_t v9252;
  uint64_t v9253;
  unint64_t v9254;
  void *v9255;
  uint64_t v9256;
  uint64_t v9257;
  uint64_t v9258;
  uint64_t v9259;
  uint64_t v9260;
  uint64_t v9261;
  unint64_t v9262;
  void *v9263;
  uint64_t v9264;
  uint64_t v9265;
  uint64_t v9266;
  uint64_t v9267;
  uint64_t v9268;
  uint64_t v9269;
  unint64_t v9270;
  void *v9271;
  uint64_t v9272;
  uint64_t v9273;
  uint64_t v9274;
  uint64_t v9275;
  uint64_t v9276;
  uint64_t v9277;
  unint64_t v9278;
  void *v9279;
  uint64_t v9280;
  uint64_t v9281;
  uint64_t v9282;
  uint64_t v9283;
  uint64_t v9284;
  uint64_t v9285;
  unint64_t v9286;
  void *v9287;
  uint64_t v9288;
  uint64_t v9289;
  uint64_t v9290;
  uint64_t v9291;
  uint64_t v9292;
  uint64_t v9293;
  unint64_t v9294;
  void *v9295;
  uint64_t v9296;
  uint64_t v9297;
  uint64_t v9298;
  uint64_t v9299;
  uint64_t v9300;
  uint64_t v9301;
  unint64_t v9302;
  void *v9303;
  uint64_t v9304;
  uint64_t v9305;
  uint64_t v9306;
  uint64_t v9307;
  uint64_t v9308;
  uint64_t v9309;
  unint64_t v9310;
  void *v9311;
  uint64_t v9312;
  uint64_t v9313;
  uint64_t v9314;
  uint64_t v9315;
  uint64_t v9316;
  uint64_t v9317;
  unint64_t v9318;
  void *v9319;
  uint64_t v9320;
  uint64_t v9321;
  uint64_t v9322;
  uint64_t v9323;
  uint64_t v9324;
  uint64_t v9325;
  unint64_t v9326;
  void *v9327;
  uint64_t v9328;
  uint64_t v9329;
  uint64_t v9330;
  uint64_t v9331;
  uint64_t v9332;
  uint64_t v9333;
  unint64_t v9334;
  void *v9335;
  uint64_t v9336;
  uint64_t v9337;
  uint64_t v9338;
  uint64_t v9339;
  uint64_t v9340;
  uint64_t v9341;
  unint64_t v9342;
  void *v9343;
  uint64_t v9344;
  uint64_t v9345;
  uint64_t v9346;
  uint64_t v9347;
  uint64_t v9348;
  uint64_t v9349;
  unint64_t v9350;
  void *v9351;
  uint64_t v9352;
  uint64_t v9353;
  uint64_t v9354;
  uint64_t v9355;
  uint64_t v9356;
  uint64_t v9357;
  unint64_t v9358;
  void *v9359;
  uint64_t v9360;
  uint64_t v9361;
  uint64_t v9362;
  uint64_t v9363;
  uint64_t v9364;
  uint64_t v9365;
  unint64_t v9366;
  void *v9367;
  uint64_t v9368;
  uint64_t v9369;
  uint64_t v9370;
  uint64_t v9371;
  uint64_t v9372;
  uint64_t v9373;
  unint64_t v9374;
  void *v9375;
  uint64_t v9376;
  uint64_t v9377;
  uint64_t v9378;
  uint64_t v9379;
  uint64_t v9380;
  uint64_t v9381;
  unint64_t v9382;
  void *v9383;
  uint64_t v9384;
  uint64_t v9385;
  uint64_t v9386;
  uint64_t v9387;
  uint64_t v9388;
  uint64_t v9389;
  unint64_t v9390;
  void *v9391;
  uint64_t v9392;
  uint64_t v9393;
  uint64_t v9394;
  uint64_t v9395;
  uint64_t v9396;
  uint64_t v9397;
  unint64_t v9398;
  void *v9399;
  uint64_t v9400;
  uint64_t v9401;
  uint64_t v9402;
  uint64_t v9403;
  uint64_t v9404;
  uint64_t v9405;
  unint64_t v9406;
  void *v9407;
  uint64_t v9408;
  uint64_t v9409;
  uint64_t v9410;
  uint64_t v9411;
  uint64_t v9412;
  uint64_t v9413;
  unint64_t v9414;
  void *v9415;
  uint64_t v9416;
  uint64_t v9417;
  uint64_t v9418;
  uint64_t v9419;
  uint64_t v9420;
  uint64_t v9421;
  unint64_t v9422;
  void *v9423;
  uint64_t v9424;
  uint64_t v9425;
  uint64_t v9426;
  uint64_t v9427;
  uint64_t v9428;
  uint64_t v9429;
  unint64_t v9430;
  void *v9431;
  uint64_t v9432;
  uint64_t v9433;
  uint64_t v9434;
  uint64_t v9435;
  uint64_t v9436;
  uint64_t v9437;
  unint64_t v9438;
  void *v9439;
  uint64_t v9440;
  uint64_t v9441;
  uint64_t v9442;
  uint64_t v9443;
  uint64_t v9444;
  uint64_t v9445;
  unint64_t v9446;
  void *v9447;
  uint64_t v9448;
  uint64_t v9449;
  uint64_t v9450;
  uint64_t v9451;
  uint64_t v9452;
  uint64_t v9453;
  unint64_t v9454;
  void *v9455;
  uint64_t v9456;
  uint64_t v9457;
  uint64_t v9458;
  uint64_t v9459;
  uint64_t v9460;
  uint64_t v9461;
  unint64_t v9462;
  void *v9463;
  uint64_t v9464;
  uint64_t v9465;
  uint64_t v9466;
  uint64_t v9467;
  uint64_t v9468;
  uint64_t v9469;
  unint64_t v9470;
  void *v9471;
  uint64_t v9472;
  uint64_t v9473;
  uint64_t v9474;
  uint64_t v9475;
  uint64_t v9476;
  uint64_t v9477;
  unint64_t v9478;
  void *v9479;
  uint64_t v9480;
  uint64_t v9481;
  uint64_t v9482;
  uint64_t v9483;
  uint64_t v9484;
  uint64_t v9485;
  unint64_t v9486;
  void *v9487;
  uint64_t v9488;
  uint64_t v9489;
  uint64_t v9490;
  uint64_t v9491;
  uint64_t v9492;
  uint64_t v9493;
  unint64_t v9494;
  void *v9495;
  uint64_t v9496;
  uint64_t v9497;
  uint64_t v9498;
  uint64_t v9499;
  uint64_t v9500;
  uint64_t v9501;
  unint64_t v9502;
  void *v9503;
  uint64_t v9504;
  uint64_t v9505;
  uint64_t v9506;
  uint64_t v9507;
  uint64_t v9508;
  uint64_t v9509;
  unint64_t v9510;
  void *v9511;
  uint64_t v9512;
  uint64_t v9513;
  uint64_t v9514;
  uint64_t v9515;
  uint64_t v9516;
  uint64_t v9517;
  unint64_t v9518;
  void *v9519;
  uint64_t v9520;
  uint64_t v9521;
  uint64_t v9522;
  uint64_t v9523;
  uint64_t v9524;
  uint64_t v9525;
  unint64_t v9526;
  void *v9527;
  uint64_t v9528;
  uint64_t v9529;
  uint64_t v9530;
  uint64_t v9531;
  uint64_t v9532;
  uint64_t v9533;
  unint64_t v9534;
  void *v9535;
  uint64_t v9536;
  uint64_t v9537;
  uint64_t v9538;
  uint64_t v9539;
  uint64_t v9540;
  uint64_t v9541;
  unint64_t v9542;
  void *v9543;
  uint64_t v9544;
  uint64_t v9545;
  uint64_t v9546;
  uint64_t v9547;
  uint64_t v9548;
  uint64_t v9549;
  unint64_t v9550;
  void *v9551;
  uint64_t v9552;
  uint64_t v9553;
  uint64_t v9554;
  uint64_t v9555;
  uint64_t v9556;
  uint64_t v9557;
  unint64_t v9558;
  void *v9559;
  uint64_t v9560;
  uint64_t v9561;
  uint64_t v9562;
  uint64_t v9563;
  uint64_t v9564;
  uint64_t v9565;
  unint64_t v9566;
  void *v9567;
  uint64_t v9568;
  uint64_t v9569;
  uint64_t v9570;
  uint64_t v9571;
  uint64_t v9572;
  uint64_t v9573;
  unint64_t v9574;
  void *v9575;
  uint64_t v9576;
  uint64_t v9577;
  uint64_t v9578;
  uint64_t v9579;
  uint64_t v9580;
  uint64_t v9581;
  unint64_t v9582;
  void *v9583;
  uint64_t v9584;
  uint64_t v9585;
  uint64_t v9586;
  uint64_t v9587;
  uint64_t v9588;
  uint64_t v9589;
  unint64_t v9590;
  void *v9591;
  uint64_t v9592;
  uint64_t v9593;
  uint64_t v9594;
  uint64_t v9595;
  uint64_t v9596;
  uint64_t v9597;
  unint64_t v9598;
  void *v9599;
  uint64_t v9600;
  uint64_t v9601;
  uint64_t v9602;
  uint64_t v9603;
  uint64_t v9604;
  uint64_t v9605;
  unint64_t v9606;
  void *v9607;
  uint64_t v9608;
  uint64_t v9609;
  uint64_t v9610;
  uint64_t v9611;
  uint64_t v9612;
  uint64_t v9613;
  unint64_t v9614;
  void *v9615;
  uint64_t v9616;
  uint64_t v9617;
  uint64_t v9618;
  uint64_t v9619;
  uint64_t v9620;
  uint64_t v9621;
  unint64_t v9622;
  void *v9623;
  uint64_t v9624;
  uint64_t v9625;
  uint64_t v9626;
  uint64_t v9627;
  uint64_t v9628;
  uint64_t v9629;
  unint64_t v9630;
  void *v9631;
  uint64_t v9632;
  uint64_t v9633;
  uint64_t v9634;
  uint64_t v9635;
  uint64_t v9636;
  uint64_t v9637;
  unint64_t v9638;
  void *v9639;
  uint64_t v9640;
  uint64_t v9641;
  uint64_t v9642;
  uint64_t v9643;
  uint64_t v9644;
  uint64_t v9645;
  unint64_t v9646;
  void *v9647;
  uint64_t v9648;
  uint64_t v9649;
  uint64_t v9650;
  uint64_t v9651;
  uint64_t v9652;
  uint64_t v9653;
  unint64_t v9654;
  void *v9655;
  uint64_t v9656;
  uint64_t v9657;
  uint64_t v9658;
  uint64_t v9659;
  uint64_t v9660;
  uint64_t v9661;
  unint64_t v9662;
  void *v9663;
  uint64_t v9664;
  uint64_t v9665;
  uint64_t v9666;
  uint64_t v9667;
  uint64_t v9668;
  uint64_t v9669;
  unint64_t v9670;
  void *v9671;
  uint64_t v9672;
  uint64_t v9673;
  uint64_t v9674;
  uint64_t v9675;
  uint64_t v9676;
  uint64_t v9677;
  unint64_t v9678;
  void *v9679;
  uint64_t v9680;
  uint64_t v9681;
  uint64_t v9682;
  uint64_t v9683;
  uint64_t v9684;
  uint64_t v9685;
  unint64_t v9686;
  void *v9687;
  uint64_t v9688;
  uint64_t v9689;
  uint64_t v9690;
  uint64_t v9691;
  uint64_t v9692;
  uint64_t v9693;
  unint64_t v9694;
  void *v9695;
  uint64_t v9696;
  uint64_t v9697;
  uint64_t v9698;
  uint64_t v9699;
  uint64_t v9700;
  uint64_t v9701;
  unint64_t v9702;
  void *v9703;
  uint64_t v9704;
  uint64_t v9705;
  uint64_t v9706;
  uint64_t v9707;
  uint64_t v9708;
  uint64_t v9709;
  unint64_t v9710;
  void *v9711;
  uint64_t v9712;
  uint64_t v9713;
  uint64_t v9714;
  uint64_t v9715;
  uint64_t v9716;
  uint64_t v9717;
  unint64_t v9718;
  void *v9719;
  uint64_t v9720;
  uint64_t v9721;
  uint64_t v9722;
  uint64_t v9723;
  uint64_t v9724;
  uint64_t v9725;
  unint64_t v9726;
  void *v9727;
  uint64_t v9728;
  uint64_t v9729;
  uint64_t v9730;
  uint64_t v9731;
  uint64_t v9732;
  uint64_t v9733;
  unint64_t v9734;
  void *v9735;
  uint64_t v9736;
  uint64_t v9737;
  uint64_t v9738;
  uint64_t v9739;
  uint64_t v9740;
  uint64_t v9741;
  unint64_t v9742;
  void *v9743;
  uint64_t v9744;
  uint64_t v9745;
  uint64_t v9746;
  uint64_t v9747;
  uint64_t v9748;
  uint64_t v9749;
  unint64_t v9750;
  void *v9751;
  uint64_t v9752;
  uint64_t v9753;
  uint64_t v9754;
  uint64_t v9755;
  uint64_t v9756;
  uint64_t v9757;
  unint64_t v9758;
  void *v9759;
  uint64_t v9760;
  uint64_t v9761;
  uint64_t v9762;
  uint64_t v9763;
  uint64_t v9764;
  uint64_t v9765;
  unint64_t v9766;
  void *v9767;
  uint64_t v9768;
  uint64_t v9769;
  uint64_t v9770;
  uint64_t v9771;
  uint64_t v9772;
  uint64_t v9773;
  unint64_t v9774;
  void *v9775;
  uint64_t v9776;
  uint64_t v9777;
  uint64_t v9778;
  uint64_t v9779;
  uint64_t v9780;
  uint64_t v9781;
  unint64_t v9782;
  void *v9783;
  uint64_t v9784;
  uint64_t v9785;
  uint64_t v9786;
  uint64_t v9787;
  uint64_t v9788;
  uint64_t v9789;
  unint64_t v9790;
  void *v9791;
  uint64_t v9792;
  uint64_t v9793;
  uint64_t v9794;
  uint64_t v9795;
  uint64_t v9796;
  uint64_t v9797;
  unint64_t v9798;
  void *v9799;
  uint64_t v9800;
  uint64_t v9801;
  uint64_t v9802;
  uint64_t v9803;
  uint64_t v9804;
  uint64_t v9805;
  unint64_t v9806;
  void *v9807;
  uint64_t v9808;
  uint64_t v9809;
  uint64_t v9810;
  uint64_t v9811;
  uint64_t v9812;
  uint64_t v9813;
  unint64_t v9814;
  void *v9815;
  uint64_t v9816;
  uint64_t v9817;
  uint64_t v9818;
  uint64_t v9819;
  uint64_t v9820;
  uint64_t v9821;
  unint64_t v9822;
  void *v9823;
  uint64_t v9824;
  uint64_t v9825;
  uint64_t v9826;
  uint64_t v9827;
  uint64_t v9828;
  uint64_t v9829;
  unint64_t v9830;
  void *v9831;
  uint64_t v9832;
  uint64_t v9833;
  uint64_t v9834;
  uint64_t v9835;
  uint64_t v9836;
  uint64_t v9837;
  unint64_t v9838;
  void *v9839;
  uint64_t v9840;
  uint64_t v9841;
  uint64_t v9842;
  uint64_t v9843;
  uint64_t v9844;
  uint64_t v9845;
  unint64_t v9846;
  void *v9847;
  uint64_t v9848;
  uint64_t v9849;
  uint64_t v9850;
  uint64_t v9851;
  uint64_t v9852;
  uint64_t v9853;
  unint64_t v9854;
  void *v9855;
  uint64_t v9856;
  uint64_t v9857;
  uint64_t v9858;
  uint64_t v9859;
  uint64_t v9860;
  uint64_t v9861;
  unint64_t v9862;
  void *v9863;
  uint64_t v9864;
  uint64_t v9865;
  uint64_t v9866;
  uint64_t v9867;
  uint64_t v9868;
  uint64_t v9869;
  unint64_t v9870;
  void *v9871;
  uint64_t v9872;
  uint64_t v9873;
  uint64_t v9874;
  uint64_t v9875;
  uint64_t v9876;
  uint64_t v9877;
  unint64_t v9878;
  void *v9879;
  uint64_t v9880;
  uint64_t v9881;
  uint64_t v9882;
  uint64_t v9883;
  uint64_t v9884;
  uint64_t v9885;
  unint64_t v9886;
  void *v9887;
  uint64_t v9888;
  uint64_t v9889;
  uint64_t v9890;
  uint64_t v9891;
  uint64_t v9892;
  uint64_t v9893;
  unint64_t v9894;
  void *v9895;
  uint64_t v9896;
  uint64_t v9897;
  uint64_t v9898;
  uint64_t v9899;
  uint64_t v9900;
  uint64_t v9901;
  unint64_t v9902;
  void *v9903;
  uint64_t v9904;
  uint64_t v9905;
  uint64_t v9906;
  uint64_t v9907;
  uint64_t v9908;
  uint64_t v9909;
  unint64_t v9910;
  void *v9911;
  uint64_t v9912;
  uint64_t v9913;
  uint64_t v9914;
  uint64_t v9915;
  uint64_t v9916;
  uint64_t v9917;
  unint64_t v9918;
  void *v9919;
  uint64_t v9920;
  uint64_t v9921;
  uint64_t v9922;
  uint64_t v9923;
  uint64_t v9924;
  uint64_t v9925;
  unint64_t v9926;
  void *v9927;
  uint64_t v9928;
  uint64_t v9929;
  uint64_t v9930;
  uint64_t v9931;
  uint64_t v9932;
  uint64_t v9933;
  unint64_t v9934;
  void *v9935;
  uint64_t v9936;
  uint64_t v9937;
  uint64_t v9938;
  uint64_t v9939;
  uint64_t v9940;
  uint64_t v9941;
  unint64_t v9942;
  void *v9943;
  uint64_t v9944;
  uint64_t v9945;
  uint64_t v9946;
  uint64_t v9947;
  uint64_t v9948;
  uint64_t v9949;
  unint64_t v9950;
  void *v9951;
  uint64_t v9952;
  uint64_t v9953;
  uint64_t v9954;
  uint64_t v9955;
  uint64_t v9956;
  uint64_t v9957;
  unint64_t v9958;
  void *v9959;
  uint64_t v9960;
  uint64_t v9961;
  uint64_t v9962;
  uint64_t v9963;
  uint64_t v9964;
  uint64_t v9965;
  unint64_t v9966;
  void *v9967;
  uint64_t v9968;
  uint64_t v9969;
  uint64_t v9970;
  uint64_t v9971;
  uint64_t v9972;
  uint64_t v9973;
  unint64_t v9974;
  void *v9975;
  uint64_t v9976;
  uint64_t v9977;
  uint64_t v9978;
  uint64_t v9979;
  uint64_t v9980;
  uint64_t v9981;
  unint64_t v9982;
  void *v9983;
  uint64_t v9984;
  uint64_t v9985;
  uint64_t v9986;
  uint64_t v9987;
  uint64_t v9988;
  uint64_t v9989;
  unint64_t v9990;
  void *v9991;
  uint64_t v9992;
  uint64_t v9993;
  uint64_t v9994;
  uint64_t v9995;
  uint64_t v9996;
  uint64_t v9997;
  unint64_t v9998;
  void *v9999;
  uint64_t v10000;
  uint64_t v10001;
  uint64_t v10002;
  uint64_t v10003;
  uint64_t v10004;
  uint64_t v10005;
  unint64_t v10006;
  void *v10007;
  uint64_t v10008;
  uint64_t v10009;
  uint64_t v10010;
  uint64_t v10011;
  uint64_t v10012;
  uint64_t v10013;
  unint64_t v10014;
  void *v10015;
  uint64_t v10016;
  uint64_t v10017;
  uint64_t v10018;
  uint64_t v10019;
  uint64_t v10020;
  uint64_t v10021;
  unint64_t v10022;
  void *v10023;
  uint64_t v10024;
  uint64_t v10025;
  uint64_t v10026;
  uint64_t v10027;
  uint64_t v10028;
  uint64_t v10029;
  unint64_t v10030;
  void *v10031;
  uint64_t v10032;
  uint64_t v10033;
  uint64_t v10034;
  uint64_t v10035;
  uint64_t v10036;
  uint64_t v10037;
  unint64_t v10038;
  void *v10039;
  uint64_t v10040;
  uint64_t v10041;
  uint64_t v10042;
  uint64_t v10043;
  uint64_t v10044;
  uint64_t v10045;
  unint64_t v10046;
  void *v10047;
  uint64_t v10048;
  uint64_t v10049;
  uint64_t v10050;
  uint64_t v10051;
  uint64_t v10052;
  uint64_t v10053;
  unint64_t v10054;
  void *v10055;
  uint64_t v10056;
  uint64_t v10057;
  uint64_t v10058;
  uint64_t v10059;
  uint64_t v10060;
  uint64_t v10061;
  unint64_t v10062;
  void *v10063;
  uint64_t v10064;
  uint64_t v10065;
  uint64_t v10066;
  uint64_t v10067;
  uint64_t v10068;
  uint64_t v10069;
  unint64_t v10070;
  void *v10071;
  uint64_t v10072;
  uint64_t v10073;
  uint64_t v10074;
  uint64_t v10075;
  uint64_t v10076;
  uint64_t v10077;
  unint64_t v10078;
  void *v10079;
  uint64_t v10080;
  uint64_t v10081;
  uint64_t v10082;
  uint64_t v10083;
  uint64_t v10084;
  uint64_t v10085;
  unint64_t v10086;
  void *v10087;
  uint64_t v10088;
  uint64_t v10089;
  uint64_t v10090;
  uint64_t v10091;
  uint64_t v10092;
  uint64_t v10093;
  unint64_t v10094;
  void *v10095;
  uint64_t v10096;
  uint64_t v10097;
  uint64_t v10098;
  uint64_t v10099;
  uint64_t v10100;
  uint64_t v10101;
  unint64_t v10102;
  void *v10103;
  uint64_t v10104;
  uint64_t v10105;
  uint64_t v10106;
  uint64_t v10107;
  uint64_t v10108;
  uint64_t v10109;
  unint64_t v10110;
  void *v10111;
  uint64_t v10112;
  uint64_t v10113;
  uint64_t v10114;
  uint64_t v10115;
  uint64_t v10116;
  uint64_t v10117;
  unint64_t v10118;
  void *v10119;
  uint64_t v10120;
  uint64_t v10121;
  uint64_t v10122;
  uint64_t v10123;
  uint64_t v10124;
  uint64_t v10125;
  unint64_t v10126;
  void *v10127;
  uint64_t v10128;
  uint64_t v10129;
  uint64_t v10130;
  uint64_t v10131;
  uint64_t v10132;
  uint64_t v10133;
  unint64_t v10134;
  void *v10135;
  uint64_t v10136;
  uint64_t v10137;
  uint64_t v10138;
  uint64_t v10139;
  uint64_t v10140;
  uint64_t v10141;
  unint64_t v10142;
  void *v10143;
  uint64_t v10144;
  uint64_t v10145;
  uint64_t v10146;
  uint64_t v10147;
  uint64_t v10148;
  uint64_t v10149;
  unint64_t v10150;
  void *v10151;
  uint64_t v10152;
  uint64_t v10153;
  uint64_t v10154;
  uint64_t v10155;
  uint64_t v10156;
  uint64_t v10157;
  unint64_t v10158;
  void *v10159;
  uint64_t v10160;
  uint64_t v10161;
  uint64_t v10162;
  uint64_t v10163;
  uint64_t v10164;
  uint64_t v10165;
  unint64_t v10166;
  void *v10167;
  uint64_t v10168;
  uint64_t v10169;
  uint64_t v10170;
  uint64_t v10171;
  uint64_t v10172;
  uint64_t v10173;
  unint64_t v10174;
  void *v10175;
  uint64_t v10176;
  uint64_t v10177;
  uint64_t v10178;
  uint64_t v10179;
  uint64_t v10180;
  uint64_t v10181;
  unint64_t v10182;
  void *v10183;
  uint64_t v10184;
  uint64_t v10185;
  uint64_t v10186;
  uint64_t v10187;
  uint64_t v10188;
  uint64_t v10189;
  unint64_t v10190;
  void *v10191;
  uint64_t v10192;
  uint64_t v10193;
  uint64_t v10194;
  uint64_t v10195;
  uint64_t v10196;
  uint64_t v10197;
  unint64_t v10198;
  void *v10199;
  uint64_t v10200;
  uint64_t v10201;
  uint64_t v10202;
  uint64_t v10203;
  uint64_t v10204;
  uint64_t v10205;
  unint64_t v10206;
  void *v10207;
  uint64_t v10208;
  uint64_t v10209;
  uint64_t v10210;
  uint64_t v10211;
  uint64_t v10212;
  uint64_t v10213;
  unint64_t v10214;
  void *v10215;
  uint64_t v10216;
  uint64_t v10217;
  uint64_t v10218;
  uint64_t v10219;
  uint64_t v10220;
  uint64_t v10221;
  unint64_t v10222;
  void *v10223;
  uint64_t v10224;
  uint64_t v10225;
  uint64_t v10226;
  uint64_t v10227;
  uint64_t v10228;
  uint64_t v10229;
  unint64_t v10230;
  void *v10231;
  uint64_t v10232;
  uint64_t v10233;
  uint64_t v10234;
  uint64_t v10235;
  uint64_t v10236;
  uint64_t v10237;
  unint64_t v10238;
  void *v10239;
  uint64_t v10240;
  uint64_t v10241;
  uint64_t v10242;
  uint64_t v10243;
  uint64_t v10244;
  uint64_t v10245;
  unint64_t v10246;
  void *v10247;
  uint64_t v10248;
  uint64_t v10249;
  uint64_t v10250;
  uint64_t v10251;
  uint64_t v10252;
  uint64_t v10253;
  unint64_t v10254;
  void *v10255;
  uint64_t v10256;
  uint64_t v10257;
  uint64_t v10258;
  uint64_t v10259;
  uint64_t v10260;
  uint64_t v10261;
  unint64_t v10262;
  void *v10263;
  uint64_t v10264;
  uint64_t v10265;
  uint64_t v10266;
  uint64_t v10267;
  uint64_t v10268;
  uint64_t v10269;
  unint64_t v10270;
  void *v10271;
  uint64_t v10272;
  uint64_t v10273;
  uint64_t v10274;
  uint64_t v10275;
  uint64_t v10276;
  uint64_t v10277;
  unint64_t v10278;
  void *v10279;
  uint64_t v10280;
  uint64_t v10281;
  uint64_t v10282;
  uint64_t v10283;
  uint64_t v10284;
  uint64_t v10285;
  unint64_t v10286;
  void *v10287;
  uint64_t v10288;
  uint64_t v10289;
  uint64_t v10290;
  uint64_t v10291;
  uint64_t v10292;
  uint64_t v10293;
  unint64_t v10294;
  void *v10295;
  uint64_t v10296;
  uint64_t v10297;
  uint64_t v10298;
  uint64_t v10299;
  uint64_t v10300;
  uint64_t v10301;
  unint64_t v10302;
  void *v10303;
  uint64_t v10304;
  uint64_t v10305;
  uint64_t v10306;
  uint64_t v10307;
  uint64_t v10308;
  uint64_t v10309;
  unint64_t v10310;
  void *v10311;
  uint64_t v10312;
  uint64_t v10313;
  uint64_t v10314;
  uint64_t v10315;
  uint64_t v10316;
  uint64_t v10317;
  unint64_t v10318;
  void *v10319;
  uint64_t v10320;
  uint64_t v10321;
  uint64_t v10322;
  uint64_t v10323;
  uint64_t v10324;
  uint64_t v10325;
  unint64_t v10326;
  void *v10327;
  uint64_t v10328;
  uint64_t v10329;
  uint64_t v10330;
  uint64_t v10331;
  uint64_t v10332;
  uint64_t v10333;
  unint64_t v10334;
  void *v10335;
  uint64_t v10336;
  uint64_t v10337;
  uint64_t v10338;
  uint64_t v10339;
  uint64_t v10340;
  uint64_t v10341;
  unint64_t v10342;
  void *v10343;
  uint64_t v10344;
  uint64_t v10345;
  uint64_t v10346;
  uint64_t v10347;
  uint64_t v10348;
  uint64_t v10349;
  unint64_t v10350;
  void *v10351;
  uint64_t v10352;
  uint64_t v10353;
  uint64_t v10354;
  uint64_t v10355;
  uint64_t v10356;
  uint64_t v10357;
  unint64_t v10358;
  void *v10359;
  uint64_t v10360;
  uint64_t v10361;
  uint64_t v10362;
  uint64_t v10363;
  uint64_t v10364;
  uint64_t v10365;
  unint64_t v10366;
  void *v10367;
  uint64_t v10368;
  uint64_t v10369;
  uint64_t v10370;
  uint64_t v10371;
  uint64_t v10372;
  uint64_t v10373;
  unint64_t v10374;
  void *v10375;
  uint64_t v10376;
  uint64_t v10377;
  uint64_t v10378;
  uint64_t v10379;
  uint64_t v10380;
  uint64_t v10381;
  unint64_t v10382;
  void *v10383;
  uint64_t v10384;
  uint64_t v10385;
  uint64_t v10386;
  uint64_t v10387;
  uint64_t v10388;
  uint64_t v10389;
  unint64_t v10390;
  void *v10391;
  uint64_t v10392;
  uint64_t v10393;
  uint64_t v10394;
  uint64_t v10395;
  uint64_t v10396;
  uint64_t v10397;
  unint64_t v10398;
  void *v10399;
  uint64_t v10400;
  uint64_t v10401;
  uint64_t v10402;
  uint64_t v10403;
  uint64_t v10404;
  uint64_t v10405;
  unint64_t v10406;
  void *v10407;
  uint64_t v10408;
  uint64_t v10409;
  uint64_t v10410;
  uint64_t v10411;
  uint64_t v10412;
  uint64_t v10413;
  unint64_t v10414;
  void *v10415;
  uint64_t v10416;
  uint64_t v10417;
  uint64_t v10418;
  uint64_t v10419;
  uint64_t v10420;
  uint64_t v10421;
  unint64_t v10422;
  void *v10423;
  uint64_t v10424;
  uint64_t v10425;
  uint64_t v10426;
  uint64_t v10427;
  uint64_t v10428;
  uint64_t v10429;
  unint64_t v10430;
  void *v10431;
  uint64_t v10432;
  uint64_t v10433;
  uint64_t v10434;
  uint64_t v10435;
  uint64_t v10436;
  uint64_t v10437;
  unint64_t v10438;
  void *v10439;
  uint64_t v10440;
  uint64_t v10441;
  uint64_t v10442;
  uint64_t v10443;
  uint64_t v10444;
  uint64_t v10445;
  unint64_t v10446;
  void *v10447;
  uint64_t v10448;
  uint64_t v10449;
  uint64_t v10450;
  uint64_t v10451;
  uint64_t v10452;
  uint64_t v10453;
  unint64_t v10454;
  void *v10455;
  uint64_t v10456;
  uint64_t v10457;
  uint64_t v10458;
  uint64_t v10459;
  uint64_t v10460;
  uint64_t v10461;
  unint64_t v10462;
  void *v10463;
  uint64_t v10464;
  uint64_t v10465;
  uint64_t v10466;
  uint64_t v10467;
  uint64_t v10468;
  uint64_t v10469;
  unint64_t v10470;
  void *v10471;
  uint64_t v10472;
  uint64_t v10473;
  uint64_t v10474;
  uint64_t v10475;
  uint64_t v10476;
  uint64_t v10477;
  unint64_t v10478;
  void *v10479;
  uint64_t v10480;
  uint64_t v10481;
  uint64_t v10482;
  uint64_t v10483;
  uint64_t v10484;
  uint64_t v10485;
  unint64_t v10486;
  void *v10487;
  uint64_t v10488;
  uint64_t v10489;
  uint64_t v10490;
  uint64_t v10491;
  uint64_t v10492;
  uint64_t v10493;
  unint64_t v10494;
  void *v10495;
  uint64_t v10496;
  uint64_t v10497;
  uint64_t v10498;
  uint64_t v10499;
  uint64_t v10500;
  uint64_t v10501;
  unint64_t v10502;
  void *v10503;
  uint64_t v10504;
  uint64_t v10505;
  uint64_t v10506;
  uint64_t v10507;
  uint64_t v10508;
  uint64_t v10509;
  unint64_t v10510;
  void *v10511;
  uint64_t v10512;
  uint64_t v10513;
  uint64_t v10514;
  uint64_t v10515;
  uint64_t v10516;
  uint64_t v10517;
  unint64_t v10518;
  void *v10519;
  uint64_t v10520;
  uint64_t v10521;
  uint64_t v10522;
  uint64_t v10523;
  uint64_t v10524;
  uint64_t v10525;
  unint64_t v10526;
  void *v10527;
  uint64_t v10528;
  uint64_t v10529;
  uint64_t v10530;
  uint64_t v10531;
  uint64_t v10532;
  uint64_t v10533;
  unint64_t v10534;
  void *v10535;
  uint64_t v10536;
  uint64_t v10537;
  uint64_t v10538;
  uint64_t v10539;
  uint64_t v10540;
  uint64_t v10541;
  unint64_t v10542;
  void *v10543;
  uint64_t v10544;
  uint64_t v10545;
  uint64_t v10546;
  uint64_t v10547;
  uint64_t v10548;
  uint64_t v10549;
  unint64_t v10550;
  void *v10551;
  uint64_t v10552;
  uint64_t v10553;
  uint64_t v10554;
  uint64_t v10555;
  uint64_t v10556;
  uint64_t v10557;
  unint64_t v10558;
  void *v10559;
  uint64_t v10560;
  uint64_t v10561;
  uint64_t v10562;
  uint64_t v10563;
  uint64_t v10564;
  uint64_t v10565;
  unint64_t v10566;
  void *v10567;
  uint64_t v10568;
  uint64_t v10569;
  uint64_t v10570;
  uint64_t v10571;
  uint64_t v10572;
  uint64_t v10573;
  unint64_t v10574;
  void *v10575;
  uint64_t v10576;
  uint64_t v10577;
  uint64_t v10578;
  uint64_t v10579;
  uint64_t v10580;
  uint64_t v10581;
  unint64_t v10582;
  void *v10583;
  uint64_t v10584;
  uint64_t v10585;
  uint64_t v10586;
  uint64_t v10587;
  uint64_t v10588;
  uint64_t v10589;
  unint64_t v10590;
  void *v10591;
  uint64_t v10592;
  uint64_t v10593;
  uint64_t v10594;
  uint64_t v10595;
  uint64_t v10596;
  uint64_t v10597;
  unint64_t v10598;
  void *v10599;
  uint64_t v10600;
  uint64_t v10601;
  uint64_t v10602;
  uint64_t v10603;
  uint64_t v10604;
  uint64_t v10605;
  unint64_t v10606;
  void *v10607;
  uint64_t v10608;
  uint64_t v10609;
  uint64_t v10610;
  uint64_t v10611;
  uint64_t v10612;
  uint64_t v10613;
  unint64_t v10614;
  void *v10615;
  uint64_t v10616;
  uint64_t v10617;
  uint64_t v10618;
  uint64_t v10619;
  uint64_t v10620;
  uint64_t v10621;
  unint64_t v10622;
  void *v10623;
  uint64_t v10624;
  uint64_t v10625;
  uint64_t v10626;
  uint64_t v10627;
  uint64_t v10628;
  uint64_t v10629;
  unint64_t v10630;
  void *v10631;
  uint64_t v10632;
  uint64_t v10633;
  uint64_t v10634;
  uint64_t v10635;
  uint64_t v10636;
  uint64_t v10637;
  unint64_t v10638;
  void *v10639;
  uint64_t v10640;
  uint64_t v10641;
  uint64_t v10642;
  uint64_t v10643;
  uint64_t v10644;
  uint64_t v10645;
  unint64_t v10646;
  void *v10647;
  uint64_t v10648;
  uint64_t v10649;
  uint64_t v10650;
  uint64_t v10651;
  uint64_t v10652;
  uint64_t v10653;
  unint64_t v10654;
  void *v10655;
  uint64_t v10656;
  uint64_t v10657;
  uint64_t v10658;
  uint64_t v10659;
  uint64_t v10660;
  uint64_t v10661;
  unint64_t v10662;
  void *v10663;
  uint64_t v10664;
  uint64_t v10665;
  uint64_t v10666;
  uint64_t v10667;
  uint64_t v10668;
  uint64_t v10669;
  unint64_t v10670;
  void *v10671;
  uint64_t v10672;
  uint64_t v10673;
  uint64_t v10674;
  uint64_t v10675;
  uint64_t v10676;
  uint64_t v10677;
  unint64_t v10678;
  void *v10679;
  uint64_t v10680;
  uint64_t v10681;
  uint64_t v10682;
  uint64_t v10683;
  uint64_t v10684;
  uint64_t v10685;
  unint64_t v10686;
  void *v10687;
  uint64_t v10688;
  uint64_t v10689;
  uint64_t v10690;
  uint64_t v10691;
  uint64_t v10692;
  uint64_t v10693;
  unint64_t v10694;
  void *v10695;
  uint64_t v10696;
  uint64_t v10697;
  uint64_t v10698;
  uint64_t v10699;
  uint64_t v10700;
  uint64_t v10701;
  unint64_t v10702;
  void *v10703;
  uint64_t v10704;
  uint64_t v10705;
  uint64_t v10706;
  uint64_t v10707;
  uint64_t v10708;
  uint64_t v10709;
  unint64_t v10710;
  void *v10711;
  uint64_t v10712;
  uint64_t v10713;
  uint64_t v10714;
  uint64_t v10715;
  uint64_t v10716;
  uint64_t v10717;
  unint64_t v10718;
  void *v10719;
  uint64_t v10720;
  uint64_t v10721;
  uint64_t v10722;
  uint64_t v10723;
  uint64_t v10724;
  uint64_t v10725;
  unint64_t v10726;
  void *v10727;
  uint64_t v10728;
  uint64_t v10729;
  uint64_t v10730;
  uint64_t v10731;
  uint64_t v10732;
  uint64_t v10733;
  unint64_t v10734;
  void *v10735;
  uint64_t v10736;
  uint64_t v10737;
  uint64_t v10738;
  uint64_t v10739;
  uint64_t v10740;
  uint64_t v10741;
  unint64_t v10742;
  void *v10743;
  uint64_t v10744;
  uint64_t v10745;
  uint64_t v10746;
  uint64_t v10747;
  uint64_t v10748;
  uint64_t v10749;
  unint64_t v10750;
  void *v10751;
  uint64_t v10752;
  uint64_t v10753;
  uint64_t v10754;
  uint64_t v10755;
  uint64_t v10756;
  uint64_t v10757;
  unint64_t v10758;
  void *v10759;
  uint64_t v10760;
  uint64_t v10761;
  uint64_t v10762;
  uint64_t v10763;
  uint64_t v10764;
  uint64_t v10765;
  unint64_t v10766;
  void *v10767;
  uint64_t v10768;
  uint64_t v10769;
  uint64_t v10770;
  uint64_t v10771;
  uint64_t v10772;
  uint64_t v10773;
  unint64_t v10774;
  void *v10775;
  uint64_t v10776;
  uint64_t v10777;
  uint64_t v10778;
  uint64_t v10779;
  uint64_t v10780;
  uint64_t v10781;
  unint64_t v10782;
  void *v10783;
  uint64_t v10784;
  uint64_t v10785;
  uint64_t v10786;
  uint64_t v10787;
  uint64_t v10788;
  uint64_t v10789;
  unint64_t v10790;
  void *v10791;
  uint64_t v10792;
  uint64_t v10793;
  uint64_t v10794;
  uint64_t v10795;
  uint64_t v10796;
  uint64_t v10797;
  unint64_t v10798;
  void *v10799;
  uint64_t v10800;
  uint64_t v10801;
  uint64_t v10802;
  uint64_t v10803;
  uint64_t v10804;
  uint64_t v10805;
  unint64_t v10806;
  void *v10807;
  uint64_t v10808;
  uint64_t v10809;
  uint64_t v10810;
  uint64_t v10811;
  uint64_t v10812;
  uint64_t v10813;
  unint64_t v10814;
  void *v10815;
  uint64_t v10816;
  uint64_t v10817;
  uint64_t v10818;
  uint64_t v10819;
  uint64_t v10820;
  uint64_t v10821;
  unint64_t v10822;
  void *v10823;
  uint64_t v10824;
  uint64_t v10825;
  uint64_t v10826;
  uint64_t v10827;
  uint64_t v10828;
  uint64_t v10829;
  unint64_t v10830;
  void *v10831;
  uint64_t v10832;
  uint64_t v10833;
  uint64_t v10834;
  uint64_t v10835;
  uint64_t v10836;
  uint64_t v10837;
  unint64_t v10838;
  void *v10839;
  uint64_t v10840;
  uint64_t v10841;
  uint64_t v10842;
  uint64_t v10843;
  uint64_t v10844;
  uint64_t v10845;
  unint64_t v10846;
  void *v10847;
  uint64_t v10848;
  uint64_t v10849;
  uint64_t v10850;
  uint64_t v10851;
  uint64_t v10852;
  uint64_t v10853;
  unint64_t v10854;
  void *v10855;
  uint64_t v10856;
  uint64_t v10857;
  uint64_t v10858;
  uint64_t v10859;
  uint64_t v10860;
  uint64_t v10861;
  unint64_t v10862;
  void *v10863;
  uint64_t v10864;
  uint64_t v10865;
  uint64_t v10866;
  uint64_t v10867;
  uint64_t v10868;
  uint64_t v10869;
  unint64_t v10870;
  void *v10871;
  uint64_t v10872;
  uint64_t v10873;
  uint64_t v10874;
  uint64_t v10875;
  uint64_t v10876;
  uint64_t v10877;
  unint64_t v10878;
  void *v10879;
  uint64_t v10880;
  uint64_t v10881;
  uint64_t v10882;
  uint64_t v10883;
  uint64_t v10884;
  uint64_t v10885;
  unint64_t v10886;
  void *v10887;
  uint64_t v10888;
  uint64_t v10889;
  uint64_t v10890;
  uint64_t v10891;
  uint64_t v10892;
  uint64_t v10893;
  unint64_t v10894;
  void *v10895;
  uint64_t v10896;
  uint64_t v10897;
  uint64_t v10898;
  uint64_t v10899;
  uint64_t v10900;
  uint64_t v10901;
  unint64_t v10902;
  void *v10903;
  uint64_t v10904;
  uint64_t v10905;
  uint64_t v10906;
  uint64_t v10907;
  uint64_t v10908;
  uint64_t v10909;
  unint64_t v10910;
  void *v10911;
  uint64_t v10912;
  uint64_t v10913;
  uint64_t v10914;
  uint64_t v10915;
  uint64_t v10916;
  uint64_t v10917;
  unint64_t v10918;
  void *v10919;
  uint64_t v10920;
  uint64_t v10921;
  uint64_t v10922;
  uint64_t v10923;
  uint64_t v10924;
  uint64_t v10925;
  unint64_t v10926;
  void *v10927;
  uint64_t v10928;
  uint64_t v10929;
  uint64_t v10930;
  uint64_t v10931;
  uint64_t v10932;
  uint64_t v10933;
  unint64_t v10934;
  void *v10935;
  uint64_t v10936;
  uint64_t v10937;
  uint64_t v10938;
  uint64_t v10939;
  uint64_t v10940;
  uint64_t v10941;
  unint64_t v10942;
  void *v10943;
  uint64_t v10944;
  uint64_t v10945;
  uint64_t v10946;
  uint64_t v10947;
  uint64_t v10948;
  uint64_t v10949;
  unint64_t v10950;
  void *v10951;
  uint64_t v10952;
  uint64_t v10953;
  uint64_t v10954;
  uint64_t v10955;
  uint64_t v10956;
  uint64_t v10957;
  unint64_t v10958;
  void *v10959;
  uint64_t v10960;
  uint64_t v10961;
  uint64_t v10962;
  uint64_t v10963;
  uint64_t v10964;
  uint64_t v10965;
  unint64_t v10966;
  void *v10967;
  uint64_t v10968;
  uint64_t v10969;
  uint64_t v10970;
  uint64_t v10971;
  uint64_t v10972;
  uint64_t v10973;
  unint64_t v10974;
  void *v10975;
  uint64_t v10976;
  uint64_t v10977;
  uint64_t v10978;
  uint64_t v10979;
  uint64_t v10980;
  uint64_t v10981;
  unint64_t v10982;
  void *v10983;
  uint64_t v10984;
  uint64_t v10985;
  uint64_t v10986;
  uint64_t v10987;
  uint64_t v10988;
  uint64_t v10989;
  unint64_t v10990;
  void *v10991;
  uint64_t v10992;
  uint64_t v10993;
  uint64_t v10994;
  uint64_t v10995;
  uint64_t v10996;
  uint64_t v10997;
  unint64_t v10998;
  void *v10999;
  uint64_t v11000;
  uint64_t v11001;
  uint64_t v11002;
  uint64_t v11003;
  uint64_t v11004;
  uint64_t v11005;
  unint64_t v11006;
  void *v11007;
  uint64_t v11008;
  uint64_t v11009;
  uint64_t v11010;
  uint64_t v11011;
  uint64_t v11012;
  uint64_t v11013;
  unint64_t v11014;
  void *v11015;
  uint64_t v11016;
  uint64_t v11017;
  uint64_t v11018;
  uint64_t v11019;
  uint64_t v11020;
  uint64_t v11021;
  unint64_t v11022;
  void *v11023;
  uint64_t v11024;
  uint64_t v11025;
  uint64_t v11026;
  uint64_t v11027;
  uint64_t v11028;
  uint64_t v11029;
  unint64_t v11030;
  void *v11031;
  uint64_t v11032;
  uint64_t v11033;
  uint64_t v11034;
  uint64_t v11035;
  uint64_t v11036;
  uint64_t v11037;
  unint64_t v11038;
  void *v11039;
  uint64_t v11040;
  uint64_t v11041;
  uint64_t v11042;
  uint64_t v11043;
  uint64_t v11044;
  uint64_t v11045;
  unint64_t v11046;
  void *v11047;
  uint64_t v11048;
  uint64_t v11049;
  uint64_t v11050;
  uint64_t v11051;
  uint64_t v11052;
  uint64_t v11053;
  unint64_t v11054;
  void *v11055;
  uint64_t v11056;
  uint64_t v11057;
  uint64_t v11058;
  uint64_t v11059;
  uint64_t v11060;
  uint64_t v11061;
  unint64_t v11062;
  void *v11063;
  uint64_t v11064;
  uint64_t v11065;
  uint64_t v11066;
  uint64_t v11067;
  uint64_t v11068;
  uint64_t v11069;
  unint64_t v11070;
  void *v11071;
  uint64_t v11072;
  uint64_t v11073;
  uint64_t v11074;
  uint64_t v11075;
  uint64_t v11076;
  uint64_t v11077;
  unint64_t v11078;
  void *v11079;
  uint64_t v11080;
  uint64_t v11081;
  uint64_t v11082;
  uint64_t v11083;
  uint64_t v11084;
  uint64_t v11085;
  unint64_t v11086;
  void *v11087;
  uint64_t v11088;
  uint64_t v11089;
  uint64_t v11090;
  uint64_t v11091;
  uint64_t v11092;
  uint64_t v11093;
  unint64_t v11094;
  void *v11095;
  uint64_t v11096;
  uint64_t v11097;
  uint64_t v11098;
  uint64_t v11099;
  uint64_t v11100;
  uint64_t v11101;
  unint64_t v11102;
  void *v11103;
  uint64_t v11104;
  uint64_t v11105;
  uint64_t v11106;
  uint64_t v11107;
  uint64_t v11108;
  uint64_t v11109;
  unint64_t v11110;
  void *v11111;
  uint64_t v11112;
  uint64_t v11113;
  uint64_t v11114;
  uint64_t v11115;
  uint64_t v11116;
  uint64_t v11117;
  unint64_t v11118;
  void *v11119;
  uint64_t v11120;
  uint64_t v11121;
  uint64_t v11122;
  uint64_t v11123;
  uint64_t v11124;
  uint64_t v11125;
  unint64_t v11126;
  void *v11127;
  uint64_t v11128;
  uint64_t v11129;
  uint64_t v11130;
  uint64_t v11131;
  uint64_t v11132;
  uint64_t v11133;
  unint64_t v11134;
  void *v11135;
  uint64_t v11136;
  uint64_t v11137;
  uint64_t v11138;
  uint64_t v11139;
  uint64_t v11140;
  uint64_t v11141;
  unint64_t v11142;
  void *v11143;
  uint64_t v11144;
  uint64_t v11145;
  uint64_t v11146;
  uint64_t v11147;
  uint64_t v11148;
  uint64_t v11149;
  unint64_t v11150;
  void *v11151;
  uint64_t v11152;
  uint64_t v11153;
  uint64_t v11154;
  uint64_t v11155;
  uint64_t v11156;
  uint64_t v11157;
  unint64_t v11158;
  void *v11159;
  uint64_t v11160;
  uint64_t v11161;
  uint64_t v11162;
  uint64_t v11163;
  uint64_t v11164;
  uint64_t v11165;
  unint64_t v11166;
  void *v11167;
  uint64_t v11168;
  uint64_t v11169;
  uint64_t v11170;
  uint64_t v11171;
  uint64_t v11172;
  uint64_t v11173;
  unint64_t v11174;
  void *v11175;
  uint64_t v11176;
  uint64_t v11177;
  uint64_t v11178;
  uint64_t v11179;
  uint64_t v11180;
  uint64_t v11181;
  unint64_t v11182;
  void *v11183;
  uint64_t v11184;
  uint64_t v11185;
  uint64_t v11186;
  uint64_t v11187;
  uint64_t v11188;
  uint64_t v11189;
  unint64_t v11190;
  void *v11191;
  uint64_t v11192;
  uint64_t v11193;
  uint64_t v11194;
  uint64_t v11195;
  uint64_t v11196;
  uint64_t v11197;
  unint64_t v11198;
  void *v11199;
  uint64_t v11200;
  uint64_t v11201;
  uint64_t v11202;
  uint64_t v11203;
  uint64_t v11204;
  uint64_t v11205;
  unint64_t v11206;
  void *v11207;
  uint64_t v11208;
  uint64_t v11209;
  uint64_t v11210;
  uint64_t v11211;
  uint64_t v11212;
  uint64_t v11213;
  unint64_t v11214;
  void *v11215;
  uint64_t v11216;
  uint64_t v11217;
  uint64_t v11218;
  uint64_t v11219;
  uint64_t v11220;
  uint64_t v11221;
  unint64_t v11222;
  void *v11223;
  uint64_t v11224;
  uint64_t v11225;
  uint64_t v11226;
  uint64_t v11227;
  uint64_t v11228;
  uint64_t v11229;
  unint64_t v11230;
  void *v11231;
  uint64_t v11232;
  uint64_t v11233;
  uint64_t v11234;
  uint64_t v11235;
  uint64_t v11236;
  uint64_t v11237;
  unint64_t v11238;
  void *v11239;
  uint64_t v11240;
  uint64_t v11241;
  uint64_t v11242;
  uint64_t v11243;
  uint64_t v11244;
  uint64_t v11245;
  unint64_t v11246;
  void *v11247;
  uint64_t v11248;
  uint64_t v11249;
  uint64_t v11250;
  uint64_t v11251;
  uint64_t v11252;
  uint64_t v11253;
  unint64_t v11254;
  void *v11255;
  uint64_t v11256;
  uint64_t v11257;
  uint64_t v11258;
  uint64_t v11259;
  uint64_t v11260;
  uint64_t v11261;
  WTF::StringImpl *v11262;
  _QWORD v11263[3];
  WTF::StringImpl *v11264;

  v10 = *(_DWORD **)(a3 + 8);
  if (v10)
    *v10 += 2;
  *(_QWORD *)a1 = v10;
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncFromSyncIterator", 0x15uLL, a4, a5, a6, a7, a8, v11263);
  *(_QWORD *)(a1 + 8) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"InternalPromise", 0xFuLL, v11, v12, v13, v14, v15, v11263);
  *(_QWORD *)(a1 + 16) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Promise", 7uLL, v16, v17, v18, v19, v20, v11263);
  *(_QWORD *)(a1 + 24) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"RegExpStringIterator", 0x14uLL, v21, v22, v23, v24, v25, v11263);
  *(_QWORD *)(a1 + 32) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"advanceStringIndex", 0x12uLL, v26, v27, v28, v29, v30, v11263);
  *(_QWORD *)(a1 + 40) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"all", 3uLL, v31, v32, v33, v34, v35, v11263);
  *(_QWORD *)(a1 + 48) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"allSettled", 0xAuLL, v36, v37, v38, v39, v40, v11263);
  *(_QWORD *)(a1 + 56) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"anchor", 6uLL, v41, v42, v43, v44, v45, v11263);
  *(_QWORD *)(a1 + 64) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"any", 3uLL, v46, v47, v48, v49, v50, v11263);
  *(_QWORD *)(a1 + 72) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"apply", 5uLL, v51, v52, v53, v54, v55, v11263);
  *(_QWORD *)(a1 + 80) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayIteratorNextHelper", 0x17uLL, v56, v57, v58, v59, v60, v11263);
  *(_QWORD *)(a1 + 88) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFromSyncIteratorOnFulfilledContinue", 0x28uLL, v61, v62, v63, v64, v65, v11263);
  *(_QWORD *)(a1 + 96) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFromSyncIteratorOnFulfilledDone", 0x24uLL, v66, v67, v68, v69, v70, v11263);
  *(_QWORD *)(a1 + 104) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFromSyncIteratorOnRejected", 0x1FuLL, v71, v72, v73, v74, v75, v11263);
  *(_QWORD *)(a1 + 112) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFunctionResume", 0x13uLL, v76, v77, v78, v79, v80, v11263);
  *(_QWORD *)(a1 + 120) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFunctionResumeOnFulfilled", 0x1EuLL, v81, v82, v83, v84, v85, v11263);
  *(_QWORD *)(a1 + 128) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncFunctionResumeOnRejected", 0x1DuLL, v86, v87, v88, v89, v90, v11263);
  *(_QWORD *)(a1 + 136) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorEnqueue", 0x15uLL, v91, v92, v93, v94, v95, v11263);
  *(_QWORD *)(a1 + 144) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorQueueDequeue", 0x1AuLL, v96, v97, v98, v99, v100, v11263);
  *(_QWORD *)(a1 + 152) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorQueueEnqueue", 0x1AuLL, v101, v102, v103, v104, v105, v11263);
  *(_QWORD *)(a1 + 160) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorQueueIsEmpty", 0x1AuLL, v106, v107, v108, v109, v110, v11263);
  *(_QWORD *)(a1 + 168) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorReject", 0x14uLL, v111, v112, v113, v114, v115, v11263);
  *(_QWORD *)(a1 + 176) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorResolve", 0x15uLL, v116, v117, v118, v119, v120, v11263);
  *(_QWORD *)(a1 + 184) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorResumeNext", 0x18uLL, v121, v122, v123, v124, v125, v11263);
  *(_QWORD *)(a1 + 192) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorResumeNextOnFulfilled", 0x23uLL, v126, v127, v128, v129, v130, v11263);
  *(_QWORD *)(a1 + 200) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorResumeNextOnRejected", 0x22uLL, v131, v132, v133, v134, v135, v11263);
  *(_QWORD *)(a1 + 208) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorYield", 0x13uLL, v136, v137, v138, v139, v140, v11263);
  *(_QWORD *)(a1 + 216) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorYieldAwaited", 0x1AuLL, v141, v142, v143, v144, v145, v11263);
  *(_QWORD *)(a1 + 224) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorYieldOnRejected", 0x1DuLL, v146, v147, v148, v149, v150, v11263);
  *(_QWORD *)(a1 + 232) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncModuleEvaluation", 0x15uLL, v151, v152, v153, v154, v155, v11263);
  *(_QWORD *)(a1 + 240) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"at", 2uLL, v156, v157, v158, v159, v160, v11263);
  *(_QWORD *)(a1 + 248) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"awaitValue", 0xAuLL, v161, v162, v163, v164, v165, v11263);
  *(_QWORD *)(a1 + 256) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"big", 3uLL, v166, v167, v168, v169, v170, v11263);
  *(_QWORD *)(a1 + 264) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"blink", 5uLL, v171, v172, v173, v174, v175, v11263);
  *(_QWORD *)(a1 + 272) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"bold", 4uLL, v176, v177, v178, v179, v180, v11263);
  *(_QWORD *)(a1 + 280) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"builtinMapIterable", 0x12uLL, v181, v182, v183, v184, v185, v11263);
  *(_QWORD *)(a1 + 288) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"builtinSetIterable", 0x12uLL, v186, v187, v188, v189, v190, v11263);
  *(_QWORD *)(a1 + 296) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"cacheSatisfy", 0xCuLL, v191, v192, v193, v194, v195, v11263);
  *(_QWORD *)(a1 + 304) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"cacheSatisfyAndReturn", 0x15uLL, v196, v197, v198, v199, v200, v11263);
  *(_QWORD *)(a1 + 312) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"call", 4uLL, v201, v202, v203, v204, v205, v11263);
  *(_QWORD *)(a1 + 320) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"catch", 5uLL, v206, v207, v208, v209, v210, v11263);
  *(_QWORD *)(a1 + 328) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"compileStreaming", 0x10uLL, v211, v212, v213, v214, v215, v11263);
  *(_QWORD *)(a1 + 336) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"concat", 6uLL, v216, v217, v218, v219, v220, v11263);
  *(_QWORD *)(a1 + 344) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"concatSlowPath", 0xEuLL, v221, v222, v223, v224, v225, v11263);
  *(_QWORD *)(a1 + 352) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"copyWithin", 0xAuLL, v226, v227, v228, v229, v230, v11263);
  *(_QWORD *)(a1 + 360) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createArrayWithoutPrototype", 0x1BuLL, v231, v232, v233, v234, v235, v11263);
  *(_QWORD *)(a1 + 368) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createAsyncFromSyncIterator", 0x1BuLL, v236, v237, v238, v239, v240, v11263);
  *(_QWORD *)(a1 + 376) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createHTML", 0xAuLL, v241, v242, v243, v244, v245, v11263);
  *(_QWORD *)(a1 + 384) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createInspectorInjectedScript", 0x1DuLL, v246, v247, v248, v249, v250, v11263);
  *(_QWORD *)(a1 + 392) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createObjectWithoutPrototype", 0x1CuLL, v251, v252, v253, v254, v255, v11263);
  *(_QWORD *)(a1 + 400) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createResolvingFunctions", 0x18uLL, v256, v257, v258, v259, v260, v11263);
  *(_QWORD *)(a1 + 408) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createResolvingFunctionsWithoutPromise", 0x26uLL, v261, v262, v263, v264, v265, v11263);
  *(_QWORD *)(a1 + 416) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"crossRealmThrow", 0xFuLL, v266, v267, v268, v269, v270, v11263);
  *(_QWORD *)(a1 + 424) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"defaultAsyncFromAsyncArrayLike", 0x1EuLL, v271, v272, v273, v274, v275, v11263);
  *(_QWORD *)(a1 + 432) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"defaultAsyncFromAsyncIterator", 0x1DuLL, v276, v277, v278, v279, v280, v11263);
  *(_QWORD *)(a1 + 440) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"deleteProperty", 0xEuLL, v281, v282, v283, v284, v285, v11263);
  *(_QWORD *)(a1 + 448) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"dependencyKeysIfEvaluated", 0x19uLL, v286, v287, v288, v289, v290, v11263);
  *(_QWORD *)(a1 + 456) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"difference", 0xAuLL, v291, v292, v293, v294, v295, v11263);
  *(_QWORD *)(a1 + 464) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"doAsyncGeneratorBodyCall", 0x18uLL, v296, v297, v298, v299, v300, v11263);
  *(_QWORD *)(a1 + 472) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"doAsyncGeneratorBodyCallOnFulfilledNormal", 0x29uLL, v301, v302, v303, v304, v305, v11263);
  *(_QWORD *)(a1 + 480) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"doAsyncGeneratorBodyCallOnFulfilledReturn", 0x29uLL, v306, v307, v308, v309, v310, v11263);
  *(_QWORD *)(a1 + 488) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ensureRegistered", 0x10uLL, v311, v312, v313, v314, v315, v11263);
  *(_QWORD *)(a1 + 496) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"evaluate", 8uLL, v316, v317, v318, v319, v320, v11263);
  *(_QWORD *)(a1 + 504) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"every", 5uLL, v321, v322, v323, v324, v325, v11263);
  *(_QWORD *)(a1 + 512) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fill", 4uLL, v326, v327, v328, v329, v330, v11263);
  *(_QWORD *)(a1 + 520) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"filter", 6uLL, v331, v332, v333, v334, v335, v11263);
  *(_QWORD *)(a1 + 528) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"finally", 7uLL, v336, v337, v338, v339, v340, v11263);
  *(_QWORD *)(a1 + 536) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"find", 4uLL, v341, v342, v343, v344, v345, v11263);
  *(_QWORD *)(a1 + 544) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"findIndex", 9uLL, v346, v347, v348, v349, v350, v11263);
  *(_QWORD *)(a1 + 552) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"findLast", 8uLL, v351, v352, v353, v354, v355, v11263);
  *(_QWORD *)(a1 + 560) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"findLastIndex", 0xDuLL, v356, v357, v358, v359, v360, v11263);
  *(_QWORD *)(a1 + 568) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fixed", 5uLL, v361, v362, v363, v364, v365, v11263);
  *(_QWORD *)(a1 + 576) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"flat", 4uLL, v366, v367, v368, v369, v370, v11263);
  *(_QWORD *)(a1 + 584) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"flatIntoArray", 0xDuLL, v371, v372, v373, v374, v375, v11263);
  *(_QWORD *)(a1 + 592) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"flatIntoArrayWithCallback", 0x19uLL, v376, v377, v378, v379, v380, v11263);
  *(_QWORD *)(a1 + 600) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"flatMap", 7uLL, v381, v382, v383, v384, v385, v11263);
  *(_QWORD *)(a1 + 608) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fontcolor", 9uLL, v386, v387, v388, v389, v390, v11263);
  *(_QWORD *)(a1 + 616) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fontsize", 8uLL, v391, v392, v393, v394, v395, v11263);
  *(_QWORD *)(a1 + 624) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"forEach", 7uLL, v396, v397, v398, v399, v400, v11263);
  *(_QWORD *)(a1 + 632) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"forceFulfillPromise", 0x13uLL, v401, v402, v403, v404, v405, v11263);
  *(_QWORD *)(a1 + 640) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"from", 4uLL, v406, v407, v408, v409, v410, v11263);
  *(_QWORD *)(a1 + 648) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fromAsync", 9uLL, v411, v412, v413, v414, v415, v11263);
  *(_QWORD *)(a1 + 656) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fromEntries", 0xBuLL, v416, v417, v418, v419, v420, v11263);
  *(_QWORD *)(a1 + 664) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fulfillFetch", 0xCuLL, v421, v422, v423, v424, v425, v11263);
  *(_QWORD *)(a1 + 672) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fulfillPromise", 0xEuLL, v426, v427, v428, v429, v430, v11263);
  *(_QWORD *)(a1 + 680) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fulfillPromiseWithFirstResolvingFunctionCallCheck", 0x31uLL, v431, v432, v433, v434, v435, v11263);
  *(_QWORD *)(a1 + 688) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"fulfillWithoutPromise", 0x15uLL, v436, v437, v438, v439, v440, v11263);
  *(_QWORD *)(a1 + 696) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorResume", 0xFuLL, v441, v442, v443, v444, v445, v11263);
  *(_QWORD *)(a1 + 704) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"get", 3uLL, v446, v447, v448, v449, v450, v11263);
  *(_QWORD *)(a1 + 712) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getSetSizeAsInt", 0xFuLL, v451, v452, v453, v454, v455, v11263);
  *(_QWORD *)(a1 + 720) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getSubstitution", 0xFuLL, v456, v457, v458, v459, v460, v11263);
  *(_QWORD *)(a1 + 728) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"groupBy", 7uLL, v461, v462, v463, v464, v465, v11263);
  *(_QWORD *)(a1 + 736) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"has", 3uLL, v466, v467, v468, v469, v470, v11263);
  *(_QWORD *)(a1 + 744) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasObservableSideEffectsForRegExpMatch", 0x26uLL, v471, v472, v473, v474, v475, v11263);
  *(_QWORD *)(a1 + 752) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasObservableSideEffectsForRegExpSplit", 0x26uLL, v476, v477, v478, v479, v480, v11263);
  *(_QWORD *)(a1 + 760) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasObservableSideEffectsForStringReplace", 0x28uLL, v481, v482, v483, v484, v485, v11263);
  *(_QWORD *)(a1 + 768) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"importValue", 0xBuLL, v486, v487, v488, v489, v490, v11263);
  *(_QWORD *)(a1 + 776) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"includes", 8uLL, v491, v492, v493, v494, v495, v11263);
  *(_QWORD *)(a1 + 784) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"instantiateStreaming", 0x14uLL, v496, v497, v498, v499, v500, v11263);
  *(_QWORD *)(a1 + 792) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"internalAll", 0xBuLL, v501, v502, v503, v504, v505, v11263);
  *(_QWORD *)(a1 + 800) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"intersection", 0xCuLL, v506, v507, v508, v509, v510, v11263);
  *(_QWORD *)(a1 + 808) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isArray", 7uLL, v511, v512, v513, v514, v515, v11263);
  *(_QWORD *)(a1 + 816) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isDisjointFrom", 0xEuLL, v516, v517, v518, v519, v520, v11263);
  *(_QWORD *)(a1 + 824) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isExecutionState", 0x10uLL, v521, v522, v523, v524, v525, v11263);
  *(_QWORD *)(a1 + 832) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isFinite", 8uLL, v526, v527, v528, v529, v530, v11263);
  *(_QWORD *)(a1 + 840) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSubsetOf", 0xAuLL, v531, v532, v533, v534, v535, v11263);
  *(_QWORD *)(a1 + 848) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSupersetOf", 0xCuLL, v536, v537, v538, v539, v540, v11263);
  *(_QWORD *)(a1 + 856) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSuspendYieldState", 0x13uLL, v541, v542, v543, v544, v545, v11263);
  *(_QWORD *)(a1 + 864) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"italics", 7uLL, v546, v547, v548, v549, v550, v11263);
  *(_QWORD *)(a1 + 872) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"link", 4uLL, v551, v552, v553, v554, v555, v11263);
  *(_QWORD *)(a1 + 880) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"linkAndEvaluateModule", 0x15uLL, v556, v557, v558, v559, v560, v11263);
  *(_QWORD *)(a1 + 888) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"loadAndEvaluateModule", 0x15uLL, v561, v562, v563, v564, v565, v11263);
  *(_QWORD *)(a1 + 896) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"loadModule", 0xAuLL, v566, v567, v568, v569, v570, v11263);
  *(_QWORD *)(a1 + 904) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"map", 3uLL, v571, v572, v573, v574, v575, v11263);
  *(_QWORD *)(a1 + 912) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"match", 5uLL, v576, v577, v578, v579, v580, v11263);
  *(_QWORD *)(a1 + 920) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"matchAll", 8uLL, v581, v582, v583, v584, v585, v11263);
  *(_QWORD *)(a1 + 928) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"matchSlow", 9uLL, v586, v587, v588, v589, v590, v11263);
  *(_QWORD *)(a1 + 936) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"maxWithPositives", 0x10uLL, v591, v592, v593, v594, v595, v11263);
  *(_QWORD *)(a1 + 944) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"minWithMaybeNegativeZeroAndPositive", 0x23uLL, v596, v597, v598, v599, v600, v11263);
  *(_QWORD *)(a1 + 952) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"moduleEvaluation", 0x10uLL, v601, v602, v603, v604, v605, v11263);
  *(_QWORD *)(a1 + 960) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newHandledRejectedPromise", 0x19uLL, v606, v607, v608, v609, v610, v11263);
  *(_QWORD *)(a1 + 968) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newPromiseCapability", 0x14uLL, v611, v612, v613, v614, v615, v11263);
  *(_QWORD *)(a1 + 976) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newPromiseCapabilitySlow", 0x18uLL, v616, v617, v618, v619, v620, v11263);
  *(_QWORD *)(a1 + 984) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newRegistryEntry", 0x10uLL, v621, v622, v623, v624, v625, v11263);
  *(_QWORD *)(a1 + 992) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"next", 4uLL, v626, v627, v628, v629, v630, v11263);
  *(_QWORD *)(a1 + 1000) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"of", 2uLL, v631, v632, v633, v634, v635, v11263);
  *(_QWORD *)(a1 + 1008) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"padEnd", 6uLL, v636, v637, v638, v639, v640, v11263);
  *(_QWORD *)(a1 + 1016) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"padStart", 8uLL, v641, v642, v643, v644, v645, v11263);
  *(_QWORD *)(a1 + 1024) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performIteration", 0x10uLL, v646, v647, v648, v649, v650, v11263);
  *(_QWORD *)(a1 + 1032) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performPromiseThen", 0x12uLL, v651, v652, v653, v654, v655, v11263);
  *(_QWORD *)(a1 + 1040) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectGet", 0x15uLL, v656, v657, v658, v659, v660, v11263);
  *(_QWORD *)(a1 + 1048) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectGetByVal", 0x1AuLL, v661, v662, v663, v664, v665, v11263);
  *(_QWORD *)(a1 + 1056) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectHas", 0x15uLL, v666, v667, v668, v669, v670, v11263);
  *(_QWORD *)(a1 + 1064) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectHasByVal", 0x1AuLL, v671, v672, v673, v674, v675, v11263);
  *(_QWORD *)(a1 + 1072) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectSetByValSloppy", 0x20uLL, v676, v677, v678, v679, v680, v11263);
  *(_QWORD *)(a1 + 1080) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectSetByValStrict", 0x20uLL, v681, v682, v683, v684, v685, v11263);
  *(_QWORD *)(a1 + 1088) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectSetSloppy", 0x1BuLL, v686, v687, v688, v689, v690, v11263);
  *(_QWORD *)(a1 + 1096) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"performProxyObjectSetStrict", 0x1BuLL, v691, v692, v693, v694, v695, v11263);
  *(_QWORD *)(a1 + 1104) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseAllNewResolveElement", 0x1BuLL, v696, v697, v698, v699, v700, v11263);
  *(_QWORD *)(a1 + 1112) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseAllOnFulfilled", 0x15uLL, v701, v702, v703, v704, v705, v11263);
  *(_QWORD *)(a1 + 1120) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseAllSlow", 0xEuLL, v706, v707, v708, v709, v710, v11263);
  *(_QWORD *)(a1 + 1128) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseEmptyOnFulfilled", 0x17uLL, v711, v712, v713, v714, v715, v11263);
  *(_QWORD *)(a1 + 1136) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseEmptyOnRejected", 0x16uLL, v716, v717, v718, v719, v720, v11263);
  *(_QWORD *)(a1 + 1144) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseNewOnRejected", 0x14uLL, v721, v722, v723, v724, v725, v11263);
  *(_QWORD *)(a1 + 1152) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseOnRejectedWithContext", 0x1CuLL, v726, v727, v728, v729, v730, v11263);
  *(_QWORD *)(a1 + 1160) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseReactionJob", 0x12uLL, v731, v732, v733, v734, v735, v11263);
  *(_QWORD *)(a1 + 1168) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseReactionJobWithoutPromise", 0x20uLL, v736, v737, v738, v739, v740, v11263);
  *(_QWORD *)(a1 + 1176) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseRejectSlow", 0x11uLL, v741, v742, v743, v744, v745, v11263);
  *(_QWORD *)(a1 + 1184) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolve", 0xEuLL, v746, v747, v748, v749, v750, v11263);
  *(_QWORD *)(a1 + 1192) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolveSlow", 0x12uLL, v751, v752, v753, v754, v755, v11263);
  *(_QWORD *)(a1 + 1200) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolveThenableJob", 0x19uLL, v756, v757, v758, v759, v760, v11263);
  *(_QWORD *)(a1 + 1208) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolveThenableJobFast", 0x1DuLL, v761, v762, v763, v764, v765, v11263);
  *(_QWORD *)(a1 + 1216) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolveThenableJobWithDerivedPromise", 0x2BuLL, v766, v767, v768, v769, v770, v11263);
  *(_QWORD *)(a1 + 1224) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseResolveThenableJobWithoutPromiseFast", 0x2BuLL, v771, v772, v773, v774, v775, v11263);
  *(_QWORD *)(a1 + 1232) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"provideFetch", 0xCuLL, v776, v777, v778, v779, v780, v11263);
  *(_QWORD *)(a1 + 1240) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"pushNewPromiseReaction", 0x16uLL, v781, v782, v783, v784, v785, v11263);
  *(_QWORD *)(a1 + 1248) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"race", 4uLL, v786, v787, v788, v789, v790, v11263);
  *(_QWORD *)(a1 + 1256) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"raw", 3uLL, v791, v792, v793, v794, v795, v11263);
  *(_QWORD *)(a1 + 1264) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"reduce", 6uLL, v796, v797, v798, v799, v800, v11263);
  *(_QWORD *)(a1 + 1272) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"reduceRight", 0xBuLL, v801, v802, v803, v804, v805, v11263);
  *(_QWORD *)(a1 + 1280) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpExec", 0xAuLL, v806, v807, v808, v809, v810, v11263);
  *(_QWORD *)(a1 + 1288) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"reject", 6uLL, v811, v812, v813, v814, v815, v11263);
  *(_QWORD *)(a1 + 1296) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"rejectPromise", 0xDuLL, v816, v817, v818, v819, v820, v11263);
  *(_QWORD *)(a1 + 1304) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"rejectPromiseWithFirstResolvingFunctionCallCheck", 0x30uLL, v821, v822, v823, v824, v825, v11263);
  *(_QWORD *)(a1 + 1312) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"rejectWithoutPromise", 0x14uLL, v826, v827, v828, v829, v830, v11263);
  *(_QWORD *)(a1 + 1320) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"repeat", 6uLL, v831, v832, v833, v834, v835, v11263);
  *(_QWORD *)(a1 + 1328) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"repeatCharactersSlowPath", 0x18uLL, v836, v837, v838, v839, v840, v11263);
  *(_QWORD *)(a1 + 1336) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"repeatSlowPath", 0xEuLL, v841, v842, v843, v844, v845, v11263);
  *(_QWORD *)(a1 + 1344) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"replace", 7uLL, v846, v847, v848, v849, v850, v11263);
  *(_QWORD *)(a1 + 1352) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"replaceAll", 0xAuLL, v851, v852, v853, v854, v855, v11263);
  *(_QWORD *)(a1 + 1360) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestFetch", 0xCuLL, v856, v857, v858, v859, v860, v11263);
  *(_QWORD *)(a1 + 1368) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestImportModule", 0x13uLL, v861, v862, v863, v864, v865, v11263);
  *(_QWORD *)(a1 + 1376) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestInstantiate", 0x12uLL, v866, v867, v868, v869, v870, v11263);
  *(_QWORD *)(a1 + 1384) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestSatisfy", 0xEuLL, v871, v872, v873, v874, v875, v11263);
  *(_QWORD *)(a1 + 1392) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestSatisfyUtil", 0x12uLL, v876, v877, v878, v879, v880, v11263);
  *(_QWORD *)(a1 + 1400) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolve", 7uLL, v881, v882, v883, v884, v885, v11263);
  *(_QWORD *)(a1 + 1408) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolvePromise", 0xEuLL, v886, v887, v888, v889, v890, v11263);
  *(_QWORD *)(a1 + 1416) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolvePromiseWithFirstResolvingFunctionCallCheck", 0x31uLL, v891, v892, v893, v894, v895, v11263);
  *(_QWORD *)(a1 + 1424) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolveWithoutPromise", 0x15uLL, v896, v897, v898, v899, v900, v11263);
  *(_QWORD *)(a1 + 1432) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolveWithoutPromiseForAsyncAwait", 0x22uLL, v901, v902, v903, v904, v905, v11263);
  *(_QWORD *)(a1 + 1440) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"return", 6uLL, v906, v907, v908, v909, v910, v11263);
  *(_QWORD *)(a1 + 1448) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"search", 6uLL, v911, v912, v913, v914, v915, v11263);
  *(_QWORD *)(a1 + 1456) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setStateToMax", 0xDuLL, v916, v917, v918, v919, v920, v11263);
  *(_QWORD *)(a1 + 1464) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"small", 5uLL, v921, v922, v923, v924, v925, v11263);
  *(_QWORD *)(a1 + 1472) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"some", 4uLL, v926, v927, v928, v929, v930, v11263);
  *(_QWORD *)(a1 + 1480) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"speciesConstructor", 0x12uLL, v931, v932, v933, v934, v935, v11263);
  *(_QWORD *)(a1 + 1488) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"split", 5uLL, v936, v937, v938, v939, v940, v11263);
  *(_QWORD *)(a1 + 1496) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"strike", 6uLL, v941, v942, v943, v944, v945, v11263);
  *(_QWORD *)(a1 + 1504) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringConcatSlowPath", 0x14uLL, v946, v947, v948, v949, v950, v11263);
  *(_QWORD *)(a1 + 1512) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"sub", 3uLL, v951, v952, v953, v954, v955, v11263);
  *(_QWORD *)(a1 + 1520) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"sup", 3uLL, v956, v957, v958, v959, v960, v11263);
  *(_QWORD *)(a1 + 1528) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"symbolAsyncIteratorGetter", 0x19uLL, v961, v962, v963, v964, v965, v11263);
  *(_QWORD *)(a1 + 1536) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"symbolHasInstance", 0x11uLL, v966, v967, v968, v969, v970, v11263);
  *(_QWORD *)(a1 + 1544) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"symbolIteratorGetter", 0x14uLL, v971, v972, v973, v974, v975, v11263);
  *(_QWORD *)(a1 + 1552) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"symmetricDifference", 0x13uLL, v976, v977, v978, v979, v980, v11263);
  *(_QWORD *)(a1 + 1560) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"test", 4uLL, v981, v982, v983, v984, v985, v11263);
  *(_QWORD *)(a1 + 1568) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"then", 4uLL, v986, v987, v988, v989, v990, v11263);
  *(_QWORD *)(a1 + 1576) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"throw", 5uLL, v991, v992, v993, v994, v995, v11263);
  *(_QWORD *)(a1 + 1584) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLocaleString", 0xEuLL, v996, v997, v998, v999, v1000, v11263);
  *(_QWORD *)(a1 + 1592) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toReversed", 0xAuLL, v1001, v1002, v1003, v1004, v1005, v11263);
  *(_QWORD *)(a1 + 1600) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toSorted", 8uLL, v1006, v1007, v1008, v1009, v1010, v11263);
  *(_QWORD *)(a1 + 1608) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toSpliced", 9uLL, v1011, v1012, v1013, v1014, v1015, v11263);
  *(_QWORD *)(a1 + 1616) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"triggerPromiseReactions", 0x17uLL, v1016, v1017, v1018, v1019, v1020, v11263);
  *(_QWORD *)(a1 + 1624) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"try", 3uLL, v1021, v1022, v1023, v1024, v1025, v11263);
  *(_QWORD *)(a1 + 1632) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"typedArraySpeciesConstructor", 0x1CuLL, v1026, v1027, v1028, v1029, v1030, v11263);
  *(_QWORD *)(a1 + 1640) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"union", 5uLL, v1031, v1032, v1033, v1034, v1035, v11263);
  *(_QWORD *)(a1 + 1648) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"with", 4uLL, v1036, v1037, v1038, v1039, v1040, v11263);
  *(_QWORD *)(a1 + 1656) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"withResolvers", 0xDuLL, v1041, v1042, v1043, v1044, v1045, v11263);
  *(_QWORD *)(a1 + 1664) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"wrapRemoteValue", 0xFuLL, v1046, v1047, v1048, v1049, v1050, v11263);
  *(_QWORD *)(a1 + 1672) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"wrappedIterator", 0xFuLL, v1051, v1052, v1053, v1054, v1055, v11263);
  *(_QWORD *)(a1 + 1680) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"argument", 8uLL, v1056, v1057, v1058, v1059, v1060, v11263);
  *(_QWORD *)(a1 + 1688) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"argumentCount", 0xDuLL, v1061, v1062, v1063, v1064, v1065, v11263);
  *(_QWORD *)(a1 + 1696) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayPush", 9uLL, v1066, v1067, v1068, v1069, v1070, v11263);
  *(_QWORD *)(a1 + 1704) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getByIdDirect", 0xDuLL, v1071, v1072, v1073, v1074, v1075, v11263);
  *(_QWORD *)(a1 + 1712) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getByIdDirectPrivate", 0x14uLL, v1076, v1077, v1078, v1079, v1080, v11263);
  *(_QWORD *)(a1 + 1720) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getByValWithThis", 0x10uLL, v1081, v1082, v1083, v1084, v1085, v11263);
  *(_QWORD *)(a1 + 1728) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getPrototypeOf", 0xEuLL, v1086, v1087, v1088, v1089, v1090, v11263);
  *(_QWORD *)(a1 + 1736) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getPromiseInternalField", 0x17uLL, v1091, v1092, v1093, v1094, v1095, v11263);
  *(_QWORD *)(a1 + 1744) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getGeneratorInternalField", 0x19uLL, v1096, v1097, v1098, v1099, v1100, v11263);
  *(_QWORD *)(a1 + 1752) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getAsyncGeneratorInternalField", 0x1EuLL, v1101, v1102, v1103, v1104, v1105, v11263);
  *(_QWORD *)(a1 + 1760) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getAbstractModuleRecordInternalField", 0x24uLL, v1106, v1107, v1108, v1109, v1110, v11263);
  *(_QWORD *)(a1 + 1768) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getArrayIteratorInternalField", 0x1DuLL, v1111, v1112, v1113, v1114, v1115, v11263);
  *(_QWORD *)(a1 + 1776) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getStringIteratorInternalField", 0x1EuLL, v1116, v1117, v1118, v1119, v1120, v11263);
  *(_QWORD *)(a1 + 1784) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getMapIteratorInternalField", 0x1BuLL, v1121, v1122, v1123, v1124, v1125, v11263);
  *(_QWORD *)(a1 + 1792) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getSetIteratorInternalField", 0x1BuLL, v1126, v1127, v1128, v1129, v1130, v11263);
  *(_QWORD *)(a1 + 1800) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getProxyInternalField", 0x15uLL, v1131, v1132, v1133, v1134, v1135, v11263);
  *(_QWORD *)(a1 + 1808) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"idWithProfile", 0xDuLL, v1136, v1137, v1138, v1139, v1140, v11263);
  *(_QWORD *)(a1 + 1816) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isObject", 8uLL, v1141, v1142, v1143, v1144, v1145, v11263);
  *(_QWORD *)(a1 + 1824) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isCallable", 0xAuLL, v1146, v1147, v1148, v1149, v1150, v11263);
  *(_QWORD *)(a1 + 1832) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isConstructor", 0xDuLL, v1151, v1152, v1153, v1154, v1155, v11263);
  *(_QWORD *)(a1 + 1840) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isJSArray", 9uLL, v1156, v1157, v1158, v1159, v1160, v11263);
  *(_QWORD *)(a1 + 1848) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isProxyObject", 0xDuLL, v1161, v1162, v1163, v1164, v1165, v11263);
  *(_QWORD *)(a1 + 1856) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isDerivedArray", 0xEuLL, v1166, v1167, v1168, v1169, v1170, v11263);
  *(_QWORD *)(a1 + 1864) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isGenerator", 0xBuLL, v1171, v1172, v1173, v1174, v1175, v11263);
  *(_QWORD *)(a1 + 1872) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isAsyncGenerator", 0x10uLL, v1176, v1177, v1178, v1179, v1180, v11263);
  *(_QWORD *)(a1 + 1880) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isPromise", 9uLL, v1181, v1182, v1183, v1184, v1185, v11263);
  *(_QWORD *)(a1 + 1888) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isRegExpObject", 0xEuLL, v1186, v1187, v1188, v1189, v1190, v11263);
  *(_QWORD *)(a1 + 1896) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isMap", 5uLL, v1191, v1192, v1193, v1194, v1195, v11263);
  *(_QWORD *)(a1 + 1904) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSet", 5uLL, v1196, v1197, v1198, v1199, v1200, v11263);
  *(_QWORD *)(a1 + 1912) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isShadowRealm", 0xDuLL, v1201, v1202, v1203, v1204, v1205, v11263);
  *(_QWORD *)(a1 + 1920) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isStringIterator", 0x10uLL, v1206, v1207, v1208, v1209, v1210, v11263);
  *(_QWORD *)(a1 + 1928) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isArrayIterator", 0xFuLL, v1211, v1212, v1213, v1214, v1215, v11263);
  *(_QWORD *)(a1 + 1936) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isMapIterator", 0xDuLL, v1216, v1217, v1218, v1219, v1220, v11263);
  *(_QWORD *)(a1 + 1944) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSetIterator", 0xDuLL, v1221, v1222, v1223, v1224, v1225, v11263);
  *(_QWORD *)(a1 + 1952) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isUndefinedOrNull", 0x11uLL, v1226, v1227, v1228, v1229, v1230, v11263);
  *(_QWORD *)(a1 + 1960) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"tailCallForwardArguments", 0x18uLL, v1231, v1232, v1233, v1234, v1235, v11263);
  *(_QWORD *)(a1 + 1968) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"throwTypeError", 0xEuLL, v1236, v1237, v1238, v1239, v1240, v11263);
  *(_QWORD *)(a1 + 1976) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"throwRangeError", 0xFuLL, v1241, v1242, v1243, v1244, v1245, v11263);
  *(_QWORD *)(a1 + 1984) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"throwOutOfMemoryError", 0x15uLL, v1246, v1247, v1248, v1249, v1250, v11263);
  *(_QWORD *)(a1 + 1992) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"tryGetById", 0xAuLL, v1251, v1252, v1253, v1254, v1255, v11263);
  *(_QWORD *)(a1 + 2000) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"tryGetByIdWithWellKnownSymbol", 0x1DuLL, v1256, v1257, v1258, v1259, v1260, v11263);
  *(_QWORD *)(a1 + 2008) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putByIdDirect", 0xDuLL, v1261, v1262, v1263, v1264, v1265, v11263);
  *(_QWORD *)(a1 + 2016) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putByIdDirectPrivate", 0x14uLL, v1266, v1267, v1268, v1269, v1270, v11263);
  *(_QWORD *)(a1 + 2024) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putByValDirect", 0xEuLL, v1271, v1272, v1273, v1274, v1275, v11263);
  *(_QWORD *)(a1 + 2032) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putByValWithThisSloppy", 0x16uLL, v1276, v1277, v1278, v1279, v1280, v11263);
  *(_QWORD *)(a1 + 2040) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putByValWithThisStrict", 0x16uLL, v1281, v1282, v1283, v1284, v1285, v11263);
  *(_QWORD *)(a1 + 2048) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putPromiseInternalField", 0x17uLL, v1286, v1287, v1288, v1289, v1290, v11263);
  *(_QWORD *)(a1 + 2056) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putGeneratorInternalField", 0x19uLL, v1291, v1292, v1293, v1294, v1295, v11263);
  *(_QWORD *)(a1 + 2064) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putAsyncGeneratorInternalField", 0x1EuLL, v1296, v1297, v1298, v1299, v1300, v11263);
  *(_QWORD *)(a1 + 2072) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putArrayIteratorInternalField", 0x1DuLL, v1301, v1302, v1303, v1304, v1305, v11263);
  *(_QWORD *)(a1 + 2080) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putStringIteratorInternalField", 0x1EuLL, v1306, v1307, v1308, v1309, v1310, v11263);
  *(_QWORD *)(a1 + 2088) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putMapIteratorInternalField", 0x1BuLL, v1311, v1312, v1313, v1314, v1315, v11263);
  *(_QWORD *)(a1 + 2096) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"putSetIteratorInternalField", 0x1BuLL, v1316, v1317, v1318, v1319, v1320, v11263);
  *(_QWORD *)(a1 + 2104) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"superSamplerBegin", 0x11uLL, v1321, v1322, v1323, v1324, v1325, v11263);
  *(_QWORD *)(a1 + 2112) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"superSamplerEnd", 0xFuLL, v1326, v1327, v1328, v1329, v1330, v11263);
  *(_QWORD *)(a1 + 2120) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toNumber", 8uLL, v1331, v1332, v1333, v1334, v1335, v11263);
  *(_QWORD *)(a1 + 2128) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toString", 8uLL, v1336, v1337, v1338, v1339, v1340, v11263);
  *(_QWORD *)(a1 + 2136) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toPropertyKey", 0xDuLL, v1341, v1342, v1343, v1344, v1345, v11263);
  *(_QWORD *)(a1 + 2144) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toObject", 8uLL, v1346, v1347, v1348, v1349, v1350, v11263);
  *(_QWORD *)(a1 + 2152) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toThis", 6uLL, v1351, v1352, v1353, v1354, v1355, v11263);
  *(_QWORD *)(a1 + 2160) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mustValidateResultOfProxyGetAndSetTraps", 0x27uLL, v1356, v1357, v1358, v1359, v1360, v11263);
  *(_QWORD *)(a1 + 2168) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mustValidateResultOfProxyTrapsExceptGetAndSet", 0x2DuLL, v1361, v1362, v1363, v1364, v1365, v11263);
  *(_QWORD *)(a1 + 2176) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newArrayWithSize", 0x10uLL, v1366, v1367, v1368, v1369, v1370, v11263);
  *(_QWORD *)(a1 + 2184) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newArrayWithSpecies", 0x13uLL, v1371, v1372, v1373, v1374, v1375, v11263);
  *(_QWORD *)(a1 + 2192) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newPromise", 0xAuLL, v1376, v1377, v1378, v1379, v1380, v11263);
  *(_QWORD *)(a1 + 2200) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createPromise", 0xDuLL, v1381, v1382, v1383, v1384, v1385, v11263);
  *(_QWORD *)(a1 + 2208) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"undefined", 9uLL, v1386, v1387, v1388, v1389, v1390, v11263);
  *(_QWORD *)(a1 + 2216) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Infinity", 8uLL, v1391, v1392, v1393, v1394, v1395, v11263);
  *(_QWORD *)(a1 + 2224) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"iterationKindKey", 0x10uLL, v1396, v1397, v1398, v1399, v1400, v11263);
  *(_QWORD *)(a1 + 2232) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"iterationKindValue", 0x12uLL, v1401, v1402, v1403, v1404, v1405, v11263);
  *(_QWORD *)(a1 + 2240) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"iterationKindEntries", 0x14uLL, v1406, v1407, v1408, v1409, v1410, v11263);
  *(_QWORD *)(a1 + 2248) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"MAX_ARRAY_INDEX", 0xFuLL, v1411, v1412, v1413, v1414, v1415, v11263);
  *(_QWORD *)(a1 + 2256) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"MAX_STRING_LENGTH", 0x11uLL, v1416, v1417, v1418, v1419, v1420, v11263);
  *(_QWORD *)(a1 + 2264) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"MAX_SAFE_INTEGER", 0x10uLL, v1421, v1422, v1423, v1424, v1425, v11263);
  *(_QWORD *)(a1 + 2272) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleFetch", 0xBuLL, v1426, v1427, v1428, v1429, v1430, v11263);
  *(_QWORD *)(a1 + 2280) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleTranslate", 0xFuLL, v1431, v1432, v1433, v1434, v1435, v11263);
  *(_QWORD *)(a1 + 2288) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleInstantiate", 0x11uLL, v1436, v1437, v1438, v1439, v1440, v11263);
  *(_QWORD *)(a1 + 2296) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleSatisfy", 0xDuLL, v1441, v1442, v1443, v1444, v1445, v11263);
  *(_QWORD *)(a1 + 2304) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleLink", 0xAuLL, v1446, v1447, v1448, v1449, v1450, v11263);
  *(_QWORD *)(a1 + 2312) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ModuleReady", 0xBuLL, v1451, v1452, v1453, v1454, v1455, v11263);
  *(_QWORD *)(a1 + 2320) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseRejectionReject", 0x16uLL, v1456, v1457, v1458, v1459, v1460, v11263);
  *(_QWORD *)(a1 + 2328) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseRejectionHandle", 0x16uLL, v1461, v1462, v1463, v1464, v1465, v11263);
  *(_QWORD *)(a1 + 2336) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseStatePending", 0x13uLL, v1466, v1467, v1468, v1469, v1470, v11263);
  *(_QWORD *)(a1 + 2344) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseStateFulfilled", 0x15uLL, v1471, v1472, v1473, v1474, v1475, v11263);
  *(_QWORD *)(a1 + 2352) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseStateRejected", 0x14uLL, v1476, v1477, v1478, v1479, v1480, v11263);
  *(_QWORD *)(a1 + 2360) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseStateMask", 0x10uLL, v1481, v1482, v1483, v1484, v1485, v11263);
  *(_QWORD *)(a1 + 2368) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseFlagsIsHandled", 0x15uLL, v1486, v1487, v1488, v1489, v1490, v11263);
  *(_QWORD *)(a1 + 2376) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseFlagsIsFirstResolvingFunctionCalled", 0x2AuLL, v1491, v1492, v1493, v1494, v1495, v11263);
  *(_QWORD *)(a1 + 2384) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseFieldFlags", 0x11uLL, v1496, v1497, v1498, v1499, v1500, v11263);
  *(_QWORD *)(a1 + 2392) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseFieldReactionsOrResult", 0x1DuLL, v1501, v1502, v1503, v1504, v1505, v11263);
  *(_QWORD *)(a1 + 2400) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"proxyFieldTarget", 0x10uLL, v1506, v1507, v1508, v1509, v1510, v11263);
  *(_QWORD *)(a1 + 2408) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"proxyFieldHandler", 0x11uLL, v1511, v1512, v1513, v1514, v1515, v11263);
  *(_QWORD *)(a1 + 2416) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFieldState", 0x13uLL, v1516, v1517, v1518, v1519, v1520, v11263);
  *(_QWORD *)(a1 + 2424) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFieldNext", 0x12uLL, v1521, v1522, v1523, v1524, v1525, v11263);
  *(_QWORD *)(a1 + 2432) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFieldThis", 0x12uLL, v1526, v1527, v1528, v1529, v1530, v11263);
  *(_QWORD *)(a1 + 2440) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFieldFrame", 0x13uLL, v1531, v1532, v1533, v1534, v1535, v11263);
  *(_QWORD *)(a1 + 2448) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFieldContext", 0x15uLL, v1536, v1537, v1538, v1539, v1540, v11263);
  *(_QWORD *)(a1 + 2456) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"GeneratorResumeModeNormal", 0x19uLL, v1541, v1542, v1543, v1544, v1545, v11263);
  *(_QWORD *)(a1 + 2464) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"GeneratorResumeModeThrow", 0x18uLL, v1546, v1547, v1548, v1549, v1550, v11263);
  *(_QWORD *)(a1 + 2472) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"GeneratorResumeModeReturn", 0x19uLL, v1551, v1552, v1553, v1554, v1555, v11263);
  *(_QWORD *)(a1 + 2480) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"GeneratorStateCompleted", 0x17uLL, v1556, v1557, v1558, v1559, v1560, v11263);
  *(_QWORD *)(a1 + 2488) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"GeneratorStateExecuting", 0x17uLL, v1561, v1562, v1563, v1564, v1565, v11263);
  *(_QWORD *)(a1 + 2496) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayIteratorFieldIndex", 0x17uLL, v1566, v1567, v1568, v1569, v1570, v11263);
  *(_QWORD *)(a1 + 2504) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayIteratorFieldIteratedObject", 0x20uLL, v1571, v1572, v1573, v1574, v1575, v11263);
  *(_QWORD *)(a1 + 2512) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayIteratorFieldKind", 0x16uLL, v1576, v1577, v1578, v1579, v1580, v11263);
  *(_QWORD *)(a1 + 2520) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorFieldEntry", 0x15uLL, v1581, v1582, v1583, v1584, v1585, v11263);
  *(_QWORD *)(a1 + 2528) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorFieldIteratedObject", 0x1EuLL, v1586, v1587, v1588, v1589, v1590, v11263);
  *(_QWORD *)(a1 + 2536) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorFieldStorage", 0x17uLL, v1591, v1592, v1593, v1594, v1595, v11263);
  *(_QWORD *)(a1 + 2544) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorFieldKind", 0x14uLL, v1596, v1597, v1598, v1599, v1600, v11263);
  *(_QWORD *)(a1 + 2552) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorFieldEntry", 0x15uLL, v1601, v1602, v1603, v1604, v1605, v11263);
  *(_QWORD *)(a1 + 2560) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorFieldIteratedObject", 0x1EuLL, v1606, v1607, v1608, v1609, v1610, v11263);
  *(_QWORD *)(a1 + 2568) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorFieldStorage", 0x17uLL, v1611, v1612, v1613, v1614, v1615, v11263);
  *(_QWORD *)(a1 + 2576) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorFieldKind", 0x14uLL, v1616, v1617, v1618, v1619, v1620, v11263);
  *(_QWORD *)(a1 + 2584) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringIteratorFieldIndex", 0x18uLL, v1621, v1622, v1623, v1624, v1625, v11263);
  *(_QWORD *)(a1 + 2592) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringIteratorFieldIteratedString", 0x21uLL, v1626, v1627, v1628, v1629, v1630, v11263);
  *(_QWORD *)(a1 + 2600) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorFieldSuspendReason", 0x20uLL, v1631, v1632, v1633, v1634, v1635, v11263);
  *(_QWORD *)(a1 + 2608) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorFieldQueueFirst", 0x1DuLL, v1636, v1637, v1638, v1639, v1640, v11263);
  *(_QWORD *)(a1 + 2616) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorFieldQueueLast", 0x1CuLL, v1641, v1642, v1643, v1644, v1645, v11263);
  *(_QWORD *)(a1 + 2624) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorStateCompleted", 0x1CuLL, v1646, v1647, v1648, v1649, v1650, v11263);
  *(_QWORD *)(a1 + 2632) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorStateExecuting", 0x1CuLL, v1651, v1652, v1653, v1654, v1655, v11263);
  *(_QWORD *)(a1 + 2640) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorStateAwaitingReturn", 0x21uLL, v1656, v1657, v1658, v1659, v1660, v11263);
  *(_QWORD *)(a1 + 2648) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorStateSuspendedStart", 0x21uLL, v1661, v1662, v1663, v1664, v1665, v11263);
  *(_QWORD *)(a1 + 2656) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorStateSuspendedYield", 0x21uLL, v1666, v1667, v1668, v1669, v1670, v11263);
  *(_QWORD *)(a1 + 2664) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorSuspendReasonYield", 0x20uLL, v1671, v1672, v1673, v1674, v1675, v11263);
  *(_QWORD *)(a1 + 2672) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorSuspendReasonAwait", 0x20uLL, v1676, v1677, v1678, v1679, v1680, v11263);
  *(_QWORD *)(a1 + 2680) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AsyncGeneratorSuspendReasonNone", 0x1FuLL, v1681, v1682, v1683, v1684, v1685, v11263);
  *(_QWORD *)(a1 + 2688) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"abstractModuleRecordFieldState", 0x1EuLL, v1686, v1687, v1688, v1689, v1690, v11263);
  *(_QWORD *)(a1 + 2696) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"orderedHashTableSentinel", 0x18uLL, v1691, v1692, v1693, v1694, v1695, v11263);
  *(_QWORD *)(a1 + 2704) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"add", 3uLL, v1696, v1697, v1698, v1699, v1700, v11263);
  *(_QWORD *)(a1 + 2712) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"applyFunction", 0xDuLL, v1701, v1702, v1703, v1704, v1705, v11263);
  *(_QWORD *)(a1 + 2720) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"assert", 6uLL, v1706, v1707, v1708, v1709, v1710, v11263);
  *(_QWORD *)(a1 + 2728) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"callFunction", 0xCuLL, v1711, v1712, v1713, v1714, v1715, v11263);
  *(_QWORD *)(a1 + 2736) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"charCodeAt", 0xAuLL, v1716, v1717, v1718, v1719, v1720, v11263);
  *(_QWORD *)(a1 + 2744) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"executor", 8uLL, v1721, v1722, v1723, v1724, v1725, v11263);
  *(_QWORD *)(a1 + 2752) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isView", 6uLL, v1726, v1727, v1728, v1729, v1730, v11263);
  *(_QWORD *)(a1 + 2760) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"iteratedObject", 0xEuLL, v1731, v1732, v1733, v1734, v1735, v11263);
  *(_QWORD *)(a1 + 2768) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"iteratedString", 0xEuLL, v1736, v1737, v1738, v1739, v1740, v11263);
  *(_QWORD *)(a1 + 2776) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promise", 7uLL, v1741, v1742, v1743, v1744, v1745, v11263);
  *(_QWORD *)(a1 + 2784) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"promiseOrCapability", 0x13uLL, v1746, v1747, v1748, v1749, v1750, v11263);
  *(_QWORD *)(a1 + 2792) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Object", 6uLL, v1751, v1752, v1753, v1754, v1755, v11263);
  *(_QWORD *)(a1 + 2800) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Number", 6uLL, v1756, v1757, v1758, v1759, v1760, v11263);
  *(_QWORD *)(a1 + 2808) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Array", 5uLL, v1761, v1762, v1763, v1764, v1765, v11263);
  *(_QWORD *)(a1 + 2816) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ArrayBuffer", 0xBuLL, v1766, v1767, v1768, v1769, v1770, v11263);
  *(_QWORD *)(a1 + 2824) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"ShadowRealm", 0xBuLL, v1771, v1772, v1773, v1774, v1775, v11263);
  *(_QWORD *)(a1 + 2832) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"RegExp", 6uLL, v1776, v1777, v1778, v1779, v1780, v11263);
  *(_QWORD *)(a1 + 2840) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"min", 3uLL, v1781, v1782, v1783, v1784, v1785, v11263);
  *(_QWORD *)(a1 + 2848) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"create", 6uLL, v1786, v1787, v1788, v1789, v1790, v11263);
  *(_QWORD *)(a1 + 2856) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"defineProperty", 0xEuLL, v1791, v1792, v1793, v1794, v1795, v11263);
  *(_QWORD *)(a1 + 2864) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"defaultPromiseThen", 0x12uLL, v1796, v1797, v1798, v1799, v1800, v11263);
  *(_QWORD *)(a1 + 2872) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Set", 3uLL, v1801, v1802, v1803, v1804, v1805, v11263);
  *(_QWORD *)(a1 + 2880) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Map", 3uLL, v1806, v1807, v1808, v1809, v1810, v11263);
  *(_QWORD *)(a1 + 2888) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"throwTypeErrorFunction", 0x16uLL, v1811, v1812, v1813, v1814, v1815, v11263);
  *(_QWORD *)(a1 + 2896) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"typedArrayLength", 0x10uLL, v1816, v1817, v1818, v1819, v1820, v11263);
  *(_QWORD *)(a1 + 2904) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"typedArrayContentType", 0x15uLL, v1821, v1822, v1823, v1824, v1825, v11263);
  *(_QWORD *)(a1 + 2912) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"typedArrayGetOriginalConstructor", 0x20uLL, v1826, v1827, v1828, v1829, v1830, v11263);
  *(_QWORD *)(a1 + 2920) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"BuiltinLog", 0xAuLL, v1831, v1832, v1833, v1834, v1835, v11263);
  *(_QWORD *)(a1 + 2928) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"BuiltinDescribe", 0xFuLL, v1836, v1837, v1838, v1839, v1840, v11263);
  *(_QWORD *)(a1 + 2936) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"homeObject", 0xAuLL, v1841, v1842, v1843, v1844, v1845, v11263);
  *(_QWORD *)(a1 + 2944) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"enqueueJob", 0xAuLL, v1846, v1847, v1848, v1849, v1850, v11263);
  *(_QWORD *)(a1 + 2952) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hostPromiseRejectionTracker", 0x1BuLL, v1851, v1852, v1853, v1854, v1855, v11263);
  *(_QWORD *)(a1 + 2960) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"onFulfilled", 0xBuLL, v1856, v1857, v1858, v1859, v1860, v11263);
  *(_QWORD *)(a1 + 2968) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"onRejected", 0xAuLL, v1861, v1862, v1863, v1864, v1865, v11263);
  *(_QWORD *)(a1 + 2976) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"push", 4uLL, v1866, v1867, v1868, v1869, v1870, v11263);
  *(_QWORD *)(a1 + 2984) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"repeatCharacter", 0xFuLL, v1871, v1872, v1873, v1874, v1875, v11263);
  *(_QWORD *)(a1 + 2992) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"starDefault", 0xBuLL, v1876, v1877, v1878, v1879, v1880, v11263);
  *(_QWORD *)(a1 + 3000) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"starNamespace", 0xDuLL, v1881, v1882, v1883, v1884, v1885, v11263);
  *(_QWORD *)(a1 + 3008) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"keys", 4uLL, v1886, v1887, v1888, v1889, v1890, v11263);
  *(_QWORD *)(a1 + 3016) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"values", 6uLL, v1891, v1892, v1893, v1894, v1895, v11263);
  *(_QWORD *)(a1 + 3024) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"set", 3uLL, v1896, v1897, v1898, v1899, v1900, v11263);
  *(_QWORD *)(a1 + 3032) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"clear", 5uLL, v1901, v1902, v1903, v1904, v1905, v11263);
  *(_QWORD *)(a1 + 3040) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"context", 7uLL, v1906, v1907, v1908, v1909, v1910, v11263);
  *(_QWORD *)(a1 + 3048) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"delete", 6uLL, v1911, v1912, v1913, v1914, v1915, v11263);
  *(_QWORD *)(a1 + 3056) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"size", 4uLL, v1916, v1917, v1918, v1919, v1920, v11263);
  *(_QWORD *)(a1 + 3064) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"shift", 5uLL, v1921, v1922, v1923, v1924, v1925, v11263);
  *(_QWORD *)(a1 + 3072) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"staticInitializerBlock", 0x16uLL, v1926, v1927, v1928, v1929, v1930, v11263);
  *(_QWORD *)(a1 + 3080) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Int8Array", 9uLL, v1931, v1932, v1933, v1934, v1935, v11263);
  *(_QWORD *)(a1 + 3088) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Int16Array", 0xAuLL, v1936, v1937, v1938, v1939, v1940, v11263);
  *(_QWORD *)(a1 + 3096) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Int32Array", 0xAuLL, v1941, v1942, v1943, v1944, v1945, v11263);
  *(_QWORD *)(a1 + 3104) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Uint8Array", 0xAuLL, v1946, v1947, v1948, v1949, v1950, v11263);
  *(_QWORD *)(a1 + 3112) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Uint8ClampedArray", 0x11uLL, v1951, v1952, v1953, v1954, v1955, v11263);
  *(_QWORD *)(a1 + 3120) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Uint16Array", 0xBuLL, v1956, v1957, v1958, v1959, v1960, v11263);
  *(_QWORD *)(a1 + 3128) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Uint32Array", 0xBuLL, v1961, v1962, v1963, v1964, v1965, v11263);
  *(_QWORD *)(a1 + 3136) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Float32Array", 0xCuLL, v1966, v1967, v1968, v1969, v1970, v11263);
  *(_QWORD *)(a1 + 3144) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"Float64Array", 0xCuLL, v1971, v1972, v1973, v1974, v1975, v11263);
  *(_QWORD *)(a1 + 3152) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"BigInt64Array", 0xDuLL, v1976, v1977, v1978, v1979, v1980, v11263);
  *(_QWORD *)(a1 + 3160) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"BigUint64Array", 0xEuLL, v1981, v1982, v1983, v1984, v1985, v11263);
  *(_QWORD *)(a1 + 3168) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"exec", 4uLL, v1986, v1987, v1988, v1989, v1990, v11263);
  *(_QWORD *)(a1 + 3176) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generator", 9uLL, v1991, v1992, v1993, v1994, v1995, v11263);
  *(_QWORD *)(a1 + 3184) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorNext", 0xDuLL, v1996, v1997, v1998, v1999, v2000, v11263);
  *(_QWORD *)(a1 + 3192) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorState", 0xEuLL, v2001, v2002, v2003, v2004, v2005, v11263);
  *(_QWORD *)(a1 + 3200) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorFrame", 0xEuLL, v2006, v2007, v2008, v2009, v2010, v11263);
  *(_QWORD *)(a1 + 3208) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorValue", 0xEuLL, v2011, v2012, v2013, v2014, v2015, v11263);
  *(_QWORD *)(a1 + 3216) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorThis", 0xDuLL, v2016, v2017, v2018, v2019, v2020, v11263);
  *(_QWORD *)(a1 + 3224) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"generatorResumeMode", 0x13uLL, v2021, v2022, v2023, v2024, v2025, v11263);
  *(_QWORD *)(a1 + 3232) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"syncIterator", 0xCuLL, v2026, v2027, v2028, v2029, v2030, v11263);
  *(_QWORD *)(a1 + 3240) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"nextMethod", 0xAuLL, v2031, v2032, v2033, v2034, v2035, v11263);
  *(_QWORD *)(a1 + 3248) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncGeneratorQueueItemNext", 0x1BuLL, v2036, v2037, v2038, v2039, v2040, v11263);
  *(_QWORD *)(a1 + 3256) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"this", 4uLL, v2041, v2042, v2043, v2044, v2045, v11263);
  *(_QWORD *)(a1 + 3264) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toIntegerOrInfinity", 0x13uLL, v2046, v2047, v2048, v2049, v2050, v11263);
  *(_QWORD *)(a1 + 3272) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLength", 8uLL, v2051, v2052, v2053, v2054, v2055, v11263);
  *(_QWORD *)(a1 + 3280) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"importMapStatus", 0xFuLL, v2056, v2057, v2058, v2059, v2060, v11263);
  *(_QWORD *)(a1 + 3288) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"importInRealm", 0xDuLL, v2061, v2062, v2063, v2064, v2065, v11263);
  *(_QWORD *)(a1 + 3296) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"evalFunction", 0xCuLL, v2066, v2067, v2068, v2069, v2070, v11263);
  *(_QWORD *)(a1 + 3304) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"evalInRealm", 0xBuLL, v2071, v2072, v2073, v2074, v2075, v11263);
  *(_QWORD *)(a1 + 3312) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"moveFunctionToRealm", 0x13uLL, v2076, v2077, v2078, v2079, v2080, v11263);
  *(_QWORD *)(a1 + 3320) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"newTargetLocal", 0xEuLL, v2081, v2082, v2083, v2084, v2085, v11263);
  *(_QWORD *)(a1 + 3328) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"derivedConstructor", 0x12uLL, v2086, v2087, v2088, v2089, v2090, v11263);
  *(_QWORD *)(a1 + 3336) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isTypedArrayView", 0x10uLL, v2091, v2092, v2093, v2094, v2095, v11263);
  *(_QWORD *)(a1 + 3344) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isSharedTypedArrayView", 0x16uLL, v2096, v2097, v2098, v2099, v2100, v11263);
  *(_QWORD *)(a1 + 3352) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isResizableOrGrowableSharedTypedArrayView", 0x29uLL, v2101, v2102, v2103, v2104, v2105, v11263);
  *(_QWORD *)(a1 + 3360) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isDetached", 0xAuLL, v2106, v2107, v2108, v2109, v2110, v11263);
  *(_QWORD *)(a1 + 3368) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"typedArrayFromFast", 0x12uLL, v2111, v2112, v2113, v2114, v2115, v11263);
  *(_QWORD *)(a1 + 3376) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isBoundFunction", 0xFuLL, v2116, v2117, v2118, v2119, v2120, v11263);
  *(_QWORD *)(a1 + 3384) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasInstanceBoundFunction", 0x18uLL, v2121, v2122, v2123, v2124, v2125, v11263);
  *(_QWORD *)(a1 + 3392) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"instanceOf", 0xAuLL, v2126, v2127, v2128, v2129, v2130, v11263);
  *(_QWORD *)(a1 + 3400) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isArraySlow", 0xBuLL, v2131, v2132, v2133, v2134, v2135, v11263);
  *(_QWORD *)(a1 + 3408) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"sameValue", 9uLL, v2136, v2137, v2138, v2139, v2140, v11263);
  *(_QWORD *)(a1 + 3416) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"concatMemcpy", 0xCuLL, v2141, v2142, v2143, v2144, v2145, v11263);
  *(_QWORD *)(a1 + 3424) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"appendMemcpy", 0xCuLL, v2146, v2147, v2148, v2149, v2150, v11263);
  *(_QWORD *)(a1 + 3432) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpCreate", 0xCuLL, v2151, v2152, v2153, v2154, v2155, v11263);
  *(_QWORD *)(a1 + 3440) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isRegExp", 8uLL, v2156, v2157, v2158, v2159, v2160, v11263);
  *(_QWORD *)(a1 + 3448) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"replaceUsingRegExp", 0x12uLL, v2161, v2162, v2163, v2164, v2165, v11263);
  *(_QWORD *)(a1 + 3456) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"replaceUsingStringSearch", 0x18uLL, v2166, v2167, v2168, v2169, v2170, v11263);
  *(_QWORD *)(a1 + 3464) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"replaceAllUsingStringSearch", 0x1BuLL, v2171, v2172, v2173, v2174, v2175, v11263);
  *(_QWORD *)(a1 + 3472) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"makeTypeError", 0xDuLL, v2176, v2177, v2178, v2179, v2180, v11263);
  *(_QWORD *)(a1 + 3480) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"AggregateError", 0xEuLL, v2181, v2182, v2183, v2184, v2185, v11263);
  *(_QWORD *)(a1 + 3488) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapStorage", 0xAuLL, v2186, v2187, v2188, v2189, v2190, v11263);
  *(_QWORD *)(a1 + 3496) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIterationNext", 0x10uLL, v2191, v2192, v2193, v2194, v2195, v11263);
  *(_QWORD *)(a1 + 3504) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIterationEntry", 0x11uLL, v2196, v2197, v2198, v2199, v2200, v11263);
  *(_QWORD *)(a1 + 3512) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIterationEntryKey", 0x14uLL, v2201, v2202, v2203, v2204, v2205, v11263);
  *(_QWORD *)(a1 + 3520) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIterationEntryValue", 0x16uLL, v2206, v2207, v2208, v2209, v2210, v11263);
  *(_QWORD *)(a1 + 3528) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorNext", 0xFuLL, v2211, v2212, v2213, v2214, v2215, v11263);
  *(_QWORD *)(a1 + 3536) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorKey", 0xEuLL, v2216, v2217, v2218, v2219, v2220, v11263);
  *(_QWORD *)(a1 + 3544) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"mapIteratorValue", 0x10uLL, v2221, v2222, v2223, v2224, v2225, v11263);
  *(_QWORD *)(a1 + 3552) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setStorage", 0xAuLL, v2226, v2227, v2228, v2229, v2230, v11263);
  *(_QWORD *)(a1 + 3560) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIterationNext", 0x10uLL, v2231, v2232, v2233, v2234, v2235, v11263);
  *(_QWORD *)(a1 + 3568) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIterationEntry", 0x11uLL, v2236, v2237, v2238, v2239, v2240, v11263);
  *(_QWORD *)(a1 + 3576) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIterationEntryKey", 0x14uLL, v2241, v2242, v2243, v2244, v2245, v11263);
  *(_QWORD *)(a1 + 3584) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorNext", 0xFuLL, v2246, v2247, v2248, v2249, v2250, v11263);
  *(_QWORD *)(a1 + 3592) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setIteratorKey", 0xEuLL, v2251, v2252, v2253, v2254, v2255, v11263);
  *(_QWORD *)(a1 + 3600) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setClone", 8uLL, v2256, v2257, v2258, v2259, v2260, v11263);
  *(_QWORD *)(a1 + 3608) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setPrototypeDirect", 0x12uLL, v2261, v2262, v2263, v2264, v2265, v11263);
  *(_QWORD *)(a1 + 3616) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"setPrototypeDirectOrThrow", 0x19uLL, v2266, v2267, v2268, v2269, v2270, v11263);
  *(_QWORD *)(a1 + 3624) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpBuiltinExec", 0x11uLL, v2271, v2272, v2273, v2274, v2275, v11263);
  *(_QWORD *)(a1 + 3632) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpMatchFast", 0xFuLL, v2276, v2277, v2278, v2279, v2280, v11263);
  *(_QWORD *)(a1 + 3640) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoFlagsGetter", 0x16uLL, v2281, v2282, v2283, v2284, v2285, v11263);
  *(_QWORD *)(a1 + 3648) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoHasIndicesGetter", 0x1BuLL, v2286, v2287, v2288, v2289, v2290, v11263);
  *(_QWORD *)(a1 + 3656) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoGlobalGetter", 0x17uLL, v2291, v2292, v2293, v2294, v2295, v11263);
  *(_QWORD *)(a1 + 3664) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoIgnoreCaseGetter", 0x1BuLL, v2296, v2297, v2298, v2299, v2300, v11263);
  *(_QWORD *)(a1 + 3672) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoMultilineGetter", 0x1AuLL, v2301, v2302, v2303, v2304, v2305, v11263);
  *(_QWORD *)(a1 + 3680) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoSourceGetter", 0x17uLL, v2306, v2307, v2308, v2309, v2310, v11263);
  *(_QWORD *)(a1 + 3688) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoStickyGetter", 0x17uLL, v2311, v2312, v2313, v2314, v2315, v11263);
  *(_QWORD *)(a1 + 3696) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoDotAllGetter", 0x17uLL, v2316, v2317, v2318, v2319, v2320, v11263);
  *(_QWORD *)(a1 + 3704) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoUnicodeGetter", 0x18uLL, v2321, v2322, v2323, v2324, v2325, v11263);
  *(_QWORD *)(a1 + 3712) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpProtoUnicodeSetsGetter", 0x1CuLL, v2326, v2327, v2328, v2329, v2330, v11263);
  *(_QWORD *)(a1 + 3720) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpPrototypeSymbolMatch", 0x1AuLL, v2331, v2332, v2333, v2334, v2335, v11263);
  *(_QWORD *)(a1 + 3728) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpPrototypeSymbolReplace", 0x1CuLL, v2336, v2337, v2338, v2339, v2340, v11263);
  *(_QWORD *)(a1 + 3736) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpSearchFast", 0x10uLL, v2341, v2342, v2343, v2344, v2345, v11263);
  *(_QWORD *)(a1 + 3744) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpSplitFast", 0xFuLL, v2346, v2347, v2348, v2349, v2350, v11263);
  *(_QWORD *)(a1 + 3752) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpTestFast", 0xEuLL, v2351, v2352, v2353, v2354, v2355, v11263);
  *(_QWORD *)(a1 + 3760) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpStringIteratorRegExp", 0x1AuLL, v2356, v2357, v2358, v2359, v2360, v11263);
  *(_QWORD *)(a1 + 3768) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpStringIteratorString", 0x1AuLL, v2361, v2362, v2363, v2364, v2365, v11263);
  *(_QWORD *)(a1 + 3776) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpStringIteratorGlobal", 0x1AuLL, v2366, v2367, v2368, v2369, v2370, v11263);
  *(_QWORD *)(a1 + 3784) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpStringIteratorUnicode", 0x1BuLL, v2371, v2372, v2373, v2374, v2375, v11263);
  *(_QWORD *)(a1 + 3792) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"regExpStringIteratorDone", 0x18uLL, v2376, v2377, v2378, v2379, v2380, v11263);
  *(_QWORD *)(a1 + 3800) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringIncludesInternal", 0x16uLL, v2381, v2382, v2383, v2384, v2385, v11263);
  *(_QWORD *)(a1 + 3808) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringIndexOfInternal", 0x15uLL, v2386, v2387, v2388, v2389, v2390, v11263);
  *(_QWORD *)(a1 + 3816) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringSplitFast", 0xFuLL, v2391, v2392, v2393, v2394, v2395, v11263);
  *(_QWORD *)(a1 + 3824) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"stringSubstring", 0xFuLL, v2396, v2397, v2398, v2399, v2400, v11263);
  *(_QWORD *)(a1 + 3832) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"handleNegativeProxyHasTrapResult", 0x20uLL, v2401, v2402, v2403, v2404, v2405, v11263);
  *(_QWORD *)(a1 + 3840) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"handlePositiveProxySetTrapResult", 0x20uLL, v2406, v2407, v2408, v2409, v2410, v11263);
  *(_QWORD *)(a1 + 3848) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"handleProxyGetTrapResult", 0x18uLL, v2411, v2412, v2413, v2414, v2415, v11263);
  *(_QWORD *)(a1 + 3856) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"importModule", 0xCuLL, v2416, v2417, v2418, v2419, v2420, v11263);
  *(_QWORD *)(a1 + 3864) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"copyDataProperties", 0x12uLL, v2421, v2422, v2423, v2424, v2425, v11263);
  *(_QWORD *)(a1 + 3872) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"cloneObject", 0xBuLL, v2426, v2427, v2428, v2429, v2430, v11263);
  *(_QWORD *)(a1 + 3880) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"meta", 4uLL, v2431, v2432, v2433, v2434, v2435, v11263);
  *(_QWORD *)(a1 + 3888) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"webAssemblyCompileStreamingInternal", 0x23uLL, v2436, v2437, v2438, v2439, v2440, v11263);
  *(_QWORD *)(a1 + 3896) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"webAssemblyInstantiateStreamingInternal", 0x27uLL, v2441, v2442, v2443, v2444, v2445, v11263);
  *(_QWORD *)(a1 + 3904) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"instanceFieldInitializer", 0x18uLL, v2446, v2447, v2448, v2449, v2450, v11263);
  *(_QWORD *)(a1 + 3912) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"privateBrand", 0xCuLL, v2451, v2452, v2453, v2454, v2455, v11263);
  *(_QWORD *)(a1 + 3920) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"privateClassBrand", 0x11uLL, v2456, v2457, v2458, v2459, v2460, v11263);
  *(_QWORD *)(a1 + 3928) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasOwnPropertyFunction", 0x16uLL, v2461, v2462, v2463, v2464, v2465, v11263);
  *(_QWORD *)(a1 + 3936) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createPrivateSymbol", 0x13uLL, v2466, v2467, v2468, v2469, v2470, v11263);
  *(_QWORD *)(a1 + 3944) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"entries", 7uLL, v2471, v2472, v2473, v2474, v2475, v11263);
  *(_QWORD *)(a1 + 3952) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"outOfLineReactionCounts", 0x17uLL, v2476, v2477, v2478, v2479, v2480, v11263);
  *(_QWORD *)(a1 + 3960) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"emptyPropertyNameEnumerator", 0x1BuLL, v2481, v2482, v2483, v2484, v2485, v11263);
  *(_QWORD *)(a1 + 3968) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"sentinelString", 0xEuLL, v2486, v2487, v2488, v2489, v2490, v11263);
  *(_QWORD *)(a1 + 3976) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"createRemoteFunction", 0x14uLL, v2491, v2492, v2493, v2494, v2495, v11263);
  *(_QWORD *)(a1 + 3984) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"isRemoteFunction", 0x10uLL, v2496, v2497, v2498, v2499, v2500, v11263);
  *(_QWORD *)(a1 + 3992) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arrayFromFast", 0xDuLL, v2501, v2502, v2503, v2504, v2505, v11263);
  *(_QWORD *)(a1 + 4000) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"arraySort", 9uLL, v2506, v2507, v2508, v2509, v2510, v11263);
  *(_QWORD *)(a1 + 4008) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"jsonParse", 9uLL, v2511, v2512, v2513, v2514, v2515, v11263);
  *(_QWORD *)(a1 + 4016) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"jsonStringify", 0xDuLL, v2516, v2517, v2518, v2519, v2520, v11263);
  *(_QWORD *)(a1 + 4024) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"String", 6uLL, v2521, v2522, v2523, v2524, v2525, v11263);
  *(_QWORD *)(a1 + 4032) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"substr", 6uLL, v2526, v2527, v2528, v2529, v2530, v11263);
  *(_QWORD *)(a1 + 4040) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"endsWith", 8uLL, v2531, v2532, v2533, v2534, v2535, v11263);
  *(_QWORD *)(a1 + 4048) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getOwnPropertyDescriptor", 0x18uLL, v2536, v2537, v2538, v2539, v2540, v11263);
  *(_QWORD *)(a1 + 4056) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getOwnPropertyNames", 0x13uLL, v2541, v2542, v2543, v2544, v2545, v11263);
  *(_QWORD *)(a1 + 4064) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"getOwnPropertySymbols", 0x15uLL, v2546, v2547, v2548, v2549, v2550, v11263);
  *(_QWORD *)(a1 + 4072) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasOwn", 6uLL, v2551, v2552, v2553, v2554, v2555, v11263);
  *(_QWORD *)(a1 + 4080) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"indexOf", 7uLL, v2556, v2557, v2558, v2559, v2560, v11263);
  *(_QWORD *)(a1 + 4088) = v11263[0];
  WTF::AtomStringImpl::addLiteral((uint64_t)"pop", 3uLL, v2561, v2562, v2563, v2564, v2565, v11263);
  *(_QWORD *)(a1 + 4096) = v11263[0];
  if ((dword_1ECF2C4A0 & 0x20) != 0)
  {
    v2573 = (WTF::StringImpl *)&JSC::Symbols::hasInstanceSymbol;
    v2574 = JSC::Symbols::hasInstanceSymbol + 2;
LABEL_7:
    *(_DWORD *)v2573 = v2574;
    goto LABEL_8;
  }
  if ((dword_1ECF2C4A0 & 0x10) != 0)
  {
    v2573 = (WTF::StringImpl *)&JSC::Symbols::hasInstanceSymbol;
    JSC::Symbols::hasInstanceSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::hasInstanceSymbol, v2567, v2568, v2569, v2570, v2571, v2572, v11263);
    v2573 = (WTF::StringImpl *)v11263[0];
  }
  v2574 = *(_DWORD *)v2573;
  *(_DWORD *)v2573 += 2;
  if (v2574)
    goto LABEL_7;
  WTF::StringImpl::~StringImpl(v2573, v2566, (uint64_t)v2567, v2568, v2569, v2570, v2571, v2572);
  WTF::fastFree(v11134, v11135, v11136, v11137, v11138, v11139, v11140, v11141);
LABEL_8:
  *(_QWORD *)(a1 + 4104) = v2573;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasInstance", 0xBuLL, v2568, v2569, v2570, v2571, v2572, v11263);
  *(_QWORD *)(a1 + 4112) = v11263[0];
  if ((dword_1ECF2C4D0 & 0x20) != 0)
  {
    v2582 = (WTF::StringImpl *)&JSC::Symbols::isConcatSpreadableSymbol;
    v2583 = JSC::Symbols::isConcatSpreadableSymbol + 2;
LABEL_12:
    *(_DWORD *)v2582 = v2583;
    goto LABEL_13;
  }
  if ((dword_1ECF2C4D0 & 0x10) != 0)
  {
    v2582 = (WTF::StringImpl *)&JSC::Symbols::isConcatSpreadableSymbol;
    JSC::Symbols::isConcatSpreadableSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::isConcatSpreadableSymbol, v2576, v2577, v2578, v2579, v2580, v2581, v11263);
    v2582 = (WTF::StringImpl *)v11263[0];
  }
  v2583 = *(_DWORD *)v2582;
  *(_DWORD *)v2582 += 2;
  if (v2583)
    goto LABEL_12;
  WTF::StringImpl::~StringImpl(v2582, v2575, (uint64_t)v2576, v2577, v2578, v2579, v2580, v2581);
  WTF::fastFree(v11142, v11143, v11144, v11145, v11146, v11147, v11148, v11149);
LABEL_13:
  *(_QWORD *)(a1 + 4120) = v2582;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isConcatSpreadable", 0x12uLL, v2577, v2578, v2579, v2580, v2581, v11263);
  *(_QWORD *)(a1 + 4128) = v11263[0];
  if ((dword_1ECF2C500 & 0x20) != 0)
  {
    v2591 = (WTF::StringImpl *)&JSC::Symbols::asyncIteratorSymbol;
    v2592 = JSC::Symbols::asyncIteratorSymbol + 2;
LABEL_17:
    *(_DWORD *)v2591 = v2592;
    goto LABEL_18;
  }
  if ((dword_1ECF2C500 & 0x10) != 0)
  {
    v2591 = (WTF::StringImpl *)&JSC::Symbols::asyncIteratorSymbol;
    JSC::Symbols::asyncIteratorSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::asyncIteratorSymbol, v2585, v2586, v2587, v2588, v2589, v2590, v11263);
    v2591 = (WTF::StringImpl *)v11263[0];
  }
  v2592 = *(_DWORD *)v2591;
  *(_DWORD *)v2591 += 2;
  if (v2592)
    goto LABEL_17;
  WTF::StringImpl::~StringImpl(v2591, v2584, (uint64_t)v2585, v2586, v2587, v2588, v2589, v2590);
  WTF::fastFree(v11150, v11151, v11152, v11153, v11154, v11155, v11156, v11157);
LABEL_18:
  *(_QWORD *)(a1 + 4136) = v2591;
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncIterator", 0xDuLL, v2586, v2587, v2588, v2589, v2590, v11263);
  *(_QWORD *)(a1 + 4144) = v11263[0];
  if ((dword_1ECF2C530 & 0x20) != 0)
  {
    v2600 = (WTF::StringImpl *)&JSC::Symbols::iteratorSymbol;
    v2601 = JSC::Symbols::iteratorSymbol + 2;
LABEL_22:
    *(_DWORD *)v2600 = v2601;
    goto LABEL_23;
  }
  if ((dword_1ECF2C530 & 0x10) != 0)
  {
    v2600 = (WTF::StringImpl *)&JSC::Symbols::iteratorSymbol;
    JSC::Symbols::iteratorSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::iteratorSymbol, v2594, v2595, v2596, v2597, v2598, v2599, v11263);
    v2600 = (WTF::StringImpl *)v11263[0];
  }
  v2601 = *(_DWORD *)v2600;
  *(_DWORD *)v2600 += 2;
  if (v2601)
    goto LABEL_22;
  WTF::StringImpl::~StringImpl(v2600, v2593, (uint64_t)v2594, v2595, v2596, v2597, v2598, v2599);
  WTF::fastFree(v11158, v11159, v11160, v11161, v11162, v11163, v11164, v11165);
LABEL_23:
  *(_QWORD *)(a1 + 4152) = v2600;
  WTF::AtomStringImpl::addLiteral((uint64_t)"iterator", 8uLL, v2595, v2596, v2597, v2598, v2599, v11263);
  *(_QWORD *)(a1 + 4160) = v11263[0];
  if ((dword_1ECF2C560 & 0x20) != 0)
  {
    v2609 = (WTF::StringImpl *)&JSC::Symbols::matchSymbol;
    v2610 = JSC::Symbols::matchSymbol + 2;
LABEL_27:
    *(_DWORD *)v2609 = v2610;
    goto LABEL_28;
  }
  if ((dword_1ECF2C560 & 0x10) != 0)
  {
    v2609 = (WTF::StringImpl *)&JSC::Symbols::matchSymbol;
    JSC::Symbols::matchSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::matchSymbol, v2603, v2604, v2605, v2606, v2607, v2608, v11263);
    v2609 = (WTF::StringImpl *)v11263[0];
  }
  v2610 = *(_DWORD *)v2609;
  *(_DWORD *)v2609 += 2;
  if (v2610)
    goto LABEL_27;
  WTF::StringImpl::~StringImpl(v2609, v2602, (uint64_t)v2603, v2604, v2605, v2606, v2607, v2608);
  WTF::fastFree(v11166, v11167, v11168, v11169, v11170, v11171, v11172, v11173);
LABEL_28:
  *(_QWORD *)(a1 + 4168) = v2609;
  WTF::AtomStringImpl::addLiteral((uint64_t)"match", 5uLL, v2604, v2605, v2606, v2607, v2608, v11263);
  *(_QWORD *)(a1 + 4176) = v11263[0];
  if ((dword_1ECF2C590 & 0x20) != 0)
  {
    v2618 = (WTF::StringImpl *)&JSC::Symbols::matchAllSymbol;
    v2619 = JSC::Symbols::matchAllSymbol + 2;
LABEL_32:
    *(_DWORD *)v2618 = v2619;
    goto LABEL_33;
  }
  if ((dword_1ECF2C590 & 0x10) != 0)
  {
    v2618 = (WTF::StringImpl *)&JSC::Symbols::matchAllSymbol;
    JSC::Symbols::matchAllSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::matchAllSymbol, v2612, v2613, v2614, v2615, v2616, v2617, v11263);
    v2618 = (WTF::StringImpl *)v11263[0];
  }
  v2619 = *(_DWORD *)v2618;
  *(_DWORD *)v2618 += 2;
  if (v2619)
    goto LABEL_32;
  WTF::StringImpl::~StringImpl(v2618, v2611, (uint64_t)v2612, v2613, v2614, v2615, v2616, v2617);
  WTF::fastFree(v11174, v11175, v11176, v11177, v11178, v11179, v11180, v11181);
LABEL_33:
  *(_QWORD *)(a1 + 4184) = v2618;
  WTF::AtomStringImpl::addLiteral((uint64_t)"matchAll", 8uLL, v2613, v2614, v2615, v2616, v2617, v11263);
  *(_QWORD *)(a1 + 4192) = v11263[0];
  if ((dword_1ECF2C5C0 & 0x20) != 0)
  {
    v2627 = (WTF::StringImpl *)&JSC::Symbols::replaceSymbol;
    v2628 = JSC::Symbols::replaceSymbol + 2;
LABEL_37:
    *(_DWORD *)v2627 = v2628;
    goto LABEL_38;
  }
  if ((dword_1ECF2C5C0 & 0x10) != 0)
  {
    v2627 = (WTF::StringImpl *)&JSC::Symbols::replaceSymbol;
    JSC::Symbols::replaceSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::replaceSymbol, v2621, v2622, v2623, v2624, v2625, v2626, v11263);
    v2627 = (WTF::StringImpl *)v11263[0];
  }
  v2628 = *(_DWORD *)v2627;
  *(_DWORD *)v2627 += 2;
  if (v2628)
    goto LABEL_37;
  WTF::StringImpl::~StringImpl(v2627, v2620, (uint64_t)v2621, v2622, v2623, v2624, v2625, v2626);
  WTF::fastFree(v11182, v11183, v11184, v11185, v11186, v11187, v11188, v11189);
LABEL_38:
  *(_QWORD *)(a1 + 4200) = v2627;
  WTF::AtomStringImpl::addLiteral((uint64_t)"replace", 7uLL, v2622, v2623, v2624, v2625, v2626, v11263);
  *(_QWORD *)(a1 + 4208) = v11263[0];
  if ((dword_1ECF2C5F0 & 0x20) != 0)
  {
    v2636 = (WTF::StringImpl *)&JSC::Symbols::searchSymbol;
    v2637 = JSC::Symbols::searchSymbol + 2;
LABEL_42:
    *(_DWORD *)v2636 = v2637;
    goto LABEL_43;
  }
  if ((dword_1ECF2C5F0 & 0x10) != 0)
  {
    v2636 = (WTF::StringImpl *)&JSC::Symbols::searchSymbol;
    JSC::Symbols::searchSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::searchSymbol, v2630, v2631, v2632, v2633, v2634, v2635, v11263);
    v2636 = (WTF::StringImpl *)v11263[0];
  }
  v2637 = *(_DWORD *)v2636;
  *(_DWORD *)v2636 += 2;
  if (v2637)
    goto LABEL_42;
  WTF::StringImpl::~StringImpl(v2636, v2629, (uint64_t)v2630, v2631, v2632, v2633, v2634, v2635);
  WTF::fastFree(v11190, v11191, v11192, v11193, v11194, v11195, v11196, v11197);
LABEL_43:
  *(_QWORD *)(a1 + 4216) = v2636;
  WTF::AtomStringImpl::addLiteral((uint64_t)"search", 6uLL, v2631, v2632, v2633, v2634, v2635, v11263);
  *(_QWORD *)(a1 + 4224) = v11263[0];
  if ((dword_1ECF2C620 & 0x20) != 0)
  {
    v2645 = (WTF::StringImpl *)&JSC::Symbols::speciesSymbol;
    v2646 = JSC::Symbols::speciesSymbol + 2;
LABEL_47:
    *(_DWORD *)v2645 = v2646;
    goto LABEL_48;
  }
  if ((dword_1ECF2C620 & 0x10) != 0)
  {
    v2645 = (WTF::StringImpl *)&JSC::Symbols::speciesSymbol;
    JSC::Symbols::speciesSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::speciesSymbol, v2639, v2640, v2641, v2642, v2643, v2644, v11263);
    v2645 = (WTF::StringImpl *)v11263[0];
  }
  v2646 = *(_DWORD *)v2645;
  *(_DWORD *)v2645 += 2;
  if (v2646)
    goto LABEL_47;
  WTF::StringImpl::~StringImpl(v2645, v2638, (uint64_t)v2639, v2640, v2641, v2642, v2643, v2644);
  WTF::fastFree(v11198, v11199, v11200, v11201, v11202, v11203, v11204, v11205);
LABEL_48:
  *(_QWORD *)(a1 + 4232) = v2645;
  WTF::AtomStringImpl::addLiteral((uint64_t)"species", 7uLL, v2640, v2641, v2642, v2643, v2644, v11263);
  *(_QWORD *)(a1 + 4240) = v11263[0];
  if ((dword_1ECF2C650 & 0x20) != 0)
  {
    v2654 = (WTF::StringImpl *)&JSC::Symbols::splitSymbol;
    v2655 = JSC::Symbols::splitSymbol + 2;
LABEL_52:
    *(_DWORD *)v2654 = v2655;
    goto LABEL_53;
  }
  if ((dword_1ECF2C650 & 0x10) != 0)
  {
    v2654 = (WTF::StringImpl *)&JSC::Symbols::splitSymbol;
    JSC::Symbols::splitSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::splitSymbol, v2648, v2649, v2650, v2651, v2652, v2653, v11263);
    v2654 = (WTF::StringImpl *)v11263[0];
  }
  v2655 = *(_DWORD *)v2654;
  *(_DWORD *)v2654 += 2;
  if (v2655)
    goto LABEL_52;
  WTF::StringImpl::~StringImpl(v2654, v2647, (uint64_t)v2648, v2649, v2650, v2651, v2652, v2653);
  WTF::fastFree(v11206, v11207, v11208, v11209, v11210, v11211, v11212, v11213);
LABEL_53:
  *(_QWORD *)(a1 + 4248) = v2654;
  WTF::AtomStringImpl::addLiteral((uint64_t)"split", 5uLL, v2649, v2650, v2651, v2652, v2653, v11263);
  *(_QWORD *)(a1 + 4256) = v11263[0];
  if ((dword_1ECF2C680 & 0x20) != 0)
  {
    v2663 = (WTF::StringImpl *)&JSC::Symbols::toPrimitiveSymbol;
    v2664 = JSC::Symbols::toPrimitiveSymbol + 2;
LABEL_57:
    *(_DWORD *)v2663 = v2664;
    goto LABEL_58;
  }
  if ((dword_1ECF2C680 & 0x10) != 0)
  {
    v2663 = (WTF::StringImpl *)&JSC::Symbols::toPrimitiveSymbol;
    JSC::Symbols::toPrimitiveSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::toPrimitiveSymbol, v2657, v2658, v2659, v2660, v2661, v2662, v11263);
    v2663 = (WTF::StringImpl *)v11263[0];
  }
  v2664 = *(_DWORD *)v2663;
  *(_DWORD *)v2663 += 2;
  if (v2664)
    goto LABEL_57;
  WTF::StringImpl::~StringImpl(v2663, v2656, (uint64_t)v2657, v2658, v2659, v2660, v2661, v2662);
  WTF::fastFree(v11214, v11215, v11216, v11217, v11218, v11219, v11220, v11221);
LABEL_58:
  *(_QWORD *)(a1 + 4264) = v2663;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toPrimitive", 0xBuLL, v2658, v2659, v2660, v2661, v2662, v11263);
  *(_QWORD *)(a1 + 4272) = v11263[0];
  if ((dword_1ECF2C6B0 & 0x20) != 0)
  {
    v2672 = (WTF::StringImpl *)&JSC::Symbols::toStringTagSymbol;
    v2673 = JSC::Symbols::toStringTagSymbol + 2;
LABEL_62:
    *(_DWORD *)v2672 = v2673;
    goto LABEL_63;
  }
  if ((dword_1ECF2C6B0 & 0x10) != 0)
  {
    v2672 = (WTF::StringImpl *)&JSC::Symbols::toStringTagSymbol;
    JSC::Symbols::toStringTagSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::toStringTagSymbol, v2666, v2667, v2668, v2669, v2670, v2671, v11263);
    v2672 = (WTF::StringImpl *)v11263[0];
  }
  v2673 = *(_DWORD *)v2672;
  *(_DWORD *)v2672 += 2;
  if (v2673)
    goto LABEL_62;
  WTF::StringImpl::~StringImpl(v2672, v2665, (uint64_t)v2666, v2667, v2668, v2669, v2670, v2671);
  WTF::fastFree(v11222, v11223, v11224, v11225, v11226, v11227, v11228, v11229);
LABEL_63:
  *(_QWORD *)(a1 + 4280) = v2672;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toStringTag", 0xBuLL, v2667, v2668, v2669, v2670, v2671, v11263);
  *(_QWORD *)(a1 + 4288) = v11263[0];
  if ((a0I[0] & 0x20) != 0)
  {
    v2681 = (WTF::StringImpl *)&JSC::Symbols::unscopablesSymbol;
    v2682 = JSC::Symbols::unscopablesSymbol + 2;
LABEL_67:
    *(_DWORD *)v2681 = v2682;
    goto LABEL_68;
  }
  if ((a0I[0] & 0x10) != 0)
  {
    v2681 = (WTF::StringImpl *)&JSC::Symbols::unscopablesSymbol;
    JSC::Symbols::unscopablesSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::unscopablesSymbol, v2675, v2676, v2677, v2678, v2679, v2680, v11263);
    v2681 = (WTF::StringImpl *)v11263[0];
  }
  v2682 = *(_DWORD *)v2681;
  *(_DWORD *)v2681 += 2;
  if (v2682)
    goto LABEL_67;
  WTF::StringImpl::~StringImpl(v2681, v2674, (uint64_t)v2675, v2676, v2677, v2678, v2679, v2680);
  WTF::fastFree(v11230, v11231, v11232, v11233, v11234, v11235, v11236, v11237);
LABEL_68:
  *(_QWORD *)(a1 + 4296) = v2681;
  WTF::AtomStringImpl::addLiteral((uint64_t)"unscopables", 0xBuLL, v2676, v2677, v2678, v2679, v2680, v11263);
  *(_QWORD *)(a1 + 4304) = v11263[0];
  if ((dword_1ECF2C710 & 0x20) != 0)
  {
    v2690 = (WTF::StringImpl *)&JSC::Symbols::intlLegacyConstructedSymbol;
    v2691 = JSC::Symbols::intlLegacyConstructedSymbol + 2;
LABEL_72:
    *(_DWORD *)v2690 = v2691;
    goto LABEL_73;
  }
  if ((dword_1ECF2C710 & 0x10) != 0)
  {
    v2690 = (WTF::StringImpl *)&JSC::Symbols::intlLegacyConstructedSymbol;
    JSC::Symbols::intlLegacyConstructedSymbol += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::intlLegacyConstructedSymbol, v2684, v2685, v2686, v2687, v2688, v2689, v11263);
    v2690 = (WTF::StringImpl *)v11263[0];
  }
  v2691 = *(_DWORD *)v2690;
  *(_DWORD *)v2690 += 2;
  if (v2691)
    goto LABEL_72;
  WTF::StringImpl::~StringImpl(v2690, v2683, (uint64_t)v2684, v2685, v2686, v2687, v2688, v2689);
  WTF::fastFree(v11238, v11239, v11240, v11241, v11242, v11243, v11244, v11245);
LABEL_73:
  *(_QWORD *)(a1 + 4312) = v2690;
  WTF::AtomStringImpl::addLiteral((uint64_t)"$vm", 3uLL, v2685, v2686, v2687, v2688, v2689, v11263);
  *(_QWORD *)(a1 + 4320) = v11263[0];
  if ((dword_1ECF320B0 & 0x20) != 0)
  {
    v2699 = (WTF::StringImpl *)&JSC::Symbols::dollarVMPrivateName;
    v2700 = JSC::Symbols::dollarVMPrivateName + 2;
LABEL_77:
    *(_DWORD *)v2699 = v2700;
    goto LABEL_78;
  }
  if ((dword_1ECF320B0 & 0x10) != 0)
  {
    v2699 = (WTF::StringImpl *)&JSC::Symbols::dollarVMPrivateName;
    JSC::Symbols::dollarVMPrivateName += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::dollarVMPrivateName, v2693, v2694, v2695, v2696, v2697, v2698, v11263);
    v2699 = (WTF::StringImpl *)v11263[0];
  }
  v2700 = *(_DWORD *)v2699;
  *(_DWORD *)v2699 += 2;
  if (v2700)
    goto LABEL_77;
  WTF::StringImpl::~StringImpl(v2699, v2692, (uint64_t)v2693, v2694, v2695, v2696, v2697, v2698);
  WTF::fastFree(v11246, v11247, v11248, v11249, v11250, v11251, v11252, v11253);
LABEL_78:
  *(_QWORD *)(a1 + 4328) = v2699;
  if ((dword_1ECF320E0 & 0x20) != 0)
  {
    v2701 = (WTF::StringImpl *)&JSC::Symbols::polyProtoPrivateName;
    v2702 = JSC::Symbols::polyProtoPrivateName + 2;
LABEL_82:
    *(_DWORD *)v2701 = v2702;
    goto LABEL_83;
  }
  if ((dword_1ECF320E0 & 0x10) != 0)
  {
    v2701 = (WTF::StringImpl *)&JSC::Symbols::polyProtoPrivateName;
    JSC::Symbols::polyProtoPrivateName += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a2 + 41912), (unint64_t)&JSC::Symbols::polyProtoPrivateName, v2693, v2694, v2695, v2696, v2697, v2698, v11263);
    v2701 = (WTF::StringImpl *)v11263[0];
  }
  v2702 = *(_DWORD *)v2701;
  *(_DWORD *)v2701 += 2;
  if (v2702)
    goto LABEL_82;
  WTF::StringImpl::~StringImpl(v2701, v2692, (uint64_t)v2693, v2694, v2695, v2696, v2697, v2698);
  WTF::fastFree(v11254, v11255, v11256, v11257, v11258, v11259, v11260, v11261);
LABEL_83:
  *(_QWORD *)(a1 + 4336) = v2701;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_QWORD *)(a1 + 4357) = 0;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_QWORD *)(a1 + 4381) = 0;
  JSC::Symbols::AsyncFromSyncIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncFromSyncIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2693, v2694, v2695, v2696, v2697, v2698, (uint64_t)v11263);
  v2710 = v11264;
  v11264 = 0;
  if (v2710)
  {
    if (*(_DWORD *)v2710 == 2)
    {
      WTF::StringImpl::~StringImpl(v2710, v2703, (uint64_t)v2704, v2705, v2706, v2707, v2708, v2709);
      WTF::fastFree(v6926, v6927, v6928, v6929, v6930, v6931, v6932, v6933);
    }
    else
    {
      *(_DWORD *)v2710 -= 2;
    }
  }
  JSC::Symbols::InternalPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::InternalPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2704, v2705, v2706, v2707, v2708, v2709, (uint64_t)v11263);
  v2718 = v11264;
  v11264 = 0;
  if (v2718)
  {
    if (*(_DWORD *)v2718 == 2)
    {
      WTF::StringImpl::~StringImpl(v2718, v2711, (uint64_t)v2712, v2713, v2714, v2715, v2716, v2717);
      WTF::fastFree(v6934, v6935, v6936, v6937, v6938, v6939, v6940, v6941);
    }
    else
    {
      *(_DWORD *)v2718 -= 2;
    }
  }
  JSC::Symbols::PromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::PromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2712, v2713, v2714, v2715, v2716, v2717, (uint64_t)v11263);
  v2726 = v11264;
  v11264 = 0;
  if (v2726)
  {
    if (*(_DWORD *)v2726 == 2)
    {
      WTF::StringImpl::~StringImpl(v2726, v2719, (uint64_t)v2720, v2721, v2722, v2723, v2724, v2725);
      WTF::fastFree(v6942, v6943, v6944, v6945, v6946, v6947, v6948, v6949);
    }
    else
    {
      *(_DWORD *)v2726 -= 2;
    }
  }
  JSC::Symbols::RegExpStringIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::RegExpStringIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2720, v2721, v2722, v2723, v2724, v2725, (uint64_t)v11263);
  v2734 = v11264;
  v11264 = 0;
  if (v2734)
  {
    if (*(_DWORD *)v2734 == 2)
    {
      WTF::StringImpl::~StringImpl(v2734, v2727, (uint64_t)v2728, v2729, v2730, v2731, v2732, v2733);
      WTF::fastFree(v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957);
    }
    else
    {
      *(_DWORD *)v2734 -= 2;
    }
  }
  JSC::Symbols::advanceStringIndexPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::advanceStringIndexPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2728, v2729, v2730, v2731, v2732, v2733, (uint64_t)v11263);
  v2742 = v11264;
  v11264 = 0;
  if (v2742)
  {
    if (*(_DWORD *)v2742 == 2)
    {
      WTF::StringImpl::~StringImpl(v2742, v2735, (uint64_t)v2736, v2737, v2738, v2739, v2740, v2741);
      WTF::fastFree(v6958, v6959, v6960, v6961, v6962, v6963, v6964, v6965);
    }
    else
    {
      *(_DWORD *)v2742 -= 2;
    }
  }
  JSC::Symbols::allPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::allPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2736, v2737, v2738, v2739, v2740, v2741, (uint64_t)v11263);
  v2750 = v11264;
  v11264 = 0;
  if (v2750)
  {
    if (*(_DWORD *)v2750 == 2)
    {
      WTF::StringImpl::~StringImpl(v2750, v2743, (uint64_t)v2744, v2745, v2746, v2747, v2748, v2749);
      WTF::fastFree(v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973);
    }
    else
    {
      *(_DWORD *)v2750 -= 2;
    }
  }
  JSC::Symbols::allSettledPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::allSettledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2744, v2745, v2746, v2747, v2748, v2749, (uint64_t)v11263);
  v2758 = v11264;
  v11264 = 0;
  if (v2758)
  {
    if (*(_DWORD *)v2758 == 2)
    {
      WTF::StringImpl::~StringImpl(v2758, v2751, (uint64_t)v2752, v2753, v2754, v2755, v2756, v2757);
      WTF::fastFree(v6974, v6975, v6976, v6977, v6978, v6979, v6980, v6981);
    }
    else
    {
      *(_DWORD *)v2758 -= 2;
    }
  }
  JSC::Symbols::anchorPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::anchorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2752, v2753, v2754, v2755, v2756, v2757, (uint64_t)v11263);
  v2766 = v11264;
  v11264 = 0;
  if (v2766)
  {
    if (*(_DWORD *)v2766 == 2)
    {
      WTF::StringImpl::~StringImpl(v2766, v2759, (uint64_t)v2760, v2761, v2762, v2763, v2764, v2765);
      WTF::fastFree(v6982, v6983, v6984, v6985, v6986, v6987, v6988, v6989);
    }
    else
    {
      *(_DWORD *)v2766 -= 2;
    }
  }
  JSC::Symbols::anyPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::anyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2760, v2761, v2762, v2763, v2764, v2765, (uint64_t)v11263);
  v2774 = v11264;
  v11264 = 0;
  if (v2774)
  {
    if (*(_DWORD *)v2774 == 2)
    {
      WTF::StringImpl::~StringImpl(v2774, v2767, (uint64_t)v2768, v2769, v2770, v2771, v2772, v2773);
      WTF::fastFree(v6990, v6991, v6992, v6993, v6994, v6995, v6996, v6997);
    }
    else
    {
      *(_DWORD *)v2774 -= 2;
    }
  }
  JSC::Symbols::applyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::applyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2768, v2769, v2770, v2771, v2772, v2773, (uint64_t)v11263);
  v2782 = v11264;
  v11264 = 0;
  if (v2782)
  {
    if (*(_DWORD *)v2782 == 2)
    {
      WTF::StringImpl::~StringImpl(v2782, v2775, (uint64_t)v2776, v2777, v2778, v2779, v2780, v2781);
      WTF::fastFree(v6998, v6999, v7000, v7001, v7002, v7003, v7004, v7005);
    }
    else
    {
      *(_DWORD *)v2782 -= 2;
    }
  }
  JSC::Symbols::arrayIteratorNextHelperPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorNextHelperPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2776, v2777, v2778, v2779, v2780, v2781, (uint64_t)v11263);
  v2790 = v11264;
  v11264 = 0;
  if (v2790)
  {
    if (*(_DWORD *)v2790 == 2)
    {
      WTF::StringImpl::~StringImpl(v2790, v2783, (uint64_t)v2784, v2785, v2786, v2787, v2788, v2789);
      WTF::fastFree(v7006, v7007, v7008, v7009, v7010, v7011, v7012, v7013);
    }
    else
    {
      *(_DWORD *)v2790 -= 2;
    }
  }
  JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2784, v2785, v2786, v2787, v2788, v2789, (uint64_t)v11263);
  v2798 = v11264;
  v11264 = 0;
  if (v2798)
  {
    if (*(_DWORD *)v2798 == 2)
    {
      WTF::StringImpl::~StringImpl(v2798, v2791, (uint64_t)v2792, v2793, v2794, v2795, v2796, v2797);
      WTF::fastFree(v7014, v7015, v7016, v7017, v7018, v7019, v7020, v7021);
    }
    else
    {
      *(_DWORD *)v2798 -= 2;
    }
  }
  JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2792, v2793, v2794, v2795, v2796, v2797, (uint64_t)v11263);
  v2806 = v11264;
  v11264 = 0;
  if (v2806)
  {
    if (*(_DWORD *)v2806 == 2)
    {
      WTF::StringImpl::~StringImpl(v2806, v2799, (uint64_t)v2800, v2801, v2802, v2803, v2804, v2805);
      WTF::fastFree(v7022, v7023, v7024, v7025, v7026, v7027, v7028, v7029);
    }
    else
    {
      *(_DWORD *)v2806 -= 2;
    }
  }
  JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2800, v2801, v2802, v2803, v2804, v2805, (uint64_t)v11263);
  v2814 = v11264;
  v11264 = 0;
  if (v2814)
  {
    if (*(_DWORD *)v2814 == 2)
    {
      WTF::StringImpl::~StringImpl(v2814, v2807, (uint64_t)v2808, v2809, v2810, v2811, v2812, v2813);
      WTF::fastFree(v7030, v7031, v7032, v7033, v7034, v7035, v7036, v7037);
    }
    else
    {
      *(_DWORD *)v2814 -= 2;
    }
  }
  JSC::Symbols::asyncFunctionResumePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2808, v2809, v2810, v2811, v2812, v2813, (uint64_t)v11263);
  v2822 = v11264;
  v11264 = 0;
  if (v2822)
  {
    if (*(_DWORD *)v2822 == 2)
    {
      WTF::StringImpl::~StringImpl(v2822, v2815, (uint64_t)v2816, v2817, v2818, v2819, v2820, v2821);
      WTF::fastFree(v7038, v7039, v7040, v7041, v7042, v7043, v7044, v7045);
    }
    else
    {
      *(_DWORD *)v2822 -= 2;
    }
  }
  JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2816, v2817, v2818, v2819, v2820, v2821, (uint64_t)v11263);
  v2830 = v11264;
  v11264 = 0;
  if (v2830)
  {
    if (*(_DWORD *)v2830 == 2)
    {
      WTF::StringImpl::~StringImpl(v2830, v2823, (uint64_t)v2824, v2825, v2826, v2827, v2828, v2829);
      WTF::fastFree(v7046, v7047, v7048, v7049, v7050, v7051, v7052, v7053);
    }
    else
    {
      *(_DWORD *)v2830 -= 2;
    }
  }
  JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2824, v2825, v2826, v2827, v2828, v2829, (uint64_t)v11263);
  v2838 = v11264;
  v11264 = 0;
  if (v2838)
  {
    if (*(_DWORD *)v2838 == 2)
    {
      WTF::StringImpl::~StringImpl(v2838, v2831, (uint64_t)v2832, v2833, v2834, v2835, v2836, v2837);
      WTF::fastFree(v7054, v7055, v7056, v7057, v7058, v7059, v7060, v7061);
    }
    else
    {
      *(_DWORD *)v2838 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorEnqueuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorEnqueuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2832, v2833, v2834, v2835, v2836, v2837, (uint64_t)v11263);
  v2846 = v11264;
  v11264 = 0;
  if (v2846)
  {
    if (*(_DWORD *)v2846 == 2)
    {
      WTF::StringImpl::~StringImpl(v2846, v2839, (uint64_t)v2840, v2841, v2842, v2843, v2844, v2845);
      WTF::fastFree(v7062, v7063, v7064, v7065, v7066, v7067, v7068, v7069);
    }
    else
    {
      *(_DWORD *)v2846 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorQueueDequeuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueDequeuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2840, v2841, v2842, v2843, v2844, v2845, (uint64_t)v11263);
  v2854 = v11264;
  v11264 = 0;
  if (v2854)
  {
    if (*(_DWORD *)v2854 == 2)
    {
      WTF::StringImpl::~StringImpl(v2854, v2847, (uint64_t)v2848, v2849, v2850, v2851, v2852, v2853);
      WTF::fastFree(v7070, v7071, v7072, v7073, v7074, v7075, v7076, v7077);
    }
    else
    {
      *(_DWORD *)v2854 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2848, v2849, v2850, v2851, v2852, v2853, (uint64_t)v11263);
  v2862 = v11264;
  v11264 = 0;
  if (v2862)
  {
    if (*(_DWORD *)v2862 == 2)
    {
      WTF::StringImpl::~StringImpl(v2862, v2855, (uint64_t)v2856, v2857, v2858, v2859, v2860, v2861);
      WTF::fastFree(v7078, v7079, v7080, v7081, v7082, v7083, v7084, v7085);
    }
    else
    {
      *(_DWORD *)v2862 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2856, v2857, v2858, v2859, v2860, v2861, (uint64_t)v11263);
  v2870 = v11264;
  v11264 = 0;
  if (v2870)
  {
    if (*(_DWORD *)v2870 == 2)
    {
      WTF::StringImpl::~StringImpl(v2870, v2863, (uint64_t)v2864, v2865, v2866, v2867, v2868, v2869);
      WTF::fastFree(v7086, v7087, v7088, v7089, v7090, v7091, v7092, v7093);
    }
    else
    {
      *(_DWORD *)v2870 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorRejectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorRejectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2864, v2865, v2866, v2867, v2868, v2869, (uint64_t)v11263);
  v2878 = v11264;
  v11264 = 0;
  if (v2878)
  {
    if (*(_DWORD *)v2878 == 2)
    {
      WTF::StringImpl::~StringImpl(v2878, v2871, (uint64_t)v2872, v2873, v2874, v2875, v2876, v2877);
      WTF::fastFree(v7094, v7095, v7096, v7097, v7098, v7099, v7100, v7101);
    }
    else
    {
      *(_DWORD *)v2878 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorResolvePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResolvePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2872, v2873, v2874, v2875, v2876, v2877, (uint64_t)v11263);
  v2886 = v11264;
  v11264 = 0;
  if (v2886)
  {
    if (*(_DWORD *)v2886 == 2)
    {
      WTF::StringImpl::~StringImpl(v2886, v2879, (uint64_t)v2880, v2881, v2882, v2883, v2884, v2885);
      WTF::fastFree(v7102, v7103, v7104, v7105, v7106, v7107, v7108, v7109);
    }
    else
    {
      *(_DWORD *)v2886 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorResumeNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2880, v2881, v2882, v2883, v2884, v2885, (uint64_t)v11263);
  v2894 = v11264;
  v11264 = 0;
  if (v2894)
  {
    if (*(_DWORD *)v2894 == 2)
    {
      WTF::StringImpl::~StringImpl(v2894, v2887, (uint64_t)v2888, v2889, v2890, v2891, v2892, v2893);
      WTF::fastFree(v7110, v7111, v7112, v7113, v7114, v7115, v7116, v7117);
    }
    else
    {
      *(_DWORD *)v2894 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2888, v2889, v2890, v2891, v2892, v2893, (uint64_t)v11263);
  v2902 = v11264;
  v11264 = 0;
  if (v2902)
  {
    if (*(_DWORD *)v2902 == 2)
    {
      WTF::StringImpl::~StringImpl(v2902, v2895, (uint64_t)v2896, v2897, v2898, v2899, v2900, v2901);
      WTF::fastFree(v7118, v7119, v7120, v7121, v7122, v7123, v7124, v7125);
    }
    else
    {
      *(_DWORD *)v2902 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2896, v2897, v2898, v2899, v2900, v2901, (uint64_t)v11263);
  v2910 = v11264;
  v11264 = 0;
  if (v2910)
  {
    if (*(_DWORD *)v2910 == 2)
    {
      WTF::StringImpl::~StringImpl(v2910, v2903, (uint64_t)v2904, v2905, v2906, v2907, v2908, v2909);
      WTF::fastFree(v7126, v7127, v7128, v7129, v7130, v7131, v7132, v7133);
    }
    else
    {
      *(_DWORD *)v2910 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorYieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2904, v2905, v2906, v2907, v2908, v2909, (uint64_t)v11263);
  v2918 = v11264;
  v11264 = 0;
  if (v2918)
  {
    if (*(_DWORD *)v2918 == 2)
    {
      WTF::StringImpl::~StringImpl(v2918, v2911, (uint64_t)v2912, v2913, v2914, v2915, v2916, v2917);
      WTF::fastFree(v7134, v7135, v7136, v7137, v7138, v7139, v7140, v7141);
    }
    else
    {
      *(_DWORD *)v2918 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2912, v2913, v2914, v2915, v2916, v2917, (uint64_t)v11263);
  v2926 = v11264;
  v11264 = 0;
  if (v2926)
  {
    if (*(_DWORD *)v2926 == 2)
    {
      WTF::StringImpl::~StringImpl(v2926, v2919, (uint64_t)v2920, v2921, v2922, v2923, v2924, v2925);
      WTF::fastFree(v7142, v7143, v7144, v7145, v7146, v7147, v7148, v7149);
    }
    else
    {
      *(_DWORD *)v2926 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2920, v2921, v2922, v2923, v2924, v2925, (uint64_t)v11263);
  v2934 = v11264;
  v11264 = 0;
  if (v2934)
  {
    if (*(_DWORD *)v2934 == 2)
    {
      WTF::StringImpl::~StringImpl(v2934, v2927, (uint64_t)v2928, v2929, v2930, v2931, v2932, v2933);
      WTF::fastFree(v7150, v7151, v7152, v7153, v7154, v7155, v7156, v7157);
    }
    else
    {
      *(_DWORD *)v2934 -= 2;
    }
  }
  JSC::Symbols::asyncModuleEvaluationPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::asyncModuleEvaluationPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2928, v2929, v2930, v2931, v2932, v2933, (uint64_t)v11263);
  v2942 = v11264;
  v11264 = 0;
  if (v2942)
  {
    if (*(_DWORD *)v2942 == 2)
    {
      WTF::StringImpl::~StringImpl(v2942, v2935, (uint64_t)v2936, v2937, v2938, v2939, v2940, v2941);
      WTF::fastFree(v7158, v7159, v7160, v7161, v7162, v7163, v7164, v7165);
    }
    else
    {
      *(_DWORD *)v2942 -= 2;
    }
  }
  JSC::Symbols::atPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::atPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2936, v2937, v2938, v2939, v2940, v2941, (uint64_t)v11263);
  v2950 = v11264;
  v11264 = 0;
  if (v2950)
  {
    if (*(_DWORD *)v2950 == 2)
    {
      WTF::StringImpl::~StringImpl(v2950, v2943, (uint64_t)v2944, v2945, v2946, v2947, v2948, v2949);
      WTF::fastFree(v7166, v7167, v7168, v7169, v7170, v7171, v7172, v7173);
    }
    else
    {
      *(_DWORD *)v2950 -= 2;
    }
  }
  JSC::Symbols::awaitValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::awaitValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2944, v2945, v2946, v2947, v2948, v2949, (uint64_t)v11263);
  v2958 = v11264;
  v11264 = 0;
  if (v2958)
  {
    if (*(_DWORD *)v2958 == 2)
    {
      WTF::StringImpl::~StringImpl(v2958, v2951, (uint64_t)v2952, v2953, v2954, v2955, v2956, v2957);
      WTF::fastFree(v7174, v7175, v7176, v7177, v7178, v7179, v7180, v7181);
    }
    else
    {
      *(_DWORD *)v2958 -= 2;
    }
  }
  JSC::Symbols::bigPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::bigPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2952, v2953, v2954, v2955, v2956, v2957, (uint64_t)v11263);
  v2966 = v11264;
  v11264 = 0;
  if (v2966)
  {
    if (*(_DWORD *)v2966 == 2)
    {
      WTF::StringImpl::~StringImpl(v2966, v2959, (uint64_t)v2960, v2961, v2962, v2963, v2964, v2965);
      WTF::fastFree(v7182, v7183, v7184, v7185, v7186, v7187, v7188, v7189);
    }
    else
    {
      *(_DWORD *)v2966 -= 2;
    }
  }
  JSC::Symbols::blinkPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::blinkPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2960, v2961, v2962, v2963, v2964, v2965, (uint64_t)v11263);
  v2974 = v11264;
  v11264 = 0;
  if (v2974)
  {
    if (*(_DWORD *)v2974 == 2)
    {
      WTF::StringImpl::~StringImpl(v2974, v2967, (uint64_t)v2968, v2969, v2970, v2971, v2972, v2973);
      WTF::fastFree(v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197);
    }
    else
    {
      *(_DWORD *)v2974 -= 2;
    }
  }
  JSC::Symbols::boldPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::boldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2968, v2969, v2970, v2971, v2972, v2973, (uint64_t)v11263);
  v2982 = v11264;
  v11264 = 0;
  if (v2982)
  {
    if (*(_DWORD *)v2982 == 2)
    {
      WTF::StringImpl::~StringImpl(v2982, v2975, (uint64_t)v2976, v2977, v2978, v2979, v2980, v2981);
      WTF::fastFree(v7198, v7199, v7200, v7201, v7202, v7203, v7204, v7205);
    }
    else
    {
      *(_DWORD *)v2982 -= 2;
    }
  }
  JSC::Symbols::builtinMapIterablePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::builtinMapIterablePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2976, v2977, v2978, v2979, v2980, v2981, (uint64_t)v11263);
  v2990 = v11264;
  v11264 = 0;
  if (v2990)
  {
    if (*(_DWORD *)v2990 == 2)
    {
      WTF::StringImpl::~StringImpl(v2990, v2983, (uint64_t)v2984, v2985, v2986, v2987, v2988, v2989);
      WTF::fastFree(v7206, v7207, v7208, v7209, v7210, v7211, v7212, v7213);
    }
    else
    {
      *(_DWORD *)v2990 -= 2;
    }
  }
  JSC::Symbols::builtinSetIterablePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::builtinSetIterablePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2984, v2985, v2986, v2987, v2988, v2989, (uint64_t)v11263);
  v2998 = v11264;
  v11264 = 0;
  if (v2998)
  {
    if (*(_DWORD *)v2998 == 2)
    {
      WTF::StringImpl::~StringImpl(v2998, v2991, (uint64_t)v2992, v2993, v2994, v2995, v2996, v2997);
      WTF::fastFree(v7214, v7215, v7216, v7217, v7218, v7219, v7220, v7221);
    }
    else
    {
      *(_DWORD *)v2998 -= 2;
    }
  }
  JSC::Symbols::cacheSatisfyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::cacheSatisfyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v2992, v2993, v2994, v2995, v2996, v2997, (uint64_t)v11263);
  v3006 = v11264;
  v11264 = 0;
  if (v3006)
  {
    if (*(_DWORD *)v3006 == 2)
    {
      WTF::StringImpl::~StringImpl(v3006, v2999, (uint64_t)v3000, v3001, v3002, v3003, v3004, v3005);
      WTF::fastFree(v7222, v7223, v7224, v7225, v7226, v7227, v7228, v7229);
    }
    else
    {
      *(_DWORD *)v3006 -= 2;
    }
  }
  JSC::Symbols::cacheSatisfyAndReturnPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::cacheSatisfyAndReturnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3000, v3001, v3002, v3003, v3004, v3005, (uint64_t)v11263);
  v3014 = v11264;
  v11264 = 0;
  if (v3014)
  {
    if (*(_DWORD *)v3014 == 2)
    {
      WTF::StringImpl::~StringImpl(v3014, v3007, (uint64_t)v3008, v3009, v3010, v3011, v3012, v3013);
      WTF::fastFree(v7230, v7231, v7232, v7233, v7234, v7235, v7236, v7237);
    }
    else
    {
      *(_DWORD *)v3014 -= 2;
    }
  }
  JSC::Symbols::callPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::callPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3008, v3009, v3010, v3011, v3012, v3013, (uint64_t)v11263);
  v3022 = v11264;
  v11264 = 0;
  if (v3022)
  {
    if (*(_DWORD *)v3022 == 2)
    {
      WTF::StringImpl::~StringImpl(v3022, v3015, (uint64_t)v3016, v3017, v3018, v3019, v3020, v3021);
      WTF::fastFree(v7238, v7239, v7240, v7241, v7242, v7243, v7244, v7245);
    }
    else
    {
      *(_DWORD *)v3022 -= 2;
    }
  }
  JSC::Symbols::catchPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::catchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3016, v3017, v3018, v3019, v3020, v3021, (uint64_t)v11263);
  v3030 = v11264;
  v11264 = 0;
  if (v3030)
  {
    if (*(_DWORD *)v3030 == 2)
    {
      WTF::StringImpl::~StringImpl(v3030, v3023, (uint64_t)v3024, v3025, v3026, v3027, v3028, v3029);
      WTF::fastFree(v7246, v7247, v7248, v7249, v7250, v7251, v7252, v7253);
    }
    else
    {
      *(_DWORD *)v3030 -= 2;
    }
  }
  JSC::Symbols::compileStreamingPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::compileStreamingPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3024, v3025, v3026, v3027, v3028, v3029, (uint64_t)v11263);
  v3038 = v11264;
  v11264 = 0;
  if (v3038)
  {
    if (*(_DWORD *)v3038 == 2)
    {
      WTF::StringImpl::~StringImpl(v3038, v3031, (uint64_t)v3032, v3033, v3034, v3035, v3036, v3037);
      WTF::fastFree(v7254, v7255, v7256, v7257, v7258, v7259, v7260, v7261);
    }
    else
    {
      *(_DWORD *)v3038 -= 2;
    }
  }
  JSC::Symbols::concatPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::concatPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3032, v3033, v3034, v3035, v3036, v3037, (uint64_t)v11263);
  v3046 = v11264;
  v11264 = 0;
  if (v3046)
  {
    if (*(_DWORD *)v3046 == 2)
    {
      WTF::StringImpl::~StringImpl(v3046, v3039, (uint64_t)v3040, v3041, v3042, v3043, v3044, v3045);
      WTF::fastFree(v7262, v7263, v7264, v7265, v7266, v7267, v7268, v7269);
    }
    else
    {
      *(_DWORD *)v3046 -= 2;
    }
  }
  JSC::Symbols::concatSlowPathPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::concatSlowPathPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3040, v3041, v3042, v3043, v3044, v3045, (uint64_t)v11263);
  v3054 = v11264;
  v11264 = 0;
  if (v3054)
  {
    if (*(_DWORD *)v3054 == 2)
    {
      WTF::StringImpl::~StringImpl(v3054, v3047, (uint64_t)v3048, v3049, v3050, v3051, v3052, v3053);
      WTF::fastFree(v7270, v7271, v7272, v7273, v7274, v7275, v7276, v7277);
    }
    else
    {
      *(_DWORD *)v3054 -= 2;
    }
  }
  JSC::Symbols::copyWithinPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::copyWithinPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3048, v3049, v3050, v3051, v3052, v3053, (uint64_t)v11263);
  v3062 = v11264;
  v11264 = 0;
  if (v3062)
  {
    if (*(_DWORD *)v3062 == 2)
    {
      WTF::StringImpl::~StringImpl(v3062, v3055, (uint64_t)v3056, v3057, v3058, v3059, v3060, v3061);
      WTF::fastFree(v7278, v7279, v7280, v7281, v7282, v7283, v7284, v7285);
    }
    else
    {
      *(_DWORD *)v3062 -= 2;
    }
  }
  JSC::Symbols::createArrayWithoutPrototypePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createArrayWithoutPrototypePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3056, v3057, v3058, v3059, v3060, v3061, (uint64_t)v11263);
  v3070 = v11264;
  v11264 = 0;
  if (v3070)
  {
    if (*(_DWORD *)v3070 == 2)
    {
      WTF::StringImpl::~StringImpl(v3070, v3063, (uint64_t)v3064, v3065, v3066, v3067, v3068, v3069);
      WTF::fastFree(v7286, v7287, v7288, v7289, v7290, v7291, v7292, v7293);
    }
    else
    {
      *(_DWORD *)v3070 -= 2;
    }
  }
  JSC::Symbols::createAsyncFromSyncIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createAsyncFromSyncIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3064, v3065, v3066, v3067, v3068, v3069, (uint64_t)v11263);
  v3078 = v11264;
  v11264 = 0;
  if (v3078)
  {
    if (*(_DWORD *)v3078 == 2)
    {
      WTF::StringImpl::~StringImpl(v3078, v3071, (uint64_t)v3072, v3073, v3074, v3075, v3076, v3077);
      WTF::fastFree(v7294, v7295, v7296, v7297, v7298, v7299, v7300, v7301);
    }
    else
    {
      *(_DWORD *)v3078 -= 2;
    }
  }
  JSC::Symbols::createHTMLPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createHTMLPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3072, v3073, v3074, v3075, v3076, v3077, (uint64_t)v11263);
  v3086 = v11264;
  v11264 = 0;
  if (v3086)
  {
    if (*(_DWORD *)v3086 == 2)
    {
      WTF::StringImpl::~StringImpl(v3086, v3079, (uint64_t)v3080, v3081, v3082, v3083, v3084, v3085);
      WTF::fastFree(v7302, v7303, v7304, v7305, v7306, v7307, v7308, v7309);
    }
    else
    {
      *(_DWORD *)v3086 -= 2;
    }
  }
  JSC::Symbols::createInspectorInjectedScriptPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createInspectorInjectedScriptPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3080, v3081, v3082, v3083, v3084, v3085, (uint64_t)v11263);
  v3094 = v11264;
  v11264 = 0;
  if (v3094)
  {
    if (*(_DWORD *)v3094 == 2)
    {
      WTF::StringImpl::~StringImpl(v3094, v3087, (uint64_t)v3088, v3089, v3090, v3091, v3092, v3093);
      WTF::fastFree(v7310, v7311, v7312, v7313, v7314, v7315, v7316, v7317);
    }
    else
    {
      *(_DWORD *)v3094 -= 2;
    }
  }
  JSC::Symbols::createObjectWithoutPrototypePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createObjectWithoutPrototypePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3088, v3089, v3090, v3091, v3092, v3093, (uint64_t)v11263);
  v3102 = v11264;
  v11264 = 0;
  if (v3102)
  {
    if (*(_DWORD *)v3102 == 2)
    {
      WTF::StringImpl::~StringImpl(v3102, v3095, (uint64_t)v3096, v3097, v3098, v3099, v3100, v3101);
      WTF::fastFree(v7318, v7319, v7320, v7321, v7322, v7323, v7324, v7325);
    }
    else
    {
      *(_DWORD *)v3102 -= 2;
    }
  }
  JSC::Symbols::createResolvingFunctionsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3096, v3097, v3098, v3099, v3100, v3101, (uint64_t)v11263);
  v3110 = v11264;
  v11264 = 0;
  if (v3110)
  {
    if (*(_DWORD *)v3110 == 2)
    {
      WTF::StringImpl::~StringImpl(v3110, v3103, (uint64_t)v3104, v3105, v3106, v3107, v3108, v3109);
      WTF::fastFree(v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333);
    }
    else
    {
      *(_DWORD *)v3110 -= 2;
    }
  }
  JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3104, v3105, v3106, v3107, v3108, v3109, (uint64_t)v11263);
  v3118 = v11264;
  v11264 = 0;
  if (v3118)
  {
    if (*(_DWORD *)v3118 == 2)
    {
      WTF::StringImpl::~StringImpl(v3118, v3111, (uint64_t)v3112, v3113, v3114, v3115, v3116, v3117);
      WTF::fastFree(v7334, v7335, v7336, v7337, v7338, v7339, v7340, v7341);
    }
    else
    {
      *(_DWORD *)v3118 -= 2;
    }
  }
  JSC::Symbols::crossRealmThrowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::crossRealmThrowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3112, v3113, v3114, v3115, v3116, v3117, (uint64_t)v11263);
  v3126 = v11264;
  v11264 = 0;
  if (v3126)
  {
    if (*(_DWORD *)v3126 == 2)
    {
      WTF::StringImpl::~StringImpl(v3126, v3119, (uint64_t)v3120, v3121, v3122, v3123, v3124, v3125);
      WTF::fastFree(v7342, v7343, v7344, v7345, v7346, v7347, v7348, v7349);
    }
    else
    {
      *(_DWORD *)v3126 -= 2;
    }
  }
  JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3120, v3121, v3122, v3123, v3124, v3125, (uint64_t)v11263);
  v3134 = v11264;
  v11264 = 0;
  if (v3134)
  {
    if (*(_DWORD *)v3134 == 2)
    {
      WTF::StringImpl::~StringImpl(v3134, v3127, (uint64_t)v3128, v3129, v3130, v3131, v3132, v3133);
      WTF::fastFree(v7350, v7351, v7352, v7353, v7354, v7355, v7356, v7357);
    }
    else
    {
      *(_DWORD *)v3134 -= 2;
    }
  }
  JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3128, v3129, v3130, v3131, v3132, v3133, (uint64_t)v11263);
  v3142 = v11264;
  v11264 = 0;
  if (v3142)
  {
    if (*(_DWORD *)v3142 == 2)
    {
      WTF::StringImpl::~StringImpl(v3142, v3135, (uint64_t)v3136, v3137, v3138, v3139, v3140, v3141);
      WTF::fastFree(v7358, v7359, v7360, v7361, v7362, v7363, v7364, v7365);
    }
    else
    {
      *(_DWORD *)v3142 -= 2;
    }
  }
  JSC::Symbols::deletePropertyPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::deletePropertyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3136, v3137, v3138, v3139, v3140, v3141, (uint64_t)v11263);
  v3150 = v11264;
  v11264 = 0;
  if (v3150)
  {
    if (*(_DWORD *)v3150 == 2)
    {
      WTF::StringImpl::~StringImpl(v3150, v3143, (uint64_t)v3144, v3145, v3146, v3147, v3148, v3149);
      WTF::fastFree(v7366, v7367, v7368, v7369, v7370, v7371, v7372, v7373);
    }
    else
    {
      *(_DWORD *)v3150 -= 2;
    }
  }
  JSC::Symbols::dependencyKeysIfEvaluatedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::dependencyKeysIfEvaluatedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3144, v3145, v3146, v3147, v3148, v3149, (uint64_t)v11263);
  v3158 = v11264;
  v11264 = 0;
  if (v3158)
  {
    if (*(_DWORD *)v3158 == 2)
    {
      WTF::StringImpl::~StringImpl(v3158, v3151, (uint64_t)v3152, v3153, v3154, v3155, v3156, v3157);
      WTF::fastFree(v7374, v7375, v7376, v7377, v7378, v7379, v7380, v7381);
    }
    else
    {
      *(_DWORD *)v3158 -= 2;
    }
  }
  JSC::Symbols::differencePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::differencePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3152, v3153, v3154, v3155, v3156, v3157, (uint64_t)v11263);
  v3166 = v11264;
  v11264 = 0;
  if (v3166)
  {
    if (*(_DWORD *)v3166 == 2)
    {
      WTF::StringImpl::~StringImpl(v3166, v3159, (uint64_t)v3160, v3161, v3162, v3163, v3164, v3165);
      WTF::fastFree(v7382, v7383, v7384, v7385, v7386, v7387, v7388, v7389);
    }
    else
    {
      *(_DWORD *)v3166 -= 2;
    }
  }
  JSC::Symbols::doAsyncGeneratorBodyCallPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3160, v3161, v3162, v3163, v3164, v3165, (uint64_t)v11263);
  v3174 = v11264;
  v11264 = 0;
  if (v3174)
  {
    if (*(_DWORD *)v3174 == 2)
    {
      WTF::StringImpl::~StringImpl(v3174, v3167, (uint64_t)v3168, v3169, v3170, v3171, v3172, v3173);
      WTF::fastFree(v7390, v7391, v7392, v7393, v7394, v7395, v7396, v7397);
    }
    else
    {
      *(_DWORD *)v3174 -= 2;
    }
  }
  JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3168, v3169, v3170, v3171, v3172, v3173, (uint64_t)v11263);
  v3182 = v11264;
  v11264 = 0;
  if (v3182)
  {
    if (*(_DWORD *)v3182 == 2)
    {
      WTF::StringImpl::~StringImpl(v3182, v3175, (uint64_t)v3176, v3177, v3178, v3179, v3180, v3181);
      WTF::fastFree(v7398, v7399, v7400, v7401, v7402, v7403, v7404, v7405);
    }
    else
    {
      *(_DWORD *)v3182 -= 2;
    }
  }
  JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3176, v3177, v3178, v3179, v3180, v3181, (uint64_t)v11263);
  v3190 = v11264;
  v11264 = 0;
  if (v3190)
  {
    if (*(_DWORD *)v3190 == 2)
    {
      WTF::StringImpl::~StringImpl(v3190, v3183, (uint64_t)v3184, v3185, v3186, v3187, v3188, v3189);
      WTF::fastFree(v7406, v7407, v7408, v7409, v7410, v7411, v7412, v7413);
    }
    else
    {
      *(_DWORD *)v3190 -= 2;
    }
  }
  JSC::Symbols::ensureRegisteredPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::ensureRegisteredPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3184, v3185, v3186, v3187, v3188, v3189, (uint64_t)v11263);
  v3198 = v11264;
  v11264 = 0;
  if (v3198)
  {
    if (*(_DWORD *)v3198 == 2)
    {
      WTF::StringImpl::~StringImpl(v3198, v3191, (uint64_t)v3192, v3193, v3194, v3195, v3196, v3197);
      WTF::fastFree(v7414, v7415, v7416, v7417, v7418, v7419, v7420, v7421);
    }
    else
    {
      *(_DWORD *)v3198 -= 2;
    }
  }
  JSC::Symbols::evaluatePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::evaluatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3192, v3193, v3194, v3195, v3196, v3197, (uint64_t)v11263);
  v3206 = v11264;
  v11264 = 0;
  if (v3206)
  {
    if (*(_DWORD *)v3206 == 2)
    {
      WTF::StringImpl::~StringImpl(v3206, v3199, (uint64_t)v3200, v3201, v3202, v3203, v3204, v3205);
      WTF::fastFree(v7422, v7423, v7424, v7425, v7426, v7427, v7428, v7429);
    }
    else
    {
      *(_DWORD *)v3206 -= 2;
    }
  }
  JSC::Symbols::everyPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::everyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3200, v3201, v3202, v3203, v3204, v3205, (uint64_t)v11263);
  v3214 = v11264;
  v11264 = 0;
  if (v3214)
  {
    if (*(_DWORD *)v3214 == 2)
    {
      WTF::StringImpl::~StringImpl(v3214, v3207, (uint64_t)v3208, v3209, v3210, v3211, v3212, v3213);
      WTF::fastFree(v7430, v7431, v7432, v7433, v7434, v7435, v7436, v7437);
    }
    else
    {
      *(_DWORD *)v3214 -= 2;
    }
  }
  JSC::Symbols::fillPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fillPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3208, v3209, v3210, v3211, v3212, v3213, (uint64_t)v11263);
  v3222 = v11264;
  v11264 = 0;
  if (v3222)
  {
    if (*(_DWORD *)v3222 == 2)
    {
      WTF::StringImpl::~StringImpl(v3222, v3215, (uint64_t)v3216, v3217, v3218, v3219, v3220, v3221);
      WTF::fastFree(v7438, v7439, v7440, v7441, v7442, v7443, v7444, v7445);
    }
    else
    {
      *(_DWORD *)v3222 -= 2;
    }
  }
  JSC::Symbols::filterPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::filterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3216, v3217, v3218, v3219, v3220, v3221, (uint64_t)v11263);
  v3230 = v11264;
  v11264 = 0;
  if (v3230)
  {
    if (*(_DWORD *)v3230 == 2)
    {
      WTF::StringImpl::~StringImpl(v3230, v3223, (uint64_t)v3224, v3225, v3226, v3227, v3228, v3229);
      WTF::fastFree(v7446, v7447, v7448, v7449, v7450, v7451, v7452, v7453);
    }
    else
    {
      *(_DWORD *)v3230 -= 2;
    }
  }
  JSC::Symbols::finallyPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::finallyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3224, v3225, v3226, v3227, v3228, v3229, (uint64_t)v11263);
  v3238 = v11264;
  v11264 = 0;
  if (v3238)
  {
    if (*(_DWORD *)v3238 == 2)
    {
      WTF::StringImpl::~StringImpl(v3238, v3231, (uint64_t)v3232, v3233, v3234, v3235, v3236, v3237);
      WTF::fastFree(v7454, v7455, v7456, v7457, v7458, v7459, v7460, v7461);
    }
    else
    {
      *(_DWORD *)v3238 -= 2;
    }
  }
  JSC::Symbols::findPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::findPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3232, v3233, v3234, v3235, v3236, v3237, (uint64_t)v11263);
  v3246 = v11264;
  v11264 = 0;
  if (v3246)
  {
    if (*(_DWORD *)v3246 == 2)
    {
      WTF::StringImpl::~StringImpl(v3246, v3239, (uint64_t)v3240, v3241, v3242, v3243, v3244, v3245);
      WTF::fastFree(v7462, v7463, v7464, v7465, v7466, v7467, v7468, v7469);
    }
    else
    {
      *(_DWORD *)v3246 -= 2;
    }
  }
  JSC::Symbols::findIndexPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::findIndexPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3240, v3241, v3242, v3243, v3244, v3245, (uint64_t)v11263);
  v3254 = v11264;
  v11264 = 0;
  if (v3254)
  {
    if (*(_DWORD *)v3254 == 2)
    {
      WTF::StringImpl::~StringImpl(v3254, v3247, (uint64_t)v3248, v3249, v3250, v3251, v3252, v3253);
      WTF::fastFree(v7470, v7471, v7472, v7473, v7474, v7475, v7476, v7477);
    }
    else
    {
      *(_DWORD *)v3254 -= 2;
    }
  }
  JSC::Symbols::findLastPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::findLastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3248, v3249, v3250, v3251, v3252, v3253, (uint64_t)v11263);
  v3262 = v11264;
  v11264 = 0;
  if (v3262)
  {
    if (*(_DWORD *)v3262 == 2)
    {
      WTF::StringImpl::~StringImpl(v3262, v3255, (uint64_t)v3256, v3257, v3258, v3259, v3260, v3261);
      WTF::fastFree(v7478, v7479, v7480, v7481, v7482, v7483, v7484, v7485);
    }
    else
    {
      *(_DWORD *)v3262 -= 2;
    }
  }
  JSC::Symbols::findLastIndexPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::findLastIndexPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3256, v3257, v3258, v3259, v3260, v3261, (uint64_t)v11263);
  v3270 = v11264;
  v11264 = 0;
  if (v3270)
  {
    if (*(_DWORD *)v3270 == 2)
    {
      WTF::StringImpl::~StringImpl(v3270, v3263, (uint64_t)v3264, v3265, v3266, v3267, v3268, v3269);
      WTF::fastFree(v7486, v7487, v7488, v7489, v7490, v7491, v7492, v7493);
    }
    else
    {
      *(_DWORD *)v3270 -= 2;
    }
  }
  JSC::Symbols::fixedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fixedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3264, v3265, v3266, v3267, v3268, v3269, (uint64_t)v11263);
  v3278 = v11264;
  v11264 = 0;
  if (v3278)
  {
    if (*(_DWORD *)v3278 == 2)
    {
      WTF::StringImpl::~StringImpl(v3278, v3271, (uint64_t)v3272, v3273, v3274, v3275, v3276, v3277);
      WTF::fastFree(v7494, v7495, v7496, v7497, v7498, v7499, v7500, v7501);
    }
    else
    {
      *(_DWORD *)v3278 -= 2;
    }
  }
  JSC::Symbols::flatPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::flatPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3272, v3273, v3274, v3275, v3276, v3277, (uint64_t)v11263);
  v3286 = v11264;
  v11264 = 0;
  if (v3286)
  {
    if (*(_DWORD *)v3286 == 2)
    {
      WTF::StringImpl::~StringImpl(v3286, v3279, (uint64_t)v3280, v3281, v3282, v3283, v3284, v3285);
      WTF::fastFree(v7502, v7503, v7504, v7505, v7506, v7507, v7508, v7509);
    }
    else
    {
      *(_DWORD *)v3286 -= 2;
    }
  }
  JSC::Symbols::flatIntoArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::flatIntoArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3280, v3281, v3282, v3283, v3284, v3285, (uint64_t)v11263);
  v3294 = v11264;
  v11264 = 0;
  if (v3294)
  {
    if (*(_DWORD *)v3294 == 2)
    {
      WTF::StringImpl::~StringImpl(v3294, v3287, (uint64_t)v3288, v3289, v3290, v3291, v3292, v3293);
      WTF::fastFree(v7510, v7511, v7512, v7513, v7514, v7515, v7516, v7517);
    }
    else
    {
      *(_DWORD *)v3294 -= 2;
    }
  }
  JSC::Symbols::flatIntoArrayWithCallbackPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::flatIntoArrayWithCallbackPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3288, v3289, v3290, v3291, v3292, v3293, (uint64_t)v11263);
  v3302 = v11264;
  v11264 = 0;
  if (v3302)
  {
    if (*(_DWORD *)v3302 == 2)
    {
      WTF::StringImpl::~StringImpl(v3302, v3295, (uint64_t)v3296, v3297, v3298, v3299, v3300, v3301);
      WTF::fastFree(v7518, v7519, v7520, v7521, v7522, v7523, v7524, v7525);
    }
    else
    {
      *(_DWORD *)v3302 -= 2;
    }
  }
  JSC::Symbols::flatMapPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::flatMapPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3296, v3297, v3298, v3299, v3300, v3301, (uint64_t)v11263);
  v3310 = v11264;
  v11264 = 0;
  if (v3310)
  {
    if (*(_DWORD *)v3310 == 2)
    {
      WTF::StringImpl::~StringImpl(v3310, v3303, (uint64_t)v3304, v3305, v3306, v3307, v3308, v3309);
      WTF::fastFree(v7526, v7527, v7528, v7529, v7530, v7531, v7532, v7533);
    }
    else
    {
      *(_DWORD *)v3310 -= 2;
    }
  }
  JSC::Symbols::fontcolorPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fontcolorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3304, v3305, v3306, v3307, v3308, v3309, (uint64_t)v11263);
  v3318 = v11264;
  v11264 = 0;
  if (v3318)
  {
    if (*(_DWORD *)v3318 == 2)
    {
      WTF::StringImpl::~StringImpl(v3318, v3311, (uint64_t)v3312, v3313, v3314, v3315, v3316, v3317);
      WTF::fastFree(v7534, v7535, v7536, v7537, v7538, v7539, v7540, v7541);
    }
    else
    {
      *(_DWORD *)v3318 -= 2;
    }
  }
  JSC::Symbols::fontsizePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fontsizePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3312, v3313, v3314, v3315, v3316, v3317, (uint64_t)v11263);
  v3326 = v11264;
  v11264 = 0;
  if (v3326)
  {
    if (*(_DWORD *)v3326 == 2)
    {
      WTF::StringImpl::~StringImpl(v3326, v3319, (uint64_t)v3320, v3321, v3322, v3323, v3324, v3325);
      WTF::fastFree(v7542, v7543, v7544, v7545, v7546, v7547, v7548, v7549);
    }
    else
    {
      *(_DWORD *)v3326 -= 2;
    }
  }
  JSC::Symbols::forEachPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::forEachPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3320, v3321, v3322, v3323, v3324, v3325, (uint64_t)v11263);
  v3334 = v11264;
  v11264 = 0;
  if (v3334)
  {
    if (*(_DWORD *)v3334 == 2)
    {
      WTF::StringImpl::~StringImpl(v3334, v3327, (uint64_t)v3328, v3329, v3330, v3331, v3332, v3333);
      WTF::fastFree(v7550, v7551, v7552, v7553, v7554, v7555, v7556, v7557);
    }
    else
    {
      *(_DWORD *)v3334 -= 2;
    }
  }
  JSC::Symbols::forceFulfillPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::forceFulfillPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3328, v3329, v3330, v3331, v3332, v3333, (uint64_t)v11263);
  v3342 = v11264;
  v11264 = 0;
  if (v3342)
  {
    if (*(_DWORD *)v3342 == 2)
    {
      WTF::StringImpl::~StringImpl(v3342, v3335, (uint64_t)v3336, v3337, v3338, v3339, v3340, v3341);
      WTF::fastFree(v7558, v7559, v7560, v7561, v7562, v7563, v7564, v7565);
    }
    else
    {
      *(_DWORD *)v3342 -= 2;
    }
  }
  JSC::Symbols::fromPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::fromPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3336, v3337, v3338, v3339, v3340, v3341, (uint64_t)v11263);
  v3350 = v11264;
  v11264 = 0;
  if (v3350)
  {
    if (*(_DWORD *)v3350 == 2)
    {
      WTF::StringImpl::~StringImpl(v3350, v3343, (uint64_t)v3344, v3345, v3346, v3347, v3348, v3349);
      WTF::fastFree(v7566, v7567, v7568, v7569, v7570, v7571, v7572, v7573);
    }
    else
    {
      *(_DWORD *)v3350 -= 2;
    }
  }
  JSC::Symbols::fromAsyncPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fromAsyncPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3344, v3345, v3346, v3347, v3348, v3349, (uint64_t)v11263);
  v3358 = v11264;
  v11264 = 0;
  if (v3358)
  {
    if (*(_DWORD *)v3358 == 2)
    {
      WTF::StringImpl::~StringImpl(v3358, v3351, (uint64_t)v3352, v3353, v3354, v3355, v3356, v3357);
      WTF::fastFree(v7574, v7575, v7576, v7577, v7578, v7579, v7580, v7581);
    }
    else
    {
      *(_DWORD *)v3358 -= 2;
    }
  }
  JSC::Symbols::fromEntriesPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::fromEntriesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3352, v3353, v3354, v3355, v3356, v3357, (uint64_t)v11263);
  v3366 = v11264;
  v11264 = 0;
  if (v3366)
  {
    if (*(_DWORD *)v3366 == 2)
    {
      WTF::StringImpl::~StringImpl(v3366, v3359, (uint64_t)v3360, v3361, v3362, v3363, v3364, v3365);
      WTF::fastFree(v7582, v7583, v7584, v7585, v7586, v7587, v7588, v7589);
    }
    else
    {
      *(_DWORD *)v3366 -= 2;
    }
  }
  JSC::Symbols::fulfillFetchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::fulfillFetchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3360, v3361, v3362, v3363, v3364, v3365, (uint64_t)v11263);
  v3374 = v11264;
  v11264 = 0;
  if (v3374)
  {
    if (*(_DWORD *)v3374 == 2)
    {
      WTF::StringImpl::~StringImpl(v3374, v3367, (uint64_t)v3368, v3369, v3370, v3371, v3372, v3373);
      WTF::fastFree(v7590, v7591, v7592, v7593, v7594, v7595, v7596, v7597);
    }
    else
    {
      *(_DWORD *)v3374 -= 2;
    }
  }
  JSC::Symbols::fulfillPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::fulfillPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3368, v3369, v3370, v3371, v3372, v3373, (uint64_t)v11263);
  v3382 = v11264;
  v11264 = 0;
  if (v3382)
  {
    if (*(_DWORD *)v3382 == 2)
    {
      WTF::StringImpl::~StringImpl(v3382, v3375, (uint64_t)v3376, v3377, v3378, v3379, v3380, v3381);
      WTF::fastFree(v7598, v7599, v7600, v7601, v7602, v7603, v7604, v7605);
    }
    else
    {
      *(_DWORD *)v3382 -= 2;
    }
  }
  JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3376, v3377, v3378, v3379, v3380, v3381, (uint64_t)v11263);
  v3390 = v11264;
  v11264 = 0;
  if (v3390)
  {
    if (*(_DWORD *)v3390 == 2)
    {
      WTF::StringImpl::~StringImpl(v3390, v3383, (uint64_t)v3384, v3385, v3386, v3387, v3388, v3389);
      WTF::fastFree(v7606, v7607, v7608, v7609, v7610, v7611, v7612, v7613);
    }
    else
    {
      *(_DWORD *)v3390 -= 2;
    }
  }
  JSC::Symbols::fulfillWithoutPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::fulfillWithoutPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3384, v3385, v3386, v3387, v3388, v3389, (uint64_t)v11263);
  v3398 = v11264;
  v11264 = 0;
  if (v3398)
  {
    if (*(_DWORD *)v3398 == 2)
    {
      WTF::StringImpl::~StringImpl(v3398, v3391, (uint64_t)v3392, v3393, v3394, v3395, v3396, v3397);
      WTF::fastFree(v7614, v7615, v7616, v7617, v7618, v7619, v7620, v7621);
    }
    else
    {
      *(_DWORD *)v3398 -= 2;
    }
  }
  JSC::Symbols::generatorResumePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorResumePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3392, v3393, v3394, v3395, v3396, v3397, (uint64_t)v11263);
  v3406 = v11264;
  v11264 = 0;
  if (v3406)
  {
    if (*(_DWORD *)v3406 == 2)
    {
      WTF::StringImpl::~StringImpl(v3406, v3399, (uint64_t)v3400, v3401, v3402, v3403, v3404, v3405);
      WTF::fastFree(v7622, v7623, v7624, v7625, v7626, v7627, v7628, v7629);
    }
    else
    {
      *(_DWORD *)v3406 -= 2;
    }
  }
  JSC::Symbols::getPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::getPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3400, v3401, v3402, v3403, v3404, v3405, (uint64_t)v11263);
  v3414 = v11264;
  v11264 = 0;
  if (v3414)
  {
    if (*(_DWORD *)v3414 == 2)
    {
      WTF::StringImpl::~StringImpl(v3414, v3407, (uint64_t)v3408, v3409, v3410, v3411, v3412, v3413);
      WTF::fastFree(v7630, v7631, v7632, v7633, v7634, v7635, v7636, v7637);
    }
    else
    {
      *(_DWORD *)v3414 -= 2;
    }
  }
  JSC::Symbols::getSetSizeAsIntPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getSetSizeAsIntPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3408, v3409, v3410, v3411, v3412, v3413, (uint64_t)v11263);
  v3422 = v11264;
  v11264 = 0;
  if (v3422)
  {
    if (*(_DWORD *)v3422 == 2)
    {
      WTF::StringImpl::~StringImpl(v3422, v3415, (uint64_t)v3416, v3417, v3418, v3419, v3420, v3421);
      WTF::fastFree(v7638, v7639, v7640, v7641, v7642, v7643, v7644, v7645);
    }
    else
    {
      *(_DWORD *)v3422 -= 2;
    }
  }
  JSC::Symbols::getSubstitutionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getSubstitutionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3416, v3417, v3418, v3419, v3420, v3421, (uint64_t)v11263);
  v3430 = v11264;
  v11264 = 0;
  if (v3430)
  {
    if (*(_DWORD *)v3430 == 2)
    {
      WTF::StringImpl::~StringImpl(v3430, v3423, (uint64_t)v3424, v3425, v3426, v3427, v3428, v3429);
      WTF::fastFree(v7646, v7647, v7648, v7649, v7650, v7651, v7652, v7653);
    }
    else
    {
      *(_DWORD *)v3430 -= 2;
    }
  }
  JSC::Symbols::groupByPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::groupByPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3424, v3425, v3426, v3427, v3428, v3429, (uint64_t)v11263);
  v3438 = v11264;
  v11264 = 0;
  if (v3438)
  {
    if (*(_DWORD *)v3438 == 2)
    {
      WTF::StringImpl::~StringImpl(v3438, v3431, (uint64_t)v3432, v3433, v3434, v3435, v3436, v3437);
      WTF::fastFree(v7654, v7655, v7656, v7657, v7658, v7659, v7660, v7661);
    }
    else
    {
      *(_DWORD *)v3438 -= 2;
    }
  }
  JSC::Symbols::hasPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::hasPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3432, v3433, v3434, v3435, v3436, v3437, (uint64_t)v11263);
  v3446 = v11264;
  v11264 = 0;
  if (v3446)
  {
    if (*(_DWORD *)v3446 == 2)
    {
      WTF::StringImpl::~StringImpl(v3446, v3439, (uint64_t)v3440, v3441, v3442, v3443, v3444, v3445);
      WTF::fastFree(v7662, v7663, v7664, v7665, v7666, v7667, v7668, v7669);
    }
    else
    {
      *(_DWORD *)v3446 -= 2;
    }
  }
  JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3440, v3441, v3442, v3443, v3444, v3445, (uint64_t)v11263);
  v3454 = v11264;
  v11264 = 0;
  if (v3454)
  {
    if (*(_DWORD *)v3454 == 2)
    {
      WTF::StringImpl::~StringImpl(v3454, v3447, (uint64_t)v3448, v3449, v3450, v3451, v3452, v3453);
      WTF::fastFree(v7670, v7671, v7672, v7673, v7674, v7675, v7676, v7677);
    }
    else
    {
      *(_DWORD *)v3454 -= 2;
    }
  }
  JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3448, v3449, v3450, v3451, v3452, v3453, (uint64_t)v11263);
  v3462 = v11264;
  v11264 = 0;
  if (v3462)
  {
    if (*(_DWORD *)v3462 == 2)
    {
      WTF::StringImpl::~StringImpl(v3462, v3455, (uint64_t)v3456, v3457, v3458, v3459, v3460, v3461);
      WTF::fastFree(v7678, v7679, v7680, v7681, v7682, v7683, v7684, v7685);
    }
    else
    {
      *(_DWORD *)v3462 -= 2;
    }
  }
  JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3456, v3457, v3458, v3459, v3460, v3461, (uint64_t)v11263);
  v3470 = v11264;
  v11264 = 0;
  if (v3470)
  {
    if (*(_DWORD *)v3470 == 2)
    {
      WTF::StringImpl::~StringImpl(v3470, v3463, (uint64_t)v3464, v3465, v3466, v3467, v3468, v3469);
      WTF::fastFree(v7686, v7687, v7688, v7689, v7690, v7691, v7692, v7693);
    }
    else
    {
      *(_DWORD *)v3470 -= 2;
    }
  }
  JSC::Symbols::importValuePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::importValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3464, v3465, v3466, v3467, v3468, v3469, (uint64_t)v11263);
  v3478 = v11264;
  v11264 = 0;
  if (v3478)
  {
    if (*(_DWORD *)v3478 == 2)
    {
      WTF::StringImpl::~StringImpl(v3478, v3471, (uint64_t)v3472, v3473, v3474, v3475, v3476, v3477);
      WTF::fastFree(v7694, v7695, v7696, v7697, v7698, v7699, v7700, v7701);
    }
    else
    {
      *(_DWORD *)v3478 -= 2;
    }
  }
  JSC::Symbols::includesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::includesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3472, v3473, v3474, v3475, v3476, v3477, (uint64_t)v11263);
  v3486 = v11264;
  v11264 = 0;
  if (v3486)
  {
    if (*(_DWORD *)v3486 == 2)
    {
      WTF::StringImpl::~StringImpl(v3486, v3479, (uint64_t)v3480, v3481, v3482, v3483, v3484, v3485);
      WTF::fastFree(v7702, v7703, v7704, v7705, v7706, v7707, v7708, v7709);
    }
    else
    {
      *(_DWORD *)v3486 -= 2;
    }
  }
  JSC::Symbols::instantiateStreamingPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::instantiateStreamingPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3480, v3481, v3482, v3483, v3484, v3485, (uint64_t)v11263);
  v3494 = v11264;
  v11264 = 0;
  if (v3494)
  {
    if (*(_DWORD *)v3494 == 2)
    {
      WTF::StringImpl::~StringImpl(v3494, v3487, (uint64_t)v3488, v3489, v3490, v3491, v3492, v3493);
      WTF::fastFree(v7710, v7711, v7712, v7713, v7714, v7715, v7716, v7717);
    }
    else
    {
      *(_DWORD *)v3494 -= 2;
    }
  }
  JSC::Symbols::internalAllPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::internalAllPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3488, v3489, v3490, v3491, v3492, v3493, (uint64_t)v11263);
  v3502 = v11264;
  v11264 = 0;
  if (v3502)
  {
    if (*(_DWORD *)v3502 == 2)
    {
      WTF::StringImpl::~StringImpl(v3502, v3495, (uint64_t)v3496, v3497, v3498, v3499, v3500, v3501);
      WTF::fastFree(v7718, v7719, v7720, v7721, v7722, v7723, v7724, v7725);
    }
    else
    {
      *(_DWORD *)v3502 -= 2;
    }
  }
  JSC::Symbols::intersectionPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::intersectionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3496, v3497, v3498, v3499, v3500, v3501, (uint64_t)v11263);
  v3510 = v11264;
  v11264 = 0;
  if (v3510)
  {
    if (*(_DWORD *)v3510 == 2)
    {
      WTF::StringImpl::~StringImpl(v3510, v3503, (uint64_t)v3504, v3505, v3506, v3507, v3508, v3509);
      WTF::fastFree(v7726, v7727, v7728, v7729, v7730, v7731, v7732, v7733);
    }
    else
    {
      *(_DWORD *)v3510 -= 2;
    }
  }
  JSC::Symbols::isArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3504, v3505, v3506, v3507, v3508, v3509, (uint64_t)v11263);
  v3518 = v11264;
  v11264 = 0;
  if (v3518)
  {
    if (*(_DWORD *)v3518 == 2)
    {
      WTF::StringImpl::~StringImpl(v3518, v3511, (uint64_t)v3512, v3513, v3514, v3515, v3516, v3517);
      WTF::fastFree(v7734, v7735, v7736, v7737, v7738, v7739, v7740, v7741);
    }
    else
    {
      *(_DWORD *)v3518 -= 2;
    }
  }
  JSC::Symbols::isDisjointFromPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::isDisjointFromPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3512, v3513, v3514, v3515, v3516, v3517, (uint64_t)v11263);
  v3526 = v11264;
  v11264 = 0;
  if (v3526)
  {
    if (*(_DWORD *)v3526 == 2)
    {
      WTF::StringImpl::~StringImpl(v3526, v3519, (uint64_t)v3520, v3521, v3522, v3523, v3524, v3525);
      WTF::fastFree(v7742, v7743, v7744, v7745, v7746, v7747, v7748, v7749);
    }
    else
    {
      *(_DWORD *)v3526 -= 2;
    }
  }
  JSC::Symbols::isExecutionStatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isExecutionStatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3520, v3521, v3522, v3523, v3524, v3525, (uint64_t)v11263);
  v3534 = v11264;
  v11264 = 0;
  if (v3534)
  {
    if (*(_DWORD *)v3534 == 2)
    {
      WTF::StringImpl::~StringImpl(v3534, v3527, (uint64_t)v3528, v3529, v3530, v3531, v3532, v3533);
      WTF::fastFree(v7750, v7751, v7752, v7753, v7754, v7755, v7756, v7757);
    }
    else
    {
      *(_DWORD *)v3534 -= 2;
    }
  }
  JSC::Symbols::isFinitePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isFinitePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3528, v3529, v3530, v3531, v3532, v3533, (uint64_t)v11263);
  v3542 = v11264;
  v11264 = 0;
  if (v3542)
  {
    if (*(_DWORD *)v3542 == 2)
    {
      WTF::StringImpl::~StringImpl(v3542, v3535, (uint64_t)v3536, v3537, v3538, v3539, v3540, v3541);
      WTF::fastFree(v7758, v7759, v7760, v7761, v7762, v7763, v7764, v7765);
    }
    else
    {
      *(_DWORD *)v3542 -= 2;
    }
  }
  JSC::Symbols::isSubsetOfPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::isSubsetOfPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3536, v3537, v3538, v3539, v3540, v3541, (uint64_t)v11263);
  v3550 = v11264;
  v11264 = 0;
  if (v3550)
  {
    if (*(_DWORD *)v3550 == 2)
    {
      WTF::StringImpl::~StringImpl(v3550, v3543, (uint64_t)v3544, v3545, v3546, v3547, v3548, v3549);
      WTF::fastFree(v7766, v7767, v7768, v7769, v7770, v7771, v7772, v7773);
    }
    else
    {
      *(_DWORD *)v3550 -= 2;
    }
  }
  JSC::Symbols::isSupersetOfPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::isSupersetOfPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3544, v3545, v3546, v3547, v3548, v3549, (uint64_t)v11263);
  v3558 = v11264;
  v11264 = 0;
  if (v3558)
  {
    if (*(_DWORD *)v3558 == 2)
    {
      WTF::StringImpl::~StringImpl(v3558, v3551, (uint64_t)v3552, v3553, v3554, v3555, v3556, v3557);
      WTF::fastFree(v7774, v7775, v7776, v7777, v7778, v7779, v7780, v7781);
    }
    else
    {
      *(_DWORD *)v3558 -= 2;
    }
  }
  JSC::Symbols::isSuspendYieldStatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isSuspendYieldStatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3552, v3553, v3554, v3555, v3556, v3557, (uint64_t)v11263);
  v3566 = v11264;
  v11264 = 0;
  if (v3566)
  {
    if (*(_DWORD *)v3566 == 2)
    {
      WTF::StringImpl::~StringImpl(v3566, v3559, (uint64_t)v3560, v3561, v3562, v3563, v3564, v3565);
      WTF::fastFree(v7782, v7783, v7784, v7785, v7786, v7787, v7788, v7789);
    }
    else
    {
      *(_DWORD *)v3566 -= 2;
    }
  }
  JSC::Symbols::italicsPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::italicsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3560, v3561, v3562, v3563, v3564, v3565, (uint64_t)v11263);
  v3574 = v11264;
  v11264 = 0;
  if (v3574)
  {
    if (*(_DWORD *)v3574 == 2)
    {
      WTF::StringImpl::~StringImpl(v3574, v3567, (uint64_t)v3568, v3569, v3570, v3571, v3572, v3573);
      WTF::fastFree(v7790, v7791, v7792, v7793, v7794, v7795, v7796, v7797);
    }
    else
    {
      *(_DWORD *)v3574 -= 2;
    }
  }
  JSC::Symbols::linkPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::linkPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3568, v3569, v3570, v3571, v3572, v3573, (uint64_t)v11263);
  v3582 = v11264;
  v11264 = 0;
  if (v3582)
  {
    if (*(_DWORD *)v3582 == 2)
    {
      WTF::StringImpl::~StringImpl(v3582, v3575, (uint64_t)v3576, v3577, v3578, v3579, v3580, v3581);
      WTF::fastFree(v7798, v7799, v7800, v7801, v7802, v7803, v7804, v7805);
    }
    else
    {
      *(_DWORD *)v3582 -= 2;
    }
  }
  JSC::Symbols::linkAndEvaluateModulePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::linkAndEvaluateModulePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3576, v3577, v3578, v3579, v3580, v3581, (uint64_t)v11263);
  v3590 = v11264;
  v11264 = 0;
  if (v3590)
  {
    if (*(_DWORD *)v3590 == 2)
    {
      WTF::StringImpl::~StringImpl(v3590, v3583, (uint64_t)v3584, v3585, v3586, v3587, v3588, v3589);
      WTF::fastFree(v7806, v7807, v7808, v7809, v7810, v7811, v7812, v7813);
    }
    else
    {
      *(_DWORD *)v3590 -= 2;
    }
  }
  JSC::Symbols::loadAndEvaluateModulePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::loadAndEvaluateModulePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3584, v3585, v3586, v3587, v3588, v3589, (uint64_t)v11263);
  v3598 = v11264;
  v11264 = 0;
  if (v3598)
  {
    if (*(_DWORD *)v3598 == 2)
    {
      WTF::StringImpl::~StringImpl(v3598, v3591, (uint64_t)v3592, v3593, v3594, v3595, v3596, v3597);
      WTF::fastFree(v7814, v7815, v7816, v7817, v7818, v7819, v7820, v7821);
    }
    else
    {
      *(_DWORD *)v3598 -= 2;
    }
  }
  JSC::Symbols::loadModulePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::loadModulePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3592, v3593, v3594, v3595, v3596, v3597, (uint64_t)v11263);
  v3606 = v11264;
  v11264 = 0;
  if (v3606)
  {
    if (*(_DWORD *)v3606 == 2)
    {
      WTF::StringImpl::~StringImpl(v3606, v3599, (uint64_t)v3600, v3601, v3602, v3603, v3604, v3605);
      WTF::fastFree(v7822, v7823, v7824, v7825, v7826, v7827, v7828, v7829);
    }
    else
    {
      *(_DWORD *)v3606 -= 2;
    }
  }
  JSC::Symbols::mapPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3600, v3601, v3602, v3603, v3604, v3605, (uint64_t)v11263);
  v3614 = v11264;
  v11264 = 0;
  if (v3614)
  {
    if (*(_DWORD *)v3614 == 2)
    {
      WTF::StringImpl::~StringImpl(v3614, v3607, (uint64_t)v3608, v3609, v3610, v3611, v3612, v3613);
      WTF::fastFree(v7830, v7831, v7832, v7833, v7834, v7835, v7836, v7837);
    }
    else
    {
      *(_DWORD *)v3614 -= 2;
    }
  }
  JSC::Symbols::matchPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::matchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3608, v3609, v3610, v3611, v3612, v3613, (uint64_t)v11263);
  v3622 = v11264;
  v11264 = 0;
  if (v3622)
  {
    if (*(_DWORD *)v3622 == 2)
    {
      WTF::StringImpl::~StringImpl(v3622, v3615, (uint64_t)v3616, v3617, v3618, v3619, v3620, v3621);
      WTF::fastFree(v7838, v7839, v7840, v7841, v7842, v7843, v7844, v7845);
    }
    else
    {
      *(_DWORD *)v3622 -= 2;
    }
  }
  JSC::Symbols::matchAllPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::matchAllPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3616, v3617, v3618, v3619, v3620, v3621, (uint64_t)v11263);
  v3630 = v11264;
  v11264 = 0;
  if (v3630)
  {
    if (*(_DWORD *)v3630 == 2)
    {
      WTF::StringImpl::~StringImpl(v3630, v3623, (uint64_t)v3624, v3625, v3626, v3627, v3628, v3629);
      WTF::fastFree(v7846, v7847, v7848, v7849, v7850, v7851, v7852, v7853);
    }
    else
    {
      *(_DWORD *)v3630 -= 2;
    }
  }
  JSC::Symbols::matchSlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::matchSlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3624, v3625, v3626, v3627, v3628, v3629, (uint64_t)v11263);
  v3638 = v11264;
  v11264 = 0;
  if (v3638)
  {
    if (*(_DWORD *)v3638 == 2)
    {
      WTF::StringImpl::~StringImpl(v3638, v3631, (uint64_t)v3632, v3633, v3634, v3635, v3636, v3637);
      WTF::fastFree(v7854, v7855, v7856, v7857, v7858, v7859, v7860, v7861);
    }
    else
    {
      *(_DWORD *)v3638 -= 2;
    }
  }
  JSC::Symbols::maxWithPositivesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::maxWithPositivesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3632, v3633, v3634, v3635, v3636, v3637, (uint64_t)v11263);
  v3646 = v11264;
  v11264 = 0;
  if (v3646)
  {
    if (*(_DWORD *)v3646 == 2)
    {
      WTF::StringImpl::~StringImpl(v3646, v3639, (uint64_t)v3640, v3641, v3642, v3643, v3644, v3645);
      WTF::fastFree(v7862, v7863, v7864, v7865, v7866, v7867, v7868, v7869);
    }
    else
    {
      *(_DWORD *)v3646 -= 2;
    }
  }
  JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3640, v3641, v3642, v3643, v3644, v3645, (uint64_t)v11263);
  v3654 = v11264;
  v11264 = 0;
  if (v3654)
  {
    if (*(_DWORD *)v3654 == 2)
    {
      WTF::StringImpl::~StringImpl(v3654, v3647, (uint64_t)v3648, v3649, v3650, v3651, v3652, v3653);
      WTF::fastFree(v7870, v7871, v7872, v7873, v7874, v7875, v7876, v7877);
    }
    else
    {
      *(_DWORD *)v3654 -= 2;
    }
  }
  JSC::Symbols::moduleEvaluationPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::moduleEvaluationPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3648, v3649, v3650, v3651, v3652, v3653, (uint64_t)v11263);
  v3662 = v11264;
  v11264 = 0;
  if (v3662)
  {
    if (*(_DWORD *)v3662 == 2)
    {
      WTF::StringImpl::~StringImpl(v3662, v3655, (uint64_t)v3656, v3657, v3658, v3659, v3660, v3661);
      WTF::fastFree(v7878, v7879, v7880, v7881, v7882, v7883, v7884, v7885);
    }
    else
    {
      *(_DWORD *)v3662 -= 2;
    }
  }
  JSC::Symbols::newHandledRejectedPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newHandledRejectedPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3656, v3657, v3658, v3659, v3660, v3661, (uint64_t)v11263);
  v3670 = v11264;
  v11264 = 0;
  if (v3670)
  {
    if (*(_DWORD *)v3670 == 2)
    {
      WTF::StringImpl::~StringImpl(v3670, v3663, (uint64_t)v3664, v3665, v3666, v3667, v3668, v3669);
      WTF::fastFree(v7886, v7887, v7888, v7889, v7890, v7891, v7892, v7893);
    }
    else
    {
      *(_DWORD *)v3670 -= 2;
    }
  }
  JSC::Symbols::newPromiseCapabilityPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newPromiseCapabilityPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3664, v3665, v3666, v3667, v3668, v3669, (uint64_t)v11263);
  v3678 = v11264;
  v11264 = 0;
  if (v3678)
  {
    if (*(_DWORD *)v3678 == 2)
    {
      WTF::StringImpl::~StringImpl(v3678, v3671, (uint64_t)v3672, v3673, v3674, v3675, v3676, v3677);
      WTF::fastFree(v7894, v7895, v7896, v7897, v7898, v7899, v7900, v7901);
    }
    else
    {
      *(_DWORD *)v3678 -= 2;
    }
  }
  JSC::Symbols::newPromiseCapabilitySlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newPromiseCapabilitySlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3672, v3673, v3674, v3675, v3676, v3677, (uint64_t)v11263);
  v3686 = v11264;
  v11264 = 0;
  if (v3686)
  {
    if (*(_DWORD *)v3686 == 2)
    {
      WTF::StringImpl::~StringImpl(v3686, v3679, (uint64_t)v3680, v3681, v3682, v3683, v3684, v3685);
      WTF::fastFree(v7902, v7903, v7904, v7905, v7906, v7907, v7908, v7909);
    }
    else
    {
      *(_DWORD *)v3686 -= 2;
    }
  }
  JSC::Symbols::newRegistryEntryPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newRegistryEntryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3680, v3681, v3682, v3683, v3684, v3685, (uint64_t)v11263);
  v3694 = v11264;
  v11264 = 0;
  if (v3694)
  {
    if (*(_DWORD *)v3694 == 2)
    {
      WTF::StringImpl::~StringImpl(v3694, v3687, (uint64_t)v3688, v3689, v3690, v3691, v3692, v3693);
      WTF::fastFree(v7910, v7911, v7912, v7913, v7914, v7915, v7916, v7917);
    }
    else
    {
      *(_DWORD *)v3694 -= 2;
    }
  }
  JSC::Symbols::nextPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::nextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3688, v3689, v3690, v3691, v3692, v3693, (uint64_t)v11263);
  v3702 = v11264;
  v11264 = 0;
  if (v3702)
  {
    if (*(_DWORD *)v3702 == 2)
    {
      WTF::StringImpl::~StringImpl(v3702, v3695, (uint64_t)v3696, v3697, v3698, v3699, v3700, v3701);
      WTF::fastFree(v7918, v7919, v7920, v7921, v7922, v7923, v7924, v7925);
    }
    else
    {
      *(_DWORD *)v3702 -= 2;
    }
  }
  JSC::Symbols::ofPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::ofPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3696, v3697, v3698, v3699, v3700, v3701, (uint64_t)v11263);
  v3710 = v11264;
  v11264 = 0;
  if (v3710)
  {
    if (*(_DWORD *)v3710 == 2)
    {
      WTF::StringImpl::~StringImpl(v3710, v3703, (uint64_t)v3704, v3705, v3706, v3707, v3708, v3709);
      WTF::fastFree(v7926, v7927, v7928, v7929, v7930, v7931, v7932, v7933);
    }
    else
    {
      *(_DWORD *)v3710 -= 2;
    }
  }
  JSC::Symbols::padEndPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::padEndPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3704, v3705, v3706, v3707, v3708, v3709, (uint64_t)v11263);
  v3718 = v11264;
  v11264 = 0;
  if (v3718)
  {
    if (*(_DWORD *)v3718 == 2)
    {
      WTF::StringImpl::~StringImpl(v3718, v3711, (uint64_t)v3712, v3713, v3714, v3715, v3716, v3717);
      WTF::fastFree(v7934, v7935, v7936, v7937, v7938, v7939, v7940, v7941);
    }
    else
    {
      *(_DWORD *)v3718 -= 2;
    }
  }
  JSC::Symbols::padStartPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::padStartPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3712, v3713, v3714, v3715, v3716, v3717, (uint64_t)v11263);
  v3726 = v11264;
  v11264 = 0;
  if (v3726)
  {
    if (*(_DWORD *)v3726 == 2)
    {
      WTF::StringImpl::~StringImpl(v3726, v3719, (uint64_t)v3720, v3721, v3722, v3723, v3724, v3725);
      WTF::fastFree(v7942, v7943, v7944, v7945, v7946, v7947, v7948, v7949);
    }
    else
    {
      *(_DWORD *)v3726 -= 2;
    }
  }
  JSC::Symbols::performIterationPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performIterationPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3720, v3721, v3722, v3723, v3724, v3725, (uint64_t)v11263);
  v3734 = v11264;
  v11264 = 0;
  if (v3734)
  {
    if (*(_DWORD *)v3734 == 2)
    {
      WTF::StringImpl::~StringImpl(v3734, v3727, (uint64_t)v3728, v3729, v3730, v3731, v3732, v3733);
      WTF::fastFree(v7950, v7951, v7952, v7953, v7954, v7955, v7956, v7957);
    }
    else
    {
      *(_DWORD *)v3734 -= 2;
    }
  }
  JSC::Symbols::performPromiseThenPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performPromiseThenPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3728, v3729, v3730, v3731, v3732, v3733, (uint64_t)v11263);
  v3742 = v11264;
  v11264 = 0;
  if (v3742)
  {
    if (*(_DWORD *)v3742 == 2)
    {
      WTF::StringImpl::~StringImpl(v3742, v3735, (uint64_t)v3736, v3737, v3738, v3739, v3740, v3741);
      WTF::fastFree(v7958, v7959, v7960, v7961, v7962, v7963, v7964, v7965);
    }
    else
    {
      *(_DWORD *)v3742 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectGetPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectGetPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3736, v3737, v3738, v3739, v3740, v3741, (uint64_t)v11263);
  v3750 = v11264;
  v11264 = 0;
  if (v3750)
  {
    if (*(_DWORD *)v3750 == 2)
    {
      WTF::StringImpl::~StringImpl(v3750, v3743, (uint64_t)v3744, v3745, v3746, v3747, v3748, v3749);
      WTF::fastFree(v7966, v7967, v7968, v7969, v7970, v7971, v7972, v7973);
    }
    else
    {
      *(_DWORD *)v3750 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectGetByValPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectGetByValPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3744, v3745, v3746, v3747, v3748, v3749, (uint64_t)v11263);
  v3758 = v11264;
  v11264 = 0;
  if (v3758)
  {
    if (*(_DWORD *)v3758 == 2)
    {
      WTF::StringImpl::~StringImpl(v3758, v3751, (uint64_t)v3752, v3753, v3754, v3755, v3756, v3757);
      WTF::fastFree(v7974, v7975, v7976, v7977, v7978, v7979, v7980, v7981);
    }
    else
    {
      *(_DWORD *)v3758 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectHasPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectHasPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3752, v3753, v3754, v3755, v3756, v3757, (uint64_t)v11263);
  v3766 = v11264;
  v11264 = 0;
  if (v3766)
  {
    if (*(_DWORD *)v3766 == 2)
    {
      WTF::StringImpl::~StringImpl(v3766, v3759, (uint64_t)v3760, v3761, v3762, v3763, v3764, v3765);
      WTF::fastFree(v7982, v7983, v7984, v7985, v7986, v7987, v7988, v7989);
    }
    else
    {
      *(_DWORD *)v3766 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectHasByValPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectHasByValPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3760, v3761, v3762, v3763, v3764, v3765, (uint64_t)v11263);
  v3774 = v11264;
  v11264 = 0;
  if (v3774)
  {
    if (*(_DWORD *)v3774 == 2)
    {
      WTF::StringImpl::~StringImpl(v3774, v3767, (uint64_t)v3768, v3769, v3770, v3771, v3772, v3773);
      WTF::fastFree(v7990, v7991, v7992, v7993, v7994, v7995, v7996, v7997);
    }
    else
    {
      *(_DWORD *)v3774 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectSetByValSloppyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValSloppyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3768, v3769, v3770, v3771, v3772, v3773, (uint64_t)v11263);
  v3782 = v11264;
  v11264 = 0;
  if (v3782)
  {
    if (*(_DWORD *)v3782 == 2)
    {
      WTF::StringImpl::~StringImpl(v3782, v3775, (uint64_t)v3776, v3777, v3778, v3779, v3780, v3781);
      WTF::fastFree(v7998, v7999, v8000, v8001, v8002, v8003, v8004, v8005);
    }
    else
    {
      *(_DWORD *)v3782 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectSetByValStrictPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValStrictPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3776, v3777, v3778, v3779, v3780, v3781, (uint64_t)v11263);
  v3790 = v11264;
  v11264 = 0;
  if (v3790)
  {
    if (*(_DWORD *)v3790 == 2)
    {
      WTF::StringImpl::~StringImpl(v3790, v3783, (uint64_t)v3784, v3785, v3786, v3787, v3788, v3789);
      WTF::fastFree(v8006, v8007, v8008, v8009, v8010, v8011, v8012, v8013);
    }
    else
    {
      *(_DWORD *)v3790 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectSetSloppyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetSloppyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3784, v3785, v3786, v3787, v3788, v3789, (uint64_t)v11263);
  v3798 = v11264;
  v11264 = 0;
  if (v3798)
  {
    if (*(_DWORD *)v3798 == 2)
    {
      WTF::StringImpl::~StringImpl(v3798, v3791, (uint64_t)v3792, v3793, v3794, v3795, v3796, v3797);
      WTF::fastFree(v8014, v8015, v8016, v8017, v8018, v8019, v8020, v8021);
    }
    else
    {
      *(_DWORD *)v3798 -= 2;
    }
  }
  JSC::Symbols::performProxyObjectSetStrictPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetStrictPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3792, v3793, v3794, v3795, v3796, v3797, (uint64_t)v11263);
  v3806 = v11264;
  v11264 = 0;
  if (v3806)
  {
    if (*(_DWORD *)v3806 == 2)
    {
      WTF::StringImpl::~StringImpl(v3806, v3799, (uint64_t)v3800, v3801, v3802, v3803, v3804, v3805);
      WTF::fastFree(v8022, v8023, v8024, v8025, v8026, v8027, v8028, v8029);
    }
    else
    {
      *(_DWORD *)v3806 -= 2;
    }
  }
  JSC::Symbols::promiseAllNewResolveElementPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseAllNewResolveElementPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3800, v3801, v3802, v3803, v3804, v3805, (uint64_t)v11263);
  v3814 = v11264;
  v11264 = 0;
  if (v3814)
  {
    if (*(_DWORD *)v3814 == 2)
    {
      WTF::StringImpl::~StringImpl(v3814, v3807, (uint64_t)v3808, v3809, v3810, v3811, v3812, v3813);
      WTF::fastFree(v8030, v8031, v8032, v8033, v8034, v8035, v8036, v8037);
    }
    else
    {
      *(_DWORD *)v3814 -= 2;
    }
  }
  JSC::Symbols::promiseAllOnFulfilledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseAllOnFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3808, v3809, v3810, v3811, v3812, v3813, (uint64_t)v11263);
  v3822 = v11264;
  v11264 = 0;
  if (v3822)
  {
    if (*(_DWORD *)v3822 == 2)
    {
      WTF::StringImpl::~StringImpl(v3822, v3815, (uint64_t)v3816, v3817, v3818, v3819, v3820, v3821);
      WTF::fastFree(v8038, v8039, v8040, v8041, v8042, v8043, v8044, v8045);
    }
    else
    {
      *(_DWORD *)v3822 -= 2;
    }
  }
  JSC::Symbols::promiseAllSlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseAllSlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3816, v3817, v3818, v3819, v3820, v3821, (uint64_t)v11263);
  v3830 = v11264;
  v11264 = 0;
  if (v3830)
  {
    if (*(_DWORD *)v3830 == 2)
    {
      WTF::StringImpl::~StringImpl(v3830, v3823, (uint64_t)v3824, v3825, v3826, v3827, v3828, v3829);
      WTF::fastFree(v8046, v8047, v8048, v8049, v8050, v8051, v8052, v8053);
    }
    else
    {
      *(_DWORD *)v3830 -= 2;
    }
  }
  JSC::Symbols::promiseEmptyOnFulfilledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseEmptyOnFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3824, v3825, v3826, v3827, v3828, v3829, (uint64_t)v11263);
  v3838 = v11264;
  v11264 = 0;
  if (v3838)
  {
    if (*(_DWORD *)v3838 == 2)
    {
      WTF::StringImpl::~StringImpl(v3838, v3831, (uint64_t)v3832, v3833, v3834, v3835, v3836, v3837);
      WTF::fastFree(v8054, v8055, v8056, v8057, v8058, v8059, v8060, v8061);
    }
    else
    {
      *(_DWORD *)v3838 -= 2;
    }
  }
  JSC::Symbols::promiseEmptyOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseEmptyOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3832, v3833, v3834, v3835, v3836, v3837, (uint64_t)v11263);
  v3846 = v11264;
  v11264 = 0;
  if (v3846)
  {
    if (*(_DWORD *)v3846 == 2)
    {
      WTF::StringImpl::~StringImpl(v3846, v3839, (uint64_t)v3840, v3841, v3842, v3843, v3844, v3845);
      WTF::fastFree(v8062, v8063, v8064, v8065, v8066, v8067, v8068, v8069);
    }
    else
    {
      *(_DWORD *)v3846 -= 2;
    }
  }
  JSC::Symbols::promiseNewOnRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseNewOnRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3840, v3841, v3842, v3843, v3844, v3845, (uint64_t)v11263);
  v3854 = v11264;
  v11264 = 0;
  if (v3854)
  {
    if (*(_DWORD *)v3854 == 2)
    {
      WTF::StringImpl::~StringImpl(v3854, v3847, (uint64_t)v3848, v3849, v3850, v3851, v3852, v3853);
      WTF::fastFree(v8070, v8071, v8072, v8073, v8074, v8075, v8076, v8077);
    }
    else
    {
      *(_DWORD *)v3854 -= 2;
    }
  }
  JSC::Symbols::promiseOnRejectedWithContextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseOnRejectedWithContextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3848, v3849, v3850, v3851, v3852, v3853, (uint64_t)v11263);
  v3862 = v11264;
  v11264 = 0;
  if (v3862)
  {
    if (*(_DWORD *)v3862 == 2)
    {
      WTF::StringImpl::~StringImpl(v3862, v3855, (uint64_t)v3856, v3857, v3858, v3859, v3860, v3861);
      WTF::fastFree(v8078, v8079, v8080, v8081, v8082, v8083, v8084, v8085);
    }
    else
    {
      *(_DWORD *)v3862 -= 2;
    }
  }
  JSC::Symbols::promiseReactionJobPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseReactionJobPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3856, v3857, v3858, v3859, v3860, v3861, (uint64_t)v11263);
  v3870 = v11264;
  v11264 = 0;
  if (v3870)
  {
    if (*(_DWORD *)v3870 == 2)
    {
      WTF::StringImpl::~StringImpl(v3870, v3863, (uint64_t)v3864, v3865, v3866, v3867, v3868, v3869);
      WTF::fastFree(v8086, v8087, v8088, v8089, v8090, v8091, v8092, v8093);
    }
    else
    {
      *(_DWORD *)v3870 -= 2;
    }
  }
  JSC::Symbols::promiseReactionJobWithoutPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseReactionJobWithoutPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3864, v3865, v3866, v3867, v3868, v3869, (uint64_t)v11263);
  v3878 = v11264;
  v11264 = 0;
  if (v3878)
  {
    if (*(_DWORD *)v3878 == 2)
    {
      WTF::StringImpl::~StringImpl(v3878, v3871, (uint64_t)v3872, v3873, v3874, v3875, v3876, v3877);
      WTF::fastFree(v8094, v8095, v8096, v8097, v8098, v8099, v8100, v8101);
    }
    else
    {
      *(_DWORD *)v3878 -= 2;
    }
  }
  JSC::Symbols::promiseRejectSlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseRejectSlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3872, v3873, v3874, v3875, v3876, v3877, (uint64_t)v11263);
  v3886 = v11264;
  v11264 = 0;
  if (v3886)
  {
    if (*(_DWORD *)v3886 == 2)
    {
      WTF::StringImpl::~StringImpl(v3886, v3879, (uint64_t)v3880, v3881, v3882, v3883, v3884, v3885);
      WTF::fastFree(v8102, v8103, v8104, v8105, v8106, v8107, v8108, v8109);
    }
    else
    {
      *(_DWORD *)v3886 -= 2;
    }
  }
  JSC::Symbols::promiseResolvePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolvePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3880, v3881, v3882, v3883, v3884, v3885, (uint64_t)v11263);
  v3894 = v11264;
  v11264 = 0;
  if (v3894)
  {
    if (*(_DWORD *)v3894 == 2)
    {
      WTF::StringImpl::~StringImpl(v3894, v3887, (uint64_t)v3888, v3889, v3890, v3891, v3892, v3893);
      WTF::fastFree(v8110, v8111, v8112, v8113, v8114, v8115, v8116, v8117);
    }
    else
    {
      *(_DWORD *)v3894 -= 2;
    }
  }
  JSC::Symbols::promiseResolveSlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolveSlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3888, v3889, v3890, v3891, v3892, v3893, (uint64_t)v11263);
  v3902 = v11264;
  v11264 = 0;
  if (v3902)
  {
    if (*(_DWORD *)v3902 == 2)
    {
      WTF::StringImpl::~StringImpl(v3902, v3895, (uint64_t)v3896, v3897, v3898, v3899, v3900, v3901);
      WTF::fastFree(v8118, v8119, v8120, v8121, v8122, v8123, v8124, v8125);
    }
    else
    {
      *(_DWORD *)v3902 -= 2;
    }
  }
  JSC::Symbols::promiseResolveThenableJobPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3896, v3897, v3898, v3899, v3900, v3901, (uint64_t)v11263);
  v3910 = v11264;
  v11264 = 0;
  if (v3910)
  {
    if (*(_DWORD *)v3910 == 2)
    {
      WTF::StringImpl::~StringImpl(v3910, v3903, (uint64_t)v3904, v3905, v3906, v3907, v3908, v3909);
      WTF::fastFree(v8126, v8127, v8128, v8129, v8130, v8131, v8132, v8133);
    }
    else
    {
      *(_DWORD *)v3910 -= 2;
    }
  }
  JSC::Symbols::promiseResolveThenableJobFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3904, v3905, v3906, v3907, v3908, v3909, (uint64_t)v11263);
  v3918 = v11264;
  v11264 = 0;
  if (v3918)
  {
    if (*(_DWORD *)v3918 == 2)
    {
      WTF::StringImpl::~StringImpl(v3918, v3911, (uint64_t)v3912, v3913, v3914, v3915, v3916, v3917);
      WTF::fastFree(v8134, v8135, v8136, v8137, v8138, v8139, v8140, v8141);
    }
    else
    {
      *(_DWORD *)v3918 -= 2;
    }
  }
  JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3912, v3913, v3914, v3915, v3916, v3917, (uint64_t)v11263);
  v3926 = v11264;
  v11264 = 0;
  if (v3926)
  {
    if (*(_DWORD *)v3926 == 2)
    {
      WTF::StringImpl::~StringImpl(v3926, v3919, (uint64_t)v3920, v3921, v3922, v3923, v3924, v3925);
      WTF::fastFree(v8142, v8143, v8144, v8145, v8146, v8147, v8148, v8149);
    }
    else
    {
      *(_DWORD *)v3926 -= 2;
    }
  }
  JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3920, v3921, v3922, v3923, v3924, v3925, (uint64_t)v11263);
  v3934 = v11264;
  v11264 = 0;
  if (v3934)
  {
    if (*(_DWORD *)v3934 == 2)
    {
      WTF::StringImpl::~StringImpl(v3934, v3927, (uint64_t)v3928, v3929, v3930, v3931, v3932, v3933);
      WTF::fastFree(v8150, v8151, v8152, v8153, v8154, v8155, v8156, v8157);
    }
    else
    {
      *(_DWORD *)v3934 -= 2;
    }
  }
  JSC::Symbols::provideFetchPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::provideFetchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3928, v3929, v3930, v3931, v3932, v3933, (uint64_t)v11263);
  v3942 = v11264;
  v11264 = 0;
  if (v3942)
  {
    if (*(_DWORD *)v3942 == 2)
    {
      WTF::StringImpl::~StringImpl(v3942, v3935, (uint64_t)v3936, v3937, v3938, v3939, v3940, v3941);
      WTF::fastFree(v8158, v8159, v8160, v8161, v8162, v8163, v8164, v8165);
    }
    else
    {
      *(_DWORD *)v3942 -= 2;
    }
  }
  JSC::Symbols::pushNewPromiseReactionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::pushNewPromiseReactionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3936, v3937, v3938, v3939, v3940, v3941, (uint64_t)v11263);
  v3950 = v11264;
  v11264 = 0;
  if (v3950)
  {
    if (*(_DWORD *)v3950 == 2)
    {
      WTF::StringImpl::~StringImpl(v3950, v3943, (uint64_t)v3944, v3945, v3946, v3947, v3948, v3949);
      WTF::fastFree(v8166, v8167, v8168, v8169, v8170, v8171, v8172, v8173);
    }
    else
    {
      *(_DWORD *)v3950 -= 2;
    }
  }
  JSC::Symbols::racePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::racePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3944, v3945, v3946, v3947, v3948, v3949, (uint64_t)v11263);
  v3958 = v11264;
  v11264 = 0;
  if (v3958)
  {
    if (*(_DWORD *)v3958 == 2)
    {
      WTF::StringImpl::~StringImpl(v3958, v3951, (uint64_t)v3952, v3953, v3954, v3955, v3956, v3957);
      WTF::fastFree(v8174, v8175, v8176, v8177, v8178, v8179, v8180, v8181);
    }
    else
    {
      *(_DWORD *)v3958 -= 2;
    }
  }
  JSC::Symbols::rawPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::rawPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3952, v3953, v3954, v3955, v3956, v3957, (uint64_t)v11263);
  v3966 = v11264;
  v11264 = 0;
  if (v3966)
  {
    if (*(_DWORD *)v3966 == 2)
    {
      WTF::StringImpl::~StringImpl(v3966, v3959, (uint64_t)v3960, v3961, v3962, v3963, v3964, v3965);
      WTF::fastFree(v8182, v8183, v8184, v8185, v8186, v8187, v8188, v8189);
    }
    else
    {
      *(_DWORD *)v3966 -= 2;
    }
  }
  JSC::Symbols::reducePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::reducePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3960, v3961, v3962, v3963, v3964, v3965, (uint64_t)v11263);
  v3974 = v11264;
  v11264 = 0;
  if (v3974)
  {
    if (*(_DWORD *)v3974 == 2)
    {
      WTF::StringImpl::~StringImpl(v3974, v3967, (uint64_t)v3968, v3969, v3970, v3971, v3972, v3973);
      WTF::fastFree(v8190, v8191, v8192, v8193, v8194, v8195, v8196, v8197);
    }
    else
    {
      *(_DWORD *)v3974 -= 2;
    }
  }
  JSC::Symbols::reduceRightPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::reduceRightPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3968, v3969, v3970, v3971, v3972, v3973, (uint64_t)v11263);
  v3982 = v11264;
  v11264 = 0;
  if (v3982)
  {
    if (*(_DWORD *)v3982 == 2)
    {
      WTF::StringImpl::~StringImpl(v3982, v3975, (uint64_t)v3976, v3977, v3978, v3979, v3980, v3981);
      WTF::fastFree(v8198, v8199, v8200, v8201, v8202, v8203, v8204, v8205);
    }
    else
    {
      *(_DWORD *)v3982 -= 2;
    }
  }
  JSC::Symbols::regExpExecPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpExecPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3976, v3977, v3978, v3979, v3980, v3981, (uint64_t)v11263);
  v3990 = v11264;
  v11264 = 0;
  if (v3990)
  {
    if (*(_DWORD *)v3990 == 2)
    {
      WTF::StringImpl::~StringImpl(v3990, v3983, (uint64_t)v3984, v3985, v3986, v3987, v3988, v3989);
      WTF::fastFree(v8206, v8207, v8208, v8209, v8210, v8211, v8212, v8213);
    }
    else
    {
      *(_DWORD *)v3990 -= 2;
    }
  }
  JSC::Symbols::rejectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::rejectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3984, v3985, v3986, v3987, v3988, v3989, (uint64_t)v11263);
  v3998 = v11264;
  v11264 = 0;
  if (v3998)
  {
    if (*(_DWORD *)v3998 == 2)
    {
      WTF::StringImpl::~StringImpl(v3998, v3991, (uint64_t)v3992, v3993, v3994, v3995, v3996, v3997);
      WTF::fastFree(v8214, v8215, v8216, v8217, v8218, v8219, v8220, v8221);
    }
    else
    {
      *(_DWORD *)v3998 -= 2;
    }
  }
  JSC::Symbols::rejectPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::rejectPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v3992, v3993, v3994, v3995, v3996, v3997, (uint64_t)v11263);
  v4006 = v11264;
  v11264 = 0;
  if (v4006)
  {
    if (*(_DWORD *)v4006 == 2)
    {
      WTF::StringImpl::~StringImpl(v4006, v3999, (uint64_t)v4000, v4001, v4002, v4003, v4004, v4005);
      WTF::fastFree(v8222, v8223, v8224, v8225, v8226, v8227, v8228, v8229);
    }
    else
    {
      *(_DWORD *)v4006 -= 2;
    }
  }
  JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4000, v4001, v4002, v4003, v4004, v4005, (uint64_t)v11263);
  v4014 = v11264;
  v11264 = 0;
  if (v4014)
  {
    if (*(_DWORD *)v4014 == 2)
    {
      WTF::StringImpl::~StringImpl(v4014, v4007, (uint64_t)v4008, v4009, v4010, v4011, v4012, v4013);
      WTF::fastFree(v8230, v8231, v8232, v8233, v8234, v8235, v8236, v8237);
    }
    else
    {
      *(_DWORD *)v4014 -= 2;
    }
  }
  JSC::Symbols::rejectWithoutPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::rejectWithoutPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4008, v4009, v4010, v4011, v4012, v4013, (uint64_t)v11263);
  v4022 = v11264;
  v11264 = 0;
  if (v4022)
  {
    if (*(_DWORD *)v4022 == 2)
    {
      WTF::StringImpl::~StringImpl(v4022, v4015, (uint64_t)v4016, v4017, v4018, v4019, v4020, v4021);
      WTF::fastFree(v8238, v8239, v8240, v8241, v8242, v8243, v8244, v8245);
    }
    else
    {
      *(_DWORD *)v4022 -= 2;
    }
  }
  JSC::Symbols::repeatPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::repeatPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4016, v4017, v4018, v4019, v4020, v4021, (uint64_t)v11263);
  v4030 = v11264;
  v11264 = 0;
  if (v4030)
  {
    if (*(_DWORD *)v4030 == 2)
    {
      WTF::StringImpl::~StringImpl(v4030, v4023, (uint64_t)v4024, v4025, v4026, v4027, v4028, v4029);
      WTF::fastFree(v8246, v8247, v8248, v8249, v8250, v8251, v8252, v8253);
    }
    else
    {
      *(_DWORD *)v4030 -= 2;
    }
  }
  JSC::Symbols::repeatCharactersSlowPathPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::repeatCharactersSlowPathPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4024, v4025, v4026, v4027, v4028, v4029, (uint64_t)v11263);
  v4038 = v11264;
  v11264 = 0;
  if (v4038)
  {
    if (*(_DWORD *)v4038 == 2)
    {
      WTF::StringImpl::~StringImpl(v4038, v4031, (uint64_t)v4032, v4033, v4034, v4035, v4036, v4037);
      WTF::fastFree(v8254, v8255, v8256, v8257, v8258, v8259, v8260, v8261);
    }
    else
    {
      *(_DWORD *)v4038 -= 2;
    }
  }
  JSC::Symbols::repeatSlowPathPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::repeatSlowPathPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4032, v4033, v4034, v4035, v4036, v4037, (uint64_t)v11263);
  v4046 = v11264;
  v11264 = 0;
  if (v4046)
  {
    if (*(_DWORD *)v4046 == 2)
    {
      WTF::StringImpl::~StringImpl(v4046, v4039, (uint64_t)v4040, v4041, v4042, v4043, v4044, v4045);
      WTF::fastFree(v8262, v8263, v8264, v8265, v8266, v8267, v8268, v8269);
    }
    else
    {
      *(_DWORD *)v4046 -= 2;
    }
  }
  JSC::Symbols::replacePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::replacePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4040, v4041, v4042, v4043, v4044, v4045, (uint64_t)v11263);
  v4054 = v11264;
  v11264 = 0;
  if (v4054)
  {
    if (*(_DWORD *)v4054 == 2)
    {
      WTF::StringImpl::~StringImpl(v4054, v4047, (uint64_t)v4048, v4049, v4050, v4051, v4052, v4053);
      WTF::fastFree(v8270, v8271, v8272, v8273, v8274, v8275, v8276, v8277);
    }
    else
    {
      *(_DWORD *)v4054 -= 2;
    }
  }
  JSC::Symbols::replaceAllPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::replaceAllPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4048, v4049, v4050, v4051, v4052, v4053, (uint64_t)v11263);
  v4062 = v11264;
  v11264 = 0;
  if (v4062)
  {
    if (*(_DWORD *)v4062 == 2)
    {
      WTF::StringImpl::~StringImpl(v4062, v4055, (uint64_t)v4056, v4057, v4058, v4059, v4060, v4061);
      WTF::fastFree(v8278, v8279, v8280, v8281, v8282, v8283, v8284, v8285);
    }
    else
    {
      *(_DWORD *)v4062 -= 2;
    }
  }
  JSC::Symbols::requestFetchPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::requestFetchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4056, v4057, v4058, v4059, v4060, v4061, (uint64_t)v11263);
  v4070 = v11264;
  v11264 = 0;
  if (v4070)
  {
    if (*(_DWORD *)v4070 == 2)
    {
      WTF::StringImpl::~StringImpl(v4070, v4063, (uint64_t)v4064, v4065, v4066, v4067, v4068, v4069);
      WTF::fastFree(v8286, v8287, v8288, v8289, v8290, v8291, v8292, v8293);
    }
    else
    {
      *(_DWORD *)v4070 -= 2;
    }
  }
  JSC::Symbols::requestImportModulePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::requestImportModulePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4064, v4065, v4066, v4067, v4068, v4069, (uint64_t)v11263);
  v4078 = v11264;
  v11264 = 0;
  if (v4078)
  {
    if (*(_DWORD *)v4078 == 2)
    {
      WTF::StringImpl::~StringImpl(v4078, v4071, (uint64_t)v4072, v4073, v4074, v4075, v4076, v4077);
      WTF::fastFree(v8294, v8295, v8296, v8297, v8298, v8299, v8300, v8301);
    }
    else
    {
      *(_DWORD *)v4078 -= 2;
    }
  }
  JSC::Symbols::requestInstantiatePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::requestInstantiatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4072, v4073, v4074, v4075, v4076, v4077, (uint64_t)v11263);
  v4086 = v11264;
  v11264 = 0;
  if (v4086)
  {
    if (*(_DWORD *)v4086 == 2)
    {
      WTF::StringImpl::~StringImpl(v4086, v4079, (uint64_t)v4080, v4081, v4082, v4083, v4084, v4085);
      WTF::fastFree(v8302, v8303, v8304, v8305, v8306, v8307, v8308, v8309);
    }
    else
    {
      *(_DWORD *)v4086 -= 2;
    }
  }
  JSC::Symbols::requestSatisfyPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::requestSatisfyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4080, v4081, v4082, v4083, v4084, v4085, (uint64_t)v11263);
  v4094 = v11264;
  v11264 = 0;
  if (v4094)
  {
    if (*(_DWORD *)v4094 == 2)
    {
      WTF::StringImpl::~StringImpl(v4094, v4087, (uint64_t)v4088, v4089, v4090, v4091, v4092, v4093);
      WTF::fastFree(v8310, v8311, v8312, v8313, v8314, v8315, v8316, v8317);
    }
    else
    {
      *(_DWORD *)v4094 -= 2;
    }
  }
  JSC::Symbols::requestSatisfyUtilPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::requestSatisfyUtilPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4088, v4089, v4090, v4091, v4092, v4093, (uint64_t)v11263);
  v4102 = v11264;
  v11264 = 0;
  if (v4102)
  {
    if (*(_DWORD *)v4102 == 2)
    {
      WTF::StringImpl::~StringImpl(v4102, v4095, (uint64_t)v4096, v4097, v4098, v4099, v4100, v4101);
      WTF::fastFree(v8318, v8319, v8320, v8321, v8322, v8323, v8324, v8325);
    }
    else
    {
      *(_DWORD *)v4102 -= 2;
    }
  }
  JSC::Symbols::resolvePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::resolvePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4096, v4097, v4098, v4099, v4100, v4101, (uint64_t)v11263);
  v4110 = v11264;
  v11264 = 0;
  if (v4110)
  {
    if (*(_DWORD *)v4110 == 2)
    {
      WTF::StringImpl::~StringImpl(v4110, v4103, (uint64_t)v4104, v4105, v4106, v4107, v4108, v4109);
      WTF::fastFree(v8326, v8327, v8328, v8329, v8330, v8331, v8332, v8333);
    }
    else
    {
      *(_DWORD *)v4110 -= 2;
    }
  }
  JSC::Symbols::resolvePromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::resolvePromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4104, v4105, v4106, v4107, v4108, v4109, (uint64_t)v11263);
  v4118 = v11264;
  v11264 = 0;
  if (v4118)
  {
    if (*(_DWORD *)v4118 == 2)
    {
      WTF::StringImpl::~StringImpl(v4118, v4111, (uint64_t)v4112, v4113, v4114, v4115, v4116, v4117);
      WTF::fastFree(v8334, v8335, v8336, v8337, v8338, v8339, v8340, v8341);
    }
    else
    {
      *(_DWORD *)v4118 -= 2;
    }
  }
  JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4112, v4113, v4114, v4115, v4116, v4117, (uint64_t)v11263);
  v4126 = v11264;
  v11264 = 0;
  if (v4126)
  {
    if (*(_DWORD *)v4126 == 2)
    {
      WTF::StringImpl::~StringImpl(v4126, v4119, (uint64_t)v4120, v4121, v4122, v4123, v4124, v4125);
      WTF::fastFree(v8342, v8343, v8344, v8345, v8346, v8347, v8348, v8349);
    }
    else
    {
      *(_DWORD *)v4126 -= 2;
    }
  }
  JSC::Symbols::resolveWithoutPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::resolveWithoutPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4120, v4121, v4122, v4123, v4124, v4125, (uint64_t)v11263);
  v4134 = v11264;
  v11264 = 0;
  if (v4134)
  {
    if (*(_DWORD *)v4134 == 2)
    {
      WTF::StringImpl::~StringImpl(v4134, v4127, (uint64_t)v4128, v4129, v4130, v4131, v4132, v4133);
      WTF::fastFree(v8350, v8351, v8352, v8353, v8354, v8355, v8356, v8357);
    }
    else
    {
      *(_DWORD *)v4134 -= 2;
    }
  }
  JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4128, v4129, v4130, v4131, v4132, v4133, (uint64_t)v11263);
  v4142 = v11264;
  v11264 = 0;
  if (v4142)
  {
    if (*(_DWORD *)v4142 == 2)
    {
      WTF::StringImpl::~StringImpl(v4142, v4135, (uint64_t)v4136, v4137, v4138, v4139, v4140, v4141);
      WTF::fastFree(v8358, v8359, v8360, v8361, v8362, v8363, v8364, v8365);
    }
    else
    {
      *(_DWORD *)v4142 -= 2;
    }
  }
  JSC::Symbols::returnPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::returnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4136, v4137, v4138, v4139, v4140, v4141, (uint64_t)v11263);
  v4150 = v11264;
  v11264 = 0;
  if (v4150)
  {
    if (*(_DWORD *)v4150 == 2)
    {
      WTF::StringImpl::~StringImpl(v4150, v4143, (uint64_t)v4144, v4145, v4146, v4147, v4148, v4149);
      WTF::fastFree(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373);
    }
    else
    {
      *(_DWORD *)v4150 -= 2;
    }
  }
  JSC::Symbols::searchPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::searchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4144, v4145, v4146, v4147, v4148, v4149, (uint64_t)v11263);
  v4158 = v11264;
  v11264 = 0;
  if (v4158)
  {
    if (*(_DWORD *)v4158 == 2)
    {
      WTF::StringImpl::~StringImpl(v4158, v4151, (uint64_t)v4152, v4153, v4154, v4155, v4156, v4157);
      WTF::fastFree(v8374, v8375, v8376, v8377, v8378, v8379, v8380, v8381);
    }
    else
    {
      *(_DWORD *)v4158 -= 2;
    }
  }
  JSC::Symbols::setStateToMaxPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setStateToMaxPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4152, v4153, v4154, v4155, v4156, v4157, (uint64_t)v11263);
  v4166 = v11264;
  v11264 = 0;
  if (v4166)
  {
    if (*(_DWORD *)v4166 == 2)
    {
      WTF::StringImpl::~StringImpl(v4166, v4159, (uint64_t)v4160, v4161, v4162, v4163, v4164, v4165);
      WTF::fastFree(v8382, v8383, v8384, v8385, v8386, v8387, v8388, v8389);
    }
    else
    {
      *(_DWORD *)v4166 -= 2;
    }
  }
  JSC::Symbols::smallPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::smallPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4160, v4161, v4162, v4163, v4164, v4165, (uint64_t)v11263);
  v4174 = v11264;
  v11264 = 0;
  if (v4174)
  {
    if (*(_DWORD *)v4174 == 2)
    {
      WTF::StringImpl::~StringImpl(v4174, v4167, (uint64_t)v4168, v4169, v4170, v4171, v4172, v4173);
      WTF::fastFree(v8390, v8391, v8392, v8393, v8394, v8395, v8396, v8397);
    }
    else
    {
      *(_DWORD *)v4174 -= 2;
    }
  }
  JSC::Symbols::somePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::somePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4168, v4169, v4170, v4171, v4172, v4173, (uint64_t)v11263);
  v4182 = v11264;
  v11264 = 0;
  if (v4182)
  {
    if (*(_DWORD *)v4182 == 2)
    {
      WTF::StringImpl::~StringImpl(v4182, v4175, (uint64_t)v4176, v4177, v4178, v4179, v4180, v4181);
      WTF::fastFree(v8398, v8399, v8400, v8401, v8402, v8403, v8404, v8405);
    }
    else
    {
      *(_DWORD *)v4182 -= 2;
    }
  }
  JSC::Symbols::speciesConstructorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::speciesConstructorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4176, v4177, v4178, v4179, v4180, v4181, (uint64_t)v11263);
  v4190 = v11264;
  v11264 = 0;
  if (v4190)
  {
    if (*(_DWORD *)v4190 == 2)
    {
      WTF::StringImpl::~StringImpl(v4190, v4183, (uint64_t)v4184, v4185, v4186, v4187, v4188, v4189);
      WTF::fastFree(v8406, v8407, v8408, v8409, v8410, v8411, v8412, v8413);
    }
    else
    {
      *(_DWORD *)v4190 -= 2;
    }
  }
  JSC::Symbols::splitPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::splitPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4184, v4185, v4186, v4187, v4188, v4189, (uint64_t)v11263);
  v4198 = v11264;
  v11264 = 0;
  if (v4198)
  {
    if (*(_DWORD *)v4198 == 2)
    {
      WTF::StringImpl::~StringImpl(v4198, v4191, (uint64_t)v4192, v4193, v4194, v4195, v4196, v4197);
      WTF::fastFree(v8414, v8415, v8416, v8417, v8418, v8419, v8420, v8421);
    }
    else
    {
      *(_DWORD *)v4198 -= 2;
    }
  }
  JSC::Symbols::strikePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::strikePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4192, v4193, v4194, v4195, v4196, v4197, (uint64_t)v11263);
  v4206 = v11264;
  v11264 = 0;
  if (v4206)
  {
    if (*(_DWORD *)v4206 == 2)
    {
      WTF::StringImpl::~StringImpl(v4206, v4199, (uint64_t)v4200, v4201, v4202, v4203, v4204, v4205);
      WTF::fastFree(v8422, v8423, v8424, v8425, v8426, v8427, v8428, v8429);
    }
    else
    {
      *(_DWORD *)v4206 -= 2;
    }
  }
  JSC::Symbols::stringConcatSlowPathPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringConcatSlowPathPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4200, v4201, v4202, v4203, v4204, v4205, (uint64_t)v11263);
  v4214 = v11264;
  v11264 = 0;
  if (v4214)
  {
    if (*(_DWORD *)v4214 == 2)
    {
      WTF::StringImpl::~StringImpl(v4214, v4207, (uint64_t)v4208, v4209, v4210, v4211, v4212, v4213);
      WTF::fastFree(v8430, v8431, v8432, v8433, v8434, v8435, v8436, v8437);
    }
    else
    {
      *(_DWORD *)v4214 -= 2;
    }
  }
  JSC::Symbols::subPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::subPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4208, v4209, v4210, v4211, v4212, v4213, (uint64_t)v11263);
  v4222 = v11264;
  v11264 = 0;
  if (v4222)
  {
    if (*(_DWORD *)v4222 == 2)
    {
      WTF::StringImpl::~StringImpl(v4222, v4215, (uint64_t)v4216, v4217, v4218, v4219, v4220, v4221);
      WTF::fastFree(v8438, v8439, v8440, v8441, v8442, v8443, v8444, v8445);
    }
    else
    {
      *(_DWORD *)v4222 -= 2;
    }
  }
  JSC::Symbols::supPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::supPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4216, v4217, v4218, v4219, v4220, v4221, (uint64_t)v11263);
  v4230 = v11264;
  v11264 = 0;
  if (v4230)
  {
    if (*(_DWORD *)v4230 == 2)
    {
      WTF::StringImpl::~StringImpl(v4230, v4223, (uint64_t)v4224, v4225, v4226, v4227, v4228, v4229);
      WTF::fastFree(v8446, v8447, v8448, v8449, v8450, v8451, v8452, v8453);
    }
    else
    {
      *(_DWORD *)v4230 -= 2;
    }
  }
  JSC::Symbols::symbolAsyncIteratorGetterPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::symbolAsyncIteratorGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4224, v4225, v4226, v4227, v4228, v4229, (uint64_t)v11263);
  v4238 = v11264;
  v11264 = 0;
  if (v4238)
  {
    if (*(_DWORD *)v4238 == 2)
    {
      WTF::StringImpl::~StringImpl(v4238, v4231, (uint64_t)v4232, v4233, v4234, v4235, v4236, v4237);
      WTF::fastFree(v8454, v8455, v8456, v8457, v8458, v8459, v8460, v8461);
    }
    else
    {
      *(_DWORD *)v4238 -= 2;
    }
  }
  JSC::Symbols::symbolHasInstancePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::symbolHasInstancePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4232, v4233, v4234, v4235, v4236, v4237, (uint64_t)v11263);
  v4246 = v11264;
  v11264 = 0;
  if (v4246)
  {
    if (*(_DWORD *)v4246 == 2)
    {
      WTF::StringImpl::~StringImpl(v4246, v4239, (uint64_t)v4240, v4241, v4242, v4243, v4244, v4245);
      WTF::fastFree(v8462, v8463, v8464, v8465, v8466, v8467, v8468, v8469);
    }
    else
    {
      *(_DWORD *)v4246 -= 2;
    }
  }
  JSC::Symbols::symbolIteratorGetterPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::symbolIteratorGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4240, v4241, v4242, v4243, v4244, v4245, (uint64_t)v11263);
  v4254 = v11264;
  v11264 = 0;
  if (v4254)
  {
    if (*(_DWORD *)v4254 == 2)
    {
      WTF::StringImpl::~StringImpl(v4254, v4247, (uint64_t)v4248, v4249, v4250, v4251, v4252, v4253);
      WTF::fastFree(v8470, v8471, v8472, v8473, v8474, v8475, v8476, v8477);
    }
    else
    {
      *(_DWORD *)v4254 -= 2;
    }
  }
  JSC::Symbols::symmetricDifferencePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::symmetricDifferencePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4248, v4249, v4250, v4251, v4252, v4253, (uint64_t)v11263);
  v4262 = v11264;
  v11264 = 0;
  if (v4262)
  {
    if (*(_DWORD *)v4262 == 2)
    {
      WTF::StringImpl::~StringImpl(v4262, v4255, (uint64_t)v4256, v4257, v4258, v4259, v4260, v4261);
      WTF::fastFree(v8478, v8479, v8480, v8481, v8482, v8483, v8484, v8485);
    }
    else
    {
      *(_DWORD *)v4262 -= 2;
    }
  }
  JSC::Symbols::testPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::testPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4256, v4257, v4258, v4259, v4260, v4261, (uint64_t)v11263);
  v4270 = v11264;
  v11264 = 0;
  if (v4270)
  {
    if (*(_DWORD *)v4270 == 2)
    {
      WTF::StringImpl::~StringImpl(v4270, v4263, (uint64_t)v4264, v4265, v4266, v4267, v4268, v4269);
      WTF::fastFree(v8486, v8487, v8488, v8489, v8490, v8491, v8492, v8493);
    }
    else
    {
      *(_DWORD *)v4270 -= 2;
    }
  }
  JSC::Symbols::thenPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::thenPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4264, v4265, v4266, v4267, v4268, v4269, (uint64_t)v11263);
  v4278 = v11264;
  v11264 = 0;
  if (v4278)
  {
    if (*(_DWORD *)v4278 == 2)
    {
      WTF::StringImpl::~StringImpl(v4278, v4271, (uint64_t)v4272, v4273, v4274, v4275, v4276, v4277);
      WTF::fastFree(v8494, v8495, v8496, v8497, v8498, v8499, v8500, v8501);
    }
    else
    {
      *(_DWORD *)v4278 -= 2;
    }
  }
  JSC::Symbols::throwPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::throwPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4272, v4273, v4274, v4275, v4276, v4277, (uint64_t)v11263);
  v4286 = v11264;
  v11264 = 0;
  if (v4286)
  {
    if (*(_DWORD *)v4286 == 2)
    {
      WTF::StringImpl::~StringImpl(v4286, v4279, (uint64_t)v4280, v4281, v4282, v4283, v4284, v4285);
      WTF::fastFree(v8502, v8503, v8504, v8505, v8506, v8507, v8508, v8509);
    }
    else
    {
      *(_DWORD *)v4286 -= 2;
    }
  }
  JSC::Symbols::toLocaleStringPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::toLocaleStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4280, v4281, v4282, v4283, v4284, v4285, (uint64_t)v11263);
  v4294 = v11264;
  v11264 = 0;
  if (v4294)
  {
    if (*(_DWORD *)v4294 == 2)
    {
      WTF::StringImpl::~StringImpl(v4294, v4287, (uint64_t)v4288, v4289, v4290, v4291, v4292, v4293);
      WTF::fastFree(v8510, v8511, v8512, v8513, v8514, v8515, v8516, v8517);
    }
    else
    {
      *(_DWORD *)v4294 -= 2;
    }
  }
  JSC::Symbols::toReversedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::toReversedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4288, v4289, v4290, v4291, v4292, v4293, (uint64_t)v11263);
  v4302 = v11264;
  v11264 = 0;
  if (v4302)
  {
    if (*(_DWORD *)v4302 == 2)
    {
      WTF::StringImpl::~StringImpl(v4302, v4295, (uint64_t)v4296, v4297, v4298, v4299, v4300, v4301);
      WTF::fastFree(v8518, v8519, v8520, v8521, v8522, v8523, v8524, v8525);
    }
    else
    {
      *(_DWORD *)v4302 -= 2;
    }
  }
  JSC::Symbols::toSortedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::toSortedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4296, v4297, v4298, v4299, v4300, v4301, (uint64_t)v11263);
  v4310 = v11264;
  v11264 = 0;
  if (v4310)
  {
    if (*(_DWORD *)v4310 == 2)
    {
      WTF::StringImpl::~StringImpl(v4310, v4303, (uint64_t)v4304, v4305, v4306, v4307, v4308, v4309);
      WTF::fastFree(v8526, v8527, v8528, v8529, v8530, v8531, v8532, v8533);
    }
    else
    {
      *(_DWORD *)v4310 -= 2;
    }
  }
  JSC::Symbols::toSplicedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::toSplicedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4304, v4305, v4306, v4307, v4308, v4309, (uint64_t)v11263);
  v4318 = v11264;
  v11264 = 0;
  if (v4318)
  {
    if (*(_DWORD *)v4318 == 2)
    {
      WTF::StringImpl::~StringImpl(v4318, v4311, (uint64_t)v4312, v4313, v4314, v4315, v4316, v4317);
      WTF::fastFree(v8534, v8535, v8536, v8537, v8538, v8539, v8540, v8541);
    }
    else
    {
      *(_DWORD *)v4318 -= 2;
    }
  }
  JSC::Symbols::triggerPromiseReactionsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::triggerPromiseReactionsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4312, v4313, v4314, v4315, v4316, v4317, (uint64_t)v11263);
  v4326 = v11264;
  v11264 = 0;
  if (v4326)
  {
    if (*(_DWORD *)v4326 == 2)
    {
      WTF::StringImpl::~StringImpl(v4326, v4319, (uint64_t)v4320, v4321, v4322, v4323, v4324, v4325);
      WTF::fastFree(v8542, v8543, v8544, v8545, v8546, v8547, v8548, v8549);
    }
    else
    {
      *(_DWORD *)v4326 -= 2;
    }
  }
  JSC::Symbols::tryPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::tryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4320, v4321, v4322, v4323, v4324, v4325, (uint64_t)v11263);
  v4334 = v11264;
  v11264 = 0;
  if (v4334)
  {
    if (*(_DWORD *)v4334 == 2)
    {
      WTF::StringImpl::~StringImpl(v4334, v4327, (uint64_t)v4328, v4329, v4330, v4331, v4332, v4333);
      WTF::fastFree(v8550, v8551, v8552, v8553, v8554, v8555, v8556, v8557);
    }
    else
    {
      *(_DWORD *)v4334 -= 2;
    }
  }
  JSC::Symbols::typedArraySpeciesConstructorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::typedArraySpeciesConstructorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4328, v4329, v4330, v4331, v4332, v4333, (uint64_t)v11263);
  v4342 = v11264;
  v11264 = 0;
  if (v4342)
  {
    if (*(_DWORD *)v4342 == 2)
    {
      WTF::StringImpl::~StringImpl(v4342, v4335, (uint64_t)v4336, v4337, v4338, v4339, v4340, v4341);
      WTF::fastFree(v8558, v8559, v8560, v8561, v8562, v8563, v8564, v8565);
    }
    else
    {
      *(_DWORD *)v4342 -= 2;
    }
  }
  JSC::Symbols::unionPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::unionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4336, v4337, v4338, v4339, v4340, v4341, (uint64_t)v11263);
  v4350 = v11264;
  v11264 = 0;
  if (v4350)
  {
    if (*(_DWORD *)v4350 == 2)
    {
      WTF::StringImpl::~StringImpl(v4350, v4343, (uint64_t)v4344, v4345, v4346, v4347, v4348, v4349);
      WTF::fastFree(v8566, v8567, v8568, v8569, v8570, v8571, v8572, v8573);
    }
    else
    {
      *(_DWORD *)v4350 -= 2;
    }
  }
  JSC::Symbols::withPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::withPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4344, v4345, v4346, v4347, v4348, v4349, (uint64_t)v11263);
  v4358 = v11264;
  v11264 = 0;
  if (v4358)
  {
    if (*(_DWORD *)v4358 == 2)
    {
      WTF::StringImpl::~StringImpl(v4358, v4351, (uint64_t)v4352, v4353, v4354, v4355, v4356, v4357);
      WTF::fastFree(v8574, v8575, v8576, v8577, v8578, v8579, v8580, v8581);
    }
    else
    {
      *(_DWORD *)v4358 -= 2;
    }
  }
  JSC::Symbols::withResolversPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::withResolversPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4352, v4353, v4354, v4355, v4356, v4357, (uint64_t)v11263);
  v4366 = v11264;
  v11264 = 0;
  if (v4366)
  {
    if (*(_DWORD *)v4366 == 2)
    {
      WTF::StringImpl::~StringImpl(v4366, v4359, (uint64_t)v4360, v4361, v4362, v4363, v4364, v4365);
      WTF::fastFree(v8582, v8583, v8584, v8585, v8586, v8587, v8588, v8589);
    }
    else
    {
      *(_DWORD *)v4366 -= 2;
    }
  }
  JSC::Symbols::wrapRemoteValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::wrapRemoteValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4360, v4361, v4362, v4363, v4364, v4365, (uint64_t)v11263);
  v4374 = v11264;
  v11264 = 0;
  if (v4374)
  {
    if (*(_DWORD *)v4374 == 2)
    {
      WTF::StringImpl::~StringImpl(v4374, v4367, (uint64_t)v4368, v4369, v4370, v4371, v4372, v4373);
      WTF::fastFree(v8590, v8591, v8592, v8593, v8594, v8595, v8596, v8597);
    }
    else
    {
      *(_DWORD *)v4374 -= 2;
    }
  }
  JSC::Symbols::wrappedIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::wrappedIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4368, v4369, v4370, v4371, v4372, v4373, (uint64_t)v11263);
  v4382 = v11264;
  v11264 = 0;
  if (v4382)
  {
    if (*(_DWORD *)v4382 == 2)
    {
      WTF::StringImpl::~StringImpl(v4382, v4375, (uint64_t)v4376, v4377, v4378, v4379, v4380, v4381);
      WTF::fastFree(v8598, v8599, v8600, v8601, v8602, v8603, v8604, v8605);
    }
    else
    {
      *(_DWORD *)v4382 -= 2;
    }
  }
  JSC::Symbols::argumentPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::argumentPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4376, v4377, v4378, v4379, v4380, v4381, (uint64_t)v11263);
  v4390 = v11264;
  v11264 = 0;
  if (v4390)
  {
    if (*(_DWORD *)v4390 == 2)
    {
      WTF::StringImpl::~StringImpl(v4390, v4383, (uint64_t)v4384, v4385, v4386, v4387, v4388, v4389);
      WTF::fastFree(v8606, v8607, v8608, v8609, v8610, v8611, v8612, v8613);
    }
    else
    {
      *(_DWORD *)v4390 -= 2;
    }
  }
  JSC::Symbols::argumentCountPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::argumentCountPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4384, v4385, v4386, v4387, v4388, v4389, (uint64_t)v11263);
  v4398 = v11264;
  v11264 = 0;
  if (v4398)
  {
    if (*(_DWORD *)v4398 == 2)
    {
      WTF::StringImpl::~StringImpl(v4398, v4391, (uint64_t)v4392, v4393, v4394, v4395, v4396, v4397);
      WTF::fastFree(v8614, v8615, v8616, v8617, v8618, v8619, v8620, v8621);
    }
    else
    {
      *(_DWORD *)v4398 -= 2;
    }
  }
  JSC::Symbols::arrayPushPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayPushPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4392, v4393, v4394, v4395, v4396, v4397, (uint64_t)v11263);
  v4406 = v11264;
  v11264 = 0;
  if (v4406)
  {
    if (*(_DWORD *)v4406 == 2)
    {
      WTF::StringImpl::~StringImpl(v4406, v4399, (uint64_t)v4400, v4401, v4402, v4403, v4404, v4405);
      WTF::fastFree(v8622, v8623, v8624, v8625, v8626, v8627, v8628, v8629);
    }
    else
    {
      *(_DWORD *)v4406 -= 2;
    }
  }
  JSC::Symbols::getByIdDirectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4400, v4401, v4402, v4403, v4404, v4405, (uint64_t)v11263);
  v4414 = v11264;
  v11264 = 0;
  if (v4414)
  {
    if (*(_DWORD *)v4414 == 2)
    {
      WTF::StringImpl::~StringImpl(v4414, v4407, (uint64_t)v4408, v4409, v4410, v4411, v4412, v4413);
      WTF::fastFree(v8630, v8631, v8632, v8633, v8634, v8635, v8636, v8637);
    }
    else
    {
      *(_DWORD *)v4414 -= 2;
    }
  }
  JSC::Symbols::getByIdDirectPrivatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4408, v4409, v4410, v4411, v4412, v4413, (uint64_t)v11263);
  v4422 = v11264;
  v11264 = 0;
  if (v4422)
  {
    if (*(_DWORD *)v4422 == 2)
    {
      WTF::StringImpl::~StringImpl(v4422, v4415, (uint64_t)v4416, v4417, v4418, v4419, v4420, v4421);
      WTF::fastFree(v8638, v8639, v8640, v8641, v8642, v8643, v8644, v8645);
    }
    else
    {
      *(_DWORD *)v4422 -= 2;
    }
  }
  JSC::Symbols::getByValWithThisPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getByValWithThisPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4416, v4417, v4418, v4419, v4420, v4421, (uint64_t)v11263);
  v4430 = v11264;
  v11264 = 0;
  if (v4430)
  {
    if (*(_DWORD *)v4430 == 2)
    {
      WTF::StringImpl::~StringImpl(v4430, v4423, (uint64_t)v4424, v4425, v4426, v4427, v4428, v4429);
      WTF::fastFree(v8646, v8647, v8648, v8649, v8650, v8651, v8652, v8653);
    }
    else
    {
      *(_DWORD *)v4430 -= 2;
    }
  }
  JSC::Symbols::getPrototypeOfPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4424, v4425, v4426, v4427, v4428, v4429, (uint64_t)v11263);
  v4438 = v11264;
  v11264 = 0;
  if (v4438)
  {
    if (*(_DWORD *)v4438 == 2)
    {
      WTF::StringImpl::~StringImpl(v4438, v4431, (uint64_t)v4432, v4433, v4434, v4435, v4436, v4437);
      WTF::fastFree(v8654, v8655, v8656, v8657, v8658, v8659, v8660, v8661);
    }
    else
    {
      *(_DWORD *)v4438 -= 2;
    }
  }
  JSC::Symbols::getPromiseInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getPromiseInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4432, v4433, v4434, v4435, v4436, v4437, (uint64_t)v11263);
  v4446 = v11264;
  v11264 = 0;
  if (v4446)
  {
    if (*(_DWORD *)v4446 == 2)
    {
      WTF::StringImpl::~StringImpl(v4446, v4439, (uint64_t)v4440, v4441, v4442, v4443, v4444, v4445);
      WTF::fastFree(v8662, v8663, v8664, v8665, v8666, v8667, v8668, v8669);
    }
    else
    {
      *(_DWORD *)v4446 -= 2;
    }
  }
  JSC::Symbols::getGeneratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getGeneratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4440, v4441, v4442, v4443, v4444, v4445, (uint64_t)v11263);
  v4454 = v11264;
  v11264 = 0;
  if (v4454)
  {
    if (*(_DWORD *)v4454 == 2)
    {
      WTF::StringImpl::~StringImpl(v4454, v4447, (uint64_t)v4448, v4449, v4450, v4451, v4452, v4453);
      WTF::fastFree(v8670, v8671, v8672, v8673, v8674, v8675, v8676, v8677);
    }
    else
    {
      *(_DWORD *)v4454 -= 2;
    }
  }
  JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4448, v4449, v4450, v4451, v4452, v4453, (uint64_t)v11263);
  v4462 = v11264;
  v11264 = 0;
  if (v4462)
  {
    if (*(_DWORD *)v4462 == 2)
    {
      WTF::StringImpl::~StringImpl(v4462, v4455, (uint64_t)v4456, v4457, v4458, v4459, v4460, v4461);
      WTF::fastFree(v8678, v8679, v8680, v8681, v8682, v8683, v8684, v8685);
    }
    else
    {
      *(_DWORD *)v4462 -= 2;
    }
  }
  JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4456, v4457, v4458, v4459, v4460, v4461, (uint64_t)v11263);
  v4470 = v11264;
  v11264 = 0;
  if (v4470)
  {
    if (*(_DWORD *)v4470 == 2)
    {
      WTF::StringImpl::~StringImpl(v4470, v4463, (uint64_t)v4464, v4465, v4466, v4467, v4468, v4469);
      WTF::fastFree(v8686, v8687, v8688, v8689, v8690, v8691, v8692, v8693);
    }
    else
    {
      *(_DWORD *)v4470 -= 2;
    }
  }
  JSC::Symbols::getArrayIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getArrayIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4464, v4465, v4466, v4467, v4468, v4469, (uint64_t)v11263);
  v4478 = v11264;
  v11264 = 0;
  if (v4478)
  {
    if (*(_DWORD *)v4478 == 2)
    {
      WTF::StringImpl::~StringImpl(v4478, v4471, (uint64_t)v4472, v4473, v4474, v4475, v4476, v4477);
      WTF::fastFree(v8694, v8695, v8696, v8697, v8698, v8699, v8700, v8701);
    }
    else
    {
      *(_DWORD *)v4478 -= 2;
    }
  }
  JSC::Symbols::getStringIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getStringIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4472, v4473, v4474, v4475, v4476, v4477, (uint64_t)v11263);
  v4486 = v11264;
  v11264 = 0;
  if (v4486)
  {
    if (*(_DWORD *)v4486 == 2)
    {
      WTF::StringImpl::~StringImpl(v4486, v4479, (uint64_t)v4480, v4481, v4482, v4483, v4484, v4485);
      WTF::fastFree(v8702, v8703, v8704, v8705, v8706, v8707, v8708, v8709);
    }
    else
    {
      *(_DWORD *)v4486 -= 2;
    }
  }
  JSC::Symbols::getMapIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getMapIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4480, v4481, v4482, v4483, v4484, v4485, (uint64_t)v11263);
  v4494 = v11264;
  v11264 = 0;
  if (v4494)
  {
    if (*(_DWORD *)v4494 == 2)
    {
      WTF::StringImpl::~StringImpl(v4494, v4487, (uint64_t)v4488, v4489, v4490, v4491, v4492, v4493);
      WTF::fastFree(v8710, v8711, v8712, v8713, v8714, v8715, v8716, v8717);
    }
    else
    {
      *(_DWORD *)v4494 -= 2;
    }
  }
  JSC::Symbols::getSetIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getSetIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4488, v4489, v4490, v4491, v4492, v4493, (uint64_t)v11263);
  v4502 = v11264;
  v11264 = 0;
  if (v4502)
  {
    if (*(_DWORD *)v4502 == 2)
    {
      WTF::StringImpl::~StringImpl(v4502, v4495, (uint64_t)v4496, v4497, v4498, v4499, v4500, v4501);
      WTF::fastFree(v8718, v8719, v8720, v8721, v8722, v8723, v8724, v8725);
    }
    else
    {
      *(_DWORD *)v4502 -= 2;
    }
  }
  JSC::Symbols::getProxyInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getProxyInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4496, v4497, v4498, v4499, v4500, v4501, (uint64_t)v11263);
  v4510 = v11264;
  v11264 = 0;
  if (v4510)
  {
    if (*(_DWORD *)v4510 == 2)
    {
      WTF::StringImpl::~StringImpl(v4510, v4503, (uint64_t)v4504, v4505, v4506, v4507, v4508, v4509);
      WTF::fastFree(v8726, v8727, v8728, v8729, v8730, v8731, v8732, v8733);
    }
    else
    {
      *(_DWORD *)v4510 -= 2;
    }
  }
  JSC::Symbols::idWithProfilePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::idWithProfilePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4504, v4505, v4506, v4507, v4508, v4509, (uint64_t)v11263);
  v4518 = v11264;
  v11264 = 0;
  if (v4518)
  {
    if (*(_DWORD *)v4518 == 2)
    {
      WTF::StringImpl::~StringImpl(v4518, v4511, (uint64_t)v4512, v4513, v4514, v4515, v4516, v4517);
      WTF::fastFree(v8734, v8735, v8736, v8737, v8738, v8739, v8740, v8741);
    }
    else
    {
      *(_DWORD *)v4518 -= 2;
    }
  }
  JSC::Symbols::isObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4512, v4513, v4514, v4515, v4516, v4517, (uint64_t)v11263);
  v4526 = v11264;
  v11264 = 0;
  if (v4526)
  {
    if (*(_DWORD *)v4526 == 2)
    {
      WTF::StringImpl::~StringImpl(v4526, v4519, (uint64_t)v4520, v4521, v4522, v4523, v4524, v4525);
      WTF::fastFree(v8742, v8743, v8744, v8745, v8746, v8747, v8748, v8749);
    }
    else
    {
      *(_DWORD *)v4526 -= 2;
    }
  }
  JSC::Symbols::isCallablePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isCallablePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4520, v4521, v4522, v4523, v4524, v4525, (uint64_t)v11263);
  v4534 = v11264;
  v11264 = 0;
  if (v4534)
  {
    if (*(_DWORD *)v4534 == 2)
    {
      WTF::StringImpl::~StringImpl(v4534, v4527, (uint64_t)v4528, v4529, v4530, v4531, v4532, v4533);
      WTF::fastFree(v8750, v8751, v8752, v8753, v8754, v8755, v8756, v8757);
    }
    else
    {
      *(_DWORD *)v4534 -= 2;
    }
  }
  JSC::Symbols::isConstructorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isConstructorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4528, v4529, v4530, v4531, v4532, v4533, (uint64_t)v11263);
  v4542 = v11264;
  v11264 = 0;
  if (v4542)
  {
    if (*(_DWORD *)v4542 == 2)
    {
      WTF::StringImpl::~StringImpl(v4542, v4535, (uint64_t)v4536, v4537, v4538, v4539, v4540, v4541);
      WTF::fastFree(v8758, v8759, v8760, v8761, v8762, v8763, v8764, v8765);
    }
    else
    {
      *(_DWORD *)v4542 -= 2;
    }
  }
  JSC::Symbols::isJSArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isJSArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4536, v4537, v4538, v4539, v4540, v4541, (uint64_t)v11263);
  v4550 = v11264;
  v11264 = 0;
  if (v4550)
  {
    if (*(_DWORD *)v4550 == 2)
    {
      WTF::StringImpl::~StringImpl(v4550, v4543, (uint64_t)v4544, v4545, v4546, v4547, v4548, v4549);
      WTF::fastFree(v8766, v8767, v8768, v8769, v8770, v8771, v8772, v8773);
    }
    else
    {
      *(_DWORD *)v4550 -= 2;
    }
  }
  JSC::Symbols::isProxyObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isProxyObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4544, v4545, v4546, v4547, v4548, v4549, (uint64_t)v11263);
  v4558 = v11264;
  v11264 = 0;
  if (v4558)
  {
    if (*(_DWORD *)v4558 == 2)
    {
      WTF::StringImpl::~StringImpl(v4558, v4551, (uint64_t)v4552, v4553, v4554, v4555, v4556, v4557);
      WTF::fastFree(v8774, v8775, v8776, v8777, v8778, v8779, v8780, v8781);
    }
    else
    {
      *(_DWORD *)v4558 -= 2;
    }
  }
  JSC::Symbols::isDerivedArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isDerivedArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4552, v4553, v4554, v4555, v4556, v4557, (uint64_t)v11263);
  v4566 = v11264;
  v11264 = 0;
  if (v4566)
  {
    if (*(_DWORD *)v4566 == 2)
    {
      WTF::StringImpl::~StringImpl(v4566, v4559, (uint64_t)v4560, v4561, v4562, v4563, v4564, v4565);
      WTF::fastFree(v8782, v8783, v8784, v8785, v8786, v8787, v8788, v8789);
    }
    else
    {
      *(_DWORD *)v4566 -= 2;
    }
  }
  JSC::Symbols::isGeneratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isGeneratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4560, v4561, v4562, v4563, v4564, v4565, (uint64_t)v11263);
  v4574 = v11264;
  v11264 = 0;
  if (v4574)
  {
    if (*(_DWORD *)v4574 == 2)
    {
      WTF::StringImpl::~StringImpl(v4574, v4567, (uint64_t)v4568, v4569, v4570, v4571, v4572, v4573);
      WTF::fastFree(v8790, v8791, v8792, v8793, v8794, v8795, v8796, v8797);
    }
    else
    {
      *(_DWORD *)v4574 -= 2;
    }
  }
  JSC::Symbols::isAsyncGeneratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isAsyncGeneratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4568, v4569, v4570, v4571, v4572, v4573, (uint64_t)v11263);
  v4582 = v11264;
  v11264 = 0;
  if (v4582)
  {
    if (*(_DWORD *)v4582 == 2)
    {
      WTF::StringImpl::~StringImpl(v4582, v4575, (uint64_t)v4576, v4577, v4578, v4579, v4580, v4581);
      WTF::fastFree(v8798, v8799, v8800, v8801, v8802, v8803, v8804, v8805);
    }
    else
    {
      *(_DWORD *)v4582 -= 2;
    }
  }
  JSC::Symbols::isPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4576, v4577, v4578, v4579, v4580, v4581, (uint64_t)v11263);
  v4590 = v11264;
  v11264 = 0;
  if (v4590)
  {
    if (*(_DWORD *)v4590 == 2)
    {
      WTF::StringImpl::~StringImpl(v4590, v4583, (uint64_t)v4584, v4585, v4586, v4587, v4588, v4589);
      WTF::fastFree(v8806, v8807, v8808, v8809, v8810, v8811, v8812, v8813);
    }
    else
    {
      *(_DWORD *)v4590 -= 2;
    }
  }
  JSC::Symbols::isRegExpObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isRegExpObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4584, v4585, v4586, v4587, v4588, v4589, (uint64_t)v11263);
  v4598 = v11264;
  v11264 = 0;
  if (v4598)
  {
    if (*(_DWORD *)v4598 == 2)
    {
      WTF::StringImpl::~StringImpl(v4598, v4591, (uint64_t)v4592, v4593, v4594, v4595, v4596, v4597);
      WTF::fastFree(v8814, v8815, v8816, v8817, v8818, v8819, v8820, v8821);
    }
    else
    {
      *(_DWORD *)v4598 -= 2;
    }
  }
  JSC::Symbols::isMapPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isMapPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4592, v4593, v4594, v4595, v4596, v4597, (uint64_t)v11263);
  v4606 = v11264;
  v11264 = 0;
  if (v4606)
  {
    if (*(_DWORD *)v4606 == 2)
    {
      WTF::StringImpl::~StringImpl(v4606, v4599, (uint64_t)v4600, v4601, v4602, v4603, v4604, v4605);
      WTF::fastFree(v8822, v8823, v8824, v8825, v8826, v8827, v8828, v8829);
    }
    else
    {
      *(_DWORD *)v4606 -= 2;
    }
  }
  JSC::Symbols::isSetPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isSetPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4600, v4601, v4602, v4603, v4604, v4605, (uint64_t)v11263);
  v4614 = v11264;
  v11264 = 0;
  if (v4614)
  {
    if (*(_DWORD *)v4614 == 2)
    {
      WTF::StringImpl::~StringImpl(v4614, v4607, (uint64_t)v4608, v4609, v4610, v4611, v4612, v4613);
      WTF::fastFree(v8830, v8831, v8832, v8833, v8834, v8835, v8836, v8837);
    }
    else
    {
      *(_DWORD *)v4614 -= 2;
    }
  }
  JSC::Symbols::isShadowRealmPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isShadowRealmPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4608, v4609, v4610, v4611, v4612, v4613, (uint64_t)v11263);
  v4622 = v11264;
  v11264 = 0;
  if (v4622)
  {
    if (*(_DWORD *)v4622 == 2)
    {
      WTF::StringImpl::~StringImpl(v4622, v4615, (uint64_t)v4616, v4617, v4618, v4619, v4620, v4621);
      WTF::fastFree(v8838, v8839, v8840, v8841, v8842, v8843, v8844, v8845);
    }
    else
    {
      *(_DWORD *)v4622 -= 2;
    }
  }
  JSC::Symbols::isStringIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isStringIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4616, v4617, v4618, v4619, v4620, v4621, (uint64_t)v11263);
  v4630 = v11264;
  v11264 = 0;
  if (v4630)
  {
    if (*(_DWORD *)v4630 == 2)
    {
      WTF::StringImpl::~StringImpl(v4630, v4623, (uint64_t)v4624, v4625, v4626, v4627, v4628, v4629);
      WTF::fastFree(v8846, v8847, v8848, v8849, v8850, v8851, v8852, v8853);
    }
    else
    {
      *(_DWORD *)v4630 -= 2;
    }
  }
  JSC::Symbols::isArrayIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isArrayIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4624, v4625, v4626, v4627, v4628, v4629, (uint64_t)v11263);
  v4638 = v11264;
  v11264 = 0;
  if (v4638)
  {
    if (*(_DWORD *)v4638 == 2)
    {
      WTF::StringImpl::~StringImpl(v4638, v4631, (uint64_t)v4632, v4633, v4634, v4635, v4636, v4637);
      WTF::fastFree(v8854, v8855, v8856, v8857, v8858, v8859, v8860, v8861);
    }
    else
    {
      *(_DWORD *)v4638 -= 2;
    }
  }
  JSC::Symbols::isMapIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isMapIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4632, v4633, v4634, v4635, v4636, v4637, (uint64_t)v11263);
  v4646 = v11264;
  v11264 = 0;
  if (v4646)
  {
    if (*(_DWORD *)v4646 == 2)
    {
      WTF::StringImpl::~StringImpl(v4646, v4639, (uint64_t)v4640, v4641, v4642, v4643, v4644, v4645);
      WTF::fastFree(v8862, v8863, v8864, v8865, v8866, v8867, v8868, v8869);
    }
    else
    {
      *(_DWORD *)v4646 -= 2;
    }
  }
  JSC::Symbols::isSetIteratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isSetIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4640, v4641, v4642, v4643, v4644, v4645, (uint64_t)v11263);
  v4654 = v11264;
  v11264 = 0;
  if (v4654)
  {
    if (*(_DWORD *)v4654 == 2)
    {
      WTF::StringImpl::~StringImpl(v4654, v4647, (uint64_t)v4648, v4649, v4650, v4651, v4652, v4653);
      WTF::fastFree(v8870, v8871, v8872, v8873, v8874, v8875, v8876, v8877);
    }
    else
    {
      *(_DWORD *)v4654 -= 2;
    }
  }
  JSC::Symbols::isUndefinedOrNullPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isUndefinedOrNullPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4648, v4649, v4650, v4651, v4652, v4653, (uint64_t)v11263);
  v4662 = v11264;
  v11264 = 0;
  if (v4662)
  {
    if (*(_DWORD *)v4662 == 2)
    {
      WTF::StringImpl::~StringImpl(v4662, v4655, (uint64_t)v4656, v4657, v4658, v4659, v4660, v4661);
      WTF::fastFree(v8878, v8879, v8880, v8881, v8882, v8883, v8884, v8885);
    }
    else
    {
      *(_DWORD *)v4662 -= 2;
    }
  }
  JSC::Symbols::tailCallForwardArgumentsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::tailCallForwardArgumentsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4656, v4657, v4658, v4659, v4660, v4661, (uint64_t)v11263);
  v4670 = v11264;
  v11264 = 0;
  if (v4670)
  {
    if (*(_DWORD *)v4670 == 2)
    {
      WTF::StringImpl::~StringImpl(v4670, v4663, (uint64_t)v4664, v4665, v4666, v4667, v4668, v4669);
      WTF::fastFree(v8886, v8887, v8888, v8889, v8890, v8891, v8892, v8893);
    }
    else
    {
      *(_DWORD *)v4670 -= 2;
    }
  }
  JSC::Symbols::throwTypeErrorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::throwTypeErrorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4664, v4665, v4666, v4667, v4668, v4669, (uint64_t)v11263);
  v4678 = v11264;
  v11264 = 0;
  if (v4678)
  {
    if (*(_DWORD *)v4678 == 2)
    {
      WTF::StringImpl::~StringImpl(v4678, v4671, (uint64_t)v4672, v4673, v4674, v4675, v4676, v4677);
      WTF::fastFree(v8894, v8895, v8896, v8897, v8898, v8899, v8900, v8901);
    }
    else
    {
      *(_DWORD *)v4678 -= 2;
    }
  }
  JSC::Symbols::throwRangeErrorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::throwRangeErrorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4672, v4673, v4674, v4675, v4676, v4677, (uint64_t)v11263);
  v4686 = v11264;
  v11264 = 0;
  if (v4686)
  {
    if (*(_DWORD *)v4686 == 2)
    {
      WTF::StringImpl::~StringImpl(v4686, v4679, (uint64_t)v4680, v4681, v4682, v4683, v4684, v4685);
      WTF::fastFree(v8902, v8903, v8904, v8905, v8906, v8907, v8908, v8909);
    }
    else
    {
      *(_DWORD *)v4686 -= 2;
    }
  }
  JSC::Symbols::throwOutOfMemoryErrorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::throwOutOfMemoryErrorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4680, v4681, v4682, v4683, v4684, v4685, (uint64_t)v11263);
  v4694 = v11264;
  v11264 = 0;
  if (v4694)
  {
    if (*(_DWORD *)v4694 == 2)
    {
      WTF::StringImpl::~StringImpl(v4694, v4687, (uint64_t)v4688, v4689, v4690, v4691, v4692, v4693);
      WTF::fastFree(v8910, v8911, v8912, v8913, v8914, v8915, v8916, v8917);
    }
    else
    {
      *(_DWORD *)v4694 -= 2;
    }
  }
  JSC::Symbols::tryGetByIdPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::tryGetByIdPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4688, v4689, v4690, v4691, v4692, v4693, (uint64_t)v11263);
  v4702 = v11264;
  v11264 = 0;
  if (v4702)
  {
    if (*(_DWORD *)v4702 == 2)
    {
      WTF::StringImpl::~StringImpl(v4702, v4695, (uint64_t)v4696, v4697, v4698, v4699, v4700, v4701);
      WTF::fastFree(v8918, v8919, v8920, v8921, v8922, v8923, v8924, v8925);
    }
    else
    {
      *(_DWORD *)v4702 -= 2;
    }
  }
  JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4696, v4697, v4698, v4699, v4700, v4701, (uint64_t)v11263);
  v4710 = v11264;
  v11264 = 0;
  if (v4710)
  {
    if (*(_DWORD *)v4710 == 2)
    {
      WTF::StringImpl::~StringImpl(v4710, v4703, (uint64_t)v4704, v4705, v4706, v4707, v4708, v4709);
      WTF::fastFree(v8926, v8927, v8928, v8929, v8930, v8931, v8932, v8933);
    }
    else
    {
      *(_DWORD *)v4710 -= 2;
    }
  }
  JSC::Symbols::putByIdDirectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4704, v4705, v4706, v4707, v4708, v4709, (uint64_t)v11263);
  v4718 = v11264;
  v11264 = 0;
  if (v4718)
  {
    if (*(_DWORD *)v4718 == 2)
    {
      WTF::StringImpl::~StringImpl(v4718, v4711, (uint64_t)v4712, v4713, v4714, v4715, v4716, v4717);
      WTF::fastFree(v8934, v8935, v8936, v8937, v8938, v8939, v8940, v8941);
    }
    else
    {
      *(_DWORD *)v4718 -= 2;
    }
  }
  JSC::Symbols::putByIdDirectPrivatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4712, v4713, v4714, v4715, v4716, v4717, (uint64_t)v11263);
  v4726 = v11264;
  v11264 = 0;
  if (v4726)
  {
    if (*(_DWORD *)v4726 == 2)
    {
      WTF::StringImpl::~StringImpl(v4726, v4719, (uint64_t)v4720, v4721, v4722, v4723, v4724, v4725);
      WTF::fastFree(v8942, v8943, v8944, v8945, v8946, v8947, v8948, v8949);
    }
    else
    {
      *(_DWORD *)v4726 -= 2;
    }
  }
  JSC::Symbols::putByValDirectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putByValDirectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4720, v4721, v4722, v4723, v4724, v4725, (uint64_t)v11263);
  v4734 = v11264;
  v11264 = 0;
  if (v4734)
  {
    if (*(_DWORD *)v4734 == 2)
    {
      WTF::StringImpl::~StringImpl(v4734, v4727, (uint64_t)v4728, v4729, v4730, v4731, v4732, v4733);
      WTF::fastFree(v8950, v8951, v8952, v8953, v8954, v8955, v8956, v8957);
    }
    else
    {
      *(_DWORD *)v4734 -= 2;
    }
  }
  JSC::Symbols::putByValWithThisSloppyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putByValWithThisSloppyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4728, v4729, v4730, v4731, v4732, v4733, (uint64_t)v11263);
  v4742 = v11264;
  v11264 = 0;
  if (v4742)
  {
    if (*(_DWORD *)v4742 == 2)
    {
      WTF::StringImpl::~StringImpl(v4742, v4735, (uint64_t)v4736, v4737, v4738, v4739, v4740, v4741);
      WTF::fastFree(v8958, v8959, v8960, v8961, v8962, v8963, v8964, v8965);
    }
    else
    {
      *(_DWORD *)v4742 -= 2;
    }
  }
  JSC::Symbols::putByValWithThisStrictPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putByValWithThisStrictPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4736, v4737, v4738, v4739, v4740, v4741, (uint64_t)v11263);
  v4750 = v11264;
  v11264 = 0;
  if (v4750)
  {
    if (*(_DWORD *)v4750 == 2)
    {
      WTF::StringImpl::~StringImpl(v4750, v4743, (uint64_t)v4744, v4745, v4746, v4747, v4748, v4749);
      WTF::fastFree(v8966, v8967, v8968, v8969, v8970, v8971, v8972, v8973);
    }
    else
    {
      *(_DWORD *)v4750 -= 2;
    }
  }
  JSC::Symbols::putPromiseInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putPromiseInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4744, v4745, v4746, v4747, v4748, v4749, (uint64_t)v11263);
  v4758 = v11264;
  v11264 = 0;
  if (v4758)
  {
    if (*(_DWORD *)v4758 == 2)
    {
      WTF::StringImpl::~StringImpl(v4758, v4751, (uint64_t)v4752, v4753, v4754, v4755, v4756, v4757);
      WTF::fastFree(v8974, v8975, v8976, v8977, v8978, v8979, v8980, v8981);
    }
    else
    {
      *(_DWORD *)v4758 -= 2;
    }
  }
  JSC::Symbols::putGeneratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putGeneratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4752, v4753, v4754, v4755, v4756, v4757, (uint64_t)v11263);
  v4766 = v11264;
  v11264 = 0;
  if (v4766)
  {
    if (*(_DWORD *)v4766 == 2)
    {
      WTF::StringImpl::~StringImpl(v4766, v4759, (uint64_t)v4760, v4761, v4762, v4763, v4764, v4765);
      WTF::fastFree(v8982, v8983, v8984, v8985, v8986, v8987, v8988, v8989);
    }
    else
    {
      *(_DWORD *)v4766 -= 2;
    }
  }
  JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4760, v4761, v4762, v4763, v4764, v4765, (uint64_t)v11263);
  v4774 = v11264;
  v11264 = 0;
  if (v4774)
  {
    if (*(_DWORD *)v4774 == 2)
    {
      WTF::StringImpl::~StringImpl(v4774, v4767, (uint64_t)v4768, v4769, v4770, v4771, v4772, v4773);
      WTF::fastFree(v8990, v8991, v8992, v8993, v8994, v8995, v8996, v8997);
    }
    else
    {
      *(_DWORD *)v4774 -= 2;
    }
  }
  JSC::Symbols::putArrayIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putArrayIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4768, v4769, v4770, v4771, v4772, v4773, (uint64_t)v11263);
  v4782 = v11264;
  v11264 = 0;
  if (v4782)
  {
    if (*(_DWORD *)v4782 == 2)
    {
      WTF::StringImpl::~StringImpl(v4782, v4775, (uint64_t)v4776, v4777, v4778, v4779, v4780, v4781);
      WTF::fastFree(v8998, v8999, v9000, v9001, v9002, v9003, v9004, v9005);
    }
    else
    {
      *(_DWORD *)v4782 -= 2;
    }
  }
  JSC::Symbols::putStringIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putStringIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4776, v4777, v4778, v4779, v4780, v4781, (uint64_t)v11263);
  v4790 = v11264;
  v11264 = 0;
  if (v4790)
  {
    if (*(_DWORD *)v4790 == 2)
    {
      WTF::StringImpl::~StringImpl(v4790, v4783, (uint64_t)v4784, v4785, v4786, v4787, v4788, v4789);
      WTF::fastFree(v9006, v9007, v9008, v9009, v9010, v9011, v9012, v9013);
    }
    else
    {
      *(_DWORD *)v4790 -= 2;
    }
  }
  JSC::Symbols::putMapIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putMapIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4784, v4785, v4786, v4787, v4788, v4789, (uint64_t)v11263);
  v4798 = v11264;
  v11264 = 0;
  if (v4798)
  {
    if (*(_DWORD *)v4798 == 2)
    {
      WTF::StringImpl::~StringImpl(v4798, v4791, (uint64_t)v4792, v4793, v4794, v4795, v4796, v4797);
      WTF::fastFree(v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021);
    }
    else
    {
      *(_DWORD *)v4798 -= 2;
    }
  }
  JSC::Symbols::putSetIteratorInternalFieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::putSetIteratorInternalFieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4792, v4793, v4794, v4795, v4796, v4797, (uint64_t)v11263);
  v4806 = v11264;
  v11264 = 0;
  if (v4806)
  {
    if (*(_DWORD *)v4806 == 2)
    {
      WTF::StringImpl::~StringImpl(v4806, v4799, (uint64_t)v4800, v4801, v4802, v4803, v4804, v4805);
      WTF::fastFree(v9022, v9023, v9024, v9025, v9026, v9027, v9028, v9029);
    }
    else
    {
      *(_DWORD *)v4806 -= 2;
    }
  }
  JSC::Symbols::superSamplerBeginPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::superSamplerBeginPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4800, v4801, v4802, v4803, v4804, v4805, (uint64_t)v11263);
  v4814 = v11264;
  v11264 = 0;
  if (v4814)
  {
    if (*(_DWORD *)v4814 == 2)
    {
      WTF::StringImpl::~StringImpl(v4814, v4807, (uint64_t)v4808, v4809, v4810, v4811, v4812, v4813);
      WTF::fastFree(v9030, v9031, v9032, v9033, v9034, v9035, v9036, v9037);
    }
    else
    {
      *(_DWORD *)v4814 -= 2;
    }
  }
  JSC::Symbols::superSamplerEndPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::superSamplerEndPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4808, v4809, v4810, v4811, v4812, v4813, (uint64_t)v11263);
  v4822 = v11264;
  v11264 = 0;
  if (v4822)
  {
    if (*(_DWORD *)v4822 == 2)
    {
      WTF::StringImpl::~StringImpl(v4822, v4815, (uint64_t)v4816, v4817, v4818, v4819, v4820, v4821);
      WTF::fastFree(v9038, v9039, v9040, v9041, v9042, v9043, v9044, v9045);
    }
    else
    {
      *(_DWORD *)v4822 -= 2;
    }
  }
  JSC::Symbols::toNumberPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toNumberPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4816, v4817, v4818, v4819, v4820, v4821, (uint64_t)v11263);
  v4830 = v11264;
  v11264 = 0;
  if (v4830)
  {
    if (*(_DWORD *)v4830 == 2)
    {
      WTF::StringImpl::~StringImpl(v4830, v4823, (uint64_t)v4824, v4825, v4826, v4827, v4828, v4829);
      WTF::fastFree(v9046, v9047, v9048, v9049, v9050, v9051, v9052, v9053);
    }
    else
    {
      *(_DWORD *)v4830 -= 2;
    }
  }
  JSC::Symbols::toStringPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4824, v4825, v4826, v4827, v4828, v4829, (uint64_t)v11263);
  v4838 = v11264;
  v11264 = 0;
  if (v4838)
  {
    if (*(_DWORD *)v4838 == 2)
    {
      WTF::StringImpl::~StringImpl(v4838, v4831, (uint64_t)v4832, v4833, v4834, v4835, v4836, v4837);
      WTF::fastFree(v9054, v9055, v9056, v9057, v9058, v9059, v9060, v9061);
    }
    else
    {
      *(_DWORD *)v4838 -= 2;
    }
  }
  JSC::Symbols::toPropertyKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toPropertyKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4832, v4833, v4834, v4835, v4836, v4837, (uint64_t)v11263);
  v4846 = v11264;
  v11264 = 0;
  if (v4846)
  {
    if (*(_DWORD *)v4846 == 2)
    {
      WTF::StringImpl::~StringImpl(v4846, v4839, (uint64_t)v4840, v4841, v4842, v4843, v4844, v4845);
      WTF::fastFree(v9062, v9063, v9064, v9065, v9066, v9067, v9068, v9069);
    }
    else
    {
      *(_DWORD *)v4846 -= 2;
    }
  }
  JSC::Symbols::toObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4840, v4841, v4842, v4843, v4844, v4845, (uint64_t)v11263);
  v4854 = v11264;
  v11264 = 0;
  if (v4854)
  {
    if (*(_DWORD *)v4854 == 2)
    {
      WTF::StringImpl::~StringImpl(v4854, v4847, (uint64_t)v4848, v4849, v4850, v4851, v4852, v4853);
      WTF::fastFree(v9070, v9071, v9072, v9073, v9074, v9075, v9076, v9077);
    }
    else
    {
      *(_DWORD *)v4854 -= 2;
    }
  }
  JSC::Symbols::toThisPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toThisPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4848, v4849, v4850, v4851, v4852, v4853, (uint64_t)v11263);
  v4862 = v11264;
  v11264 = 0;
  if (v4862)
  {
    if (*(_DWORD *)v4862 == 2)
    {
      WTF::StringImpl::~StringImpl(v4862, v4855, (uint64_t)v4856, v4857, v4858, v4859, v4860, v4861);
      WTF::fastFree(v9078, v9079, v9080, v9081, v9082, v9083, v9084, v9085);
    }
    else
    {
      *(_DWORD *)v4862 -= 2;
    }
  }
  JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4856, v4857, v4858, v4859, v4860, v4861, (uint64_t)v11263);
  v4870 = v11264;
  v11264 = 0;
  if (v4870)
  {
    if (*(_DWORD *)v4870 == 2)
    {
      WTF::StringImpl::~StringImpl(v4870, v4863, (uint64_t)v4864, v4865, v4866, v4867, v4868, v4869);
      WTF::fastFree(v9086, v9087, v9088, v9089, v9090, v9091, v9092, v9093);
    }
    else
    {
      *(_DWORD *)v4870 -= 2;
    }
  }
  JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4864, v4865, v4866, v4867, v4868, v4869, (uint64_t)v11263);
  v4878 = v11264;
  v11264 = 0;
  if (v4878)
  {
    if (*(_DWORD *)v4878 == 2)
    {
      WTF::StringImpl::~StringImpl(v4878, v4871, (uint64_t)v4872, v4873, v4874, v4875, v4876, v4877);
      WTF::fastFree(v9094, v9095, v9096, v9097, v9098, v9099, v9100, v9101);
    }
    else
    {
      *(_DWORD *)v4878 -= 2;
    }
  }
  JSC::Symbols::newArrayWithSizePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newArrayWithSizePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4872, v4873, v4874, v4875, v4876, v4877, (uint64_t)v11263);
  v4886 = v11264;
  v11264 = 0;
  if (v4886)
  {
    if (*(_DWORD *)v4886 == 2)
    {
      WTF::StringImpl::~StringImpl(v4886, v4879, (uint64_t)v4880, v4881, v4882, v4883, v4884, v4885);
      WTF::fastFree(v9102, v9103, v9104, v9105, v9106, v9107, v9108, v9109);
    }
    else
    {
      *(_DWORD *)v4886 -= 2;
    }
  }
  JSC::Symbols::newArrayWithSpeciesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newArrayWithSpeciesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4880, v4881, v4882, v4883, v4884, v4885, (uint64_t)v11263);
  v4894 = v11264;
  v11264 = 0;
  if (v4894)
  {
    if (*(_DWORD *)v4894 == 2)
    {
      WTF::StringImpl::~StringImpl(v4894, v4887, (uint64_t)v4888, v4889, v4890, v4891, v4892, v4893);
      WTF::fastFree(v9110, v9111, v9112, v9113, v9114, v9115, v9116, v9117);
    }
    else
    {
      *(_DWORD *)v4894 -= 2;
    }
  }
  JSC::Symbols::newPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4888, v4889, v4890, v4891, v4892, v4893, (uint64_t)v11263);
  v4902 = v11264;
  v11264 = 0;
  if (v4902)
  {
    if (*(_DWORD *)v4902 == 2)
    {
      WTF::StringImpl::~StringImpl(v4902, v4895, (uint64_t)v4896, v4897, v4898, v4899, v4900, v4901);
      WTF::fastFree(v9118, v9119, v9120, v9121, v9122, v9123, v9124, v9125);
    }
    else
    {
      *(_DWORD *)v4902 -= 2;
    }
  }
  JSC::Symbols::createPromisePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createPromisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4896, v4897, v4898, v4899, v4900, v4901, (uint64_t)v11263);
  v4910 = v11264;
  v11264 = 0;
  if (v4910)
  {
    if (*(_DWORD *)v4910 == 2)
    {
      WTF::StringImpl::~StringImpl(v4910, v4903, (uint64_t)v4904, v4905, v4906, v4907, v4908, v4909);
      WTF::fastFree(v9126, v9127, v9128, v9129, v9130, v9131, v9132, v9133);
    }
    else
    {
      *(_DWORD *)v4910 -= 2;
    }
  }
  JSC::Symbols::undefinedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::undefinedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4904, v4905, v4906, v4907, v4908, v4909, (uint64_t)v11263);
  v4918 = v11264;
  v11264 = 0;
  if (v4918)
  {
    if (*(_DWORD *)v4918 == 2)
    {
      WTF::StringImpl::~StringImpl(v4918, v4911, (uint64_t)v4912, v4913, v4914, v4915, v4916, v4917);
      WTF::fastFree(v9134, v9135, v9136, v9137, v9138, v9139, v9140, v9141);
    }
    else
    {
      *(_DWORD *)v4918 -= 2;
    }
  }
  JSC::Symbols::InfinityPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::InfinityPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4912, v4913, v4914, v4915, v4916, v4917, (uint64_t)v11263);
  v4926 = v11264;
  v11264 = 0;
  if (v4926)
  {
    if (*(_DWORD *)v4926 == 2)
    {
      WTF::StringImpl::~StringImpl(v4926, v4919, (uint64_t)v4920, v4921, v4922, v4923, v4924, v4925);
      WTF::fastFree(v9142, v9143, v9144, v9145, v9146, v9147, v9148, v9149);
    }
    else
    {
      *(_DWORD *)v4926 -= 2;
    }
  }
  JSC::Symbols::iterationKindKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::iterationKindKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4920, v4921, v4922, v4923, v4924, v4925, (uint64_t)v11263);
  v4934 = v11264;
  v11264 = 0;
  if (v4934)
  {
    if (*(_DWORD *)v4934 == 2)
    {
      WTF::StringImpl::~StringImpl(v4934, v4927, (uint64_t)v4928, v4929, v4930, v4931, v4932, v4933);
      WTF::fastFree(v9150, v9151, v9152, v9153, v9154, v9155, v9156, v9157);
    }
    else
    {
      *(_DWORD *)v4934 -= 2;
    }
  }
  JSC::Symbols::iterationKindValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::iterationKindValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4928, v4929, v4930, v4931, v4932, v4933, (uint64_t)v11263);
  v4942 = v11264;
  v11264 = 0;
  if (v4942)
  {
    if (*(_DWORD *)v4942 == 2)
    {
      WTF::StringImpl::~StringImpl(v4942, v4935, (uint64_t)v4936, v4937, v4938, v4939, v4940, v4941);
      WTF::fastFree(v9158, v9159, v9160, v9161, v9162, v9163, v9164, v9165);
    }
    else
    {
      *(_DWORD *)v4942 -= 2;
    }
  }
  JSC::Symbols::iterationKindEntriesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::iterationKindEntriesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4936, v4937, v4938, v4939, v4940, v4941, (uint64_t)v11263);
  v4950 = v11264;
  v11264 = 0;
  if (v4950)
  {
    if (*(_DWORD *)v4950 == 2)
    {
      WTF::StringImpl::~StringImpl(v4950, v4943, (uint64_t)v4944, v4945, v4946, v4947, v4948, v4949);
      WTF::fastFree(v9166, v9167, v9168, v9169, v9170, v9171, v9172, v9173);
    }
    else
    {
      *(_DWORD *)v4950 -= 2;
    }
  }
  JSC::Symbols::MAX_ARRAY_INDEXPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::MAX_ARRAY_INDEXPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4944, v4945, v4946, v4947, v4948, v4949, (uint64_t)v11263);
  v4958 = v11264;
  v11264 = 0;
  if (v4958)
  {
    if (*(_DWORD *)v4958 == 2)
    {
      WTF::StringImpl::~StringImpl(v4958, v4951, (uint64_t)v4952, v4953, v4954, v4955, v4956, v4957);
      WTF::fastFree(v9174, v9175, v9176, v9177, v9178, v9179, v9180, v9181);
    }
    else
    {
      *(_DWORD *)v4958 -= 2;
    }
  }
  JSC::Symbols::MAX_STRING_LENGTHPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::MAX_STRING_LENGTHPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4952, v4953, v4954, v4955, v4956, v4957, (uint64_t)v11263);
  v4966 = v11264;
  v11264 = 0;
  if (v4966)
  {
    if (*(_DWORD *)v4966 == 2)
    {
      WTF::StringImpl::~StringImpl(v4966, v4959, (uint64_t)v4960, v4961, v4962, v4963, v4964, v4965);
      WTF::fastFree(v9182, v9183, v9184, v9185, v9186, v9187, v9188, v9189);
    }
    else
    {
      *(_DWORD *)v4966 -= 2;
    }
  }
  JSC::Symbols::MAX_SAFE_INTEGERPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::MAX_SAFE_INTEGERPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4960, v4961, v4962, v4963, v4964, v4965, (uint64_t)v11263);
  v4974 = v11264;
  v11264 = 0;
  if (v4974)
  {
    if (*(_DWORD *)v4974 == 2)
    {
      WTF::StringImpl::~StringImpl(v4974, v4967, (uint64_t)v4968, v4969, v4970, v4971, v4972, v4973);
      WTF::fastFree(v9190, v9191, v9192, v9193, v9194, v9195, v9196, v9197);
    }
    else
    {
      *(_DWORD *)v4974 -= 2;
    }
  }
  JSC::Symbols::ModuleFetchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleFetchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4968, v4969, v4970, v4971, v4972, v4973, (uint64_t)v11263);
  v4982 = v11264;
  v11264 = 0;
  if (v4982)
  {
    if (*(_DWORD *)v4982 == 2)
    {
      WTF::StringImpl::~StringImpl(v4982, v4975, (uint64_t)v4976, v4977, v4978, v4979, v4980, v4981);
      WTF::fastFree(v9198, v9199, v9200, v9201, v9202, v9203, v9204, v9205);
    }
    else
    {
      *(_DWORD *)v4982 -= 2;
    }
  }
  JSC::Symbols::ModuleTranslatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleTranslatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4976, v4977, v4978, v4979, v4980, v4981, (uint64_t)v11263);
  v4990 = v11264;
  v11264 = 0;
  if (v4990)
  {
    if (*(_DWORD *)v4990 == 2)
    {
      WTF::StringImpl::~StringImpl(v4990, v4983, (uint64_t)v4984, v4985, v4986, v4987, v4988, v4989);
      WTF::fastFree(v9206, v9207, v9208, v9209, v9210, v9211, v9212, v9213);
    }
    else
    {
      *(_DWORD *)v4990 -= 2;
    }
  }
  JSC::Symbols::ModuleInstantiatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleInstantiatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4984, v4985, v4986, v4987, v4988, v4989, (uint64_t)v11263);
  v4998 = v11264;
  v11264 = 0;
  if (v4998)
  {
    if (*(_DWORD *)v4998 == 2)
    {
      WTF::StringImpl::~StringImpl(v4998, v4991, (uint64_t)v4992, v4993, v4994, v4995, v4996, v4997);
      WTF::fastFree(v9214, v9215, v9216, v9217, v9218, v9219, v9220, v9221);
    }
    else
    {
      *(_DWORD *)v4998 -= 2;
    }
  }
  JSC::Symbols::ModuleSatisfyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleSatisfyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v4992, v4993, v4994, v4995, v4996, v4997, (uint64_t)v11263);
  v5006 = v11264;
  v11264 = 0;
  if (v5006)
  {
    if (*(_DWORD *)v5006 == 2)
    {
      WTF::StringImpl::~StringImpl(v5006, v4999, (uint64_t)v5000, v5001, v5002, v5003, v5004, v5005);
      WTF::fastFree(v9222, v9223, v9224, v9225, v9226, v9227, v9228, v9229);
    }
    else
    {
      *(_DWORD *)v5006 -= 2;
    }
  }
  JSC::Symbols::ModuleLinkPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleLinkPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5000, v5001, v5002, v5003, v5004, v5005, (uint64_t)v11263);
  v5014 = v11264;
  v11264 = 0;
  if (v5014)
  {
    if (*(_DWORD *)v5014 == 2)
    {
      WTF::StringImpl::~StringImpl(v5014, v5007, (uint64_t)v5008, v5009, v5010, v5011, v5012, v5013);
      WTF::fastFree(v9230, v9231, v9232, v9233, v9234, v9235, v9236, v9237);
    }
    else
    {
      *(_DWORD *)v5014 -= 2;
    }
  }
  JSC::Symbols::ModuleReadyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ModuleReadyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5008, v5009, v5010, v5011, v5012, v5013, (uint64_t)v11263);
  v5022 = v11264;
  v11264 = 0;
  if (v5022)
  {
    if (*(_DWORD *)v5022 == 2)
    {
      WTF::StringImpl::~StringImpl(v5022, v5015, (uint64_t)v5016, v5017, v5018, v5019, v5020, v5021);
      WTF::fastFree(v9238, v9239, v9240, v9241, v9242, v9243, v9244, v9245);
    }
    else
    {
      *(_DWORD *)v5022 -= 2;
    }
  }
  JSC::Symbols::promiseRejectionRejectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseRejectionRejectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5016, v5017, v5018, v5019, v5020, v5021, (uint64_t)v11263);
  v5030 = v11264;
  v11264 = 0;
  if (v5030)
  {
    if (*(_DWORD *)v5030 == 2)
    {
      WTF::StringImpl::~StringImpl(v5030, v5023, (uint64_t)v5024, v5025, v5026, v5027, v5028, v5029);
      WTF::fastFree(v9246, v9247, v9248, v9249, v9250, v9251, v9252, v9253);
    }
    else
    {
      *(_DWORD *)v5030 -= 2;
    }
  }
  JSC::Symbols::promiseRejectionHandlePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseRejectionHandlePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5024, v5025, v5026, v5027, v5028, v5029, (uint64_t)v11263);
  v5038 = v11264;
  v11264 = 0;
  if (v5038)
  {
    if (*(_DWORD *)v5038 == 2)
    {
      WTF::StringImpl::~StringImpl(v5038, v5031, (uint64_t)v5032, v5033, v5034, v5035, v5036, v5037);
      WTF::fastFree(v9254, v9255, v9256, v9257, v9258, v9259, v9260, v9261);
    }
    else
    {
      *(_DWORD *)v5038 -= 2;
    }
  }
  JSC::Symbols::promiseStatePendingPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseStatePendingPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5032, v5033, v5034, v5035, v5036, v5037, (uint64_t)v11263);
  v5046 = v11264;
  v11264 = 0;
  if (v5046)
  {
    if (*(_DWORD *)v5046 == 2)
    {
      WTF::StringImpl::~StringImpl(v5046, v5039, (uint64_t)v5040, v5041, v5042, v5043, v5044, v5045);
      WTF::fastFree(v9262, v9263, v9264, v9265, v9266, v9267, v9268, v9269);
    }
    else
    {
      *(_DWORD *)v5046 -= 2;
    }
  }
  JSC::Symbols::promiseStateFulfilledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseStateFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5040, v5041, v5042, v5043, v5044, v5045, (uint64_t)v11263);
  v5054 = v11264;
  v11264 = 0;
  if (v5054)
  {
    if (*(_DWORD *)v5054 == 2)
    {
      WTF::StringImpl::~StringImpl(v5054, v5047, (uint64_t)v5048, v5049, v5050, v5051, v5052, v5053);
      WTF::fastFree(v9270, v9271, v9272, v9273, v9274, v9275, v9276, v9277);
    }
    else
    {
      *(_DWORD *)v5054 -= 2;
    }
  }
  JSC::Symbols::promiseStateRejectedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseStateRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5048, v5049, v5050, v5051, v5052, v5053, (uint64_t)v11263);
  v5062 = v11264;
  v11264 = 0;
  if (v5062)
  {
    if (*(_DWORD *)v5062 == 2)
    {
      WTF::StringImpl::~StringImpl(v5062, v5055, (uint64_t)v5056, v5057, v5058, v5059, v5060, v5061);
      WTF::fastFree(v9278, v9279, v9280, v9281, v9282, v9283, v9284, v9285);
    }
    else
    {
      *(_DWORD *)v5062 -= 2;
    }
  }
  JSC::Symbols::promiseStateMaskPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseStateMaskPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5056, v5057, v5058, v5059, v5060, v5061, (uint64_t)v11263);
  v5070 = v11264;
  v11264 = 0;
  if (v5070)
  {
    if (*(_DWORD *)v5070 == 2)
    {
      WTF::StringImpl::~StringImpl(v5070, v5063, (uint64_t)v5064, v5065, v5066, v5067, v5068, v5069);
      WTF::fastFree(v9286, v9287, v9288, v9289, v9290, v9291, v9292, v9293);
    }
    else
    {
      *(_DWORD *)v5070 -= 2;
    }
  }
  JSC::Symbols::promiseFlagsIsHandledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseFlagsIsHandledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5064, v5065, v5066, v5067, v5068, v5069, (uint64_t)v11263);
  v5078 = v11264;
  v11264 = 0;
  if (v5078)
  {
    if (*(_DWORD *)v5078 == 2)
    {
      WTF::StringImpl::~StringImpl(v5078, v5071, (uint64_t)v5072, v5073, v5074, v5075, v5076, v5077);
      WTF::fastFree(v9294, v9295, v9296, v9297, v9298, v9299, v9300, v9301);
    }
    else
    {
      *(_DWORD *)v5078 -= 2;
    }
  }
  JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5072, v5073, v5074, v5075, v5076, v5077, (uint64_t)v11263);
  v5086 = v11264;
  v11264 = 0;
  if (v5086)
  {
    if (*(_DWORD *)v5086 == 2)
    {
      WTF::StringImpl::~StringImpl(v5086, v5079, (uint64_t)v5080, v5081, v5082, v5083, v5084, v5085);
      WTF::fastFree(v9302, v9303, v9304, v9305, v9306, v9307, v9308, v9309);
    }
    else
    {
      *(_DWORD *)v5086 -= 2;
    }
  }
  JSC::Symbols::promiseFieldFlagsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseFieldFlagsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5080, v5081, v5082, v5083, v5084, v5085, (uint64_t)v11263);
  v5094 = v11264;
  v11264 = 0;
  if (v5094)
  {
    if (*(_DWORD *)v5094 == 2)
    {
      WTF::StringImpl::~StringImpl(v5094, v5087, (uint64_t)v5088, v5089, v5090, v5091, v5092, v5093);
      WTF::fastFree(v9310, v9311, v9312, v9313, v9314, v9315, v9316, v9317);
    }
    else
    {
      *(_DWORD *)v5094 -= 2;
    }
  }
  JSC::Symbols::promiseFieldReactionsOrResultPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::promiseFieldReactionsOrResultPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5088, v5089, v5090, v5091, v5092, v5093, (uint64_t)v11263);
  v5102 = v11264;
  v11264 = 0;
  if (v5102)
  {
    if (*(_DWORD *)v5102 == 2)
    {
      WTF::StringImpl::~StringImpl(v5102, v5095, (uint64_t)v5096, v5097, v5098, v5099, v5100, v5101);
      WTF::fastFree(v9318, v9319, v9320, v9321, v9322, v9323, v9324, v9325);
    }
    else
    {
      *(_DWORD *)v5102 -= 2;
    }
  }
  JSC::Symbols::proxyFieldTargetPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::proxyFieldTargetPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5096, v5097, v5098, v5099, v5100, v5101, (uint64_t)v11263);
  v5110 = v11264;
  v11264 = 0;
  if (v5110)
  {
    if (*(_DWORD *)v5110 == 2)
    {
      WTF::StringImpl::~StringImpl(v5110, v5103, (uint64_t)v5104, v5105, v5106, v5107, v5108, v5109);
      WTF::fastFree(v9326, v9327, v9328, v9329, v9330, v9331, v9332, v9333);
    }
    else
    {
      *(_DWORD *)v5110 -= 2;
    }
  }
  JSC::Symbols::proxyFieldHandlerPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::proxyFieldHandlerPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5104, v5105, v5106, v5107, v5108, v5109, (uint64_t)v11263);
  v5118 = v11264;
  v11264 = 0;
  if (v5118)
  {
    if (*(_DWORD *)v5118 == 2)
    {
      WTF::StringImpl::~StringImpl(v5118, v5111, (uint64_t)v5112, v5113, v5114, v5115, v5116, v5117);
      WTF::fastFree(v9334, v9335, v9336, v9337, v9338, v9339, v9340, v9341);
    }
    else
    {
      *(_DWORD *)v5118 -= 2;
    }
  }
  JSC::Symbols::generatorFieldStatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorFieldStatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5112, v5113, v5114, v5115, v5116, v5117, (uint64_t)v11263);
  v5126 = v11264;
  v11264 = 0;
  if (v5126)
  {
    if (*(_DWORD *)v5126 == 2)
    {
      WTF::StringImpl::~StringImpl(v5126, v5119, (uint64_t)v5120, v5121, v5122, v5123, v5124, v5125);
      WTF::fastFree(v9342, v9343, v9344, v9345, v9346, v9347, v9348, v9349);
    }
    else
    {
      *(_DWORD *)v5126 -= 2;
    }
  }
  JSC::Symbols::generatorFieldNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorFieldNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5120, v5121, v5122, v5123, v5124, v5125, (uint64_t)v11263);
  v5134 = v11264;
  v11264 = 0;
  if (v5134)
  {
    if (*(_DWORD *)v5134 == 2)
    {
      WTF::StringImpl::~StringImpl(v5134, v5127, (uint64_t)v5128, v5129, v5130, v5131, v5132, v5133);
      WTF::fastFree(v9350, v9351, v9352, v9353, v9354, v9355, v9356, v9357);
    }
    else
    {
      *(_DWORD *)v5134 -= 2;
    }
  }
  JSC::Symbols::generatorFieldThisPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorFieldThisPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5128, v5129, v5130, v5131, v5132, v5133, (uint64_t)v11263);
  v5142 = v11264;
  v11264 = 0;
  if (v5142)
  {
    if (*(_DWORD *)v5142 == 2)
    {
      WTF::StringImpl::~StringImpl(v5142, v5135, (uint64_t)v5136, v5137, v5138, v5139, v5140, v5141);
      WTF::fastFree(v9358, v9359, v9360, v9361, v9362, v9363, v9364, v9365);
    }
    else
    {
      *(_DWORD *)v5142 -= 2;
    }
  }
  JSC::Symbols::generatorFieldFramePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorFieldFramePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5136, v5137, v5138, v5139, v5140, v5141, (uint64_t)v11263);
  v5150 = v11264;
  v11264 = 0;
  if (v5150)
  {
    if (*(_DWORD *)v5150 == 2)
    {
      WTF::StringImpl::~StringImpl(v5150, v5143, (uint64_t)v5144, v5145, v5146, v5147, v5148, v5149);
      WTF::fastFree(v9366, v9367, v9368, v9369, v9370, v9371, v9372, v9373);
    }
    else
    {
      *(_DWORD *)v5150 -= 2;
    }
  }
  JSC::Symbols::generatorFieldContextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::generatorFieldContextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5144, v5145, v5146, v5147, v5148, v5149, (uint64_t)v11263);
  v5158 = v11264;
  v11264 = 0;
  if (v5158)
  {
    if (*(_DWORD *)v5158 == 2)
    {
      WTF::StringImpl::~StringImpl(v5158, v5151, (uint64_t)v5152, v5153, v5154, v5155, v5156, v5157);
      WTF::fastFree(v9374, v9375, v9376, v9377, v9378, v9379, v9380, v9381);
    }
    else
    {
      *(_DWORD *)v5158 -= 2;
    }
  }
  JSC::Symbols::GeneratorResumeModeNormalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeNormalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5152, v5153, v5154, v5155, v5156, v5157, (uint64_t)v11263);
  v5166 = v11264;
  v11264 = 0;
  if (v5166)
  {
    if (*(_DWORD *)v5166 == 2)
    {
      WTF::StringImpl::~StringImpl(v5166, v5159, (uint64_t)v5160, v5161, v5162, v5163, v5164, v5165);
      WTF::fastFree(v9382, v9383, v9384, v9385, v9386, v9387, v9388, v9389);
    }
    else
    {
      *(_DWORD *)v5166 -= 2;
    }
  }
  JSC::Symbols::GeneratorResumeModeThrowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeThrowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5160, v5161, v5162, v5163, v5164, v5165, (uint64_t)v11263);
  v5174 = v11264;
  v11264 = 0;
  if (v5174)
  {
    if (*(_DWORD *)v5174 == 2)
    {
      WTF::StringImpl::~StringImpl(v5174, v5167, (uint64_t)v5168, v5169, v5170, v5171, v5172, v5173);
      WTF::fastFree(v9390, v9391, v9392, v9393, v9394, v9395, v9396, v9397);
    }
    else
    {
      *(_DWORD *)v5174 -= 2;
    }
  }
  JSC::Symbols::GeneratorResumeModeReturnPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeReturnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5168, v5169, v5170, v5171, v5172, v5173, (uint64_t)v11263);
  v5182 = v11264;
  v11264 = 0;
  if (v5182)
  {
    if (*(_DWORD *)v5182 == 2)
    {
      WTF::StringImpl::~StringImpl(v5182, v5175, (uint64_t)v5176, v5177, v5178, v5179, v5180, v5181);
      WTF::fastFree(v9398, v9399, v9400, v9401, v9402, v9403, v9404, v9405);
    }
    else
    {
      *(_DWORD *)v5182 -= 2;
    }
  }
  JSC::Symbols::GeneratorStateCompletedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::GeneratorStateCompletedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5176, v5177, v5178, v5179, v5180, v5181, (uint64_t)v11263);
  v5190 = v11264;
  v11264 = 0;
  if (v5190)
  {
    if (*(_DWORD *)v5190 == 2)
    {
      WTF::StringImpl::~StringImpl(v5190, v5183, (uint64_t)v5184, v5185, v5186, v5187, v5188, v5189);
      WTF::fastFree(v9406, v9407, v9408, v9409, v9410, v9411, v9412, v9413);
    }
    else
    {
      *(_DWORD *)v5190 -= 2;
    }
  }
  JSC::Symbols::GeneratorStateExecutingPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::GeneratorStateExecutingPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5184, v5185, v5186, v5187, v5188, v5189, (uint64_t)v11263);
  v5198 = v11264;
  v11264 = 0;
  if (v5198)
  {
    if (*(_DWORD *)v5198 == 2)
    {
      WTF::StringImpl::~StringImpl(v5198, v5191, (uint64_t)v5192, v5193, v5194, v5195, v5196, v5197);
      WTF::fastFree(v9414, v9415, v9416, v9417, v9418, v9419, v9420, v9421);
    }
    else
    {
      *(_DWORD *)v5198 -= 2;
    }
  }
  JSC::Symbols::arrayIteratorFieldIndexPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIndexPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5192, v5193, v5194, v5195, v5196, v5197, (uint64_t)v11263);
  v5206 = v11264;
  v11264 = 0;
  if (v5206)
  {
    if (*(_DWORD *)v5206 == 2)
    {
      WTF::StringImpl::~StringImpl(v5206, v5199, (uint64_t)v5200, v5201, v5202, v5203, v5204, v5205);
      WTF::fastFree(v9422, v9423, v9424, v9425, v9426, v9427, v9428, v9429);
    }
    else
    {
      *(_DWORD *)v5206 -= 2;
    }
  }
  JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5200, v5201, v5202, v5203, v5204, v5205, (uint64_t)v11263);
  v5214 = v11264;
  v11264 = 0;
  if (v5214)
  {
    if (*(_DWORD *)v5214 == 2)
    {
      WTF::StringImpl::~StringImpl(v5214, v5207, (uint64_t)v5208, v5209, v5210, v5211, v5212, v5213);
      WTF::fastFree(v9430, v9431, v9432, v9433, v9434, v9435, v9436, v9437);
    }
    else
    {
      *(_DWORD *)v5214 -= 2;
    }
  }
  JSC::Symbols::arrayIteratorFieldKindPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldKindPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5208, v5209, v5210, v5211, v5212, v5213, (uint64_t)v11263);
  v5222 = v11264;
  v11264 = 0;
  if (v5222)
  {
    if (*(_DWORD *)v5222 == 2)
    {
      WTF::StringImpl::~StringImpl(v5222, v5215, (uint64_t)v5216, v5217, v5218, v5219, v5220, v5221);
      WTF::fastFree(v9438, v9439, v9440, v9441, v9442, v9443, v9444, v9445);
    }
    else
    {
      *(_DWORD *)v5222 -= 2;
    }
  }
  JSC::Symbols::mapIteratorFieldEntryPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldEntryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5216, v5217, v5218, v5219, v5220, v5221, (uint64_t)v11263);
  v5230 = v11264;
  v11264 = 0;
  if (v5230)
  {
    if (*(_DWORD *)v5230 == 2)
    {
      WTF::StringImpl::~StringImpl(v5230, v5223, (uint64_t)v5224, v5225, v5226, v5227, v5228, v5229);
      WTF::fastFree(v9446, v9447, v9448, v9449, v9450, v9451, v9452, v9453);
    }
    else
    {
      *(_DWORD *)v5230 -= 2;
    }
  }
  JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5224, v5225, v5226, v5227, v5228, v5229, (uint64_t)v11263);
  v5238 = v11264;
  v11264 = 0;
  if (v5238)
  {
    if (*(_DWORD *)v5238 == 2)
    {
      WTF::StringImpl::~StringImpl(v5238, v5231, (uint64_t)v5232, v5233, v5234, v5235, v5236, v5237);
      WTF::fastFree(v9454, v9455, v9456, v9457, v9458, v9459, v9460, v9461);
    }
    else
    {
      *(_DWORD *)v5238 -= 2;
    }
  }
  JSC::Symbols::mapIteratorFieldStoragePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldStoragePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5232, v5233, v5234, v5235, v5236, v5237, (uint64_t)v11263);
  v5246 = v11264;
  v11264 = 0;
  if (v5246)
  {
    if (*(_DWORD *)v5246 == 2)
    {
      WTF::StringImpl::~StringImpl(v5246, v5239, (uint64_t)v5240, v5241, v5242, v5243, v5244, v5245);
      WTF::fastFree(v9462, v9463, v9464, v9465, v9466, v9467, v9468, v9469);
    }
    else
    {
      *(_DWORD *)v5246 -= 2;
    }
  }
  JSC::Symbols::mapIteratorFieldKindPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldKindPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5240, v5241, v5242, v5243, v5244, v5245, (uint64_t)v11263);
  v5254 = v11264;
  v11264 = 0;
  if (v5254)
  {
    if (*(_DWORD *)v5254 == 2)
    {
      WTF::StringImpl::~StringImpl(v5254, v5247, (uint64_t)v5248, v5249, v5250, v5251, v5252, v5253);
      WTF::fastFree(v9470, v9471, v9472, v9473, v9474, v9475, v9476, v9477);
    }
    else
    {
      *(_DWORD *)v5254 -= 2;
    }
  }
  JSC::Symbols::setIteratorFieldEntryPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldEntryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5248, v5249, v5250, v5251, v5252, v5253, (uint64_t)v11263);
  v5262 = v11264;
  v11264 = 0;
  if (v5262)
  {
    if (*(_DWORD *)v5262 == 2)
    {
      WTF::StringImpl::~StringImpl(v5262, v5255, (uint64_t)v5256, v5257, v5258, v5259, v5260, v5261);
      WTF::fastFree(v9478, v9479, v9480, v9481, v9482, v9483, v9484, v9485);
    }
    else
    {
      *(_DWORD *)v5262 -= 2;
    }
  }
  JSC::Symbols::setIteratorFieldIteratedObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldIteratedObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5256, v5257, v5258, v5259, v5260, v5261, (uint64_t)v11263);
  v5270 = v11264;
  v11264 = 0;
  if (v5270)
  {
    if (*(_DWORD *)v5270 == 2)
    {
      WTF::StringImpl::~StringImpl(v5270, v5263, (uint64_t)v5264, v5265, v5266, v5267, v5268, v5269);
      WTF::fastFree(v9486, v9487, v9488, v9489, v9490, v9491, v9492, v9493);
    }
    else
    {
      *(_DWORD *)v5270 -= 2;
    }
  }
  JSC::Symbols::setIteratorFieldStoragePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldStoragePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5264, v5265, v5266, v5267, v5268, v5269, (uint64_t)v11263);
  v5278 = v11264;
  v11264 = 0;
  if (v5278)
  {
    if (*(_DWORD *)v5278 == 2)
    {
      WTF::StringImpl::~StringImpl(v5278, v5271, (uint64_t)v5272, v5273, v5274, v5275, v5276, v5277);
      WTF::fastFree(v9494, v9495, v9496, v9497, v9498, v9499, v9500, v9501);
    }
    else
    {
      *(_DWORD *)v5278 -= 2;
    }
  }
  JSC::Symbols::setIteratorFieldKindPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldKindPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5272, v5273, v5274, v5275, v5276, v5277, (uint64_t)v11263);
  v5286 = v11264;
  v11264 = 0;
  if (v5286)
  {
    if (*(_DWORD *)v5286 == 2)
    {
      WTF::StringImpl::~StringImpl(v5286, v5279, (uint64_t)v5280, v5281, v5282, v5283, v5284, v5285);
      WTF::fastFree(v9502, v9503, v9504, v9505, v9506, v9507, v9508, v9509);
    }
    else
    {
      *(_DWORD *)v5286 -= 2;
    }
  }
  JSC::Symbols::stringIteratorFieldIndexPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIndexPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5280, v5281, v5282, v5283, v5284, v5285, (uint64_t)v11263);
  v5294 = v11264;
  v11264 = 0;
  if (v5294)
  {
    if (*(_DWORD *)v5294 == 2)
    {
      WTF::StringImpl::~StringImpl(v5294, v5287, (uint64_t)v5288, v5289, v5290, v5291, v5292, v5293);
      WTF::fastFree(v9510, v9511, v9512, v9513, v9514, v9515, v9516, v9517);
    }
    else
    {
      *(_DWORD *)v5294 -= 2;
    }
  }
  JSC::Symbols::stringIteratorFieldIteratedStringPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIteratedStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5288, v5289, v5290, v5291, v5292, v5293, (uint64_t)v11263);
  v5302 = v11264;
  v11264 = 0;
  if (v5302)
  {
    if (*(_DWORD *)v5302 == 2)
    {
      WTF::StringImpl::~StringImpl(v5302, v5295, (uint64_t)v5296, v5297, v5298, v5299, v5300, v5301);
      WTF::fastFree(v9518, v9519, v9520, v9521, v9522, v9523, v9524, v9525);
    }
    else
    {
      *(_DWORD *)v5302 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5296, v5297, v5298, v5299, v5300, v5301, (uint64_t)v11263);
  v5310 = v11264;
  v11264 = 0;
  if (v5310)
  {
    if (*(_DWORD *)v5310 == 2)
    {
      WTF::StringImpl::~StringImpl(v5310, v5303, (uint64_t)v5304, v5305, v5306, v5307, v5308, v5309);
      WTF::fastFree(v9526, v9527, v9528, v9529, v9530, v9531, v9532, v9533);
    }
    else
    {
      *(_DWORD *)v5310 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5304, v5305, v5306, v5307, v5308, v5309, (uint64_t)v11263);
  v5318 = v11264;
  v11264 = 0;
  if (v5318)
  {
    if (*(_DWORD *)v5318 == 2)
    {
      WTF::StringImpl::~StringImpl(v5318, v5311, (uint64_t)v5312, v5313, v5314, v5315, v5316, v5317);
      WTF::fastFree(v9534, v9535, v9536, v9537, v9538, v9539, v9540, v9541);
    }
    else
    {
      *(_DWORD *)v5318 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5312, v5313, v5314, v5315, v5316, v5317, (uint64_t)v11263);
  v5326 = v11264;
  v11264 = 0;
  if (v5326)
  {
    if (*(_DWORD *)v5326 == 2)
    {
      WTF::StringImpl::~StringImpl(v5326, v5319, (uint64_t)v5320, v5321, v5322, v5323, v5324, v5325);
      WTF::fastFree(v9542, v9543, v9544, v9545, v9546, v9547, v9548, v9549);
    }
    else
    {
      *(_DWORD *)v5326 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorStateCompletedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateCompletedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5320, v5321, v5322, v5323, v5324, v5325, (uint64_t)v11263);
  v5334 = v11264;
  v11264 = 0;
  if (v5334)
  {
    if (*(_DWORD *)v5334 == 2)
    {
      WTF::StringImpl::~StringImpl(v5334, v5327, (uint64_t)v5328, v5329, v5330, v5331, v5332, v5333);
      WTF::fastFree(v9550, v9551, v9552, v9553, v9554, v9555, v9556, v9557);
    }
    else
    {
      *(_DWORD *)v5334 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorStateExecutingPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateExecutingPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5328, v5329, v5330, v5331, v5332, v5333, (uint64_t)v11263);
  v5342 = v11264;
  v11264 = 0;
  if (v5342)
  {
    if (*(_DWORD *)v5342 == 2)
    {
      WTF::StringImpl::~StringImpl(v5342, v5335, (uint64_t)v5336, v5337, v5338, v5339, v5340, v5341);
      WTF::fastFree(v9558, v9559, v9560, v9561, v9562, v9563, v9564, v9565);
    }
    else
    {
      *(_DWORD *)v5342 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5336, v5337, v5338, v5339, v5340, v5341, (uint64_t)v11263);
  v5350 = v11264;
  v11264 = 0;
  if (v5350)
  {
    if (*(_DWORD *)v5350 == 2)
    {
      WTF::StringImpl::~StringImpl(v5350, v5343, (uint64_t)v5344, v5345, v5346, v5347, v5348, v5349);
      WTF::fastFree(v9566, v9567, v9568, v9569, v9570, v9571, v9572, v9573);
    }
    else
    {
      *(_DWORD *)v5350 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5344, v5345, v5346, v5347, v5348, v5349, (uint64_t)v11263);
  v5358 = v11264;
  v11264 = 0;
  if (v5358)
  {
    if (*(_DWORD *)v5358 == 2)
    {
      WTF::StringImpl::~StringImpl(v5358, v5351, (uint64_t)v5352, v5353, v5354, v5355, v5356, v5357);
      WTF::fastFree(v9574, v9575, v9576, v9577, v9578, v9579, v9580, v9581);
    }
    else
    {
      *(_DWORD *)v5358 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5352, v5353, v5354, v5355, v5356, v5357, (uint64_t)v11263);
  v5366 = v11264;
  v11264 = 0;
  if (v5366)
  {
    if (*(_DWORD *)v5366 == 2)
    {
      WTF::StringImpl::~StringImpl(v5366, v5359, (uint64_t)v5360, v5361, v5362, v5363, v5364, v5365);
      WTF::fastFree(v9582, v9583, v9584, v9585, v9586, v9587, v9588, v9589);
    }
    else
    {
      *(_DWORD *)v5366 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5360, v5361, v5362, v5363, v5364, v5365, (uint64_t)v11263);
  v5374 = v11264;
  v11264 = 0;
  if (v5374)
  {
    if (*(_DWORD *)v5374 == 2)
    {
      WTF::StringImpl::~StringImpl(v5374, v5367, (uint64_t)v5368, v5369, v5370, v5371, v5372, v5373);
      WTF::fastFree(v9590, v9591, v9592, v9593, v9594, v9595, v9596, v9597);
    }
    else
    {
      *(_DWORD *)v5374 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5368, v5369, v5370, v5371, v5372, v5373, (uint64_t)v11263);
  v5382 = v11264;
  v11264 = 0;
  if (v5382)
  {
    if (*(_DWORD *)v5382 == 2)
    {
      WTF::StringImpl::~StringImpl(v5382, v5375, (uint64_t)v5376, v5377, v5378, v5379, v5380, v5381);
      WTF::fastFree(v9598, v9599, v9600, v9601, v9602, v9603, v9604, v9605);
    }
    else
    {
      *(_DWORD *)v5382 -= 2;
    }
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5376, v5377, v5378, v5379, v5380, v5381, (uint64_t)v11263);
  v5390 = v11264;
  v11264 = 0;
  if (v5390)
  {
    if (*(_DWORD *)v5390 == 2)
    {
      WTF::StringImpl::~StringImpl(v5390, v5383, (uint64_t)v5384, v5385, v5386, v5387, v5388, v5389);
      WTF::fastFree(v9606, v9607, v9608, v9609, v9610, v9611, v9612, v9613);
    }
    else
    {
      *(_DWORD *)v5390 -= 2;
    }
  }
  JSC::Symbols::abstractModuleRecordFieldStatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::abstractModuleRecordFieldStatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5384, v5385, v5386, v5387, v5388, v5389, (uint64_t)v11263);
  v5398 = v11264;
  v11264 = 0;
  if (v5398)
  {
    if (*(_DWORD *)v5398 == 2)
    {
      WTF::StringImpl::~StringImpl(v5398, v5391, (uint64_t)v5392, v5393, v5394, v5395, v5396, v5397);
      WTF::fastFree(v9614, v9615, v9616, v9617, v9618, v9619, v9620, v9621);
    }
    else
    {
      *(_DWORD *)v5398 -= 2;
    }
  }
  JSC::Symbols::orderedHashTableSentinelPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::orderedHashTableSentinelPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5392, v5393, v5394, v5395, v5396, v5397, (uint64_t)v11263);
  v5406 = v11264;
  v11264 = 0;
  if (v5406)
  {
    if (*(_DWORD *)v5406 == 2)
    {
      WTF::StringImpl::~StringImpl(v5406, v5399, (uint64_t)v5400, v5401, v5402, v5403, v5404, v5405);
      WTF::fastFree(v9622, v9623, v9624, v9625, v9626, v9627, v9628, v9629);
    }
    else
    {
      *(_DWORD *)v5406 -= 2;
    }
  }
  JSC::Symbols::addPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::addPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5400, v5401, v5402, v5403, v5404, v5405, (uint64_t)v11263);
  v5414 = v11264;
  v11264 = 0;
  if (v5414)
  {
    if (*(_DWORD *)v5414 == 2)
    {
      WTF::StringImpl::~StringImpl(v5414, v5407, (uint64_t)v5408, v5409, v5410, v5411, v5412, v5413);
      WTF::fastFree(v9630, v9631, v9632, v9633, v9634, v9635, v9636, v9637);
    }
    else
    {
      *(_DWORD *)v5414 -= 2;
    }
  }
  JSC::Symbols::applyFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::applyFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5408, v5409, v5410, v5411, v5412, v5413, (uint64_t)v11263);
  v5422 = v11264;
  v11264 = 0;
  if (v5422)
  {
    if (*(_DWORD *)v5422 == 2)
    {
      WTF::StringImpl::~StringImpl(v5422, v5415, (uint64_t)v5416, v5417, v5418, v5419, v5420, v5421);
      WTF::fastFree(v9638, v9639, v9640, v9641, v9642, v9643, v9644, v9645);
    }
    else
    {
      *(_DWORD *)v5422 -= 2;
    }
  }
  JSC::Symbols::assertPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::assertPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5416, v5417, v5418, v5419, v5420, v5421, (uint64_t)v11263);
  v5430 = v11264;
  v11264 = 0;
  if (v5430)
  {
    if (*(_DWORD *)v5430 == 2)
    {
      WTF::StringImpl::~StringImpl(v5430, v5423, (uint64_t)v5424, v5425, v5426, v5427, v5428, v5429);
      WTF::fastFree(v9646, v9647, v9648, v9649, v9650, v9651, v9652, v9653);
    }
    else
    {
      *(_DWORD *)v5430 -= 2;
    }
  }
  JSC::Symbols::callFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::callFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5424, v5425, v5426, v5427, v5428, v5429, (uint64_t)v11263);
  v5438 = v11264;
  v11264 = 0;
  if (v5438)
  {
    if (*(_DWORD *)v5438 == 2)
    {
      WTF::StringImpl::~StringImpl(v5438, v5431, (uint64_t)v5432, v5433, v5434, v5435, v5436, v5437);
      WTF::fastFree(v9654, v9655, v9656, v9657, v9658, v9659, v9660, v9661);
    }
    else
    {
      *(_DWORD *)v5438 -= 2;
    }
  }
  JSC::Symbols::charCodeAtPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::charCodeAtPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5432, v5433, v5434, v5435, v5436, v5437, (uint64_t)v11263);
  v5446 = v11264;
  v11264 = 0;
  if (v5446)
  {
    if (*(_DWORD *)v5446 == 2)
    {
      WTF::StringImpl::~StringImpl(v5446, v5439, (uint64_t)v5440, v5441, v5442, v5443, v5444, v5445);
      WTF::fastFree(v9662, v9663, v9664, v9665, v9666, v9667, v9668, v9669);
    }
    else
    {
      *(_DWORD *)v5446 -= 2;
    }
  }
  JSC::Symbols::executorPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::executorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5440, v5441, v5442, v5443, v5444, v5445, (uint64_t)v11263);
  v5454 = v11264;
  v11264 = 0;
  if (v5454)
  {
    if (*(_DWORD *)v5454 == 2)
    {
      WTF::StringImpl::~StringImpl(v5454, v5447, (uint64_t)v5448, v5449, v5450, v5451, v5452, v5453);
      WTF::fastFree(v9670, v9671, v9672, v9673, v9674, v9675, v9676, v9677);
    }
    else
    {
      *(_DWORD *)v5454 -= 2;
    }
  }
  JSC::Symbols::isViewPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::isViewPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5448, v5449, v5450, v5451, v5452, v5453, (uint64_t)v11263);
  v5462 = v11264;
  v11264 = 0;
  if (v5462)
  {
    if (*(_DWORD *)v5462 == 2)
    {
      WTF::StringImpl::~StringImpl(v5462, v5455, (uint64_t)v5456, v5457, v5458, v5459, v5460, v5461);
      WTF::fastFree(v9678, v9679, v9680, v9681, v9682, v9683, v9684, v9685);
    }
    else
    {
      *(_DWORD *)v5462 -= 2;
    }
  }
  JSC::Symbols::iteratedObjectPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::iteratedObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5456, v5457, v5458, v5459, v5460, v5461, (uint64_t)v11263);
  v5470 = v11264;
  v11264 = 0;
  if (v5470)
  {
    if (*(_DWORD *)v5470 == 2)
    {
      WTF::StringImpl::~StringImpl(v5470, v5463, (uint64_t)v5464, v5465, v5466, v5467, v5468, v5469);
      WTF::fastFree(v9686, v9687, v9688, v9689, v9690, v9691, v9692, v9693);
    }
    else
    {
      *(_DWORD *)v5470 -= 2;
    }
  }
  JSC::Symbols::iteratedStringPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::iteratedStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5464, v5465, v5466, v5467, v5468, v5469, (uint64_t)v11263);
  v5478 = v11264;
  v11264 = 0;
  if (v5478)
  {
    if (*(_DWORD *)v5478 == 2)
    {
      WTF::StringImpl::~StringImpl(v5478, v5471, (uint64_t)v5472, v5473, v5474, v5475, v5476, v5477);
      WTF::fastFree(v9694, v9695, v9696, v9697, v9698, v9699, v9700, v9701);
    }
    else
    {
      *(_DWORD *)v5478 -= 2;
    }
  }
  JSC::Symbols::promisePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::promisePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5472, v5473, v5474, v5475, v5476, v5477, (uint64_t)v11263);
  v5486 = v11264;
  v11264 = 0;
  if (v5486)
  {
    if (*(_DWORD *)v5486 == 2)
    {
      WTF::StringImpl::~StringImpl(v5486, v5479, (uint64_t)v5480, v5481, v5482, v5483, v5484, v5485);
      WTF::fastFree(v9702, v9703, v9704, v9705, v9706, v9707, v9708, v9709);
    }
    else
    {
      *(_DWORD *)v5486 -= 2;
    }
  }
  JSC::Symbols::promiseOrCapabilityPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::promiseOrCapabilityPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5480, v5481, v5482, v5483, v5484, v5485, (uint64_t)v11263);
  v5494 = v11264;
  v11264 = 0;
  if (v5494)
  {
    if (*(_DWORD *)v5494 == 2)
    {
      WTF::StringImpl::~StringImpl(v5494, v5487, (uint64_t)v5488, v5489, v5490, v5491, v5492, v5493);
      WTF::fastFree(v9710, v9711, v9712, v9713, v9714, v9715, v9716, v9717);
    }
    else
    {
      *(_DWORD *)v5494 -= 2;
    }
  }
  JSC::Symbols::ObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5488, v5489, v5490, v5491, v5492, v5493, (uint64_t)v11263);
  v5502 = v11264;
  v11264 = 0;
  if (v5502)
  {
    if (*(_DWORD *)v5502 == 2)
    {
      WTF::StringImpl::~StringImpl(v5502, v5495, (uint64_t)v5496, v5497, v5498, v5499, v5500, v5501);
      WTF::fastFree(v9718, v9719, v9720, v9721, v9722, v9723, v9724, v9725);
    }
    else
    {
      *(_DWORD *)v5502 -= 2;
    }
  }
  JSC::Symbols::NumberPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::NumberPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5496, v5497, v5498, v5499, v5500, v5501, (uint64_t)v11263);
  v5510 = v11264;
  v11264 = 0;
  if (v5510)
  {
    if (*(_DWORD *)v5510 == 2)
    {
      WTF::StringImpl::~StringImpl(v5510, v5503, (uint64_t)v5504, v5505, v5506, v5507, v5508, v5509);
      WTF::fastFree(v9726, v9727, v9728, v9729, v9730, v9731, v9732, v9733);
    }
    else
    {
      *(_DWORD *)v5510 -= 2;
    }
  }
  JSC::Symbols::ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5504, v5505, v5506, v5507, v5508, v5509, (uint64_t)v11263);
  v5518 = v11264;
  v11264 = 0;
  if (v5518)
  {
    if (*(_DWORD *)v5518 == 2)
    {
      WTF::StringImpl::~StringImpl(v5518, v5511, (uint64_t)v5512, v5513, v5514, v5515, v5516, v5517);
      WTF::fastFree(v9734, v9735, v9736, v9737, v9738, v9739, v9740, v9741);
    }
    else
    {
      *(_DWORD *)v5518 -= 2;
    }
  }
  JSC::Symbols::ArrayBufferPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::ArrayBufferPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5512, v5513, v5514, v5515, v5516, v5517, (uint64_t)v11263);
  v5526 = v11264;
  v11264 = 0;
  if (v5526)
  {
    if (*(_DWORD *)v5526 == 2)
    {
      WTF::StringImpl::~StringImpl(v5526, v5519, (uint64_t)v5520, v5521, v5522, v5523, v5524, v5525);
      WTF::fastFree(v9742, v9743, v9744, v9745, v9746, v9747, v9748, v9749);
    }
    else
    {
      *(_DWORD *)v5526 -= 2;
    }
  }
  JSC::Symbols::ShadowRealmPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::ShadowRealmPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5520, v5521, v5522, v5523, v5524, v5525, (uint64_t)v11263);
  v5534 = v11264;
  v11264 = 0;
  if (v5534)
  {
    if (*(_DWORD *)v5534 == 2)
    {
      WTF::StringImpl::~StringImpl(v5534, v5527, (uint64_t)v5528, v5529, v5530, v5531, v5532, v5533);
      WTF::fastFree(v9750, v9751, v9752, v9753, v9754, v9755, v9756, v9757);
    }
    else
    {
      *(_DWORD *)v5534 -= 2;
    }
  }
  JSC::Symbols::RegExpPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::RegExpPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5528, v5529, v5530, v5531, v5532, v5533, (uint64_t)v11263);
  v5542 = v11264;
  v11264 = 0;
  if (v5542)
  {
    if (*(_DWORD *)v5542 == 2)
    {
      WTF::StringImpl::~StringImpl(v5542, v5535, (uint64_t)v5536, v5537, v5538, v5539, v5540, v5541);
      WTF::fastFree(v9758, v9759, v9760, v9761, v9762, v9763, v9764, v9765);
    }
    else
    {
      *(_DWORD *)v5542 -= 2;
    }
  }
  JSC::Symbols::minPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::minPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5536, v5537, v5538, v5539, v5540, v5541, (uint64_t)v11263);
  v5550 = v11264;
  v11264 = 0;
  if (v5550)
  {
    if (*(_DWORD *)v5550 == 2)
    {
      WTF::StringImpl::~StringImpl(v5550, v5543, (uint64_t)v5544, v5545, v5546, v5547, v5548, v5549);
      WTF::fastFree(v9766, v9767, v9768, v9769, v9770, v9771, v9772, v9773);
    }
    else
    {
      *(_DWORD *)v5550 -= 2;
    }
  }
  JSC::Symbols::createPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5544, v5545, v5546, v5547, v5548, v5549, (uint64_t)v11263);
  v5558 = v11264;
  v11264 = 0;
  if (v5558)
  {
    if (*(_DWORD *)v5558 == 2)
    {
      WTF::StringImpl::~StringImpl(v5558, v5551, (uint64_t)v5552, v5553, v5554, v5555, v5556, v5557);
      WTF::fastFree(v9774, v9775, v9776, v9777, v9778, v9779, v9780, v9781);
    }
    else
    {
      *(_DWORD *)v5558 -= 2;
    }
  }
  JSC::Symbols::definePropertyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::definePropertyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5552, v5553, v5554, v5555, v5556, v5557, (uint64_t)v11263);
  v5566 = v11264;
  v11264 = 0;
  if (v5566)
  {
    if (*(_DWORD *)v5566 == 2)
    {
      WTF::StringImpl::~StringImpl(v5566, v5559, (uint64_t)v5560, v5561, v5562, v5563, v5564, v5565);
      WTF::fastFree(v9782, v9783, v9784, v9785, v9786, v9787, v9788, v9789);
    }
    else
    {
      *(_DWORD *)v5566 -= 2;
    }
  }
  JSC::Symbols::defaultPromiseThenPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::defaultPromiseThenPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5560, v5561, v5562, v5563, v5564, v5565, (uint64_t)v11263);
  v5574 = v11264;
  v11264 = 0;
  if (v5574)
  {
    if (*(_DWORD *)v5574 == 2)
    {
      WTF::StringImpl::~StringImpl(v5574, v5567, (uint64_t)v5568, v5569, v5570, v5571, v5572, v5573);
      WTF::fastFree(v9790, v9791, v9792, v9793, v9794, v9795, v9796, v9797);
    }
    else
    {
      *(_DWORD *)v5574 -= 2;
    }
  }
  JSC::Symbols::SetPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::SetPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5568, v5569, v5570, v5571, v5572, v5573, (uint64_t)v11263);
  v5582 = v11264;
  v11264 = 0;
  if (v5582)
  {
    if (*(_DWORD *)v5582 == 2)
    {
      WTF::StringImpl::~StringImpl(v5582, v5575, (uint64_t)v5576, v5577, v5578, v5579, v5580, v5581);
      WTF::fastFree(v9798, v9799, v9800, v9801, v9802, v9803, v9804, v9805);
    }
    else
    {
      *(_DWORD *)v5582 -= 2;
    }
  }
  JSC::Symbols::MapPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::MapPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5576, v5577, v5578, v5579, v5580, v5581, (uint64_t)v11263);
  v5590 = v11264;
  v11264 = 0;
  if (v5590)
  {
    if (*(_DWORD *)v5590 == 2)
    {
      WTF::StringImpl::~StringImpl(v5590, v5583, (uint64_t)v5584, v5585, v5586, v5587, v5588, v5589);
      WTF::fastFree(v9806, v9807, v9808, v9809, v9810, v9811, v9812, v9813);
    }
    else
    {
      *(_DWORD *)v5590 -= 2;
    }
  }
  JSC::Symbols::throwTypeErrorFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::throwTypeErrorFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5584, v5585, v5586, v5587, v5588, v5589, (uint64_t)v11263);
  v5598 = v11264;
  v11264 = 0;
  if (v5598)
  {
    if (*(_DWORD *)v5598 == 2)
    {
      WTF::StringImpl::~StringImpl(v5598, v5591, (uint64_t)v5592, v5593, v5594, v5595, v5596, v5597);
      WTF::fastFree(v9814, v9815, v9816, v9817, v9818, v9819, v9820, v9821);
    }
    else
    {
      *(_DWORD *)v5598 -= 2;
    }
  }
  JSC::Symbols::typedArrayLengthPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::typedArrayLengthPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5592, v5593, v5594, v5595, v5596, v5597, (uint64_t)v11263);
  v5606 = v11264;
  v11264 = 0;
  if (v5606)
  {
    if (*(_DWORD *)v5606 == 2)
    {
      WTF::StringImpl::~StringImpl(v5606, v5599, (uint64_t)v5600, v5601, v5602, v5603, v5604, v5605);
      WTF::fastFree(v9822, v9823, v9824, v9825, v9826, v9827, v9828, v9829);
    }
    else
    {
      *(_DWORD *)v5606 -= 2;
    }
  }
  JSC::Symbols::typedArrayContentTypePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::typedArrayContentTypePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5600, v5601, v5602, v5603, v5604, v5605, (uint64_t)v11263);
  v5614 = v11264;
  v11264 = 0;
  if (v5614)
  {
    if (*(_DWORD *)v5614 == 2)
    {
      WTF::StringImpl::~StringImpl(v5614, v5607, (uint64_t)v5608, v5609, v5610, v5611, v5612, v5613);
      WTF::fastFree(v9830, v9831, v9832, v9833, v9834, v9835, v9836, v9837);
    }
    else
    {
      *(_DWORD *)v5614 -= 2;
    }
  }
  JSC::Symbols::typedArrayGetOriginalConstructorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::typedArrayGetOriginalConstructorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5608, v5609, v5610, v5611, v5612, v5613, (uint64_t)v11263);
  v5622 = v11264;
  v11264 = 0;
  if (v5622)
  {
    if (*(_DWORD *)v5622 == 2)
    {
      WTF::StringImpl::~StringImpl(v5622, v5615, (uint64_t)v5616, v5617, v5618, v5619, v5620, v5621);
      WTF::fastFree(v9838, v9839, v9840, v9841, v9842, v9843, v9844, v9845);
    }
    else
    {
      *(_DWORD *)v5622 -= 2;
    }
  }
  JSC::Symbols::BuiltinLogPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::BuiltinLogPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5616, v5617, v5618, v5619, v5620, v5621, (uint64_t)v11263);
  v5630 = v11264;
  v11264 = 0;
  if (v5630)
  {
    if (*(_DWORD *)v5630 == 2)
    {
      WTF::StringImpl::~StringImpl(v5630, v5623, (uint64_t)v5624, v5625, v5626, v5627, v5628, v5629);
      WTF::fastFree(v9846, v9847, v9848, v9849, v9850, v9851, v9852, v9853);
    }
    else
    {
      *(_DWORD *)v5630 -= 2;
    }
  }
  JSC::Symbols::BuiltinDescribePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::BuiltinDescribePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5624, v5625, v5626, v5627, v5628, v5629, (uint64_t)v11263);
  v5638 = v11264;
  v11264 = 0;
  if (v5638)
  {
    if (*(_DWORD *)v5638 == 2)
    {
      WTF::StringImpl::~StringImpl(v5638, v5631, (uint64_t)v5632, v5633, v5634, v5635, v5636, v5637);
      WTF::fastFree(v9854, v9855, v9856, v9857, v9858, v9859, v9860, v9861);
    }
    else
    {
      *(_DWORD *)v5638 -= 2;
    }
  }
  JSC::Symbols::homeObjectPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5632, v5633, v5634, v5635, v5636, v5637, (uint64_t)v11263);
  v5646 = v11264;
  v11264 = 0;
  if (v5646)
  {
    if (*(_DWORD *)v5646 == 2)
    {
      WTF::StringImpl::~StringImpl(v5646, v5639, (uint64_t)v5640, v5641, v5642, v5643, v5644, v5645);
      WTF::fastFree(v9862, v9863, v9864, v9865, v9866, v9867, v9868, v9869);
    }
    else
    {
      *(_DWORD *)v5646 -= 2;
    }
  }
  JSC::Symbols::enqueueJobPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::enqueueJobPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5640, v5641, v5642, v5643, v5644, v5645, (uint64_t)v11263);
  v5654 = v11264;
  v11264 = 0;
  if (v5654)
  {
    if (*(_DWORD *)v5654 == 2)
    {
      WTF::StringImpl::~StringImpl(v5654, v5647, (uint64_t)v5648, v5649, v5650, v5651, v5652, v5653);
      WTF::fastFree(v9870, v9871, v9872, v9873, v9874, v9875, v9876, v9877);
    }
    else
    {
      *(_DWORD *)v5654 -= 2;
    }
  }
  JSC::Symbols::hostPromiseRejectionTrackerPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hostPromiseRejectionTrackerPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5648, v5649, v5650, v5651, v5652, v5653, (uint64_t)v11263);
  v5662 = v11264;
  v11264 = 0;
  if (v5662)
  {
    if (*(_DWORD *)v5662 == 2)
    {
      WTF::StringImpl::~StringImpl(v5662, v5655, (uint64_t)v5656, v5657, v5658, v5659, v5660, v5661);
      WTF::fastFree(v9878, v9879, v9880, v9881, v9882, v9883, v9884, v9885);
    }
    else
    {
      *(_DWORD *)v5662 -= 2;
    }
  }
  JSC::Symbols::onFulfilledPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::onFulfilledPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5656, v5657, v5658, v5659, v5660, v5661, (uint64_t)v11263);
  v5670 = v11264;
  v11264 = 0;
  if (v5670)
  {
    if (*(_DWORD *)v5670 == 2)
    {
      WTF::StringImpl::~StringImpl(v5670, v5663, (uint64_t)v5664, v5665, v5666, v5667, v5668, v5669);
      WTF::fastFree(v9886, v9887, v9888, v9889, v9890, v9891, v9892, v9893);
    }
    else
    {
      *(_DWORD *)v5670 -= 2;
    }
  }
  JSC::Symbols::onRejectedPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::onRejectedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5664, v5665, v5666, v5667, v5668, v5669, (uint64_t)v11263);
  v5678 = v11264;
  v11264 = 0;
  if (v5678)
  {
    if (*(_DWORD *)v5678 == 2)
    {
      WTF::StringImpl::~StringImpl(v5678, v5671, (uint64_t)v5672, v5673, v5674, v5675, v5676, v5677);
      WTF::fastFree(v9894, v9895, v9896, v9897, v9898, v9899, v9900, v9901);
    }
    else
    {
      *(_DWORD *)v5678 -= 2;
    }
  }
  JSC::Symbols::pushPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::pushPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5672, v5673, v5674, v5675, v5676, v5677, (uint64_t)v11263);
  v5686 = v11264;
  v11264 = 0;
  if (v5686)
  {
    if (*(_DWORD *)v5686 == 2)
    {
      WTF::StringImpl::~StringImpl(v5686, v5679, (uint64_t)v5680, v5681, v5682, v5683, v5684, v5685);
      WTF::fastFree(v9902, v9903, v9904, v9905, v9906, v9907, v9908, v9909);
    }
    else
    {
      *(_DWORD *)v5686 -= 2;
    }
  }
  JSC::Symbols::repeatCharacterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::repeatCharacterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5680, v5681, v5682, v5683, v5684, v5685, (uint64_t)v11263);
  v5694 = v11264;
  v11264 = 0;
  if (v5694)
  {
    if (*(_DWORD *)v5694 == 2)
    {
      WTF::StringImpl::~StringImpl(v5694, v5687, (uint64_t)v5688, v5689, v5690, v5691, v5692, v5693);
      WTF::fastFree(v9910, v9911, v9912, v9913, v9914, v9915, v9916, v9917);
    }
    else
    {
      *(_DWORD *)v5694 -= 2;
    }
  }
  JSC::Symbols::starDefaultPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::starDefaultPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5688, v5689, v5690, v5691, v5692, v5693, (uint64_t)v11263);
  v5702 = v11264;
  v11264 = 0;
  if (v5702)
  {
    if (*(_DWORD *)v5702 == 2)
    {
      WTF::StringImpl::~StringImpl(v5702, v5695, (uint64_t)v5696, v5697, v5698, v5699, v5700, v5701);
      WTF::fastFree(v9918, v9919, v9920, v9921, v9922, v9923, v9924, v9925);
    }
    else
    {
      *(_DWORD *)v5702 -= 2;
    }
  }
  JSC::Symbols::starNamespacePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::starNamespacePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5696, v5697, v5698, v5699, v5700, v5701, (uint64_t)v11263);
  v5710 = v11264;
  v11264 = 0;
  if (v5710)
  {
    if (*(_DWORD *)v5710 == 2)
    {
      WTF::StringImpl::~StringImpl(v5710, v5703, (uint64_t)v5704, v5705, v5706, v5707, v5708, v5709);
      WTF::fastFree(v9926, v9927, v9928, v9929, v9930, v9931, v9932, v9933);
    }
    else
    {
      *(_DWORD *)v5710 -= 2;
    }
  }
  JSC::Symbols::keysPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::keysPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5704, v5705, v5706, v5707, v5708, v5709, (uint64_t)v11263);
  v5718 = v11264;
  v11264 = 0;
  if (v5718)
  {
    if (*(_DWORD *)v5718 == 2)
    {
      WTF::StringImpl::~StringImpl(v5718, v5711, (uint64_t)v5712, v5713, v5714, v5715, v5716, v5717);
      WTF::fastFree(v9934, v9935, v9936, v9937, v9938, v9939, v9940, v9941);
    }
    else
    {
      *(_DWORD *)v5718 -= 2;
    }
  }
  JSC::Symbols::valuesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::valuesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5712, v5713, v5714, v5715, v5716, v5717, (uint64_t)v11263);
  v5726 = v11264;
  v11264 = 0;
  if (v5726)
  {
    if (*(_DWORD *)v5726 == 2)
    {
      WTF::StringImpl::~StringImpl(v5726, v5719, (uint64_t)v5720, v5721, v5722, v5723, v5724, v5725);
      WTF::fastFree(v9942, v9943, v9944, v9945, v9946, v9947, v9948, v9949);
    }
    else
    {
      *(_DWORD *)v5726 -= 2;
    }
  }
  JSC::Symbols::setPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::setPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5720, v5721, v5722, v5723, v5724, v5725, (uint64_t)v11263);
  v5734 = v11264;
  v11264 = 0;
  if (v5734)
  {
    if (*(_DWORD *)v5734 == 2)
    {
      WTF::StringImpl::~StringImpl(v5734, v5727, (uint64_t)v5728, v5729, v5730, v5731, v5732, v5733);
      WTF::fastFree(v9950, v9951, v9952, v9953, v9954, v9955, v9956, v9957);
    }
    else
    {
      *(_DWORD *)v5734 -= 2;
    }
  }
  JSC::Symbols::clearPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::clearPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5728, v5729, v5730, v5731, v5732, v5733, (uint64_t)v11263);
  v5742 = v11264;
  v11264 = 0;
  if (v5742)
  {
    if (*(_DWORD *)v5742 == 2)
    {
      WTF::StringImpl::~StringImpl(v5742, v5735, (uint64_t)v5736, v5737, v5738, v5739, v5740, v5741);
      WTF::fastFree(v9958, v9959, v9960, v9961, v9962, v9963, v9964, v9965);
    }
    else
    {
      *(_DWORD *)v5742 -= 2;
    }
  }
  JSC::Symbols::contextPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::contextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5736, v5737, v5738, v5739, v5740, v5741, (uint64_t)v11263);
  v5750 = v11264;
  v11264 = 0;
  if (v5750)
  {
    if (*(_DWORD *)v5750 == 2)
    {
      WTF::StringImpl::~StringImpl(v5750, v5743, (uint64_t)v5744, v5745, v5746, v5747, v5748, v5749);
      WTF::fastFree(v9966, v9967, v9968, v9969, v9970, v9971, v9972, v9973);
    }
    else
    {
      *(_DWORD *)v5750 -= 2;
    }
  }
  JSC::Symbols::deletePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::deletePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5744, v5745, v5746, v5747, v5748, v5749, (uint64_t)v11263);
  v5758 = v11264;
  v11264 = 0;
  if (v5758)
  {
    if (*(_DWORD *)v5758 == 2)
    {
      WTF::StringImpl::~StringImpl(v5758, v5751, (uint64_t)v5752, v5753, v5754, v5755, v5756, v5757);
      WTF::fastFree(v9974, v9975, v9976, v9977, v9978, v9979, v9980, v9981);
    }
    else
    {
      *(_DWORD *)v5758 -= 2;
    }
  }
  JSC::Symbols::sizePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::sizePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5752, v5753, v5754, v5755, v5756, v5757, (uint64_t)v11263);
  v5766 = v11264;
  v11264 = 0;
  if (v5766)
  {
    if (*(_DWORD *)v5766 == 2)
    {
      WTF::StringImpl::~StringImpl(v5766, v5759, (uint64_t)v5760, v5761, v5762, v5763, v5764, v5765);
      WTF::fastFree(v9982, v9983, v9984, v9985, v9986, v9987, v9988, v9989);
    }
    else
    {
      *(_DWORD *)v5766 -= 2;
    }
  }
  JSC::Symbols::shiftPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::shiftPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5760, v5761, v5762, v5763, v5764, v5765, (uint64_t)v11263);
  v5774 = v11264;
  v11264 = 0;
  if (v5774)
  {
    if (*(_DWORD *)v5774 == 2)
    {
      WTF::StringImpl::~StringImpl(v5774, v5767, (uint64_t)v5768, v5769, v5770, v5771, v5772, v5773);
      WTF::fastFree(v9990, v9991, v9992, v9993, v9994, v9995, v9996, v9997);
    }
    else
    {
      *(_DWORD *)v5774 -= 2;
    }
  }
  JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5768, v5769, v5770, v5771, v5772, v5773, (uint64_t)v11263);
  v5782 = v11264;
  v11264 = 0;
  if (v5782)
  {
    if (*(_DWORD *)v5782 == 2)
    {
      WTF::StringImpl::~StringImpl(v5782, v5775, (uint64_t)v5776, v5777, v5778, v5779, v5780, v5781);
      WTF::fastFree(v9998, v9999, v10000, v10001, v10002, v10003, v10004, v10005);
    }
    else
    {
      *(_DWORD *)v5782 -= 2;
    }
  }
  JSC::Symbols::Int8ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Int8ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5776, v5777, v5778, v5779, v5780, v5781, (uint64_t)v11263);
  v5790 = v11264;
  v11264 = 0;
  if (v5790)
  {
    if (*(_DWORD *)v5790 == 2)
    {
      WTF::StringImpl::~StringImpl(v5790, v5783, (uint64_t)v5784, v5785, v5786, v5787, v5788, v5789);
      WTF::fastFree(v10006, v10007, v10008, v10009, v10010, v10011, v10012, v10013);
    }
    else
    {
      *(_DWORD *)v5790 -= 2;
    }
  }
  JSC::Symbols::Int16ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Int16ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5784, v5785, v5786, v5787, v5788, v5789, (uint64_t)v11263);
  v5798 = v11264;
  v11264 = 0;
  if (v5798)
  {
    if (*(_DWORD *)v5798 == 2)
    {
      WTF::StringImpl::~StringImpl(v5798, v5791, (uint64_t)v5792, v5793, v5794, v5795, v5796, v5797);
      WTF::fastFree(v10014, v10015, v10016, v10017, v10018, v10019, v10020, v10021);
    }
    else
    {
      *(_DWORD *)v5798 -= 2;
    }
  }
  JSC::Symbols::Int32ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Int32ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5792, v5793, v5794, v5795, v5796, v5797, (uint64_t)v11263);
  v5806 = v11264;
  v11264 = 0;
  if (v5806)
  {
    if (*(_DWORD *)v5806 == 2)
    {
      WTF::StringImpl::~StringImpl(v5806, v5799, (uint64_t)v5800, v5801, v5802, v5803, v5804, v5805);
      WTF::fastFree(v10022, v10023, v10024, v10025, v10026, v10027, v10028, v10029);
    }
    else
    {
      *(_DWORD *)v5806 -= 2;
    }
  }
  JSC::Symbols::Uint8ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Uint8ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5800, v5801, v5802, v5803, v5804, v5805, (uint64_t)v11263);
  v5814 = v11264;
  v11264 = 0;
  if (v5814)
  {
    if (*(_DWORD *)v5814 == 2)
    {
      WTF::StringImpl::~StringImpl(v5814, v5807, (uint64_t)v5808, v5809, v5810, v5811, v5812, v5813);
      WTF::fastFree(v10030, v10031, v10032, v10033, v10034, v10035, v10036, v10037);
    }
    else
    {
      *(_DWORD *)v5814 -= 2;
    }
  }
  JSC::Symbols::Uint8ClampedArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Uint8ClampedArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5808, v5809, v5810, v5811, v5812, v5813, (uint64_t)v11263);
  v5822 = v11264;
  v11264 = 0;
  if (v5822)
  {
    if (*(_DWORD *)v5822 == 2)
    {
      WTF::StringImpl::~StringImpl(v5822, v5815, (uint64_t)v5816, v5817, v5818, v5819, v5820, v5821);
      WTF::fastFree(v10038, v10039, v10040, v10041, v10042, v10043, v10044, v10045);
    }
    else
    {
      *(_DWORD *)v5822 -= 2;
    }
  }
  JSC::Symbols::Uint16ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Uint16ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5816, v5817, v5818, v5819, v5820, v5821, (uint64_t)v11263);
  v5830 = v11264;
  v11264 = 0;
  if (v5830)
  {
    if (*(_DWORD *)v5830 == 2)
    {
      WTF::StringImpl::~StringImpl(v5830, v5823, (uint64_t)v5824, v5825, v5826, v5827, v5828, v5829);
      WTF::fastFree(v10046, v10047, v10048, v10049, v10050, v10051, v10052, v10053);
    }
    else
    {
      *(_DWORD *)v5830 -= 2;
    }
  }
  JSC::Symbols::Uint32ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Uint32ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5824, v5825, v5826, v5827, v5828, v5829, (uint64_t)v11263);
  v5838 = v11264;
  v11264 = 0;
  if (v5838)
  {
    if (*(_DWORD *)v5838 == 2)
    {
      WTF::StringImpl::~StringImpl(v5838, v5831, (uint64_t)v5832, v5833, v5834, v5835, v5836, v5837);
      WTF::fastFree(v10054, v10055, v10056, v10057, v10058, v10059, v10060, v10061);
    }
    else
    {
      *(_DWORD *)v5838 -= 2;
    }
  }
  JSC::Symbols::Float32ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Float32ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5832, v5833, v5834, v5835, v5836, v5837, (uint64_t)v11263);
  v5846 = v11264;
  v11264 = 0;
  if (v5846)
  {
    if (*(_DWORD *)v5846 == 2)
    {
      WTF::StringImpl::~StringImpl(v5846, v5839, (uint64_t)v5840, v5841, v5842, v5843, v5844, v5845);
      WTF::fastFree(v10062, v10063, v10064, v10065, v10066, v10067, v10068, v10069);
    }
    else
    {
      *(_DWORD *)v5846 -= 2;
    }
  }
  JSC::Symbols::Float64ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::Float64ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5840, v5841, v5842, v5843, v5844, v5845, (uint64_t)v11263);
  v5854 = v11264;
  v11264 = 0;
  if (v5854)
  {
    if (*(_DWORD *)v5854 == 2)
    {
      WTF::StringImpl::~StringImpl(v5854, v5847, (uint64_t)v5848, v5849, v5850, v5851, v5852, v5853);
      WTF::fastFree(v10070, v10071, v10072, v10073, v10074, v10075, v10076, v10077);
    }
    else
    {
      *(_DWORD *)v5854 -= 2;
    }
  }
  JSC::Symbols::BigInt64ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::BigInt64ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5848, v5849, v5850, v5851, v5852, v5853, (uint64_t)v11263);
  v5862 = v11264;
  v11264 = 0;
  if (v5862)
  {
    if (*(_DWORD *)v5862 == 2)
    {
      WTF::StringImpl::~StringImpl(v5862, v5855, (uint64_t)v5856, v5857, v5858, v5859, v5860, v5861);
      WTF::fastFree(v10078, v10079, v10080, v10081, v10082, v10083, v10084, v10085);
    }
    else
    {
      *(_DWORD *)v5862 -= 2;
    }
  }
  JSC::Symbols::BigUint64ArrayPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::BigUint64ArrayPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5856, v5857, v5858, v5859, v5860, v5861, (uint64_t)v11263);
  v5870 = v11264;
  v11264 = 0;
  if (v5870)
  {
    if (*(_DWORD *)v5870 == 2)
    {
      WTF::StringImpl::~StringImpl(v5870, v5863, (uint64_t)v5864, v5865, v5866, v5867, v5868, v5869);
      WTF::fastFree(v10086, v10087, v10088, v10089, v10090, v10091, v10092, v10093);
    }
    else
    {
      *(_DWORD *)v5870 -= 2;
    }
  }
  JSC::Symbols::execPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::execPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5864, v5865, v5866, v5867, v5868, v5869, (uint64_t)v11263);
  v5878 = v11264;
  v11264 = 0;
  if (v5878)
  {
    if (*(_DWORD *)v5878 == 2)
    {
      WTF::StringImpl::~StringImpl(v5878, v5871, (uint64_t)v5872, v5873, v5874, v5875, v5876, v5877);
      WTF::fastFree(v10094, v10095, v10096, v10097, v10098, v10099, v10100, v10101);
    }
    else
    {
      *(_DWORD *)v5878 -= 2;
    }
  }
  JSC::Symbols::generatorPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5872, v5873, v5874, v5875, v5876, v5877, (uint64_t)v11263);
  v5886 = v11264;
  v11264 = 0;
  if (v5886)
  {
    if (*(_DWORD *)v5886 == 2)
    {
      WTF::StringImpl::~StringImpl(v5886, v5879, (uint64_t)v5880, v5881, v5882, v5883, v5884, v5885);
      WTF::fastFree(v10102, v10103, v10104, v10105, v10106, v10107, v10108, v10109);
    }
    else
    {
      *(_DWORD *)v5886 -= 2;
    }
  }
  JSC::Symbols::generatorNextPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5880, v5881, v5882, v5883, v5884, v5885, (uint64_t)v11263);
  v5894 = v11264;
  v11264 = 0;
  if (v5894)
  {
    if (*(_DWORD *)v5894 == 2)
    {
      WTF::StringImpl::~StringImpl(v5894, v5887, (uint64_t)v5888, v5889, v5890, v5891, v5892, v5893);
      WTF::fastFree(v10110, v10111, v10112, v10113, v10114, v10115, v10116, v10117);
    }
    else
    {
      *(_DWORD *)v5894 -= 2;
    }
  }
  JSC::Symbols::generatorStatePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorStatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5888, v5889, v5890, v5891, v5892, v5893, (uint64_t)v11263);
  v5902 = v11264;
  v11264 = 0;
  if (v5902)
  {
    if (*(_DWORD *)v5902 == 2)
    {
      WTF::StringImpl::~StringImpl(v5902, v5895, (uint64_t)v5896, v5897, v5898, v5899, v5900, v5901);
      WTF::fastFree(v10118, v10119, v10120, v10121, v10122, v10123, v10124, v10125);
    }
    else
    {
      *(_DWORD *)v5902 -= 2;
    }
  }
  JSC::Symbols::generatorFramePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorFramePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5896, v5897, v5898, v5899, v5900, v5901, (uint64_t)v11263);
  v5910 = v11264;
  v11264 = 0;
  if (v5910)
  {
    if (*(_DWORD *)v5910 == 2)
    {
      WTF::StringImpl::~StringImpl(v5910, v5903, (uint64_t)v5904, v5905, v5906, v5907, v5908, v5909);
      WTF::fastFree(v10126, v10127, v10128, v10129, v10130, v10131, v10132, v10133);
    }
    else
    {
      *(_DWORD *)v5910 -= 2;
    }
  }
  JSC::Symbols::generatorValuePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5904, v5905, v5906, v5907, v5908, v5909, (uint64_t)v11263);
  v5918 = v11264;
  v11264 = 0;
  if (v5918)
  {
    if (*(_DWORD *)v5918 == 2)
    {
      WTF::StringImpl::~StringImpl(v5918, v5911, (uint64_t)v5912, v5913, v5914, v5915, v5916, v5917);
      WTF::fastFree(v10134, v10135, v10136, v10137, v10138, v10139, v10140, v10141);
    }
    else
    {
      *(_DWORD *)v5918 -= 2;
    }
  }
  JSC::Symbols::generatorThisPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorThisPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5912, v5913, v5914, v5915, v5916, v5917, (uint64_t)v11263);
  v5926 = v11264;
  v11264 = 0;
  if (v5926)
  {
    if (*(_DWORD *)v5926 == 2)
    {
      WTF::StringImpl::~StringImpl(v5926, v5919, (uint64_t)v5920, v5921, v5922, v5923, v5924, v5925);
      WTF::fastFree(v10142, v10143, v10144, v10145, v10146, v10147, v10148, v10149);
    }
    else
    {
      *(_DWORD *)v5926 -= 2;
    }
  }
  JSC::Symbols::generatorResumeModePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::generatorResumeModePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5920, v5921, v5922, v5923, v5924, v5925, (uint64_t)v11263);
  v5934 = v11264;
  v11264 = 0;
  if (v5934)
  {
    if (*(_DWORD *)v5934 == 2)
    {
      WTF::StringImpl::~StringImpl(v5934, v5927, (uint64_t)v5928, v5929, v5930, v5931, v5932, v5933);
      WTF::fastFree(v10150, v10151, v10152, v10153, v10154, v10155, v10156, v10157);
    }
    else
    {
      *(_DWORD *)v5934 -= 2;
    }
  }
  JSC::Symbols::syncIteratorPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::syncIteratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5928, v5929, v5930, v5931, v5932, v5933, (uint64_t)v11263);
  v5942 = v11264;
  v11264 = 0;
  if (v5942)
  {
    if (*(_DWORD *)v5942 == 2)
    {
      WTF::StringImpl::~StringImpl(v5942, v5935, (uint64_t)v5936, v5937, v5938, v5939, v5940, v5941);
      WTF::fastFree(v10158, v10159, v10160, v10161, v10162, v10163, v10164, v10165);
    }
    else
    {
      *(_DWORD *)v5942 -= 2;
    }
  }
  JSC::Symbols::nextMethodPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::nextMethodPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5936, v5937, v5938, v5939, v5940, v5941, (uint64_t)v11263);
  v5950 = v11264;
  v11264 = 0;
  if (v5950)
  {
    if (*(_DWORD *)v5950 == 2)
    {
      WTF::StringImpl::~StringImpl(v5950, v5943, (uint64_t)v5944, v5945, v5946, v5947, v5948, v5949);
      WTF::fastFree(v10166, v10167, v10168, v10169, v10170, v10171, v10172, v10173);
    }
    else
    {
      *(_DWORD *)v5950 -= 2;
    }
  }
  JSC::Symbols::asyncGeneratorQueueItemNextPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::asyncGeneratorQueueItemNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5944, v5945, v5946, v5947, v5948, v5949, (uint64_t)v11263);
  v5958 = v11264;
  v11264 = 0;
  if (v5958)
  {
    if (*(_DWORD *)v5958 == 2)
    {
      WTF::StringImpl::~StringImpl(v5958, v5951, (uint64_t)v5952, v5953, v5954, v5955, v5956, v5957);
      WTF::fastFree(v10174, v10175, v10176, v10177, v10178, v10179, v10180, v10181);
    }
    else
    {
      *(_DWORD *)v5958 -= 2;
    }
  }
  JSC::Symbols::thisPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::thisPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5952, v5953, v5954, v5955, v5956, v5957, (uint64_t)v11263);
  v5966 = v11264;
  v11264 = 0;
  if (v5966)
  {
    if (*(_DWORD *)v5966 == 2)
    {
      WTF::StringImpl::~StringImpl(v5966, v5959, (uint64_t)v5960, v5961, v5962, v5963, v5964, v5965);
      WTF::fastFree(v10182, v10183, v10184, v10185, v10186, v10187, v10188, v10189);
    }
    else
    {
      *(_DWORD *)v5966 -= 2;
    }
  }
  JSC::Symbols::toIntegerOrInfinityPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toIntegerOrInfinityPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5960, v5961, v5962, v5963, v5964, v5965, (uint64_t)v11263);
  v5974 = v11264;
  v11264 = 0;
  if (v5974)
  {
    if (*(_DWORD *)v5974 == 2)
    {
      WTF::StringImpl::~StringImpl(v5974, v5967, (uint64_t)v5968, v5969, v5970, v5971, v5972, v5973);
      WTF::fastFree(v10190, v10191, v10192, v10193, v10194, v10195, v10196, v10197);
    }
    else
    {
      *(_DWORD *)v5974 -= 2;
    }
  }
  JSC::Symbols::toLengthPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::toLengthPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5968, v5969, v5970, v5971, v5972, v5973, (uint64_t)v11263);
  v5982 = v11264;
  v11264 = 0;
  if (v5982)
  {
    if (*(_DWORD *)v5982 == 2)
    {
      WTF::StringImpl::~StringImpl(v5982, v5975, (uint64_t)v5976, v5977, v5978, v5979, v5980, v5981);
      WTF::fastFree(v10198, v10199, v10200, v10201, v10202, v10203, v10204, v10205);
    }
    else
    {
      *(_DWORD *)v5982 -= 2;
    }
  }
  JSC::Symbols::importMapStatusPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::importMapStatusPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5976, v5977, v5978, v5979, v5980, v5981, (uint64_t)v11263);
  v5990 = v11264;
  v11264 = 0;
  if (v5990)
  {
    if (*(_DWORD *)v5990 == 2)
    {
      WTF::StringImpl::~StringImpl(v5990, v5983, (uint64_t)v5984, v5985, v5986, v5987, v5988, v5989);
      WTF::fastFree(v10206, v10207, v10208, v10209, v10210, v10211, v10212, v10213);
    }
    else
    {
      *(_DWORD *)v5990 -= 2;
    }
  }
  JSC::Symbols::importInRealmPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::importInRealmPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5984, v5985, v5986, v5987, v5988, v5989, (uint64_t)v11263);
  v5998 = v11264;
  v11264 = 0;
  if (v5998)
  {
    if (*(_DWORD *)v5998 == 2)
    {
      WTF::StringImpl::~StringImpl(v5998, v5991, (uint64_t)v5992, v5993, v5994, v5995, v5996, v5997);
      WTF::fastFree(v10214, v10215, v10216, v10217, v10218, v10219, v10220, v10221);
    }
    else
    {
      *(_DWORD *)v5998 -= 2;
    }
  }
  JSC::Symbols::evalFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::evalFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v5992, v5993, v5994, v5995, v5996, v5997, (uint64_t)v11263);
  v6006 = v11264;
  v11264 = 0;
  if (v6006)
  {
    if (*(_DWORD *)v6006 == 2)
    {
      WTF::StringImpl::~StringImpl(v6006, v5999, (uint64_t)v6000, v6001, v6002, v6003, v6004, v6005);
      WTF::fastFree(v10222, v10223, v10224, v10225, v10226, v10227, v10228, v10229);
    }
    else
    {
      *(_DWORD *)v6006 -= 2;
    }
  }
  JSC::Symbols::evalInRealmPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::evalInRealmPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6000, v6001, v6002, v6003, v6004, v6005, (uint64_t)v11263);
  v6014 = v11264;
  v11264 = 0;
  if (v6014)
  {
    if (*(_DWORD *)v6014 == 2)
    {
      WTF::StringImpl::~StringImpl(v6014, v6007, (uint64_t)v6008, v6009, v6010, v6011, v6012, v6013);
      WTF::fastFree(v10230, v10231, v10232, v10233, v10234, v10235, v10236, v10237);
    }
    else
    {
      *(_DWORD *)v6014 -= 2;
    }
  }
  JSC::Symbols::moveFunctionToRealmPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::moveFunctionToRealmPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6008, v6009, v6010, v6011, v6012, v6013, (uint64_t)v11263);
  v6022 = v11264;
  v11264 = 0;
  if (v6022)
  {
    if (*(_DWORD *)v6022 == 2)
    {
      WTF::StringImpl::~StringImpl(v6022, v6015, (uint64_t)v6016, v6017, v6018, v6019, v6020, v6021);
      WTF::fastFree(v10238, v10239, v10240, v10241, v10242, v10243, v10244, v10245);
    }
    else
    {
      *(_DWORD *)v6022 -= 2;
    }
  }
  JSC::Symbols::newTargetLocalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6016, v6017, v6018, v6019, v6020, v6021, (uint64_t)v11263);
  v6030 = v11264;
  v11264 = 0;
  if (v6030)
  {
    if (*(_DWORD *)v6030 == 2)
    {
      WTF::StringImpl::~StringImpl(v6030, v6023, (uint64_t)v6024, v6025, v6026, v6027, v6028, v6029);
      WTF::fastFree(v10246, v10247, v10248, v10249, v10250, v10251, v10252, v10253);
    }
    else
    {
      *(_DWORD *)v6030 -= 2;
    }
  }
  JSC::Symbols::derivedConstructorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6024, v6025, v6026, v6027, v6028, v6029, (uint64_t)v11263);
  v6038 = v11264;
  v11264 = 0;
  if (v6038)
  {
    if (*(_DWORD *)v6038 == 2)
    {
      WTF::StringImpl::~StringImpl(v6038, v6031, (uint64_t)v6032, v6033, v6034, v6035, v6036, v6037);
      WTF::fastFree(v10254, v10255, v10256, v10257, v10258, v10259, v10260, v10261);
    }
    else
    {
      *(_DWORD *)v6038 -= 2;
    }
  }
  JSC::Symbols::isTypedArrayViewPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isTypedArrayViewPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6032, v6033, v6034, v6035, v6036, v6037, (uint64_t)v11263);
  v6046 = v11264;
  v11264 = 0;
  if (v6046)
  {
    if (*(_DWORD *)v6046 == 2)
    {
      WTF::StringImpl::~StringImpl(v6046, v6039, (uint64_t)v6040, v6041, v6042, v6043, v6044, v6045);
      WTF::fastFree(v10262, v10263, v10264, v10265, v10266, v10267, v10268, v10269);
    }
    else
    {
      *(_DWORD *)v6046 -= 2;
    }
  }
  JSC::Symbols::isSharedTypedArrayViewPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isSharedTypedArrayViewPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6040, v6041, v6042, v6043, v6044, v6045, (uint64_t)v11263);
  v6054 = v11264;
  v11264 = 0;
  if (v6054)
  {
    if (*(_DWORD *)v6054 == 2)
    {
      WTF::StringImpl::~StringImpl(v6054, v6047, (uint64_t)v6048, v6049, v6050, v6051, v6052, v6053);
      WTF::fastFree(v10270, v10271, v10272, v10273, v10274, v10275, v10276, v10277);
    }
    else
    {
      *(_DWORD *)v6054 -= 2;
    }
  }
  JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6048, v6049, v6050, v6051, v6052, v6053, (uint64_t)v11263);
  v6062 = v11264;
  v11264 = 0;
  if (v6062)
  {
    if (*(_DWORD *)v6062 == 2)
    {
      WTF::StringImpl::~StringImpl(v6062, v6055, (uint64_t)v6056, v6057, v6058, v6059, v6060, v6061);
      WTF::fastFree(v10278, v10279, v10280, v10281, v10282, v10283, v10284, v10285);
    }
    else
    {
      *(_DWORD *)v6062 -= 2;
    }
  }
  JSC::Symbols::isDetachedPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isDetachedPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6056, v6057, v6058, v6059, v6060, v6061, (uint64_t)v11263);
  v6070 = v11264;
  v11264 = 0;
  if (v6070)
  {
    if (*(_DWORD *)v6070 == 2)
    {
      WTF::StringImpl::~StringImpl(v6070, v6063, (uint64_t)v6064, v6065, v6066, v6067, v6068, v6069);
      WTF::fastFree(v10286, v10287, v10288, v10289, v10290, v10291, v10292, v10293);
    }
    else
    {
      *(_DWORD *)v6070 -= 2;
    }
  }
  JSC::Symbols::typedArrayFromFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::typedArrayFromFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6064, v6065, v6066, v6067, v6068, v6069, (uint64_t)v11263);
  v6078 = v11264;
  v11264 = 0;
  if (v6078)
  {
    if (*(_DWORD *)v6078 == 2)
    {
      WTF::StringImpl::~StringImpl(v6078, v6071, (uint64_t)v6072, v6073, v6074, v6075, v6076, v6077);
      WTF::fastFree(v10294, v10295, v10296, v10297, v10298, v10299, v10300, v10301);
    }
    else
    {
      *(_DWORD *)v6078 -= 2;
    }
  }
  JSC::Symbols::isBoundFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isBoundFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6072, v6073, v6074, v6075, v6076, v6077, (uint64_t)v11263);
  v6086 = v11264;
  v11264 = 0;
  if (v6086)
  {
    if (*(_DWORD *)v6086 == 2)
    {
      WTF::StringImpl::~StringImpl(v6086, v6079, (uint64_t)v6080, v6081, v6082, v6083, v6084, v6085);
      WTF::fastFree(v10302, v10303, v10304, v10305, v10306, v10307, v10308, v10309);
    }
    else
    {
      *(_DWORD *)v6086 -= 2;
    }
  }
  JSC::Symbols::hasInstanceBoundFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasInstanceBoundFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6080, v6081, v6082, v6083, v6084, v6085, (uint64_t)v11263);
  v6094 = v11264;
  v11264 = 0;
  if (v6094)
  {
    if (*(_DWORD *)v6094 == 2)
    {
      WTF::StringImpl::~StringImpl(v6094, v6087, (uint64_t)v6088, v6089, v6090, v6091, v6092, v6093);
      WTF::fastFree(v10310, v10311, v10312, v10313, v10314, v10315, v10316, v10317);
    }
    else
    {
      *(_DWORD *)v6094 -= 2;
    }
  }
  JSC::Symbols::instanceOfPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::instanceOfPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6088, v6089, v6090, v6091, v6092, v6093, (uint64_t)v11263);
  v6102 = v11264;
  v11264 = 0;
  if (v6102)
  {
    if (*(_DWORD *)v6102 == 2)
    {
      WTF::StringImpl::~StringImpl(v6102, v6095, (uint64_t)v6096, v6097, v6098, v6099, v6100, v6101);
      WTF::fastFree(v10318, v10319, v10320, v10321, v10322, v10323, v10324, v10325);
    }
    else
    {
      *(_DWORD *)v6102 -= 2;
    }
  }
  JSC::Symbols::isArraySlowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isArraySlowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6096, v6097, v6098, v6099, v6100, v6101, (uint64_t)v11263);
  v6110 = v11264;
  v11264 = 0;
  if (v6110)
  {
    if (*(_DWORD *)v6110 == 2)
    {
      WTF::StringImpl::~StringImpl(v6110, v6103, (uint64_t)v6104, v6105, v6106, v6107, v6108, v6109);
      WTF::fastFree(v10326, v10327, v10328, v10329, v10330, v10331, v10332, v10333);
    }
    else
    {
      *(_DWORD *)v6110 -= 2;
    }
  }
  JSC::Symbols::sameValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::sameValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6104, v6105, v6106, v6107, v6108, v6109, (uint64_t)v11263);
  v6118 = v11264;
  v11264 = 0;
  if (v6118)
  {
    if (*(_DWORD *)v6118 == 2)
    {
      WTF::StringImpl::~StringImpl(v6118, v6111, (uint64_t)v6112, v6113, v6114, v6115, v6116, v6117);
      WTF::fastFree(v10334, v10335, v10336, v10337, v10338, v10339, v10340, v10341);
    }
    else
    {
      *(_DWORD *)v6118 -= 2;
    }
  }
  JSC::Symbols::concatMemcpyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::concatMemcpyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6112, v6113, v6114, v6115, v6116, v6117, (uint64_t)v11263);
  v6126 = v11264;
  v11264 = 0;
  if (v6126)
  {
    if (*(_DWORD *)v6126 == 2)
    {
      WTF::StringImpl::~StringImpl(v6126, v6119, (uint64_t)v6120, v6121, v6122, v6123, v6124, v6125);
      WTF::fastFree(v10342, v10343, v10344, v10345, v10346, v10347, v10348, v10349);
    }
    else
    {
      *(_DWORD *)v6126 -= 2;
    }
  }
  JSC::Symbols::appendMemcpyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::appendMemcpyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6120, v6121, v6122, v6123, v6124, v6125, (uint64_t)v11263);
  v6134 = v11264;
  v11264 = 0;
  if (v6134)
  {
    if (*(_DWORD *)v6134 == 2)
    {
      WTF::StringImpl::~StringImpl(v6134, v6127, (uint64_t)v6128, v6129, v6130, v6131, v6132, v6133);
      WTF::fastFree(v10350, v10351, v10352, v10353, v10354, v10355, v10356, v10357);
    }
    else
    {
      *(_DWORD *)v6134 -= 2;
    }
  }
  JSC::Symbols::regExpCreatePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpCreatePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6128, v6129, v6130, v6131, v6132, v6133, (uint64_t)v11263);
  v6142 = v11264;
  v11264 = 0;
  if (v6142)
  {
    if (*(_DWORD *)v6142 == 2)
    {
      WTF::StringImpl::~StringImpl(v6142, v6135, (uint64_t)v6136, v6137, v6138, v6139, v6140, v6141);
      WTF::fastFree(v10358, v10359, v10360, v10361, v10362, v10363, v10364, v10365);
    }
    else
    {
      *(_DWORD *)v6142 -= 2;
    }
  }
  JSC::Symbols::isRegExpPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isRegExpPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6136, v6137, v6138, v6139, v6140, v6141, (uint64_t)v11263);
  v6150 = v11264;
  v11264 = 0;
  if (v6150)
  {
    if (*(_DWORD *)v6150 == 2)
    {
      WTF::StringImpl::~StringImpl(v6150, v6143, (uint64_t)v6144, v6145, v6146, v6147, v6148, v6149);
      WTF::fastFree(v10366, v10367, v10368, v10369, v10370, v10371, v10372, v10373);
    }
    else
    {
      *(_DWORD *)v6150 -= 2;
    }
  }
  JSC::Symbols::replaceUsingRegExpPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::replaceUsingRegExpPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6144, v6145, v6146, v6147, v6148, v6149, (uint64_t)v11263);
  v6158 = v11264;
  v11264 = 0;
  if (v6158)
  {
    if (*(_DWORD *)v6158 == 2)
    {
      WTF::StringImpl::~StringImpl(v6158, v6151, (uint64_t)v6152, v6153, v6154, v6155, v6156, v6157);
      WTF::fastFree(v10374, v10375, v10376, v10377, v10378, v10379, v10380, v10381);
    }
    else
    {
      *(_DWORD *)v6158 -= 2;
    }
  }
  JSC::Symbols::replaceUsingStringSearchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::replaceUsingStringSearchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6152, v6153, v6154, v6155, v6156, v6157, (uint64_t)v11263);
  v6166 = v11264;
  v11264 = 0;
  if (v6166)
  {
    if (*(_DWORD *)v6166 == 2)
    {
      WTF::StringImpl::~StringImpl(v6166, v6159, (uint64_t)v6160, v6161, v6162, v6163, v6164, v6165);
      WTF::fastFree(v10382, v10383, v10384, v10385, v10386, v10387, v10388, v10389);
    }
    else
    {
      *(_DWORD *)v6166 -= 2;
    }
  }
  JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::replaceAllUsingStringSearchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6160, v6161, v6162, v6163, v6164, v6165, (uint64_t)v11263);
  v6174 = v11264;
  v11264 = 0;
  if (v6174)
  {
    if (*(_DWORD *)v6174 == 2)
    {
      WTF::StringImpl::~StringImpl(v6174, v6167, (uint64_t)v6168, v6169, v6170, v6171, v6172, v6173);
      WTF::fastFree(v10390, v10391, v10392, v10393, v10394, v10395, v10396, v10397);
    }
    else
    {
      *(_DWORD *)v6174 -= 2;
    }
  }
  JSC::Symbols::makeTypeErrorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::makeTypeErrorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6168, v6169, v6170, v6171, v6172, v6173, (uint64_t)v11263);
  v6182 = v11264;
  v11264 = 0;
  if (v6182)
  {
    if (*(_DWORD *)v6182 == 2)
    {
      WTF::StringImpl::~StringImpl(v6182, v6175, (uint64_t)v6176, v6177, v6178, v6179, v6180, v6181);
      WTF::fastFree(v10398, v10399, v10400, v10401, v10402, v10403, v10404, v10405);
    }
    else
    {
      *(_DWORD *)v6182 -= 2;
    }
  }
  JSC::Symbols::AggregateErrorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::AggregateErrorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6176, v6177, v6178, v6179, v6180, v6181, (uint64_t)v11263);
  v6190 = v11264;
  v11264 = 0;
  if (v6190)
  {
    if (*(_DWORD *)v6190 == 2)
    {
      WTF::StringImpl::~StringImpl(v6190, v6183, (uint64_t)v6184, v6185, v6186, v6187, v6188, v6189);
      WTF::fastFree(v10406, v10407, v10408, v10409, v10410, v10411, v10412, v10413);
    }
    else
    {
      *(_DWORD *)v6190 -= 2;
    }
  }
  JSC::Symbols::mapStoragePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapStoragePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6184, v6185, v6186, v6187, v6188, v6189, (uint64_t)v11263);
  v6198 = v11264;
  v11264 = 0;
  if (v6198)
  {
    if (*(_DWORD *)v6198 == 2)
    {
      WTF::StringImpl::~StringImpl(v6198, v6191, (uint64_t)v6192, v6193, v6194, v6195, v6196, v6197);
      WTF::fastFree(v10414, v10415, v10416, v10417, v10418, v10419, v10420, v10421);
    }
    else
    {
      *(_DWORD *)v6198 -= 2;
    }
  }
  JSC::Symbols::mapIterationNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIterationNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6192, v6193, v6194, v6195, v6196, v6197, (uint64_t)v11263);
  v6206 = v11264;
  v11264 = 0;
  if (v6206)
  {
    if (*(_DWORD *)v6206 == 2)
    {
      WTF::StringImpl::~StringImpl(v6206, v6199, (uint64_t)v6200, v6201, v6202, v6203, v6204, v6205);
      WTF::fastFree(v10422, v10423, v10424, v10425, v10426, v10427, v10428, v10429);
    }
    else
    {
      *(_DWORD *)v6206 -= 2;
    }
  }
  JSC::Symbols::mapIterationEntryPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6200, v6201, v6202, v6203, v6204, v6205, (uint64_t)v11263);
  v6214 = v11264;
  v11264 = 0;
  if (v6214)
  {
    if (*(_DWORD *)v6214 == 2)
    {
      WTF::StringImpl::~StringImpl(v6214, v6207, (uint64_t)v6208, v6209, v6210, v6211, v6212, v6213);
      WTF::fastFree(v10430, v10431, v10432, v10433, v10434, v10435, v10436, v10437);
    }
    else
    {
      *(_DWORD *)v6214 -= 2;
    }
  }
  JSC::Symbols::mapIterationEntryKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6208, v6209, v6210, v6211, v6212, v6213, (uint64_t)v11263);
  v6222 = v11264;
  v11264 = 0;
  if (v6222)
  {
    if (*(_DWORD *)v6222 == 2)
    {
      WTF::StringImpl::~StringImpl(v6222, v6215, (uint64_t)v6216, v6217, v6218, v6219, v6220, v6221);
      WTF::fastFree(v10438, v10439, v10440, v10441, v10442, v10443, v10444, v10445);
    }
    else
    {
      *(_DWORD *)v6222 -= 2;
    }
  }
  JSC::Symbols::mapIterationEntryValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6216, v6217, v6218, v6219, v6220, v6221, (uint64_t)v11263);
  v6230 = v11264;
  v11264 = 0;
  if (v6230)
  {
    if (*(_DWORD *)v6230 == 2)
    {
      WTF::StringImpl::~StringImpl(v6230, v6223, (uint64_t)v6224, v6225, v6226, v6227, v6228, v6229);
      WTF::fastFree(v10446, v10447, v10448, v10449, v10450, v10451, v10452, v10453);
    }
    else
    {
      *(_DWORD *)v6230 -= 2;
    }
  }
  JSC::Symbols::mapIteratorNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6224, v6225, v6226, v6227, v6228, v6229, (uint64_t)v11263);
  v6238 = v11264;
  v11264 = 0;
  if (v6238)
  {
    if (*(_DWORD *)v6238 == 2)
    {
      WTF::StringImpl::~StringImpl(v6238, v6231, (uint64_t)v6232, v6233, v6234, v6235, v6236, v6237);
      WTF::fastFree(v10454, v10455, v10456, v10457, v10458, v10459, v10460, v10461);
    }
    else
    {
      *(_DWORD *)v6238 -= 2;
    }
  }
  JSC::Symbols::mapIteratorKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6232, v6233, v6234, v6235, v6236, v6237, (uint64_t)v11263);
  v6246 = v11264;
  v11264 = 0;
  if (v6246)
  {
    if (*(_DWORD *)v6246 == 2)
    {
      WTF::StringImpl::~StringImpl(v6246, v6239, (uint64_t)v6240, v6241, v6242, v6243, v6244, v6245);
      WTF::fastFree(v10462, v10463, v10464, v10465, v10466, v10467, v10468, v10469);
    }
    else
    {
      *(_DWORD *)v6246 -= 2;
    }
  }
  JSC::Symbols::mapIteratorValuePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::mapIteratorValuePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6240, v6241, v6242, v6243, v6244, v6245, (uint64_t)v11263);
  v6254 = v11264;
  v11264 = 0;
  if (v6254)
  {
    if (*(_DWORD *)v6254 == 2)
    {
      WTF::StringImpl::~StringImpl(v6254, v6247, (uint64_t)v6248, v6249, v6250, v6251, v6252, v6253);
      WTF::fastFree(v10470, v10471, v10472, v10473, v10474, v10475, v10476, v10477);
    }
    else
    {
      *(_DWORD *)v6254 -= 2;
    }
  }
  JSC::Symbols::setStoragePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setStoragePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6248, v6249, v6250, v6251, v6252, v6253, (uint64_t)v11263);
  v6262 = v11264;
  v11264 = 0;
  if (v6262)
  {
    if (*(_DWORD *)v6262 == 2)
    {
      WTF::StringImpl::~StringImpl(v6262, v6255, (uint64_t)v6256, v6257, v6258, v6259, v6260, v6261);
      WTF::fastFree(v10478, v10479, v10480, v10481, v10482, v10483, v10484, v10485);
    }
    else
    {
      *(_DWORD *)v6262 -= 2;
    }
  }
  JSC::Symbols::setIterationNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIterationNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6256, v6257, v6258, v6259, v6260, v6261, (uint64_t)v11263);
  v6270 = v11264;
  v11264 = 0;
  if (v6270)
  {
    if (*(_DWORD *)v6270 == 2)
    {
      WTF::StringImpl::~StringImpl(v6270, v6263, (uint64_t)v6264, v6265, v6266, v6267, v6268, v6269);
      WTF::fastFree(v10486, v10487, v10488, v10489, v10490, v10491, v10492, v10493);
    }
    else
    {
      *(_DWORD *)v6270 -= 2;
    }
  }
  JSC::Symbols::setIterationEntryPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIterationEntryPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6264, v6265, v6266, v6267, v6268, v6269, (uint64_t)v11263);
  v6278 = v11264;
  v11264 = 0;
  if (v6278)
  {
    if (*(_DWORD *)v6278 == 2)
    {
      WTF::StringImpl::~StringImpl(v6278, v6271, (uint64_t)v6272, v6273, v6274, v6275, v6276, v6277);
      WTF::fastFree(v10494, v10495, v10496, v10497, v10498, v10499, v10500, v10501);
    }
    else
    {
      *(_DWORD *)v6278 -= 2;
    }
  }
  JSC::Symbols::setIterationEntryKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIterationEntryKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6272, v6273, v6274, v6275, v6276, v6277, (uint64_t)v11263);
  v6286 = v11264;
  v11264 = 0;
  if (v6286)
  {
    if (*(_DWORD *)v6286 == 2)
    {
      WTF::StringImpl::~StringImpl(v6286, v6279, (uint64_t)v6280, v6281, v6282, v6283, v6284, v6285);
      WTF::fastFree(v10502, v10503, v10504, v10505, v10506, v10507, v10508, v10509);
    }
    else
    {
      *(_DWORD *)v6286 -= 2;
    }
  }
  JSC::Symbols::setIteratorNextPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorNextPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6280, v6281, v6282, v6283, v6284, v6285, (uint64_t)v11263);
  v6294 = v11264;
  v11264 = 0;
  if (v6294)
  {
    if (*(_DWORD *)v6294 == 2)
    {
      WTF::StringImpl::~StringImpl(v6294, v6287, (uint64_t)v6288, v6289, v6290, v6291, v6292, v6293);
      WTF::fastFree(v10510, v10511, v10512, v10513, v10514, v10515, v10516, v10517);
    }
    else
    {
      *(_DWORD *)v6294 -= 2;
    }
  }
  JSC::Symbols::setIteratorKeyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setIteratorKeyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6288, v6289, v6290, v6291, v6292, v6293, (uint64_t)v11263);
  v6302 = v11264;
  v11264 = 0;
  if (v6302)
  {
    if (*(_DWORD *)v6302 == 2)
    {
      WTF::StringImpl::~StringImpl(v6302, v6295, (uint64_t)v6296, v6297, v6298, v6299, v6300, v6301);
      WTF::fastFree(v10518, v10519, v10520, v10521, v10522, v10523, v10524, v10525);
    }
    else
    {
      *(_DWORD *)v6302 -= 2;
    }
  }
  JSC::Symbols::setClonePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setClonePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6296, v6297, v6298, v6299, v6300, v6301, (uint64_t)v11263);
  v6310 = v11264;
  v11264 = 0;
  if (v6310)
  {
    if (*(_DWORD *)v6310 == 2)
    {
      WTF::StringImpl::~StringImpl(v6310, v6303, (uint64_t)v6304, v6305, v6306, v6307, v6308, v6309);
      WTF::fastFree(v10526, v10527, v10528, v10529, v10530, v10531, v10532, v10533);
    }
    else
    {
      *(_DWORD *)v6310 -= 2;
    }
  }
  JSC::Symbols::setPrototypeDirectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setPrototypeDirectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6304, v6305, v6306, v6307, v6308, v6309, (uint64_t)v11263);
  v6318 = v11264;
  v11264 = 0;
  if (v6318)
  {
    if (*(_DWORD *)v6318 == 2)
    {
      WTF::StringImpl::~StringImpl(v6318, v6311, (uint64_t)v6312, v6313, v6314, v6315, v6316, v6317);
      WTF::fastFree(v10534, v10535, v10536, v10537, v10538, v10539, v10540, v10541);
    }
    else
    {
      *(_DWORD *)v6318 -= 2;
    }
  }
  JSC::Symbols::setPrototypeDirectOrThrowPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::setPrototypeDirectOrThrowPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6312, v6313, v6314, v6315, v6316, v6317, (uint64_t)v11263);
  v6326 = v11264;
  v11264 = 0;
  if (v6326)
  {
    if (*(_DWORD *)v6326 == 2)
    {
      WTF::StringImpl::~StringImpl(v6326, v6319, (uint64_t)v6320, v6321, v6322, v6323, v6324, v6325);
      WTF::fastFree(v10542, v10543, v10544, v10545, v10546, v10547, v10548, v10549);
    }
    else
    {
      *(_DWORD *)v6326 -= 2;
    }
  }
  JSC::Symbols::regExpBuiltinExecPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpBuiltinExecPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6320, v6321, v6322, v6323, v6324, v6325, (uint64_t)v11263);
  v6334 = v11264;
  v11264 = 0;
  if (v6334)
  {
    if (*(_DWORD *)v6334 == 2)
    {
      WTF::StringImpl::~StringImpl(v6334, v6327, (uint64_t)v6328, v6329, v6330, v6331, v6332, v6333);
      WTF::fastFree(v10550, v10551, v10552, v10553, v10554, v10555, v10556, v10557);
    }
    else
    {
      *(_DWORD *)v6334 -= 2;
    }
  }
  JSC::Symbols::regExpMatchFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpMatchFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6328, v6329, v6330, v6331, v6332, v6333, (uint64_t)v11263);
  v6342 = v11264;
  v11264 = 0;
  if (v6342)
  {
    if (*(_DWORD *)v6342 == 2)
    {
      WTF::StringImpl::~StringImpl(v6342, v6335, (uint64_t)v6336, v6337, v6338, v6339, v6340, v6341);
      WTF::fastFree(v10558, v10559, v10560, v10561, v10562, v10563, v10564, v10565);
    }
    else
    {
      *(_DWORD *)v6342 -= 2;
    }
  }
  JSC::Symbols::regExpProtoFlagsGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoFlagsGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6336, v6337, v6338, v6339, v6340, v6341, (uint64_t)v11263);
  v6350 = v11264;
  v11264 = 0;
  if (v6350)
  {
    if (*(_DWORD *)v6350 == 2)
    {
      WTF::StringImpl::~StringImpl(v6350, v6343, (uint64_t)v6344, v6345, v6346, v6347, v6348, v6349);
      WTF::fastFree(v10566, v10567, v10568, v10569, v10570, v10571, v10572, v10573);
    }
    else
    {
      *(_DWORD *)v6350 -= 2;
    }
  }
  JSC::Symbols::regExpProtoHasIndicesGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoHasIndicesGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6344, v6345, v6346, v6347, v6348, v6349, (uint64_t)v11263);
  v6358 = v11264;
  v11264 = 0;
  if (v6358)
  {
    if (*(_DWORD *)v6358 == 2)
    {
      WTF::StringImpl::~StringImpl(v6358, v6351, (uint64_t)v6352, v6353, v6354, v6355, v6356, v6357);
      WTF::fastFree(v10574, v10575, v10576, v10577, v10578, v10579, v10580, v10581);
    }
    else
    {
      *(_DWORD *)v6358 -= 2;
    }
  }
  JSC::Symbols::regExpProtoGlobalGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoGlobalGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6352, v6353, v6354, v6355, v6356, v6357, (uint64_t)v11263);
  v6366 = v11264;
  v11264 = 0;
  if (v6366)
  {
    if (*(_DWORD *)v6366 == 2)
    {
      WTF::StringImpl::~StringImpl(v6366, v6359, (uint64_t)v6360, v6361, v6362, v6363, v6364, v6365);
      WTF::fastFree(v10582, v10583, v10584, v10585, v10586, v10587, v10588, v10589);
    }
    else
    {
      *(_DWORD *)v6366 -= 2;
    }
  }
  JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6360, v6361, v6362, v6363, v6364, v6365, (uint64_t)v11263);
  v6374 = v11264;
  v11264 = 0;
  if (v6374)
  {
    if (*(_DWORD *)v6374 == 2)
    {
      WTF::StringImpl::~StringImpl(v6374, v6367, (uint64_t)v6368, v6369, v6370, v6371, v6372, v6373);
      WTF::fastFree(v10590, v10591, v10592, v10593, v10594, v10595, v10596, v10597);
    }
    else
    {
      *(_DWORD *)v6374 -= 2;
    }
  }
  JSC::Symbols::regExpProtoMultilineGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoMultilineGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6368, v6369, v6370, v6371, v6372, v6373, (uint64_t)v11263);
  v6382 = v11264;
  v11264 = 0;
  if (v6382)
  {
    if (*(_DWORD *)v6382 == 2)
    {
      WTF::StringImpl::~StringImpl(v6382, v6375, (uint64_t)v6376, v6377, v6378, v6379, v6380, v6381);
      WTF::fastFree(v10598, v10599, v10600, v10601, v10602, v10603, v10604, v10605);
    }
    else
    {
      *(_DWORD *)v6382 -= 2;
    }
  }
  JSC::Symbols::regExpProtoSourceGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoSourceGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6376, v6377, v6378, v6379, v6380, v6381, (uint64_t)v11263);
  v6390 = v11264;
  v11264 = 0;
  if (v6390)
  {
    if (*(_DWORD *)v6390 == 2)
    {
      WTF::StringImpl::~StringImpl(v6390, v6383, (uint64_t)v6384, v6385, v6386, v6387, v6388, v6389);
      WTF::fastFree(v10606, v10607, v10608, v10609, v10610, v10611, v10612, v10613);
    }
    else
    {
      *(_DWORD *)v6390 -= 2;
    }
  }
  JSC::Symbols::regExpProtoStickyGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoStickyGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6384, v6385, v6386, v6387, v6388, v6389, (uint64_t)v11263);
  v6398 = v11264;
  v11264 = 0;
  if (v6398)
  {
    if (*(_DWORD *)v6398 == 2)
    {
      WTF::StringImpl::~StringImpl(v6398, v6391, (uint64_t)v6392, v6393, v6394, v6395, v6396, v6397);
      WTF::fastFree(v10614, v10615, v10616, v10617, v10618, v10619, v10620, v10621);
    }
    else
    {
      *(_DWORD *)v6398 -= 2;
    }
  }
  JSC::Symbols::regExpProtoDotAllGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoDotAllGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6392, v6393, v6394, v6395, v6396, v6397, (uint64_t)v11263);
  v6406 = v11264;
  v11264 = 0;
  if (v6406)
  {
    if (*(_DWORD *)v6406 == 2)
    {
      WTF::StringImpl::~StringImpl(v6406, v6399, (uint64_t)v6400, v6401, v6402, v6403, v6404, v6405);
      WTF::fastFree(v10622, v10623, v10624, v10625, v10626, v10627, v10628, v10629);
    }
    else
    {
      *(_DWORD *)v6406 -= 2;
    }
  }
  JSC::Symbols::regExpProtoUnicodeGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6400, v6401, v6402, v6403, v6404, v6405, (uint64_t)v11263);
  v6414 = v11264;
  v11264 = 0;
  if (v6414)
  {
    if (*(_DWORD *)v6414 == 2)
    {
      WTF::StringImpl::~StringImpl(v6414, v6407, (uint64_t)v6408, v6409, v6410, v6411, v6412, v6413);
      WTF::fastFree(v10630, v10631, v10632, v10633, v10634, v10635, v10636, v10637);
    }
    else
    {
      *(_DWORD *)v6414 -= 2;
    }
  }
  JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6408, v6409, v6410, v6411, v6412, v6413, (uint64_t)v11263);
  v6422 = v11264;
  v11264 = 0;
  if (v6422)
  {
    if (*(_DWORD *)v6422 == 2)
    {
      WTF::StringImpl::~StringImpl(v6422, v6415, (uint64_t)v6416, v6417, v6418, v6419, v6420, v6421);
      WTF::fastFree(v10638, v10639, v10640, v10641, v10642, v10643, v10644, v10645);
    }
    else
    {
      *(_DWORD *)v6422 -= 2;
    }
  }
  JSC::Symbols::regExpPrototypeSymbolMatchPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolMatchPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6416, v6417, v6418, v6419, v6420, v6421, (uint64_t)v11263);
  v6430 = v11264;
  v11264 = 0;
  if (v6430)
  {
    if (*(_DWORD *)v6430 == 2)
    {
      WTF::StringImpl::~StringImpl(v6430, v6423, (uint64_t)v6424, v6425, v6426, v6427, v6428, v6429);
      WTF::fastFree(v10646, v10647, v10648, v10649, v10650, v10651, v10652, v10653);
    }
    else
    {
      *(_DWORD *)v6430 -= 2;
    }
  }
  JSC::Symbols::regExpPrototypeSymbolReplacePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolReplacePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6424, v6425, v6426, v6427, v6428, v6429, (uint64_t)v11263);
  v6438 = v11264;
  v11264 = 0;
  if (v6438)
  {
    if (*(_DWORD *)v6438 == 2)
    {
      WTF::StringImpl::~StringImpl(v6438, v6431, (uint64_t)v6432, v6433, v6434, v6435, v6436, v6437);
      WTF::fastFree(v10654, v10655, v10656, v10657, v10658, v10659, v10660, v10661);
    }
    else
    {
      *(_DWORD *)v6438 -= 2;
    }
  }
  JSC::Symbols::regExpSearchFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpSearchFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6432, v6433, v6434, v6435, v6436, v6437, (uint64_t)v11263);
  v6446 = v11264;
  v11264 = 0;
  if (v6446)
  {
    if (*(_DWORD *)v6446 == 2)
    {
      WTF::StringImpl::~StringImpl(v6446, v6439, (uint64_t)v6440, v6441, v6442, v6443, v6444, v6445);
      WTF::fastFree(v10662, v10663, v10664, v10665, v10666, v10667, v10668, v10669);
    }
    else
    {
      *(_DWORD *)v6446 -= 2;
    }
  }
  JSC::Symbols::regExpSplitFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpSplitFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6440, v6441, v6442, v6443, v6444, v6445, (uint64_t)v11263);
  v6454 = v11264;
  v11264 = 0;
  if (v6454)
  {
    if (*(_DWORD *)v6454 == 2)
    {
      WTF::StringImpl::~StringImpl(v6454, v6447, (uint64_t)v6448, v6449, v6450, v6451, v6452, v6453);
      WTF::fastFree(v10670, v10671, v10672, v10673, v10674, v10675, v10676, v10677);
    }
    else
    {
      *(_DWORD *)v6454 -= 2;
    }
  }
  JSC::Symbols::regExpTestFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::regExpTestFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6448, v6449, v6450, v6451, v6452, v6453, (uint64_t)v11263);
  v6462 = v11264;
  v11264 = 0;
  if (v6462)
  {
    if (*(_DWORD *)v6462 == 2)
    {
      WTF::StringImpl::~StringImpl(v6462, v6455, (uint64_t)v6456, v6457, v6458, v6459, v6460, v6461);
      WTF::fastFree(v10678, v10679, v10680, v10681, v10682, v10683, v10684, v10685);
    }
    else
    {
      *(_DWORD *)v6462 -= 2;
    }
  }
  JSC::Symbols::regExpStringIteratorRegExpPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::regExpStringIteratorRegExpPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6456, v6457, v6458, v6459, v6460, v6461, (uint64_t)v11263);
  v6470 = v11264;
  v11264 = 0;
  if (v6470)
  {
    if (*(_DWORD *)v6470 == 2)
    {
      WTF::StringImpl::~StringImpl(v6470, v6463, (uint64_t)v6464, v6465, v6466, v6467, v6468, v6469);
      WTF::fastFree(v10686, v10687, v10688, v10689, v10690, v10691, v10692, v10693);
    }
    else
    {
      *(_DWORD *)v6470 -= 2;
    }
  }
  JSC::Symbols::regExpStringIteratorStringPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::regExpStringIteratorStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6464, v6465, v6466, v6467, v6468, v6469, (uint64_t)v11263);
  v6478 = v11264;
  v11264 = 0;
  if (v6478)
  {
    if (*(_DWORD *)v6478 == 2)
    {
      WTF::StringImpl::~StringImpl(v6478, v6471, (uint64_t)v6472, v6473, v6474, v6475, v6476, v6477);
      WTF::fastFree(v10694, v10695, v10696, v10697, v10698, v10699, v10700, v10701);
    }
    else
    {
      *(_DWORD *)v6478 -= 2;
    }
  }
  JSC::Symbols::regExpStringIteratorGlobalPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::regExpStringIteratorGlobalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6472, v6473, v6474, v6475, v6476, v6477, (uint64_t)v11263);
  v6486 = v11264;
  v11264 = 0;
  if (v6486)
  {
    if (*(_DWORD *)v6486 == 2)
    {
      WTF::StringImpl::~StringImpl(v6486, v6479, (uint64_t)v6480, v6481, v6482, v6483, v6484, v6485);
      WTF::fastFree(v10702, v10703, v10704, v10705, v10706, v10707, v10708, v10709);
    }
    else
    {
      *(_DWORD *)v6486 -= 2;
    }
  }
  JSC::Symbols::regExpStringIteratorUnicodePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::regExpStringIteratorUnicodePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6480, v6481, v6482, v6483, v6484, v6485, (uint64_t)v11263);
  v6494 = v11264;
  v11264 = 0;
  if (v6494)
  {
    if (*(_DWORD *)v6494 == 2)
    {
      WTF::StringImpl::~StringImpl(v6494, v6487, (uint64_t)v6488, v6489, v6490, v6491, v6492, v6493);
      WTF::fastFree(v10710, v10711, v10712, v10713, v10714, v10715, v10716, v10717);
    }
    else
    {
      *(_DWORD *)v6494 -= 2;
    }
  }
  JSC::Symbols::regExpStringIteratorDonePrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::regExpStringIteratorDonePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6488, v6489, v6490, v6491, v6492, v6493, (uint64_t)v11263);
  v6502 = v11264;
  v11264 = 0;
  if (v6502)
  {
    if (*(_DWORD *)v6502 == 2)
    {
      WTF::StringImpl::~StringImpl(v6502, v6495, (uint64_t)v6496, v6497, v6498, v6499, v6500, v6501);
      WTF::fastFree(v10718, v10719, v10720, v10721, v10722, v10723, v10724, v10725);
    }
    else
    {
      *(_DWORD *)v6502 -= 2;
    }
  }
  JSC::Symbols::stringIncludesInternalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringIncludesInternalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6496, v6497, v6498, v6499, v6500, v6501, (uint64_t)v11263);
  v6510 = v11264;
  v11264 = 0;
  if (v6510)
  {
    if (*(_DWORD *)v6510 == 2)
    {
      WTF::StringImpl::~StringImpl(v6510, v6503, (uint64_t)v6504, v6505, v6506, v6507, v6508, v6509);
      WTF::fastFree(v10726, v10727, v10728, v10729, v10730, v10731, v10732, v10733);
    }
    else
    {
      *(_DWORD *)v6510 -= 2;
    }
  }
  JSC::Symbols::stringIndexOfInternalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringIndexOfInternalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6504, v6505, v6506, v6507, v6508, v6509, (uint64_t)v11263);
  v6518 = v11264;
  v11264 = 0;
  if (v6518)
  {
    if (*(_DWORD *)v6518 == 2)
    {
      WTF::StringImpl::~StringImpl(v6518, v6511, (uint64_t)v6512, v6513, v6514, v6515, v6516, v6517);
      WTF::fastFree(v10734, v10735, v10736, v10737, v10738, v10739, v10740, v10741);
    }
    else
    {
      *(_DWORD *)v6518 -= 2;
    }
  }
  JSC::Symbols::stringSplitFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringSplitFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6512, v6513, v6514, v6515, v6516, v6517, (uint64_t)v11263);
  v6526 = v11264;
  v11264 = 0;
  if (v6526)
  {
    if (*(_DWORD *)v6526 == 2)
    {
      WTF::StringImpl::~StringImpl(v6526, v6519, (uint64_t)v6520, v6521, v6522, v6523, v6524, v6525);
      WTF::fastFree(v10742, v10743, v10744, v10745, v10746, v10747, v10748, v10749);
    }
    else
    {
      *(_DWORD *)v6526 -= 2;
    }
  }
  JSC::Symbols::stringSubstringPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::stringSubstringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6520, v6521, v6522, v6523, v6524, v6525, (uint64_t)v11263);
  v6534 = v11264;
  v11264 = 0;
  if (v6534)
  {
    if (*(_DWORD *)v6534 == 2)
    {
      WTF::StringImpl::~StringImpl(v6534, v6527, (uint64_t)v6528, v6529, v6530, v6531, v6532, v6533);
      WTF::fastFree(v10750, v10751, v10752, v10753, v10754, v10755, v10756, v10757);
    }
    else
    {
      *(_DWORD *)v6534 -= 2;
    }
  }
  JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6528, v6529, v6530, v6531, v6532, v6533, (uint64_t)v11263);
  v6542 = v11264;
  v11264 = 0;
  if (v6542)
  {
    if (*(_DWORD *)v6542 == 2)
    {
      WTF::StringImpl::~StringImpl(v6542, v6535, (uint64_t)v6536, v6537, v6538, v6539, v6540, v6541);
      WTF::fastFree(v10758, v10759, v10760, v10761, v10762, v10763, v10764, v10765);
    }
    else
    {
      *(_DWORD *)v6542 -= 2;
    }
  }
  JSC::Symbols::handlePositiveProxySetTrapResultPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::handlePositiveProxySetTrapResultPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6536, v6537, v6538, v6539, v6540, v6541, (uint64_t)v11263);
  v6550 = v11264;
  v11264 = 0;
  if (v6550)
  {
    if (*(_DWORD *)v6550 == 2)
    {
      WTF::StringImpl::~StringImpl(v6550, v6543, (uint64_t)v6544, v6545, v6546, v6547, v6548, v6549);
      WTF::fastFree(v10766, v10767, v10768, v10769, v10770, v10771, v10772, v10773);
    }
    else
    {
      *(_DWORD *)v6550 -= 2;
    }
  }
  JSC::Symbols::handleProxyGetTrapResultPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::handleProxyGetTrapResultPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6544, v6545, v6546, v6547, v6548, v6549, (uint64_t)v11263);
  v6558 = v11264;
  v11264 = 0;
  if (v6558)
  {
    if (*(_DWORD *)v6558 == 2)
    {
      WTF::StringImpl::~StringImpl(v6558, v6551, (uint64_t)v6552, v6553, v6554, v6555, v6556, v6557);
      WTF::fastFree(v10774, v10775, v10776, v10777, v10778, v10779, v10780, v10781);
    }
    else
    {
      *(_DWORD *)v6558 -= 2;
    }
  }
  JSC::Symbols::importModulePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::importModulePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6552, v6553, v6554, v6555, v6556, v6557, (uint64_t)v11263);
  v6566 = v11264;
  v11264 = 0;
  if (v6566)
  {
    if (*(_DWORD *)v6566 == 2)
    {
      WTF::StringImpl::~StringImpl(v6566, v6559, (uint64_t)v6560, v6561, v6562, v6563, v6564, v6565);
      WTF::fastFree(v10782, v10783, v10784, v10785, v10786, v10787, v10788, v10789);
    }
    else
    {
      *(_DWORD *)v6566 -= 2;
    }
  }
  JSC::Symbols::copyDataPropertiesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::copyDataPropertiesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6560, v6561, v6562, v6563, v6564, v6565, (uint64_t)v11263);
  v6574 = v11264;
  v11264 = 0;
  if (v6574)
  {
    if (*(_DWORD *)v6574 == 2)
    {
      WTF::StringImpl::~StringImpl(v6574, v6567, (uint64_t)v6568, v6569, v6570, v6571, v6572, v6573);
      WTF::fastFree(v10790, v10791, v10792, v10793, v10794, v10795, v10796, v10797);
    }
    else
    {
      *(_DWORD *)v6574 -= 2;
    }
  }
  JSC::Symbols::cloneObjectPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::cloneObjectPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6568, v6569, v6570, v6571, v6572, v6573, (uint64_t)v11263);
  v6582 = v11264;
  v11264 = 0;
  if (v6582)
  {
    if (*(_DWORD *)v6582 == 2)
    {
      WTF::StringImpl::~StringImpl(v6582, v6575, (uint64_t)v6576, v6577, v6578, v6579, v6580, v6581);
      WTF::fastFree(v10798, v10799, v10800, v10801, v10802, v10803, v10804, v10805);
    }
    else
    {
      *(_DWORD *)v6582 -= 2;
    }
  }
  JSC::Symbols::metaPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::metaPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6576, v6577, v6578, v6579, v6580, v6581, (uint64_t)v11263);
  v6590 = v11264;
  v11264 = 0;
  if (v6590)
  {
    if (*(_DWORD *)v6590 == 2)
    {
      WTF::StringImpl::~StringImpl(v6590, v6583, (uint64_t)v6584, v6585, v6586, v6587, v6588, v6589);
      WTF::fastFree(v10806, v10807, v10808, v10809, v10810, v10811, v10812, v10813);
    }
    else
    {
      *(_DWORD *)v6590 -= 2;
    }
  }
  JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6584, v6585, v6586, v6587, v6588, v6589, (uint64_t)v11263);
  v6598 = v11264;
  v11264 = 0;
  if (v6598)
  {
    if (*(_DWORD *)v6598 == 2)
    {
      WTF::StringImpl::~StringImpl(v6598, v6591, (uint64_t)v6592, v6593, v6594, v6595, v6596, v6597);
      WTF::fastFree(v10814, v10815, v10816, v10817, v10818, v10819, v10820, v10821);
    }
    else
    {
      *(_DWORD *)v6598 -= 2;
    }
  }
  JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6592, v6593, v6594, v6595, v6596, v6597, (uint64_t)v11263);
  v6606 = v11264;
  v11264 = 0;
  if (v6606)
  {
    if (*(_DWORD *)v6606 == 2)
    {
      WTF::StringImpl::~StringImpl(v6606, v6599, (uint64_t)v6600, v6601, v6602, v6603, v6604, v6605);
      WTF::fastFree(v10822, v10823, v10824, v10825, v10826, v10827, v10828, v10829);
    }
    else
    {
      *(_DWORD *)v6606 -= 2;
    }
  }
  JSC::Symbols::instanceFieldInitializerPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::instanceFieldInitializerPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6600, v6601, v6602, v6603, v6604, v6605, (uint64_t)v11263);
  v6614 = v11264;
  v11264 = 0;
  if (v6614)
  {
    if (*(_DWORD *)v6614 == 2)
    {
      WTF::StringImpl::~StringImpl(v6614, v6607, (uint64_t)v6608, v6609, v6610, v6611, v6612, v6613);
      WTF::fastFree(v10830, v10831, v10832, v10833, v10834, v10835, v10836, v10837);
    }
    else
    {
      *(_DWORD *)v6614 -= 2;
    }
  }
  JSC::Symbols::privateBrandPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6608, v6609, v6610, v6611, v6612, v6613, (uint64_t)v11263);
  v6622 = v11264;
  v11264 = 0;
  if (v6622)
  {
    if (*(_DWORD *)v6622 == 2)
    {
      WTF::StringImpl::~StringImpl(v6622, v6615, (uint64_t)v6616, v6617, v6618, v6619, v6620, v6621);
      WTF::fastFree(v10838, v10839, v10840, v10841, v10842, v10843, v10844, v10845);
    }
    else
    {
      *(_DWORD *)v6622 -= 2;
    }
  }
  JSC::Symbols::privateClassBrandPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6616, v6617, v6618, v6619, v6620, v6621, (uint64_t)v11263);
  v6630 = v11264;
  v11264 = 0;
  if (v6630)
  {
    if (*(_DWORD *)v6630 == 2)
    {
      WTF::StringImpl::~StringImpl(v6630, v6623, (uint64_t)v6624, v6625, v6626, v6627, v6628, v6629);
      WTF::fastFree(v10846, v10847, v10848, v10849, v10850, v10851, v10852, v10853);
    }
    else
    {
      *(_DWORD *)v6630 -= 2;
    }
  }
  JSC::Symbols::hasOwnPropertyFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasOwnPropertyFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6624, v6625, v6626, v6627, v6628, v6629, (uint64_t)v11263);
  v6638 = v11264;
  v11264 = 0;
  if (v6638)
  {
    if (*(_DWORD *)v6638 == 2)
    {
      WTF::StringImpl::~StringImpl(v6638, v6631, (uint64_t)v6632, v6633, v6634, v6635, v6636, v6637);
      WTF::fastFree(v10854, v10855, v10856, v10857, v10858, v10859, v10860, v10861);
    }
    else
    {
      *(_DWORD *)v6638 -= 2;
    }
  }
  JSC::Symbols::createPrivateSymbolPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createPrivateSymbolPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6632, v6633, v6634, v6635, v6636, v6637, (uint64_t)v11263);
  v6646 = v11264;
  v11264 = 0;
  if (v6646)
  {
    if (*(_DWORD *)v6646 == 2)
    {
      WTF::StringImpl::~StringImpl(v6646, v6639, (uint64_t)v6640, v6641, v6642, v6643, v6644, v6645);
      WTF::fastFree(v10862, v10863, v10864, v10865, v10866, v10867, v10868, v10869);
    }
    else
    {
      *(_DWORD *)v6646 -= 2;
    }
  }
  JSC::Symbols::entriesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::entriesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6640, v6641, v6642, v6643, v6644, v6645, (uint64_t)v11263);
  v6654 = v11264;
  v11264 = 0;
  if (v6654)
  {
    if (*(_DWORD *)v6654 == 2)
    {
      WTF::StringImpl::~StringImpl(v6654, v6647, (uint64_t)v6648, v6649, v6650, v6651, v6652, v6653);
      WTF::fastFree(v10870, v10871, v10872, v10873, v10874, v10875, v10876, v10877);
    }
    else
    {
      *(_DWORD *)v6654 -= 2;
    }
  }
  JSC::Symbols::outOfLineReactionCountsPrivateName += 2;
  v11264 = (WTF::StringImpl *)&JSC::Symbols::outOfLineReactionCountsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6648, v6649, v6650, v6651, v6652, v6653, (uint64_t)v11263);
  v6662 = v11264;
  v11264 = 0;
  if (v6662)
  {
    if (*(_DWORD *)v6662 == 2)
    {
      WTF::StringImpl::~StringImpl(v6662, v6655, (uint64_t)v6656, v6657, v6658, v6659, v6660, v6661);
      WTF::fastFree(v10878, v10879, v10880, v10881, v10882, v10883, v10884, v10885);
    }
    else
    {
      *(_DWORD *)v6662 -= 2;
    }
  }
  JSC::Symbols::emptyPropertyNameEnumeratorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::emptyPropertyNameEnumeratorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6656, v6657, v6658, v6659, v6660, v6661, (uint64_t)v11263);
  v6670 = v11264;
  v11264 = 0;
  if (v6670)
  {
    if (*(_DWORD *)v6670 == 2)
    {
      WTF::StringImpl::~StringImpl(v6670, v6663, (uint64_t)v6664, v6665, v6666, v6667, v6668, v6669);
      WTF::fastFree(v10886, v10887, v10888, v10889, v10890, v10891, v10892, v10893);
    }
    else
    {
      *(_DWORD *)v6670 -= 2;
    }
  }
  JSC::Symbols::sentinelStringPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::sentinelStringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6664, v6665, v6666, v6667, v6668, v6669, (uint64_t)v11263);
  v6678 = v11264;
  v11264 = 0;
  if (v6678)
  {
    if (*(_DWORD *)v6678 == 2)
    {
      WTF::StringImpl::~StringImpl(v6678, v6671, (uint64_t)v6672, v6673, v6674, v6675, v6676, v6677);
      WTF::fastFree(v10894, v10895, v10896, v10897, v10898, v10899, v10900, v10901);
    }
    else
    {
      *(_DWORD *)v6678 -= 2;
    }
  }
  JSC::Symbols::createRemoteFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::createRemoteFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6672, v6673, v6674, v6675, v6676, v6677, (uint64_t)v11263);
  v6686 = v11264;
  v11264 = 0;
  if (v6686)
  {
    if (*(_DWORD *)v6686 == 2)
    {
      WTF::StringImpl::~StringImpl(v6686, v6679, (uint64_t)v6680, v6681, v6682, v6683, v6684, v6685);
      WTF::fastFree(v10902, v10903, v10904, v10905, v10906, v10907, v10908, v10909);
    }
    else
    {
      *(_DWORD *)v6686 -= 2;
    }
  }
  JSC::Symbols::isRemoteFunctionPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::isRemoteFunctionPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6680, v6681, v6682, v6683, v6684, v6685, (uint64_t)v11263);
  v6694 = v11264;
  v11264 = 0;
  if (v6694)
  {
    if (*(_DWORD *)v6694 == 2)
    {
      WTF::StringImpl::~StringImpl(v6694, v6687, (uint64_t)v6688, v6689, v6690, v6691, v6692, v6693);
      WTF::fastFree(v10910, v10911, v10912, v10913, v10914, v10915, v10916, v10917);
    }
    else
    {
      *(_DWORD *)v6694 -= 2;
    }
  }
  JSC::Symbols::arrayFromFastPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arrayFromFastPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6688, v6689, v6690, v6691, v6692, v6693, (uint64_t)v11263);
  v6702 = v11264;
  v11264 = 0;
  if (v6702)
  {
    if (*(_DWORD *)v6702 == 2)
    {
      WTF::StringImpl::~StringImpl(v6702, v6695, (uint64_t)v6696, v6697, v6698, v6699, v6700, v6701);
      WTF::fastFree(v10918, v10919, v10920, v10921, v10922, v10923, v10924, v10925);
    }
    else
    {
      *(_DWORD *)v6702 -= 2;
    }
  }
  JSC::Symbols::arraySortPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::arraySortPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6696, v6697, v6698, v6699, v6700, v6701, (uint64_t)v11263);
  v6710 = v11264;
  v11264 = 0;
  if (v6710)
  {
    if (*(_DWORD *)v6710 == 2)
    {
      WTF::StringImpl::~StringImpl(v6710, v6703, (uint64_t)v6704, v6705, v6706, v6707, v6708, v6709);
      WTF::fastFree(v10926, v10927, v10928, v10929, v10930, v10931, v10932, v10933);
    }
    else
    {
      *(_DWORD *)v6710 -= 2;
    }
  }
  JSC::Symbols::jsonParsePrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::jsonParsePrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6704, v6705, v6706, v6707, v6708, v6709, (uint64_t)v11263);
  v6718 = v11264;
  v11264 = 0;
  if (v6718)
  {
    if (*(_DWORD *)v6718 == 2)
    {
      WTF::StringImpl::~StringImpl(v6718, v6711, (uint64_t)v6712, v6713, v6714, v6715, v6716, v6717);
      WTF::fastFree(v10934, v10935, v10936, v10937, v10938, v10939, v10940, v10941);
    }
    else
    {
      *(_DWORD *)v6718 -= 2;
    }
  }
  JSC::Symbols::jsonStringifyPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::jsonStringifyPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6712, v6713, v6714, v6715, v6716, v6717, (uint64_t)v11263);
  v6726 = v11264;
  v11264 = 0;
  if (v6726)
  {
    if (*(_DWORD *)v6726 == 2)
    {
      WTF::StringImpl::~StringImpl(v6726, v6719, (uint64_t)v6720, v6721, v6722, v6723, v6724, v6725);
      WTF::fastFree(v10942, v10943, v10944, v10945, v10946, v10947, v10948, v10949);
    }
    else
    {
      *(_DWORD *)v6726 -= 2;
    }
  }
  JSC::Symbols::StringPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::StringPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6720, v6721, v6722, v6723, v6724, v6725, (uint64_t)v11263);
  v6734 = v11264;
  v11264 = 0;
  if (v6734)
  {
    if (*(_DWORD *)v6734 == 2)
    {
      WTF::StringImpl::~StringImpl(v6734, v6727, (uint64_t)v6728, v6729, v6730, v6731, v6732, v6733);
      WTF::fastFree(v10950, v10951, v10952, v10953, v10954, v10955, v10956, v10957);
    }
    else
    {
      *(_DWORD *)v6734 -= 2;
    }
  }
  JSC::Symbols::substrPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::substrPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6728, v6729, v6730, v6731, v6732, v6733, (uint64_t)v11263);
  v6742 = v11264;
  v11264 = 0;
  if (v6742)
  {
    if (*(_DWORD *)v6742 == 2)
    {
      WTF::StringImpl::~StringImpl(v6742, v6735, (uint64_t)v6736, v6737, v6738, v6739, v6740, v6741);
      WTF::fastFree(v10958, v10959, v10960, v10961, v10962, v10963, v10964, v10965);
    }
    else
    {
      *(_DWORD *)v6742 -= 2;
    }
  }
  JSC::Symbols::endsWithPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::endsWithPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6736, v6737, v6738, v6739, v6740, v6741, (uint64_t)v11263);
  v6750 = v11264;
  v11264 = 0;
  if (v6750)
  {
    if (*(_DWORD *)v6750 == 2)
    {
      WTF::StringImpl::~StringImpl(v6750, v6743, (uint64_t)v6744, v6745, v6746, v6747, v6748, v6749);
      WTF::fastFree(v10966, v10967, v10968, v10969, v10970, v10971, v10972, v10973);
    }
    else
    {
      *(_DWORD *)v6750 -= 2;
    }
  }
  JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertyDescriptorPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6744, v6745, v6746, v6747, v6748, v6749, (uint64_t)v11263);
  v6758 = v11264;
  v11264 = 0;
  if (v6758)
  {
    if (*(_DWORD *)v6758 == 2)
    {
      WTF::StringImpl::~StringImpl(v6758, v6751, (uint64_t)v6752, v6753, v6754, v6755, v6756, v6757);
      WTF::fastFree(v10974, v10975, v10976, v10977, v10978, v10979, v10980, v10981);
    }
    else
    {
      *(_DWORD *)v6758 -= 2;
    }
  }
  JSC::Symbols::getOwnPropertyNamesPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertyNamesPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6752, v6753, v6754, v6755, v6756, v6757, (uint64_t)v11263);
  v6766 = v11264;
  v11264 = 0;
  if (v6766)
  {
    if (*(_DWORD *)v6766 == 2)
    {
      WTF::StringImpl::~StringImpl(v6766, v6759, (uint64_t)v6760, v6761, v6762, v6763, v6764, v6765);
      WTF::fastFree(v10982, v10983, v10984, v10985, v10986, v10987, v10988, v10989);
    }
    else
    {
      *(_DWORD *)v6766 -= 2;
    }
  }
  JSC::Symbols::getOwnPropertySymbolsPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertySymbolsPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6760, v6761, v6762, v6763, v6764, v6765, (uint64_t)v11263);
  v6774 = v11264;
  v11264 = 0;
  if (v6774)
  {
    if (*(_DWORD *)v6774 == 2)
    {
      WTF::StringImpl::~StringImpl(v6774, v6767, (uint64_t)v6768, v6769, v6770, v6771, v6772, v6773);
      WTF::fastFree(v10990, v10991, v10992, v10993, v10994, v10995, v10996, v10997);
    }
    else
    {
      *(_DWORD *)v6774 -= 2;
    }
  }
  JSC::Symbols::hasOwnPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::hasOwnPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6768, v6769, v6770, v6771, v6772, v6773, (uint64_t)v11263);
  v6782 = v11264;
  v11264 = 0;
  if (v6782)
  {
    if (*(_DWORD *)v6782 == 2)
    {
      WTF::StringImpl::~StringImpl(v6782, v6775, (uint64_t)v6776, v6777, v6778, v6779, v6780, v6781);
      WTF::fastFree(v10998, v10999, v11000, v11001, v11002, v11003, v11004, v11005);
    }
    else
    {
      *(_DWORD *)v6782 -= 2;
    }
  }
  JSC::Symbols::indexOfPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::indexOfPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6776, v6777, v6778, v6779, v6780, v6781, (uint64_t)v11263);
  v6790 = v11264;
  v11264 = 0;
  if (v6790)
  {
    if (*(_DWORD *)v6790 == 2)
    {
      WTF::StringImpl::~StringImpl(v6790, v6783, (uint64_t)v6784, v6785, v6786, v6787, v6788, v6789);
      WTF::fastFree(v11006, v11007, v11008, v11009, v11010, v11011, v11012, v11013);
    }
    else
    {
      *(_DWORD *)v6790 -= 2;
    }
  }
  JSC::Symbols::popPrivateName[0] += 2;
  v11264 = (WTF::StringImpl *)JSC::Symbols::popPrivateName;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6784, v6785, v6786, v6787, v6788, v6789, (uint64_t)v11263);
  v6798 = v11264;
  v11264 = 0;
  if (v6798)
  {
    if (*(_DWORD *)v6798 == 2)
    {
      WTF::StringImpl::~StringImpl(v6798, v6791, v6792, v6793, v6794, v6795, v6796, v6797);
      WTF::fastFree(v11014, v11015, v11016, v11017, v11018, v11019, v11020, v11021);
    }
    else
    {
      *(_DWORD *)v6798 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4104);
  v6799 = *(WTF::StringImpl **)(a1 + 4112);
  if (v6799)
    *(_DWORD *)v6799 += 2;
  v11262 = v6799;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6794, v6795, v6796, v6797);
  v6807 = v11262;
  v11262 = 0;
  if (v6807)
  {
    if (*(_DWORD *)v6807 == 2)
    {
      WTF::StringImpl::~StringImpl(v6807, v6800, v6801, v6802, v6803, v6804, v6805, v6806);
      WTF::fastFree(v11022, v11023, v11024, v11025, v11026, v11027, v11028, v11029);
    }
    else
    {
      *(_DWORD *)v6807 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4120);
  v6808 = *(WTF::StringImpl **)(a1 + 4128);
  if (v6808)
    *(_DWORD *)v6808 += 2;
  v11262 = v6808;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6803, v6804, v6805, v6806);
  v6816 = v11262;
  v11262 = 0;
  if (v6816)
  {
    if (*(_DWORD *)v6816 == 2)
    {
      WTF::StringImpl::~StringImpl(v6816, v6809, v6810, v6811, v6812, v6813, v6814, v6815);
      WTF::fastFree(v11030, v11031, v11032, v11033, v11034, v11035, v11036, v11037);
    }
    else
    {
      *(_DWORD *)v6816 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4136);
  v6817 = *(WTF::StringImpl **)(a1 + 4144);
  if (v6817)
    *(_DWORD *)v6817 += 2;
  v11262 = v6817;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6812, v6813, v6814, v6815);
  v6825 = v11262;
  v11262 = 0;
  if (v6825)
  {
    if (*(_DWORD *)v6825 == 2)
    {
      WTF::StringImpl::~StringImpl(v6825, v6818, v6819, v6820, v6821, v6822, v6823, v6824);
      WTF::fastFree(v11038, v11039, v11040, v11041, v11042, v11043, v11044, v11045);
    }
    else
    {
      *(_DWORD *)v6825 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4152);
  v6826 = *(WTF::StringImpl **)(a1 + 4160);
  if (v6826)
    *(_DWORD *)v6826 += 2;
  v11262 = v6826;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6821, v6822, v6823, v6824);
  v6834 = v11262;
  v11262 = 0;
  if (v6834)
  {
    if (*(_DWORD *)v6834 == 2)
    {
      WTF::StringImpl::~StringImpl(v6834, v6827, v6828, v6829, v6830, v6831, v6832, v6833);
      WTF::fastFree(v11046, v11047, v11048, v11049, v11050, v11051, v11052, v11053);
    }
    else
    {
      *(_DWORD *)v6834 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4168);
  v6835 = *(WTF::StringImpl **)(a1 + 4176);
  if (v6835)
    *(_DWORD *)v6835 += 2;
  v11262 = v6835;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6830, v6831, v6832, v6833);
  v6843 = v11262;
  v11262 = 0;
  if (v6843)
  {
    if (*(_DWORD *)v6843 == 2)
    {
      WTF::StringImpl::~StringImpl(v6843, v6836, v6837, v6838, v6839, v6840, v6841, v6842);
      WTF::fastFree(v11054, v11055, v11056, v11057, v11058, v11059, v11060, v11061);
    }
    else
    {
      *(_DWORD *)v6843 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4184);
  v6844 = *(WTF::StringImpl **)(a1 + 4192);
  if (v6844)
    *(_DWORD *)v6844 += 2;
  v11262 = v6844;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6839, v6840, v6841, v6842);
  v6852 = v11262;
  v11262 = 0;
  if (v6852)
  {
    if (*(_DWORD *)v6852 == 2)
    {
      WTF::StringImpl::~StringImpl(v6852, v6845, v6846, v6847, v6848, v6849, v6850, v6851);
      WTF::fastFree(v11062, v11063, v11064, v11065, v11066, v11067, v11068, v11069);
    }
    else
    {
      *(_DWORD *)v6852 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4200);
  v6853 = *(WTF::StringImpl **)(a1 + 4208);
  if (v6853)
    *(_DWORD *)v6853 += 2;
  v11262 = v6853;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6848, v6849, v6850, v6851);
  v6861 = v11262;
  v11262 = 0;
  if (v6861)
  {
    if (*(_DWORD *)v6861 == 2)
    {
      WTF::StringImpl::~StringImpl(v6861, v6854, v6855, v6856, v6857, v6858, v6859, v6860);
      WTF::fastFree(v11070, v11071, v11072, v11073, v11074, v11075, v11076, v11077);
    }
    else
    {
      *(_DWORD *)v6861 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4216);
  v6862 = *(WTF::StringImpl **)(a1 + 4224);
  if (v6862)
    *(_DWORD *)v6862 += 2;
  v11262 = v6862;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6857, v6858, v6859, v6860);
  v6870 = v11262;
  v11262 = 0;
  if (v6870)
  {
    if (*(_DWORD *)v6870 == 2)
    {
      WTF::StringImpl::~StringImpl(v6870, v6863, v6864, v6865, v6866, v6867, v6868, v6869);
      WTF::fastFree(v11078, v11079, v11080, v11081, v11082, v11083, v11084, v11085);
    }
    else
    {
      *(_DWORD *)v6870 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4232);
  v6871 = *(WTF::StringImpl **)(a1 + 4240);
  if (v6871)
    *(_DWORD *)v6871 += 2;
  v11262 = v6871;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6866, v6867, v6868, v6869);
  v6879 = v11262;
  v11262 = 0;
  if (v6879)
  {
    if (*(_DWORD *)v6879 == 2)
    {
      WTF::StringImpl::~StringImpl(v6879, v6872, v6873, v6874, v6875, v6876, v6877, v6878);
      WTF::fastFree(v11086, v11087, v11088, v11089, v11090, v11091, v11092, v11093);
    }
    else
    {
      *(_DWORD *)v6879 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4248);
  v6880 = *(WTF::StringImpl **)(a1 + 4256);
  if (v6880)
    *(_DWORD *)v6880 += 2;
  v11262 = v6880;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6875, v6876, v6877, v6878);
  v6888 = v11262;
  v11262 = 0;
  if (v6888)
  {
    if (*(_DWORD *)v6888 == 2)
    {
      WTF::StringImpl::~StringImpl(v6888, v6881, v6882, v6883, v6884, v6885, v6886, v6887);
      WTF::fastFree(v11094, v11095, v11096, v11097, v11098, v11099, v11100, v11101);
    }
    else
    {
      *(_DWORD *)v6888 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4264);
  v6889 = *(WTF::StringImpl **)(a1 + 4272);
  if (v6889)
    *(_DWORD *)v6889 += 2;
  v11262 = v6889;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6884, v6885, v6886, v6887);
  v6897 = v11262;
  v11262 = 0;
  if (v6897)
  {
    if (*(_DWORD *)v6897 == 2)
    {
      WTF::StringImpl::~StringImpl(v6897, v6890, v6891, v6892, v6893, v6894, v6895, v6896);
      WTF::fastFree(v11102, v11103, v11104, v11105, v11106, v11107, v11108, v11109);
    }
    else
    {
      *(_DWORD *)v6897 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4280);
  v6898 = *(WTF::StringImpl **)(a1 + 4288);
  if (v6898)
    *(_DWORD *)v6898 += 2;
  v11262 = v6898;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6893, v6894, v6895, v6896);
  v6906 = v11262;
  v11262 = 0;
  if (v6906)
  {
    if (*(_DWORD *)v6906 == 2)
    {
      WTF::StringImpl::~StringImpl(v6906, v6899, v6900, v6901, v6902, v6903, v6904, v6905);
      WTF::fastFree(v11110, v11111, v11112, v11113, v11114, v11115, v11116, v11117);
    }
    else
    {
      *(_DWORD *)v6906 -= 2;
    }
  }
  v11264 = *(WTF::StringImpl **)(a1 + 4296);
  v6907 = *(WTF::StringImpl **)(a1 + 4304);
  if (v6907)
    *(_DWORD *)v6907 += 2;
  v11262 = v6907;
  WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>((uint64_t)v11263, a1 + 4368, &v11262, &v11264, v6902, v6903, v6904, v6905);
  v6915 = v11262;
  v11262 = 0;
  if (v6915)
  {
    if (*(_DWORD *)v6915 == 2)
    {
      WTF::StringImpl::~StringImpl(v6915, v6908, (uint64_t)v6909, v6910, v6911, v6912, v6913, v6914);
      WTF::fastFree(v11118, v11119, v11120, v11121, v11122, v11123, v11124, v11125);
    }
    else
    {
      *(_DWORD *)v6915 -= 2;
    }
  }
  v6916 = *(WTF::StringImpl **)(a1 + 4328);
  if (v6916)
    *(_DWORD *)v6916 += 2;
  v11264 = v6916;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1 + 4344, &v11264, v6909, v6910, v6911, v6912, v6913, v6914, (uint64_t)v11263);
  v6924 = v11264;
  v11264 = 0;
  if (v6924)
  {
    if (*(_DWORD *)v6924 == 2)
    {
      WTF::StringImpl::~StringImpl(v6924, v6917, v6918, v6919, v6920, v6921, v6922, v6923);
      WTF::fastFree(v11126, v11127, v11128, v11129, v11130, v11131, v11132, v11133);
    }
    else
    {
      *(_DWORD *)v6924 -= 2;
    }
  }
  return a1;
}

void WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF **v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int i;
  int v30;
  WTF **v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;

  v13 = *(_DWORD *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  if (20 * v12 >= 19 * (unint64_t)v13 || *(_BYTE *)(a1 + 20) && v13 <= 2 * (int)v12)
  {
    if (v13)
      v57 = 2 * v13;
    else
      v57 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 8);
  }
  v14 = v13 - 1;
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *((_DWORD *)*a2 + 4);
  if (v16 < 0x100)
    v17 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v17 = v16 >> 8;
  v18 = (v17 ^ v15) & v14;
  v19 = (WTF **)(*(_QWORD *)a1 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v58 = a9;
    v21 = 0;
    while (1)
    {
      v22 = *((_DWORD *)v20 + 4);
      v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase(v20) : v22 >> 8;
      v24 = (v18 + v13 - ((v23 ^ v15) & v14)) & v14;
      if (v21 > v24)
        break;
      if (v23 == v17)
      {
        v56 = WTF::equal(*v19, *a2, a3);
        v25 = *(_QWORD *)a1;
        if (v56)
        {
          v38 = 0;
          a9 = v58;
          goto LABEL_36;
        }
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      v18 = (v18 + 1) & v14;
      ++v21;
      v19 = (WTF **)(v25 + 8 * v18);
      v20 = *v19;
      if (!*v19)
      {
        if (v21 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        a9 = v58;
        goto LABEL_32;
      }
    }
    if (v21 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v26 = *v19;
    *v19 = 0;
    v27 = *a2;
    *a2 = 0;
    v28 = *v19;
    *v19 = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    for (i = v18 + 1; ; i = v30 + 1)
    {
      v30 = i & v14;
      v31 = (WTF **)(*(_QWORD *)a1 + 8 * (i & v14));
      v32 = *v31;
      if (!*v31)
        break;
      v33 = *((_DWORD *)v32 + 4);
      if (v33 < 0x100)
        v34 = WTF::StringImpl::hashSlowCase(v32);
      else
        v34 = v33 >> 8;
      if (++v24 > ((v30 + v13 - ((v34 ^ v15) & v14)) & v14))
      {
        v35 = *v31;
        *v31 = v26;
        v26 = v35;
        v24 = (v30 + v13 - ((v34 ^ v15) & v14)) & v14;
      }
    }
    *v31 = v26;
    a9 = v58;
  }
  else
  {
LABEL_32:
    v36 = *a2;
    *a2 = 0;
    v37 = *v19;
    *v19 = v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      else
      {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  ++*(_DWORD *)(a1 + 12);
  v25 = *(_QWORD *)a1;
  v38 = 1;
LABEL_36:
  v39 = v25 + 8 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v39;
  *(_BYTE *)(a9 + 16) = v38;
}

void WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::SymbolImpl *&>(uint64_t a1, unint64_t a2, WTF::StringImpl **a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  char *v44;
  uint64_t v45;
  char v46;
  char *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  unsigned int v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl **v139;
  BOOL v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  unsigned int v143;
  WTF::StringImpl **v144;
  WTF *v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v153;
  uint64_t v154;

  v11 = *(unsigned int *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 12);
  if (20 * v10 < 19 * (unint64_t)v11 && (!*(_BYTE *)(a2 + 20) || v11 > 2 * (int)v10))
    goto LABEL_3;
  if ((_DWORD)v11)
    v66 = 2 * v11;
  else
    v66 = 8;
  v144 = a3;
  v145 = *(WTF **)a2;
  v148 = *(unsigned int *)(a2 + 8);
  v67 = WTF::fastZeroedMalloc(16 * v66, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v70 = v148;
  *(_QWORD *)a2 = v67;
  *(_DWORD *)(a2 + 8) = v66;
  v71 = (~(v67 << 32) + v67) ^ ((~(v67 << 32) + v67) >> 22);
  v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
  v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
  *(_DWORD *)(a2 + 16) = (v73 >> 31) ^ v73;
  *(_BYTE *)(a2 + 20) = 0;
  if ((_DWORD)v148)
  {
    v74 = 0;
    v75 = (unint64_t)v145;
    v151 = a1;
    do
    {
      v76 = (WTF::StringImpl **)(v75 + 16 * v74);
      v77 = *v76;
      if (*v76)
      {
        v78 = *(_DWORD *)(a2 + 8);
        v79 = *(_DWORD *)(a2 + 16);
        v80 = *((_DWORD *)v77 + 4);
        if (v80 < 0x100)
        {
          v81 = WTF::StringImpl::hashSlowCase(v77);
          v75 = (unint64_t)v145;
          v70 = v148;
        }
        else
        {
          v81 = v80 >> 8;
        }
        v82 = v78 - 1;
        v83 = (v81 ^ v79) & (v78 - 1);
        v84 = *(WTF **)a2;
        v85 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v83);
        v86 = *v85;
        if (*v85)
        {
          v106 = 0;
          do
          {
            v107 = *((_DWORD *)v86 + 4);
            if (v107 < 0x100)
            {
              v108 = WTF::StringImpl::hashSlowCase(v86);
              v75 = (unint64_t)v145;
              v70 = v148;
            }
            else
            {
              v108 = v107 >> 8;
            }
            v109 = (v83 + v78 - ((v108 ^ v79) & v82)) & v82;
            if (v106 > v109)
            {
              v110 = v75 + 16 * v74;
              v113 = *(_QWORD *)(v110 + 8);
              v112 = (_QWORD *)(v110 + 8);
              v111 = v113;
              v114 = *v76;
              *v76 = 0;
              v115 = *v85;
              *v85 = 0;
              v116 = *v76;
              *v76 = v115;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                {
                  v143 = v109;
                  v141 = v114;
                  v142 = v111;
                  WTF::StringImpl::~StringImpl(v116, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
                  v114 = v141;
                  v111 = v142;
                  v109 = v143;
                  v75 = (unint64_t)v145;
                  v70 = v148;
                }
                else
                {
                  *(_DWORD *)v116 -= 2;
                }
              }
              v117 = (char *)v84 + 16 * v83;
              v119 = *((_QWORD *)v117 + 1);
              v118 = v117 + 8;
              *v112 = v119;
              v120 = *v85;
              *v85 = v114;
              if (v120)
              {
                if (*(_DWORD *)v120 == 2)
                {
                  v129 = v109;
                  v130 = v111;
                  WTF::StringImpl::~StringImpl(v120, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
                  v111 = v130;
                  v109 = v129;
                  v75 = (unint64_t)v145;
                  v70 = v148;
                }
                else
                {
                  *(_DWORD *)v120 -= 2;
                }
              }
              *v118 = v111;
              v106 = v109;
            }
            v83 = ((_DWORD)v83 + 1) & v82;
            ++v106;
            v84 = *(WTF **)a2;
            v85 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v83);
            v86 = *v85;
          }
          while (*v85);
        }
        v87 = *v76;
        *v76 = 0;
        v88 = *v85;
        *v85 = v87;
        a1 = v151;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
          {
            WTF::StringImpl::~StringImpl(v88, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
            v75 = (unint64_t)v145;
            v70 = v148;
          }
          else
          {
            *(_DWORD *)v88 -= 2;
          }
        }
        *((_QWORD *)v84 + 2 * v83 + 1) = *(_QWORD *)(v75 + 16 * v74 + 8);
        v89 = *v76;
        *v76 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
          {
            WTF::StringImpl::~StringImpl(v89, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
            v75 = (unint64_t)v145;
            v70 = v148;
          }
          else
          {
            *(_DWORD *)v89 -= 2;
          }
        }
      }
      else
      {
        *v76 = 0;
      }
      ++v74;
    }
    while (v74 != v70);
    goto LABEL_66;
  }
  v75 = (unint64_t)v145;
  if (v145)
  {
LABEL_66:
    WTF::fastFree(v75, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
    v11 = *(unsigned int *)(a2 + 8);
    goto LABEL_67;
  }
  v11 = 8;
LABEL_67:
  a3 = v144;
LABEL_3:
  v12 = v11 - 1;
  v13 = *(_DWORD *)(a2 + 16);
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
  {
    v55 = v11;
    v56 = a3;
    v57 = WTF::StringImpl::hashSlowCase(*a3);
    a3 = v56;
    v11 = v55;
    v15 = v57;
  }
  else
  {
    v15 = v14 >> 8;
  }
  v16 = (v15 ^ v13) & v12;
  v17 = *(WTF **)a2;
  v18 = *(_QWORD *)a2 + 16 * v16;
  v19 = *(WTF **)v18;
  if (*(_QWORD *)v18)
  {
    v20 = 0;
    while (1)
    {
      v21 = *((_DWORD *)v19 + 4);
      if (v21 < 0x100)
      {
        v24 = v11;
        v146 = v13;
        v25 = a3;
        v22 = WTF::StringImpl::hashSlowCase(v19);
        a3 = v25;
        v13 = v146;
        v11 = v24;
      }
      else
      {
        v22 = v21 >> 8;
      }
      v23 = (v16 + v11 - ((v22 ^ v13) & v12)) & v12;
      if (v20 > v23)
        break;
      if (v22 == v15)
      {
        v149 = v11;
        v139 = a3;
        v140 = WTF::equal(*(WTF **)v18, *a3, (const WTF::StringImpl *)a3);
        v17 = *(WTF **)a2;
        if (v140)
        {
          v46 = 0;
          goto LABEL_30;
        }
        v11 = v149;
        a3 = v139;
      }
      else
      {
        v17 = *(WTF **)a2;
      }
      v16 = ((_DWORD)v16 + 1) & v12;
      ++v20;
      v18 = (uint64_t)v17 + 16 * v16;
      v19 = *(WTF **)v18;
      if (!*(_QWORD *)v18)
      {
        if (v20 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        goto LABEL_28;
      }
    }
    v147 = v11;
    v150 = a1;
    if (v20 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v26 = *(WTF::StringImpl **)v18;
    *(_QWORD *)v18 = 0;
    v153 = v26;
    v27 = (char *)v17 + 16 * v16;
    v154 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v18, (WTF::AtomStringImpl *)a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *((_QWORD *)v27 + 1) = *a4;
    v34 = ((_DWORD)v16 + 1) & v12;
    v35 = *(WTF **)a2;
    v36 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v34);
    v37 = *v36;
    if (*v36)
    {
      v39 = v153;
      v38 = v154;
      v40 = v147;
      do
      {
        v41 = *((_DWORD *)v37 + 4);
        if (v41 < 0x100)
        {
          v42 = WTF::StringImpl::hashSlowCase(v37);
          v40 = v147;
        }
        else
        {
          v42 = v41 >> 8;
        }
        if (++v23 > (((_DWORD)v34 + v40 - ((v42 ^ v13) & v12)) & v12))
        {
          v43 = *v36;
          *v36 = 0;
          v44 = (char *)v35 + 16 * v34;
          v45 = *((_QWORD *)v44 + 1);
          *v36 = v39;
          *((_QWORD *)v44 + 1) = v38;
          v38 = v45;
          v39 = v43;
          v23 = (v34 + v40 - ((v42 ^ v13) & v12)) & v12;
        }
        v34 = ((_DWORD)v34 + 1) & v12;
        v35 = *(WTF **)a2;
        v36 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v34);
        v37 = *v36;
      }
      while (*v36);
      v153 = v39;
      v154 = v38;
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>,WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>((uint64_t)v36, (WTF::AtomStringImpl *)&v153, v28, v29, v30, v31, v32, v33);
    a1 = v150;
    if (v153)
    {
      if (*(_DWORD *)v153 == 2)
      {
        WTF::StringImpl::~StringImpl(v153, v48, v49, v50, v51, v52, v53, v54);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v153 -= 2;
      }
    }
  }
  else
  {
LABEL_28:
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v18, (WTF::AtomStringImpl *)a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *((_QWORD *)v17 + 2 * v16 + 1) = *a4;
  }
  ++*(_DWORD *)(a2 + 12);
  v17 = *(WTF **)a2;
  v46 = 1;
LABEL_30:
  v47 = (char *)v17 + 16 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v47;
  *(_BYTE *)(a1 + 16) = v46;
}

uint64_t JSC::BuiltinNames::lookUpPrivateName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  unsigned int v26;

  v6 = -1640531527;
  if (a3 >= 2)
  {
    v7 = 0;
    do
    {
      v8 = (*(unsigned __int8 *)(a2 + v7 + 1) << 11) ^ ((v6 + *(unsigned __int8 *)(a2 + v7)) << 16) ^ (v6 + *(unsigned __int8 *)(a2 + v7));
      v6 = v8 + (v8 >> 11);
      v9 = v7 + 3;
      v7 += 2;
    }
    while (v9 < a3);
  }
  if ((a3 & 1) != 0)
    v6 = ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11))
       + (((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11)) >> 17);
  v10 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v12 = (v11 ^ (v11 << 10)) & 0xFFFFFF;
  if (v12)
    v13 = v12;
  else
    v13 = 0x800000;
  v14 = *(_QWORD *)(a1 + 4344);
  v15 = *(unsigned int *)(a1 + 4352);
  if (v14)
  {
    v16 = v15 - 1;
    v17 = *(_DWORD *)(a1 + 4360);
    v18 = (v17 ^ v13) & (v15 - 1);
    v19 = (uint64_t *)(v14 + 8 * v18);
    v20 = (WTF::StringImpl *)*v19;
    if (*v19)
    {
      v21 = -1;
      while (1)
      {
        v22 = *((_DWORD *)v20 + 4);
        v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase(v20) : v22 >> 8;
        if (++v21 > ((v18 + v15 - ((v23 ^ v17) & v16)) & v16))
          break;
        if (v23 == v13)
        {
          v24 = WTF::equalInternal<unsigned char>(*v19, a2, a3);
          v14 = *(_QWORD *)(a1 + 4344);
          if (v24)
          {
            v15 = *(unsigned int *)(a1 + 4352);
            goto LABEL_23;
          }
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 4344);
        }
        v18 = (v18 + 1) & v16;
        v19 = (uint64_t *)(v14 + 8 * v18);
        v20 = (WTF::StringImpl *)*v19;
        if (!*v19)
          goto LABEL_27;
      }
      v14 = *(_QWORD *)(a1 + 4344);
LABEL_27:
      v26 = *(_DWORD *)(a1 + 4352);
    }
    else
    {
      v26 = *(_DWORD *)(a1 + 4352);
    }
    v15 = v26;
    v19 = (uint64_t *)(v14 + 8 * v26);
  }
  else
  {
    v19 = (uint64_t *)(8 * v15);
  }
LABEL_23:
  if ((uint64_t *)(v14 + 8 * v15) == v19)
    return 0;
  else
    return *v19;
}

{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(a2, a3);
  v7 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  v9 = (v8 ^ (v8 << 10)) & 0xFFFFFF;
  if (v9)
    v10 = v9;
  else
    v10 = 0x800000;
  v11 = *(_QWORD *)(a1 + 4344);
  v12 = *(unsigned int *)(a1 + 4352);
  if (v11)
  {
    v13 = v12 - 1;
    v14 = *(_DWORD *)(a1 + 4360);
    v15 = (v14 ^ v10) & (v12 - 1);
    v16 = (uint64_t *)(v11 + 8 * v15);
    v17 = (WTF::StringImpl *)*v16;
    if (*v16)
    {
      v18 = -1;
      while (1)
      {
        v19 = *((_DWORD *)v17 + 4);
        v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(v17) : v19 >> 8;
        if (++v18 > ((v15 + v12 - ((v20 ^ v14) & v13)) & v13))
          break;
        if (v20 == v10)
        {
          v21 = WTF::equalInternal<char16_t>(*v16, a2, a3);
          v11 = *(_QWORD *)(a1 + 4344);
          if (v21)
          {
            v12 = *(unsigned int *)(a1 + 4352);
            goto LABEL_22;
          }
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 4344);
        }
        v15 = (v15 + 1) & v13;
        v16 = (uint64_t *)(v11 + 8 * v15);
        v17 = (WTF::StringImpl *)*v16;
        if (!*v16)
          goto LABEL_20;
      }
      v11 = *(_QWORD *)(a1 + 4344);
LABEL_20:
      v22 = *(_DWORD *)(a1 + 4352);
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 4352);
    }
    v12 = v22;
    v16 = (uint64_t *)(v11 + 8 * v22);
  }
  else
  {
    v16 = (uint64_t *)(8 * v12);
  }
LABEL_22:
  if ((uint64_t *)(v11 + 8 * v12) == v16)
    return 0;
  else
    return *v16;
}

uint64_t JSC::BuiltinNames::lookUpPrivateName(JSC::BuiltinNames *this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    v5 = 0;
LABEL_5:
    v12 = v5;
    v13 = v6;
    v14 = v3;
    v7 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashSetTranslatorAdapter<JSC::CharBufferSeacher<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char>>((uint64_t *)this + 543, (uint64_t)&v12);
    goto LABEL_6;
  }
  v4 = *(_DWORD *)(v3 + 16);
  if ((v4 & 4) != 0)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_DWORD *)(v3 + 4);
    if (v4 < 0x100)
      LODWORD(v3) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v3);
    else
      LODWORD(v3) = v4 >> 8;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(unsigned int *)(v3 + 4);
  if (v4 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v3);
  else
    v11 = v4 >> 8;
  v12 = v9;
  v13 = v10;
  v14 = v11;
  v7 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashSetTranslatorAdapter<JSC::CharBufferSeacher<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t>>((uint64_t *)this + 543, (uint64_t)&v12);
LABEL_6:
  if (*((_QWORD *)this + 543) + 8 * *((unsigned int *)this + 1088) == v7)
    return 0;
  else
    return *(_QWORD *)v7;
}

uint64_t JSC::BuiltinNames::lookUpWellKnownSymbol(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  unsigned int v26;

  v6 = -1640531527;
  if (a3 >= 2)
  {
    v7 = 0;
    do
    {
      v8 = (*(unsigned __int8 *)(a2 + v7 + 1) << 11) ^ ((v6 + *(unsigned __int8 *)(a2 + v7)) << 16) ^ (v6 + *(unsigned __int8 *)(a2 + v7));
      v6 = v8 + (v8 >> 11);
      v9 = v7 + 3;
      v7 += 2;
    }
    while (v9 < a3);
  }
  if ((a3 & 1) != 0)
    v6 = ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11))
       + (((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11)) >> 17);
  v10 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v12 = (v11 ^ (v11 << 10)) & 0xFFFFFF;
  if (v12)
    v13 = v12;
  else
    v13 = 0x800000;
  v14 = *(_QWORD *)(a1 + 4368);
  v15 = *(unsigned int *)(a1 + 4376);
  if (v14)
  {
    v16 = v15 - 1;
    v17 = *(_DWORD *)(a1 + 4384);
    v18 = (v17 ^ v13) & (v15 - 1);
    v19 = (uint64_t *)(v14 + 16 * v18);
    v20 = (WTF::StringImpl *)*v19;
    if (*v19)
    {
      v21 = -1;
      while (1)
      {
        v22 = *((_DWORD *)v20 + 4);
        v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase(v20) : v22 >> 8;
        if (++v21 > ((v18 + v15 - ((v23 ^ v17) & v16)) & v16))
          break;
        if (v23 == v13)
        {
          v24 = WTF::equalInternal<unsigned char>(*v19, a2, a3);
          v14 = *(_QWORD *)(a1 + 4368);
          if (v24)
          {
            v15 = *(unsigned int *)(a1 + 4376);
            goto LABEL_23;
          }
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 4368);
        }
        v18 = (v18 + 1) & v16;
        v19 = (uint64_t *)(v14 + 16 * v18);
        v20 = (WTF::StringImpl *)*v19;
        if (!*v19)
          goto LABEL_27;
      }
      v14 = *(_QWORD *)(a1 + 4368);
LABEL_27:
      v26 = *(_DWORD *)(a1 + 4376);
    }
    else
    {
      v26 = *(_DWORD *)(a1 + 4376);
    }
    v15 = v26;
    v19 = (uint64_t *)(v14 + 16 * v26);
  }
  else
  {
    v19 = (uint64_t *)(16 * v15);
  }
LABEL_23:
  if ((uint64_t *)(v14 + 16 * v15) == v19)
    return 0;
  else
    return v19[1];
}

{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(a2, a3);
  v7 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  v9 = (v8 ^ (v8 << 10)) & 0xFFFFFF;
  if (v9)
    v10 = v9;
  else
    v10 = 0x800000;
  v11 = *(_QWORD *)(a1 + 4368);
  v12 = *(unsigned int *)(a1 + 4376);
  if (v11)
  {
    v13 = v12 - 1;
    v14 = *(_DWORD *)(a1 + 4384);
    v15 = (v14 ^ v10) & (v12 - 1);
    v16 = (uint64_t *)(v11 + 16 * v15);
    v17 = (WTF::StringImpl *)*v16;
    if (*v16)
    {
      v18 = -1;
      while (1)
      {
        v19 = *((_DWORD *)v17 + 4);
        v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(v17) : v19 >> 8;
        if (++v18 > ((v15 + v12 - ((v20 ^ v14) & v13)) & v13))
          break;
        if (v20 == v10)
        {
          v21 = WTF::equalInternal<char16_t>(*v16, a2, a3);
          v11 = *(_QWORD *)(a1 + 4368);
          if (v21)
          {
            v12 = *(unsigned int *)(a1 + 4376);
            goto LABEL_22;
          }
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 4368);
        }
        v15 = (v15 + 1) & v13;
        v16 = (uint64_t *)(v11 + 16 * v15);
        v17 = (WTF::StringImpl *)*v16;
        if (!*v16)
          goto LABEL_20;
      }
      v11 = *(_QWORD *)(a1 + 4368);
LABEL_20:
      v22 = *(_DWORD *)(a1 + 4376);
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 4376);
    }
    v12 = v22;
    v16 = (uint64_t *)(v11 + 16 * v22);
  }
  else
  {
    v16 = (uint64_t *)(16 * v12);
  }
LABEL_22:
  if ((uint64_t *)(v11 + 16 * v12) == v16)
    return 0;
  else
    return v16[1];
}

uint64_t JSC::BuiltinNames::lookUpWellKnownSymbol(JSC::BuiltinNames *this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[2];
  unsigned int v26;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_5;
  }
  v4 = *(_DWORD *)(v3 + 16);
  if ((v4 & 4) != 0)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_DWORD *)(v3 + 4);
    if (v4 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v3);
    else
      v7 = v4 >> 8;
LABEL_5:
    v8 = *((_QWORD *)this + 546);
    v9 = *((unsigned int *)this + 1094);
    if (v8)
    {
      v10 = v9 - 1;
      v11 = *((_DWORD *)this + 1096);
      v12 = (v11 ^ v7) & (v9 - 1);
      v13 = (uint64_t *)(v8 + 16 * v12);
      v14 = (WTF::StringImpl *)*v13;
      if (*v13)
      {
        v15 = -1;
        while (1)
        {
          v16 = *((_DWORD *)v14 + 4);
          v17 = v16 < 0x100 ? WTF::StringImpl::hashSlowCase(v14) : v16 >> 8;
          if (++v15 > ((v12 + v9 - ((v17 ^ v11) & v10)) & v10))
            break;
          if (v17 == v7)
          {
            v18 = WTF::equalInternal<unsigned char>(*v13, v5, v6);
            v8 = *((_QWORD *)this + 546);
            if (v18)
            {
              v9 = *((unsigned int *)this + 1094);
              goto LABEL_19;
            }
          }
          else
          {
            v8 = *((_QWORD *)this + 546);
          }
          v12 = (v12 + 1) & v10;
          v13 = (uint64_t *)(v8 + 16 * v12);
          v14 = (WTF::StringImpl *)*v13;
          if (!*v13)
            goto LABEL_29;
        }
        v8 = *((_QWORD *)this + 546);
LABEL_29:
        v24 = *((_DWORD *)this + 1094);
      }
      else
      {
        v24 = *((_DWORD *)this + 1094);
      }
      v9 = v24;
      v13 = (uint64_t *)(v8 + 16 * v24);
    }
    else
    {
      v13 = (uint64_t *)(16 * v9);
    }
LABEL_19:
    if ((uint64_t *)(v8 + 16 * v9) != v13)
      return v13[1];
    return 0;
  }
  v20 = *(_QWORD *)(v3 + 8);
  v21 = *(unsigned int *)(v3 + 4);
  if (v4 < 0x100)
    v22 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v3);
  else
    v22 = v4 >> 8;
  v25[0] = v20;
  v25[1] = v21;
  v26 = v22;
  v23 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,JSC::CharBufferSeacher<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t>>((uint64_t *)this + 546, (uint64_t)v25);
  if (*((_QWORD *)this + 546) + 16 * *((unsigned int *)this + 1094) != v23)
    return *(_QWORD *)(v23 + 8);
  return 0;
}

void WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(JSC::TDZEnvironmentLink *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::TDZEnvironmentLink::~TDZEnvironmentLink(a1);
    WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

void JSC::TDZEnvironmentLink::~TDZEnvironmentLink(JSC::TDZEnvironmentLink *this)
{
  JSC::TDZEnvironmentLink *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (JSC::TDZEnvironmentLink *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v2);
      WTF::fastFree(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::TDZEnvironmentLink *)((char *)this + 8));
}

void WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v8 = a2;
  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(_QWORD *)a1;
  v12 = WTF::fastZeroedMalloc(8 * a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = v8;
  v20 = (~(v12 << 32) + v12) ^ ((~(v12 << 32) + v12) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v22 >> 31) ^ v22;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v24 = *(WTF::StringImpl **)(v11 + 8 * i);
      if (v24)
      {
        v25 = *(_DWORD *)(a1 + 8);
        v26 = *(_DWORD *)(a1 + 16);
        v27 = *((_DWORD *)v24 + 4);
        if (v27 < 0x100)
          v28 = WTF::StringImpl::hashSlowCase(v24);
        else
          v28 = v27 >> 8;
        v29 = v25 - 1;
        v30 = (v28 ^ v26) & (v25 - 1);
        v31 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v30);
        v32 = *v31;
        if (*v31)
        {
          v36 = 0;
          do
          {
            v37 = *((_DWORD *)v32 + 4);
            if (v37 < 0x100)
              v38 = WTF::StringImpl::hashSlowCase(v32);
            else
              v38 = v37 >> 8;
            if (v36 > ((v30 + v25 - ((v38 ^ v26) & v29)) & v29))
            {
              v39 = *(WTF::StringImpl **)(v11 + 8 * i);
              *(_QWORD *)(v11 + 8 * i) = *v31;
              *v31 = v39;
              v36 = (v30 + v25 - ((v38 ^ v26) & v29)) & v29;
            }
            v30 = (v30 + 1) & v29;
            ++v36;
            v31 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v30);
            v32 = *v31;
          }
          while (*v31);
        }
        v33 = *(WTF::StringImpl **)(v11 + 8 * i);
        *(_QWORD *)(v11 + 8 * i) = 0;
        v34 = *v31;
        *v31 = v33;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v35 = *(WTF::StringImpl **)(v11 + 8 * i);
        *(_QWORD *)(v11 + 8 * i) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)(v11 + 8 * i) = 0;
      }
    }
  }
  else if (!v11)
  {
    return;
  }
  WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;

  result = 2654435769;
  if (a2 >= 2)
  {
    v4 = 0;
    do
    {
      v5 = (*(unsigned __int16 *)(a1 + 2 * v4 + 2) << 11) ^ (((_DWORD)result + *(unsigned __int16 *)(a1 + 2 * v4)) << 16) ^ (result + *(unsigned __int16 *)(a1 + 2 * v4));
      result = v5 + (v5 >> 11);
      v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v7 = result + *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    return (v7 ^ (v7 << 11)) + ((v7 ^ (v7 << 11)) >> 17);
  }
  return result;
}

uint64_t WTF::dataLog<char [20],JSC::FunctionMetadataNode,char [2]>(JSC::FunctionMetadataNode *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Expected Metadata:\n");
  JSC::FunctionMetadataNode::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [23],JSC::FunctionMetadataNode,char [2]>(JSC::FunctionMetadataNode *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Metadata from parser:\n");
  JSC::FunctionMetadataNode::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [42],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewlineFromParser.line ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [44],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewlineFromParser.offset ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [53],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewlineFromParser.lineStartOffset ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [32],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewline.line ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [34],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewline.offset ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [43],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "positionBeforeLastNewline.lineStartOffset ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>,WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashSetTranslatorAdapter<JSC::CharBufferSeacher<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 8 * v3;
  v6 = v3 - 1;
  v7 = *((_DWORD *)a1 + 4);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = (v8 ^ v7) & (v3 - 1);
  v10 = (uint64_t *)(v2 + 8 * v9);
  v11 = (WTF::StringImpl *)*v10;
  if (*v10)
  {
    v12 = -1;
    while (1)
    {
      v13 = *((_DWORD *)v11 + 4);
      v14 = v13 < 0x100 ? WTF::StringImpl::hashSlowCase(v11) : v13 >> 8;
      if (++v12 > ((v9 + v3 - ((v14 ^ v7) & v6)) & v6))
        break;
      if (v14 == v8)
      {
        v15 = WTF::equalInternal<unsigned char>(*v10, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v2 = *a1;
        if (v15)
          return (uint64_t)v10;
      }
      else
      {
        v2 = *a1;
      }
      v9 = (v9 + 1) & v6;
      v10 = (uint64_t *)(v2 + 8 * v9);
      v11 = (WTF::StringImpl *)*v10;
      if (!*v10)
        goto LABEL_17;
    }
    v2 = *a1;
LABEL_17:
    LODWORD(v3) = *((_DWORD *)a1 + 2);
  }
  return v2 + 8 * v3;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashSetTranslatorAdapter<JSC::CharBufferSeacher<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 8 * v3;
  v6 = v3 - 1;
  v7 = *((_DWORD *)a1 + 4);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = (v8 ^ v7) & (v3 - 1);
  v10 = (uint64_t *)(v2 + 8 * v9);
  v11 = (WTF::StringImpl *)*v10;
  if (*v10)
  {
    v12 = -1;
    while (1)
    {
      v13 = *((_DWORD *)v11 + 4);
      v14 = v13 < 0x100 ? WTF::StringImpl::hashSlowCase(v11) : v13 >> 8;
      if (++v12 > ((v9 + v3 - ((v14 ^ v7) & v6)) & v6))
        break;
      if (v14 == v8)
      {
        v15 = WTF::equalInternal<char16_t>(*v10, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v2 = *a1;
        if (v15)
          return (uint64_t)v10;
      }
      else
      {
        v2 = *a1;
      }
      v9 = (v9 + 1) & v6;
      v10 = (uint64_t *)(v2 + 8 * v9);
      v11 = (WTF::StringImpl *)*v10;
      if (!*v10)
        goto LABEL_16;
    }
    v2 = *a1;
LABEL_16:
    LODWORD(v3) = *((_DWORD *)a1 + 2);
  }
  return v2 + 8 * v3;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::find<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::SymbolImpl *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,JSC::CharBufferSeacher<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  int v12;
  unsigned int v13;
  int v14;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 16 * v3;
  v6 = v3 - 1;
  v7 = *((_DWORD *)a1 + 4);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = (v8 ^ v7) & (v3 - 1);
  v10 = (uint64_t *)(v2 + 16 * v9);
  v11 = (WTF::StringImpl *)*v10;
  if (*v10)
  {
    v12 = -1;
    while (1)
    {
      v13 = *((_DWORD *)v11 + 4);
      v14 = v13 < 0x100 ? WTF::StringImpl::hashSlowCase(v11) : v13 >> 8;
      if (++v12 > ((v9 + v3 - ((v14 ^ v7) & v6)) & v6))
        break;
      if (v14 == v8 && WTF::equalInternal<char16_t>(*v10, *(_QWORD *)a2, *(_QWORD *)(a2 + 8)))
        return (uint64_t)v10;
      v2 = *a1;
      v9 = (v9 + 1) & v6;
      v10 = (uint64_t *)(*a1 + 16 * v9);
      v11 = (WTF::StringImpl *)*v10;
      if (!*v10)
        goto LABEL_14;
    }
    v2 = *a1;
LABEL_14:
    LODWORD(v3) = *((_DWORD *)a1 + 2);
  }
  return v2 + 16 * v3;
}

uint64_t JSC::AccessCase::propagateTransitions<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if (v4)
  {
    v5 = 16 * (v4 & 0xFFFFFFFE);
    if ((!*(_QWORD *)(v5 + 0x28) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
      && ((*(_QWORD *)(v5 + 48) | 2) == 2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v5);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5);
    }
  }
  v6 = *(_QWORD *)(v3 + 24);
  if (v6)
  {
    v7 = 0;
    v8 = *(unsigned int **)(v6 + 8);
    if (v8)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (v8)
      v7 = (uint64_t)&v8[*v8 + 1];
    while (v9 != (_DWORD *)v7)
    {
      v10 = 16 * (*v9 & 0xFFFFFFFE);
      if ((!*(_QWORD *)(v10 + 0x28) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
        && ((*(_QWORD *)(v10 + 48) | 2) == 2
         || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v10);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v10);
      }
      ++v9;
    }
  }
  v11 = *(unsigned __int8 *)(v3 + 4);
  if (v11 == 4 || v11 == 2)
  {
    v13 = *(_QWORD *)(16 * (*(_DWORD *)(v3 + 12) & 0xFFFFFFFE) + 0x40);
    if (v13 && *(_BYTE *)(v13 + 5) != 1)
    {
      v14 = *(_DWORD *)(v13 + 80);
      if (v14)
        v13 = 16 * (v14 & 0xFFFFFFFE);
      else
        v13 = 0;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v13);
    if ((_DWORD)result)
    {
      v15 = *(_DWORD *)(v3 + 12);
      if (v15)
        v16 = 16 * (v15 & 0xFFFFFFFE);
      else
        v16 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v16);
    }
  }
  return result;
}

uint64_t JSC::AccessCase::AccessCase(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned int **a8, uint64_t *a9)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int **v17;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = a4;
  *(_BYTE *)(a1 + 5) = 0;
  *(_DWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = a5;
  if (a7)
  {
    *(_DWORD *)(a1 + 12) = a7 >> 4;
    if (a3 && a2[190] >= *(unsigned __int8 *)(a3 + 7))
    {
      v17 = a8;
      JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), a3);
      a8 = v17;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
  }
  v11 = *a8;
  if (*a8)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
    }
    v11 = *(unsigned int **)(a1 + 16);
  }
  if (v11 && !v11[1])
  {
    __break(0xC471u);
    JUMPOUT(0x198115AD0);
  }
  return a1;
}

void JSC::AccessCase::create(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, unsigned int **a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  char v14;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v14 = a3;
  switch(a3)
  {
    case 0:
    case 2:
    case 4:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 28:
    case 29:
    case 31:
    case 32:
      __break(0xC471u);
      JUMPOUT(0x198115CA4);
    case 7:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      if (*a8)
      {
        __break(0xC471u);
        JUMPOUT(0x198115C64);
      }
      return;
    default:
      break;
  }
  v18 = WTF::fastMalloc((WTF *)0x28);
  v26 = v18;
  *(_DWORD *)v18 = 1;
  *(_BYTE *)(v18 + 4) = v14;
  *(_BYTE *)(v18 + 5) = 0;
  *(_DWORD *)(v18 + 8) = a5;
  *(_QWORD *)(v18 + 16) = 0;
  v27 = *a8;
  *a8 = 0;
  *(_QWORD *)(v18 + 24) = v27;
  *(_QWORD *)(v18 + 32) = a4;
  if (a6)
  {
    *(_DWORD *)(v18 + 12) = a6 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  else
  {
    *(_DWORD *)(v18 + 12) = 0;
  }
  v28 = *a7;
  if (*a7)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  v30 = *(unsigned int **)(v26 + 16);
  *(_QWORD *)(v26 + 16) = v28;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((unint64_t)v30, v19, v20, v21, v22, v23, v24, v25);
    }
    v28 = *(unsigned int **)(v26 + 16);
  }
  if (v28 && !v28[1])
  {
    __break(0xC471u);
    JUMPOUT(0x198115C44);
  }
  *a9 = v26;
}

unint64_t *JSC::AccessCase::createTransition@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unsigned int **a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  unint64_t v34;

  v17 = *(_QWORD *)(a6 + 64);
  if (v17 && *(_BYTE *)(v17 + 5) != 1)
  {
    v33 = *(_DWORD *)(v17 + 80);
    if (v33)
      v17 = 16 * (v33 & 0xFFFFFFFE);
    else
      v17 = 0;
  }
  if (v17 != a5)
    goto LABEL_21;
  v25 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v25 = 1;
  *(_WORD *)(v25 + 4) = 2;
  *(_QWORD *)(v25 + 16) = 0;
  v26 = *a8;
  *a8 = 0;
  *(_QWORD *)(v25 + 24) = v26;
  *(_QWORD *)(v25 + 32) = a3;
  *(_DWORD *)(v25 + 8) = a4;
  *(_DWORD *)(v25 + 12) = a6 >> 4;
  if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  v27 = *a7;
  if (*a7)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  v29 = *(unsigned int **)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v27;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((unint64_t)v29, v18, v19, v20, v21, v22, v23, v24);
    }
    v27 = *(unsigned int **)(v25 + 16);
  }
  if (v27 && !v27[1])
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198115FACLL);
  }
  v34 = 0;
  *a9 = v25;
  return WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref(&v34, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t JSC::AccessCase::createDelete@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v13 = *(_QWORD *)(a6 + 64);
  if (v13 && *(_BYTE *)(v13 + 5) != 1)
  {
    v15 = *(_DWORD *)(v13 + 80);
    if (v15)
      v13 = 16 * (v15 & 0xFFFFFFFE);
    else
      v13 = 0;
  }
  if (v13 != a5)
  {
    __break(0xC471u);
    JUMPOUT(0x1981160C4);
  }
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 4) = 4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a6 >> 4;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v16 = a1 + 192;
      v17 = result;
      v18 = a2;
      v19 = (unsigned int **)(result + 16);
      JSC::Heap::writeBarrierSlowPath(v16, v18);
      result = v17;
      v27 = *v19;
      *v19 = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
        }
        result = v17;
        if (*v19 && !(*v19)[1])
        {
          __break(0xC471u);
          JUMPOUT(0x198116148);
        }
      }
    }
  }
  *a7 = result;
  return result;
}

uint64_t JSC::AccessCase::createSetPrivateBrand@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  v11 = *(_QWORD *)(a5 + 64);
  if (v11 && *(_BYTE *)(v11 + 5) != 1)
  {
    v13 = *(_DWORD *)(v11 + 80);
    if (v13)
      v11 = 16 * (v13 & 0xFFFFFFFE);
    else
      v11 = 0;
  }
  if (v11 != a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198116224);
  }
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(_WORD *)(result + 4) = 32;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 8) = -1;
  *(_DWORD *)(result + 12) = a5 >> 4;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v14 = a1 + 192;
      v15 = result;
      v16 = a2;
      v17 = (unsigned int **)(result + 16);
      JSC::Heap::writeBarrierSlowPath(v14, v16);
      result = v15;
      v25 = *v17;
      *v17 = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
        }
        result = v15;
        if (*v17 && !(*v17)[1])
        {
          __break(0xC471u);
          JUMPOUT(0x1981162A8);
        }
      }
    }
  }
  *a6 = result;
  return result;
}

uint64_t JSC::AccessCase::createReplace@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(_WORD *)(result + 4) = 7;
  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = 0;
  v15 = (unsigned int **)(result + 16);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  if (!a5)
  {
    *(_DWORD *)(result + 12) = 0;
LABEL_3:
    *v15 = 0;
    goto LABEL_4;
  }
  *(_DWORD *)(result + 12) = a5 >> 4;
  if (!a2 || *(_DWORD *)(a1 + 760) < *(unsigned __int8 *)(a2 + 7))
    goto LABEL_3;
  v16 = a1 + 192;
  v17 = result;
  JSC::Heap::writeBarrierSlowPath(v16, a2);
  result = v17;
  v25 = *v15;
  *v15 = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    }
    result = v17;
    if (*v15 && !(*v15)[1])
    {
      __break(0xC471u);
      JUMPOUT(0x1981163D0);
    }
  }
LABEL_4:
  *a7 = result;
  *(_BYTE *)(result + 5) = a6;
  return result;
}

uint64_t JSC::AccessCase::guardedByStructureCheckSkippingConstantIdentifierCheck(JSC::AccessCase *this)
{
  int v1;
  uint64_t result;

  if (*((_BYTE *)this + 5) || *((_QWORD *)this + 3))
    return 0;
  v1 = *((unsigned __int8 *)this + 4);
  result = 0;
  switch(v1)
  {
    case 0:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 31:
    case 32:
    case 60:
    case 110:
      result = 1;
      break;
    case 1:
    case 3:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 112:
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x19811644CLL);
  }
  return result;
}

uint64_t JSC::AccessCase::requiresIdentifierNameMatch(JSC::AccessCase *this)
{
  unsigned int v1;
  uint64_t result;

  v1 = *((unsigned __int8 *)this + 4);
  result = 1;
  if (v1 >= 0x1C)
  {
    if (v1 - 33 < 0x50 || v1 - 28 < 3)
    {
      return 0;
    }
    else if (v1 - 31 >= 2)
    {
      result = 567;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::AccessCase::requiresInt32PropertyCheck(JSC::AccessCase *this)
{
  int v1;
  uint64_t result;

  v1 = *((unsigned __int8 *)this + 4);
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 61:
    case 62:
    case 111:
    case 112:
      return result;
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
      result = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1981166C0);
  }
  return result;
}

BOOL JSC::AccessCase::doesCalls(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;

  v1 = 0;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 2:
      v2 = *(_DWORD *)(a1 + 12);
      v3 = 16 * (v2 & 0xFFFFFFFE);
      if (v2)
        v4 = 16 * (v2 & 0xFFFFFFFE);
      else
        v4 = 0;
      v5 = *(unsigned __int16 *)(v4 + 24);
      if (v5 == 65534)
        goto LABEL_9;
      if (v5 == 0xFFFF)
        v5 = *(_DWORD *)(*(_QWORD *)(v4 + 64) + 84);
      if (v5 < 64)
      {
LABEL_9:
        v6 = 0;
      }
      else if ((v5 - 63) >= 5)
      {
        v18 = (v5 - 64) | ((v5 - 64) >> 1) | (((v5 - 64) | ((v5 - 64) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v6 = (v19 | HIWORD(v19)) + 1;
      }
      else
      {
        v6 = 4;
      }
      v7 = *(_QWORD *)(v3 + 64);
      if (v7)
      {
        v8 = v7;
        if (*(_BYTE *)(v7 + 5) != 1)
        {
          v17 = *(_DWORD *)(v7 + 80);
          v8 = 16 * (v17 & 0xFFFFFFFE);
          if (!v17)
            v8 = 0;
        }
      }
      else
      {
        v8 = 0;
      }
      v9 = *(unsigned __int16 *)(v8 + 24);
      if (v9 == 65534)
        goto LABEL_16;
      if (v9 == 0xFFFF)
        v9 = *(_DWORD *)(*(_QWORD *)(v8 + 64) + 84);
      if (v9 < 64)
      {
LABEL_16:
        v10 = 0;
      }
      else if ((v9 - 63) >= 5)
      {
        v20 = (v9 - 64) | ((v9 - 64) >> 1) | (((v9 - 64) | ((v9 - 64) >> 1)) >> 2);
        v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
        v10 = (v21 | HIWORD(v21)) + 1;
      }
      else
      {
        v10 = 4;
      }
      if (v6 == v10)
        return 0;
      if (v7 && *(_BYTE *)(v7 + 5) != 1)
      {
        v29 = *(_DWORD *)(v7 + 80);
        if (v29)
          v7 = 16 * (v29 & 0xFFFFFFFE);
        else
          v7 = 0;
      }
      if ((*(_BYTE *)(v7 + 8) & 0xE) != 0)
        return 1;
      return *(unsigned __int8 *)(v7 + 9) - 39 < 0xB;
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x21:
      return 1;
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
      return v1;
    case 7:
      v16 = *(unsigned __int8 *)(a1 + 5);
      return v16 != 0;
    case 0x10:
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
      if ((v22 & 1) != 0)
        v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v22 + 5) == 8)
      {
        v30 = *(_QWORD *)(v22 + 8);
        v31 = (unsigned int *)(v30 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
        v23 = *(_BYTE *)(v30 + 14);
        do
        {
          v33 = __ldaxr(v31);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v31));
        if (!v34)
        {
          atomic_store(1u, (unsigned int *)(v30 + 8));
          v36 = a1;
          v35 = v23;
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          v23 = v35;
          a1 = v36;
        }
      }
      else
      {
        v23 = *(_BYTE *)(v22 + 64);
      }
      if ((v23 + 105) > 2u)
        return 0;
      v24 = *(unsigned __int8 *)(a1 + 4);
      v12 = v24 > 0x20;
      v25 = (1 << v24) & 0x100000014;
      if (v12 || v25 == 0)
      {
        v27 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v28 = *(_QWORD *)(16 * (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) + 0x40);
        if (*(_BYTE *)(v28 + 5) == 1)
          goto LABEL_56;
        v27 = *(_DWORD *)(v28 + 80);
      }
      if (v27)
        v28 = 16 * (v27 & 0xFFFFFFFE);
      else
        v28 = 0;
LABEL_56:
      v16 = *(unsigned __int8 *)(16 * *(unsigned int *)(v28 + 76) + 0xF4);
      return v16 != 0;
    default:
      v11 = *(unsigned __int8 *)(a1 + 4) - 61;
      v12 = v11 > 0x32;
      v13 = (1 << v11) & 0x4000000000003;
      if (!v12 && v13 != 0)
        return 1;
      return v1;
  }
}

uint64_t JSC::AccessCase::canReplace(JSC::AccessCase *this, const JSC::AccessCase *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if ((v2 & 1) != 0)
      v2 &= ~1uLL;
    else
      v2 = *(_QWORD *)(v2 + 8);
  }
  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    if ((v3 & 1) != 0)
      v3 &= ~1uLL;
    else
      v3 = *(_QWORD *)(v3 + 8);
  }
  if (v2 != v3 || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a2 + 5) != 0))
    return 0;
  v4 = *((unsigned __int8 *)this + 4);
  switch(*((_BYTE *)this + 4))
  {
    case 0:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x1F:
    case 0x20:
    case 0x3C:
    case 0x6E:
      if (*((unsigned __int8 *)a2 + 4) != v4)
        return 0;
      v5 = *((_QWORD *)this + 3);
      if (!v5)
      {
        if (*((_BYTE *)this + 5))
          return 0;
        v6 = 0;
        switch(*((_BYTE *)this + 4))
        {
          case 0:
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x1F:
          case 0x20:
          case 0x3C:
          case 0x6E:
            v6 = 0;
            if (*((_BYTE *)a2 + 5) || *((_QWORD *)a2 + 3))
              return v6;
            break;
          case 1:
          case 3:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
            return v6;
          default:
            __break(0xC471u);
            JUMPOUT(0x198116FB8);
        }
        v6 = 0;
        switch(*((_BYTE *)this + 4))
        {
          case 0:
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x1F:
          case 0x20:
          case 0x3C:
          case 0x6E:
            if (v4 > 0x20 || ((1 << v4) & 0x100000014) == 0)
            {
              v7 = *((_DWORD *)this + 3);
              goto LABEL_20;
            }
            v8 = *(_QWORD *)(16 * (*((_DWORD *)this + 3) & 0xFFFFFFFE) + 0x40);
            if (v8 && *(_BYTE *)(v8 + 5) != 1)
            {
              v7 = *(_DWORD *)(v8 + 80);
LABEL_20:
              if (v7)
                v8 = 16 * (v7 & 0xFFFFFFFE);
              else
                v8 = 0;
            }
            if (v4 > 0x20 || ((1 << v4) & 0x100000014) == 0)
            {
LABEL_25:
              v9 = *((_DWORD *)a2 + 3);
              goto LABEL_26;
            }
            v10 = *(_QWORD *)(16 * (*((_DWORD *)a2 + 3) & 0xFFFFFFFE) + 0x40);
            if (v10 && *(_BYTE *)(v10 + 5) != 1)
            {
              v9 = *(_DWORD *)(v10 + 80);
LABEL_26:
              if (v9)
                v10 = 16 * (v9 & 0xFFFFFFFE);
              else
                v10 = 0;
            }
            v11 = v8 == v10;
            break;
          case 1:
          case 3:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
            return v6;
          default:
            __break(0xC471u);
            JUMPOUT(0x198116FD8);
        }
        return v11;
      }
      v15 = *((_QWORD *)a2 + 3);
      if (!v15)
        return 0;
      if (v4 > 0x20 || ((1 << v4) & 0x100000014) == 0)
      {
        v16 = *((_DWORD *)this + 3);
        goto LABEL_59;
      }
      v17 = *(_QWORD *)(16 * (*((_DWORD *)this + 3) & 0xFFFFFFFE) + 0x40);
      if (v17 && *(_BYTE *)(v17 + 5) != 1)
      {
        v16 = *(_DWORD *)(v17 + 80);
LABEL_59:
        if (v16)
          v17 = 16 * (v16 & 0xFFFFFFFE);
        else
          v17 = 0;
      }
      if (v4 > 0x20 || ((1 << v4) & 0x100000014) == 0)
      {
        v18 = *((_DWORD *)a2 + 3);
        goto LABEL_65;
      }
      v19 = *(_QWORD *)(16 * (*((_DWORD *)a2 + 3) & 0xFFFFFFFE) + 0x40);
      if (v19 && *(_BYTE *)(v19 + 5) != 1)
      {
        v18 = *(_DWORD *)(v19 + 80);
LABEL_65:
        if (v18)
          v19 = 16 * (v18 & 0xFFFFFFFE);
        else
          v19 = 0;
      }
      if (v17 != v19)
        return 0;
      v20 = *(unsigned int **)(v5 + 8);
      v21 = *(_DWORD **)(v15 + 8);
      if (!v20)
      {
        if (!v21)
          return 1;
        return *v21 == 0;
      }
      v22 = *v20;
      if (!v21)
        return (_DWORD)v22 == 0;
      if ((_DWORD)v22 != *v21)
        return 0;
      if (!(_DWORD)v22)
        return 1;
      if (v20[1] != v21[1])
        return 0;
      v23 = 0;
      v24 = v21 + 2;
      v25 = v20 + 2;
      while (v22 - 1 != v23)
      {
        v26 = v25[v23];
        v27 = v24[v23++];
        if (v26 != v27)
          return v23 >= v22;
      }
      v23 = v22;
      return v23 >= v22;
    case 1:
    case 3:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6F:
    case 0x70:
      return *((unsigned __int8 *)a2 + 4) == v4;
    case 0xA:
    case 0x10:
      v14 = *((unsigned __int8 *)a2 + 4);
      if (v14 != 10 && v14 != 16)
        return 0;
      if (*((_QWORD *)this + 3))
      {
        if (*((_QWORD *)a2 + 3))
        {
          v28 = *((_DWORD *)this + 3);
          v29 = v28 ? 16 * (v28 & 0xFFFFFFFE) : 0;
          v30 = *((_DWORD *)a2 + 3);
          v31 = v30 ? 16 * (v30 & 0xFFFFFFFE) : 0;
          if (v29 == v31)
            return JSC::PolyProtoAccessChain::operator==(*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
        }
        return 0;
      }
      if (*((_BYTE *)this + 5))
        return 0;
      v6 = 0;
      if (!*((_BYTE *)a2 + 5) && !*((_QWORD *)a2 + 3))
      {
LABEL_43:
        v13 = *((_DWORD *)this + 3);
        if (v13)
          v8 = 16 * (v13 & 0xFFFFFFFE);
        else
          v8 = 0;
        goto LABEL_25;
      }
      return v6;
    case 0x18:
      return *((_BYTE *)a2 + 4) == 24;
    case 0x1C:
    case 0x1D:
      if (*((unsigned __int8 *)a2 + 4) == v4 && *((_QWORD *)this + 5) == *((_QWORD *)a2 + 5))
        goto LABEL_43;
      return 0;
    case 0x1E:
      return *((unsigned __int8 *)a2 + 4) - 28 < 3;
    default:
      __break(0xC471u);
      JUMPOUT(0x198116F6CLL);
  }
}

void JSC::AccessCase::dump(JSC::AccessCase *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  WTF::PrintStream *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  int v13;
  WTF *v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  WTF::PrintStream *v23;
  float v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  WTF::PrintStream *v34;
  float v35;
  int v36;
  WTF *v37;
  const WTF::String *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float v45;
  WTF::PrintStream *v46;
  float v47;
  WTF::PrintStream *v48;
  uint64_t *v49;
  unint64_t *v50;
  WTF::PrintStream *v51;
  WTF::PrintStream *v52;
  WTF::PrintStream *v53;
  float v54;
  int v55;
  WTF *v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  WTF::PrintStream *v65;
  float v66;
  unsigned int v67;
  const char *v68;
  uint64_t v69;
  WTF::PrintStream *v70;
  float v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD v89[2];
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  char v96;
  int v97;
  WTF::StringImpl *v98;
  const char **v99;
  const char *v100;
  const char **v101;
  _QWORD *v102;
  char v103;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v92, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v92);
  if ((_DWORD)v93 != -1)
    ((void (*)(const char ***, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v93])(&v99, &v92);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  WTF::printInternal(v4, *((unsigned __int8 *)this + 4));
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters(": {", 3uLL, (uint64_t)&v92, v8);
  WTF::printExpectedCStringHelper(v7, "StringView", &v92);
  if ((_DWORD)v93 != -1)
    ((void (*)(const char ***, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v93])(&v99, &v92);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v9 + 8) = "  ";
  *(_DWORD *)(v9 + 16) = 4;
  v97 = 0;
  v98 = (WTF::StringImpl *)v9;
  *(_QWORD *)v9 = 0x200000002;
  v92 = ", ";
  v93 = 3;
  v94 = "";
  v95 = 1;
  v96 = 0;
  v90 = "ident = '";
  v91 = 10;
  v89[0] = "'";
  v89[1] = 2;
  v99 = &v92;
  v100 = (const char *)&v90;
  v101 = (const char **)((char *)this + 32);
  v102 = v89;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral>(WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, &v99);
  if (*((_DWORD *)this + 2) != -1)
  {
    v90 = "offset = ";
    v91 = 10;
    v99 = &v92;
    v100 = (const char *)&v90;
    v101 = (const char **)((char *)this + 8);
    WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,int>(WTF::CommaPrinter,WTF::ASCIILiteral,int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, &v99);
  }
  ++v97;
  if (*((_QWORD *)this + 3))
  {
    v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v99, v12);
    WTF::printExpectedCStringHelper(v11, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(const char **, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v90, &v99);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v13 = v97;
    while (v13)
    {
      --v13;
      v14 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      WTF::printInternal(v14, (WTF::PrintStream *)&v98, v15, v16, v17, v18, v19, v20, v21, v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters("prototype access chain = ", 0x19uLL, (uint64_t)&v99, v24);
    WTF::printExpectedCStringHelper(v23, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(const char **, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v90, &v99);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v25 = *((unsigned __int8 *)this + 4);
    if (v25 <= 0x20 && ((1 << v25) & 0x100000014) != 0)
    {
      v27 = *(_QWORD *)(16 * (*((_DWORD *)this + 3) & 0xFFFFFFFE) + 0x40);
      if (!v27 || *(_BYTE *)(v27 + 5) == 1)
        goto LABEL_20;
      v26 = *(_DWORD *)(v27 + 80);
    }
    else
    {
      v26 = *((_DWORD *)this + 3);
    }
    if (v26)
      v27 = 16 * (v26 & 0xFFFFFFFE);
    else
      v27 = 0;
LABEL_20:
    JSC::PolyProtoAccessChain::dump(*((JSC::PolyProtoAccessChain **)this + 3), (JSC::Structure *)v27, a2);
    goto LABEL_42;
  }
  v28 = *((unsigned __int8 *)this + 4);
  if (v28 <= 0x20 && ((1 << v28) & 0x100000014) != 0)
  {
    v29 = *((_DWORD *)this + 3);
    v30 = *(_QWORD *)(16 * (v29 & 0xFFFFFFFE) + 0x40);
    if (v30 && *(_BYTE *)(v30 + 5) != 1)
    {
      v31 = *(_DWORD *)(v30 + 80);
      if (v31)
        v30 = 16 * (v31 & 0xFFFFFFFE);
      else
        v30 = 0;
    }
    v90 = "to structure = ";
    v91 = 16;
    if (v29)
      v32 = 16 * (v29 & 0xFFFFFFFE);
    else
      v32 = 0;
    v89[0] = v32;
    v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 32))(v33);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v99, v35);
    WTF::printExpectedCStringHelper(v34, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(char *, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v103, &v99);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 40))(v33);
    v36 = v97;
    while (v36)
    {
      --v36;
      v37 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 32))(v33);
      WTF::printInternal(v37, (WTF::PrintStream *)&v98, v38, v39, v40, v41, v42, v43, v44, v45);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 40))(v33);
    }
    v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 32))(v33);
    WTF::StringImpl::utf8ForCharacters("from structure = ", 0x11uLL, (uint64_t)&v99, v47);
    WTF::printExpectedCStringHelper(v46, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(char *, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v103, &v99);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 40))(v33);
    if (v30)
    {
      JSC::Structure::dump(v30, v33);
    }
    else
    {
      v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 32))(v33);
      WTF::PrintStream::printf(v48, "%s", "(null)");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 40))(v33);
    }
    v49 = (uint64_t *)&v90;
    v50 = v89;
    v51 = v33;
    goto LABEL_41;
  }
  v88 = *((_DWORD *)this + 3);
  if (v88)
  {
    v99 = (const char **)"structure = ";
    v100 = (const char *)13;
    v90 = (const char *)(16 * (v88 & 0xFFFFFFFE));
    v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v49 = (uint64_t *)&v99;
    v50 = (unint64_t *)&v90;
LABEL_41:
    WTF::PrintStream::printImpl<WTF::ASCIILiteral,WTF::Indenter,WTF::ASCIILiteral,WTF::PointerDump<JSC::Structure>>(v51, "\n", 2, &v97, (uint64_t)v49, v50);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
LABEL_42:
  if (*((_QWORD *)this + 2))
  {
    v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v53 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 32))(v52);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v99, v54);
    WTF::printExpectedCStringHelper(v53, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(const char **, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v90, &v99);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 40))(v52);
    v55 = v97;
    while (v55)
    {
      --v55;
      v56 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 32))(v52);
      WTF::printInternal(v56, (WTF::PrintStream *)&v98, v57, v58, v59, v60, v61, v62, v63, v64);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 40))(v52);
    }
    v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 32))(v52);
    WTF::StringImpl::utf8ForCharacters("conditions = ", 0xDuLL, (uint64_t)&v99, v66);
    WTF::printExpectedCStringHelper(v65, "StringView", &v99);
    if ((_DWORD)v100 != -1)
      ((void (*)(const char **, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v90, &v99);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 40))(v52);
    JSC::ObjectPropertyConditionSet::dumpInContext((JSC::AccessCase *)((char *)this + 16), v52, 0);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v67 = *((unsigned __int8 *)this + 4);
  if (v67 <= 0x1D)
  {
    if (((1 << v67) & 0xFC00) != 0)
    {
      JSC::GetterSetterAccessCase::dumpImpl((uint64_t)this, (uint64_t)a2, (uint64_t)&v92);
    }
    else if (((1 << v67) & 0x301) != 0)
    {
      LOBYTE(v90) = *((_BYTE *)this + 5);
      v99 = &v92;
      v100 = "viaGlobalProxy = ";
      v101 = &v90;
      WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [18],BOOL>(WTF::CommaPrinter,char [18],BOOL const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, &v99);
      if (*((unsigned __int8 *)this + 4) - 8 >= 8 && *((_BYTE *)this + 4))
        v68 = 0;
      else
        v68 = (const char *)*((_QWORD *)this + 5);
      v90 = v68;
      v99 = &v92;
      v100 = "additionalSet = ";
      v101 = &v90;
      WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [17],WTF::RawPointer>(WTF::CommaPrinter,char [17],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, &v99);
    }
    else if (((1 << v67) & 0x30000000) != 0)
    {
      v90 = (const char *)*((_QWORD *)this + 5);
      v99 = &v92;
      v100 = "prototype = ";
      v101 = &v90;
      WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],JSC::JSValue>(WTF::CommaPrinter,char [13],JSC::JSValue const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v99);
    }
  }
  v69 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v70 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 32))(v69);
  WTF::StringImpl::utf8ForCharacters("}", 1uLL, (uint64_t)&v99, v71);
  WTF::printExpectedCStringHelper(v70, "StringView", &v99);
  if ((_DWORD)v100 != -1)
    ((void (*)(const char **, const char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v90, &v99);
  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v79 = v98;
  v98 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
}

_QWORD *JSC::AccessCase::collectDependentCells(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = result;
  v5 = result[2];
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if (v5)
    v7 = v5 + 8 + 24 * *(unsigned int *)(v5 + 4);
  else
    v7 = 0;
  if (v6 != (uint64_t *)v7)
  {
    LODWORD(v8) = *(_DWORD *)(a3 + 12);
    do
    {
      v9 = *v6;
      v29 = *v6;
      if ((_DWORD)v8 == *(_DWORD *)(a3 + 8))
      {
        result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v8 + 1, (unint64_t)&v29);
        v8 = *(unsigned int *)(a3 + 12);
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = *result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v9;
      }
      v8 = (v8 + 1);
      *(_DWORD *)(a3 + 12) = v8;
      v10 = v6[1];
      if ((v10 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v10) <= 7u && ((1 << BYTE6(v6[1])) & 0x9C) != 0)
      {
        v13 = v6[2];
        if (v13)
        {
          v29 = v6[2];
          if ((_DWORD)v8 == *(_DWORD *)(a3 + 8))
          {
            result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v8 + 1, (unint64_t)&v29);
            v8 = *(unsigned int *)(a3 + 12);
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = *result;
            v10 = v6[1];
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v13;
          }
          LODWORD(v8) = v8 + 1;
          *(_DWORD *)(a3 + 12) = v8;
        }
      }
      if ((v10 & 0xFF000000000000) == 0x5000000000000)
      {
        v14 = v6[2];
        if (v14)
        {
          if ((v14 & 0xFFFE000000000002) == 0)
          {
            v29 = v6[2];
            if ((_DWORD)v8 == *(_DWORD *)(a3 + 8))
            {
              result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v8 + 1, (unint64_t)&v29);
              v8 = *(unsigned int *)(a3 + 12);
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = *result;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v14;
            }
            LODWORD(v8) = v8 + 1;
            *(_DWORD *)(a3 + 12) = v8;
          }
        }
      }
      v6 += 3;
    }
    while (v6 != (uint64_t *)v7);
  }
  v15 = *((_DWORD *)v4 + 3);
  if (v15)
  {
    v16 = 16 * (v15 & 0xFFFFFFFE);
    v29 = v16;
    v17 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v17 == *(_DWORD *)(a3 + 8))
    {
      result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v17 + 1, (unint64_t)&v29);
      v17 = *(unsigned int *)(a3 + 12);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = *result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v16;
    }
    *(_DWORD *)(a3 + 12) = v17 + 1;
  }
  v18 = v4[3];
  if (v18)
  {
    v19 = 0;
    v20 = *(unsigned int **)(v18 + 8);
    if (v20)
      v21 = v20 + 1;
    else
      v21 = 0;
    if (v20)
      v19 = (uint64_t)&v20[*v20 + 1];
    if (v21 != (_DWORD *)v19)
    {
      LODWORD(v22) = *(_DWORD *)(a3 + 12);
      do
      {
        v23 = 16 * (*v21 & 0xFFFFFFFE);
        v29 = v23;
        if ((_DWORD)v22 == *(_DWORD *)(a3 + 8))
        {
          result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v22 + 1, (unint64_t)&v29);
          v22 = *(unsigned int *)(a3 + 12);
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v22) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v22) = v23;
        }
        LODWORD(v22) = v22 + 1;
        *(_DWORD *)(a3 + 12) = v22;
        ++v21;
      }
      while (v21 != (_DWORD *)v19);
    }
  }
  v24 = *((unsigned __int8 *)v4 + 4);
  if (v24 > 0x17)
  {
    if (v24 - 28 < 2)
      goto LABEL_55;
    if (v24 != 24)
      return result;
    v26 = v4[5];
    if (v26)
    {
      v29 = v4[5];
      v27 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v27 == *(_DWORD *)(a3 + 8))
      {
        result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v27 + 1, (unint64_t)&v29);
        v27 = *(unsigned int *)(a3 + 12);
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = *result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
      }
      *(_DWORD *)(a3 + 12) = v27 + 1;
    }
LABEL_63:
    v25 = v4[6];
    if (!v25)
      return result;
    goto LABEL_64;
  }
  if (v24 == 12 || v24 == 14)
    goto LABEL_63;
  if (v24 != 16)
    return result;
LABEL_55:
  v25 = v4[5];
  if (!v25)
    return result;
LABEL_64:
  v29 = v25;
  v28 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v28 == *(_DWORD *)(a3 + 8))
  {
    result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v28 + 1, (unint64_t)&v29);
    v28 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v28) = *result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v28) = v25;
  }
  *(_DWORD *)(a3 + 12) = v28 + 1;
  return result;
}

BOOL JSC::AccessCase::canBeShared(JSC::AccessCase *this, const JSC::AccessCase *a2, const JSC::AccessCase *a3)
{
  int v3;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AlternateBase;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int *v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a2 + 4)
    || *((_DWORD *)this + 2) != *((_DWORD *)a2 + 2)
    || *((unsigned __int8 *)this + 5) != *((unsigned __int8 *)a2 + 5))
  {
    return 0;
  }
  v6 = *((_DWORD *)this + 3);
  v7 = v6 ? 16 * (v6 & 0xFFFFFFFE) : 0;
  v8 = *((_DWORD *)a2 + 3);
  v9 = v8 ? 16 * (v8 & 0xFFFFFFFE) : 0;
  if (v7 != v9)
    return 0;
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    if ((v10 & 1) != 0)
      v10 &= ~1uLL;
    else
      v10 = *(_QWORD *)(v10 + 8);
  }
  v11 = *((_QWORD *)a2 + 4);
  if (v11)
  {
    if ((v11 & 1) != 0)
      v11 &= ~1uLL;
    else
      v11 = *(_QWORD *)(v11 + 8);
  }
  if (v10 != v11)
    return 0;
  v13 = *((_QWORD *)this + 2);
  v14 = *((_QWORD *)a2 + 2);
  if (v13)
    v15 = *(unsigned int *)(v13 + 4);
  else
    v15 = 0;
  if (v14)
    v16 = *(unsigned int *)(v14 + 4);
  else
    v16 = 0;
  if (v13 && v15 == v16)
  {
    v17 = *(_DWORD *)(v13 + 4);
    if (v17)
    {
      v18 = v13 + 24 * v17 + 8;
      if (v14)
        v19 = v14 + 8;
      else
        v19 = 0;
      v20 = v19 + 16;
      v21 = v13 + 24;
      do
      {
        v22 = v21 - 16;
        if (*(_QWORD *)(v21 - 16) != *(_QWORD *)(v20 - 16))
          return 0;
        v23 = *(_QWORD *)(v21 - 8);
        v24 = *(_QWORD *)(v20 - 8);
        if ((v23 & 0xFFFFFFFFFFFFLL) != (v24 & 0xFFFFFFFFFFFFLL) || BYTE6(v23) != BYTE6(v24))
          return 0;
        if (BYTE6(v23) >= 2u)
        {
          switch(BYTE6(v23))
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              if (*(_QWORD *)v21 != *(_QWORD *)v20)
                return 0;
              goto LABEL_36;
            case 6:
              goto LABEL_36;
            default:
              __break(0xC471u);
              JUMPOUT(0x19811850CLL);
          }
        }
        if (*(_DWORD *)v21 != *(_DWORD *)v20 || *(_DWORD *)(v21 + 4) != *(_DWORD *)(v20 + 4))
          return 0;
LABEL_36:
        v20 += 24;
        v21 += 24;
      }
      while (v22 + 24 != v18);
    }
  }
  else if (v15 != v16)
  {
    return 0;
  }
  if ((v3 - 8) >= 8 && *((_BYTE *)this + 4))
    v25 = 0;
  else
    v25 = *((_QWORD *)this + 5);
  if ((v3 - 8) >= 8 && *((_BYTE *)this + 4))
    v26 = 0;
  else
    v26 = *((_QWORD *)a2 + 5);
  if (v25 != v26)
    return 0;
  v27 = *((_QWORD *)this + 3);
  v28 = *((_QWORD *)a2 + 3);
  if (!v27)
  {
    if (!v28)
      goto LABEL_49;
    return 0;
  }
  if (!v28)
    return 0;
  v33 = *(unsigned int **)(v27 + 8);
  v34 = *(_DWORD **)(v28 + 8);
  if (!v33)
  {
    if (!v34)
      goto LABEL_49;
    LODWORD(v35) = *v34;
    goto LABEL_81;
  }
  v35 = *v33;
  if (!v34)
  {
LABEL_81:
    if ((_DWORD)v35)
      return 0;
    goto LABEL_49;
  }
  if ((_DWORD)v35 != *v34)
    return 0;
  if ((_DWORD)v35)
  {
    if (v33[1] != v34[1])
      return 0;
    v36 = 0;
    v37 = v34 + 2;
    v38 = v33 + 2;
    while (v35 - 1 != v36)
    {
      v39 = v38[v36];
      v40 = v37[v36++];
      if (v39 != v40)
      {
        if (v36 < v35)
          return 0;
        break;
      }
    }
  }
LABEL_49:
  AlternateBase = JSC::AccessCase::tryGetAlternateBase(this);
  if (AlternateBase != JSC::AccessCase::tryGetAlternateBase(a2))
    return 0;
  result = 1;
  switch(*((_BYTE *)this + 4))
  {
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      v30 = *((_QWORD *)this + 7);
      v31 = *((_QWORD *)a2 + 7);
      goto LABEL_52;
    case 0x10:
    case 0x1C:
    case 0x1D:
      v30 = *((_QWORD *)this + 5);
      v31 = *((_QWORD *)a2 + 5);
LABEL_52:
      v32 = v30 == v31;
      goto LABEL_53;
    case 0x18:
      if (*((_QWORD *)this + 5) != *((_QWORD *)a2 + 5) || *((_QWORD *)this + 6) != *((_QWORD *)a2 + 6))
        return 0;
      v32 = *((_DWORD *)this + 14) == *((_DWORD *)a2 + 14);
LABEL_53:
      result = v32;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t JSC::AccessCase::tryGetAlternateBase(JSC::AccessCase *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[3];

  v2 = *((unsigned __int8 *)this + 4);
  if ((v2 - 30) >= 0x53)
  {
    result = 0;
    switch(v2)
    {
      case 0:
      case 9:
      case 16:
        v17 = *((_QWORD *)this + 2);
        v16 = (uint64_t *)((char *)this + 16);
        if (!v17)
          return 0;
        JSC::ObjectPropertyConditionSet::slotBaseCondition(v16, v18);
        return v18[0];
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
        goto LABEL_2;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        result = *((_QWORD *)this + 6);
        if (result)
          return result;
        v10 = *((_QWORD *)this + 2);
        if (!v10)
          return 0;
        v11 = *(unsigned int *)(v10 + 4);
        if (!(_DWORD)v11)
          goto LABEL_30;
        result = 0;
        v12 = 0;
        v13 = 24 * v11;
        v14 = v10 + 16;
        do
        {
          v15 = *(unsigned __int8 *)(v14 + 6);
          if (v15 < 2 || v15 - 5 <= 1)
          {
            result = *(_QWORD *)(v14 - 8);
            ++v12;
          }
          v14 += 24;
          v13 -= 24;
        }
        while (v13);
        if (v12 != 1)
        {
LABEL_30:
          __break(0xC471u);
          JUMPOUT(0x1981186F4);
        }
        return result;
      default:
        return result;
    }
  }
  else
  {
LABEL_2:
    if ((v2 - 9) <= 7 && (v3 = *((_QWORD *)this + 2)) != 0)
    {
      v4 = *(unsigned int *)(v3 + 4);
      if (!(_DWORD)v4)
        goto LABEL_25;
      result = 0;
      v6 = 0;
      v7 = v3 + 16;
      v8 = 24 * v4;
      do
      {
        v9 = *(unsigned __int8 *)(v7 + 6);
        if (v9 < 2 || v9 - 5 <= 1)
        {
          result = *(_QWORD *)(v7 - 8);
          ++v6;
        }
        v7 += 24;
        v8 -= 24;
      }
      while (v8);
      if (v6 != 1)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1981186A8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void JSC::AccessCase::operator delete(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if (*(unsigned __int8 *)(a1 + 4) - 30 >= 0x53)
  {
    switch(*(_BYTE *)(a1 + 4))
    {
      case 0:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
        std::__destroy_at[abi:sn180100]<JSC::ProxyableAccessCase,0>(a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_9;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
        break;
      case 0x10:
        v21 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr((unsigned int *)v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unsigned int *)v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)v21);
            v31 = *(_QWORD *)(v21 + 8);
            *(_QWORD *)(v21 + 8) = 0;
            if (v31)
              WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v12 = *(unsigned int **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (!v12)
          goto LABEL_9;
        do
        {
          v24 = __ldaxr(v12);
          v14 = --v24 == 0;
        }
        while (__stlxr(v24, v12));
        goto LABEL_7;
      case 0x18:
        v25 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v25)
        {
          do
          {
            v26 = __ldaxr((unsigned int *)v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, (unsigned int *)v25));
          if (!v27)
          {
            atomic_store(1u, (unsigned int *)v25);
            v32 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = 0;
            if (v32)
              WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v12 = *(unsigned int **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (!v12)
          goto LABEL_9;
        do
        {
          v28 = __ldaxr(v12);
          v14 = --v28 == 0;
        }
        while (__stlxr(v28, v12));
        goto LABEL_7;
      case 0x1C:
      case 0x1D:
        v17 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr((unsigned int *)v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, (unsigned int *)v17));
          if (!v19)
          {
            atomic_store(1u, (unsigned int *)v17);
            v30 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v17 + 8) = 0;
            if (v30)
              WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v12 = *(unsigned int **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (!v12)
          goto LABEL_9;
        do
        {
          v20 = __ldaxr(v12);
          v14 = --v20 == 0;
        }
        while (__stlxr(v20, v12));
        goto LABEL_7;
      default:
        return;
    }
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v29 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v29)
        WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = --v13 == 0;
    }
    while (__stlxr(v13, v12));
LABEL_7:
    if (v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_9:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v15)
  {
    pas_try_deallocate_slow_no_cache(a1, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (a1 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) == 0)
  {
    if (a1 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a1 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_12;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, a1, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_12:
  v16 = *(unsigned int *)(v15 + 8000);
  if (v16 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v15, a1, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v15 + 8 * v16) = a1 | 0x5000000000000;
    *(_DWORD *)(v15 + 8000) = v16 + 1;
  }
}

void JSC::AccessCaseSnippetParams::addSlowPathCallImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  char v9;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  JSC::AssemblerBuffer *v46;
  JSC::AssemblerBuffer *v47;
  WTF *v48;
  unsigned int v49;
  _BYTE v50[24];

  v8 = a6;
  v9 = a5;
  v14 = *(_DWORD *)(a3 + 200);
  if (v14 < *(_DWORD *)(a3 + 52))
  {
    v46 = (JSC::AssemblerBuffer *)(a3 + 56);
    do
    {
      if ((v14 + 4) > *(_DWORD *)(a3 + 192))
      {
        v47 = v46;
        JSC::AssemblerBuffer::outOfLineGrow(v46, a2, a3, a4, a5, a6, a7, a8);
        v46 = v47;
        v14 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v14) = -721215457;
      v14 = *(_DWORD *)(a3 + 200) + 4;
      *(_DWORD *)(a3 + 200) = v14;
    }
    while (v14 < *(_DWORD *)(a3 + 52));
  }
  *(_DWORD *)(a3 + 208) = 0;
  v22 = WTF::fastMalloc((WTF *)0x48);
  v23 = *(unsigned int *)(a2 + 12);
  v48 = (WTF *)v50;
  v49 = v23;
  if (v23 < 3)
  {
    v24 = v50;
    if (!(_DWORD)v23)
      goto LABEL_9;
  }
  else
  {
    if (v23 >= 0x15555556)
      goto LABEL_43;
    v24 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v23));
    v48 = (WTF *)v24;
    LODWORD(v23) = *(_DWORD *)(a2 + 12);
    if (!(_DWORD)v23)
      goto LABEL_9;
  }
  v25 = *(_QWORD *)a2;
  v26 = *(_QWORD *)a2 + 12 * v23;
  do
  {
    *(_DWORD *)v24 = *(_DWORD *)v25;
    *(_QWORD *)(v24 + 4) = *(_QWORD *)(v25 + 4);
    v25 += 12;
    v24 += 12;
  }
  while (v25 != v26);
LABEL_9:
  *(_QWORD *)v22 = &off_1E3580B10;
  v27 = v49;
  v28 = v22 + 24;
  *(_QWORD *)(v22 + 8) = v22 + 24;
  *(_DWORD *)(v22 + 16) = 2;
  *(_DWORD *)(v22 + 20) = v49;
  if (v49 >= 3)
  {
    if (v49 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198118DA8);
    }
    v28 = WTF::fastMalloc((WTF *)(12 * v49));
    *(_DWORD *)(v22 + 16) = 12 * v49 / 0xC;
    *(_QWORD *)(v22 + 8) = v28;
    v27 = v49;
  }
  v29 = (unint64_t)v48;
  if (v27)
  {
    v30 = (char *)v48 + 12 * v27;
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)(v29 + 4);
      v29 += 12;
      v28 += 12;
    }
    while ((char *)v29 != v30);
    v29 = (unint64_t)v48;
  }
  *(_DWORD *)(v22 + 48) = v14;
  *(_QWORD *)(v22 + 56) = a4;
  *(_BYTE *)(v22 + 64) = v9;
  *(_BYTE *)(v22 + 65) = v8;
  v31 = v50 == (_BYTE *)v29 || v29 == 0;
  *(_BYTE *)(v22 + 66) = HIBYTE(v8);
  if (!v31)
    WTF::fastFree(v29, v15, v16, v17, v18, v19, v20, v21);
  v32 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v32 != *(_DWORD *)(a1 + 72))
  {
    v45 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8 * v32);
    goto LABEL_35;
  }
  v33 = v32 + (v32 >> 2);
  if (v33 >= 0x10)
    v34 = v33 + 1;
  else
    v34 = 16;
  if (v34 <= v32 + 1)
    v35 = v32 + 1;
  else
    v35 = v34;
  if (v35 >> 29)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198118DA0);
  }
  v36 = *(const void **)(a1 + 64);
  v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
  *(_DWORD *)(a1 + 72) = v35;
  *(_QWORD *)(a1 + 64) = v37;
  memcpy(v37, v36, 8 * v32);
  if (v36)
  {
    if (*(const void **)(a1 + 64) == v36)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v36, v38, v39, v40, v41, v42, v43, v44);
  }
  v32 = *(unsigned int *)(a1 + 76);
  v45 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8 * v32);
LABEL_35:
  *v45 = v22;
  *(_DWORD *)(a1 + 76) = v32 + 1;
}

void JSC::AccessCaseSnippetParams::emitSlowPathCalls(JSC::AccessCaseSnippetParams *this@<X0>, JSC::InlineCacheCompiler *a2@<X1>, const JSC::RegisterSetBuilder *a3@<X2>, JSC::CCallHelpers *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  JSC::CCallHelpers *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  WTF *v35;
  const JSC::RegisterSetBuilder *v37;
  WTF *v38;
  _QWORD *v39;
  JSC::InlineCacheCompiler *v40;
  WTF *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;

  v6 = a5 + 16;
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 2;
  v7 = *((unsigned int *)this + 19);
  if ((_DWORD)v7)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 8);
    v12 = &v11[v7];
    v13 = (WTF *)&v44;
    do
    {
      (*(void (**)(WTF **__return_ptr, _QWORD, JSC::InlineCacheCompiler *, const JSC::RegisterSetBuilder *, JSC::CCallHelpers *))(*(_QWORD *)*v11 + 16))(&v41, *v11, a2, a3, a4);
      v21 = v41;
      v22 = v43;
      if (v43)
      {
        v38 = v13;
        v39 = v12;
        v40 = a2;
        v23 = *(unsigned int *)(a5 + 8);
        v24 = *(unsigned int *)(a5 + 12);
        v25 = v24 + v43;
        if (v25 > v23)
        {
          v26 = v23 + (v23 >> 2);
          if (v26 >= 0x10)
            v27 = v26 + 1;
          else
            v27 = 16;
          if (v27 <= v25)
            v27 = v24 + v43;
          v28 = *(_QWORD *)a5;
          if (v27 < 3)
          {
            *(_QWORD *)a5 = v6;
            *(_DWORD *)(a5 + 8) = 2;
            v31 = v6;
          }
          else
          {
            v37 = a3;
            if (v27 >= 0x15555556)
              goto LABEL_34;
            v29 = a4;
            v30 = 12 * v27;
            v31 = WTF::fastMalloc((WTF *)(12 * v27));
            *(_DWORD *)(a5 + 8) = (v30 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)a5 = v31;
            a4 = v29;
            a3 = v37;
          }
          if ((_DWORD)v24)
          {
            v32 = v28;
            do
            {
              *(_DWORD *)v31 = *(_DWORD *)v32;
              *(_QWORD *)(v31 + 4) = *(_QWORD *)(v32 + 4);
              v32 += 12;
              v31 += 12;
            }
            while (v32 != v28 + 12 * v24);
          }
          if (v6 != v28 && v28)
          {
            if (*(_QWORD *)a5 == v28)
            {
              *(_QWORD *)a5 = 0;
              *(_DWORD *)(a5 + 8) = 0;
            }
            WTF::fastFree(v28, v14, v15, v16, v17, v18, v19, v20);
          }
        }
        v33 = *(unsigned int *)(a5 + 12);
        if (v25 < v33)
        {
LABEL_34:
          __break(0xC471u);
          JUMPOUT(0x198118FD0);
        }
        v34 = *(_QWORD *)a5 + 12 * v33;
        v35 = (WTF *)((char *)v21 + 12 * v22);
        v12 = v39;
        a2 = v40;
        do
        {
          *(_DWORD *)v34 = *(_DWORD *)v21;
          *(_QWORD *)(v34 + 4) = *(_QWORD *)((char *)v21 + 4);
          v21 = (WTF *)((char *)v21 + 12);
          v34 += 12;
        }
        while (v21 != v35);
        *(_DWORD *)(a5 + 12) = v25;
        v21 = v41;
        v13 = v38;
      }
      if (v13 != v21 && v21 != 0)
      {
        v41 = 0;
        v42 = 0;
        WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
      }
      ++v11;
    }
    while (v11 != v12);
  }
}

void JSC::AdaptiveInferredPropertyValueWatchpointBase::install(JSC::AdaptiveInferredPropertyValueWatchpointBase *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;

  v10 = 16 * (**((_DWORD **)this + 1) & 0xFFFFFFFE);
  v11 = (char *)this + 32;
  v12 = *(_QWORD *)(v10 + 0x60);
  if ((v12 & 1) != 0)
  {
    v51 = (v12 >> 1) & 3;
    v12 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v12 = 1;
    *(_BYTE *)(v12 + 4) = v51;
    *(_BYTE *)(v12 + 5) = 0;
    *(_QWORD *)(v12 + 8) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v12 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v10 + 96) = v12;
  }
  v14 = *(_QWORD *)(v12 + 8);
  v13 = (_QWORD *)(v12 + 8);
  *((_QWORD *)this + 4) = v14;
  *((_QWORD *)this + 5) = v13;
  *v13 = v11;
  *(_QWORD *)(v14 + 8) = v11;
  *((_WORD *)v13 - 2) = 257;
  v15 = *((_QWORD *)this + 2);
  if (!(v15 >> 4) || ((v15 >> 4) & ~*(_DWORD *)(v10 + 32)) != 0)
    goto LABEL_29;
  v16 = *(_QWORD *)(v10 + 88);
  if (!v16)
  {
    v29 = *(_QWORD *)(v10 + 64);
    if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
      goto LABEL_29;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v10, a2, 1, a4, a5, a6, a7, a8);
    if (!v16)
      goto LABEL_29;
  }
  if (!*(_DWORD *)(v16 + 24))
    goto LABEL_29;
  v17 = v15 & 0xFFFFFFFFFFFFLL;
  v18 = *(_QWORD *)(v16 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = *(unsigned int *)(v16 + 8);
  v21 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
  if ((v18 & 1) != 0)
  {
    if ((v21 & 0x20) != 0)
      v21 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x20);
    v22 = *(_DWORD *)(v16 + 12);
    v23 = (v21 >> 8) & *(_QWORD *)&v22;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (*(_BYTE *)(v19 + v23))
    {
      v25 = v19 + v20;
      v26 = 1;
      while (1)
      {
        v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
        if (v17 == (v27 & 0xFFFFFFFFFFFFLL))
          break;
        v23 = ((_DWORD)v23 + v26) & v22;
        v24 = *(unsigned __int8 *)(v19 + v23);
        ++v26;
        LODWORD(v28) = -1;
        if (!*(_BYTE *)(v19 + v23))
          goto LABEL_30;
      }
      v28 = HIBYTE(v27);
      goto LABEL_30;
    }
LABEL_29:
    LODWORD(v28) = -1;
    goto LABEL_30;
  }
  if ((v21 & 0x20) != 0)
    v21 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x20);
  v30 = *(_DWORD *)(v16 + 12);
  v31 = v30 & (v21 >> 8);
  v32 = *(_DWORD *)(v19 + 4 * v31);
  if (!v32)
    goto LABEL_29;
  v33 = v19 + 4 * v20;
  v34 = 1;
  while (1)
  {
    v35 = (v32 - 1);
    if (*(_QWORD *)(v33 + 16 * v35) == v17)
      break;
    v31 = (v31 + v34) & v30;
    v32 = *(_DWORD *)(v19 + 4 * v31);
    ++v34;
    LODWORD(v28) = -1;
    if (!v32)
      goto LABEL_30;
  }
  LODWORD(v28) = *(_DWORD *)(v33 + 16 * v35 + 8);
LABEL_30:
  v36 = (unsigned __int8 *)(v10 + 15);
  if (__ldaxr((unsigned __int8 *)(v10 + 15)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v36))
  {
    goto LABEL_33;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10 + 15);
LABEL_33:
  v38 = *(_QWORD *)(v10 + 64);
  if (!v38 || *(_BYTE *)(v38 + 5) == 1 || (v44 = *(_QWORD *)(v38 + 56)) == 0)
  {
LABEL_35:
    v39 = 0;
    goto LABEL_36;
  }
  v45 = *(_DWORD *)(v44 - 8);
  v46 = 9 * ((v28 + ~((_DWORD)v28 << 15)) ^ ((v28 + ~((_DWORD)v28 << 15)) >> 10));
  v47 = (v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11);
  v48 = v45 & (v47 ^ HIWORD(v47));
  v49 = *(_DWORD *)(v44 + 16 * v48);
  if (v49 != (_DWORD)v28)
  {
    v50 = 1;
    while (v49 != 0x7FFFFFFF)
    {
      v48 = ((_DWORD)v48 + v50) & v45;
      v49 = *(_DWORD *)(v44 + 16 * v48);
      ++v50;
      if (v49 == (_DWORD)v28)
        goto LABEL_44;
    }
    goto LABEL_35;
  }
LABEL_44:
  v39 = *(_QWORD *)(v44 + 16 * v48 + 8);
LABEL_36:
  v40 = __ldxr(v36);
  if (v40 == 1)
  {
    if (!__stlxr(0, v36))
      goto LABEL_41;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v36, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_41:
  v42 = *(_QWORD *)(v39 + 8);
  v41 = (_QWORD *)(v39 + 8);
  *((_QWORD *)this + 7) = v42;
  *((_QWORD *)this + 8) = v41;
  v43 = (char *)this + 56;
  *v41 = v43;
  *(_QWORD *)(v42 + 8) = v43;
  *((_WORD *)v41 - 2) = 257;
}

void JSC::AdaptiveInferredPropertyValueWatchpointBase::fire(JSC::AdaptiveInferredPropertyValueWatchpointBase *a1, JSC::VM *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v6 = (_QWORD *)*((_QWORD *)a1 + 5);
  if (v6)
  {
    v22 = *((_QWORD *)a1 + 4);
    *v6 = v22;
    *(_QWORD *)(v22 + 8) = v6;
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
  }
  v7 = (_QWORD *)*((_QWORD *)a1 + 8);
  if (v7)
  {
    v8 = *((_QWORD *)a1 + 7);
    *v7 = v8;
    *(_QWORD *)(v8 + 8) = v7;
    *((_QWORD *)a1 + 7) = 0;
    *((_QWORD *)a1 + 8) = 0;
  }
  if ((*(unsigned int (**)(JSC::AdaptiveInferredPropertyValueWatchpointBase *))(*(_QWORD *)a1 + 16))(a1))
  {
    JSC::ObjectPropertyCondition::isWatchable((uint64_t)a1 + 8, 1, v9, v10, v11, v12, v13, v14);
    if (v21)
      JSC::AdaptiveInferredPropertyValueWatchpointBase::install(a1, a2, v15, v16, v17, v18, v19, v20);
    else
      (*(void (**)(JSC::AdaptiveInferredPropertyValueWatchpointBase *, JSC::VM *, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
  }
}

uint64_t JSC::AdaptiveInferredPropertyValueWatchpointBase::isValid(JSC::AdaptiveInferredPropertyValueWatchpointBase *this)
{
  return 1;
}

void JSC::ArithProfile<unsigned short>::emitObserveResult(unsigned __int16 *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  WTF *v117;
  _DWORD v118[2];
  char v119;
  __int16 v120;
  char v121;
  _DWORD v122[3];
  _DWORD v123[3];
  _DWORD v124[2];
  char v125;
  __int16 v126;
  char v127;
  unsigned int v128[3];
  _DWORD v129[3];
  WTF *v130;
  uint64_t v131;
  _BYTE v132[24];
  WTF *v133;
  uint64_t v134;
  _BYTE v135[28];
  int v136[3];

  if ((~*a1 & 0x3F) != 0)
  {
    v133 = (WTF *)v135;
    v134 = 2;
    v130 = (WTF *)v132;
    v131 = 2;
    v13 = a3;
    JSC::AssemblyHelpers::branchIfInt32((uint64_t)v129, a2, a3, a5, a5, a6, a7, a8);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v133, v129, v14, v15, v16, v17, v18, v19);
    JSC::AssemblyHelpers::branchIfNotDoubleKnownNotInt32((uint64_t)v128, a2, v13, a5, v20, v21, v22, v23);
    JSC::ArithProfile<unsigned short>::emitSetDouble(a1, a2, a4, v24, v25, v26, v27, v28);
    JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v29, v30, v31, v32, v33, v34, v35, v136);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v36, v37, v38, v39, v40, v41);
    if (*(_BYTE *)(a2 + 328))
      v48 = 69;
    else
      v48 = 65;
    v124[0] = v136[0];
    v124[1] = 0;
    v125 = v48;
    v126 = 15;
    v127 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v133, v124, v42, v43, v44, v45, v46, v47);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v128, a2, v49, v50, v51, v52, v53, v54);
    JSC::AssemblyHelpers::branchIfNotCell(a2, v13, a5, v55, v56, v57, v58, v59, (uint64_t)v123);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v130, v123, v60, v61, v62, v63, v64, v65);
    JSC::AssemblyHelpers::branchIfNotHeapBigInt(a2, a3, v66, v67, v68, v69, v70, (uint64_t)v122);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v130, v122, v71, v72, v73, v74, v75, v76);
    if ((*a1 & 0x20) == 0)
      JSC::MacroAssemblerARM64::or16(a2, (JSC::ARM64LogicalImmediate *)0x20, (uint64_t)a1);
    JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v77, v78, v79, v80, v81, v82, v83, v136);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v84, v85, v86, v87, v88, v89);
    if (*(_BYTE *)(a2 + 328))
      v96 = 69;
    else
      v96 = 65;
    v118[0] = v136[0];
    v118[1] = 0;
    v119 = v96;
    v120 = 15;
    v121 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v133, v118, v90, v91, v92, v93, v94, v95);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v130, a2, v97, v98, v99, v100, v101, v102);
    if ((*a1 & 4) == 0)
      JSC::MacroAssemblerARM64::or16(a2, (JSC::ARM64LogicalImmediate *)4, (uint64_t)a1);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v133, a2, v103, v104, v105, v106, v107, v108);
    v116 = v130;
    if (v132 != (_BYTE *)v130 && v130)
    {
      v130 = 0;
      LODWORD(v131) = 0;
      WTF::fastFree((unint64_t)v116, v109, v110, v111, v112, v113, v114, v115);
    }
    v117 = v133;
    if (v135 != (_BYTE *)v133)
    {
      if (v133)
      {
        v133 = 0;
        LODWORD(v134) = 0;
        WTF::fastFree((unint64_t)v117, v109, v110, v111, v112, v113, v114, v115);
      }
    }
  }
}

void JSC::AssemblyHelpers::branchIfInt32(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a3;
  if (a4 == 1)
    JSC::MacroAssemblerARM64::branch64(a2, 2, v8, 27, a5, a6, a7, a8, a1);
  else
    JSC::MacroAssemblerARM64::branch64(a2, 2, v8, 0xFFFE000000000000, a5, a6, a7, a8, a1);
}

void JSC::AssemblyHelpers::branchIfNotDoubleKnownNotInt32(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a3;
  if (a4 == 1)
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, v8, 27, a5, a6, a7, a8, a1);
  else
    JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000000, a2, 0, v8, a5, a6, a7, a8, a1);
}

void JSC::ArithProfile<unsigned short>::emitSetDouble(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  JSC::AssemblerBuffer *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if ((~*a1 & 0x1B) != 0)
  {
    v8 = a3;
    v11 = (JSC::AssemblerBuffer *)(a2 + 56);
    v12 = a3 & 0x1F | 0x52800360;
    v13 = *(_DWORD *)(a2 + 200);
    if (v13 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v12;
    *(_DWORD *)(a2 + 200) += 4;
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19811973CLL);
    }
    v14 = v8 & 0x1F;
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::load16(a2, (uint64_t)a1, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a2 + 200);
    if (v22 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, v15, v16, v17, v18, v19, v20, v21);
      v22 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v22) = (v14 << 16) | 0x2A000210;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::store16(a2, 16, (uint64_t)a1, v17, v18, v19, v20, v21);
  }
}

void JSC::MacroAssemblerARM64::or16(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3)
{
  unsigned int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v4 = this;
  v6 = JSC::ARM64LogicalImmediate::create32(this);
  if (v6 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1981198A4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load16(a1, a3, *(char *)(a1 + 304), v7, v8, v9, v10, v11);
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)v4, 17, *(char *)(a1 + 272));
      goto LABEL_9;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198119874);
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_12;
  v12 = v6;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load16(a1, a3, *(char *)(a1 + 272), v7, v8, v9, v10, v11);
  v20 = *(_DWORD *)(a1 + 200);
  if (v20 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, v15, v16, v17, v18, v19);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = (v12 << 10) | 0x32000210;
  *(_DWORD *)(a1 + 200) += 4;
LABEL_9:
  JSC::MacroAssemblerARM64::store16(a1, 16, a3, v15, v16, v17, v18, v19);
}

unint64_t *JSC::ArrayAllocationProfile::updateProfile(unint64_t *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;

  v1 = *this;
  *this &= 0xFFFF000000000000;
  v2 = v1 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
  {
    v4 = HIWORD(v1);
    v5 = HIBYTE(v1);
    v6 = HIBYTE(v1) & 0xF;
    v7 = *(_BYTE *)(v2 + 4);
    if (v6 <= (v7 & 0xFu))
      LODWORD(v6) = v7 & 0xF;
    if (v6 >= 0xA)
      v8 = 9;
    else
      v8 = v6;
    v9 = v8 | 0x10;
    if ((v5 & 0x10) != 0)
      LODWORD(v6) = v9;
    if ((*(_BYTE *)(v2 + 4) & 0xE) != 0)
      v10 = *(_DWORD *)(*(_QWORD *)(v2 + 8) - 4);
    else
      v10 = 0;
    if (v4 > v10)
      v10 = v4;
    if (v10 >= 0x19)
      v10 = 25;
    *this = (unint64_t)(v10 | ((_DWORD)v6 << 8)) << 48;
  }
  return this;
}

uint64_t JSC::dumpArrayModes(uint64_t this, WTF::PrintStream *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  char *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  WTF::PrintStream *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  char *v20;
  size_t v21;
  WTF::PrintStream *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  char *v28;
  size_t v29;
  WTF::PrintStream *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  char *v36;
  size_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  WTF::PrintStream *v42;
  float v43;
  char *v44;
  size_t v45;
  WTF::PrintStream *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  WTF::PrintStream *v50;
  float v51;
  char *v52;
  size_t v53;
  WTF::PrintStream *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  WTF::PrintStream *v58;
  float v59;
  char *v60;
  size_t v61;
  WTF::PrintStream *v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  WTF::PrintStream *v66;
  float v67;
  char *v68;
  size_t v69;
  WTF::PrintStream *v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  WTF::PrintStream *v74;
  float v75;
  char *v76;
  size_t v77;
  WTF::PrintStream *v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  WTF::PrintStream *v82;
  float v83;
  char *v84;
  size_t v85;
  WTF::PrintStream *v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  WTF::PrintStream *v90;
  float v91;
  char *v92;
  size_t v93;
  WTF::PrintStream *v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  WTF::PrintStream *v98;
  float v99;
  char *v100;
  size_t v101;
  WTF::PrintStream *v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  WTF::PrintStream *v106;
  float v107;
  char *v108;
  size_t v109;
  WTF::PrintStream *v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  WTF::PrintStream *v114;
  float v115;
  char *v116;
  size_t v117;
  WTF::PrintStream *v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  WTF::PrintStream *v122;
  float v123;
  char *v124;
  size_t v125;
  WTF::PrintStream *v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  WTF::PrintStream *v130;
  float v131;
  char *v132;
  size_t v133;
  WTF::PrintStream *v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  WTF::PrintStream *v138;
  float v139;
  char *v140;
  size_t v141;
  WTF::PrintStream *v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  WTF::PrintStream *v146;
  float v147;
  char *v148;
  size_t v149;
  WTF::PrintStream *v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  WTF::PrintStream *v154;
  float v155;
  char *v156;
  size_t v157;
  WTF::PrintStream *v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  WTF::PrintStream *v162;
  float v163;
  char *v164;
  size_t v165;
  WTF::PrintStream *v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  WTF::PrintStream *v170;
  float v171;
  char *v172;
  size_t v173;
  WTF::PrintStream *v174;
  float v175;
  uint64_t v176;
  uint64_t v177;
  WTF::PrintStream *v178;
  float v179;
  char *v180;
  size_t v181;
  WTF::PrintStream *v182;
  float v183;
  uint64_t v184;
  uint64_t v185;
  WTF::PrintStream *v186;
  float v187;
  char *v188;
  size_t v189;
  WTF::PrintStream *v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  WTF::PrintStream *v194;
  float v195;
  char *v196;
  size_t v197;
  WTF::PrintStream *v198;
  float v199;
  uint64_t v200;
  uint64_t v201;
  WTF::PrintStream *v202;
  float v203;
  char *v204;
  size_t v205;
  WTF::PrintStream *v206;
  float v207;
  uint64_t v208;
  uint64_t v209;
  WTF::PrintStream *v210;
  float v211;
  char *v212;
  size_t v213;
  WTF::PrintStream *v214;
  float v215;
  uint64_t v216;
  WTF::PrintStream *v217;
  float v218;
  char *v219;
  size_t v220;
  int v221;
  int v222;
  char v223;

  v2 = this;
  if ((_DWORD)a2 == -21020677)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v7 = "TOP";
    v8 = 3;
    goto LABEL_245;
  }
  v3 = (int)a2;
  if (!(_DWORD)a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v7 = "<empty>";
    v8 = 7;
LABEL_245:
    WTF::StringImpl::utf8ForCharacters(v7, v8, (uint64_t)&v221, v6);
    WTF::printExpectedCStringHelper(v5, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  if ((a2 & 1) == 0)
  {
    v9 = 0;
    if ((a2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_13;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v221, v13);
  WTF::printExpectedCStringHelper(v12, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("NonArray", 8uLL, (uint64_t)&v221, v15);
  WTF::printExpectedCStringHelper(v14, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x10) != 0)
  {
LABEL_13:
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    if ((v3 & 1) != 0)
    {
      v20 = "|";
      v21 = 1;
    }
    else
    {
      v20 = "";
      v21 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v20, v21, (uint64_t)&v221, v19);
    WTF::printExpectedCStringHelper(v18, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    WTF::StringImpl::utf8ForCharacters("NonArrayWithInt32", 0x11uLL, (uint64_t)&v221, v23);
    WTF::printExpectedCStringHelper(v22, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v9 = 1;
  }
LABEL_21:
  if ((v3 & 0x40) != 0)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    if (v9)
    {
      v28 = "|";
      v29 = 1;
    }
    else
    {
      v28 = "";
      v29 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v28, v29, (uint64_t)&v221, v27);
    WTF::printExpectedCStringHelper(v26, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    WTF::StringImpl::utf8ForCharacters("NonArrayWithDouble", 0x12uLL, (uint64_t)&v221, v31);
    WTF::printExpectedCStringHelper(v30, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v9 = 1;
    if ((v3 & 0x100) == 0)
    {
LABEL_23:
      if ((v3 & 0x400) == 0)
        goto LABEL_24;
      goto LABEL_63;
    }
  }
  else if ((v3 & 0x100) == 0)
  {
    goto LABEL_23;
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
  if (v9)
  {
    v36 = "|";
    v37 = 1;
  }
  else
  {
    v36 = "";
    v37 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v36, v37, (uint64_t)&v221, v35);
  WTF::printExpectedCStringHelper(v34, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  WTF::StringImpl::utf8ForCharacters("NonArrayWithContiguous", 0x16uLL, (uint64_t)&v221, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x400) == 0)
  {
LABEL_24:
    if ((v3 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_63:
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
  if (v9)
  {
    v44 = "|";
    v45 = 1;
  }
  else
  {
    v44 = "";
    v45 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v44, v45, (uint64_t)&v221, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v46 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters("NonArrayWithArrayStorage", 0x18uLL, (uint64_t)&v221, v47);
  WTF::printExpectedCStringHelper(v46, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x1000) == 0)
  {
LABEL_25:
    if ((v3 & 2) == 0)
      goto LABEL_26;
    goto LABEL_79;
  }
LABEL_71:
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
  if (v9)
  {
    v52 = "|";
    v53 = 1;
  }
  else
  {
    v52 = "";
    v53 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v52, v53, (uint64_t)&v221, v51);
  WTF::printExpectedCStringHelper(v50, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
  v54 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
  WTF::StringImpl::utf8ForCharacters("NonArrayWithSlowPutArrayStorage", 0x1FuLL, (uint64_t)&v221, v55);
  WTF::printExpectedCStringHelper(v54, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 2) == 0)
  {
LABEL_26:
    if ((v3 & 8) == 0)
      goto LABEL_27;
    goto LABEL_87;
  }
LABEL_79:
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
  if (v9)
  {
    v60 = "|";
    v61 = 1;
  }
  else
  {
    v60 = "";
    v61 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v60, v61, (uint64_t)&v221, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  v62 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
  WTF::StringImpl::utf8ForCharacters("ArrayClass", 0xAuLL, (uint64_t)&v221, v63);
  WTF::printExpectedCStringHelper(v62, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 8) == 0)
  {
LABEL_27:
    if ((v3 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_95;
  }
LABEL_87:
  v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
  v66 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
  if (v9)
  {
    v68 = "|";
    v69 = 1;
  }
  else
  {
    v68 = "";
    v69 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v68, v69, (uint64_t)&v221, v67);
  WTF::printExpectedCStringHelper(v66, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
  v70 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters("ArrayWithUndecided", 0x12uLL, (uint64_t)&v221, v71);
  WTF::printExpectedCStringHelper(v70, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_28:
    if ((v3 & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_103;
  }
LABEL_95:
  v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
  v74 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
  if (v9)
  {
    v76 = "|";
    v77 = 1;
  }
  else
  {
    v76 = "";
    v77 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v76, v77, (uint64_t)&v221, v75);
  WTF::printExpectedCStringHelper(v74, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
  WTF::StringImpl::utf8ForCharacters("ArrayWithInt32", 0xEuLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x80) == 0)
  {
LABEL_29:
    if ((v3 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_103:
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80);
  v82 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
  if (v9)
  {
    v84 = "|";
    v85 = 1;
  }
  else
  {
    v84 = "";
    v85 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v84, v85, (uint64_t)&v221, v83);
  WTF::printExpectedCStringHelper(v82, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
  (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
  v86 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80);
  WTF::StringImpl::utf8ForCharacters("ArrayWithDouble", 0xFuLL, (uint64_t)&v221, v87);
  WTF::printExpectedCStringHelper(v86, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x200) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_119;
  }
LABEL_111:
  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 32))(v88);
  v90 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 32))(v89);
  if (v9)
  {
    v92 = "|";
    v93 = 1;
  }
  else
  {
    v92 = "";
    v93 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v92, v93, (uint64_t)&v221, v91);
  WTF::printExpectedCStringHelper(v90, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v89 + 40))(v89);
  (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
  v94 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 32))(v88);
  WTF::StringImpl::utf8ForCharacters("ArrayWithContiguous", 0x13uLL, (uint64_t)&v221, v95);
  WTF::printExpectedCStringHelper(v94, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_127;
  }
LABEL_119:
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
  v98 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
  if (v9)
  {
    v100 = "|";
    v101 = 1;
  }
  else
  {
    v100 = "";
    v101 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v100, v101, (uint64_t)&v221, v99);
  WTF::printExpectedCStringHelper(v98, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v97 + 40))(v97);
  (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
  v102 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
  WTF::StringImpl::utf8ForCharacters("ArrayWithArrayStorage", 0x15uLL, (uint64_t)&v221, v103);
  WTF::printExpectedCStringHelper(v102, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x2000) == 0)
  {
LABEL_32:
    if ((v3 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_135;
  }
LABEL_127:
  v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104);
  v106 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 32))(v105);
  if (v9)
  {
    v108 = "|";
    v109 = 1;
  }
  else
  {
    v108 = "";
    v109 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v108, v109, (uint64_t)&v221, v107);
  WTF::printExpectedCStringHelper(v106, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
  (*(void (**)(uint64_t))(*(_QWORD *)v104 + 40))(v104);
  v110 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104);
  WTF::StringImpl::utf8ForCharacters("ArrayWithSlowPutArrayStorage", 0x1CuLL, (uint64_t)&v221, v111);
  WTF::printExpectedCStringHelper(v110, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v104 + 40))(v104);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x200000) == 0)
  {
LABEL_33:
    if ((v3 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_143;
  }
LABEL_135:
  v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 32))(v112);
  v114 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 32))(v113);
  if (v9)
  {
    v116 = "|";
    v117 = 1;
  }
  else
  {
    v116 = "";
    v117 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v116, v117, (uint64_t)&v221, v115);
  WTF::printExpectedCStringHelper(v114, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v113 + 40))(v113);
  (*(void (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  v118 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 32))(v112);
  WTF::StringImpl::utf8ForCharacters("CopyOnWriteArrayWithInt32", 0x19uLL, (uint64_t)&v221, v119);
  WTF::printExpectedCStringHelper(v118, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x800000) == 0)
  {
LABEL_34:
    if ((v3 & 0x2000000) == 0)
      goto LABEL_35;
    goto LABEL_151;
  }
LABEL_143:
  v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 32))(v120);
  v122 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 32))(v121);
  if (v9)
  {
    v124 = "|";
    v125 = 1;
  }
  else
  {
    v124 = "";
    v125 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v124, v125, (uint64_t)&v221, v123);
  WTF::printExpectedCStringHelper(v122, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
  (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
  v126 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 32))(v120);
  WTF::StringImpl::utf8ForCharacters("CopyOnWriteArrayWithDouble", 0x1AuLL, (uint64_t)&v221, v127);
  WTF::printExpectedCStringHelper(v126, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v3 & 0x10000) == 0)
      goto LABEL_36;
    goto LABEL_159;
  }
LABEL_151:
  v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 32))(v128);
  v130 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 32))(v129);
  if (v9)
  {
    v132 = "|";
    v133 = 1;
  }
  else
  {
    v132 = "";
    v133 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v132, v133, (uint64_t)&v221, v131);
  WTF::printExpectedCStringHelper(v130, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v129 + 40))(v129);
  (*(void (**)(uint64_t))(*(_QWORD *)v128 + 40))(v128);
  v134 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 32))(v128);
  WTF::StringImpl::utf8ForCharacters("CopyOnWriteArrayWithContiguous", 0x1EuLL, (uint64_t)&v221, v135);
  WTF::printExpectedCStringHelper(v134, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v128 + 40))(v128);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x10000) == 0)
  {
LABEL_36:
    if ((v3 & 0x20000) == 0)
      goto LABEL_37;
    goto LABEL_167;
  }
LABEL_159:
  v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 32))(v136);
  v138 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 32))(v137);
  if (v9)
  {
    v140 = "|";
    v141 = 1;
  }
  else
  {
    v140 = "";
    v141 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v140, v141, (uint64_t)&v221, v139);
  WTF::printExpectedCStringHelper(v138, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v137 + 40))(v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v136 + 40))(v136);
  v142 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 32))(v136);
  WTF::StringImpl::utf8ForCharacters("Int8ArrayMode", 0xDuLL, (uint64_t)&v221, v143);
  WTF::printExpectedCStringHelper(v142, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v136 + 40))(v136);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x20000) == 0)
  {
LABEL_37:
    if ((v3 & 0x40000) == 0)
      goto LABEL_38;
    goto LABEL_175;
  }
LABEL_167:
  v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 32))(v144);
  v146 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
  if (v9)
  {
    v148 = "|";
    v149 = 1;
  }
  else
  {
    v148 = "";
    v149 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v148, v149, (uint64_t)&v221, v147);
  WTF::printExpectedCStringHelper(v146, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v145 + 40))(v145);
  (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
  v150 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 32))(v144);
  WTF::StringImpl::utf8ForCharacters("Int16ArrayMode", 0xEuLL, (uint64_t)&v221, v151);
  WTF::printExpectedCStringHelper(v150, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x40000) == 0)
  {
LABEL_38:
    if ((v3 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_183;
  }
LABEL_175:
  v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 32))(v152);
  v154 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 32))(v153);
  if (v9)
  {
    v156 = "|";
    v157 = 1;
  }
  else
  {
    v156 = "";
    v157 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v156, v157, (uint64_t)&v221, v155);
  WTF::printExpectedCStringHelper(v154, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v153 + 40))(v153);
  (*(void (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
  v158 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 32))(v152);
  WTF::StringImpl::utf8ForCharacters("Int32ArrayMode", 0xEuLL, (uint64_t)&v221, v159);
  WTF::printExpectedCStringHelper(v158, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x80000) == 0)
  {
LABEL_39:
    if ((v3 & 0x100000) == 0)
      goto LABEL_40;
    goto LABEL_191;
  }
LABEL_183:
  v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 32))(v160);
  v162 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 32))(v161);
  if (v9)
  {
    v164 = "|";
    v165 = 1;
  }
  else
  {
    v164 = "";
    v165 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v164, v165, (uint64_t)&v221, v163);
  WTF::printExpectedCStringHelper(v162, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v161 + 40))(v161);
  (*(void (**)(uint64_t))(*(_QWORD *)v160 + 40))(v160);
  v166 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 32))(v160);
  WTF::StringImpl::utf8ForCharacters("Uint8ArrayMode", 0xEuLL, (uint64_t)&v221, v167);
  WTF::printExpectedCStringHelper(v166, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v160 + 40))(v160);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x100000) == 0)
  {
LABEL_40:
    if ((v3 & 0x4000000) == 0)
      goto LABEL_41;
    goto LABEL_199;
  }
LABEL_191:
  v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 32))(v168);
  v170 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 32))(v169);
  if (v9)
  {
    v172 = "|";
    v173 = 1;
  }
  else
  {
    v172 = "";
    v173 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v172, v173, (uint64_t)&v221, v171);
  WTF::printExpectedCStringHelper(v170, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v169 + 40))(v169);
  (*(void (**)(uint64_t))(*(_QWORD *)v168 + 40))(v168);
  v174 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 32))(v168);
  WTF::StringImpl::utf8ForCharacters("Uint8ClampedArrayMode", 0x15uLL, (uint64_t)&v221, v175);
  WTF::printExpectedCStringHelper(v174, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v168 + 40))(v168);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x4000000) == 0)
  {
LABEL_41:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_42;
    goto LABEL_207;
  }
LABEL_199:
  v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 32))(v176);
  v178 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 32))(v177);
  if (v9)
  {
    v180 = "|";
    v181 = 1;
  }
  else
  {
    v180 = "";
    v181 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v180, v181, (uint64_t)&v221, v179);
  WTF::printExpectedCStringHelper(v178, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v177 + 40))(v177);
  (*(void (**)(uint64_t))(*(_QWORD *)v176 + 40))(v176);
  v182 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 32))(v176);
  WTF::StringImpl::utf8ForCharacters("Uint16ArrayMode", 0xFuLL, (uint64_t)&v221, v183);
  WTF::printExpectedCStringHelper(v182, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v176 + 40))(v176);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x8000000) == 0)
  {
LABEL_42:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_43;
    goto LABEL_215;
  }
LABEL_207:
  v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 32))(v184);
  v186 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 32))(v185);
  if (v9)
  {
    v188 = "|";
    v189 = 1;
  }
  else
  {
    v188 = "";
    v189 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v188, v189, (uint64_t)&v221, v187);
  WTF::printExpectedCStringHelper(v186, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v185 + 40))(v185);
  (*(void (**)(uint64_t))(*(_QWORD *)v184 + 40))(v184);
  v190 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 32))(v184);
  WTF::StringImpl::utf8ForCharacters("Uint32ArrayMode", 0xFuLL, (uint64_t)&v221, v191);
  WTF::printExpectedCStringHelper(v190, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v184 + 40))(v184);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x10000000) == 0)
  {
LABEL_43:
    if ((v3 & 0x20000000) == 0)
      goto LABEL_44;
    goto LABEL_223;
  }
LABEL_215:
  v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v192 + 32))(v192);
  v194 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 32))(v193);
  if (v9)
  {
    v196 = "|";
    v197 = 1;
  }
  else
  {
    v196 = "";
    v197 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v196, v197, (uint64_t)&v221, v195);
  WTF::printExpectedCStringHelper(v194, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v193 + 40))(v193);
  (*(void (**)(uint64_t))(*(_QWORD *)v192 + 40))(v192);
  v198 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v192 + 32))(v192);
  WTF::StringImpl::utf8ForCharacters("Float32ArrayMode", 0x10uLL, (uint64_t)&v221, v199);
  WTF::printExpectedCStringHelper(v198, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v192 + 40))(v192);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x20000000) == 0)
  {
LABEL_44:
    if ((v3 & 0x40000000) == 0)
      goto LABEL_45;
    goto LABEL_231;
  }
LABEL_223:
  v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v200 + 32))(v200);
  v202 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
  if (v9)
  {
    v204 = "|";
    v205 = 1;
  }
  else
  {
    v204 = "";
    v205 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v204, v205, (uint64_t)&v221, v203);
  WTF::printExpectedCStringHelper(v202, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v201 + 40))(v201);
  (*(void (**)(uint64_t))(*(_QWORD *)v200 + 40))(v200);
  v206 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v200 + 32))(v200);
  WTF::StringImpl::utf8ForCharacters("Float64ArrayMode", 0x10uLL, (uint64_t)&v221, v207);
  WTF::printExpectedCStringHelper(v206, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v200 + 40))(v200);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if ((v3 & 0x40000000) == 0)
  {
LABEL_45:
    if ((v3 & 0x80000000) == 0)
      return this;
    goto LABEL_239;
  }
LABEL_231:
  v208 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v209 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 32))(v208);
  v210 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v209 + 32))(v209);
  if (v9)
  {
    v212 = "|";
    v213 = 1;
  }
  else
  {
    v212 = "";
    v213 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v212, v213, (uint64_t)&v221, v211);
  WTF::printExpectedCStringHelper(v210, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v209 + 40))(v209);
  (*(void (**)(uint64_t))(*(_QWORD *)v208 + 40))(v208);
  v214 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 32))(v208);
  WTF::StringImpl::utf8ForCharacters("BigInt64ArrayMode", 0x11uLL, (uint64_t)&v221, v215);
  WTF::printExpectedCStringHelper(v214, "StringView", &v221);
  if (v222 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
  (*(void (**)(uint64_t))(*(_QWORD *)v208 + 40))(v208);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v9 = 1;
  if (v3 < 0)
  {
LABEL_239:
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v216 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v217 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 32))(v216);
    if (v9)
    {
      v219 = "|";
      v220 = 1;
    }
    else
    {
      v219 = "";
      v220 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v219, v220, (uint64_t)&v221, v218);
    WTF::printExpectedCStringHelper(v217, "StringView", &v221);
    if (v222 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v223, &v221);
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 40))(v216);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v7 = "BigUint64ArrayMode";
    v8 = 18;
    goto LABEL_245;
  }
  return this;
}

int *JSC::ArrayProfile::computeUpdatedPrediction(int *result, uint64_t a2, int8x8_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint8x8_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;

  v3 = *result;
  *result = 0;
  if (v3)
  {
    v4 = 16 * (v3 & 0xFFFFFFFE);
    v5 = *(unsigned __int8 *)(v4 + 9);
    if ((v5 - 39) <= 0xA)
      v6 = JSC::typedArrayModes[v5 - 39];
    else
      v6 = 1 << *(_BYTE *)(v4 + 8);
    v7 = result[1];
    v8 = result[2] | v6;
    result[2] = v8;
    if ((v7 & 0x40) == 0)
    {
      a3.i32[0] = v8;
      v9 = (uint8x8_t)vcnt_s8(a3);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.i32[0] >= 2u)
      {
        v18 = *(unsigned __int8 *)(v4 + 9);
        if ((v18 - 39) <= 0xA)
          v19 = JSC::typedArrayModes[v18 - 39];
        else
          v19 = 1 << *(_BYTE *)(v4 + 8);
        v7 |= 0x40u;
        result[1] = v7;
        result[2] = v19;
      }
    }
    if ((*(_WORD *)(v4 + 12) & 0x100) != 0)
    {
      v7 |= 8u;
      result[1] = v7;
    }
    v10 = *(_QWORD **)(a2 + 8);
    v11 = *(unsigned __int8 *)(v4 + 8);
    if ((v11 & 0x10) != 0)
      v12 = ((v11 & 0xE) + 10) >> 1;
    else
      v12 = (v11 >> 1) & 7;
    v13 = *((_DWORD *)v10 + v12 + 213);
    v14 = 16 * (v13 & 0xFFFFFFFE);
    if (!v13)
      v14 = 0;
    v15 = *(unsigned __int8 *)(v4 + 9);
    if (v14 != v4)
    {
      switch(*(_BYTE *)(v4 + 9))
      {
        case '\'':
          v16 = v10 + 208;
          goto LABEL_17;
        case '(':
          v16 = v10 + 211;
          goto LABEL_17;
        case ')':
          v16 = v10 + 214;
          goto LABEL_17;
        case '*':
          v16 = v10 + 217;
          goto LABEL_17;
        case '+':
          v16 = v10 + 220;
          goto LABEL_17;
        case ',':
          v16 = v10 + 223;
          goto LABEL_17;
        case '-':
          v16 = v10 + 226;
          goto LABEL_17;
        case '.':
          v16 = v10 + 229;
          goto LABEL_17;
        case '/':
          v16 = v10 + 232;
          goto LABEL_17;
        case '0':
          v16 = v10 + 235;
          goto LABEL_17;
        case '1':
          v16 = v10 + 238;
          goto LABEL_17;
        case '2':
          v16 = v10 + 241;
LABEL_17:
          v17 = *v16;
          if ((v17 & 1) != 0)
            v17 = 0;
          if (v17 != v4)
            goto LABEL_20;
          break;
        default:
LABEL_20:
          v7 |= 0x10u;
          result[1] = v7;
          v15 = *(unsigned __int8 *)(v4 + 9);
          break;
      }
    }
    if ((v15 - 39) <= 0xB)
    {
      if (*(_BYTE *)(16 * *(unsigned int *)(v4 + 76) + 0xF4))
        result[1] = v7 | 0x20;
    }
  }
  return result;
}

uint64_t JSC::ArrayProfile::computeUpdatedPrediction(uint64_t result, uint64_t a2, uint64_t a3, int8x8_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint8x8_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *(unsigned __int8 *)(a3 + 9);
  if ((v4 - 39) <= 0xA)
    v5 = JSC::typedArrayModes[v4 - 39];
  else
    v5 = 1 << *(_BYTE *)(a3 + 8);
  v6 = *(_DWORD *)(result + 4);
  v7 = *(_DWORD *)(result + 8) | v5;
  *(_DWORD *)(result + 8) = v7;
  if ((v6 & 0x40) == 0)
  {
    a4.i32[0] = v7;
    v8 = (uint8x8_t)vcnt_s8(a4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0] >= 2u)
    {
      v17 = *(unsigned __int8 *)(a3 + 9);
      if ((v17 - 39) <= 0xA)
        v18 = JSC::typedArrayModes[v17 - 39];
      else
        v18 = 1 << *(_BYTE *)(a3 + 8);
      v6 |= 0x40u;
      *(_DWORD *)(result + 4) = v6;
      *(_DWORD *)(result + 8) = v18;
    }
  }
  if ((*(_WORD *)(a3 + 12) & 0x100) != 0)
  {
    v6 |= 8u;
    *(_DWORD *)(result + 4) = v6;
  }
  v9 = *(_QWORD **)(a2 + 8);
  v10 = *(unsigned __int8 *)(a3 + 8);
  if ((v10 & 0x10) != 0)
    v11 = ((v10 & 0xE) + 10) >> 1;
  else
    v11 = (v10 >> 1) & 7;
  v12 = *((_DWORD *)v9 + v11 + 213);
  v13 = 16 * (v12 & 0xFFFFFFFE);
  if (!v12)
    v13 = 0;
  v14 = *(unsigned __int8 *)(a3 + 9);
  if (v13 != a3)
  {
    switch(*(_BYTE *)(a3 + 9))
    {
      case '\'':
        v15 = v9 + 208;
        goto LABEL_15;
      case '(':
        v15 = v9 + 211;
        goto LABEL_15;
      case ')':
        v15 = v9 + 214;
        goto LABEL_15;
      case '*':
        v15 = v9 + 217;
        goto LABEL_15;
      case '+':
        v15 = v9 + 220;
        goto LABEL_15;
      case ',':
        v15 = v9 + 223;
        goto LABEL_15;
      case '-':
        v15 = v9 + 226;
        goto LABEL_15;
      case '.':
        v15 = v9 + 229;
        goto LABEL_15;
      case '/':
        v15 = v9 + 232;
        goto LABEL_15;
      case '0':
        v15 = v9 + 235;
        goto LABEL_15;
      case '1':
        v15 = v9 + 238;
        goto LABEL_15;
      case '2':
        v15 = v9 + 241;
LABEL_15:
        v16 = *v15;
        if ((v16 & 1) != 0)
          v16 = 0;
        if (v16 != a3)
          goto LABEL_18;
        break;
      default:
LABEL_18:
        v6 |= 0x10u;
        *(_DWORD *)(result + 4) = v6;
        v14 = *(unsigned __int8 *)(a3 + 9);
        break;
    }
  }
  if ((v14 - 39) <= 0xB)
  {
    if (*(_BYTE *)(16 * *(unsigned int *)(a3 + 76) + 0xF4))
      *(_DWORD *)(result + 4) = v6 | 0x20;
  }
  return result;
}

void JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  unint64_t v29;
  unsigned int *v30;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v39;
  size_t v40;
  _BYTE *v41;
  int v42;
  int v43;
  char v44;
  _BOOL4 v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _BOOL4 v65;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  _DWORD *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  char v97;
  int v99;
  uint64_t v102;
  uint64_t v103;
  int **v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *i;
  uint64_t v108;
  WTF *v109;
  int v110;
  int v111;
  uint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  int v116;
  WTF *v117;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  unsigned int v122;
  int **v123;
  int v124;
  int *v125;
  uint64_t v126;
  int *v127;
  int *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int v134;
  int *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v141;
  _DWORD *v142;
  int *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  int *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v157;
  _DWORD *v158;
  uint64_t v159;
  int *v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  WTF *v170;
  uint64_t v171;
  _BYTE v172[132];
  int v173[3];

  v3 = (uint64_t)a3;
  *a3 = 0;
  a3[1] = 0;
  v170 = (WTF *)v172;
  v171 = 32;
  JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)0,JSC::CodeBlock,32ul>(a1, (uint64_t *)a2, &v170);
  if (HIDWORD(v171) >= 0x3333332)
  {
    __break(0xC471u);
    goto LABEL_198;
  }
  v4 = 80 * HIDWORD(v171) + 160;
  v5 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v171) + 160));
  *(_QWORD *)v3 = v5;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_DWORD *)(v3 + 8) = (v4 & 0xFFFFFFF0) / 0x50;
  *(_DWORD *)(v3 + 12) = 1;
  LODWORD(v168) = 0;
  v165 = (WTF *)1;
  if ((v4 - 80) < 0x50)
  {
    WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::SpecialBlockType,unsigned long>(v3, &v168, (uint64_t *)&v165);
    v12 = *(_QWORD *)v3;
  }
  else
  {
    v12 = *(_QWORD *)v3;
    *(_QWORD *)(v12 + 80) = 0;
    *(_DWORD *)(v12 + 88) = 1;
    *(_OWORD *)(v12 + 96) = 0uLL;
    *(_OWORD *)(v12 + 112) = 0uLL;
    *(_OWORD *)(v12 + 128) = 0uLL;
    *(_OWORD *)(v12 + 144) = 0uLL;
    *(_DWORD *)(v3 + 12) = 2;
  }
  v13 = (int **)(v12 + 32);
  v14 = *(_DWORD *)(v12 + 88);
  v15 = *(unsigned int *)(v12 + 44);
  if ((_DWORD)v15)
  {
    v143 = *v13;
    v144 = *(unsigned int *)(v12 + 44);
    while (1)
    {
      v145 = *v143++;
      if (v145 == v14)
        break;
      if (!--v144)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v165) = *(_DWORD *)(v12 + 88);
    if ((_DWORD)v15 == *(_DWORD *)(v12 + 40))
    {
      v141 = v12;
      v142 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v15 + 1, (unint64_t)&v165);
      v12 = v141;
      *(_DWORD *)(*(_QWORD *)(v141 + 32) + 4 * *(unsigned int *)(v141 + 44)) = *v142;
      v16 = *(_QWORD *)v3;
    }
    else
    {
      (*v13)[v15] = v14;
      v16 = v12;
    }
    ++*(_DWORD *)(v12 + 44);
    v12 = v16;
  }
  v17 = (uint64_t *)a2;
  v18 = *(unsigned int *)(v3 + 12);
  v165 = (WTF *)a2;
  LODWORD(v166) = 0;
  v19 = *(_DWORD *)(a2 + 12);
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = v12 + 80 * v18 - 80;
    v23 = *(_QWORD *)a2;
    v6 = 1;
    v159 = v3;
    v157 = *(_DWORD *)(a2 + 12);
    while (1)
    {
      v24 = (unsigned __int8 *)(v23 + v20);
      v25 = *v24;
      if ((v25 | 2) == 0x82)
        v25 = v24[1];
      v26 = v20;
      if (v21 || v25 == 15)
        break;
      v27 = HIDWORD(v171);
      if (HIDWORD(v171))
      {
        v28 = v170;
        do
        {
          v29 = v27 >> 1;
          v30 = (unsigned int *)((char *)v28 + 4 * (v27 >> 1));
          v32 = *v30;
          v31 = (WTF *)(v30 + 1);
          v27 += ~(v27 >> 1);
          if (v32 < v20)
            v28 = v31;
          else
            v27 = v29;
        }
        while (v27);
        if (v28 != (WTF *)((char *)v170 + 4 * HIDWORD(v171)) && *(_DWORD *)v28 <= v20)
          break;
        LOBYTE(v27) = 0;
      }
LABEL_22:
      v21 = (v25 - 46) < 0x2F && ((0x77FFFFE00001uLL >> (v25 - 46)) & 1) != 0
         || (v25 - 102) <= 0xF && ((1 << (v25 - 102)) & 0xA001) != 0
         || (v25 & 0xFE) == 0x70;
      v23 = *v17;
      if ((v27 & 1) == 0)
      {
        v33 = v23 + v26;
        v34 = *(unsigned __int8 *)(v23 + v26);
        v35 = v34;
        if ((v34 | 2) == 0x82)
          v35 = *(unsigned __int8 *)(v33 + 1);
        if (v34 == 130)
          v36 = 2;
        else
          v36 = v34 == 128;
        v37 = JSC::opcodeLengths[v35];
        if (v34 == 128 || v34 == 130)
          v39 = 2;
        else
          v39 = 1;
        v40 = *(unsigned int *)(v22 + 28);
        if ((_DWORD)v40 == *(_DWORD *)(v22 + 24))
        {
          v161 = v21;
          v48 = v26;
          v162 = v18;
          v49 = v40 + (v40 >> 2);
          if (v49 >= 0x10)
            v50 = v49 + 1;
          else
            v50 = 16;
          if (v50 <= v40 + 1)
            v51 = v40 + 1;
          else
            v51 = v50;
          if (HIDWORD(v51))
          {
            __break(0xC471u);
            JUMPOUT(0x19811CAC8);
          }
          v52 = v12;
          v53 = *(const void **)(v22 + 16);
          v54 = (void *)WTF::fastMalloc((WTF *)v51);
          *(_DWORD *)(v22 + 24) = v51;
          *(_QWORD *)(v22 + 16) = v54;
          memcpy(v54, v53, v40);
          v26 = v48;
          if (v53)
          {
            if (*(const void **)(v22 + 16) == v53)
            {
              *(_QWORD *)(v22 + 16) = 0;
              *(_DWORD *)(v22 + 24) = 0;
            }
            WTF::fastFree((unint64_t)v53, v55, v56, v7, v8, v9, v10, v11);
          }
          v41 = (_BYTE *)(*(_QWORD *)(v22 + 16) + *(unsigned int *)(v22 + 28));
          v18 = v162;
          v17 = (uint64_t *)a2;
          v3 = v159;
          v12 = v52;
          v19 = v157;
          v6 = 1;
          v21 = v161;
        }
        else
        {
          v41 = (_BYTE *)(*(_QWORD *)(v22 + 16) + v40);
        }
        *v41 = ((_BYTE)v37 << v36) + v39;
        ++*(_DWORD *)(v22 + 28);
        *(_DWORD *)(v22 + 4) += (v37 << v36) + v39;
        v23 = *v17;
      }
      v42 = *(unsigned __int8 *)(v23 + v26);
      v43 = v42;
      if ((v42 | 2) == 0x82)
        v43 = *(unsigned __int8 *)(v23 + v26 + 1);
      v44 = v42 == 128;
      if (v42 == 130)
        v44 = 2;
      v45 = v42 == 128 || v42 == 130;
      v46 = JSC::opcodeLengths[v43] << v44;
      if (v45)
        v47 = 2;
      else
        v47 = 1;
      v20 += v47 + v46;
      LODWORD(v166) = v20;
      if (v20 == v19)
        goto LABEL_83;
    }
    v168 = (uint64_t *)v18;
    if ((_DWORD)v18 == *(_DWORD *)(v3 + 8))
    {
      WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,unsigned long>(v3, (uint64_t)&v165, (uint64_t *)&v168);
      v6 = 1;
      v18 = *(unsigned int *)(v3 + 12);
      v12 = *(_QWORD *)v3;
    }
    else
    {
      v57 = v12 + 80 * v18;
      *(_DWORD *)v57 = v20;
      *(_DWORD *)(v57 + 8) = v18;
      v58 = v57;
      *(_OWORD *)(v57 + 32) = 0u;
      *(_OWORD *)(v57 + 48) = 0u;
      *(_OWORD *)(v57 + 64) = 0u;
      *(_DWORD *)(v57 + 4) = 0;
      v59 = (_DWORD *)(v57 + 4);
      *(_OWORD *)(v58 + 16) = 0u;
      v60 = (uint64_t *)(v58 + 16);
      v61 = (unsigned __int8 *)(*v17 + v20);
      v62 = *v61;
      v63 = v62;
      v64 = v18;
      if ((v62 | 2) == 0x82)
        v63 = v61[1];
      v65 = v62 == 128 || v62 == 130;
      v66 = JSC::opcodeLengths[v63];
      v67 = v12 + 80 * v18;
      if (v62 == 130)
        v68 = 2;
      else
        v68 = v62 == 128;
      v69 = v12;
      v70 = WTF::fastMalloc((WTF *)0x10);
      v12 = v69;
      *(_DWORD *)(v67 + 24) = 16;
      *v60 = v70;
      v6 = 1;
      if (v65)
        v71 = 2;
      else
        v71 = 1;
      v72 = (v66 << v68) + v71;
      *(_BYTE *)(v70 + (*(_DWORD *)(v67 + 28))++) = v72;
      *v59 += v72;
      v73 = (v64 + 1);
      v3 = v159;
      *(_DWORD *)(v159 + 12) = v73;
      v18 = v73;
      v19 = v157;
      v26 = v20;
    }
    v22 = v12 + 80 * v18 - 80;
    LOBYTE(v27) = 1;
    v17 = (uint64_t *)a2;
    goto LABEL_22;
  }
LABEL_83:
  LODWORD(v168) = 1;
  v165 = (WTF *)v18;
  if ((_DWORD)v18 == *(_DWORD *)(v3 + 8))
  {
    WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::SpecialBlockType,unsigned long>(v3, &v168, (uint64_t *)&v165);
    v75 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v74 = v12 + 80 * v18;
    *(_QWORD *)v74 = -1;
    v75 = v18 + 1;
    *(_DWORD *)(v74 + 8) = v18;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_OWORD *)(v74 + 32) = 0u;
    *(_OWORD *)(v74 + 48) = 0u;
    *(_OWORD *)(v74 + 64) = 0u;
    *(_DWORD *)(v3 + 12) = v18 + 1;
  }
  WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v75, v6, v7, v8, v9, v10, v11);
  v83 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v83)
  {
    v84 = 0;
    v85 = *(_QWORD *)v3;
    v160 = (int *)(v85 + 8 + 80 * v83 - 80);
    v86 = (_DWORD *)(v85 + 80 * v83);
    v155 = 80 * v83;
    v87 = (uint64_t *)a2;
    v163 = v83;
    while (1)
    {
      v88 = (_DWORD *)(v85 + 80 * v84);
      if (*v88)
      {
        if (*v88 == -1)
        {
          v89 = *(_DWORD *)(v85 + 80 * v84 + 4);
          if (v89 == -1)
            goto LABEL_143;
        }
        else
        {
          v89 = *(_DWORD *)(v85 + 80 * v84 + 4);
        }
        if (!v89)
          goto LABEL_142;
      }
      else if (!*(_DWORD *)(v85 + 80 * v84 + 4))
      {
        goto LABEL_143;
      }
      v90 = 0;
      v91 = *v87;
      while (1)
      {
        v92 = *v88 + v90;
        v168 = v87;
        v169 = v92;
        v93 = v91 + v92;
        v94 = *(unsigned __int8 *)(v91 + v92);
        v95 = v94;
        if ((v94 | 2) == 0x82)
          v95 = *(unsigned __int8 *)(v93 + 1);
        v96 = *(unsigned __int8 *)(v91 + v92);
        if ((v94 | 2) == 0x82)
          v96 = *(unsigned __int8 *)(v93 + 1);
        v97 = v94 == 128;
        if (v94 == 130)
          v97 = 2;
        if (v94 == 128 || v94 == 130)
          v99 = 2;
        else
          v99 = 1;
        if ((v95 - 102) <= 0xF && ((1 << (v95 - 102)) & 0xA001) != 0)
        {
          v119 = v85 + 80 * v84;
          v122 = *(_DWORD *)(v119 + 44);
          v121 = (_DWORD *)(v119 + 44);
          v120 = v122;
          v123 = (int **)(v121 - 3);
          v124 = *v160;
          if (v122)
          {
            v128 = *v123;
            v129 = v120;
            while (1)
            {
              v130 = *v128++;
              if (v130 == v124)
                goto LABEL_143;
              if (!--v129)
                goto LABEL_148;
            }
          }
          goto LABEL_148;
        }
        if ((v95 & 0xFE) == 0x70)
        {
          v131 = v92 & 0x3FFFFFFF;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80) + 12) > (v92 & 0x3FFFFFFF))
          {
            v132 = *(unsigned int **)(a1 + 224);
            if (v132 && (v146 = v132[3], (_DWORD)v146))
            {
              v147 = (int *)(*(_QWORD *)v132 + 8);
              v148 = 24 * v146;
              while (*(v147 - 2) > v131 || *(v147 - 1) <= v131)
              {
                v147 += 6;
                v148 -= 24;
                if (!v148)
                  goto LABEL_164;
              }
              v149 = *v147;
              v126 = v155;
              v125 = (int *)(v85 + 8);
              while (v149 != *(v125 - 2))
              {
                v125 += 20;
                v126 -= 80;
                if (!v126)
                  goto LABEL_143;
              }
              v150 = v85 + 80 * v84;
              v151 = *(_DWORD *)(v150 + 44);
              v121 = (_DWORD *)(v150 + 44);
              v120 = v151;
              v123 = (int **)(v121 - 3);
              v124 = *v125;
              if (v151)
              {
                v152 = *v123;
                v153 = v120;
                do
                {
                  v154 = *v152++;
                  if (v154 == v124)
                    goto LABEL_143;
                }
                while (--v153);
              }
            }
            else
            {
LABEL_164:
              v133 = v85 + 80 * v84;
              v134 = *(_DWORD *)(v133 + 44);
              v121 = (_DWORD *)(v133 + 44);
              v120 = v134;
              v123 = (int **)(v121 - 3);
              v124 = *v160;
              if (v134)
              {
                v135 = *v123;
                v136 = v120;
                do
                {
                  v137 = *v135++;
                  if (v137 == v124)
                    goto LABEL_143;
                }
                while (--v136);
              }
            }
LABEL_148:
            LODWORD(v165) = v124;
            if ((_DWORD)v120 == *(_DWORD *)(v85 + 80 * v84 + 40))
            {
              v127 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v120 + 1, (unint64_t)&v165);
              v87 = (uint64_t *)a2;
              (*v123)[*v121] = *v127;
            }
            else
            {
              (*v123)[v120] = v124;
            }
            ++*v121;
            goto LABEL_143;
          }
          __break(0xC471u);
LABEL_198:
          JUMPOUT(0x19811CAC0);
        }
        if ((v95 - 46) <= 0x2E && ((1 << (v95 - 46)) & 0x77FFFFE00001) != 0)
          break;
        v90 += v99 + (JSC::opcodeLengths[v96] << v97);
        if (v90 >= *(_DWORD *)(v85 + 80 * v84 + 4))
          goto LABEL_142;
      }
      v165 = (WTF *)&v167;
      v166 = 1;
      JSC::findJumpTargetsForInstruction(a1, (uint64_t)&v168, &v165);
      v102 = HIDWORD(v166);
      if (HIDWORD(v166))
      {
        v103 = v85 + 80 * v84;
        v104 = (int **)(v103 + 32);
        v105 = (_DWORD *)(v103 + 44);
        v106 = (_DWORD *)(v103 + 40);
        for (i = (_DWORD *)v85; i != v86; i += 20)
        {
          v108 = HIDWORD(v166);
          if (HIDWORD(v166))
          {
            v109 = v165;
            while (1)
            {
              v110 = *(_DWORD *)v109;
              v109 = (WTF *)((char *)v109 + 4);
              if (v110 == *i)
                break;
              if (!--v108)
                goto LABEL_123;
            }
            v111 = i[2];
            v112 = *v105;
            if ((_DWORD)v112)
            {
              v114 = *v104;
              v115 = *v105;
              while (1)
              {
                v116 = *v114++;
                if (v116 == v111)
                  break;
                if (!--v115)
                  goto LABEL_126;
              }
            }
            else
            {
LABEL_126:
              v173[0] = i[2];
              if ((_DWORD)v112 == *v106)
              {
                v158 = v106;
                v113 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v112 + 1, (unint64_t)v173);
                v106 = v158;
                (*v104)[*v105] = *v113;
              }
              else
              {
                (*v104)[v112] = v111;
              }
              ++*v105;
            }
            if (!--v102)
              break;
          }
LABEL_123:
          ;
        }
      }
      v117 = v165;
      if (&v167 != (uint64_t *)v165 && v165 != 0)
      {
        v165 = 0;
        LODWORD(v166) = 0;
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
      }
      v87 = (uint64_t *)a2;
      if (v95 != 67)
      {
LABEL_142:
        JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&)::{lambda(JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&)#1}::operator()(v85 + 80 * v84, *(_DWORD *)(v85 + 80 * v84 + 88));
        v87 = (uint64_t *)a2;
      }
LABEL_143:
      if (++v84 == v163)
      {
        v138 = 80 * v163;
        do
        {
          JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::shrinkToFit(v85, (uint64_t)v76, v77, v78, v79, v80, v81, v82);
          v85 += 80;
          v138 -= 80;
        }
        while (v138);
        break;
      }
    }
  }
  v139 = v170;
  if (v172 != (_BYTE *)v170 && v170 != 0)
  {
    v170 = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v139, v76, v77, v78, v79, v80, v81, v82);
  }
}

void JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::UnlinkedCodeBlockGenerator>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  unint64_t v29;
  unsigned int *v30;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v39;
  size_t v40;
  _BYTE *v41;
  int v42;
  int v43;
  char v44;
  _BOOL4 v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _BOOL4 v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  char v97;
  int v99;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  int **v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *i;
  uint64_t v109;
  WTF *v110;
  int v111;
  int v112;
  uint64_t v113;
  int *v114;
  int *v115;
  uint64_t v116;
  int v117;
  WTF *v118;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  unsigned int v123;
  int **v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int *v132;
  uint64_t v133;
  int v134;
  int *v135;
  int *v136;
  uint64_t v137;
  int v138;
  int v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  int *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  WTF *v148;
  uint64_t v150;
  uint64_t *v151;
  _DWORD *v152;
  int *v153;
  uint64_t v154;
  int v155;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  _DWORD *v162;
  uint64_t v163;
  int *v164;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  WTF *v168;
  WTF *v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  int v173;
  WTF *v174;
  uint64_t v175;
  _BYTE v176[132];
  int v177[3];

  v3 = (WTF *)a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v174 = (WTF *)v176;
  v175 = 32;
  JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)0,JSC::UnlinkedCodeBlockGenerator,32ul>(a1, a2, &v174);
  if (HIDWORD(v175) >= 0x3333332)
  {
    __break(0xC471u);
LABEL_192:
    JUMPOUT(0x19811D5CCLL);
  }
  v5 = 80 * HIDWORD(v175) + 160;
  v6 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v175) + 160));
  *(_QWORD *)a3 = v6;
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(a3 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
  *(_DWORD *)(a3 + 12) = 1;
  LODWORD(v172) = 0;
  v169 = (WTF *)1;
  v12 = a3;
  if ((v5 - 80) < 0x50)
  {
    WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::SpecialBlockType,unsigned long>(a3, &v172, (uint64_t *)&v169);
    v12 = a3;
    v13 = *(_QWORD *)a3;
  }
  else
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)(v13 + 80) = 0;
    *(_DWORD *)(v13 + 88) = 1;
    *(_OWORD *)(v13 + 96) = 0uLL;
    *(_OWORD *)(v13 + 112) = 0uLL;
    *(_OWORD *)(v13 + 128) = 0uLL;
    *(_OWORD *)(v13 + 144) = 0uLL;
    *(_DWORD *)(a3 + 12) = 2;
  }
  v14 = (int **)(v13 + 32);
  v15 = *(_DWORD *)(v13 + 88);
  v16 = *(unsigned int *)(v13 + 44);
  if ((_DWORD)v16)
  {
    v153 = *v14;
    v154 = *(unsigned int *)(v13 + 44);
    while (1)
    {
      v155 = *v153++;
      if (v155 == v15)
        break;
      if (!--v154)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v169) = *(_DWORD *)(v13 + 88);
    if ((_DWORD)v16 == *(_DWORD *)(v13 + 40))
    {
      v150 = v13;
      v151 = (uint64_t *)v12;
      v152 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v16 + 1, (unint64_t)&v169);
      v12 = (uint64_t)v151;
      v13 = v150;
      *(_DWORD *)(*(_QWORD *)(v150 + 32) + 4 * *(unsigned int *)(v150 + 44)) = *v152;
      v17 = *v151;
    }
    else
    {
      (*v14)[v16] = v15;
      v17 = v13;
    }
    ++*(_DWORD *)(v13 + 44);
    v13 = v17;
  }
  v18 = *(unsigned int *)(v12 + 12);
  v168 = v3;
  v169 = v3;
  LODWORD(v170) = 0;
  v19 = *((_DWORD *)v3 + 3);
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = v13 + 80 * v18 - 80;
    v23 = *(_QWORD *)v3;
    v7 = 1;
    v163 = v12;
    v161 = *((_DWORD *)v3 + 3);
    do
    {
      v24 = (unsigned __int8 *)(v23 + v20);
      v25 = *v24;
      if ((v25 | 2) == 0x82)
        v25 = v24[1];
      v26 = v20;
      if (v21 || v25 == 15)
        goto LABEL_56;
      v27 = HIDWORD(v175);
      if (!HIDWORD(v175))
        goto LABEL_22;
      v28 = v174;
      do
      {
        v29 = v27 >> 1;
        v30 = (unsigned int *)((char *)v28 + 4 * (v27 >> 1));
        v32 = *v30;
        v31 = (WTF *)(v30 + 1);
        v27 += ~(v27 >> 1);
        if (v32 < v20)
          v28 = v31;
        else
          v27 = v29;
      }
      while (v27);
      if (v28 != (WTF *)((char *)v174 + 4 * HIDWORD(v175)) && *(_DWORD *)v28 <= v20)
      {
LABEL_56:
        v172 = (WTF *)v18;
        if ((_DWORD)v18 == *(_DWORD *)(v12 + 8))
        {
          v73 = v12;
          WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,unsigned long>(v12, (uint64_t)&v169, (uint64_t *)&v172);
          v7 = 1;
          v12 = v73;
          v18 = *(unsigned int *)(v73 + 12);
          v13 = *(_QWORD *)v73;
        }
        else
        {
          v48 = v13 + 80 * v18;
          *(_DWORD *)v48 = v20;
          *(_DWORD *)(v48 + 8) = v18;
          v49 = v48;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_OWORD *)(v48 + 64) = 0u;
          *(_DWORD *)(v48 + 4) = 0;
          v50 = (_DWORD *)(v48 + 4);
          *(_OWORD *)(v49 + 16) = 0u;
          v51 = (uint64_t *)(v49 + 16);
          v52 = (unsigned __int8 *)(*(_QWORD *)v3 + v20);
          v53 = *v52;
          v54 = v53;
          v55 = v18;
          if ((v53 | 2) == 0x82)
            v54 = v52[1];
          v56 = v53 == 130;
          if (v53 == 128)
            v56 = 1;
          v165 = v56;
          v57 = JSC::opcodeLengths[v54];
          v58 = v13 + 80 * v18;
          if (v53 == 130)
            v59 = 2;
          else
            v59 = v53 == 128;
          v60 = v13;
          v61 = WTF::fastMalloc((WTF *)0x10);
          v13 = v60;
          *(_DWORD *)(v58 + 24) = 16;
          *v51 = v61;
          v7 = 1;
          if (v165)
            v62 = 2;
          else
            v62 = 1;
          v63 = (v57 << v59) + v62;
          *(_BYTE *)(v61 + (*(_DWORD *)(v58 + 28))++) = v63;
          *v50 += v63;
          v64 = (v55 + 1);
          v12 = v163;
          *(_DWORD *)(v163 + 12) = v64;
          v3 = v168;
          v18 = v64;
          v19 = v161;
        }
        v22 = v13 + 80 * v18 - 80;
        LOBYTE(v27) = 1;
        v26 = v20;
      }
      else
      {
        LOBYTE(v27) = 0;
      }
LABEL_22:
      v21 = (v25 - 46) < 0x2F && ((0x77FFFFE00001uLL >> (v25 - 46)) & 1) != 0
         || (v25 - 102) <= 0xF && ((1 << (v25 - 102)) & 0xA001) != 0
         || (v25 & 0xFE) == 0x70;
      v23 = *(_QWORD *)v3;
      if ((v27 & 1) == 0)
      {
        v33 = v23 + v26;
        v34 = *(unsigned __int8 *)(v23 + v26);
        v35 = v34;
        if ((v34 | 2) == 0x82)
          v35 = *(unsigned __int8 *)(v33 + 1);
        if (v34 == 130)
          v36 = 2;
        else
          v36 = v34 == 128;
        v37 = JSC::opcodeLengths[v35];
        if (v34 == 128 || v34 == 130)
          v39 = 2;
        else
          v39 = 1;
        v40 = *(unsigned int *)(v22 + 28);
        if ((_DWORD)v40 == *(_DWORD *)(v22 + 24))
        {
          v157 = v21;
          v159 = v18;
          v166 = v13;
          v65 = v40 + (v40 >> 2);
          if (v65 >= 0x10)
            v66 = v65 + 1;
          else
            v66 = 16;
          if (v66 <= v40 + 1)
            v67 = v40 + 1;
          else
            v67 = v66;
          if (HIDWORD(v67))
          {
            __break(0xC471u);
            goto LABEL_192;
          }
          v68 = *(const void **)(v22 + 16);
          v69 = (void *)WTF::fastMalloc((WTF *)v67);
          *(_DWORD *)(v22 + 24) = v67;
          *(_QWORD *)(v22 + 16) = v69;
          memcpy(v69, v68, v40);
          v12 = v163;
          if (v68)
          {
            if (*(const void **)(v22 + 16) == v68)
            {
              *(_QWORD *)(v22 + 16) = 0;
              *(_DWORD *)(v22 + 24) = 0;
            }
            WTF::fastFree((unint64_t)v68, v70, v71, v8, v72, v9, v10, v11);
            v12 = v163;
          }
          v41 = (_BYTE *)(*(_QWORD *)(v22 + 16) + *(unsigned int *)(v22 + 28));
          v3 = v168;
          v13 = v166;
          v19 = v161;
          v7 = 1;
          v18 = v159;
          v21 = v157;
        }
        else
        {
          v41 = (_BYTE *)(*(_QWORD *)(v22 + 16) + v40);
        }
        *v41 = ((_BYTE)v37 << v36) + v39;
        ++*(_DWORD *)(v22 + 28);
        *(_DWORD *)(v22 + 4) += (v37 << v36) + v39;
        v23 = *(_QWORD *)v3;
      }
      v42 = *(unsigned __int8 *)(v23 + v26);
      v43 = v42;
      if ((v42 | 2) == 0x82)
        v43 = *(unsigned __int8 *)(v23 + v26 + 1);
      v44 = v42 == 128;
      if (v42 == 130)
        v44 = 2;
      v45 = v42 == 128 || v42 == 130;
      v46 = JSC::opcodeLengths[v43] << v44;
      if (v45)
        v47 = 2;
      else
        v47 = 1;
      v20 += v47 + v46;
      LODWORD(v170) = v20;
    }
    while (v20 != v19);
  }
  LODWORD(v172) = 1;
  v169 = (WTF *)v18;
  v74 = v12;
  if ((_DWORD)v18 == *(_DWORD *)(v12 + 8))
  {
    WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::SpecialBlockType,unsigned long>(v12, &v172, (uint64_t *)&v169);
    v12 = v74;
    v76 = *(_DWORD *)(v74 + 12);
  }
  else
  {
    v75 = v13 + 80 * v18;
    *(_QWORD *)v75 = -1;
    v76 = v18 + 1;
    *(_DWORD *)(v75 + 8) = v18;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_OWORD *)(v75 + 32) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    *(_OWORD *)(v75 + 64) = 0u;
    *(_DWORD *)(v12 + 12) = v18 + 1;
  }
  WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v12, v76, v7, v8, v18, v9, v10, v11);
  v84 = *(unsigned int *)(v74 + 12);
  if ((_DWORD)v84)
  {
    v85 = 0;
    v86 = *(_QWORD *)v74;
    v160 = *(_QWORD *)v74 + 8;
    v164 = (int *)(v160 + 80 * v84 - 80);
    v87 = *(_QWORD *)v74 + 80 * v84;
    v158 = 80 * v84;
    v77 = 0x77FFFFE00001;
    v167 = *(unsigned int *)(v74 + 12);
    while (1)
    {
      v88 = (_DWORD *)(v86 + 80 * v85);
      if (*v88)
      {
        if (*v88 == -1)
        {
          v89 = *(_DWORD *)(v86 + 80 * v85 + 4);
          if (v89 == -1)
            goto LABEL_142;
        }
        else
        {
          v89 = *(_DWORD *)(v86 + 80 * v85 + 4);
        }
        if (!v89)
          goto LABEL_141;
      }
      else if (!*(_DWORD *)(v86 + 80 * v85 + 4))
      {
        goto LABEL_142;
      }
      v90 = 0;
      v91 = *(_QWORD *)v3;
      while (1)
      {
        v92 = *v88 + v90;
        v172 = v3;
        v173 = v92;
        v93 = v91 + v92;
        v94 = *(unsigned __int8 *)(v91 + v92);
        v95 = v94;
        if ((v94 | 2) == 0x82)
          v95 = *(unsigned __int8 *)(v93 + 1);
        v96 = *(unsigned __int8 *)(v91 + v92);
        if ((v94 | 2) == 0x82)
          v96 = *(unsigned __int8 *)(v93 + 1);
        v97 = v94 == 128;
        if (v94 == 130)
          v97 = 2;
        if (v94 == 128 || v94 == 130)
          v99 = 2;
        else
          v99 = 1;
        if ((v95 - 102) <= 0xF && ((1 << (v95 - 102)) & 0xA001) != 0)
        {
          v120 = v86 + 80 * v85;
          v123 = *(_DWORD *)(v120 + 44);
          v122 = (_DWORD *)(v120 + 44);
          v121 = v123;
          v124 = (int **)(v122 - 3);
          v125 = *v164;
          if (v123)
          {
            v136 = *v124;
            v137 = v121;
            while (1)
            {
              v138 = *v136++;
              if (v138 == v125)
                goto LABEL_142;
              if (!--v137)
                goto LABEL_147;
            }
          }
          goto LABEL_147;
        }
        if ((v95 & 0xFE) == 0x70)
        {
          v126 = *(unsigned int *)(a1 + 196);
          if ((_DWORD)v126)
          {
            v127 = v92 & 0x3FFFFFFF;
            v128 = (int *)(*(_QWORD *)(a1 + 184) + 8);
            v129 = 16 * v126;
            while (*(v128 - 2) > v127 || *(v128 - 1) <= v127)
            {
              v128 += 4;
              v129 -= 16;
              if (!v129)
                goto LABEL_155;
            }
            v139 = *v128;
            v141 = v158;
            v140 = (int *)v160;
            while (v139 != *(v140 - 2))
            {
              v140 += 20;
              v141 -= 80;
              if (!v141)
                goto LABEL_142;
            }
            v142 = v86 + 80 * v85;
            v143 = *(_DWORD *)(v142 + 44);
            v122 = (_DWORD *)(v142 + 44);
            v121 = v143;
            v124 = (int **)(v122 - 3);
            v125 = *v140;
            if (v143)
            {
              v144 = *v124;
              v145 = v121;
              do
              {
                v146 = *v144++;
                if (v146 == v125)
                  goto LABEL_142;
              }
              while (--v145);
            }
          }
          else
          {
LABEL_155:
            v130 = v86 + 80 * v85;
            v131 = *(_DWORD *)(v130 + 44);
            v122 = (_DWORD *)(v130 + 44);
            v121 = v131;
            v124 = (int **)(v122 - 3);
            v125 = *v164;
            if (v131)
            {
              v132 = *v124;
              v133 = v121;
              do
              {
                v134 = *v132++;
                if (v134 == v125)
                  goto LABEL_142;
              }
              while (--v133);
            }
          }
LABEL_147:
          LODWORD(v169) = v125;
          if ((_DWORD)v121 == *(_DWORD *)(v86 + 80 * v85 + 40))
          {
            v135 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v121 + 1, (unint64_t)&v169);
            v77 = 0x77FFFFE00001;
            (*v124)[*v122] = *v135;
          }
          else
          {
            (*v124)[v121] = v125;
          }
          ++*v122;
          goto LABEL_142;
        }
        if ((v95 - 46) <= 0x2E && ((1 << (v95 - 46)) & 0x77FFFFE00001) != 0)
          break;
        v90 += v99 + (JSC::opcodeLengths[v96] << v97);
        if (v90 >= *(_DWORD *)(v86 + 80 * v85 + 4))
          goto LABEL_141;
      }
      v169 = (WTF *)&v171;
      v170 = 1;
      JSC::findJumpTargetsForInstruction(a1, (uint64_t)&v172, &v169);
      v103 = HIDWORD(v170);
      if (HIDWORD(v170))
      {
        v104 = v86 + 80 * v85;
        v105 = (int **)(v104 + 32);
        v106 = (_DWORD *)(v104 + 44);
        v107 = (_DWORD *)(v104 + 40);
        for (i = (_DWORD *)v86; i != (_DWORD *)v87; i += 20)
        {
          v109 = HIDWORD(v170);
          if (HIDWORD(v170))
          {
            v110 = v169;
            while (1)
            {
              v111 = *(_DWORD *)v110;
              v110 = (WTF *)((char *)v110 + 4);
              if (v111 == *i)
                break;
              if (!--v109)
                goto LABEL_122;
            }
            v112 = i[2];
            v113 = *v106;
            if ((_DWORD)v113)
            {
              v115 = *v105;
              v116 = *v106;
              while (1)
              {
                v117 = *v115++;
                if (v117 == v112)
                  break;
                if (!--v116)
                  goto LABEL_125;
              }
            }
            else
            {
LABEL_125:
              v177[0] = i[2];
              if ((_DWORD)v113 == *v107)
              {
                v162 = v107;
                v114 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v113 + 1, (unint64_t)v177);
                v107 = v162;
                (*v105)[*v106] = *v114;
              }
              else
              {
                (*v105)[v113] = v112;
              }
              ++*v106;
            }
            if (!--v103)
              break;
          }
LABEL_122:
          ;
        }
      }
      v118 = v169;
      if (&v171 != (uint64_t *)v169 && v169 != 0)
      {
        v169 = 0;
        LODWORD(v170) = 0;
        WTF::fastFree((unint64_t)v118, v102, v78, v79, v80, v81, v82, v83);
      }
      v84 = v167;
      v3 = v168;
      v77 = 0x77FFFFE00001;
      if (v95 != 67)
      {
LABEL_141:
        JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&)::{lambda(JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&)#1}::operator()(v86 + 80 * v85, *(_DWORD *)(v86 + 80 * v85 + 88));
        v77 = 0x77FFFFE00001;
      }
LABEL_142:
      if (++v85 == v84)
      {
        v147 = 80 * v84;
        do
        {
          JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::shrinkToFit(v86, v77, v78, v79, v80, v81, v82, v83);
          v86 += 80;
          v147 -= 80;
        }
        while (v147);
        break;
      }
    }
  }
  v148 = v174;
  if (v176 != (_BYTE *)v174 && v174 != 0)
  {
    v174 = 0;
    LODWORD(v175) = 0;
    WTF::fastFree((unint64_t)v148, (void *)v77, v78, v79, v80, v81, v82, v83);
  }
}

uint64_t JSC::BytecodeDumperBase<JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::dumpValue<JSC::JSGeneratorTraits>(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t result;

  v3 = *a2;
  if (!*a2)
  {
    v4 = *((_DWORD *)a2 + 4);
    if (v4)
    {
LABEL_4:
      v5 = *(_DWORD *)(a1 + 16) + v4;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printf(v7, "%d", v4);
      WTF::PrintStream::printf(v7, "%s", "(->");
      WTF::PrintStream::printf(v7, "%u", v5);
      WTF::PrintStream::printf(v7, "%s", ")");
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    }
    goto LABEL_3;
  }
  if (v3 == 2)
  {
    v4 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3 == 1)
  {
LABEL_3:
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(unsigned int *)(a1 + 16));
    goto LABEL_4;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeDumperBase<JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>>::dumpValue<JSC::Wasm::GeneratorTraits>(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t result;

  v3 = *a2;
  if (!*a2)
  {
    v4 = *((_DWORD *)a2 + 4);
    if (v4)
    {
LABEL_4:
      v5 = *(_DWORD *)(a1 + 16) + v4;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printf(v7, "%d", v4);
      WTF::PrintStream::printf(v7, "%s", "(->");
      WTF::PrintStream::printf(v7, "%u", v5);
      WTF::PrintStream::printf(v7, "%s", ")");
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    }
    goto LABEL_3;
  }
  if (v3 == 2)
  {
    v4 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3 == 1)
  {
LABEL_3:
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(unsigned int *)(a1 + 16));
    goto LABEL_4;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

void JSC::BytecodeDumper<JSC::CodeBlock>::~BytecodeDumper()
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BytecodeDumper<JSC::CodeBlock>::registerName(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  if (a2 >= 0x40000000)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2);
    return;
  }
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  JSC::VirtualRegister::dump((unsigned int *)&v16, (WTF::PrintStream *)&v17);
  v17[5]((WTF::StringPrintStream *)&v17);
  v12 = v18;
  v11 = v19;
  *a3 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_8:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19811D980);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a3 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_8;
}

uint64_t JSC::BytecodeDumper<JSC::CodeBlock>::outOfLineJumpOffset(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 144);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(v2 + 8 * v6);
    if (v7 == a2)
      return *(unsigned int *)(v2 + 8 * v6 + 4);
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2)
        return *(unsigned int *)(v2 + 8 * v6 + 4);
    }
  }
  return 0;
}

void JSC::BytecodeDumper<JSC::CodeBlock>::constantName(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  signed int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  JSC::Structure *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = a2;
  v4 = a2 - 0x40000000;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(v5 + 172);
  if ((int)(a2 - 0x40000000) >= (int)v6)
  {
    v25 = off_1E3572250;
    v26 = v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "INVALID_CONSTANT(");
    JSC::VirtualRegister::dump(&v24, (WTF::PrintStream *)&v25);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ")");
    v25[5]((WTF::StringPrintStream *)&v25);
    v18 = v26;
    v17 = v27;
    *a3 = 0;
    if (v18)
    {
      if (v17 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19811DC54);
      }
      v19 = (WTF *)(v17 + 17);
      if (v17 != -17)
      {
LABEL_16:
        v20 = WTF::fastMalloc(v19);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = v17;
        *a3 = v20;
        v21 = v20 + 16;
        memcpy((void *)(v20 + 16), v18, v17);
        *(_BYTE *)(v21 + v17) = 0;
        v22 = (unint64_t)v26;
        if (v26 == v28)
          return;
        goto LABEL_19;
      }
      __break(0xC471u);
LABEL_25:
      JUMPOUT(0x19811DB44);
    }
  }
  else
  {
    if (v6 <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x19811DC4CLL);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + 8 * v4);
    v23 = v7;
    v25 = off_1E3572250;
    v26 = v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    if (v7)
      v8 = (v7 & 0xFFFE000000000002) == 0;
    else
      v8 = 0;
    if (v8)
      v9 = (JSC::Structure *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE));
    else
      v9 = 0;
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v23, (WTF::PrintStream *)&v25, 0, v9);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "(");
    JSC::VirtualRegister::dump(&v24, (WTF::PrintStream *)&v25);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ")");
    v25[5]((WTF::StringPrintStream *)&v25);
    v18 = v26;
    v17 = v27;
    *a3 = 0;
    if (v18)
    {
      if (v17 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19811DC5CLL);
      }
      v19 = (WTF *)(v17 + 17);
      if (v17 != -17)
        goto LABEL_16;
      __break(0xC471u);
      goto LABEL_25;
    }
  }
  v22 = 0;
LABEL_19:
  WTF::fastFree(v22, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::CodeBlockBytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::dumpBlock(uint64_t a1, uint64_t *a2, WTF::PrintStream *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  char v15;
  _BOOL4 v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  WTF::PrintStream *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  char v31;
  _BOOL4 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  WTF::PrintStream *v38;
  JSC::Identifier *v39;
  WTF::PrintStream *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  WTF::PrintStream *v47;
  unint64_t v48;
  BOOL v49;
  JSC::Structure *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  size_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int j;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  WTF::PrintStream *v97;
  char *v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t (**v113)();
  WTF::PrintStream *v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  WTF *v118;
  _BYTE *v119;
  __int128 v120;
  _BYTE v121[128];
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = (unsigned __int8 *)(*a2 + v10);
      v12 = *v11;
      if (v12 == 128)
      {
        ++v7;
      }
      else
      {
        v13 = *v11;
        if (v12 != 130)
          goto LABEL_8;
        ++v9;
      }
      v13 = v11[1];
LABEL_8:
      if (v13 < 0x2F)
        ++v8;
      v14 = *v11;
      if ((v12 | 2) == 0x82)
        v14 = v11[1];
      v15 = v12 == 128;
      if (v12 == 130)
        v15 = 2;
      v16 = v12 == 128 || v12 == 130;
      v17 = JSC::opcodeLengths[v14] << v15;
      if (v16)
        v18 = 2;
      else
        v18 = 1;
      v10 += v18 + v17;
      ++v6;
      if (v10 == v5)
        goto LABEL_23;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
LABEL_23:
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v20 = **(_QWORD **)(a1 + 8);
  v21 = 288;
  if ((*(_BYTE *)(*(_QWORD *)(v20 + 72) + 4) & 8) == 0)
    v21 = 96;
  if ((*(_BYTE *)(*(_QWORD *)(v20 + 72) + 4) & 3) == 2)
    v21 = 0;
  WTF::PrintStream::printf(a3, ": %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions, %lu instructions with metadata); %lu bytes (%l"
    "u metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)",
    v6,
    v7,
    v9,
    v8,
    v21 + *((unsigned int *)a2 + 3),
    v21,
    *(_DWORD *)(v20 + 24) & 0x7FFFFFFF,
    *(_DWORD *)(v20 + 20) & 0x7FFFFFFF,
    *(_DWORD *)(v20 + 16) & 0x7FFFFFFF);
  LODWORD(v118) = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 12);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v22, "%s", "; scope at ");
  JSC::VirtualRegister::dump((unsigned int *)&v118, v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  WTF::PrintStream::printf(a3, "\n");
  v115 = 0;
  v116 = a1;
  v113 = &off_1E3580AA0;
  v114 = a3;
  v23 = *((_DWORD *)a2 + 3);
  if (v23)
  {
    v24 = 0;
    v25 = *a2;
    do
    {
      JSC::dumpBytecode((int)&v113, v24, (JSC::OpEnumeratorHasOwnProperty *)(v25 + v24));
      v26 = v114;
      v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v114 + 32))(v114);
      WTF::PrintStream::printf(v27, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 40))(v26);
      v25 = *a2;
      v28 = (unsigned __int8 *)(*a2 + v24);
      v29 = *v28;
      v30 = v29;
      if ((v29 | 2) == 0x82)
        v30 = v28[1];
      v31 = v29 == 128;
      if (v29 == 130)
        v31 = 2;
      v32 = v29 == 128 || v29 == 130;
      v33 = JSC::opcodeLengths[v30] << v31;
      if (v32)
        v34 = 2;
      else
        v34 = 1;
      v24 += v34 + v33;
    }
    while (v24 != v23);
    a1 = v116;
  }
  v35 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v35)
  {
    WTF::PrintStream::printf(v114, "\nIdentifiers:\n");
    v36 = 0;
    for (i = 0; i != v35; ++i)
    {
      if (v36 >> 32 >= (unint64_t)*(unsigned int *)(v116 + 44))
      {
        __break(0xC471u);
        JUMPOUT(0x19811E570);
      }
      v38 = v114;
      v39 = (JSC::Identifier *)(*(_QWORD *)(v116 + 32) + 8 * (v36 >> 32));
      v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v114 + 32))(v114);
      WTF::PrintStream::printf(v40, "%s", "  id");
      WTF::PrintStream::printf(v40, "%u", i);
      WTF::PrintStream::printf(v40, "%s", " = ");
      JSC::Identifier::dump(v39, v40);
      WTF::PrintStream::printf(v40, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v38 + 40))(v38);
      v36 += 0x100000000;
    }
    a1 = v116;
  }
  if (*(_DWORD *)(a1 + 60))
  {
    WTF::PrintStream::printf(v114, "\nConstants:\n");
    a1 = v116;
    v41 = *(unsigned int *)(v116 + 60);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = *(_QWORD *)(v116 + 48);
      v44 = 8 * v41;
      while (1)
      {
        v45 = "";
        if (*(_DWORD *)(v116 + 76) > v42)
        {
          v46 = *(char *)(*(_QWORD *)(v116 + 64) + v42);
          if (v46 > 3)
            v45 = 0;
          else
            v45 = (const char *)*((_QWORD *)&off_1E3580B80 + v46);
        }
        v47 = v114;
        v48 = *(_QWORD *)(v43 + 8 * v42);
        v117 = v48;
        v118 = (WTF *)off_1E3572250;
        v119 = v121;
        v120 = xmmword_199122F80;
        v121[0] = 0;
        v49 = v48 && (v48 & 0xFFFE000000000002) == 0;
        v50 = v49 ? (JSC::Structure *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE)) : 0;
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v117, (WTF::PrintStream *)&v118, 0, v50);
        (*((void (**)(WTF **))v118 + 5))(&v118);
        v58 = v119;
        if (!v119)
          break;
        v59 = v120;
        if ((unint64_t)v120 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x19811E590);
        }
        if ((_QWORD)v120 == -17)
          goto LABEL_130;
        v60 = WTF::fastMalloc((WTF *)(v120 + 17));
        *(_DWORD *)v60 = 1;
        *(_QWORD *)(v60 + 8) = v59;
        memcpy((void *)(v60 + 16), v58, v59);
        *(_BYTE *)(v60 + 16 + v59) = 0;
        v61 = (unint64_t)v119;
        if (v119 != v121)
          goto LABEL_65;
        WTF::PrintStream::printf(v47, "   k%u = %s%s\n", v42, (const char *)(v60 + 16), v45);
LABEL_68:
        if (*(_DWORD *)v60 == 1)
          WTF::fastFree(v60, v62, v63, v64, v65, v66, v67, v68);
        else
          --*(_DWORD *)v60;
LABEL_70:
        ++v42;
        v44 -= 8;
        if (!v44)
        {
          a1 = v116;
          goto LABEL_73;
        }
      }
      v60 = 0;
      v61 = 0;
LABEL_65:
      WTF::fastFree(v61, v51, v52, v53, v54, v55, v56, v57);
      v69 = (const char *)(v60 + 16);
      if (!v60)
        v69 = 0;
      WTF::PrintStream::printf(v47, "   k%u = %s%s\n", v42, v69, v45);
      if (!v60)
        goto LABEL_70;
      goto LABEL_68;
    }
  }
LABEL_73:
  v70 = *(_DWORD *)(a1 + 196);
  if (v70)
  {
    WTF::PrintStream::printf(v114, "\nException Handlers:\n");
    v71 = 0;
    do
    {
      if (*(unsigned int *)(v116 + 196) <= (unint64_t)v71)
      {
        __break(0xC471u);
        JUMPOUT(0x19811E578);
      }
      v72 = *(_QWORD *)(v116 + 184) + 16 * v71;
      v73 = v71 + 1;
      WTF::PrintStream::printf(v114, "\t %d: { start: [%4d] end: [%4d] target: [%4d] } %s\n", v71 + 1, *(_DWORD *)v72, *(_DWORD *)(v72 + 4), *(_DWORD *)(v72 + 8), off_1E3580BA0[*(_BYTE *)(v72 + 12) & 3]);
      v71 = v73;
    }
    while (v70 != v73);
    a1 = v116;
  }
  v74 = *(_DWORD *)(a1 + 212);
  if (v74)
  {
    WTF::PrintStream::printf(v114, "Switch Jump Tables:\n");
    for (j = 0; j != v74; ++j)
    {
      WTF::PrintStream::printf(v114, "  %1d = {\n", j);
      if (*(unsigned int *)(v116 + 212) <= (unint64_t)j)
      {
        __break(0xC471u);
        JUMPOUT(0x19811E580);
      }
      v76 = *(_QWORD *)(v116 + 200);
      v77 = *(unsigned int **)(v76 + 16 * j);
      if (v77)
        v78 = (uint64_t)&v77[*v77 + 1];
      else
        v78 = 0;
      if (v77)
        v79 = v77 + 1;
      else
        v79 = 0;
      if (v79 != (_DWORD *)v78)
      {
        v80 = 0;
        v81 = (_DWORD *)(v76 + 16 * j + 8);
        do
        {
          if (*v79)
            WTF::PrintStream::printf(v114, "\t\t%4d => %04d\n", v80 + *v81, *v79);
          ++v79;
          ++v80;
        }
        while (v79 != (_DWORD *)v78);
      }
      WTF::PrintStream::printf(v114, "      }\n");
    }
    a1 = v116;
  }
  v82 = *(_DWORD *)(a1 + 228);
  if (v82)
  {
    WTF::PrintStream::printf(v114, "\nString Switch Jump Tables:\n");
    v83 = 0;
    while (1)
    {
      WTF::PrintStream::printf(v114, "  %1d = {\n", v83);
      if (*(unsigned int *)(v116 + 228) <= (unint64_t)v83)
      {
        __break(0xC471u);
        JUMPOUT(0x19811E588);
      }
      v90 = *(_QWORD *)(v116 + 216) + 24 * v83;
      if (*(_DWORD *)(v90 + 12))
      {
        v91 = *(uint64_t **)v90;
        v92 = *(unsigned int *)(v90 + 8);
        if ((_DWORD)v92)
        {
          v93 = 16 * v92;
          v94 = v91;
          while (!*v94)
          {
            v94 += 2;
            v93 -= 16;
            if (!v93)
              goto LABEL_122;
          }
        }
        else
        {
          v94 = v91;
        }
        v95 = &v91[2 * v92];
        if (v94 != v95)
          break;
      }
LABEL_122:
      WTF::PrintStream::printf(v114, "      }\n");
      if (++v83 == v82)
        return WTF::PrintStream::printf(a3, "\n");
    }
    v96 = *v94;
    while (1)
    {
      v97 = v114;
      v98 = *(char **)(v96 + 8);
      v99 = *(unsigned int *)(v96 + 4);
      if ((*(_BYTE *)(v96 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v98, v99, (uint64_t)&v118, v89);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v98, v99, 0, v84, v85, v86, v87, v88, (uint64_t)&v118);
      if ((_DWORD)v119)
        break;
      v107 = v118;
      if (v118)
      {
        v108 = (*(_DWORD *)v118)++;
        v118 = 0;
        if (v108)
          *(_DWORD *)v107 = v108;
        else
          WTF::fastFree((unint64_t)v107, v100, v101, v102, v103, v104, v105, v106);
        WTF::PrintStream::printf(v97, "\t\t\"%s\" => %04d\n", (const char *)v107 + 16, *((_DWORD *)v94 + 2));
        if (*(_DWORD *)v107 == 1)
          WTF::fastFree((unint64_t)v107, v109, v110, v84, v85, v86, v87, v88);
        else
          --*(_DWORD *)v107;
      }
      else
      {
        WTF::PrintStream::printf(v97, "\t\t\"%s\" => %04d\n", 0, *((_DWORD *)v94 + 2));
      }
      do
      {
        v94 += 2;
        if (v94 == v95)
          goto LABEL_122;
        v96 = *v94;
      }
      while (!*v94);
      if (v94 == v95)
        goto LABEL_122;
    }
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x19811E564);
  }
  return WTF::PrintStream::printf(a3, "\n");
}

void JSC::CodeBlockBytecodeDumper<JSC::CodeBlock>::dumpGraph(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::PrintStream *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;
  _BOOL4 v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  WTF *v25;
  char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  WTF::PrintStream *v51;
  WTF::PrintStream *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int v58;
  WTF::PrintStream *v59;
  WTF::PrintStream *v60;
  uint64_t v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  WTF::PrintStream *v67;
  WTF::PrintStream *v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  char v72;
  _BOOL4 v73;
  int v74;
  int v75;
  WTF::PrintStream *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  WTF::PrintStream *v82;
  WTF::PrintStream *v83;
  int v84;
  unsigned int *v85;
  uint64_t v86;
  _BYTE *v87;
  unsigned int *v88;
  char *v89;
  char *i;
  WTF::PrintStream *v91;
  int *v92;
  int v93;
  int *v94;
  _DWORD *v95;
  JSC::Identifier *v96;
  WTF::PrintStream *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  unint64_t v103;
  const char *v104;
  JSC::Structure *v105;
  unint64_t v106;
  WTF::PrintStream *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  size_t v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unint64_t k;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  unsigned int *v154;
  unsigned int *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  WTF::PrintStream *v162;
  char *v163;
  size_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  int v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t j;
  unsigned int *v178;
  unsigned int *v179;
  unsigned int *v180;
  uint64_t v181;
  _DWORD *v182;
  int v183;
  unsigned int *v184;
  uint64_t v185;
  int v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t (**v194)();
  WTF::PrintStream *v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  WTF *v199;
  _BYTE *v200;
  __int128 v201;
  _BYTE v202[128];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 12);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)a2 + v13);
      v15 = *v14;
      if (v15 == 128)
      {
        ++v10;
      }
      else
      {
        v16 = *v14;
        if (v15 != 130)
          goto LABEL_8;
        ++v12;
      }
      v16 = v14[1];
LABEL_8:
      if (v16 < 0x2F)
        ++v11;
      v17 = *v14;
      if ((v15 | 2) == 0x82)
        v17 = v14[1];
      v18 = v15 == 128;
      if (v15 == 130)
        v18 = 2;
      v19 = v15 == 128 || v15 == 130;
      v20 = JSC::opcodeLengths[v17] << v18;
      if (v19)
        v21 = 2;
      else
        v21 = 1;
      v13 += v21 + v20;
      ++v9;
      if (v13 == v8)
        goto LABEL_23;
    }
  }
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
LABEL_23:
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
  v22 = 288;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 4) & 8) == 0)
    v22 = 96;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 4) & 3) == 2)
    v22 = 0;
  WTF::PrintStream::printf(a4, ": %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions, %lu instructions with metadata); %lu bytes (%l"
    "u metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)",
    v9,
    v10,
    v12,
    v11,
    v22 + *(unsigned int *)(a2 + 12),
    v22,
    *(_DWORD *)(a1 + 28),
    *(_DWORD *)(a1 + 20),
    *(_DWORD *)(a1 + 24));
  LODWORD(v199) = *(_DWORD *)(a1 + 48);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
  WTF::PrintStream::printf(v23, "%s", "; scope at ");
  JSC::VirtualRegister::dump((unsigned int *)&v199, v23);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
  WTF::PrintStream::printf(a4, "\n");
  v196 = 0;
  v197 = a1;
  v194 = &off_1E3580AD8;
  v195 = a4;
  WTF::PrintStream::printf(a4, "\n");
  v24 = *((unsigned int *)a3 + 3);
  v25 = (WTF *)(16 * v24);
  v191 = *((_DWORD *)a3 + 3);
  v185 = 16 * v24;
  if (!(_DWORD)v24)
  {
    v26 = 0;
    goto LABEL_93;
  }
  if (v24 >> 28)
  {
    __break(0xC471u);
LABEL_213:
    JUMPOUT(0x19811F448);
  }
  v26 = (char *)WTF::fastMalloc(v25);
  bzero(v26, (size_t)v25);
  v27 = *((_DWORD *)a3 + 3);
  if (v27)
  {
    v192 = (uint64_t *)a2;
    v28 = 0;
    v29 = v191;
    while (1)
    {
      v30 = *a3;
      v31 = *(_DWORD *)(*a3 + 80 * v28);
      if (v31)
      {
        if (v31 != -1 || *(_DWORD *)(v30 + 80 * v28 + 4) != -1)
        {
LABEL_33:
          v32 = v30 + 80 * v28;
          v33 = *(unsigned int *)(v32 + 44);
          if ((_DWORD)v33)
          {
            v34 = *(unsigned int **)(v32 + 32);
            v35 = &v34[v33];
            v36 = (int *)(v30 + 80 * v28 + 8);
            do
            {
              v37 = *v34;
              if (v29 <= v37)
              {
                __break(0xC471u);
                JUMPOUT(0x19811F4D4);
              }
              v38 = (uint64_t)&v26[16 * v37];
              v39 = *v36;
              v40 = *(unsigned int *)(v38 + 12);
              if ((_DWORD)v40)
              {
                v41 = *(int **)v38;
                while (1)
                {
                  v42 = *v41++;
                  if (v42 == v39)
                    break;
                  if (!--v40)
                    goto LABEL_40;
                }
              }
              else
              {
LABEL_40:
                LODWORD(v199) = *v36;
                v43 = *(unsigned int *)(v38 + 12);
                if ((_DWORD)v43 == *(_DWORD *)(v38 + 8))
                {
                  v44 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v43 + 1, (unint64_t)&v199);
                  v29 = v191;
                  *(_DWORD *)(*(_QWORD *)v38 + 4 * *(unsigned int *)(v38 + 12)) = *v44;
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)v38 + 4 * v43) = v39;
                }
                ++*(_DWORD *)(v38 + 12);
              }
              ++v34;
            }
            while (v34 != v35);
          }
        }
      }
      else if (*(_DWORD *)(v30 + 80 * v28 + 4))
      {
        goto LABEL_33;
      }
      v45 = v28 + 1;
      v28 = (v28 + 1);
      if (v27 == v45)
      {
        v186 = *((_DWORD *)a3 + 3);
        if (v186)
        {
          v46 = 0;
          v187 = v26;
          while (1)
          {
            v47 = *a3;
            v48 = (_DWORD *)(*a3 + 80 * v46);
            if (*v48)
            {
              if (*v48 != -1 || *(_DWORD *)(v47 + 80 * v46 + 4) != -1)
              {
LABEL_55:
                v189 = *a3;
                v190 = v46;
                v49 = v47 + 80 * v46;
                v50 = *(_DWORD *)(v49 + 8);
                v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                WTF::PrintStream::printf(v51, "%s", "bb#");
                WTF::PrintStream::printf(v51, "%u", v50);
                WTF::PrintStream::printf(v51, "%s", "\n");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                WTF::PrintStream::printf(v52, "%s", "Predecessors: [");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                v53 = *(unsigned int *)(v49 + 8);
                if (v191 <= v53)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19811F4ECLL);
                }
                v54 = &v26[16 * v53];
                v55 = *((unsigned int *)v54 + 3);
                if ((_DWORD)v55)
                {
                  v56 = *(unsigned int **)v54;
                  v57 = 4 * v55;
                  do
                  {
                    v58 = *v56;
                    if (*(_DWORD *)(*a3 + 80 * *v56) || *(_DWORD *)(*a3 + 80 * v58 + 4))
                    {
                      v59 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                      WTF::PrintStream::printf(v59, "%s", " #");
                      WTF::PrintStream::printf(v59, "%u", v58);
                      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                    }
                    ++v56;
                    v57 -= 4;
                  }
                  while (v57);
                }
                v60 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                WTF::PrintStream::printf(v60, "%s", " ]\n");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                v61 = v189 + 80 * v190;
                v63 = *(_DWORD *)(v61 + 4);
                v62 = (unsigned int *)(v61 + 4);
                if (v63)
                {
                  v64 = 0;
                  v65 = *v192;
                  do
                  {
                    v66 = *v48 + v64;
                    JSC::dumpBytecode((int)&v194, *v48 + v64, (JSC::OpEnumeratorHasOwnProperty *)(v65 + v66));
                    v67 = v195;
                    v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v195 + 32))(v195);
                    WTF::PrintStream::printf(v68, "%s", "\n");
                    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v67 + 40))(v67);
                    v65 = *v192;
                    v69 = (unsigned __int8 *)(*v192 + v66);
                    v70 = *v69;
                    v71 = v70;
                    if ((v70 | 2) == 0x82)
                      v71 = v69[1];
                    v72 = v70 == 128;
                    if (v70 == 130)
                      v72 = 2;
                    v73 = v70 == 128 || v70 == 130;
                    v74 = JSC::opcodeLengths[v71] << v72;
                    if (v73)
                      v75 = 2;
                    else
                      v75 = 1;
                    v64 += v75 + v74;
                  }
                  while (v64 < *v62);
                }
                v76 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                WTF::PrintStream::printf(v76, "%s", "Successors: [");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                v77 = v189 + 80 * v190;
                v78 = *(unsigned int *)(v77 + 44);
                if ((_DWORD)v78)
                {
                  v79 = *(unsigned int **)(v77 + 32);
                  v80 = 4 * v78;
                  do
                  {
                    v81 = *v79;
                    if (*(_DWORD *)(*a3 + 80 * *v79) != -1 || *(_DWORD *)(*a3 + 80 * v81 + 4) != -1)
                    {
                      v82 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                      WTF::PrintStream::printf(v82, "%s", " #");
                      WTF::PrintStream::printf(v82, "%u", v81);
                      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                    }
                    ++v79;
                    v80 -= 4;
                  }
                  while (v80);
                }
                v83 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 32))(a4);
                WTF::PrintStream::printf(v83, "%s", " ]\n\n");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a4 + 40))(a4);
                v26 = v187;
                LODWORD(v46) = v190;
              }
            }
            else if (*(_DWORD *)(v47 + 80 * v46 + 4))
            {
              goto LABEL_55;
            }
            v84 = v46 + 1;
            v46 = (v46 + 1);
            if (v186 == v84)
              goto LABEL_93;
          }
        }
        break;
      }
    }
  }
LABEL_93:
  v85 = *(unsigned int **)(*(_QWORD *)(v197 + 56) + 104);
  if (v85)
    v86 = *v85;
  else
    v86 = 0;
  v87 = *(_BYTE **)(v197 + 120);
  v188 = (unint64_t)v26;
  if (v87 && (v87[12] & 0xFE) == 4)
  {
    v88 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v87 + 72))(v87) + 48);
    if (v88)
      v88 = (unsigned int *)*v88;
  }
  else
  {
    v88 = 0;
  }
  v89 = (char *)v88 + v86;
  if (v89)
  {
    WTF::PrintStream::printf(v195, "\nIdentifiers:\n");
    for (i = 0; v89 != i; ++i)
    {
      v91 = v195;
      v92 = *(int **)(*(_QWORD *)(v197 + 56) + 104);
      if (v92)
      {
        v93 = *v92;
        if (*v92 > i)
        {
          v94 = &v92[2 * i];
          goto LABEL_107;
        }
      }
      else
      {
        v93 = 0;
      }
      v95 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v197 + 120) + 72))(*(_QWORD *)(v197 + 120))
                       + 48);
      if (*v95 <= ((_DWORD)i - v93))
      {
        __break(0xC471u);
        goto LABEL_213;
      }
      v94 = &v95[2 * ((_DWORD)i - v93)];
LABEL_107:
      v96 = (JSC::Identifier *)(v94 + 2);
      v97 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v91 + 32))(v91);
      WTF::PrintStream::printf(v97, "%s", "  id");
      WTF::PrintStream::printf(v97, "%u", (_DWORD)i);
      WTF::PrintStream::printf(v97, "%s", " = ");
      JSC::Identifier::dump(v96, v97);
      WTF::PrintStream::printf(v97, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v91 + 40))(v91);
    }
  }
  v98 = v197;
  if (*(_DWORD *)(v197 + 172))
  {
    WTF::PrintStream::printf(v195, "\nConstants:\n");
    v98 = v197;
    v99 = *(unsigned int *)(v197 + 172);
    if ((_DWORD)v99)
    {
      v100 = 0;
      v193 = *(_QWORD *)(v197 + 160);
      v101 = 8 * v99;
      while (1)
      {
        v102 = *(_DWORD **)(*(_QWORD *)(v197 + 56) + 120);
        if (v102 && *v102 > v100)
        {
          v103 = *((char *)v102 + v100 + 4);
          if (v103 > 3)
            v104 = 0;
          else
            v104 = (const char *)*((_QWORD *)&off_1E3580B80 + v103);
        }
        else
        {
          v104 = "";
        }
        v105 = 0;
        v106 = *(_QWORD *)(v193 + 8 * v100);
        v107 = v195;
        v198 = v106;
        v199 = (WTF *)off_1E3572250;
        v200 = v202;
        v201 = xmmword_199122F80;
        v202[0] = 0;
        if (v106 && (v106 & 0xFFFE000000000002) == 0)
          v105 = (JSC::Structure *)(16 * (*(_DWORD *)v106 & 0xFFFFFFFE));
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v198, (WTF::PrintStream *)&v199, 0, v105);
        (*((void (**)(WTF **))v199 + 5))(&v199);
        v115 = v200;
        if (!v200)
          break;
        v116 = v201;
        if ((unint64_t)v201 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x19811F4DCLL);
        }
        if ((_QWORD)v201 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x19811F4E4);
        }
        v117 = WTF::fastMalloc((WTF *)(v201 + 17));
        *(_DWORD *)v117 = 1;
        *(_QWORD *)(v117 + 8) = v116;
        memcpy((void *)(v117 + 16), v115, v116);
        *(_BYTE *)(v117 + 16 + v116) = 0;
        v118 = (unint64_t)v200;
        if (v200 != v202)
          goto LABEL_125;
        WTF::PrintStream::printf(v107, "   k%u = %s%s\n", v100, (const char *)(v117 + 16), v104);
LABEL_128:
        if (*(_DWORD *)v117 == 1)
          WTF::fastFree(v117, v119, v120, v121, v122, v123, v124, v125);
        else
          --*(_DWORD *)v117;
LABEL_130:
        ++v100;
        v101 -= 8;
        if (!v101)
        {
          v98 = v197;
          goto LABEL_134;
        }
      }
      v117 = 0;
      v118 = 0;
LABEL_125:
      WTF::fastFree(v118, v108, v109, v110, v111, v112, v113, v114);
      v126 = (const char *)(v117 + 16);
      if (!v117)
        v126 = 0;
      WTF::PrintStream::printf(v107, "   k%u = %s%s\n", v100, v126, v104);
      if (!v117)
        goto LABEL_130;
      goto LABEL_128;
    }
  }
LABEL_134:
  v127 = *(_QWORD *)(v98 + 224);
  v128 = (unint64_t)v26;
  if (v127)
  {
    v140 = *(_DWORD *)(v127 + 12);
    if (v140)
    {
      WTF::PrintStream::printf(v195, "\nException Handlers:\n");
      v141 = 0;
      do
      {
        v142 = *(_QWORD *)(v197 + 224);
        if (!v142)
        {
          __break(0xC471u);
          JUMPOUT(0x19811F468);
        }
        if (*(unsigned int *)(v142 + 12) <= (unint64_t)v141)
        {
          __break(0xC471u);
          JUMPOUT(0x19811F4F4);
        }
        v143 = v141 + 1;
        WTF::PrintStream::printf(v195, "\t %d: { start: [%4d] end: [%4d] target: [%4d] } %s\n", v141 + 1, *(_DWORD *)(*(_QWORD *)v142 + 24 * v141), *(_DWORD *)(*(_QWORD *)v142 + 24 * v141 + 4), *(_DWORD *)(*(_QWORD *)v142 + 24 * v141 + 8), off_1E3580BA0[*(_BYTE *)(*(_QWORD *)v142 + 24 * v141 + 12) & 3]);
        v141 = v143;
      }
      while (v140 != v143);
      v98 = v197;
    }
  }
  v129 = *(_QWORD *)(*(_QWORD *)(v98 + 56) + 152);
  if (v129)
  {
    v144 = *(unsigned int **)(v129 + 8);
    if (!v144)
      goto LABEL_225;
    v176 = *v144;
    if (!(_DWORD)v176)
      goto LABEL_225;
    WTF::PrintStream::printf(v195, "Switch Jump Tables:\n");
    for (j = 0; j != v176; ++j)
    {
      WTF::PrintStream::printf(v195, "  %1d = {\n", j);
      v178 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v197 + 56) + 152) + 8);
      if (j >= *v178)
      {
        __break(0xC471u);
        JUMPOUT(0x19811F4C8);
      }
      v179 = v178 + 2;
      v180 = *(unsigned int **)&v179[4 * j];
      if (v180)
        v181 = (uint64_t)&v180[*v180 + 1];
      else
        v181 = 0;
      if (v180)
        v182 = v180 + 1;
      else
        v182 = 0;
      if (v182 != (_DWORD *)v181)
      {
        v183 = 0;
        v184 = &v179[4 * j + 2];
        do
        {
          if (*v182)
            WTF::PrintStream::printf(v195, "\t\t%4d => %04d\n", v183 + *v184, *v182);
          ++v182;
          ++v183;
        }
        while (v182 != (_DWORD *)v181);
      }
      WTF::PrintStream::printf(v195, "      }\n");
      v128 = v188;
    }
    v129 = *(_QWORD *)(*(_QWORD *)(v197 + 56) + 152);
    if (v129)
    {
LABEL_225:
      v145 = *(unsigned int **)(v129 + 16);
      if (v145)
      {
        v146 = *v145;
        if ((_DWORD)v146)
        {
          WTF::PrintStream::printf(v195, "\nString Switch Jump Tables:\n");
          for (k = 0; k != v146; ++k)
          {
            WTF::PrintStream::printf(v195, "  %1d = {\n", k);
            v154 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v197 + 56) + 152) + 16);
            if (k >= *v154)
            {
              __break(0xC471u);
              JUMPOUT(0x19811F4A8);
            }
            v155 = &v154[6 * k];
            if (v155[5])
            {
              v156 = (uint64_t *)*((_QWORD *)v155 + 1);
              v157 = v155[4];
              if ((_DWORD)v157)
              {
                v158 = 16 * v157;
                v159 = v156;
                while (!*v159)
                {
                  v159 += 2;
                  v158 -= 16;
                  if (!v158)
                    goto LABEL_180;
                }
              }
              else
              {
                v159 = v156;
              }
              v160 = &v156[2 * v157];
              if (v159 != v160)
              {
                v161 = *v159;
LABEL_164:
                v162 = v195;
                v163 = *(char **)(v161 + 8);
                v164 = *(unsigned int *)(v161 + 4);
                if ((*(_BYTE *)(v161 + 16) & 4) != 0)
                  WTF::StringImpl::utf8ForCharacters(v163, v164, (uint64_t)&v199, v153);
                else
                  WTF::StringImpl::utf8ForCharacters((uint64_t)v163, v164, 0, v148, v149, v150, v151, v152, (uint64_t)&v199);
                if ((_DWORD)v200)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19811F488);
                }
                v172 = v199;
                if (v199)
                {
                  v173 = (*(_DWORD *)v199)++;
                  v199 = 0;
                  if (v173)
                    *(_DWORD *)v172 = v173;
                  else
                    WTF::fastFree((unint64_t)v172, v165, v166, v167, v168, v169, v170, v171);
                  WTF::PrintStream::printf(v162, "\t\t\"%s\" => %04d\n", (const char *)v172 + 16, *((_DWORD *)v159 + 2));
                  if (*(_DWORD *)v172 == 1)
                    WTF::fastFree((unint64_t)v172, v174, v175, v148, v149, v150, v151, v152);
                  else
                    --*(_DWORD *)v172;
                }
                else
                {
                  WTF::PrintStream::printf(v162, "\t\t\"%s\" => %04d\n", 0, *((_DWORD *)v159 + 2));
                }
                while (1)
                {
                  v159 += 2;
                  if (v159 == v160)
                    break;
                  v161 = *v159;
                  if (*v159)
                  {
                    if (v159 != v160)
                      goto LABEL_164;
                    break;
                  }
                }
              }
            }
LABEL_180:
            WTF::PrintStream::printf(v195, "      }\n");
            v128 = v188;
          }
        }
      }
    }
  }
  WTF::PrintStream::printf(a4, "\n");
  v137 = v185;
  if (v191)
  {
    v138 = v128;
    do
    {
      v139 = *(_QWORD *)v138;
      if (*(_QWORD *)v138)
      {
        *(_QWORD *)v138 = 0;
        *(_DWORD *)(v138 + 8) = 0;
        WTF::fastFree(v139, v130, v131, v132, v133, v134, v135, v136);
      }
      v138 += 16;
      v137 -= 16;
    }
    while (v137);
  }
  if (v128)
    WTF::fastFree(v128, v130, v131, v132, v133, v134, v135, v136);
}

uint64_t JSC::Wasm::BytecodeDumper::dumpBlock(unsigned int *a1, uint64_t a2, WTF::PrintStream *a3)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void (**v20)(JSC::Wasm::BytecodeDumper *__hidden);
  WTF *v21;
  const WTF::String *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  JSC::Wasm::TypeDefinition *v43;
  WTF::PrintStream *v44;
  WTF::PrintStream *v45;
  uint64_t v46;
  WTF::PrintStream *v47;
  unsigned int *v48;
  int8x8_t v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  WTF::PrintStream *v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  BOOL v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  uint64_t *v67;
  uint64_t v68;
  WTF::PrintStream *v69;
  WTF::PrintStream *v70;
  char *String;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::PrintStream *v75;
  float v76;
  unsigned int v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  const char *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  const char *v93;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  void (**v109)(JSC::Wasm::BytecodeDumper *__hidden);
  WTF::PrintStream *v110;
  int v111;
  unsigned int *v112;
  WTF::StringImpl *v113;
  JSC::Wasm::NameSection *v114;
  int v115;
  char v116;

  v5 = (uint64_t *)*((_QWORD *)a1 + 7);
  v6 = *((_DWORD *)v5 + 3);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *v5;
    while (1)
    {
      v12 = (unsigned __int8 *)(v11 + v10);
      v13 = *v12;
      if (v13 == 141)
      {
        ++v8;
        ++v7;
      }
      else
      {
        if (v13 == 142)
          ++v9;
        ++v7;
        if ((v13 + 115) > 1u)
        {
          v15 = 1;
          v14 = v13;
          goto LABEL_10;
        }
      }
      v14 = v12[1];
      v15 = 2;
LABEL_10:
      if (v13 == 142)
        v16 = 2;
      else
        v16 = v13 == 141;
      v10 += v15 + (JSC::wasmOpcodeLengths[v14] << v16);
      if (v10 == v6)
        goto LABEL_16;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
LABEL_16:
  v17 = *a1 + *(_DWORD *)(a2 + 36);
  v18 = *(_QWORD *)(a2 + 248);
  if (*(_DWORD *)(v18 + 52) <= v17)
  {
    do
      v19 = __ldaxr((unsigned int *)v18);
    while (__stlxr(v19 + 1, (unsigned int *)v18));
    v110 = 0;
    goto LABEL_19;
  }
  v103 = *(_QWORD *)(v18 + 40);
  do
    v104 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v104 + 1, (unsigned int *)v18));
  v110 = 0;
  if (!v103)
  {
LABEL_19:
    v20 = (void (**)(JSC::Wasm::BytecodeDumper *__hidden))(v17 | 0x8000000000000000);
    goto LABEL_20;
  }
  v20 = (void (**)(JSC::Wasm::BytecodeDumper *__hidden))(v103 + 16 * v17);
LABEL_20:
  v109 = v20;
  v110 = (WTF::PrintStream *)v18;
  JSC::Wasm::makeString((uint64_t *)&v109, (uint64_t *)&v113);
  v21 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::printInternal(v21, (WTF::PrintStream *)&v113, v22, v23, v24, v25, v26, v27, v28, v29);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v37 = v113;
  v113 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = (unsigned int *)v110;
  v110 = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      v114 = (JSC::Wasm::NameSection *)v38;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v114, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  v41 = *a1;
  if (*(_DWORD *)(a2 + 132) <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x19811FBFCLL);
  }
  v107 = a1;
  if (*(_DWORD *)(a2 + 52) <= v41)
    goto LABEL_75;
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(a2 + 40) + 8 * v41);
  v44 = a3;
  v45 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v45, "%s", " : ");
  JSC::Wasm::TypeDefinition::dump(v43, v45);
  WTF::PrintStream::printf(v45, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v44 + 40))(v44);
  v46 = *(unsigned int *)(v42 + 40 * v41 + 28);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v44 + 32))(v44);
  WTF::PrintStream::printf(v47, "%s", "wasm size: ");
  WTF::PrintStream::printf(v47, "%lu", v46);
  WTF::PrintStream::printf(v47, "%s", " bytes\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v44 + 40))(v44);
  v48 = v107;
  WTF::PrintStream::printf(a3, "bytecode: %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions); %lu bytes; %d parameter(s); %d local("
    "s); %d callee register(s)\n",
    v7,
    v8,
    v9,
    *(unsigned int *)(*((_QWORD *)v107 + 7) + 12),
    v107[3],
    v107[1],
    v107[2]);
  v111 = 0;
  v109 = &off_1E3580A70;
  v110 = a3;
  v112 = v107;
  v50 = (uint64_t *)*((_QWORD *)v107 + 7);
  if (*((_DWORD *)v50 + 3))
  {
    v51 = 0;
    v52 = *v50;
    do
    {
      JSC::dumpWasm((uint64_t)&v109, v51, (unsigned __int8 *)(v52 + v51), v49);
      v53 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      WTF::PrintStream::printf(v53, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
      v52 = *v50;
      v54 = (unsigned __int8 *)(*v50 + v51);
      v55 = *v54;
      if ((v55 + 115) <= 1u)
      {
        v57 = v54[1];
        v56 = 2;
      }
      else
      {
        v56 = 1;
        v57 = v55;
      }
      v58 = v55 == 141;
      v59 = v55 == 142;
      v60 = JSC::wasmOpcodeLengths[v57];
      if (v59)
        v61 = 2;
      else
        v61 = v58;
      v51 += v56 + (v60 << v61);
      v62 = *((_QWORD *)v107 + 7);
    }
    while (v50 != (uint64_t *)v62 || v51 != *(_DWORD *)(v62 + 12));
    v48 = v112;
  }
  if (v48[13])
  {
    WTF::PrintStream::printf(v110, "\nConstants:\n");
    v63 = v48[13];
    if ((_DWORD)v63)
    {
      v64 = 0;
      v65 = 0;
      v106 = 16 * v63;
      v108 = *((_QWORD *)v48 + 5);
      do
      {
        if (v65 >= v48[9])
        {
          __break(0xC471u);
          JUMPOUT(0x19811FBF4);
        }
        v66 = v48;
        v67 = (uint64_t *)(*((_QWORD *)v48 + 3) + v64);
        v68 = *v67;
        v69 = v110;
        JSC::Wasm::BytecodeDumper::formatConstant((uint64_t *)&v113, *v67, v67[1], *(const void **)(v108 + 8 * v65));
        v70 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v69 + 32))(v69);
        WTF::PrintStream::printf(v70, "%s", "   const");
        WTF::PrintStream::printf(v70, "%u", v65);
        WTF::PrintStream::printf(v70, "%s", " : ");
        String = (char *)JSC::Wasm::makeString((char)v68);
        v73 = v72;
        v74 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v70 + 32))(v70);
        v75 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
        if (String)
        {
          v77 = v73 - 1;
          if (!v73)
            v77 = 0;
          WTF::StringImpl::utf8ForCharacters(String, v77, (uint64_t)&v114, v76);
        }
        else
        {
          v78 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v78 = 1;
          *(_QWORD *)(v78 + 8) = 0;
          *(_BYTE *)(v78 + 16) = 0;
          v114 = (JSC::Wasm::NameSection *)v78;
          v115 = 0;
        }
        WTF::printExpectedCStringHelper(v75, "StringView", &v114);
        v48 = v66;
        if (v115 != -1)
          ((void (*)(char *, JSC::Wasm::NameSection **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v115])(&v116, &v114);
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v70 + 40))(v70);
        WTF::PrintStream::printf(v70, "%s", " = ");
        v79 = v113;
        v80 = (char *)v113 + 16;
        if (!v113)
          v80 = 0;
        WTF::PrintStream::printf(v70, "%s", v80);
        WTF::PrintStream::printf(v70, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v69 + 40))(v69);
        if (v79)
        {
          if (*(_DWORD *)v79 == 1)
            WTF::fastFree((unint64_t)v79, v81, v82, v83, v84, v85, v86, v87);
          else
            --*(_DWORD *)v79;
        }
        ++v65;
        v64 += 16;
      }
      while (v106 != v64);
    }
  }
  v88 = v112[37];
  if (v88)
  {
    WTF::PrintStream::printf(v110, "\nException Handlers:\n");
    v89 = 0;
    while (v112[37] > (unint64_t)v89)
    {
      v90 = v89;
      v91 = (int *)(*((_QWORD *)v112 + 17) + 28 * v89);
      v92 = *v91;
      if (v92 > 2)
        v93 = 0;
      else
        v93 = off_1E3580BC0[v92];
      ++v89;
      WTF::PrintStream::printf(v110, "\t %d: { start: [%4d] end: [%4d] target: [%4d] tryDepth: [%4d] exceptionIndexOrDelegateTarget: [%4d] } %s\n", v90 + 1, v91[1], v91[2], v91[3], v91[5], v91[6], v93);
      if (v88 == v89)
        return WTF::PrintStream::printf(a3, "\n");
    }
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x19811FBECLL);
  }
  return WTF::PrintStream::printf(a3, "\n");
}

void JSC::Wasm::BytecodeDumper::formatConstant(uint64_t *a1, char a2, uint64_t a3, const void *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  WTF *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  _BYTE *v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case -5:
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%llu", a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
        goto LABEL_34;
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FFF0);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FCC4);
      }
      goto LABEL_32;
    case -4:
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%lf", *(double *)&a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
        goto LABEL_34;
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198120010);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FE7CLL);
      }
      goto LABEL_32;
    case -3:
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%lf", *(float *)&a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
        goto LABEL_34;
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198120000);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FDA4);
      }
      goto LABEL_32;
    case -2:
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%llu", a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
        goto LABEL_34;
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198120008);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FE10);
      }
      goto LABEL_32;
    case -1:
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%d", (_DWORD)a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
        goto LABEL_34;
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FFF8);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FD30);
      }
      goto LABEL_32;
    default:
      if (BYTE1(dword_1ECF4C7B0))
        v15 = 29;
      else
        v15 = 17;
      if ((a2 + 17) >= 2u && (v15 + a2) > 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x19811FFE8);
      }
      if (a4 == (const void *)2)
      {
        v16 = WTF::fastMalloc((WTF *)0x15);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = 4;
        *a1 = v16;
        strcpy((char *)(v16 + 16), "null");
        return;
      }
      v20 = off_1E3572250;
      v21 = v23;
      v22 = xmmword_199122F80;
      v23[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%p", a4);
      v20[5]((WTF::StringPrintStream *)&v20);
      v13 = v21;
      v12 = v22;
      *a1 = 0;
      if (!v13)
      {
LABEL_34:
        v19 = 0;
LABEL_35:
        WTF::fastFree(v19, v5, v6, v7, v8, v9, v10, v11);
        return;
      }
      if (v12 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198120018);
      }
      v14 = (WTF *)(v12 + 17);
      if (v12 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198120020);
      }
LABEL_32:
      v17 = WTF::fastMalloc(v14);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = v12;
      *a1 = v17;
      v18 = v17 + 16;
      memcpy((void *)(v17 + 16), v13, v12);
      *(_BYTE *)(v18 + v12) = 0;
      v19 = (unint64_t)v21;
      if (v21 != v23)
        goto LABEL_35;
      return;
  }
}

void JSC::Wasm::BytecodeDumper::registerName(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  _BYTE *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a2;
  if (a2 < 0x40000000)
  {
    v29 = off_1E3572250;
    v30 = v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::VirtualRegister::dump((unsigned int *)&v26, (WTF::PrintStream *)&v29);
    v29[5]((WTF::StringPrintStream *)&v29);
    v22 = v30;
    v21 = v31;
    *a3 = 0;
    if (!v22)
    {
      v25 = 0;
      goto LABEL_23;
    }
    if (v21 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981202D0);
    }
    if (v21 != -17)
    {
      v23 = WTF::fastMalloc((WTF *)(v21 + 17));
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = v21;
      *a3 = v23;
      v24 = v23 + 16;
      memcpy((void *)(v23 + 16), v22, v21);
      *(_BYTE *)(v24 + v21) = 0;
      v25 = (unint64_t)v30;
      if (v30 == v32)
        return;
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x1981202B0);
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = a2 - 0x40000000;
  if (v6 >= *(unsigned int *)(v5 + 36))
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  if (v6 >= *(unsigned int *)(v5 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x1981202B8);
  }
  JSC::Wasm::BytecodeDumper::formatConstant(&v28, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v6), *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v6 + 8), *(const void **)(*(_QWORD *)(v5 + 40) + 8 * v6));
  v27 = a2;
  v29 = off_1E3572250;
  v30 = v32;
  v31 = xmmword_199122F80;
  v32[0] = 0;
  v7 = (_DWORD *)v28;
  v8 = (const char *)(v28 + 16);
  if (!v28)
    v8 = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", v8);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "(");
  JSC::VirtualRegister::dump((unsigned int *)&v27, (WTF::PrintStream *)&v29);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ")");
  v29[5]((WTF::StringPrintStream *)&v29);
  v17 = v30;
  v16 = v31;
  *a3 = 0;
  if (v17)
  {
    if (v16 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981202C0);
    }
    if (v16 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1981202C8);
    }
    v18 = WTF::fastMalloc((WTF *)(v16 + 17));
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = v16;
    *a3 = v18;
    v19 = v18 + 16;
    memcpy((void *)(v18 + 16), v17, v16);
    *(_BYTE *)(v19 + v16) = 0;
    v20 = (unint64_t)v30;
    if (v30 == v32)
      goto LABEL_19;
  }
  else
  {
    v20 = 0;
  }
  WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (!v7)
    return;
  if (*v7 != 1)
  {
    --*v7;
    return;
  }
  v25 = (unint64_t)v7;
LABEL_23:
  WTF::fastFree(v25, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::Wasm::BytecodeDumper::outOfLineJumpOffset(JSC::Wasm::BytecodeDumper *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 104);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(v2 + 8 * v6);
    if (v7 == a2)
      return *(unsigned int *)(v2 + 8 * v6 + 4);
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2)
        return *(unsigned int *)(v2 + 8 * v6 + 4);
    }
  }
  return 0;
}

void JSC::AccessCaseSnippetParams::~AccessCaseSnippetParams(JSC::AccessCaseSnippetParams *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v9 = *((unsigned int *)this + 19);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 8);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 8);
  if (v13)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E35747E0;
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v9 = *((unsigned int *)this + 19);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 8);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 8);
  if (v13)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E35747E0;
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void JSC::Wasm::BytecodeDumper::~BytecodeDumper(JSC::Wasm::BytecodeDumper *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::CodeBlockBytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::~CodeBlockBytecodeDumper()
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::registerName(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  if (a2 >= 0x40000000)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2);
    return;
  }
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  JSC::VirtualRegister::dump((unsigned int *)&v16, (WTF::PrintStream *)&v17);
  v17[5]((WTF::StringPrintStream *)&v17);
  v12 = v18;
  v11 = v19;
  *a3 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_8:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198120664);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a3 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_8;
}

uint64_t JSC::BytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::outOfLineJumpOffset(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 176);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(v2 + 8 * v6);
    if (v7 == a2)
      return *(unsigned int *)(v2 + 8 * v6 + 4);
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2)
        return *(unsigned int *)(v2 + 8 * v6 + 4);
    }
  }
  return 0;
}

void JSC::BytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::constantName(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  signed int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  JSC::Structure *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = a2;
  v4 = a2 - 0x40000000;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(v5 + 60);
  if ((int)(a2 - 0x40000000) >= (int)v6)
  {
    v25 = off_1E3572250;
    v26 = v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "INVALID_CONSTANT(");
    JSC::VirtualRegister::dump(&v24, (WTF::PrintStream *)&v25);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ")");
    v25[5]((WTF::StringPrintStream *)&v25);
    v18 = v26;
    v17 = v27;
    *a3 = 0;
    if (v18)
    {
      if (v17 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198120934);
      }
      v19 = (WTF *)(v17 + 17);
      if (v17 != -17)
      {
LABEL_16:
        v20 = WTF::fastMalloc(v19);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = v17;
        *a3 = v20;
        v21 = v20 + 16;
        memcpy((void *)(v20 + 16), v18, v17);
        *(_BYTE *)(v21 + v17) = 0;
        v22 = (unint64_t)v26;
        if (v26 == v28)
          return;
        goto LABEL_19;
      }
      __break(0xC471u);
LABEL_25:
      JUMPOUT(0x198120824);
    }
  }
  else
  {
    if (v6 <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x19812092CLL);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v4);
    v23 = v7;
    v25 = off_1E3572250;
    v26 = v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    if (v7)
      v8 = (v7 & 0xFFFE000000000002) == 0;
    else
      v8 = 0;
    if (v8)
      v9 = (JSC::Structure *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE));
    else
      v9 = 0;
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v23, (WTF::PrintStream *)&v25, 0, v9);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "(");
    JSC::VirtualRegister::dump(&v24, (WTF::PrintStream *)&v25);
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ")");
    v25[5]((WTF::StringPrintStream *)&v25);
    v18 = v26;
    v17 = v27;
    *a3 = 0;
    if (v18)
    {
      if (v17 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19812093CLL);
      }
      v19 = (WTF *)(v17 + 17);
      if (v17 != -17)
        goto LABEL_16;
      __break(0xC471u);
      goto LABEL_25;
    }
  }
  v22 = 0;
LABEL_19:
  WTF::fastFree(v22, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::CodeBlockBytecodeDumper<JSC::CodeBlock>::~CodeBlockBytecodeDumper()
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::SlowPathCallGeneratorWithArguments<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~SlowPathCallGeneratorWithArguments(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)(a1 + 8);
  if (a1 + 24 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::SlowPathCallGeneratorWithArguments<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~SlowPathCallGeneratorWithArguments(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;

  v9 = (WTF *)*((_QWORD *)this + 1);
  if ((WTF *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::SlowPathCallGeneratorWithArguments<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::RegisterSet *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint8x8_t v37;
  __int32 v38;
  uint8x8_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  char v49;
  char v50;
  uint64_t v51;
  JSC::RegisterSet *v52;
  JSC::RegisterSet *v53;
  uint64_t v54;
  _BYTE *v55;
  JSC::RegisterSet *v56;
  JSC::RegisterSet *v57;
  JSC::RegisterSet *v58;
  uint64_t v59;
  int v60;
  JSC::RegisterSet *v61;
  void *v62;
  uint64_t v63;
  char v64;
  int8x8_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  JSC::ScratchRegisterAllocator *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int i;
  unsigned int v100;
  char v101;
  int64_t v103;
  JSC::RegisterSet *v104;
  JSC::RegisterSet *v105;
  unsigned int v106;
  _QWORD v107[2];
  int v108;
  int v109;
  char v110;
  __int16 v111;
  char v112;
  unsigned int v113[3];
  unint64_t v114;
  JSC::RegisterSet *v115;
  void *__dst;
  uint64_t v117;
  _WORD v118[4];

  v16 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v16)
  {
    v9 = 0;
    v10 = 0;
    v17 = 12 * v16;
    do
    {
      if (v10 >= *(unsigned int *)(a1 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x1981211C0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 8) + v9), a4, (uint64_t)a3, a4, a5, a6, a7, a8);
      ++v10;
      v9 += 12;
    }
    while (v17 != v9);
  }
  v18 = *a3;
  v19 = a3[1];
  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  __dst = (void *)(v19 | v18);
  v117 = v19;
  v114 = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)a2, (const JSC::RegisterSet *)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
  v115 = v20;
  v27 = *(unsigned __int8 *)(a1 + 65);
  v28 = *(unsigned __int8 *)(a1 + 66);
  __dst = v118;
  LODWORD(v117) = 2;
  if (v27)
  {
    v118[0] = v27;
    v29 = 1;
    HIDWORD(v117) = 1;
    if (v28 == 1)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v28 != 1)
  {
    v29 = 0;
LABEL_10:
    v118[v29++] = v28 | 0x100;
    HIDWORD(v117) = v29;
LABEL_11:
    v30 = &v109;
    v9 = 1;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = (char *)__dst;
      v34 = v29;
      do
      {
        if ((*((_BYTE *)__dst + v31 + 1) & 0x40) != 0)
          goto LABEL_101;
        v32 |= 1 << *((_BYTE *)__dst + v31 + 1);
        v31 += 2;
      }
      while (2 * v29 != v31);
      v35 = 0;
      do
      {
        v36 = *((_BYTE *)__dst + v35) & 0x7F;
        if (v36 >= 0x40)
          goto LABEL_101;
        v32 &= ~(1 << v36);
        v35 += 2;
      }
      while (2 * v29 != v35);
      v37 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v37.i16[0] = vaddlv_u8(v37);
      v38 = v37.i32[0];
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v32));
      v39.i16[0] = vaddlv_u8(v39);
      if (!(v39.i32[0] + v38))
      {
        v49 = *(_BYTE *)__dst;
        v50 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v50, v22, v23, v24, v25, v26);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v117) - 2);
        v51 = (HIDWORD(v117) - 1);
        v47 = HIDWORD(v117) == 1;
        HIDWORD(v117) = v51;
        v52 = (JSC::RegisterSet *)__dst;
        v53 = (JSC::RegisterSet *)((char *)__dst + 2 * v51);
        if (v47)
        {
          v59 = 0;
          v60 = 0;
          LODWORD(v10) = 0;
          v20 = v53;
        }
        else
        {
          v54 = 2 * v51;
          v55 = __dst;
          while (*v55 != v50)
          {
            v55 += 2;
            v54 -= 2;
            if (!v54)
              goto LABEL_40;
          }
          *v55 = v49;
LABEL_40:
          LODWORD(v10) = 0;
          v56 = v52;
          v20 = v53;
          v57 = v53;
          do
          {
            if (*(unsigned __int8 *)v52 == *((unsigned __int8 *)v52 + 1))
            {
              v58 = v52;
              if (v57 != (JSC::RegisterSet *)((char *)__dst + 2 * HIDWORD(v117)))
              {
                v105 = v53;
                if (v52 == v20)
                {
                  v58 = v57;
                }
                else
                {
                  v103 = v56 - v20;
                  v104 = v57;
                  memmove(v57, v20, v56 - v20);
                  v58 = (JSC::RegisterSet *)((char *)v104 + v103);
                }
                v53 = v105;
              }
              v20 = (JSC::RegisterSet *)((char *)v52 + 2);
              LODWORD(v10) = v10 + 1;
              v57 = v58;
            }
            v52 = (JSC::RegisterSet *)((char *)v52 + 2);
            v56 = (JSC::RegisterSet *)((char *)v56 + 2);
          }
          while (v52 < v53);
          v52 = (JSC::RegisterSet *)__dst;
          v59 = HIDWORD(v117);
          v60 = HIDWORD(v117);
          v53 = v57;
        }
        v61 = (JSC::RegisterSet *)((char *)v52 + 2 * v59);
        if (v20 != v61)
        {
          memmove(v53, v20, v61 - v20);
          v60 = HIDWORD(v117);
        }
        v29 = v60 - v10;
        goto LABEL_61;
      }
      v10 = 0;
      v40 = v29 <= 1 ? 1 : v29;
      v41 = 2 * v40;
      while (1)
      {
        v42 = *((unsigned __int8 *)__dst + v10 + 1);
        if ((v42 & 0x7Fu) >= 0x40)
          goto LABEL_101;
        if (((v32 >> (v42 & 0x7F)) & 1) != 0)
          break;
        v10 += 2;
        if (v41 == v10)
          goto LABEL_62;
      }
      v43 = *((unsigned __int8 *)__dst + v10);
      if (v43 != v42)
        break;
LABEL_60:
      memmove(&v33[v10], &v33[v10 + 2], 2 * v34 - v10 - 2);
      v29 = HIDWORD(v117) - 1;
LABEL_61:
      HIDWORD(v117) = v29;
LABEL_62:
      if (!v29)
      {
        v62 = __dst;
        if (v118 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v117) = 0;
          WTF::fastFree((unint64_t)v62, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
        }
        goto LABEL_66;
      }
    }
    v44 = (char)v43;
    if ((char)v43 == 63)
    {
      v45 = *(_DWORD *)(a4 + 200);
      v46 = *(_DWORD *)(a4 + 192);
      if ((char)v42 != 31)
      {
        v48 = v42 & 0x1F | 0xD2800000;
        goto LABEL_57;
      }
    }
    else
    {
      v45 = *(_DWORD *)(a4 + 200);
      v46 = *(_DWORD *)(a4 + 192);
      v47 = v42 == 31 || v44 == 31;
      if (!v47)
      {
        v48 = v42 & 0xFFE0FFFF | ((v44 & 0x1F) << 16) | 0xAA0003E0;
LABEL_57:
        if (v45 + 4 > v46)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v20, (uint64_t)v21, v22, v23, v24, v25, v26);
          v45 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v45) = v48;
        *(_DWORD *)(a4 + 200) += 4;
        v33 = (char *)__dst;
        v34 = HIDWORD(v117);
        goto LABEL_60;
      }
    }
    v48 = (char)v42 | (32 * v44) | 0x91000000;
    goto LABEL_57;
  }
  v30 = &v109;
LABEL_66:
  if (!*(_BYTE *)(a4 + 212))
  {
    v20 = (JSC::RegisterSet *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/Macro"
                              "AssemblerARM64.h";
    v21 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v22 = 192;
    __break(0xC471u);
    goto LABEL_101;
  }
  v63 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(a4 + 264) + 208) &= ~*(_DWORD *)(a4 + 288);
  v64 = *(_BYTE *)(a4 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, v63, v64, v22, v23, v24, v25, v26);
  *(_DWORD *)(a4 + 208) = 0;
  LODWORD(v10) = (32 * (v64 & 0x1F)) | 0xD63F0000;
  v9 = a4 + 56;
  v66 = *(_DWORD *)(a4 + 200);
  if (v66 + 4 > *(_DWORD *)(a4 + 192))
    goto LABEL_102;
  while (1)
  {
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v66) = v10;
    v67 = *(_DWORD *)(a4 + 200);
    v68 = v67 + 4;
    *(_DWORD *)(a4 + 200) = v67 + 4;
    v69 = *(unsigned __int8 *)(a1 + 64);
    if (*(_BYTE *)(a1 + 64))
    {
      if (v69 == 31)
        v70 = -1862270945;
      else
        v70 = v69 | 0xAA0003E0;
      if ((v67 + 8) > *(_DWORD *)(a4 + 192))
      {
        v65 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, (uint64_t)v20, (uint64_t)v21, v22, v23, v24, v25, v26).n128_u64[0];
        v68 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v68) = v70;
      *(_DWORD *)(a4 + 200) += 4;
    }
    JSC::AssemblyHelpers::emitExceptionCheck(a4, *(_QWORD *)a2, 1, 0, 0xFFFFFFFFLL, v24, v25, v26, (uint64_t)v113, v65);
    JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCallWithThrownException(a2, (uint64_t *)&v114, v71, v72, v73, v74, v75, v76);
    for (LODWORD(v10) = *(_DWORD *)(a4 + 200); (int)v10 < *(_DWORD *)(a4 + 52); *(_DWORD *)(a4 + 200) = v10)
    {
      if ((v10 + 4) > *(_DWORD *)(a4 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, v77, v78, v79, v80, v81, v82, v83);
        LODWORD(v10) = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v10) = -721215457;
      LODWORD(v10) = *(_DWORD *)(a4 + 200) + 4;
    }
    v84 = v10;
    if ((v10 + 4) > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, v77, v78, v79, v80, v81, v82, v83);
      v84 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v84) = 335544320;
    *(_DWORD *)(a4 + 200) += 4;
    if (*(_BYTE *)(a4 + 328))
      v85 = 69;
    else
      v85 = 65;
    v108 = v10;
    v109 = 0;
    v110 = v85;
    v111 = 15;
    v112 = -1;
    if ((_DWORD)v10 != -1)
    {
      v86 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v86 == *(_DWORD *)(a9 + 8))
      {
        v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v86 + 1), (unint64_t)&v108, v79, v80, v81, v82, v83);
        v30 = v87 + 1;
        v88 = *(_QWORD *)a9 + 12 * *(unsigned int *)(a9 + 12);
        *(_DWORD *)v88 = *v87;
      }
      else
      {
        v88 = *(_QWORD *)a9 + 12 * v86;
        *(_DWORD *)v88 = v10;
      }
      *(_QWORD *)(v88 + 4) = *(_QWORD *)v30;
      ++*(_DWORD *)(a9 + 12);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v113, a4, v78, v79, v80, v81, v82, v83);
    v107[1] = 0;
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0)
      break;
LABEL_101:
    __break(1u);
LABEL_102:
    v65 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, (uint64_t)v20, (uint64_t)v21, v22, v23, v24, v25, v26).n128_u64[0];
    v66 = *(_DWORD *)(a4 + 200);
  }
  v107[0] = 1 << *(_BYTE *)(a1 + 64);
  v89 = *(JSC::ScratchRegisterAllocator **)(a2 + 32);
  v90 = v114;
  if (v114)
  {
    v91 = 0;
    do
    {
      v91 |= v90 & -(uint64_t)v90;
      v90 &= v90 - 1;
    }
    while (v90);
  }
  else
  {
    v91 = 0;
  }
  __dst = (void *)v91;
  v117 = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v89, (JSC::AssemblyHelpers *)&__dst, (const JSC::RegisterSet *)v107, (const JSC::RegisterSet *)v115, 0, v24, v25, v26);
  for (i = *(_DWORD *)(a4 + 200); (signed int)i < *(_DWORD *)(a4 + 52); *(_DWORD *)(a4 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, v92, v93, v94, v95, v96, v97, v98);
      i = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + i) = -721215457;
    i = *(_DWORD *)(a4 + 200) + 4;
  }
  v100 = i;
  if (i + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, v92, v93, v94, v95, v96, v97, v98);
    v100 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v100) = 335544320;
  *(_DWORD *)(a4 + 200) += 4;
  if (*(_BYTE *)(a4 + 328))
    v101 = 69;
  else
    v101 = 65;
  __dst = (void *)i;
  LOBYTE(v117) = v101;
  *(_WORD *)((char *)&v117 + 1) = 15;
  BYTE3(v117) = -1;
  v106 = *(_DWORD *)(a1 + 48);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, &v106, a4, v94, v95, v96, v97, v98);
}

void JSC::MacroAssemblerARM64::load16(uint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  JSC::AssemblerBuffer *v29;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981212FCLL);
  }
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(v11 + 208);
  if ((v13 & v12) == 0)
    goto LABEL_3;
  v24 = *(_QWORD *)(a1 + 312);
  v25 = (char *)(this - v24);
  if ((_DWORD)a3 == 17)
    *(_DWORD *)(v11 + 208) = v13 & ~v12;
  if (v25 != (char *)(int)v25)
    goto LABEL_36;
  if (((_DWORD)v25 + 256) <= 0x1FF)
  {
    v26 = a3 & 0x1F | (((unsigned __int16)v25 & 0x1FF) << 12) | 0x78400220;
    v27 = *(_DWORD *)(a1 + 200);
    if (v27 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), this, a3, a4, a5, a6, a7, a8);
      v27 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v26;
    goto LABEL_9;
  }
  if (v25 > 0x1FFE || (v25 & 1) != 0)
  {
LABEL_36:
    if ((v24 ^ (unint64_t)this) >> 16)
    {
LABEL_3:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, this, 17, a4, a5, a6, a7, a8);
      if (v8 == 17)
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1981213F0);
        }
        v21 = *(_QWORD *)(a1 + 296);
        v22 = *(_DWORD *)(v21 + 208) & ~*(_DWORD *)(a1 + 320);
      }
      else
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19812131CLL);
        }
        *(_QWORD *)(a1 + 312) = this;
        v21 = *(_QWORD *)(a1 + 296);
        v22 = *(_DWORD *)(v21 + 208) | *(_DWORD *)(a1 + 320);
      }
      *(_DWORD *)(v21 + 208) = v22;
      v23 = *(_DWORD *)(a1 + 200);
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v8 & 0x1F | 0x787F6A20;
LABEL_9:
      *(_DWORD *)(a1 + 200) += 4;
      return;
    }
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (unsigned __int16)this) | 0xF2800011, a3, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198121410);
    }
    *(_QWORD *)(a1 + 312) = this;
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
    v28 = v8 & 0x1F | 0x787F6A20u;
    v29 = (JSC::AssemblerBuffer *)(a1 + 56);
  }
  else
  {
    v28 = a3 & 0x1F | (((v25 >> 1) & 0xFFF) << 10) | 0x79400220;
    v29 = (JSC::AssemblerBuffer *)(a1 + 56);
  }
  JSC::AssemblerBuffer::putInt(v29, v28, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::store16(uint64_t a1, uint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  JSC::AssemblerBuffer *v14;
  char v17;
  char v18;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981214ECLL);
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) & *(_DWORD *)(a1 + 320)) == 0)
  {
LABEL_13:
    v18 = a2;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, this, 17, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1981215ECLL);
    }
    *(_QWORD *)(a1 + 312) = this;
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
    v13 = v18 & 0x1F | 0x783F6A20u;
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(a1 + 312);
  v10 = this - v9;
  if (this - v9 != (_DWORD)this - (_DWORD)v9)
  {
LABEL_10:
    if (!((v9 ^ (unint64_t)this) >> 16))
    {
      v17 = a2;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (unsigned __int16)this) | 0xF2800011, this, a4, a5, a6, a7, a8);
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19812160CLL);
      }
      *(_QWORD *)(a1 + 312) = this;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
      v13 = v17 & 0x1F | 0x783F6A20u;
      v14 = (JSC::AssemblerBuffer *)(a1 + 56);
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (v10 + 256 > 0x1FF)
  {
    if (v10 <= 0x1FFE && (v10 & 1) == 0)
    {
      v13 = a2 & 0x1F | (((v10 >> 1) & 0xFFF) << 10) | 0x79000220;
LABEL_15:
      v14 = (JSC::AssemblerBuffer *)(a1 + 56);
LABEL_16:
      JSC::AssemblerBuffer::putInt(v14, v13, this, a4, a5, a6, a7, a8);
      return;
    }
    goto LABEL_10;
  }
  v11 = a2 & 0x1F | ((v10 & 0x1FF) << 12) | 0x78000220;
  v12 = *(_DWORD *)(a1 + 200);
  if (v12 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, this, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
  *(_DWORD *)(a1 + 200) += 4;
}

void WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;

  do
  {
    v9 = __ldaxr((unsigned int *)this);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)this));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)this);
    v11 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t *WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  WTF *v39;
  unint64_t v40;
  unint64_t v41;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      if (*(unsigned __int8 *)(v9 + 4) - 30 >= 0x53)
      {
        switch(*(_BYTE *)(v9 + 4))
        {
          case 0:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
            v40 = v9;
            std::__destroy_at[abi:sn180100]<JSC::ProxyableAccessCase,0>(v9, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_15;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_6;
          case 0x10:
            v37 = *(unsigned int **)(v9 + 24);
            v40 = v9;
            *(_QWORD *)(v9 + 24) = 0;
            if (v37)
            {
              do
              {
                v23 = __ldaxr(v37);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v37));
              if (!v24)
              {
                v32 = v37;
                atomic_store(1u, v37);
                v33 = *((_QWORD *)v32 + 1);
                *((_QWORD *)v32 + 1) = 0;
                if (v33)
                  WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree((unint64_t)v37, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            v9 = v40;
            v16 = *(unsigned int **)(v40 + 16);
            *(_QWORD *)(v40 + 16) = 0;
            if (!v16)
              goto LABEL_12;
            do
            {
              v25 = __ldaxr(v16);
              v22 = --v25 == 0;
            }
            while (__stlxr(v25, v16));
            goto LABEL_33;
          case 0x18:
            v38 = *(unsigned int **)(v9 + 24);
            v40 = v9;
            *(_QWORD *)(v9 + 24) = 0;
            if (v38)
            {
              do
              {
                v26 = __ldaxr(v38);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v38));
              if (!v27)
              {
                v34 = v38;
                atomic_store(1u, v38);
                v35 = *((_QWORD *)v34 + 1);
                *((_QWORD *)v34 + 1) = 0;
                if (v35)
                  WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            v9 = v40;
            v16 = *(unsigned int **)(v40 + 16);
            *(_QWORD *)(v40 + 16) = 0;
            if (!v16)
              goto LABEL_12;
            do
            {
              v28 = __ldaxr(v16);
              v22 = --v28 == 0;
            }
            while (__stlxr(v28, v16));
            goto LABEL_33;
          case 0x1C:
          case 0x1D:
            v36 = *(unsigned int **)(v9 + 24);
            v40 = v9;
            *(_QWORD *)(v9 + 24) = 0;
            if (v36)
            {
              do
              {
                v19 = __ldaxr(v36);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v36));
              if (!v20)
              {
                v30 = v36;
                atomic_store(1u, v36);
                v31 = *((_QWORD *)v30 + 1);
                *((_QWORD *)v30 + 1) = 0;
                if (v31)
                  WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            v9 = v40;
            v16 = *(unsigned int **)(v40 + 16);
            *(_QWORD *)(v40 + 16) = 0;
            if (!v16)
              goto LABEL_12;
            do
            {
              v21 = __ldaxr(v16);
              v22 = --v21 == 0;
            }
            while (__stlxr(v21, v16));
LABEL_33:
            v9 = v40;
            if (!v22)
              goto LABEL_12;
            atomic_store(1u, v16);
            break;
          default:
            return a1;
        }
      }
      else
      {
LABEL_6:
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr((unsigned int *)v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unsigned int *)v13));
          if (!v15)
          {
            v39 = (WTF *)v13;
            v41 = v9;
            atomic_store(1u, (unsigned int *)v13);
            v29 = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            if (v29)
              WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
            v9 = v41;
          }
        }
        v16 = *(unsigned int **)(v9 + 16);
        *(_QWORD *)(v9 + 16) = 0;
        if (!v16)
          goto LABEL_12;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (v18)
        {
LABEL_12:
          WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
          return a1;
        }
        atomic_store(1u, v16);
        v40 = v9;
      }
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
LABEL_15:
      v9 = v40;
      goto LABEL_12;
    }
  }
  return a1;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral>(WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::CacheableIdentifier *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  char v39;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (JSC::CacheableIdentifier *)a2[2];
  v9 = a2[3];
  if (*(_BYTE *)(*a2 + 32))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v11 = *(char **)v7;
    v12 = *(_QWORD *)(v7 + 8);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (v11)
    {
      v15 = v12 - 1;
      if (!v12)
        v15 = 0;
      WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v37, v14);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v37 = v22;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper(v13, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v17 = *(char **)(v7 + 16);
    v18 = *(_QWORD *)(v7 + 24);
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    if (v17)
    {
      v21 = v18 - 1;
      if (!v18)
        v21 = 0;
      WTF::StringImpl::utf8ForCharacters(v17, v21, (uint64_t)&v37, v20);
    }
    else
    {
      v23 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 0;
      *(_BYTE *)(v23 + 16) = 0;
      v37 = v23;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper(v19, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v24 = *(char **)v6;
  v25 = *(_QWORD *)(v6 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v24)
  {
    v28 = v25 - 1;
    if (!v25)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v37, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v37 = v29;
    v38 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v37);
  if (v38 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  JSC::CacheableIdentifier::dump(v8, v5);
  v30 = *(char **)v9;
  v31 = *(_QWORD *)(v9 + 8);
  v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v30)
  {
    v34 = v31 - 1;
    if (!v31)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(v30, v34, (uint64_t)&v37, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v37 = v35;
    v38 = 0;
  }
  WTF::printExpectedCStringHelper(v32, "StringView", &v37);
  if (v38 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,int>(WTF::CommaPrinter,WTF::ASCIILiteral,int const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  char v32;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (_DWORD *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v30, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v30 = v21;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v30, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v30 = v22;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v23 = *(char **)v6;
  v24 = *(_QWORD *)(v6 + 8);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v23)
  {
    v27 = v24 - 1;
    if (!v24)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v27, (uint64_t)&v30, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v30 = v28;
    v31 = 0;
  }
  WTF::printExpectedCStringHelper(v25, "StringView", &v30);
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%d", *v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::printImpl<WTF::ASCIILiteral,WTF::Indenter,WTF::ASCIILiteral,WTF::PointerDump<JSC::Structure>>(WTF::PrintStream *a1, char *a2, uint64_t a3, int *a4, uint64_t a5, unint64_t *a6)
{
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  WTF::PrintStream *v17;
  WTF *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  char *v27;
  uint64_t v28;
  WTF::PrintStream *v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  WTF::PrintStream *v34;
  uint64_t v35;
  int v36;
  char v37;

  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (a2)
  {
    v14 = a3 - 1;
    if (!a3)
      v14 = 0;
    WTF::StringImpl::utf8ForCharacters(a2, v14, (uint64_t)&v35, v13);
  }
  else
  {
    v15 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    v35 = v15;
    v36 = 0;
  }
  WTF::printExpectedCStringHelper(v12, "StringView", &v35);
  if (v36 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  v16 = *a4;
  if (*a4)
  {
    v17 = (WTF::PrintStream *)(a4 + 2);
    do
    {
      --v16;
      v18 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
      WTF::printInternal(v18, v17, v19, v20, v21, v22, v23, v24, v25, v26);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    }
    while (v16);
  }
  v27 = *(char **)a5;
  v28 = *(_QWORD *)(a5 + 8);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v27)
  {
    v31 = v28 - 1;
    if (!v28)
      v31 = 0;
    WTF::StringImpl::utf8ForCharacters(v27, v31, (uint64_t)&v35, v30);
  }
  else
  {
    v32 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v35 = v32;
    v36 = 0;
  }
  WTF::printExpectedCStringHelper(v29, "StringView", &v35);
  if (v36 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  if (*a6)
    return JSC::Structure::dump(*a6, a1);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v34, "%s", "(null)");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

void std::__destroy_at[abi:sn180100]<JSC::ProxyableAccessCase,0>(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t **v17;
  uint64_t *i;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  if (!a1)
  {
    __break(1u);
LABEL_13:
    atomic_store(1u, (unsigned int *)a1);
    v17 = (uint64_t **)(a1 + 8);
    for (i = *(uint64_t **)(a1 + 8); i != (uint64_t *)v17; i = *v17)
    {
      v20 = *i;
      v19 = (uint64_t *)i[1];
      *v19 = *i;
      *(_QWORD *)(v20 + 8) = v19;
      *i = 0;
      i[1] = 0;
    }
    WTF::fastFree(a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v8 = (_QWORD *)a1;
  a1 = *(_QWORD *)(a1 + 40);
  v8[5] = 0;
  if (a1)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)a1);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)a1));
    if (!v10)
      goto LABEL_13;
  }
LABEL_5:
  v11 = v8[3];
  v8[3] = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v21 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v21)
        WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = (unsigned int *)v8[2];
  v8[2] = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

int **JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&)::{lambda(JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>&)#1}::operator()(uint64_t a1, int a2)
{
  int **result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;

  result = (int **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = *result;
    v6 = *(unsigned int *)(a1 + 44);
    while (1)
    {
      v7 = *v5++;
      if (v7 == a2)
        break;
      if (!--v6)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    v8 = a2;
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 40))
    {
      result = (int **)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v8);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 44)) = *(_DWORD *)result;
    }
    else
    {
      (*result)[v4] = a2;
    }
    ++*(_DWORD *)(a1 + 44);
  }
  return result;
}

void JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::shrinkToFit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *(unsigned int *)(a1 + 28);
  if (*(_DWORD *)(a1 + 24) > v9)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if ((_DWORD)v9)
    {
      *(_DWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 16) = WTF::fastRealloc(v10, v9, a3, a4, a5, a6, a7, a8);
    }
    else if (v10)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v10, (void *)v9, a3, a4, a5, a6, a7, a8);
    }
  }
  v11 = *(unsigned int *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) > v11)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v11)
    {
      *(_DWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 32) = WTF::fastRealloc(v12, 4 * v11, a3, a4, a5, a6, a7, a8);
    }
    else if (v12)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v12, (void *)v9, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::VectorMover<false,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  void *v18;
  unint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (a1 != a2)
  {
    v9 = a1;
    v10 = a3 + 40;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_DWORD *)(v10 - 32) = *((_DWORD *)v9 + 2);
      *(_QWORD *)(v10 - 40) = v11;
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      v12 = *((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)(v10 - 24) = v12;
      LODWORD(v12) = *((_DWORD *)v9 + 6);
      *((_DWORD *)v9 + 6) = 0;
      *(_DWORD *)(v10 - 16) = v12;
      LODWORD(v12) = *((_DWORD *)v9 + 7);
      *((_DWORD *)v9 + 7) = 0;
      *(_DWORD *)(v10 - 12) = v12;
      *(_QWORD *)(v10 - 8) = 0;
      *(_QWORD *)v10 = 0;
      v13 = *((_QWORD *)v9 + 4);
      *((_QWORD *)v9 + 4) = 0;
      v14 = *((_DWORD *)v9 + 10);
      *((_DWORD *)v9 + 10) = 0;
      *(_DWORD *)v10 = v14;
      v15 = *((_DWORD *)v9 + 11);
      *((_DWORD *)v9 + 11) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v16 = (unint64_t *)(v10 + 8);
      *(_QWORD *)(v10 - 8) = v13;
      *(_DWORD *)(v10 + 4) = v15;
      *(_QWORD *)(v10 + 16) = 0;
      v17 = *((_QWORD *)v9 + 7);
      if ((unint64_t)(v17 + 31) >= 0x20)
      {
        v18 = (void *)WTF::fastMalloc((WTF *)(((unint64_t)(v17 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v18, *((const void **)v9 + 6), ((unint64_t)(*((_QWORD *)v9 + 7) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        if (*v16)
          WTF::fastFree(*v16, a2, a3, a4, a5, a6, a7, a8);
        *v16 = (unint64_t)v18;
        v17 = *((_QWORD *)v9 + 7);
      }
      *(_QWORD *)(v10 + 24) = 0;
      v19 = (unint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 16) = v17;
      *(_QWORD *)(v10 + 32) = 0;
      v20 = *((_QWORD *)v9 + 9);
      if ((unint64_t)(v20 + 31) >= 0x20)
      {
        v21 = (void *)WTF::fastMalloc((WTF *)(((unint64_t)(v20 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v21, *((const void **)v9 + 8), ((unint64_t)(*((_QWORD *)v9 + 9) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        if (*v19)
          WTF::fastFree(*v19, a2, a3, a4, a5, a6, a7, a8);
        *v19 = (unint64_t)v21;
        v20 = *((_QWORD *)v9 + 9);
      }
      *(_QWORD *)(v10 + 32) = v20;
      v22 = *((_QWORD *)v9 + 8);
      if (v22)
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      v23 = *((_QWORD *)v9 + 6);
      if (v23)
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      v24 = *((_QWORD *)v9 + 4);
      if (v24)
      {
        *((_QWORD *)v9 + 4) = 0;
        *((_DWORD *)v9 + 10) = 0;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      v25 = *((_QWORD *)v9 + 2);
      if (v25)
      {
        *((_QWORD *)v9 + 2) = 0;
        *((_DWORD *)v9 + 6) = 0;
        WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 80;
      v10 += 80;
    }
    while (v9 != a2);
  }
}

void WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::SpecialBlockType,unsigned long>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v7 = *(unsigned int *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v6 + 1)
    v10 = v6 + 1;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (v10 >= 0x3333334)
    {
      __break(0xC471u);
      return;
    }
    v11 = *(char **)a1;
    v12 = (char *)(*(_QWORD *)a1 + 80 * v6);
    v13 = 80 * v10;
    v14 = WTF::fastMalloc((WTF *)(80 * v10));
    *(_DWORD *)(a1 + 8) = (v13 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v14;
    WTF::VectorMover<false,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>>::move(v11, v12, v14, v15, v16, v17, v18, v19);
    if (v11)
    {
      if (*(char **)a1 == v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v11, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v27 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12);
  v28 = *a3;
  if (*a2)
    v29 = -1;
  else
    v29 = 0;
  *(int32x2_t *)v27 = vdup_n_s32(v29);
  *(_DWORD *)(v27 + 8) = v28;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  ++*(_DWORD *)(a1 + 12);
}

uint64_t WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,unsigned long>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  int v41;

  v5 = result;
  v7 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(result + 12);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v6 + 1)
    v10 = v6 + 1;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (v10 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    v11 = *(char **)result;
    v12 = (char *)(*(_QWORD *)result + 80 * v6);
    v13 = 80 * v10;
    v14 = WTF::fastMalloc((WTF *)(80 * v10));
    *(_DWORD *)(v5 + 8) = (v13 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)v5 = v14;
    WTF::VectorMover<false,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>>::move(v11, v12, v14, v15, v16, v17, v18, v19);
    if (v11)
    {
      if (*(char **)v5 == v11)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v11, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v27 = *(_DWORD *)(v5 + 12);
  v28 = *(_QWORD *)v5;
  v29 = *(_QWORD *)v5 + 80 * v27;
  v30 = *a3;
  *(_DWORD *)v29 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v29 + 8) = v30;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_DWORD *)(v29 + 4) = 0;
  v31 = (_DWORD *)(v29 + 4);
  *(_OWORD *)(v29 + 16) = 0u;
  v32 = (uint64_t *)(v29 + 16);
  v33 = (unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8));
  v34 = *v33;
  v35 = v34;
  if ((v34 | 2) == 0x82)
    v35 = v33[1];
  v36 = v34 == 128 || v34 == 130;
  v37 = JSC::opcodeLengths[v35];
  v38 = v28 + 80 * v27;
  if (v34 == 130)
    v39 = 2;
  else
    v39 = v34 == 128;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v38 + 24) = 16;
  *v32 = result;
  if (v36)
    v40 = 2;
  else
    v40 = 1;
  v41 = (v37 << v39) + v40;
  *(_BYTE *)(result + (*(_DWORD *)(v38 + 28))++) = v41;
  *v31 += v41;
  ++*(_DWORD *)(v5 + 12);
  return result;
}

void WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
    {
      v13 = a2;
      WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
      a2 = v13;
    }
    v9 = *(char **)a1;
    if (a2)
    {
      if (a2 >= 0x3333334)
      {
        __break(0xC471u);
        return;
      }
      v10 = *(_DWORD *)(a1 + 12);
      v11 = 80 * a2;
      v12 = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(a1 + 8) = (v11 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v12;
      if ((char *)v12 != v9)
        WTF::VectorMover<false,JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>>::move(v9, &v9[80 * v10], v12, a4, a5, a6, a7, a8);
    }
    if (v9)
    {
      if (*(char **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = (int)a2;
  v10 = (void *)*(unsigned int *)(a1 + 12);
  if (v10 != a2)
  {
    v11 = 80 * v10 - 80 * (_QWORD)a2;
    v12 = *(_QWORD *)a1 + 80 * (_QWORD)a2 + 32;
    do
    {
      v13 = *(_QWORD *)(v12 + 32);
      if (v13)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)(v12 + 16);
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *(_QWORD *)(v12 - 16);
      if (v16)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 80;
      v11 -= 80;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

const char *JSC::Wasm::makeString(int a1)
{
  int v1;
  const char *result;

  v1 = a1 + 50;
  result = "I32";
  switch(v1)
  {
    case 0:
      return "Rec";
    case 1:
      return "Subfinal";
    case 2:
      return "Sub";
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      goto LABEL_33;
    case 16:
      return "Array";
    case 17:
      return "Struct";
    case 18:
      return "Func";
    case 21:
      return "RefNull";
    case 22:
      return "Ref";
    case 28:
      return "Arrayref";
    case 29:
      return "Structref";
    case 30:
      return "I31ref";
    case 31:
      return "Eqref";
    case 32:
      return "Anyref";
    case 33:
      return "Externref";
    case 34:
      return "Funcref";
    case 35:
      return "Nullref";
    case 36:
      return "Nullexternref";
    case 37:
      return "Nullfuncref";
    case 45:
      return "V128";
    case 46:
      return "F64";
    case 47:
      return "F32";
    case 48:
      return "I64";
    case 49:
      return result;
    default:
      if ("I32" != -64)
      {
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x198122AE8);
      }
      return "Void";
  }
}

void JSC::BytecodeGeneratorification::run(JSC::BytecodeGeneratorification *this)
{
  int32x2_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  unint64_t v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v64;
  unint64_t v65;
  int v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned int v69;
  void **v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  char v76;
  _BOOL4 v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  uint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unint64_t v135;
  unsigned int **v136;
  unint64_t v137;
  _DWORD *v138;
  char *v139;
  _BYTE *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  int *v144;
  unint64_t v145;
  int v146;
  int v147;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  char v160;
  char *v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  char v169;
  uint64_t v170;
  BOOL v171;
  size_t v172;
  unsigned int v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int *v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  _BOOL4 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  unsigned int *v219;
  unsigned __int8 *v220;
  int v221;
  int v222;
  char v223;
  _BOOL4 v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  int v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  void *v236;
  char v237;
  size_t v238;
  unsigned int v239;
  unsigned int v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  unint64_t v266;
  _QWORD *v267;
  unsigned __int8 *v268;
  int v269;
  int v270;
  char v271;
  _BOOL4 v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  __int128 v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  char v284;
  int v285;
  char *v286;
  uint64_t v287;
  void *v288;
  char v289;
  int v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  unint64_t v295;
  WTF *v296;
  char *v297;
  char *v298;
  unint64_t v299;
  char v300;
  unint64_t v301;
  uint64_t v302;
  WTF *v303;
  int v304;
  BOOL v305;
  BOOL v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char v313;
  unint64_t v314;
  char *v315;
  int v316;
  __int128 *v317;
  int v318;
  char *v319;
  _BOOL4 v320;
  uint64_t v321;
  __int128 v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  WTF *v330;
  BOOL v331;
  int v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  char v337;
  int v338;
  char *v339;
  uint64_t v340;
  _BOOL4 v341;
  _BOOL4 v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  char v347;
  char *v348;
  unsigned int v349;
  unsigned int v350;
  char v351;
  uint64_t v352;
  char *v353;
  unsigned int v354;
  unsigned int v355;
  char v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unsigned int v363;
  unsigned int v364;
  char v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  unsigned int v374;
  unsigned int v375;
  char *v376;
  unsigned int v377;
  unsigned int v378;
  char *v379;
  unsigned int v380;
  unsigned int v381;
  char *v382;
  uint64_t v383;
  char *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  size_t v388;
  char *v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  unsigned int v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  uint64_t v399;
  void *v400;
  unint64_t v401;
  uint64_t v402;
  unsigned int v403;
  size_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  unsigned int v429;
  unsigned int v430;
  WTF *v431;
  char *v432;
  uint64_t v433;
  const void *v434;
  _DWORD *v435;
  WTF *v436;
  _QWORD *v437;
  void *v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  void *v446;
  const void *v447;
  unint64_t v448;
  const void *v449;
  size_t v450;
  void *v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  char *v460;
  unint64_t v461;
  char *v462;
  size_t v463;
  void *v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  void *v473;
  void *v474;
  void *v475;
  WTF *v476;
  WTF *v477;
  WTF *v478;
  void *v479;
  size_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  WTF *v488;
  _DWORD *v489;
  uint64_t v490;
  const void *v491;
  size_t v492;
  WTF **v493;
  _QWORD *v494;
  unsigned int *v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  unsigned int *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t **v504;
  int v506;
  size_t __n;
  WTF *v508;
  __int128 v509;
  void *__src;
  unsigned int *v511;
  void *v512;
  uint64_t v513;
  _QWORD *v514;
  WTF *v515;
  uint64_t v516;
  _BYTE v517[384];
  __int128 v518;
  unint64_t v519;
  _QWORD v520[4];
  int v521;
  char v522;

  v504 = *(uint64_t ***)(*(_QWORD *)this + 696);
  v3 = *((_QWORD *)this + 5);
  v508 = (WTF *)*((_QWORD *)this + 6);
  *(_QWORD *)&v509 = v3;
  __src = (char *)this + 56;
  LODWORD(__n) = *((_DWORD *)this + 17);
  if ((_DWORD)__n)
  {
    v4 = 0;
    v5 = *(_QWORD *)(**(_QWORD **)(v3 + 8) + 20) & 0x7FFFFFFFLL;
    v6 = v5 + 31;
    v7 = (unint64_t)(v5 + 31) >> 5;
    do
    {
      v8 = *(char **)__src;
      v9 = *(_QWORD *)__src + 80 * v4;
      v10 = v9 + 48;
      v11 = *(_QWORD *)(v9 + 56) + 31;
      if ((v11 ^ v6) >= 0x20)
      {
        if (v7 < v11 >> 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1981243B4);
        }
        v12 = v11 >> 5;
        v13 = (char *)WTF::fastMalloc((WTF *)(4 * (v6 >> 5)));
        memcpy(v13, *(const void **)v10, 4 * v12);
        bzero(&v13[4 * v12], 4 * (v7 - v12));
        if (*(_QWORD *)v10)
          WTF::fastFree(*(_QWORD *)v10, v14, v15, v16, v17, v18, v19, v20);
        *(_QWORD *)v10 = v13;
      }
      *(_QWORD *)(v10 + 8) = v5;
      v21 = &v8[80 * v4];
      v22 = v21 + 64;
      v23 = *((_QWORD *)v21 + 9) + 31;
      v24 = v5 + 31;
      if ((v23 ^ v6) >= 0x20)
      {
        if (v7 < v23 >> 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1981243D4);
        }
        v25 = v23 >> 5;
        v26 = (char *)WTF::fastMalloc((WTF *)(4 * (v6 >> 5)));
        memcpy(v26, *(const void **)v22, 4 * v25);
        bzero(&v26[4 * v25], 4 * (v7 - v25));
        if (*(_QWORD *)v22)
          WTF::fastFree(*(_QWORD *)v22, v27, v28, v29, v30, v31, v32, v33);
        *(_QWORD *)v22 = v26;
        v24 = *(_QWORD *)(v10 + 8) + 31;
      }
      *((_QWORD *)v22 + 1) = v5;
      bzero(*(void **)v10, (v24 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      bzero(*(void **)v22, ((unint64_t)(*((_QWORD *)v22 + 1) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v34 = v4 + 1;
      v4 = (v4 + 1);
    }
    while ((_DWORD)__n != v34);
    v35 = *((_DWORD *)this + 17) - 1;
  }
  else
  {
    v35 = -1;
  }
  v36 = *(_QWORD *)__src + 80 * v35;
  bzero(*(void **)(v36 + 48), ((unint64_t)(*(_QWORD *)(v36 + 56) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  bzero(*(void **)(v36 + 64), ((unint64_t)(*(_QWORD *)(v36 + 72) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v45 = *(_QWORD *)(v36 + 72);
  v46 = v45 + 31;
  if ((unint64_t)(v45 + 31) < 0x20)
  {
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v47 = (WTF *)((v46 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v48 = (void *)WTF::fastMalloc(v47);
    bzero(v48, (size_t)v47);
  }
  v49 = v46 & 0x1FFFFFFFE0;
  v50 = v46 >> 5;
  __n = 4 * (v46 >> 5);
  v51 = (v46 >> 5) - 1;
  do
  {
    v52 = *((_DWORD *)this + 17);
    if (!v52)
      break;
    v53 = 0;
    v54 = *((_QWORD *)this + 7);
    v55 = v54 + 80 * v52;
    do
    {
      v56 = v55;
      bzero(v48, (size_t)v47);
      v57 = *(unsigned int *)(v55 - 36);
      if ((_DWORD)v57 && v49)
      {
        v58 = *(unsigned int **)(v55 - 48);
        v59 = &v58[v57];
        v60 = *(char **)__src;
        do
        {
          v61 = *(_QWORD *)&v60[80 * *v58 + 48];
          v62 = v51;
          do
            *((_DWORD *)v48 + v62) |= *(_DWORD *)(v61 + 4 * v62);
          while ((unint64_t)v62--);
          ++v58;
        }
        while (v58 != v59);
      }
      if (v50 == (unint64_t)(*(_QWORD *)(v55 - 8) + 31) >> 5)
      {
        memcpy(*(void **)(v55 - 16), v48, __n);
      }
      else
      {
        v64 = (void *)WTF::fastMalloc(v47);
        memcpy(v64, v48, (size_t)v47);
        v65 = *(_QWORD *)(v56 - 16);
        if (v65)
          WTF::fastFree(v65, v37, v38, v39, v40, v41, v42, v43);
        *(_QWORD *)(v56 - 16) = v64;
      }
      v55 = v56 - 80;
      *(_QWORD *)(v56 - 8) = v45;
      v66 = *(_DWORD *)(v56 - 80);
      if (v66)
      {
        if (v66 != -1 || *(_DWORD *)(v56 - 76) != -1)
        {
LABEL_32:
          v67 = JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::UnlinkedCodeBlockGenerator,JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>((unsigned int *)v509, v508, (uint64_t)__src, v56 - 80, (4 * v66), v56 - 32, v42, v43, v44);
          goto LABEL_33;
        }
      }
      else if (*(_DWORD *)(v56 - 76))
      {
        goto LABEL_32;
      }
      v67 = 0;
LABEL_33:
      v53 |= v67;
    }
    while (v55 != v54);
  }
  while ((v53 & 1) != 0);
  if (v48)
    WTF::fastFree((unint64_t)v48, v37, v38, v39, v40, v41, v42, v43);
  v68 = (uint64_t)this;
  v69 = *((_DWORD *)this + 25);
  if (v69)
  {
    v70 = (void **)*((_QWORD *)this + 11);
    v71 = (unsigned int *)&v70[3 * v69];
    do
    {
      v72 = *(unsigned int *)v70;
      v73 = (unsigned __int8 *)(**(_QWORD **)(v68 + 48) + v72);
      v74 = *v73;
      v75 = v74;
      if ((v74 | 2) == 0x82)
        v75 = v73[1];
      v76 = v74 == 128;
      if (v74 == 130)
        v76 = 2;
      v77 = v74 == 128 || v74 == 130;
      v78 = JSC::opcodeLengths[v75] << v76;
      if (v77)
        v79 = 2;
      else
        v79 = 1;
      v80 = v79 + v72 + v78;
      v81 = v80 & 0x3FFFFFFF;
      v82 = *(unsigned int *)(v68 + 68);
      v83 = *(_QWORD *)(v68 + 56);
      if (v82 < 2)
      {
        v84 = 0;
LABEL_284:
        v85 = v83 + 80 * v84;
        v88 = *(_DWORD *)v85;
      }
      else
      {
        v84 = 0;
        while (1)
        {
          v85 = v83 + 80 * (v84 + ((v82 - 1) >> 1));
          if (*(_DWORD *)v85 == v81)
            break;
          v86 = (v82 - 1) >> 1;
          v82 -= v86 + 1;
          if (*(_DWORD *)v85 <= v81)
          {
            v87 = v86 + 1;
          }
          else
          {
            v82 = v86;
            v87 = 0;
          }
          v84 += v87;
          if (v82 <= 1)
            goto LABEL_284;
        }
        v88 = v80 & 0x3FFFFFFF;
      }
      if (v88 > v81 || *(_DWORD *)(v85 + 4) + v88 <= v81)
      {
        if (v88 > v81)
          v85 -= 80;
        else
          v85 += 80;
      }
      v511 = 0;
      v89 = *(char **)(v85 + 72);
      v90 = (unint64_t)(v89 + 31);
      if ((unint64_t)(v89 + 31) < 0x20)
      {
        v91 = 0;
        v92 = 0;
      }
      else
      {
        v91 = v90 >> 5;
        v92 = (unsigned int *)WTF::fastMalloc((WTF *)(4 * (v90 >> 5)));
        bzero(v92, 4 * (v90 >> 5));
        v511 = v92;
      }
      v512 = v89;
      JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::UnlinkedCodeBlockGenerator,JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>((unsigned int *)v509, v508, (uint64_t)__src, v85, (4 * v80), (uint64_t)&v511, v42, v43, v44);
      if (v91 == ((unint64_t)v70[2] + 31) >> 5)
      {
        memcpy(v70[1], v92, 4 * v91);
      }
      else
      {
        v93 = (void *)WTF::fastMalloc((WTF *)((v90 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v93, v92, (v90 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        v99 = (unint64_t)v70[1];
        if (v99)
          WTF::fastFree(v99, v94, v95, v96, v97, v98, v42, v43);
        v70[1] = v93;
      }
      v68 = (uint64_t)this;
      v70[2] = v89;
      if (v92)
        WTF::fastFree((unint64_t)v92, v94, v95, v96, v97, v98, v42, v43);
      v70 += 3;
    }
    while (v70 != (void **)v71);
  }
  v101 = *(_QWORD *)(v68 + 40);
  v100 = *(_QWORD **)(v68 + 48);
  v511 = *(unsigned int **)v68;
  v512 = __src;
  v513 = v101;
  v514 = v100;
  v102 = (unsigned int *)&v511;
  v515 = (WTF *)v517;
  v516 = 8;
  v103 = *(unsigned int *)(v68 + 8);
  v104 = (unsigned __int8 *)(*v100 + v103);
  v105 = *v104;
  v106 = v105;
  if ((v105 | 2) == 0x82)
    v106 = v104[1];
  if (v105 == 130)
    v107 = 2;
  else
    v107 = v105 == 128;
  v108 = v105 == 128 || v105 == 130;
  v109 = JSC::opcodeLengths[v106];
  if (v108)
    v110 = 2;
  else
    v110 = 1;
  v518 = 0uLL;
  v111 = *(unsigned int *)(v101 + 212);
  if ((_DWORD)v111 == *(_DWORD *)(v101 + 208))
  {
    v112 = WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v101 + 200, v111 + 1, (unint64_t)&v518);
    v120 = *(unsigned int *)(v101 + 212);
    v121 = *(_QWORD *)(v101 + 200) + 16 * v120;
    v122 = *(_QWORD *)v112;
    *(_QWORD *)v112 = 0;
    *(_QWORD *)v121 = v122;
    *(_DWORD *)(v121 + 8) = *(_DWORD *)(v112 + 8);
    v123 = v518;
    v124 = v120 + 1;
    *(_DWORD *)(v101 + 212) = v124;
    *(_QWORD *)&v518 = 0;
    if (v123)
    {
      WTF::fastFree(v123, v113, v114, v115, v116, v117, v118, v119);
      v124 = *(_DWORD *)(v101 + 212);
    }
  }
  else
  {
    v366 = *(_QWORD *)(v101 + 200) + 16 * v111;
    *(_QWORD *)v366 = 0;
    *(_DWORD *)(v366 + 8) = 0;
    v124 = v111 + 1;
    *(_DWORD *)(v101 + 212) = v111 + 1;
  }
  if (!v124)
  {
    __break(0xC471u);
    JUMPOUT(0x198124B7CLL);
  }
  v125 = *(_QWORD *)(v101 + 200) + 16 * v124;
  *(_DWORD *)(v125 - 8) = 0;
  v126 = *(unsigned int *)(v68 + 100) + 1;
  v134 = (unsigned int *)WTF::fastMalloc((WTF *)(4 * (*(_DWORD *)(v68 + 100) + 1) + 4));
  v137 = *(_QWORD *)(v125 - 16);
  v136 = (unsigned int **)(v125 - 16);
  v135 = v137;
  *v134 = v126;
  *v136 = v134;
  if (v137)
  {
    WTF::fastFree(v135, v127, v128, v129, v130, v131, v132, v133);
    v134 = *v136;
    v138 = *v136 + 1;
    if (v134)
    {
      v126 = *v134;
      goto LABEL_98;
    }
    v140 = 0;
    v139 = 0;
  }
  else
  {
    v138 = v134 + 1;
LABEL_98:
    v139 = (char *)&v138[v126];
    v140 = v138;
  }
  v141 = v139 - v140;
  if (v141 >= 1)
    bzero(v140, 4 * (((unint64_t)v141 >> 2) - ((unint64_t)v141 > 3)) + 4);
  if (!*v134)
  {
    __break(0xC471u);
    goto LABEL_306;
  }
  v142 = v110 + v103 + ((_DWORD)v109 << v107);
  if (!*v138)
    *v138 = v142;
  v143 = *(unsigned int *)(v68 + 100);
  if ((_DWORD)v143)
  {
    v144 = *(int **)(v68 + 88);
    v145 = 1;
    do
    {
      if (v145 >= *v134)
      {
        __break(0xC471u);
        JUMPOUT(0x19812453CLL);
      }
      v147 = *v144;
      v144 += 6;
      v146 = v147;
      if (!v138[v145])
      {
        v138[v145] = v146;
        v143 = *(unsigned int *)(v68 + 100);
      }
    }
    while (v145++ < v143);
  }
  v134 = v511;
  v149 = v511[9];
  v150 = *((_QWORD *)v511 + 5);
  LODWORD(__src) = v511[12];
  v68 = *((unsigned __int8 *)v511 + 20);
  *((_BYTE *)v511 + 20) = 0;
  v151 = v134[4];
  v134[4] = 0;
  v109 = *(_QWORD *)v134;
  v1 = *(int32x2_t *)(v134 + 2);
  *(_QWORD *)v134 = 0;
  *((_QWORD *)v134 + 1) = 0;
  v134[9] = 115;
  if ((unsigned int *)v150 != v134)
  {
    v411 = *(_DWORD *)(v150 + 12);
    if (v411)
    {
      *(_DWORD *)(v150 + 12) = 0;
      v411 = v134[3];
    }
    memcpy(*(void **)v150, 0, v411);
    *(_DWORD *)(v150 + 12) = v134[3];
  }
  v134[12] = 0;
  LOBYTE(v518) = 0;
  DWORD1(v518) = 0;
  *((_QWORD *)&v518 + 1) = 0;
  LODWORD(v519) = v142;
  if ((JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)v134, v111, (unsigned __int8 *)&v518, 7, v130, v131, v132, v133) & 1) == 0)
  {
    LOBYTE(v518) = 0;
    DWORD1(v518) = 0;
    *((_QWORD *)&v518 + 1) = 0;
    LODWORD(v519) = v142;
    if ((JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v134, v111, (unsigned __int8 *)&v518, 7, v155, v156, v157, v158) & 1) == 0)
    {
      LOBYTE(v518) = 0;
      DWORD1(v518) = 0;
      *((_QWORD *)&v518 + 1) = 0;
      LODWORD(v519) = v142;
      JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v134, v111, (unsigned __int8 *)&v518, 7, v155, v156, v157, v158);
    }
  }
  v493 = &v515;
  v160 = *((_BYTE *)v134 + 20);
  *((_BYTE *)v134 + 20) = v68;
  v102 = *(unsigned int **)v134;
  *(_QWORD *)v134 = v109;
  v111 = v134[2];
  *(_QWORD *)&v159 = *(_QWORD *)(v134 + 3);
  v134[4] = v151;
  *((int32x2_t *)v134 + 1) = v1;
  v134[9] = v149;
  v107 = *((_QWORD *)v134 + 5);
  if (v150 != v107)
  {
    v509 = v159;
    v412 = *(_DWORD *)(v107 + 12);
    v413 = *(_DWORD *)(v150 + 12);
    if (v412 > v413)
    {
      *(_DWORD *)(v107 + 12) = v413;
      v412 = v413;
    }
    else
    {
      v414 = *(_DWORD *)(v107 + 8);
      if (v413 > v414)
      {
        if (v414)
        {
          if (v412)
            *(_DWORD *)(v107 + 12) = 0;
          v473 = *(void **)v107;
          if (*(_QWORD *)v107)
          {
            *(_QWORD *)v107 = 0;
            *(_DWORD *)(v107 + 8) = 0;
            WTF::fastFree((unint64_t)v473, v152, v153, v154, v155, v156, v157, v158);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v107, (WTF *)*(unsigned int *)(v150 + 12));
        v412 = *(_DWORD *)(v107 + 12);
      }
    }
    if (v412)
    {
      memmove(*(void **)v107, *(const void **)v150, v412);
      v415 = *(unsigned int *)(v107 + 12);
    }
    else
    {
      v415 = 0;
    }
    memcpy((void *)(*(_QWORD *)v107 + v415), (const void *)(*(_QWORD *)v150 + v415), *(_QWORD *)v150 + *(unsigned int *)(v150 + 12) - (*(_QWORD *)v150 + v415));
    *(_DWORD *)(v107 + 12) = *(_DWORD *)(v150 + 12);
    *(_QWORD *)&v159 = v509;
  }
  v134[12] = __src;
  BYTE4(v518) = -1;
  LODWORD(v518) = v142;
  WORD4(v518) = 256;
  v519 = 0;
  v520[0] = v102;
  LODWORD(v520[1]) = v111;
  *(_QWORD *)((char *)&v520[1] + 4) = v159;
  BYTE4(v520[2]) = v160;
  v126 = (uint64_t)this;
  if (HIDWORD(v516) == (_DWORD)v516)
  {
    WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)&v515, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
    v367 = v520[0];
    if (v520[0])
    {
      v520[0] = 0;
      LODWORD(v520[1]) = 0;
      WTF::fastFree(v367, v152, v153, v154, v155, v156, v157, v158);
    }
  }
  else
  {
    v161 = (char *)v515 + 48 * HIDWORD(v516);
    v162 = v519;
    *(_OWORD *)v161 = v518;
    *((_QWORD *)v161 + 3) = v102;
    *((_QWORD *)v161 + 4) = 0;
    *((_QWORD *)v161 + 2) = v162;
    *((_DWORD *)v161 + 8) = v111;
    *((_DWORD *)v161 + 9) = v159;
    LODWORD(v162) = v520[2];
    v161[44] = BYTE4(v520[2]);
    *((_DWORD *)v161 + 10) = v162;
    ++HIDWORD(v516);
  }
  v163 = *((_DWORD *)this + 25);
  if (!v163)
    goto LABEL_189;
  v102 = (unsigned int *)*((_QWORD *)this + 11);
  v499 = &v520[2];
  v494 = v520;
  v495 = &v102[6 * v163];
  v1 = (int32x2_t)0x100000001;
  while (2)
  {
    v500 = *v102;
    v501 = v102;
    v134 = v511;
    v164 = *((_QWORD *)v102 + 2) + 31;
    v497 = *(_QWORD *)(v126 + 48);
    v165 = 0;
    v166 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    if (v164 >= 0x20)
    {
      v170 = 0;
      v496 = v164 >> 5;
LABEL_120:
      LODWORD(v102) = *(_DWORD *)(*((_QWORD *)v102 + 1) + 4 * v170);
      v498 = v170;
      if ((_DWORD)v102)
      {
        v107 = 32 * v170;
        goto LABEL_122;
      }
      goto LABEL_137;
    }
LABEL_138:
    v200 = v102[1];
    LODWORD(v509) = v134[9];
    v201 = (unsigned int *)*((_QWORD *)v134 + 5);
    LODWORD(__src) = v134[12];
    v202 = *((_BYTE *)v134 + 20);
    *((_BYTE *)v134 + 20) = v169;
    v203 = v134[4];
    v204 = *(_QWORD *)v134;
    *(_QWORD *)v134 = v165;
    v2 = *((_QWORD *)v134 + 1);
    v134[2] = v166;
    v134[3] = v167;
    v134[4] = v168;
    v134[9] = 115;
    if (v201 != v134)
    {
      v403 = v168;
      v404 = v167;
      if (v201[3] > v167)
      {
        v201[3] = v167;
      }
      else
      {
        v405 = v201[2];
        if (v167 > v405)
        {
          if (v201[2])
          {
            if (v201[3])
              v201[3] = 0;
            v460 = *(char **)v201;
            if (*(_QWORD *)v201)
            {
              *(_QWORD *)v201 = 0;
              v201[2] = 0;
              WTF::fastFree((unint64_t)v460, v152, v167, v154, v155, v156, v157, v158);
              v405 = v201[2];
            }
          }
          v461 = v134[3];
          if (v405 < v461)
          {
            v462 = *(char **)v201;
            v463 = v201[3];
            v464 = (void *)WTF::fastMalloc((WTF *)v134[3]);
            v201[2] = v461;
            *(_QWORD *)v201 = v464;
            memcpy(v464, v462, v463);
            if (v462)
            {
              if (*(char **)v201 == v462)
              {
                *(_QWORD *)v201 = 0;
                v201[2] = 0;
              }
              WTF::fastFree((unint64_t)v462, v465, v466, v467, v468, v469, v470, v471);
            }
          }
          v404 = v201[3];
        }
        else
        {
          v404 = v201[3];
        }
      }
      v406 = *(char **)v201;
      v407 = *(char **)v134;
      if (v404)
      {
        memmove(v406, v407, v404);
        v408 = v201[3];
        v406 = *(char **)v201;
        v407 = *(char **)v134;
      }
      else
      {
        v408 = 0;
      }
      memcpy(&v406[v408], &v407[v408], v134[3] - v408);
      v201[3] = v134[3];
      v168 = v403;
    }
    v134[12] = v168;
    v205 = (v200 - 1073741808) < 0x80;
    if (v200 <= 0x3FFFFFFF)
      v205 = (v200 + 128) < 0x90;
    v126 = (uint64_t)this;
    if (v205)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)v134, (void *)0x66, v153, v154, v155, v156, v157, v158);
      LOBYTE(v518) = 102;
      v207 = v134[3];
      v208 = v134[4];
      if (v207 > v208)
      {
        v134[4] = v208 + 1;
        *(_BYTE *)(*(_QWORD *)v134 + v208) = 102;
        v211 = v134[3];
        v212 = v134[4];
      }
      else
      {
        if ((_DWORD)v207 == v134[2])
        {
          v372 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v134, (WTF *)(v207 + 1), (unint64_t)&v518);
          v207 = v134[3];
          v209 = *(_QWORD *)v134;
          v210 = *v372;
        }
        else
        {
          v209 = *(_QWORD *)v134;
          v210 = 102;
        }
        *(_BYTE *)(v209 + v207) = v210;
        v211 = v134[3] + 1;
        v212 = v134[4] + 1;
        v134[3] = v211;
        v134[4] = v212;
      }
      v213 = v200 + 16;
      if (v200 <= 0x3FFFFFFF)
        v213 = v200;
      LOBYTE(v518) = v213;
      if (v211 > v212)
      {
        v134[4] = v212 + 1;
        *(_BYTE *)(*(_QWORD *)v134 + v212) = v213;
      }
      else
      {
        v214 = v211;
        if (v211 == v134[2])
        {
          v373 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v134, (WTF *)(v211 + 1), (unint64_t)&v518);
          v214 = v134[3];
          v215 = *(_QWORD *)v134;
          v213 = *v373;
        }
        else
        {
          v215 = *(_QWORD *)v134;
        }
        *(_BYTE *)(v215 + v214) = v213;
        *(int32x2_t *)(v134 + 3) = vadd_s32(*(int32x2_t *)(v134 + 3), v1);
      }
    }
    else if (!JSC::OpRet::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v134, v200, v153, v154, v155, v156, v157, v158))
    {
      JSC::OpRet::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v134, v200, v153, v154, v155, v156, v157, v158);
    }
    v68 = *((unsigned __int8 *)v134 + 20);
    *((_BYTE *)v134 + 20) = v202;
    v216 = *(_QWORD *)v134;
    *(_QWORD *)v134 = v204;
    v109 = v134[2];
    *(_QWORD *)&v206 = *(_QWORD *)(v134 + 3);
    v134[4] = v203;
    *((_QWORD *)v134 + 1) = v2;
    v134[9] = v509;
    v107 = *((_QWORD *)v134 + 5);
    if (v201 != (unsigned int *)v107)
    {
      v509 = v206;
      v409 = v201[3];
      if (*(unsigned int *)(v107 + 12) > v409)
      {
        *(_DWORD *)(v107 + 12) = v409;
      }
      else if (v409 > *(unsigned int *)(v107 + 8))
      {
        if (*(_DWORD *)(v107 + 8))
        {
          if (*(_DWORD *)(v107 + 12))
            *(_DWORD *)(v107 + 12) = 0;
          v472 = *(void **)v107;
          if (*(_QWORD *)v107)
          {
            *(_QWORD *)v107 = 0;
            *(_DWORD *)(v107 + 8) = 0;
            WTF::fastFree((unint64_t)v472, v152, v409, v154, v155, v156, v157, v158);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v107, (WTF *)v201[3]);
        v409 = *(unsigned int *)(v107 + 12);
      }
      else
      {
        v409 = *(unsigned int *)(v107 + 12);
      }
      if (v409)
      {
        memmove(*(void **)v107, *(const void **)v201, v409);
        v410 = *(unsigned int *)(v107 + 12);
      }
      else
      {
        v410 = 0;
      }
      memcpy((void *)(*(_QWORD *)v107 + v410), (const void *)(*(_QWORD *)v201 + v410), *(_QWORD *)v201 + v201[3] - (*(_QWORD *)v201 + v410));
      *(_DWORD *)(v107 + 12) = v201[3];
      v126 = (uint64_t)this;
      *(_QWORD *)&v206 = v509;
    }
    v134[12] = __src;
    BYTE4(v518) = -1;
    LODWORD(v518) = v500;
    WORD4(v518) = 0;
    v519 = 0;
    v520[0] = v216;
    LODWORD(v520[1]) = v109;
    *(_QWORD *)((char *)&v520[1] + 4) = v206;
    BYTE4(v520[2]) = v68;
    if (HIDWORD(v516) == (_DWORD)v516)
    {
      WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)v493, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
      v360 = v520[0];
      v219 = v501;
      v111 = v497;
      if (v520[0])
      {
        v520[0] = 0;
        LODWORD(v520[1]) = 0;
        WTF::fastFree(v360, v152, v153, v154, v155, v156, v157, v158);
      }
    }
    else
    {
      v217 = (char *)v515 + 48 * HIDWORD(v516);
      v218 = v519;
      *(_OWORD *)v217 = v518;
      *((_QWORD *)v217 + 3) = v216;
      *((_QWORD *)v217 + 4) = 0;
      *((_QWORD *)v217 + 2) = v218;
      *((_DWORD *)v217 + 8) = v109;
      *((_DWORD *)v217 + 9) = v206;
      LODWORD(v218) = *(_DWORD *)v499;
      v217[44] = *((_BYTE *)v499 + 4);
      *((_DWORD *)v217 + 10) = v218;
      ++HIDWORD(v516);
      v219 = v501;
      v111 = v497;
    }
    LODWORD(v518) = v500;
    BYTE4(v518) = 2;
    WORD4(v518) = 1;
    v220 = (unsigned __int8 *)(*(_QWORD *)v111 + v500);
    v221 = *v220;
    v222 = v221;
    if ((v221 | 2) == 0x82)
      v222 = v220[1];
    v223 = v221 == 128;
    v224 = v221 == 130;
    if (v221 == 130)
      v223 = 2;
    v331 = v221 == 128;
    v225 = JSC::opcodeLengths[v222];
    v226 = v331 || v224;
    v227 = v225 << v223;
    if (v226)
      v228 = 2;
    else
      v228 = 1;
    v519 = v227 + v228;
    *v494 = 0;
    v494[1] = 0;
    *(_QWORD *)((char *)v494 + 13) = 0;
    if (HIDWORD(v516) == (_DWORD)v516)
    {
      WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)v493, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
      v361 = v520[0];
      if (v520[0])
      {
        v520[0] = 0;
        LODWORD(v520[1]) = 0;
        WTF::fastFree(v361, v152, v153, v154, v155, v156, v157, v158);
      }
    }
    else
    {
      v229 = (char *)v515 + 48 * HIDWORD(v516);
      v230 = v518;
      *((_QWORD *)v229 + 2) = v519;
      *(_OWORD *)v229 = v230;
      *((_QWORD *)v229 + 4) = 0;
      v520[0] = 0;
      *((_QWORD *)v229 + 3) = 0;
      LODWORD(v520[1]) = 0;
      *((_DWORD *)v229 + 8) = 0;
      HIDWORD(v520[1]) = 0;
      *((_DWORD *)v229 + 9) = 0;
      v231 = *(_DWORD *)v499;
      v229[44] = *((_BYTE *)v499 + 4);
      *((_DWORD *)v229 + 10) = v231;
      ++HIDWORD(v516);
    }
    v232 = *((_QWORD *)v219 + 2) + 31;
    if (v232 < 0x20)
    {
      LODWORD(v235) = 0;
      v237 = 0;
      LODWORD(v234) = 0;
      LODWORD(v233) = 0;
      v236 = 0;
    }
    else
    {
      LODWORD(v233) = 0;
      v234 = 0;
      LODWORD(v235) = 0;
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v134 = v511;
      v503 = v232 >> 5;
      do
      {
        v239 = *(_DWORD *)(*((_QWORD *)v219 + 1) + 4 * v238);
        __n = v238;
        if (v239)
        {
          v107 = 32 * v238;
          do
          {
            if ((v239 & 1) != 0)
            {
              LODWORD(v509) = v235;
              __src = v236;
              v240 = v233;
              JSC::BytecodeGeneratorification::storageForGeneratorLocal((JSC::BytecodeGeneratorification *)&v518, (JSC::VM *)v126, v504, v107, v155, v156, v157, v158);
              v245 = *(unsigned __int8 *)(*(_QWORD *)v126 + 712);
              v246 = DWORD2(v518);
              v247 = HIDWORD(v518);
              v248 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v126 + 24) + 8) + 72);
              *(_BYTE *)(v248 + 4) |= 1u;
              v249 = (*(_DWORD *)(v248 + 8) + 1);
              v250 = v509;
              *(_DWORD *)(v248 + 8) = v249;
              v68 = v134[9];
              v251 = (unsigned int *)*((_QWORD *)v134 + 5);
              LODWORD(v508) = v134[12];
              LODWORD(v252) = *((unsigned __int8 *)v134 + 20);
              *((_BYTE *)v134 + 20) = v237;
              v253 = v134[4];
              v111 = *(_QWORD *)v134;
              *(_QWORD *)v134 = __src;
              v2 = *((_QWORD *)v134 + 1);
              v134[2] = v240;
              v134[3] = v234;
              v134[4] = v250;
              v134[9] = 115;
              if (v251 != v134)
              {
                v490 = v111;
                LODWORD(v496) = (_DWORD)v252;
                LODWORD(v497) = v245;
                v396 = v247;
                LODWORD(v502) = v249;
                LODWORD(v498) = v246;
                v252 = v251;
                if (v251[3] > v234)
                {
                  v251[3] = v234;
                }
                else
                {
                  v397 = v251[2];
                  if (v234 > v397)
                  {
                    if (v251[2])
                    {
                      if (v251[3])
                        v251[3] = 0;
                      v447 = *(const void **)v251;
                      if (*(_QWORD *)v251)
                      {
                        *(_QWORD *)v251 = 0;
                        v251[2] = 0;
                        WTF::fastFree((unint64_t)v447, v241, v242, v246, v243, v244, v247, v249);
                        v397 = v251[2];
                      }
                    }
                    v448 = v134[3];
                    if (v397 < v448)
                    {
                      v449 = *(const void **)v251;
                      v450 = v251[3];
                      v451 = (void *)WTF::fastMalloc((WTF *)v134[3]);
                      v252[2] = v448;
                      *(_QWORD *)v252 = v451;
                      memcpy(v451, v449, v450);
                      if (v449)
                      {
                        if (*(const void **)v252 == v449)
                        {
                          *(_QWORD *)v252 = 0;
                          v252[2] = 0;
                        }
                        WTF::fastFree((unint64_t)v449, v452, v453, v454, v455, v456, v457, v458);
                      }
                    }
                    v234 = v252[3];
                    __src = *(void **)v134;
                  }
                  else
                  {
                    v234 = v251[3];
                  }
                }
                v398 = *(char **)v252;
                if (v234)
                {
                  memmove(v398, __src, v234);
                  v399 = v252[3];
                  v398 = *(char **)v252;
                  __src = *(void **)v134;
                }
                else
                {
                  v399 = 0;
                }
                memcpy(&v398[v399], (char *)__src + v399, v134[3] - v399);
                v251 = v252;
                v252[3] = v134[3];
                v246 = v498;
                v249 = v502;
                v250 = v509;
                v247 = v396;
                v245 = v497;
                LOBYTE(v252) = v496;
                v111 = v490;
              }
              v134[12] = v250;
              if (v245)
                v254 = 1050628;
              else
                v254 = 1074792452;
              JSC::OpGetFromScope::emit<JSC::BytecodeGenerator>((uint64_t)v134, ~(_DWORD)v107, 10, v246, v254, 0, v247, v249);
              v109 = *((unsigned __int8 *)v134 + 20);
              *((_BYTE *)v134 + 20) = (_BYTE)v252;
              v234 = v134[3];
              v235 = v134[4];
              v134[4] = v253;
              v236 = *(void **)v134;
              *(_QWORD *)v134 = v111;
              v233 = v134[2];
              *((_QWORD *)v134 + 1) = v2;
              v134[9] = v68;
              v255 = *((_QWORD *)v134 + 5);
              if (v251 != (unsigned int *)v255)
              {
                v68 = v233;
                v400 = v236;
                v111 = v235;
                v401 = v251[3];
                if (*(unsigned int *)(v255 + 12) > v401)
                {
                  *(_DWORD *)(v255 + 12) = v401;
                }
                else if (v401 > *(unsigned int *)(v255 + 8))
                {
                  if (*(_DWORD *)(v255 + 8))
                  {
                    if (*(_DWORD *)(v255 + 12))
                      *(_DWORD *)(v255 + 12) = 0;
                    v459 = *(void **)v255;
                    if (*(_QWORD *)v255)
                    {
                      *(_QWORD *)v255 = 0;
                      *(_DWORD *)(v255 + 8) = 0;
                      WTF::fastFree((unint64_t)v459, v152, v401, v154, v155, v156, v157, v158);
                    }
                  }
                  WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v255, (WTF *)v251[3]);
                  v401 = *(unsigned int *)(v255 + 12);
                }
                else
                {
                  v401 = *(unsigned int *)(v255 + 12);
                }
                if (v401)
                {
                  memmove(*(void **)v255, *(const void **)v251, v401);
                  v402 = *(unsigned int *)(v255 + 12);
                }
                else
                {
                  v402 = 0;
                }
                memcpy((void *)(*(_QWORD *)v255 + v402), (const void *)(*(_QWORD *)v251 + v402), *(_QWORD *)v251 + v251[3] - (*(_QWORD *)v251 + v402));
                *(_DWORD *)(v255 + 12) = v251[3];
                v235 = v111;
                v236 = v400;
                LODWORD(v233) = v68;
              }
              v134[12] = v508;
              v126 = (uint64_t)this;
              v237 = v109;
              if ((_QWORD)v518)
              {
                if (*(_DWORD *)v518 == 2)
                {
                  v111 = v235;
                  v109 = (uint64_t)v236;
                  v256 = v233;
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v518, (WTF::AtomStringImpl *)v152, v153, v154, v155, v156, v157, v158);
                  WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
                  LODWORD(v233) = v256;
                  v236 = (void *)v109;
                  LODWORD(v235) = v111;
                }
                else
                {
                  *(_DWORD *)v518 -= 2;
                }
              }
            }
            ++v107;
            v171 = v239 > 1;
            v239 >>= 1;
          }
          while (v171);
        }
        v238 = __n + 1;
        v219 = v501;
      }
      while (__n + 1 != v503);
    }
    LODWORD(v518) = v500;
    BYTE4(v518) = 1;
    WORD4(v518) = 0;
    v519 = 0;
    v520[0] = v236;
    v520[1] = __PAIR64__(v234, v233);
    LODWORD(v520[2]) = v235;
    BYTE4(v520[2]) = v237;
    if (HIDWORD(v516) == (_DWORD)v516)
    {
      WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)v493, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
      v362 = v520[0];
      if (v520[0])
      {
        v520[0] = 0;
        LODWORD(v520[1]) = 0;
        WTF::fastFree(v362, v152, v153, v154, v155, v156, v157, v158);
      }
    }
    else
    {
      v265 = (char *)v515 + 48 * HIDWORD(v516);
      v266 = v519;
      *(_OWORD *)v265 = v518;
      *((_QWORD *)v265 + 3) = v236;
      *((_QWORD *)v265 + 4) = 0;
      *((_QWORD *)v265 + 2) = v266;
      *((_DWORD *)v265 + 8) = v233;
      *((_DWORD *)v265 + 9) = v234;
      LODWORD(v266) = *(_DWORD *)v499;
      v265[44] = *((_BYTE *)v499 + 4);
      *((_DWORD *)v265 + 10) = v266;
      ++HIDWORD(v516);
    }
    v102 = v219 + 6;
    if (v102 != v495)
      continue;
    break;
  }
LABEL_189:
  if (!*(_BYTE *)(v126 + 32))
    goto LABEL_209;
  v267 = *(_QWORD **)(v126 + 48);
  LODWORD(v518) = *(_DWORD *)(v126 + 12);
  v110 = v518;
  BYTE4(v518) = 2;
  WORD4(v518) = 1;
  v268 = (unsigned __int8 *)(*v267 + v518);
  v269 = *v268;
  v270 = v269;
  if ((v269 | 2) == 0x82)
    v270 = v268[1];
  v271 = v269 == 128;
  if (v269 == 130)
    v271 = 2;
  v272 = v269 == 128 || v269 == 130;
  v273 = (unint64_t)JSC::opcodeLengths[v270] << v271;
  v331 = !v272;
  v274 = 1;
  if (!v331)
    v274 = 2;
  memset(v520, 0, 21);
  v519 = v273 + v274;
  if (HIDWORD(v516) == (_DWORD)v516)
  {
    WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)v493, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
    v368 = v520[0];
    if (v520[0])
    {
      v520[0] = 0;
      LODWORD(v520[1]) = 0;
      WTF::fastFree(v368, v152, v153, v154, v155, v156, v157, v158);
    }
  }
  else
  {
    v275 = (char *)v515 + 48 * HIDWORD(v516);
    v276 = v518;
    *((_QWORD *)v275 + 2) = v519;
    *(_OWORD *)v275 = v276;
    *((_QWORD *)v275 + 4) = 0;
    v520[0] = 0;
    *((_QWORD *)v275 + 3) = 0;
    LODWORD(v520[1]) = 0;
    *((_DWORD *)v275 + 8) = 0;
    HIDWORD(v520[1]) = 0;
    *((_DWORD *)v275 + 9) = 0;
    v277 = v520[2];
    v275[44] = BYTE4(v520[2]);
    *((_DWORD *)v275 + 10) = v277;
    ++HIDWORD(v516);
  }
  v103 = (uint64_t)v511;
  if (*(_DWORD *)(**(_QWORD **)(v126 + 104) + 16) == -1)
  {
    if (*(_BYTE *)(v126 + 32))
    {
      v332 = *(_DWORD *)(v126 + 16);
      v333 = *(unsigned int *)(v126 + 28);
      v334 = v511[9];
      v335 = *((_QWORD *)v511 + 5);
      v336 = v511[12];
      v337 = *((_BYTE *)v511 + 20);
      *((_BYTE *)v511 + 20) = 0;
      v338 = *(_DWORD *)(v103 + 16);
      *(_DWORD *)(v103 + 16) = 0;
      v339 = *(char **)v103;
      v340 = *(_QWORD *)(v103 + 8);
      *(_QWORD *)v103 = 0;
      *(_QWORD *)(v103 + 8) = 0;
      *(_DWORD *)(v103 + 36) = 115;
      if (v335 != v103)
      {
        v421 = v334;
        v422 = v336;
        v423 = *(_DWORD *)(v335 + 12);
        if (v423)
        {
          *(_DWORD *)(v335 + 12) = 0;
          v423 = *(_DWORD *)(v103 + 12);
        }
        memcpy(*(void **)v335, 0, v423);
        *(_DWORD *)(v335 + 12) = *(_DWORD *)(v103 + 12);
        v336 = v422;
        v334 = v421;
      }
      *(_DWORD *)(v103 + 48) = 0;
      v341 = (v332 - 1073741808) < 0x80;
      if (v332 <= 0x3FFFFFFF)
        v341 = (v332 + 128) < 0x90;
      if (!v341)
        goto LABEL_271;
      v342 = (v333 - 1073741808) < 0x80;
      if ((int)v333 <= 0x3FFFFFFF)
        v342 = (v333 + 128) < 0x90;
      if (v342)
      {
        v343 = *(_QWORD *)(v103 + 40);
        LODWORD(v344) = *(_DWORD *)(v103 + 12);
        v345 = *(_DWORD *)(v103 + 16);
        if (v343 == v103)
        {
          v346 = *(_DWORD *)(v103 + 16);
        }
        else
        {
          LODWORD(v509) = v334;
          LODWORD(__src) = v336;
          v429 = *(_DWORD *)(v343 + 12);
          if (v429 > v344)
          {
            *(_DWORD *)(v343 + 12) = v344;
          }
          else
          {
            v430 = *(_DWORD *)(v343 + 8);
            if (v344 > v430)
            {
              if (v430)
              {
                if (v429)
                  *(_DWORD *)(v343 + 12) = 0;
                v476 = *(WTF **)v343;
                if (*(_QWORD *)v343)
                {
                  *(_QWORD *)v343 = 0;
                  *(_DWORD *)(v343 + 8) = 0;
                  WTF::fastFree((unint64_t)v476, v152, v153, v154, v155, v156, v157, v158);
                  v430 = *(_DWORD *)(v343 + 8);
                }
              }
              if (v430 < *(_DWORD *)(v103 + 12))
              {
                v477 = (WTF *)*(unsigned int *)(v103 + 12);
                v478 = *(WTF **)v343;
                __n = *(unsigned int *)(v343 + 12);
                v508 = v478;
                v506 = (int)v477;
                v479 = (void *)WTF::fastMalloc(v477);
                v480 = __n;
                *(_DWORD *)(v343 + 8) = v506;
                *(_QWORD *)v343 = v479;
                memcpy(v479, v508, v480);
                if (v508)
                {
                  v488 = v508;
                  if (*(WTF **)v343 == v508)
                  {
                    *(_QWORD *)v343 = 0;
                    *(_DWORD *)(v343 + 8) = 0;
                  }
                  WTF::fastFree((unint64_t)v488, v481, v482, v483, v484, v485, v486, v487);
                }
              }
              LODWORD(v344) = *(_DWORD *)(v343 + 12);
            }
            else
            {
              LODWORD(v344) = *(_DWORD *)(v343 + 12);
            }
          }
          v431 = *(WTF **)v343;
          v432 = *(char **)v103;
          if ((_DWORD)v344)
          {
            memmove(v431, v432, v344);
            v433 = *(unsigned int *)(v343 + 12);
            v431 = *(WTF **)v343;
            v432 = *(char **)v103;
          }
          else
          {
            v433 = 0;
          }
          memcpy((char *)v431 + v433, &v432[v433], *(unsigned int *)(v103 + 12) - v433);
          *(_DWORD *)(v343 + 12) = *(_DWORD *)(v103 + 12);
          LODWORD(v344) = *(_DWORD *)(v103 + 12);
          v346 = *(_DWORD *)(v103 + 16);
          v336 = __src;
          v334 = v509;
        }
        *(_DWORD *)(v103 + 48) = v345;
        v347 = -113;
        *(_DWORD *)(v103 + 36) = 143;
        LOBYTE(v518) = -113;
        if (v344 > v346)
        {
          *(_DWORD *)(v103 + 16) = v346 + 1;
          *(_BYTE *)(*(_QWORD *)v103 + v346) = -113;
          v349 = *(_DWORD *)(v103 + 12);
          v350 = *(_DWORD *)(v103 + 16);
        }
        else
        {
          v344 = v344;
          if ((_DWORD)v344 == *(_DWORD *)(v103 + 8))
          {
            v374 = v336;
            v375 = v334;
            v376 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, (WTF *)(v344 + 1), (unint64_t)&v518);
            v334 = v375;
            v336 = v374;
            v344 = *(unsigned int *)(v103 + 12);
            v348 = *(char **)v103;
            v347 = *v376;
          }
          else
          {
            v348 = *(char **)v103;
          }
          v348[v344] = v347;
          v349 = *(_DWORD *)(v103 + 12) + 1;
          v350 = *(_DWORD *)(v103 + 16) + 1;
          *(_DWORD *)(v103 + 12) = v349;
          *(_DWORD *)(v103 + 16) = v350;
        }
        v351 = v332 + 16;
        if (v332 <= 0x3FFFFFFF)
          v351 = v332;
        LOBYTE(v518) = v351;
        if (v349 > v350)
        {
          *(_DWORD *)(v103 + 16) = v350 + 1;
          *(_BYTE *)(*(_QWORD *)v103 + v350) = v351;
          v354 = *(_DWORD *)(v103 + 12);
          v355 = *(_DWORD *)(v103 + 16);
        }
        else
        {
          v352 = v349;
          if (v349 == *(_DWORD *)(v103 + 8))
          {
            v377 = v336;
            v378 = v334;
            v379 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, (WTF *)(v349 + 1), (unint64_t)&v518);
            v334 = v378;
            v336 = v377;
            v352 = *(unsigned int *)(v103 + 12);
            v353 = *(char **)v103;
            v351 = *v379;
          }
          else
          {
            v353 = *(char **)v103;
          }
          v353[v352] = v351;
          v354 = *(_DWORD *)(v103 + 12) + 1;
          v355 = *(_DWORD *)(v103 + 16) + 1;
          *(_DWORD *)(v103 + 12) = v354;
          *(_DWORD *)(v103 + 16) = v355;
        }
        v356 = v333 + 16;
        if ((int)v333 <= 0x3FFFFFFF)
          v356 = v333;
        LOBYTE(v518) = v356;
        if (v354 > v355)
        {
          *(_DWORD *)(v103 + 16) = v355 + 1;
          *(_BYTE *)(*(_QWORD *)v103 + v355) = v356;
        }
        else
        {
          v357 = v354;
          if (v354 == *(_DWORD *)(v103 + 8))
          {
            v380 = v336;
            v381 = v334;
            v382 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, (WTF *)(v354 + 1), (unint64_t)&v518);
            v334 = v381;
            v336 = v380;
            v357 = *(unsigned int *)(v103 + 12);
            v358 = *(char **)v103;
            v356 = *v382;
          }
          else
          {
            v358 = *(char **)v103;
          }
          v358[v357] = v356;
          *(int32x2_t *)(v103 + 12) = vadd_s32(*(int32x2_t *)(v103 + 12), (int32x2_t)0x100000001);
        }
      }
      else
      {
LABEL_271:
        v363 = v336;
        v364 = v334;
        v365 = JSC::OpMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v103, v332, v333, v154, v155, v156, v157, v158);
        v334 = v364;
        v336 = v363;
        if ((v365 & 1) == 0)
        {
          JSC::OpMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v103, v332, v333, v154, v155, v156, v157, v158);
          v334 = v364;
          v336 = v363;
        }
      }
      v289 = *(_BYTE *)(v103 + 20);
      *(_BYTE *)(v103 + 20) = v337;
      v290 = *(_DWORD *)(v103 + 16);
      *(_DWORD *)(v103 + 16) = v338;
      v291 = *(char **)v103;
      *(_QWORD *)v103 = v339;
      v292 = *(_QWORD *)(v103 + 8);
      *(_QWORD *)(v103 + 8) = v340;
      *(_DWORD *)(v103 + 36) = v334;
      v359 = *(_QWORD *)(v103 + 40);
      if (v335 != v359)
      {
        v424 = v336;
        v425 = *(_DWORD *)(v359 + 12);
        v426 = *(_DWORD *)(v335 + 12);
        if (v425 > v426)
        {
          *(_DWORD *)(v359 + 12) = v426;
          v425 = v426;
        }
        else
        {
          v427 = *(_DWORD *)(v359 + 8);
          if (v426 > v427)
          {
            if (v427)
            {
              if (v425)
                *(_DWORD *)(v359 + 12) = 0;
              v475 = *(void **)v359;
              if (*(_QWORD *)v359)
              {
                *(_QWORD *)v359 = 0;
                *(_DWORD *)(v359 + 8) = 0;
                WTF::fastFree((unint64_t)v475, v152, v153, v154, v155, v156, v157, v158);
              }
            }
            WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v359, (WTF *)*(unsigned int *)(v335 + 12));
            v425 = *(_DWORD *)(v359 + 12);
          }
        }
        if (v425)
        {
          memmove(*(void **)v359, *(const void **)v335, v425);
          v428 = *(unsigned int *)(v359 + 12);
        }
        else
        {
          v428 = 0;
        }
        memcpy((void *)(*(_QWORD *)v359 + v428), (const void *)(*(_QWORD *)v335 + v428), *(_QWORD *)v335 + *(unsigned int *)(v335 + 12) - (*(_QWORD *)v335 + v428));
        *(_DWORD *)(v359 + 12) = *(_DWORD *)(v335 + 12);
        v336 = v424;
      }
      *(_DWORD *)(v103 + 48) = v336;
      goto LABEL_207;
    }
LABEL_306:
    __break(1u);
LABEL_307:
    JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v134, 0xAu, v110, v126, v68, v109, v103, v111);
LABEL_130:
    v169 = *((_BYTE *)v134 + 20);
    *((_BYTE *)v134 + 20) = __n;
    v167 = v134[3];
    v168 = v134[4];
    v134[4] = v503;
    v165 = *(_QWORD *)v134;
    *(_QWORD *)v134 = v502;
    v166 = v134[2];
    *((_QWORD *)v134 + 1) = v2;
    v134[9] = v508;
    v189 = *((_QWORD *)v134 + 5);
    if (__src != (void *)v189)
    {
      v392 = v167;
      v393 = v168;
      v394 = *((unsigned int *)__src + 3);
      if (*(unsigned int *)(v189 + 12) > v394)
      {
        *(_DWORD *)(v189 + 12) = v394;
      }
      else if (v394 > *(unsigned int *)(v189 + 8))
      {
        if (*(_DWORD *)(v189 + 8))
        {
          if (*(_DWORD *)(v189 + 12))
            *(_DWORD *)(v189 + 12) = 0;
          v446 = *(void **)v189;
          if (*(_QWORD *)v189)
          {
            *(_QWORD *)v189 = 0;
            *(_DWORD *)(v189 + 8) = 0;
            WTF::fastFree((unint64_t)v446, v152, v394, v154, v155, v156, v157, v158);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v189, (WTF *)*((unsigned int *)__src + 3));
        v394 = *(unsigned int *)(v189 + 12);
      }
      else
      {
        v394 = *(unsigned int *)(v189 + 12);
      }
      if (v394)
      {
        memmove(*(void **)v189, *(const void **)__src, v394);
        v395 = *(unsigned int *)(v189 + 12);
      }
      else
      {
        v395 = 0;
      }
      memcpy((void *)(*(_QWORD *)v189 + v395), (const void *)(*(_QWORD *)__src + v395), *(_QWORD *)__src + *((unsigned int *)__src + 3) - (*(_QWORD *)__src + v395));
      *(_DWORD *)(v189 + 12) = *((_DWORD *)__src + 3);
      v168 = v393;
      v167 = v392;
    }
    v134[12] = v509;
    if ((_QWORD)v518)
    {
      if (*(_DWORD *)v518 == 2)
      {
        v190 = v168;
        v191 = v167;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v518, (WTF::AtomStringImpl *)v152, v153, v154, v155, v156, v157, v158);
        WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
        v167 = v191;
        v168 = v190;
      }
      else
      {
        *(_DWORD *)v518 -= 2;
      }
    }
    while (1)
    {
      ++v107;
      v171 = v102 > 1;
      LODWORD(v102) = v102 >> 1;
      if (!v171)
        break;
LABEL_122:
      if ((v102 & 1) != 0)
      {
        v172 = v167;
        v173 = v168;
        JSC::BytecodeGeneratorification::storageForGeneratorLocal((JSC::BytecodeGeneratorification *)&v518, this, v504, v107, v155, v156, v157, v158);
        v181 = v173;
        v182 = *(unsigned __int8 *)(*(_QWORD *)this + 712);
        v183 = *((_DWORD *)this + 28);
        v185 = DWORD2(v518);
        v184 = HIDWORD(v518);
        LODWORD(v508) = v134[9];
        v186 = (unsigned int *)*((_QWORD *)v134 + 5);
        LODWORD(v509) = v134[12];
        LODWORD(__n) = *((unsigned __int8 *)v134 + 20);
        *((_BYTE *)v134 + 20) = v169;
        LODWORD(v503) = v134[4];
        v502 = *(_QWORD *)v134;
        *(_QWORD *)v134 = v165;
        v2 = *((_QWORD *)v134 + 1);
        v134[2] = v166;
        v134[3] = v172;
        v134[4] = v173;
        v134[9] = 115;
        __src = v186;
        if (v186 != v134)
        {
          v386 = v185;
          v387 = v184;
          if (*((unsigned int *)__src + 3) > v172)
          {
            *((_DWORD *)__src + 3) = v172;
          }
          else
          {
            v388 = *((unsigned int *)__src + 2);
            if (v172 > v388)
            {
              if (*((_DWORD *)__src + 2))
              {
                if (*((_DWORD *)__src + 3))
                  *((_DWORD *)__src + 3) = 0;
                v434 = *(const void **)__src;
                if (*(_QWORD *)__src)
                {
                  v435 = __src;
                  *(_QWORD *)__src = 0;
                  v435[2] = 0;
                  WTF::fastFree((unint64_t)v434, v174, v175, v176, v177, v178, v179, v180);
                  v388 = v435[2];
                }
              }
              v436 = (WTF *)v134[3];
              if (v388 < (unint64_t)v436)
              {
                v437 = __src;
                v491 = *(const void **)__src;
                v492 = *((unsigned int *)__src + 3);
                v438 = (void *)WTF::fastMalloc(v436);
                *((_DWORD *)__src + 2) = (_DWORD)v436;
                *v437 = v438;
                memcpy(v438, v491, v492);
                if (v491)
                {
                  if (*(const void **)__src == v491)
                  {
                    v489 = __src;
                    *(_QWORD *)__src = 0;
                    v489[2] = 0;
                  }
                  WTF::fastFree((unint64_t)v491, v439, v440, v441, v442, v443, v444, v445);
                }
              }
              v172 = *((unsigned int *)__src + 3);
            }
            else
            {
              v172 = *((unsigned int *)__src + 3);
            }
          }
          v389 = *(char **)__src;
          v390 = *(char **)v134;
          if (v172)
          {
            memmove(v389, v390, v172);
            v391 = *((unsigned int *)__src + 3);
            v389 = *(char **)__src;
            v390 = *(char **)v134;
          }
          else
          {
            v391 = 0;
          }
          memcpy(&v389[v391], &v390[v391], v134[3] - v391);
          *((_DWORD *)__src + 3) = v134[3];
          v181 = v173;
          v184 = v387;
          v185 = v386;
        }
        v109 = (v183 - 0x40000000);
        v134[12] = v181;
        v126 = ~(_DWORD)v107;
        if (v182)
          v68 = 1050628;
        else
          v68 = 1074792452;
        v187 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v134 + 3) + 8) + 72);
        *(_BYTE *)(v187 + 4) |= 1u;
        v188 = *(_QWORD *)(v187 + 16);
        v111 = *(unsigned int *)(v188 + 108);
        *(_DWORD *)(v188 + 108) = v111 + 1;
        v110 = v185;
        v103 = v184;
        if ((JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)v134, 10, v185, ~(_DWORD)v107, v68, v109, v184, v111) & 1) != 0|| (JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v134, 10, v110, ~(_DWORD)v107, v68, v109, v103, v111) & 1) != 0)
        {
          goto LABEL_130;
        }
        goto LABEL_307;
      }
    }
LABEL_137:
    v170 = v498 + 1;
    v102 = v501;
    if (v498 + 1 != v496)
      goto LABEL_120;
    goto LABEL_138;
  }
  if (!*(_BYTE *)(v126 + 32))
    goto LABEL_306;
  __src = (void *)v110;
  v278 = *(_DWORD *)(v126 + 16);
  v279 = *(unsigned int *)(v126 + 20);
  v281 = *(unsigned int *)(v126 + 24);
  v280 = *(unsigned int *)(v126 + 28);
  v282 = v511[9];
  v283 = *((_QWORD *)v511 + 5);
  LODWORD(v509) = v511[12];
  v284 = *((_BYTE *)v511 + 20);
  *((_BYTE *)v511 + 20) = 0;
  v285 = *(_DWORD *)(v103 + 16);
  *(_DWORD *)(v103 + 16) = 0;
  v286 = *(char **)v103;
  v287 = *(_QWORD *)(v103 + 8);
  *(_QWORD *)v103 = 0;
  *(_QWORD *)(v103 + 8) = 0;
  *(_DWORD *)(v103 + 36) = 115;
  if (v283 != v103)
  {
    v416 = *(_DWORD *)(v283 + 12);
    if (v416)
    {
      *(_DWORD *)(v283 + 12) = 0;
      v416 = *(_DWORD *)(v103 + 12);
    }
    memcpy(*(void **)v283, 0, v416);
    *(_DWORD *)(v283 + 12) = *(_DWORD *)(v103 + 12);
  }
  *(_DWORD *)(v103 + 48) = 0;
  if ((JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v103, v278, v279, v281, v280, v156, v157, v158) & 1) == 0&& (JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v103, v278, v279, v281, v280, v156, v157, v158) & 1) == 0)
  {
    JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v103, v278, v279, v281, v280, v156, v157, v158);
  }
  v289 = *(_BYTE *)(v103 + 20);
  *(_BYTE *)(v103 + 20) = v284;
  v290 = *(_DWORD *)(v103 + 16);
  *(_DWORD *)(v103 + 16) = v285;
  v291 = *(char **)v103;
  *(_QWORD *)v103 = v286;
  v292 = *(_QWORD *)(v103 + 8);
  *(_QWORD *)(v103 + 8) = v287;
  *(_DWORD *)(v103 + 36) = v282;
  v293 = *(_QWORD *)(v103 + 40);
  if (v283 != v293)
  {
    v417 = *(_DWORD *)(v293 + 12);
    v418 = *(_DWORD *)(v283 + 12);
    if (v417 > v418)
    {
      *(_DWORD *)(v293 + 12) = v418;
      v417 = v418;
    }
    else
    {
      v419 = *(_DWORD *)(v293 + 8);
      if (v418 > v419)
      {
        if (v419)
        {
          if (v417)
            *(_DWORD *)(v293 + 12) = 0;
          v474 = *(void **)v293;
          if (*(_QWORD *)v293)
          {
            *(_QWORD *)v293 = 0;
            *(_DWORD *)(v293 + 8) = 0;
            WTF::fastFree((unint64_t)v474, v288, v153, v154, v155, v156, v157, v158);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v293, (WTF *)*(unsigned int *)(v283 + 12));
        v417 = *(_DWORD *)(v293 + 12);
      }
    }
    if (v417)
    {
      memmove(*(void **)v293, *(const void **)v283, v417);
      v420 = *(unsigned int *)(v293 + 12);
    }
    else
    {
      v420 = 0;
    }
    memcpy((void *)(*(_QWORD *)v293 + v420), (const void *)(*(_QWORD *)v283 + v420), *(_QWORD *)v283 + *(unsigned int *)(v283 + 12) - (*(_QWORD *)v283 + v420));
    *(_DWORD *)(v293 + 12) = *(_DWORD *)(v283 + 12);
  }
  *(_DWORD *)(v103 + 48) = v509;
  LODWORD(v110) = (_DWORD)__src;
LABEL_207:
  LODWORD(v518) = v110;
  BYTE4(v518) = 1;
  WORD4(v518) = 0;
  v519 = 0;
  v520[0] = v291;
  v520[1] = v292;
  LODWORD(v520[2]) = v290;
  BYTE4(v520[2]) = v289;
  if (HIDWORD(v516) == (_DWORD)v516)
  {
    WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>((uint64_t)v493, (unint64_t)&v518, v153, v154, v155, v156, v157, v158);
    v371 = v520[0];
    if (v520[0])
    {
      v520[0] = 0;
      LODWORD(v520[1]) = 0;
      WTF::fastFree(v371, v369, v370, v154, v155, v156, v157, v158);
    }
  }
  else
  {
    v294 = (char *)v515 + 48 * HIDWORD(v516);
    v295 = v519;
    *(_OWORD *)v294 = v518;
    *((_QWORD *)v294 + 2) = v295;
    *((_QWORD *)v294 + 3) = v291;
    *((_QWORD *)v294 + 4) = v292;
    LODWORD(v295) = v520[2];
    v294[44] = BYTE4(v520[2]);
    *((_DWORD *)v294 + 10) = v295;
    ++HIDWORD(v516);
  }
LABEL_209:
  v296 = v515;
  v297 = (char *)v515 + 48 * HIDWORD(v516);
  v298 = (char *)v515 + 72;
  do
  {
    v299 = 0xAAAAAAAAAAAAAAABLL * ((v297 - (char *)v296) >> 4);
    if (v299 < 2)
      break;
    v300 = 0;
    v301 = 0xAAAAAAAAAAAAAAABLL * ((v297 - (char *)v296) >> 4);
LABEL_212:
    v302 = 48 * v299;
    v303 = v296;
    do
    {
      --v301;
      v304 = *(_DWORD *)((char *)v303 + v302 - 48);
      v154 = *(unsigned int *)((char *)v303 + v302 - 96);
      v305 = *((char *)v303 + v302 - 44) < *((char *)v303 + v302 - 92);
      v331 = v304 == (_DWORD)v154;
      v306 = v304 < (int)v154;
      if (!v331)
        v305 = v306;
      if (v305)
      {
        v307 = (char *)v303 + 48 * v299;
        v518 = *((_OWORD *)v307 - 3);
        v519 = *((_QWORD *)v307 - 4);
        v308 = *((_QWORD *)v307 - 3);
        v521 = *((_DWORD *)v307 - 2);
        v522 = *(v307 - 4);
        *((_OWORD *)v307 - 3) = *((_OWORD *)v307 - 6);
        v309 = *((_QWORD *)v307 - 9);
        *((_QWORD *)v307 - 4) = *((_QWORD *)v307 - 10);
        *((_QWORD *)v307 - 3) = v309;
        *(v307 - 4) = *(v307 - 52);
        *((_DWORD *)v307 - 2) = *((_DWORD *)v307 - 14);
        v310 = v519;
        *((_OWORD *)v307 - 6) = v518;
        *((_QWORD *)v307 - 10) = v310;
        *((_QWORD *)v307 - 9) = v308;
        v311 = *((_QWORD *)v307 - 2);
        *((_QWORD *)v307 - 2) = *((_QWORD *)v307 - 8);
        *((_QWORD *)v307 - 8) = v311;
        LODWORD(v308) = v521;
        *(v307 - 52) = v522;
        *((_DWORD *)v307 - 14) = v308;
        v300 = 1;
        v299 = v301;
        if (v301 > 1)
          goto LABEL_212;
        goto LABEL_221;
      }
      v303 = (WTF *)((char *)v303 - 48);
    }
    while (v301 > 1);
    if ((v300 & 1) == 0)
      break;
LABEL_221:
    v296 = (WTF *)((char *)v296 + 48);
    v312 = 0xAAAAAAAAAAAAAAABLL * ((v297 - (char *)v296) >> 4);
    if (v312 < 2)
      break;
    v313 = 0;
    v314 = v312 - 1;
    v315 = v298;
    do
    {
      v317 = (__int128 *)(v315 + 24);
      v316 = *((_DWORD *)v315 + 6);
      v319 = v315 - 24;
      v318 = *((_DWORD *)v315 - 6);
      v154 = *(v315 - 20);
      v331 = v316 == v318;
      v320 = v316 < v318;
      if (v331)
        v320 = v315[28] < (int)v154;
      if (v320)
      {
        v518 = *v317;
        v519 = *((_QWORD *)v315 + 5);
        v321 = *((_QWORD *)v315 + 6);
        v521 = *((_DWORD *)v315 + 16);
        v522 = v315[68];
        *v317 = *(_OWORD *)v319;
        *((_QWORD *)v315 + 5) = *((_QWORD *)v315 - 1);
        *((_QWORD *)v315 + 6) = *(_QWORD *)v315;
        v315[68] = v315[20];
        *((_DWORD *)v315 + 16) = *((_DWORD *)v315 + 4);
        v322 = v518;
        *((_QWORD *)v315 - 1) = v519;
        *(_OWORD *)v319 = v322;
        *(_QWORD *)v315 = v321;
        *(_QWORD *)&v322 = *((_QWORD *)v315 + 7);
        *((_QWORD *)v315 + 7) = *((_QWORD *)v315 + 1);
        *((_QWORD *)v315 + 1) = v322;
        LODWORD(v321) = v521;
        v315[20] = v522;
        *((_DWORD *)v315 + 4) = v321;
        v313 = 1;
      }
      v315 += 48;
      --v314;
    }
    while (v314);
    v297 -= 48;
    v298 += 48;
  }
  while ((v313 & 1) != 0);
  JSC::UnlinkedCodeBlockGenerator::applyModification(v513, (JSC::BytecodeRewriter *)&v511, (uint64_t)v514, v154, v155, v156, v157, v158);
  v330 = v515;
  if (HIDWORD(v516))
  {
    v383 = 48 * HIDWORD(v516);
    v384 = (char *)v515 + 24;
    do
    {
      v385 = *(_QWORD *)v384;
      if (*(_QWORD *)v384)
      {
        *(_QWORD *)v384 = 0;
        *((_DWORD *)v384 + 2) = 0;
        WTF::fastFree(v385, v323, v324, v325, v326, v327, v328, v329);
      }
      v384 += 48;
      v383 -= 48;
    }
    while (v383);
    v330 = v515;
  }
  v331 = v517 == (_BYTE *)v330 || v330 == 0;
  if (!v331)
  {
    v515 = 0;
    LODWORD(v516) = 0;
    WTF::fastFree((unint64_t)v330, v323, v324, v325, v326, v327, v328, v329);
  }
}

void JSC::performGeneratorification(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF::PrintStream *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::PrintStream *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36[15];

  if (byte_1ECF4C276)
  {
    v17 = (WTF *)WTF::dataLog<char [88],char [2]>("Bytecodes before generatorification", "\n");
    v18 = (WTF::PrintStream *)WTF::dataFile(v17);
    v36[0] = 0;
    JSC::CodeBlockBytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::dumpBlock((uint64_t)a2, a3, v18);
    WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::~HashMap(v36, v19, v20, v21, v22, v23, v24, v25);
  }
  JSC::BytecodeGeneratorification::BytecodeGeneratorification((uint64_t)v36, a1, a2, (uint64_t)a3, a4, a5);
  JSC::BytecodeGeneratorification::run((JSC::BytecodeGeneratorification *)v36);
  if (byte_1ECF4C276)
  {
    v26 = (WTF *)WTF::dataLog<char [88],char [2]>("Bytecodes after generatorification", "\n");
    v27 = (WTF::PrintStream *)WTF::dataFile(v26);
    v35 = 0;
    JSC::CodeBlockBytecodeDumper<JSC::UnlinkedCodeBlockGenerator>::dumpBlock((uint64_t)a2, a3, v27);
    WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::~HashMap(&v35, v28, v29, v30, v31, v32, v33, v34);
  }
  JSC::BytecodeGeneratorification::~BytecodeGeneratorification((JSC::BytecodeGeneratorification *)v36, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t **WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::~HashMap(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;

  v9 = *a1;
  if (*a1)
  {
    v10 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      do
      {
        v13 = *v11;
        v11 += 8;
        v12 = v13;
        v14 = v13 & 0xFFFFFFFF8;
        v15 = (v13 & 0xFFFFFFFF8) != 0;
        if ((v13 & 1) != 0 && (v15 & (v12 >> 1) & 1) == 0 && v14)
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((unint64_t)(v9 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::BytecodeIndex::dump(JSC::BytecodeIndex *this, WTF::PrintStream *a2)
{
  int v4;
  WTF::PrintStream *v5;
  uint64_t result;
  int v7;
  WTF::PrintStream *v8;

  v4 = *(_DWORD *)this >> 2;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "bc#");
  WTF::PrintStream::printf(v5, "%u", v4);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *(_DWORD *)this & 3;
  if (v7)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", "cp#");
    WTF::PrintStream::printf(v8, "%u", v7);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

JSC::BytecodeIntrinsicRegistry *JSC::BytecodeIntrinsicRegistry::BytecodeIntrinsicRegistry(JSC::BytecodeIntrinsicRegistry *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::AtomStringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::AtomStringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF::AtomStringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF::AtomStringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WTF::AtomStringImpl *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WTF::AtomStringImpl *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::AtomStringImpl *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  WTF::AtomStringImpl *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  WTF::AtomStringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF::AtomStringImpl *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF::AtomStringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF::AtomStringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::AtomStringImpl *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  WTF::AtomStringImpl *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  WTF::AtomStringImpl *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF::AtomStringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  WTF::AtomStringImpl *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  WTF::AtomStringImpl *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  WTF::AtomStringImpl *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  WTF::AtomStringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::AtomStringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  WTF::AtomStringImpl *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  WTF::AtomStringImpl *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  WTF::AtomStringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  WTF::AtomStringImpl *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  WTF::AtomStringImpl *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  WTF::AtomStringImpl *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  WTF::AtomStringImpl *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  WTF::AtomStringImpl *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  WTF::AtomStringImpl *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  WTF::AtomStringImpl *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  WTF::AtomStringImpl *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  WTF::AtomStringImpl *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  WTF::AtomStringImpl *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  WTF::AtomStringImpl *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  WTF::AtomStringImpl *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  WTF::AtomStringImpl *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  WTF::AtomStringImpl *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  WTF::AtomStringImpl *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  WTF::AtomStringImpl *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  WTF::AtomStringImpl *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  WTF::AtomStringImpl *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  WTF::AtomStringImpl *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  WTF::AtomStringImpl *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  WTF::AtomStringImpl *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  WTF::AtomStringImpl *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  WTF::AtomStringImpl *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  WTF::AtomStringImpl *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  WTF::AtomStringImpl *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  WTF::AtomStringImpl *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  WTF::AtomStringImpl *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  WTF::AtomStringImpl *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  WTF::AtomStringImpl *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  WTF::AtomStringImpl *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  WTF::AtomStringImpl *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  WTF::AtomStringImpl *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  WTF::AtomStringImpl *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  WTF::AtomStringImpl *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  WTF::AtomStringImpl *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  WTF::AtomStringImpl *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  WTF::AtomStringImpl *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  WTF::AtomStringImpl *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  WTF::AtomStringImpl *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  WTF::AtomStringImpl *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  WTF::AtomStringImpl *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  WTF::AtomStringImpl *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  WTF::AtomStringImpl *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  WTF::AtomStringImpl *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  WTF::AtomStringImpl *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  WTF::AtomStringImpl *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  WTF::AtomStringImpl *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  WTF::AtomStringImpl *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  WTF::AtomStringImpl *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  WTF::AtomStringImpl *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  WTF::AtomStringImpl *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  WTF::AtomStringImpl *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  WTF::AtomStringImpl *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  WTF::AtomStringImpl *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  WTF::AtomStringImpl *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  WTF::AtomStringImpl *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  WTF::AtomStringImpl *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  WTF::AtomStringImpl *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  WTF::AtomStringImpl *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  WTF::AtomStringImpl *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  WTF::AtomStringImpl *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  WTF::AtomStringImpl *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  WTF::AtomStringImpl *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  WTF::AtomStringImpl *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  WTF::AtomStringImpl *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  WTF::AtomStringImpl *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  WTF::AtomStringImpl *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  WTF::AtomStringImpl *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  WTF::AtomStringImpl *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  WTF::AtomStringImpl *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  WTF::AtomStringImpl *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  WTF::AtomStringImpl *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  WTF::AtomStringImpl *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  WTF::AtomStringImpl *v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  WTF::AtomStringImpl *v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  WTF::AtomStringImpl *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  WTF::AtomStringImpl *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  WTF::AtomStringImpl *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  WTF::AtomStringImpl *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  WTF::AtomStringImpl *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  WTF::AtomStringImpl *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  WTF::AtomStringImpl *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  WTF::AtomStringImpl *v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  WTF::AtomStringImpl *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  WTF::AtomStringImpl *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  WTF::AtomStringImpl *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  WTF::AtomStringImpl *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  WTF::AtomStringImpl *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  WTF::AtomStringImpl *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  WTF::AtomStringImpl *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  WTF::AtomStringImpl *v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  WTF::AtomStringImpl *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  WTF::AtomStringImpl *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  WTF::AtomStringImpl *v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  WTF::AtomStringImpl *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  WTF::AtomStringImpl *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  WTF::AtomStringImpl *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  WTF::AtomStringImpl *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  WTF::AtomStringImpl *v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  WTF::AtomStringImpl *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  WTF::AtomStringImpl *v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  WTF::AtomStringImpl *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  WTF::AtomStringImpl *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  WTF::AtomStringImpl *v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  WTF::AtomStringImpl *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  WTF::AtomStringImpl *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  WTF::AtomStringImpl *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  WTF::AtomStringImpl *v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  WTF::AtomStringImpl *v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  WTF::AtomStringImpl *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  WTF::AtomStringImpl *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  WTF::AtomStringImpl *v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  WTF::AtomStringImpl *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  WTF::AtomStringImpl *v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  WTF::AtomStringImpl *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  WTF::AtomStringImpl *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  WTF::AtomStringImpl *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  WTF::AtomStringImpl *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  WTF::AtomStringImpl *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  WTF::AtomStringImpl *v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  WTF::AtomStringImpl *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  WTF::AtomStringImpl *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  WTF::AtomStringImpl *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  WTF::AtomStringImpl *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  WTF::AtomStringImpl *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  WTF::AtomStringImpl *v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  WTF::AtomStringImpl *v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  WTF::AtomStringImpl *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  WTF::AtomStringImpl *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  WTF::AtomStringImpl *v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  WTF::AtomStringImpl *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  WTF::AtomStringImpl *v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  WTF::AtomStringImpl *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  WTF::AtomStringImpl *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  WTF::AtomStringImpl *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  WTF::AtomStringImpl *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  WTF::AtomStringImpl *v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  WTF::AtomStringImpl *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  WTF::AtomStringImpl *v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  WTF::AtomStringImpl *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  WTF::AtomStringImpl *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  WTF::AtomStringImpl *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  WTF::AtomStringImpl *v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  WTF::AtomStringImpl *v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  WTF::AtomStringImpl *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  WTF::AtomStringImpl *v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  WTF::AtomStringImpl *v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  WTF::AtomStringImpl *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  WTF::AtomStringImpl *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  WTF::AtomStringImpl *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  WTF::AtomStringImpl *v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  WTF::AtomStringImpl *v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  WTF::AtomStringImpl *v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  WTF::AtomStringImpl *v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  WTF::AtomStringImpl *v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  WTF::AtomStringImpl *v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  WTF::AtomStringImpl *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  WTF::AtomStringImpl *v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  WTF::AtomStringImpl *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  WTF::AtomStringImpl *v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  WTF::AtomStringImpl *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  WTF::AtomStringImpl *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  WTF::AtomStringImpl *v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  WTF::AtomStringImpl *v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  WTF::AtomStringImpl *v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  WTF::AtomStringImpl *v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  WTF::AtomStringImpl *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  WTF::AtomStringImpl *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  WTF::AtomStringImpl *v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  WTF::AtomStringImpl *v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  WTF::AtomStringImpl *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  WTF::AtomStringImpl *v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  WTF::AtomStringImpl *v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  WTF::AtomStringImpl *v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  WTF::AtomStringImpl *v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  WTF::AtomStringImpl *v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  WTF::AtomStringImpl *v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  WTF::AtomStringImpl *v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  WTF::AtomStringImpl *v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  WTF::AtomStringImpl *v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  WTF::AtomStringImpl *v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  WTF::AtomStringImpl *v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  WTF::AtomStringImpl *v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  WTF::AtomStringImpl *v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  WTF::AtomStringImpl *v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  WTF::AtomStringImpl *v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  WTF::AtomStringImpl *v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  WTF::AtomStringImpl *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  WTF::AtomStringImpl *v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  WTF::AtomStringImpl *v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  WTF::AtomStringImpl *v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  WTF::AtomStringImpl *v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  WTF::AtomStringImpl *v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  WTF::AtomStringImpl *v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  WTF::AtomStringImpl *v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  WTF::AtomStringImpl *v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  WTF::AtomStringImpl *v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  WTF::AtomStringImpl *v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  WTF::AtomStringImpl *v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  WTF::AtomStringImpl *v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  WTF::AtomStringImpl *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  WTF::AtomStringImpl *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  WTF::AtomStringImpl *v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  WTF::AtomStringImpl *v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  WTF::AtomStringImpl *v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  WTF::AtomStringImpl *v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  WTF::AtomStringImpl *v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  WTF::AtomStringImpl *v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  WTF::AtomStringImpl *v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  WTF::AtomStringImpl *v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  WTF::AtomStringImpl *v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  WTF::AtomStringImpl *v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  WTF::AtomStringImpl *v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  WTF::AtomStringImpl *v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  WTF::AtomStringImpl *v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  WTF::AtomStringImpl *v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  WTF::AtomStringImpl *v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  WTF::AtomStringImpl *v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  WTF::AtomStringImpl *v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  WTF::AtomStringImpl *v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  WTF::AtomStringImpl *v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  WTF::AtomStringImpl *v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  WTF::AtomStringImpl *v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  WTF::AtomStringImpl *v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  WTF::AtomStringImpl *v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  WTF::AtomStringImpl *v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  WTF::AtomStringImpl *v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  WTF::AtomStringImpl *v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  WTF::AtomStringImpl *v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  WTF::AtomStringImpl *v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  WTF::AtomStringImpl *v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  WTF::AtomStringImpl *v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  WTF::AtomStringImpl *v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  WTF::AtomStringImpl *v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  WTF::AtomStringImpl *v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  WTF::AtomStringImpl *v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  WTF::AtomStringImpl *v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  WTF::AtomStringImpl *v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  WTF::AtomStringImpl *v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  WTF::AtomStringImpl *v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  WTF::AtomStringImpl *v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  WTF::AtomStringImpl *v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  WTF::AtomStringImpl *v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  WTF::AtomStringImpl *v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  WTF::AtomStringImpl *v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  WTF::AtomStringImpl *v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  WTF::AtomStringImpl *v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  WTF::AtomStringImpl *v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  WTF::AtomStringImpl *v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  WTF::AtomStringImpl *v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  WTF::AtomStringImpl *v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  WTF::AtomStringImpl *v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  WTF::AtomStringImpl *v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  WTF::AtomStringImpl *v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  WTF::AtomStringImpl *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  WTF::AtomStringImpl *v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  WTF::AtomStringImpl *v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  WTF::AtomStringImpl *v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  WTF::AtomStringImpl *v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  WTF::AtomStringImpl *v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  WTF::AtomStringImpl *v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  WTF::AtomStringImpl *v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t v2199;
  uint64_t v2200;
  WTF::AtomStringImpl *v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  WTF::AtomStringImpl *v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  WTF::AtomStringImpl *v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  WTF::AtomStringImpl *v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  WTF::AtomStringImpl *v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  WTF::AtomStringImpl *v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  WTF::AtomStringImpl *v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  WTF::AtomStringImpl *v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  WTF::AtomStringImpl *v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  WTF::AtomStringImpl *v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  WTF::AtomStringImpl *v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  WTF::AtomStringImpl *v2278;
  uint64_t v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  WTF::AtomStringImpl *v2285;
  uint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  WTF::AtomStringImpl *v2292;
  uint64_t v2293;
  uint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  WTF::AtomStringImpl *v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  uint64_t v2304;
  uint64_t v2305;
  WTF::AtomStringImpl *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  WTF::AtomStringImpl *v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  WTF::AtomStringImpl *v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  WTF::AtomStringImpl *v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  WTF::AtomStringImpl *v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  WTF::AtomStringImpl *v2341;
  uint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  WTF::AtomStringImpl *v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  WTF::AtomStringImpl *v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  WTF::AtomStringImpl *v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  WTF::AtomStringImpl *v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  WTF::AtomStringImpl *v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  WTF::AtomStringImpl *v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  WTF::AtomStringImpl *v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  WTF::AtomStringImpl *v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  WTF::AtomStringImpl *v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  WTF::AtomStringImpl *v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  WTF::AtomStringImpl *v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  WTF::AtomStringImpl *v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  WTF::AtomStringImpl *v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  WTF::AtomStringImpl *v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  WTF::AtomStringImpl *v2446;
  unint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  _QWORD *v2453;
  uint64_t v2454;
  _QWORD *v2455;
  uint64_t *v2456;
  _QWORD *v2457;
  uint64_t v2458;
  _QWORD *v2459;
  uint64_t *v2460;
  _QWORD *v2461;
  uint64_t v2462;
  _QWORD *v2463;
  uint64_t *v2464;
  _QWORD *v2465;
  uint64_t v2466;
  _QWORD *v2467;
  uint64_t *v2468;
  _QWORD *v2469;
  uint64_t v2470;
  _QWORD *v2471;
  uint64_t *v2472;
  _QWORD *v2473;
  uint64_t v2474;
  _QWORD *v2475;
  uint64_t *v2476;
  _QWORD *v2477;
  uint64_t v2478;
  _QWORD *v2479;
  uint64_t *v2480;
  _QWORD *v2481;
  uint64_t v2482;
  _QWORD *v2483;
  uint64_t *v2484;
  _QWORD *v2485;
  uint64_t v2486;
  _QWORD *v2487;
  uint64_t *v2488;
  _QWORD *v2489;
  uint64_t v2490;
  _QWORD *v2491;
  uint64_t *v2492;
  _QWORD *v2493;
  uint64_t v2494;
  _QWORD *v2495;
  uint64_t *v2496;
  _QWORD *v2497;
  uint64_t v2498;
  _QWORD *v2499;
  uint64_t *v2500;
  _QWORD *v2501;
  uint64_t v2502;
  _QWORD *v2503;
  uint64_t *v2504;
  _QWORD *v2505;
  uint64_t v2506;
  _QWORD *v2507;
  uint64_t *v2508;
  _QWORD *v2509;
  uint64_t v2510;
  _QWORD *v2511;
  uint64_t *v2512;
  _QWORD *v2513;
  uint64_t v2514;
  _QWORD *v2515;
  uint64_t *v2516;
  _QWORD *v2517;
  uint64_t v2518;
  _QWORD *v2519;
  uint64_t *v2520;
  _QWORD *v2521;
  uint64_t v2522;
  _QWORD *v2523;
  uint64_t *v2524;
  _QWORD *v2525;
  uint64_t v2526;
  _QWORD *v2527;
  uint64_t *v2528;
  _QWORD *v2529;
  uint64_t v2530;
  _QWORD *v2531;
  uint64_t *v2532;
  _QWORD *v2533;
  uint64_t v2534;
  _QWORD *v2535;
  uint64_t *v2536;
  _QWORD *v2537;
  uint64_t v2538;
  _QWORD *v2539;
  uint64_t *v2540;
  _QWORD *v2541;
  uint64_t v2542;
  _QWORD *v2543;
  uint64_t *v2544;
  _QWORD *v2545;
  uint64_t v2546;
  _QWORD *v2547;
  uint64_t *v2548;
  _QWORD *v2549;
  uint64_t v2550;
  _QWORD *v2551;
  uint64_t *v2552;
  _QWORD *v2553;
  uint64_t v2554;
  _QWORD *v2555;
  uint64_t *v2556;
  _QWORD *v2557;
  uint64_t v2558;
  _QWORD *v2559;
  uint64_t *v2560;
  _QWORD *v2561;
  uint64_t v2562;
  _QWORD *v2563;
  uint64_t *v2564;
  _QWORD *v2565;
  uint64_t v2566;
  _QWORD *v2567;
  uint64_t *v2568;
  _QWORD *v2569;
  uint64_t v2570;
  _QWORD *v2571;
  uint64_t *v2572;
  _QWORD *v2573;
  uint64_t v2574;
  _QWORD *v2575;
  uint64_t *v2576;
  _QWORD *v2577;
  uint64_t v2578;
  _QWORD *v2579;
  uint64_t *v2580;
  _QWORD *v2581;
  uint64_t v2582;
  _QWORD *v2583;
  uint64_t *v2584;
  _QWORD *v2585;
  uint64_t v2586;
  _QWORD *v2587;
  uint64_t *v2588;
  _QWORD *v2589;
  uint64_t v2590;
  _QWORD *v2591;
  uint64_t *v2592;
  _QWORD *v2593;
  uint64_t v2594;
  _QWORD *v2595;
  uint64_t *v2596;
  _QWORD *v2597;
  uint64_t v2598;
  _QWORD *v2599;
  uint64_t *v2600;
  _QWORD *v2601;
  uint64_t v2602;
  _QWORD *v2603;
  uint64_t *v2604;
  _QWORD *v2605;
  uint64_t v2606;
  _QWORD *v2607;
  uint64_t *v2608;
  _QWORD *v2609;
  uint64_t v2610;
  _QWORD *v2611;
  uint64_t *v2612;
  _QWORD *v2613;
  uint64_t v2614;
  _QWORD *v2615;
  uint64_t *v2616;
  _QWORD *v2617;
  uint64_t v2618;
  _QWORD *v2619;
  uint64_t *v2620;
  _QWORD *v2621;
  uint64_t v2622;
  _QWORD *v2623;
  uint64_t *v2624;
  _QWORD *v2625;
  uint64_t v2626;
  _QWORD *v2627;
  uint64_t *v2628;
  _QWORD *v2629;
  uint64_t v2630;
  _QWORD *v2631;
  uint64_t *v2632;
  _QWORD *v2633;
  uint64_t v2634;
  _QWORD *v2635;
  uint64_t *v2636;
  _QWORD *v2637;
  uint64_t v2638;
  _QWORD *v2639;
  uint64_t *v2640;
  _QWORD *v2641;
  uint64_t v2642;
  _QWORD *v2643;
  uint64_t *v2644;
  _QWORD *v2645;
  uint64_t v2646;
  _QWORD *v2647;
  uint64_t *v2648;
  _QWORD *v2649;
  uint64_t v2650;
  _QWORD *v2651;
  uint64_t *v2652;
  _QWORD *v2653;
  uint64_t v2654;
  _QWORD *v2655;
  uint64_t *v2656;
  _QWORD *v2657;
  uint64_t v2658;
  _QWORD *v2659;
  uint64_t *v2660;
  _QWORD *v2661;
  uint64_t v2662;
  _QWORD *v2663;
  uint64_t *v2664;
  _QWORD *v2665;
  uint64_t v2666;
  _QWORD *v2667;
  uint64_t *v2668;
  _QWORD *v2669;
  uint64_t v2670;
  _QWORD *v2671;
  uint64_t *v2672;
  _QWORD *v2673;
  uint64_t v2674;
  _QWORD *v2675;
  uint64_t *v2676;
  _QWORD *v2677;
  uint64_t v2678;
  _QWORD *v2679;
  uint64_t *v2680;
  _QWORD *v2681;
  uint64_t v2682;
  _QWORD *v2683;
  uint64_t *v2684;
  unint64_t v2686;
  void *v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  uint64_t v2691;
  uint64_t v2692;
  uint64_t v2693;
  unint64_t v2694;
  void *v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  uint64_t v2700;
  uint64_t v2701;
  unint64_t v2702;
  void *v2703;
  uint64_t v2704;
  uint64_t v2705;
  uint64_t v2706;
  uint64_t v2707;
  uint64_t v2708;
  uint64_t v2709;
  unint64_t v2710;
  void *v2711;
  uint64_t v2712;
  uint64_t v2713;
  uint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t v2717;
  unint64_t v2718;
  void *v2719;
  uint64_t v2720;
  uint64_t v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  unint64_t v2726;
  void *v2727;
  uint64_t v2728;
  uint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  unint64_t v2734;
  void *v2735;
  uint64_t v2736;
  uint64_t v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  uint64_t v2741;
  unint64_t v2742;
  void *v2743;
  uint64_t v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t v2749;
  unint64_t v2750;
  void *v2751;
  uint64_t v2752;
  uint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  uint64_t v2756;
  uint64_t v2757;
  unint64_t v2758;
  void *v2759;
  uint64_t v2760;
  uint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  unint64_t v2766;
  void *v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  uint64_t v2773;
  unint64_t v2774;
  void *v2775;
  uint64_t v2776;
  uint64_t v2777;
  uint64_t v2778;
  uint64_t v2779;
  uint64_t v2780;
  uint64_t v2781;
  unint64_t v2782;
  void *v2783;
  uint64_t v2784;
  uint64_t v2785;
  uint64_t v2786;
  uint64_t v2787;
  uint64_t v2788;
  uint64_t v2789;
  unint64_t v2790;
  void *v2791;
  uint64_t v2792;
  uint64_t v2793;
  uint64_t v2794;
  uint64_t v2795;
  uint64_t v2796;
  uint64_t v2797;
  unint64_t v2798;
  void *v2799;
  uint64_t v2800;
  uint64_t v2801;
  uint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  uint64_t v2805;
  unint64_t v2806;
  void *v2807;
  uint64_t v2808;
  uint64_t v2809;
  uint64_t v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  unint64_t v2814;
  void *v2815;
  uint64_t v2816;
  uint64_t v2817;
  uint64_t v2818;
  uint64_t v2819;
  uint64_t v2820;
  uint64_t v2821;
  unint64_t v2822;
  void *v2823;
  uint64_t v2824;
  uint64_t v2825;
  uint64_t v2826;
  uint64_t v2827;
  uint64_t v2828;
  uint64_t v2829;
  unint64_t v2830;
  void *v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  unint64_t v2838;
  void *v2839;
  uint64_t v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  uint64_t v2844;
  uint64_t v2845;
  unint64_t v2846;
  void *v2847;
  uint64_t v2848;
  uint64_t v2849;
  uint64_t v2850;
  uint64_t v2851;
  uint64_t v2852;
  uint64_t v2853;
  unint64_t v2854;
  void *v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  uint64_t v2861;
  unint64_t v2862;
  void *v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  uint64_t v2867;
  uint64_t v2868;
  uint64_t v2869;
  unint64_t v2870;
  void *v2871;
  uint64_t v2872;
  uint64_t v2873;
  uint64_t v2874;
  uint64_t v2875;
  uint64_t v2876;
  uint64_t v2877;
  unint64_t v2878;
  void *v2879;
  uint64_t v2880;
  uint64_t v2881;
  uint64_t v2882;
  uint64_t v2883;
  uint64_t v2884;
  uint64_t v2885;
  unint64_t v2886;
  void *v2887;
  uint64_t v2888;
  uint64_t v2889;
  uint64_t v2890;
  uint64_t v2891;
  uint64_t v2892;
  uint64_t v2893;
  unint64_t v2894;
  void *v2895;
  uint64_t v2896;
  uint64_t v2897;
  uint64_t v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  unint64_t v2902;
  void *v2903;
  uint64_t v2904;
  uint64_t v2905;
  uint64_t v2906;
  uint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  unint64_t v2910;
  void *v2911;
  uint64_t v2912;
  uint64_t v2913;
  uint64_t v2914;
  uint64_t v2915;
  uint64_t v2916;
  uint64_t v2917;
  unint64_t v2918;
  void *v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  unint64_t v2926;
  void *v2927;
  uint64_t v2928;
  uint64_t v2929;
  uint64_t v2930;
  uint64_t v2931;
  uint64_t v2932;
  uint64_t v2933;
  unint64_t v2934;
  void *v2935;
  uint64_t v2936;
  uint64_t v2937;
  uint64_t v2938;
  uint64_t v2939;
  uint64_t v2940;
  uint64_t v2941;
  unint64_t v2942;
  void *v2943;
  uint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  uint64_t v2947;
  uint64_t v2948;
  uint64_t v2949;
  unint64_t v2950;
  void *v2951;
  uint64_t v2952;
  uint64_t v2953;
  uint64_t v2954;
  uint64_t v2955;
  uint64_t v2956;
  uint64_t v2957;
  unint64_t v2958;
  void *v2959;
  uint64_t v2960;
  uint64_t v2961;
  uint64_t v2962;
  uint64_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  unint64_t v2966;
  void *v2967;
  uint64_t v2968;
  uint64_t v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  uint64_t v2973;
  unint64_t v2974;
  void *v2975;
  uint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  uint64_t v2980;
  uint64_t v2981;
  unint64_t v2982;
  void *v2983;
  uint64_t v2984;
  uint64_t v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  unint64_t v2990;
  void *v2991;
  uint64_t v2992;
  uint64_t v2993;
  uint64_t v2994;
  uint64_t v2995;
  uint64_t v2996;
  uint64_t v2997;
  unint64_t v2998;
  void *v2999;
  uint64_t v3000;
  uint64_t v3001;
  uint64_t v3002;
  uint64_t v3003;
  uint64_t v3004;
  uint64_t v3005;
  unint64_t v3006;
  void *v3007;
  uint64_t v3008;
  uint64_t v3009;
  uint64_t v3010;
  uint64_t v3011;
  uint64_t v3012;
  uint64_t v3013;
  unint64_t v3014;
  void *v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  uint64_t v3020;
  uint64_t v3021;
  unint64_t v3022;
  void *v3023;
  uint64_t v3024;
  uint64_t v3025;
  uint64_t v3026;
  uint64_t v3027;
  uint64_t v3028;
  uint64_t v3029;
  unint64_t v3030;
  void *v3031;
  uint64_t v3032;
  uint64_t v3033;
  uint64_t v3034;
  uint64_t v3035;
  uint64_t v3036;
  uint64_t v3037;
  unint64_t v3038;
  void *v3039;
  uint64_t v3040;
  uint64_t v3041;
  uint64_t v3042;
  uint64_t v3043;
  uint64_t v3044;
  uint64_t v3045;
  unint64_t v3046;
  void *v3047;
  uint64_t v3048;
  uint64_t v3049;
  uint64_t v3050;
  uint64_t v3051;
  uint64_t v3052;
  uint64_t v3053;
  unint64_t v3054;
  void *v3055;
  uint64_t v3056;
  uint64_t v3057;
  uint64_t v3058;
  uint64_t v3059;
  uint64_t v3060;
  uint64_t v3061;
  unint64_t v3062;
  void *v3063;
  uint64_t v3064;
  uint64_t v3065;
  uint64_t v3066;
  uint64_t v3067;
  uint64_t v3068;
  uint64_t v3069;
  unint64_t v3070;
  void *v3071;
  uint64_t v3072;
  uint64_t v3073;
  uint64_t v3074;
  uint64_t v3075;
  uint64_t v3076;
  uint64_t v3077;
  unint64_t v3078;
  void *v3079;
  uint64_t v3080;
  uint64_t v3081;
  uint64_t v3082;
  uint64_t v3083;
  uint64_t v3084;
  uint64_t v3085;
  unint64_t v3086;
  void *v3087;
  uint64_t v3088;
  uint64_t v3089;
  uint64_t v3090;
  uint64_t v3091;
  uint64_t v3092;
  uint64_t v3093;
  unint64_t v3094;
  void *v3095;
  uint64_t v3096;
  uint64_t v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  unint64_t v3102;
  void *v3103;
  uint64_t v3104;
  uint64_t v3105;
  uint64_t v3106;
  uint64_t v3107;
  uint64_t v3108;
  uint64_t v3109;
  unint64_t v3110;
  void *v3111;
  uint64_t v3112;
  uint64_t v3113;
  uint64_t v3114;
  uint64_t v3115;
  uint64_t v3116;
  uint64_t v3117;
  unint64_t v3118;
  void *v3119;
  uint64_t v3120;
  uint64_t v3121;
  uint64_t v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  unint64_t v3126;
  void *v3127;
  uint64_t v3128;
  uint64_t v3129;
  uint64_t v3130;
  uint64_t v3131;
  uint64_t v3132;
  uint64_t v3133;
  unint64_t v3134;
  void *v3135;
  uint64_t v3136;
  uint64_t v3137;
  uint64_t v3138;
  uint64_t v3139;
  uint64_t v3140;
  uint64_t v3141;
  unint64_t v3142;
  void *v3143;
  uint64_t v3144;
  uint64_t v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  uint64_t v3149;
  unint64_t v3150;
  void *v3151;
  uint64_t v3152;
  uint64_t v3153;
  uint64_t v3154;
  uint64_t v3155;
  uint64_t v3156;
  uint64_t v3157;
  unint64_t v3158;
  void *v3159;
  uint64_t v3160;
  uint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  uint64_t v3164;
  uint64_t v3165;
  unint64_t v3166;
  void *v3167;
  uint64_t v3168;
  uint64_t v3169;
  uint64_t v3170;
  uint64_t v3171;
  uint64_t v3172;
  uint64_t v3173;
  unint64_t v3174;
  void *v3175;
  uint64_t v3176;
  uint64_t v3177;
  uint64_t v3178;
  uint64_t v3179;
  uint64_t v3180;
  uint64_t v3181;
  unint64_t v3182;
  void *v3183;
  uint64_t v3184;
  uint64_t v3185;
  uint64_t v3186;
  uint64_t v3187;
  uint64_t v3188;
  uint64_t v3189;
  unint64_t v3190;
  void *v3191;
  uint64_t v3192;
  uint64_t v3193;
  uint64_t v3194;
  uint64_t v3195;
  uint64_t v3196;
  uint64_t v3197;
  unint64_t v3198;
  void *v3199;
  uint64_t v3200;
  uint64_t v3201;
  uint64_t v3202;
  uint64_t v3203;
  uint64_t v3204;
  uint64_t v3205;
  unint64_t v3206;
  void *v3207;
  uint64_t v3208;
  uint64_t v3209;
  uint64_t v3210;
  uint64_t v3211;
  uint64_t v3212;
  uint64_t v3213;
  unint64_t v3214;
  void *v3215;
  uint64_t v3216;
  uint64_t v3217;
  uint64_t v3218;
  uint64_t v3219;
  uint64_t v3220;
  uint64_t v3221;
  unint64_t v3222;
  void *v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  uint64_t v3227;
  uint64_t v3228;
  uint64_t v3229;
  unint64_t v3230;
  void *v3231;
  uint64_t v3232;
  uint64_t v3233;
  uint64_t v3234;
  uint64_t v3235;
  uint64_t v3236;
  uint64_t v3237;
  unint64_t v3238;
  void *v3239;
  uint64_t v3240;
  uint64_t v3241;
  uint64_t v3242;
  uint64_t v3243;
  uint64_t v3244;
  uint64_t v3245;
  unint64_t v3246;
  void *v3247;
  uint64_t v3248;
  uint64_t v3249;
  uint64_t v3250;
  uint64_t v3251;
  uint64_t v3252;
  uint64_t v3253;
  unint64_t v3254;
  void *v3255;
  uint64_t v3256;
  uint64_t v3257;
  uint64_t v3258;
  uint64_t v3259;
  uint64_t v3260;
  uint64_t v3261;
  unint64_t v3262;
  void *v3263;
  uint64_t v3264;
  uint64_t v3265;
  uint64_t v3266;
  uint64_t v3267;
  uint64_t v3268;
  uint64_t v3269;
  unint64_t v3270;
  void *v3271;
  uint64_t v3272;
  uint64_t v3273;
  uint64_t v3274;
  uint64_t v3275;
  uint64_t v3276;
  uint64_t v3277;
  unint64_t v3278;
  void *v3279;
  uint64_t v3280;
  uint64_t v3281;
  uint64_t v3282;
  uint64_t v3283;
  uint64_t v3284;
  uint64_t v3285;
  unint64_t v3286;
  void *v3287;
  uint64_t v3288;
  uint64_t v3289;
  uint64_t v3290;
  uint64_t v3291;
  uint64_t v3292;
  uint64_t v3293;
  unint64_t v3294;
  void *v3295;
  uint64_t v3296;
  uint64_t v3297;
  uint64_t v3298;
  uint64_t v3299;
  uint64_t v3300;
  uint64_t v3301;
  unint64_t v3302;
  void *v3303;
  uint64_t v3304;
  uint64_t v3305;
  uint64_t v3306;
  uint64_t v3307;
  uint64_t v3308;
  uint64_t v3309;
  unint64_t v3310;
  void *v3311;
  uint64_t v3312;
  uint64_t v3313;
  uint64_t v3314;
  uint64_t v3315;
  uint64_t v3316;
  uint64_t v3317;
  unint64_t v3318;
  void *v3319;
  uint64_t v3320;
  uint64_t v3321;
  uint64_t v3322;
  uint64_t v3323;
  uint64_t v3324;
  uint64_t v3325;
  unint64_t v3326;
  void *v3327;
  uint64_t v3328;
  uint64_t v3329;
  uint64_t v3330;
  uint64_t v3331;
  uint64_t v3332;
  uint64_t v3333;
  unint64_t v3334;
  void *v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t v3338;
  uint64_t v3339;
  uint64_t v3340;
  uint64_t v3341;
  unint64_t v3342;
  void *v3343;
  uint64_t v3344;
  uint64_t v3345;
  uint64_t v3346;
  uint64_t v3347;
  uint64_t v3348;
  uint64_t v3349;
  unint64_t v3350;
  void *v3351;
  uint64_t v3352;
  uint64_t v3353;
  uint64_t v3354;
  uint64_t v3355;
  uint64_t v3356;
  uint64_t v3357;
  unint64_t v3358;
  void *v3359;
  uint64_t v3360;
  uint64_t v3361;
  uint64_t v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t v3365;
  unint64_t v3366;
  void *v3367;
  uint64_t v3368;
  uint64_t v3369;
  uint64_t v3370;
  uint64_t v3371;
  uint64_t v3372;
  uint64_t v3373;
  unint64_t v3374;
  void *v3375;
  uint64_t v3376;
  uint64_t v3377;
  uint64_t v3378;
  uint64_t v3379;
  uint64_t v3380;
  uint64_t v3381;
  unint64_t v3382;
  void *v3383;
  uint64_t v3384;
  uint64_t v3385;
  uint64_t v3386;
  uint64_t v3387;
  uint64_t v3388;
  uint64_t v3389;
  unint64_t v3390;
  void *v3391;
  uint64_t v3392;
  uint64_t v3393;
  uint64_t v3394;
  uint64_t v3395;
  uint64_t v3396;
  uint64_t v3397;
  unint64_t v3398;
  void *v3399;
  uint64_t v3400;
  uint64_t v3401;
  uint64_t v3402;
  uint64_t v3403;
  uint64_t v3404;
  uint64_t v3405;
  unint64_t v3406;
  void *v3407;
  uint64_t v3408;
  uint64_t v3409;
  uint64_t v3410;
  uint64_t v3411;
  uint64_t v3412;
  uint64_t v3413;
  unint64_t v3414;
  void *v3415;
  uint64_t v3416;
  uint64_t v3417;
  uint64_t v3418;
  uint64_t v3419;
  uint64_t v3420;
  uint64_t v3421;
  unint64_t v3422;
  void *v3423;
  uint64_t v3424;
  uint64_t v3425;
  uint64_t v3426;
  uint64_t v3427;
  uint64_t v3428;
  uint64_t v3429;
  unint64_t v3430;
  void *v3431;
  uint64_t v3432;
  uint64_t v3433;
  uint64_t v3434;
  uint64_t v3435;
  uint64_t v3436;
  uint64_t v3437;
  unint64_t v3438;
  void *v3439;
  uint64_t v3440;
  uint64_t v3441;
  uint64_t v3442;
  uint64_t v3443;
  uint64_t v3444;
  uint64_t v3445;
  unint64_t v3446;
  void *v3447;
  uint64_t v3448;
  uint64_t v3449;
  uint64_t v3450;
  uint64_t v3451;
  uint64_t v3452;
  uint64_t v3453;
  unint64_t v3454;
  void *v3455;
  uint64_t v3456;
  uint64_t v3457;
  uint64_t v3458;
  uint64_t v3459;
  uint64_t v3460;
  uint64_t v3461;
  unint64_t v3462;
  void *v3463;
  uint64_t v3464;
  uint64_t v3465;
  uint64_t v3466;
  uint64_t v3467;
  uint64_t v3468;
  uint64_t v3469;
  unint64_t v3470;
  void *v3471;
  uint64_t v3472;
  uint64_t v3473;
  uint64_t v3474;
  uint64_t v3475;
  uint64_t v3476;
  uint64_t v3477;
  unint64_t v3478;
  void *v3479;
  uint64_t v3480;
  uint64_t v3481;
  uint64_t v3482;
  uint64_t v3483;
  uint64_t v3484;
  uint64_t v3485;
  unint64_t v3486;
  void *v3487;
  uint64_t v3488;
  uint64_t v3489;
  uint64_t v3490;
  uint64_t v3491;
  uint64_t v3492;
  uint64_t v3493;
  unint64_t v3494;
  void *v3495;
  uint64_t v3496;
  uint64_t v3497;
  uint64_t v3498;
  uint64_t v3499;
  uint64_t v3500;
  uint64_t v3501;
  unint64_t v3502;
  void *v3503;
  uint64_t v3504;
  uint64_t v3505;
  uint64_t v3506;
  uint64_t v3507;
  uint64_t v3508;
  uint64_t v3509;
  unint64_t v3510;
  void *v3511;
  uint64_t v3512;
  uint64_t v3513;
  uint64_t v3514;
  uint64_t v3515;
  uint64_t v3516;
  uint64_t v3517;
  unint64_t v3518;
  void *v3519;
  uint64_t v3520;
  uint64_t v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  uint64_t v3525;
  unint64_t v3526;
  void *v3527;
  uint64_t v3528;
  uint64_t v3529;
  uint64_t v3530;
  uint64_t v3531;
  uint64_t v3532;
  uint64_t v3533;
  unint64_t v3534;
  void *v3535;
  uint64_t v3536;
  uint64_t v3537;
  uint64_t v3538;
  uint64_t v3539;
  uint64_t v3540;
  uint64_t v3541;
  unint64_t v3542;
  void *v3543;
  uint64_t v3544;
  uint64_t v3545;
  uint64_t v3546;
  uint64_t v3547;
  uint64_t v3548;
  uint64_t v3549;
  unint64_t v3550;
  void *v3551;
  uint64_t v3552;
  uint64_t v3553;
  uint64_t v3554;
  uint64_t v3555;
  uint64_t v3556;
  uint64_t v3557;
  unint64_t v3558;
  void *v3559;
  uint64_t v3560;
  uint64_t v3561;
  uint64_t v3562;
  uint64_t v3563;
  uint64_t v3564;
  uint64_t v3565;
  unint64_t v3566;
  void *v3567;
  uint64_t v3568;
  uint64_t v3569;
  uint64_t v3570;
  uint64_t v3571;
  uint64_t v3572;
  uint64_t v3573;
  unint64_t v3574;
  void *v3575;
  uint64_t v3576;
  uint64_t v3577;
  uint64_t v3578;
  uint64_t v3579;
  uint64_t v3580;
  uint64_t v3581;
  unint64_t v3582;
  void *v3583;
  uint64_t v3584;
  uint64_t v3585;
  uint64_t v3586;
  uint64_t v3587;
  uint64_t v3588;
  uint64_t v3589;
  unint64_t v3590;
  void *v3591;
  uint64_t v3592;
  uint64_t v3593;
  uint64_t v3594;
  uint64_t v3595;
  uint64_t v3596;
  uint64_t v3597;
  unint64_t v3598;
  void *v3599;
  uint64_t v3600;
  uint64_t v3601;
  uint64_t v3602;
  uint64_t v3603;
  uint64_t v3604;
  uint64_t v3605;
  unint64_t v3606;
  void *v3607;
  uint64_t v3608;
  uint64_t v3609;
  uint64_t v3610;
  uint64_t v3611;
  uint64_t v3612;
  uint64_t v3613;
  unint64_t v3614;
  void *v3615;
  uint64_t v3616;
  uint64_t v3617;
  uint64_t v3618;
  uint64_t v3619;
  uint64_t v3620;
  uint64_t v3621;
  unint64_t v3622;
  void *v3623;
  uint64_t v3624;
  uint64_t v3625;
  uint64_t v3626;
  uint64_t v3627;
  uint64_t v3628;
  uint64_t v3629;
  unint64_t v3630;
  void *v3631;
  uint64_t v3632;
  uint64_t v3633;
  uint64_t v3634;
  uint64_t v3635;
  uint64_t v3636;
  uint64_t v3637;
  unint64_t v3638;
  void *v3639;
  uint64_t v3640;
  uint64_t v3641;
  uint64_t v3642;
  uint64_t v3643;
  uint64_t v3644;
  uint64_t v3645;
  unint64_t v3646;
  void *v3647;
  uint64_t v3648;
  uint64_t v3649;
  uint64_t v3650;
  uint64_t v3651;
  uint64_t v3652;
  uint64_t v3653;
  unint64_t v3654;
  void *v3655;
  uint64_t v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  uint64_t v3660;
  uint64_t v3661;
  unint64_t v3662;
  void *v3663;
  uint64_t v3664;
  uint64_t v3665;
  uint64_t v3666;
  uint64_t v3667;
  uint64_t v3668;
  uint64_t v3669;
  unint64_t v3670;
  void *v3671;
  uint64_t v3672;
  uint64_t v3673;
  uint64_t v3674;
  uint64_t v3675;
  uint64_t v3676;
  uint64_t v3677;
  unint64_t v3678;
  void *v3679;
  uint64_t v3680;
  uint64_t v3681;
  uint64_t v3682;
  uint64_t v3683;
  uint64_t v3684;
  uint64_t v3685;
  unint64_t v3686;
  void *v3687;
  uint64_t v3688;
  uint64_t v3689;
  uint64_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  uint64_t v3693;
  unint64_t v3694;
  void *v3695;
  uint64_t v3696;
  uint64_t v3697;
  uint64_t v3698;
  uint64_t v3699;
  uint64_t v3700;
  uint64_t v3701;
  unint64_t v3702;
  void *v3703;
  uint64_t v3704;
  uint64_t v3705;
  uint64_t v3706;
  uint64_t v3707;
  uint64_t v3708;
  uint64_t v3709;
  unint64_t v3710;
  void *v3711;
  uint64_t v3712;
  uint64_t v3713;
  uint64_t v3714;
  uint64_t v3715;
  uint64_t v3716;
  uint64_t v3717;
  unint64_t v3718;
  void *v3719;
  uint64_t v3720;
  uint64_t v3721;
  uint64_t v3722;
  uint64_t v3723;
  uint64_t v3724;
  uint64_t v3725;
  unint64_t v3726;
  void *v3727;
  uint64_t v3728;
  uint64_t v3729;
  uint64_t v3730;
  uint64_t v3731;
  uint64_t v3732;
  uint64_t v3733;
  unint64_t v3734;
  void *v3735;
  uint64_t v3736;
  uint64_t v3737;
  uint64_t v3738;
  uint64_t v3739;
  uint64_t v3740;
  uint64_t v3741;
  unint64_t v3742;
  void *v3743;
  uint64_t v3744;
  uint64_t v3745;
  uint64_t v3746;
  uint64_t v3747;
  uint64_t v3748;
  uint64_t v3749;
  unint64_t v3750;
  void *v3751;
  uint64_t v3752;
  uint64_t v3753;
  uint64_t v3754;
  uint64_t v3755;
  uint64_t v3756;
  uint64_t v3757;
  unint64_t v3758;
  void *v3759;
  uint64_t v3760;
  uint64_t v3761;
  uint64_t v3762;
  uint64_t v3763;
  uint64_t v3764;
  uint64_t v3765;
  unint64_t v3766;
  void *v3767;
  uint64_t v3768;
  uint64_t v3769;
  uint64_t v3770;
  uint64_t v3771;
  uint64_t v3772;
  uint64_t v3773;
  unint64_t v3774;
  void *v3775;
  uint64_t v3776;
  uint64_t v3777;
  uint64_t v3778;
  uint64_t v3779;
  uint64_t v3780;
  uint64_t v3781;
  unint64_t v3782;
  void *v3783;
  uint64_t v3784;
  uint64_t v3785;
  uint64_t v3786;
  uint64_t v3787;
  uint64_t v3788;
  uint64_t v3789;
  unint64_t v3790;
  void *v3791;
  uint64_t v3792;
  uint64_t v3793;
  uint64_t v3794;
  uint64_t v3795;
  uint64_t v3796;
  uint64_t v3797;
  unint64_t v3798;
  void *v3799;
  uint64_t v3800;
  uint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  uint64_t v3804;
  uint64_t v3805;
  unint64_t v3806;
  void *v3807;
  uint64_t v3808;
  uint64_t v3809;
  uint64_t v3810;
  uint64_t v3811;
  uint64_t v3812;
  uint64_t v3813;
  unint64_t v3814;
  void *v3815;
  uint64_t v3816;
  uint64_t v3817;
  uint64_t v3818;
  uint64_t v3819;
  uint64_t v3820;
  uint64_t v3821;
  unint64_t v3822;
  void *v3823;
  uint64_t v3824;
  uint64_t v3825;
  uint64_t v3826;
  uint64_t v3827;
  uint64_t v3828;
  uint64_t v3829;
  unint64_t v3830;
  void *v3831;
  uint64_t v3832;
  uint64_t v3833;
  uint64_t v3834;
  uint64_t v3835;
  uint64_t v3836;
  uint64_t v3837;
  unint64_t v3838;
  void *v3839;
  uint64_t v3840;
  uint64_t v3841;
  uint64_t v3842;
  uint64_t v3843;
  uint64_t v3844;
  uint64_t v3845;
  unint64_t v3846;
  void *v3847;
  uint64_t v3848;
  uint64_t v3849;
  uint64_t v3850;
  uint64_t v3851;
  uint64_t v3852;
  uint64_t v3853;
  unint64_t v3854;
  void *v3855;
  uint64_t v3856;
  uint64_t v3857;
  uint64_t v3858;
  uint64_t v3859;
  uint64_t v3860;
  uint64_t v3861;
  unint64_t v3862;
  void *v3863;
  uint64_t v3864;
  uint64_t v3865;
  uint64_t v3866;
  uint64_t v3867;
  uint64_t v3868;
  uint64_t v3869;
  unint64_t v3870;
  void *v3871;
  uint64_t v3872;
  uint64_t v3873;
  uint64_t v3874;
  uint64_t v3875;
  uint64_t v3876;
  uint64_t v3877;
  unint64_t v3878;
  void *v3879;
  uint64_t v3880;
  uint64_t v3881;
  uint64_t v3882;
  uint64_t v3883;
  uint64_t v3884;
  uint64_t v3885;
  unint64_t v3886;
  void *v3887;
  uint64_t v3888;
  uint64_t v3889;
  uint64_t v3890;
  uint64_t v3891;
  uint64_t v3892;
  uint64_t v3893;
  unint64_t v3894;
  void *v3895;
  uint64_t v3896;
  uint64_t v3897;
  uint64_t v3898;
  uint64_t v3899;
  uint64_t v3900;
  uint64_t v3901;
  unint64_t v3902;
  void *v3903;
  uint64_t v3904;
  uint64_t v3905;
  uint64_t v3906;
  uint64_t v3907;
  uint64_t v3908;
  uint64_t v3909;
  unint64_t v3910;
  void *v3911;
  uint64_t v3912;
  uint64_t v3913;
  uint64_t v3914;
  uint64_t v3915;
  uint64_t v3916;
  uint64_t v3917;
  unint64_t v3918;
  void *v3919;
  uint64_t v3920;
  uint64_t v3921;
  uint64_t v3922;
  uint64_t v3923;
  uint64_t v3924;
  uint64_t v3925;
  unint64_t v3926;
  void *v3927;
  uint64_t v3928;
  uint64_t v3929;
  uint64_t v3930;
  uint64_t v3931;
  uint64_t v3932;
  uint64_t v3933;
  unint64_t v3934;
  void *v3935;
  uint64_t v3936;
  uint64_t v3937;
  uint64_t v3938;
  uint64_t v3939;
  uint64_t v3940;
  uint64_t v3941;
  unint64_t v3942;
  void *v3943;
  uint64_t v3944;
  uint64_t v3945;
  uint64_t v3946;
  uint64_t v3947;
  uint64_t v3948;
  uint64_t v3949;
  unint64_t v3950;
  void *v3951;
  uint64_t v3952;
  uint64_t v3953;
  uint64_t v3954;
  uint64_t v3955;
  uint64_t v3956;
  uint64_t v3957;
  unint64_t v3958;
  void *v3959;
  uint64_t v3960;
  uint64_t v3961;
  uint64_t v3962;
  uint64_t v3963;
  uint64_t v3964;
  uint64_t v3965;
  unint64_t v3966;
  void *v3967;
  uint64_t v3968;
  uint64_t v3969;
  uint64_t v3970;
  uint64_t v3971;
  uint64_t v3972;
  uint64_t v3973;
  unint64_t v3974;
  void *v3975;
  uint64_t v3976;
  uint64_t v3977;
  uint64_t v3978;
  uint64_t v3979;
  uint64_t v3980;
  uint64_t v3981;
  unint64_t v3982;
  void *v3983;
  uint64_t v3984;
  uint64_t v3985;
  uint64_t v3986;
  uint64_t v3987;
  uint64_t v3988;
  uint64_t v3989;
  unint64_t v3990;
  void *v3991;
  uint64_t v3992;
  uint64_t v3993;
  uint64_t v3994;
  uint64_t v3995;
  uint64_t v3996;
  uint64_t v3997;
  unint64_t v3998;
  void *v3999;
  uint64_t v4000;
  uint64_t v4001;
  uint64_t v4002;
  uint64_t v4003;
  uint64_t v4004;
  uint64_t v4005;
  unint64_t v4006;
  void *v4007;
  uint64_t v4008;
  uint64_t v4009;
  uint64_t v4010;
  uint64_t v4011;
  uint64_t v4012;
  uint64_t v4013;
  unint64_t v4014;
  void *v4015;
  uint64_t v4016;
  uint64_t v4017;
  uint64_t v4018;
  uint64_t v4019;
  uint64_t v4020;
  uint64_t v4021;
  unint64_t v4022;
  void *v4023;
  uint64_t v4024;
  uint64_t v4025;
  uint64_t v4026;
  uint64_t v4027;
  uint64_t v4028;
  uint64_t v4029;
  unint64_t v4030;
  void *v4031;
  uint64_t v4032;
  uint64_t v4033;
  uint64_t v4034;
  uint64_t v4035;
  uint64_t v4036;
  uint64_t v4037;
  unint64_t v4038;
  void *v4039;
  uint64_t v4040;
  uint64_t v4041;
  uint64_t v4042;
  uint64_t v4043;
  uint64_t v4044;
  uint64_t v4045;
  unint64_t v4046;
  void *v4047;
  uint64_t v4048;
  uint64_t v4049;
  uint64_t v4050;
  uint64_t v4051;
  uint64_t v4052;
  uint64_t v4053;
  unint64_t v4054;
  void *v4055;
  uint64_t v4056;
  uint64_t v4057;
  uint64_t v4058;
  uint64_t v4059;
  uint64_t v4060;
  uint64_t v4061;
  unint64_t v4062;
  void *v4063;
  uint64_t v4064;
  uint64_t v4065;
  uint64_t v4066;
  uint64_t v4067;
  uint64_t v4068;
  uint64_t v4069;
  unint64_t v4070;
  void *v4071;
  uint64_t v4072;
  uint64_t v4073;
  uint64_t v4074;
  uint64_t v4075;
  uint64_t v4076;
  uint64_t v4077;
  unint64_t v4078;
  void *v4079;
  uint64_t v4080;
  uint64_t v4081;
  uint64_t v4082;
  uint64_t v4083;
  uint64_t v4084;
  uint64_t v4085;
  unint64_t v4086;
  void *v4087;
  uint64_t v4088;
  uint64_t v4089;
  uint64_t v4090;
  uint64_t v4091;
  uint64_t v4092;
  uint64_t v4093;
  unint64_t v4094;
  void *v4095;
  uint64_t v4096;
  uint64_t v4097;
  uint64_t v4098;
  uint64_t v4099;
  uint64_t v4100;
  uint64_t v4101;
  unint64_t v4102;
  void *v4103;
  uint64_t v4104;
  uint64_t v4105;
  uint64_t v4106;
  uint64_t v4107;
  uint64_t v4108;
  uint64_t v4109;
  unint64_t v4110;
  void *v4111;
  uint64_t v4112;
  uint64_t v4113;
  uint64_t v4114;
  uint64_t v4115;
  uint64_t v4116;
  uint64_t v4117;
  unint64_t v4118;
  void *v4119;
  uint64_t v4120;
  uint64_t v4121;
  uint64_t v4122;
  uint64_t v4123;
  uint64_t v4124;
  uint64_t v4125;
  unint64_t v4126;
  void *v4127;
  uint64_t v4128;
  uint64_t v4129;
  uint64_t v4130;
  uint64_t v4131;
  uint64_t v4132;
  uint64_t v4133;
  unint64_t v4134;
  void *v4135;
  uint64_t v4136;
  uint64_t v4137;
  uint64_t v4138;
  uint64_t v4139;
  uint64_t v4140;
  uint64_t v4141;
  unint64_t v4142;
  void *v4143;
  uint64_t v4144;
  uint64_t v4145;
  uint64_t v4146;
  uint64_t v4147;
  uint64_t v4148;
  uint64_t v4149;
  unint64_t v4150;
  void *v4151;
  uint64_t v4152;
  uint64_t v4153;
  uint64_t v4154;
  uint64_t v4155;
  uint64_t v4156;
  uint64_t v4157;
  unint64_t v4158;
  void *v4159;
  uint64_t v4160;
  uint64_t v4161;
  uint64_t v4162;
  uint64_t v4163;
  uint64_t v4164;
  uint64_t v4165;
  unint64_t v4166;
  void *v4167;
  uint64_t v4168;
  uint64_t v4169;
  uint64_t v4170;
  uint64_t v4171;
  uint64_t v4172;
  uint64_t v4173;
  unint64_t v4174;
  void *v4175;
  uint64_t v4176;
  uint64_t v4177;
  uint64_t v4178;
  uint64_t v4179;
  uint64_t v4180;
  uint64_t v4181;
  unint64_t v4182;
  void *v4183;
  uint64_t v4184;
  uint64_t v4185;
  uint64_t v4186;
  uint64_t v4187;
  uint64_t v4188;
  uint64_t v4189;
  unint64_t v4190;
  void *v4191;
  uint64_t v4192;
  uint64_t v4193;
  uint64_t v4194;
  uint64_t v4195;
  uint64_t v4196;
  uint64_t v4197;
  unint64_t v4198;
  void *v4199;
  uint64_t v4200;
  uint64_t v4201;
  uint64_t v4202;
  uint64_t v4203;
  uint64_t v4204;
  uint64_t v4205;
  unint64_t v4206;
  void *v4207;
  uint64_t v4208;
  uint64_t v4209;
  uint64_t v4210;
  uint64_t v4211;
  uint64_t v4212;
  uint64_t v4213;
  unint64_t v4214;
  void *v4215;
  uint64_t v4216;
  uint64_t v4217;
  uint64_t v4218;
  uint64_t v4219;
  uint64_t v4220;
  uint64_t v4221;
  unint64_t v4222;
  void *v4223;
  uint64_t v4224;
  uint64_t v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint64_t v4228;
  uint64_t v4229;
  unint64_t v4230;
  void *v4231;
  uint64_t v4232;
  uint64_t v4233;
  uint64_t v4234;
  uint64_t v4235;
  uint64_t v4236;
  uint64_t v4237;
  unint64_t v4238;
  void *v4239;
  uint64_t v4240;
  uint64_t v4241;
  uint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  uint64_t v4245;
  unint64_t v4246;
  void *v4247;
  uint64_t v4248;
  uint64_t v4249;
  uint64_t v4250;
  uint64_t v4251;
  uint64_t v4252;
  uint64_t v4253;
  unint64_t v4254;
  void *v4255;
  uint64_t v4256;
  uint64_t v4257;
  uint64_t v4258;
  uint64_t v4259;
  uint64_t v4260;
  uint64_t v4261;
  unint64_t v4262;
  void *v4263;
  uint64_t v4264;
  uint64_t v4265;
  uint64_t v4266;
  uint64_t v4267;
  uint64_t v4268;
  uint64_t v4269;
  unint64_t v4270;
  void *v4271;
  uint64_t v4272;
  uint64_t v4273;
  uint64_t v4274;
  uint64_t v4275;
  uint64_t v4276;
  uint64_t v4277;
  unint64_t v4278;
  void *v4279;
  uint64_t v4280;
  uint64_t v4281;
  uint64_t v4282;
  uint64_t v4283;
  uint64_t v4284;
  uint64_t v4285;
  unint64_t v4286;
  void *v4287;
  uint64_t v4288;
  uint64_t v4289;
  uint64_t v4290;
  uint64_t v4291;
  uint64_t v4292;
  uint64_t v4293;
  unint64_t v4294;
  void *v4295;
  uint64_t v4296;
  uint64_t v4297;
  uint64_t v4298;
  uint64_t v4299;
  uint64_t v4300;
  uint64_t v4301;
  unint64_t v4302;
  void *v4303;
  uint64_t v4304;
  uint64_t v4305;
  uint64_t v4306;
  uint64_t v4307;
  uint64_t v4308;
  uint64_t v4309;
  unint64_t v4310;
  void *v4311;
  uint64_t v4312;
  uint64_t v4313;
  uint64_t v4314;
  uint64_t v4315;
  uint64_t v4316;
  uint64_t v4317;
  unint64_t v4318;
  void *v4319;
  uint64_t v4320;
  uint64_t v4321;
  uint64_t v4322;
  uint64_t v4323;
  uint64_t v4324;
  uint64_t v4325;
  unint64_t v4326;
  void *v4327;
  uint64_t v4328;
  uint64_t v4329;
  uint64_t v4330;
  uint64_t v4331;
  uint64_t v4332;
  uint64_t v4333;
  unint64_t v4334;
  void *v4335;
  uint64_t v4336;
  uint64_t v4337;
  uint64_t v4338;
  uint64_t v4339;
  uint64_t v4340;
  uint64_t v4341;
  unint64_t v4342;
  void *v4343;
  uint64_t v4344;
  uint64_t v4345;
  uint64_t v4346;
  uint64_t v4347;
  uint64_t v4348;
  uint64_t v4349;
  unint64_t v4350;
  void *v4351;
  uint64_t v4352;
  uint64_t v4353;
  uint64_t v4354;
  uint64_t v4355;
  uint64_t v4356;
  uint64_t v4357;
  unint64_t v4358;
  void *v4359;
  uint64_t v4360;
  uint64_t v4361;
  uint64_t v4362;
  uint64_t v4363;
  uint64_t v4364;
  uint64_t v4365;
  unint64_t v4366;
  void *v4367;
  uint64_t v4368;
  uint64_t v4369;
  uint64_t v4370;
  uint64_t v4371;
  uint64_t v4372;
  uint64_t v4373;
  unint64_t v4374;
  void *v4375;
  uint64_t v4376;
  uint64_t v4377;
  uint64_t v4378;
  uint64_t v4379;
  uint64_t v4380;
  uint64_t v4381;
  unint64_t v4382;
  void *v4383;
  uint64_t v4384;
  uint64_t v4385;
  uint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  uint64_t v4389;
  unint64_t v4390;
  void *v4391;
  uint64_t v4392;
  uint64_t v4393;
  uint64_t v4394;
  uint64_t v4395;
  uint64_t v4396;
  uint64_t v4397;
  unint64_t v4398;
  void *v4399;
  uint64_t v4400;
  uint64_t v4401;
  uint64_t v4402;
  uint64_t v4403;
  uint64_t v4404;
  uint64_t v4405;
  unint64_t v4406;
  void *v4407;
  uint64_t v4408;
  uint64_t v4409;
  uint64_t v4410;
  uint64_t v4411;
  uint64_t v4412;
  uint64_t v4413;
  unint64_t v4414;
  void *v4415;
  uint64_t v4416;
  uint64_t v4417;
  uint64_t v4418;
  uint64_t v4419;
  uint64_t v4420;
  uint64_t v4421;
  unint64_t v4422;
  void *v4423;
  uint64_t v4424;
  uint64_t v4425;
  uint64_t v4426;
  uint64_t v4427;
  uint64_t v4428;
  uint64_t v4429;
  unint64_t v4430;
  void *v4431;
  uint64_t v4432;
  uint64_t v4433;
  uint64_t v4434;
  uint64_t v4435;
  uint64_t v4436;
  uint64_t v4437;
  unint64_t v4438;
  void *v4439;
  uint64_t v4440;
  uint64_t v4441;
  uint64_t v4442;
  uint64_t v4443;
  uint64_t v4444;
  uint64_t v4445;
  unint64_t v4446;
  void *v4447;
  uint64_t v4448;
  uint64_t v4449;
  uint64_t v4450;
  uint64_t v4451;
  uint64_t v4452;
  uint64_t v4453;
  unint64_t v4454;
  void *v4455;
  uint64_t v4456;
  uint64_t v4457;
  uint64_t v4458;
  uint64_t v4459;
  uint64_t v4460;
  uint64_t v4461;
  unint64_t v4462;
  void *v4463;
  uint64_t v4464;
  uint64_t v4465;
  uint64_t v4466;
  uint64_t v4467;
  uint64_t v4468;
  uint64_t v4469;
  unint64_t v4470;
  void *v4471;
  uint64_t v4472;
  uint64_t v4473;
  uint64_t v4474;
  uint64_t v4475;
  uint64_t v4476;
  uint64_t v4477;
  unint64_t v4478;
  void *v4479;
  uint64_t v4480;
  uint64_t v4481;
  uint64_t v4482;
  uint64_t v4483;
  uint64_t v4484;
  uint64_t v4485;
  unint64_t v4486;
  void *v4487;
  uint64_t v4488;
  uint64_t v4489;
  uint64_t v4490;
  uint64_t v4491;
  uint64_t v4492;
  uint64_t v4493;
  unint64_t v4494;
  void *v4495;
  uint64_t v4496;
  uint64_t v4497;
  uint64_t v4498;
  uint64_t v4499;
  uint64_t v4500;
  uint64_t v4501;
  unint64_t v4502;
  void *v4503;
  uint64_t v4504;
  uint64_t v4505;
  uint64_t v4506;
  uint64_t v4507;
  uint64_t v4508;
  uint64_t v4509;
  unint64_t v4510;
  void *v4511;
  uint64_t v4512;
  uint64_t v4513;
  uint64_t v4514;
  uint64_t v4515;
  uint64_t v4516;
  uint64_t v4517;
  unint64_t v4518;
  void *v4519;
  uint64_t v4520;
  uint64_t v4521;
  uint64_t v4522;
  uint64_t v4523;
  uint64_t v4524;
  uint64_t v4525;
  unint64_t v4526;
  void *v4527;
  uint64_t v4528;
  uint64_t v4529;
  uint64_t v4530;
  uint64_t v4531;
  uint64_t v4532;
  uint64_t v4533;
  unint64_t v4534;
  void *v4535;
  uint64_t v4536;
  uint64_t v4537;
  uint64_t v4538;
  uint64_t v4539;
  uint64_t v4540;
  uint64_t v4541;
  unint64_t v4542;
  void *v4543;
  uint64_t v4544;
  uint64_t v4545;
  uint64_t v4546;
  uint64_t v4547;
  uint64_t v4548;
  uint64_t v4549;
  unint64_t v4550;
  void *v4551;
  uint64_t v4552;
  uint64_t v4553;
  uint64_t v4554;
  uint64_t v4555;
  uint64_t v4556;
  uint64_t v4557;
  unint64_t v4558;
  void *v4559;
  uint64_t v4560;
  uint64_t v4561;
  uint64_t v4562;
  uint64_t v4563;
  uint64_t v4564;
  uint64_t v4565;
  unint64_t v4566;
  void *v4567;
  uint64_t v4568;
  uint64_t v4569;
  uint64_t v4570;
  uint64_t v4571;
  uint64_t v4572;
  uint64_t v4573;
  unint64_t v4574;
  void *v4575;
  uint64_t v4576;
  uint64_t v4577;
  uint64_t v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  unint64_t v4582;
  void *v4583;
  uint64_t v4584;
  uint64_t v4585;
  uint64_t v4586;
  uint64_t v4587;
  uint64_t v4588;
  uint64_t v4589;
  unint64_t v4590;
  void *v4591;
  uint64_t v4592;
  uint64_t v4593;
  uint64_t v4594;
  uint64_t v4595;
  uint64_t v4596;
  uint64_t v4597;
  unint64_t v4598;
  void *v4599;
  uint64_t v4600;
  uint64_t v4601;
  uint64_t v4602;
  uint64_t v4603;
  uint64_t v4604;
  uint64_t v4605;
  unint64_t v4606;
  void *v4607;
  uint64_t v4608;
  uint64_t v4609;
  uint64_t v4610;
  uint64_t v4611;
  uint64_t v4612;
  uint64_t v4613;
  unint64_t v4614;
  void *v4615;
  uint64_t v4616;
  uint64_t v4617;
  uint64_t v4618;
  uint64_t v4619;
  uint64_t v4620;
  uint64_t v4621;
  unint64_t v4622;
  void *v4623;
  uint64_t v4624;
  uint64_t v4625;
  uint64_t v4626;
  uint64_t v4627;
  uint64_t v4628;
  uint64_t v4629;
  unint64_t v4630;
  void *v4631;
  uint64_t v4632;
  uint64_t v4633;
  uint64_t v4634;
  uint64_t v4635;
  uint64_t v4636;
  uint64_t v4637;
  unint64_t v4638;
  void *v4639;
  uint64_t v4640;
  uint64_t v4641;
  uint64_t v4642;
  uint64_t v4643;
  uint64_t v4644;
  uint64_t v4645;
  unint64_t v4646;
  void *v4647;
  uint64_t v4648;
  uint64_t v4649;
  uint64_t v4650;
  uint64_t v4651;
  uint64_t v4652;
  uint64_t v4653;
  unint64_t v4654;
  void *v4655;
  uint64_t v4656;
  uint64_t v4657;
  uint64_t v4658;
  uint64_t v4659;
  uint64_t v4660;
  uint64_t v4661;
  unint64_t v4662;
  void *v4663;
  uint64_t v4664;
  uint64_t v4665;
  uint64_t v4666;
  uint64_t v4667;
  uint64_t v4668;
  uint64_t v4669;
  unint64_t v4670;
  void *v4671;
  uint64_t v4672;
  uint64_t v4673;
  uint64_t v4674;
  uint64_t v4675;
  uint64_t v4676;
  uint64_t v4677;
  unint64_t v4678;
  void *v4679;
  uint64_t v4680;
  uint64_t v4681;
  uint64_t v4682;
  uint64_t v4683;
  uint64_t v4684;
  uint64_t v4685;
  unint64_t v4686;
  void *v4687;
  uint64_t v4688;
  uint64_t v4689;
  uint64_t v4690;
  uint64_t v4691;
  uint64_t v4692;
  uint64_t v4693;
  unint64_t v4694;
  void *v4695;
  uint64_t v4696;
  uint64_t v4697;
  uint64_t v4698;
  uint64_t v4699;
  uint64_t v4700;
  uint64_t v4701;
  unint64_t v4702;
  void *v4703;
  uint64_t v4704;
  uint64_t v4705;
  uint64_t v4706;
  uint64_t v4707;
  uint64_t v4708;
  uint64_t v4709;
  unint64_t v4710;
  void *v4711;
  uint64_t v4712;
  uint64_t v4713;
  uint64_t v4714;
  uint64_t v4715;
  uint64_t v4716;
  uint64_t v4717;
  unint64_t v4718;
  void *v4719;
  uint64_t v4720;
  uint64_t v4721;
  uint64_t v4722;
  uint64_t v4723;
  uint64_t v4724;
  uint64_t v4725;
  unint64_t v4726;
  void *v4727;
  uint64_t v4728;
  uint64_t v4729;
  uint64_t v4730;
  uint64_t v4731;
  uint64_t v4732;
  uint64_t v4733;
  unint64_t v4734;
  void *v4735;
  uint64_t v4736;
  uint64_t v4737;
  uint64_t v4738;
  uint64_t v4739;
  uint64_t v4740;
  uint64_t v4741;
  unint64_t v4742;
  void *v4743;
  uint64_t v4744;
  uint64_t v4745;
  uint64_t v4746;
  uint64_t v4747;
  uint64_t v4748;
  uint64_t v4749;
  unint64_t v4750;
  void *v4751;
  uint64_t v4752;
  uint64_t v4753;
  uint64_t v4754;
  uint64_t v4755;
  uint64_t v4756;
  uint64_t v4757;
  unint64_t v4758;
  void *v4759;
  uint64_t v4760;
  uint64_t v4761;
  uint64_t v4762;
  uint64_t v4763;
  uint64_t v4764;
  uint64_t v4765;
  unint64_t v4766;
  void *v4767;
  uint64_t v4768;
  uint64_t v4769;
  uint64_t v4770;
  uint64_t v4771;
  uint64_t v4772;
  uint64_t v4773;
  unint64_t v4774;
  void *v4775;
  uint64_t v4776;
  uint64_t v4777;
  uint64_t v4778;
  uint64_t v4779;
  uint64_t v4780;
  uint64_t v4781;
  unint64_t v4782;
  void *v4783;
  uint64_t v4784;
  uint64_t v4785;
  uint64_t v4786;
  uint64_t v4787;
  uint64_t v4788;
  uint64_t v4789;
  unint64_t v4790;
  void *v4791;
  uint64_t v4792;
  uint64_t v4793;
  uint64_t v4794;
  uint64_t v4795;
  uint64_t v4796;
  uint64_t v4797;
  unint64_t v4798;
  void *v4799;
  uint64_t v4800;
  uint64_t v4801;
  uint64_t v4802;
  uint64_t v4803;
  uint64_t v4804;
  uint64_t v4805;
  unint64_t v4806;
  void *v4807;
  uint64_t v4808;
  uint64_t v4809;
  uint64_t v4810;
  uint64_t v4811;
  uint64_t v4812;
  uint64_t v4813;
  unint64_t v4814;
  void *v4815;
  uint64_t v4816;
  uint64_t v4817;
  uint64_t v4818;
  uint64_t v4819;
  uint64_t v4820;
  uint64_t v4821;
  unint64_t v4822;
  void *v4823;
  uint64_t v4824;
  uint64_t v4825;
  uint64_t v4826;
  uint64_t v4827;
  uint64_t v4828;
  uint64_t v4829;
  unint64_t v4830;
  void *v4831;
  uint64_t v4832;
  uint64_t v4833;
  uint64_t v4834;
  uint64_t v4835;
  uint64_t v4836;
  uint64_t v4837;
  unint64_t v4838;
  void *v4839;
  uint64_t v4840;
  uint64_t v4841;
  uint64_t v4842;
  uint64_t v4843;
  uint64_t v4844;
  uint64_t v4845;
  unint64_t v4846;
  void *v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  uint64_t v4851;
  uint64_t v4852;
  uint64_t v4853;
  unint64_t v4854;
  void *v4855;
  uint64_t v4856;
  uint64_t v4857;
  uint64_t v4858;
  uint64_t v4859;
  uint64_t v4860;
  uint64_t v4861;
  unint64_t v4862;
  void *v4863;
  uint64_t v4864;
  uint64_t v4865;
  uint64_t v4866;
  uint64_t v4867;
  uint64_t v4868;
  uint64_t v4869;
  unint64_t v4870;
  void *v4871;
  uint64_t v4872;
  uint64_t v4873;
  uint64_t v4874;
  uint64_t v4875;
  uint64_t v4876;
  uint64_t v4877;
  unint64_t v4878;
  void *v4879;
  uint64_t v4880;
  uint64_t v4881;
  uint64_t v4882;
  uint64_t v4883;
  uint64_t v4884;
  uint64_t v4885;
  unint64_t v4886;
  void *v4887;
  uint64_t v4888;
  uint64_t v4889;
  uint64_t v4890;
  uint64_t v4891;
  uint64_t v4892;
  uint64_t v4893;
  unint64_t v4894;
  void *v4895;
  uint64_t v4896;
  uint64_t v4897;
  uint64_t v4898;
  uint64_t v4899;
  uint64_t v4900;
  uint64_t v4901;
  unint64_t v4902;
  void *v4903;
  uint64_t v4904;
  uint64_t v4905;
  uint64_t v4906;
  uint64_t v4907;
  uint64_t v4908;
  uint64_t v4909;
  unint64_t v4910;
  void *v4911;
  uint64_t v4912;
  uint64_t v4913;
  uint64_t v4914;
  uint64_t v4915;
  uint64_t v4916;
  uint64_t v4917;
  unint64_t v4918;
  void *v4919;
  uint64_t v4920;
  uint64_t v4921;
  uint64_t v4922;
  uint64_t v4923;
  uint64_t v4924;
  uint64_t v4925;
  unint64_t v4926;
  void *v4927;
  uint64_t v4928;
  uint64_t v4929;
  uint64_t v4930;
  uint64_t v4931;
  uint64_t v4932;
  uint64_t v4933;
  unint64_t v4934;
  void *v4935;
  uint64_t v4936;
  uint64_t v4937;
  uint64_t v4938;
  uint64_t v4939;
  uint64_t v4940;
  uint64_t v4941;
  unint64_t v4942;
  void *v4943;
  uint64_t v4944;
  uint64_t v4945;
  uint64_t v4946;
  uint64_t v4947;
  uint64_t v4948;
  uint64_t v4949;
  unint64_t v4950;
  void *v4951;
  uint64_t v4952;
  uint64_t v4953;
  uint64_t v4954;
  uint64_t v4955;
  uint64_t v4956;
  uint64_t v4957;
  unint64_t v4958;
  void *v4959;
  uint64_t v4960;
  uint64_t v4961;
  uint64_t v4962;
  uint64_t v4963;
  uint64_t v4964;
  uint64_t v4965;
  unint64_t v4966;
  void *v4967;
  uint64_t v4968;
  uint64_t v4969;
  uint64_t v4970;
  uint64_t v4971;
  uint64_t v4972;
  uint64_t v4973;
  unint64_t v4974;
  void *v4975;
  uint64_t v4976;
  uint64_t v4977;
  uint64_t v4978;
  uint64_t v4979;
  uint64_t v4980;
  uint64_t v4981;
  unint64_t v4982;
  void *v4983;
  uint64_t v4984;
  uint64_t v4985;
  uint64_t v4986;
  uint64_t v4987;
  uint64_t v4988;
  uint64_t v4989;
  unint64_t v4990;
  void *v4991;
  uint64_t v4992;
  uint64_t v4993;
  uint64_t v4994;
  uint64_t v4995;
  uint64_t v4996;
  uint64_t v4997;
  unint64_t v4998;
  void *v4999;
  uint64_t v5000;
  uint64_t v5001;
  uint64_t v5002;
  uint64_t v5003;
  uint64_t v5004;
  uint64_t v5005;
  unint64_t v5006;
  void *v5007;
  uint64_t v5008;
  uint64_t v5009;
  uint64_t v5010;
  uint64_t v5011;
  uint64_t v5012;
  uint64_t v5013;
  unint64_t v5014;
  void *v5015;
  uint64_t v5016;
  uint64_t v5017;
  uint64_t v5018;
  uint64_t v5019;
  uint64_t v5020;
  uint64_t v5021;
  unint64_t v5022;
  void *v5023;
  uint64_t v5024;
  uint64_t v5025;
  uint64_t v5026;
  uint64_t v5027;
  uint64_t v5028;
  uint64_t v5029;
  unint64_t v5030;
  void *v5031;
  uint64_t v5032;
  uint64_t v5033;
  uint64_t v5034;
  uint64_t v5035;
  uint64_t v5036;
  uint64_t v5037;
  unint64_t v5038;
  void *v5039;
  uint64_t v5040;
  uint64_t v5041;
  uint64_t v5042;
  uint64_t v5043;
  uint64_t v5044;
  uint64_t v5045;
  unint64_t v5046;
  void *v5047;
  uint64_t v5048;
  uint64_t v5049;
  uint64_t v5050;
  uint64_t v5051;
  uint64_t v5052;
  uint64_t v5053;
  unint64_t v5054;
  void *v5055;
  uint64_t v5056;
  uint64_t v5057;
  uint64_t v5058;
  uint64_t v5059;
  uint64_t v5060;
  uint64_t v5061;
  unint64_t v5062;
  void *v5063;
  uint64_t v5064;
  uint64_t v5065;
  uint64_t v5066;
  uint64_t v5067;
  uint64_t v5068;
  uint64_t v5069;
  unint64_t v5070;
  void *v5071;
  uint64_t v5072;
  uint64_t v5073;
  uint64_t v5074;
  uint64_t v5075;
  uint64_t v5076;
  uint64_t v5077;
  unint64_t v5078;
  void *v5079;
  uint64_t v5080;
  uint64_t v5081;
  uint64_t v5082;
  uint64_t v5083;
  uint64_t v5084;
  uint64_t v5085;
  unint64_t v5086;
  void *v5087;
  uint64_t v5088;
  uint64_t v5089;
  uint64_t v5090;
  uint64_t v5091;
  uint64_t v5092;
  uint64_t v5093;
  unint64_t v5094;
  void *v5095;
  uint64_t v5096;
  uint64_t v5097;
  uint64_t v5098;
  uint64_t v5099;
  uint64_t v5100;
  uint64_t v5101;
  unint64_t v5102;
  void *v5103;
  uint64_t v5104;
  uint64_t v5105;
  uint64_t v5106;
  uint64_t v5107;
  uint64_t v5108;
  uint64_t v5109;
  unint64_t v5110;
  void *v5111;
  uint64_t v5112;
  uint64_t v5113;
  uint64_t v5114;
  uint64_t v5115;
  uint64_t v5116;
  uint64_t v5117;
  unint64_t v5118;
  void *v5119;
  uint64_t v5120;
  uint64_t v5121;
  uint64_t v5122;
  uint64_t v5123;
  uint64_t v5124;
  uint64_t v5125;
  unint64_t v5126;
  void *v5127;
  uint64_t v5128;
  uint64_t v5129;
  uint64_t v5130;
  uint64_t v5131;
  uint64_t v5132;
  uint64_t v5133;
  unint64_t v5134;
  void *v5135;
  uint64_t v5136;
  uint64_t v5137;
  uint64_t v5138;
  uint64_t v5139;
  uint64_t v5140;
  uint64_t v5141;
  unint64_t v5142;
  void *v5143;
  uint64_t v5144;
  uint64_t v5145;
  uint64_t v5146;
  uint64_t v5147;
  uint64_t v5148;
  uint64_t v5149;
  unint64_t v5150;
  void *v5151;
  uint64_t v5152;
  uint64_t v5153;
  uint64_t v5154;
  uint64_t v5155;
  uint64_t v5156;
  uint64_t v5157;
  unint64_t v5158;
  void *v5159;
  uint64_t v5160;
  uint64_t v5161;
  uint64_t v5162;
  uint64_t v5163;
  uint64_t v5164;
  uint64_t v5165;
  unint64_t v5166;
  void *v5167;
  uint64_t v5168;
  uint64_t v5169;
  uint64_t v5170;
  uint64_t v5171;
  uint64_t v5172;
  uint64_t v5173;
  unint64_t v5174;
  void *v5175;
  uint64_t v5176;
  uint64_t v5177;
  uint64_t v5178;
  uint64_t v5179;
  uint64_t v5180;
  uint64_t v5181;
  unint64_t v5182;
  void *v5183;
  uint64_t v5184;
  uint64_t v5185;
  uint64_t v5186;
  uint64_t v5187;
  uint64_t v5188;
  uint64_t v5189;
  unint64_t v5190;
  void *v5191;
  uint64_t v5192;
  uint64_t v5193;
  uint64_t v5194;
  uint64_t v5195;
  uint64_t v5196;
  uint64_t v5197;
  unint64_t v5198;
  void *v5199;
  uint64_t v5200;
  uint64_t v5201;
  uint64_t v5202;
  uint64_t v5203;
  uint64_t v5204;
  uint64_t v5205;
  unint64_t v5206;
  void *v5207;
  uint64_t v5208;
  uint64_t v5209;
  uint64_t v5210;
  uint64_t v5211;
  uint64_t v5212;
  uint64_t v5213;
  unint64_t v5214;
  void *v5215;
  uint64_t v5216;
  uint64_t v5217;
  uint64_t v5218;
  uint64_t v5219;
  uint64_t v5220;
  uint64_t v5221;
  unint64_t v5222;
  void *v5223;
  uint64_t v5224;
  uint64_t v5225;
  uint64_t v5226;
  uint64_t v5227;
  uint64_t v5228;
  uint64_t v5229;
  unint64_t v5230;
  void *v5231;
  uint64_t v5232;
  uint64_t v5233;
  uint64_t v5234;
  uint64_t v5235;
  uint64_t v5236;
  uint64_t v5237;
  unint64_t v5238;
  void *v5239;
  uint64_t v5240;
  uint64_t v5241;
  uint64_t v5242;
  uint64_t v5243;
  uint64_t v5244;
  uint64_t v5245;
  unint64_t v5246;
  void *v5247;
  uint64_t v5248;
  uint64_t v5249;
  uint64_t v5250;
  uint64_t v5251;
  uint64_t v5252;
  uint64_t v5253;
  unint64_t v5254;
  void *v5255;
  uint64_t v5256;
  uint64_t v5257;
  uint64_t v5258;
  uint64_t v5259;
  uint64_t v5260;
  uint64_t v5261;
  unint64_t v5262;
  void *v5263;
  uint64_t v5264;
  uint64_t v5265;
  uint64_t v5266;
  uint64_t v5267;
  uint64_t v5268;
  uint64_t v5269;
  unint64_t v5270;
  void *v5271;
  uint64_t v5272;
  uint64_t v5273;
  uint64_t v5274;
  uint64_t v5275;
  uint64_t v5276;
  uint64_t v5277;
  unint64_t v5278;
  void *v5279;
  uint64_t v5280;
  uint64_t v5281;
  uint64_t v5282;
  uint64_t v5283;
  uint64_t v5284;
  uint64_t v5285;
  unint64_t v5286;
  void *v5287;
  uint64_t v5288;
  uint64_t v5289;
  uint64_t v5290;
  uint64_t v5291;
  uint64_t v5292;
  uint64_t v5293;
  unint64_t v5294;
  void *v5295;
  uint64_t v5296;
  uint64_t v5297;
  uint64_t v5298;
  uint64_t v5299;
  uint64_t v5300;
  uint64_t v5301;
  unint64_t v5302;
  void *v5303;
  uint64_t v5304;
  uint64_t v5305;
  uint64_t v5306;
  uint64_t v5307;
  uint64_t v5308;
  uint64_t v5309;
  unint64_t v5310;
  void *v5311;
  uint64_t v5312;
  uint64_t v5313;
  uint64_t v5314;
  uint64_t v5315;
  uint64_t v5316;
  uint64_t v5317;
  unint64_t v5318;
  void *v5319;
  uint64_t v5320;
  uint64_t v5321;
  uint64_t v5322;
  uint64_t v5323;
  uint64_t v5324;
  uint64_t v5325;
  unint64_t v5326;
  void *v5327;
  uint64_t v5328;
  uint64_t v5329;
  uint64_t v5330;
  uint64_t v5331;
  uint64_t v5332;
  uint64_t v5333;
  unint64_t v5334;
  void *v5335;
  uint64_t v5336;
  uint64_t v5337;
  uint64_t v5338;
  uint64_t v5339;
  uint64_t v5340;
  uint64_t v5341;
  unint64_t v5342;
  void *v5343;
  uint64_t v5344;
  uint64_t v5345;
  uint64_t v5346;
  uint64_t v5347;
  uint64_t v5348;
  uint64_t v5349;
  unint64_t v5350;
  void *v5351;
  uint64_t v5352;
  uint64_t v5353;
  uint64_t v5354;
  uint64_t v5355;
  uint64_t v5356;
  uint64_t v5357;
  unint64_t v5358;
  void *v5359;
  uint64_t v5360;
  uint64_t v5361;
  uint64_t v5362;
  uint64_t v5363;
  uint64_t v5364;
  uint64_t v5365;
  unint64_t v5366;
  void *v5367;
  uint64_t v5368;
  uint64_t v5369;
  uint64_t v5370;
  uint64_t v5371;
  uint64_t v5372;
  uint64_t v5373;
  unint64_t v5374;
  void *v5375;
  uint64_t v5376;
  uint64_t v5377;
  uint64_t v5378;
  uint64_t v5379;
  uint64_t v5380;
  uint64_t v5381;
  unint64_t v5382;
  void *v5383;
  uint64_t v5384;
  uint64_t v5385;
  uint64_t v5386;
  uint64_t v5387;
  uint64_t v5388;
  uint64_t v5389;
  unint64_t v5390;
  void *v5391;
  uint64_t v5392;
  uint64_t v5393;
  uint64_t v5394;
  uint64_t v5395;
  uint64_t v5396;
  uint64_t v5397;
  unint64_t v5398;
  void *v5399;
  uint64_t v5400;
  uint64_t v5401;
  uint64_t v5402;
  uint64_t v5403;
  uint64_t v5404;
  uint64_t v5405;
  unint64_t v5406;
  void *v5407;
  uint64_t v5408;
  uint64_t v5409;
  uint64_t v5410;
  uint64_t v5411;
  uint64_t v5412;
  uint64_t v5413;
  unint64_t v5414;
  void *v5415;
  uint64_t v5416;
  uint64_t v5417;
  uint64_t v5418;
  uint64_t v5419;
  uint64_t v5420;
  uint64_t v5421;
  unint64_t v5422;
  void *v5423;
  uint64_t v5424;
  uint64_t v5425;
  uint64_t v5426;
  uint64_t v5427;
  uint64_t v5428;
  uint64_t v5429;
  unint64_t v5430;
  void *v5431;
  uint64_t v5432;
  uint64_t v5433;
  uint64_t v5434;
  uint64_t v5435;
  uint64_t v5436;
  uint64_t v5437;
  unint64_t v5438;
  void *v5439;
  uint64_t v5440;
  uint64_t v5441;
  uint64_t v5442;
  uint64_t v5443;
  uint64_t v5444;
  uint64_t v5445;
  unint64_t v5446;
  void *v5447;
  uint64_t v5448;
  uint64_t v5449;
  uint64_t v5450;
  uint64_t v5451;
  uint64_t v5452;
  uint64_t v5453;
  unint64_t v5454;
  void *v5455;
  uint64_t v5456;
  uint64_t v5457;
  uint64_t v5458;
  uint64_t v5459;
  uint64_t v5460;
  uint64_t v5461;
  unint64_t v5462;
  void *v5463;
  uint64_t v5464;
  uint64_t v5465;
  uint64_t v5466;
  uint64_t v5467;
  uint64_t v5468;
  uint64_t v5469;
  unint64_t v5470;
  void *v5471;
  uint64_t v5472;
  uint64_t v5473;
  uint64_t v5474;
  uint64_t v5475;
  uint64_t v5476;
  uint64_t v5477;
  unint64_t v5478;
  void *v5479;
  uint64_t v5480;
  uint64_t v5481;
  uint64_t v5482;
  uint64_t v5483;
  uint64_t v5484;
  uint64_t v5485;
  unint64_t v5486;
  void *v5487;
  uint64_t v5488;
  uint64_t v5489;
  uint64_t v5490;
  uint64_t v5491;
  uint64_t v5492;
  uint64_t v5493;
  unint64_t v5494;
  void *v5495;
  uint64_t v5496;
  uint64_t v5497;
  uint64_t v5498;
  uint64_t v5499;
  uint64_t v5500;
  uint64_t v5501;
  unint64_t v5502;
  void *v5503;
  uint64_t v5504;
  uint64_t v5505;
  uint64_t v5506;
  uint64_t v5507;
  uint64_t v5508;
  uint64_t v5509;
  unint64_t v5510;
  void *v5511;
  uint64_t v5512;
  uint64_t v5513;
  uint64_t v5514;
  uint64_t v5515;
  uint64_t v5516;
  uint64_t v5517;
  unint64_t v5518;
  void *v5519;
  uint64_t v5520;
  uint64_t v5521;
  uint64_t v5522;
  uint64_t v5523;
  uint64_t v5524;
  uint64_t v5525;
  unint64_t v5526;
  void *v5527;
  uint64_t v5528;
  uint64_t v5529;
  uint64_t v5530;
  uint64_t v5531;
  uint64_t v5532;
  uint64_t v5533;
  unint64_t v5534;
  void *v5535;
  uint64_t v5536;
  uint64_t v5537;
  uint64_t v5538;
  uint64_t v5539;
  uint64_t v5540;
  uint64_t v5541;
  unint64_t v5542;
  void *v5543;
  uint64_t v5544;
  uint64_t v5545;
  uint64_t v5546;
  uint64_t v5547;
  uint64_t v5548;
  uint64_t v5549;
  unint64_t v5550;
  void *v5551;
  uint64_t v5552;
  uint64_t v5553;
  uint64_t v5554;
  uint64_t v5555;
  uint64_t v5556;
  uint64_t v5557;
  unint64_t v5558;
  void *v5559;
  uint64_t v5560;
  uint64_t v5561;
  uint64_t v5562;
  uint64_t v5563;
  uint64_t v5564;
  uint64_t v5565;
  unint64_t v5566;
  void *v5567;
  uint64_t v5568;
  uint64_t v5569;
  uint64_t v5570;
  uint64_t v5571;
  uint64_t v5572;
  uint64_t v5573;
  unint64_t v5574;
  void *v5575;
  uint64_t v5576;
  uint64_t v5577;
  uint64_t v5578;
  uint64_t v5579;
  uint64_t v5580;
  uint64_t v5581;
  unint64_t v5582;
  void *v5583;
  uint64_t v5584;
  uint64_t v5585;
  uint64_t v5586;
  uint64_t v5587;
  uint64_t v5588;
  uint64_t v5589;
  unint64_t v5590;
  void *v5591;
  uint64_t v5592;
  uint64_t v5593;
  uint64_t v5594;
  uint64_t v5595;
  uint64_t v5596;
  uint64_t v5597;
  unint64_t v5598;
  void *v5599;
  uint64_t v5600;
  uint64_t v5601;
  uint64_t v5602;
  uint64_t v5603;
  uint64_t v5604;
  uint64_t v5605;
  unint64_t v5606;
  void *v5607;
  uint64_t v5608;
  uint64_t v5609;
  uint64_t v5610;
  uint64_t v5611;
  uint64_t v5612;
  uint64_t v5613;
  unint64_t v5614;
  void *v5615;
  uint64_t v5616;
  uint64_t v5617;
  uint64_t v5618;
  uint64_t v5619;
  uint64_t v5620;
  uint64_t v5621;
  unint64_t v5622;
  void *v5623;
  uint64_t v5624;
  uint64_t v5625;
  uint64_t v5626;
  uint64_t v5627;
  uint64_t v5628;
  uint64_t v5629;
  unint64_t v5630;
  void *v5631;
  uint64_t v5632;
  uint64_t v5633;
  uint64_t v5634;
  uint64_t v5635;
  uint64_t v5636;
  uint64_t v5637;
  unint64_t v5638;
  void *v5639;
  uint64_t v5640;
  uint64_t v5641;
  uint64_t v5642;
  uint64_t v5643;
  uint64_t v5644;
  uint64_t v5645;
  unint64_t v5646;
  void *v5647;
  uint64_t v5648;
  uint64_t v5649;
  uint64_t v5650;
  uint64_t v5651;
  uint64_t v5652;
  uint64_t v5653;
  unint64_t v5654;
  void *v5655;
  uint64_t v5656;
  uint64_t v5657;
  uint64_t v5658;
  uint64_t v5659;
  uint64_t v5660;
  uint64_t v5661;
  unint64_t v5662;
  void *v5663;
  uint64_t v5664;
  uint64_t v5665;
  uint64_t v5666;
  uint64_t v5667;
  uint64_t v5668;
  uint64_t v5669;
  unint64_t v5670;
  void *v5671;
  uint64_t v5672;
  uint64_t v5673;
  uint64_t v5674;
  uint64_t v5675;
  uint64_t v5676;
  uint64_t v5677;
  unint64_t v5678;
  void *v5679;
  uint64_t v5680;
  uint64_t v5681;
  uint64_t v5682;
  uint64_t v5683;
  uint64_t v5684;
  uint64_t v5685;
  unint64_t v5686;
  void *v5687;
  uint64_t v5688;
  uint64_t v5689;
  uint64_t v5690;
  uint64_t v5691;
  uint64_t v5692;
  uint64_t v5693;
  unint64_t v5694;
  void *v5695;
  uint64_t v5696;
  uint64_t v5697;
  uint64_t v5698;
  uint64_t v5699;
  uint64_t v5700;
  uint64_t v5701;
  unint64_t v5702;
  void *v5703;
  uint64_t v5704;
  uint64_t v5705;
  uint64_t v5706;
  uint64_t v5707;
  uint64_t v5708;
  uint64_t v5709;
  unint64_t v5710;
  void *v5711;
  uint64_t v5712;
  uint64_t v5713;
  uint64_t v5714;
  uint64_t v5715;
  uint64_t v5716;
  uint64_t v5717;
  unint64_t v5718;
  void *v5719;
  uint64_t v5720;
  uint64_t v5721;
  uint64_t v5722;
  uint64_t v5723;
  uint64_t v5724;
  uint64_t v5725;
  unint64_t v5726;
  void *v5727;
  uint64_t v5728;
  uint64_t v5729;
  uint64_t v5730;
  uint64_t v5731;
  uint64_t v5732;
  uint64_t v5733;
  unint64_t v5734;
  void *v5735;
  uint64_t v5736;
  uint64_t v5737;
  uint64_t v5738;
  uint64_t v5739;
  uint64_t v5740;
  uint64_t v5741;
  unint64_t v5742;
  void *v5743;
  uint64_t v5744;
  uint64_t v5745;
  uint64_t v5746;
  uint64_t v5747;
  uint64_t v5748;
  uint64_t v5749;
  unint64_t v5750;
  void *v5751;
  uint64_t v5752;
  uint64_t v5753;
  uint64_t v5754;
  uint64_t v5755;
  uint64_t v5756;
  uint64_t v5757;
  unint64_t v5758;
  void *v5759;
  uint64_t v5760;
  uint64_t v5761;
  uint64_t v5762;
  uint64_t v5763;
  uint64_t v5764;
  uint64_t v5765;
  unint64_t v5766;
  void *v5767;
  uint64_t v5768;
  uint64_t v5769;
  uint64_t v5770;
  uint64_t v5771;
  uint64_t v5772;
  uint64_t v5773;
  unint64_t v5774;
  void *v5775;
  uint64_t v5776;
  uint64_t v5777;
  uint64_t v5778;
  uint64_t v5779;
  uint64_t v5780;
  uint64_t v5781;
  unint64_t v5782;
  void *v5783;
  uint64_t v5784;
  uint64_t v5785;
  uint64_t v5786;
  uint64_t v5787;
  uint64_t v5788;
  uint64_t v5789;
  unint64_t v5790;
  void *v5791;
  uint64_t v5792;
  uint64_t v5793;
  uint64_t v5794;
  uint64_t v5795;
  uint64_t v5796;
  uint64_t v5797;
  unint64_t v5798;
  void *v5799;
  uint64_t v5800;
  uint64_t v5801;
  uint64_t v5802;
  uint64_t v5803;
  uint64_t v5804;
  uint64_t v5805;
  unint64_t v5806;
  void *v5807;
  uint64_t v5808;
  uint64_t v5809;
  uint64_t v5810;
  uint64_t v5811;
  uint64_t v5812;
  uint64_t v5813;
  unint64_t v5814;
  void *v5815;
  uint64_t v5816;
  uint64_t v5817;
  uint64_t v5818;
  uint64_t v5819;
  uint64_t v5820;
  uint64_t v5821;
  unint64_t v5822;
  void *v5823;
  uint64_t v5824;
  uint64_t v5825;
  uint64_t v5826;
  uint64_t v5827;
  uint64_t v5828;
  uint64_t v5829;
  unint64_t v5830;
  void *v5831;
  uint64_t v5832;
  uint64_t v5833;
  uint64_t v5834;
  uint64_t v5835;
  uint64_t v5836;
  uint64_t v5837;
  unint64_t v5838;
  void *v5839;
  uint64_t v5840;
  uint64_t v5841;
  uint64_t v5842;
  uint64_t v5843;
  uint64_t v5844;
  uint64_t v5845;
  unint64_t v5846;
  void *v5847;
  uint64_t v5848;
  uint64_t v5849;
  uint64_t v5850;
  uint64_t v5851;
  uint64_t v5852;
  uint64_t v5853;
  unint64_t v5854;
  void *v5855;
  uint64_t v5856;
  uint64_t v5857;
  uint64_t v5858;
  uint64_t v5859;
  uint64_t v5860;
  uint64_t v5861;
  unint64_t v5862;
  void *v5863;
  uint64_t v5864;
  uint64_t v5865;
  uint64_t v5866;
  uint64_t v5867;
  uint64_t v5868;
  uint64_t v5869;
  unint64_t v5870;
  void *v5871;
  uint64_t v5872;
  uint64_t v5873;
  uint64_t v5874;
  uint64_t v5875;
  uint64_t v5876;
  uint64_t v5877;
  unint64_t v5878;
  void *v5879;
  uint64_t v5880;
  uint64_t v5881;
  uint64_t v5882;
  uint64_t v5883;
  uint64_t v5884;
  uint64_t v5885;
  unint64_t v5886;
  void *v5887;
  uint64_t v5888;
  uint64_t v5889;
  uint64_t v5890;
  uint64_t v5891;
  uint64_t v5892;
  uint64_t v5893;
  unint64_t v5894;
  void *v5895;
  uint64_t v5896;
  uint64_t v5897;
  uint64_t v5898;
  uint64_t v5899;
  uint64_t v5900;
  uint64_t v5901;
  unint64_t v5902;
  void *v5903;
  uint64_t v5904;
  uint64_t v5905;
  uint64_t v5906;
  uint64_t v5907;
  uint64_t v5908;
  uint64_t v5909;
  unint64_t v5910;
  void *v5911;
  uint64_t v5912;
  uint64_t v5913;
  uint64_t v5914;
  uint64_t v5915;
  uint64_t v5916;
  uint64_t v5917;
  unint64_t v5918;
  void *v5919;
  uint64_t v5920;
  uint64_t v5921;
  uint64_t v5922;
  uint64_t v5923;
  uint64_t v5924;
  uint64_t v5925;
  unint64_t v5926;
  void *v5927;
  uint64_t v5928;
  uint64_t v5929;
  uint64_t v5930;
  uint64_t v5931;
  uint64_t v5932;
  uint64_t v5933;
  unint64_t v5934;
  void *v5935;
  uint64_t v5936;
  uint64_t v5937;
  uint64_t v5938;
  uint64_t v5939;
  uint64_t v5940;
  uint64_t v5941;
  unint64_t v5942;
  void *v5943;
  uint64_t v5944;
  uint64_t v5945;
  uint64_t v5946;
  uint64_t v5947;
  uint64_t v5948;
  uint64_t v5949;
  unint64_t v5950;
  void *v5951;
  uint64_t v5952;
  uint64_t v5953;
  uint64_t v5954;
  uint64_t v5955;
  uint64_t v5956;
  uint64_t v5957;
  unint64_t v5958;
  void *v5959;
  uint64_t v5960;
  uint64_t v5961;
  uint64_t v5962;
  uint64_t v5963;
  uint64_t v5964;
  uint64_t v5965;
  unint64_t v5966;
  void *v5967;
  uint64_t v5968;
  uint64_t v5969;
  uint64_t v5970;
  uint64_t v5971;
  uint64_t v5972;
  uint64_t v5973;
  unint64_t v5974;
  void *v5975;
  uint64_t v5976;
  uint64_t v5977;
  uint64_t v5978;
  uint64_t v5979;
  uint64_t v5980;
  uint64_t v5981;
  unint64_t v5982;
  void *v5983;
  uint64_t v5984;
  uint64_t v5985;
  uint64_t v5986;
  uint64_t v5987;
  uint64_t v5988;
  uint64_t v5989;
  unint64_t v5990;
  void *v5991;
  uint64_t v5992;
  uint64_t v5993;
  uint64_t v5994;
  uint64_t v5995;
  uint64_t v5996;
  uint64_t v5997;
  unint64_t v5998;
  void *v5999;
  uint64_t v6000;
  uint64_t v6001;
  uint64_t v6002;
  uint64_t v6003;
  uint64_t v6004;
  uint64_t v6005;
  unint64_t v6006;
  void *v6007;
  uint64_t v6008;
  uint64_t v6009;
  uint64_t v6010;
  uint64_t v6011;
  uint64_t v6012;
  uint64_t v6013;
  unint64_t v6014;
  void *v6015;
  uint64_t v6016;
  uint64_t v6017;
  uint64_t v6018;
  uint64_t v6019;
  uint64_t v6020;
  uint64_t v6021;
  unint64_t v6022;
  void *v6023;
  uint64_t v6024;
  uint64_t v6025;
  uint64_t v6026;
  uint64_t v6027;
  uint64_t v6028;
  uint64_t v6029;
  unint64_t v6030;
  void *v6031;
  uint64_t v6032;
  uint64_t v6033;
  uint64_t v6034;
  uint64_t v6035;
  uint64_t v6036;
  uint64_t v6037;
  unint64_t v6038;
  void *v6039;
  uint64_t v6040;
  uint64_t v6041;
  uint64_t v6042;
  uint64_t v6043;
  uint64_t v6044;
  uint64_t v6045;
  unint64_t v6046;
  void *v6047;
  uint64_t v6048;
  uint64_t v6049;
  uint64_t v6050;
  uint64_t v6051;
  uint64_t v6052;
  uint64_t v6053;
  unint64_t v6054;
  void *v6055;
  uint64_t v6056;
  uint64_t v6057;
  uint64_t v6058;
  uint64_t v6059;
  uint64_t v6060;
  uint64_t v6061;
  unint64_t v6062;
  void *v6063;
  uint64_t v6064;
  uint64_t v6065;
  uint64_t v6066;
  uint64_t v6067;
  uint64_t v6068;
  uint64_t v6069;
  unint64_t v6070;
  void *v6071;
  uint64_t v6072;
  uint64_t v6073;
  uint64_t v6074;
  uint64_t v6075;
  uint64_t v6076;
  uint64_t v6077;
  unint64_t v6078;
  void *v6079;
  uint64_t v6080;
  uint64_t v6081;
  uint64_t v6082;
  uint64_t v6083;
  uint64_t v6084;
  uint64_t v6085;
  unint64_t v6086;
  void *v6087;
  uint64_t v6088;
  uint64_t v6089;
  uint64_t v6090;
  uint64_t v6091;
  uint64_t v6092;
  uint64_t v6093;
  unint64_t v6094;
  void *v6095;
  uint64_t v6096;
  uint64_t v6097;
  uint64_t v6098;
  uint64_t v6099;
  uint64_t v6100;
  uint64_t v6101;
  unint64_t v6102;
  void *v6103;
  uint64_t v6104;
  uint64_t v6105;
  uint64_t v6106;
  uint64_t v6107;
  uint64_t v6108;
  uint64_t v6109;
  unint64_t v6110;
  void *v6111;
  uint64_t v6112;
  uint64_t v6113;
  uint64_t v6114;
  uint64_t v6115;
  uint64_t v6116;
  uint64_t v6117;
  unint64_t v6118;
  void *v6119;
  uint64_t v6120;
  uint64_t v6121;
  uint64_t v6122;
  uint64_t v6123;
  uint64_t v6124;
  uint64_t v6125;
  unint64_t v6126;
  void *v6127;
  uint64_t v6128;
  uint64_t v6129;
  uint64_t v6130;
  uint64_t v6131;
  uint64_t v6132;
  uint64_t v6133;
  unint64_t v6134;
  void *v6135;
  uint64_t v6136;
  uint64_t v6137;
  uint64_t v6138;
  uint64_t v6139;
  uint64_t v6140;
  uint64_t v6141;
  unint64_t v6142;
  void *v6143;
  uint64_t v6144;
  uint64_t v6145;
  uint64_t v6146;
  uint64_t v6147;
  uint64_t v6148;
  uint64_t v6149;
  unint64_t v6150;
  void *v6151;
  uint64_t v6152;
  uint64_t v6153;
  uint64_t v6154;
  uint64_t v6155;
  uint64_t v6156;
  uint64_t v6157;
  unint64_t v6158;
  void *v6159;
  uint64_t v6160;
  uint64_t v6161;
  uint64_t v6162;
  uint64_t v6163;
  uint64_t v6164;
  uint64_t v6165;
  unint64_t v6166;
  void *v6167;
  uint64_t v6168;
  uint64_t v6169;
  uint64_t v6170;
  uint64_t v6171;
  uint64_t v6172;
  uint64_t v6173;
  unint64_t v6174;
  void *v6175;
  uint64_t v6176;
  uint64_t v6177;
  uint64_t v6178;
  uint64_t v6179;
  uint64_t v6180;
  uint64_t v6181;
  unint64_t v6182;
  void *v6183;
  uint64_t v6184;
  uint64_t v6185;
  uint64_t v6186;
  uint64_t v6187;
  uint64_t v6188;
  uint64_t v6189;
  unint64_t v6190;
  void *v6191;
  uint64_t v6192;
  uint64_t v6193;
  uint64_t v6194;
  uint64_t v6195;
  uint64_t v6196;
  uint64_t v6197;
  unint64_t v6198;
  void *v6199;
  uint64_t v6200;
  uint64_t v6201;
  uint64_t v6202;
  uint64_t v6203;
  uint64_t v6204;
  uint64_t v6205;
  unint64_t v6206;
  void *v6207;
  uint64_t v6208;
  uint64_t v6209;
  uint64_t v6210;
  uint64_t v6211;
  uint64_t v6212;
  uint64_t v6213;
  unint64_t v6214;
  void *v6215;
  uint64_t v6216;
  uint64_t v6217;
  uint64_t v6218;
  uint64_t v6219;
  uint64_t v6220;
  uint64_t v6221;
  unint64_t v6222;
  void *v6223;
  uint64_t v6224;
  uint64_t v6225;
  uint64_t v6226;
  uint64_t v6227;
  uint64_t v6228;
  uint64_t v6229;
  unint64_t v6230;
  void *v6231;
  uint64_t v6232;
  uint64_t v6233;
  uint64_t v6234;
  uint64_t v6235;
  uint64_t v6236;
  uint64_t v6237;
  unint64_t v6238;
  void *v6239;
  uint64_t v6240;
  uint64_t v6241;
  uint64_t v6242;
  uint64_t v6243;
  uint64_t v6244;
  uint64_t v6245;
  unint64_t v6246;
  void *v6247;
  uint64_t v6248;
  uint64_t v6249;
  uint64_t v6250;
  uint64_t v6251;
  uint64_t v6252;
  uint64_t v6253;
  unint64_t v6254;
  void *v6255;
  uint64_t v6256;
  uint64_t v6257;
  uint64_t v6258;
  uint64_t v6259;
  uint64_t v6260;
  uint64_t v6261;
  unint64_t v6262;
  void *v6263;
  uint64_t v6264;
  uint64_t v6265;
  uint64_t v6266;
  uint64_t v6267;
  uint64_t v6268;
  uint64_t v6269;
  unint64_t v6270;
  void *v6271;
  uint64_t v6272;
  uint64_t v6273;
  uint64_t v6274;
  uint64_t v6275;
  uint64_t v6276;
  uint64_t v6277;
  unint64_t v6278;
  void *v6279;
  uint64_t v6280;
  uint64_t v6281;
  uint64_t v6282;
  uint64_t v6283;
  uint64_t v6284;
  uint64_t v6285;
  unint64_t v6286;
  void *v6287;
  uint64_t v6288;
  uint64_t v6289;
  uint64_t v6290;
  uint64_t v6291;
  uint64_t v6292;
  uint64_t v6293;
  unint64_t v6294;
  void *v6295;
  uint64_t v6296;
  uint64_t v6297;
  uint64_t v6298;
  uint64_t v6299;
  uint64_t v6300;
  uint64_t v6301;
  unint64_t v6302;
  void *v6303;
  uint64_t v6304;
  uint64_t v6305;
  uint64_t v6306;
  uint64_t v6307;
  uint64_t v6308;
  uint64_t v6309;
  unint64_t v6310;
  void *v6311;
  uint64_t v6312;
  uint64_t v6313;
  uint64_t v6314;
  uint64_t v6315;
  uint64_t v6316;
  uint64_t v6317;
  unint64_t v6318;
  void *v6319;
  uint64_t v6320;
  uint64_t v6321;
  uint64_t v6322;
  uint64_t v6323;
  uint64_t v6324;
  uint64_t v6325;
  unint64_t v6326;
  void *v6327;
  uint64_t v6328;
  uint64_t v6329;
  uint64_t v6330;
  uint64_t v6331;
  uint64_t v6332;
  uint64_t v6333;
  unint64_t v6334;
  void *v6335;
  uint64_t v6336;
  uint64_t v6337;
  uint64_t v6338;
  uint64_t v6339;
  uint64_t v6340;
  uint64_t v6341;
  unint64_t v6342;
  void *v6343;
  uint64_t v6344;
  uint64_t v6345;
  uint64_t v6346;
  uint64_t v6347;
  uint64_t v6348;
  uint64_t v6349;
  unint64_t v6350;
  void *v6351;
  uint64_t v6352;
  uint64_t v6353;
  uint64_t v6354;
  uint64_t v6355;
  uint64_t v6356;
  uint64_t v6357;
  unint64_t v6358;
  void *v6359;
  uint64_t v6360;
  uint64_t v6361;
  uint64_t v6362;
  uint64_t v6363;
  uint64_t v6364;
  uint64_t v6365;
  unint64_t v6366;
  void *v6367;
  uint64_t v6368;
  uint64_t v6369;
  uint64_t v6370;
  uint64_t v6371;
  uint64_t v6372;
  uint64_t v6373;
  unint64_t v6374;
  void *v6375;
  uint64_t v6376;
  uint64_t v6377;
  uint64_t v6378;
  uint64_t v6379;
  uint64_t v6380;
  uint64_t v6381;
  unint64_t v6382;
  void *v6383;
  uint64_t v6384;
  uint64_t v6385;
  uint64_t v6386;
  uint64_t v6387;
  uint64_t v6388;
  uint64_t v6389;
  unint64_t v6390;
  void *v6391;
  uint64_t v6392;
  uint64_t v6393;
  uint64_t v6394;
  uint64_t v6395;
  uint64_t v6396;
  uint64_t v6397;
  unint64_t v6398;
  void *v6399;
  uint64_t v6400;
  uint64_t v6401;
  uint64_t v6402;
  uint64_t v6403;
  uint64_t v6404;
  uint64_t v6405;
  unint64_t v6406;
  void *v6407;
  uint64_t v6408;
  uint64_t v6409;
  uint64_t v6410;
  uint64_t v6411;
  uint64_t v6412;
  uint64_t v6413;
  unint64_t v6414;
  void *v6415;
  uint64_t v6416;
  uint64_t v6417;
  uint64_t v6418;
  uint64_t v6419;
  uint64_t v6420;
  uint64_t v6421;
  unint64_t v6422;
  void *v6423;
  uint64_t v6424;
  uint64_t v6425;
  uint64_t v6426;
  uint64_t v6427;
  uint64_t v6428;
  uint64_t v6429;
  unint64_t v6430;
  void *v6431;
  uint64_t v6432;
  uint64_t v6433;
  uint64_t v6434;
  uint64_t v6435;
  uint64_t v6436;
  uint64_t v6437;
  unint64_t v6438;
  void *v6439;
  uint64_t v6440;
  uint64_t v6441;
  uint64_t v6442;
  uint64_t v6443;
  uint64_t v6444;
  uint64_t v6445;
  unint64_t v6446;
  void *v6447;
  uint64_t v6448;
  uint64_t v6449;
  uint64_t v6450;
  uint64_t v6451;
  uint64_t v6452;
  uint64_t v6453;
  unint64_t v6454;
  void *v6455;
  uint64_t v6456;
  uint64_t v6457;
  uint64_t v6458;
  uint64_t v6459;
  uint64_t v6460;
  uint64_t v6461;
  unint64_t v6462;
  void *v6463;
  uint64_t v6464;
  uint64_t v6465;
  uint64_t v6466;
  uint64_t v6467;
  uint64_t v6468;
  uint64_t v6469;
  unint64_t v6470;
  void *v6471;
  uint64_t v6472;
  uint64_t v6473;
  uint64_t v6474;
  uint64_t v6475;
  uint64_t v6476;
  uint64_t v6477;
  unint64_t v6478;
  void *v6479;
  uint64_t v6480;
  uint64_t v6481;
  uint64_t v6482;
  uint64_t v6483;
  uint64_t v6484;
  uint64_t v6485;
  unint64_t v6486;
  void *v6487;
  uint64_t v6488;
  uint64_t v6489;
  uint64_t v6490;
  uint64_t v6491;
  uint64_t v6492;
  uint64_t v6493;
  unint64_t v6494;
  void *v6495;
  uint64_t v6496;
  uint64_t v6497;
  uint64_t v6498;
  uint64_t v6499;
  uint64_t v6500;
  uint64_t v6501;
  unint64_t v6502;
  void *v6503;
  uint64_t v6504;
  uint64_t v6505;
  uint64_t v6506;
  uint64_t v6507;
  uint64_t v6508;
  uint64_t v6509;
  unint64_t v6510;
  void *v6511;
  uint64_t v6512;
  uint64_t v6513;
  uint64_t v6514;
  uint64_t v6515;
  uint64_t v6516;
  uint64_t v6517;
  unint64_t v6518;
  void *v6519;
  uint64_t v6520;
  uint64_t v6521;
  uint64_t v6522;
  uint64_t v6523;
  uint64_t v6524;
  uint64_t v6525;
  unint64_t v6526;
  void *v6527;
  uint64_t v6528;
  uint64_t v6529;
  uint64_t v6530;
  uint64_t v6531;
  uint64_t v6532;
  uint64_t v6533;
  unint64_t v6534;
  void *v6535;
  uint64_t v6536;
  uint64_t v6537;
  uint64_t v6538;
  uint64_t v6539;
  uint64_t v6540;
  uint64_t v6541;
  unint64_t v6542;
  void *v6543;
  uint64_t v6544;
  uint64_t v6545;
  uint64_t v6546;
  uint64_t v6547;
  uint64_t v6548;
  uint64_t v6549;
  unint64_t v6550;
  void *v6551;
  uint64_t v6552;
  uint64_t v6553;
  uint64_t v6554;
  uint64_t v6555;
  uint64_t v6556;
  uint64_t v6557;
  unint64_t v6558;
  void *v6559;
  uint64_t v6560;
  uint64_t v6561;
  uint64_t v6562;
  uint64_t v6563;
  uint64_t v6564;
  uint64_t v6565;
  unint64_t v6566;
  void *v6567;
  uint64_t v6568;
  uint64_t v6569;
  uint64_t v6570;
  uint64_t v6571;
  uint64_t v6572;
  uint64_t v6573;
  unint64_t v6574;
  void *v6575;
  uint64_t v6576;
  uint64_t v6577;
  uint64_t v6578;
  uint64_t v6579;
  uint64_t v6580;
  uint64_t v6581;
  unint64_t v6582;
  void *v6583;
  uint64_t v6584;
  uint64_t v6585;
  uint64_t v6586;
  uint64_t v6587;
  uint64_t v6588;
  uint64_t v6589;
  unint64_t v6590;
  void *v6591;
  uint64_t v6592;
  uint64_t v6593;
  uint64_t v6594;
  uint64_t v6595;
  uint64_t v6596;
  uint64_t v6597;
  unint64_t v6598;
  void *v6599;
  uint64_t v6600;
  uint64_t v6601;
  uint64_t v6602;
  uint64_t v6603;
  uint64_t v6604;
  uint64_t v6605;
  unint64_t v6606;
  void *v6607;
  uint64_t v6608;
  uint64_t v6609;
  uint64_t v6610;
  uint64_t v6611;
  uint64_t v6612;
  uint64_t v6613;
  unint64_t v6614;
  void *v6615;
  uint64_t v6616;
  uint64_t v6617;
  uint64_t v6618;
  uint64_t v6619;
  uint64_t v6620;
  uint64_t v6621;
  unint64_t v6622;
  void *v6623;
  uint64_t v6624;
  uint64_t v6625;
  uint64_t v6626;
  uint64_t v6627;
  uint64_t v6628;
  uint64_t v6629;
  unint64_t v6630;
  void *v6631;
  uint64_t v6632;
  uint64_t v6633;
  uint64_t v6634;
  uint64_t v6635;
  uint64_t v6636;
  uint64_t v6637;
  unint64_t v6638;
  void *v6639;
  uint64_t v6640;
  uint64_t v6641;
  uint64_t v6642;
  uint64_t v6643;
  uint64_t v6644;
  uint64_t v6645;
  unint64_t v6646;
  void *v6647;
  uint64_t v6648;
  uint64_t v6649;
  uint64_t v6650;
  uint64_t v6651;
  uint64_t v6652;
  uint64_t v6653;
  unint64_t v6654;
  void *v6655;
  uint64_t v6656;
  uint64_t v6657;
  uint64_t v6658;
  uint64_t v6659;
  uint64_t v6660;
  uint64_t v6661;
  unint64_t v6662;
  void *v6663;
  uint64_t v6664;
  uint64_t v6665;
  uint64_t v6666;
  uint64_t v6667;
  uint64_t v6668;
  uint64_t v6669;
  unint64_t v6670;
  void *v6671;
  uint64_t v6672;
  uint64_t v6673;
  uint64_t v6674;
  uint64_t v6675;
  uint64_t v6676;
  uint64_t v6677;
  unint64_t v6678;
  void *v6679;
  uint64_t v6680;
  uint64_t v6681;
  uint64_t v6682;
  uint64_t v6683;
  uint64_t v6684;
  uint64_t v6685;
  unint64_t v6686;
  void *v6687;
  uint64_t v6688;
  uint64_t v6689;
  uint64_t v6690;
  uint64_t v6691;
  uint64_t v6692;
  uint64_t v6693;
  unint64_t v6694;
  void *v6695;
  uint64_t v6696;
  uint64_t v6697;
  uint64_t v6698;
  uint64_t v6699;
  uint64_t v6700;
  uint64_t v6701;
  unint64_t v6702;
  void *v6703;
  uint64_t v6704;
  uint64_t v6705;
  uint64_t v6706;
  uint64_t v6707;
  uint64_t v6708;
  uint64_t v6709;
  unint64_t v6710;
  void *v6711;
  uint64_t v6712;
  uint64_t v6713;
  uint64_t v6714;
  uint64_t v6715;
  uint64_t v6716;
  uint64_t v6717;
  unint64_t v6718;
  void *v6719;
  uint64_t v6720;
  uint64_t v6721;
  uint64_t v6722;
  uint64_t v6723;
  uint64_t v6724;
  uint64_t v6725;
  unint64_t v6726;
  void *v6727;
  uint64_t v6728;
  uint64_t v6729;
  uint64_t v6730;
  uint64_t v6731;
  uint64_t v6732;
  uint64_t v6733;
  unint64_t v6734;
  void *v6735;
  uint64_t v6736;
  uint64_t v6737;
  uint64_t v6738;
  uint64_t v6739;
  uint64_t v6740;
  uint64_t v6741;
  unint64_t v6742;
  void *v6743;
  uint64_t v6744;
  uint64_t v6745;
  uint64_t v6746;
  uint64_t v6747;
  uint64_t v6748;
  uint64_t v6749;
  unint64_t v6750;
  void *v6751;
  uint64_t v6752;
  uint64_t v6753;
  uint64_t v6754;
  uint64_t v6755;
  uint64_t v6756;
  uint64_t v6757;
  unint64_t v6758;
  void *v6759;
  uint64_t v6760;
  uint64_t v6761;
  uint64_t v6762;
  uint64_t v6763;
  uint64_t v6764;
  uint64_t v6765;
  unint64_t v6766;
  void *v6767;
  uint64_t v6768;
  uint64_t v6769;
  uint64_t v6770;
  uint64_t v6771;
  uint64_t v6772;
  uint64_t v6773;
  unint64_t v6774;
  void *v6775;
  uint64_t v6776;
  uint64_t v6777;
  uint64_t v6778;
  uint64_t v6779;
  uint64_t v6780;
  uint64_t v6781;
  unint64_t v6782;
  void *v6783;
  uint64_t v6784;
  uint64_t v6785;
  uint64_t v6786;
  uint64_t v6787;
  uint64_t v6788;
  uint64_t v6789;
  unint64_t v6790;
  void *v6791;
  uint64_t v6792;
  uint64_t v6793;
  uint64_t v6794;
  uint64_t v6795;
  uint64_t v6796;
  uint64_t v6797;
  unint64_t v6798;
  void *v6799;
  uint64_t v6800;
  uint64_t v6801;
  uint64_t v6802;
  uint64_t v6803;
  uint64_t v6804;
  uint64_t v6805;
  unint64_t v6806;
  void *v6807;
  uint64_t v6808;
  uint64_t v6809;
  uint64_t v6810;
  uint64_t v6811;
  uint64_t v6812;
  uint64_t v6813;
  unint64_t v6814;
  void *v6815;
  uint64_t v6816;
  uint64_t v6817;
  uint64_t v6818;
  uint64_t v6819;
  uint64_t v6820;
  uint64_t v6821;
  unint64_t v6822;
  void *v6823;
  uint64_t v6824;
  uint64_t v6825;
  uint64_t v6826;
  uint64_t v6827;
  uint64_t v6828;
  uint64_t v6829;
  unint64_t v6830;
  void *v6831;
  uint64_t v6832;
  uint64_t v6833;
  uint64_t v6834;
  uint64_t v6835;
  uint64_t v6836;
  uint64_t v6837;
  unint64_t v6838;
  void *v6839;
  uint64_t v6840;
  uint64_t v6841;
  uint64_t v6842;
  uint64_t v6843;
  uint64_t v6844;
  uint64_t v6845;
  unint64_t v6846;
  void *v6847;
  uint64_t v6848;
  uint64_t v6849;
  uint64_t v6850;
  uint64_t v6851;
  uint64_t v6852;
  uint64_t v6853;
  unint64_t v6854;
  void *v6855;
  uint64_t v6856;
  uint64_t v6857;
  uint64_t v6858;
  uint64_t v6859;
  uint64_t v6860;
  uint64_t v6861;
  unint64_t v6862;
  void *v6863;
  uint64_t v6864;
  uint64_t v6865;
  uint64_t v6866;
  uint64_t v6867;
  uint64_t v6868;
  uint64_t v6869;
  unint64_t v6870;
  void *v6871;
  uint64_t v6872;
  uint64_t v6873;
  uint64_t v6874;
  uint64_t v6875;
  uint64_t v6876;
  uint64_t v6877;
  unint64_t v6878;
  void *v6879;
  uint64_t v6880;
  uint64_t v6881;
  uint64_t v6882;
  uint64_t v6883;
  uint64_t v6884;
  uint64_t v6885;
  unint64_t v6886;
  void *v6887;
  uint64_t v6888;
  uint64_t v6889;
  uint64_t v6890;
  uint64_t v6891;
  uint64_t v6892;
  uint64_t v6893;
  unint64_t v6894;
  void *v6895;
  uint64_t v6896;
  uint64_t v6897;
  uint64_t v6898;
  uint64_t v6899;
  uint64_t v6900;
  uint64_t v6901;
  unint64_t v6902;
  void *v6903;
  uint64_t v6904;
  uint64_t v6905;
  uint64_t v6906;
  uint64_t v6907;
  uint64_t v6908;
  uint64_t v6909;
  unint64_t v6910;
  void *v6911;
  uint64_t v6912;
  uint64_t v6913;
  uint64_t v6914;
  uint64_t v6915;
  uint64_t v6916;
  uint64_t v6917;
  unint64_t v6918;
  void *v6919;
  uint64_t v6920;
  uint64_t v6921;
  uint64_t v6922;
  uint64_t v6923;
  uint64_t v6924;
  uint64_t v6925;
  unint64_t v6926;
  void *v6927;
  uint64_t v6928;
  uint64_t v6929;
  uint64_t v6930;
  uint64_t v6931;
  uint64_t v6932;
  uint64_t v6933;
  unint64_t v6934;
  void *v6935;
  uint64_t v6936;
  uint64_t v6937;
  uint64_t v6938;
  uint64_t v6939;
  uint64_t v6940;
  uint64_t v6941;
  unint64_t v6942;
  void *v6943;
  uint64_t v6944;
  uint64_t v6945;
  uint64_t v6946;
  uint64_t v6947;
  uint64_t v6948;
  uint64_t v6949;
  unint64_t v6950;
  void *v6951;
  uint64_t v6952;
  uint64_t v6953;
  uint64_t v6954;
  uint64_t v6955;
  uint64_t v6956;
  uint64_t v6957;
  unint64_t v6958;
  void *v6959;
  uint64_t v6960;
  uint64_t v6961;
  uint64_t v6962;
  uint64_t v6963;
  uint64_t v6964;
  uint64_t v6965;
  unint64_t v6966;
  void *v6967;
  uint64_t v6968;
  uint64_t v6969;
  uint64_t v6970;
  uint64_t v6971;
  uint64_t v6972;
  uint64_t v6973;
  unint64_t v6974;
  void *v6975;
  uint64_t v6976;
  uint64_t v6977;
  uint64_t v6978;
  uint64_t v6979;
  uint64_t v6980;
  uint64_t v6981;
  unint64_t v6982;
  void *v6983;
  uint64_t v6984;
  uint64_t v6985;
  uint64_t v6986;
  uint64_t v6987;
  uint64_t v6988;
  uint64_t v6989;
  unint64_t v6990;
  void *v6991;
  uint64_t v6992;
  uint64_t v6993;
  uint64_t v6994;
  uint64_t v6995;
  uint64_t v6996;
  uint64_t v6997;
  unint64_t v6998;
  void *v6999;
  uint64_t v7000;
  uint64_t v7001;
  uint64_t v7002;
  uint64_t v7003;
  uint64_t v7004;
  uint64_t v7005;
  unint64_t v7006;
  void *v7007;
  uint64_t v7008;
  uint64_t v7009;
  uint64_t v7010;
  uint64_t v7011;
  uint64_t v7012;
  uint64_t v7013;
  unint64_t v7014;
  void *v7015;
  uint64_t v7016;
  uint64_t v7017;
  uint64_t v7018;
  uint64_t v7019;
  uint64_t v7020;
  uint64_t v7021;
  unint64_t v7022;
  void *v7023;
  uint64_t v7024;
  uint64_t v7025;
  uint64_t v7026;
  uint64_t v7027;
  uint64_t v7028;
  uint64_t v7029;
  unint64_t v7030;
  void *v7031;
  uint64_t v7032;
  uint64_t v7033;
  uint64_t v7034;
  uint64_t v7035;
  uint64_t v7036;
  uint64_t v7037;
  unint64_t v7038;
  void *v7039;
  uint64_t v7040;
  uint64_t v7041;
  uint64_t v7042;
  uint64_t v7043;
  uint64_t v7044;
  uint64_t v7045;
  unint64_t v7046;
  void *v7047;
  uint64_t v7048;
  uint64_t v7049;
  uint64_t v7050;
  uint64_t v7051;
  uint64_t v7052;
  uint64_t v7053;
  unint64_t v7054;
  void *v7055;
  uint64_t v7056;
  uint64_t v7057;
  uint64_t v7058;
  uint64_t v7059;
  uint64_t v7060;
  uint64_t v7061;
  unint64_t v7062;
  void *v7063;
  uint64_t v7064;
  uint64_t v7065;
  uint64_t v7066;
  uint64_t v7067;
  uint64_t v7068;
  uint64_t v7069;
  unint64_t v7070;
  void *v7071;
  uint64_t v7072;
  uint64_t v7073;
  uint64_t v7074;
  uint64_t v7075;
  uint64_t v7076;
  uint64_t v7077;
  unint64_t v7078;
  void *v7079;
  uint64_t v7080;
  uint64_t v7081;
  uint64_t v7082;
  uint64_t v7083;
  uint64_t v7084;
  uint64_t v7085;
  unint64_t v7086;
  void *v7087;
  uint64_t v7088;
  uint64_t v7089;
  uint64_t v7090;
  uint64_t v7091;
  uint64_t v7092;
  uint64_t v7093;
  unint64_t v7094;
  void *v7095;
  uint64_t v7096;
  uint64_t v7097;
  uint64_t v7098;
  uint64_t v7099;
  uint64_t v7100;
  uint64_t v7101;
  unint64_t v7102;
  void *v7103;
  uint64_t v7104;
  uint64_t v7105;
  uint64_t v7106;
  uint64_t v7107;
  uint64_t v7108;
  uint64_t v7109;
  unint64_t v7110;
  void *v7111;
  uint64_t v7112;
  uint64_t v7113;
  uint64_t v7114;
  uint64_t v7115;
  uint64_t v7116;
  uint64_t v7117;
  unint64_t v7118;
  void *v7119;
  uint64_t v7120;
  uint64_t v7121;
  uint64_t v7122;
  uint64_t v7123;
  uint64_t v7124;
  uint64_t v7125;
  unint64_t v7126;
  void *v7127;
  uint64_t v7128;
  uint64_t v7129;
  uint64_t v7130;
  uint64_t v7131;
  uint64_t v7132;
  uint64_t v7133;
  unint64_t v7134;
  void *v7135;
  uint64_t v7136;
  uint64_t v7137;
  uint64_t v7138;
  uint64_t v7139;
  uint64_t v7140;
  uint64_t v7141;
  unint64_t v7142;
  void *v7143;
  uint64_t v7144;
  uint64_t v7145;
  uint64_t v7146;
  uint64_t v7147;
  uint64_t v7148;
  uint64_t v7149;
  unint64_t v7150;
  void *v7151;
  uint64_t v7152;
  uint64_t v7153;
  uint64_t v7154;
  uint64_t v7155;
  uint64_t v7156;
  uint64_t v7157;
  unint64_t v7158;
  void *v7159;
  uint64_t v7160;
  uint64_t v7161;
  uint64_t v7162;
  uint64_t v7163;
  uint64_t v7164;
  uint64_t v7165;
  unint64_t v7166;
  void *v7167;
  uint64_t v7168;
  uint64_t v7169;
  uint64_t v7170;
  uint64_t v7171;
  uint64_t v7172;
  uint64_t v7173;
  unint64_t v7174;
  void *v7175;
  uint64_t v7176;
  uint64_t v7177;
  uint64_t v7178;
  uint64_t v7179;
  uint64_t v7180;
  uint64_t v7181;
  unint64_t v7182;
  void *v7183;
  uint64_t v7184;
  uint64_t v7185;
  uint64_t v7186;
  uint64_t v7187;
  uint64_t v7188;
  uint64_t v7189;
  unint64_t v7190;
  void *v7191;
  uint64_t v7192;
  uint64_t v7193;
  uint64_t v7194;
  uint64_t v7195;
  uint64_t v7196;
  uint64_t v7197;
  unint64_t v7198;
  void *v7199;
  uint64_t v7200;
  uint64_t v7201;
  uint64_t v7202;
  uint64_t v7203;
  uint64_t v7204;
  uint64_t v7205;
  unint64_t v7206;
  void *v7207;
  uint64_t v7208;
  uint64_t v7209;
  uint64_t v7210;
  uint64_t v7211;
  uint64_t v7212;
  uint64_t v7213;
  unint64_t v7214;
  void *v7215;
  uint64_t v7216;
  uint64_t v7217;
  uint64_t v7218;
  uint64_t v7219;
  uint64_t v7220;
  uint64_t v7221;
  unint64_t v7222;
  void *v7223;
  uint64_t v7224;
  uint64_t v7225;
  uint64_t v7226;
  uint64_t v7227;
  uint64_t v7228;
  uint64_t v7229;
  unint64_t v7230;
  void *v7231;
  uint64_t v7232;
  uint64_t v7233;
  uint64_t v7234;
  uint64_t v7235;
  uint64_t v7236;
  uint64_t v7237;
  unint64_t v7238;
  void *v7239;
  uint64_t v7240;
  uint64_t v7241;
  uint64_t v7242;
  uint64_t v7243;
  uint64_t v7244;
  uint64_t v7245;
  unint64_t v7246;
  void *v7247;
  uint64_t v7248;
  uint64_t v7249;
  uint64_t v7250;
  uint64_t v7251;
  uint64_t v7252;
  uint64_t v7253;
  unint64_t v7254;
  void *v7255;
  uint64_t v7256;
  uint64_t v7257;
  uint64_t v7258;
  uint64_t v7259;
  uint64_t v7260;
  uint64_t v7261;
  unint64_t v7262;
  void *v7263;
  uint64_t v7264;
  uint64_t v7265;
  uint64_t v7266;
  uint64_t v7267;
  uint64_t v7268;
  uint64_t v7269;
  unint64_t v7270;
  void *v7271;
  uint64_t v7272;
  uint64_t v7273;
  uint64_t v7274;
  uint64_t v7275;
  uint64_t v7276;
  uint64_t v7277;
  unint64_t v7278;
  void *v7279;
  uint64_t v7280;
  uint64_t v7281;
  uint64_t v7282;
  uint64_t v7283;
  uint64_t v7284;
  uint64_t v7285;
  unint64_t v7286;
  void *v7287;
  uint64_t v7288;
  uint64_t v7289;
  uint64_t v7290;
  uint64_t v7291;
  uint64_t v7292;
  uint64_t v7293;
  unint64_t v7294;
  void *v7295;
  uint64_t v7296;
  uint64_t v7297;
  uint64_t v7298;
  uint64_t v7299;
  uint64_t v7300;
  uint64_t v7301;
  unint64_t v7302;
  void *v7303;
  uint64_t v7304;
  uint64_t v7305;
  uint64_t v7306;
  uint64_t v7307;
  uint64_t v7308;
  uint64_t v7309;
  unint64_t v7310;
  void *v7311;
  uint64_t v7312;
  uint64_t v7313;
  uint64_t v7314;
  uint64_t v7315;
  uint64_t v7316;
  uint64_t v7317;
  unint64_t v7318;
  void *v7319;
  uint64_t v7320;
  uint64_t v7321;
  uint64_t v7322;
  uint64_t v7323;
  uint64_t v7324;
  uint64_t v7325;
  unint64_t v7326;
  void *v7327;
  uint64_t v7328;
  uint64_t v7329;
  uint64_t v7330;
  uint64_t v7331;
  uint64_t v7332;
  uint64_t v7333;
  unint64_t v7334;
  void *v7335;
  uint64_t v7336;
  uint64_t v7337;
  uint64_t v7338;
  uint64_t v7339;
  uint64_t v7340;
  uint64_t v7341;
  unint64_t v7342;
  void *v7343;
  uint64_t v7344;
  uint64_t v7345;
  uint64_t v7346;
  uint64_t v7347;
  uint64_t v7348;
  uint64_t v7349;
  unint64_t v7350;
  void *v7351;
  uint64_t v7352;
  uint64_t v7353;
  uint64_t v7354;
  uint64_t v7355;
  uint64_t v7356;
  uint64_t v7357;
  unint64_t v7358;
  void *v7359;
  uint64_t v7360;
  uint64_t v7361;
  uint64_t v7362;
  uint64_t v7363;
  uint64_t v7364;
  uint64_t v7365;
  unint64_t v7366;
  void *v7367;
  uint64_t v7368;
  uint64_t v7369;
  uint64_t v7370;
  uint64_t v7371;
  uint64_t v7372;
  uint64_t v7373;
  unint64_t v7374;
  void *v7375;
  uint64_t v7376;
  uint64_t v7377;
  uint64_t v7378;
  uint64_t v7379;
  uint64_t v7380;
  uint64_t v7381;
  unint64_t v7382;
  void *v7383;
  uint64_t v7384;
  uint64_t v7385;
  uint64_t v7386;
  uint64_t v7387;
  uint64_t v7388;
  uint64_t v7389;
  unint64_t v7390;
  void *v7391;
  uint64_t v7392;
  uint64_t v7393;
  uint64_t v7394;
  uint64_t v7395;
  uint64_t v7396;
  uint64_t v7397;
  unint64_t v7398;
  void *v7399;
  uint64_t v7400;
  uint64_t v7401;
  uint64_t v7402;
  uint64_t v7403;
  uint64_t v7404;
  uint64_t v7405;
  unint64_t v7406;
  void *v7407;
  uint64_t v7408;
  uint64_t v7409;
  uint64_t v7410;
  uint64_t v7411;
  uint64_t v7412;
  uint64_t v7413;
  unint64_t v7414;
  void *v7415;
  uint64_t v7416;
  uint64_t v7417;
  uint64_t v7418;
  uint64_t v7419;
  uint64_t v7420;
  uint64_t v7421;
  unint64_t v7422;
  void *v7423;
  uint64_t v7424;
  uint64_t v7425;
  uint64_t v7426;
  uint64_t v7427;
  uint64_t v7428;
  uint64_t v7429;
  unint64_t v7430;
  void *v7431;
  uint64_t v7432;
  uint64_t v7433;
  uint64_t v7434;
  uint64_t v7435;
  uint64_t v7436;
  uint64_t v7437;
  unint64_t v7438;
  void *v7439;
  uint64_t v7440;
  uint64_t v7441;
  uint64_t v7442;
  uint64_t v7443;
  uint64_t v7444;
  uint64_t v7445;
  unint64_t v7446;
  void *v7447;
  uint64_t v7448;
  uint64_t v7449;
  uint64_t v7450;
  uint64_t v7451;
  uint64_t v7452;
  uint64_t v7453;
  unint64_t v7454;
  void *v7455;
  uint64_t v7456;
  uint64_t v7457;
  uint64_t v7458;
  uint64_t v7459;
  uint64_t v7460;
  uint64_t v7461;
  unint64_t v7462;
  void *v7463;
  uint64_t v7464;
  uint64_t v7465;
  uint64_t v7466;
  uint64_t v7467;
  uint64_t v7468;
  uint64_t v7469;
  unint64_t v7470;
  void *v7471;
  uint64_t v7472;
  uint64_t v7473;
  uint64_t v7474;
  uint64_t v7475;
  uint64_t v7476;
  uint64_t v7477;
  unint64_t v7478;
  void *v7479;
  uint64_t v7480;
  uint64_t v7481;
  uint64_t v7482;
  uint64_t v7483;
  uint64_t v7484;
  uint64_t v7485;
  unint64_t v7486;
  void *v7487;
  uint64_t v7488;
  uint64_t v7489;
  uint64_t v7490;
  uint64_t v7491;
  uint64_t v7492;
  uint64_t v7493;
  unint64_t v7494;
  void *v7495;
  uint64_t v7496;
  uint64_t v7497;
  uint64_t v7498;
  uint64_t v7499;
  uint64_t v7500;
  uint64_t v7501;
  unint64_t v7502;
  void *v7503;
  uint64_t v7504;
  uint64_t v7505;
  uint64_t v7506;
  uint64_t v7507;
  uint64_t v7508;
  uint64_t v7509;
  unint64_t v7510;
  void *v7511;
  uint64_t v7512;
  uint64_t v7513;
  uint64_t v7514;
  uint64_t v7515;
  uint64_t v7516;
  uint64_t v7517;
  unint64_t v7518;
  void *v7519;
  uint64_t v7520;
  uint64_t v7521;
  uint64_t v7522;
  uint64_t v7523;
  uint64_t v7524;
  uint64_t v7525;
  unint64_t v7526;
  void *v7527;
  uint64_t v7528;
  uint64_t v7529;
  uint64_t v7530;
  uint64_t v7531;
  uint64_t v7532;
  uint64_t v7533;
  unint64_t v7534;
  void *v7535;
  uint64_t v7536;
  uint64_t v7537;
  uint64_t v7538;
  uint64_t v7539;
  uint64_t v7540;
  uint64_t v7541;
  unint64_t v7542;
  void *v7543;
  uint64_t v7544;
  uint64_t v7545;
  uint64_t v7546;
  uint64_t v7547;
  uint64_t v7548;
  uint64_t v7549;
  unint64_t v7550;
  void *v7551;
  uint64_t v7552;
  uint64_t v7553;
  uint64_t v7554;
  uint64_t v7555;
  uint64_t v7556;
  uint64_t v7557;
  unint64_t v7558;
  void *v7559;
  uint64_t v7560;
  uint64_t v7561;
  uint64_t v7562;
  uint64_t v7563;
  uint64_t v7564;
  uint64_t v7565;
  unint64_t v7566;
  void *v7567;
  uint64_t v7568;
  uint64_t v7569;
  uint64_t v7570;
  uint64_t v7571;
  uint64_t v7572;
  uint64_t v7573;
  unint64_t v7574;
  void *v7575;
  uint64_t v7576;
  uint64_t v7577;
  uint64_t v7578;
  uint64_t v7579;
  uint64_t v7580;
  uint64_t v7581;
  unint64_t v7582;
  void *v7583;
  uint64_t v7584;
  uint64_t v7585;
  uint64_t v7586;
  uint64_t v7587;
  uint64_t v7588;
  uint64_t v7589;
  unint64_t v7590;
  void *v7591;
  uint64_t v7592;
  uint64_t v7593;
  uint64_t v7594;
  uint64_t v7595;
  uint64_t v7596;
  uint64_t v7597;
  unint64_t v7598;
  void *v7599;
  uint64_t v7600;
  uint64_t v7601;
  uint64_t v7602;
  uint64_t v7603;
  uint64_t v7604;
  uint64_t v7605;
  unint64_t v7606;
  void *v7607;
  uint64_t v7608;
  uint64_t v7609;
  uint64_t v7610;
  uint64_t v7611;
  uint64_t v7612;
  uint64_t v7613;
  unint64_t v7614;
  void *v7615;
  uint64_t v7616;
  uint64_t v7617;
  uint64_t v7618;
  uint64_t v7619;
  uint64_t v7620;
  uint64_t v7621;
  unint64_t v7622;
  void *v7623;
  uint64_t v7624;
  uint64_t v7625;
  uint64_t v7626;
  uint64_t v7627;
  uint64_t v7628;
  uint64_t v7629;
  unint64_t v7630;
  void *v7631;
  uint64_t v7632;
  uint64_t v7633;
  uint64_t v7634;
  uint64_t v7635;
  uint64_t v7636;
  uint64_t v7637;
  unint64_t v7638;
  void *v7639;
  uint64_t v7640;
  uint64_t v7641;
  uint64_t v7642;
  uint64_t v7643;
  uint64_t v7644;
  uint64_t v7645;
  unint64_t v7646;
  void *v7647;
  uint64_t v7648;
  uint64_t v7649;
  uint64_t v7650;
  uint64_t v7651;
  uint64_t v7652;
  uint64_t v7653;
  unint64_t v7654;
  void *v7655;
  uint64_t v7656;
  uint64_t v7657;
  uint64_t v7658;
  uint64_t v7659;
  uint64_t v7660;
  uint64_t v7661;
  unint64_t v7662;
  void *v7663;
  uint64_t v7664;
  uint64_t v7665;
  uint64_t v7666;
  uint64_t v7667;
  uint64_t v7668;
  uint64_t v7669;
  unint64_t v7670;
  void *v7671;
  uint64_t v7672;
  uint64_t v7673;
  uint64_t v7674;
  uint64_t v7675;
  uint64_t v7676;
  uint64_t v7677;
  unint64_t v7678;
  void *v7679;
  uint64_t v7680;
  uint64_t v7681;
  uint64_t v7682;
  uint64_t v7683;
  uint64_t v7684;
  uint64_t v7685;
  unint64_t v7686;
  void *v7687;
  uint64_t v7688;
  uint64_t v7689;
  uint64_t v7690;
  uint64_t v7691;
  uint64_t v7692;
  uint64_t v7693;
  unint64_t v7694;
  void *v7695;
  uint64_t v7696;
  uint64_t v7697;
  uint64_t v7698;
  uint64_t v7699;
  uint64_t v7700;
  uint64_t v7701;
  unint64_t v7702;
  void *v7703;
  uint64_t v7704;
  uint64_t v7705;
  uint64_t v7706;
  uint64_t v7707;
  uint64_t v7708;
  uint64_t v7709;
  unint64_t v7710;
  void *v7711;
  uint64_t v7712;
  uint64_t v7713;
  uint64_t v7714;
  uint64_t v7715;
  uint64_t v7716;
  uint64_t v7717;
  unint64_t v7718;
  void *v7719;
  uint64_t v7720;
  uint64_t v7721;
  uint64_t v7722;
  uint64_t v7723;
  uint64_t v7724;
  uint64_t v7725;
  unint64_t v7726;
  void *v7727;
  uint64_t v7728;
  uint64_t v7729;
  uint64_t v7730;
  uint64_t v7731;
  uint64_t v7732;
  uint64_t v7733;
  unint64_t v7734;
  void *v7735;
  uint64_t v7736;
  uint64_t v7737;
  uint64_t v7738;
  uint64_t v7739;
  uint64_t v7740;
  uint64_t v7741;
  unint64_t v7742;
  void *v7743;
  uint64_t v7744;
  uint64_t v7745;
  uint64_t v7746;
  uint64_t v7747;
  uint64_t v7748;
  uint64_t v7749;
  unint64_t v7750;
  void *v7751;
  uint64_t v7752;
  uint64_t v7753;
  uint64_t v7754;
  uint64_t v7755;
  uint64_t v7756;
  uint64_t v7757;
  unint64_t v7758;
  void *v7759;
  uint64_t v7760;
  uint64_t v7761;
  uint64_t v7762;
  uint64_t v7763;
  uint64_t v7764;
  uint64_t v7765;
  unint64_t v7766;
  void *v7767;
  uint64_t v7768;
  uint64_t v7769;
  uint64_t v7770;
  uint64_t v7771;
  uint64_t v7772;
  uint64_t v7773;
  unint64_t v7774;
  void *v7775;
  uint64_t v7776;
  uint64_t v7777;
  uint64_t v7778;
  uint64_t v7779;
  uint64_t v7780;
  uint64_t v7781;
  unint64_t v7782;
  void *v7783;
  uint64_t v7784;
  uint64_t v7785;
  uint64_t v7786;
  uint64_t v7787;
  uint64_t v7788;
  uint64_t v7789;
  unint64_t v7790;
  void *v7791;
  uint64_t v7792;
  uint64_t v7793;
  uint64_t v7794;
  uint64_t v7795;
  uint64_t v7796;
  uint64_t v7797;
  unint64_t v7798;
  void *v7799;
  uint64_t v7800;
  uint64_t v7801;
  uint64_t v7802;
  uint64_t v7803;
  uint64_t v7804;
  uint64_t v7805;
  unint64_t v7806;
  void *v7807;
  uint64_t v7808;
  uint64_t v7809;
  uint64_t v7810;
  uint64_t v7811;
  uint64_t v7812;
  uint64_t v7813;
  unint64_t v7814;
  void *v7815;
  uint64_t v7816;
  uint64_t v7817;
  uint64_t v7818;
  uint64_t v7819;
  uint64_t v7820;
  uint64_t v7821;
  unint64_t v7822;
  void *v7823;
  uint64_t v7824;
  uint64_t v7825;
  uint64_t v7826;
  uint64_t v7827;
  uint64_t v7828;
  uint64_t v7829;
  unint64_t v7830;
  void *v7831;
  uint64_t v7832;
  uint64_t v7833;
  uint64_t v7834;
  uint64_t v7835;
  uint64_t v7836;
  uint64_t v7837;
  unint64_t v7838;
  void *v7839;
  uint64_t v7840;
  uint64_t v7841;
  uint64_t v7842;
  uint64_t v7843;
  uint64_t v7844;
  uint64_t v7845;
  unint64_t v7846;
  void *v7847;
  uint64_t v7848;
  uint64_t v7849;
  uint64_t v7850;
  uint64_t v7851;
  uint64_t v7852;
  uint64_t v7853;
  unint64_t v7854;
  void *v7855;
  uint64_t v7856;
  uint64_t v7857;
  uint64_t v7858;
  uint64_t v7859;
  uint64_t v7860;
  uint64_t v7861;
  unint64_t v7862;
  void *v7863;
  uint64_t v7864;
  uint64_t v7865;
  uint64_t v7866;
  uint64_t v7867;
  uint64_t v7868;
  uint64_t v7869;
  unint64_t v7870;
  void *v7871;
  uint64_t v7872;
  uint64_t v7873;
  uint64_t v7874;
  uint64_t v7875;
  uint64_t v7876;
  uint64_t v7877;
  unint64_t v7878;
  void *v7879;
  uint64_t v7880;
  uint64_t v7881;
  uint64_t v7882;
  uint64_t v7883;
  uint64_t v7884;
  uint64_t v7885;
  unint64_t v7886;
  void *v7887;
  uint64_t v7888;
  uint64_t v7889;
  uint64_t v7890;
  uint64_t v7891;
  uint64_t v7892;
  uint64_t v7893;
  unint64_t v7894;
  void *v7895;
  uint64_t v7896;
  uint64_t v7897;
  uint64_t v7898;
  uint64_t v7899;
  uint64_t v7900;
  uint64_t v7901;
  unint64_t v7902;
  void *v7903;
  uint64_t v7904;
  uint64_t v7905;
  uint64_t v7906;
  uint64_t v7907;
  uint64_t v7908;
  uint64_t v7909;
  unint64_t v7910;
  void *v7911;
  uint64_t v7912;
  uint64_t v7913;
  uint64_t v7914;
  uint64_t v7915;
  uint64_t v7916;
  uint64_t v7917;
  unint64_t v7918;
  void *v7919;
  uint64_t v7920;
  uint64_t v7921;
  uint64_t v7922;
  uint64_t v7923;
  uint64_t v7924;
  uint64_t v7925;
  unint64_t v7926;
  void *v7927;
  uint64_t v7928;
  uint64_t v7929;
  uint64_t v7930;
  uint64_t v7931;
  uint64_t v7932;
  uint64_t v7933;
  unint64_t v7934;
  void *v7935;
  uint64_t v7936;
  uint64_t v7937;
  uint64_t v7938;
  uint64_t v7939;
  uint64_t v7940;
  uint64_t v7941;
  unint64_t v7942;
  void *v7943;
  uint64_t v7944;
  uint64_t v7945;
  uint64_t v7946;
  uint64_t v7947;
  uint64_t v7948;
  uint64_t v7949;
  unint64_t v7950;
  void *v7951;
  uint64_t v7952;
  uint64_t v7953;
  uint64_t v7954;
  uint64_t v7955;
  uint64_t v7956;
  uint64_t v7957;
  unint64_t v7958;
  void *v7959;
  uint64_t v7960;
  uint64_t v7961;
  uint64_t v7962;
  uint64_t v7963;
  uint64_t v7964;
  uint64_t v7965;
  unint64_t v7966;
  void *v7967;
  uint64_t v7968;
  uint64_t v7969;
  uint64_t v7970;
  uint64_t v7971;
  uint64_t v7972;
  uint64_t v7973;
  unint64_t v7974;
  void *v7975;
  uint64_t v7976;
  uint64_t v7977;
  uint64_t v7978;
  uint64_t v7979;
  uint64_t v7980;
  uint64_t v7981;
  unint64_t v7982;
  void *v7983;
  uint64_t v7984;
  uint64_t v7985;
  uint64_t v7986;
  uint64_t v7987;
  uint64_t v7988;
  uint64_t v7989;
  unint64_t v7990;
  void *v7991;
  uint64_t v7992;
  uint64_t v7993;
  uint64_t v7994;
  uint64_t v7995;
  uint64_t v7996;
  uint64_t v7997;
  unint64_t v7998;
  void *v7999;
  uint64_t v8000;
  uint64_t v8001;
  uint64_t v8002;
  uint64_t v8003;
  uint64_t v8004;
  uint64_t v8005;
  unint64_t v8006;
  void *v8007;
  uint64_t v8008;
  uint64_t v8009;
  uint64_t v8010;
  uint64_t v8011;
  uint64_t v8012;
  uint64_t v8013;
  unint64_t v8014;
  void *v8015;
  uint64_t v8016;
  uint64_t v8017;
  uint64_t v8018;
  uint64_t v8019;
  uint64_t v8020;
  uint64_t v8021;
  unint64_t v8022;
  void *v8023;
  uint64_t v8024;
  uint64_t v8025;
  uint64_t v8026;
  uint64_t v8027;
  uint64_t v8028;
  uint64_t v8029;
  unint64_t v8030;
  void *v8031;
  uint64_t v8032;
  uint64_t v8033;
  uint64_t v8034;
  uint64_t v8035;
  uint64_t v8036;
  uint64_t v8037;
  unint64_t v8038;
  void *v8039;
  uint64_t v8040;
  uint64_t v8041;
  uint64_t v8042;
  uint64_t v8043;
  uint64_t v8044;
  uint64_t v8045;
  unint64_t v8046;
  void *v8047;
  uint64_t v8048;
  uint64_t v8049;
  uint64_t v8050;
  uint64_t v8051;
  uint64_t v8052;
  uint64_t v8053;
  unint64_t v8054;
  void *v8055;
  uint64_t v8056;
  uint64_t v8057;
  uint64_t v8058;
  uint64_t v8059;
  uint64_t v8060;
  uint64_t v8061;
  unint64_t v8062;
  void *v8063;
  uint64_t v8064;
  uint64_t v8065;
  uint64_t v8066;
  uint64_t v8067;
  uint64_t v8068;
  uint64_t v8069;
  unint64_t v8070;
  void *v8071;
  uint64_t v8072;
  uint64_t v8073;
  uint64_t v8074;
  uint64_t v8075;
  uint64_t v8076;
  uint64_t v8077;
  unint64_t v8078;
  void *v8079;
  uint64_t v8080;
  uint64_t v8081;
  uint64_t v8082;
  uint64_t v8083;
  uint64_t v8084;
  uint64_t v8085;
  unint64_t v8086;
  void *v8087;
  uint64_t v8088;
  uint64_t v8089;
  uint64_t v8090;
  uint64_t v8091;
  uint64_t v8092;
  uint64_t v8093;
  unint64_t v8094;
  void *v8095;
  uint64_t v8096;
  uint64_t v8097;
  uint64_t v8098;
  uint64_t v8099;
  uint64_t v8100;
  uint64_t v8101;
  unint64_t v8102;
  void *v8103;
  uint64_t v8104;
  uint64_t v8105;
  uint64_t v8106;
  uint64_t v8107;
  uint64_t v8108;
  uint64_t v8109;
  unint64_t v8110;
  void *v8111;
  uint64_t v8112;
  uint64_t v8113;
  uint64_t v8114;
  uint64_t v8115;
  uint64_t v8116;
  uint64_t v8117;
  unint64_t v8118;
  void *v8119;
  uint64_t v8120;
  uint64_t v8121;
  uint64_t v8122;
  uint64_t v8123;
  uint64_t v8124;
  uint64_t v8125;
  unint64_t v8126;
  void *v8127;
  uint64_t v8128;
  uint64_t v8129;
  uint64_t v8130;
  uint64_t v8131;
  uint64_t v8132;
  uint64_t v8133;
  unint64_t v8134;
  void *v8135;
  uint64_t v8136;
  uint64_t v8137;
  uint64_t v8138;
  uint64_t v8139;
  uint64_t v8140;
  uint64_t v8141;
  unint64_t v8142;
  void *v8143;
  uint64_t v8144;
  uint64_t v8145;
  uint64_t v8146;
  uint64_t v8147;
  uint64_t v8148;
  uint64_t v8149;
  unint64_t v8150;
  void *v8151;
  uint64_t v8152;
  uint64_t v8153;
  uint64_t v8154;
  uint64_t v8155;
  uint64_t v8156;
  uint64_t v8157;
  unint64_t v8158;
  void *v8159;
  uint64_t v8160;
  uint64_t v8161;
  uint64_t v8162;
  uint64_t v8163;
  uint64_t v8164;
  uint64_t v8165;
  unint64_t v8166;
  void *v8167;
  uint64_t v8168;
  uint64_t v8169;
  uint64_t v8170;
  uint64_t v8171;
  uint64_t v8172;
  uint64_t v8173;
  unint64_t v8174;
  void *v8175;
  uint64_t v8176;
  uint64_t v8177;
  uint64_t v8178;
  uint64_t v8179;
  uint64_t v8180;
  uint64_t v8181;
  unint64_t v8182;
  void *v8183;
  uint64_t v8184;
  uint64_t v8185;
  uint64_t v8186;
  uint64_t v8187;
  uint64_t v8188;
  uint64_t v8189;
  unint64_t v8190;
  void *v8191;
  uint64_t v8192;
  uint64_t v8193;
  uint64_t v8194;
  uint64_t v8195;
  uint64_t v8196;
  uint64_t v8197;
  unint64_t v8198;
  void *v8199;
  uint64_t v8200;
  uint64_t v8201;
  uint64_t v8202;
  uint64_t v8203;
  uint64_t v8204;
  uint64_t v8205;
  unint64_t v8206;
  void *v8207;
  uint64_t v8208;
  uint64_t v8209;
  uint64_t v8210;
  uint64_t v8211;
  uint64_t v8212;
  uint64_t v8213;
  unint64_t v8214;
  void *v8215;
  uint64_t v8216;
  uint64_t v8217;
  uint64_t v8218;
  uint64_t v8219;
  uint64_t v8220;
  uint64_t v8221;
  unint64_t v8222;
  void *v8223;
  uint64_t v8224;
  uint64_t v8225;
  uint64_t v8226;
  uint64_t v8227;
  uint64_t v8228;
  uint64_t v8229;
  unint64_t v8230;
  void *v8231;
  uint64_t v8232;
  uint64_t v8233;
  uint64_t v8234;
  uint64_t v8235;
  uint64_t v8236;
  uint64_t v8237;
  unint64_t v8238;
  void *v8239;
  uint64_t v8240;
  uint64_t v8241;
  uint64_t v8242;
  uint64_t v8243;
  uint64_t v8244;
  uint64_t v8245;
  unint64_t v8246;
  void *v8247;
  uint64_t v8248;
  uint64_t v8249;
  uint64_t v8250;
  uint64_t v8251;
  uint64_t v8252;
  uint64_t v8253;
  unint64_t v8254;
  void *v8255;
  uint64_t v8256;
  uint64_t v8257;
  uint64_t v8258;
  uint64_t v8259;
  uint64_t v8260;
  uint64_t v8261;
  unint64_t v8262;
  void *v8263;
  uint64_t v8264;
  uint64_t v8265;
  uint64_t v8266;
  uint64_t v8267;
  uint64_t v8268;
  uint64_t v8269;
  uint64_t *v8270;
  uint64_t v8271;
  uint64_t *v8272;
  uint64_t v8273;
  uint64_t *v8274;
  uint64_t v8275;
  uint64_t *v8276;
  uint64_t v8277;
  uint64_t *v8278;
  uint64_t v8279;
  uint64_t *v8280;
  uint64_t v8281;
  uint64_t *v8282;
  uint64_t v8283;
  uint64_t *v8284;
  uint64_t v8285;
  uint64_t *v8286;
  uint64_t v8287;
  uint64_t *v8288;
  uint64_t v8289;
  uint64_t *v8290;
  uint64_t v8291;
  uint64_t *v8292;
  uint64_t v8293;
  uint64_t *v8294;
  uint64_t v8295;
  uint64_t *v8296;
  uint64_t v8297;
  uint64_t *v8298;
  uint64_t v8299;
  uint64_t *v8300;
  uint64_t v8301;
  uint64_t *v8302;
  uint64_t v8303;
  uint64_t *v8304;
  uint64_t v8305;
  uint64_t *v8306;
  uint64_t v8307;
  uint64_t *v8308;
  uint64_t v8309;
  uint64_t *v8310;
  uint64_t v8311;
  uint64_t *v8312;
  uint64_t v8313;
  uint64_t *v8314;
  uint64_t v8315;
  uint64_t *v8316;
  uint64_t v8317;
  uint64_t *v8318;
  uint64_t v8319;
  uint64_t *v8320;
  uint64_t v8321;
  uint64_t *v8322;
  uint64_t v8323;
  uint64_t *v8324;
  uint64_t v8325;
  uint64_t *v8326;
  uint64_t v8327;
  uint64_t *v8328;
  uint64_t v8329;
  uint64_t *v8330;
  uint64_t v8331;
  uint64_t *v8332;
  uint64_t v8333;
  uint64_t *v8334;
  uint64_t v8335;
  uint64_t *v8336;
  uint64_t v8337;
  uint64_t *v8338;
  uint64_t v8339;
  uint64_t *v8340;
  uint64_t v8341;
  uint64_t *v8342;
  uint64_t v8343;
  uint64_t *v8344;
  uint64_t v8345;
  uint64_t *v8346;
  uint64_t v8347;
  uint64_t *v8348;
  uint64_t v8349;
  uint64_t *v8350;
  uint64_t v8351;
  uint64_t *v8352;
  uint64_t v8353;
  uint64_t *v8354;
  uint64_t v8355;
  uint64_t *v8356;
  uint64_t v8357;
  uint64_t *v8358;
  uint64_t v8359;
  uint64_t *v8360;
  uint64_t v8361;
  uint64_t *v8362;
  uint64_t v8363;
  uint64_t *v8364;
  uint64_t v8365;
  uint64_t *v8366;
  uint64_t v8367;
  uint64_t *v8368;
  uint64_t v8369;
  uint64_t *v8370;
  uint64_t v8371;
  uint64_t *v8372;
  uint64_t v8373;
  uint64_t *v8374;
  uint64_t v8375;
  uint64_t *v8376;
  uint64_t v8377;
  uint64_t *v8378;
  uint64_t v8379;
  uint64_t *v8380;
  uint64_t v8381;
  uint64_t *v8382;
  uint64_t v8383;
  uint64_t *v8384;
  uint64_t v8385;
  WTF::StringImpl *v8386[3];
  void *v8387;
  uint64_t v8388;
  char v8389;
  WTF::StringImpl *v8390;

  *(_QWORD *)this = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  v9 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  JSC::Symbols::argumentPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::argumentPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_argument;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)this + 8, (uint64_t)&v8390, (uint64_t)&v8387, a5, a6, a7, a8);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v5478, v5479, v5480, v5481, v5482, v5483, v5484, v5485);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::argumentPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::argumentPrivateName, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693);
  }
  else
  {
    JSC::Symbols::argumentPrivateName[0] -= 2;
  }
  JSC::Symbols::argumentCountPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::argumentCountPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_argumentCount;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v13, v14, v15, v16);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v5486, v5487, v5488, v5489, v5490, v5491, v5492, v5493);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::argumentCountPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::argumentCountPrivateName, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701);
  }
  else
  {
    JSC::Symbols::argumentCountPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayPushPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::arrayPushPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayPush;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v20, v21, v22, v23);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v5494, v5495, v5496, v5497, v5498, v5499, v5500, v5501);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::arrayPushPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayPushPrivateName, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709);
  }
  else
  {
    JSC::Symbols::arrayPushPrivateName[0] -= 2;
  }
  JSC::Symbols::getByIdDirectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getByIdDirect;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v27, v28, v29, v30);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v5502, v5503, v5504, v5505, v5506, v5507, v5508, v5509);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getByIdDirectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivateName, v31, v32, v33, v34, v35, v36, v37);
    WTF::fastFree(v2710, v2711, v2712, v2713, v2714, v2715, v2716, v2717);
  }
  else
  {
    JSC::Symbols::getByIdDirectPrivateName[0] -= 2;
  }
  JSC::Symbols::getByIdDirectPrivatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getByIdDirectPrivate;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v34, v35, v36, v37);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getByIdDirectPrivatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getByIdDirectPrivatePrivateName, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v2718, v2719, v2720, v2721, v2722, v2723, v2724, v2725);
  }
  else
  {
    JSC::Symbols::getByIdDirectPrivatePrivateName[0] -= 2;
  }
  JSC::Symbols::getByValWithThisPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getByValWithThisPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getByValWithThis;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v41, v42, v43, v44);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v5518, v5519, v5520, v5521, v5522, v5523, v5524, v5525);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getByValWithThisPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getByValWithThisPrivateName, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v2726, v2727, v2728, v2729, v2730, v2731, v2732, v2733);
  }
  else
  {
    JSC::Symbols::getByValWithThisPrivateName[0] -= 2;
  }
  JSC::Symbols::getPrototypeOfPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getPrototypeOf;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v48, v49, v50, v51);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v5526, v5527, v5528, v5529, v5530, v5531, v5532, v5533);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getPrototypeOfPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v2734, v2735, v2736, v2737, v2738, v2739, v2740, v2741);
  }
  else
  {
    JSC::Symbols::getPrototypeOfPrivateName[0] -= 2;
  }
  JSC::Symbols::getPromiseInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getPromiseInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getPromiseInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v55, v56, v57, v58);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v5534, v5535, v5536, v5537, v5538, v5539, v5540, v5541);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getPromiseInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getPromiseInternalFieldPrivateName, v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v2742, v2743, v2744, v2745, v2746, v2747, v2748, v2749);
  }
  else
  {
    JSC::Symbols::getPromiseInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getGeneratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getGeneratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getGeneratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v62, v63, v64, v65);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v5542, v5543, v5544, v5545, v5546, v5547, v5548, v5549);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getGeneratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getGeneratorInternalFieldPrivateName, v66, v67, v68, v69, v70, v71, v72);
    WTF::fastFree(v2750, v2751, v2752, v2753, v2754, v2755, v2756, v2757);
  }
  else
  {
    JSC::Symbols::getGeneratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getAsyncGeneratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v69, v70, v71, v72);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v5550, v5551, v5552, v5553, v5554, v5555, v5556, v5557);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName, v73, v74, v75, v76, v77, v78, v79);
    WTF::fastFree(v2758, v2759, v2760, v2761, v2762, v2763, v2764, v2765);
  }
  else
  {
    JSC::Symbols::getAsyncGeneratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getAbstractModuleRecordInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v76, v77, v78, v79);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v5558, v5559, v5560, v5561, v5562, v5563, v5564, v5565);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName, v80, v81, v82, v83, v84, v85, v86);
    WTF::fastFree(v2766, v2767, v2768, v2769, v2770, v2771, v2772, v2773);
  }
  else
  {
    JSC::Symbols::getAbstractModuleRecordInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getArrayIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getArrayIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getArrayIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v83, v84, v85, v86);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v5566, v5567, v5568, v5569, v5570, v5571, v5572, v5573);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getArrayIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getArrayIteratorInternalFieldPrivateName, v87, v88, v89, v90, v91, v92, v93);
    WTF::fastFree(v2774, v2775, v2776, v2777, v2778, v2779, v2780, v2781);
  }
  else
  {
    JSC::Symbols::getArrayIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getStringIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getStringIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getStringIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v90, v91, v92, v93);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v5574, v5575, v5576, v5577, v5578, v5579, v5580, v5581);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getStringIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getStringIteratorInternalFieldPrivateName, v94, v95, v96, v97, v98, v99, v100);
    WTF::fastFree(v2782, v2783, v2784, v2785, v2786, v2787, v2788, v2789);
  }
  else
  {
    JSC::Symbols::getStringIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getMapIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getMapIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getMapIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v97, v98, v99, v100);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v5582, v5583, v5584, v5585, v5586, v5587, v5588, v5589);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getMapIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getMapIteratorInternalFieldPrivateName, v101, v102, v103, v104, v105, v106, v107);
    WTF::fastFree(v2790, v2791, v2792, v2793, v2794, v2795, v2796, v2797);
  }
  else
  {
    JSC::Symbols::getMapIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getSetIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getSetIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getSetIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v104, v105, v106, v107);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v5590, v5591, v5592, v5593, v5594, v5595, v5596, v5597);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getSetIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getSetIteratorInternalFieldPrivateName, v108, v109, v110, v111, v112, v113, v114);
    WTF::fastFree(v2798, v2799, v2800, v2801, v2802, v2803, v2804, v2805);
  }
  else
  {
    JSC::Symbols::getSetIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::getProxyInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::getProxyInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_getProxyInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v111, v112, v113, v114);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v5598, v5599, v5600, v5601, v5602, v5603, v5604, v5605);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::getProxyInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getProxyInternalFieldPrivateName, v115, v116, v117, v118, v119, v120, v121);
    WTF::fastFree(v2806, v2807, v2808, v2809, v2810, v2811, v2812, v2813);
  }
  else
  {
    JSC::Symbols::getProxyInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::idWithProfilePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::idWithProfilePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_idWithProfile;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v118, v119, v120, v121);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v5606, v5607, v5608, v5609, v5610, v5611, v5612, v5613);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::idWithProfilePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::idWithProfilePrivateName, v122, v123, v124, v125, v126, v127, v128);
    WTF::fastFree(v2814, v2815, v2816, v2817, v2818, v2819, v2820, v2821);
  }
  else
  {
    JSC::Symbols::idWithProfilePrivateName[0] -= 2;
  }
  JSC::Symbols::isObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v125, v126, v127, v128);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v129, v130, v131, v132, v133, v134, v135);
      WTF::fastFree(v5614, v5615, v5616, v5617, v5618, v5619, v5620, v5621);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isObjectPrivateName, v129, v130, v131, v132, v133, v134, v135);
    WTF::fastFree(v2822, v2823, v2824, v2825, v2826, v2827, v2828, v2829);
  }
  else
  {
    JSC::Symbols::isObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::isCallablePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isCallablePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isCallable;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v132, v133, v134, v135);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v5622, v5623, v5624, v5625, v5626, v5627, v5628, v5629);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isCallablePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isCallablePrivateName, v136, v137, v138, v139, v140, v141, v142);
    WTF::fastFree(v2830, v2831, v2832, v2833, v2834, v2835, v2836, v2837);
  }
  else
  {
    JSC::Symbols::isCallablePrivateName[0] -= 2;
  }
  JSC::Symbols::isConstructorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isConstructorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isConstructor;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v139, v140, v141, v142);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v143, v144, v145, v146, v147, v148, v149);
      WTF::fastFree(v5630, v5631, v5632, v5633, v5634, v5635, v5636, v5637);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isConstructorPrivateName, v143, v144, v145, v146, v147, v148, v149);
    WTF::fastFree(v2838, v2839, v2840, v2841, v2842, v2843, v2844, v2845);
  }
  else
  {
    JSC::Symbols::isConstructorPrivateName[0] -= 2;
  }
  JSC::Symbols::isJSArrayPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isJSArrayPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isJSArray;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v146, v147, v148, v149);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v150, v151, v152, v153, v154, v155, v156);
      WTF::fastFree(v5638, v5639, v5640, v5641, v5642, v5643, v5644, v5645);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isJSArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isJSArrayPrivateName, v150, v151, v152, v153, v154, v155, v156);
    WTF::fastFree(v2846, v2847, v2848, v2849, v2850, v2851, v2852, v2853);
  }
  else
  {
    JSC::Symbols::isJSArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::isProxyObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isProxyObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isProxyObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v153, v154, v155, v156);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v157, v158, v159, v160, v161, v162, v163);
      WTF::fastFree(v5646, v5647, v5648, v5649, v5650, v5651, v5652, v5653);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isProxyObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isProxyObjectPrivateName, v157, v158, v159, v160, v161, v162, v163);
    WTF::fastFree(v2854, v2855, v2856, v2857, v2858, v2859, v2860, v2861);
  }
  else
  {
    JSC::Symbols::isProxyObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::isDerivedArrayPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isDerivedArrayPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isDerivedArray;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v160, v161, v162, v163);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v164, v165, v166, v167, v168, v169, v170);
      WTF::fastFree(v5654, v5655, v5656, v5657, v5658, v5659, v5660, v5661);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isDerivedArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isDerivedArrayPrivateName, v164, v165, v166, v167, v168, v169, v170);
    WTF::fastFree(v2862, v2863, v2864, v2865, v2866, v2867, v2868, v2869);
  }
  else
  {
    JSC::Symbols::isDerivedArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::isGeneratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isGeneratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isGenerator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v167, v168, v169, v170);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v171, v172, v173, v174, v175, v176, v177);
      WTF::fastFree(v5662, v5663, v5664, v5665, v5666, v5667, v5668, v5669);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isGeneratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isGeneratorPrivateName, v171, v172, v173, v174, v175, v176, v177);
    WTF::fastFree(v2870, v2871, v2872, v2873, v2874, v2875, v2876, v2877);
  }
  else
  {
    JSC::Symbols::isGeneratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isAsyncGeneratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isAsyncGeneratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isAsyncGenerator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v174, v175, v176, v177);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v5670, v5671, v5672, v5673, v5674, v5675, v5676, v5677);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isAsyncGeneratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isAsyncGeneratorPrivateName, v178, v179, v180, v181, v182, v183, v184);
    WTF::fastFree(v2878, v2879, v2880, v2881, v2882, v2883, v2884, v2885);
  }
  else
  {
    JSC::Symbols::isAsyncGeneratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isPromisePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isPromisePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isPromise;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v181, v182, v183, v184);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v185, v186, v187, v188, v189, v190, v191);
      WTF::fastFree(v5678, v5679, v5680, v5681, v5682, v5683, v5684, v5685);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isPromisePrivateName, v185, v186, v187, v188, v189, v190, v191);
    WTF::fastFree(v2886, v2887, v2888, v2889, v2890, v2891, v2892, v2893);
  }
  else
  {
    JSC::Symbols::isPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::isRegExpObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isRegExpObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isRegExpObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v188, v189, v190, v191);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v192, v193, v194, v195, v196, v197, v198);
      WTF::fastFree(v5686, v5687, v5688, v5689, v5690, v5691, v5692, v5693);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isRegExpObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isRegExpObjectPrivateName, v192, v193, v194, v195, v196, v197, v198);
    WTF::fastFree(v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901);
  }
  else
  {
    JSC::Symbols::isRegExpObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::isMapPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isMapPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isMap;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v195, v196, v197, v198);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v199, v200, v201, v202, v203, v204, v205);
      WTF::fastFree(v5694, v5695, v5696, v5697, v5698, v5699, v5700, v5701);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isMapPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isMapPrivateName, v199, v200, v201, v202, v203, v204, v205);
    WTF::fastFree(v2902, v2903, v2904, v2905, v2906, v2907, v2908, v2909);
  }
  else
  {
    JSC::Symbols::isMapPrivateName[0] -= 2;
  }
  JSC::Symbols::isSetPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isSetPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isSet;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v202, v203, v204, v205);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v206, v207, v208, v209, v210, v211, v212);
      WTF::fastFree(v5702, v5703, v5704, v5705, v5706, v5707, v5708, v5709);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isSetPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isSetPrivateName, v206, v207, v208, v209, v210, v211, v212);
    WTF::fastFree(v2910, v2911, v2912, v2913, v2914, v2915, v2916, v2917);
  }
  else
  {
    JSC::Symbols::isSetPrivateName[0] -= 2;
  }
  JSC::Symbols::isShadowRealmPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isShadowRealmPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isShadowRealm;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v209, v210, v211, v212);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v213, v214, v215, v216, v217, v218, v219);
      WTF::fastFree(v5710, v5711, v5712, v5713, v5714, v5715, v5716, v5717);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isShadowRealmPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isShadowRealmPrivateName, v213, v214, v215, v216, v217, v218, v219);
    WTF::fastFree(v2918, v2919, v2920, v2921, v2922, v2923, v2924, v2925);
  }
  else
  {
    JSC::Symbols::isShadowRealmPrivateName[0] -= 2;
  }
  JSC::Symbols::isStringIteratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isStringIteratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isStringIterator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v216, v217, v218, v219);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v220, v221, v222, v223, v224, v225, v226);
      WTF::fastFree(v5718, v5719, v5720, v5721, v5722, v5723, v5724, v5725);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isStringIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isStringIteratorPrivateName, v220, v221, v222, v223, v224, v225, v226);
    WTF::fastFree(v2926, v2927, v2928, v2929, v2930, v2931, v2932, v2933);
  }
  else
  {
    JSC::Symbols::isStringIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isArrayIteratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isArrayIteratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isArrayIterator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v223, v224, v225, v226);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v227, v228, v229, v230, v231, v232, v233);
      WTF::fastFree(v5726, v5727, v5728, v5729, v5730, v5731, v5732, v5733);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isArrayIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isArrayIteratorPrivateName, v227, v228, v229, v230, v231, v232, v233);
    WTF::fastFree(v2934, v2935, v2936, v2937, v2938, v2939, v2940, v2941);
  }
  else
  {
    JSC::Symbols::isArrayIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isMapIteratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isMapIteratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isMapIterator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v230, v231, v232, v233);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v234, v235, v236, v237, v238, v239, v240);
      WTF::fastFree(v5734, v5735, v5736, v5737, v5738, v5739, v5740, v5741);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isMapIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isMapIteratorPrivateName, v234, v235, v236, v237, v238, v239, v240);
    WTF::fastFree(v2942, v2943, v2944, v2945, v2946, v2947, v2948, v2949);
  }
  else
  {
    JSC::Symbols::isMapIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isSetIteratorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isSetIteratorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isSetIterator;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v237, v238, v239, v240);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v241, v242, v243, v244, v245, v246, v247);
      WTF::fastFree(v5742, v5743, v5744, v5745, v5746, v5747, v5748, v5749);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isSetIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isSetIteratorPrivateName, v241, v242, v243, v244, v245, v246, v247);
    WTF::fastFree(v2950, v2951, v2952, v2953, v2954, v2955, v2956, v2957);
  }
  else
  {
    JSC::Symbols::isSetIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::isUndefinedOrNullPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::isUndefinedOrNullPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_isUndefinedOrNull;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v244, v245, v246, v247);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v248, v249, v250, v251, v252, v253, v254);
      WTF::fastFree(v5750, v5751, v5752, v5753, v5754, v5755, v5756, v5757);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::isUndefinedOrNullPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isUndefinedOrNullPrivateName, v248, v249, v250, v251, v252, v253, v254);
    WTF::fastFree(v2958, v2959, v2960, v2961, v2962, v2963, v2964, v2965);
  }
  else
  {
    JSC::Symbols::isUndefinedOrNullPrivateName[0] -= 2;
  }
  JSC::Symbols::tailCallForwardArgumentsPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::tailCallForwardArgumentsPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_tailCallForwardArguments;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v251, v252, v253, v254);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v255, v256, v257, v258, v259, v260, v261);
      WTF::fastFree(v5758, v5759, v5760, v5761, v5762, v5763, v5764, v5765);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::tailCallForwardArgumentsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::tailCallForwardArgumentsPrivateName, v255, v256, v257, v258, v259, v260, v261);
    WTF::fastFree(v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973);
  }
  else
  {
    JSC::Symbols::tailCallForwardArgumentsPrivateName[0] -= 2;
  }
  JSC::Symbols::throwTypeErrorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::throwTypeErrorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_throwTypeError;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v258, v259, v260, v261);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v262, v263, v264, v265, v266, v267, v268);
      WTF::fastFree(v5766, v5767, v5768, v5769, v5770, v5771, v5772, v5773);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::throwTypeErrorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::throwTypeErrorPrivateName, v262, v263, v264, v265, v266, v267, v268);
    WTF::fastFree(v2974, v2975, v2976, v2977, v2978, v2979, v2980, v2981);
  }
  else
  {
    JSC::Symbols::throwTypeErrorPrivateName[0] -= 2;
  }
  JSC::Symbols::throwRangeErrorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::throwRangeErrorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_throwRangeError;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v265, v266, v267, v268);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v269, v270, v271, v272, v273, v274, v275);
      WTF::fastFree(v5774, v5775, v5776, v5777, v5778, v5779, v5780, v5781);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::throwRangeErrorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::throwRangeErrorPrivateName, v269, v270, v271, v272, v273, v274, v275);
    WTF::fastFree(v2982, v2983, v2984, v2985, v2986, v2987, v2988, v2989);
  }
  else
  {
    JSC::Symbols::throwRangeErrorPrivateName[0] -= 2;
  }
  JSC::Symbols::throwOutOfMemoryErrorPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::throwOutOfMemoryErrorPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_throwOutOfMemoryError;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v272, v273, v274, v275);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v276, v277, v278, v279, v280, v281, v282);
      WTF::fastFree(v5782, v5783, v5784, v5785, v5786, v5787, v5788, v5789);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::throwOutOfMemoryErrorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::throwOutOfMemoryErrorPrivateName, v276, v277, v278, v279, v280, v281, v282);
    WTF::fastFree(v2990, v2991, v2992, v2993, v2994, v2995, v2996, v2997);
  }
  else
  {
    JSC::Symbols::throwOutOfMemoryErrorPrivateName[0] -= 2;
  }
  JSC::Symbols::tryGetByIdPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::tryGetByIdPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetById;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v279, v280, v281, v282);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v283, v284, v285, v286, v287, v288, v289);
      WTF::fastFree(v5790, v5791, v5792, v5793, v5794, v5795, v5796, v5797);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::tryGetByIdPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::tryGetByIdPrivateName, v283, v284, v285, v286, v287, v288, v289);
    WTF::fastFree(v2998, v2999, v3000, v3001, v3002, v3003, v3004, v3005);
  }
  else
  {
    JSC::Symbols::tryGetByIdPrivateName[0] -= 2;
  }
  JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetByIdWithWellKnownSymbol;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v286, v287, v288, v289);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v290, v291, v292, v293, v294, v295, v296);
      WTF::fastFree(v5798, v5799, v5800, v5801, v5802, v5803, v5804, v5805);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName, v290, v291, v292, v293, v294, v295, v296);
    WTF::fastFree(v3006, v3007, v3008, v3009, v3010, v3011, v3012, v3013);
  }
  else
  {
    JSC::Symbols::tryGetByIdWithWellKnownSymbolPrivateName[0] -= 2;
  }
  JSC::Symbols::putByIdDirectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putByIdDirect;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v293, v294, v295, v296);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v297, v298, v299, v300, v301, v302, v303);
      WTF::fastFree(v5806, v5807, v5808, v5809, v5810, v5811, v5812, v5813);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putByIdDirectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivateName, v297, v298, v299, v300, v301, v302, v303);
    WTF::fastFree(v3014, v3015, v3016, v3017, v3018, v3019, v3020, v3021);
  }
  else
  {
    JSC::Symbols::putByIdDirectPrivateName[0] -= 2;
  }
  JSC::Symbols::putByIdDirectPrivatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putByIdDirectPrivate;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v300, v301, v302, v303);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v304, v305, v306, v307, v308, v309, v310);
      WTF::fastFree(v5814, v5815, v5816, v5817, v5818, v5819, v5820, v5821);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putByIdDirectPrivatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putByIdDirectPrivatePrivateName, v304, v305, v306, v307, v308, v309, v310);
    WTF::fastFree(v3022, v3023, v3024, v3025, v3026, v3027, v3028, v3029);
  }
  else
  {
    JSC::Symbols::putByIdDirectPrivatePrivateName[0] -= 2;
  }
  JSC::Symbols::putByValDirectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putByValDirectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValDirect;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v307, v308, v309, v310);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v311, v312, v313, v314, v315, v316, v317);
      WTF::fastFree(v5822, v5823, v5824, v5825, v5826, v5827, v5828, v5829);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putByValDirectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putByValDirectPrivateName, v311, v312, v313, v314, v315, v316, v317);
    WTF::fastFree(v3030, v3031, v3032, v3033, v3034, v3035, v3036, v3037);
  }
  else
  {
    JSC::Symbols::putByValDirectPrivateName[0] -= 2;
  }
  JSC::Symbols::putByValWithThisSloppyPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putByValWithThisSloppyPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValWithThisSloppy;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v314, v315, v316, v317);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v318, v319, v320, v321, v322, v323, v324);
      WTF::fastFree(v5830, v5831, v5832, v5833, v5834, v5835, v5836, v5837);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putByValWithThisSloppyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putByValWithThisSloppyPrivateName, v318, v319, v320, v321, v322, v323, v324);
    WTF::fastFree(v3038, v3039, v3040, v3041, v3042, v3043, v3044, v3045);
  }
  else
  {
    JSC::Symbols::putByValWithThisSloppyPrivateName[0] -= 2;
  }
  JSC::Symbols::putByValWithThisStrictPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putByValWithThisStrictPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValWithThisStrict;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v321, v322, v323, v324);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v325, v326, v327, v328, v329, v330, v331);
      WTF::fastFree(v5838, v5839, v5840, v5841, v5842, v5843, v5844, v5845);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putByValWithThisStrictPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putByValWithThisStrictPrivateName, v325, v326, v327, v328, v329, v330, v331);
    WTF::fastFree(v3046, v3047, v3048, v3049, v3050, v3051, v3052, v3053);
  }
  else
  {
    JSC::Symbols::putByValWithThisStrictPrivateName[0] -= 2;
  }
  JSC::Symbols::putPromiseInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putPromiseInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putPromiseInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v328, v329, v330, v331);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v332, v333, v334, v335, v336, v337, v338);
      WTF::fastFree(v5846, v5847, v5848, v5849, v5850, v5851, v5852, v5853);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putPromiseInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putPromiseInternalFieldPrivateName, v332, v333, v334, v335, v336, v337, v338);
    WTF::fastFree(v3054, v3055, v3056, v3057, v3058, v3059, v3060, v3061);
  }
  else
  {
    JSC::Symbols::putPromiseInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putGeneratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putGeneratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putGeneratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v335, v336, v337, v338);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v339, v340, v341, v342, v343, v344, v345);
      WTF::fastFree(v5854, v5855, v5856, v5857, v5858, v5859, v5860, v5861);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putGeneratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putGeneratorInternalFieldPrivateName, v339, v340, v341, v342, v343, v344, v345);
    WTF::fastFree(v3062, v3063, v3064, v3065, v3066, v3067, v3068, v3069);
  }
  else
  {
    JSC::Symbols::putGeneratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putAsyncGeneratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v342, v343, v344, v345);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v346, v347, v348, v349, v350, v351, v352);
      WTF::fastFree(v5862, v5863, v5864, v5865, v5866, v5867, v5868, v5869);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName, v346, v347, v348, v349, v350, v351, v352);
    WTF::fastFree(v3070, v3071, v3072, v3073, v3074, v3075, v3076, v3077);
  }
  else
  {
    JSC::Symbols::putAsyncGeneratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putArrayIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putArrayIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putArrayIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v349, v350, v351, v352);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v353, v354, v355, v356, v357, v358, v359);
      WTF::fastFree(v5870, v5871, v5872, v5873, v5874, v5875, v5876, v5877);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putArrayIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putArrayIteratorInternalFieldPrivateName, v353, v354, v355, v356, v357, v358, v359);
    WTF::fastFree(v3078, v3079, v3080, v3081, v3082, v3083, v3084, v3085);
  }
  else
  {
    JSC::Symbols::putArrayIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putStringIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putStringIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putStringIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v356, v357, v358, v359);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v360, v361, v362, v363, v364, v365, v366);
      WTF::fastFree(v5878, v5879, v5880, v5881, v5882, v5883, v5884, v5885);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putStringIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putStringIteratorInternalFieldPrivateName, v360, v361, v362, v363, v364, v365, v366);
    WTF::fastFree(v3086, v3087, v3088, v3089, v3090, v3091, v3092, v3093);
  }
  else
  {
    JSC::Symbols::putStringIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putMapIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putMapIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putMapIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v363, v364, v365, v366);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v367, v368, v369, v370, v371, v372, v373);
      WTF::fastFree(v5886, v5887, v5888, v5889, v5890, v5891, v5892, v5893);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putMapIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putMapIteratorInternalFieldPrivateName, v367, v368, v369, v370, v371, v372, v373);
    WTF::fastFree(v3094, v3095, v3096, v3097, v3098, v3099, v3100, v3101);
  }
  else
  {
    JSC::Symbols::putMapIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::putSetIteratorInternalFieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::putSetIteratorInternalFieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_putSetIteratorInternalField;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v370, v371, v372, v373);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v374, v375, v376, v377, v378, v379, v380);
      WTF::fastFree(v5894, v5895, v5896, v5897, v5898, v5899, v5900, v5901);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::putSetIteratorInternalFieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::putSetIteratorInternalFieldPrivateName, v374, v375, v376, v377, v378, v379, v380);
    WTF::fastFree(v3102, v3103, v3104, v3105, v3106, v3107, v3108, v3109);
  }
  else
  {
    JSC::Symbols::putSetIteratorInternalFieldPrivateName[0] -= 2;
  }
  JSC::Symbols::superSamplerBeginPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::superSamplerBeginPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_superSamplerBegin;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v377, v378, v379, v380);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v381, v382, v383, v384, v385, v386, v387);
      WTF::fastFree(v5902, v5903, v5904, v5905, v5906, v5907, v5908, v5909);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::superSamplerBeginPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::superSamplerBeginPrivateName, v381, v382, v383, v384, v385, v386, v387);
    WTF::fastFree(v3110, v3111, v3112, v3113, v3114, v3115, v3116, v3117);
  }
  else
  {
    JSC::Symbols::superSamplerBeginPrivateName[0] -= 2;
  }
  JSC::Symbols::superSamplerEndPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::superSamplerEndPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_superSamplerEnd;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v384, v385, v386, v387);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v388, v389, v390, v391, v392, v393, v394);
      WTF::fastFree(v5910, v5911, v5912, v5913, v5914, v5915, v5916, v5917);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::superSamplerEndPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::superSamplerEndPrivateName, v388, v389, v390, v391, v392, v393, v394);
    WTF::fastFree(v3118, v3119, v3120, v3121, v3122, v3123, v3124, v3125);
  }
  else
  {
    JSC::Symbols::superSamplerEndPrivateName[0] -= 2;
  }
  JSC::Symbols::toNumberPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::toNumberPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_toNumber;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v391, v392, v393, v394);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v395, v396, v397, v398, v399, v400, v401);
      WTF::fastFree(v5918, v5919, v5920, v5921, v5922, v5923, v5924, v5925);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::toNumberPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toNumberPrivateName, v395, v396, v397, v398, v399, v400, v401);
    WTF::fastFree(v3126, v3127, v3128, v3129, v3130, v3131, v3132, v3133);
  }
  else
  {
    JSC::Symbols::toNumberPrivateName[0] -= 2;
  }
  JSC::Symbols::toStringPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::toStringPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_toString;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v398, v399, v400, v401);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v402, v403, v404, v405, v406, v407, v408);
      WTF::fastFree(v5926, v5927, v5928, v5929, v5930, v5931, v5932, v5933);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::toStringPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toStringPrivateName, v402, v403, v404, v405, v406, v407, v408);
    WTF::fastFree(v3134, v3135, v3136, v3137, v3138, v3139, v3140, v3141);
  }
  else
  {
    JSC::Symbols::toStringPrivateName[0] -= 2;
  }
  JSC::Symbols::toPropertyKeyPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::toPropertyKeyPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_toPropertyKey;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v405, v406, v407, v408);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v409, v410, v411, v412, v413, v414, v415);
      WTF::fastFree(v5934, v5935, v5936, v5937, v5938, v5939, v5940, v5941);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::toPropertyKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toPropertyKeyPrivateName, v409, v410, v411, v412, v413, v414, v415);
    WTF::fastFree(v3142, v3143, v3144, v3145, v3146, v3147, v3148, v3149);
  }
  else
  {
    JSC::Symbols::toPropertyKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::toObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::toObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_toObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v412, v413, v414, v415);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v416, v417, v418, v419, v420, v421, v422);
      WTF::fastFree(v5942, v5943, v5944, v5945, v5946, v5947, v5948, v5949);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::toObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toObjectPrivateName, v416, v417, v418, v419, v420, v421, v422);
    WTF::fastFree(v3150, v3151, v3152, v3153, v3154, v3155, v3156, v3157);
  }
  else
  {
    JSC::Symbols::toObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::toThisPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::toThisPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_toThis;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v419, v420, v421, v422);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v423, v424, v425, v426, v427, v428, v429);
      WTF::fastFree(v5950, v5951, v5952, v5953, v5954, v5955, v5956, v5957);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::toThisPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toThisPrivateName, v423, v424, v425, v426, v427, v428, v429);
    WTF::fastFree(v3158, v3159, v3160, v3161, v3162, v3163, v3164, v3165);
  }
  else
  {
    JSC::Symbols::toThisPrivateName[0] -= 2;
  }
  JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mustValidateResultOfProxyGetAndSetTraps;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v426, v427, v428, v429);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v430, v431, v432, v433, v434, v435, v436);
      WTF::fastFree(v5958, v5959, v5960, v5961, v5962, v5963, v5964, v5965);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName, v430, v431, v432, v433, v434, v435, v436);
    WTF::fastFree(v3166, v3167, v3168, v3169, v3170, v3171, v3172, v3173);
  }
  else
  {
    JSC::Symbols::mustValidateResultOfProxyGetAndSetTrapsPrivateName[0] -= 2;
  }
  JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mustValidateResultOfProxyTrapsExceptGetAndSet;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v433, v434, v435, v436);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v437, v438, v439, v440, v441, v442, v443);
      WTF::fastFree(v5966, v5967, v5968, v5969, v5970, v5971, v5972, v5973);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName, v437, v438, v439, v440, v441, v442, v443);
    WTF::fastFree(v3174, v3175, v3176, v3177, v3178, v3179, v3180, v3181);
  }
  else
  {
    JSC::Symbols::mustValidateResultOfProxyTrapsExceptGetAndSetPrivateName[0] -= 2;
  }
  JSC::Symbols::newArrayWithSizePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::newArrayWithSizePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_newArrayWithSize;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v440, v441, v442, v443);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v444, v445, v446, v447, v448, v449, v450);
      WTF::fastFree(v5974, v5975, v5976, v5977, v5978, v5979, v5980, v5981);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::newArrayWithSizePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newArrayWithSizePrivateName, v444, v445, v446, v447, v448, v449, v450);
    WTF::fastFree(v3182, v3183, v3184, v3185, v3186, v3187, v3188, v3189);
  }
  else
  {
    JSC::Symbols::newArrayWithSizePrivateName[0] -= 2;
  }
  JSC::Symbols::newArrayWithSpeciesPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::newArrayWithSpeciesPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_newArrayWithSpecies;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v447, v448, v449, v450);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v451, v452, v453, v454, v455, v456, v457);
      WTF::fastFree(v5982, v5983, v5984, v5985, v5986, v5987, v5988, v5989);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::newArrayWithSpeciesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newArrayWithSpeciesPrivateName, v451, v452, v453, v454, v455, v456, v457);
    WTF::fastFree(v3190, v3191, v3192, v3193, v3194, v3195, v3196, v3197);
  }
  else
  {
    JSC::Symbols::newArrayWithSpeciesPrivateName[0] -= 2;
  }
  JSC::Symbols::newPromisePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::newPromisePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_newPromise;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v454, v455, v456, v457);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v458, v459, v460, v461, v462, v463, v464);
      WTF::fastFree(v5990, v5991, v5992, v5993, v5994, v5995, v5996, v5997);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::newPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newPromisePrivateName, v458, v459, v460, v461, v462, v463, v464);
    WTF::fastFree(v3198, v3199, v3200, v3201, v3202, v3203, v3204, v3205);
  }
  else
  {
    JSC::Symbols::newPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::createPromisePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::createPromisePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_createPromise;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v461, v462, v463, v464);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v465, v466, v467, v468, v469, v470, v471);
      WTF::fastFree(v5998, v5999, v6000, v6001, v6002, v6003, v6004, v6005);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::createPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createPromisePrivateName, v465, v466, v467, v468, v469, v470, v471);
    WTF::fastFree(v3206, v3207, v3208, v3209, v3210, v3211, v3212, v3213);
  }
  else
  {
    JSC::Symbols::createPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::undefinedPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::undefinedPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_undefined;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v468, v469, v470, v471);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v472, v473, v474, v475, v476, v477, v478);
      WTF::fastFree(v6006, v6007, v6008, v6009, v6010, v6011, v6012, v6013);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::undefinedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::undefinedPrivateName, v472, v473, v474, v475, v476, v477, v478);
    WTF::fastFree(v3214, v3215, v3216, v3217, v3218, v3219, v3220, v3221);
  }
  else
  {
    JSC::Symbols::undefinedPrivateName[0] -= 2;
  }
  JSC::Symbols::InfinityPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::InfinityPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_Infinity;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v475, v476, v477, v478);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v479, v480, v481, v482, v483, v484, v485);
      WTF::fastFree(v6014, v6015, v6016, v6017, v6018, v6019, v6020, v6021);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::InfinityPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::InfinityPrivateName, v479, v480, v481, v482, v483, v484, v485);
    WTF::fastFree(v3222, v3223, v3224, v3225, v3226, v3227, v3228, v3229);
  }
  else
  {
    JSC::Symbols::InfinityPrivateName[0] -= 2;
  }
  JSC::Symbols::iterationKindKeyPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::iterationKindKeyPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindKey;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v482, v483, v484, v485);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v486, v487, v488, v489, v490, v491, v492);
      WTF::fastFree(v6022, v6023, v6024, v6025, v6026, v6027, v6028, v6029);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::iterationKindKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::iterationKindKeyPrivateName, v486, v487, v488, v489, v490, v491, v492);
    WTF::fastFree(v3230, v3231, v3232, v3233, v3234, v3235, v3236, v3237);
  }
  else
  {
    JSC::Symbols::iterationKindKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::iterationKindValuePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::iterationKindValuePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindValue;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v489, v490, v491, v492);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v493, v494, v495, v496, v497, v498, v499);
      WTF::fastFree(v6030, v6031, v6032, v6033, v6034, v6035, v6036, v6037);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::iterationKindValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::iterationKindValuePrivateName, v493, v494, v495, v496, v497, v498, v499);
    WTF::fastFree(v3238, v3239, v3240, v3241, v3242, v3243, v3244, v3245);
  }
  else
  {
    JSC::Symbols::iterationKindValuePrivateName[0] -= 2;
  }
  JSC::Symbols::iterationKindEntriesPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::iterationKindEntriesPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindEntries;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v496, v497, v498, v499);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v500, v501, v502, v503, v504, v505, v506);
      WTF::fastFree(v6038, v6039, v6040, v6041, v6042, v6043, v6044, v6045);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::iterationKindEntriesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::iterationKindEntriesPrivateName, v500, v501, v502, v503, v504, v505, v506);
    WTF::fastFree(v3246, v3247, v3248, v3249, v3250, v3251, v3252, v3253);
  }
  else
  {
    JSC::Symbols::iterationKindEntriesPrivateName[0] -= 2;
  }
  JSC::Symbols::MAX_ARRAY_INDEXPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::MAX_ARRAY_INDEXPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_ARRAY_INDEX;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v503, v504, v505, v506);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v507, v508, v509, v510, v511, v512, v513);
      WTF::fastFree(v6046, v6047, v6048, v6049, v6050, v6051, v6052, v6053);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::MAX_ARRAY_INDEXPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::MAX_ARRAY_INDEXPrivateName, v507, v508, v509, v510, v511, v512, v513);
    WTF::fastFree(v3254, v3255, v3256, v3257, v3258, v3259, v3260, v3261);
  }
  else
  {
    JSC::Symbols::MAX_ARRAY_INDEXPrivateName[0] -= 2;
  }
  JSC::Symbols::MAX_STRING_LENGTHPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::MAX_STRING_LENGTHPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_STRING_LENGTH;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v510, v511, v512, v513);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v514, v515, v516, v517, v518, v519, v520);
      WTF::fastFree(v6054, v6055, v6056, v6057, v6058, v6059, v6060, v6061);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::MAX_STRING_LENGTHPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::MAX_STRING_LENGTHPrivateName, v514, v515, v516, v517, v518, v519, v520);
    WTF::fastFree(v3262, v3263, v3264, v3265, v3266, v3267, v3268, v3269);
  }
  else
  {
    JSC::Symbols::MAX_STRING_LENGTHPrivateName[0] -= 2;
  }
  JSC::Symbols::MAX_SAFE_INTEGERPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::MAX_SAFE_INTEGERPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_SAFE_INTEGER;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v517, v518, v519, v520);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v521, v522, v523, v524, v525, v526, v527);
      WTF::fastFree(v6062, v6063, v6064, v6065, v6066, v6067, v6068, v6069);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::MAX_SAFE_INTEGERPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::MAX_SAFE_INTEGERPrivateName, v521, v522, v523, v524, v525, v526, v527);
    WTF::fastFree(v3270, v3271, v3272, v3273, v3274, v3275, v3276, v3277);
  }
  else
  {
    JSC::Symbols::MAX_SAFE_INTEGERPrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleFetchPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleFetchPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleFetch;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v524, v525, v526, v527);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v528, v529, v530, v531, v532, v533, v534);
      WTF::fastFree(v6070, v6071, v6072, v6073, v6074, v6075, v6076, v6077);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleFetchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleFetchPrivateName, v528, v529, v530, v531, v532, v533, v534);
    WTF::fastFree(v3278, v3279, v3280, v3281, v3282, v3283, v3284, v3285);
  }
  else
  {
    JSC::Symbols::ModuleFetchPrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleTranslatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleTranslatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleTranslate;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v531, v532, v533, v534);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v535, v536, v537, v538, v539, v540, v541);
      WTF::fastFree(v6078, v6079, v6080, v6081, v6082, v6083, v6084, v6085);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleTranslatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleTranslatePrivateName, v535, v536, v537, v538, v539, v540, v541);
    WTF::fastFree(v3286, v3287, v3288, v3289, v3290, v3291, v3292, v3293);
  }
  else
  {
    JSC::Symbols::ModuleTranslatePrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleInstantiatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleInstantiatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleInstantiate;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v538, v539, v540, v541);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v542, v543, v544, v545, v546, v547, v548);
      WTF::fastFree(v6086, v6087, v6088, v6089, v6090, v6091, v6092, v6093);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleInstantiatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleInstantiatePrivateName, v542, v543, v544, v545, v546, v547, v548);
    WTF::fastFree(v3294, v3295, v3296, v3297, v3298, v3299, v3300, v3301);
  }
  else
  {
    JSC::Symbols::ModuleInstantiatePrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleSatisfyPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleSatisfyPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleSatisfy;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v545, v546, v547, v548);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v549, v550, v551, v552, v553, v554, v555);
      WTF::fastFree(v6094, v6095, v6096, v6097, v6098, v6099, v6100, v6101);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleSatisfyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleSatisfyPrivateName, v549, v550, v551, v552, v553, v554, v555);
    WTF::fastFree(v3302, v3303, v3304, v3305, v3306, v3307, v3308, v3309);
  }
  else
  {
    JSC::Symbols::ModuleSatisfyPrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleLinkPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleLinkPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleLink;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v552, v553, v554, v555);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v556, v557, v558, v559, v560, v561, v562);
      WTF::fastFree(v6102, v6103, v6104, v6105, v6106, v6107, v6108, v6109);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleLinkPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleLinkPrivateName, v556, v557, v558, v559, v560, v561, v562);
    WTF::fastFree(v3310, v3311, v3312, v3313, v3314, v3315, v3316, v3317);
  }
  else
  {
    JSC::Symbols::ModuleLinkPrivateName[0] -= 2;
  }
  JSC::Symbols::ModuleReadyPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::ModuleReadyPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleReady;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v559, v560, v561, v562);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v563, v564, v565, v566, v567, v568, v569);
      WTF::fastFree(v6110, v6111, v6112, v6113, v6114, v6115, v6116, v6117);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::ModuleReadyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ModuleReadyPrivateName, v563, v564, v565, v566, v567, v568, v569);
    WTF::fastFree(v3318, v3319, v3320, v3321, v3322, v3323, v3324, v3325);
  }
  else
  {
    JSC::Symbols::ModuleReadyPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseRejectionRejectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseRejectionRejectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseRejectionReject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v566, v567, v568, v569);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v570, v571, v572, v573, v574, v575, v576);
      WTF::fastFree(v6118, v6119, v6120, v6121, v6122, v6123, v6124, v6125);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseRejectionRejectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseRejectionRejectPrivateName, v570, v571, v572, v573, v574, v575, v576);
    WTF::fastFree(v3326, v3327, v3328, v3329, v3330, v3331, v3332, v3333);
  }
  else
  {
    JSC::Symbols::promiseRejectionRejectPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseRejectionHandlePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseRejectionHandlePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseRejectionHandle;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v573, v574, v575, v576);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v577, v578, v579, v580, v581, v582, v583);
      WTF::fastFree(v6126, v6127, v6128, v6129, v6130, v6131, v6132, v6133);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseRejectionHandlePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseRejectionHandlePrivateName, v577, v578, v579, v580, v581, v582, v583);
    WTF::fastFree(v3334, v3335, v3336, v3337, v3338, v3339, v3340, v3341);
  }
  else
  {
    JSC::Symbols::promiseRejectionHandlePrivateName[0] -= 2;
  }
  JSC::Symbols::promiseStatePendingPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseStatePendingPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStatePending;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v580, v581, v582, v583);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v584, v585, v586, v587, v588, v589, v590);
      WTF::fastFree(v6134, v6135, v6136, v6137, v6138, v6139, v6140, v6141);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseStatePendingPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseStatePendingPrivateName, v584, v585, v586, v587, v588, v589, v590);
    WTF::fastFree(v3342, v3343, v3344, v3345, v3346, v3347, v3348, v3349);
  }
  else
  {
    JSC::Symbols::promiseStatePendingPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseStateFulfilledPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseStateFulfilledPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateFulfilled;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v587, v588, v589, v590);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v591, v592, v593, v594, v595, v596, v597);
      WTF::fastFree(v6142, v6143, v6144, v6145, v6146, v6147, v6148, v6149);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseStateFulfilledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseStateFulfilledPrivateName, v591, v592, v593, v594, v595, v596, v597);
    WTF::fastFree(v3350, v3351, v3352, v3353, v3354, v3355, v3356, v3357);
  }
  else
  {
    JSC::Symbols::promiseStateFulfilledPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseStateRejectedPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseStateRejectedPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateRejected;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v594, v595, v596, v597);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v598, v599, v600, v601, v602, v603, v604);
      WTF::fastFree(v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseStateRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseStateRejectedPrivateName, v598, v599, v600, v601, v602, v603, v604);
    WTF::fastFree(v3358, v3359, v3360, v3361, v3362, v3363, v3364, v3365);
  }
  else
  {
    JSC::Symbols::promiseStateRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseStateMaskPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseStateMaskPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateMask;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v601, v602, v603, v604);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v605, v606, v607, v608, v609, v610, v611);
      WTF::fastFree(v6158, v6159, v6160, v6161, v6162, v6163, v6164, v6165);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseStateMaskPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseStateMaskPrivateName, v605, v606, v607, v608, v609, v610, v611);
    WTF::fastFree(v3366, v3367, v3368, v3369, v3370, v3371, v3372, v3373);
  }
  else
  {
    JSC::Symbols::promiseStateMaskPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseFlagsIsHandledPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseFlagsIsHandledPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFlagsIsHandled;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v608, v609, v610, v611);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v612, v613, v614, v615, v616, v617, v618);
      WTF::fastFree(v6166, v6167, v6168, v6169, v6170, v6171, v6172, v6173);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseFlagsIsHandledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseFlagsIsHandledPrivateName, v612, v613, v614, v615, v616, v617, v618);
    WTF::fastFree(v3374, v3375, v3376, v3377, v3378, v3379, v3380, v3381);
  }
  else
  {
    JSC::Symbols::promiseFlagsIsHandledPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFlagsIsFirstResolvingFunctionCalled;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v615, v616, v617, v618);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v619, v620, v621, v622, v623, v624, v625);
      WTF::fastFree(v6174, v6175, v6176, v6177, v6178, v6179, v6180, v6181);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName, v619, v620, v621, v622, v623, v624, v625);
    WTF::fastFree(v3382, v3383, v3384, v3385, v3386, v3387, v3388, v3389);
  }
  else
  {
    JSC::Symbols::promiseFlagsIsFirstResolvingFunctionCalledPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseFieldFlagsPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseFieldFlagsPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldFlags;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v622, v623, v624, v625);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v626, v627, v628, v629, v630, v631, v632);
      WTF::fastFree(v6182, v6183, v6184, v6185, v6186, v6187, v6188, v6189);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseFieldFlagsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseFieldFlagsPrivateName, v626, v627, v628, v629, v630, v631, v632);
    WTF::fastFree(v3390, v3391, v3392, v3393, v3394, v3395, v3396, v3397);
  }
  else
  {
    JSC::Symbols::promiseFieldFlagsPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseFieldReactionsOrResultPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::promiseFieldReactionsOrResultPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldReactionsOrResult;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v629, v630, v631, v632);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v633, v634, v635, v636, v637, v638, v639);
      WTF::fastFree(v6190, v6191, v6192, v6193, v6194, v6195, v6196, v6197);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::promiseFieldReactionsOrResultPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseFieldReactionsOrResultPrivateName, v633, v634, v635, v636, v637, v638, v639);
    WTF::fastFree(v3398, v3399, v3400, v3401, v3402, v3403, v3404, v3405);
  }
  else
  {
    JSC::Symbols::promiseFieldReactionsOrResultPrivateName[0] -= 2;
  }
  JSC::Symbols::proxyFieldTargetPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::proxyFieldTargetPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldTarget;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v636, v637, v638, v639);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v640, v641, v642, v643, v644, v645, v646);
      WTF::fastFree(v6198, v6199, v6200, v6201, v6202, v6203, v6204, v6205);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::proxyFieldTargetPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::proxyFieldTargetPrivateName, v640, v641, v642, v643, v644, v645, v646);
    WTF::fastFree(v3406, v3407, v3408, v3409, v3410, v3411, v3412, v3413);
  }
  else
  {
    JSC::Symbols::proxyFieldTargetPrivateName[0] -= 2;
  }
  JSC::Symbols::proxyFieldHandlerPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::proxyFieldHandlerPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldHandler;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v643, v644, v645, v646);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v647, v648, v649, v650, v651, v652, v653);
      WTF::fastFree(v6206, v6207, v6208, v6209, v6210, v6211, v6212, v6213);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::proxyFieldHandlerPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::proxyFieldHandlerPrivateName, v647, v648, v649, v650, v651, v652, v653);
    WTF::fastFree(v3414, v3415, v3416, v3417, v3418, v3419, v3420, v3421);
  }
  else
  {
    JSC::Symbols::proxyFieldHandlerPrivateName[0] -= 2;
  }
  JSC::Symbols::generatorFieldStatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::generatorFieldStatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldState;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v650, v651, v652, v653);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v654, v655, v656, v657, v658, v659, v660);
      WTF::fastFree(v6214, v6215, v6216, v6217, v6218, v6219, v6220, v6221);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::generatorFieldStatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorFieldStatePrivateName, v654, v655, v656, v657, v658, v659, v660);
    WTF::fastFree(v3422, v3423, v3424, v3425, v3426, v3427, v3428, v3429);
  }
  else
  {
    JSC::Symbols::generatorFieldStatePrivateName[0] -= 2;
  }
  JSC::Symbols::generatorFieldNextPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::generatorFieldNextPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldNext;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v657, v658, v659, v660);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v661, v662, v663, v664, v665, v666, v667);
      WTF::fastFree(v6222, v6223, v6224, v6225, v6226, v6227, v6228, v6229);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::generatorFieldNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorFieldNextPrivateName, v661, v662, v663, v664, v665, v666, v667);
    WTF::fastFree(v3430, v3431, v3432, v3433, v3434, v3435, v3436, v3437);
  }
  else
  {
    JSC::Symbols::generatorFieldNextPrivateName[0] -= 2;
  }
  JSC::Symbols::generatorFieldThisPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::generatorFieldThisPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldThis;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v664, v665, v666, v667);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v668, v669, v670, v671, v672, v673, v674);
      WTF::fastFree(v6230, v6231, v6232, v6233, v6234, v6235, v6236, v6237);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::generatorFieldThisPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorFieldThisPrivateName, v668, v669, v670, v671, v672, v673, v674);
    WTF::fastFree(v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445);
  }
  else
  {
    JSC::Symbols::generatorFieldThisPrivateName[0] -= 2;
  }
  JSC::Symbols::generatorFieldFramePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::generatorFieldFramePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldFrame;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v671, v672, v673, v674);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v675, v676, v677, v678, v679, v680, v681);
      WTF::fastFree(v6238, v6239, v6240, v6241, v6242, v6243, v6244, v6245);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::generatorFieldFramePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorFieldFramePrivateName, v675, v676, v677, v678, v679, v680, v681);
    WTF::fastFree(v3446, v3447, v3448, v3449, v3450, v3451, v3452, v3453);
  }
  else
  {
    JSC::Symbols::generatorFieldFramePrivateName[0] -= 2;
  }
  JSC::Symbols::generatorFieldContextPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::generatorFieldContextPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldContext;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v678, v679, v680, v681);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v682, v683, v684, v685, v686, v687, v688);
      WTF::fastFree(v6246, v6247, v6248, v6249, v6250, v6251, v6252, v6253);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::generatorFieldContextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorFieldContextPrivateName, v682, v683, v684, v685, v686, v687, v688);
    WTF::fastFree(v3454, v3455, v3456, v3457, v3458, v3459, v3460, v3461);
  }
  else
  {
    JSC::Symbols::generatorFieldContextPrivateName[0] -= 2;
  }
  JSC::Symbols::GeneratorResumeModeNormalPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeNormalPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeNormal;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v685, v686, v687, v688);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v689, v690, v691, v692, v693, v694, v695);
      WTF::fastFree(v6254, v6255, v6256, v6257, v6258, v6259, v6260, v6261);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::GeneratorResumeModeNormalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeNormalPrivateName, v689, v690, v691, v692, v693, v694, v695);
    WTF::fastFree(v3462, v3463, v3464, v3465, v3466, v3467, v3468, v3469);
  }
  else
  {
    JSC::Symbols::GeneratorResumeModeNormalPrivateName[0] -= 2;
  }
  JSC::Symbols::GeneratorResumeModeThrowPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeThrowPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeThrow;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v692, v693, v694, v695);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v696, v697, v698, v699, v700, v701, v702);
      WTF::fastFree(v6262, v6263, v6264, v6265, v6266, v6267, v6268, v6269);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::GeneratorResumeModeThrowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeThrowPrivateName, v696, v697, v698, v699, v700, v701, v702);
    WTF::fastFree(v3470, v3471, v3472, v3473, v3474, v3475, v3476, v3477);
  }
  else
  {
    JSC::Symbols::GeneratorResumeModeThrowPrivateName[0] -= 2;
  }
  JSC::Symbols::GeneratorResumeModeReturnPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeReturnPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeReturn;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v699, v700, v701, v702);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v703, v704, v705, v706, v707, v708, v709);
      WTF::fastFree(v6270, v6271, v6272, v6273, v6274, v6275, v6276, v6277);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::GeneratorResumeModeReturnPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::GeneratorResumeModeReturnPrivateName, v703, v704, v705, v706, v707, v708, v709);
    WTF::fastFree(v3478, v3479, v3480, v3481, v3482, v3483, v3484, v3485);
  }
  else
  {
    JSC::Symbols::GeneratorResumeModeReturnPrivateName[0] -= 2;
  }
  JSC::Symbols::GeneratorStateCompletedPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::GeneratorStateCompletedPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorStateCompleted;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v706, v707, v708, v709);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v710, v711, v712, v713, v714, v715, v716);
      WTF::fastFree(v6278, v6279, v6280, v6281, v6282, v6283, v6284, v6285);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::GeneratorStateCompletedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::GeneratorStateCompletedPrivateName, v710, v711, v712, v713, v714, v715, v716);
    WTF::fastFree(v3486, v3487, v3488, v3489, v3490, v3491, v3492, v3493);
  }
  else
  {
    JSC::Symbols::GeneratorStateCompletedPrivateName[0] -= 2;
  }
  JSC::Symbols::GeneratorStateExecutingPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::GeneratorStateExecutingPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorStateExecuting;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v713, v714, v715, v716);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v717, v718, v719, v720, v721, v722, v723);
      WTF::fastFree(v6286, v6287, v6288, v6289, v6290, v6291, v6292, v6293);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::GeneratorStateExecutingPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::GeneratorStateExecutingPrivateName, v717, v718, v719, v720, v721, v722, v723);
    WTF::fastFree(v3494, v3495, v3496, v3497, v3498, v3499, v3500, v3501);
  }
  else
  {
    JSC::Symbols::GeneratorStateExecutingPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayIteratorFieldIndexPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIndexPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIndex;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v720, v721, v722, v723);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v724, v725, v726, v727, v728, v729, v730);
      WTF::fastFree(v6294, v6295, v6296, v6297, v6298, v6299, v6300, v6301);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::arrayIteratorFieldIndexPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIndexPrivateName, v724, v725, v726, v727, v728, v729, v730);
    WTF::fastFree(v3502, v3503, v3504, v3505, v3506, v3507, v3508, v3509);
  }
  else
  {
    JSC::Symbols::arrayIteratorFieldIndexPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIteratedObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v727, v728, v729, v730);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v731, v732, v733, v734, v735, v736, v737);
      WTF::fastFree(v6302, v6303, v6304, v6305, v6306, v6307, v6308, v6309);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName, v731, v732, v733, v734, v735, v736, v737);
    WTF::fastFree(v3510, v3511, v3512, v3513, v3514, v3515, v3516, v3517);
  }
  else
  {
    JSC::Symbols::arrayIteratorFieldIteratedObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayIteratorFieldKindPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldKindPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldKind;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v734, v735, v736, v737);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v738, v739, v740, v741, v742, v743, v744);
      WTF::fastFree(v6310, v6311, v6312, v6313, v6314, v6315, v6316, v6317);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::arrayIteratorFieldKindPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayIteratorFieldKindPrivateName, v738, v739, v740, v741, v742, v743, v744);
    WTF::fastFree(v3518, v3519, v3520, v3521, v3522, v3523, v3524, v3525);
  }
  else
  {
    JSC::Symbols::arrayIteratorFieldKindPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorFieldEntryPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldEntryPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldEntry;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v741, v742, v743, v744);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v745, v746, v747, v748, v749, v750, v751);
      WTF::fastFree(v6318, v6319, v6320, v6321, v6322, v6323, v6324, v6325);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorFieldEntryPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorFieldEntryPrivateName, v745, v746, v747, v748, v749, v750, v751);
    WTF::fastFree(v3526, v3527, v3528, v3529, v3530, v3531, v3532, v3533);
  }
  else
  {
    JSC::Symbols::mapIteratorFieldEntryPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldIteratedObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v748, v749, v750, v751);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v752, v753, v754, v755, v756, v757, v758);
      WTF::fastFree(v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName, v752, v753, v754, v755, v756, v757, v758);
    WTF::fastFree(v3534, v3535, v3536, v3537, v3538, v3539, v3540, v3541);
  }
  else
  {
    JSC::Symbols::mapIteratorFieldIteratedObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorFieldStoragePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldStoragePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldStorage;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v755, v756, v757, v758);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v759, v760, v761, v762, v763, v764, v765);
      WTF::fastFree(v6334, v6335, v6336, v6337, v6338, v6339, v6340, v6341);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorFieldStoragePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorFieldStoragePrivateName, v759, v760, v761, v762, v763, v764, v765);
    WTF::fastFree(v3542, v3543, v3544, v3545, v3546, v3547, v3548, v3549);
  }
  else
  {
    JSC::Symbols::mapIteratorFieldStoragePrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorFieldKindPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::mapIteratorFieldKindPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldKind;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v762, v763, v764, v765);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v766, v767, v768, v769, v770, v771, v772);
      WTF::fastFree(v6342, v6343, v6344, v6345, v6346, v6347, v6348, v6349);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorFieldKindPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorFieldKindPrivateName, v766, v767, v768, v769, v770, v771, v772);
    WTF::fastFree(v3550, v3551, v3552, v3553, v3554, v3555, v3556, v3557);
  }
  else
  {
    JSC::Symbols::mapIteratorFieldKindPrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorFieldEntryPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldEntryPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldEntry;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v769, v770, v771, v772);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v773, v774, v775, v776, v777, v778, v779);
      WTF::fastFree(v6350, v6351, v6352, v6353, v6354, v6355, v6356, v6357);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::setIteratorFieldEntryPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorFieldEntryPrivateName, v773, v774, v775, v776, v777, v778, v779);
    WTF::fastFree(v3558, v3559, v3560, v3561, v3562, v3563, v3564, v3565);
  }
  else
  {
    JSC::Symbols::setIteratorFieldEntryPrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorFieldIteratedObjectPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldIteratedObjectPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldIteratedObject;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v776, v777, v778, v779);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v780, v781, v782, v783, v784, v785, v786);
      WTF::fastFree(v6358, v6359, v6360, v6361, v6362, v6363, v6364, v6365);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::setIteratorFieldIteratedObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorFieldIteratedObjectPrivateName, v780, v781, v782, v783, v784, v785, v786);
    WTF::fastFree(v3566, v3567, v3568, v3569, v3570, v3571, v3572, v3573);
  }
  else
  {
    JSC::Symbols::setIteratorFieldIteratedObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorFieldStoragePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldStoragePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldStorage;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v783, v784, v785, v786);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v787, v788, v789, v790, v791, v792, v793);
      WTF::fastFree(v6366, v6367, v6368, v6369, v6370, v6371, v6372, v6373);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::setIteratorFieldStoragePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorFieldStoragePrivateName, v787, v788, v789, v790, v791, v792, v793);
    WTF::fastFree(v3574, v3575, v3576, v3577, v3578, v3579, v3580, v3581);
  }
  else
  {
    JSC::Symbols::setIteratorFieldStoragePrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorFieldKindPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::setIteratorFieldKindPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldKind;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v790, v791, v792, v793);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v794, v795, v796, v797, v798, v799, v800);
      WTF::fastFree(v6374, v6375, v6376, v6377, v6378, v6379, v6380, v6381);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::setIteratorFieldKindPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorFieldKindPrivateName, v794, v795, v796, v797, v798, v799, v800);
    WTF::fastFree(v3582, v3583, v3584, v3585, v3586, v3587, v3588, v3589);
  }
  else
  {
    JSC::Symbols::setIteratorFieldKindPrivateName[0] -= 2;
  }
  JSC::Symbols::stringIteratorFieldIndexPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIndexPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIndex;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v797, v798, v799, v800);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v801, v802, v803, v804, v805, v806, v807);
      WTF::fastFree(v6382, v6383, v6384, v6385, v6386, v6387, v6388, v6389);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::stringIteratorFieldIndexPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIndexPrivateName, v801, v802, v803, v804, v805, v806, v807);
    WTF::fastFree(v3590, v3591, v3592, v3593, v3594, v3595, v3596, v3597);
  }
  else
  {
    JSC::Symbols::stringIteratorFieldIndexPrivateName[0] -= 2;
  }
  JSC::Symbols::stringIteratorFieldIteratedStringPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIteratedStringPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIteratedString;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v804, v805, v806, v807);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v808, v809, v810, v811, v812, v813, v814);
      WTF::fastFree(v6390, v6391, v6392, v6393, v6394, v6395, v6396, v6397);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::stringIteratorFieldIteratedStringPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringIteratorFieldIteratedStringPrivateName, v808, v809, v810, v811, v812, v813, v814);
    WTF::fastFree(v3598, v3599, v3600, v3601, v3602, v3603, v3604, v3605);
  }
  else
  {
    JSC::Symbols::stringIteratorFieldIteratedStringPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldSuspendReason;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v811, v812, v813, v814);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v815, v816, v817, v818, v819, v820, v821);
      WTF::fastFree(v6398, v6399, v6400, v6401, v6402, v6403, v6404, v6405);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName, v815, v816, v817, v818, v819, v820, v821);
    WTF::fastFree(v3606, v3607, v3608, v3609, v3610, v3611, v3612, v3613);
  }
  else
  {
    JSC::Symbols::asyncGeneratorFieldSuspendReasonPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueFirst;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v818, v819, v820, v821);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v822, v823, v824, v825, v826, v827, v828);
      WTF::fastFree(v6406, v6407, v6408, v6409, v6410, v6411, v6412, v6413);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName, v822, v823, v824, v825, v826, v827, v828);
    WTF::fastFree(v3614, v3615, v3616, v3617, v3618, v3619, v3620, v3621);
  }
  else
  {
    JSC::Symbols::asyncGeneratorFieldQueueFirstPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueLast;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v825, v826, v827, v828);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v829, v830, v831, v832, v833, v834, v835);
      WTF::fastFree(v6414, v6415, v6416, v6417, v6418, v6419, v6420, v6421);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName, v829, v830, v831, v832, v833, v834, v835);
    WTF::fastFree(v3622, v3623, v3624, v3625, v3626, v3627, v3628, v3629);
  }
  else
  {
    JSC::Symbols::asyncGeneratorFieldQueueLastPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorStateCompletedPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateCompletedPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateCompleted;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v832, v833, v834, v835);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v836, v837, v838, v839, v840, v841, v842);
      WTF::fastFree(v6422, v6423, v6424, v6425, v6426, v6427, v6428, v6429);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorStateCompletedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateCompletedPrivateName, v836, v837, v838, v839, v840, v841, v842);
    WTF::fastFree(v3630, v3631, v3632, v3633, v3634, v3635, v3636, v3637);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorStateCompletedPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorStateExecutingPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateExecutingPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateExecuting;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v839, v840, v841, v842);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v843, v844, v845, v846, v847, v848, v849);
      WTF::fastFree(v6430, v6431, v6432, v6433, v6434, v6435, v6436, v6437);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorStateExecutingPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateExecutingPrivateName, v843, v844, v845, v846, v847, v848, v849);
    WTF::fastFree(v3638, v3639, v3640, v3641, v3642, v3643, v3644, v3645);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorStateExecutingPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateAwaitingReturn;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v846, v847, v848, v849);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v850, v851, v852, v853, v854, v855, v856);
      WTF::fastFree(v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName, v850, v851, v852, v853, v854, v855, v856);
    WTF::fastFree(v3646, v3647, v3648, v3649, v3650, v3651, v3652, v3653);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorStateAwaitingReturnPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateSuspendedStart;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v853, v854, v855, v856);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v857, v858, v859, v860, v861, v862, v863);
      WTF::fastFree(v6446, v6447, v6448, v6449, v6450, v6451, v6452, v6453);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName, v857, v858, v859, v860, v861, v862, v863);
    WTF::fastFree(v3654, v3655, v3656, v3657, v3658, v3659, v3660, v3661);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorStateSuspendedStartPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateSuspendedYield;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v860, v861, v862, v863);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v864, v865, v866, v867, v868, v869, v870);
      WTF::fastFree(v6454, v6455, v6456, v6457, v6458, v6459, v6460, v6461);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName, v864, v865, v866, v867, v868, v869, v870);
    WTF::fastFree(v3662, v3663, v3664, v3665, v3666, v3667, v3668, v3669);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorStateSuspendedYieldPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonYield;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v867, v868, v869, v870);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v871, v872, v873, v874, v875, v876, v877);
      WTF::fastFree(v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName, v871, v872, v873, v874, v875, v876, v877);
    WTF::fastFree(v3670, v3671, v3672, v3673, v3674, v3675, v3676, v3677);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorSuspendReasonYieldPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonAwait;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v874, v875, v876, v877);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v878, v879, v880, v881, v882, v883, v884);
      WTF::fastFree(v6470, v6471, v6472, v6473, v6474, v6475, v6476, v6477);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName, v878, v879, v880, v881, v882, v883, v884);
    WTF::fastFree(v3678, v3679, v3680, v3681, v3682, v3683, v3684, v3685);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorSuspendReasonAwaitPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonNone;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v881, v882, v883, v884);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v885, v886, v887, v888, v889, v890, v891);
      WTF::fastFree(v6478, v6479, v6480, v6481, v6482, v6483, v6484, v6485);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName, v885, v886, v887, v888, v889, v890, v891);
    WTF::fastFree(v3686, v3687, v3688, v3689, v3690, v3691, v3692, v3693);
  }
  else
  {
    JSC::Symbols::AsyncGeneratorSuspendReasonNonePrivateName[0] -= 2;
  }
  JSC::Symbols::abstractModuleRecordFieldStatePrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::abstractModuleRecordFieldStatePrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_abstractModuleRecordFieldState;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v888, v889, v890, v891);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v892, v893, v894, v895, v896, v897, v898);
      WTF::fastFree(v6486, v6487, v6488, v6489, v6490, v6491, v6492, v6493);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::abstractModuleRecordFieldStatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::abstractModuleRecordFieldStatePrivateName, v892, v893, v894, v895, v896, v897, v898);
    WTF::fastFree(v3694, v3695, v3696, v3697, v3698, v3699, v3700, v3701);
  }
  else
  {
    JSC::Symbols::abstractModuleRecordFieldStatePrivateName[0] -= 2;
  }
  JSC::Symbols::orderedHashTableSentinelPrivateName[0] += 4;
  v8390 = (WTF::StringImpl *)JSC::Symbols::orderedHashTableSentinelPrivateName;
  v8389 = 0;
  v8387 = JSC::BytecodeIntrinsicNode::emit_intrinsic_orderedHashTableSentinel;
  v8388 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>((uint64_t)v8386, (uint64_t)v9, (uint64_t)&v8390, (uint64_t)&v8387, v895, v896, v897, v898);
  if (v8390)
  {
    if (*(_DWORD *)v8390 == 2)
    {
      WTF::StringImpl::~StringImpl(v8390, v899, v900, v901, v902, v903, v904, v905);
      WTF::fastFree(v6494, v6495, v6496, v6497, v6498, v6499, v6500, v6501);
    }
    else
    {
      *(_DWORD *)v8390 -= 2;
    }
  }
  if (JSC::Symbols::orderedHashTableSentinelPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::orderedHashTableSentinelPrivateName, v899, v900, v901, v902, v903, v904, v905);
    WTF::fastFree(v3702, v3703, v3704, v3705, v3706, v3707, v3708, v3709);
  }
  else
  {
    JSC::Symbols::orderedHashTableSentinelPrivateName[0] -= 2;
  }
  JSC::Symbols::AsyncFromSyncIteratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::AsyncFromSyncIteratorPrivateName;
  LODWORD(v8390) = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v902, v903, v904, v905);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v906, v907, v908, v909, v910, v911, v912);
      WTF::fastFree(v6502, v6503, v6504, v6505, v6506, v6507, v6508, v6509);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::AsyncFromSyncIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AsyncFromSyncIteratorPrivateName, v906, v907, v908, v909, v910, v911, v912);
    WTF::fastFree(v3710, v3711, v3712, v3713, v3714, v3715, v3716, v3717);
  }
  else
  {
    JSC::Symbols::AsyncFromSyncIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::RegExpStringIteratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::RegExpStringIteratorPrivateName;
  LODWORD(v8390) = 1;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v909, v910, v911, v912);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v913, v914, v915, v916, v917, v918, v919);
      WTF::fastFree(v6510, v6511, v6512, v6513, v6514, v6515, v6516, v6517);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::RegExpStringIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::RegExpStringIteratorPrivateName, v913, v914, v915, v916, v917, v918, v919);
    WTF::fastFree(v3718, v3719, v3720, v3721, v3722, v3723, v3724, v3725);
  }
  else
  {
    JSC::Symbols::RegExpStringIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::advanceStringIndexPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::advanceStringIndexPrivateName;
  LODWORD(v8390) = 2;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v916, v917, v918, v919);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v920, v921, v922, v923, v924, v925, v926);
      WTF::fastFree(v6518, v6519, v6520, v6521, v6522, v6523, v6524, v6525);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::advanceStringIndexPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::advanceStringIndexPrivateName, v920, v921, v922, v923, v924, v925, v926);
    WTF::fastFree(v3726, v3727, v3728, v3729, v3730, v3731, v3732, v3733);
  }
  else
  {
    JSC::Symbols::advanceStringIndexPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayIteratorNextHelperPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::arrayIteratorNextHelperPrivateName;
  LODWORD(v8390) = 3;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v923, v924, v925, v926);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v927, v928, v929, v930, v931, v932, v933);
      WTF::fastFree(v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6533);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::arrayIteratorNextHelperPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayIteratorNextHelperPrivateName, v927, v928, v929, v930, v931, v932, v933);
    WTF::fastFree(v3734, v3735, v3736, v3737, v3738, v3739, v3740, v3741);
  }
  else
  {
    JSC::Symbols::arrayIteratorNextHelperPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName;
  LODWORD(v8390) = 4;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v930, v931, v932, v933);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v934, v935, v936, v937, v938, v939, v940);
      WTF::fastFree(v6534, v6535, v6536, v6537, v6538, v6539, v6540, v6541);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName, v934, v935, v936, v937, v938, v939, v940);
    WTF::fastFree(v3742, v3743, v3744, v3745, v3746, v3747, v3748, v3749);
  }
  else
  {
    JSC::Symbols::asyncFromSyncIteratorOnFulfilledContinuePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName;
  LODWORD(v8390) = 5;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v937, v938, v939, v940);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v941, v942, v943, v944, v945, v946, v947);
      WTF::fastFree(v6542, v6543, v6544, v6545, v6546, v6547, v6548, v6549);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName, v941, v942, v943, v944, v945, v946, v947);
    WTF::fastFree(v3750, v3751, v3752, v3753, v3754, v3755, v3756, v3757);
  }
  else
  {
    JSC::Symbols::asyncFromSyncIteratorOnFulfilledDonePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName;
  LODWORD(v8390) = 6;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v944, v945, v946, v947);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v948, v949, v950, v951, v952, v953, v954);
      WTF::fastFree(v6550, v6551, v6552, v6553, v6554, v6555, v6556, v6557);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName, v948, v949, v950, v951, v952, v953, v954);
    WTF::fastFree(v3758, v3759, v3760, v3761, v3762, v3763, v3764, v3765);
  }
  else
  {
    JSC::Symbols::asyncFromSyncIteratorOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFunctionResumePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumePrivateName;
  LODWORD(v8390) = 7;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v951, v952, v953, v954);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v955, v956, v957, v958, v959, v960, v961);
      WTF::fastFree(v6558, v6559, v6560, v6561, v6562, v6563, v6564, v6565);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFunctionResumePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFunctionResumePrivateName, v955, v956, v957, v958, v959, v960, v961);
    WTF::fastFree(v3766, v3767, v3768, v3769, v3770, v3771, v3772, v3773);
  }
  else
  {
    JSC::Symbols::asyncFunctionResumePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName;
  LODWORD(v8390) = 8;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v958, v959, v960, v961);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v962, v963, v964, v965, v966, v967, v968);
      WTF::fastFree(v6566, v6567, v6568, v6569, v6570, v6571, v6572, v6573);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName, v962, v963, v964, v965, v966, v967, v968);
    WTF::fastFree(v3774, v3775, v3776, v3777, v3778, v3779, v3780, v3781);
  }
  else
  {
    JSC::Symbols::asyncFunctionResumeOnFulfilledPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName;
  LODWORD(v8390) = 9;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v965, v966, v967, v968);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v969, v970, v971, v972, v973, v974, v975);
      WTF::fastFree(v6574, v6575, v6576, v6577, v6578, v6579, v6580, v6581);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName, v969, v970, v971, v972, v973, v974, v975);
    WTF::fastFree(v3782, v3783, v3784, v3785, v3786, v3787, v3788, v3789);
  }
  else
  {
    JSC::Symbols::asyncFunctionResumeOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorEnqueuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorEnqueuePrivateName;
  LODWORD(v8390) = 10;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v972, v973, v974, v975);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v976, v977, v978, v979, v980, v981, v982);
      WTF::fastFree(v6582, v6583, v6584, v6585, v6586, v6587, v6588, v6589);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorEnqueuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorEnqueuePrivateName, v976, v977, v978, v979, v980, v981, v982);
    WTF::fastFree(v3790, v3791, v3792, v3793, v3794, v3795, v3796, v3797);
  }
  else
  {
    JSC::Symbols::asyncGeneratorEnqueuePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorQueueDequeuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueDequeuePrivateName;
  LODWORD(v8390) = 11;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v979, v980, v981, v982);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v983, v984, v985, v986, v987, v988, v989);
      WTF::fastFree(v6590, v6591, v6592, v6593, v6594, v6595, v6596, v6597);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorQueueDequeuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueDequeuePrivateName, v983, v984, v985, v986, v987, v988, v989);
    WTF::fastFree(v3798, v3799, v3800, v3801, v3802, v3803, v3804, v3805);
  }
  else
  {
    JSC::Symbols::asyncGeneratorQueueDequeuePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName;
  LODWORD(v8390) = 12;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v986, v987, v988, v989);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v990, v991, v992, v993, v994, v995, v996);
      WTF::fastFree(v6598, v6599, v6600, v6601, v6602, v6603, v6604, v6605);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName, v990, v991, v992, v993, v994, v995, v996);
    WTF::fastFree(v3806, v3807, v3808, v3809, v3810, v3811, v3812, v3813);
  }
  else
  {
    JSC::Symbols::asyncGeneratorQueueEnqueuePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName;
  LODWORD(v8390) = 13;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v993, v994, v995, v996);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v997, v998, v999, v1000, v1001, v1002, v1003);
      WTF::fastFree(v6606, v6607, v6608, v6609, v6610, v6611, v6612, v6613);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName, v997, v998, v999, v1000, v1001, v1002, v1003);
    WTF::fastFree(v3814, v3815, v3816, v3817, v3818, v3819, v3820, v3821);
  }
  else
  {
    JSC::Symbols::asyncGeneratorQueueIsEmptyPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorRejectPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorRejectPrivateName;
  LODWORD(v8390) = 14;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1000, v1001, v1002, v1003);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1004, v1005, v1006, v1007, v1008, v1009, v1010);
      WTF::fastFree(v6614, v6615, v6616, v6617, v6618, v6619, v6620, v6621);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorRejectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorRejectPrivateName, v1004, v1005, v1006, v1007, v1008, v1009, v1010);
    WTF::fastFree(v3822, v3823, v3824, v3825, v3826, v3827, v3828, v3829);
  }
  else
  {
    JSC::Symbols::asyncGeneratorRejectPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorResolvePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResolvePrivateName;
  LODWORD(v8390) = 15;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1007, v1008, v1009, v1010);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1011, v1012, v1013, v1014, v1015, v1016, v1017);
      WTF::fastFree(v6622, v6623, v6624, v6625, v6626, v6627, v6628, v6629);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorResolvePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorResolvePrivateName, v1011, v1012, v1013, v1014, v1015, v1016, v1017);
    WTF::fastFree(v3830, v3831, v3832, v3833, v3834, v3835, v3836, v3837);
  }
  else
  {
    JSC::Symbols::asyncGeneratorResolvePrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorResumeNextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextPrivateName;
  LODWORD(v8390) = 16;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1014, v1015, v1016, v1017);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1018, v1019, v1020, v1021, v1022, v1023, v1024);
      WTF::fastFree(v6630, v6631, v6632, v6633, v6634, v6635, v6636, v6637);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorResumeNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextPrivateName, v1018, v1019, v1020, v1021, v1022, v1023, v1024);
    WTF::fastFree(v3838, v3839, v3840, v3841, v3842, v3843, v3844, v3845);
  }
  else
  {
    JSC::Symbols::asyncGeneratorResumeNextPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName;
  LODWORD(v8390) = 17;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1021, v1022, v1023, v1024);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1025, v1026, v1027, v1028, v1029, v1030, v1031);
      WTF::fastFree(v6638, v6639, v6640, v6641, v6642, v6643, v6644, v6645);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName, v1025, v1026, v1027, v1028, v1029, v1030, v1031);
    WTF::fastFree(v3846, v3847, v3848, v3849, v3850, v3851, v3852, v3853);
  }
  else
  {
    JSC::Symbols::asyncGeneratorResumeNextOnFulfilledPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName;
  LODWORD(v8390) = 18;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1028, v1029, v1030, v1031);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1032, v1033, v1034, v1035, v1036, v1037, v1038);
      WTF::fastFree(v6646, v6647, v6648, v6649, v6650, v6651, v6652, v6653);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName, v1032, v1033, v1034, v1035, v1036, v1037, v1038);
    WTF::fastFree(v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861);
  }
  else
  {
    JSC::Symbols::asyncGeneratorResumeNextOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorYieldPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldPrivateName;
  LODWORD(v8390) = 19;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1035, v1036, v1037, v1038);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1039, v1040, v1041, v1042, v1043, v1044, v1045);
      WTF::fastFree(v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorYieldPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldPrivateName, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
    WTF::fastFree(v3862, v3863, v3864, v3865, v3866, v3867, v3868, v3869);
  }
  else
  {
    JSC::Symbols::asyncGeneratorYieldPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName;
  LODWORD(v8390) = 20;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1042, v1043, v1044, v1045);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1046, v1047, v1048, v1049, v1050, v1051, v1052);
      WTF::fastFree(v6662, v6663, v6664, v6665, v6666, v6667, v6668, v6669);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName, v1046, v1047, v1048, v1049, v1050, v1051, v1052);
    WTF::fastFree(v3870, v3871, v3872, v3873, v3874, v3875, v3876, v3877);
  }
  else
  {
    JSC::Symbols::asyncGeneratorYieldAwaitedPrivateName[0] -= 2;
  }
  JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName;
  LODWORD(v8390) = 21;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1049, v1050, v1051, v1052);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1053, v1054, v1055, v1056, v1057, v1058, v1059);
      WTF::fastFree(v6670, v6671, v6672, v6673, v6674, v6675, v6676, v6677);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName, v1053, v1054, v1055, v1056, v1057, v1058, v1059);
    WTF::fastFree(v3878, v3879, v3880, v3881, v3882, v3883, v3884, v3885);
  }
  else
  {
    JSC::Symbols::asyncGeneratorYieldOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::awaitValuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::awaitValuePrivateName;
  LODWORD(v8390) = 22;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1056, v1057, v1058, v1059);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1060, v1061, v1062, v1063, v1064, v1065, v1066);
      WTF::fastFree(v6678, v6679, v6680, v6681, v6682, v6683, v6684, v6685);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::awaitValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::awaitValuePrivateName, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
    WTF::fastFree(v3886, v3887, v3888, v3889, v3890, v3891, v3892, v3893);
  }
  else
  {
    JSC::Symbols::awaitValuePrivateName[0] -= 2;
  }
  JSC::Symbols::builtinMapIterablePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::builtinMapIterablePrivateName;
  LODWORD(v8390) = 23;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1063, v1064, v1065, v1066);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1067, v1068, v1069, v1070, v1071, v1072, v1073);
      WTF::fastFree(v6686, v6687, v6688, v6689, v6690, v6691, v6692, v6693);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::builtinMapIterablePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::builtinMapIterablePrivateName, v1067, v1068, v1069, v1070, v1071, v1072, v1073);
    WTF::fastFree(v3894, v3895, v3896, v3897, v3898, v3899, v3900, v3901);
  }
  else
  {
    JSC::Symbols::builtinMapIterablePrivateName[0] -= 2;
  }
  JSC::Symbols::builtinSetIterablePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::builtinSetIterablePrivateName;
  LODWORD(v8390) = 24;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1070, v1071, v1072, v1073);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1074, v1075, v1076, v1077, v1078, v1079, v1080);
      WTF::fastFree(v6694, v6695, v6696, v6697, v6698, v6699, v6700, v6701);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::builtinSetIterablePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::builtinSetIterablePrivateName, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
    WTF::fastFree(v3902, v3903, v3904, v3905, v3906, v3907, v3908, v3909);
  }
  else
  {
    JSC::Symbols::builtinSetIterablePrivateName[0] -= 2;
  }
  JSC::Symbols::cacheSatisfyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::cacheSatisfyPrivateName;
  LODWORD(v8390) = 25;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1077, v1078, v1079, v1080);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1081, v1082, v1083, v1084, v1085, v1086, v1087);
      WTF::fastFree(v6702, v6703, v6704, v6705, v6706, v6707, v6708, v6709);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::cacheSatisfyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::cacheSatisfyPrivateName, v1081, v1082, v1083, v1084, v1085, v1086, v1087);
    WTF::fastFree(v3910, v3911, v3912, v3913, v3914, v3915, v3916, v3917);
  }
  else
  {
    JSC::Symbols::cacheSatisfyPrivateName[0] -= 2;
  }
  JSC::Symbols::cacheSatisfyAndReturnPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::cacheSatisfyAndReturnPrivateName;
  LODWORD(v8390) = 26;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1084, v1085, v1086, v1087);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1088, v1089, v1090, v1091, v1092, v1093, v1094);
      WTF::fastFree(v6710, v6711, v6712, v6713, v6714, v6715, v6716, v6717);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::cacheSatisfyAndReturnPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::cacheSatisfyAndReturnPrivateName, v1088, v1089, v1090, v1091, v1092, v1093, v1094);
    WTF::fastFree(v3918, v3919, v3920, v3921, v3922, v3923, v3924, v3925);
  }
  else
  {
    JSC::Symbols::cacheSatisfyAndReturnPrivateName[0] -= 2;
  }
  JSC::Symbols::concatSlowPathPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::concatSlowPathPrivateName;
  LODWORD(v8390) = 27;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1091, v1092, v1093, v1094);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1095, v1096, v1097, v1098, v1099, v1100, v1101);
      WTF::fastFree(v6718, v6719, v6720, v6721, v6722, v6723, v6724, v6725);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::concatSlowPathPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::concatSlowPathPrivateName, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
    WTF::fastFree(v3926, v3927, v3928, v3929, v3930, v3931, v3932, v3933);
  }
  else
  {
    JSC::Symbols::concatSlowPathPrivateName[0] -= 2;
  }
  JSC::Symbols::createArrayWithoutPrototypePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createArrayWithoutPrototypePrivateName;
  LODWORD(v8390) = 28;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1098, v1099, v1100, v1101);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1102, v1103, v1104, v1105, v1106, v1107, v1108);
      WTF::fastFree(v6726, v6727, v6728, v6729, v6730, v6731, v6732, v6733);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createArrayWithoutPrototypePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createArrayWithoutPrototypePrivateName, v1102, v1103, v1104, v1105, v1106, v1107, v1108);
    WTF::fastFree(v3934, v3935, v3936, v3937, v3938, v3939, v3940, v3941);
  }
  else
  {
    JSC::Symbols::createArrayWithoutPrototypePrivateName[0] -= 2;
  }
  JSC::Symbols::createAsyncFromSyncIteratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createAsyncFromSyncIteratorPrivateName;
  LODWORD(v8390) = 29;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1105, v1106, v1107, v1108);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1109, v1110, v1111, v1112, v1113, v1114, v1115);
      WTF::fastFree(v6734, v6735, v6736, v6737, v6738, v6739, v6740, v6741);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createAsyncFromSyncIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createAsyncFromSyncIteratorPrivateName, v1109, v1110, v1111, v1112, v1113, v1114, v1115);
    WTF::fastFree(v3942, v3943, v3944, v3945, v3946, v3947, v3948, v3949);
  }
  else
  {
    JSC::Symbols::createAsyncFromSyncIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::createHTMLPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createHTMLPrivateName;
  LODWORD(v8390) = 30;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1112, v1113, v1114, v1115);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1116, v1117, v1118, v1119, v1120, v1121, v1122);
      WTF::fastFree(v6742, v6743, v6744, v6745, v6746, v6747, v6748, v6749);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createHTMLPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createHTMLPrivateName, v1116, v1117, v1118, v1119, v1120, v1121, v1122);
    WTF::fastFree(v3950, v3951, v3952, v3953, v3954, v3955, v3956, v3957);
  }
  else
  {
    JSC::Symbols::createHTMLPrivateName[0] -= 2;
  }
  JSC::Symbols::createInspectorInjectedScriptPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createInspectorInjectedScriptPrivateName;
  LODWORD(v8390) = 31;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1119, v1120, v1121, v1122);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1123, v1124, v1125, v1126, v1127, v1128, v1129);
      WTF::fastFree(v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createInspectorInjectedScriptPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createInspectorInjectedScriptPrivateName, v1123, v1124, v1125, v1126, v1127, v1128, v1129);
    WTF::fastFree(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965);
  }
  else
  {
    JSC::Symbols::createInspectorInjectedScriptPrivateName[0] -= 2;
  }
  JSC::Symbols::createObjectWithoutPrototypePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createObjectWithoutPrototypePrivateName;
  LODWORD(v8390) = 32;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1126, v1127, v1128, v1129);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1130, v1131, v1132, v1133, v1134, v1135, v1136);
      WTF::fastFree(v6758, v6759, v6760, v6761, v6762, v6763, v6764, v6765);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createObjectWithoutPrototypePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createObjectWithoutPrototypePrivateName, v1130, v1131, v1132, v1133, v1134, v1135, v1136);
    WTF::fastFree(v3966, v3967, v3968, v3969, v3970, v3971, v3972, v3973);
  }
  else
  {
    JSC::Symbols::createObjectWithoutPrototypePrivateName[0] -= 2;
  }
  JSC::Symbols::createResolvingFunctionsPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsPrivateName;
  LODWORD(v8390) = 33;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1133, v1134, v1135, v1136);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1137, v1138, v1139, v1140, v1141, v1142, v1143);
      WTF::fastFree(v6766, v6767, v6768, v6769, v6770, v6771, v6772, v6773);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createResolvingFunctionsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsPrivateName, v1137, v1138, v1139, v1140, v1141, v1142, v1143);
    WTF::fastFree(v3974, v3975, v3976, v3977, v3978, v3979, v3980, v3981);
  }
  else
  {
    JSC::Symbols::createResolvingFunctionsPrivateName[0] -= 2;
  }
  JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName;
  LODWORD(v8390) = 34;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1140, v1141, v1142, v1143);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1144, v1145, v1146, v1147, v1148, v1149, v1150);
      WTF::fastFree(v6774, v6775, v6776, v6777, v6778, v6779, v6780, v6781);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName, v1144, v1145, v1146, v1147, v1148, v1149, v1150);
    WTF::fastFree(v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989);
  }
  else
  {
    JSC::Symbols::createResolvingFunctionsWithoutPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::crossRealmThrowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::crossRealmThrowPrivateName;
  LODWORD(v8390) = 35;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1147, v1148, v1149, v1150);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1151, v1152, v1153, v1154, v1155, v1156, v1157);
      WTF::fastFree(v6782, v6783, v6784, v6785, v6786, v6787, v6788, v6789);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::crossRealmThrowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::crossRealmThrowPrivateName, v1151, v1152, v1153, v1154, v1155, v1156, v1157);
    WTF::fastFree(v3990, v3991, v3992, v3993, v3994, v3995, v3996, v3997);
  }
  else
  {
    JSC::Symbols::crossRealmThrowPrivateName[0] -= 2;
  }
  JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName;
  LODWORD(v8390) = 36;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1154, v1155, v1156, v1157);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1158, v1159, v1160, v1161, v1162, v1163, v1164);
      WTF::fastFree(v6790, v6791, v6792, v6793, v6794, v6795, v6796, v6797);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName, v1158, v1159, v1160, v1161, v1162, v1163, v1164);
    WTF::fastFree(v3998, v3999, v4000, v4001, v4002, v4003, v4004, v4005);
  }
  else
  {
    JSC::Symbols::defaultAsyncFromAsyncArrayLikePrivateName[0] -= 2;
  }
  JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName;
  LODWORD(v8390) = 37;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1161, v1162, v1163, v1164);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1165, v1166, v1167, v1168, v1169, v1170, v1171);
      WTF::fastFree(v6798, v6799, v6800, v6801, v6802, v6803, v6804, v6805);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName, v1165, v1166, v1167, v1168, v1169, v1170, v1171);
    WTF::fastFree(v4006, v4007, v4008, v4009, v4010, v4011, v4012, v4013);
  }
  else
  {
    JSC::Symbols::defaultAsyncFromAsyncIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::doAsyncGeneratorBodyCallPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallPrivateName;
  LODWORD(v8390) = 38;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1168, v1169, v1170, v1171);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1172, v1173, v1174, v1175, v1176, v1177, v1178);
      WTF::fastFree(v6806, v6807, v6808, v6809, v6810, v6811, v6812, v6813);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::doAsyncGeneratorBodyCallPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallPrivateName, v1172, v1173, v1174, v1175, v1176, v1177, v1178);
    WTF::fastFree(v4014, v4015, v4016, v4017, v4018, v4019, v4020, v4021);
  }
  else
  {
    JSC::Symbols::doAsyncGeneratorBodyCallPrivateName[0] -= 2;
  }
  JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName;
  LODWORD(v8390) = 39;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1175, v1176, v1177, v1178);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1179, v1180, v1181, v1182, v1183, v1184, v1185);
      WTF::fastFree(v6814, v6815, v6816, v6817, v6818, v6819, v6820, v6821);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName, v1179, v1180, v1181, v1182, v1183, v1184, v1185);
    WTF::fastFree(v4022, v4023, v4024, v4025, v4026, v4027, v4028, v4029);
  }
  else
  {
    JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledNormalPrivateName[0] -= 2;
  }
  JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName;
  LODWORD(v8390) = 40;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1182, v1183, v1184, v1185);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1186, v1187, v1188, v1189, v1190, v1191, v1192);
      WTF::fastFree(v6822, v6823, v6824, v6825, v6826, v6827, v6828, v6829);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName, v1186, v1187, v1188, v1189, v1190, v1191, v1192);
    WTF::fastFree(v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037);
  }
  else
  {
    JSC::Symbols::doAsyncGeneratorBodyCallOnFulfilledReturnPrivateName[0] -= 2;
  }
  JSC::Symbols::flatIntoArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::flatIntoArrayPrivateName;
  LODWORD(v8390) = 41;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1189, v1190, v1191, v1192);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1193, v1194, v1195, v1196, v1197, v1198, v1199);
      WTF::fastFree(v6830, v6831, v6832, v6833, v6834, v6835, v6836, v6837);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::flatIntoArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::flatIntoArrayPrivateName, v1193, v1194, v1195, v1196, v1197, v1198, v1199);
    WTF::fastFree(v4038, v4039, v4040, v4041, v4042, v4043, v4044, v4045);
  }
  else
  {
    JSC::Symbols::flatIntoArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::flatIntoArrayWithCallbackPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::flatIntoArrayWithCallbackPrivateName;
  LODWORD(v8390) = 42;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1196, v1197, v1198, v1199);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1200, v1201, v1202, v1203, v1204, v1205, v1206);
      WTF::fastFree(v6838, v6839, v6840, v6841, v6842, v6843, v6844, v6845);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::flatIntoArrayWithCallbackPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::flatIntoArrayWithCallbackPrivateName, v1200, v1201, v1202, v1203, v1204, v1205, v1206);
    WTF::fastFree(v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053);
  }
  else
  {
    JSC::Symbols::flatIntoArrayWithCallbackPrivateName[0] -= 2;
  }
  JSC::Symbols::forceFulfillPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::forceFulfillPromisePrivateName;
  LODWORD(v8390) = 43;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1203, v1204, v1205, v1206);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1207, v1208, v1209, v1210, v1211, v1212, v1213);
      WTF::fastFree(v6846, v6847, v6848, v6849, v6850, v6851, v6852, v6853);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::forceFulfillPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::forceFulfillPromisePrivateName, v1207, v1208, v1209, v1210, v1211, v1212, v1213);
    WTF::fastFree(v4054, v4055, v4056, v4057, v4058, v4059, v4060, v4061);
  }
  else
  {
    JSC::Symbols::forceFulfillPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::fulfillFetchPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::fulfillFetchPrivateName;
  LODWORD(v8390) = 44;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1210, v1211, v1212, v1213);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1214, v1215, v1216, v1217, v1218, v1219, v1220);
      WTF::fastFree(v6854, v6855, v6856, v6857, v6858, v6859, v6860, v6861);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::fulfillFetchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fulfillFetchPrivateName, v1214, v1215, v1216, v1217, v1218, v1219, v1220);
    WTF::fastFree(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069);
  }
  else
  {
    JSC::Symbols::fulfillFetchPrivateName[0] -= 2;
  }
  JSC::Symbols::fulfillPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::fulfillPromisePrivateName;
  LODWORD(v8390) = 45;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1217, v1218, v1219, v1220);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1221, v1222, v1223, v1224, v1225, v1226, v1227);
      WTF::fastFree(v6862, v6863, v6864, v6865, v6866, v6867, v6868, v6869);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::fulfillPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fulfillPromisePrivateName, v1221, v1222, v1223, v1224, v1225, v1226, v1227);
    WTF::fastFree(v4070, v4071, v4072, v4073, v4074, v4075, v4076, v4077);
  }
  else
  {
    JSC::Symbols::fulfillPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName;
  LODWORD(v8390) = 46;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1224, v1225, v1226, v1227);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1228, v1229, v1230, v1231, v1232, v1233, v1234);
      WTF::fastFree(v6870, v6871, v6872, v6873, v6874, v6875, v6876, v6877);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName, v1228, v1229, v1230, v1231, v1232, v1233, v1234);
    WTF::fastFree(v4078, v4079, v4080, v4081, v4082, v4083, v4084, v4085);
  }
  else
  {
    JSC::Symbols::fulfillPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] -= 2;
  }
  JSC::Symbols::fulfillWithoutPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::fulfillWithoutPromisePrivateName;
  LODWORD(v8390) = 47;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1231, v1232, v1233, v1234);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1235, v1236, v1237, v1238, v1239, v1240, v1241);
      WTF::fastFree(v6878, v6879, v6880, v6881, v6882, v6883, v6884, v6885);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::fulfillWithoutPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fulfillWithoutPromisePrivateName, v1235, v1236, v1237, v1238, v1239, v1240, v1241);
    WTF::fastFree(v4086, v4087, v4088, v4089, v4090, v4091, v4092, v4093);
  }
  else
  {
    JSC::Symbols::fulfillWithoutPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::generatorResumePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::generatorResumePrivateName;
  LODWORD(v8390) = 48;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1238, v1239, v1240, v1241);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1242, v1243, v1244, v1245, v1246, v1247, v1248);
      WTF::fastFree(v6886, v6887, v6888, v6889, v6890, v6891, v6892, v6893);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::generatorResumePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::generatorResumePrivateName, v1242, v1243, v1244, v1245, v1246, v1247, v1248);
    WTF::fastFree(v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101);
  }
  else
  {
    JSC::Symbols::generatorResumePrivateName[0] -= 2;
  }
  JSC::Symbols::getSetSizeAsIntPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::getSetSizeAsIntPrivateName;
  LODWORD(v8390) = 49;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1245, v1246, v1247, v1248);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1249, v1250, v1251, v1252, v1253, v1254, v1255);
      WTF::fastFree(v6894, v6895, v6896, v6897, v6898, v6899, v6900, v6901);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::getSetSizeAsIntPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getSetSizeAsIntPrivateName, v1249, v1250, v1251, v1252, v1253, v1254, v1255);
    WTF::fastFree(v4102, v4103, v4104, v4105, v4106, v4107, v4108, v4109);
  }
  else
  {
    JSC::Symbols::getSetSizeAsIntPrivateName[0] -= 2;
  }
  JSC::Symbols::getSubstitutionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::getSubstitutionPrivateName;
  LODWORD(v8390) = 50;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1252, v1253, v1254, v1255);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1256, v1257, v1258, v1259, v1260, v1261, v1262);
      WTF::fastFree(v6902, v6903, v6904, v6905, v6906, v6907, v6908, v6909);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::getSubstitutionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getSubstitutionPrivateName, v1256, v1257, v1258, v1259, v1260, v1261, v1262);
    WTF::fastFree(v4110, v4111, v4112, v4113, v4114, v4115, v4116, v4117);
  }
  else
  {
    JSC::Symbols::getSubstitutionPrivateName[0] -= 2;
  }
  JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName;
  LODWORD(v8390) = 51;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1259, v1260, v1261, v1262);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1263, v1264, v1265, v1266, v1267, v1268, v1269);
      WTF::fastFree(v6910, v6911, v6912, v6913, v6914, v6915, v6916, v6917);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName, v1263, v1264, v1265, v1266, v1267, v1268, v1269);
    WTF::fastFree(v4118, v4119, v4120, v4121, v4122, v4123, v4124, v4125);
  }
  else
  {
    JSC::Symbols::hasObservableSideEffectsForRegExpMatchPrivateName[0] -= 2;
  }
  JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName;
  LODWORD(v8390) = 52;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1266, v1267, v1268, v1269);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1270, v1271, v1272, v1273, v1274, v1275, v1276);
      WTF::fastFree(v6918, v6919, v6920, v6921, v6922, v6923, v6924, v6925);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName, v1270, v1271, v1272, v1273, v1274, v1275, v1276);
    WTF::fastFree(v4126, v4127, v4128, v4129, v4130, v4131, v4132, v4133);
  }
  else
  {
    JSC::Symbols::hasObservableSideEffectsForRegExpSplitPrivateName[0] -= 2;
  }
  JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName;
  LODWORD(v8390) = 53;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1273, v1274, v1275, v1276);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1277, v1278, v1279, v1280, v1281, v1282, v1283);
      WTF::fastFree(v6926, v6927, v6928, v6929, v6930, v6931, v6932, v6933);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName, v1277, v1278, v1279, v1280, v1281, v1282, v1283);
    WTF::fastFree(v4134, v4135, v4136, v4137, v4138, v4139, v4140, v4141);
  }
  else
  {
    JSC::Symbols::hasObservableSideEffectsForStringReplacePrivateName[0] -= 2;
  }
  JSC::Symbols::isExecutionStatePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isExecutionStatePrivateName;
  LODWORD(v8390) = 54;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1280, v1281, v1282, v1283);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1284, v1285, v1286, v1287, v1288, v1289, v1290);
      WTF::fastFree(v6934, v6935, v6936, v6937, v6938, v6939, v6940, v6941);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isExecutionStatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isExecutionStatePrivateName, v1284, v1285, v1286, v1287, v1288, v1289, v1290);
    WTF::fastFree(v4142, v4143, v4144, v4145, v4146, v4147, v4148, v4149);
  }
  else
  {
    JSC::Symbols::isExecutionStatePrivateName[0] -= 2;
  }
  JSC::Symbols::isFinitePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isFinitePrivateName;
  LODWORD(v8390) = 55;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1287, v1288, v1289, v1290);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1291, v1292, v1293, v1294, v1295, v1296, v1297);
      WTF::fastFree(v6942, v6943, v6944, v6945, v6946, v6947, v6948, v6949);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isFinitePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isFinitePrivateName, v1291, v1292, v1293, v1294, v1295, v1296, v1297);
    WTF::fastFree(v4150, v4151, v4152, v4153, v4154, v4155, v4156, v4157);
  }
  else
  {
    JSC::Symbols::isFinitePrivateName[0] -= 2;
  }
  JSC::Symbols::isSuspendYieldStatePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isSuspendYieldStatePrivateName;
  LODWORD(v8390) = 56;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1294, v1295, v1296, v1297);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1298, v1299, v1300, v1301, v1302, v1303, v1304);
      WTF::fastFree(v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isSuspendYieldStatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isSuspendYieldStatePrivateName, v1298, v1299, v1300, v1301, v1302, v1303, v1304);
    WTF::fastFree(v4158, v4159, v4160, v4161, v4162, v4163, v4164, v4165);
  }
  else
  {
    JSC::Symbols::isSuspendYieldStatePrivateName[0] -= 2;
  }
  JSC::Symbols::matchSlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::matchSlowPrivateName;
  LODWORD(v8390) = 57;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1301, v1302, v1303, v1304);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1305, v1306, v1307, v1308, v1309, v1310, v1311);
      WTF::fastFree(v6958, v6959, v6960, v6961, v6962, v6963, v6964, v6965);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::matchSlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::matchSlowPrivateName, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
    WTF::fastFree(v4166, v4167, v4168, v4169, v4170, v4171, v4172, v4173);
  }
  else
  {
    JSC::Symbols::matchSlowPrivateName[0] -= 2;
  }
  JSC::Symbols::maxWithPositivesPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::maxWithPositivesPrivateName;
  LODWORD(v8390) = 58;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1308, v1309, v1310, v1311);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1312, v1313, v1314, v1315, v1316, v1317, v1318);
      WTF::fastFree(v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::maxWithPositivesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::maxWithPositivesPrivateName, v1312, v1313, v1314, v1315, v1316, v1317, v1318);
    WTF::fastFree(v4174, v4175, v4176, v4177, v4178, v4179, v4180, v4181);
  }
  else
  {
    JSC::Symbols::maxWithPositivesPrivateName[0] -= 2;
  }
  JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName;
  LODWORD(v8390) = 59;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1315, v1316, v1317, v1318);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1319, v1320, v1321, v1322, v1323, v1324, v1325);
      WTF::fastFree(v6974, v6975, v6976, v6977, v6978, v6979, v6980, v6981);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName, v1319, v1320, v1321, v1322, v1323, v1324, v1325);
    WTF::fastFree(v4182, v4183, v4184, v4185, v4186, v4187, v4188, v4189);
  }
  else
  {
    JSC::Symbols::minWithMaybeNegativeZeroAndPositivePrivateName[0] -= 2;
  }
  JSC::Symbols::newHandledRejectedPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::newHandledRejectedPromisePrivateName;
  LODWORD(v8390) = 60;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1322, v1323, v1324, v1325);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1326, v1327, v1328, v1329, v1330, v1331, v1332);
      WTF::fastFree(v6982, v6983, v6984, v6985, v6986, v6987, v6988, v6989);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::newHandledRejectedPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newHandledRejectedPromisePrivateName, v1326, v1327, v1328, v1329, v1330, v1331, v1332);
    WTF::fastFree(v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197);
  }
  else
  {
    JSC::Symbols::newHandledRejectedPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::newPromiseCapabilityPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::newPromiseCapabilityPrivateName;
  LODWORD(v8390) = 61;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1329, v1330, v1331, v1332);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1333, v1334, v1335, v1336, v1337, v1338, v1339);
      WTF::fastFree(v6990, v6991, v6992, v6993, v6994, v6995, v6996, v6997);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::newPromiseCapabilityPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newPromiseCapabilityPrivateName, v1333, v1334, v1335, v1336, v1337, v1338, v1339);
    WTF::fastFree(v4198, v4199, v4200, v4201, v4202, v4203, v4204, v4205);
  }
  else
  {
    JSC::Symbols::newPromiseCapabilityPrivateName[0] -= 2;
  }
  JSC::Symbols::newPromiseCapabilitySlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::newPromiseCapabilitySlowPrivateName;
  LODWORD(v8390) = 62;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1336, v1337, v1338, v1339);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1340, v1341, v1342, v1343, v1344, v1345, v1346);
      WTF::fastFree(v6998, v6999, v7000, v7001, v7002, v7003, v7004, v7005);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::newPromiseCapabilitySlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newPromiseCapabilitySlowPrivateName, v1340, v1341, v1342, v1343, v1344, v1345, v1346);
    WTF::fastFree(v4206, v4207, v4208, v4209, v4210, v4211, v4212, v4213);
  }
  else
  {
    JSC::Symbols::newPromiseCapabilitySlowPrivateName[0] -= 2;
  }
  JSC::Symbols::newRegistryEntryPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::newRegistryEntryPrivateName;
  LODWORD(v8390) = 63;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1343, v1344, v1345, v1346);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1347, v1348, v1349, v1350, v1351, v1352, v1353);
      WTF::fastFree(v7006, v7007, v7008, v7009, v7010, v7011, v7012, v7013);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::newRegistryEntryPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newRegistryEntryPrivateName, v1347, v1348, v1349, v1350, v1351, v1352, v1353);
    WTF::fastFree(v4214, v4215, v4216, v4217, v4218, v4219, v4220, v4221);
  }
  else
  {
    JSC::Symbols::newRegistryEntryPrivateName[0] -= 2;
  }
  JSC::Symbols::performIterationPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performIterationPrivateName;
  LODWORD(v8390) = 64;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1350, v1351, v1352, v1353);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1354, v1355, v1356, v1357, v1358, v1359, v1360);
      WTF::fastFree(v7014, v7015, v7016, v7017, v7018, v7019, v7020, v7021);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performIterationPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performIterationPrivateName, v1354, v1355, v1356, v1357, v1358, v1359, v1360);
    WTF::fastFree(v4222, v4223, v4224, v4225, v4226, v4227, v4228, v4229);
  }
  else
  {
    JSC::Symbols::performIterationPrivateName[0] -= 2;
  }
  JSC::Symbols::performPromiseThenPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performPromiseThenPrivateName;
  LODWORD(v8390) = 65;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1357, v1358, v1359, v1360);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1361, v1362, v1363, v1364, v1365, v1366, v1367);
      WTF::fastFree(v7022, v7023, v7024, v7025, v7026, v7027, v7028, v7029);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performPromiseThenPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performPromiseThenPrivateName, v1361, v1362, v1363, v1364, v1365, v1366, v1367);
    WTF::fastFree(v4230, v4231, v4232, v4233, v4234, v4235, v4236, v4237);
  }
  else
  {
    JSC::Symbols::performPromiseThenPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectGetPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectGetPrivateName;
  LODWORD(v8390) = 66;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1364, v1365, v1366, v1367);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1368, v1369, v1370, v1371, v1372, v1373, v1374);
      WTF::fastFree(v7030, v7031, v7032, v7033, v7034, v7035, v7036, v7037);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectGetPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectGetPrivateName, v1368, v1369, v1370, v1371, v1372, v1373, v1374);
    WTF::fastFree(v4238, v4239, v4240, v4241, v4242, v4243, v4244, v4245);
  }
  else
  {
    JSC::Symbols::performProxyObjectGetPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectGetByValPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectGetByValPrivateName;
  LODWORD(v8390) = 67;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1371, v1372, v1373, v1374);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1375, v1376, v1377, v1378, v1379, v1380, v1381);
      WTF::fastFree(v7038, v7039, v7040, v7041, v7042, v7043, v7044, v7045);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectGetByValPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectGetByValPrivateName, v1375, v1376, v1377, v1378, v1379, v1380, v1381);
    WTF::fastFree(v4246, v4247, v4248, v4249, v4250, v4251, v4252, v4253);
  }
  else
  {
    JSC::Symbols::performProxyObjectGetByValPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectHasPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectHasPrivateName;
  LODWORD(v8390) = 68;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1378, v1379, v1380, v1381);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1382, v1383, v1384, v1385, v1386, v1387, v1388);
      WTF::fastFree(v7046, v7047, v7048, v7049, v7050, v7051, v7052, v7053);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectHasPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectHasPrivateName, v1382, v1383, v1384, v1385, v1386, v1387, v1388);
    WTF::fastFree(v4254, v4255, v4256, v4257, v4258, v4259, v4260, v4261);
  }
  else
  {
    JSC::Symbols::performProxyObjectHasPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectHasByValPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectHasByValPrivateName;
  LODWORD(v8390) = 69;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1385, v1386, v1387, v1388);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1389, v1390, v1391, v1392, v1393, v1394, v1395);
      WTF::fastFree(v7054, v7055, v7056, v7057, v7058, v7059, v7060, v7061);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectHasByValPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectHasByValPrivateName, v1389, v1390, v1391, v1392, v1393, v1394, v1395);
    WTF::fastFree(v4262, v4263, v4264, v4265, v4266, v4267, v4268, v4269);
  }
  else
  {
    JSC::Symbols::performProxyObjectHasByValPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectSetByValSloppyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValSloppyPrivateName;
  LODWORD(v8390) = 70;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1392, v1393, v1394, v1395);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1396, v1397, v1398, v1399, v1400, v1401, v1402);
      WTF::fastFree(v7062, v7063, v7064, v7065, v7066, v7067, v7068, v7069);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectSetByValSloppyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValSloppyPrivateName, v1396, v1397, v1398, v1399, v1400, v1401, v1402);
    WTF::fastFree(v4270, v4271, v4272, v4273, v4274, v4275, v4276, v4277);
  }
  else
  {
    JSC::Symbols::performProxyObjectSetByValSloppyPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectSetByValStrictPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValStrictPrivateName;
  LODWORD(v8390) = 71;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1399, v1400, v1401, v1402);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1403, v1404, v1405, v1406, v1407, v1408, v1409);
      WTF::fastFree(v7070, v7071, v7072, v7073, v7074, v7075, v7076, v7077);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectSetByValStrictPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectSetByValStrictPrivateName, v1403, v1404, v1405, v1406, v1407, v1408, v1409);
    WTF::fastFree(v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285);
  }
  else
  {
    JSC::Symbols::performProxyObjectSetByValStrictPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectSetSloppyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetSloppyPrivateName;
  LODWORD(v8390) = 72;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1406, v1407, v1408, v1409);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1410, v1411, v1412, v1413, v1414, v1415, v1416);
      WTF::fastFree(v7078, v7079, v7080, v7081, v7082, v7083, v7084, v7085);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectSetSloppyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectSetSloppyPrivateName, v1410, v1411, v1412, v1413, v1414, v1415, v1416);
    WTF::fastFree(v4286, v4287, v4288, v4289, v4290, v4291, v4292, v4293);
  }
  else
  {
    JSC::Symbols::performProxyObjectSetSloppyPrivateName[0] -= 2;
  }
  JSC::Symbols::performProxyObjectSetStrictPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::performProxyObjectSetStrictPrivateName;
  LODWORD(v8390) = 73;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1413, v1414, v1415, v1416);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1417, v1418, v1419, v1420, v1421, v1422, v1423);
      WTF::fastFree(v7086, v7087, v7088, v7089, v7090, v7091, v7092, v7093);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::performProxyObjectSetStrictPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::performProxyObjectSetStrictPrivateName, v1417, v1418, v1419, v1420, v1421, v1422, v1423);
    WTF::fastFree(v4294, v4295, v4296, v4297, v4298, v4299, v4300, v4301);
  }
  else
  {
    JSC::Symbols::performProxyObjectSetStrictPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseAllNewResolveElementPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseAllNewResolveElementPrivateName;
  LODWORD(v8390) = 74;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1420, v1421, v1422, v1423);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1424, v1425, v1426, v1427, v1428, v1429, v1430);
      WTF::fastFree(v7094, v7095, v7096, v7097, v7098, v7099, v7100, v7101);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseAllNewResolveElementPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseAllNewResolveElementPrivateName, v1424, v1425, v1426, v1427, v1428, v1429, v1430);
    WTF::fastFree(v4302, v4303, v4304, v4305, v4306, v4307, v4308, v4309);
  }
  else
  {
    JSC::Symbols::promiseAllNewResolveElementPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseAllOnFulfilledPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseAllOnFulfilledPrivateName;
  LODWORD(v8390) = 75;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1427, v1428, v1429, v1430);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1431, v1432, v1433, v1434, v1435, v1436, v1437);
      WTF::fastFree(v7102, v7103, v7104, v7105, v7106, v7107, v7108, v7109);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseAllOnFulfilledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseAllOnFulfilledPrivateName, v1431, v1432, v1433, v1434, v1435, v1436, v1437);
    WTF::fastFree(v4310, v4311, v4312, v4313, v4314, v4315, v4316, v4317);
  }
  else
  {
    JSC::Symbols::promiseAllOnFulfilledPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseAllSlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseAllSlowPrivateName;
  LODWORD(v8390) = 76;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1434, v1435, v1436, v1437);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1438, v1439, v1440, v1441, v1442, v1443, v1444);
      WTF::fastFree(v7110, v7111, v7112, v7113, v7114, v7115, v7116, v7117);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseAllSlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseAllSlowPrivateName, v1438, v1439, v1440, v1441, v1442, v1443, v1444);
    WTF::fastFree(v4318, v4319, v4320, v4321, v4322, v4323, v4324, v4325);
  }
  else
  {
    JSC::Symbols::promiseAllSlowPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseEmptyOnFulfilledPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseEmptyOnFulfilledPrivateName;
  LODWORD(v8390) = 77;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1441, v1442, v1443, v1444);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1445, v1446, v1447, v1448, v1449, v1450, v1451);
      WTF::fastFree(v7118, v7119, v7120, v7121, v7122, v7123, v7124, v7125);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseEmptyOnFulfilledPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseEmptyOnFulfilledPrivateName, v1445, v1446, v1447, v1448, v1449, v1450, v1451);
    WTF::fastFree(v4326, v4327, v4328, v4329, v4330, v4331, v4332, v4333);
  }
  else
  {
    JSC::Symbols::promiseEmptyOnFulfilledPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseEmptyOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseEmptyOnRejectedPrivateName;
  LODWORD(v8390) = 78;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1448, v1449, v1450, v1451);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1452, v1453, v1454, v1455, v1456, v1457, v1458);
      WTF::fastFree(v7126, v7127, v7128, v7129, v7130, v7131, v7132, v7133);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseEmptyOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseEmptyOnRejectedPrivateName, v1452, v1453, v1454, v1455, v1456, v1457, v1458);
    WTF::fastFree(v4334, v4335, v4336, v4337, v4338, v4339, v4340, v4341);
  }
  else
  {
    JSC::Symbols::promiseEmptyOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseNewOnRejectedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseNewOnRejectedPrivateName;
  LODWORD(v8390) = 79;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1455, v1456, v1457, v1458);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1459, v1460, v1461, v1462, v1463, v1464, v1465);
      WTF::fastFree(v7134, v7135, v7136, v7137, v7138, v7139, v7140, v7141);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseNewOnRejectedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseNewOnRejectedPrivateName, v1459, v1460, v1461, v1462, v1463, v1464, v1465);
    WTF::fastFree(v4342, v4343, v4344, v4345, v4346, v4347, v4348, v4349);
  }
  else
  {
    JSC::Symbols::promiseNewOnRejectedPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseOnRejectedWithContextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseOnRejectedWithContextPrivateName;
  LODWORD(v8390) = 80;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1462, v1463, v1464, v1465);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1466, v1467, v1468, v1469, v1470, v1471, v1472);
      WTF::fastFree(v7142, v7143, v7144, v7145, v7146, v7147, v7148, v7149);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseOnRejectedWithContextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseOnRejectedWithContextPrivateName, v1466, v1467, v1468, v1469, v1470, v1471, v1472);
    WTF::fastFree(v4350, v4351, v4352, v4353, v4354, v4355, v4356, v4357);
  }
  else
  {
    JSC::Symbols::promiseOnRejectedWithContextPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseReactionJobPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseReactionJobPrivateName;
  LODWORD(v8390) = 81;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1469, v1470, v1471, v1472);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1473, v1474, v1475, v1476, v1477, v1478, v1479);
      WTF::fastFree(v7150, v7151, v7152, v7153, v7154, v7155, v7156, v7157);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseReactionJobPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseReactionJobPrivateName, v1473, v1474, v1475, v1476, v1477, v1478, v1479);
    WTF::fastFree(v4358, v4359, v4360, v4361, v4362, v4363, v4364, v4365);
  }
  else
  {
    JSC::Symbols::promiseReactionJobPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseReactionJobWithoutPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseReactionJobWithoutPromisePrivateName;
  LODWORD(v8390) = 82;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1476, v1477, v1478, v1479);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1480, v1481, v1482, v1483, v1484, v1485, v1486);
      WTF::fastFree(v7158, v7159, v7160, v7161, v7162, v7163, v7164, v7165);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseReactionJobWithoutPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseReactionJobWithoutPromisePrivateName, v1480, v1481, v1482, v1483, v1484, v1485, v1486);
    WTF::fastFree(v4366, v4367, v4368, v4369, v4370, v4371, v4372, v4373);
  }
  else
  {
    JSC::Symbols::promiseReactionJobWithoutPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::promiseRejectSlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseRejectSlowPrivateName;
  LODWORD(v8390) = 83;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1483, v1484, v1485, v1486);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1487, v1488, v1489, v1490, v1491, v1492, v1493);
      WTF::fastFree(v7166, v7167, v7168, v7169, v7170, v7171, v7172, v7173);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseRejectSlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseRejectSlowPrivateName, v1487, v1488, v1489, v1490, v1491, v1492, v1493);
    WTF::fastFree(v4374, v4375, v4376, v4377, v4378, v4379, v4380, v4381);
  }
  else
  {
    JSC::Symbols::promiseRejectSlowPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolvePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolvePrivateName;
  LODWORD(v8390) = 84;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1490, v1491, v1492, v1493);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1494, v1495, v1496, v1497, v1498, v1499, v1500);
      WTF::fastFree(v7174, v7175, v7176, v7177, v7178, v7179, v7180, v7181);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolvePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolvePrivateName, v1494, v1495, v1496, v1497, v1498, v1499, v1500);
    WTF::fastFree(v4382, v4383, v4384, v4385, v4386, v4387, v4388, v4389);
  }
  else
  {
    JSC::Symbols::promiseResolvePrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolveSlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolveSlowPrivateName;
  LODWORD(v8390) = 85;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1497, v1498, v1499, v1500);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1501, v1502, v1503, v1504, v1505, v1506, v1507);
      WTF::fastFree(v7182, v7183, v7184, v7185, v7186, v7187, v7188, v7189);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolveSlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolveSlowPrivateName, v1501, v1502, v1503, v1504, v1505, v1506, v1507);
    WTF::fastFree(v4390, v4391, v4392, v4393, v4394, v4395, v4396, v4397);
  }
  else
  {
    JSC::Symbols::promiseResolveSlowPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolveThenableJobPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobPrivateName;
  LODWORD(v8390) = 86;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1504, v1505, v1506, v1507);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1508, v1509, v1510, v1511, v1512, v1513, v1514);
      WTF::fastFree(v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolveThenableJobPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobPrivateName, v1508, v1509, v1510, v1511, v1512, v1513, v1514);
    WTF::fastFree(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405);
  }
  else
  {
    JSC::Symbols::promiseResolveThenableJobPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolveThenableJobFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobFastPrivateName;
  LODWORD(v8390) = 87;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1511, v1512, v1513, v1514);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1515, v1516, v1517, v1518, v1519, v1520, v1521);
      WTF::fastFree(v7198, v7199, v7200, v7201, v7202, v7203, v7204, v7205);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolveThenableJobFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobFastPrivateName, v1515, v1516, v1517, v1518, v1519, v1520, v1521);
    WTF::fastFree(v4406, v4407, v4408, v4409, v4410, v4411, v4412, v4413);
  }
  else
  {
    JSC::Symbols::promiseResolveThenableJobFastPrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName;
  LODWORD(v8390) = 88;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1518, v1519, v1520, v1521);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1522, v1523, v1524, v1525, v1526, v1527, v1528);
      WTF::fastFree(v7206, v7207, v7208, v7209, v7210, v7211, v7212, v7213);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName, v1522, v1523, v1524, v1525, v1526, v1527, v1528);
    WTF::fastFree(v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421);
  }
  else
  {
    JSC::Symbols::promiseResolveThenableJobWithDerivedPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName;
  LODWORD(v8390) = 89;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1525, v1526, v1527, v1528);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1529, v1530, v1531, v1532, v1533, v1534, v1535);
      WTF::fastFree(v7214, v7215, v7216, v7217, v7218, v7219, v7220, v7221);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName, v1529, v1530, v1531, v1532, v1533, v1534, v1535);
    WTF::fastFree(v4422, v4423, v4424, v4425, v4426, v4427, v4428, v4429);
  }
  else
  {
    JSC::Symbols::promiseResolveThenableJobWithoutPromiseFastPrivateName[0] -= 2;
  }
  JSC::Symbols::pushNewPromiseReactionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::pushNewPromiseReactionPrivateName;
  LODWORD(v8390) = 90;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1532, v1533, v1534, v1535);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1536, v1537, v1538, v1539, v1540, v1541, v1542);
      WTF::fastFree(v7222, v7223, v7224, v7225, v7226, v7227, v7228, v7229);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::pushNewPromiseReactionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::pushNewPromiseReactionPrivateName, v1536, v1537, v1538, v1539, v1540, v1541, v1542);
    WTF::fastFree(v4430, v4431, v4432, v4433, v4434, v4435, v4436, v4437);
  }
  else
  {
    JSC::Symbols::pushNewPromiseReactionPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpExecPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpExecPrivateName;
  LODWORD(v8390) = 91;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1539, v1540, v1541, v1542);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1543, v1544, v1545, v1546, v1547, v1548, v1549);
      WTF::fastFree(v7230, v7231, v7232, v7233, v7234, v7235, v7236, v7237);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpExecPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpExecPrivateName, v1543, v1544, v1545, v1546, v1547, v1548, v1549);
    WTF::fastFree(v4438, v4439, v4440, v4441, v4442, v4443, v4444, v4445);
  }
  else
  {
    JSC::Symbols::regExpExecPrivateName[0] -= 2;
  }
  JSC::Symbols::rejectPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::rejectPromisePrivateName;
  LODWORD(v8390) = 92;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1546, v1547, v1548, v1549);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1550, v1551, v1552, v1553, v1554, v1555, v1556);
      WTF::fastFree(v7238, v7239, v7240, v7241, v7242, v7243, v7244, v7245);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::rejectPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::rejectPromisePrivateName, v1550, v1551, v1552, v1553, v1554, v1555, v1556);
    WTF::fastFree(v4446, v4447, v4448, v4449, v4450, v4451, v4452, v4453);
  }
  else
  {
    JSC::Symbols::rejectPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName;
  LODWORD(v8390) = 93;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1553, v1554, v1555, v1556);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1557, v1558, v1559, v1560, v1561, v1562, v1563);
      WTF::fastFree(v7246, v7247, v7248, v7249, v7250, v7251, v7252, v7253);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName, v1557, v1558, v1559, v1560, v1561, v1562, v1563);
    WTF::fastFree(v4454, v4455, v4456, v4457, v4458, v4459, v4460, v4461);
  }
  else
  {
    JSC::Symbols::rejectPromiseWithFirstResolvingFunctionCallCheckPrivateName[0] -= 2;
  }
  JSC::Symbols::rejectWithoutPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::rejectWithoutPromisePrivateName;
  LODWORD(v8390) = 94;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1560, v1561, v1562, v1563);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1564, v1565, v1566, v1567, v1568, v1569, v1570);
      WTF::fastFree(v7254, v7255, v7256, v7257, v7258, v7259, v7260, v7261);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::rejectWithoutPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::rejectWithoutPromisePrivateName, v1564, v1565, v1566, v1567, v1568, v1569, v1570);
    WTF::fastFree(v4462, v4463, v4464, v4465, v4466, v4467, v4468, v4469);
  }
  else
  {
    JSC::Symbols::rejectWithoutPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::repeatCharactersSlowPathPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::repeatCharactersSlowPathPrivateName;
  LODWORD(v8390) = 95;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1567, v1568, v1569, v1570);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1571, v1572, v1573, v1574, v1575, v1576, v1577);
      WTF::fastFree(v7262, v7263, v7264, v7265, v7266, v7267, v7268, v7269);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::repeatCharactersSlowPathPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::repeatCharactersSlowPathPrivateName, v1571, v1572, v1573, v1574, v1575, v1576, v1577);
    WTF::fastFree(v4470, v4471, v4472, v4473, v4474, v4475, v4476, v4477);
  }
  else
  {
    JSC::Symbols::repeatCharactersSlowPathPrivateName[0] -= 2;
  }
  JSC::Symbols::repeatSlowPathPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::repeatSlowPathPrivateName;
  LODWORD(v8390) = 96;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1574, v1575, v1576, v1577);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1578, v1579, v1580, v1581, v1582, v1583, v1584);
      WTF::fastFree(v7270, v7271, v7272, v7273, v7274, v7275, v7276, v7277);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::repeatSlowPathPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::repeatSlowPathPrivateName, v1578, v1579, v1580, v1581, v1582, v1583, v1584);
    WTF::fastFree(v4478, v4479, v4480, v4481, v4482, v4483, v4484, v4485);
  }
  else
  {
    JSC::Symbols::repeatSlowPathPrivateName[0] -= 2;
  }
  JSC::Symbols::resolvePromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::resolvePromisePrivateName;
  LODWORD(v8390) = 97;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1581, v1582, v1583, v1584);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1585, v1586, v1587, v1588, v1589, v1590, v1591);
      WTF::fastFree(v7278, v7279, v7280, v7281, v7282, v7283, v7284, v7285);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::resolvePromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolvePromisePrivateName, v1585, v1586, v1587, v1588, v1589, v1590, v1591);
    WTF::fastFree(v4486, v4487, v4488, v4489, v4490, v4491, v4492, v4493);
  }
  else
  {
    JSC::Symbols::resolvePromisePrivateName[0] -= 2;
  }
  JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName;
  LODWORD(v8390) = 98;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1588, v1589, v1590, v1591);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1592, v1593, v1594, v1595, v1596, v1597, v1598);
      WTF::fastFree(v7286, v7287, v7288, v7289, v7290, v7291, v7292, v7293);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName, v1592, v1593, v1594, v1595, v1596, v1597, v1598);
    WTF::fastFree(v4494, v4495, v4496, v4497, v4498, v4499, v4500, v4501);
  }
  else
  {
    JSC::Symbols::resolvePromiseWithFirstResolvingFunctionCallCheckPrivateName[0] -= 2;
  }
  JSC::Symbols::resolveWithoutPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::resolveWithoutPromisePrivateName;
  LODWORD(v8390) = 99;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1595, v1596, v1597, v1598);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1599, v1600, v1601, v1602, v1603, v1604, v1605);
      WTF::fastFree(v7294, v7295, v7296, v7297, v7298, v7299, v7300, v7301);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::resolveWithoutPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolveWithoutPromisePrivateName, v1599, v1600, v1601, v1602, v1603, v1604, v1605);
    WTF::fastFree(v4502, v4503, v4504, v4505, v4506, v4507, v4508, v4509);
  }
  else
  {
    JSC::Symbols::resolveWithoutPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName;
  LODWORD(v8390) = 100;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1602, v1603, v1604, v1605);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1606, v1607, v1608, v1609, v1610, v1611, v1612);
      WTF::fastFree(v7302, v7303, v7304, v7305, v7306, v7307, v7308, v7309);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
    WTF::fastFree(v4510, v4511, v4512, v4513, v4514, v4515, v4516, v4517);
  }
  else
  {
    JSC::Symbols::resolveWithoutPromiseForAsyncAwaitPrivateName[0] -= 2;
  }
  JSC::Symbols::setStateToMaxPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setStateToMaxPrivateName;
  LODWORD(v8390) = 101;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1609, v1610, v1611, v1612);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1613, v1614, v1615, v1616, v1617, v1618, v1619);
      WTF::fastFree(v7310, v7311, v7312, v7313, v7314, v7315, v7316, v7317);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setStateToMaxPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setStateToMaxPrivateName, v1613, v1614, v1615, v1616, v1617, v1618, v1619);
    WTF::fastFree(v4518, v4519, v4520, v4521, v4522, v4523, v4524, v4525);
  }
  else
  {
    JSC::Symbols::setStateToMaxPrivateName[0] -= 2;
  }
  JSC::Symbols::speciesConstructorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::speciesConstructorPrivateName;
  LODWORD(v8390) = 102;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1616, v1617, v1618, v1619);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1620, v1621, v1622, v1623, v1624, v1625, v1626);
      WTF::fastFree(v7318, v7319, v7320, v7321, v7322, v7323, v7324, v7325);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::speciesConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::speciesConstructorPrivateName, v1620, v1621, v1622, v1623, v1624, v1625, v1626);
    WTF::fastFree(v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533);
  }
  else
  {
    JSC::Symbols::speciesConstructorPrivateName[0] -= 2;
  }
  JSC::Symbols::stringConcatSlowPathPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::stringConcatSlowPathPrivateName;
  LODWORD(v8390) = 103;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1623, v1624, v1625, v1626);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1627, v1628, v1629, v1630, v1631, v1632, v1633);
      WTF::fastFree(v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::stringConcatSlowPathPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringConcatSlowPathPrivateName, v1627, v1628, v1629, v1630, v1631, v1632, v1633);
    WTF::fastFree(v4534, v4535, v4536, v4537, v4538, v4539, v4540, v4541);
  }
  else
  {
    JSC::Symbols::stringConcatSlowPathPrivateName[0] -= 2;
  }
  JSC::Symbols::triggerPromiseReactionsPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::triggerPromiseReactionsPrivateName;
  LODWORD(v8390) = 104;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1630, v1631, v1632, v1633);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1634, v1635, v1636, v1637, v1638, v1639, v1640);
      WTF::fastFree(v7334, v7335, v7336, v7337, v7338, v7339, v7340, v7341);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::triggerPromiseReactionsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::triggerPromiseReactionsPrivateName, v1634, v1635, v1636, v1637, v1638, v1639, v1640);
    WTF::fastFree(v4542, v4543, v4544, v4545, v4546, v4547, v4548, v4549);
  }
  else
  {
    JSC::Symbols::triggerPromiseReactionsPrivateName[0] -= 2;
  }
  JSC::Symbols::typedArraySpeciesConstructorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::typedArraySpeciesConstructorPrivateName;
  LODWORD(v8390) = 105;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1637, v1638, v1639, v1640);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1641, v1642, v1643, v1644, v1645, v1646, v1647);
      WTF::fastFree(v7342, v7343, v7344, v7345, v7346, v7347, v7348, v7349);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::typedArraySpeciesConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::typedArraySpeciesConstructorPrivateName, v1641, v1642, v1643, v1644, v1645, v1646, v1647);
    WTF::fastFree(v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4557);
  }
  else
  {
    JSC::Symbols::typedArraySpeciesConstructorPrivateName[0] -= 2;
  }
  JSC::Symbols::wrapRemoteValuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::wrapRemoteValuePrivateName;
  LODWORD(v8390) = 106;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1644, v1645, v1646, v1647);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1648, v1649, v1650, v1651, v1652, v1653, v1654);
      WTF::fastFree(v7350, v7351, v7352, v7353, v7354, v7355, v7356, v7357);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::wrapRemoteValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::wrapRemoteValuePrivateName, v1648, v1649, v1650, v1651, v1652, v1653, v1654);
    WTF::fastFree(v4558, v4559, v4560, v4561, v4562, v4563, v4564, v4565);
  }
  else
  {
    JSC::Symbols::wrapRemoteValuePrivateName[0] -= 2;
  }
  JSC::Symbols::wrappedIteratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::wrappedIteratorPrivateName;
  LODWORD(v8390) = 107;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1651, v1652, v1653, v1654);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1655, v1656, v1657, v1658, v1659, v1660, v1661);
      WTF::fastFree(v7358, v7359, v7360, v7361, v7362, v7363, v7364, v7365);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::wrappedIteratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::wrappedIteratorPrivateName, v1655, v1656, v1657, v1658, v1659, v1660, v1661);
    WTF::fastFree(v4566, v4567, v4568, v4569, v4570, v4571, v4572, v4573);
  }
  else
  {
    JSC::Symbols::wrappedIteratorPrivateName[0] -= 2;
  }
  JSC::Symbols::throwTypeErrorFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::throwTypeErrorFunctionPrivateName;
  LODWORD(v8390) = 108;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1658, v1659, v1660, v1661);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1662, v1663, v1664, v1665, v1666, v1667, v1668);
      WTF::fastFree(v7366, v7367, v7368, v7369, v7370, v7371, v7372, v7373);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::throwTypeErrorFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::throwTypeErrorFunctionPrivateName, v1662, v1663, v1664, v1665, v1666, v1667, v1668);
    WTF::fastFree(v4574, v4575, v4576, v4577, v4578, v4579, v4580, v4581);
  }
  else
  {
    JSC::Symbols::throwTypeErrorFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::importModulePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::importModulePrivateName;
  LODWORD(v8390) = 109;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1665, v1666, v1667, v1668);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1669, v1670, v1671, v1672, v1673, v1674, v1675);
      WTF::fastFree(v7374, v7375, v7376, v7377, v7378, v7379, v7380, v7381);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::importModulePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::importModulePrivateName, v1669, v1670, v1671, v1672, v1673, v1674, v1675);
    WTF::fastFree(v4582, v4583, v4584, v4585, v4586, v4587, v4588, v4589);
  }
  else
  {
    JSC::Symbols::importModulePrivateName[0] -= 2;
  }
  JSC::Symbols::mapStoragePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapStoragePrivateName;
  LODWORD(v8390) = 110;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1672, v1673, v1674, v1675);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1676, v1677, v1678, v1679, v1680, v1681, v1682);
      WTF::fastFree(v7382, v7383, v7384, v7385, v7386, v7387, v7388, v7389);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapStoragePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapStoragePrivateName, v1676, v1677, v1678, v1679, v1680, v1681, v1682);
    WTF::fastFree(v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597);
  }
  else
  {
    JSC::Symbols::mapStoragePrivateName[0] -= 2;
  }
  JSC::Symbols::mapIterationNextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIterationNextPrivateName;
  LODWORD(v8390) = 111;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1679, v1680, v1681, v1682);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1683, v1684, v1685, v1686, v1687, v1688, v1689);
      WTF::fastFree(v7390, v7391, v7392, v7393, v7394, v7395, v7396, v7397);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIterationNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIterationNextPrivateName, v1683, v1684, v1685, v1686, v1687, v1688, v1689);
    WTF::fastFree(v4598, v4599, v4600, v4601, v4602, v4603, v4604, v4605);
  }
  else
  {
    JSC::Symbols::mapIterationNextPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIterationEntryPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryPrivateName;
  LODWORD(v8390) = 112;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1686, v1687, v1688, v1689);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1690, v1691, v1692, v1693, v1694, v1695, v1696);
      WTF::fastFree(v7398, v7399, v7400, v7401, v7402, v7403, v7404, v7405);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIterationEntryPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIterationEntryPrivateName, v1690, v1691, v1692, v1693, v1694, v1695, v1696);
    WTF::fastFree(v4606, v4607, v4608, v4609, v4610, v4611, v4612, v4613);
  }
  else
  {
    JSC::Symbols::mapIterationEntryPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIterationEntryKeyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryKeyPrivateName;
  LODWORD(v8390) = 113;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1693, v1694, v1695, v1696);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1697, v1698, v1699, v1700, v1701, v1702, v1703);
      WTF::fastFree(v7406, v7407, v7408, v7409, v7410, v7411, v7412, v7413);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIterationEntryKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIterationEntryKeyPrivateName, v1697, v1698, v1699, v1700, v1701, v1702, v1703);
    WTF::fastFree(v4614, v4615, v4616, v4617, v4618, v4619, v4620, v4621);
  }
  else
  {
    JSC::Symbols::mapIterationEntryKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIterationEntryValuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIterationEntryValuePrivateName;
  LODWORD(v8390) = 114;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1700, v1701, v1702, v1703);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1704, v1705, v1706, v1707, v1708, v1709, v1710);
      WTF::fastFree(v7414, v7415, v7416, v7417, v7418, v7419, v7420, v7421);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIterationEntryValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIterationEntryValuePrivateName, v1704, v1705, v1706, v1707, v1708, v1709, v1710);
    WTF::fastFree(v4622, v4623, v4624, v4625, v4626, v4627, v4628, v4629);
  }
  else
  {
    JSC::Symbols::mapIterationEntryValuePrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorNextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIteratorNextPrivateName;
  LODWORD(v8390) = 115;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1707, v1708, v1709, v1710);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1711, v1712, v1713, v1714, v1715, v1716, v1717);
      WTF::fastFree(v7422, v7423, v7424, v7425, v7426, v7427, v7428, v7429);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorNextPrivateName, v1711, v1712, v1713, v1714, v1715, v1716, v1717);
    WTF::fastFree(v4630, v4631, v4632, v4633, v4634, v4635, v4636, v4637);
  }
  else
  {
    JSC::Symbols::mapIteratorNextPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorKeyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIteratorKeyPrivateName;
  LODWORD(v8390) = 116;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1714, v1715, v1716, v1717);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1718, v1719, v1720, v1721, v1722, v1723, v1724);
      WTF::fastFree(v7430, v7431, v7432, v7433, v7434, v7435, v7436, v7437);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorKeyPrivateName, v1718, v1719, v1720, v1721, v1722, v1723, v1724);
    WTF::fastFree(v4638, v4639, v4640, v4641, v4642, v4643, v4644, v4645);
  }
  else
  {
    JSC::Symbols::mapIteratorKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::mapIteratorValuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::mapIteratorValuePrivateName;
  LODWORD(v8390) = 117;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1721, v1722, v1723, v1724);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1725, v1726, v1727, v1728, v1729, v1730, v1731);
      WTF::fastFree(v7438, v7439, v7440, v7441, v7442, v7443, v7444, v7445);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::mapIteratorValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapIteratorValuePrivateName, v1725, v1726, v1727, v1728, v1729, v1730, v1731);
    WTF::fastFree(v4646, v4647, v4648, v4649, v4650, v4651, v4652, v4653);
  }
  else
  {
    JSC::Symbols::mapIteratorValuePrivateName[0] -= 2;
  }
  JSC::Symbols::setStoragePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setStoragePrivateName;
  LODWORD(v8390) = 118;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1728, v1729, v1730, v1731);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1732, v1733, v1734, v1735, v1736, v1737, v1738);
      WTF::fastFree(v7446, v7447, v7448, v7449, v7450, v7451, v7452, v7453);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setStoragePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setStoragePrivateName, v1732, v1733, v1734, v1735, v1736, v1737, v1738);
    WTF::fastFree(v4654, v4655, v4656, v4657, v4658, v4659, v4660, v4661);
  }
  else
  {
    JSC::Symbols::setStoragePrivateName[0] -= 2;
  }
  JSC::Symbols::setIterationNextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setIterationNextPrivateName;
  LODWORD(v8390) = 119;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1735, v1736, v1737, v1738);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1739, v1740, v1741, v1742, v1743, v1744, v1745);
      WTF::fastFree(v7454, v7455, v7456, v7457, v7458, v7459, v7460, v7461);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setIterationNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIterationNextPrivateName, v1739, v1740, v1741, v1742, v1743, v1744, v1745);
    WTF::fastFree(v4662, v4663, v4664, v4665, v4666, v4667, v4668, v4669);
  }
  else
  {
    JSC::Symbols::setIterationNextPrivateName[0] -= 2;
  }
  JSC::Symbols::setIterationEntryPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setIterationEntryPrivateName;
  LODWORD(v8390) = 120;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1742, v1743, v1744, v1745);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1746, v1747, v1748, v1749, v1750, v1751, v1752);
      WTF::fastFree(v7462, v7463, v7464, v7465, v7466, v7467, v7468, v7469);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setIterationEntryPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIterationEntryPrivateName, v1746, v1747, v1748, v1749, v1750, v1751, v1752);
    WTF::fastFree(v4670, v4671, v4672, v4673, v4674, v4675, v4676, v4677);
  }
  else
  {
    JSC::Symbols::setIterationEntryPrivateName[0] -= 2;
  }
  JSC::Symbols::setIterationEntryKeyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setIterationEntryKeyPrivateName;
  LODWORD(v8390) = 121;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1749, v1750, v1751, v1752);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1753, v1754, v1755, v1756, v1757, v1758, v1759);
      WTF::fastFree(v7470, v7471, v7472, v7473, v7474, v7475, v7476, v7477);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setIterationEntryKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIterationEntryKeyPrivateName, v1753, v1754, v1755, v1756, v1757, v1758, v1759);
    WTF::fastFree(v4678, v4679, v4680, v4681, v4682, v4683, v4684, v4685);
  }
  else
  {
    JSC::Symbols::setIterationEntryKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorNextPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setIteratorNextPrivateName;
  LODWORD(v8390) = 122;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1756, v1757, v1758, v1759);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1760, v1761, v1762, v1763, v1764, v1765, v1766);
      WTF::fastFree(v7478, v7479, v7480, v7481, v7482, v7483, v7484, v7485);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setIteratorNextPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorNextPrivateName, v1760, v1761, v1762, v1763, v1764, v1765, v1766);
    WTF::fastFree(v4686, v4687, v4688, v4689, v4690, v4691, v4692, v4693);
  }
  else
  {
    JSC::Symbols::setIteratorNextPrivateName[0] -= 2;
  }
  JSC::Symbols::setIteratorKeyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setIteratorKeyPrivateName;
  LODWORD(v8390) = 123;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1763, v1764, v1765, v1766);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1767, v1768, v1769, v1770, v1771, v1772, v1773);
      WTF::fastFree(v7486, v7487, v7488, v7489, v7490, v7491, v7492, v7493);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setIteratorKeyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setIteratorKeyPrivateName, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
    WTF::fastFree(v4694, v4695, v4696, v4697, v4698, v4699, v4700, v4701);
  }
  else
  {
    JSC::Symbols::setIteratorKeyPrivateName[0] -= 2;
  }
  JSC::Symbols::setClonePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setClonePrivateName;
  LODWORD(v8390) = 124;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1770, v1771, v1772, v1773);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1774, v1775, v1776, v1777, v1778, v1779, v1780);
      WTF::fastFree(v7494, v7495, v7496, v7497, v7498, v7499, v7500, v7501);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setClonePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setClonePrivateName, v1774, v1775, v1776, v1777, v1778, v1779, v1780);
    WTF::fastFree(v4702, v4703, v4704, v4705, v4706, v4707, v4708, v4709);
  }
  else
  {
    JSC::Symbols::setClonePrivateName[0] -= 2;
  }
  JSC::Symbols::setPrototypeDirectPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setPrototypeDirectPrivateName;
  LODWORD(v8390) = 125;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1777, v1778, v1779, v1780);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1781, v1782, v1783, v1784, v1785, v1786, v1787);
      WTF::fastFree(v7502, v7503, v7504, v7505, v7506, v7507, v7508, v7509);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setPrototypeDirectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setPrototypeDirectPrivateName, v1781, v1782, v1783, v1784, v1785, v1786, v1787);
    WTF::fastFree(v4710, v4711, v4712, v4713, v4714, v4715, v4716, v4717);
  }
  else
  {
    JSC::Symbols::setPrototypeDirectPrivateName[0] -= 2;
  }
  JSC::Symbols::setPrototypeDirectOrThrowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::setPrototypeDirectOrThrowPrivateName;
  LODWORD(v8390) = 126;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1784, v1785, v1786, v1787);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1788, v1789, v1790, v1791, v1792, v1793, v1794);
      WTF::fastFree(v7510, v7511, v7512, v7513, v7514, v7515, v7516, v7517);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::setPrototypeDirectOrThrowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setPrototypeDirectOrThrowPrivateName, v1788, v1789, v1790, v1791, v1792, v1793, v1794);
    WTF::fastFree(v4718, v4719, v4720, v4721, v4722, v4723, v4724, v4725);
  }
  else
  {
    JSC::Symbols::setPrototypeDirectOrThrowPrivateName[0] -= 2;
  }
  JSC::Symbols::copyDataPropertiesPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::copyDataPropertiesPrivateName;
  LODWORD(v8390) = 127;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1791, v1792, v1793, v1794);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1795, v1796, v1797, v1798, v1799, v1800, v1801);
      WTF::fastFree(v7518, v7519, v7520, v7521, v7522, v7523, v7524, v7525);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::copyDataPropertiesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::copyDataPropertiesPrivateName, v1795, v1796, v1797, v1798, v1799, v1800, v1801);
    WTF::fastFree(v4726, v4727, v4728, v4729, v4730, v4731, v4732, v4733);
  }
  else
  {
    JSC::Symbols::copyDataPropertiesPrivateName[0] -= 2;
  }
  JSC::Symbols::cloneObjectPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::cloneObjectPrivateName;
  LODWORD(v8390) = 128;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1798, v1799, v1800, v1801);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1802, v1803, v1804, v1805, v1806, v1807, v1808);
      WTF::fastFree(v7526, v7527, v7528, v7529, v7530, v7531, v7532, v7533);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::cloneObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::cloneObjectPrivateName, v1802, v1803, v1804, v1805, v1806, v1807, v1808);
    WTF::fastFree(v4734, v4735, v4736, v4737, v4738, v4739, v4740, v4741);
  }
  else
  {
    JSC::Symbols::cloneObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::enqueueJobPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::enqueueJobPrivateName;
  LODWORD(v8390) = 129;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1805, v1806, v1807, v1808);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1809, v1810, v1811, v1812, v1813, v1814, v1815);
      WTF::fastFree(v7534, v7535, v7536, v7537, v7538, v7539, v7540, v7541);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::enqueueJobPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::enqueueJobPrivateName, v1809, v1810, v1811, v1812, v1813, v1814, v1815);
    WTF::fastFree(v4742, v4743, v4744, v4745, v4746, v4747, v4748, v4749);
  }
  else
  {
    JSC::Symbols::enqueueJobPrivateName[0] -= 2;
  }
  JSC::Symbols::makeTypeErrorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::makeTypeErrorPrivateName;
  LODWORD(v8390) = 130;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1812, v1813, v1814, v1815);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1816, v1817, v1818, v1819, v1820, v1821, v1822);
      WTF::fastFree(v7542, v7543, v7544, v7545, v7546, v7547, v7548, v7549);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::makeTypeErrorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::makeTypeErrorPrivateName, v1816, v1817, v1818, v1819, v1820, v1821, v1822);
    WTF::fastFree(v4750, v4751, v4752, v4753, v4754, v4755, v4756, v4757);
  }
  else
  {
    JSC::Symbols::makeTypeErrorPrivateName[0] -= 2;
  }
  JSC::Symbols::AggregateErrorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::AggregateErrorPrivateName;
  LODWORD(v8390) = 131;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1819, v1820, v1821, v1822);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1823, v1824, v1825, v1826, v1827, v1828, v1829);
      WTF::fastFree(v7550, v7551, v7552, v7553, v7554, v7555, v7556, v7557);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::AggregateErrorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::AggregateErrorPrivateName, v1823, v1824, v1825, v1826, v1827, v1828, v1829);
    WTF::fastFree(v4758, v4759, v4760, v4761, v4762, v4763, v4764, v4765);
  }
  else
  {
    JSC::Symbols::AggregateErrorPrivateName[0] -= 2;
  }
  JSC::Symbols::typedArrayLengthPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::typedArrayLengthPrivateName;
  LODWORD(v8390) = 132;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1826, v1827, v1828, v1829);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1830, v1831, v1832, v1833, v1834, v1835, v1836);
      WTF::fastFree(v7558, v7559, v7560, v7561, v7562, v7563, v7564, v7565);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::typedArrayLengthPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::typedArrayLengthPrivateName, v1830, v1831, v1832, v1833, v1834, v1835, v1836);
    WTF::fastFree(v4766, v4767, v4768, v4769, v4770, v4771, v4772, v4773);
  }
  else
  {
    JSC::Symbols::typedArrayLengthPrivateName[0] -= 2;
  }
  JSC::Symbols::typedArrayContentTypePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::typedArrayContentTypePrivateName;
  LODWORD(v8390) = 133;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1833, v1834, v1835, v1836);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1837, v1838, v1839, v1840, v1841, v1842, v1843);
      WTF::fastFree(v7566, v7567, v7568, v7569, v7570, v7571, v7572, v7573);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::typedArrayContentTypePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::typedArrayContentTypePrivateName, v1837, v1838, v1839, v1840, v1841, v1842, v1843);
    WTF::fastFree(v4774, v4775, v4776, v4777, v4778, v4779, v4780, v4781);
  }
  else
  {
    JSC::Symbols::typedArrayContentTypePrivateName[0] -= 2;
  }
  JSC::Symbols::typedArrayGetOriginalConstructorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::typedArrayGetOriginalConstructorPrivateName;
  LODWORD(v8390) = 134;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1840, v1841, v1842, v1843);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1844, v1845, v1846, v1847, v1848, v1849, v1850);
      WTF::fastFree(v7574, v7575, v7576, v7577, v7578, v7579, v7580, v7581);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::typedArrayGetOriginalConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::typedArrayGetOriginalConstructorPrivateName, v1844, v1845, v1846, v1847, v1848, v1849, v1850);
    WTF::fastFree(v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789);
  }
  else
  {
    JSC::Symbols::typedArrayGetOriginalConstructorPrivateName[0] -= 2;
  }
  JSC::Symbols::toIntegerOrInfinityPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::toIntegerOrInfinityPrivateName;
  LODWORD(v8390) = 135;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1847, v1848, v1849, v1850);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1851, v1852, v1853, v1854, v1855, v1856, v1857);
      WTF::fastFree(v7582, v7583, v7584, v7585, v7586, v7587, v7588, v7589);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::toIntegerOrInfinityPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toIntegerOrInfinityPrivateName, v1851, v1852, v1853, v1854, v1855, v1856, v1857);
    WTF::fastFree(v4790, v4791, v4792, v4793, v4794, v4795, v4796, v4797);
  }
  else
  {
    JSC::Symbols::toIntegerOrInfinityPrivateName[0] -= 2;
  }
  JSC::Symbols::toLengthPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::toLengthPrivateName;
  LODWORD(v8390) = 136;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1854, v1855, v1856, v1857);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1858, v1859, v1860, v1861, v1862, v1863, v1864);
      WTF::fastFree(v7590, v7591, v7592, v7593, v7594, v7595, v7596, v7597);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::toLengthPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::toLengthPrivateName, v1858, v1859, v1860, v1861, v1862, v1863, v1864);
    WTF::fastFree(v4798, v4799, v4800, v4801, v4802, v4803, v4804, v4805);
  }
  else
  {
    JSC::Symbols::toLengthPrivateName[0] -= 2;
  }
  JSC::Symbols::isTypedArrayViewPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isTypedArrayViewPrivateName;
  LODWORD(v8390) = 137;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1861, v1862, v1863, v1864);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1865, v1866, v1867, v1868, v1869, v1870, v1871);
      WTF::fastFree(v7598, v7599, v7600, v7601, v7602, v7603, v7604, v7605);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isTypedArrayViewPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isTypedArrayViewPrivateName, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
    WTF::fastFree(v4806, v4807, v4808, v4809, v4810, v4811, v4812, v4813);
  }
  else
  {
    JSC::Symbols::isTypedArrayViewPrivateName[0] -= 2;
  }
  JSC::Symbols::isSharedTypedArrayViewPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isSharedTypedArrayViewPrivateName;
  LODWORD(v8390) = 138;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1868, v1869, v1870, v1871);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1872, v1873, v1874, v1875, v1876, v1877, v1878);
      WTF::fastFree(v7606, v7607, v7608, v7609, v7610, v7611, v7612, v7613);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isSharedTypedArrayViewPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isSharedTypedArrayViewPrivateName, v1872, v1873, v1874, v1875, v1876, v1877, v1878);
    WTF::fastFree(v4814, v4815, v4816, v4817, v4818, v4819, v4820, v4821);
  }
  else
  {
    JSC::Symbols::isSharedTypedArrayViewPrivateName[0] -= 2;
  }
  JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName;
  LODWORD(v8390) = 139;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1875, v1876, v1877, v1878);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1879, v1880, v1881, v1882, v1883, v1884, v1885);
      WTF::fastFree(v7614, v7615, v7616, v7617, v7618, v7619, v7620, v7621);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName, v1879, v1880, v1881, v1882, v1883, v1884, v1885);
    WTF::fastFree(v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829);
  }
  else
  {
    JSC::Symbols::isResizableOrGrowableSharedTypedArrayViewPrivateName[0] -= 2;
  }
  JSC::Symbols::typedArrayFromFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::typedArrayFromFastPrivateName;
  LODWORD(v8390) = 140;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1882, v1883, v1884, v1885);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1886, v1887, v1888, v1889, v1890, v1891, v1892);
      WTF::fastFree(v7622, v7623, v7624, v7625, v7626, v7627, v7628, v7629);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::typedArrayFromFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::typedArrayFromFastPrivateName, v1886, v1887, v1888, v1889, v1890, v1891, v1892);
    WTF::fastFree(v4830, v4831, v4832, v4833, v4834, v4835, v4836, v4837);
  }
  else
  {
    JSC::Symbols::typedArrayFromFastPrivateName[0] -= 2;
  }
  JSC::Symbols::isDetachedPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isDetachedPrivateName;
  LODWORD(v8390) = 141;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1889, v1890, v1891, v1892);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1893, v1894, v1895, v1896, v1897, v1898, v1899);
      WTF::fastFree(v7630, v7631, v7632, v7633, v7634, v7635, v7636, v7637);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isDetachedPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isDetachedPrivateName, v1893, v1894, v1895, v1896, v1897, v1898, v1899);
    WTF::fastFree(v4838, v4839, v4840, v4841, v4842, v4843, v4844, v4845);
  }
  else
  {
    JSC::Symbols::isDetachedPrivateName[0] -= 2;
  }
  JSC::Symbols::isBoundFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isBoundFunctionPrivateName;
  LODWORD(v8390) = 142;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1896, v1897, v1898, v1899);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1900, v1901, v1902, v1903, v1904, v1905, v1906);
      WTF::fastFree(v7638, v7639, v7640, v7641, v7642, v7643, v7644, v7645);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isBoundFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isBoundFunctionPrivateName, v1900, v1901, v1902, v1903, v1904, v1905, v1906);
    WTF::fastFree(v4846, v4847, v4848, v4849, v4850, v4851, v4852, v4853);
  }
  else
  {
    JSC::Symbols::isBoundFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::hasInstanceBoundFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hasInstanceBoundFunctionPrivateName;
  LODWORD(v8390) = 143;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1903, v1904, v1905, v1906);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1907, v1908, v1909, v1910, v1911, v1912, v1913);
      WTF::fastFree(v7646, v7647, v7648, v7649, v7650, v7651, v7652, v7653);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hasInstanceBoundFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasInstanceBoundFunctionPrivateName, v1907, v1908, v1909, v1910, v1911, v1912, v1913);
    WTF::fastFree(v4854, v4855, v4856, v4857, v4858, v4859, v4860, v4861);
  }
  else
  {
    JSC::Symbols::hasInstanceBoundFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::instanceOfPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::instanceOfPrivateName;
  LODWORD(v8390) = 144;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1910, v1911, v1912, v1913);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1914, v1915, v1916, v1917, v1918, v1919, v1920);
      WTF::fastFree(v7654, v7655, v7656, v7657, v7658, v7659, v7660, v7661);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::instanceOfPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::instanceOfPrivateName, v1914, v1915, v1916, v1917, v1918, v1919, v1920);
    WTF::fastFree(v4862, v4863, v4864, v4865, v4866, v4867, v4868, v4869);
  }
  else
  {
    JSC::Symbols::instanceOfPrivateName[0] -= 2;
  }
  JSC::Symbols::BuiltinLogPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::BuiltinLogPrivateName;
  LODWORD(v8390) = 145;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1917, v1918, v1919, v1920);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1921, v1922, v1923, v1924, v1925, v1926, v1927);
      WTF::fastFree(v7662, v7663, v7664, v7665, v7666, v7667, v7668, v7669);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::BuiltinLogPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::BuiltinLogPrivateName, v1921, v1922, v1923, v1924, v1925, v1926, v1927);
    WTF::fastFree(v4870, v4871, v4872, v4873, v4874, v4875, v4876, v4877);
  }
  else
  {
    JSC::Symbols::BuiltinLogPrivateName[0] -= 2;
  }
  JSC::Symbols::BuiltinDescribePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::BuiltinDescribePrivateName;
  LODWORD(v8390) = 146;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1924, v1925, v1926, v1927);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1928, v1929, v1930, v1931, v1932, v1933, v1934);
      WTF::fastFree(v7670, v7671, v7672, v7673, v7674, v7675, v7676, v7677);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::BuiltinDescribePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::BuiltinDescribePrivateName, v1928, v1929, v1930, v1931, v1932, v1933, v1934);
    WTF::fastFree(v4878, v4879, v4880, v4881, v4882, v4883, v4884, v4885);
  }
  else
  {
    JSC::Symbols::BuiltinDescribePrivateName[0] -= 2;
  }
  JSC::Symbols::RegExpPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::RegExpPrivateName;
  LODWORD(v8390) = 147;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1931, v1932, v1933, v1934);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1935, v1936, v1937, v1938, v1939, v1940, v1941);
      WTF::fastFree(v7678, v7679, v7680, v7681, v7682, v7683, v7684, v7685);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::RegExpPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::RegExpPrivateName, v1935, v1936, v1937, v1938, v1939, v1940, v1941);
    WTF::fastFree(v4886, v4887, v4888, v4889, v4890, v4891, v4892, v4893);
  }
  else
  {
    JSC::Symbols::RegExpPrivateName[0] -= 2;
  }
  JSC::Symbols::minPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::minPrivateName;
  LODWORD(v8390) = 148;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1938, v1939, v1940, v1941);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1942, v1943, v1944, v1945, v1946, v1947, v1948);
      WTF::fastFree(v7686, v7687, v7688, v7689, v7690, v7691, v7692, v7693);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::minPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::minPrivateName, v1942, v1943, v1944, v1945, v1946, v1947, v1948);
    WTF::fastFree(v4894, v4895, v4896, v4897, v4898, v4899, v4900, v4901);
  }
  else
  {
    JSC::Symbols::minPrivateName[0] -= 2;
  }
  JSC::Symbols::PromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::PromisePrivateName;
  LODWORD(v8390) = 149;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1945, v1946, v1947, v1948);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1949, v1950, v1951, v1952, v1953, v1954, v1955);
      WTF::fastFree(v7694, v7695, v7696, v7697, v7698, v7699, v7700, v7701);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::PromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::PromisePrivateName, v1949, v1950, v1951, v1952, v1953, v1954, v1955);
    WTF::fastFree(v4902, v4903, v4904, v4905, v4906, v4907, v4908, v4909);
  }
  else
  {
    JSC::Symbols::PromisePrivateName[0] -= 2;
  }
  JSC::Symbols::InternalPromisePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::InternalPromisePrivateName;
  LODWORD(v8390) = 150;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1952, v1953, v1954, v1955);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1956, v1957, v1958, v1959, v1960, v1961, v1962);
      WTF::fastFree(v7702, v7703, v7704, v7705, v7706, v7707, v7708, v7709);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::InternalPromisePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::InternalPromisePrivateName, v1956, v1957, v1958, v1959, v1960, v1961, v1962);
    WTF::fastFree(v4910, v4911, v4912, v4913, v4914, v4915, v4916, v4917);
  }
  else
  {
    JSC::Symbols::InternalPromisePrivateName[0] -= 2;
  }
  JSC::Symbols::defaultPromiseThenPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::defaultPromiseThenPrivateName;
  LODWORD(v8390) = 151;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1959, v1960, v1961, v1962);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1963, v1964, v1965, v1966, v1967, v1968, v1969);
      WTF::fastFree(v7710, v7711, v7712, v7713, v7714, v7715, v7716, v7717);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::defaultPromiseThenPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::defaultPromiseThenPrivateName, v1963, v1964, v1965, v1966, v1967, v1968, v1969);
    WTF::fastFree(v4918, v4919, v4920, v4921, v4922, v4923, v4924, v4925);
  }
  else
  {
    JSC::Symbols::defaultPromiseThenPrivateName[0] -= 2;
  }
  JSC::Symbols::repeatCharacterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::repeatCharacterPrivateName;
  LODWORD(v8390) = 152;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1966, v1967, v1968, v1969);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1970, v1971, v1972, v1973, v1974, v1975, v1976);
      WTF::fastFree(v7718, v7719, v7720, v7721, v7722, v7723, v7724, v7725);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::repeatCharacterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::repeatCharacterPrivateName, v1970, v1971, v1972, v1973, v1974, v1975, v1976);
    WTF::fastFree(v4926, v4927, v4928, v4929, v4930, v4931, v4932, v4933);
  }
  else
  {
    JSC::Symbols::repeatCharacterPrivateName[0] -= 2;
  }
  JSC::Symbols::isArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isArrayPrivateName;
  LODWORD(v8390) = 153;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1973, v1974, v1975, v1976);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1977, v1978, v1979, v1980, v1981, v1982, v1983);
      WTF::fastFree(v7726, v7727, v7728, v7729, v7730, v7731, v7732, v7733);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isArrayPrivateName, v1977, v1978, v1979, v1980, v1981, v1982, v1983);
    WTF::fastFree(v4934, v4935, v4936, v4937, v4938, v4939, v4940, v4941);
  }
  else
  {
    JSC::Symbols::isArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::isArraySlowPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isArraySlowPrivateName;
  LODWORD(v8390) = 154;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1980, v1981, v1982, v1983);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1984, v1985, v1986, v1987, v1988, v1989, v1990);
      WTF::fastFree(v7734, v7735, v7736, v7737, v7738, v7739, v7740, v7741);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isArraySlowPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isArraySlowPrivateName, v1984, v1985, v1986, v1987, v1988, v1989, v1990);
    WTF::fastFree(v4942, v4943, v4944, v4945, v4946, v4947, v4948, v4949);
  }
  else
  {
    JSC::Symbols::isArraySlowPrivateName[0] -= 2;
  }
  JSC::Symbols::concatMemcpyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::concatMemcpyPrivateName;
  LODWORD(v8390) = 155;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1987, v1988, v1989, v1990);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1991, v1992, v1993, v1994, v1995, v1996, v1997);
      WTF::fastFree(v7742, v7743, v7744, v7745, v7746, v7747, v7748, v7749);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::concatMemcpyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::concatMemcpyPrivateName, v1991, v1992, v1993, v1994, v1995, v1996, v1997);
    WTF::fastFree(v4950, v4951, v4952, v4953, v4954, v4955, v4956, v4957);
  }
  else
  {
    JSC::Symbols::concatMemcpyPrivateName[0] -= 2;
  }
  JSC::Symbols::appendMemcpyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::appendMemcpyPrivateName;
  LODWORD(v8390) = 156;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v1994, v1995, v1996, v1997);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v1998, v1999, v2000, v2001, v2002, v2003, v2004);
      WTF::fastFree(v7750, v7751, v7752, v7753, v7754, v7755, v7756, v7757);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::appendMemcpyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::appendMemcpyPrivateName, v1998, v1999, v2000, v2001, v2002, v2003, v2004);
    WTF::fastFree(v4958, v4959, v4960, v4961, v4962, v4963, v4964, v4965);
  }
  else
  {
    JSC::Symbols::appendMemcpyPrivateName[0] -= 2;
  }
  JSC::Symbols::hostPromiseRejectionTrackerPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hostPromiseRejectionTrackerPrivateName;
  LODWORD(v8390) = 157;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2001, v2002, v2003, v2004);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2005, v2006, v2007, v2008, v2009, v2010, v2011);
      WTF::fastFree(v7758, v7759, v7760, v7761, v7762, v7763, v7764, v7765);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hostPromiseRejectionTrackerPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hostPromiseRejectionTrackerPrivateName, v2005, v2006, v2007, v2008, v2009, v2010, v2011);
    WTF::fastFree(v4966, v4967, v4968, v4969, v4970, v4971, v4972, v4973);
  }
  else
  {
    JSC::Symbols::hostPromiseRejectionTrackerPrivateName[0] -= 2;
  }
  JSC::Symbols::SetPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::SetPrivateName;
  LODWORD(v8390) = 158;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2008, v2009, v2010, v2011);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2012, v2013, v2014, v2015, v2016, v2017, v2018);
      WTF::fastFree(v7766, v7767, v7768, v7769, v7770, v7771, v7772, v7773);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::SetPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::SetPrivateName, v2012, v2013, v2014, v2015, v2016, v2017, v2018);
    WTF::fastFree(v4974, v4975, v4976, v4977, v4978, v4979, v4980, v4981);
  }
  else
  {
    JSC::Symbols::SetPrivateName[0] -= 2;
  }
  JSC::Symbols::MapPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::MapPrivateName;
  LODWORD(v8390) = 159;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2015, v2016, v2017, v2018);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2019, v2020, v2021, v2022, v2023, v2024, v2025);
      WTF::fastFree(v7774, v7775, v7776, v7777, v7778, v7779, v7780, v7781);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::MapPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::MapPrivateName, v2019, v2020, v2021, v2022, v2023, v2024, v2025);
    WTF::fastFree(v4982, v4983, v4984, v4985, v4986, v4987, v4988, v4989);
  }
  else
  {
    JSC::Symbols::MapPrivateName[0] -= 2;
  }
  JSC::Symbols::importMapStatusPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::importMapStatusPrivateName;
  LODWORD(v8390) = 160;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2022, v2023, v2024, v2025);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2026, v2027, v2028, v2029, v2030, v2031, v2032);
      WTF::fastFree(v7782, v7783, v7784, v7785, v7786, v7787, v7788, v7789);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::importMapStatusPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::importMapStatusPrivateName, v2026, v2027, v2028, v2029, v2030, v2031, v2032);
    WTF::fastFree(v4990, v4991, v4992, v4993, v4994, v4995, v4996, v4997);
  }
  else
  {
    JSC::Symbols::importMapStatusPrivateName[0] -= 2;
  }
  JSC::Symbols::importInRealmPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::importInRealmPrivateName;
  LODWORD(v8390) = 161;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2029, v2030, v2031, v2032);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2033, v2034, v2035, v2036, v2037, v2038, v2039);
      WTF::fastFree(v7790, v7791, v7792, v7793, v7794, v7795, v7796, v7797);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::importInRealmPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::importInRealmPrivateName, v2033, v2034, v2035, v2036, v2037, v2038, v2039);
    WTF::fastFree(v4998, v4999, v5000, v5001, v5002, v5003, v5004, v5005);
  }
  else
  {
    JSC::Symbols::importInRealmPrivateName[0] -= 2;
  }
  JSC::Symbols::evalFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::evalFunctionPrivateName;
  LODWORD(v8390) = 162;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2036, v2037, v2038, v2039);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2040, v2041, v2042, v2043, v2044, v2045, v2046);
      WTF::fastFree(v7798, v7799, v7800, v7801, v7802, v7803, v7804, v7805);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::evalFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::evalFunctionPrivateName, v2040, v2041, v2042, v2043, v2044, v2045, v2046);
    WTF::fastFree(v5006, v5007, v5008, v5009, v5010, v5011, v5012, v5013);
  }
  else
  {
    JSC::Symbols::evalFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::evalInRealmPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::evalInRealmPrivateName;
  LODWORD(v8390) = 163;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2043, v2044, v2045, v2046);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2047, v2048, v2049, v2050, v2051, v2052, v2053);
      WTF::fastFree(v7806, v7807, v7808, v7809, v7810, v7811, v7812, v7813);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::evalInRealmPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::evalInRealmPrivateName, v2047, v2048, v2049, v2050, v2051, v2052, v2053);
    WTF::fastFree(v5014, v5015, v5016, v5017, v5018, v5019, v5020, v5021);
  }
  else
  {
    JSC::Symbols::evalInRealmPrivateName[0] -= 2;
  }
  JSC::Symbols::moveFunctionToRealmPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::moveFunctionToRealmPrivateName;
  LODWORD(v8390) = 164;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2050, v2051, v2052, v2053);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2054, v2055, v2056, v2057, v2058, v2059, v2060);
      WTF::fastFree(v7814, v7815, v7816, v7817, v7818, v7819, v7820, v7821);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::moveFunctionToRealmPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::moveFunctionToRealmPrivateName, v2054, v2055, v2056, v2057, v2058, v2059, v2060);
    WTF::fastFree(v5022, v5023, v5024, v5025, v5026, v5027, v5028, v5029);
  }
  else
  {
    JSC::Symbols::moveFunctionToRealmPrivateName[0] -= 2;
  }
  JSC::Symbols::isConstructorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isConstructorPrivateName;
  LODWORD(v8390) = 165;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2057, v2058, v2059, v2060);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2061, v2062, v2063, v2064, v2065, v2066, v2067);
      WTF::fastFree(v7822, v7823, v7824, v7825, v7826, v7827, v7828, v7829);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isConstructorPrivateName, v2061, v2062, v2063, v2064, v2065, v2066, v2067);
    WTF::fastFree(v5030, v5031, v5032, v5033, v5034, v5035, v5036, v5037);
  }
  else
  {
    JSC::Symbols::isConstructorPrivateName[0] -= 2;
  }
  JSC::Symbols::sameValuePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::sameValuePrivateName;
  LODWORD(v8390) = 166;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2064, v2065, v2066, v2067);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2068, v2069, v2070, v2071, v2072, v2073, v2074);
      WTF::fastFree(v7830, v7831, v7832, v7833, v7834, v7835, v7836, v7837);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::sameValuePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::sameValuePrivateName, v2068, v2069, v2070, v2071, v2072, v2073, v2074);
    WTF::fastFree(v5038, v5039, v5040, v5041, v5042, v5043, v5044, v5045);
  }
  else
  {
    JSC::Symbols::sameValuePrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoFlagsGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoFlagsGetterPrivateName;
  LODWORD(v8390) = 167;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2071, v2072, v2073, v2074);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2075, v2076, v2077, v2078, v2079, v2080, v2081);
      WTF::fastFree(v7838, v7839, v7840, v7841, v7842, v7843, v7844, v7845);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoFlagsGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoFlagsGetterPrivateName, v2075, v2076, v2077, v2078, v2079, v2080, v2081);
    WTF::fastFree(v5046, v5047, v5048, v5049, v5050, v5051, v5052, v5053);
  }
  else
  {
    JSC::Symbols::regExpProtoFlagsGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoGlobalGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoGlobalGetterPrivateName;
  LODWORD(v8390) = 168;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2078, v2079, v2080, v2081);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2082, v2083, v2084, v2085, v2086, v2087, v2088);
      WTF::fastFree(v7846, v7847, v7848, v7849, v7850, v7851, v7852, v7853);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoGlobalGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoGlobalGetterPrivateName, v2082, v2083, v2084, v2085, v2086, v2087, v2088);
    WTF::fastFree(v5054, v5055, v5056, v5057, v5058, v5059, v5060, v5061);
  }
  else
  {
    JSC::Symbols::regExpProtoGlobalGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoHasIndicesGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoHasIndicesGetterPrivateName;
  LODWORD(v8390) = 169;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2085, v2086, v2087, v2088);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2089, v2090, v2091, v2092, v2093, v2094, v2095);
      WTF::fastFree(v7854, v7855, v7856, v7857, v7858, v7859, v7860, v7861);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoHasIndicesGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoHasIndicesGetterPrivateName, v2089, v2090, v2091, v2092, v2093, v2094, v2095);
    WTF::fastFree(v5062, v5063, v5064, v5065, v5066, v5067, v5068, v5069);
  }
  else
  {
    JSC::Symbols::regExpProtoHasIndicesGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName;
  LODWORD(v8390) = 170;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2092, v2093, v2094, v2095);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2096, v2097, v2098, v2099, v2100, v2101, v2102);
      WTF::fastFree(v7862, v7863, v7864, v7865, v7866, v7867, v7868, v7869);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName, v2096, v2097, v2098, v2099, v2100, v2101, v2102);
    WTF::fastFree(v5070, v5071, v5072, v5073, v5074, v5075, v5076, v5077);
  }
  else
  {
    JSC::Symbols::regExpProtoIgnoreCaseGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoMultilineGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoMultilineGetterPrivateName;
  LODWORD(v8390) = 171;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2099, v2100, v2101, v2102);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2103, v2104, v2105, v2106, v2107, v2108, v2109);
      WTF::fastFree(v7870, v7871, v7872, v7873, v7874, v7875, v7876, v7877);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoMultilineGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoMultilineGetterPrivateName, v2103, v2104, v2105, v2106, v2107, v2108, v2109);
    WTF::fastFree(v5078, v5079, v5080, v5081, v5082, v5083, v5084, v5085);
  }
  else
  {
    JSC::Symbols::regExpProtoMultilineGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoSourceGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoSourceGetterPrivateName;
  LODWORD(v8390) = 172;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2106, v2107, v2108, v2109);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2110, v2111, v2112, v2113, v2114, v2115, v2116);
      WTF::fastFree(v7878, v7879, v7880, v7881, v7882, v7883, v7884, v7885);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoSourceGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoSourceGetterPrivateName, v2110, v2111, v2112, v2113, v2114, v2115, v2116);
    WTF::fastFree(v5086, v5087, v5088, v5089, v5090, v5091, v5092, v5093);
  }
  else
  {
    JSC::Symbols::regExpProtoSourceGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoStickyGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoStickyGetterPrivateName;
  LODWORD(v8390) = 173;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2113, v2114, v2115, v2116);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2117, v2118, v2119, v2120, v2121, v2122, v2123);
      WTF::fastFree(v7886, v7887, v7888, v7889, v7890, v7891, v7892, v7893);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoStickyGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoStickyGetterPrivateName, v2117, v2118, v2119, v2120, v2121, v2122, v2123);
    WTF::fastFree(v5094, v5095, v5096, v5097, v5098, v5099, v5100, v5101);
  }
  else
  {
    JSC::Symbols::regExpProtoStickyGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoDotAllGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoDotAllGetterPrivateName;
  LODWORD(v8390) = 174;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2120, v2121, v2122, v2123);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2124, v2125, v2126, v2127, v2128, v2129, v2130);
      WTF::fastFree(v7894, v7895, v7896, v7897, v7898, v7899, v7900, v7901);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoDotAllGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoDotAllGetterPrivateName, v2124, v2125, v2126, v2127, v2128, v2129, v2130);
    WTF::fastFree(v5102, v5103, v5104, v5105, v5106, v5107, v5108, v5109);
  }
  else
  {
    JSC::Symbols::regExpProtoDotAllGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoUnicodeGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeGetterPrivateName;
  LODWORD(v8390) = 175;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2127, v2128, v2129, v2130);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2131, v2132, v2133, v2134, v2135, v2136, v2137);
      WTF::fastFree(v7902, v7903, v7904, v7905, v7906, v7907, v7908, v7909);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoUnicodeGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeGetterPrivateName, v2131, v2132, v2133, v2134, v2135, v2136, v2137);
    WTF::fastFree(v5110, v5111, v5112, v5113, v5114, v5115, v5116, v5117);
  }
  else
  {
    JSC::Symbols::regExpProtoUnicodeGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName;
  LODWORD(v8390) = 176;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2134, v2135, v2136, v2137);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2138, v2139, v2140, v2141, v2142, v2143, v2144);
      WTF::fastFree(v7910, v7911, v7912, v7913, v7914, v7915, v7916, v7917);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName, v2138, v2139, v2140, v2141, v2142, v2143, v2144);
    WTF::fastFree(v5118, v5119, v5120, v5121, v5122, v5123, v5124, v5125);
  }
  else
  {
    JSC::Symbols::regExpProtoUnicodeSetsGetterPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpBuiltinExecPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpBuiltinExecPrivateName;
  LODWORD(v8390) = 177;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2141, v2142, v2143, v2144);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2145, v2146, v2147, v2148, v2149, v2150, v2151);
      WTF::fastFree(v7918, v7919, v7920, v7921, v7922, v7923, v7924, v7925);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpBuiltinExecPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpBuiltinExecPrivateName, v2145, v2146, v2147, v2148, v2149, v2150, v2151);
    WTF::fastFree(v5126, v5127, v5128, v5129, v5130, v5131, v5132, v5133);
  }
  else
  {
    JSC::Symbols::regExpBuiltinExecPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpCreatePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpCreatePrivateName;
  LODWORD(v8390) = 178;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2148, v2149, v2150, v2151);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2152, v2153, v2154, v2155, v2156, v2157, v2158);
      WTF::fastFree(v7926, v7927, v7928, v7929, v7930, v7931, v7932, v7933);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpCreatePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpCreatePrivateName, v2152, v2153, v2154, v2155, v2156, v2157, v2158);
    WTF::fastFree(v5134, v5135, v5136, v5137, v5138, v5139, v5140, v5141);
  }
  else
  {
    JSC::Symbols::regExpCreatePrivateName[0] -= 2;
  }
  JSC::Symbols::isRegExpPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isRegExpPrivateName;
  LODWORD(v8390) = 179;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2155, v2156, v2157, v2158);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2159, v2160, v2161, v2162, v2163, v2164, v2165);
      WTF::fastFree(v7934, v7935, v7936, v7937, v7938, v7939, v7940, v7941);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isRegExpPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isRegExpPrivateName, v2159, v2160, v2161, v2162, v2163, v2164, v2165);
    WTF::fastFree(v5142, v5143, v5144, v5145, v5146, v5147, v5148, v5149);
  }
  else
  {
    JSC::Symbols::isRegExpPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpMatchFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpMatchFastPrivateName;
  LODWORD(v8390) = 180;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2162, v2163, v2164, v2165);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2166, v2167, v2168, v2169, v2170, v2171, v2172);
      WTF::fastFree(v7942, v7943, v7944, v7945, v7946, v7947, v7948, v7949);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpMatchFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpMatchFastPrivateName, v2166, v2167, v2168, v2169, v2170, v2171, v2172);
    WTF::fastFree(v5150, v5151, v5152, v5153, v5154, v5155, v5156, v5157);
  }
  else
  {
    JSC::Symbols::regExpMatchFastPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpSearchFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpSearchFastPrivateName;
  LODWORD(v8390) = 181;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2169, v2170, v2171, v2172);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2173, v2174, v2175, v2176, v2177, v2178, v2179);
      WTF::fastFree(v7950, v7951, v7952, v7953, v7954, v7955, v7956, v7957);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpSearchFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpSearchFastPrivateName, v2173, v2174, v2175, v2176, v2177, v2178, v2179);
    WTF::fastFree(v5158, v5159, v5160, v5161, v5162, v5163, v5164, v5165);
  }
  else
  {
    JSC::Symbols::regExpSearchFastPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpSplitFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpSplitFastPrivateName;
  LODWORD(v8390) = 182;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2176, v2177, v2178, v2179);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2180, v2181, v2182, v2183, v2184, v2185, v2186);
      WTF::fastFree(v7958, v7959, v7960, v7961, v7962, v7963, v7964, v7965);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpSplitFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpSplitFastPrivateName, v2180, v2181, v2182, v2183, v2184, v2185, v2186);
    WTF::fastFree(v5166, v5167, v5168, v5169, v5170, v5171, v5172, v5173);
  }
  else
  {
    JSC::Symbols::regExpSplitFastPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpPrototypeSymbolMatchPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolMatchPrivateName;
  LODWORD(v8390) = 183;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2183, v2184, v2185, v2186);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2187, v2188, v2189, v2190, v2191, v2192, v2193);
      WTF::fastFree(v7966, v7967, v7968, v7969, v7970, v7971, v7972, v7973);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpPrototypeSymbolMatchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolMatchPrivateName, v2187, v2188, v2189, v2190, v2191, v2192, v2193);
    WTF::fastFree(v5174, v5175, v5176, v5177, v5178, v5179, v5180, v5181);
  }
  else
  {
    JSC::Symbols::regExpPrototypeSymbolMatchPrivateName[0] -= 2;
  }
  JSC::Symbols::regExpPrototypeSymbolReplacePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolReplacePrivateName;
  LODWORD(v8390) = 184;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2190, v2191, v2192, v2193);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2194, v2195, v2196, v2197, v2198, v2199, v2200);
      WTF::fastFree(v7974, v7975, v7976, v7977, v7978, v7979, v7980, v7981);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpPrototypeSymbolReplacePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpPrototypeSymbolReplacePrivateName, v2194, v2195, v2196, v2197, v2198, v2199, v2200);
    WTF::fastFree(v5182, v5183, v5184, v5185, v5186, v5187, v5188, v5189);
  }
  else
  {
    JSC::Symbols::regExpPrototypeSymbolReplacePrivateName[0] -= 2;
  }
  JSC::Symbols::regExpTestFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::regExpTestFastPrivateName;
  LODWORD(v8390) = 185;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2197, v2198, v2199, v2200);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2201, v2202, v2203, v2204, v2205, v2206, v2207);
      WTF::fastFree(v7982, v7983, v7984, v7985, v7986, v7987, v7988, v7989);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::regExpTestFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::regExpTestFastPrivateName, v2201, v2202, v2203, v2204, v2205, v2206, v2207);
    WTF::fastFree(v5190, v5191, v5192, v5193, v5194, v5195, v5196, v5197);
  }
  else
  {
    JSC::Symbols::regExpTestFastPrivateName[0] -= 2;
  }
  JSC::Symbols::stringIncludesInternalPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::stringIncludesInternalPrivateName;
  LODWORD(v8390) = 186;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2204, v2205, v2206, v2207);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2208, v2209, v2210, v2211, v2212, v2213, v2214);
      WTF::fastFree(v7990, v7991, v7992, v7993, v7994, v7995, v7996, v7997);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::stringIncludesInternalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringIncludesInternalPrivateName, v2208, v2209, v2210, v2211, v2212, v2213, v2214);
    WTF::fastFree(v5198, v5199, v5200, v5201, v5202, v5203, v5204, v5205);
  }
  else
  {
    JSC::Symbols::stringIncludesInternalPrivateName[0] -= 2;
  }
  JSC::Symbols::stringIndexOfInternalPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::stringIndexOfInternalPrivateName;
  LODWORD(v8390) = 187;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2211, v2212, v2213, v2214);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2215, v2216, v2217, v2218, v2219, v2220, v2221);
      WTF::fastFree(v7998, v7999, v8000, v8001, v8002, v8003, v8004, v8005);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::stringIndexOfInternalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringIndexOfInternalPrivateName, v2215, v2216, v2217, v2218, v2219, v2220, v2221);
    WTF::fastFree(v5206, v5207, v5208, v5209, v5210, v5211, v5212, v5213);
  }
  else
  {
    JSC::Symbols::stringIndexOfInternalPrivateName[0] -= 2;
  }
  JSC::Symbols::stringSplitFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::stringSplitFastPrivateName;
  LODWORD(v8390) = 188;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2218, v2219, v2220, v2221);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2222, v2223, v2224, v2225, v2226, v2227, v2228);
      WTF::fastFree(v8006, v8007, v8008, v8009, v8010, v8011, v8012, v8013);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::stringSplitFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringSplitFastPrivateName, v2222, v2223, v2224, v2225, v2226, v2227, v2228);
    WTF::fastFree(v5214, v5215, v5216, v5217, v5218, v5219, v5220, v5221);
  }
  else
  {
    JSC::Symbols::stringSplitFastPrivateName[0] -= 2;
  }
  JSC::Symbols::stringSubstringPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::stringSubstringPrivateName;
  LODWORD(v8390) = 189;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2225, v2226, v2227, v2228);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2229, v2230, v2231, v2232, v2233, v2234, v2235);
      WTF::fastFree(v8014, v8015, v8016, v8017, v8018, v8019, v8020, v8021);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::stringSubstringPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::stringSubstringPrivateName, v2229, v2230, v2231, v2232, v2233, v2234, v2235);
    WTF::fastFree(v5222, v5223, v5224, v5225, v5226, v5227, v5228, v5229);
  }
  else
  {
    JSC::Symbols::stringSubstringPrivateName[0] -= 2;
  }
  JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName;
  LODWORD(v8390) = 190;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2232, v2233, v2234, v2235);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2236, v2237, v2238, v2239, v2240, v2241, v2242);
      WTF::fastFree(v8022, v8023, v8024, v8025, v8026, v8027, v8028, v8029);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName, v2236, v2237, v2238, v2239, v2240, v2241, v2242);
    WTF::fastFree(v5230, v5231, v5232, v5233, v5234, v5235, v5236, v5237);
  }
  else
  {
    JSC::Symbols::handleNegativeProxyHasTrapResultPrivateName[0] -= 2;
  }
  JSC::Symbols::handlePositiveProxySetTrapResultPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::handlePositiveProxySetTrapResultPrivateName;
  LODWORD(v8390) = 191;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2239, v2240, v2241, v2242);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2243, v2244, v2245, v2246, v2247, v2248, v2249);
      WTF::fastFree(v8030, v8031, v8032, v8033, v8034, v8035, v8036, v8037);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::handlePositiveProxySetTrapResultPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::handlePositiveProxySetTrapResultPrivateName, v2243, v2244, v2245, v2246, v2247, v2248, v2249);
    WTF::fastFree(v5238, v5239, v5240, v5241, v5242, v5243, v5244, v5245);
  }
  else
  {
    JSC::Symbols::handlePositiveProxySetTrapResultPrivateName[0] -= 2;
  }
  JSC::Symbols::handleProxyGetTrapResultPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::handleProxyGetTrapResultPrivateName;
  LODWORD(v8390) = 192;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2246, v2247, v2248, v2249);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2250, v2251, v2252, v2253, v2254, v2255, v2256);
      WTF::fastFree(v8038, v8039, v8040, v8041, v8042, v8043, v8044, v8045);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::handleProxyGetTrapResultPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::handleProxyGetTrapResultPrivateName, v2250, v2251, v2252, v2253, v2254, v2255, v2256);
    WTF::fastFree(v5246, v5247, v5248, v5249, v5250, v5251, v5252, v5253);
  }
  else
  {
    JSC::Symbols::handleProxyGetTrapResultPrivateName[0] -= 2;
  }
  JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName;
  LODWORD(v8390) = 193;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2253, v2254, v2255, v2256);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2257, v2258, v2259, v2260, v2261, v2262, v2263);
      WTF::fastFree(v8046, v8047, v8048, v8049, v8050, v8051, v8052, v8053);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName, v2257, v2258, v2259, v2260, v2261, v2262, v2263);
    WTF::fastFree(v5254, v5255, v5256, v5257, v5258, v5259, v5260, v5261);
  }
  else
  {
    JSC::Symbols::webAssemblyCompileStreamingInternalPrivateName[0] -= 2;
  }
  JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName;
  LODWORD(v8390) = 194;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2260, v2261, v2262, v2263);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2264, v2265, v2266, v2267, v2268, v2269, v2270);
      WTF::fastFree(v8054, v8055, v8056, v8057, v8058, v8059, v8060, v8061);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName, v2264, v2265, v2266, v2267, v2268, v2269, v2270);
    WTF::fastFree(v5262, v5263, v5264, v5265, v5266, v5267, v5268, v5269);
  }
  else
  {
    JSC::Symbols::webAssemblyInstantiateStreamingInternalPrivateName[0] -= 2;
  }
  JSC::Symbols::ObjectPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::ObjectPrivateName;
  LODWORD(v8390) = 195;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2267, v2268, v2269, v2270);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2271, v2272, v2273, v2274, v2275, v2276, v2277);
      WTF::fastFree(v8062, v8063, v8064, v8065, v8066, v8067, v8068, v8069);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::ObjectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ObjectPrivateName, v2271, v2272, v2273, v2274, v2275, v2276, v2277);
    WTF::fastFree(v5270, v5271, v5272, v5273, v5274, v5275, v5276, v5277);
  }
  else
  {
    JSC::Symbols::ObjectPrivateName[0] -= 2;
  }
  JSC::Symbols::ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::ArrayPrivateName;
  LODWORD(v8390) = 196;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2274, v2275, v2276, v2277);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2278, v2279, v2280, v2281, v2282, v2283, v2284);
      WTF::fastFree(v8070, v8071, v8072, v8073, v8074, v8075, v8076, v8077);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ArrayPrivateName, v2278, v2279, v2280, v2281, v2282, v2283, v2284);
    WTF::fastFree(v5278, v5279, v5280, v5281, v5282, v5283, v5284, v5285);
  }
  else
  {
    JSC::Symbols::ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::applyFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::applyFunctionPrivateName;
  LODWORD(v8390) = 197;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2281, v2282, v2283, v2284);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2285, v2286, v2287, v2288, v2289, v2290, v2291);
      WTF::fastFree(v8078, v8079, v8080, v8081, v8082, v8083, v8084, v8085);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::applyFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::applyFunctionPrivateName, v2285, v2286, v2287, v2288, v2289, v2290, v2291);
    WTF::fastFree(v5286, v5287, v5288, v5289, v5290, v5291, v5292, v5293);
  }
  else
  {
    JSC::Symbols::applyFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::callFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::callFunctionPrivateName;
  LODWORD(v8390) = 198;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2288, v2289, v2290, v2291);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2292, v2293, v2294, v2295, v2296, v2297, v2298);
      WTF::fastFree(v8086, v8087, v8088, v8089, v8090, v8091, v8092, v8093);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::callFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::callFunctionPrivateName, v2292, v2293, v2294, v2295, v2296, v2297, v2298);
    WTF::fastFree(v5294, v5295, v5296, v5297, v5298, v5299, v5300, v5301);
  }
  else
  {
    JSC::Symbols::callFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::hasOwnPropertyFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::hasOwnPropertyFunctionPrivateName;
  LODWORD(v8390) = 199;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2295, v2296, v2297, v2298);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2299, v2300, v2301, v2302, v2303, v2304, v2305);
      WTF::fastFree(v8094, v8095, v8096, v8097, v8098, v8099, v8100, v8101);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::hasOwnPropertyFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasOwnPropertyFunctionPrivateName, v2299, v2300, v2301, v2302, v2303, v2304, v2305);
    WTF::fastFree(v5302, v5303, v5304, v5305, v5306, v5307, v5308, v5309);
  }
  else
  {
    JSC::Symbols::hasOwnPropertyFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::createPrivateSymbolPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createPrivateSymbolPrivateName;
  LODWORD(v8390) = 200;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2302, v2303, v2304, v2305);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2306, v2307, v2308, v2309, v2310, v2311, v2312);
      WTF::fastFree(v8102, v8103, v8104, v8105, v8106, v8107, v8108, v8109);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createPrivateSymbolPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createPrivateSymbolPrivateName, v2306, v2307, v2308, v2309, v2310, v2311, v2312);
    WTF::fastFree(v5310, v5311, v5312, v5313, v5314, v5315, v5316, v5317);
  }
  else
  {
    JSC::Symbols::createPrivateSymbolPrivateName[0] -= 2;
  }
  JSC::Symbols::emptyPropertyNameEnumeratorPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::emptyPropertyNameEnumeratorPrivateName;
  LODWORD(v8390) = 201;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2309, v2310, v2311, v2312);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2313, v2314, v2315, v2316, v2317, v2318, v2319);
      WTF::fastFree(v8110, v8111, v8112, v8113, v8114, v8115, v8116, v8117);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::emptyPropertyNameEnumeratorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::emptyPropertyNameEnumeratorPrivateName, v2313, v2314, v2315, v2316, v2317, v2318, v2319);
    WTF::fastFree(v5318, v5319, v5320, v5321, v5322, v5323, v5324, v5325);
  }
  else
  {
    JSC::Symbols::emptyPropertyNameEnumeratorPrivateName[0] -= 2;
  }
  JSC::Symbols::sentinelStringPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::sentinelStringPrivateName;
  LODWORD(v8390) = 202;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2316, v2317, v2318, v2319);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2320, v2321, v2322, v2323, v2324, v2325, v2326);
      WTF::fastFree(v8118, v8119, v8120, v8121, v8122, v8123, v8124, v8125);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::sentinelStringPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::sentinelStringPrivateName, v2320, v2321, v2322, v2323, v2324, v2325, v2326);
    WTF::fastFree(v5326, v5327, v5328, v5329, v5330, v5331, v5332, v5333);
  }
  else
  {
    JSC::Symbols::sentinelStringPrivateName[0] -= 2;
  }
  JSC::Symbols::createRemoteFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::createRemoteFunctionPrivateName;
  LODWORD(v8390) = 203;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2323, v2324, v2325, v2326);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2327, v2328, v2329, v2330, v2331, v2332, v2333);
      WTF::fastFree(v8126, v8127, v8128, v8129, v8130, v8131, v8132, v8133);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::createRemoteFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createRemoteFunctionPrivateName, v2327, v2328, v2329, v2330, v2331, v2332, v2333);
    WTF::fastFree(v5334, v5335, v5336, v5337, v5338, v5339, v5340, v5341);
  }
  else
  {
    JSC::Symbols::createRemoteFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::isRemoteFunctionPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::isRemoteFunctionPrivateName;
  LODWORD(v8390) = 204;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2330, v2331, v2332, v2333);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2334, v2335, v2336, v2337, v2338, v2339, v2340);
      WTF::fastFree(v8134, v8135, v8136, v8137, v8138, v8139, v8140, v8141);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::isRemoteFunctionPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isRemoteFunctionPrivateName, v2334, v2335, v2336, v2337, v2338, v2339, v2340);
    WTF::fastFree(v5342, v5343, v5344, v5345, v5346, v5347, v5348, v5349);
  }
  else
  {
    JSC::Symbols::isRemoteFunctionPrivateName[0] -= 2;
  }
  JSC::Symbols::arrayFromFastPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::arrayFromFastPrivateName;
  LODWORD(v8390) = 205;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2337, v2338, v2339, v2340);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2341, v2342, v2343, v2344, v2345, v2346, v2347);
      WTF::fastFree(v8142, v8143, v8144, v8145, v8146, v8147, v8148, v8149);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::arrayFromFastPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arrayFromFastPrivateName, v2341, v2342, v2343, v2344, v2345, v2346, v2347);
    WTF::fastFree(v5350, v5351, v5352, v5353, v5354, v5355, v5356, v5357);
  }
  else
  {
    JSC::Symbols::arrayFromFastPrivateName[0] -= 2;
  }
  JSC::Symbols::arraySortPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::arraySortPrivateName;
  LODWORD(v8390) = 206;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2344, v2345, v2346, v2347);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2348, v2349, v2350, v2351, v2352, v2353, v2354);
      WTF::fastFree(v8150, v8151, v8152, v8153, v8154, v8155, v8156, v8157);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::arraySortPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::arraySortPrivateName, v2348, v2349, v2350, v2351, v2352, v2353, v2354);
    WTF::fastFree(v5358, v5359, v5360, v5361, v5362, v5363, v5364, v5365);
  }
  else
  {
    JSC::Symbols::arraySortPrivateName[0] -= 2;
  }
  JSC::Symbols::jsonParsePrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::jsonParsePrivateName;
  LODWORD(v8390) = 207;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2351, v2352, v2353, v2354);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2355, v2356, v2357, v2358, v2359, v2360, v2361);
      WTF::fastFree(v8158, v8159, v8160, v8161, v8162, v8163, v8164, v8165);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::jsonParsePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::jsonParsePrivateName, v2355, v2356, v2357, v2358, v2359, v2360, v2361);
    WTF::fastFree(v5366, v5367, v5368, v5369, v5370, v5371, v5372, v5373);
  }
  else
  {
    JSC::Symbols::jsonParsePrivateName[0] -= 2;
  }
  JSC::Symbols::jsonStringifyPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::jsonStringifyPrivateName;
  LODWORD(v8390) = 208;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2358, v2359, v2360, v2361);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2362, v2363, v2364, v2365, v2366, v2367, v2368);
      WTF::fastFree(v8166, v8167, v8168, v8169, v8170, v8171, v8172, v8173);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::jsonStringifyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::jsonStringifyPrivateName, v2362, v2363, v2364, v2365, v2366, v2367, v2368);
    WTF::fastFree(v5374, v5375, v5376, v5377, v5378, v5379, v5380, v5381);
  }
  else
  {
    JSC::Symbols::jsonStringifyPrivateName[0] -= 2;
  }
  JSC::Symbols::StringPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::StringPrivateName;
  LODWORD(v8390) = 209;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2365, v2366, v2367, v2368);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2369, v2370, v2371, v2372, v2373, v2374, v2375);
      WTF::fastFree(v8174, v8175, v8176, v8177, v8178, v8179, v8180, v8181);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::StringPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::StringPrivateName, v2369, v2370, v2371, v2372, v2373, v2374, v2375);
    WTF::fastFree(v5382, v5383, v5384, v5385, v5386, v5387, v5388, v5389);
  }
  else
  {
    JSC::Symbols::StringPrivateName[0] -= 2;
  }
  JSC::Symbols::Int8ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Int8ArrayPrivateName;
  LODWORD(v8390) = 210;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2372, v2373, v2374, v2375);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2376, v2377, v2378, v2379, v2380, v2381, v2382);
      WTF::fastFree(v8182, v8183, v8184, v8185, v8186, v8187, v8188, v8189);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Int8ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Int8ArrayPrivateName, v2376, v2377, v2378, v2379, v2380, v2381, v2382);
    WTF::fastFree(v5390, v5391, v5392, v5393, v5394, v5395, v5396, v5397);
  }
  else
  {
    JSC::Symbols::Int8ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Uint8ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Uint8ArrayPrivateName;
  LODWORD(v8390) = 211;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2379, v2380, v2381, v2382);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2383, v2384, v2385, v2386, v2387, v2388, v2389);
      WTF::fastFree(v8190, v8191, v8192, v8193, v8194, v8195, v8196, v8197);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Uint8ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Uint8ArrayPrivateName, v2383, v2384, v2385, v2386, v2387, v2388, v2389);
    WTF::fastFree(v5398, v5399, v5400, v5401, v5402, v5403, v5404, v5405);
  }
  else
  {
    JSC::Symbols::Uint8ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Uint8ClampedArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Uint8ClampedArrayPrivateName;
  LODWORD(v8390) = 212;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2386, v2387, v2388, v2389);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2390, v2391, v2392, v2393, v2394, v2395, v2396);
      WTF::fastFree(v8198, v8199, v8200, v8201, v8202, v8203, v8204, v8205);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Uint8ClampedArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Uint8ClampedArrayPrivateName, v2390, v2391, v2392, v2393, v2394, v2395, v2396);
    WTF::fastFree(v5406, v5407, v5408, v5409, v5410, v5411, v5412, v5413);
  }
  else
  {
    JSC::Symbols::Uint8ClampedArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Int16ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Int16ArrayPrivateName;
  LODWORD(v8390) = 213;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2393, v2394, v2395, v2396);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2397, v2398, v2399, v2400, v2401, v2402, v2403);
      WTF::fastFree(v8206, v8207, v8208, v8209, v8210, v8211, v8212, v8213);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Int16ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Int16ArrayPrivateName, v2397, v2398, v2399, v2400, v2401, v2402, v2403);
    WTF::fastFree(v5414, v5415, v5416, v5417, v5418, v5419, v5420, v5421);
  }
  else
  {
    JSC::Symbols::Int16ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Uint16ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Uint16ArrayPrivateName;
  LODWORD(v8390) = 214;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2400, v2401, v2402, v2403);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2404, v2405, v2406, v2407, v2408, v2409, v2410);
      WTF::fastFree(v8214, v8215, v8216, v8217, v8218, v8219, v8220, v8221);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Uint16ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Uint16ArrayPrivateName, v2404, v2405, v2406, v2407, v2408, v2409, v2410);
    WTF::fastFree(v5422, v5423, v5424, v5425, v5426, v5427, v5428, v5429);
  }
  else
  {
    JSC::Symbols::Uint16ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Int32ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Int32ArrayPrivateName;
  LODWORD(v8390) = 215;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2407, v2408, v2409, v2410);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2411, v2412, v2413, v2414, v2415, v2416, v2417);
      WTF::fastFree(v8222, v8223, v8224, v8225, v8226, v8227, v8228, v8229);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Int32ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Int32ArrayPrivateName, v2411, v2412, v2413, v2414, v2415, v2416, v2417);
    WTF::fastFree(v5430, v5431, v5432, v5433, v5434, v5435, v5436, v5437);
  }
  else
  {
    JSC::Symbols::Int32ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Uint32ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Uint32ArrayPrivateName;
  LODWORD(v8390) = 216;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2414, v2415, v2416, v2417);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2418, v2419, v2420, v2421, v2422, v2423, v2424);
      WTF::fastFree(v8230, v8231, v8232, v8233, v8234, v8235, v8236, v8237);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Uint32ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Uint32ArrayPrivateName, v2418, v2419, v2420, v2421, v2422, v2423, v2424);
    WTF::fastFree(v5438, v5439, v5440, v5441, v5442, v5443, v5444, v5445);
  }
  else
  {
    JSC::Symbols::Uint32ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Float32ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Float32ArrayPrivateName;
  LODWORD(v8390) = 217;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2421, v2422, v2423, v2424);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2425, v2426, v2427, v2428, v2429, v2430, v2431);
      WTF::fastFree(v8238, v8239, v8240, v8241, v8242, v8243, v8244, v8245);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Float32ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Float32ArrayPrivateName, v2425, v2426, v2427, v2428, v2429, v2430, v2431);
    WTF::fastFree(v5446, v5447, v5448, v5449, v5450, v5451, v5452, v5453);
  }
  else
  {
    JSC::Symbols::Float32ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::Float64ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::Float64ArrayPrivateName;
  LODWORD(v8390) = 218;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2428, v2429, v2430, v2431);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2432, v2433, v2434, v2435, v2436, v2437, v2438);
      WTF::fastFree(v8246, v8247, v8248, v8249, v8250, v8251, v8252, v8253);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::Float64ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::Float64ArrayPrivateName, v2432, v2433, v2434, v2435, v2436, v2437, v2438);
    WTF::fastFree(v5454, v5455, v5456, v5457, v5458, v5459, v5460, v5461);
  }
  else
  {
    JSC::Symbols::Float64ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::BigInt64ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::BigInt64ArrayPrivateName;
  LODWORD(v8390) = 219;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2435, v2436, v2437, v2438);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2439, v2440, v2441, v2442, v2443, v2444, v2445);
      WTF::fastFree(v8254, v8255, v8256, v8257, v8258, v8259, v8260, v8261);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::BigInt64ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::BigInt64ArrayPrivateName, v2439, v2440, v2441, v2442, v2443, v2444, v2445);
    WTF::fastFree(v5462, v5463, v5464, v5465, v5466, v5467, v5468, v5469);
  }
  else
  {
    JSC::Symbols::BigInt64ArrayPrivateName[0] -= 2;
  }
  JSC::Symbols::BigUint64ArrayPrivateName[0] += 4;
  v8386[0] = (WTF::StringImpl *)JSC::Symbols::BigUint64ArrayPrivateName;
  LODWORD(v8390) = 220;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>((uint64_t)&v8387, (uint64_t)v9, (uint64_t)v8386, &v8390, v2442, v2443, v2444, v2445);
  if (v8386[0])
  {
    if (*(_DWORD *)v8386[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v8386[0], v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      WTF::fastFree(v8262, v8263, v8264, v8265, v8266, v8267, v8268, v8269);
    }
    else
    {
      *(_DWORD *)v8386[0] -= 2;
    }
  }
  if (JSC::Symbols::BigUint64ArrayPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::BigUint64ArrayPrivateName, v2446, v2447, v2448, v2449, v2450, v2451, v2452);
    WTF::fastFree(v5470, v5471, v5472, v5473, v5474, v5475, v5476, v5477);
  }
  else
  {
    JSC::Symbols::BigUint64ArrayPrivateName[0] -= 2;
  }
  v2453 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v2453)
  {
    v2454 = *(_QWORD *)this;
    v2455 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2455)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2454 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2455 = *(_QWORD **)(v2454 + 712);
    }
    *(_QWORD *)(v2454 + 712) = *v2455;
    v2455[2] = 0;
    v2453 = v2455 + 2;
    *v2455 = 0;
    v2455[1] = 0;
    *((_QWORD *)this + 4) = v2455 + 2;
  }
  v2456 = v2453 - 2;
  if (*v2453 && (*v2453 & 0xFFFE000000000002) == 0)
  {
    v8271 = *v2456;
    v8270 = (uint64_t *)*(v2453 - 1);
    *v8270 = *v2456;
    *(_QWORD *)(v8271 + 8) = v8270;
    *v2456 = 0;
    v2456[1] = 0;
    v2453 = (_QWORD *)*((_QWORD *)this + 4);
  }
  *v2453 = 10;
  v2457 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v2457)
  {
    v2458 = *(_QWORD *)this;
    v2459 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2459)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2458 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2459 = *(_QWORD **)(v2458 + 712);
    }
    *(_QWORD *)(v2458 + 712) = *v2459;
    v2459[2] = 0;
    v2457 = v2459 + 2;
    *v2459 = 0;
    v2459[1] = 0;
    *((_QWORD *)this + 5) = v2459 + 2;
  }
  v2460 = v2457 - 2;
  if (*v2457 && (*v2457 & 0xFFFE000000000002) == 0)
  {
    v8273 = *v2460;
    v8272 = (uint64_t *)*(v2457 - 1);
    *v8272 = *v2460;
    *(_QWORD *)(v8273 + 8) = v8272;
    *v2460 = 0;
    v2460[1] = 0;
    v2457 = (_QWORD *)*((_QWORD *)this + 5);
  }
  *v2457 = 0x7FF2000000000000;
  v2461 = (_QWORD *)*((_QWORD *)this + 6);
  if (!v2461)
  {
    v2462 = *(_QWORD *)this;
    v2463 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2463)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2462 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2463 = *(_QWORD **)(v2462 + 712);
    }
    *(_QWORD *)(v2462 + 712) = *v2463;
    v2463[2] = 0;
    v2461 = v2463 + 2;
    *v2463 = 0;
    v2463[1] = 0;
    *((_QWORD *)this + 6) = v2463 + 2;
  }
  v2464 = v2461 - 2;
  if (*v2461 && (*v2461 & 0xFFFE000000000002) == 0)
  {
    v8275 = *v2464;
    v8274 = (uint64_t *)*(v2461 - 1);
    *v8274 = *v2464;
    *(_QWORD *)(v8275 + 8) = v8274;
    *v2464 = 0;
    v2464[1] = 0;
    v2461 = (_QWORD *)*((_QWORD *)this + 6);
  }
  *v2461 = 0xFFFE000000000000;
  v2465 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v2465)
  {
    v2466 = *(_QWORD *)this;
    v2467 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2467)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2466 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2467 = *(_QWORD **)(v2466 + 712);
    }
    *(_QWORD *)(v2466 + 712) = *v2467;
    v2467[2] = 0;
    v2465 = v2467 + 2;
    *v2467 = 0;
    v2467[1] = 0;
    *((_QWORD *)this + 7) = v2467 + 2;
  }
  v2468 = v2465 - 2;
  if (*v2465 && (*v2465 & 0xFFFE000000000002) == 0)
  {
    v8277 = *v2468;
    v8276 = (uint64_t *)*(v2465 - 1);
    *v8276 = *v2468;
    *(_QWORD *)(v8277 + 8) = v8276;
    *v2468 = 0;
    v2468[1] = 0;
    v2465 = (_QWORD *)*((_QWORD *)this + 7);
  }
  *v2465 = 0xFFFE000000000001;
  v2469 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v2469)
  {
    v2470 = *(_QWORD *)this;
    v2471 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2471)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2470 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2471 = *(_QWORD **)(v2470 + 712);
    }
    *(_QWORD *)(v2470 + 712) = *v2471;
    v2471[2] = 0;
    v2469 = v2471 + 2;
    *v2471 = 0;
    v2471[1] = 0;
    *((_QWORD *)this + 8) = v2471 + 2;
  }
  v2472 = v2469 - 2;
  if (*v2469 && (*v2469 & 0xFFFE000000000002) == 0)
  {
    v8279 = *v2472;
    v8278 = (uint64_t *)*(v2469 - 1);
    *v8278 = *v2472;
    *(_QWORD *)(v8279 + 8) = v8278;
    *v2472 = 0;
    v2472[1] = 0;
    v2469 = (_QWORD *)*((_QWORD *)this + 8);
  }
  *v2469 = 0xFFFE000000000002;
  v2473 = (_QWORD *)*((_QWORD *)this + 9);
  if (!v2473)
  {
    v2474 = *(_QWORD *)this;
    v2475 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2475)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2474 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2475 = *(_QWORD **)(v2474 + 712);
    }
    *(_QWORD *)(v2474 + 712) = *v2475;
    v2475[2] = 0;
    v2473 = v2475 + 2;
    *v2475 = 0;
    v2475[1] = 0;
    *((_QWORD *)this + 9) = v2475 + 2;
  }
  v2476 = v2473 - 2;
  if (*v2473 && (*v2473 & 0xFFFE000000000002) == 0)
  {
    v8281 = *v2476;
    v8280 = (uint64_t *)*(v2473 - 1);
    *v8280 = *v2476;
    *(_QWORD *)(v8281 + 8) = v8280;
    *v2476 = 0;
    v2476[1] = 0;
    v2473 = (_QWORD *)*((_QWORD *)this + 9);
  }
  *v2473 = 0x41F1FFFFFFC00000;
  v2477 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v2477)
  {
    v2478 = *(_QWORD *)this;
    v2479 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2479)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2478 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2479 = *(_QWORD **)(v2478 + 712);
    }
    *(_QWORD *)(v2478 + 712) = *v2479;
    v2479[2] = 0;
    v2477 = v2479 + 2;
    *v2479 = 0;
    v2479[1] = 0;
    *((_QWORD *)this + 10) = v2479 + 2;
  }
  v2480 = v2477 - 2;
  if (*v2477 && (*v2477 & 0xFFFE000000000002) == 0)
  {
    v8283 = *v2480;
    v8282 = (uint64_t *)*(v2477 - 1);
    *v8282 = *v2480;
    *(_QWORD *)(v8283 + 8) = v8282;
    *v2480 = 0;
    v2480[1] = 0;
    v2477 = (_QWORD *)*((_QWORD *)this + 10);
  }
  *v2477 = 0xFFFE00007FFFFFFFLL;
  v2481 = (_QWORD *)*((_QWORD *)this + 11);
  if (!v2481)
  {
    v2482 = *(_QWORD *)this;
    v2483 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2483)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2482 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2483 = *(_QWORD **)(v2482 + 712);
    }
    *(_QWORD *)(v2482 + 712) = *v2483;
    v2483[2] = 0;
    v2481 = v2483 + 2;
    *v2483 = 0;
    v2483[1] = 0;
    *((_QWORD *)this + 11) = v2483 + 2;
  }
  v2484 = v2481 - 2;
  if (*v2481 && (*v2481 & 0xFFFE000000000002) == 0)
  {
    v8285 = *v2484;
    v8284 = (uint64_t *)*(v2481 - 1);
    *v8284 = *v2484;
    *(_QWORD *)(v8285 + 8) = v8284;
    *v2484 = 0;
    v2484[1] = 0;
    v2481 = (_QWORD *)*((_QWORD *)this + 11);
  }
  *v2481 = 0x4341FFFFFFFFFFFFLL;
  v2485 = (_QWORD *)*((_QWORD *)this + 12);
  if (!v2485)
  {
    v2486 = *(_QWORD *)this;
    v2487 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2487)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2486 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2487 = *(_QWORD **)(v2486 + 712);
    }
    *(_QWORD *)(v2486 + 712) = *v2487;
    v2487[2] = 0;
    v2485 = v2487 + 2;
    *v2487 = 0;
    v2487[1] = 0;
    *((_QWORD *)this + 12) = v2487 + 2;
  }
  v2488 = v2485 - 2;
  if (*v2485 && (*v2485 & 0xFFFE000000000002) == 0)
  {
    v8287 = *v2488;
    v8286 = (uint64_t *)*(v2485 - 1);
    *v8286 = *v2488;
    *(_QWORD *)(v8287 + 8) = v8286;
    *v2488 = 0;
    v2488[1] = 0;
    v2485 = (_QWORD *)*((_QWORD *)this + 12);
  }
  *v2485 = 0xFFFE000000000001;
  v2489 = (_QWORD *)*((_QWORD *)this + 14);
  if (!v2489)
  {
    v2490 = *(_QWORD *)this;
    v2491 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2491)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2490 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2491 = *(_QWORD **)(v2490 + 712);
    }
    *(_QWORD *)(v2490 + 712) = *v2491;
    v2491[2] = 0;
    v2489 = v2491 + 2;
    *v2491 = 0;
    v2491[1] = 0;
    *((_QWORD *)this + 14) = v2491 + 2;
  }
  v2492 = v2489 - 2;
  if (*v2489 && (*v2489 & 0xFFFE000000000002) == 0)
  {
    v8289 = *v2492;
    v8288 = (uint64_t *)*(v2489 - 1);
    *v8288 = *v2492;
    *(_QWORD *)(v8289 + 8) = v8288;
    *v2492 = 0;
    v2492[1] = 0;
    v2489 = (_QWORD *)*((_QWORD *)this + 14);
  }
  *v2489 = 0xFFFE000000000002;
  v2493 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v2493)
  {
    v2494 = *(_QWORD *)this;
    v2495 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2495)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2494 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2495 = *(_QWORD **)(v2494 + 712);
    }
    *(_QWORD *)(v2494 + 712) = *v2495;
    v2495[2] = 0;
    v2493 = v2495 + 2;
    *v2495 = 0;
    v2495[1] = 0;
    *((_QWORD *)this + 15) = v2495 + 2;
  }
  v2496 = v2493 - 2;
  if (*v2493 && (*v2493 & 0xFFFE000000000002) == 0)
  {
    v8291 = *v2496;
    v8290 = (uint64_t *)*(v2493 - 1);
    *v8290 = *v2496;
    *(_QWORD *)(v8291 + 8) = v8290;
    *v2496 = 0;
    v2496[1] = 0;
    v2493 = (_QWORD *)*((_QWORD *)this + 15);
  }
  *v2493 = 0xFFFE000000000003;
  v2497 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v2497)
  {
    v2498 = *(_QWORD *)this;
    v2499 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2499)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2498 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2499 = *(_QWORD **)(v2498 + 712);
    }
    *(_QWORD *)(v2498 + 712) = *v2499;
    v2499[2] = 0;
    v2497 = v2499 + 2;
    *v2499 = 0;
    v2499[1] = 0;
    *((_QWORD *)this + 16) = v2499 + 2;
  }
  v2500 = v2497 - 2;
  if (*v2497 && (*v2497 & 0xFFFE000000000002) == 0)
  {
    v8293 = *v2500;
    v8292 = (uint64_t *)*(v2497 - 1);
    *v8292 = *v2500;
    *(_QWORD *)(v8293 + 8) = v8292;
    *v2500 = 0;
    v2500[1] = 0;
    v2497 = (_QWORD *)*((_QWORD *)this + 16);
  }
  *v2497 = 0xFFFE000000000004;
  v2501 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v2501)
  {
    v2502 = *(_QWORD *)this;
    v2503 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2503)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2502 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2503 = *(_QWORD **)(v2502 + 712);
    }
    *(_QWORD *)(v2502 + 712) = *v2503;
    v2503[2] = 0;
    v2501 = v2503 + 2;
    *v2503 = 0;
    v2503[1] = 0;
    *((_QWORD *)this + 17) = v2503 + 2;
  }
  v2504 = v2501 - 2;
  if (*v2501 && (*v2501 & 0xFFFE000000000002) == 0)
  {
    v8295 = *v2504;
    v8294 = (uint64_t *)*(v2501 - 1);
    *v8294 = *v2504;
    *(_QWORD *)(v8295 + 8) = v8294;
    *v2504 = 0;
    v2504[1] = 0;
    v2501 = (_QWORD *)*((_QWORD *)this + 17);
  }
  *v2501 = 0xFFFE000000000005;
  v2505 = (_QWORD *)*((_QWORD *)this + 18);
  if (!v2505)
  {
    v2506 = *(_QWORD *)this;
    v2507 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2507)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2506 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2507 = *(_QWORD **)(v2506 + 712);
    }
    *(_QWORD *)(v2506 + 712) = *v2507;
    v2507[2] = 0;
    v2505 = v2507 + 2;
    *v2507 = 0;
    v2507[1] = 0;
    *((_QWORD *)this + 18) = v2507 + 2;
  }
  v2508 = v2505 - 2;
  if (*v2505 && (*v2505 & 0xFFFE000000000002) == 0)
  {
    v8297 = *v2508;
    v8296 = (uint64_t *)*(v2505 - 1);
    *v8296 = *v2508;
    *(_QWORD *)(v8297 + 8) = v8296;
    *v2508 = 0;
    v2508[1] = 0;
    v2505 = (_QWORD *)*((_QWORD *)this + 18);
  }
  *v2505 = 0xFFFE000000000000;
  v2509 = (_QWORD *)*((_QWORD *)this + 19);
  if (!v2509)
  {
    v2510 = *(_QWORD *)this;
    v2511 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2511)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2510 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2511 = *(_QWORD **)(v2510 + 712);
    }
    *(_QWORD *)(v2510 + 712) = *v2511;
    v2511[2] = 0;
    v2509 = v2511 + 2;
    *v2511 = 0;
    v2511[1] = 0;
    *((_QWORD *)this + 19) = v2511 + 2;
  }
  v2512 = v2509 - 2;
  if (*v2509 && (*v2509 & 0xFFFE000000000002) == 0)
  {
    v8299 = *v2512;
    v8298 = (uint64_t *)*(v2509 - 1);
    *v8298 = *v2512;
    *(_QWORD *)(v8299 + 8) = v8298;
    *v2512 = 0;
    v2512[1] = 0;
    v2509 = (_QWORD *)*((_QWORD *)this + 19);
  }
  *v2509 = 0xFFFE000000000001;
  v2513 = (_QWORD *)*((_QWORD *)this + 20);
  if (!v2513)
  {
    v2514 = *(_QWORD *)this;
    v2515 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2515)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2514 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2515 = *(_QWORD **)(v2514 + 712);
    }
    *(_QWORD *)(v2514 + 712) = *v2515;
    v2515[2] = 0;
    v2513 = v2515 + 2;
    *v2515 = 0;
    v2515[1] = 0;
    *((_QWORD *)this + 20) = v2515 + 2;
  }
  v2516 = v2513 - 2;
  if (*v2513 && (*v2513 & 0xFFFE000000000002) == 0)
  {
    v8301 = *v2516;
    v8300 = (uint64_t *)*(v2513 - 1);
    *v8300 = *v2516;
    *(_QWORD *)(v8301 + 8) = v8300;
    *v2516 = 0;
    v2516[1] = 0;
    v2513 = (_QWORD *)*((_QWORD *)this + 20);
  }
  *v2513 = 0xFFFE000000000000;
  v2517 = (_QWORD *)*((_QWORD *)this + 21);
  if (!v2517)
  {
    v2518 = *(_QWORD *)this;
    v2519 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2519)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2518 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2519 = *(_QWORD **)(v2518 + 712);
    }
    *(_QWORD *)(v2518 + 712) = *v2519;
    v2519[2] = 0;
    v2517 = v2519 + 2;
    *v2519 = 0;
    v2519[1] = 0;
    *((_QWORD *)this + 21) = v2519 + 2;
  }
  v2520 = v2517 - 2;
  if (*v2517 && (*v2517 & 0xFFFE000000000002) == 0)
  {
    v8303 = *v2520;
    v8302 = (uint64_t *)*(v2517 - 1);
    *v8302 = *v2520;
    *(_QWORD *)(v8303 + 8) = v8302;
    *v2520 = 0;
    v2520[1] = 0;
    v2517 = (_QWORD *)*((_QWORD *)this + 21);
  }
  *v2517 = 0xFFFE000000000001;
  v2521 = (_QWORD *)*((_QWORD *)this + 22);
  if (!v2521)
  {
    v2522 = *(_QWORD *)this;
    v2523 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2523)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2522 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2523 = *(_QWORD **)(v2522 + 712);
    }
    *(_QWORD *)(v2522 + 712) = *v2523;
    v2523[2] = 0;
    v2521 = v2523 + 2;
    *v2523 = 0;
    v2523[1] = 0;
    *((_QWORD *)this + 22) = v2523 + 2;
  }
  v2524 = v2521 - 2;
  if (*v2521 && (*v2521 & 0xFFFE000000000002) == 0)
  {
    v8305 = *v2524;
    v8304 = (uint64_t *)*(v2521 - 1);
    *v8304 = *v2524;
    *(_QWORD *)(v8305 + 8) = v8304;
    *v2524 = 0;
    v2524[1] = 0;
    v2521 = (_QWORD *)*((_QWORD *)this + 22);
  }
  *v2521 = 0xFFFE000000000002;
  v2525 = (_QWORD *)*((_QWORD *)this + 23);
  if (!v2525)
  {
    v2526 = *(_QWORD *)this;
    v2527 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2527)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2526 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2527 = *(_QWORD **)(v2526 + 712);
    }
    *(_QWORD *)(v2526 + 712) = *v2527;
    v2527[2] = 0;
    v2525 = v2527 + 2;
    *v2527 = 0;
    v2527[1] = 0;
    *((_QWORD *)this + 23) = v2527 + 2;
  }
  v2528 = v2525 - 2;
  if (*v2525 && (*v2525 & 0xFFFE000000000002) == 0)
  {
    v8307 = *v2528;
    v8306 = (uint64_t *)*(v2525 - 1);
    *v8306 = *v2528;
    *(_QWORD *)(v8307 + 8) = v8306;
    *v2528 = 0;
    v2528[1] = 0;
    v2525 = (_QWORD *)*((_QWORD *)this + 23);
  }
  *v2525 = 0xFFFE000000000003;
  v2529 = (_QWORD *)*((_QWORD *)this + 24);
  if (!v2529)
  {
    v2530 = *(_QWORD *)this;
    v2531 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2531)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2530 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2531 = *(_QWORD **)(v2530 + 712);
    }
    *(_QWORD *)(v2530 + 712) = *v2531;
    v2531[2] = 0;
    v2529 = v2531 + 2;
    *v2531 = 0;
    v2531[1] = 0;
    *((_QWORD *)this + 24) = v2531 + 2;
  }
  v2532 = v2529 - 2;
  if (*v2529 && (*v2529 & 0xFFFE000000000002) == 0)
  {
    v8309 = *v2532;
    v8308 = (uint64_t *)*(v2529 - 1);
    *v8308 = *v2532;
    *(_QWORD *)(v8309 + 8) = v8308;
    *v2532 = 0;
    v2532[1] = 0;
    v2529 = (_QWORD *)*((_QWORD *)this + 24);
  }
  *v2529 = 0xFFFE000000000004;
  v2533 = (_QWORD *)*((_QWORD *)this + 25);
  if (!v2533)
  {
    v2534 = *(_QWORD *)this;
    v2535 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2535)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2534 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2535 = *(_QWORD **)(v2534 + 712);
    }
    *(_QWORD *)(v2534 + 712) = *v2535;
    v2535[2] = 0;
    v2533 = v2535 + 2;
    *v2535 = 0;
    v2535[1] = 0;
    *((_QWORD *)this + 25) = v2535 + 2;
  }
  v2536 = v2533 - 2;
  if (*v2533 && (*v2533 & 0xFFFE000000000002) == 0)
  {
    v8311 = *v2536;
    v8310 = (uint64_t *)*(v2533 - 1);
    *v8310 = *v2536;
    *(_QWORD *)(v8311 + 8) = v8310;
    *v2536 = 0;
    v2536[1] = 0;
    v2533 = (_QWORD *)*((_QWORD *)this + 25);
  }
  *v2533 = 0xFFFE000000000008;
  v2537 = (_QWORD *)*((_QWORD *)this + 26);
  if (!v2537)
  {
    v2538 = *(_QWORD *)this;
    v2539 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2539)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2538 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2539 = *(_QWORD **)(v2538 + 712);
    }
    *(_QWORD *)(v2538 + 712) = *v2539;
    v2539[2] = 0;
    v2537 = v2539 + 2;
    *v2539 = 0;
    v2539[1] = 0;
    *((_QWORD *)this + 26) = v2539 + 2;
  }
  v2540 = v2537 - 2;
  if (*v2537 && (*v2537 & 0xFFFE000000000002) == 0)
  {
    v8313 = *v2540;
    v8312 = (uint64_t *)*(v2537 - 1);
    *v8312 = *v2540;
    *(_QWORD *)(v8313 + 8) = v8312;
    *v2540 = 0;
    v2540[1] = 0;
    v2537 = (_QWORD *)*((_QWORD *)this + 26);
  }
  *v2537 = 0xFFFE000000000000;
  v2541 = (_QWORD *)*((_QWORD *)this + 27);
  if (!v2541)
  {
    v2542 = *(_QWORD *)this;
    v2543 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2543)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2542 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2543 = *(_QWORD **)(v2542 + 712);
    }
    *(_QWORD *)(v2542 + 712) = *v2543;
    v2543[2] = 0;
    v2541 = v2543 + 2;
    *v2543 = 0;
    v2543[1] = 0;
    *((_QWORD *)this + 27) = v2543 + 2;
  }
  v2544 = v2541 - 2;
  if (*v2541 && (*v2541 & 0xFFFE000000000002) == 0)
  {
    v8315 = *v2544;
    v8314 = (uint64_t *)*(v2541 - 1);
    *v8314 = *v2544;
    *(_QWORD *)(v8315 + 8) = v8314;
    *v2544 = 0;
    v2544[1] = 0;
    v2541 = (_QWORD *)*((_QWORD *)this + 27);
  }
  *v2541 = 0xFFFE000000000001;
  v2545 = (_QWORD *)*((_QWORD *)this + 30);
  if (!v2545)
  {
    v2546 = *(_QWORD *)this;
    v2547 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2547)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2546 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2547 = *(_QWORD **)(v2546 + 712);
    }
    *(_QWORD *)(v2546 + 712) = *v2547;
    v2547[2] = 0;
    v2545 = v2547 + 2;
    *v2547 = 0;
    v2547[1] = 0;
    *((_QWORD *)this + 30) = v2547 + 2;
  }
  v2548 = v2545 - 2;
  if (*v2545 && (*v2545 & 0xFFFE000000000002) == 0)
  {
    v8317 = *v2548;
    v8316 = (uint64_t *)*(v2545 - 1);
    *v8316 = *v2548;
    *(_QWORD *)(v8317 + 8) = v8316;
    *v2548 = 0;
    v2548[1] = 0;
    v2545 = (_QWORD *)*((_QWORD *)this + 30);
  }
  *v2545 = 0xFFFE000000000001;
  v2549 = (_QWORD *)*((_QWORD *)this + 31);
  if (!v2549)
  {
    v2550 = *(_QWORD *)this;
    v2551 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2551)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2550 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2551 = *(_QWORD **)(v2550 + 712);
    }
    *(_QWORD *)(v2550 + 712) = *v2551;
    v2551[2] = 0;
    v2549 = v2551 + 2;
    *v2551 = 0;
    v2551[1] = 0;
    *((_QWORD *)this + 31) = v2551 + 2;
  }
  v2552 = v2549 - 2;
  if (*v2549 && (*v2549 & 0xFFFE000000000002) == 0)
  {
    v8319 = *v2552;
    v8318 = (uint64_t *)*(v2549 - 1);
    *v8318 = *v2552;
    *(_QWORD *)(v8319 + 8) = v8318;
    *v2552 = 0;
    v2552[1] = 0;
    v2549 = (_QWORD *)*((_QWORD *)this + 31);
  }
  *v2549 = 0xFFFE000000000002;
  v2553 = (_QWORD *)*((_QWORD *)this + 32);
  if (!v2553)
  {
    v2554 = *(_QWORD *)this;
    v2555 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2555)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2554 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2555 = *(_QWORD **)(v2554 + 712);
    }
    *(_QWORD *)(v2554 + 712) = *v2555;
    v2555[2] = 0;
    v2553 = v2555 + 2;
    *v2555 = 0;
    v2555[1] = 0;
    *((_QWORD *)this + 32) = v2555 + 2;
  }
  v2556 = v2553 - 2;
  if (*v2553 && (*v2553 & 0xFFFE000000000002) == 0)
  {
    v8321 = *v2556;
    v8320 = (uint64_t *)*(v2553 - 1);
    *v8320 = *v2556;
    *(_QWORD *)(v8321 + 8) = v8320;
    *v2556 = 0;
    v2556[1] = 0;
    v2553 = (_QWORD *)*((_QWORD *)this + 32);
  }
  *v2553 = 0xFFFE000000000003;
  v2557 = (_QWORD *)*((_QWORD *)this + 33);
  if (!v2557)
  {
    v2558 = *(_QWORD *)this;
    v2559 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2559)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2558 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2559 = *(_QWORD **)(v2558 + 712);
    }
    *(_QWORD *)(v2558 + 712) = *v2559;
    v2559[2] = 0;
    v2557 = v2559 + 2;
    *v2559 = 0;
    v2559[1] = 0;
    *((_QWORD *)this + 33) = v2559 + 2;
  }
  v2560 = v2557 - 2;
  if (*v2557 && (*v2557 & 0xFFFE000000000002) == 0)
  {
    v8323 = *v2560;
    v8322 = (uint64_t *)*(v2557 - 1);
    *v8322 = *v2560;
    *(_QWORD *)(v8323 + 8) = v8322;
    *v2560 = 0;
    v2560[1] = 0;
    v2557 = (_QWORD *)*((_QWORD *)this + 33);
  }
  *v2557 = 0xFFFE000000000004;
  v2561 = (_QWORD *)*((_QWORD *)this + 34);
  if (!v2561)
  {
    v2562 = *(_QWORD *)this;
    v2563 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2563)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2562 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2563 = *(_QWORD **)(v2562 + 712);
    }
    *(_QWORD *)(v2562 + 712) = *v2563;
    v2563[2] = 0;
    v2561 = v2563 + 2;
    *v2563 = 0;
    v2563[1] = 0;
    *((_QWORD *)this + 34) = v2563 + 2;
  }
  v2564 = v2561 - 2;
  if (*v2561 && (*v2561 & 0xFFFE000000000002) == 0)
  {
    v8325 = *v2564;
    v8324 = (uint64_t *)*(v2561 - 1);
    *v8324 = *v2564;
    *(_QWORD *)(v8325 + 8) = v8324;
    *v2564 = 0;
    v2564[1] = 0;
    v2561 = (_QWORD *)*((_QWORD *)this + 34);
  }
  *v2561 = 0xFFFE000000000005;
  v2565 = (_QWORD *)*((_QWORD *)this + 35);
  if (!v2565)
  {
    v2566 = *(_QWORD *)this;
    v2567 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2567)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2566 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2567 = *(_QWORD **)(v2566 + 712);
    }
    *(_QWORD *)(v2566 + 712) = *v2567;
    v2567[2] = 0;
    v2565 = v2567 + 2;
    *v2567 = 0;
    v2567[1] = 0;
    *((_QWORD *)this + 35) = v2567 + 2;
  }
  v2568 = v2565 - 2;
  if (*v2565 && (*v2565 & 0xFFFE000000000002) == 0)
  {
    v8327 = *v2568;
    v8326 = (uint64_t *)*(v2565 - 1);
    *v8326 = *v2568;
    *(_QWORD *)(v8327 + 8) = v8326;
    *v2568 = 0;
    v2568[1] = 0;
    v2565 = (_QWORD *)*((_QWORD *)this + 35);
  }
  *v2565 = 0xFFFE000000000000;
  v2569 = (_QWORD *)*((_QWORD *)this + 36);
  if (!v2569)
  {
    v2570 = *(_QWORD *)this;
    v2571 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2571)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2570 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2571 = *(_QWORD **)(v2570 + 712);
    }
    *(_QWORD *)(v2570 + 712) = *v2571;
    v2571[2] = 0;
    v2569 = v2571 + 2;
    *v2571 = 0;
    v2571[1] = 0;
    *((_QWORD *)this + 36) = v2571 + 2;
  }
  v2572 = v2569 - 2;
  if (*v2569 && (*v2569 & 0xFFFE000000000002) == 0)
  {
    v8329 = *v2572;
    v8328 = (uint64_t *)*(v2569 - 1);
    *v8328 = *v2572;
    *(_QWORD *)(v8329 + 8) = v8328;
    *v2572 = 0;
    v2572[1] = 0;
    v2569 = (_QWORD *)*((_QWORD *)this + 36);
  }
  *v2569 = 0xFFFE000000000002;
  v2573 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v2573)
  {
    v2574 = *(_QWORD *)this;
    v2575 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2575)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2574 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2575 = *(_QWORD **)(v2574 + 712);
    }
    *(_QWORD *)(v2574 + 712) = *v2575;
    v2575[2] = 0;
    v2573 = v2575 + 2;
    *v2575 = 0;
    v2575[1] = 0;
    *((_QWORD *)this + 37) = v2575 + 2;
  }
  v2576 = v2573 - 2;
  if (*v2573 && (*v2573 & 0xFFFE000000000002) == 0)
  {
    v8331 = *v2576;
    v8330 = (uint64_t *)*(v2573 - 1);
    *v8330 = *v2576;
    *(_QWORD *)(v8331 + 8) = v8330;
    *v2576 = 0;
    v2576[1] = 0;
    v2573 = (_QWORD *)*((_QWORD *)this + 37);
  }
  *v2573 = 0xFFFE000000000001;
  v2577 = (_QWORD *)*((_QWORD *)this + 38);
  if (!v2577)
  {
    v2578 = *(_QWORD *)this;
    v2579 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2579)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2578 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2579 = *(_QWORD **)(v2578 + 712);
    }
    *(_QWORD *)(v2578 + 712) = *v2579;
    v2579[2] = 0;
    v2577 = v2579 + 2;
    *v2579 = 0;
    v2579[1] = 0;
    *((_QWORD *)this + 38) = v2579 + 2;
  }
  v2580 = v2577 - 2;
  if (*v2577 && (*v2577 & 0xFFFE000000000002) == 0)
  {
    v8333 = *v2580;
    v8332 = (uint64_t *)*(v2577 - 1);
    *v8332 = *v2580;
    *(_QWORD *)(v8333 + 8) = v8332;
    *v2580 = 0;
    v2580[1] = 0;
    v2577 = (_QWORD *)*((_QWORD *)this + 38);
  }
  *v2577 = 0xFFFE0000FFFFFFFFLL;
  v2581 = (_QWORD *)*((_QWORD *)this + 39);
  if (!v2581)
  {
    v2582 = *(_QWORD *)this;
    v2583 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2583)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2582 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2583 = *(_QWORD **)(v2582 + 712);
    }
    *(_QWORD *)(v2582 + 712) = *v2583;
    v2583[2] = 0;
    v2581 = v2583 + 2;
    *v2583 = 0;
    v2583[1] = 0;
    *((_QWORD *)this + 39) = v2583 + 2;
  }
  v2584 = v2581 - 2;
  if (*v2581 && (*v2581 & 0xFFFE000000000002) == 0)
  {
    v8335 = *v2584;
    v8334 = (uint64_t *)*(v2581 - 1);
    *v8334 = *v2584;
    *(_QWORD *)(v8335 + 8) = v8334;
    *v2584 = 0;
    v2584[1] = 0;
    v2581 = (_QWORD *)*((_QWORD *)this + 39);
  }
  *v2581 = 0xFFFE0000FFFFFFFELL;
  v2585 = (_QWORD *)*((_QWORD *)this + 41);
  if (!v2585)
  {
    v2586 = *(_QWORD *)this;
    v2587 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2587)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2586 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2587 = *(_QWORD **)(v2586 + 712);
    }
    *(_QWORD *)(v2586 + 712) = *v2587;
    v2587[2] = 0;
    v2585 = v2587 + 2;
    *v2587 = 0;
    v2587[1] = 0;
    *((_QWORD *)this + 41) = v2587 + 2;
  }
  v2588 = v2585 - 2;
  if (*v2585 && (*v2585 & 0xFFFE000000000002) == 0)
  {
    v8337 = *v2588;
    v8336 = (uint64_t *)*(v2585 - 1);
    *v8336 = *v2588;
    *(_QWORD *)(v8337 + 8) = v8336;
    *v2588 = 0;
    v2588[1] = 0;
    v2585 = (_QWORD *)*((_QWORD *)this + 41);
  }
  *v2585 = 0xFFFE000000000001;
  v2589 = (_QWORD *)*((_QWORD *)this + 40);
  if (!v2589)
  {
    v2590 = *(_QWORD *)this;
    v2591 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2591)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2590 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2591 = *(_QWORD **)(v2590 + 712);
    }
    *(_QWORD *)(v2590 + 712) = *v2591;
    v2591[2] = 0;
    v2589 = v2591 + 2;
    *v2591 = 0;
    v2591[1] = 0;
    *((_QWORD *)this + 40) = v2591 + 2;
  }
  v2592 = v2589 - 2;
  if (*v2589 && (*v2589 & 0xFFFE000000000002) == 0)
  {
    v8339 = *v2592;
    v8338 = (uint64_t *)*(v2589 - 1);
    *v8338 = *v2592;
    *(_QWORD *)(v8339 + 8) = v8338;
    *v2592 = 0;
    v2592[1] = 0;
    v2589 = (_QWORD *)*((_QWORD *)this + 40);
  }
  *v2589 = 0xFFFE000000000000;
  v2593 = (_QWORD *)*((_QWORD *)this + 42);
  if (!v2593)
  {
    v2594 = *(_QWORD *)this;
    v2595 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2595)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2594 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2595 = *(_QWORD **)(v2594 + 712);
    }
    *(_QWORD *)(v2594 + 712) = *v2595;
    v2595[2] = 0;
    v2593 = v2595 + 2;
    *v2595 = 0;
    v2595[1] = 0;
    *((_QWORD *)this + 42) = v2595 + 2;
  }
  v2596 = v2593 - 2;
  if (*v2593 && (*v2593 & 0xFFFE000000000002) == 0)
  {
    v8341 = *v2596;
    v8340 = (uint64_t *)*(v2593 - 1);
    *v8340 = *v2596;
    *(_QWORD *)(v8341 + 8) = v8340;
    *v2596 = 0;
    v2596[1] = 0;
    v2593 = (_QWORD *)*((_QWORD *)this + 42);
  }
  *v2593 = 0xFFFE000000000002;
  v2597 = (_QWORD *)*((_QWORD *)this + 43);
  if (!v2597)
  {
    v2598 = *(_QWORD *)this;
    v2599 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2599)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2598 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2599 = *(_QWORD **)(v2598 + 712);
    }
    *(_QWORD *)(v2598 + 712) = *v2599;
    v2599[2] = 0;
    v2597 = v2599 + 2;
    *v2599 = 0;
    v2599[1] = 0;
    *((_QWORD *)this + 43) = v2599 + 2;
  }
  v2600 = v2597 - 2;
  if (*v2597 && (*v2597 & 0xFFFE000000000002) == 0)
  {
    v8343 = *v2600;
    v8342 = (uint64_t *)*(v2597 - 1);
    *v8342 = *v2600;
    *(_QWORD *)(v8343 + 8) = v8342;
    *v2600 = 0;
    v2600[1] = 0;
    v2597 = (_QWORD *)*((_QWORD *)this + 43);
  }
  *v2597 = 0xFFFE000000000000;
  v2601 = (_QWORD *)*((_QWORD *)this + 44);
  if (!v2601)
  {
    v2602 = *(_QWORD *)this;
    v2603 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2603)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2602 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2603 = *(_QWORD **)(v2602 + 712);
    }
    *(_QWORD *)(v2602 + 712) = *v2603;
    v2603[2] = 0;
    v2601 = v2603 + 2;
    *v2603 = 0;
    v2603[1] = 0;
    *((_QWORD *)this + 44) = v2603 + 2;
  }
  v2604 = v2601 - 2;
  if (*v2601 && (*v2601 & 0xFFFE000000000002) == 0)
  {
    v8345 = *v2604;
    v8344 = (uint64_t *)*(v2601 - 1);
    *v8344 = *v2604;
    *(_QWORD *)(v8345 + 8) = v8344;
    *v2604 = 0;
    v2604[1] = 0;
    v2601 = (_QWORD *)*((_QWORD *)this + 44);
  }
  *v2601 = 0xFFFE000000000001;
  v2605 = (_QWORD *)*((_QWORD *)this + 45);
  if (!v2605)
  {
    v2606 = *(_QWORD *)this;
    v2607 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2607)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2606 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2607 = *(_QWORD **)(v2606 + 712);
    }
    *(_QWORD *)(v2606 + 712) = *v2607;
    v2607[2] = 0;
    v2605 = v2607 + 2;
    *v2607 = 0;
    v2607[1] = 0;
    *((_QWORD *)this + 45) = v2607 + 2;
  }
  v2608 = v2605 - 2;
  if (*v2605 && (*v2605 & 0xFFFE000000000002) == 0)
  {
    v8347 = *v2608;
    v8346 = (uint64_t *)*(v2605 - 1);
    *v8346 = *v2608;
    *(_QWORD *)(v8347 + 8) = v8346;
    *v2608 = 0;
    v2608[1] = 0;
    v2605 = (_QWORD *)*((_QWORD *)this + 45);
  }
  *v2605 = 0xFFFE000000000002;
  v2609 = (_QWORD *)*((_QWORD *)this + 46);
  if (!v2609)
  {
    v2610 = *(_QWORD *)this;
    v2611 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2611)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2610 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2611 = *(_QWORD **)(v2610 + 712);
    }
    *(_QWORD *)(v2610 + 712) = *v2611;
    v2611[2] = 0;
    v2609 = v2611 + 2;
    *v2611 = 0;
    v2611[1] = 0;
    *((_QWORD *)this + 46) = v2611 + 2;
  }
  v2612 = v2609 - 2;
  if (*v2609 && (*v2609 & 0xFFFE000000000002) == 0)
  {
    v8349 = *v2612;
    v8348 = (uint64_t *)*(v2609 - 1);
    *v8348 = *v2612;
    *(_QWORD *)(v8349 + 8) = v8348;
    *v2612 = 0;
    v2612[1] = 0;
    v2609 = (_QWORD *)*((_QWORD *)this + 46);
  }
  *v2609 = 0xFFFE000000000003;
  v2613 = (_QWORD *)*((_QWORD *)this + 47);
  if (!v2613)
  {
    v2614 = *(_QWORD *)this;
    v2615 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2615)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2614 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2615 = *(_QWORD **)(v2614 + 712);
    }
    *(_QWORD *)(v2614 + 712) = *v2615;
    v2615[2] = 0;
    v2613 = v2615 + 2;
    *v2615 = 0;
    v2615[1] = 0;
    *((_QWORD *)this + 47) = v2615 + 2;
  }
  v2616 = v2613 - 2;
  if (*v2613 && (*v2613 & 0xFFFE000000000002) == 0)
  {
    v8351 = *v2616;
    v8350 = (uint64_t *)*(v2613 - 1);
    *v8350 = *v2616;
    *(_QWORD *)(v8351 + 8) = v8350;
    *v2616 = 0;
    v2616[1] = 0;
    v2613 = (_QWORD *)*((_QWORD *)this + 47);
  }
  *v2613 = 0xFFFE000000000000;
  v2617 = (_QWORD *)*((_QWORD *)this + 48);
  if (!v2617)
  {
    v2618 = *(_QWORD *)this;
    v2619 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2619)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2618 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2619 = *(_QWORD **)(v2618 + 712);
    }
    *(_QWORD *)(v2618 + 712) = *v2619;
    v2619[2] = 0;
    v2617 = v2619 + 2;
    *v2619 = 0;
    v2619[1] = 0;
    *((_QWORD *)this + 48) = v2619 + 2;
  }
  v2620 = v2617 - 2;
  if (*v2617 && (*v2617 & 0xFFFE000000000002) == 0)
  {
    v8353 = *v2620;
    v8352 = (uint64_t *)*(v2617 - 1);
    *v8352 = *v2620;
    *(_QWORD *)(v8353 + 8) = v8352;
    *v2620 = 0;
    v2620[1] = 0;
    v2617 = (_QWORD *)*((_QWORD *)this + 48);
  }
  *v2617 = 0xFFFE000000000001;
  v2621 = (_QWORD *)*((_QWORD *)this + 49);
  if (!v2621)
  {
    v2622 = *(_QWORD *)this;
    v2623 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2623)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2622 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2623 = *(_QWORD **)(v2622 + 712);
    }
    *(_QWORD *)(v2622 + 712) = *v2623;
    v2623[2] = 0;
    v2621 = v2623 + 2;
    *v2623 = 0;
    v2623[1] = 0;
    *((_QWORD *)this + 49) = v2623 + 2;
  }
  v2624 = v2621 - 2;
  if (*v2621 && (*v2621 & 0xFFFE000000000002) == 0)
  {
    v8355 = *v2624;
    v8354 = (uint64_t *)*(v2621 - 1);
    *v8354 = *v2624;
    *(_QWORD *)(v8355 + 8) = v8354;
    *v2624 = 0;
    v2624[1] = 0;
    v2621 = (_QWORD *)*((_QWORD *)this + 49);
  }
  *v2621 = 0xFFFE000000000002;
  v2625 = (_QWORD *)*((_QWORD *)this + 50);
  if (!v2625)
  {
    v2626 = *(_QWORD *)this;
    v2627 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2627)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2626 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2627 = *(_QWORD **)(v2626 + 712);
    }
    *(_QWORD *)(v2626 + 712) = *v2627;
    v2627[2] = 0;
    v2625 = v2627 + 2;
    *v2627 = 0;
    v2627[1] = 0;
    *((_QWORD *)this + 50) = v2627 + 2;
  }
  v2628 = v2625 - 2;
  if (*v2625 && (*v2625 & 0xFFFE000000000002) == 0)
  {
    v8357 = *v2628;
    v8356 = (uint64_t *)*(v2625 - 1);
    *v8356 = *v2628;
    *(_QWORD *)(v8357 + 8) = v8356;
    *v2628 = 0;
    v2628[1] = 0;
    v2625 = (_QWORD *)*((_QWORD *)this + 50);
  }
  *v2625 = 0xFFFE000000000003;
  v2629 = (_QWORD *)*((_QWORD *)this + 51);
  if (!v2629)
  {
    v2630 = *(_QWORD *)this;
    v2631 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2631)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2630 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2631 = *(_QWORD **)(v2630 + 712);
    }
    *(_QWORD *)(v2630 + 712) = *v2631;
    v2631[2] = 0;
    v2629 = v2631 + 2;
    *v2631 = 0;
    v2631[1] = 0;
    *((_QWORD *)this + 51) = v2631 + 2;
  }
  v2632 = v2629 - 2;
  if (*v2629 && (*v2629 & 0xFFFE000000000002) == 0)
  {
    v8359 = *v2632;
    v8358 = (uint64_t *)*(v2629 - 1);
    *v8358 = *v2632;
    *(_QWORD *)(v8359 + 8) = v8358;
    *v2632 = 0;
    v2632[1] = 0;
    v2629 = (_QWORD *)*((_QWORD *)this + 51);
  }
  *v2629 = 0xFFFE000000000000;
  v2633 = (_QWORD *)*((_QWORD *)this + 52);
  if (!v2633)
  {
    v2634 = *(_QWORD *)this;
    v2635 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2635)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2634 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2635 = *(_QWORD **)(v2634 + 712);
    }
    *(_QWORD *)(v2634 + 712) = *v2635;
    v2635[2] = 0;
    v2633 = v2635 + 2;
    *v2635 = 0;
    v2635[1] = 0;
    *((_QWORD *)this + 52) = v2635 + 2;
  }
  v2636 = v2633 - 2;
  if (*v2633 && (*v2633 & 0xFFFE000000000002) == 0)
  {
    v8361 = *v2636;
    v8360 = (uint64_t *)*(v2633 - 1);
    *v8360 = *v2636;
    *(_QWORD *)(v8361 + 8) = v8360;
    *v2636 = 0;
    v2636[1] = 0;
    v2633 = (_QWORD *)*((_QWORD *)this + 52);
  }
  *v2633 = 0xFFFE000000000001;
  v2637 = (_QWORD *)*((_QWORD *)this + 53);
  if (!v2637)
  {
    v2638 = *(_QWORD *)this;
    v2639 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2639)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2638 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2639 = *(_QWORD **)(v2638 + 712);
    }
    *(_QWORD *)(v2638 + 712) = *v2639;
    v2639[2] = 0;
    v2637 = v2639 + 2;
    *v2639 = 0;
    v2639[1] = 0;
    *((_QWORD *)this + 53) = v2639 + 2;
  }
  v2640 = v2637 - 2;
  if (*v2637 && (*v2637 & 0xFFFE000000000002) == 0)
  {
    v8363 = *v2640;
    v8362 = (uint64_t *)*(v2637 - 1);
    *v8362 = *v2640;
    *(_QWORD *)(v8363 + 8) = v8362;
    *v2640 = 0;
    v2640[1] = 0;
    v2637 = (_QWORD *)*((_QWORD *)this + 53);
  }
  *v2637 = 0xFFFE000000000005;
  v2641 = (_QWORD *)*((_QWORD *)this + 54);
  if (!v2641)
  {
    v2642 = *(_QWORD *)this;
    v2643 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2643)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2642 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2643 = *(_QWORD **)(v2642 + 712);
    }
    *(_QWORD *)(v2642 + 712) = *v2643;
    v2643[2] = 0;
    v2641 = v2643 + 2;
    *v2643 = 0;
    v2643[1] = 0;
    *((_QWORD *)this + 54) = v2643 + 2;
  }
  v2644 = v2641 - 2;
  if (*v2641 && (*v2641 & 0xFFFE000000000002) == 0)
  {
    v8365 = *v2644;
    v8364 = (uint64_t *)*(v2641 - 1);
    *v8364 = *v2644;
    *(_QWORD *)(v8365 + 8) = v8364;
    *v2644 = 0;
    v2644[1] = 0;
    v2641 = (_QWORD *)*((_QWORD *)this + 54);
  }
  *v2641 = 0xFFFE000000000006;
  v2645 = (_QWORD *)*((_QWORD *)this + 55);
  if (!v2645)
  {
    v2646 = *(_QWORD *)this;
    v2647 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2647)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2646 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2647 = *(_QWORD **)(v2646 + 712);
    }
    *(_QWORD *)(v2646 + 712) = *v2647;
    v2647[2] = 0;
    v2645 = v2647 + 2;
    *v2647 = 0;
    v2647[1] = 0;
    *((_QWORD *)this + 55) = v2647 + 2;
  }
  v2648 = v2645 - 2;
  if (*v2645 && (*v2645 & 0xFFFE000000000002) == 0)
  {
    v8367 = *v2648;
    v8366 = (uint64_t *)*(v2645 - 1);
    *v8366 = *v2648;
    *(_QWORD *)(v8367 + 8) = v8366;
    *v2648 = 0;
    v2648[1] = 0;
    v2645 = (_QWORD *)*((_QWORD *)this + 55);
  }
  *v2645 = 0xFFFE000000000007;
  v2649 = (_QWORD *)*((_QWORD *)this + 56);
  if (!v2649)
  {
    v2650 = *(_QWORD *)this;
    v2651 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2651)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2650 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2651 = *(_QWORD **)(v2650 + 712);
    }
    *(_QWORD *)(v2650 + 712) = *v2651;
    v2651[2] = 0;
    v2649 = v2651 + 2;
    *v2651 = 0;
    v2651[1] = 0;
    *((_QWORD *)this + 56) = v2651 + 2;
  }
  v2652 = v2649 - 2;
  if (*v2649 && (*v2649 & 0xFFFE000000000002) == 0)
  {
    v8369 = *v2652;
    v8368 = (uint64_t *)*(v2649 - 1);
    *v8368 = *v2652;
    *(_QWORD *)(v8369 + 8) = v8368;
    *v2652 = 0;
    v2652[1] = 0;
    v2649 = (_QWORD *)*((_QWORD *)this + 56);
  }
  *v2649 = 0xFFFE0000FFFFFFFFLL;
  v2653 = (_QWORD *)*((_QWORD *)this + 57);
  if (!v2653)
  {
    v2654 = *(_QWORD *)this;
    v2655 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2655)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2654 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2655 = *(_QWORD **)(v2654 + 712);
    }
    *(_QWORD *)(v2654 + 712) = *v2655;
    v2655[2] = 0;
    v2653 = v2655 + 2;
    *v2655 = 0;
    v2655[1] = 0;
    *((_QWORD *)this + 57) = v2655 + 2;
  }
  v2656 = v2653 - 2;
  if (*v2653 && (*v2653 & 0xFFFE000000000002) == 0)
  {
    v8371 = *v2656;
    v8370 = (uint64_t *)*(v2653 - 1);
    *v8370 = *v2656;
    *(_QWORD *)(v8371 + 8) = v8370;
    *v2656 = 0;
    v2656[1] = 0;
    v2653 = (_QWORD *)*((_QWORD *)this + 57);
  }
  *v2653 = 0xFFFE0000FFFFFFFELL;
  v2657 = (_QWORD *)*((_QWORD *)this + 59);
  if (!v2657)
  {
    v2658 = *(_QWORD *)this;
    v2659 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2659)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2658 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2659 = *(_QWORD **)(v2658 + 712);
    }
    *(_QWORD *)(v2658 + 712) = *v2659;
    v2659[2] = 0;
    v2657 = v2659 + 2;
    *v2659 = 0;
    v2659[1] = 0;
    *((_QWORD *)this + 59) = v2659 + 2;
  }
  v2660 = v2657 - 2;
  if (*v2657 && (*v2657 & 0xFFFE000000000002) == 0)
  {
    v8373 = *v2660;
    v8372 = (uint64_t *)*(v2657 - 1);
    *v8372 = *v2660;
    *(_QWORD *)(v8373 + 8) = v8372;
    *v2660 = 0;
    v2660[1] = 0;
    v2657 = (_QWORD *)*((_QWORD *)this + 59);
  }
  *v2657 = 0xFFFE0000FFFFFFFDLL;
  v2661 = (_QWORD *)*((_QWORD *)this + 60);
  if (!v2661)
  {
    v2662 = *(_QWORD *)this;
    v2663 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2663)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2662 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2663 = *(_QWORD **)(v2662 + 712);
    }
    *(_QWORD *)(v2662 + 712) = *v2663;
    v2663[2] = 0;
    v2661 = v2663 + 2;
    *v2663 = 0;
    v2663[1] = 0;
    *((_QWORD *)this + 60) = v2663 + 2;
  }
  v2664 = v2661 - 2;
  if (*v2661 && (*v2661 & 0xFFFE000000000002) == 0)
  {
    v8375 = *v2664;
    v8374 = (uint64_t *)*(v2661 - 1);
    *v8374 = *v2664;
    *(_QWORD *)(v8375 + 8) = v8374;
    *v2664 = 0;
    v2664[1] = 0;
    v2661 = (_QWORD *)*((_QWORD *)this + 60);
  }
  *v2661 = 0xFFFE0000FFFFFFFCLL;
  v2665 = (_QWORD *)*((_QWORD *)this + 58);
  if (!v2665)
  {
    v2666 = *(_QWORD *)this;
    v2667 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2667)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2666 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2667 = *(_QWORD **)(v2666 + 712);
    }
    *(_QWORD *)(v2666 + 712) = *v2667;
    v2667[2] = 0;
    v2665 = v2667 + 2;
    *v2667 = 0;
    v2667[1] = 0;
    *((_QWORD *)this + 58) = v2667 + 2;
  }
  v2668 = v2665 - 2;
  if (*v2665 && (*v2665 & 0xFFFE000000000002) == 0)
  {
    v8377 = *v2668;
    v8376 = (uint64_t *)*(v2665 - 1);
    *v8376 = *v2668;
    *(_QWORD *)(v8377 + 8) = v8376;
    *v2668 = 0;
    v2668[1] = 0;
    v2665 = (_QWORD *)*((_QWORD *)this + 58);
  }
  *v2665 = 0xFFFE0000FFFFFFFBLL;
  v2669 = (_QWORD *)*((_QWORD *)this + 61);
  if (!v2669)
  {
    v2670 = *(_QWORD *)this;
    v2671 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2671)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2670 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2671 = *(_QWORD **)(v2670 + 712);
    }
    *(_QWORD *)(v2670 + 712) = *v2671;
    v2671[2] = 0;
    v2669 = v2671 + 2;
    *v2671 = 0;
    v2671[1] = 0;
    *((_QWORD *)this + 61) = v2671 + 2;
  }
  v2672 = v2669 - 2;
  if (*v2669 && (*v2669 & 0xFFFE000000000002) == 0)
  {
    v8379 = *v2672;
    v8378 = (uint64_t *)*(v2669 - 1);
    *v8378 = *v2672;
    *(_QWORD *)(v8379 + 8) = v8378;
    *v2672 = 0;
    v2672[1] = 0;
    v2669 = (_QWORD *)*((_QWORD *)this + 61);
  }
  *v2669 = 0xFFFE0000FFFFFFFFLL;
  v2673 = (_QWORD *)*((_QWORD *)this + 62);
  if (!v2673)
  {
    v2674 = *(_QWORD *)this;
    v2675 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2675)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2674 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2675 = *(_QWORD **)(v2674 + 712);
    }
    *(_QWORD *)(v2674 + 712) = *v2675;
    v2675[2] = 0;
    v2673 = v2675 + 2;
    *v2675 = 0;
    v2675[1] = 0;
    *((_QWORD *)this + 62) = v2675 + 2;
  }
  v2676 = v2673 - 2;
  if (*v2673 && (*v2673 & 0xFFFE000000000002) == 0)
  {
    v8381 = *v2676;
    v8380 = (uint64_t *)*(v2673 - 1);
    *v8380 = *v2676;
    *(_QWORD *)(v8381 + 8) = v8380;
    *v2676 = 0;
    v2676[1] = 0;
    v2673 = (_QWORD *)*((_QWORD *)this + 62);
  }
  *v2673 = 0xFFFE0000FFFFFFFELL;
  v2677 = (_QWORD *)*((_QWORD *)this + 63);
  if (!v2677)
  {
    v2678 = *(_QWORD *)this;
    v2679 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2679)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2678 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2679 = *(_QWORD **)(v2678 + 712);
    }
    *(_QWORD *)(v2678 + 712) = *v2679;
    v2679[2] = 0;
    v2677 = v2679 + 2;
    *v2679 = 0;
    v2679[1] = 0;
    *((_QWORD *)this + 63) = v2679 + 2;
  }
  v2680 = v2677 - 2;
  if (*v2677 && (*v2677 & 0xFFFE000000000002) == 0)
  {
    v8383 = *v2680;
    v8382 = (uint64_t *)*(v2677 - 1);
    *v8382 = *v2680;
    *(_QWORD *)(v8383 + 8) = v8382;
    *v2680 = 0;
    v2680[1] = 0;
    v2677 = (_QWORD *)*((_QWORD *)this + 63);
  }
  *v2677 = 0xFFFE000000000000;
  v2681 = (_QWORD *)*((_QWORD *)this + 64);
  if (!v2681)
  {
    v2682 = *(_QWORD *)this;
    v2683 = *(_QWORD **)(*(_QWORD *)this + 712);
    if (!v2683)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v2682 + 672), (uint64_t)v2446, v2447, v2448, v2449, v2450, v2451, v2452);
      v2683 = *(_QWORD **)(v2682 + 712);
    }
    *(_QWORD *)(v2682 + 712) = *v2683;
    v2683[2] = 0;
    v2681 = v2683 + 2;
    *v2683 = 0;
    v2683[1] = 0;
    *((_QWORD *)this + 64) = v2683 + 2;
  }
  v2684 = v2681 - 2;
  if (*v2681 && (*v2681 & 0xFFFE000000000002) == 0)
  {
    v8385 = *v2684;
    v8384 = (uint64_t *)*(v2681 - 1);
    *v8384 = *v2684;
    *(_QWORD *)(v8385 + 8) = v8384;
    *v2684 = 0;
    v2684[1] = 0;
    v2681 = (_QWORD *)*((_QWORD *)this + 64);
  }
  *v2681 = 0xFFFE000000000000;
  return this;
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::BytecodeIntrinsicRegistry::Entry>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  char v67;

  v10 = a1;
  v12 = *(_DWORD *)(a2 + 8);
  v11 = *(unsigned int *)(a2 + 12);
  if (20 * v11 >= 19 * (unint64_t)v12 || *(_BYTE *)(a2 + 20) && v12 <= 2 * (int)v11)
  {
    if (v12)
      v60 = 2 * v12;
    else
      v60 = 8;
    v62 = a4;
    WTF::RobinHoodHashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v60);
    a4 = v62;
    v10 = a1;
    v12 = *(_DWORD *)(a2 + 8);
  }
  v13 = v12 - 1;
  v14 = *(_DWORD *)(a2 + 16);
  v15 = *(WTF::StringImpl **)a3;
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = (v14 ^ (v16 >> 8)) & v13;
  v18 = *(_QWORD *)a2;
  v19 = *(_QWORD *)a2 + 32 * v17;
  v20 = *(WTF::StringImpl **)v19;
  if (*(_QWORD *)v19)
  {
    v21 = 0;
    v22 = v16 >> 8;
    while (1)
    {
      v23 = *((_DWORD *)v20 + 4);
      if ((v23 & 0x20) != 0)
        v23 = *((_DWORD *)v20 + 8);
      v24 = (v17 + v12 - ((v14 ^ (v23 >> 8)) & v13)) & v13;
      if (v21 > v24)
        break;
      if (v23 >> 8 == v22 && v20 == v15)
      {
        v29 = 0;
        v19 = v18 + 32 * v17;
        goto LABEL_22;
      }
      v17 = ((_DWORD)v17 + 1) & v13;
      ++v21;
      v20 = *(WTF::StringImpl **)(v18 + 32 * v17);
      if (!v20)
      {
        v19 = v18 + 32 * v17;
        if (v21 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        goto LABEL_17;
      }
    }
    v19 = v18 + 32 * v17;
    if (v21 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v64 = *(_OWORD *)(v19 + 8);
    v65 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 24) = 0;
    v30 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v31 = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        v63 = v10;
        v51 = a4;
        WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        a4 = v51;
        v10 = v63;
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    v32 = *(_OWORD *)a4;
    *(_BYTE *)(v19 + 24) = *(_BYTE *)(a4 + 16);
    *(_OWORD *)(v19 + 8) = v32;
    v33 = ((_DWORD)v17 + 1) & v13;
    v34 = *(_QWORD *)a2;
    while (1)
    {
      v35 = (WTF::StringImpl **)(v34 + 32 * v33);
      v36 = *v35;
      if (!*v35)
        break;
      v37 = *((_DWORD *)v36 + 4);
      if ((v37 & 0x20) != 0)
        v37 = *((_DWORD *)v36 + 8);
      ++v24;
      v38 = (v33 + v12 - ((v14 ^ (v37 >> 8)) & v13)) & v13;
      if (v24 > v38)
      {
        v66 = v64;
        v67 = v65;
        *v35 = 0;
        v39 = v34 + 32 * v33;
        LOBYTE(v65) = *(_BYTE *)(v39 + 24);
        v64 = *(_OWORD *)(v39 + 8);
        *v35 = v20;
        *(_BYTE *)(v39 + 24) = v67;
        *(_OWORD *)(v39 + 8) = v66;
        v34 = *(_QWORD *)a2;
        v20 = v36;
        v24 = v38;
      }
      v33 = ((_DWORD)v33 + 1) & v13;
    }
    *v35 = v20;
    v40 = v34 + 32 * v33;
    *(_BYTE *)(v40 + 24) = v65;
    *(_OWORD *)(v40 + 8) = v64;
  }
  else
  {
LABEL_17:
    *(_QWORD *)a3 = 0;
    v26 = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = v15;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v41 = v10;
        v42 = a4;
        WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        a4 = v42;
        v10 = v41;
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    v27 = *(_OWORD *)a4;
    v28 = v18 + 32 * v17;
    *(_BYTE *)(v28 + 24) = *(_BYTE *)(a4 + 16);
    *(_OWORD *)(v28 + 8) = v27;
  }
  v12 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v18 = *(_QWORD *)a2;
  v29 = 1;
LABEL_22:
  *(_QWORD *)v10 = v19;
  *(_QWORD *)(v10 + 8) = v18 + 32 * v12;
  *(_BYTE *)(v10 + 16) = v29;
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<JSC::LinkTimeConstant>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v26;
  uint64_t v27;
  char v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char v66;

  v10 = a1;
  v12 = *(_DWORD *)(a2 + 8);
  v11 = *(unsigned int *)(a2 + 12);
  if (20 * v11 >= 19 * (unint64_t)v12 || *(_BYTE *)(a2 + 20) && v12 <= 2 * (int)v11)
  {
    if (v12)
      v58 = 2 * v12;
    else
      v58 = 8;
    v60 = a4;
    WTF::RobinHoodHashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v58);
    a4 = v60;
    v10 = a1;
    v12 = *(_DWORD *)(a2 + 8);
  }
  v13 = v12 - 1;
  v14 = *(_DWORD *)(a2 + 16);
  v15 = *(WTF::StringImpl **)a3;
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = (v14 ^ (v16 >> 8)) & v13;
  v18 = *(_QWORD *)a2;
  v19 = *(_QWORD *)a2 + 32 * v17;
  v20 = *(WTF::StringImpl **)v19;
  if (*(_QWORD *)v19)
  {
    v21 = 0;
    v22 = v16 >> 8;
    while (1)
    {
      v23 = *((_DWORD *)v20 + 4);
      if ((v23 & 0x20) != 0)
        v23 = *((_DWORD *)v20 + 8);
      v24 = (v17 + v12 - ((v14 ^ (v23 >> 8)) & v13)) & v13;
      if (v21 > v24)
        break;
      if (v23 >> 8 == v22 && v20 == v15)
      {
        v28 = 0;
        v19 = v18 + 32 * v17;
        goto LABEL_22;
      }
      v17 = ((_DWORD)v17 + 1) & v13;
      ++v21;
      v20 = *(WTF::StringImpl **)(v18 + 32 * v17);
      if (!v20)
      {
        v19 = v18 + 32 * v17;
        if (v21 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        goto LABEL_17;
      }
    }
    v19 = v18 + 32 * v17;
    if (v21 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v29 = (_DWORD *)(v19 + 8);
    v63 = *(_OWORD *)(v19 + 8);
    v64 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 24) = 0;
    v30 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v31 = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        v61 = a4;
        v62 = v10;
        WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        v29 = (_DWORD *)(v19 + 8);
        a4 = v61;
        v10 = v62;
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    *v29 = *a4;
    *(_BYTE *)(v18 + 32 * v17 + 24) = 1;
    v32 = ((_DWORD)v17 + 1) & v13;
    v33 = *(_QWORD *)a2;
    while (1)
    {
      v34 = (WTF::StringImpl **)(v33 + 32 * v32);
      v35 = *v34;
      if (!*v34)
        break;
      v36 = *((_DWORD *)v35 + 4);
      if ((v36 & 0x20) != 0)
        v36 = *((_DWORD *)v35 + 8);
      ++v24;
      v37 = (v32 + v12 - ((v14 ^ (v36 >> 8)) & v13)) & v13;
      if (v24 > v37)
      {
        v65 = v63;
        v66 = v64;
        *v34 = 0;
        v38 = v33 + 32 * v32;
        LOBYTE(v64) = *(_BYTE *)(v38 + 24);
        v63 = *(_OWORD *)(v38 + 8);
        *v34 = v20;
        *(_BYTE *)(v38 + 24) = v66;
        *(_OWORD *)(v38 + 8) = v65;
        v33 = *(_QWORD *)a2;
        v20 = v35;
        v24 = v37;
      }
      v32 = ((_DWORD)v32 + 1) & v13;
    }
    *v34 = v20;
    v39 = v33 + 32 * v32;
    *(_BYTE *)(v39 + 24) = v64;
    *(_OWORD *)(v39 + 8) = v63;
  }
  else
  {
LABEL_17:
    *(_QWORD *)a3 = 0;
    v26 = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = v15;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v40 = v10;
        v41 = a4;
        WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        a4 = v41;
        v10 = v40;
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    v27 = v18 + 32 * v17;
    *(_DWORD *)(v27 + 8) = *a4;
    *(_BYTE *)(v27 + 24) = 1;
  }
  v12 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v18 = *(_QWORD *)a2;
  v28 = 1;
LABEL_22:
  *(_QWORD *)v10 = v19;
  *(_QWORD *)(v10 + 8) = v18 + 32 * v12;
  *(_BYTE *)(v10 + 16) = v28;
}

uint64_t JSC::BytecodeIntrinsicRegistry::InfinityValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::iterationKindKeyValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::iterationKindValueValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::iterationKindEntriesValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::MAX_ARRAY_INDEXValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::MAX_SAFE_INTEGERValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::ModuleFetchValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::ModuleInstantiateValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::ModuleSatisfyValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::ModuleLinkValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::ModuleReadyValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 136);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseRejectionHandleValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 152);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseStatePendingValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 160);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseStateFulfilledValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 168);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseStateRejectedValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 176);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseStateMaskValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 184);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseFlagsIsHandledValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 192);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::promiseFlagsIsFirstResolvingFunctionCalledValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 200);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::GeneratorResumeModeNormalValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 280);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::GeneratorResumeModeReturnValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 296);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::GeneratorStateCompletedValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 304);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::GeneratorStateExecutingValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateCompletedValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 448);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateExecutingValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 456);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateAwaitingReturnValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 464);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateSuspendedStartValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 472);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonYieldValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 488);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonAwaitValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 496);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonNoneValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 504);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

unint64_t JSC::BytecodeIntrinsicRegistry::orderedHashTableSentinelValue(JSC::BytecodeIntrinsicRegistry *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 87);
  v9 = *((_QWORD *)v8 + 5231);
  if (!v9)
    return JSC::VM::orderedHashTableSentinelSlow(v8, a2, a3, a4, a5, a6, a7, a8);
  return v9;
}

void JSC::BytecodeLivenessPropagation::runLivenessFixpoint<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v62;
  int8x8_t v63;
  unint64_t v64;
  int v65;
  char v66;
  uint64_t __n;
  int v68;
  uint64_t v69;

  v68 = *(_DWORD *)(a3 + 12);
  if (v68)
  {
    v4 = 0;
    v5 = *(unsigned int *)(a1 + 20);
    v6 = v5 + 31;
    v7 = (unint64_t)(v5 + 31) >> 5;
    do
    {
      v8 = *(_QWORD *)a3;
      v9 = *(_QWORD *)a3 + 80 * v4;
      v10 = v9 + 48;
      v11 = *(_QWORD *)(v9 + 56) + 31;
      if ((v11 ^ v6) >= 0x20)
      {
        if (v7 < v11 >> 5)
          goto LABEL_45;
        v12 = v11 >> 5;
        v13 = (char *)WTF::fastMalloc((WTF *)(4 * v7));
        memcpy(v13, *(const void **)v10, 4 * v12);
        bzero(&v13[4 * v12], 4 * (v7 - v12));
        if (*(_QWORD *)v10)
          WTF::fastFree(*(_QWORD *)v10, v14, v15, v16, v17, v18, v19, v20);
        *(_QWORD *)v10 = v13;
      }
      *(_QWORD *)(v10 + 8) = v5;
      v21 = v8 + 80 * v4;
      v22 = v21 + 64;
      v23 = *(_QWORD *)(v21 + 72) + 31;
      v24 = v5 + 31;
      if ((v23 ^ v6) >= 0x20)
      {
        if (v7 < v23 >> 5)
        {
LABEL_45:
          __break(0xC471u);
          JUMPOUT(0x198132574);
        }
        v25 = v23 >> 5;
        v26 = (char *)WTF::fastMalloc((WTF *)(4 * v7));
        memcpy(v26, *(const void **)v22, 4 * v25);
        bzero(&v26[4 * v25], 4 * (v7 - v25));
        if (*(_QWORD *)v22)
          WTF::fastFree(*(_QWORD *)v22, v27, v28, v29, v30, v31, v32, v33);
        *(_QWORD *)v22 = v26;
        v24 = *(_QWORD *)(v10 + 8) + 31;
      }
      *(_QWORD *)(v22 + 8) = v5;
      bzero(*(void **)v10, (v24 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      bzero(*(void **)v22, ((unint64_t)(*(_QWORD *)(v22 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v34 = v4 + 1;
      v4 = (v4 + 1);
    }
    while (v68 != v34);
    v35 = *(_DWORD *)(a3 + 12) - 1;
  }
  else
  {
    v35 = -1;
  }
  v36 = *(_QWORD *)a3 + 80 * v35;
  bzero(*(void **)(v36 + 48), ((unint64_t)(*(_QWORD *)(v36 + 56) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  bzero(*(void **)(v36 + 64), ((unint64_t)(*(_QWORD *)(v36 + 72) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v44 = *(_QWORD *)(v36 + 72);
  v45 = v44 + 31;
  if ((unint64_t)(v44 + 31) < 0x20)
  {
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v46 = (WTF *)((v45 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v47 = (void *)WTF::fastMalloc(v46);
    bzero(v47, (size_t)v46);
  }
  v48 = v45 >> 5;
  __n = 4 * (v45 >> 5);
  v69 = v45 & 0x1FFFFFFFE0;
  v49 = (v45 >> 5) - 1;
  do
  {
    v50 = *(_DWORD *)(a3 + 12);
    if (!v50)
      break;
    v51 = 0;
    v52 = *(_QWORD *)a3;
    v53 = *(_QWORD *)a3 + 80 * v50;
    do
    {
      v54 = v53;
      bzero(v47, (size_t)v46);
      v55 = *(unsigned int *)(v53 - 36);
      if ((_DWORD)v55 && v69)
      {
        v56 = *(unsigned int **)(v53 - 48);
        v57 = &v56[v55];
        v58 = *(_QWORD *)a3;
        do
        {
          v59 = *(_QWORD *)(v58 + 80 * *v56 + 48);
          v60 = v49;
          do
            *((_DWORD *)v47 + v60) |= *(_DWORD *)(v59 + 4 * v60);
          while ((unint64_t)v60--);
          ++v56;
        }
        while (v56 != v57);
      }
      if (v48 == (unint64_t)(*(_QWORD *)(v53 - 8) + 31) >> 5)
      {
        memcpy(*(void **)(v53 - 16), v47, __n);
      }
      else
      {
        v62 = (void *)WTF::fastMalloc(v46);
        memcpy(v62, v47, (size_t)v46);
        v64 = *(_QWORD *)(v54 - 16);
        if (v64)
          WTF::fastFree(v64, v37, v38, v39, v40, v41, v42, v43);
        *(_QWORD *)(v54 - 16) = v62;
      }
      v53 = v54 - 80;
      *(_QWORD *)(v54 - 8) = v44;
      v65 = *(_DWORD *)(v54 - 80);
      if (v65)
      {
        if (v65 != -1 || *(_DWORD *)(v54 - 76) != -1)
        {
LABEL_32:
          v66 = JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>(a1, a2, a3, v54 - 80, (4 * v65), v54 - 32, v42, v43, v63);
          goto LABEL_33;
        }
      }
      else if (*(_DWORD *)(v54 - 76))
      {
        goto LABEL_32;
      }
      v66 = 0;
LABEL_33:
      v51 |= v66;
    }
    while (v53 != v52);
  }
  while ((v51 & 1) != 0);
  if (v47)
    WTF::fastFree((unint64_t)v47, v37, v38, v39, v40, v41, v42, v43);
}

void JSC::BytecodeLivenessAnalysis::dumpResults(JSC::BytecodeLivenessAnalysis *this, JSC::CodeBlock *a2)
{
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  std::once_flag::_State_type *v36;
  unsigned int *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  BOOL v45;
  const char *v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned int v57;
  int v58;
  unsigned int i;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *casual;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  WTF::PrintStream *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  char v107;
  _BOOL4 v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  const char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  const char *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  WTF *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t StatusReg;
  _QWORD *v149;
  int *v150;
  unsigned int *v151;
  JSC::BytecodeLivenessAnalysis *v152;
  WTF *v154;
  unint64_t v155;
  char v156;
  uint64_t (***v157)();
  uint64_t (**v158)();
  uint64_t v159;
  int v160;
  JSC::CodeBlock *v161;

  WTF::dataLog<char [32],JSC::CodeBlock,char [3]>((uint64_t)a2);
  v152 = this;
  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
    return;
  if (v3 >> 28)
  {
LABEL_125:
    __break(0xC471u);
    JUMPOUT(0x198132E54);
  }
  v149 = *(_QWORD **)(*((_QWORD *)a2 + 7) + 80);
  v4 = (char *)WTF::fastMalloc((WTF *)(16 * v3));
  bzero(v4, 16 * v3);
  v12 = *((_DWORD *)this + 3);
  if (!v12)
    goto LABEL_115;
  v13 = 0;
  v14 = v3 + 31;
  v15 = (unint64_t)(v3 + 31) >> 5;
  v146 = v4;
  do
  {
    v16 = *(unsigned int *)(*(_QWORD *)v152 + 80 * v13 + 8);
    if (v3 <= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198132E64);
    }
    v17 = &v4[16 * v16];
    v18 = *((_QWORD *)v17 + 1) + 31;
    if ((v18 ^ v14) >= 0x20)
    {
      if (v15 < v18 >> 5)
        goto LABEL_125;
      v19 = v18 >> 5;
      v20 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
      memcpy(v20, *(const void **)v17, 4 * v19);
      bzero(&v20[4 * v19], 4 * (v15 - v19));
      if (*(_QWORD *)v17)
        WTF::fastFree(*(_QWORD *)v17, v5, v6, v7, v8, v9, v10, v11);
      *(_QWORD *)v17 = v20;
      v4 = v146;
    }
    *((_QWORD *)v17 + 1) = v3;
    v21 = v13 + 1;
    v13 = (v13 + 1);
  }
  while (v12 != v21);
  v22 = *((_DWORD *)v152 + 3);
  if (!v22)
    goto LABEL_115;
  v23 = 0;
  v24 = *(_QWORD *)v152;
  do
  {
    v25 = v24 + 80 * v23;
    v26 = *(unsigned int *)(v25 + 44);
    if ((_DWORD)v26)
    {
      v27 = *(unsigned int **)(v25 + 32);
      v28 = 4 * v26;
      do
      {
        v29 = *v27;
        if (v3 <= v29)
        {
          __break(0xC471u);
          JUMPOUT(0x198132E5CLL);
        }
        v30 = *(unsigned int *)(v24 + 80 * v23 + 8);
        v31 = *(_QWORD *)&v4[16 * v29];
        v32 = (v30 >> 3) & 0x1FFFFFFC;
        v5 = (void *)*(unsigned int *)(v31 + v32);
        *(_DWORD *)(v31 + v32) = v5 | (1 << v30);
        ++v27;
        v28 -= 4;
      }
      while (v28);
    }
    v33 = v23 + 1;
    v23 = (v23 + 1);
  }
  while (v22 != v33);
  v143 = *((_DWORD *)v152 + 3);
  if (!v143)
    goto LABEL_115;
  v34 = 0;
  v35 = 0;
  v142 = (WTF *)((v14 >> 3) & 0x3FFFFFFC);
  v36 = &WTF::initializeLogFile(void)::once;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v145 = *(_QWORD *)v152;
    v37 = (unsigned int *)(*(_QWORD *)v152 + 80 * v35);
    v150 = (int *)(v37 + 1);
    WTF::dataLogF((WTF *)"\nBytecode basic block %u: %p (offset: %u, length: %u)\n", (const char *)v5, v34, v37, *v37, v37[1]);
    WTF::dataLogF((WTF *)"Predecessors:", v38);
    v151 = v37;
    v40 = v37[2];
    if (v3 <= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198132E6CLL);
    }
    v147 = v35;
    v41 = &v4[16 * v40];
    v42 = *((_QWORD *)v41 + 1);
    if (v42)
    {
      v43 = 0;
      v44 = 1;
      do
      {
        if (((*(_DWORD *)(*(_QWORD *)v41 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> (v44 - 1)) & 1) != 0)
        {
          WTF::dataLogF((WTF *)" %u", v39, v44 - 1);
          v42 = *((_QWORD *)v41 + 1);
        }
        v43 = v44;
        v45 = v42 > v44++;
      }
      while (v45);
    }
    WTF::dataLogF((WTF *)"\n", v39);
    WTF::dataLogF((WTF *)"Successors:", v46);
    v47 = (char *)WTF::fastMalloc(v142);
    bzero(v47, (size_t)v142);
    v49 = v145 + 80 * v147;
    v50 = *(unsigned int *)(v49 + 44);
    if ((_DWORD)v50)
    {
      v51 = *(unsigned int **)(v49 + 32);
      v52 = 4 * v50;
      do
      {
        v53 = *v51++;
        *(_DWORD *)&v47[((unint64_t)v53 >> 3) & 0x1FFFFFFC] |= 1 << v53;
        v52 -= 4;
      }
      while (v52);
    }
    v54 = 0;
    v55 = (v34 + 1);
    do
    {
      if (((*(_DWORD *)&v47[(v54 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v54) & 1) != 0)
        WTF::dataLogF((WTF *)" %u", v48, v54);
      ++v54;
    }
    while (v3 != v54);
    v144 = v55;
    WTF::dataLogF((WTF *)"\n", v48);
    v57 = *v151;
    if (!*v151)
    {
      v58 = *v150;
      if (*v150)
        goto LABEL_37;
      WTF::dataLogF((WTF *)"Entry block %p\n", v56, v151);
LABEL_114:
      v34 = v144;
      goto LABEL_107;
    }
    if (v57 == -1)
    {
      v58 = *v150;
      if (*v150 != -1)
        goto LABEL_37;
      WTF::dataLogF((WTF *)"Exit block: %p\n", v56, v151);
      goto LABEL_114;
    }
    v58 = *v150;
LABEL_37:
    for (i = v58 + v57; v57 < i; i = *v150 + *v151)
    {
      v60 = v36;
      WTF::dataLogF((WTF *)"Live variables:", v56);
      v64 = v57 & 0x3FFFFFFF;
      v65 = *((unsigned int *)v152 + 3);
      v66 = *(_QWORD *)v152;
      if (v65 < 2)
      {
        v67 = 0;
LABEL_90:
        v68 = v66 + 80 * v67;
        v71 = *(_DWORD *)v68;
      }
      else
      {
        v67 = 0;
        while (1)
        {
          v68 = v66 + 80 * (v67 + ((v65 - 1) >> 1));
          if (*(_DWORD *)v68 == v64)
            break;
          v69 = (v65 - 1) >> 1;
          v65 -= v69 + 1;
          if (*(_DWORD *)v68 <= v64)
          {
            v70 = v69 + 1;
          }
          else
          {
            v65 = v69;
            v70 = 0;
          }
          v67 += v70;
          if (v65 <= 1)
            goto LABEL_90;
        }
        v71 = v57 & 0x3FFFFFFF;
      }
      v72 = *(_QWORD **)(*((_QWORD *)a2 + 7) + 80);
      if (v71 > v64 || *(_DWORD *)(v68 + 4) + v71 <= v64)
      {
        if (v71 > v64)
          v68 -= 80;
        else
          v68 += 80;
      }
      v154 = 0;
      v155 = 0;
      v73 = *(_QWORD *)(v68 + 72);
      v74 = v73 + 31;
      if (v73 + 31 >= 0x20)
      {
        v75 = (v74 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        v76 = *(_QWORD *)(StatusReg + 752);
        if (!v76)
          goto LABEL_99;
        v77 = (v75 + 15) >> 4;
        if (v74 <= 0xD1F)
        {
          v78 = 23 * v77 + 7;
        }
        else
        {
          if (v74 >> 5 > 0x9C4)
            goto LABEL_99;
          v78 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v77 + 626);
          if (*(_DWORD *)(v76 + 8052) <= v78)
            goto LABEL_99;
        }
        v79 = v76 + 8 * v78;
        v80 = v79 + 8064;
        *(_BYTE *)(v79 + 8064) = 1;
        v81 = *(unsigned int *)(v79 + 8080);
        if ((_DWORD)v81)
        {
          *(_DWORD *)(v80 + 16) = v81 - *(_DWORD *)(v80 + 20);
          casual = (void *)(*(_QWORD *)(v80 + 8) - v81);
          goto LABEL_64;
        }
        v83 = *(_QWORD *)(v80 + 40);
        v84 = *(_QWORD *)(v80 + 24);
        if (v83)
        {
LABEL_63:
          v85 = __clz(v83);
          *(_QWORD *)(v80 + 40) = v83 & ~(0x8000000000000000 >> v85);
          casual = (void *)(v84 + 16 * v85);
LABEL_64:
          *(_BYTE *)v80 = 0;
        }
        else
        {
          if (*(_BYTE *)(v80 + 5) == 6)
          {
            v111 = *(unsigned int *)(v80 + 32);
            v112 = *(_DWORD *)(v80 + 36);
            if (v111 < v112)
            {
              *(_QWORD *)(v80 + 8 * v111 + 56) = 0;
              v113 = (unint64_t *)(v76 + 8128 + 8 * v78 + 8 * v111);
              v114 = v112 - 1 - v111;
              while (v114)
              {
                v84 += 1024;
                v116 = *v113++;
                v115 = v116;
                LODWORD(v111) = v111 + 1;
                --v114;
                if (v116)
                {
                  v83 = __rbit64(v115);
                  *(_DWORD *)(v80 + 32) = v111;
                  *(_QWORD *)(v80 + 24) = v84;
                  goto LABEL_63;
                }
              }
              *(_DWORD *)(v80 + 32) = v112;
            }
          }
          *(_BYTE *)v80 = 0;
LABEL_99:
          casual = (void *)bmalloc_allocate_casual(v75, 1);
        }
        bzero(casual, v75);
        if (v154)
          WTF::fastFree((unint64_t)v154, v86, v87, v88, v89, v90, v61, v62);
        v154 = (WTF *)casual;
      }
      v155 = v73;
      JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>((uint64_t)a2, v72, (uint64_t)v152, v68, 4 * v57, (uint64_t)&v154, v61, v62, v63);
      v92 = v155;
      v36 = v60;
      if (v155)
      {
        v93 = 0;
        v94 = 1;
        do
        {
          if (((*(_DWORD *)((char *)v154 + ((v93 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> (v94 - 1)) & 1) != 0)
          {
            WTF::dataLogF((WTF *)" %u", v91, v94 - 1);
            v92 = v155;
          }
          v93 = v94;
          v45 = v92 > v94++;
        }
        while (v45);
      }
      WTF::dataLogF((WTF *)"\n", v91);
      v95 = atomic_load(v60);
      if (v95 != -1)
      {
        v158 = (uint64_t (**)())&v156;
        v157 = &v158;
        std::__call_once(v60, &v157, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      v160 = 0;
      v158 = &off_1E3580A38;
      v159 = WTF::s_file;
      v161 = a2;
      JSC::dumpBytecode((int)&v158, v57, (JSC::OpEnumeratorHasOwnProperty *)(*v149 + v57));
      v96 = v159;
      v97 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 32))(v159);
      WTF::PrintStream::printf(v97, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
      v104 = (unsigned __int8 *)(*v149 + v57);
      v105 = *v104;
      v106 = v105;
      if ((v105 | 2) == 0x82)
        v106 = v104[1];
      if (v105 == 130)
        v107 = 2;
      else
        v107 = v105 == 128;
      v108 = v105 == 128 || v105 == 130;
      v109 = JSC::opcodeLengths[v106];
      if (v108)
        v110 = 2;
      else
        v110 = 1;
      if (v154)
        WTF::fastFree((unint64_t)v154, v56, v98, v99, v100, v101, v102, v103);
      v57 += v110 + (v109 << v107);
    }
    WTF::dataLogF((WTF *)"Live variables:", v56);
    v34 = v144;
    v118 = v145 + 80 * v147;
    v119 = *(_QWORD *)(v118 + 72) + 31;
    if (v119 < 0x20)
    {
      WTF::dataLogF((WTF *)"\n", v117);
    }
    else
    {
      v120 = v118 + 64;
      v121 = (char *)WTF::fastMalloc((WTF *)((v119 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
      memcpy(v121, *(const void **)v120, ((unint64_t)(*(_QWORD *)(v120 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v123 = *(_QWORD *)(v120 + 8);
      if (v123)
      {
        v124 = 0;
        v125 = 1;
        do
        {
          if (((*(_DWORD *)&v121[(v124 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> (v125 - 1)) & 1) != 0)
            WTF::dataLogF((WTF *)" %u", v122, v125 - 1);
          v124 = v125;
          v45 = v123 > v125++;
        }
        while (v45);
      }
      WTF::dataLogF((WTF *)"\n", v122);
      WTF::fastFree((unint64_t)v121, v126, v127, v128, v129, v130, v131, v132);
    }
LABEL_107:
    WTF::fastFree((unint64_t)v47, v133, v134, v135, v136, v137, v138, v139);
    v4 = v146;
    v35 = (v147 + 1);
  }
  while (v143 != (_DWORD)v147 + 1);
LABEL_115:
  v140 = 0;
  do
  {
    v141 = *(_QWORD *)&v4[v140];
    if (v141)
      WTF::fastFree(v141, v5, v6, v7, v8, v9, v10, v11);
    v140 += 16;
  }
  while (16 * v3 != v140);
  WTF::fastFree((unint64_t)v4, v5, v6, v7, v8, v9, v10, v11);
}

void JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::BytecodeLivenessAnalysis *this@<X0>, JSC::CodeBlock *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *casual;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  JSC::OpEnumeratorHasOwnProperty *v47;
  unsigned int *v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  void **v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _DWORD *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  int v136;
  _QWORD *v137;
  unint64_t StatusReg;
  void **p_dst;
  void **v140;
  void *__dst;
  unint64_t v142;
  uint64_t (*v143)(uint64_t, int);
  uint64_t (**v144)(uint64_t, int);
  void ***p_p_dst;

  __dst = 0;
  v142 = 0;
  v5 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v135 = v6;
  if ((_DWORD)v5)
  {
    v130 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v5) | 8));
    *v130 = v5;
    bzero(v130 + 2, 16 * v5);
    *v135 = v130;
    v15 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v5) | 8));
    *v15 = v5;
    v14 = v135;
    bzero(v15 + 2, 16 * v5);
  }
  else
  {
    v14 = v6;
    v15 = 0;
    *v6 = 0;
  }
  v14[1] = v15;
  *a3 = v14;
  v16 = *((_DWORD *)this + 3);
  if (v16)
  {
    v132 = *(_QWORD *)this;
    v17 = *(_QWORD *)this + 80 * v16;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v18 = v17;
    while (1)
    {
      v20 = *(_DWORD *)(v18 - 80);
      v18 -= 80;
      v19 = v20;
      if (v20)
      {
        if (v19 == -1 && *(_DWORD *)(v17 - 76) == -1)
          goto LABEL_117;
      }
      else if (!*(_DWORD *)(v17 - 76))
      {
        goto LABEL_117;
      }
      v133 = v18;
      v21 = (v142 + 31) >> 5;
      v22 = *(_QWORD *)(v17 - 8) + 31;
      if (v21 == v22 >> 5)
      {
        memcpy(__dst, *(const void **)(v17 - 16), 4 * v21);
        goto LABEL_24;
      }
      v23 = (v22 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      v24 = *(_QWORD *)(StatusReg + 752);
      if (!v24)
        goto LABEL_177;
      v25 = (v23 + 15) >> 4;
      if (v23 <= 0x1A0)
      {
        v26 = 23 * v25 + 7;
      }
      else
      {
        if (v23 > 0x2710)
          goto LABEL_177;
        v26 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v25 + 626);
        if (*(_DWORD *)(v24 + 8052) <= v26)
          goto LABEL_177;
      }
      v27 = v24 + 8 * v26;
      v28 = v27 + 8064;
      *(_BYTE *)(v27 + 8064) = 1;
      v29 = *(unsigned int *)(v27 + 8080);
      if ((_DWORD)v29)
      {
        *(_DWORD *)(v28 + 16) = v29 - *(_DWORD *)(v28 + 20);
        casual = (void *)(*(_QWORD *)(v28 + 8) - v29);
LABEL_16:
        *(_BYTE *)v28 = 0;
        goto LABEL_17;
      }
      v36 = *(_QWORD *)(v28 + 40);
      v37 = *(_QWORD *)(v28 + 24);
      if (v36)
      {
LABEL_27:
        v38 = __clz(v36);
        *(_QWORD *)(v28 + 40) = v36 & ~(0x8000000000000000 >> v38);
        casual = (void *)(v37 + 16 * v38);
        goto LABEL_16;
      }
      if (*(_BYTE *)(v28 + 5) == 6)
      {
        v124 = *(unsigned int *)(v28 + 32);
        v125 = *(_DWORD *)(v28 + 36);
        if (v124 < v125)
        {
          *(_QWORD *)(v28 + 8 * v124 + 56) = 0;
          v126 = (unint64_t *)(v24 + 8128 + 8 * v26 + 8 * v124);
          v127 = v125 - 1 - v124;
          while (v127)
          {
            v37 += 1024;
            v129 = *v126++;
            v128 = v129;
            LODWORD(v124) = v124 + 1;
            --v127;
            if (v129)
            {
              v36 = __rbit64(v128);
              *(_DWORD *)(v28 + 32) = v124;
              *(_QWORD *)(v28 + 24) = v37;
              goto LABEL_27;
            }
          }
          *(_DWORD *)(v28 + 32) = v125;
        }
      }
      *(_BYTE *)v28 = 0;
LABEL_177:
      casual = (void *)bmalloc_allocate_casual(v23, 1);
LABEL_17:
      memcpy(casual, *(const void **)(v17 - 16), ((unint64_t)(*(_QWORD *)(v17 - 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v7 = (unint64_t)__dst;
      if (__dst)
      {
        v32 = *(_QWORD *)(StatusReg + 752);
        if (v32)
        {
          if (!((unint64_t)__dst >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)__dst >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(__dst)) & 1) != 0)
          {
LABEL_21:
            v33 = *(unsigned int *)(v32 + 8000);
            if (v33 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v32, (uint64_t)__dst, (os_unfair_lock_s *)5, v9, v10, v11, v12, v13);
            }
            else
            {
              *(_QWORD *)(v32 + 8 * v33) = (unint64_t)__dst | 0x5000000000000;
              *(_DWORD *)(v32 + 8000) = v33 + 1;
            }
            goto LABEL_23;
          }
          if ((unint64_t)__dst >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)__dst >> 24)
          {
            v9 = 0;
          }
          else
          {
            v9 = (*(_DWORD *)((char *)off_1ECF425F8
                            + (((((unint64_t)__dst >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(__dst) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v9 == 1)
              goto LABEL_21;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v32, (unint64_t)__dst, 1, v9, v10, v11, v12, v13);
        }
        else
        {
          pas_try_deallocate_slow_no_cache((unint64_t)__dst, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_23:
      __dst = casual;
LABEL_24:
      v142 = *(_QWORD *)(v17 - 8);
      p_dst = &__dst;
      v140 = &__dst;
      v34 = *(_DWORD *)(v17 - 52);
      if (v34)
      {
        v137 = *(_QWORD **)(*((_QWORD *)a2 + 7) + 80);
        v35 = *(_DWORD *)(v17 - 76);
        v134 = v17;
        while (1)
        {
          if (*(_DWORD *)(v17 - 52) <= --v34)
          {
LABEL_182:
            __break(0xC471u);
            JUMPOUT(0x1981337B4);
          }
          v136 = v35 - *(unsigned __int8 *)(*(_QWORD *)(v17 - 64) + v34);
          v39 = v136 + *(_DWORD *)(v17 - 80);
          v40 = (unsigned __int8 *)(*v137 + (v39 & 0x3FFFFFFF));
          v41 = *v40;
          v42 = v41;
          if ((v41 | 2) == 0x82)
            v42 = v40[1];
          if (v42 > 4)
            break;
          if ((v41 | 2) == 0x82)
            v41 = v40[1];
          v43 = bytecodeCheckpointCountTable[v41];
          if (v43)
            goto LABEL_39;
LABEL_33:
          v17 = v134;
          v35 = v136;
          if (!v34)
            goto LABEL_116;
        }
        v43 = 1;
LABEL_39:
        LODWORD(v44) = 4 * v39;
        while (1)
        {
          v44 = v44 & 0xFFFFFFFC | --v43;
          v45 = *((_DWORD *)a2 + 6);
          v46 = v44 >> 2;
          v47 = (JSC::OpEnumeratorHasOwnProperty *)(*v137 + (v44 >> 2));
          v143 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::CodeBlock,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_1>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_1 const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
          v144 = &v143;
          p_p_dst = &p_dst;
          JSC::computeDefsForBytecodeIndexImpl(v45, v47, v43 & 3, (uint64_t)&v143, v31);
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12) <= (v44 >> 2))
            goto LABEL_182;
          v48 = (unsigned int *)*((_QWORD *)a2 + 28);
          if (v48)
          {
            v103 = v48[3];
            if ((_DWORD)v103)
            {
              v104 = (unsigned int *)(*(_QWORD *)v48 + 8);
              v105 = 24 * v103;
              while (*(v104 - 2) > v46 || *(v104 - 1) <= v46)
              {
                v104 += 6;
                v105 -= 24;
                if (!v105)
                  goto LABEL_42;
              }
              v109 = *v104;
              v100 = *((unsigned int *)this + 3);
              v110 = *(_QWORD *)this;
              if (v100 < 2)
              {
                v102 = 0;
LABEL_120:
                v111 = (unsigned int *)(v110 + 80 * v102);
                if (*v111 == v109)
                  v99 = v111;
                else
                  v99 = 0;
              }
              else
              {
                v102 = 0;
                while (1)
                {
                  v98 = v100 - 1;
                  v99 = (unsigned int *)(v110 + 80 * (v102 + ((v100 - 1) >> 1)));
                  if (*v99 == v109)
                    break;
                  v100 -= (v98 >> 1) + 1;
                  if (*v99 <= v109)
                  {
                    v101 = (v98 >> 1) + 1;
                  }
                  else
                  {
                    v100 = v98 >> 1;
                    v101 = 0;
                  }
                  v102 += v101;
                  if (v100 <= 1)
                    goto LABEL_120;
                }
              }
              v106 = *((_QWORD *)v99 + 7) + 31;
              if (v106 >= 0x20)
              {
                v58 = 0;
                v107 = v106 >> 5;
                v108 = *((_QWORD *)v99 + 6);
                do
                {
                  v59 = *(_DWORD *)(v108 + 4 * v58);
                  if (v59)
                  {
                    v60 = 32 * v58;
                    v61 = v140;
                    do
                    {
                      if ((v59 & 1) != 0)
                        *((_DWORD *)*v61 + (v60 >> 5)) |= 1 << v60;
                      ++v60;
                      v62 = v59 > 1;
                      v59 >>= 1;
                    }
                    while (v62);
                  }
                  ++v58;
                }
                while (v58 != v107);
              }
            }
          }
LABEL_42:
          v49 = v46 + (v43 & 3);
          v50 = (_DWORD *)v14[1];
          if (*v50 <= v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1981337D4);
          }
          v51 = &v50[4 * v49];
          v52 = v51 + 2;
          v53 = (unint64_t)(*((_QWORD *)v51 + 2) + 31) >> 5;
          if (v53 != (v142 + 31) >> 5)
            break;
          memcpy(*(void **)v52, __dst, 4 * v53);
LABEL_67:
          *((_QWORD *)v52 + 1) = v142;
          v76 = (unsigned __int8 *)(*v137 + v46);
          v77 = *v76;
          if ((v77 | 2) == 0x82)
          {
            if (v76[1] == 131)
              goto LABEL_72;
          }
          else if (v77 == 131)
          {
            goto LABEL_72;
          }
          if ((*(_BYTE *)(*((_QWORD *)a2 + 7) + 43) & 1) != 0)
          {
            v78 = *((_DWORD *)a2 + 12);
            if (v78 < 0)
              *((_DWORD *)*v140 + (~v78 >> 5)) |= 1 << ~(_BYTE)v78;
          }
LABEL_72:
          v143 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::CodeBlock,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_0>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_0 const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
          v144 = &v143;
          p_p_dst = &v140;
          JSC::computeUsesForBytecodeIndexImpl(v76, (const unsigned __int8 *)(v43 & 3), (uint64_t)&v143, v72);
          if (*(_DWORD *)*v14 <= v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1981337F4);
          }
          v79 = *v14 + 16 * v49;
          v80 = (unint64_t *)(v79 + 8);
          v81 = (unint64_t)(*(_QWORD *)(v79 + 16) + 31) >> 5;
          if (v81 != (v142 + 31) >> 5)
          {
            v82 = ((v142 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL;
            v83 = *(_QWORD *)(StatusReg + 752);
            if (!v83)
              goto LABEL_168;
            v84 = (v82 + 15) >> 4;
            if (v82 <= 0x1A0)
            {
              v85 = 23 * v84 + 7;
            }
            else
            {
              if (v82 > 0x2710)
                goto LABEL_168;
              v85 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v84 + 626);
              if (*(_DWORD *)(v83 + 8052) <= v85)
                goto LABEL_168;
            }
            v86 = v83 + 8 * v85;
            v87 = v86 + 8064;
            *(_BYTE *)(v86 + 8064) = 1;
            v88 = *(unsigned int *)(v86 + 8080);
            if ((_DWORD)v88)
            {
              *(_DWORD *)(v87 + 16) = v88 - *(_DWORD *)(v87 + 20);
              v89 = (void *)(*(_QWORD *)(v87 + 8) - v88);
              goto LABEL_82;
            }
            v95 = *(_QWORD *)(v87 + 40);
            v96 = *(_QWORD *)(v87 + 24);
            if (v95)
            {
LABEL_94:
              v97 = __clz(v95);
              *(_QWORD *)(v87 + 40) = v95 & ~(0x8000000000000000 >> v97);
              v89 = (void *)(v96 + 16 * v97);
LABEL_82:
              *(_BYTE *)v87 = 0;
            }
            else
            {
              if (*(_BYTE *)(v87 + 5) == 6)
              {
                v118 = *(unsigned int *)(v87 + 32);
                v119 = *(_DWORD *)(v87 + 36);
                if (v118 < v119)
                {
                  *(_QWORD *)(v87 + 8 * v118 + 56) = 0;
                  v120 = (unint64_t *)(v83 + 8128 + 8 * v85 + 8 * v118);
                  v121 = v119 - 1 - v118;
                  while (v121)
                  {
                    v96 += 1024;
                    v123 = *v120++;
                    v122 = v123;
                    LODWORD(v118) = v118 + 1;
                    --v121;
                    if (v123)
                    {
                      v95 = __rbit64(v122);
                      *(_DWORD *)(v87 + 32) = v118;
                      *(_QWORD *)(v87 + 24) = v96;
                      goto LABEL_94;
                    }
                  }
                  *(_DWORD *)(v87 + 32) = v119;
                }
              }
              *(_BYTE *)v87 = 0;
LABEL_168:
              v89 = (void *)bmalloc_allocate_casual(v82, 1);
            }
            memcpy(v89, __dst, ((v142 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
            v7 = *v80;
            if (*v80)
            {
              v90 = *(_QWORD *)(StatusReg + 752);
              if (v90)
              {
                if (v7 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v7 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v7)) & 1) == 0)
                {
                  if (v7 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v7 >> 24)
                  {
                    v9 = 0;
                  }
                  else
                  {
                    v9 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v7 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v7) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v9 == 1)
                      goto LABEL_87;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v90, v7, 1, v9, v10, v11, v12, v13);
                }
                else
                {
LABEL_87:
                  v91 = *(unsigned int *)(v90 + 8000);
                  if (v91 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v90, v7, (os_unfair_lock_s *)5, v9, v10, v11, v12, v13);
                  }
                  else
                  {
                    *(_QWORD *)(v90 + 8 * v91) = v7 | 0x5000000000000;
                    *(_DWORD *)(v90 + 8000) = v91 + 1;
                  }
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(*v80, (uint64_t)&bmalloc_heap_config, 1);
              }
            }
            *v80 = (unint64_t)v89;
            v80[1] = v142;
            if (!v43)
              goto LABEL_33;
            continue;
          }
          memcpy((void *)*v80, __dst, 4 * v81);
          v80[1] = v142;
          if (!v43)
            goto LABEL_33;
        }
        v54 = ((v142 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        v55 = *(_QWORD *)(StatusReg + 752);
        if (v55)
        {
          v56 = (v54 + 15) >> 4;
          if (v54 <= 0x1A0)
          {
            v57 = 23 * v56 + 7;
          }
          else
          {
            if (v54 > 0x2710)
              goto LABEL_165;
            v57 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v56 + 626);
            if (*(_DWORD *)(v55 + 8052) <= v57)
              goto LABEL_165;
          }
          v63 = v55 + 8 * v57;
          v64 = v63 + 8064;
          *(_BYTE *)(v63 + 8064) = 1;
          v65 = *(unsigned int *)(v63 + 8080);
          if ((_DWORD)v65)
          {
            *(_DWORD *)(v64 + 16) = v65 - *(_DWORD *)(v64 + 20);
            v66 = (void *)(*(_QWORD *)(v64 + 8) - v65);
            goto LABEL_59;
          }
          v92 = *(_QWORD *)(v64 + 40);
          v93 = *(_QWORD *)(v64 + 24);
          if (v92)
          {
LABEL_92:
            v94 = __clz(v92);
            *(_QWORD *)(v64 + 40) = v92 & ~(0x8000000000000000 >> v94);
            v66 = (void *)(v93 + 16 * v94);
LABEL_59:
            *(_BYTE *)v64 = 0;
LABEL_60:
            memcpy(v66, __dst, ((v142 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
            v73 = *(_QWORD *)v52;
            if (*(_QWORD *)v52)
            {
              v74 = *(_QWORD *)(StatusReg + 752);
              if (v74)
              {
                if (v73 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v73 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v73)) & 1) == 0)
                {
                  if (v73 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v73 >> 24)
                  {
                    v67 = 0;
                  }
                  else
                  {
                    v67 = (*(_DWORD *)((char *)off_1ECF425F8
                                     + ((((v73 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                     + 24) >> (2 * ((BYTE3(v73) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v67 == 1)
                      goto LABEL_64;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v74, v73, 1, v67, v68, v69, v70, v71);
                }
                else
                {
LABEL_64:
                  v75 = *(unsigned int *)(v74 + 8000);
                  if (v75 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v74, v73, (os_unfair_lock_s *)5, v67, v68, v69, v70, v71);
                  }
                  else
                  {
                    *(_QWORD *)(v74 + 8 * v75) = v73 | 0x5000000000000;
                    *(_DWORD *)(v74 + 8000) = v75 + 1;
                  }
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(*(_QWORD *)v52, (uint64_t)&bmalloc_heap_config, 1);
              }
            }
            *(_QWORD *)v52 = v66;
            v14 = v135;
            goto LABEL_67;
          }
          if (*(_BYTE *)(v64 + 5) == 6)
          {
            v112 = *(unsigned int *)(v64 + 32);
            v113 = *(_DWORD *)(v64 + 36);
            if (v112 < v113)
            {
              *(_QWORD *)(v64 + 8 * v112 + 56) = 0;
              v114 = (unint64_t *)(v55 + 8128 + 8 * v57 + 8 * v112);
              v115 = v113 - 1 - v112;
              while (v115)
              {
                v93 += 1024;
                v117 = *v114++;
                v116 = v117;
                LODWORD(v112) = v112 + 1;
                --v115;
                if (v117)
                {
                  v92 = __rbit64(v116);
                  *(_DWORD *)(v64 + 32) = v112;
                  *(_QWORD *)(v64 + 24) = v93;
                  goto LABEL_92;
                }
              }
              *(_DWORD *)(v64 + 32) = v113;
            }
          }
          *(_BYTE *)v64 = 0;
        }
LABEL_165:
        v66 = (void *)bmalloc_allocate_casual(v54, 1);
        goto LABEL_60;
      }
LABEL_116:
      v18 = v133;
LABEL_117:
      v17 = v18;
      if (v18 == v132)
      {
        if (__dst)
          WTF::fastFree((unint64_t)__dst, (void *)v7, v8, v9, v10, v11, v12, v13);
        return;
      }
    }
  }
}

uint64_t WTF::dataLog<char [32],JSC::CodeBlock,char [3]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\nDumping bytecode liveness for ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", ":\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

BOOL JSC::tmpLivenessForCheckpoint(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v2;
  int v3;
  _BOOL8 result;

  if ((a2 & 3) == 0)
    return 0;
  v2 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a2 >> 2));
  v3 = *v2;
  if ((v3 | 2) == 0x82)
    v3 = v2[1];
  result = 0;
  switch(v3)
  {
    case 0:
    case 1:
    case 3:
      result = (a2 & 3) == 1;
      break;
    case 2:
      result = 1;
      break;
    case 4:
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x198133C1CLL);
  }
  return result;
}

unsigned int *JSC::BytecodeRewriter::applyModification(unsigned int *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  JSC::UnlinkedCodeBlockGenerator *v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned __int8 *v89;
  JSC::UnlinkedCodeBlockGenerator *v90;
  JSC::UnlinkedCodeBlockGenerator *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  _DWORD *v105;
  _DWORD *v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  JSC::UnlinkedCodeBlockGenerator *v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  _DWORD *v127;
  _DWORD *v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  JSC::UnlinkedCodeBlockGenerator *v145;
  JSC::UnlinkedCodeBlockGenerator *v146;
  JSC::UnlinkedCodeBlockGenerator *v147;
  JSC::UnlinkedCodeBlockGenerator *v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  void *__src;
  void *__srca;
  _QWORD *v154;
  unsigned int v155;
  JSC::UnlinkedCodeBlockGenerator *v156;
  _QWORD *v157;
  unsigned int v158;

  v8 = this;
  v9 = this[11];
  if ((_DWORD)v9)
  {
    v10 = 48 * v9 - 48;
    do
    {
      if (--v9 >= *((unsigned int *)v8 + 11))
      {
        __break(0xC471u);
        JUMPOUT(0x1981346ECLL);
      }
      v11 = v8[4];
      v12 = (int *)(v11 + 48 * v9);
      if (*((_BYTE *)v12 + 8) == 1)
      {
        v26 = v8[3];
        v27 = *(_QWORD *)(v11 + 48 * v9 + 16);
        this = (unsigned int *)memmove((void *)(*(_QWORD *)v26 + *v12), (const void *)(*(_QWORD *)v26 + *v12 + v27), *(_QWORD *)v26 + *(unsigned int *)(v26 + 12) - (*(_QWORD *)v26 + *v12 + v27));
        *(_DWORD *)(v26 + 12) -= v27;
      }
      else
      {
        if (*(_BYTE *)(v11 + 48 * v9 + 9) == 1)
        {
          v28 = 0;
          if (v9)
          {
            v29 = (_DWORD *)(v11 + 36);
            v30 = v10;
            do
            {
              if (*((_BYTE *)v29 - 28) == 1)
                v28 -= *(v29 - 5);
              else
                v28 += *v29;
              v29 += 12;
              v30 -= 48;
            }
            while (v30);
          }
          v31 = *v12;
          v32 = v11 + 48 * v9;
          v33 = (_QWORD *)(v32 + 24);
          __src = (void *)v9;
          v154 = (_QWORD *)(v32 + 24);
          v155 = 0;
          v34 = *(_DWORD *)(v32 + 36);
          if (v34)
          {
            v35 = 0;
            v36 = v28 + v31;
            v37 = (_QWORD *)(v32 + 24);
            do
            {
              v38 = (unsigned __int8 *)(*v37 + v35);
              v39 = *v38;
              if ((v39 | 2) == 0x82)
                v39 = v38[1];
              v40 = v39 - 46;
              v41 = v40 > 0x2E;
              v42 = (1 << v40) & 0x77FFFFE00001;
              v43 = v41 || v42 == 0;
              if (!v43)
              {
                v44 = v8[2];
                v156 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                v45 = *v37;
                v150 = v35;
                v46 = (unsigned __int8 *)(*v37 + v35);
                v47 = *v46;
                v48 = *v46;
                if ((v47 | 2) == 0x82)
                  v48 = v46[1];
                v151 = v36 + v35;
                v149 = v36;
                switch(v48)
                {
                  case '.':
                    v157 = v37;
                    v158 = v35;
                    v92 = JSC::jumpTargetForInstruction<JSC::OpJneqPtr,JSC::UnlinkedCodeBlockGenerator *&>(&v156, (uint64_t)&v157);
                    goto LABEL_125;
                  case 'C':
                    if ((_DWORD)v47 == 128)
                    {
                      v93 = *((__int16 *)v46 + 1);
                    }
                    else if ((_DWORD)v47 == 130)
                    {
                      v93 = *(_DWORD *)(v46 + 2);
                    }
                    else
                    {
                      v93 = (char)v46[1];
                    }
                    v147 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    if (!v93)
                    {
                      v93 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset((JSC::UnlinkedCodeBlockGenerator *)v44, v35);
                      v45 = *v37;
                      LODWORD(v47) = *(unsigned __int8 *)(*v37 + v35);
                    }
                    v94 = v47;
                    v95 = v45;
                    v96 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)v8, 0xFE00000000, v93) - v151;
                    v102 = v95 + v150;
                    if (v94 == 128)
                    {
                      if (v96 != (__int16)v96)
                      {
                        JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v147, v151, v96, v97, v98, v99, v100, v101);
                        LOWORD(v96) = 0;
                      }
                      *(_WORD *)(v102 + 2) = v96;
                    }
                    else if (v94 == 130)
                    {
                      *(_DWORD *)(v102 + 2) = v96;
                    }
                    else
                    {
                      if (v96 != (char)v96)
                      {
                        JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v147, v151, v96, v97, v98, v99, v100, v101);
                        LOBYTE(v96) = 0;
                      }
                      *(_BYTE *)(v102 + 1) = v96;
                    }
                    goto LABEL_35;
                  case 'D':
                  case 'E':
                  case 'H':
                    if ((_DWORD)v47 == 128)
                    {
                      v78 = *((__int16 *)v46 + 2);
                    }
                    else if ((_DWORD)v47 == 130)
                    {
                      v78 = *(_DWORD *)(v46 + 6);
                    }
                    else
                    {
                      v78 = (char)v46[2];
                    }
                    v146 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    if (!v78)
                    {
                      v78 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset((JSC::UnlinkedCodeBlockGenerator *)v44, v35);
                      v45 = *v37;
                      LODWORD(v47) = *(unsigned __int8 *)(*v37 + v35);
                    }
                    v79 = v47;
                    v80 = v45;
                    v81 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)v8, 0xFE00000000, v78);
                    v87 = v151;
                    v88 = v81 - v151;
                    v89 = (unsigned __int8 *)(v80 + v150);
                    if (v79 != 128)
                    {
                      if (v79 == 130)
                        goto LABEL_119;
                      goto LABEL_78;
                    }
                    if (v88 == (__int16)v88)
                      goto LABEL_123;
                    goto LABEL_116;
                  case 'F':
                  case 'G':
                  case 'I':
                    v157 = v37;
                    v158 = v35;
                    v121 = JSC::jumpTargetForInstruction<JSC::OpJeqNull,JSC::UnlinkedCodeBlockGenerator *&>(&v156, (uint64_t)&v157);
                    v122 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)v8, 0xFE00000000, v121);
                    v87 = v36 + v35;
                    v88 = v122 - v151;
                    v89 = (unsigned __int8 *)(*v37 + v35);
                    v123 = *v89;
                    if (v123 != 128)
                    {
                      if (v123 != 130)
                        goto LABEL_148;
                      goto LABEL_119;
                    }
                    if (v88 == (__int16)v88)
                      goto LABEL_123;
                    goto LABEL_121;
                  case 'J':
                  case 'L':
                  case 'N':
                  case 'Q':
                  case 'R':
                  case 'W':
                  case 'X':
                    if ((_DWORD)v47 == 128)
                    {
                      v65 = *((__int16 *)v46 + 3);
                    }
                    else if ((_DWORD)v47 == 130)
                    {
                      v65 = *(_DWORD *)(v46 + 10);
                    }
                    else
                    {
                      v65 = (char)v46[3];
                    }
                    v145 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    if (!v65)
                    {
                      v65 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset((JSC::UnlinkedCodeBlockGenerator *)v44, v35);
                      v45 = *v37;
                      LODWORD(v47) = *(unsigned __int8 *)(*v37 + v35);
                    }
                    v66 = v47;
                    v67 = v45;
                    v68 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)v8, 0xFE00000000, v65);
                    v74 = v151;
                    v75 = v68 - v151;
                    v76 = (unsigned __int8 *)(v67 + v150);
                    if (v66 != 128)
                    {
                      if (v66 == 130)
                        goto LABEL_127;
                      if (v75 != (char)v75)
                      {
                        v77 = v145;
                        goto LABEL_134;
                      }
                      goto LABEL_135;
                    }
                    if (v75 == (__int16)v75)
                      goto LABEL_131;
                    v91 = v145;
                    goto LABEL_130;
                  case 'K':
                  case 'M':
                  case 'O':
                  case 'P':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                    v157 = v37;
                    v158 = v35;
                    v92 = JSC::jumpTargetForInstruction<JSC::OpJless,JSC::UnlinkedCodeBlockGenerator *&>(&v156, (uint64_t)&v157);
LABEL_125:
                    v124 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)v8, 0xFE00000000, v92);
                    v74 = v36 + v35;
                    v75 = v124 - v151;
                    v76 = (unsigned __int8 *)(*v37 + v35);
                    v125 = *v76;
                    if (v125 == 128)
                    {
                      if (v75 != (__int16)v75)
                      {
                        v91 = v156;
LABEL_130:
                        JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v91, v74, v75, v69, v70, v71, v72, v73);
                        LOWORD(v75) = 0;
                      }
LABEL_131:
                      *((_WORD *)v76 + 3) = v75;
                    }
                    else if (v125 == 130)
                    {
LABEL_127:
                      *(_DWORD *)(v76 + 10) = v75;
                    }
                    else
                    {
                      if (v75 != (char)v75)
                      {
                        v77 = v156;
LABEL_134:
                        JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v77, v74, v75, v69, v70, v71, v72, v73);
                        LOBYTE(v75) = 0;
                      }
LABEL_135:
                      v76[3] = v75;
                    }
                    goto LABEL_35;
                  case 'Z':
                    v137 = v10;
                    if ((_DWORD)v47 == 130)
                    {
                      v103 = *(_DWORD *)(v46 + 2);
                      v104 = *(_DWORD *)(v46 + 6);
                    }
                    else if ((_DWORD)v47 == 128)
                    {
                      v103 = *((unsigned __int16 *)v46 + 1);
                      v104 = *((__int16 *)v46 + 2);
                    }
                    else
                    {
                      v103 = v46[1];
                      v104 = (char)v46[2];
                    }
                    v138 = *v37;
                    v139 = *v46;
                    v141 = v34;
                    v136 = v33;
                    v143 = (uint64_t)v8;
                    if (*(unsigned int *)(v44 + 212) <= (unint64_t)v103)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1981346FCLL);
                    }
                    v148 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    v105 = *(_DWORD **)(*(_QWORD *)(v44 + 200) + 16 * v103);
                    if (v105 && *v105)
                    {
                      v106 = v105 + 1;
                      v107 = *v105 - 1;
                      do
                      {
                        v108 = v107;
                        v106[v107] = JSC::BytecodeRewriter::adjustJumpTarget(v143, 0xFE00000000, v106[v107])- v151;
                        --v107;
                      }
                      while (v108);
                    }
                    goto LABEL_144;
                  case '[':
                    v137 = v10;
                    if ((_DWORD)v47 == 130)
                    {
                      v126 = *(_DWORD *)(v46 + 2);
                      v104 = *(_DWORD *)(v46 + 6);
                    }
                    else if ((_DWORD)v47 == 128)
                    {
                      v126 = *((unsigned __int16 *)v46 + 1);
                      v104 = *((__int16 *)v46 + 2);
                    }
                    else
                    {
                      v126 = v46[1];
                      v104 = (char)v46[2];
                    }
                    v138 = *v37;
                    v139 = *v46;
                    v141 = v34;
                    v136 = v33;
                    v143 = (uint64_t)v8;
                    if (*(unsigned int *)(v44 + 212) <= (unint64_t)v126)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19813470CLL);
                    }
                    v148 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    v127 = *(_DWORD **)(*(_QWORD *)(v44 + 200) + 16 * v126);
                    if (v127 && *v127)
                    {
                      v128 = v127 + 1;
                      v129 = *v127 - 1;
                      do
                      {
                        v130 = v129;
                        v128[v129] = JSC::BytecodeRewriter::adjustJumpTarget(v143, 0xFE00000000, v128[v129])- v151;
                        --v129;
                      }
                      while (v130);
                    }
LABEL_144:
                    if (!v104)
                    {
                      v104 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v148, v35);
                      v138 = *v37;
                      v139 = *(unsigned __int8 *)(*v37 + v35);
                    }
                    v8 = (_QWORD *)v143;
                    v131 = JSC::BytecodeRewriter::adjustJumpTarget(v143, 0xFE00000000, v104);
                    v87 = v151;
                    v88 = v131 - v151;
                    v89 = (unsigned __int8 *)(v138 + v35);
                    v34 = v141;
                    v33 = v136;
                    if (v139 == 128)
                    {
                      v10 = v137;
                      if (v88 != (__int16)v88)
                      {
LABEL_121:
                        v120 = v156;
                        goto LABEL_122;
                      }
                      goto LABEL_123;
                    }
                    v10 = v137;
                    if (v139 == 130)
                      goto LABEL_119;
LABEL_148:
                    if (v88 != (char)v88)
                    {
                      v90 = v156;
                      goto LABEL_150;
                    }
                    goto LABEL_151;
                  case '\\':
                    v142 = v34;
                    if ((_DWORD)v47 == 130)
                    {
                      v109 = *(_DWORD *)(v46 + 2);
                      v110 = *(_DWORD *)(v46 + 6);
                    }
                    else if ((_DWORD)v47 == 128)
                    {
                      v109 = *((unsigned __int16 *)v46 + 1);
                      v110 = *((__int16 *)v46 + 2);
                    }
                    else
                    {
                      v109 = v46[1];
                      v110 = (char)v46[2];
                    }
                    v140 = v110;
                    v144 = (uint64_t)v8;
                    if (*(unsigned int *)(v44 + 228) <= (unint64_t)v109)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198134704);
                    }
                    v111 = *(_QWORD *)(v44 + 216) + 24 * v109;
                    v146 = (JSC::UnlinkedCodeBlockGenerator *)v44;
                    if (!*(_DWORD *)(v111 + 12))
                      goto LABEL_110;
                    v112 = *(_QWORD *)v111;
                    v113 = *(unsigned int *)(v111 + 8);
                    if ((_DWORD)v113)
                    {
                      v114 = 16 * v113;
                      v115 = v112;
                      while (!*(_QWORD *)v115)
                      {
                        v115 += 16;
                        v114 -= 16;
                        if (!v114)
                          goto LABEL_110;
                      }
                    }
                    else
                    {
                      v115 = v112;
                    }
                    v132 = v112 + 16 * v113;
                    break;
                  default:
                    goto LABEL_29;
                }
LABEL_164:
                if (v115 != v132)
                {
                  v133 = v47;
                  v134 = v45;
                  v135 = JSC::BytecodeRewriter::adjustJumpTarget(v144, 0xFE00000000, *(unsigned int *)(v115 + 8));
                  v45 = v134;
                  v47 = v133;
                  *(_DWORD *)(v115 + 8) = v135 - v151;
                  while (1)
                  {
                    v115 += 16;
                    if (v115 == v132)
                      break;
                    if (*(_QWORD *)v115)
                      goto LABEL_164;
                  }
                }
LABEL_110:
                v116 = v140;
                if (!v140)
                {
                  v116 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v146, v35);
                  v45 = *v37;
                  LODWORD(v47) = *(unsigned __int8 *)(*v37 + v35);
                }
                v8 = (_QWORD *)v144;
                v117 = v47;
                v118 = v45;
                v119 = JSC::BytecodeRewriter::adjustJumpTarget(v144, 0xFE00000000, v116);
                v87 = v151;
                v88 = v119 - v151;
                v89 = (unsigned __int8 *)(v118 + v35);
                if (v117 == 128)
                {
                  v34 = v142;
                  if (v88 != (__int16)v88)
                  {
LABEL_116:
                    v120 = v146;
LABEL_122:
                    JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v120, v87, v88, v82, v83, v84, v85, v86);
                    LOWORD(v88) = 0;
                  }
LABEL_123:
                  *((_WORD *)v89 + 2) = v88;
                }
                else
                {
                  v43 = v117 == 130;
                  v34 = v142;
                  if (v43)
                  {
LABEL_119:
                    *(_DWORD *)(v89 + 6) = v88;
                  }
                  else
                  {
LABEL_78:
                    if (v88 != (char)v88)
                    {
                      v90 = v146;
LABEL_150:
                      JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v90, v87, v88, v82, v83, v84, v85, v86);
                      LOBYTE(v88) = 0;
                    }
LABEL_151:
                    v89[2] = v88;
                  }
                }
LABEL_35:
                v36 = v149;
              }
LABEL_29:
              JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::iterator::operator++((uint64_t)&v154);
              v37 = v154;
              v35 = v155;
            }
            while (v154 != v33 || v155 != v34);
          }
          v9 = (unint64_t)__src;
        }
        v13 = v10;
        v14 = v8;
        v15 = v8[3];
        v16 = *v12;
        v17 = v9;
        v18 = v11 + 48 * v9;
        v19 = *(const void **)(v18 + 24);
        v20 = *(unsigned int *)(v18 + 36);
        v21 = *(unsigned int *)(v15 + 8);
        v22 = *(unsigned int *)(v15 + 12);
        v23 = v22 + v20;
        if (v22 + v20 > v21)
        {
          v49 = v21 + (v21 >> 2);
          if (v49 >= 0x10)
            v50 = v49 + 1;
          else
            v50 = 16;
          if (v50 <= v23)
            v51 = v22 + v20;
          else
            v51 = v50;
          if (HIDWORD(v51))
          {
            __break(0xC471u);
            JUMPOUT(0x198134714);
          }
          __srca = *(void **)v15;
          v52 = (void *)WTF::fastMalloc((WTF *)v51);
          *(_DWORD *)(v15 + 8) = v51;
          *(_QWORD *)v15 = v52;
          memcpy(v52, __srca, v22);
          if (__srca)
          {
            if (*(void **)v15 == __srca)
            {
              *(_QWORD *)v15 = 0;
              *(_DWORD *)(v15 + 8) = 0;
            }
            WTF::fastFree((unint64_t)__srca, v53, v54, v55, v56, v57, v58, v59);
          }
        }
        v24 = *(unsigned int *)(v15 + 12);
        if (v23 < v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1981346F4);
        }
        v25 = (char *)(*(_QWORD *)v15 + v16);
        memmove(&v25[v20], v25, *(_QWORD *)v15 + v24 - (_QWORD)v25);
        this = (unsigned int *)memcpy(v25, v19, v20);
        *(_DWORD *)(v15 + 12) = v23;
        v8 = v14;
        v10 = v13;
        v9 = v17;
      }
      v10 -= 48;
    }
    while (v9);
  }
  if (*((_DWORD *)v8 + 10))
  {
    v60 = *((unsigned int *)v8 + 11);
    this = (unsigned int *)v8[4];
    if ((_DWORD)v60)
    {
      v61 = 48 * v60;
      v62 = (char *)(this + 6);
      do
      {
        v63 = *(_QWORD *)v62;
        if (*(_QWORD *)v62)
        {
          *(_QWORD *)v62 = 0;
          *((_DWORD *)v62 + 2) = 0;
          WTF::fastFree(v63, a2, a3, a4, a5, a6, a7, a8);
        }
        v62 += 48;
        v61 -= 48;
      }
      while (v61);
      *((_DWORD *)v8 + 11) = 0;
      this = (unsigned int *)v8[4];
    }
    if (v8 + 6 != (_QWORD *)this && this != 0)
    {
      v8[4] = 0;
      *((_DWORD *)v8 + 10) = 0;
      WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
      this = (unsigned int *)v8[4];
    }
    if (!this)
    {
      v8[4] = v8 + 6;
      *((_DWORD *)v8 + 10) = 8;
    }
  }
  return this;
}

uint64_t JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::iterator::operator++(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  char v5;
  _BOOL4 v6;
  int v7;
  int v8;

  v1 = *(unsigned int *)(result + 8);
  v2 = (unsigned __int8 *)(**(_QWORD **)result + v1);
  v3 = *v2;
  v4 = v3;
  if ((v3 | 2) == 0x82)
    v4 = v2[1];
  v5 = v3 == 128;
  if (v3 == 130)
    v5 = 2;
  v6 = v3 == 128 || v3 == 130;
  v7 = JSC::opcodeLengths[v4] << v5;
  if (v6)
    v8 = 2;
  else
    v8 = 1;
  *(_DWORD *)(result + 8) = v8 + v1 + v7;
  return result;
}

uint64_t JSC::BytecodeRewriter::adjustJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;

  v3 = a2;
  v4 = BYTE4(a2);
  if ((_DWORD)a2 == (_DWORD)a3)
  {
    if (SBYTE4(a2) < SBYTE4(a3))
      goto LABEL_3;
    if (BYTE4(a2) == BYTE4(a3))
      return 0;
    return -JSC::BytecodeRewriter::adjustJumpTarget(a1, a3, a2);
  }
  if ((int)a2 >= (int)a3)
    return -JSC::BytecodeRewriter::adjustJumpTarget(a1, a3, a2);
LABEL_3:
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v6;
    v8 = *(unsigned int *)(a1 + 44);
    do
    {
      v9 = v8 >> 1;
      v10 = v7 + 48 * (v8 >> 1);
      v11 = *(_DWORD *)v10 < v3;
      if (*(_DWORD *)v10 == v3)
        v11 = *(char *)(v10 + 4) < v4;
      v12 = v10 + 48;
      v8 += ~(v8 >> 1);
      if (v11)
        v7 = v12;
      else
        v8 = v9;
    }
    while (v8);
    if (v7 != v6 + 48 * v5)
    {
      do
      {
        v13 = v5 >> 1;
        v14 = v6 + 48 * (v5 >> 1);
        v15 = *(_DWORD *)v14 < (int)a3;
        if (*(_DWORD *)v14 == (_DWORD)a3)
          v15 = *(char *)(v14 + 4) < SBYTE4(a3);
        v16 = v14 + 48;
        v5 += ~(v5 >> 1);
        if (v15)
          v6 = v16;
        else
          v5 = v13;
      }
      while (v5);
      if (v7 == v6)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        do
        {
          if (*(_BYTE *)(v7 + 8) == 1)
            v17 -= *(_DWORD *)(v7 + 16);
          else
            v17 += *(_DWORD *)(v7 + 36);
          v7 += 48;
        }
        while (v7 != v6);
      }
      LODWORD(a3) = v17 + a3;
    }
  }
  return (a3 - v3);
}

void JSC::BytecodeRewriter::adjustJumpTargets(JSC::BytecodeRewriter *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  int v120;
  char v121;
  _BOOL4 v122;
  BOOL v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;

  v8 = *((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 2);
  v10 = *(_QWORD *)(v9 + 176);
  *(_QWORD *)(v9 + 176) = 0;
  v176 = v10;
  v11 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v11 + 12))
    goto LABEL_218;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *((_QWORD *)this + 4) + 48 * *((unsigned int *)this + 11);
    if (v8 == v16)
    {
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (*(_DWORD *)v8 == v14)
      {
        if (*(_BYTE *)(v8 + 8) == 1)
        {
          v17 += *(_DWORD *)(v8 + 16);
        }
        else
        {
          v25 = *(_DWORD *)(v8 + 36);
          v26 = *(unsigned __int8 *)(v8 + 4);
          v27 = v25 + v19;
          v28 = v25 + v18;
          if (v26 != 1)
            v28 = v18;
          if (v26 == 255)
            v19 = v27;
          else
            v18 = v28;
        }
        v8 += 48;
        if (v8 == v16)
        {
          v8 = *((_QWORD *)this + 4) + 48 * *((unsigned int *)this + 11);
          break;
        }
      }
      v15 += v19;
      if (v17)
      {
        v15 -= v17;
        goto LABEL_174;
      }
    }
    v20 = (unsigned __int8 *)(*(_QWORD *)v11 + v13);
    v21 = *v20;
    v22 = v21;
    if ((v21 | 2) == 0x82)
      v22 = v20[1];
    switch(v22)
    {
      case '.':
        v23 = v18;
        v177 = v11;
        v178 = v14;
        v24 = JSC::jumpTargetForInstruction<JSC::OpJneqPtr,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(&v176, (uint64_t)&v177);
        goto LABEL_153;
      case 'C':
        if (v21 == 128)
        {
          v85 = *((__int16 *)v20 + 1);
        }
        else if (v21 == 130)
        {
          v85 = *(_DWORD *)(v20 + 2);
        }
        else
        {
          v85 = (char)v20[1];
        }
        if (v85)
          goto LABEL_92;
        v85 = v176;
        if (!v176)
          goto LABEL_92;
        v135 = *(_DWORD *)(v176 - 8);
        v136 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v137 = (v136 ^ (v136 >> 6)) + ~((v136 ^ (v136 >> 6)) << 11);
        v138 = v135 & (v137 ^ HIWORD(v137));
        v139 = *(_DWORD *)(v176 + 8 * v138);
        if (v139 == v14)
          goto LABEL_201;
        v163 = 1;
        while (v139)
        {
          v138 = ((_DWORD)v138 + v163) & v135;
          v139 = *(_DWORD *)(v176 + 8 * v138);
          ++v163;
          if (v139 == v14)
          {
LABEL_201:
            v85 = *(_DWORD *)(v176 + 8 * v138 + 4);
            goto LABEL_92;
          }
        }
        v85 = 0;
LABEL_92:
        v86 = *(_QWORD *)v11 + v13;
        v87 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v85 + v14));
        if (v21 == 128)
        {
          if (v87 != (__int16)v87)
          {
            v128 = *((_QWORD *)this + 2);
            v179 = v87;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v128 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOWORD(v87) = 0;
          }
          *(_WORD *)(v86 + 2) = v87;
        }
        else if (v21 == 130)
        {
          *(_DWORD *)(v86 + 2) = v87;
        }
        else
        {
          if (v87 != (char)v87)
          {
            v129 = *((_QWORD *)this + 2);
            v179 = v87;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v129 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOBYTE(v87) = 0;
          }
          *(_BYTE *)(v86 + 1) = v87;
        }
        goto LABEL_163;
      case 'D':
        if (v21 == 128)
        {
          LODWORD(v67) = *((__int16 *)v20 + 2);
        }
        else if (v21 == 130)
        {
          LODWORD(v67) = *(_DWORD *)(v20 + 6);
        }
        else
        {
          LODWORD(v67) = (char)v20[2];
        }
        if ((_DWORD)v67)
          goto LABEL_111;
        v67 = v176;
        if (!v176)
          goto LABEL_111;
        v68 = *(_DWORD *)(v176 - 8);
        v69 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
        v71 = v68 & (v70 ^ HIWORD(v70));
        v72 = *(_DWORD *)(v176 + 8 * v71);
        if (v72 == v14)
          goto LABEL_207;
        v157 = 1;
        while (v72)
        {
          v71 = ((_DWORD)v71 + v157) & v68;
          v72 = *(_DWORD *)(v176 + 8 * v71);
          ++v157;
          if (v72 == v14)
            goto LABEL_207;
        }
        goto LABEL_288;
      case 'E':
        if (v21 == 128)
        {
          LODWORD(v67) = *((__int16 *)v20 + 2);
        }
        else if (v21 == 130)
        {
          LODWORD(v67) = *(_DWORD *)(v20 + 6);
        }
        else
        {
          LODWORD(v67) = (char)v20[2];
        }
        if ((_DWORD)v67)
          goto LABEL_111;
        v67 = v176;
        if (!v176)
          goto LABEL_111;
        v81 = *(_DWORD *)(v176 - 8);
        v82 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v83 = (v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11);
        v71 = v81 & (v83 ^ HIWORD(v83));
        v84 = *(_DWORD *)(v176 + 8 * v71);
        if (v84 == v14)
          goto LABEL_207;
        v161 = 1;
        while (v84)
        {
          v71 = ((_DWORD)v71 + v161) & v81;
          v84 = *(_DWORD *)(v176 + 8 * v71);
          ++v161;
          if (v84 == v14)
            goto LABEL_207;
        }
        goto LABEL_288;
      case 'F':
      case 'G':
      case 'I':
        v23 = v18;
        v177 = v11;
        v178 = v14;
        v98 = JSC::jumpTargetForInstruction<JSC::OpJeqNull,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(&v176, (uint64_t)&v177);
        v99 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v98 + v14));
        v100 = (unsigned __int8 *)(*(_QWORD *)v11 + v13);
        v101 = *v100;
        if (v101 == 128)
        {
          if (v99 != (__int16)v99)
          {
            v103 = *((_QWORD *)this + 2);
            v179 = v99;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v103 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOWORD(v99) = 0;
          }
          *((_WORD *)v100 + 2) = v99;
        }
        else if (v101 == 130)
        {
          *(_DWORD *)(v100 + 6) = v99;
        }
        else
        {
          if (v99 != (char)v99)
          {
            v102 = *((_QWORD *)this + 2);
            v179 = v99;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v102 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOBYTE(v99) = 0;
          }
          v100[2] = v99;
        }
        goto LABEL_162;
      case 'H':
        if (v21 == 128)
        {
          LODWORD(v67) = *((__int16 *)v20 + 2);
        }
        else if (v21 == 130)
        {
          LODWORD(v67) = *(_DWORD *)(v20 + 6);
        }
        else
        {
          LODWORD(v67) = (char)v20[2];
        }
        if ((_DWORD)v67)
          goto LABEL_111;
        v67 = v176;
        if (!v176)
          goto LABEL_111;
        v144 = *(_DWORD *)(v176 - 8);
        v145 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v146 = (v145 ^ (v145 >> 6)) + ~((v145 ^ (v145 >> 6)) << 11);
        v71 = v144 & (v146 ^ HIWORD(v146));
        v147 = *(_DWORD *)(v176 + 8 * v71);
        if (v147 == v14)
          goto LABEL_207;
        v165 = 1;
        while (v147)
        {
          v71 = ((_DWORD)v71 + v165) & v144;
          v147 = *(_DWORD *)(v176 + 8 * v71);
          ++v165;
          if (v147 == v14)
          {
LABEL_207:
            LODWORD(v67) = *(_DWORD *)(v67 + 8 * v71 + 4);
            goto LABEL_111;
          }
        }
LABEL_288:
        LODWORD(v67) = 0;
LABEL_111:
        v45 = (unsigned __int8 *)(*(_QWORD *)v11 + v13);
        v46 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v67 + v14));
        if (v21 != 128)
        {
          if (v21 == 130)
            goto LABEL_113;
          if (v46 != (char)v46)
          {
            v47 = *((_QWORD *)this + 2);
            v179 = v46;
            v180 = v15 + v14;
            goto LABEL_116;
          }
          goto LABEL_117;
        }
        if (v46 == (__int16)v46)
          goto LABEL_130;
        v104 = *((_QWORD *)this + 2);
        v179 = v46;
        v180 = v15 + v14;
        goto LABEL_129;
      case 'J':
        v23 = v18;
        v177 = v11;
        v178 = v14;
        v24 = JSC::jumpTargetForInstruction<JSC::OpJeqPtr,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(&v176, (uint64_t)&v177);
        goto LABEL_153;
      case 'K':
      case 'M':
      case 'O':
      case 'P':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
        v23 = v18;
        v177 = v11;
        v178 = v14;
        v24 = JSC::jumpTargetForInstruction<JSC::OpJless,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(&v176, (uint64_t)&v177);
LABEL_153:
        v113 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v24 + v14));
        v114 = (unsigned __int8 *)(*(_QWORD *)v11 + v13);
        v115 = *v114;
        if (v115 == 128)
        {
          if (v113 != (__int16)v113)
          {
            v116 = *((_QWORD *)this + 2);
            v179 = v113;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v116 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOWORD(v113) = 0;
          }
          *((_WORD *)v114 + 3) = v113;
        }
        else if (v115 == 130)
        {
          *(_DWORD *)(v114 + 10) = v113;
        }
        else
        {
          if (v113 != (char)v113)
          {
            v117 = *((_QWORD *)this + 2);
            v179 = v113;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v117 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOBYTE(v113) = 0;
          }
          v114[3] = v113;
        }
LABEL_162:
        v18 = v23;
        goto LABEL_163;
      case 'L':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v63 = *(_DWORD *)(v176 - 8);
        v64 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v65 = (v64 ^ (v64 >> 6)) + ~((v64 ^ (v64 >> 6)) << 11);
        v33 = v63 & (v65 ^ HIWORD(v65));
        v66 = *(_DWORD *)(v176 + 8 * v33);
        if (v66 == v14)
          goto LABEL_210;
        v156 = 1;
        while (v66)
        {
          v33 = ((_DWORD)v33 + v156) & v63;
          v66 = *(_DWORD *)(v176 + 8 * v33);
          ++v156;
          if (v66 == v14)
            goto LABEL_210;
        }
        goto LABEL_287;
      case 'N':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v77 = *(_DWORD *)(v176 - 8);
        v78 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v79 = (v78 ^ (v78 >> 6)) + ~((v78 ^ (v78 >> 6)) << 11);
        v33 = v77 & (v79 ^ HIWORD(v79));
        v80 = *(_DWORD *)(v176 + 8 * v33);
        if (v80 == v14)
          goto LABEL_210;
        v159 = 1;
        while (v80)
        {
          v33 = ((_DWORD)v33 + v159) & v77;
          v80 = *(_DWORD *)(v176 + 8 * v33);
          ++v159;
          if (v80 == v14)
            goto LABEL_210;
        }
        goto LABEL_287;
      case 'Q':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v105 = *(_DWORD *)(v176 - 8);
        v106 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v107 = (v106 ^ (v106 >> 6)) + ~((v106 ^ (v106 >> 6)) << 11);
        v33 = v105 & (v107 ^ HIWORD(v107));
        v108 = *(_DWORD *)(v176 + 8 * v33);
        if (v108 == v14)
          goto LABEL_210;
        v162 = 1;
        while (v108)
        {
          v33 = ((_DWORD)v33 + v162) & v105;
          v108 = *(_DWORD *)(v176 + 8 * v33);
          ++v162;
          if (v108 == v14)
            goto LABEL_210;
        }
        goto LABEL_287;
      case 'R':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v148 = *(_DWORD *)(v176 - 8);
        v149 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v150 = (v149 ^ (v149 >> 6)) + ~((v149 ^ (v149 >> 6)) << 11);
        v33 = v148 & (v150 ^ HIWORD(v150));
        v151 = *(_DWORD *)(v176 + 8 * v33);
        if (v151 == v14)
          goto LABEL_210;
        v166 = 1;
        while (v151)
        {
          v33 = ((_DWORD)v33 + v166) & v148;
          v151 = *(_DWORD *)(v176 + 8 * v33);
          ++v166;
          if (v151 == v14)
            goto LABEL_210;
        }
        goto LABEL_287;
      case 'W':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v30 = *(_DWORD *)(v176 - 8);
        v31 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
        v33 = v30 & (v32 ^ HIWORD(v32));
        v34 = *(_DWORD *)(v176 + 8 * v33);
        if (v34 == v14)
          goto LABEL_210;
        v154 = 1;
        while (v34)
        {
          v33 = ((_DWORD)v33 + v154) & v30;
          v34 = *(_DWORD *)(v176 + 8 * v33);
          ++v154;
          if (v34 == v14)
            goto LABEL_210;
        }
        goto LABEL_287;
      case 'X':
        if (v21 == 128)
        {
          LODWORD(v29) = *((__int16 *)v20 + 3);
        }
        else if (v21 == 130)
        {
          LODWORD(v29) = *(_DWORD *)(v20 + 10);
        }
        else
        {
          LODWORD(v29) = (char)v20[3];
        }
        if ((_DWORD)v29)
          goto LABEL_143;
        v29 = v176;
        if (!v176)
          goto LABEL_143;
        v73 = *(_DWORD *)(v176 - 8);
        v74 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v75 = (v74 ^ (v74 >> 6)) + ~((v74 ^ (v74 >> 6)) << 11);
        v33 = v73 & (v75 ^ HIWORD(v75));
        v76 = *(_DWORD *)(v176 + 8 * v33);
        if (v76 == v14)
          goto LABEL_210;
        v158 = 1;
        while (v76)
        {
          v33 = ((_DWORD)v33 + v158) & v73;
          v76 = *(_DWORD *)(v176 + 8 * v33);
          ++v158;
          if (v76 == v14)
          {
LABEL_210:
            LODWORD(v29) = *(_DWORD *)(v29 + 8 * v33 + 4);
            goto LABEL_143;
          }
        }
LABEL_287:
        LODWORD(v29) = 0;
LABEL_143:
        v109 = *(_QWORD *)v11 + v13;
        v110 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v29 + v14));
        if (v21 == 128)
        {
          if (v110 != (__int16)v110)
          {
            v111 = *((_QWORD *)this + 2);
            v179 = v110;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v111 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOWORD(v110) = 0;
          }
          *(_WORD *)(v109 + 6) = v110;
        }
        else if (v21 == 130)
        {
          *(_DWORD *)(v109 + 10) = v110;
        }
        else
        {
          if (v110 != (char)v110)
          {
            v112 = *((_QWORD *)this + 2);
            v179 = v110;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v112 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOBYTE(v110) = 0;
          }
          *(_BYTE *)(v109 + 3) = v110;
        }
        goto LABEL_163;
      case 'Z':
        v174 = v11;
        if (v21 == 130)
        {
          v48 = *(_DWORD *)(v20 + 2);
          v49 = *(_DWORD *)(v20 + 6);
        }
        else if (v21 == 128)
        {
          v48 = *((unsigned __int16 *)v20 + 1);
          v49 = *((__int16 *)v20 + 2);
        }
        else
        {
          v48 = v20[1];
          v49 = (char)v20[2];
        }
        v169 = v49;
        v173 = *(_QWORD *)v11 + v13;
        v50 = *((_QWORD *)this + 2);
        if (*(unsigned int *)(v50 + 212) <= (unint64_t)v48)
        {
          __break(0xC471u);
          JUMPOUT(0x198135AD4);
        }
        v51 = v18;
        v52 = v8;
        v167 = *((_QWORD *)this + 2);
        v53 = *(_DWORD **)(*(_QWORD *)(v50 + 200) + 16 * v48);
        if (v53 && *v53)
        {
          v54 = v53 + 1;
          v55 = *v53 - 1;
          do
          {
            v56 = v55;
            v54[v55] = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v54[v55] + v14));
            --v55;
          }
          while (v56);
        }
        v8 = v52;
        v18 = v51;
        v11 = v174;
        LODWORD(v57) = v169;
        if (v169)
          goto LABEL_104;
        v57 = v176;
        if (!v176)
          goto LABEL_104;
        v58 = *(_DWORD *)(v176 - 8);
        v59 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v60 = (v59 ^ (v59 >> 6)) + ~((v59 ^ (v59 >> 6)) << 11);
        v61 = v58 & (v60 ^ HIWORD(v60));
        v62 = *(_DWORD *)(v176 + 8 * v61);
        if (v62 == v14)
          goto LABEL_204;
        v155 = 1;
        while (v62)
        {
          v61 = ((_DWORD)v61 + v155) & v58;
          v62 = *(_DWORD *)(v176 + 8 * v61);
          ++v155;
          if (v62 == v14)
            goto LABEL_204;
        }
        goto LABEL_289;
      case '[':
        v175 = v11;
        if (v21 == 130)
        {
          v88 = *(_DWORD *)(v20 + 2);
          v89 = *(_DWORD *)(v20 + 6);
        }
        else if (v21 == 128)
        {
          v88 = *((unsigned __int16 *)v20 + 1);
          v89 = *((__int16 *)v20 + 2);
        }
        else
        {
          v88 = v20[1];
          v89 = (char)v20[2];
        }
        v170 = v89;
        v173 = *(_QWORD *)v11 + v13;
        v90 = *((_QWORD *)this + 2);
        if (*(unsigned int *)(v90 + 212) <= (unint64_t)v88)
        {
          __break(0xC471u);
          JUMPOUT(0x198135ADCLL);
        }
        v91 = v18;
        v92 = v8;
        v167 = *((_QWORD *)this + 2);
        v93 = *(_DWORD **)(*(_QWORD *)(v90 + 200) + 16 * v88);
        if (v93 && *v93)
        {
          v94 = v93 + 1;
          v95 = *v93 - 1;
          do
          {
            v96 = v95;
            v94[v95] = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v94[v95] + v14));
            --v95;
          }
          while (v96);
        }
        v8 = v92;
        v18 = v91;
        v11 = v175;
        LODWORD(v57) = v170;
        if (v170)
          goto LABEL_104;
        v57 = v176;
        if (!v176)
          goto LABEL_104;
        v140 = *(_DWORD *)(v176 - 8);
        v141 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v142 = (v141 ^ (v141 >> 6)) + ~((v141 ^ (v141 >> 6)) << 11);
        v61 = v140 & (v142 ^ HIWORD(v142));
        v143 = *(_DWORD *)(v176 + 8 * v61);
        if (v143 == v14)
          goto LABEL_204;
        v164 = 1;
        while (v143)
        {
          v61 = ((_DWORD)v61 + v164) & v140;
          v143 = *(_DWORD *)(v176 + 8 * v61);
          ++v164;
          if (v143 == v14)
          {
LABEL_204:
            LODWORD(v57) = *(_DWORD *)(v57 + 8 * v61 + 4);
            goto LABEL_104;
          }
        }
LABEL_289:
        LODWORD(v57) = 0;
LABEL_104:
        v97 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v57 + v14));
        if (v21 == 128)
        {
          if (v97 != (__int16)v97)
          {
            v179 = v97;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v167 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOWORD(v97) = 0;
          }
          *(_WORD *)(v173 + 4) = v97;
        }
        else if (v21 == 130)
        {
          *(_DWORD *)(v173 + 6) = v97;
        }
        else
        {
          if (v97 != (char)v97)
          {
            v179 = v97;
            v180 = v15 + v14;
            WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v167 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
            LOBYTE(v97) = 0;
          }
          *(_BYTE *)(v173 + 2) = v97;
        }
        goto LABEL_163;
      case '\\':
        v171 = v18;
        if (v21 == 130)
        {
          v35 = *(_DWORD *)(v20 + 2);
          v36 = *(_DWORD *)(v20 + 6);
        }
        else if (v21 == 128)
        {
          v35 = *((unsigned __int16 *)v20 + 1);
          v36 = *((__int16 *)v20 + 2);
        }
        else
        {
          v35 = v20[1];
          v36 = (char)v20[2];
        }
        v172 = v36;
        v37 = *((_QWORD *)this + 2);
        if (*(unsigned int *)(v37 + 228) <= (unint64_t)v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198135ACCLL);
        }
        v38 = v8;
        v168 = *((_QWORD *)this + 2);
        v39 = *(_QWORD *)(v37 + 216) + 24 * v35;
        if (!*(_DWORD *)(v39 + 12))
          goto LABEL_36;
        v40 = *(_QWORD *)v39;
        v41 = *(unsigned int *)(v39 + 8);
        if ((_DWORD)v41)
        {
          v42 = 16 * v41;
          v43 = v40;
          while (!*(_QWORD *)v43)
          {
            v43 += 16;
            v42 -= 16;
            if (!v42)
              goto LABEL_36;
          }
        }
        else
        {
          v43 = v40;
        }
        v152 = v40 + 16 * v41;
        break;
      default:
        goto LABEL_163;
    }
LABEL_213:
    if (v43 != v152)
    {
      v153 = v20;
      *(_DWORD *)(v43 + 8) = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (*(_DWORD *)(v43 + 8) + v14));
      v20 = v153;
      while (1)
      {
        v43 += 16;
        if (v43 == v152)
          break;
        if (*(_QWORD *)v43)
          goto LABEL_213;
      }
    }
LABEL_36:
    v8 = v38;
    v18 = v171;
    v44 = v172;
    if (!v172)
    {
      v44 = v176;
      if (v176)
      {
        v130 = *(_DWORD *)(v176 - 8);
        v131 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v132 = (v131 ^ (v131 >> 6)) + ~((v131 ^ (v131 >> 6)) << 11);
        v133 = v130 & (v132 ^ HIWORD(v132));
        v134 = *(_DWORD *)(v176 + 8 * v133);
        if (v134 == v14)
        {
LABEL_198:
          v44 = *(_DWORD *)(v176 + 8 * v133 + 4);
        }
        else
        {
          v160 = 1;
          while (v134)
          {
            v133 = ((_DWORD)v133 + v160) & v130;
            v134 = *(_DWORD *)(v176 + 8 * v133);
            ++v160;
            if (v134 == v14)
              goto LABEL_198;
          }
          v44 = 0;
        }
      }
    }
    v45 = v20;
    v46 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, v13, (v44 + v14));
    if (v21 == 128)
    {
      if (v46 != (__int16)v46)
      {
        v179 = v46;
        v180 = v15 + v14;
        v104 = v168;
LABEL_129:
        WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v104 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
        LOWORD(v46) = 0;
      }
LABEL_130:
      *((_WORD *)v45 + 2) = v46;
    }
    else if (v21 == 130)
    {
LABEL_113:
      *(_DWORD *)(v45 + 6) = v46;
    }
    else
    {
      if (v46 != (char)v46)
      {
        v179 = v46;
        v180 = v15 + v14;
        v47 = v168;
LABEL_116:
        WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v47 + 176), &v180, &v179, a4, a5, a6, a7, a8, (uint64_t)&v177);
        LOBYTE(v46) = 0;
      }
LABEL_117:
      v45[2] = v46;
    }
LABEL_163:
    v118 = (unsigned __int8 *)(*(_QWORD *)v11 + v13);
    v119 = *v118;
    v120 = v119;
    if ((v119 | 2) == 0x82)
      v120 = v118[1];
    v121 = v119 == 128;
    v122 = v119 == 130;
    if (v119 == 130)
      v121 = 2;
    v123 = v119 == 128;
    v124 = JSC::opcodeLengths[v120];
    v125 = v123 || v122;
    v126 = v124 << v121;
    if (v125)
      v127 = 2;
    else
      v127 = 1;
    v17 = v126 + v127;
    v11 = *((_QWORD *)this + 3);
LABEL_174:
    v13 = (v17 + v14);
    v15 += v18;
    v14 = v13;
  }
  while (*(_DWORD *)(v11 + 12) > v13);
  v10 = v176;
LABEL_218:
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
}

unsigned __int8 *JSC::computeUsesForBytecodeIndexImpl(unsigned __int8 *result, const unsigned __int8 *a2, uint64_t a3, int8x8_t a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, unint64_t);
  unint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  int16x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int v77;
  int v78;
  int v79;
  unsigned __int32 v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  BOOL v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  int16x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  __n128 v92;
  int v93;
  int v94;
  int v95;
  unsigned __int32 v96;
  unsigned __int32 v97;
  unsigned __int32 v98;
  int16x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int32 v107;
  int v108;
  int16x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int v113;
  unsigned __int32 v114;
  int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  int32x2_t v124;
  int v125;
  unsigned int v126;
  int16x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int16x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int8x16_t v139;
  int v140;
  unsigned __int32 v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int16x4_t v147;
  int32x4_t v148;
  int v149;
  unint64_t HasPrivate;
  unsigned int v151;
  int v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t IsUndefinedOr;
  unsigned int v162;
  int v163;
  unsigned __int32 v164;
  _BYTE v165[36];

  v5 = (int)a2;
  v6 = *result;
  v7 = v6;
  if ((v6 | 2) == 0x82)
    v7 = result[1];
  switch(v7)
  {
    case 0:
      if (v6 == 130)
      {
        v96 = *(_DWORD *)(result + 6);
        *(_DWORD *)v165 = *(_DWORD *)(result + 2);
        *(_DWORD *)&v165[4] = v96;
        v92 = *(__n128 *)(result + 10);
        *(__n128 *)&v165[8] = v92;
        *(_DWORD *)&v165[24] = *(_DWORD *)(result + 26);
        v98 = v92.n128_u32[1];
        v97 = v92.n128_u32[0];
      }
      else if (v6 == 128)
      {
        JSC::OpTailCallForwardArguments::OpTailCallForwardArguments((int *)v165, (const unsigned __int16 *)result + 1);
        v96 = *(_DWORD *)&v165[4];
        v97 = *(_DWORD *)&v165[8];
        v98 = *(_DWORD *)&v165[12];
      }
      else
      {
        a4.i32[0] = *(_DWORD *)(result + 1);
        v89 = (int16x4_t)vmovl_s8(a4).u64[0];
        v90 = vmovl_s16(v89);
        v91.i64[0] = 0xF0000000FLL;
        v91.i64[1] = 0xF0000000FLL;
        v92 = (__n128)vbslq_s8((int8x16_t)vcgtq_s32(v90, v91), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v89), (int8x16_t)v90);
        *(__n128 *)v165 = v92;
        v93 = (char)result[5];
        v94 = v93 + 1073741808;
        if (v93 <= 15)
          v94 = (char)result[5];
        v95 = result[6];
        *(_DWORD *)&v165[16] = v94;
        *(_DWORD *)&v165[20] = v95;
        *(_DWORD *)&v165[24] = result[7];
        v96 = v92.n128_u32[1];
        v97 = v92.n128_u32[2];
        v98 = v92.n128_u32[3];
      }
      v87 = v97;
      v88 = v98;
      (*(void (**)(_QWORD, _QWORD, __n128))a3)(*(_QWORD *)(a3 + 8), v96, v92);
      goto LABEL_219;
    case 1:
      v86 = JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)result, (int8x16_t *)v165, a4);
      goto LABEL_218;
    case 2:
      JSC::OpIteratorNext::decode(result, (uint64_t)v165, a4);
      v64 = *(unsigned int *)&v165[12];
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[16]);
      (*(void (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v64);
      v65 = *(unsigned int *)&v165[8];
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v65);
    case 3:
      JSC::OpConstructVarargs::decode((int *)result, (uint64_t)v165, a4);
LABEL_218:
      v87 = *(unsigned int *)&v165[8];
      v88 = *(unsigned int *)&v165[12];
      (*(void (**)(_QWORD, _QWORD, __n128))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[4], (__n128)v86);
LABEL_219:
      (*(void (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v87);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v88);
    case 4:
      JSC::OpIteratorOpen::decode(result, (uint32x4_t *)v165, a4);
      v70 = *(unsigned int *)&v165[12];
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[8]);
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v70);
      if (v5)
      {
        v65 = *(unsigned int *)v165;
        return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v65);
      }
      return result;
    case 5:
      v153 = JSC::OpNewAsyncGeneratorFuncExp::decode((JSC::OpNewAsyncGeneratorFuncExp *)result, a2);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v153);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), HIDWORD(v153));
    case 6:
    case 101:
      if (v6 == 130)
      {
        v82 = *(_DWORD *)(result + 2);
        v84 = *(_DWORD *)(result + 6);
        goto LABEL_215;
      }
      if (v6 != 128)
      {
        v82 = (char)result[1];
        if (v82 > 15)
          v82 += 1073741808;
        v83 = (char)result[2];
        goto LABEL_211;
      }
      v82 = *((__int16 *)result + 1);
      if (v82 > 63)
        v82 += 1073741760;
      v83 = *((__int16 *)result + 2);
      goto LABEL_362;
    case 7:
    case 27:
      if (v6 == 128)
      {
        v18 = *((__int16 *)result + 1);
        goto LABEL_70;
      }
      if (v6 != 130)
      {
        v18 = (char)result[1];
        goto LABEL_25;
      }
      v18 = *(_DWORD *)(result + 2);
      v22 = *(_DWORD *)(result + 10);
      goto LABEL_32;
    case 8:
      if (v6 == 128)
      {
        v50 = *((__int16 *)result + 2);
        if (v50 > 63)
          v50 += 1073741760;
        LODWORD(v51) = *((unsigned __int16 *)result + 3);
        v52 = *((unsigned __int16 *)result + 4);
      }
      else if (v6 == 130)
      {
        v50 = *(_DWORD *)(result + 6);
        LODWORD(v51) = *(_DWORD *)(result + 10);
        v52 = *(_DWORD *)(result + 14);
      }
      else
      {
        v50 = (char)result[2];
        if (v50 > 15)
          v50 += 1073741808;
        LODWORD(v51) = result[3];
        v52 = result[4];
      }
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v50);
      if ((int)v51 >= 1)
      {
        v51 = v51;
        v53 = 5 - v52;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v53++);
          --v51;
        }
        while (v51);
      }
      return result;
    case 9:
      if (v6 == 128)
      {
        v36 = *((__int16 *)result + 2);
        if (v36 > 63)
          v36 += 1073741760;
        LODWORD(v37) = *((unsigned __int16 *)result + 3);
        v38 = *((unsigned __int16 *)result + 4);
      }
      else if (v6 == 130)
      {
        v36 = *(_DWORD *)(result + 6);
        LODWORD(v37) = *(_DWORD *)(result + 10);
        v38 = *(_DWORD *)(result + 14);
      }
      else
      {
        v36 = (char)result[2];
        if (v36 > 15)
          v36 += 1073741808;
        LODWORD(v37) = result[3];
        v38 = result[4];
      }
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v36);
      if ((int)v37 >= 1)
      {
        v37 = v37;
        v39 = 5 - v38;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v39++);
          --v37;
        }
        while (v37);
      }
      return result;
    case 10:
      if (v6 == 130)
      {
        v121 = *(_DWORD *)(result + 6);
        *(_DWORD *)v165 = *(_DWORD *)(result + 2);
        *(_DWORD *)&v165[4] = v121;
        *(_OWORD *)&v165[8] = *(_OWORD *)(result + 10);
        v165[24] = *(_DWORD *)(result + 26);
        v123 = *(_DWORD *)&v165[12];
        LODWORD(v122) = *(_DWORD *)&v165[8];
        *(_QWORD *)&v165[28] = *(_QWORD *)(result + 30);
      }
      else if (v6 == 128)
      {
        JSC::OpCallDirectEval::OpCallDirectEval((uint64_t)v165, (const unsigned __int16 *)result + 1);
        v121 = *(_DWORD *)&v165[4];
        LODWORD(v122) = *(_DWORD *)&v165[8];
        v123 = *(_DWORD *)&v165[12];
      }
      else
      {
        v119 = (char)result[1];
        v120 = v119 + 1073741808;
        if (v119 <= 15)
          v120 = (char)result[1];
        v121 = (char)result[2];
        if (v121 > 15)
          v121 += 1073741808;
        *(_DWORD *)v165 = v120;
        *(_DWORD *)&v165[4] = v121;
        LODWORD(v122) = result[3];
        v123 = result[4];
        *(_DWORD *)&v165[8] = v122;
        *(_DWORD *)&v165[12] = v123;
        v124.i32[0] = (char)result[5];
        v124.i32[1] = (char)result[6];
        *(int8x8_t *)&v165[16] = vbsl_s8((int8x8_t)vcgt_s32(v124, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v124, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v124);
        v165[24] = result[7];
        v125 = result[9];
        *(_DWORD *)&v165[28] = result[8];
        *(_DWORD *)&v165[32] = v125;
      }
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v121);
      if ((int)v122 >= 1)
      {
        v122 = v122;
        v126 = 5 - v123;
        do
        {
          (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v126++);
          --v122;
        }
        while (v122);
      }
      goto LABEL_172;
    case 11:
      if (v6 == 130)
      {
        v102 = *(int8x16_t *)(result + 2);
        *(int8x16_t *)v165 = v102;
        *(_QWORD *)&v165[16] = *(_QWORD *)(result + 18);
        v106 = *(_DWORD *)(result + 26);
LABEL_243:
        *(_DWORD *)&v165[24] = v106;
        v107 = v102.u32[1];
        goto LABEL_244;
      }
      if (v6 != 128)
      {
        a4.i32[0] = *(_DWORD *)(result + 1);
        v99 = (int16x4_t)vmovl_s8(a4).u64[0];
        v100 = vmovl_s16(v99);
        v101.i64[0] = 0xF0000000FLL;
        v101.i64[1] = 0xF0000000FLL;
        v102 = vbslq_s8((int8x16_t)vcgtq_s32(v100, v101), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v99), (int8x16_t)v100);
        *(int8x16_t *)v165 = v102;
        v103 = (char)result[5];
        v104 = v103 + 1073741808;
        if (v103 <= 15)
          v104 = (char)result[5];
        v105 = result[6];
        *(_DWORD *)&v165[16] = v104;
        *(_DWORD *)&v165[20] = v105;
        v106 = result[7];
        goto LABEL_243;
      }
      JSC::OpTailCallForwardArguments::OpTailCallForwardArguments((int *)v165, (const unsigned __int16 *)result + 1);
      v107 = *(_DWORD *)&v165[4];
LABEL_244:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v107);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[8]);
    case 12:
    case 13:
    case 96:
    case 100:
    case 124:
      v142 = JSC::OpNewAsyncGeneratorFuncExp::decode((JSC::OpNewAsyncGeneratorFuncExp *)result, a2);
      goto LABEL_313;
    case 14:
      v142 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(result);
      goto LABEL_313;
    case 15:
    case 21:
    case 29:
    case 47:
    case 67:
    case 89:
    case 114:
    case 117:
    case 119:
    case 121:
    case 126:
    case 127:
    case 129:
    case 131:
    case 132:
    case 133:
    case 135:
    case 136:
    case 137:
    case 138:
    case 142:
      return result;
    case 16:
    case 17:
    case 19:
    case 28:
    case 53:
    case 57:
    case 93:
    case 94:
    case 104:
    case 106:
    case 111:
    case 116:
    case 118:
    case 141:
    case 143:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 178:
    case 179:
    case 180:
    case 183:
    case 184:
    case 189:
    case 190:
    case 192:
      if (v6 == 128)
        goto LABEL_110;
      if (v6 != 130)
        goto LABEL_14;
      goto LABEL_271;
    case 18:
    case 25:
    case 26:
    case 45:
      if (v6 == 128)
        goto LABEL_247;
      if (v6 != 130)
        goto LABEL_6;
      goto LABEL_249;
    case 20:
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpProfileType>(result, (uint64_t)v165, (uint8x8_t)a4);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)v165);
    case 22:
    case 32:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
      if (v6 == 128)
        goto LABEL_225;
      if (v6 != 130)
        goto LABEL_24;
LABEL_355:
      v18 = *(_DWORD *)(result + 6);
      v22 = *(_DWORD *)(result + 10);
      goto LABEL_32;
    case 23:
      if (v6 == 128)
      {
        v23 = *((__int16 *)result + 2);
        if (v23 > 63)
          v23 += 1073741760;
        LODWORD(v24) = *((unsigned __int16 *)result + 3);
        v25 = *((unsigned __int16 *)result + 4);
      }
      else if (v6 == 130)
      {
        v23 = *(_DWORD *)(result + 6);
        LODWORD(v24) = *(_DWORD *)(result + 10);
        v25 = *(_DWORD *)(result + 14);
      }
      else
      {
        v23 = (char)result[2];
        if (v23 > 15)
          v23 += 1073741808;
        LODWORD(v24) = result[3];
        v25 = result[4];
      }
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v23);
      if ((int)v24 >= 1)
      {
        v24 = v24;
        v26 = 5 - v25;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v26++);
          --v24;
        }
        while (v24);
      }
      return result;
    case 24:
      if (v6 == 130)
      {
        v27 = *(_DWORD *)(result + 2);
        LODWORD(v28) = *(_DWORD *)(result + 6);
        v29 = *(_DWORD *)(result + 10);
      }
      else if (v6 == 128)
      {
        v27 = *((__int16 *)result + 1);
        if (v27 > 63)
          v27 += 1073741760;
        LODWORD(v28) = *((unsigned __int16 *)result + 2);
        v29 = *((unsigned __int16 *)result + 3);
      }
      else
      {
        v27 = (char)result[1];
        if (v27 > 15)
          v27 += 1073741808;
        LODWORD(v28) = result[2];
        v29 = result[3];
      }
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v27);
      if ((int)v28 >= 1)
      {
        v28 = v28;
        v30 = 5 - v29;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v30++);
          --v28;
        }
        while (v28);
      }
      return result;
    case 30:
      if (v6 == 128)
      {
        v72 = *((__int16 *)result + 2);
        if (v72 <= 63)
          v55 = *((__int16 *)result + 2);
        else
          v55 = v72 + 1073741760;
        v56 = *((unsigned __int16 *)result + 3);
      }
      else if (v6 == 130)
      {
        v55 = *(_DWORD *)(result + 6);
        v56 = *(_DWORD *)(result + 10);
      }
      else
      {
        v54 = (char)result[2];
        if (v54 <= 15)
          v55 = (char)result[2];
        else
          v55 = v54 + 1073741808;
        v56 = result[3];
      }
      if (v56 >= 1)
      {
        v57 = v56;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v55--);
          --v57;
        }
        while (v57);
      }
      return result;
    case 31:
      if (v6 == 130)
      {
        v112 = *(int8x16_t *)(result + 2);
        *(int8x16_t *)v165 = v112;
        *(_QWORD *)&v165[16] = *(_QWORD *)(result + 18);
        goto LABEL_262;
      }
      if (v6 != 128)
      {
        a4.i32[0] = *(_DWORD *)(result + 1);
        v109 = (int16x4_t)vmovl_s8(a4).u64[0];
        v110 = vmovl_s16(v109);
        v111.i64[0] = 0xF0000000FLL;
        v111.i64[1] = 0xF0000000FLL;
        v112 = vbslq_s8((int8x16_t)vcgtq_s32(v110, v111), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v109), (int8x16_t)v110);
        *(int8x16_t *)v165 = v112;
        v113 = result[6];
        *(_DWORD *)&v165[16] = result[5];
        *(_DWORD *)&v165[20] = v113;
LABEL_262:
        v114 = v112.u32[1];
        goto LABEL_263;
      }
      JSC::OpGetByValWithThis::OpGetByValWithThis((int *)v165, (const unsigned __int16 *)result + 1);
      v114 = *(_DWORD *)&v165[4];
LABEL_263:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v114);
      goto LABEL_264;
    case 33:
      if (v6 == 130)
        goto LABEL_372;
      if (v6 != 128)
        goto LABEL_86;
LABEL_252:
      v40 = *((__int16 *)result + 1);
      if (v40 > 63)
        v40 += 1073741760;
      v108 = *((__int16 *)result + 2);
      if (v108 <= 63)
        v42 = *((__int16 *)result + 2);
      else
        v42 = v108 + 1073741760;
      v43 = *((__int16 *)result + 3);
      goto LABEL_258;
    case 34:
    case 51:
      if (v6 == 130)
        goto LABEL_355;
      if (v6 != 128)
      {
LABEL_24:
        v18 = (char)result[2];
LABEL_25:
        if (v18 > 15)
          v18 += 1073741808;
        v19 = (char)result[3];
        goto LABEL_28;
      }
LABEL_225:
      v18 = *((__int16 *)result + 2);
LABEL_70:
      if (v18 > 63)
        v18 += 1073741760;
      v19 = *((__int16 *)result + 3);
      goto LABEL_73;
    case 35:
    case 36:
      if (v6 == 128)
        goto LABEL_252;
      if (v6 == 130)
      {
LABEL_372:
        v40 = *(_DWORD *)(result + 2);
        v42 = *(_DWORD *)(result + 6);
        v46 = *(_DWORD *)(result + 10);
        goto LABEL_96;
      }
LABEL_86:
      v40 = (char)result[1];
      if (v40 > 15)
        v40 += 1073741808;
      v41 = (char)result[2];
      if (v41 <= 15)
        v42 = (char)result[2];
      else
        v42 = v41 + 1073741808;
      v43 = (char)result[3];
      goto LABEL_92;
    case 37:
    case 59:
      if (v6 == 130)
        goto LABEL_367;
      if (v6 == 128)
        goto LABEL_182;
      goto LABEL_102;
    case 38:
      if (v6 == 128)
      {
        JSC::OpEnumeratorNext::OpEnumeratorNext((int *)v165, (const unsigned __int16 *)result + 1);
        v80 = *(_DWORD *)&v165[4];
      }
      else
      {
        if (v6 == 130)
        {
          v76 = *(int8x16_t *)(result + 2);
          *(int8x16_t *)v165 = v76;
          *(_QWORD *)&v165[16] = *(_QWORD *)(result + 18);
        }
        else
        {
          a4.i32[0] = *(_DWORD *)(result + 1);
          v73 = (int16x4_t)vmovl_s8(a4).u64[0];
          v74 = vmovl_s16(v73);
          v75.i64[0] = 0xF0000000FLL;
          v75.i64[1] = 0xF0000000FLL;
          v76 = vbslq_s8((int8x16_t)vcgtq_s32(v74, v75), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v73), (int8x16_t)v74);
          *(int8x16_t *)v165 = v76;
          v77 = (char)result[5];
          v78 = v77 + 1073741808;
          if (v77 <= 15)
            v78 = (char)result[5];
          v79 = result[6];
          *(_DWORD *)&v165[16] = v78;
          *(_DWORD *)&v165[20] = v79;
        }
        v80 = v76.u32[1];
      }
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v80);
      goto LABEL_192;
    case 39:
      if (v6 == 130)
      {
        *(_OWORD *)v165 = *(_OWORD *)(result + 2);
        *(_QWORD *)&v165[16] = *(_QWORD *)(result + 18);
        *(_DWORD *)&v165[24] = *(_DWORD *)(result + 26);
      }
      else if (v6 == 128)
      {
        JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty((int *)v165, (const unsigned __int16 *)result + 1);
      }
      else
      {
        JSC::OpEnumeratorInByVal::OpEnumeratorInByVal((int *)v165, result + 1);
      }
      goto LABEL_171;
    case 40:
      JSC::OpEnumeratorHasOwnProperty::decode((int *)result, (uint64_t)v165, a4);
      goto LABEL_171;
    case 41:
      if (v6 == 130)
      {
        *(_OWORD *)v165 = *(_OWORD *)(result + 2);
        *(_QWORD *)&v165[16] = *(_QWORD *)(result + 18);
        v165[24] = *(_DWORD *)(result + 26);
        *(_DWORD *)&v165[28] = *(_DWORD *)(result + 30);
      }
      else if (v6 == 128)
      {
        JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)v165, (const unsigned __int16 *)result + 1);
      }
      else
      {
        JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)v165, result + 1);
      }
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)v165);
      goto LABEL_171;
    case 42:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 102:
    case 112:
    case 115:
    case 122:
    case 139:
    case 181:
      if (v6 == 128)
        goto LABEL_99;
      if (v6 != 130)
        goto LABEL_21;
      goto LABEL_330;
    case 43:
      if (v6 == 130)
      {
        v71 = *(_OWORD *)(result + 18);
        *(_OWORD *)v165 = *(_OWORD *)(result + 2);
        *(_OWORD *)&v165[16] = v71;
      }
      else if (v6 == 128)
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)v165, (const unsigned __int16 *)result + 1);
      }
      else
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)v165, result + 1);
      }
LABEL_171:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[4]);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[8]);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[12]);
LABEL_172:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[16]);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[20]);
    case 44:
      if (v6 == 130)
      {
LABEL_249:
        v8 = *(_DWORD *)(result + 6);
        goto LABEL_10;
      }
      if (v6 != 128)
      {
LABEL_6:
        v8 = (char)result[2];
        goto LABEL_7;
      }
LABEL_247:
      v8 = *((__int16 *)result + 2);
      goto LABEL_248;
    case 46:
      if (v6 == 130)
        goto LABEL_231;
      if (v6 == 128)
        goto LABEL_144;
      goto LABEL_47;
    case 48:
    case 49:
    case 50:
    case 52:
    case 105:
    case 120:
    case 134:
    case 175:
    case 176:
    case 191:
    case 193:
    case 194:
      if (v6 == 130)
      {
LABEL_271:
        v14 = *(_DWORD *)(result + 6);
      }
      else
      {
        if (v6 == 128)
        {
LABEL_110:
          v14 = *((__int16 *)result + 2);
          v15 = v14 + 1073741760;
          v16 = v14 <= 63;
        }
        else
        {
LABEL_14:
          v14 = (char)result[2];
          v15 = v14 + 1073741808;
          v16 = v14 <= 15;
        }
        if (!v16)
          v14 = v15;
      }
      v17 = v14;
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v17);
    case 54:
    case 55:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpHasPrivateName>(result);
      goto LABEL_327;
    case 56:
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByIdWithThis>(result, (int8x8_t *)v165);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)v165);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[4]);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[12]);
    case 58:
      if (v6 == 130)
      {
        v139 = *(int8x16_t *)(result + 2);
        *(int8x16_t *)v165 = v139;
        v140 = *(_DWORD *)(result + 18);
        goto LABEL_310;
      }
      if (v6 != 128)
      {
        a4.i32[0] = *(_DWORD *)(result + 1);
        v136 = (int16x4_t)vmovl_s8(a4).u64[0];
        v137 = vmovl_s16(v136);
        v138.i64[0] = 0xF0000000FLL;
        v138.i64[1] = 0xF0000000FLL;
        v139 = vbslq_s8((int8x16_t)vcgtq_s32(v137, v138), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v136), (int8x16_t)v137);
        *(int8x16_t *)v165 = v139;
        LOBYTE(v140) = result[5];
LABEL_310:
        v165[16] = v140;
        v141 = v139.i32[0];
        goto LABEL_311;
      }
      JSC::OpPutByValWithThis::OpPutByValWithThis((uint64_t)v165, (const unsigned __int16 *)result + 1);
      v141 = *(_DWORD *)v165;
LABEL_311:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v141);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[4]);
LABEL_264:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[8]);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[12]);
    case 60:
    case 61:
      v154 = JSC::OpPutSetterById::decode((JSC::OpPutSetterById *)result, a2);
      v153 = v155;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v154);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), HIDWORD(v153));
    case 62:
      if (v6 == 128)
      {
        v40 = *((__int16 *)result + 1);
        if (v40 > 63)
          v40 += 1073741760;
        v149 = *((__int16 *)result + 4);
        if (v149 <= 63)
          v42 = *((__int16 *)result + 4);
        else
          v42 = v149 + 1073741760;
        v43 = *((__int16 *)result + 5);
LABEL_258:
        v44 = v43 + 1073741760;
        v45 = v43 <= 63;
      }
      else
      {
        if (v6 == 130)
        {
          v40 = *(_DWORD *)(result + 2);
          v42 = *(_DWORD *)(result + 14);
          v46 = *(_DWORD *)(result + 18);
          goto LABEL_96;
        }
        v40 = (char)result[1];
        if (v40 > 15)
          v40 += 1073741808;
        v135 = (char)result[4];
        if (v135 <= 15)
          v42 = (char)result[4];
        else
          v42 = v135 + 1073741808;
        v43 = (char)result[5];
LABEL_92:
        v44 = v43 + 1073741808;
        v45 = v43 <= 15;
      }
      if (v45)
        v46 = v43;
      else
        v46 = v44;
LABEL_96:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v40);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v42);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v46);
    case 63:
      v156 = JSC::OpPutGetterByVal::decode((JSC::OpPutGetterByVal *)result, a2);
      goto LABEL_348;
    case 64:
      v156 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutSetterByVal>(result);
LABEL_348:
      v158 = v156;
      v159 = v157;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v156);
      (*(void (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), HIDWORD(v158));
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), HIDWORD(v159));
    case 65:
      if (v6 == 128)
      {
        v127 = *(int16x4_t *)(result + 2);
        v128 = vmovl_s16(v127);
        v129.i64[0] = 0x3F0000003FLL;
        v129.i64[1] = 0x3F0000003FLL;
        v130 = (int8x16_t)vcgtq_s32(v128, v129);
        v131 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v127);
LABEL_297:
        v132 = vbslq_s8(v130, v131, (int8x16_t)v128);
        goto LABEL_298;
      }
      if (v6 != 130)
      {
        a4.i32[0] = *(_DWORD *)(result + 1);
        v147 = (int16x4_t)vmovl_s8(a4).u64[0];
        v128 = vmovl_s16(v147);
        v148.i64[0] = 0xF0000000FLL;
        v148.i64[1] = 0xF0000000FLL;
        v130 = (int8x16_t)vcgtq_s32(v128, v148);
        v131 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v147);
        goto LABEL_297;
      }
      v132 = *(int8x16_t *)(result + 2);
LABEL_298:
      v164 = v132.u32[2];
      v133 = v132.u32[1];
      v134 = v132.u32[3];
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v132.u32[0]);
      (*(void (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v133);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v164);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v134);
    case 66:
      JSC::OpDefineAccessorProperty::decode(result, (int8x16_t *)v165, a4);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)v165);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[4]);
LABEL_192:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[8]);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[12]);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[16]);
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
      if (v6 == 128)
      {
LABEL_144:
        v18 = *((__int16 *)result + 1);
        if (v18 > 63)
          v18 += 1073741760;
        v19 = *((__int16 *)result + 2);
LABEL_73:
        v20 = v19 + 1073741760;
        v21 = v19 <= 63;
      }
      else
      {
        if (v6 == 130)
        {
LABEL_231:
          v18 = *(_DWORD *)(result + 2);
          v22 = *(_DWORD *)(result + 6);
          goto LABEL_32;
        }
LABEL_47:
        v18 = (char)result[1];
        if (v18 > 15)
          v18 += 1073741808;
        v19 = (char)result[2];
LABEL_28:
        v20 = v19 + 1073741808;
        v21 = v19 <= 15;
      }
      if (v21)
        v22 = v19;
      else
        v22 = v20;
      goto LABEL_32;
    case 90:
    case 92:
      if (v6 == 130)
      {
        v8 = *(_DWORD *)(result + 10);
        goto LABEL_10;
      }
      if (v6 != 128)
      {
        v8 = (char)result[3];
        goto LABEL_7;
      }
      v8 = *((__int16 *)result + 3);
      goto LABEL_248;
    case 91:
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>(result, (uint64_t)v165);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(unsigned int *)&v165[32]);
    case 95:
      v142 = JSC::OpNewGeneratorFunc::decode((JSC::OpNewGeneratorFunc *)result, a2);
      goto LABEL_313;
    case 97:
    case 98:
      v142 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncFuncExp>(result);
      goto LABEL_313;
    case 99:
      v142 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncGeneratorFunc>(result);
LABEL_313:
      v12 = *(uint64_t (**)(uint64_t, unint64_t))a3;
      v143 = *(_QWORD *)(a3 + 8);
      v13 = HIDWORD(v142);
      goto LABEL_314;
    case 103:
      if (v6 == 128)
      {
        v152 = *((__int16 *)result + 2);
        if (v152 <= 63)
          v67 = *((__int16 *)result + 2);
        else
          v67 = v152 + 1073741760;
        v68 = *((unsigned __int16 *)result + 3);
      }
      else if (v6 == 130)
      {
        v67 = *(_DWORD *)(result + 6);
        v68 = *(_DWORD *)(result + 10);
      }
      else
      {
        v66 = (char)result[2];
        if (v66 <= 15)
          v67 = (char)result[2];
        else
          v67 = v66 + 1073741808;
        v68 = result[3];
      }
      if (v68 >= 1)
      {
        v69 = v68;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v67--);
          --v69;
        }
        while (v69);
      }
      return result;
    case 107:
      v144 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutToArguments>(result);
      v146 = v145;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v144);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v146);
    case 108:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPushWithScope>(result);
      goto LABEL_327;
    case 109:
      if (v6 == 128)
        goto LABEL_195;
      if (v6 != 130)
        goto LABEL_132;
LABEL_357:
      v58 = *(_DWORD *)(result + 6);
      v60 = *(_DWORD *)(result + 10);
      v62 = *(_DWORD *)(result + 14);
      goto LABEL_141;
    case 110:
    case 188:
      if (v6 == 130)
        goto LABEL_357;
      if (v6 == 128)
      {
LABEL_195:
        v58 = *((__int16 *)result + 2);
        if (v58 > 63)
          v58 += 1073741760;
        v81 = *((__int16 *)result + 3);
        if (v81 <= 63)
          v60 = *((__int16 *)result + 3);
        else
          v60 = v81 + 1073741760;
        v61 = *((__int16 *)result + 4);
        v62 = v61 + 1073741760;
        v63 = v61 <= 63;
      }
      else
      {
LABEL_132:
        v58 = (char)result[2];
        if (v58 > 15)
          v58 += 1073741808;
        v59 = (char)result[3];
        if (v59 <= 15)
          v60 = (char)result[3];
        else
          v60 = v59 + 1073741808;
        v61 = (char)result[4];
        v62 = v61 + 1073741808;
        v63 = v61 <= 15;
      }
      if (v63)
        v62 = v61;
LABEL_141:
      v35 = v62;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v58);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v60);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v35);
    case 113:
    case 182:
      if (v6 == 130)
      {
LABEL_330:
        v8 = *(_DWORD *)(result + 2);
      }
      else
      {
        if (v6 == 128)
        {
LABEL_99:
          v8 = *((__int16 *)result + 1);
LABEL_248:
          v9 = v8 + 1073741760;
          v10 = v8 <= 63;
        }
        else
        {
LABEL_21:
          v8 = (char)result[1];
LABEL_7:
          v9 = v8 + 1073741808;
          v10 = v8 <= 15;
        }
        if (!v10)
          v8 = v9;
      }
LABEL_10:
      v12 = *(uint64_t (**)(uint64_t, unint64_t))a3;
      v11 = *(_QWORD *)(a3 + 8);
      v13 = v8;
      return (unsigned __int8 *)v12(v11, v13);
    case 123:
      v160 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpLogShadowChickenTail>(result);
      v35 = HIDWORD(v160);
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v160);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v35);
    case 125:
      if (v6 == 130)
      {
        v82 = *(_DWORD *)(result + 2);
        v84 = *(_DWORD *)(result + 10);
      }
      else
      {
        if (v6 == 128)
        {
          v82 = *((__int16 *)result + 1);
          if (v82 > 63)
            v82 += 1073741760;
          v83 = *((__int16 *)result + 3);
LABEL_362:
          v84 = v83 + 1073741760;
          v85 = v83 <= 63;
        }
        else
        {
          v82 = (char)result[1];
          if (v82 > 15)
            v82 += 1073741808;
          v83 = (char)result[3];
LABEL_211:
          v84 = v83 + 1073741808;
          v85 = v83 <= 15;
        }
        if (v85)
          v84 = v83;
      }
LABEL_215:
      v35 = v84;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v82);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v35);
    case 128:
    case 130:
      __break(0xC471u);
      JUMPOUT(0x198136A44);
    case 140:
      if (v6 == 128)
      {
        v163 = *((__int16 *)result + 2);
        if (v163 <= 63)
          v116 = *((__int16 *)result + 2);
        else
          v116 = v163 + 1073741760;
        v117 = *((unsigned __int16 *)result + 3);
      }
      else if (v6 == 130)
      {
        v116 = *(_DWORD *)(result + 6);
        v117 = *(_DWORD *)(result + 10);
      }
      else
      {
        v115 = (char)result[2];
        if (v115 <= 15)
          v116 = (char)result[2];
        else
          v116 = v115 + 1073741808;
        v117 = result[3];
      }
      if (v117 >= 1)
      {
        v118 = v117;
        do
        {
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v116--);
          --v118;
        }
        while (v118);
      }
      return result;
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 154:
    case 156:
    case 187:
      if (v6 == 128)
        goto LABEL_203;
      if (v6 != 130)
        goto LABEL_61;
      goto LABEL_335;
    case 153:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(result);
LABEL_327:
      v146 = v151;
      (*(void (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), HIDWORD(HasPrivate));
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v146);
    case 155:
    case 186:
      if (v6 == 130)
      {
LABEL_335:
        v31 = *(_DWORD *)(result + 6);
        v33 = *(_DWORD *)(result + 10);
      }
      else
      {
        if (v6 == 128)
        {
LABEL_203:
          v31 = *((__int16 *)result + 2);
          if (v31 > 63)
            v31 += 1073741760;
          v32 = *((__int16 *)result + 3);
          v33 = v32 + 1073741760;
          v34 = v32 <= 63;
        }
        else
        {
LABEL_61:
          v31 = (char)result[2];
          if (v31 > 15)
            v31 += 1073741808;
          v32 = (char)result[3];
          v33 = v32 + 1073741808;
          v34 = v32 <= 15;
        }
        if (v34)
          v33 = v32;
      }
      v35 = v33;
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v31);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v35);
    case 164:
    case 165:
      if (v6 == 128)
      {
LABEL_182:
        v18 = *((__int16 *)result + 2);
        if (v18 > 63)
          v18 += 1073741760;
        v47 = *((__int16 *)result + 3);
        v48 = v47 + 1073741760;
        v49 = v47 <= 63;
      }
      else
      {
        if (v6 == 130)
        {
LABEL_367:
          v18 = *(_DWORD *)(result + 6);
          v22 = *(_DWORD *)(result + 10);
          goto LABEL_32;
        }
LABEL_102:
        v18 = (char)result[2];
        if (v18 > 15)
          v18 += 1073741808;
        v47 = (char)result[3];
        v48 = v47 + 1073741808;
        v49 = v47 <= 15;
      }
      if (v49)
        v22 = v47;
      else
        v22 = v48;
LABEL_32:
      (*(void (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v18);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), v22);
    case 174:
      IsUndefinedOr = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIsUndefinedOrNull>(result);
      goto LABEL_353;
    case 177:
      IsUndefinedOr = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpLogShadowChickenTail>(result);
LABEL_353:
      v17 = HIDWORD(IsUndefinedOr);
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unint64_t))a3)(*(_QWORD *)(a3 + 8), v17);
    case 185:
      v162 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIdentityWithProfile>(result);
      v12 = *(uint64_t (**)(uint64_t, unint64_t))a3;
      v143 = *(_QWORD *)(a3 + 8);
      v13 = v162;
LABEL_314:
      v11 = v143;
      return (unsigned __int8 *)v12(v11, v13);
    default:
      __break(0xC471u);
      JUMPOUT(0x198136BB0);
  }
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIdentityWithProfile>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v3 = *((unsigned __int16 *)a1 + 2);
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = a1[2];
  }
  return v2 | (unint64_t)(v3 << 32);
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpProfileType>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *result;
  if (v3 == 128)
  {
    v4 = *((__int16 *)result + 1);
    if (v4 > 63)
      v4 += 1073741760;
    *(_DWORD *)a2 = v4;
    *(uint32x4_t *)(a2 + 4) = vmovl_u16(*(uint16x4_t *)(result + 4));
    v5 = *((unsigned __int16 *)result + 6);
  }
  else
  {
    if (v3 == 130)
    {
      *(_OWORD *)a2 = *(_OWORD *)(result + 2);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 18);
      return result;
    }
    v6 = (char)result[1];
    if (v6 > 15)
      v6 += 1073741808;
    *(_DWORD *)a2 = v6;
    a3.i32[0] = *(_DWORD *)(result + 2);
    *(uint32x4_t *)(a2 + 4) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
    v5 = result[6];
  }
  *(_DWORD *)(a2 + 20) = v5;
  return result;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqNull>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *result;
  if (v2 == 128)
  {
    v5 = *((__int16 *)result + 1);
    if (v5 > 63)
      v5 += 1073741760;
    *(_DWORD *)a2 = v5;
    v4 = *((__int16 *)result + 2);
  }
  else if (v2 == 130)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 2);
    v4 = *(_DWORD *)(result + 6);
  }
  else
  {
    v3 = (char)result[1];
    if (v3 > 15)
      v3 += 1073741808;
    *(_DWORD *)a2 = v3;
    v4 = (char)result[2];
  }
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJless>@<X0>(unsigned __int8 *result@<X0>, int8x8_t *a2@<X8>)
{
  int v2;
  int32x2_t v3;
  __int32 v4;
  int32x2_t v5;

  v2 = *result;
  if (v2 == 128)
  {
    v5.i32[0] = *((__int16 *)result + 1);
    v5.i32[1] = *((__int16 *)result + 2);
    *a2 = vbsl_s8((int8x8_t)vcgt_s32(v5, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v5, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v5);
    v4 = *((__int16 *)result + 3);
  }
  else if (v2 == 130)
  {
    *a2 = *(int8x8_t *)(result + 2);
    v4 = *(_DWORD *)(result + 10);
  }
  else
  {
    v3.i32[0] = (char)result[1];
    v3.i32[1] = (char)result[2];
    *a2 = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = (char)result[3];
  }
  a2[1].i8[0] = 0;
  a2[1].i32[1] = 0;
  a2[2] = 0;
  a2[3].i32[0] = v4;
  return result;
}

int8x8_t *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqPtr>(int8x8_t *result, unsigned __int8 *a2)
{
  int v2;
  int32x2_t v3;
  __int32 v4;
  int32x2_t v5;

  v2 = *a2;
  if (v2 == 128)
  {
    v5.i32[0] = *((__int16 *)a2 + 1);
    v5.i32[1] = *((__int16 *)a2 + 2);
    *result = vbsl_s8((int8x8_t)vcgt_s32(v5, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v5, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v5);
    v4 = *((__int16 *)a2 + 3);
  }
  else if (v2 == 130)
  {
    *result = *(int8x8_t *)(a2 + 2);
    v4 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v3.i32[0] = (char)a2[1];
    v3.i32[1] = (char)a2[2];
    *result = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = (char)a2[3];
  }
  result[1].i8[0] = 0;
  result[1].i32[1] = 0;
  result[2] = 0;
  result[3].i32[0] = v4;
  return result;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJneqPtr>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int32x2_t v3;
  int v4;
  int v5;
  int v6;
  int32x2_t v7;
  int v8;

  v2 = *result;
  if (v2 == 130)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 2);
    v6 = *(_DWORD *)(result + 10);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = v6;
    v5 = *(_DWORD *)(result + 14);
  }
  else if (v2 == 128)
  {
    v7.i32[0] = *((__int16 *)result + 1);
    v7.i32[1] = *((__int16 *)result + 2);
    *(int8x8_t *)a2 = vbsl_s8((int8x8_t)vcgt_s32(v7, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v7, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v7);
    v8 = *((__int16 *)result + 3);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = v8;
    v5 = *((unsigned __int16 *)result + 4);
  }
  else
  {
    v3.i32[0] = (char)result[1];
    v3.i32[1] = (char)result[2];
    *(int8x8_t *)a2 = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = (char)result[3];
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = v4;
    v5 = result[4];
  }
  *(_DWORD *)(a2 + 32) = v5;
  return result;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpLogShadowChickenTail>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v4 = *((__int16 *)a1 + 2);
    LODWORD(v3) = v4 + 1073741760;
    v5 = v4 <= 63;
  }
  else
  {
    if (v1 == 130)
    {
      v2 = *(_DWORD *)(a1 + 2);
      v3 = *(unsigned int *)(a1 + 6);
      return v2 | (unint64_t)(v3 << 32);
    }
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v4 = (char)a1[2];
    LODWORD(v3) = v4 + 1073741808;
    v5 = v4 <= 15;
  }
  if (v5)
    v3 = v4;
  else
    v3 = v3;
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutToArguments>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v3 = *((unsigned __int16 *)a1 + 2);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = a1[2];
  }
  return v2 | (unint64_t)(v3 << 32);
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByIdWithThis>@<X0>(unsigned __int8 *result@<X0>, int8x8_t *a2@<X8>)
{
  int v2;
  int v3;
  int32x2_t v4;
  int v5;
  int32x2_t v6;
  int v7;

  v2 = *result;
  if (v2 == 128)
  {
    v4.i32[0] = *((__int16 *)result + 1);
    v4.i32[1] = *((__int16 *)result + 2);
    *a2 = vbsl_s8((int8x8_t)vcgt_s32(v4, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v4, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v4);
    v5 = *((__int16 *)result + 4);
    v3 = v5 + 1073741760;
    if (v5 <= 63)
      v3 = *((__int16 *)result + 4);
    a2[1].i32[0] = *((unsigned __int16 *)result + 3);
    a2[1].i32[1] = v3;
    LOBYTE(v3) = result[10];
  }
  else if (v2 == 130)
  {
    *(_OWORD *)a2->i8 = *(_OWORD *)(result + 2);
    v3 = *(_DWORD *)(result + 18);
  }
  else
  {
    v6.i32[0] = (char)result[1];
    v6.i32[1] = (char)result[2];
    *a2 = vbsl_s8((int8x8_t)vcgt_s32(v6, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v6, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v6);
    v7 = (char)result[4];
    v3 = v7 + 1073741808;
    if (v7 <= 15)
      v3 = (char)result[4];
    a2[1].i32[0] = result[3];
    a2[1].i32[1] = v3;
    LOBYTE(v3) = result[5];
  }
  a2[2].i8[0] = v3;
  return result;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutSetterByVal>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    LODWORD(v3) = *((__int16 *)a1 + 2);
    if ((int)v3 <= 63)
      v3 = v3;
    else
      v3 = (v3 + 1073741760);
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    LODWORD(v3) = (char)a1[2];
    if ((int)v3 <= 15)
      v3 = v3;
    else
      v3 = (v3 + 1073741808);
  }
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncFuncExp>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v6;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v6 = *((__int16 *)a1 + 2);
    LODWORD(v4) = v6 + 1073741760;
    if (v6 <= 63)
      v4 = v6;
    else
      v4 = v4;
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v4 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = (char)a1[2];
    LODWORD(v4) = v3 + 1073741808;
    if (v3 <= 15)
      v4 = v3;
    else
      v4 = v4;
  }
  return v2 | (unint64_t)(v4 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIsUndefinedOrNull>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v3 = *((__int16 *)a1 + 2);
    LODWORD(v4) = v3 + 1073741760;
    v5 = v3 <= 63;
  }
  else
  {
    if (v1 == 130)
    {
      v2 = *(_DWORD *)(a1 + 2);
      v4 = *(unsigned int *)(a1 + 6);
      return v2 | (unint64_t)(v4 << 32);
    }
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = (char)a1[2];
    LODWORD(v4) = v3 + 1073741808;
    v5 = v3 <= 15;
  }
  if (v5)
    v4 = v3;
  else
    v4 = v4;
  return v2 | (unint64_t)(v4 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v4 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    if (v1 == 128)
    {
      v2 = *((__int16 *)a1 + 1);
      if (v2 > 63)
        v2 += 1073741760;
      v3 = *((__int16 *)a1 + 2);
      LODWORD(v4) = v3 + 1073741760;
      v5 = v3 <= 63;
    }
    else
    {
      v2 = (char)a1[1];
      if (v2 > 15)
        v2 += 1073741808;
      v3 = (char)a1[2];
      LODWORD(v4) = v3 + 1073741808;
      v5 = v3 <= 15;
    }
    if (v5)
      v4 = v3;
    else
      v4 = v4;
  }
  return v2 | (unint64_t)(v4 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncGeneratorFunc>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v4 = *((__int16 *)a1 + 2);
    LODWORD(v3) = v4 + 1073741760;
    if (v4 <= 63)
      v3 = v4;
    else
      v3 = v3;
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v5 = (char)a1[2];
    LODWORD(v3) = v5 + 1073741808;
    if (v5 <= 15)
      v3 = v5;
    else
      v3 = v3;
  }
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpHasPrivateName>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    LODWORD(v3) = *((__int16 *)a1 + 2);
    if ((int)v3 <= 63)
      v3 = v3;
    else
      v3 = (v3 + 1073741760);
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    LODWORD(v3) = (char)a1[2];
    if ((int)v3 <= 15)
      v3 = v3;
    else
      v3 = (v3 + 1073741808);
  }
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    LODWORD(v3) = *((__int16 *)a1 + 2);
    if ((int)v3 <= 63)
      v3 = v3;
    else
      v3 = (v3 + 1073741760);
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    LODWORD(v3) = (char)a1[2];
    if ((int)v3 <= 15)
      v3 = v3;
    else
      v3 = (v3 + 1073741808);
  }
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPushWithScope>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    LODWORD(v3) = *((__int16 *)a1 + 2);
    if ((int)v3 <= 63)
      v3 = v3;
    else
      v3 = (v3 + 1073741760);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    LODWORD(v3) = (char)a1[2];
    if ((int)v3 <= 15)
      v3 = v3;
    else
      v3 = (v3 + 1073741808);
  }
  return v2 | (unint64_t)(v3 << 32);
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;

  v2 = *result;
  if (v2 == 130)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 2);
    v7 = *(_DWORD *)(result + 6);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = v7;
    v4 = *(_DWORD *)(result + 10);
  }
  else
  {
    if (v2 == 128)
    {
      *(_DWORD *)a2 = *((unsigned __int16 *)result + 1);
      v8 = *((__int16 *)result + 2);
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = v8;
      v4 = *((__int16 *)result + 3);
      v5 = v4 + 1073741760;
      v6 = v4 <= 63;
    }
    else
    {
      *(_DWORD *)a2 = result[1];
      v3 = (char)result[2];
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = v3;
      v4 = (char)result[3];
      v5 = v4 + 1073741808;
      v6 = v4 <= 15;
    }
    if (!v6)
      v4 = v5;
  }
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

void JSC::computeDefsForBytecodeIndexImpl(unsigned int a1, JSC::OpEnumeratorHasOwnProperty *this, int a3, uint64_t a4, int8x8_t a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int v27;
  int v28;
  int v29;
  unsigned __int32 v30;
  int16x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int16x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned __int32 v46;
  int16x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int v54;
  int v55;
  unsigned int HasPrivate;
  unsigned __int8 *v57[2];
  _BYTE v58[20];

  v7 = *(unsigned __int8 *)this;
  v8 = v7;
  if ((v7 | 2) == 0x82)
    v8 = *((unsigned __int8 *)this + 1);
  switch(v8)
  {
    case 0:
      if (v7 == 130)
      {
        *(_OWORD *)v57 = *(_OWORD *)((char *)this + 2);
        *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        v37 = *(_DWORD *)((char *)this + 26);
LABEL_59:
        *(_DWORD *)&v58[8] = v37;
        goto LABEL_48;
      }
      if (v7 != 128)
      {
        a5.i32[0] = *(_DWORD *)((char *)this + 1);
        v31 = (int16x4_t)vmovl_s8(a5).u64[0];
        v32 = vmovl_s16(v31);
        v33.i64[0] = 0xF0000000FLL;
        v33.i64[1] = 0xF0000000FLL;
        *(int8x16_t *)v57 = vbslq_s8((int8x16_t)vcgtq_s32(v32, v33), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v31), (int8x16_t)v32);
        v34 = *((char *)this + 5);
        v35 = v34 + 1073741808;
        if (v34 <= 15)
          v35 = *((char *)this + 5);
        v36 = *((unsigned __int8 *)this + 6);
        *(_DWORD *)v58 = v35;
        *(_DWORD *)&v58[4] = v36;
        v37 = *((unsigned __int8 *)this + 7);
        goto LABEL_59;
      }
      JSC::OpTailCallForwardArguments::OpTailCallForwardArguments((int *)v57, (const unsigned __int16 *)this + 1);
LABEL_48:
      if (a3 == 1)
      {
        v15 = LODWORD(v57[0]);
LABEL_24:
        (*(void (**)(_QWORD, uint64_t))a4)(*(_QWORD *)(a4 + 8), v15);
      }
      return;
    case 1:
      JSC::OpCallVarargs::decode(this, (int8x16_t *)v57, a5);
      goto LABEL_48;
    case 2:
      JSC::OpIteratorNext::decode(this, (uint64_t)v57, a5);
      if (a3 == 2)
        goto LABEL_23;
      if (a3 != 1)
        return;
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), LODWORD(v57[0]));
LABEL_23:
      v15 = HIDWORD(v57[0]);
      goto LABEL_24;
    case 3:
      JSC::OpConstructVarargs::decode((int *)this, (uint64_t)v57, a5);
      goto LABEL_48;
    case 4:
      JSC::OpIteratorOpen::decode(this, (uint32x4_t *)v57, a5);
      if (a3 == 1)
      {
        v22 = HIDWORD(v57[0]);
      }
      else
      {
        if (a3)
          return;
        v22 = v57[0];
      }
      v15 = v22;
      goto LABEL_24;
    case 8:
    case 9:
    case 16:
    case 17:
    case 18:
    case 19:
    case 22:
    case 23:
    case 25:
    case 26:
    case 28:
    case 30:
    case 32:
    case 45:
    case 53:
    case 93:
    case 94:
    case 103:
    case 104:
    case 106:
    case 109:
    case 111:
    case 116:
    case 140:
    case 141:
    case 142:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 154:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 178:
    case 179:
    case 180:
    case 181:
    case 183:
    case 187:
    case 189:
    case 190:
    case 192:
      if (v7 == 128)
        goto LABEL_19;
      if (v7 != 130)
        goto LABEL_6;
      goto LABEL_12;
    case 10:
      if (v7 == 130)
      {
        v41 = *(int8x16_t *)((char *)this + 2);
        *(int8x16_t *)v57 = v41;
        *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        v58[8] = *(_DWORD *)((char *)this + 26);
        *(_QWORD *)&v58[12] = *(_QWORD *)((char *)this + 30);
        goto LABEL_66;
      }
      if (v7 != 128)
      {
        v51.i32[0] = *((char *)this + 1);
        v51.i32[1] = *((char *)this + 2);
        v52 = vdup_n_s32(0x3FFFFFF0u);
        *(int8x8_t *)v41.i8 = vbsl_s8((int8x8_t)vcgt_s32(v51, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v51, v52), (int8x8_t)v51);
        v57[0] = (unsigned __int8 *)v41.i64[0];
        v53.i32[0] = *((char *)this + 5);
        v53.i32[1] = *((char *)this + 6);
        v54 = *((unsigned __int8 *)this + 4);
        LODWORD(v57[1]) = *((unsigned __int8 *)this + 3);
        HIDWORD(v57[1]) = v54;
        *(int8x8_t *)v58 = vbsl_s8((int8x8_t)vcgt_s32(v53, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v53, v52), (int8x8_t)v53);
        v58[8] = *((_BYTE *)this + 7);
        v55 = *((unsigned __int8 *)this + 9);
        *(_DWORD *)&v58[12] = *((unsigned __int8 *)this + 8);
        *(_DWORD *)&v58[16] = v55;
        goto LABEL_66;
      }
      JSC::OpCallDirectEval::OpCallDirectEval((uint64_t)v57, (const unsigned __int16 *)this + 1);
      v46 = (unsigned __int32)v57[0];
      goto LABEL_67;
    case 11:
      if (v7 == 130)
      {
        v41 = *(int8x16_t *)((char *)this + 2);
        *(int8x16_t *)v57 = v41;
        *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        v45 = *(_DWORD *)((char *)this + 26);
LABEL_65:
        *(_DWORD *)&v58[8] = v45;
        goto LABEL_66;
      }
      if (v7 != 128)
      {
        a5.i32[0] = *(_DWORD *)((char *)this + 1);
        v38 = (int16x4_t)vmovl_s8(a5).u64[0];
        v39 = vmovl_s16(v38);
        v40.i64[0] = 0xF0000000FLL;
        v40.i64[1] = 0xF0000000FLL;
        v41 = vbslq_s8((int8x16_t)vcgtq_s32(v39, v40), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v38), (int8x16_t)v39);
        *(int8x16_t *)v57 = v41;
        v42 = *((char *)this + 5);
        v43 = v42 + 1073741808;
        if (v42 <= 15)
          v43 = *((char *)this + 5);
        v44 = *((unsigned __int8 *)this + 6);
        *(_DWORD *)v58 = v43;
        *(_DWORD *)&v58[4] = v44;
        v45 = *((unsigned __int8 *)this + 7);
        goto LABEL_65;
      }
      JSC::OpTailCallForwardArguments::OpTailCallForwardArguments((int *)v57, (const unsigned __int16 *)this + 1);
      v46 = (unsigned __int32)v57[0];
      goto LABEL_67;
    case 12:
    case 13:
    case 96:
    case 100:
    case 124:
      HasPrivate = JSC::OpNewAsyncGeneratorFuncExp::decode(this, (const unsigned __int8 *)this);
      goto LABEL_77;
    case 14:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>((unsigned __int8 *)this);
      goto LABEL_77;
    case 15:
      if (v7 == 128)
      {
        v17 = *((__int16 *)this + 1);
        if (v17 > 63)
          v17 += 1073741760;
        v18 = *((__int16 *)this + 2);
        v19 = v18 + 1073741760;
        v20 = v18 <= 63;
      }
      else
      {
        if (v7 == 130)
        {
          v17 = *(_DWORD *)((char *)this + 2);
          v19 = *(_DWORD *)((char *)this + 6);
          goto LABEL_36;
        }
        v17 = *((char *)this + 1);
        if (v17 > 15)
          v17 += 1073741808;
        v18 = *((char *)this + 2);
        v19 = v18 + 1073741808;
        v20 = v18 <= 15;
      }
      if (v20)
        v19 = v18;
LABEL_36:
      v21 = v19;
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), v17);
      (*(void (**)(_QWORD, uint64_t))a4)(*(_QWORD *)(a4 + 8), v21);
      return;
    case 29:
    case 42:
    case 57:
    case 118:
    case 136:
    case 143:
    case 150:
    case 151:
    case 152:
    case 166:
    case 167:
    case 169:
    case 184:
      if (v7 == 128)
        goto LABEL_19;
      if (v7 != 130)
        goto LABEL_6;
LABEL_12:
      v9 = *(_DWORD *)((char *)this + 2);
      goto LABEL_9;
    case 31:
      if (v7 == 130)
      {
        v41 = *(int8x16_t *)((char *)this + 2);
        *(int8x16_t *)v57 = v41;
        *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        goto LABEL_66;
      }
      if (v7 != 128)
      {
        a5.i32[0] = *(_DWORD *)((char *)this + 1);
        v47 = (int16x4_t)vmovl_s8(a5).u64[0];
        v48 = vmovl_s16(v47);
        v49.i64[0] = 0xF0000000FLL;
        v49.i64[1] = 0xF0000000FLL;
        v41 = vbslq_s8((int8x16_t)vcgtq_s32(v48, v49), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v47), (int8x16_t)v48);
        *(int8x16_t *)v57 = v41;
        v50 = *((unsigned __int8 *)this + 6);
        *(_DWORD *)v58 = *((unsigned __int8 *)this + 5);
        *(_DWORD *)&v58[4] = v50;
LABEL_66:
        v46 = v41.i32[0];
        goto LABEL_67;
      }
      JSC::OpGetByValWithThis::OpGetByValWithThis((int *)v57, (const unsigned __int16 *)this + 1);
      v46 = (unsigned __int32)v57[0];
LABEL_67:
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), v46);
      return;
    case 34:
    case 37:
    case 44:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 59:
    case 105:
    case 110:
    case 119:
    case 132:
    case 133:
    case 134:
    case 135:
    case 137:
    case 138:
    case 155:
    case 175:
    case 176:
    case 182:
    case 186:
    case 188:
    case 191:
    case 193:
    case 194:
      if (v7 == 130)
        goto LABEL_12;
      if (v7 == 128)
      {
LABEL_19:
        v9 = *((__int16 *)this + 1);
        v10 = v9 + 1073741760;
        v11 = v9 <= 63;
      }
      else
      {
LABEL_6:
        v9 = *((char *)this + 1);
        v10 = v9 + 1073741808;
        v11 = v9 <= 15;
      }
      if (!v11)
        v9 = v10;
LABEL_9:
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), v9);
      return;
    case 38:
      if (v7 == 128)
      {
        JSC::OpEnumeratorNext::OpEnumeratorNext((int *)v57, (const unsigned __int16 *)this + 1);
        v30 = (unsigned __int32)v57[0];
      }
      else
      {
        if (v7 == 130)
        {
          v26 = *(int8x16_t *)((char *)this + 2);
          *(int8x16_t *)v57 = v26;
          *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        }
        else
        {
          a5.i32[0] = *(_DWORD *)((char *)this + 1);
          v23 = (int16x4_t)vmovl_s8(a5).u64[0];
          v24 = vmovl_s16(v23);
          v25.i64[0] = 0xF0000000FLL;
          v25.i64[1] = 0xF0000000FLL;
          v26 = vbslq_s8((int8x16_t)vcgtq_s32(v24, v25), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v23), (int8x16_t)v24);
          *(int8x16_t *)v57 = v26;
          v27 = *((char *)this + 5);
          v28 = v27 + 1073741808;
          v29 = *((unsigned __int8 *)this + 6);
          if (v27 <= 15)
            v28 = *((char *)this + 5);
          *(_DWORD *)v58 = v28;
          *(_DWORD *)&v58[4] = v29;
        }
        v30 = v26.i32[0];
      }
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), v30);
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), HIDWORD(v57[0]));
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), LODWORD(v57[1]));
      return;
    case 39:
      if (v7 == 130)
      {
        *(_OWORD *)v57 = *(_OWORD *)((char *)this + 2);
        *(_QWORD *)v58 = *(_QWORD *)((char *)this + 18);
        *(_DWORD *)&v58[8] = *(_DWORD *)((char *)this + 26);
      }
      else if (v7 == 128)
      {
        JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty((int *)v57, (const unsigned __int16 *)this + 1);
      }
      else
      {
        JSC::OpEnumeratorInByVal::OpEnumeratorInByVal((int *)v57, (const unsigned __int8 *)this + 1);
      }
      goto LABEL_27;
    case 40:
      JSC::OpEnumeratorHasOwnProperty::decode((int *)this, (uint64_t)v57, a5);
      goto LABEL_27;
    case 43:
      if (v7 == 130)
      {
        v16 = *(_OWORD *)((char *)this + 18);
        *(_OWORD *)v57 = *(_OWORD *)((char *)this + 2);
        *(_OWORD *)v58 = v16;
      }
      else if (v7 == 128)
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)v57, (const unsigned __int16 *)this + 1);
      }
      else
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)v57, (const unsigned __int8 *)this + 1);
      }
LABEL_27:
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), LODWORD(v57[0]));
      return;
    case 54:
    case 55:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpHasPrivateName>((unsigned __int8 *)this);
      goto LABEL_77;
    case 95:
      HasPrivate = JSC::OpNewGeneratorFunc::decode(this, (const unsigned __int8 *)this);
      goto LABEL_77;
    case 97:
    case 98:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncFuncExp>((unsigned __int8 *)this);
      goto LABEL_77;
    case 99:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncGeneratorFunc>((unsigned __int8 *)this);
      goto LABEL_77;
    case 108:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPushWithScope>((unsigned __int8 *)this);
      goto LABEL_77;
    case 128:
    case 130:
      __break(0xC471u);
      JUMPOUT(0x1981380E0);
    case 131:
      if (a1)
      {
        v12 = -(uint64_t)a1;
        v13 = a1 - 1;
        do
        {
          (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), v12);
          LODWORD(v12) = v12 + 1;
        }
        while ((_DWORD)v13--);
      }
      return;
    case 153:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>((unsigned __int8 *)this);
      goto LABEL_77;
    case 174:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIsUndefinedOrNull>((unsigned __int8 *)this);
      goto LABEL_77;
    case 177:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpLogShadowChickenTail>((unsigned __int8 *)this);
      goto LABEL_77;
    case 185:
      HasPrivate = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpIdentityWithProfile>((unsigned __int8 *)this);
LABEL_77:
      (*(void (**)(_QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), HasPrivate);
      return;
    default:
      return;
  }
}

void JSC::CallLinkInfo::~CallLinkInfo(JSC::CallLinkInfo *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  v10 = *((_QWORD *)this + 7);
  if (v10)
  {
    v17 = *(unsigned int *)(v10 + 44);
    if ((_DWORD)v17)
    {
      v18 = -24 * v17;
      do
      {
        *(_BYTE *)(v10 + 19 + v18) = 1;
        v18 += 24;
      }
      while (v18);
    }
    *((_QWORD *)this + 7) = 0;
    v19 = *(_DWORD *)(v10 + 16) - 1;
    *(_DWORD *)(v10 + 16) = v19;
    if (!v19)
    {
      switch(*(_BYTE *)(v10 + 24))
      {
        case 0:
          goto LABEL_20;
        case 1:
        case 2:
          v20 = *(_BYTE *)(v10 + 40);
          if ((v20 & 0xA) == 8)
            *(_BYTE *)(v10 + 40) = v20 | 2;
          else
LABEL_20:
            JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v10, a2, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
        case 4:
          JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v10, a2, a3, a4, a5, a6, a7, a8, a9);
          break;
        case 5:
          JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v10, a2, a3, a4, a5, a6, a7, a8, a9);
          break;
        default:
          break;
      }
    }
  }
  v11 = *((_QWORD *)this + 9);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 16) - 1;
    *(_DWORD *)(v12 + 16) = v13;
    if (!v13)
    {
      switch(*(_BYTE *)(v12 + 24))
      {
        case 0:
          goto LABEL_9;
        case 1:
          JSC::GCAwareJITStubRoutine::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutine *)v12, a2, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v14 = *(_BYTE *)(v12 + 40);
          if ((v14 & 0xA) == 8)
            *(_BYTE *)(v12 + 40) = v14 | 2;
          else
LABEL_9:
            JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v12, a2, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
        case 4:
          JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v12, a2, a3, a4, a5, a6, a7, a8, a9);
          break;
        case 5:
          JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v12, a2, a3, a4, a5, a6, a7, a8, a9);
          break;
        default:
          break;
      }
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *(_QWORD *)this;
    *v15 = *(_QWORD *)this;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

void JSC::CallLinkInfo::unlinkOrUpgradeImpl(JSC::CallLinkInfo *this, JSC::VM *a2, JSC::CodeBlock *a3, JSC::CodeBlock *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  _BOOL8 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  JSC::JITStubRoutine *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  const void *v37;

  v13 = (_QWORD *)*((_QWORD *)this + 1);
  if (v13)
  {
    v14 = *(_QWORD *)this;
    *v13 = *(_QWORD *)this;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if (HIBYTE(word_1ECF4C286))
  {
    v37 = this;
    WTF::dataLog<char [25],WTF::RawPointer,char [2]>("Unlinking CallLinkInfo: ", &v37, "\n");
  }
  v15 = *(unsigned __int16 *)((char *)this + 17);
  v16 = (v15 >> 9) & 7;
  if ((_DWORD)v16 == 1)
  {
    if (a4 && *((JSC::CodeBlock **)this + 3) == a3)
    {
      v17 = (unsigned int *)*((_QWORD *)a3 + 15);
      if (v17)
      {
        v18 = v17 + 2;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      v20 = v17 + 2;
      v21 = *((_QWORD *)this + 4) != (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v17 + 40))(v17, 0);
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
      }
      v24 = (unsigned int *)*((_QWORD *)a4 + 15);
      if (v24)
      {
        v25 = v24 + 2;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
      v27 = v24 + 2;
      v28 = (*(uint64_t (**)(unsigned int *, _BOOL8))(*(_QWORD *)v24 + 40))(v24, v21);
      do
      {
        v29 = __ldaxr(v27);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v27));
      if (!v30)
      {
        atomic_store(1u, v24 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 32))(v24);
      }
      *((_QWORD *)this + 3) = a4;
      *((_QWORD *)this + 4) = v28;
      JSC::CodeBlock::linkIncomingCall((uint64_t)a4, 0, this);
      return;
    }
    goto LABEL_24;
  }
  if ((_DWORD)v16 == 2)
  {
LABEL_24:
    if ((_BYTE)qword_1ECF4C789 || (v15 & 0x100) != 0)
    {
      v31 = (JSC::JITStubRoutine *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 3) = 0;
      *(_WORD *)((char *)this + 17) = v15 & 0xFFFE;
      if (v31)
      {
        v33 = *((unsigned int *)v31 + 11);
        if ((_DWORD)v33)
        {
          v34 = -24 * v33;
          do
          {
            *((_BYTE *)v31 + v34 + 19) = 1;
            v34 += 24;
          }
          while (v34);
        }
        *((_QWORD *)this + 7) = 0;
        v35 = *((_DWORD *)v31 + 4) - 1;
        *((_DWORD *)v31 + 4) = v35;
        if (!v35)
          JSC::JITStubRoutine::observeZeroRefCount(v31, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      }
      v32 = (_QWORD *)*((_QWORD *)this + 1);
      if (v32)
      {
        v36 = *(_QWORD *)this;
        *v32 = *(_QWORD *)this;
        *(_QWORD *)(v36 + 8) = v32;
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
      }
      *(_WORD *)((char *)this + 17) &= 0xF1FFu;
    }
    else
    {
      JSC::CallLinkInfo::setVirtualCall(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    }
  }
  if (*((_QWORD *)this + 1))
    __break(0xC471u);
}

void JSC::CallLinkInfo::visitWeak(JSC::CallLinkInfo *this, JSC::VM *a2, void *a3, uint8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unsigned int *v26;
  JSC::CallLinkInfo **v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL4 v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const void *v58;
  WTF *v59;
  int v60;
  uint64_t v61;
  JSC::CallVariant **v62[5];
  char v63;
  const void *v64;
  uint64_t v65;

  v11 = (*(unsigned __int16 *)((char *)this + 17) >> 9) & 7;
  if (v11 == 1)
  {
    v19 = *((_QWORD *)this + 5);
    if (!v19)
      goto LABEL_21;
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_21;
    }
    else if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
           && ((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
    {
      goto LABEL_21;
    }
    if (*(_BYTE *)(v19 + 5) == 26)
    {
      if (BYTE1(qword_1ECF4C332))
      {
        v62[0] = *((JSC::CallVariant ***)this + 5);
        v40 = v19;
        v41 = *(_QWORD *)(v19 + 24);
        if ((v41 & 1) != 0)
          v41 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 48);
        v42 = *((unsigned __int8 *)this + 17) >> 4;
        v44 = v42 == 8 || (v42 - 3) < 2;
        LODWORD(v59) = JSC::ExecutableBase::hashFor(v41, v44);
        WTF::dataLog<char [18],WTF::RawPointer,char [3],JSC::CodeBlockHash,char [3],char [2]>("Clearing call to ", (const void **)v62, " (", &v59, ").", "\n");
        v19 = v40;
      }
      v24 = *(_QWORD *)(v19 + 24);
      if ((v24 & 1) != 0)
        v24 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if ((v24 & 8) != 0)
      {
        if ((*(_BYTE *)(v24 - 79) & 1) != 0)
        {
LABEL_44:
          v25 = 2;
          goto LABEL_45;
        }
      }
      else if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
             && ((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFC000) + 8 * ((v24 >> 10) & 0xF) + 0x28) >> (v24 >> 4)) & 1) != 0)
      {
        goto LABEL_44;
      }
      v25 = 4;
    }
    else
    {
      if (BYTE1(qword_1ECF4C332))
      {
        v62[0] = *((JSC::CallVariant ***)this + 5);
        WTF::dataLog<char [18],WTF::RawPointer,char [2],char [2]>("Clearing call to ", (const void **)v62, ".", "\n");
      }
      v25 = 4;
    }
LABEL_45:
    *(_WORD *)((char *)this + 17) |= v25;
    LODWORD(v15) = *((unsigned __int8 *)this + 16);
    if (*((_BYTE *)this + 16))
    {
      if ((_DWORD)v15 == 1)
      {
        JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(this, a2, 0, 0, a6, a7, a8, a9, a4);
      }
      else if ((_DWORD)v15 == 2)
      {
        v30 = (_QWORD *)*((_QWORD *)this + 1);
        if (v30)
        {
          v31 = *(_QWORD *)this;
          *v30 = *(_QWORD *)this;
          *(_QWORD *)(v31 + 8) = v30;
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
        }
        v32 = (_QWORD *)((char *)this + 24);
        if (*((_QWORD *)this + 3))
        {
          if (HIBYTE(word_1ECF4C286))
          {
            v62[0] = (JSC::CallVariant **)this;
            WTF::dataLog<char [25],WTF::RawPointer,char [2]>("Unlinking CallLinkInfo: ", (const void **)v62, "\n");
            v54 = (_QWORD *)*((_QWORD *)this + 1);
            if (v54)
            {
              v55 = *(_QWORD *)this;
              *v54 = *(_QWORD *)this;
              *(_QWORD *)(v55 + 8) = v54;
              *(_QWORD *)this = 0;
              *((_QWORD *)this + 1) = 0;
            }
          }
          if ((*((_BYTE *)this + 17) & 0x10) != 0)
          {
            *v32 = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            JSC::DirectCallLinkInfo::initialize(this, (uint64_t)a2, a3);
            v33 = *((_QWORD *)this + 1);
            *v32 = 0;
            *((_QWORD *)this + 4) = 0;
            if (v33)
            {
              __break(0xC471u);
              JUMPOUT(0x198138D54);
            }
          }
        }
      }
      else
      {
LABEL_93:
        if ((_DWORD)v15 == 3)
        {
          v38 = (_QWORD *)*((_QWORD *)this + 1);
          if (v38)
          {
            v39 = *(_QWORD *)this;
            *v38 = *(_QWORD *)this;
            *(_QWORD *)(v39 + 8) = v38;
            *(_QWORD *)this = 0;
            *((_QWORD *)this + 1) = 0;
          }
          *((_QWORD *)this + 27) = 0;
        }
      }
    }
    else
    {
      JSC::CallLinkInfo::unlinkOrUpgradeImpl(this, a2, 0, 0, a6, a7, a8, a9, a4);
    }
    goto LABEL_21;
  }
  if (v11 != 2)
    goto LABEL_21;
  v12 = *((_QWORD *)this + 7);
  if (!v12)
    goto LABEL_21;
  v13 = *(unsigned __int8 *)(v12 + 24);
  if (v13 == 5)
  {
    v26 = *(unsigned int **)(v12 + 104);
    if (v26)
      v27 = (JSC::CallLinkInfo **)(v26 + 2);
    else
      v27 = 0;
    if (v26)
      v28 = (uint64_t)&v26[2 * *v26 + 2];
    else
      v28 = 0;
    while (v27 != (JSC::CallLinkInfo **)v28)
    {
      if (*v27)
        JSC::CallLinkInfo::visitWeak(*v27, a2);
      ++v27;
    }
    goto LABEL_21;
  }
  if (v13 == 4)
  {
    if ((JSC::MarkingGCAwareJITStubRoutine::visitWeakImpl((JSC::MarkingGCAwareJITStubRoutine *)v12, a2) & 1) == 0)
      goto LABEL_53;
    goto LABEL_21;
  }
  if (v13 != 2)
    goto LABEL_21;
  v14 = (*(_DWORD *)(v12 + 48) - 1);
  if (*(_DWORD *)(v12 + 48) == 1)
    goto LABEL_21;
  v15 = 0;
  v16 = v12 + 86;
  v17 = 1;
  do
  {
    if (v15 >= *(unsigned int *)(v12 + 48))
    {
      __break(1u);
      goto LABEL_93;
    }
    v18 = *(_QWORD *)(v16 - 14);
    if (v18)
    {
      if ((v18 & 8) != 0)
      {
        if ((*(_BYTE *)(v18 - 79) & 1) != 0)
          goto LABEL_14;
LABEL_68:
        v17 = 0;
        *(_QWORD *)(v16 - 14) = 0;
        *(_DWORD *)(v16 - 6) = 0;
        *(_WORD *)(v16 - 2) = 256;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_WORD *)(v16 + 16) = 0;
        goto LABEL_14;
      }
      if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
        || ((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      {
        goto LABEL_68;
      }
    }
    else
    {
      v17 = 0;
    }
LABEL_14:
    ++v15;
    v16 += 32;
  }
  while (v14 != v15);
  if ((v17 & 1) != 0)
    goto LABEL_21;
LABEL_53:
  if (BYTE1(qword_1ECF4C332))
  {
    JSC::CallLinkInfo::codeOrigin((uint64_t)this, &v65);
    v64 = this;
    JSC::PolymorphicCallStubRoutine::variants(*((_QWORD *)this + 7), v47, v48, v49, v50, v51, (uint64_t)&v59);
    v62[0] = &v59;
    v62[1] = (JSC::CallVariant **)", ";
    v62[2] = (JSC::CallVariant **)3;
    v62[3] = (JSC::CallVariant **)&str_36_3;
    v62[4] = (JSC::CallVariant **)1;
    v63 = 0;
    v58 = (const void *)*((_QWORD *)this + 7);
    WTF::dataLog<char [4],JSC::CodeOrigin,char [3],WTF::RawPointer,char [25],WTF::ListDump<WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [16],WTF::RawPointer,char [2],char [2]>("At ", (JSC::CodeOrigin *)&v65, ", ", &v64, ": clearing call stub to ", v62, ", stub routine ", &v58, ".", "\n");
    v53 = v59;
    if (&v61 != (uint64_t *)v59 && v59)
    {
      v59 = 0;
      v60 = 0;
      WTF::fastFree((unint64_t)v53, a2, (uint64_t)a3, v52, a6, a7, a8, a9);
    }
    if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v65 & 0xFFFFFFFF8, a2, (uint64_t)a3, v52, a6, a7, a8, a9);
  }
  v29 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    switch(v29)
    {
      case 1:
        JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(this, a2, 0, 0, a6, a7, a8, a9, a4);
        break;
      case 2:
        v34 = (_QWORD *)*((_QWORD *)this + 1);
        if (v34)
        {
          v35 = *(_QWORD *)this;
          *v34 = *(_QWORD *)this;
          *(_QWORD *)(v35 + 8) = v34;
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
        }
        v36 = (_QWORD *)((char *)this + 24);
        if (*((_QWORD *)this + 3))
        {
          if (HIBYTE(word_1ECF4C286))
          {
            v62[0] = (JSC::CallVariant **)this;
            WTF::dataLog<char [25],WTF::RawPointer,char [2]>("Unlinking CallLinkInfo: ", (const void **)v62, "\n");
            v56 = (_QWORD *)*((_QWORD *)this + 1);
            if (v56)
            {
              v57 = *(_QWORD *)this;
              *v56 = *(_QWORD *)this;
              *(_QWORD *)(v57 + 8) = v56;
              *(_QWORD *)this = 0;
              *((_QWORD *)this + 1) = 0;
            }
          }
          if ((*((_BYTE *)this + 17) & 0x10) != 0)
          {
            *v36 = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            JSC::DirectCallLinkInfo::initialize(this, (uint64_t)a2, a3);
            v37 = *((_QWORD *)this + 1);
            *v36 = 0;
            *((_QWORD *)this + 4) = 0;
            if (v37)
            {
              __break(0xC471u);
              JUMPOUT(0x198138DF4);
            }
          }
        }
        break;
      case 3:
        v45 = (_QWORD *)*((_QWORD *)this + 1);
        if (v45)
        {
          v46 = *(_QWORD *)this;
          *v45 = *(_QWORD *)this;
          *(_QWORD *)(v46 + 8) = v45;
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
        }
        *((_QWORD *)this + 27) = 0;
        break;
    }
  }
  else
  {
    JSC::CallLinkInfo::unlinkOrUpgradeImpl(this, a2, 0, 0, a6, a7, a8, a9, a4);
  }
  *(_WORD *)((char *)this + 17) |= 4u;
LABEL_21:
  v20 = *((_QWORD *)this + 6);
  if (v20)
  {
    if ((v20 & 8) != 0)
    {
      if ((*(_BYTE *)(v20 - 79) & 1) != 0)
        return;
    }
    else if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
           && ((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
    {
      return;
    }
    v21 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v21 + 5) == 26)
    {
      v22 = *(_QWORD *)(v21 + 24);
      if ((v22 & 1) != 0)
        v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if ((v22 & 8) != 0)
      {
        if ((*(_BYTE *)(v22 - 79) & 1) != 0)
        {
LABEL_32:
          v23 = 2;
LABEL_33:
          *(_WORD *)((char *)this + 17) |= v23;
          *((_QWORD *)this + 6) = 0;
          return;
        }
      }
      else if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
             && ((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
      {
        goto LABEL_32;
      }
    }
    v23 = 4;
    goto LABEL_33;
  }
}

uint64_t JSC::CallLinkInfo::codeOrigin@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(this + 72);
  if ((v2 & 1) != 0)
  {
    this = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v3 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v3 != 0x3FFFFFFF)
        ? (v4 = (_DWORD)v3 == -1)
        : (v4 = 1),
          v4))
    {
      v5 = 2;
    }
    else if (v3 >> 28)
    {
      v6 = this;
      v8 = a2;
      v7 = v3;
      this = WTF::fastMalloc((WTF *)0x10);
      a2 = v8;
      *(_QWORD *)this = v6;
      *(_DWORD *)(this + 8) = v7;
      v5 = 1;
    }
    else
    {
      v5 = this;
      this = v3 << 36;
    }
    v2 = this | v5;
  }
  *a2 = v2;
  return this;
}

void JSC::DataOnlyCallLinkInfo::initialize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  char v9;
  __int16 v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v9 = a4;
  *(_QWORD *)(a1 + 64) = a3;
  v12 = *(_WORD *)(a1 + 17) & 0xFEFF;
  *(_WORD *)(a1 + 17) = v12;
  v13 = (uint64_t *)(a1 + 72);
  if ((uint64_t *)(a1 + 72) != a5)
  {
    v15 = *v13;
    if ((*v13 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    v16 = *a5;
    if ((*a5 & 1) != 0)
    {
      v17 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v18 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
          ? (v19 = (_DWORD)v18 == -1)
          : (v19 = 1),
            v19))
      {
        v20 = 2;
      }
      else if (v18 >> 28)
      {
        v21 = v18;
        v22 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = v17;
        *(_DWORD *)(v22 + 8) = v21;
        v20 = 1;
        v17 = v22;
      }
      else
      {
        v20 = v17;
        v17 = v18 << 36;
      }
      v16 = v17 | v20;
    }
    *(_QWORD *)(a1 + 72) = v16;
    v12 = *(_WORD *)(a1 + 17);
  }
  *(_WORD *)(a1 + 17) = v12 & 0xF10F | (16 * (v9 & 0xF));
  if (!(_BYTE)qword_1ECF4C789)
    JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)a1, (JSC::VM *)a2, a3, a4, (uint64_t)a5, a6, a7, a8, a9);
}

void JSC::CallLinkInfo::setVirtualCall(JSC::CallLinkInfo *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::JITStubRoutine *v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;

  v11 = (JSC::JITStubRoutine *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *(_WORD *)((char *)this + 17) &= ~1u;
    v25 = *((unsigned int *)v11 + 11);
    if ((_DWORD)v25)
    {
      v26 = -24 * v25;
      do
      {
        *((_BYTE *)v11 + v26 + 19) = 1;
        v26 += 24;
      }
      while (v26);
    }
    *((_QWORD *)this + 7) = 0;
    v27 = *((_DWORD *)v11 + 4) - 1;
    *((_DWORD *)v11 + 4) = v27;
    if (!v27)
      JSC::JITStubRoutine::observeZeroRefCount(v11, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    *(_WORD *)((char *)this + 17) &= ~1u;
  }
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  if (v12)
  {
    v28 = *(_QWORD *)this;
    *v12 = *(_QWORD *)this;
    *(_QWORD *)(v28 + 8) = v12;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v13 = *(_WORD *)((char *)this + 17);
  *(_WORD *)((char *)this + 17) = v13 & 0xF1FF;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 3) = 0;
  v14 = 0;
  switch(v13 >> 4)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1981393A0);
    case 1:
    case 2:
    case 7:
      break;
    case 3:
    case 4:
    case 8:
      v14 = 2;
      break;
    case 5:
    case 6:
    case 9:
      v14 = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198139380);
  }
  JSC::VM::getCTIVirtualCall((uint64_t)a2, v14, a3, a4, a5, a6, a7, a8, &v37);
  v22 = v38;
  *((_QWORD *)this + 4) = v37;
  v38 = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  *(_WORD *)((char *)this + 17) = *(_WORD *)((_BYTE *)this + 17) & 0xF1F7 | 0x608;
}

JSC::JSCell *JSC::CallLinkInfo::retrieveCaller(JSC::CallLinkInfo *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSCell *v18;

  v8 = 0;
  if (!a2 || *((_BYTE *)a2 + 5) != 18)
    return v8;
  v9 = *((_QWORD *)this + 9);
  if ((v9 & 1) != 0)
  {
    v13 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v14 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
        ? (v15 = (_DWORD)v14 == -1)
        : (v15 = 1),
          v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v18 = a2;
      v17 = WTF::fastMalloc((WTF *)0x10);
      a2 = v18;
      *(_QWORD *)v17 = v13;
      *(_DWORD *)(v17 + 8) = v14;
      v16 = 1;
      v13 = v17;
    }
    else
    {
      v16 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v13 = v14 << 36;
    }
    v9 = v13 | v16;
  }
  v10 = (uint64_t *)(v9 & 0xFFFFFFFF8);
  v11 = v9 & 0xFFFFFFFF8;
  if ((v9 & 1) != 0)
    v11 = *v10;
  if (!v11)
  {
    if ((v9 & 2) == 0)
    {
LABEL_8:
      if ((v9 & 1) == 0)
        return a2;
      v8 = a2;
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  v8 = *(JSC::JSCell **)(v11 + 8);
  if (!v8)
  {
    if ((v9 & 2) == 0)
      goto LABEL_8;
LABEL_13:
    v8 = a2;
    goto LABEL_14;
  }
  if ((v9 & 2) != 0)
  {
LABEL_14:
    if ((v9 & 1) == 0)
      return v8;
    goto LABEL_28;
  }
  if ((v9 & 1) == 0)
    return v8;
LABEL_28:
  if (v10)
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  return v8;
}

uint64_t JSC::CallLinkInfo::globalObjectForSlowPath(JSC::CallLinkInfo *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *Caller;
  uint64_t v10;
  uint64_t result;

  Caller = JSC::CallLinkInfo::retrieveCaller(this, a2, a3, a4, a5, a6, a7, a8);
  if (Caller)
  {
    v10 = (uint64_t)Caller + 8;
    return *(_QWORD *)v10;
  }
  if (a2 && *((_BYTE *)a2 + 5) == 73)
  {
    v10 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 40;
    return *(_QWORD *)v10;
  }
  result = 298;
  __break(0xC471u);
  return result;
}

void JSC::CallLinkInfo::emitFastPathImpl(JSC::ARM64LogicalImmediate *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int *v34;
  int *v35;
  int v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  WTF *v53;
  unsigned int *v54;
  __int16 v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  _BYTE *v59;
  char v60;
  __int16 v61;
  char v62;
  __int16 v63;
  uint64_t v64;
  int v65;
  char *v66;
  char v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::AssemblerBuffer *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[24];
  __int128 v113;
  uint64_t v114;
  char v115;
  __int128 *v116;

  v9 = a3;
  if (this)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 2, a4, a5, a6, a7, a8);
  v110 = (WTF *)v112;
  v111 = 2;
  v103 = (JSC::AssemblerBuffer *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 200);
  if (v11 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v103, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -129892283;
  v12 = *(_DWORD *)(a2 + 200);
  v13 = v12 + 4;
  *(_DWORD *)(a2 + 200) = v12 + 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198139C6CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v14 = *(_BYTE *)(a2 + 272);
  *(_BYTE *)(a2 + 212) = 0;
  if ((v12 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v103, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v14 & 0x1F | 0xF8428040;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a2, 0, v14, 0, a5, a6, a7, a8, (uint64_t)&v108);
  v21 = v108;
  if (v108 != -1)
  {
    v22 = HIDWORD(v111);
    if (HIDWORD(v111) == (_DWORD)v111)
    {
      v23 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, (void *)(HIDWORD(v111) + 1), (unint64_t)&v108, v15, v16, v17, v18, v19);
      v25 = *v23;
      v24 = (uint64_t *)(v23 + 1);
      v21 = v25;
      v22 = HIDWORD(v111);
    }
    else
    {
      v24 = &v109;
    }
    v26 = (char *)v110 + 12 * v22;
    *(_DWORD *)v26 = v21;
    *(_QWORD *)(v26 + 4) = *v24;
    ++HIDWORD(v111);
  }
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, v14, 1, v16, v17, v18, v19, (uint64_t)&v106, v20);
  v32 = v106;
  if (v106 != -1)
  {
    v33 = HIDWORD(v111);
    if (HIDWORD(v111) == (_DWORD)v111)
    {
      v34 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, (void *)(HIDWORD(v111) + 1), (unint64_t)&v106, v27, v28, v29, v30, v31);
      v36 = *v34;
      v35 = v34 + 1;
      v32 = v36;
      v33 = HIDWORD(v111);
    }
    else
    {
      v35 = &v107;
    }
    v37 = (char *)v110 + 12 * v33;
    *(_DWORD *)v37 = v32;
    *(_QWORD *)(v37 + 4) = *(_QWORD *)v35;
    ++HIDWORD(v111);
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v104 = a4;
  v105 = v9;
  if (!BYTE1(dword_1ECF4C240))
  {
    v39 = qword_1ECF53248;
LABEL_80:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v39, 5, v27, v28, v29, v30, v31);
    goto LABEL_27;
  }
  v38 = atomic_load(&JSC::LLInt::defaultCallThunk(void)::onceKey);
  if (v38 != -1)
  {
    *(_QWORD *)&v113 = &v115;
    v116 = &v113;
    std::__call_once(&JSC::LLInt::defaultCallThunk(void)::onceKey, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::defaultCallThunk(void)::$_0 &&>>);
  }
  v39 = JSC::LLInt::defaultCallThunk(void)::codeRef;
  v40 = (unsigned int *)JSC::LLInt::defaultCallThunk(void)::codeRef;
  if (!JSC::LLInt::defaultCallThunk(void)::codeRef)
    goto LABEL_80;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v39, 5, v27, v28, v29, v30, v31);
  do
  {
    v49 = __ldaxr(v40);
    v50 = v49 - 1;
  }
  while (__stlxr(v50, v40));
  if (!v50)
  {
    atomic_store(1u, v40);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
  }
LABEL_27:
  v51 = HIDWORD(v111);
  if (HIDWORD(v111))
  {
    v52 = 0;
    do
    {
      if (v52 >= HIDWORD(v111))
      {
        __break(0xC471u);
        JUMPOUT(0x198139DDCLL);
      }
      v53 = v110;
      v54 = (unsigned int *)((char *)v110 + 12 * v52);
      *(_DWORD *)(a2 + 208) = 0;
      v56 = (unsigned __int8 *)(v54 + 2);
      v55 = *((unsigned __int8 *)v54 + 8);
      switch(*((_BYTE *)v54 + 8))
      {
        case 0x83:
        case 0x87:
          v57 = *v54;
          v58 = *(_DWORD *)(a2 + 200);
          if (v58 < *(_DWORD *)(a2 + 52))
          {
            do
            {
              if ((v58 + 4) > *(_DWORD *)(a2 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
                v58 = *(_DWORD *)(a2 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a2 + 56) + v58) = -721215457;
              v58 = *(_DWORD *)(a2 + 200) + 4;
              *(_DWORD *)(a2 + 200) = v58;
            }
            while (v58 < *(_DWORD *)(a2 + 52));
            v55 = *v56;
          }
          v59 = (char *)v53 + 12 * v52;
          v60 = v59[9];
          v61 = v59[10];
          v62 = v59[11];
          *(_QWORD *)&v113 = v57;
          *((_QWORD *)&v113 + 1) = v58;
          BYTE3(v114) = v60 & 0xF;
          *(_WORD *)((char *)&v114 + 1) = v55;
          v63 = v61 << 6;
          goto LABEL_35;
        case 0x84:
        case 0x88:
          v64 = *v54;
          v65 = *(_DWORD *)(a2 + 200);
          if (v65 < *(_DWORD *)(a2 + 52))
          {
            do
            {
              if ((v65 + 4) > *(_DWORD *)(a2 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
                v65 = *(_DWORD *)(a2 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = -721215457;
              v65 = *(_DWORD *)(a2 + 200) + 4;
              *(_DWORD *)(a2 + 200) = v65;
            }
            while (v65 < *(_DWORD *)(a2 + 52));
            v55 = *v56;
          }
          v66 = (char *)v53 + 12 * v52;
          v67 = v66[9];
          v68 = *((_WORD *)v66 + 2);
          v62 = v66[11];
          *(_QWORD *)&v113 = v64;
          *((_QWORD *)&v113 + 1) = v65;
          BYTE3(v114) = v67 & 0xF;
          *(_WORD *)((char *)&v114 + 1) = v55;
          v63 = v68 & 0x3F;
LABEL_35:
          WORD2(v114) = v63;
          LOBYTE(v114) = v62;
          break;
        default:
          v73 = *v54;
          v74 = *(_DWORD *)(a2 + 200);
          if (v74 < *(_DWORD *)(a2 + 52))
          {
            do
            {
              if ((v74 + 4) > *(_DWORD *)(a2 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
                v74 = *(_DWORD *)(a2 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a2 + 56) + v74) = -721215457;
              v74 = *(_DWORD *)(a2 + 200) + 4;
              *(_DWORD *)(a2 + 200) = v74;
            }
            while (v74 < *(_DWORD *)(a2 + 52));
            v55 = *v56;
          }
          v75 = *((_BYTE *)v53 + 12 * v52 + 9);
          LOBYTE(v114) = -1;
          *(_QWORD *)&v113 = v73;
          *((_QWORD *)&v113 + 1) = v74;
          BYTE3(v114) = v75 & 0xF;
          *(_WORD *)((char *)&v114 + 1) = v55;
          WORD2(v114) = 0;
          break;
      }
      v69 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v69 == *(_DWORD *)(a2 + 40))
      {
        v76 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 32, v69 + 1, (unint64_t)&v113, v44, v45, v46, v47, v48);
        v70 = *(_QWORD *)(a2 + 32) + 24 * *(unsigned int *)(a2 + 44);
        *(_QWORD *)v70 = 0;
        *(_QWORD *)(v70 + 8) = 0;
        *(_BYTE *)(v70 + 16) = -1;
        v77 = (((*(unsigned __int8 *)(v70 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v70 + 17) = 65;
        *(_BYTE *)(v70 + 19) = BYTE2(v77);
        *(_WORD *)(v70 + 20) &= 0xFC00u;
        v71 = *(_OWORD *)v76;
        v72 = *(_QWORD *)(v76 + 16);
      }
      else
      {
        v70 = *(_QWORD *)(a2 + 32) + 24 * v69;
        v71 = v113;
        v72 = v114;
      }
      *(_QWORD *)(v70 + 16) = v72;
      *(_OWORD *)v70 = v71;
      ++*(_DWORD *)(a2 + 44);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v105)
  {
    (*(void (**)(_QWORD))v104)(*(_QWORD *)(v104 + 8));
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198139D40);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    v89 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8418040;
    v90 = *(_DWORD *)(a2 + 200);
    if (v90 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      v90 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v90) = v89;
    v91 = *(_DWORD *)(a2 + 200);
    v92 = v91 + 4;
    *(_DWORD *)(a2 + 200) = v91 + 4;
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198139D70);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    v93 = *(unsigned __int8 *)(a2 + 272) | 0xF80003E0;
    if ((v91 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      v92 = *(_DWORD *)(a2 + 200);
    }
    v87 = -702611296;
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v92) = v93;
    v94 = *(_DWORD *)(a2 + 200);
    v84 = v94 + 4;
    *(_DWORD *)(a2 + 200) = v94 + 4;
    v85 = v94 + 8;
    v86 = *(_DWORD *)(a2 + 192);
  }
  else
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198139CC4);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    v78 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8418040;
    v79 = *(_DWORD *)(a2 + 200);
    if (v79 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      v79 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v79) = v78;
    v80 = *(_DWORD *)(a2 + 200);
    v81 = v80 + 4;
    *(_DWORD *)(a2 + 200) = v80 + 4;
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198139CF4);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    v82 = *(unsigned __int8 *)(a2 + 272) | 0xF80003E0;
    if ((v80 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      v81 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v81) = v82;
    v83 = *(_DWORD *)(a2 + 200);
    v84 = v83 + 4;
    *(_DWORD *)(a2 + 200) = v83 + 4;
    *(_DWORD *)(a2 + 208) = 0;
    v85 = v83 + 8;
    v86 = *(_DWORD *)(a2 + 192);
    v87 = -700514144;
  }
  if (v85 > v86)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v103, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
    v84 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v84) = v87;
  *(_DWORD *)(a2 + 200) += 4;
  v88 = v110;
  if (v112 != (_BYTE *)v110)
  {
    if (v110)
    {
      v110 = 0;
      LODWORD(v111) = 0;
      WTF::fastFree((unint64_t)v88, v42, v43, v44, v45, v46, v47, v48);
    }
  }
}

void JSC::MacroAssemblerARM64::transferPtr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198139EE0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v9 = *(_BYTE *)(a1 + 272) & 0x1F | 0xF8420040;
  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 200);
  if (v11 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = v9;
  v12 = *(_DWORD *)(a1 + 200);
  v13 = v12 + 4;
  *(_DWORD *)(a1 + 200) = v12 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198139F10);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v14 = *(unsigned __int8 *)(a1 + 272);
  if ((v12 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v14 | 0xF80003E0;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::CallLinkInfo::emitDataICFastPath(JSC::CallLinkInfo *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  JSC::CallLinkInfo::emitFastPathImpl(0, (uint64_t)this, 0, (uint64_t)v8, a5, a6, a7, a8);
}

uint64_t JSC::CallLinkInfo::emitFastPath(int a1, unsigned __int8 *a2, int a3)
{
  JSC::ARM64LogicalImmediate *v4;
  unsigned int v6;

  if (a3)
  {
    v4 = 0;
  }
  else
  {
    v6 = a2[17] >> 4;
    if (v6 > 9)
    {
      __break(0xC471u);
      JUMPOUT(0x19813A008);
    }
    if (((1 << v6) & 0x19E) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198139FE8);
    }
    v4 = (JSC::ARM64LogicalImmediate *)a2;
  }
  return JSC::CallLinkInfo::emitFastPathImpl(v4, a1);
}

void JSC::CallLinkInfo::emitTailCallFastPath(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ARM64LogicalImmediate *v9;
  unsigned int v10;
  int v11;

  if (a3)
  {
    v9 = 0;
  }
  else
  {
    v10 = a2[17] >> 4;
    if (v10 > 9 || (v11 = 1 << v10, (v11 & 0x19E) != 0))
    {
      __break(0xC471u);
      JUMPOUT(0x19813A084);
    }
    if ((v11 & 0x260) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19813A0B8);
    }
    v9 = (JSC::ARM64LogicalImmediate *)a2;
  }
  JSC::CallLinkInfo::emitFastPathImpl(v9, a1, 1, a4, a5, a6, a7, a8);
}

void JSC::OptimizingCallLinkInfo::initializeFromDFGUnlinkedCallLinkInfo(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 64) = a4;
  v10 = (uint64_t *)(a1 + 72);
  if (a1 + 72 != a3)
  {
    v11 = *v10;
    if ((*v10 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v13 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 2) != 0
        || ((v14 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
          ? (v15 = (_DWORD)v14 == -1)
          : (v15 = 1),
            v15))
      {
        v16 = 2;
      }
      else if (v14 >> 28)
      {
        v17 = v13;
        v18 = v14;
        v13 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v13 = v17;
        *(_DWORD *)(v13 + 8) = v18;
        v16 = 1;
      }
      else
      {
        v16 = v13;
        v13 = v14 << 36;
      }
      v12 = v13 | v16;
    }
    *v10 = v12;
  }
  *(_WORD *)(a1 + 17) = *(_WORD *)(a1 + 17) & 0xFF0F | (16 * (*(_BYTE *)(a3 + 8) & 0xF));
}

void JSC::DirectCallLinkInfo::reset(JSC::DirectCallLinkInfo *this, uint64_t a2, void *a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)this;
    *v4 = *(_QWORD *)this;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if ((*((_BYTE *)this + 17) & 0x10) == 0)
    JSC::DirectCallLinkInfo::initialize(this, a2, a3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
}

void JSC::DirectCallLinkInfo::initialize(JSC::DirectCallLinkInfo *this, uint64_t a2, void *a3)
{
  unsigned int v3;
  int v4;
  JSC::ExecutableAllocator *v5;
  unint64_t v6;

  v3 = *((_BYTE *)this + 17) & 0xF;
  if (v3 > 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19813A2E4);
  }
  v4 = 1 << v3;
  if ((v4 & 0x19E) != 0)
  {
    v5 = (JSC::ExecutableAllocator *)*((_QWORD *)this + 9);
    v6 = *((_QWORD *)this + 6);
    if (!*((_BYTE *)this + 80))
    {
      v5 = (JSC::ExecutableAllocator *)((char *)v5 - 4);
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v5, (unint64_t)v5, v6);
      goto LABEL_7;
    }
    if (*((_BYTE *)this + 80) == 1)
    {
      JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*((JSC::ExecutableAllocator **)this + 9), (unint64_t)v5, v6);
LABEL_7:
      sys_icache_invalidate(v5, 4uLL);
      return;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19813A2C4);
  }
  if ((v4 & 0x260) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19813A304);
  }
  if (!*((_QWORD *)this + 7))
    goto LABEL_14;
  JSC::ARM64Assembler::replaceWithJump(*((JSC::ARM64Assembler **)this + 7), *((_BYTE **)this + 6), a3);
}

void JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(JSC::DirectCallLinkInfo *this, JSC::VM *a2, unsigned int **a3, JSC::CodeBlock *a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  JSC::CodeBlock *v9;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  _BOOL8 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  const void *v29;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7 = *(_QWORD *)this;
    *v6 = *(_QWORD *)this;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v8 = (_QWORD *)((char *)this + 24);
  if (*((_QWORD *)this + 3))
  {
    v9 = (JSC::CodeBlock *)*((_QWORD *)this + 4);
    if (v9 != (JSC::CodeBlock *)a3 || a4 == 0 || v9 == 0)
    {
      if (HIBYTE(word_1ECF4C286))
      {
        v29 = this;
        WTF::dataLog<char [25],WTF::RawPointer,char [2]>("Unlinking CallLinkInfo: ", &v29, "\n");
        v27 = (_QWORD *)*((_QWORD *)this + 1);
        if (v27)
        {
          v28 = *(_QWORD *)this;
          *v27 = *(_QWORD *)this;
          *(_QWORD *)(v28 + 8) = v27;
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
        }
      }
      if ((*((_BYTE *)this + 17) & 0x10) != 0)
      {
        *v8 = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        JSC::DirectCallLinkInfo::initialize(this, (uint64_t)a2, a3);
        v12 = *((_QWORD *)this + 1);
        *v8 = 0;
        *((_QWORD *)this + 4) = 0;
        if (v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19813A4ECLL);
        }
      }
    }
    else
    {
      v13 = a3[15];
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v16 = v13 + 2;
      v17 = *v8 != (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v13 + 40))(v13, 0);
      do
      {
        v18 = __ldaxr(v16);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v16));
      if (!v19)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 32))(v13);
      }
      v20 = (unsigned int *)*((_QWORD *)a4 + 15);
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
      }
      v23 = v20 + 2;
      v24 = (*(uint64_t (**)(unsigned int *, _BOOL8))(*(_QWORD *)v20 + 40))(v20, v17);
      do
      {
        v25 = __ldaxr(v23);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v23));
      if (!v26)
      {
        atomic_store(1u, v20 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 32))(v20);
      }
      JSC::DirectCallLinkInfo::setCallTarget((uint64_t)this, (unint64_t)a4, v24);
      JSC::CodeBlock::linkIncomingCall((uint64_t)a4, 0, this);
    }
  }
}

void JSC::DirectCallLinkInfo::setCallTarget(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  int v7;
  JSC::ExecutableAllocator *v8;
  JSC::ARM64Assembler *v9;

  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if ((*(_BYTE *)(a1 + 17) & 0x10) == 0)
  {
    v3 = *(_BYTE *)(a1 + 17) & 0xF;
    if (v3 > 9)
    {
      __break(0xC471u);
      JUMPOUT(0x19813A650);
    }
    v7 = 1 << v3;
    if ((v7 & 0x19E) == 0)
    {
      if ((v7 & 0x260) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19813A670);
      }
      v9 = *(JSC::ARM64Assembler **)(a1 + 56);
      if (!v9)
        goto LABEL_16;
      JSC::ARM64Assembler::replaceWithNops(v9, 4uLL);
    }
    v8 = *(JSC::ExecutableAllocator **)(a1 + 72);
    if (!*(_BYTE *)(a1 + 80))
    {
      v8 = (JSC::ExecutableAllocator *)((char *)v8 - 4);
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v8, (unint64_t)v8, a3);
      goto LABEL_9;
    }
    if (*(_BYTE *)(a1 + 80) == 1)
    {
      JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)(a1 + 72), *(_QWORD *)(a1 + 72), a3);
LABEL_9:
      sys_icache_invalidate(v8, 4uLL);
      JSC::ARM64Assembler::linkPointer(*(JSC::ARM64Assembler **)(a1 + 64), a2, (void *)1);
      return;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x19813A630);
  }
}

void JSC::DirectCallLinkInfo::visitWeak(JSC::DirectCallLinkInfo *this, JSC::VM *a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  JSC::DirectCallLinkInfo *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    if ((v9 & 8) != 0)
    {
      if ((*(_BYTE *)(v9 - 79) & 1) != 0)
        return;
    }
    else if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
           && ((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFC000) + 8 * ((v9 >> 10) & 0xF) + 0x28) >> (v9 >> 4)) & 1) != 0)
    {
      return;
    }
    if (BYTE1(qword_1ECF4C332))
    {
      v13 = *((_QWORD *)this + 4);
      v11 = a2;
      v12 = v13;
      v10 = this;
      WTF::dataLog<char [18],WTF::RawPointer,char [3],WTF::PointerDump<JSC::CodeBlock>,char [3],char [2]>("Clearing call to ", (const void **)&v13, " (", &v12, ").", "\n");
      this = v10;
      a2 = v11;
    }
    JSC::CallLinkInfoBase::unlinkOrUpgrade(this, a2, 0, 0, a6, a7, a8, a9, a3);
  }
}

void JSC::DirectCallLinkInfo::emitDirectFastPath(JSC::DirectCallLinkInfo *this@<X0>, JSC::CCallHelpers *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v10;
  int v11;
  int i;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD v84[3];

  v10 = *((_BYTE *)this + 17) & 0xF;
  if (v10 > 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19813AC3CLL);
  }
  v11 = 1 << v10;
  if ((v11 & 0x19E) == 0)
  {
    if ((v11 & 0x260) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19813AC1CLL);
    }
    goto LABEL_58;
  }
  if ((*((_BYTE *)this + 17) & 0x10) == 0)
  {
    for (i = *((_DWORD *)a2 + 50); i < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        i = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + i) = -721215457;
      i = *((_DWORD *)a2 + 50) + 4;
    }
    if (!*((_BYTE *)a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19813AB10);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 33) + 208) &= ~*((_DWORD *)a2 + 72);
    v15 = *((_BYTE *)a2 + 272) & 0x1F;
    v16 = i;
    if ((i + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v16 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v16) = v15 | 0xD2800000;
    v17 = *((_DWORD *)a2 + 50);
    v18 = v17 + 4;
    *((_DWORD *)a2 + 50) = v17 + 4;
    if ((v17 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v18 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = v15 | 0xF2A00000;
    v19 = *((_DWORD *)a2 + 50);
    v20 = v19 + 4;
    *((_DWORD *)a2 + 50) = v19 + 4;
    if ((v19 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v20 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v20) = v15 | 0xF2C00000;
    v21 = *((_DWORD *)a2 + 50);
    v22 = v21 + 4;
    *((_DWORD *)a2 + 50) = v21 + 4;
    if ((v21 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v22 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v22) = -134216720;
    v23 = *((_DWORD *)a2 + 50);
    v24 = v23 + 4;
    *((_DWORD *)a2 + 50) = v23 + 4;
    *((_DWORD *)a2 + 52) = 0;
    if ((v23 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v24 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v24) = -1811939328;
    v25 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v25;
    v26 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v26 + 8) = 1;
    *(_QWORD *)v26 = off_1E3580BE8;
    *(_QWORD *)(v26 + 16) = this;
    *(_DWORD *)(v26 + 24) = v25;
    *(_DWORD *)(v26 + 28) = 3;
    *(_DWORD *)(v26 + 32) = i;
    v27 = *((unsigned int *)a2 + 61);
    if ((_DWORD)v27 == *((_DWORD *)a2 + 60))
    {
      v32 = v27 + (v27 >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= v27 + 1)
        v34 = v27 + 1;
      else
        v34 = v33;
      if (v34 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19813AC74);
      }
      v35 = (const void *)*((_QWORD *)a2 + 29);
      v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
      *((_DWORD *)a2 + 60) = v34;
      *((_QWORD *)a2 + 29) = v36;
      memcpy(v36, v35, 8 * v27);
      if (v35)
      {
        if (*((const void **)a2 + 29) == v35)
        {
          *((_QWORD *)a2 + 29) = 0;
          *((_DWORD *)a2 + 60) = 0;
        }
        WTF::fastFree((unint64_t)v35, v37, v38, v39, v40, v41, v42, v43);
      }
      v27 = *((unsigned int *)a2 + 61);
      v28 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v27);
    }
    else
    {
      v28 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v27);
    }
    *v28 = v26;
    *((_DWORD *)a2 + 61) = v27 + 1;
    v29 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v29 + 8) = 1;
    *(_QWORD *)v29 = off_1E3580C10;
    *(_QWORD *)(v29 + 16) = this;
    v30 = *((unsigned int *)a2 + 65);
    if ((_DWORD)v30 != *((_DWORD *)a2 + 64))
    {
      v31 = (uint64_t *)(*((_QWORD *)a2 + 31) + 8 * v30);
LABEL_20:
      *v31 = v29;
      *((_DWORD *)a2 + 65) = v30 + 1;
      *(_QWORD *)(a9 + 24) = 0;
      *(_QWORD *)(a9 + 32) = 0;
      *(_QWORD *)(a9 + 16) = 0;
      *(_QWORD *)a9 = a9 + 16;
      *(_QWORD *)(a9 + 8) = 2;
      return;
    }
    v44 = v30 + (v30 >> 2);
    if (v44 >= 0x10)
      v45 = v44 + 1;
    else
      v45 = 16;
    if (v45 <= v30 + 1)
      v46 = v30 + 1;
    else
      v46 = v45;
    if (!(v46 >> 29))
    {
      v47 = (const void *)*((_QWORD *)a2 + 31);
      v48 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
      *((_DWORD *)a2 + 64) = v46;
      *((_QWORD *)a2 + 31) = v48;
      memcpy(v48, v47, 8 * v30);
      if (v47)
      {
        if (*((const void **)a2 + 31) == v47)
        {
          *((_QWORD *)a2 + 31) = 0;
          *((_DWORD *)a2 + 64) = 0;
        }
        WTF::fastFree((unint64_t)v47, v49, v50, v51, v52, v53, v54, v55);
      }
      v30 = *((unsigned int *)a2 + 65);
      v31 = (uint64_t *)(*((_QWORD *)a2 + 31) + 8 * v30);
      goto LABEL_20;
    }
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x19813AA74);
  }
  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, (uint64_t)this, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssembler::branchTestPtr((uint64_t)a2, 0, 0x1800000002, 0xFFFFFFFFLL, v56, v57, v58, v59, (uint64_t)v84);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)a9, v84, v60, v61, v62, v63, v64, v65);
  JSC::MacroAssemblerARM64::transferPtr((uint64_t)a2, v66, v67, v68, v69, v70, v71, v72);
  if (!*((_BYTE *)a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19813AC6CLL);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 33) + 208) &= ~*((_DWORD *)a2 + 72);
  JSC::MacroAssemblerARM64::load64((uint64_t)a2, 0x1800000002, *((char *)a2 + 272), v73, v74, v75, v76, v77);
  *((_DWORD *)a2 + 52) = 0;
  JSC::AssemblerBuffer::putInt((JSC::CCallHelpers *)((char *)a2 + 56), 3594453504, v78, v79, v80, v81, v82, v83);
}

void JSC::MacroAssembler::branchTestPtr(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;

  if (*(_BYTE *)(a1 + 212))
  {
    v12 = a4;
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest64(a1, a2, 16, v12, v13, v14, v15, v16, a9, v17);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DirectCallLinkInfo::emitDirectTailCallFastPath(JSC::ARM64LogicalImmediate *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v10;
  int v11;
  int i;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int j;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  const void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::ARM64LogicalImmediate *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _DWORD v94[3];

  v10 = *((_BYTE *)this + 17) & 0xF;
  if (v10 > 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19813B254);
  }
  v11 = 1 << v10;
  if ((v11 & 0x19E) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19813AD70);
  }
  if ((v11 & 0x260) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19813B234);
  }
  if ((*((_BYTE *)this + 17) & 0x10) != 0)
  {
    *(_QWORD *)a9 = a9 + 16;
    *(_QWORD *)(a9 + 8) = 2;
    v68 = this;
    v69 = a3;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v68, 2, a4, a5, a6, a7, a8);
    JSC::MacroAssembler::branchTestPtr(a2, 0, 0x1800000002, 0xFFFFFFFFLL, v70, v71, v72, v73, (uint64_t)v94);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)a9, v94, v74, v75, v76, v77, v78, v79);
    (*(void (**)(_QWORD))v69)(*(_QWORD *)(v69 + 8));
    JSC::MacroAssemblerARM64::transferPtr(a2, v80, v81, v82, v83, v84, v85, v86);
    JSC::MacroAssemblerARM64::farJump(a2, 0x1800000002, 357, v87, v88, v89, v90, v91);
  }
  else
  {
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); a3 = v92)
    {
      v92 = a3;
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = i;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v15 = i;
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v66 = a3;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      a3 = v66;
      v15 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v15) = -721215457;
    *(_DWORD *)(a2 + 200) += 4;
    (*(void (**)(_QWORD))a3)(*(_QWORD *)(a3 + 8));
    for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
    {
      if ((j + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
        j = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
      j = *(_DWORD *)(a2 + 200) + 4;
    }
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19813B118);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    v24 = *(_BYTE *)(a2 + 272) & 0x1F;
    v25 = v24 | 0xD2800000;
    v26 = j;
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      v93 = *(_BYTE *)(a2 + 272) & 0x1F | 0xD2800000;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
      v25 = v93;
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v25;
    v27 = *(_DWORD *)(a2 + 200);
    v28 = v27 + 4;
    *(_DWORD *)(a2 + 200) = v27 + 4;
    v29 = v24 | 0xF2A00000;
    if ((v27 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
      v29 = v24 | 0xF2A00000;
      v28 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = v29;
    v30 = *(_DWORD *)(a2 + 200);
    v31 = v30 + 4;
    *(_DWORD *)(a2 + 200) = v30 + 4;
    if ((v30 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
      v31 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = v24 | 0xF2C00000;
    v32 = *(_DWORD *)(a2 + 200);
    v33 = v32 + 4;
    *(_DWORD *)(a2 + 200) = v32 + 4;
    if ((v32 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
      v33 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -134216720;
    while (1)
    {
      v34 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v34;
      if (v34 >= *(_DWORD *)(a2 + 52))
        break;
      if ((v34 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
        v34 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = -721215457;
    }
    v35 = v34;
    if ((v34 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
      v35 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    v36 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v36 + 8) = 1;
    *(_QWORD *)v36 = off_1E3580C38;
    *(_QWORD *)(v36 + 16) = this;
    *(_DWORD *)(v36 + 24) = i;
    *(_DWORD *)(v36 + 28) = v34;
    *(_DWORD *)(v36 + 32) = 7;
    *(_DWORD *)(v36 + 36) = j;
    v37 = *(unsigned int *)(a2 + 244);
    if ((_DWORD)v37 == *(_DWORD *)(a2 + 240))
    {
      v42 = v37 + (v37 >> 2);
      if (v42 >= 0x10)
        v43 = v42 + 1;
      else
        v43 = 16;
      if (v43 <= v37 + 1)
        v44 = v37 + 1;
      else
        v44 = v43;
      if (v44 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19813B27CLL);
      }
      v45 = *(const void **)(a2 + 232);
      v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
      *(_DWORD *)(a2 + 240) = v44;
      *(_QWORD *)(a2 + 232) = v46;
      memcpy(v46, v45, 8 * v37);
      if (v45)
      {
        if (*(const void **)(a2 + 232) == v45)
        {
          *(_QWORD *)(a2 + 232) = 0;
          *(_DWORD *)(a2 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v45, v47, v48, v49, v50, v51, v52, v53);
      }
      v37 = *(unsigned int *)(a2 + 244);
      v38 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v37);
    }
    else
    {
      v38 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v37);
    }
    *v38 = v36;
    *(_DWORD *)(a2 + 244) = v37 + 1;
    v39 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v39 + 8) = 1;
    *(_QWORD *)v39 = off_1E3580C60;
    *(_QWORD *)(v39 + 16) = this;
    v40 = *(unsigned int *)(a2 + 260);
    if ((_DWORD)v40 == *(_DWORD *)(a2 + 256))
    {
      v54 = v40 + (v40 >> 2);
      if (v54 >= 0x10)
        v55 = v54 + 1;
      else
        v55 = 16;
      if (v55 <= v40 + 1)
        v56 = v40 + 1;
      else
        v56 = v55;
      if (v56 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19813B284);
      }
      v57 = *(const void **)(a2 + 248);
      v58 = (void *)WTF::fastMalloc((WTF *)(8 * v56));
      *(_DWORD *)(a2 + 256) = v56;
      *(_QWORD *)(a2 + 248) = v58;
      memcpy(v58, v57, 8 * v40);
      if (v57)
      {
        if (*(const void **)(a2 + 248) == v57)
        {
          *(_QWORD *)(a2 + 248) = 0;
          *(_DWORD *)(a2 + 256) = 0;
        }
        WTF::fastFree((unint64_t)v57, v59, v60, v61, v62, v63, v64, v65);
      }
      v40 = *(unsigned int *)(a2 + 260);
      v41 = (uint64_t *)(*(_QWORD *)(a2 + 248) + 8 * v40);
    }
    else
    {
      v41 = (uint64_t *)(*(_QWORD *)(a2 + 248) + 8 * v40);
    }
    *v41 = v39;
    *(_DWORD *)(a2 + 260) = v40 + 1;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 32) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)a9 = a9 + 16;
    *(_QWORD *)(a9 + 8) = 2;
  }
}

