uint64_t JSC::BytecodeDumperBase<JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::dumpOperand<JSC::OperandTypes>(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", ", ");
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "operandTypes");
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v9, "%s", ":");
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  WTF::PrintStream::printf(v12, "%s", "OperandTypes(");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::PrintStream::printf(v13, "%u", a2);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", ", ");
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::PrintStream::printf(v14, "%u", HIBYTE(a2));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", ")");
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
}

int8x16_t JSC::OpCallVarargs::decode@<Q0>(JSC::OpCallVarargs *this@<X0>, int8x16_t *a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t result;
  int v9;
  int v10;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  int16x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int v17;
  int v18;
  __int32 v19;
  int8x16_t v20;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 128)
  {
    v14 = *(int16x4_t *)((char *)this + 2);
    v15 = vmovl_s16(v14);
    v16.i64[0] = 0x3F0000003FLL;
    v16.i64[1] = 0x3F0000003FLL;
    result = vbslq_s8((int8x16_t)vcgtq_s32(v15, v16), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v14), (int8x16_t)v15);
    *a2 = result;
    v17 = *((__int16 *)this + 5);
    v18 = v17 + 1073741760;
    if (v17 <= 63)
      v18 = *((__int16 *)this + 5);
    v19 = *((unsigned __int16 *)this + 6);
    a2[1].i32[0] = v18;
    a2[1].i32[1] = v19;
    v12 = *((unsigned __int16 *)this + 7);
    v13 = *((unsigned __int16 *)this + 8);
    goto LABEL_6;
  }
  if (v4 != 130)
  {
    a3.i32[0] = *(_DWORD *)((char *)this + 1);
    v5 = (int16x4_t)vmovl_s8(a3).u64[0];
    v6 = vmovl_s16(v5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    result = vbslq_s8((int8x16_t)vcgtq_s32(v6, v7), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v5), (int8x16_t)v6);
    *a2 = result;
    v9 = *((char *)this + 5);
    v10 = v9 + 1073741808;
    if (v9 <= 15)
      v10 = *((char *)this + 5);
    v11 = *((unsigned __int8 *)this + 6);
    a2[1].i32[0] = v10;
    a2[1].i32[1] = v11;
    v12 = *((unsigned __int8 *)this + 7);
    v13 = *((unsigned __int8 *)this + 8);
LABEL_6:
    a2[1].i32[2] = v12;
    a2[1].i32[3] = v13;
    return result;
  }
  result = *(int8x16_t *)((char *)this + 2);
  v20 = *(int8x16_t *)((char *)this + 18);
  *a2 = result;
  a2[1] = v20;
  return result;
}

_DWORD *JSC::OpIteratorNext::decode@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int v9;
  int v10;
  int v11;
  int16x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int v15;
  int v16;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 128)
  {
    v12 = *(int16x4_t *)((char *)this + 2);
    v13 = vmovl_s16(v12);
    v14.i64[0] = 0x3F0000003FLL;
    v14.i64[1] = 0x3F0000003FLL;
    *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcgtq_s32(v13, v14), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v12), (int8x16_t)v13);
    v15 = *((__int16 *)this + 5);
    v16 = v15 + 1073741760;
    if (v15 <= 63)
      v16 = *((__int16 *)this + 5);
    *(_DWORD *)(a2 + 16) = v16;
    *(uint32x4_t *)(a2 + 20) = vmovl_u16(*(uint16x4_t *)(this + 3));
    v11 = *((unsigned __int16 *)this + 10);
    goto LABEL_6;
  }
  if (v4 != 130)
  {
    a3.i32[0] = *(_DWORD *)((char *)this + 1);
    v5 = (int16x4_t)vmovl_s8(a3).u64[0];
    v6 = vmovl_s16(v5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    v8 = vbslq_s8((int8x16_t)vcgtq_s32(v6, v7), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v5), (int8x16_t)v6);
    *(int8x16_t *)a2 = v8;
    v9 = *((char *)this + 5);
    v10 = v9 + 1073741808;
    if (v9 <= 15)
      v10 = *((char *)this + 5);
    *(_DWORD *)(a2 + 16) = v10;
    v8.i32[0] = *(_DWORD *)((char *)this + 6);
    *(uint32x4_t *)(a2 + 20) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v8.i8));
    v11 = *((unsigned __int8 *)this + 10);
LABEL_6:
    *(_DWORD *)(a2 + 36) = v11;
    return this;
  }
  return JSC::OpIteratorNext::OpIteratorNext((_DWORD *)a2, (_DWORD *)((char *)this + 2));
}

_DWORD *JSC::OpIteratorNext::OpIteratorNext(_DWORD *this, const unsigned int *a2)
{
  *this = *a2;
  this[1] = a2[1];
  this[2] = a2[2];
  this[3] = a2[3];
  this[4] = a2[4];
  this[5] = a2[5];
  this[6] = a2[6];
  this[7] = a2[7];
  this[8] = a2[8];
  this[9] = a2[9];
  return this;
}

int *JSC::OpConstructVarargs::decode@<X0>(int *this@<X0>, uint64_t a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 130)
  {
    v12 = *(_OWORD *)((char *)this + 18);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 2);
    *(_OWORD *)(a2 + 16) = v12;
  }
  else if (v4 == 128)
  {
    return JSC::OpConstructVarargs::OpConstructVarargs((int *)a2, (const unsigned __int16 *)this + 1);
  }
  else
  {
    a3.i32[0] = *(int *)((char *)this + 1);
    v5 = (int16x4_t)vmovl_s8(a3).u64[0];
    v6 = vmovl_s16(v5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcgtq_s32(v6, v7), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v5), (int8x16_t)v6);
    v8 = *((char *)this + 5);
    v9 = v8 + 1073741808;
    if (v8 <= 15)
      v9 = *((char *)this + 5);
    v10 = *((unsigned __int8 *)this + 6);
    *(_DWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = v10;
    v11 = *((unsigned __int8 *)this + 8);
    *(_DWORD *)(a2 + 24) = *((unsigned __int8 *)this + 7);
    *(_DWORD *)(a2 + 28) = v11;
  }
  return this;
}

int *JSC::OpConstructVarargs::OpConstructVarargs(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  this[4] = v6;
  v7 = a2[6];
  this[5] = a2[5];
  this[6] = v7;
  this[7] = a2[7];
  return this;
}

_DWORD *JSC::OpIteratorOpen::decode@<X0>(_DWORD *this@<X0>, uint32x4_t *a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  __int32 v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  uint32x4_t v14;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 128)
  {
    v10 = *(int16x4_t *)((char *)this + 2);
    v11 = vmovl_s16(v10);
    v12.i64[0] = 0x3F0000003FLL;
    v12.i64[1] = 0x3F0000003FLL;
    v13 = vbslq_s8((int8x16_t)vcgtq_s32(v11, v12), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v10), (int8x16_t)v11);
    v14 = vmovl_u16(*(uint16x4_t *)((char *)this + 10));
    *a2 = (uint32x4_t)v13;
    a2[1] = v14;
    v9 = *((unsigned __int16 *)this + 9);
    goto LABEL_4;
  }
  if (v4 != 130)
  {
    a3.i32[0] = *(_DWORD *)((char *)this + 1);
    v5 = (int16x4_t)vmovl_s8(a3).u64[0];
    v6 = vmovl_s16(v5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    v8 = vbslq_s8((int8x16_t)vcgtq_s32(v6, v7), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v5), (int8x16_t)v6);
    *a2 = (uint32x4_t)v8;
    v8.i32[0] = *(_DWORD *)((char *)this + 5);
    a2[1] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v8.i8));
    v9 = *((unsigned __int8 *)this + 9);
LABEL_4:
    a2[2].i32[0] = v9;
    return this;
  }
  return JSC::OpIteratorOpen::OpIteratorOpen(a2, (_DWORD *)((char *)this + 2));
}

_DWORD *JSC::OpIteratorOpen::OpIteratorOpen(_DWORD *this, const unsigned int *a2)
{
  *this = *a2;
  this[1] = a2[1];
  this[2] = a2[2];
  this[3] = a2[3];
  this[4] = a2[4];
  this[5] = a2[5];
  this[6] = a2[6];
  this[7] = a2[7];
  this[8] = a2[8];
  return this;
}

int *JSC::OpEnumeratorNext::OpEnumeratorNext(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  this[4] = v6;
  this[5] = a2[5];
  return this;
}

int *JSC::OpEnumeratorHasOwnProperty::decode@<X0>(int *this@<X0>, uint64_t a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 128)
    return JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty((int *)a2, (const unsigned __int16 *)this + 1);
  if (v4 == 130)
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 2);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)((char *)this + 18);
    v9 = *(int *)((char *)this + 26);
  }
  else
  {
    a3.i32[0] = *(int *)((char *)this + 1);
    v5 = (int16x4_t)vmovl_s8(a3).u64[0];
    v6 = vmovl_s16(v5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    v8 = vdupq_n_s32(0x3FFFFFF0u);
    *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcgtq_s32(v6, v7), (int8x16_t)vaddw_s16(v8, v5), (int8x16_t)v6);
    v5.i32[0] = *((char *)this + 5);
    v5.i32[1] = *((char *)this + 6);
    *(int8x8_t *)(a2 + 16) = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v5, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32((int32x2_t)v5, *(int32x2_t *)v8.i8), (int8x8_t)v5);
    v9 = *((unsigned __int8 *)this + 7);
  }
  *(_DWORD *)(a2 + 24) = v9;
  return this;
}

int *JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  this[4] = v6;
  v7 = *((__int16 *)a2 + 5);
  if (v7 > 63)
    v7 += 1073741760;
  this[5] = v7;
  this[6] = a2[6];
  return this;
}

unint64_t JSC::OpPutSetterById::decode(JSC::OpPutSetterById *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 130)
  {
    v3 = *(_DWORD *)((char *)this + 2);
    v4 = *(unsigned int *)((char *)this + 6);
  }
  else if (v2 == 128)
  {
    v3 = *((__int16 *)this + 1);
    if (v3 > 63)
      v3 += 1073741760;
    v4 = *((unsigned __int16 *)this + 2);
  }
  else
  {
    v3 = *((char *)this + 1);
    if (v3 > 15)
      v3 += 1073741808;
    v4 = *((unsigned __int8 *)this + 2);
  }
  return v3 | (unint64_t)(v4 << 32);
}

unint64_t JSC::OpPutGetterByVal::decode(JSC::OpPutGetterByVal *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 130)
  {
    v3 = *(_DWORD *)((char *)this + 2);
    v4 = *(unsigned int *)((char *)this + 6);
  }
  else if (v2 == 128)
  {
    v3 = *((__int16 *)this + 1);
    if (v3 > 63)
      v3 += 1073741760;
    LODWORD(v4) = *((__int16 *)this + 2);
    if ((int)v4 <= 63)
      v4 = v4;
    else
      v4 = (v4 + 1073741760);
  }
  else
  {
    v3 = *((char *)this + 1);
    if (v3 > 15)
      v3 += 1073741808;
    LODWORD(v4) = *((char *)this + 2);
    if ((int)v4 <= 15)
      v4 = v4;
    else
      v4 = (v4 + 1073741808);
  }
  return v3 | (unint64_t)(v4 << 32);
}

unint64_t JSC::OpNewGeneratorFunc::decode(JSC::OpNewGeneratorFunc *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v7;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 128)
  {
    v3 = *((__int16 *)this + 1);
    if (v3 > 63)
      v3 += 1073741760;
    v4 = *((__int16 *)this + 2);
    LODWORD(v5) = v4 + 1073741760;
    if (v4 <= 63)
      v5 = v4;
    else
      v5 = v5;
  }
  else if (v2 == 130)
  {
    v3 = *(_DWORD *)((char *)this + 2);
    v5 = *(unsigned int *)((char *)this + 6);
  }
  else
  {
    v3 = *((char *)this + 1);
    if (v3 > 15)
      v3 += 1073741808;
    v7 = *((char *)this + 2);
    LODWORD(v5) = v7 + 1073741808;
    if (v7 <= 15)
      v5 = v7;
    else
      v5 = v5;
  }
  return v3 | (unint64_t)(v5 << 32);
}

unint64_t JSC::OpNewAsyncGeneratorFuncExp::decode(JSC::OpNewAsyncGeneratorFuncExp *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v7;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 130)
  {
    v3 = *(_DWORD *)((char *)this + 2);
    v5 = *(unsigned int *)((char *)this + 6);
  }
  else if (v2 == 128)
  {
    v3 = *((__int16 *)this + 1);
    if (v3 > 63)
      v3 += 1073741760;
    v7 = *((__int16 *)this + 2);
    LODWORD(v5) = v7 + 1073741760;
    if (v7 <= 63)
      v5 = v7;
    else
      v5 = v5;
  }
  else
  {
    v3 = *((char *)this + 1);
    if (v3 > 15)
      v3 += 1073741808;
    v4 = *((char *)this + 2);
    LODWORD(v5) = v4 + 1073741808;
    if (v4 <= 15)
      v5 = v4;
    else
      v5 = v5;
  }
  return v3 | (unint64_t)(v5 << 32);
}

void sub_197F346FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,WTF::StringImpl **a57)
{
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  _Block_object_dispose(&a51, 8);
  v65 = a57;
  if (a57)
  {
    v66 = *((unsigned int *)a57 - 1);
    if ((_DWORD)v66)
    {
      v67 = a57;
      do
      {
        v68 = *v67;
        if (*v67 != (WTF::StringImpl *)-1)
        {
          *v67 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
            {
              WTF::StringImpl::~StringImpl(v68, v58, v59, v60, v61, v62, v63, v64);
              WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
            }
            else
            {
              *(_DWORD *)v68 -= 2;
            }
          }
        }
        v67 += 2;
        --v66;
      }
      while (v66);
    }
    WTF::fastFree((unint64_t)(v65 - 2), v58, v59, v60, v61, v62, v63, v64);
  }
  _Unwind_Resume(a1);
}

void putNonEnumerable(JSContext *a1, JSValue *a2, const __CFString *a3, JSValue *a4)
{
  JSGlobalContextRef v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  const OpaqueJSValue *v17;
  uint64_t v18;
  Inspector::JSGlobalObjectInspectorController **v19;
  JSC::Exception *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  WTF::StringImpl *v28;
  const OpaqueJSValue *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, JSGlobalContextRef, WTF::StringImpl *, WTF::StringImpl **, _QWORD);
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  Inspector::JSGlobalObjectInspectorController **v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70[3];
  uint64_t v71;
  unsigned int *v72;

  if (-[JSValue isObject](a2, "isObject"))
  {
    v8 = -[JSContext JSGlobalContextRef](a1, "JSGlobalContextRef");
    v9 = (unsigned int *)*((_QWORD *)v8 + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v72, (JSC::VM *)v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = -[JSValue JSValueRef](a2, "JSValueRef");
    if (v17)
      v18 = (uint64_t)v17;
    else
      v18 = 2;
    WTF::String::String(v70, a3);
    if (!v70[0])
      goto LABEL_15;
    v26 = WTF::fastMalloc((WTF *)0x18);
    v27 = (unint64_t *)v26;
    *(_DWORD *)v26 = 1;
    v28 = v70[0];
    *(WTF::StringImpl **)(v26 + 8) = v70[0];
    if (v28)
    {
      if ((*((_BYTE *)v28 + 16) & 4) != 0)
        v28 = 0;
      else
        v28 = (WTF::StringImpl *)*((_QWORD *)v28 + 1);
    }
    *(_QWORD *)(v26 + 16) = v28;
    memset(v70, 0, sizeof(v70));
    v71 = 14;
    v29 = -[JSValue JSValueRef](a4, "JSValueRef");
    v35 = 2;
    if (v29)
      v35 = (uint64_t)v29;
    v70[0] = (WTF::StringImpl *)v35;
    LODWORD(v71) = v71 & 0xFFFFFFF1 | 4;
    HIDWORD(v71) |= 7u;
    v36 = *(void (**)(uint64_t, JSGlobalContextRef, WTF::StringImpl *, WTF::StringImpl **, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) + 0x90);
    OpaqueJSString::identifier((OpaqueJSString *)v27, (JSC::VM *)v9, v30, v31, v32, v33, v34, (int **)&v69);
    v36(v18, v8, v69, v70, 0);
    v44 = v69;
    v69 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    v45 = -[JSContext JSGlobalContextRef](a1, "JSGlobalContextRef", v69);
    v19 = v45;
    v20 = (JSC::Exception *)*((_QWORD *)v9 + 2);
    if (v20)
    {
      v56 = *((_QWORD *)v20 + 1);
      *((_QWORD *)v9 + 2) = 0;
      v57 = v9 + 20;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 & 0xFFFFFFEF, v57));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(v45[253], (JSC::JSGlobalObject *)v45, v20, v21, v22, v23, v24, v25);
      -[JSContext valueFromNotifyException:](a1, "valueFromNotifyException:", v56);
    }
    do
    {
      v46 = __ldaxr((unsigned int *)v27);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v27));
    if (v47)
      goto LABEL_15;
    atomic_store(1u, (unsigned int *)v27);
    v59 = atomic_load(v27 + 2);
    v60 = v27[1];
    if (v59)
    {
      if (v60 && (*(_BYTE *)(v60 + 16) & 4) == 0 && *(_QWORD *)(v60 + 8) == v59)
      {
        v27[1] = 0;
        goto LABEL_26;
      }
      WTF::fastFree(v59, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      v60 = v27[1];
    }
    v27[1] = 0;
    if (!v60)
    {
LABEL_28:
      WTF::fastFree((unint64_t)v27, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
LABEL_15:
      JSC::JSLockHolder::~JSLockHolder(&v72, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      return;
    }
LABEL_26:
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, (WTF::AtomStringImpl *)v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
    goto LABEL_28;
  }
}

void sub_197F34A10(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  unint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::~StringImpl(a9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)a9 -= 2;
    }
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v14);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v14));
  if (v25)
  {
LABEL_7:
    JSC::JSLockHolder::~JSLockHolder(&a14, a2, a3, a4, a5, a6, a7, a8);
    _Unwind_Resume(a1);
  }
  atomic_store(1u, (unsigned int *)v14);
  v26 = atomic_load((unint64_t *)(v14 + 16));
  v27 = *(_QWORD *)(v14 + 8);
  if (v26)
  {
    if (v27 && (*(_BYTE *)(v27 + 16) & 4) == 0 && *(_QWORD *)(v27 + 8) == v26)
    {
      *(_QWORD *)(v14 + 8) = 0;
      goto LABEL_13;
    }
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
    v27 = *(_QWORD *)(v14 + 8);
  }
  *(_QWORD *)(v14 + 8) = 0;
  if (!v27)
  {
LABEL_15:
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
LABEL_13:
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    *(_DWORD *)v27 -= 2;
  }
  goto LABEL_15;
}

void forEachProtocolImplementingProtocol(objc_class *a1, Protocol *a2, uint64_t a3)
{
  Protocol **v5;
  void *v6;
  Protocol **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Protocol **v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  Protocol *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  Protocol *v24;
  Protocol **v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Protocol **v32;
  Protocol **v33;
  uint64_t v34;
  Protocol **v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unsigned int outCount;

  v49 = 0;
  outCount = 0;
  v5 = class_copyProtocolList(a1, &outCount);
  v13 = v5;
  v14 = outCount;
  if (outCount)
  {
    if (outCount <= 0x10uLL)
      v15 = 16;
    else
      v15 = outCount;
    if (v15 >> 29)
    {
      __break(0xC471u);
      goto LABEL_68;
    }
    v16 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
    memcpy(v16, v13, 8 * v14);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v15 = 0;
  v16 = 0;
  if (v5)
LABEL_7:
    free(v13);
LABEL_8:
  v48 = 0;
  if (!(_DWORD)v14)
    goto LABEL_61;
  do
  {
    v17 = *(Protocol **)&v16[8 * v14 - 8];
    v18 = v49;
    if (v49
      || (WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v49, 8uLL, 0, v8, v9, v10, v11, v12), (v18 = v49) != 0))
    {
      v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      v19 = 0;
    }
    v14 = (v14 - 1);
    v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v7 = (Protocol **)(v18 + 8 * v23);
    v24 = *v7;
    if (*v7)
    {
      v25 = 0;
      v26 = 1;
      do
      {
        if (v24 == v17)
          goto LABEL_55;
        if (v24 == (Protocol *)-1)
          v25 = v7;
        v23 = (v23 + v26) & v19;
        v7 = (Protocol **)(v18 + 8 * v23);
        v24 = *v7;
        ++v26;
      }
      while (*v7);
      if (v25)
      {
        *v25 = 0;
        --*(_DWORD *)(v49 - 16);
        v7 = v25;
      }
    }
    *v7 = v17;
    v27 = v49;
    if (v49)
      v28 = *(_DWORD *)(v49 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v49 - 12) = v28;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 <= 0x400)
    {
      if (3 * v30 > 4 * v29)
        goto LABEL_30;
      if ((_DWORD)v30)
LABEL_26:
        v31 = ((_DWORD)v30 << (6 * v28 >= (2 * v30)));
      else
        v31 = 8;
      WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v49, v31, (uint64_t)v7, v8, v9, v10, v11, v12);
      goto LABEL_30;
    }
    if (v30 <= 2 * v29)
      goto LABEL_26;
LABEL_30:
    outCount = 0;
    v32 = protocol_copyProtocolList(v17, &outCount);
    v33 = v32;
    if (outCount)
    {
      v34 = 0;
      while (!protocol_isEqual(v33[v34], a2))
      {
        if (++v34 >= (unint64_t)outCount)
          goto LABEL_36;
      }
      free(v33);
      (*(void (**)(uint64_t, Protocol *, char *))(a3 + 16))(a3, v17, &v48);
      if (v48)
        break;
    }
    else if (v32)
    {
LABEL_36:
      free(v33);
    }
    outCount = 0;
    v35 = protocol_copyProtocolList(v17, &outCount);
    v36 = outCount;
    if (outCount)
    {
      v37 = outCount + (unint64_t)v14;
      if (v37 <= v15)
      {
        v40 = v16;
LABEL_52:
        memcpy(&v40[8 * v14], v35, 8 * v36);
        LODWORD(v14) = v36 + v14;
        v16 = v40;
        goto LABEL_53;
      }
      v38 = v15 + (v15 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v37)
        v15 = outCount + (unint64_t)v14;
      else
        v15 = v39;
      if (!(v15 >> 29))
      {
        v40 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
        v15 = v15;
        memcpy(v40, v16, 8 * v14);
        if (v16)
        {
          if (v40 == v16)
          {
            v15 = 0;
            v40 = 0;
          }
          WTF::fastFree((unint64_t)v16, v41, v42, v43, v44, v45, v46, v47);
        }
        goto LABEL_52;
      }
      __break(0xC471u);
LABEL_68:
      JUMPOUT(0x197F34E20);
    }
LABEL_53:
    if (v35)
      free(v35);
LABEL_55:
    ;
  }
  while ((_DWORD)v14);
  if (v49)
    WTF::fastFree(v49 - 16, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
LABEL_61:
  if (v16)
    WTF::fastFree((unint64_t)v16, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
}

void sub_197F34E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    free(v11);
  _Unwind_Resume(exception_object);
}

void sub_197F35180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,int a29)
{
  _Unwind_Resume(exception_object);
}

void copyMethodsToObject(JSContext *a1, objc_class *a2, Protocol *a3, BOOL a4, JSValue *a5, NSMutableDictionary *a6)
{
  id v12;
  const void *v13;
  uint64_t v14;
  objc_method_description *v15;
  objc_method_description *v16;
  unint64_t v17;
  char **p_types;
  const void *v19;
  objc_method_description *v20;
  objc_method_description *v21;
  unint64_t v22;
  uint64_t *v23;
  const void *v24;
  _QWORD v25[2];
  void (*v26)(uint64_t, SEL, uint64_t);
  void *v27;
  NSMutableDictionary *v28;
  JSContext *v29;
  objc_class *v30;
  Protocol *v31;
  JSValue *v32;
  const void *v33;
  BOOL v34;
  unsigned int v35[2];
  uint64_t v36;
  uint64_t (*v37)(uint64_t, SEL);
  void *v38;
  id v39;
  unsigned int outCount[3];

  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = v12;
  v14 = MEMORY[0x1E0C809B0];
  *(_QWORD *)v35 = MEMORY[0x1E0C809B0];
  v36 = 3321888768;
  v37 = ___ZL15createRenameMapP8Protocolb_block_invoke;
  v38 = &__block_descriptor_40_e8_32c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE_e12_v24__0_8r_16l;
  v39 = v12;
  if (v12)
    CFRetain(v12);
  outCount[0] = 0;
  v15 = protocol_copyMethodDescriptionList(a3, 0, a4, outCount);
  v16 = v15;
  if (outCount[0])
  {
    v17 = 0;
    p_types = &v15->types;
    do
    {
      ((void (*)(unsigned int *, _QWORD, char *))v37)(v35, *(p_types - 1), *p_types);
      ++v17;
      p_types += 2;
    }
    while (v17 < outCount[0]);
    v19 = v39;
    v14 = MEMORY[0x1E0C809B0];
  }
  else
  {
    v19 = v13;
    if (!v15)
      goto LABEL_9;
  }
  free(v16);
LABEL_9:
  v39 = 0;
  if (v19)
    CFRelease(v19);
  v25[0] = v14;
  v25[1] = 3321888768;
  v26 = ___ZL19copyMethodsToObjectP9JSContextP10objc_classP8ProtocolbP7JSValueP19NSMutableDictionary_block_invoke;
  v27 = &unk_1E357B8E8;
  v28 = a6;
  v29 = a1;
  v30 = a2;
  v31 = a3;
  v34 = a4;
  v33 = v13;
  if (v13)
    CFRetain(v13);
  v32 = a5;
  v35[0] = 0;
  v20 = protocol_copyMethodDescriptionList(a3, 1, a4, v35);
  v21 = v20;
  if (v35[0])
  {
    v22 = 0;
    v23 = (uint64_t *)&v20->types;
    do
    {
      v26((uint64_t)v25, (SEL)*(v23 - 1), *v23);
      ++v22;
      v23 += 2;
    }
    while (v22 < v35[0]);
    v24 = v33;
  }
  else
  {
    v24 = v13;
    if (!v20)
      goto LABEL_19;
  }
  free(v21);
LABEL_19:
  v33 = 0;
  if (!v24)
  {
    if (!v13)
      return;
LABEL_23:
    CFRelease(v13);
    return;
  }
  CFRelease(v24);
  if (v13)
    goto LABEL_23;
}

void sub_197F35408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  const void *v24;

  CFRelease(v24);
  _Unwind_Resume(a1);
}

void sub_197F355DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::create(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  JSC *v6;
  _QWORD *v7;
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t SlowCase;
  _QWORD *v16;
  unsigned int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[128];
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;

  v6 = *(JSC **)(a1 + 56);
  v7 = (_QWORD *)JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::subspaceForImpl((uint64_t)v6, 0);
  SlowCase = v7[3];
  if (SlowCase < v7[4])
    goto LABEL_2;
  SlowCase = v7[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v7[6];
    v7[4] = SlowCase + HIDWORD(v49);
    v7[5] = SlowCase + (int)v49;
LABEL_2:
    v7[3] = SlowCase + 48;
    goto LABEL_3;
  }
  v51 = (uint64_t)v7;
  JSC::sanitizeStackForVM(v6, v8, v9, v10, v11, v12, v13, v14);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v51, (uint64_t)v6 + 192, 48, 0, 0, v52, v53, v54);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::JSAPIWrapperObject::JSAPIWrapperObject(SlowCase, *(_QWORD *)(a1 + 56), a2);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = 0;
  v16[1] = a3;
  v16[2] = 0;
  do
    v17 = __ldaxr(a3);
  while (__stlxr(v17 + 1, a3));
  *(_QWORD *)(SlowCase + 24) = v16;
  *(_QWORD *)(SlowCase + 32) = 0;
  JSC::JSAPIWrapperObject::finishCreation(SlowCase, *(JSC::VM **)(a1 + 56));
  v25 = 0;
  v26 = 0;
  v27 = *(_QWORD *)(a1 + 56);
  v56 = (WTF *)v58;
  v57 = 16;
  v28 = *(_QWORD **)(*(_QWORD *)(SlowCase + 24) + 8);
  do
  {
    v29 = v28[13] != 0;
    v30 = v28[3];
    v59 = v30;
    if (v30)
    {
      if (v25 == (_DWORD)v57)
      {
        v31 = (_QWORD *)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, v25 + 1, (unint64_t)&v59);
        v25 = HIDWORD(v57);
        *((_QWORD *)v56 + HIDWORD(v57)) = *v31;
      }
      else
      {
        *((_QWORD *)v56 + v25) = v30;
      }
      HIDWORD(v57) = ++v25;
    }
    v26 |= v29;
    v28 = (_QWORD *)v28[1];
  }
  while (v28);
  if ((v26 & 1) != 0)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v27 + 41952) + 2768);
    v33 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v33 = 0x1400000002;
    *(_QWORD *)(v33 + 8) = "[Symbol.toPrimitive]";
    *(_DWORD *)(v33 + 16) = 4;
    v55 = (WTF::StringImpl *)v33;
    v34 = JSC::JSFunction::create(v27, a1, 1, &v55, (uint64_t)JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::customToPrimitive, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v59 = 0;
    v60 = SlowCase;
    v61 = -1;
    v35.n128_u64[0] = 0x100000001000000;
    v62 = 0x1000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v27, v32, v34, 4, (uint64_t)&v59, v36, v37, v35);
    v38 = v55;
    v55 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    v25 = HIDWORD(v57);
  }
  if ((int)v25 < 1)
  {
LABEL_22:
    *(_QWORD *)(SlowCase + 32) = 16 * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C);
    v40 = v56;
    if (v58 != (_BYTE *)v56)
    {
      if (v56)
      {
        v56 = 0;
        LODWORD(v57) = 0;
        WTF::fastFree((unint64_t)v40, v18, v19, v20, v21, v22, v23, v24);
      }
    }
  }
  else
  {
    v39 = v25;
    if (a1)
    {
      while (1)
      {
        --v39;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v59, *(JSC::VM **)(a1 + 56), v19, v20, v21, v22, v23, v24);
        if (HIDWORD(v57) <= v39)
          break;
        (*((void (**)(uint64_t, unint64_t))v56 + v39))(a1, SlowCase);
        if (v60)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v60 + 112), (uint64_t)&v59, v59, v20, v21, v22, v23, v24);
          v50 = (unsigned int *)v60;
          v60 = 0;
          if (v50)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v50, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        }
        if ((unint64_t)(v39 + 1) <= 1)
          goto LABEL_22;
      }
    }
    else
    {
      while (1)
      {
        --v39;
        v59 = 0;
        v60 = 0;
        if (HIDWORD(v57) <= v39)
          break;
        (*((void (**)(_QWORD, unint64_t))v56 + v39))(0, SlowCase);
        if ((unint64_t)(v39 + 1) <= 1)
          goto LABEL_22;
      }
    }
    __break(0xC471u);
  }
}

void sub_197F35940(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, int a12)
{
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int *v16;

  v15 = *(_QWORD *)(v13 - 88);
  if (v15)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v15 + 112), v13 - 96, *(unsigned int *)(v13 - 96), a4, a5, a6, a7, a8);
    v16 = *(unsigned int **)(v13 - 88);
    *(_QWORD *)(v13 - 88) = 0;
    if (v16)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v16, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 != a11 && a11 != 0)
    WTF::fastFree((unint64_t)a11, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

void sub_197F35EE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c47_ZTSKZ34__JSWrapperMap_classInfoForClass__E3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_197F362E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (v1)
    *(_QWORD *)(v1 + 8) = 3;
  _Unwind_Resume(a1);
}

void sub_197F36374(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t tryUnwrapObjcObject(OpaqueJSContext *a1, const OpaqueJSValue *a2)
{
  uint64_t v2;
  JSObjectRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t *v25;
  int *v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  JSValueRef exception;

  v2 = 0;
  if (a1 && a2 && ((unint64_t)a2 & 0xFFFE000000000002) == 0)
  {
    if (*((unsigned __int8 *)a2 + 5) < 0x17u)
      return 0;
    exception = 0;
    v4 = JSValueToObject(a1, a2, &exception);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, a1, v5, v6, v7, v8, v9, v10, v11);
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
    v20 = (char **)(16 * v19);
    if ((char **)(16 * v19) == &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info)
    {
      v25 = (uint64_t *)((char *)v4 + 16);
    }
    else
    {
      v22 = (_DWORD)v19 == 0;
      v21 = v19 != 0;
      v22 = v22 || v20 == &JSC::ObjCCallbackFunction::s_info;
      if (!v22)
      {
        do
        {
          v20 = (char **)v20[2];
          v21 = v20 != 0;
        }
        while (v20 != &JSC::ObjCCallbackFunction::s_info && v20 != 0);
      }
      if (!v21)
        goto LABEL_16;
      v26 = (int *)*((_QWORD *)v4 + 8);
      v27 = *v26;
      if (*v26 == 3 && (v28 = objc_msgSend(*((id *)v26 + 2), "target"), v27 = *v26, v28))
      {
        if (v27)
        {
          if (v27 == 3)
          {
            v2 = objc_msgSend(*((id *)v26 + 2), "target");
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
      else if (v27)
      {
LABEL_16:
        v2 = 0;
LABEL_17:
        JSC::JSLockHolder::~JSLockHolder(&v29, v12, v13, v14, v15, v16, v17, v18);
        return v2;
      }
      v25 = (uint64_t *)(v26 + 2);
    }
    v2 = *v25;
    goto LABEL_17;
  }
  return v2;
}

void sub_197F36578(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  JSC::JSLockHolder::~JSLockHolder(&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void JSC::ObjCCallbackFunction::destroy(unint64_t this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  CFTypeRef v14;
  const void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  CFTypeRef cf;

  v9 = *(_QWORD *)(this + 64);
  v10 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v10 = (uint64_t *)(this - 16);
  if ((*(_DWORD *)v9 & 0xFFFFFFFE) == 2)
  {
    v11 = *v10;
    v12 = (const void *)objc_msgSend(*(id *)(v9 + 16), "target");
    cf = v12;
    v13 = *(unsigned int *)(v11 + 908);
    if ((_DWORD)v13 == *(_DWORD *)(v11 + 904))
    {
      WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<objc_object *>>(v11 + 896, (uint64_t *)&cf);
      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v11 + 896) + 8 * v13) = v12;
      *(_DWORD *)(v11 + 908) = v13 + 1;
    }
  }
  v15 = *(const void **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(_QWORD **)(this + 64);
  *(_QWORD *)(this + 64) = 0;
  if (v16)
  {
    v17 = v16[4];
    v16[4] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v16[3];
    v16[3] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = (const void *)v16[2];
    v16[2] = 0;
    if (v19)
      CFRelease(v19);
    v20 = (const void *)v16[1];
    v16[1] = 0;
    if (v20)
      CFRelease(v20);
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_197F366BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

JSC::JSGlobalObject *JSC::callObjCCallbackFunction(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unsigned int *v28;
  JSC::Exception *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  JSC::JSGlobalObject *v33;
  unint64_t v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  uint64_t v37;
  JSC::Exception *v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[128];

  v8 = this;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 5);
  v39 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    v12 = *(unsigned __int8 *)(v11 + 5);
    if (v12 >= 0x17)
    {
      if (v12 - 51 > 5)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_26:
    v11 = *((_QWORD *)this + 8);
    goto LABEL_4;
  }
  v33 = a2;
  if ((unint64_t)v11 >> 49)
  {
    this = (JSC::JSGlobalObject *)JSC::constructNumber((uint64_t)this, (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_39;
  }
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    this = (JSC::JSGlobalObject *)JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v11, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_39;
  }
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    this = (JSC::JSGlobalObject *)JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v39, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_39;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    this = (JSC::JSGlobalObject *)JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_39:
    v11 = (uint64_t)this;
  }
  a2 = v33;
LABEL_4:
  v13 = ((unint64_t)*((unsigned int *)a2 + 8) << 32) - 0x100000000;
  v14 = (uint64_t)v13 >> 32;
  v39 = (WTF *)v41;
  v40 = 16;
  if (HIDWORD(v13) >= 0x11)
  {
    v34 = HIDWORD(v13);
    v35 = a2;
    if (v13 >> 61)
    {
      __break(0xC471u);
      return this;
    }
    v32 = (WTF *)WTF::fastMalloc((WTF *)(v13 >> 29));
    a2 = v35;
    LODWORD(v40) = v34;
    v39 = v32;
    v15 = HIDWORD(v40);
LABEL_7:
    v16 = 0x600000000;
    v17 = v14;
    do
    {
      *((_QWORD *)v39 + v15++) = *(_QWORD *)((char *)a2 + (v16 >> 29));
      v16 += 0x100000000;
      --v17;
    }
    while (v17);
    v18 = 0;
    HIDWORD(v40) = v15;
    v38 = 0;
    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v13)
  {
    v15 = 0;
    goto LABEL_7;
  }
  v38 = 0;
LABEL_12:
  v18 = (JSC::VM *)*((_QWORD *)v8 + 7);
LABEL_13:
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v36, v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v25 = (*(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, WTF *, JSC::Exception **))(v10 + 48))(v8, v10, v11, v14, v39, &v38);
  if (v37)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v37 + 112), (uint64_t)&v36, v36, v20, v21, v22, v23, v24);
    v28 = (unsigned int *)v37;
    v37 = 0;
    if (v28)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v28, (uint64_t)v19, v27, v20, v21, v22, v23, v24);
  }
  v29 = v38;
  if (v38)
  {
    if (((unint64_t)v38 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C)))
    {
      v29 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v38, 0, v20, v21, v22, v23, v24);
    }
    JSC::VM::throwException(v9, v8, v29, v26, v20, v21, v22, v23, v24);
    v30 = 10;
  }
  else if (v25)
  {
    v30 = v25;
  }
  else
  {
    v30 = 10;
  }
  v31 = v39;
  if (v41 != (_BYTE *)v39)
  {
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree((unint64_t)v31, v19, (uint64_t)v29, v20, v21, v22, v23, v24);
    }
  }
  return (JSC::JSGlobalObject *)v30;
}

void sub_197F36968(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  WTF *v16;

  if (v16 != a15)
  {
    if (a15)
      WTF::fastFree((unint64_t)a15, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

JSObjectRef JSC::constructObjCCallbackFunction(const OpaqueJSContext *ctx, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  JSC::VM *v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  JSC::VM *v47;
  char OwnStaticPropertySlot;
  int v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  JSC::VM *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  unsigned int *v82;
  JSC::Exception *v83;
  JSC::VM *v84;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t **v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  JSC::VMTraps *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::Structure *v107;
  JSC::VM *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  JSC::VM *v128;
  char v129;
  JSC::VM *v130;
  uint64_t v131;
  JSC::VM *v132;
  char v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  size_t v145;
  char *v146;
  char *v147;
  int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  JSC::VM **v151;
  uint64_t v152;
  int v153;
  int v154;
  JSC::VM **p_dst;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  JSC::VM *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t Index;
  int v186;
  char v187;
  int v188;
  _BYTE *v189;
  uint64_t v190;
  unsigned __int16 *v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  char v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  char v210;
  uint64_t v211;
  unsigned __int8 *v212;
  unsigned int v213;
  int v214;
  unsigned __int8 *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  _DWORD *v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  JSC::VMTraps *v225;
  JSC::VMTraps *v226;
  uint64_t (*v227)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v228;
  uint64_t v229;
  JSC::VM *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _DWORD *v234;
  _DWORD *v235;
  _QWORD v236[2];
  uint64_t v237;
  char v238;
  int8x16_t **v239;
  uint64_t v240;
  JSC::VM *__dst;
  uint64_t v242;
  _BYTE v243[128];
  char __s[8];
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)ctx + 7);
  v230 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 3);
  v12 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v11 + 56);
  if (!v12)
    return JSObjectMake(ctx, *(JSClassRef *)(v11 + 16), 0);
  v14 = *((_QWORD *)a2 + 5);
  v229 = v14;
  if (v11 == v14)
  {
    v15 = 0;
    v16 = (JSC::VM *)v10;
    goto LABEL_93;
  }
  v18 = *(_QWORD *)(v10 + 41952);
  v227 = v12;
  v228 = *(_QWORD *)(v18 + 2160);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v233 = 0xFFFFFFFF00000000;
  LOBYTE(v237) = 0;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v235 = 0;
  memset(v236, 0, 13);
  v234 = (_DWORD *)v14;
  if ((v14 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned __int8 *)(v14 + 5);
    v20 = (JSC::VM *)v10;
    v21 = v228;
    if (v19 > 0x16)
      goto LABEL_7;
    if (v19 == 2)
    {
      if (*(_QWORD *)(v18 + 1768) == v228)
      {
        v182 = *(_QWORD *)(v14 + 8);
        if ((v182 & 1) != 0)
          v183 = (unsigned int *)(v14 + 16);
        else
          v183 = (unsigned int *)(v182 + 4);
        v184 = *v183;
        if ((v184 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v184) + 0x2000000000000;
        else
          Index = v184 | 0xFFFE000000000000;
        v186 = 14;
        goto LABEL_365;
      }
      if (v228)
      {
        v188 = *(_DWORD *)(v228 + 16);
        if ((v188 & 0x20) == 0)
        {
          v189 = *(_BYTE **)(v228 + 8);
          v190 = *(unsigned int *)(v228 + 4);
          if ((v188 & 4) != 0)
          {
            if (!(_DWORD)v190)
              goto LABEL_371;
            a3 = *v189 - 48;
            if (a3 > 9)
              goto LABEL_371;
            if (v190 >= 2 && *v189 == 48)
              goto LABEL_371;
            v216 = v189 + 1;
            v217 = v190 - 1;
            while (v217)
            {
              if (a3 > 0x19999999)
                goto LABEL_371;
              v218 = *v216 - 48;
              if (v218 > 9)
                goto LABEL_371;
              v187 = 0;
              v59 = __CFADD__(v218, 10 * a3);
              a3 = v218 + 10 * (_DWORD)a3;
              ++v216;
              --v217;
              if (v59)
                goto LABEL_372;
            }
          }
          else
          {
            if (!(_DWORD)v190)
              goto LABEL_371;
            a3 = *(unsigned __int16 *)v189 - 48;
            if (a3 > 9)
              goto LABEL_371;
            if (*(_WORD *)v189 == 48 && v190 > 1)
              goto LABEL_371;
            v192 = (unsigned __int16 *)(v189 + 2);
            v193 = v190 - 1;
            while (v193)
            {
              if (a3 > 0x19999999)
                goto LABEL_371;
              v194 = *v192 - 48;
              if (v194 > 9)
                goto LABEL_371;
              v187 = 0;
              v59 = __CFADD__(v194, 10 * a3);
              a3 = v194 + 10 * (_DWORD)a3;
              ++v192;
              --v193;
              if (v59)
                goto LABEL_372;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v219 = *(_QWORD *)(v14 + 8);
            v220 = (_DWORD *)((v219 & 1) != 0 ? v14 + 16 : v219 + 4);
            if (*v220 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)v14, ctx, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v10 + 80))
                goto LABEL_482;
              v221 = *(_DWORD *)(v10 + 80);
              if ((v221 & 0x27) != 0 && (v221 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v10 + 16))
              {
LABEL_482:
                v186 = 10;
LABEL_365:
                v231 = Index;
                LODWORD(v233) = v186;
                v235 = 0;
                v187 = 1;
                BYTE1(v236[1]) = 1;
                goto LABEL_372;
              }
            }
          }
        }
      }
LABEL_371:
      v187 = 0;
LABEL_372:
      if (*(_DWORD *)(v10 + 80))
      {
        v214 = *(_DWORD *)(v10 + 80);
        if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_50;
      }
      if ((v187 & 1) != 0)
        goto LABEL_69;
    }
  }
  v14 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v229, (unint64_t)ctx);
  if (!v14)
    goto LABEL_50;
  v20 = (JSC::VM *)*((_QWORD *)ctx + 7);
  v21 = v228;
LABEL_7:
  v22 = (_BYTE *)(v14 + 6);
  v23 = v21 >> 4;
  v24 = v14;
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v25 = v14;
    do
    {
      v26 = *(_DWORD *)v25 & 0xFFFFFFFE;
      v27 = 16 * v26;
      if (!(_DWORD)v23 || (v23 & ~*(_DWORD *)(16 * v26 + 0x20)) != 0)
        goto LABEL_36;
      v28 = *(_QWORD *)(16 * v26 + 0x58);
      if (!v28)
      {
        v29 = *(_QWORD *)(16 * v26 + 0x40);
        if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
          goto LABEL_36;
        v30 = v20;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v27, v20, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v20 = v30;
        if (!v28)
          goto LABEL_36;
      }
      if (!*(_DWORD *)(v28 + 24))
        goto LABEL_36;
      v31 = *(_QWORD *)(v28 + 16);
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
      v33 = *(unsigned int *)(v28 + 8);
      v34 = *(_DWORD *)(v228 + 16);
      if ((v31 & 1) != 0)
      {
        if ((v34 & 0x20) != 0)
          v34 = *(_DWORD *)(v228 + 32);
        v35 = *(_DWORD *)(v28 + 12);
        v36 = (v34 >> 8) & *(_QWORD *)&v35;
        v37 = *(unsigned __int8 *)(v32 + v36);
        if (!*(_BYTE *)(v32 + v36))
          goto LABEL_36;
        v38 = v32 + v33;
        v39 = 1;
        while (1)
        {
          v40 = *(_QWORD *)(v38 + 8 * (v37 - 1));
          if (v228 == (v40 & 0xFFFFFFFFFFFFLL))
            break;
          v36 = ((_DWORD)v36 + v39) & v35;
          v37 = *(unsigned __int8 *)(v32 + v36);
          ++v39;
          if (!*(_BYTE *)(v32 + v36))
            goto LABEL_36;
        }
        a6 = (v40 >> 16) & 0xFF00000000 | HIBYTE(v40);
      }
      else
      {
        if ((v34 & 0x20) != 0)
          v34 = *(_DWORD *)(v228 + 32);
        v41 = *(_DWORD *)(v28 + 12);
        v42 = v41 & (v34 >> 8);
        v43 = *(_DWORD *)(v32 + 4 * v42);
        if (!v43)
          goto LABEL_36;
        v44 = v32 + 4 * v33;
        v45 = 1;
        while (1)
        {
          v46 = (v43 - 1);
          if (v228 == *(_QWORD *)(v44 + 16 * v46))
            break;
          v42 = (v42 + v45) & v41;
          v43 = *(_DWORD *)(v32 + 4 * v42);
          ++v45;
          if (!v43)
            goto LABEL_36;
        }
        a6 = *(unsigned int *)(v44 + 16 * v46 + 8) | ((unint64_t)*(unsigned __int8 *)(v44 + 16 * v46 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v53 = v25 + 16;
          v54 = a6 << 32;
        }
        else
        {
          v53 = *(_QWORD *)(v25 + 8) - 8;
          v54 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v53 + (v54 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v55 = *(unsigned __int8 *)(a4 + 5);
          if (v55 != 5)
          {
            if (v55 != 6)
              goto LABEL_57;
            v88 = *(_DWORD *)(v27 + 16) & 3;
            v89 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v91 = *(int8x16_t ***)(a4 + 24);
              v90 = *(_QWORD *)(a4 + 32);
              v231 = *(_QWORD *)(a4 + 8);
              v232 = v89;
              LODWORD(v233) = HIDWORD(a6);
              v235 = (_DWORD *)v25;
              goto LABEL_123;
            }
            v231 = *(_QWORD *)(a4 + 8);
            v232 = v89;
            LODWORD(v233) = HIDWORD(a6);
            v235 = (_DWORD *)v25;
LABEL_280:
            BYTE1(v236[1]) = 3;
            if (v88 != 2)
              LOBYTE(v236[1]) = 1;
            goto LABEL_69;
          }
          v24 = v25;
LABEL_68:
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v24, (uint64_t)v20, (uint64_t)&v231, a4, a5, a6);
          goto LABEL_69;
        }
LABEL_57:
        v231 = a4;
        v235 = (_DWORD *)v25;
LABEL_58:
        v233 = __PAIR64__(a6, a5);
        LOWORD(v236[1]) = 257;
        goto LABEL_69;
      }
LABEL_36:
      if ((*v22 & 0x20) != 0)
      {
        v47 = v20;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v25, v20, v228, (uint64_t)&v231);
        v20 = v47;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_69;
      }
      v24 = *(_QWORD *)(v27 + 48);
      if (!v24)
        v24 = *(_QWORD *)(v25 + 16);
      if ((v24 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v24 + 5) < 0x17u)
      {
        if (!v228)
          goto LABEL_50;
        v49 = *(_DWORD *)(v228 + 16);
        if ((v49 & 0x20) != 0)
          goto LABEL_50;
        v50 = *(_WORD **)(v228 + 8);
        v51 = *(unsigned int *)(v228 + 4);
        if ((v49 & 4) == 0)
        {
          if ((_DWORD)v51)
          {
            v52 = (unsigned __int16)*v50 - 48;
            if (v52 <= 9 && (*v50 != 48 || v51 <= 1))
            {
              v56 = v50 + 1;
              v57 = v51 - 1;
              v15 = 10;
              while (v57)
              {
                if (v52 <= 0x19999999)
                {
                  v58 = *v56 - 48;
                  if (v58 <= 9)
                  {
                    v59 = __CFADD__(v58, 10 * v52);
                    v52 = v58 + 10 * v52;
                    ++v56;
                    --v57;
                    if (!v59)
                      continue;
                  }
                }
                goto LABEL_89;
              }
              goto LABEL_316;
            }
          }
          goto LABEL_50;
        }
        if (!(_DWORD)v51)
          goto LABEL_50;
        v52 = *(unsigned __int8 *)v50 - 48;
        if (v52 > 9 || v51 >= 2 && *(_BYTE *)v50 == 48)
          goto LABEL_50;
        v168 = v51 - 1;
        v169 = (unsigned __int8 *)v50 + 1;
        v15 = 10;
        while (v168)
        {
          if (v52 <= 0x19999999)
          {
            v170 = *v169 - 48;
            if (v170 <= 9)
            {
              v59 = __CFADD__(v170, 10 * v52);
              v52 = v170 + 10 * v52;
              --v168;
              ++v169;
              if (!v59)
                continue;
            }
          }
          goto LABEL_89;
        }
LABEL_316:
        if (v52 == -1)
        {
LABEL_50:
          v15 = 10;
          goto LABEL_89;
        }
        v171 = v52;
        v172 = *((_QWORD *)ctx + 7);
        v225 = (JSC::VMTraps *)(v172 + 64);
        v15 = 10;
        while (2)
        {
          v173 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v174 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v173 + 0x4C) + 0x70))(v14, ctx, v171, &v231);
          if (*(_DWORD *)(v172 + 80))
          {
            v177 = *(_DWORD *)(v172 + 80);
            if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v225, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v172 + 16))
              goto LABEL_89;
          }
          if ((v174 & 1) != 0)
            goto LABEL_69;
          if (BYTE2(v236[1]) == 3)
          {
            if (BYTE4(v236[1]))
              goto LABEL_89;
            v175 = *(unsigned __int8 *)(v14 + 5);
            if (v175 != 61)
              goto LABEL_322;
          }
          else
          {
            v175 = *(unsigned __int8 *)(v14 + 5);
            if (v175 == 61)
            {
              if (BYTE2(v236[1]) == 1)
                goto LABEL_89;
            }
            else
            {
LABEL_322:
              if ((v175 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v242) = 0;
                  v180 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v179 = v181 ? v180 : 0;
                }
                else
                {
                  v179 = *(_QWORD *)(v14 + 24);
                }
                if (v179 <= v171)
                  goto LABEL_89;
              }
            }
          }
          if ((*(_WORD *)(v173 + 12) & 0x800) == 0 || BYTE2(v236[1]) == 3)
          {
            v176 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
            if (!v176)
              v176 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v176 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v14, ctx);
            }
            else
            {
              v176 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
              if (!v176)
                v176 = *(_QWORD *)(v14 + 16);
            }
            if (*(_DWORD *)(v172 + 80))
            {
              v178 = *(_DWORD *)(v172 + 80);
              if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v225, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v172 + 16))
                goto LABEL_89;
            }
          }
          if ((v176 & 0xFFFE000000000002) != 0)
            goto LABEL_89;
          v14 = v176;
          if (*(unsigned __int8 *)(v176 + 5) <= 0x16u)
            goto LABEL_89;
          continue;
        }
      }
      v22 = (_BYTE *)(v24 + 6);
      v25 = v24;
    }
    while ((*(_BYTE *)(v24 + 6) & 8) == 0);
  }
  if (!v228)
    goto LABEL_152;
  v92 = *(_DWORD *)(v228 + 16);
  if ((v92 & 0x20) != 0)
    goto LABEL_152;
  v93 = *(_BYTE **)(v228 + 8);
  v94 = *(unsigned int *)(v228 + 4);
  if ((v92 & 4) != 0)
  {
    if ((_DWORD)v94)
    {
      v195 = *v93 - 48;
      if (v195 <= 9 && (v94 < 2 || *v93 != 48))
      {
        v211 = v94 - 1;
        v212 = v93 + 1;
        while (v211)
        {
          if (v195 > 0x19999999)
            goto LABEL_389;
          v213 = *v212 - 48;
          if (v213 > 9)
            goto LABEL_389;
          v102 = 0;
          LOBYTE(v94) = 0;
          v196 = 0;
          v59 = __CFADD__(v213, 10 * v195);
          v195 = v213 + 10 * v195;
          --v211;
          ++v212;
          if (v59)
            goto LABEL_391;
        }
        if (v195 == -1)
          v102 = 0;
        else
          v102 = v195 & 0xFFFFFF00;
        if (v195 == -1)
          LOBYTE(v94) = 0;
        else
          LOBYTE(v94) = v195;
        if (v195 == -1)
          v196 = 0;
        else
          v196 = 0x100000000;
LABEL_391:
        v97 = v94;
        if ((v196 & 0x100000000) == 0)
          goto LABEL_152;
        goto LABEL_392;
      }
LABEL_389:
      v102 = 0;
      LOBYTE(v94) = 0;
    }
    else
    {
      v102 = 0;
    }
    v196 = 0;
    goto LABEL_391;
  }
  if (!(_DWORD)v94)
  {
    v96 = 0;
    goto LABEL_133;
  }
  v95 = *(unsigned __int16 *)v93 - 48;
  if (v95 > 9 || *(_WORD *)v93 == 48 && v94 > 1)
  {
LABEL_132:
    v96 = 0;
    LOBYTE(v94) = 0;
LABEL_133:
    v97 = 0;
    goto LABEL_151;
  }
  v99 = (unsigned __int16 *)(v93 + 2);
  v100 = v94 - 1;
  while (v100)
  {
    if (v95 > 0x19999999)
      goto LABEL_132;
    v101 = *v99 - 48;
    if (v101 > 9)
      goto LABEL_132;
    v96 = 0;
    LOBYTE(v94) = 0;
    v97 = 0;
    v59 = __CFADD__(v101, 10 * v95);
    v95 = v101 + 10 * v95;
    ++v99;
    --v100;
    if (v59)
      goto LABEL_151;
  }
  v97 = v95 & 0xFFFFFF00;
  v96 = 0x100000000;
  if (v95 == -1)
  {
    v96 = 0;
    LOBYTE(v94) = 0;
  }
  else
  {
    LOBYTE(v94) = v95;
  }
  if (v95 == -1)
    v97 = 0;
LABEL_151:
  v102 = v94;
  if ((v96 & 0x100000000) != 0)
  {
LABEL_392:
    v197 = v97 | v102;
    v198 = *((_QWORD *)ctx + 7);
    v226 = (JSC::VMTraps *)(v198 + 64);
    v15 = 10;
    while (1)
    {
      v199 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
      v200 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v199 + 0x4C) + 0x70))(v14, ctx, v197, &v231);
      v201 = v200;
      if (*(_DWORD *)(v198 + 80))
      {
        v204 = *(_DWORD *)(v198 + 80);
        if ((v204 & 0x27) != 0 && (v204 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v226, 7u, a3, a4, a5, a6, a7, a8);
        v205 = *(_QWORD *)(v198 + 16);
        if (v205)
          v206 = 1;
        else
          v206 = v201;
        if ((v206 & 1) != 0)
        {
          if (!v205)
            goto LABEL_69;
          goto LABEL_50;
        }
      }
      else if ((v200 & 1) != 0)
      {
        goto LABEL_69;
      }
      if (BYTE2(v236[1]) == 3)
      {
        if (BYTE4(v236[1]))
          goto LABEL_89;
        v202 = *(unsigned __int8 *)(v14 + 5);
        if (v202 == 61)
          goto LABEL_398;
      }
      else
      {
        v202 = *(unsigned __int8 *)(v14 + 5);
        if (v202 == 61)
        {
          if (BYTE2(v236[1]) == 1)
            goto LABEL_89;
          goto LABEL_398;
        }
      }
      if ((v202 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          LOBYTE(v242) = 0;
          v209 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
          v207 = v210 ? v209 : 0;
        }
        else
        {
          v207 = *(_QWORD *)(v14 + 24);
        }
        if (v207 <= v197)
          goto LABEL_89;
      }
LABEL_398:
      if ((*(_WORD *)(v199 + 12) & 0x800) == 0 || BYTE2(v236[1]) == 3)
      {
        v203 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
        if (!v203)
          v203 = *(_QWORD *)(v14 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v203 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0xB0))(v14, ctx);
        }
        else
        {
          v203 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
          if (!v203)
            v203 = *(_QWORD *)(v14 + 16);
        }
        if (*(_DWORD *)(v198 + 80))
        {
          v208 = *(_DWORD *)(v198 + 80);
          if ((v208 & 0x27) != 0 && (v208 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v226, 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v198 + 16))
            goto LABEL_89;
        }
      }
      if ((v203 & 0xFFFE000000000002) == 0)
      {
        v14 = v203;
        if (*(unsigned __int8 *)(v203 + 5) > 0x16u)
          continue;
      }
      goto LABEL_89;
    }
  }
LABEL_152:
  v20 = (JSC::VM *)*((_QWORD *)ctx + 7);
  v103 = (JSC::VM *)((char *)v20 + 64);
  v15 = 10;
  while (1)
  {
    v104 = 16 * (*(_DWORD *)v24 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v24 + 6) & 8) == 0)
      break;
    v132 = v20;
    v224 = 16 * (*(_DWORD *)v24 & 0xFFFFFFFE);
    v133 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v224 + 0x4C) + 0x68))(v24, ctx, v228, &v231);
    if (*((_DWORD *)v132 + 20))
    {
      v160 = *((_DWORD *)v132 + 20);
      if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v103, 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v132 + 2))
        goto LABEL_89;
    }
    if ((v133 & 1) != 0)
      goto LABEL_69;
    if (BYTE2(v236[1]) == 3)
    {
      if (BYTE4(v236[1]))
        goto LABEL_89;
      v134 = *(unsigned __int8 *)(v24 + 5);
      if (v134 == 61)
        goto LABEL_252;
    }
    else
    {
      v134 = *(unsigned __int8 *)(v24 + 5);
      if (v134 == 61)
      {
        v104 = v224;
        v20 = v132;
        if (BYTE2(v236[1]) == 1)
          goto LABEL_89;
        goto LABEL_182;
      }
    }
    if (!v228)
      goto LABEL_252;
    if ((v134 - 50) < 0xFFFFFFF5)
      goto LABEL_252;
    v135 = *(_DWORD *)(v228 + 16);
    if ((v135 & 0x20) != 0)
      goto LABEL_252;
    v136 = *(unsigned int *)(v228 + 4);
    if (!(_DWORD)v136)
      goto LABEL_252;
    v137 = *(unsigned __int8 **)(v228 + 8);
    if ((v135 & 4) != 0)
    {
      v138 = *v137;
      if ((_DWORD)v136 == 1)
      {
LABEL_207:
        v104 = v224;
        v20 = v132;
        if ((v138 - 48) < 0xA)
          goto LABEL_89;
        goto LABEL_182;
      }
      if (v138 == 45)
      {
        v138 = v137[1];
        goto LABEL_211;
      }
      if ((v138 - 48) < 0xA)
        goto LABEL_222;
      if ((_DWORD)v136 == 8)
        goto LABEL_221;
    }
    else
    {
      v138 = *(unsigned __int16 *)v137;
      if ((_DWORD)v136 == 1)
        goto LABEL_207;
      if (v138 == 45)
      {
        v138 = *((unsigned __int16 *)v137 + 1);
LABEL_211:
        if ((v138 - 48) < 0xA)
        {
          if ((_DWORD)v136 == 2)
            goto LABEL_89;
          goto LABEL_222;
        }
        if ((_DWORD)v136 != 9)
          goto LABEL_252;
LABEL_221:
        if (v138 != 73)
          goto LABEL_252;
        goto LABEL_222;
      }
      if ((v138 - 48) < 0xA || (_DWORD)v136 == 8 && v138 == 73)
        goto LABEL_222;
    }
    if ((_DWORD)v136 != 3 || v138 != 78)
      goto LABEL_252;
LABEL_222:
    v222 = v222 & 0xFFFFFF0000000000 | v136 | ((unint64_t)((v135 >> 2) & 1) << 32);
    JSC::jsToNumber(v137, v222);
    v140 = (v139 >> 52) & 0x7FF;
    if ((_DWORD)v140 == 2047)
    {
      if ((v139 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v141 = &__s[3];
      }
      else
      {
        if ((v139 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v147 = &__s[1];
        }
        else
        {
          v147 = __s;
        }
        *(_QWORD *)v147 = 0x7974696E69666E49;
        v141 = v147 + 8;
      }
      goto LABEL_236;
    }
    v142 = v139 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v139 & 0x8000000000000000) != 0 && v142)
    {
      __s[0] = 45;
      v143 = &__s[1];
    }
    else
    {
      if (!v142)
      {
        __s[0] = 48;
        v141 = &__s[1];
        goto LABEL_236;
      }
      v143 = __s;
    }
    v144 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v139 & 0x800FFFFFFFFFFFFFLL, v140);
    v141 = WTF::dragonbox::detail::to_shortest(v144, v145, (uint64_t)v143, v146);
LABEL_236:
    *v141 = 0;
    v148 = strlen(__s);
    memcpy(&__dst, __s, v148);
    *((_BYTE *)&__dst + v148) = 0;
    v149 = *(unsigned int *)(v228 + 4);
    v150 = *(unsigned __int8 **)(v228 + 8);
    if ((*(_BYTE *)(v228 + 16) & 4) != 0)
    {
      if ((_DWORD)v149)
      {
        p_dst = &__dst;
        v156 = *(unsigned int *)(v228 + 4);
        do
        {
          v158 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v157 = v158;
          if (!v158 || *v150 != v157)
            goto LABEL_252;
          ++v150;
        }
        while (--v156);
      }
    }
    else if ((_DWORD)v149)
    {
      v151 = &__dst;
      v152 = *(unsigned int *)(v228 + 4);
      while (1)
      {
        v154 = *(unsigned __int8 *)v151;
        v151 = (JSC::VM **)((char *)v151 + 1);
        v153 = v154;
        if (!v154 || *(unsigned __int16 *)v150 != v153)
          break;
        v150 += 2;
        if (!--v152)
          goto LABEL_248;
      }
LABEL_252:
      v104 = v224;
      v20 = v132;
      goto LABEL_182;
    }
LABEL_248:
    v159 = *((unsigned __int8 *)&__dst + v149);
    v104 = v224;
    v20 = v132;
    if (!v159)
      goto LABEL_89;
LABEL_182:
    if ((*(_WORD *)(v104 + 12) & 0x800) == 0)
    {
      v125 = *(_DWORD *)v24;
LABEL_184:
      v126 = *(_QWORD *)(16 * (v125 & 0xFFFFFFFE) + 0x30);
      if (!v126)
        v126 = *(_QWORD *)(v24 + 16);
      goto LABEL_186;
    }
    v125 = *(_DWORD *)v24;
    if (BYTE2(v236[1]) == 3)
      goto LABEL_184;
    v130 = v20;
    v131 = 16 * (v125 & 0xFFFFFFFE);
    if ((*(_WORD *)(v131 + 12) & 0x800) != 0)
    {
      v223 = (*(uint64_t (**)(uint64_t, const OpaqueJSContext *))(16 * *(unsigned int *)(v131 + 76) + 0xB0))(v24, ctx);
    }
    else
    {
      v223 = *(_QWORD *)(v131 + 48);
      if (!v223)
        v223 = *(_QWORD *)(v24 + 16);
    }
    if (*((_DWORD *)v130 + 20))
    {
      v161 = *((_DWORD *)v130 + 20);
      if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v103, 7u, a3, a4, a5, a6, a7, a8);
      v20 = v130;
      v126 = v223;
      if (*((_QWORD *)v130 + 2))
        goto LABEL_89;
    }
    else
    {
      v126 = v223;
      v20 = v130;
    }
LABEL_186:
    if ((v126 & 0xFFFE000000000002) == 0)
    {
      v24 = v126;
      if (*(unsigned __int8 *)(v126 + 5) > 0x16u)
        continue;
    }
    goto LABEL_89;
  }
  if (!(_DWORD)v23 || (v23 & ~*(_DWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_181;
  v105 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x58);
  if (!v105)
  {
    v106 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x40);
    if (!v106 || *(_BYTE *)(v106 + 5) != 1 && *(_DWORD *)(v106 + 80) < 2u)
      goto LABEL_181;
    v107 = (JSC::Structure *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE));
    v108 = v20;
    JSC::Structure::materializePropertyTable(v107, v20, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v104 = (uint64_t)v107;
    v20 = v108;
    if (!v105)
      goto LABEL_181;
  }
  if (!*(_DWORD *)(v105 + 24))
    goto LABEL_181;
  v109 = *(_QWORD *)(v105 + 16);
  v110 = v109 & 0xFFFFFFFFFFFFFFFELL;
  v111 = *(unsigned int *)(v105 + 8);
  v112 = *(_DWORD *)(v228 + 16);
  if ((v109 & 1) != 0)
  {
    if ((v112 & 0x20) != 0)
      v112 = *(_DWORD *)(v228 + 32);
    v113 = *(_DWORD *)(v105 + 12);
    v114 = (v112 >> 8) & *(_QWORD *)&v113;
    v115 = *(unsigned __int8 *)(v110 + v114);
    if (*(_BYTE *)(v110 + v114))
    {
      v116 = v110 + v111;
      v117 = 1;
      while (1)
      {
        v118 = *(_QWORD *)(v116 + 8 * (v115 - 1));
        if (v228 == (v118 & 0xFFFFFFFFFFFFLL))
          break;
        v114 = ((_DWORD)v114 + v117) & v113;
        v115 = *(unsigned __int8 *)(v110 + v114);
        ++v117;
        if (!*(_BYTE *)(v110 + v114))
          goto LABEL_181;
      }
      a6 = (v118 >> 16) & 0xFF00000000 | HIBYTE(v118);
      goto LABEL_178;
    }
    goto LABEL_181;
  }
  if ((v112 & 0x20) != 0)
    v112 = *(_DWORD *)(v228 + 32);
  v119 = *(_DWORD *)(v105 + 12);
  v120 = v119 & (v112 >> 8);
  v121 = *(_DWORD *)(v110 + 4 * v120);
  if (!v121)
    goto LABEL_181;
  v122 = v110 + 4 * v111;
  v123 = 1;
  while (1)
  {
    v124 = (v121 - 1);
    if (v228 == *(_QWORD *)(v122 + 16 * v124))
      break;
    v120 = (v120 + v123) & v119;
    v121 = *(_DWORD *)(v110 + 4 * v120);
    ++v123;
    if (!v121)
      goto LABEL_181;
  }
  a6 = *(unsigned int *)(v122 + 16 * v124 + 8) | ((unint64_t)*(unsigned __int8 *)(v122 + 16 * v124 + 12) << 32);
LABEL_178:
  if ((_DWORD)a6 == -1)
  {
LABEL_181:
    if ((*(_BYTE *)(v24 + 6) & 0x20) != 0)
    {
      v127 = v104;
      v128 = v20;
      v129 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v24, v20, v228, (uint64_t)&v231);
      v20 = v128;
      v104 = v127;
      if ((v129 & 1) != 0)
        goto LABEL_69;
    }
    goto LABEL_182;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v162 = v24 + 16;
    v163 = a6 << 32;
  }
  else
  {
    v162 = *(_QWORD *)(v24 + 8) - 8;
    v163 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v162 + (v163 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_278:
    v231 = a4;
    v235 = (_DWORD *)v24;
    goto LABEL_58;
  }
  v164 = *(unsigned __int8 *)(a4 + 5);
  if (v164 == 5)
    goto LABEL_68;
  if (v164 != 6)
    goto LABEL_278;
  v88 = *(_DWORD *)(v104 + 16) & 3;
  v167 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v231 = *(_QWORD *)(a4 + 8);
    v232 = v167;
    LODWORD(v233) = HIDWORD(a6);
    v235 = (_DWORD *)v24;
    goto LABEL_280;
  }
  v91 = *(int8x16_t ***)(a4 + 24);
  v90 = *(_QWORD *)(a4 + 32);
  v231 = *(_QWORD *)(a4 + 8);
  v232 = v167;
  LODWORD(v233) = HIDWORD(a6);
  v235 = (_DWORD *)v24;
LABEL_123:
  BYTE1(v236[1]) = 3;
  if (v88 != 2)
    LOBYTE(v236[1]) = 1;
  BYTE3(v236[1]) = 1;
  v239 = v91;
  v240 = v90;
LABEL_69:
  if (BYTE1(v236[1]) == 1)
  {
    v15 = v231;
  }
  else
  {
    if (BYTE1(v236[1]) == 2)
    {
      v60 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v231, ctx, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v61 = (unint64_t)v235;
      v62 = *(_QWORD *)(16 * (*v235 & 0xFFFFFFFE) + 0x28);
      if ((v233 & 0x20) != 0)
        v61 = (unint64_t)v234;
      if (BYTE3(v236[1]) != 1)
        goto LABEL_87;
      if ((v61 & 0xFFFE000000000002) != 0)
        goto LABEL_303;
      v63 = *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C);
      v64 = *(_DWORD *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C) != 0;
      v65 = 16 * v63;
      if ((_DWORD)v63)
        v66 = v239 == (int8x16_t **)v65;
      else
        v66 = 1;
      if (!v66)
      {
        do
        {
          v65 = *(_QWORD *)(v65 + 16);
          v64 = v65 != 0;
        }
        while ((int8x16_t **)v65 != v239 && v65 != 0);
      }
      if (!v64)
      {
LABEL_303:
        __dst = (JSC::VM *)*((_QWORD *)ctx + 7);
        v60 = JSC::throwDOMAttributeGetterTypeError(v62, &__dst, v239, (WTF::StringImpl *)v228);
      }
      else
      {
LABEL_87:
        v60 = ((uint64_t (*)(unint64_t))v231)(v62);
      }
    }
    v15 = v60;
  }
LABEL_89:
  v12 = v227;
  if (v238)
  {
    v68 = *(_DWORD *)(v237 + 4);
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x197F371ACLL);
    }
    *(_DWORD *)(v237 + 4) = v68 - 1;
  }
  v16 = v230;
  if (*((_DWORD *)v230 + 20))
  {
    v98 = *((_DWORD *)v230 + 20);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v230 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v16 + 2))
      return 0;
  }
LABEL_93:
  v69 = *((int *)a2 + 8) - 1;
  __dst = (JSC::VM *)v243;
  v242 = 16;
  if (v69 >= 0x11)
  {
    if (v69 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197F37F6CLL);
    }
    v165 = (JSC::VM *)WTF::fastMalloc((WTF *)(8 * v69));
    LODWORD(v242) = v69;
    __dst = v165;
    v70 = HIDWORD(v242);
LABEL_96:
    v71 = 0x600000000;
    v72 = v69;
    do
    {
      *((_QWORD *)__dst + v70++) = *(_QWORD *)((char *)a2 + (v71 >> 29));
      v71 += 0x100000000;
      --v72;
    }
    while (v72);
    HIDWORD(v242) = v70;
  }
  else if (v69)
  {
    v70 = 0;
    goto LABEL_96;
  }
  v73 = 0;
  *(_QWORD *)__s = 0;
  if (ctx)
    v73 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v231, v73, a3, a4, a5, a6, a7, a8);
  v17 = v12(ctx, v11, v69, __dst, __s);
  if (v232)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v232 + 112), (uint64_t)&v231, v231, v75, v76, v77, v78, v79);
    v82 = (unsigned int *)v232;
    v232 = 0;
    if (v82)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v82, (uint64_t)v74, v81, v75, v76, v77, v78, v79);
  }
  v83 = *(JSC::Exception **)__s;
  if (*(_QWORD *)__s)
  {
    if ((*(_QWORD *)__s & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (**(_DWORD **)__s & 0xFFFFFFFE) + 0x4C)))
    {
      v83 = (JSC::Exception *)JSC::Exception::create((uint64_t)v16, *(JSC::VM **)__s, 0, v75, v76, v77, v78, v79);
    }
    JSC::VM::throwException(v16, ctx, v83, v80, v75, v76, v77, v78, v79);
    v17 = 10;
  }
  else if (v17)
  {
    if (v11 != v229)
    {
      v86 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
      if (!v86)
        v86 = *(_QWORD *)(v17 + 16);
      if (v86 == JSC::JSObject::get((unsigned int *)v11, (uint64_t)ctx, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2160), v75, v76, v77, v78, v79))
      {
        if (*((_DWORD *)v16 + 20))
        {
          v166 = *((_DWORD *)v16 + 20);
          if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)v83, v75, v76, v77, v78, v79);
          if (*((_QWORD *)v16 + 2))
            goto LABEL_288;
        }
        (*(void (**)(uint64_t, const OpaqueJSContext *, uint64_t, _QWORD))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xA8))(v17, ctx, v15, 0);
        if (*((_DWORD *)v16 + 20))
        {
          v87 = *((_DWORD *)v16 + 20);
          if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)v83, v75, v76, v77, v78, v79);
          if (*((_QWORD *)v16 + 2))
LABEL_288:
            v17 = 0;
        }
      }
    }
  }
  else
  {
    v17 = JSC::throwTypeError(ctx, &v230);
  }
  v84 = __dst;
  if (v243 != (_BYTE *)__dst && __dst)
  {
    __dst = 0;
    LODWORD(v242) = 0;
    WTF::fastFree((unint64_t)v84, v74, (uint64_t)v83, v75, v76, v77, v78, v79);
  }
  return (JSObjectRef)v17;
}

void sub_197F3806C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,WTF *a29,int a30)
{
  WTF *v30;

  if (v30 != a29)
  {
    if (a29)
      WTF::fastFree((unint64_t)a29, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::objCCallbackFunctionCallAsFunction(JSC *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue *const *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7, uint64_t a8, double a9)
{
  JSC::ObjCCallbackFunctionImpl *v14;
  JSContext *v15;
  JSContext *v16;
  void *v17;
  const OpaqueJSValue *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  CFTypeRef v28;
  unint64_t v29;
  uint64_t v30;
  const WTF::String *v31;
  const OpaqueJSValue *TypeError;
  WTF::StringImpl *v33;
  uint64_t v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44[2];
  CFTypeRef v45;
  CFTypeRef cf;
  unsigned int *v47;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v47, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
  v14 = (JSC::ObjCCallbackFunctionImpl *)*((_QWORD *)a2 + 8);
  v15 = +[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", *((_QWORD *)a2 + 5));
  v16 = v15;
  if (*(_DWORD *)v14)
  {
    v45 = 0;
    cf = 0;
    v17 = (void *)MEMORY[0x19AEBB88C]();
    -[JSContext beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:](v16, "beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:", v44, a2, a3, a4, a5);
    v18 = JSC::ObjCCallbackFunctionImpl::call(v14, v16, a3, (unint64_t)a4, a5, a6);
    if (-[JSContext exception](v16, "exception"))
      *a6 = (const OpaqueJSValue *)-[JSContext exception](v16, "exception")[8];
    -[JSContext endCallbackWithData:](v16, "endCallbackWithData:", v44);
    objc_autoreleasePoolPop(v17);
    if (*a6)
      v26 = 0;
    else
      v26 = (uint64_t)v18;
    v27 = cf;
    cf = 0;
    if (v27)
      CFRelease(v27);
    v28 = v45;
    v45 = 0;
    if (v28)
      CFRelease(v28);
  }
  else
  {
    v29 = -[JSContext JSGlobalContextRef](v15, "JSGlobalContextRef");
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2D00000002;
    *(_QWORD *)(v30 + 8) = "Cannot call a class constructor without |new|";
    *(_DWORD *)(v30 + 16) = 4;
    v44[0] = (WTF::StringImpl *)v30;
    TypeError = (const OpaqueJSValue *)JSC::createTypeError(v29, v44, v31);
    *a6 = TypeError;
    v33 = v44[0];
    v44[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        TypeError = *a6;
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
    v34 = 10;
    if (!v29)
      v34 = 0;
    if (TypeError)
      v26 = 0;
    else
      v26 = v34;
  }
  JSC::JSLockHolder::~JSLockHolder(&v47, v19, v20, v21, v22, v23, v24, v25);
  return v26;
}

void sub_197F382DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, unsigned int *a18)
{
  JSC::JSLockHolder::~JSLockHolder(&a18, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

const OpaqueJSValue *JSC::objCCallbackFunctionCallAsConstructor(JSC *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, const OpaqueJSValue *const *a4, const OpaqueJSValue **a5, const OpaqueJSValue **a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::ObjCCallbackFunctionImpl *v14;
  JSContext *v15;
  void *v16;
  const OpaqueJSValue *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _BYTE v42[16];
  CFTypeRef v43;
  CFTypeRef cf;
  unsigned int *v45;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v45, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, a9);
  v14 = (JSC::ObjCCallbackFunctionImpl *)*((_QWORD *)a2 + 8);
  v15 = +[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", this);
  v43 = 0;
  cf = 0;
  v16 = (void *)MEMORY[0x19AEBB88C]();
  -[JSContext beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:](v15, "beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:", v42, a2, 0, a3, a4);
  v17 = JSC::ObjCCallbackFunctionImpl::call(v14, v15, 0, (unint64_t)a3, a4, a5);
  if (-[JSContext exception](v15, "exception"))
    *a5 = (const OpaqueJSValue *)-[JSContext exception](v15, "exception")[8];
  -[JSContext endCallbackWithData:](v15, "endCallbackWithData:", v42);
  objc_autoreleasePoolPop(v16);
  if (*a5)
    goto LABEL_11;
  v25 = -[JSContext JSGlobalContextRef](v15, "JSGlobalContextRef");
  v26 = v25;
  if (((unint64_t)v17 & 0xFFFE000000000002) != 0 || !v17 || !v25 || *((unsigned __int8 *)v17 + 5) <= 0x16u)
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x4000000002;
    *(_QWORD *)(v27 + 8) = "Objective-C blocks called as constructors must return an object.";
    *(_DWORD *)(v27 + 16) = 4;
    v41 = (WTF::StringImpl *)v27;
    *a5 = (const OpaqueJSValue *)JSC::createTypeError(v26, &v41, v28);
    v29 = v41;
    v41 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
LABEL_11:
    v17 = 0;
  }
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  v31 = v43;
  v43 = 0;
  if (v31)
    CFRelease(v31);
  JSC::JSLockHolder::~JSLockHolder(&v45, v18, v19, v20, v21, v22, v23, v24);
  return v17;
}

void sub_197F384DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, unsigned int *a18)
{
  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  JSC::JSLockHolder::~JSLockHolder(&a18, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

const OpaqueJSValue *JSC::ObjCCallbackFunctionImpl::call(JSC::ObjCCallbackFunctionImpl *this, JSContext *a2, OpaqueJSValue *a3, unint64_t a4, const OpaqueJSValue *const *a5, const OpaqueJSValue **a6)
{
  OpaqueJSContext *v12;
  OpaqueJSContext *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  const WTF::String *v18;
  const OpaqueJSValue *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const OpaqueJSValue *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  const OpaqueJSValue *v33;
  const OpaqueJSValue *v34;
  void *v36;
  id v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  v12 = -[JSContext JSGlobalContextRef](a2, "JSGlobalContextRef");
  v13 = v12;
  switch(*(_DWORD *)this)
  {
    case 0:
      if (a3)
      {
        __break(0xC471u);
        JUMPOUT(0x197F38750);
      }
      v14 = objc_alloc(*((Class *)this + 1));
      if (v14)
        goto LABEL_7;
      goto LABEL_10;
    case 1:
      v14 = (id)tryUnwrapObjcObject(v12, a3);
      if (!v14)
        goto LABEL_10;
LABEL_7:
      v16 = v14;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(*((id *)this + 2), "setTarget:", v16);
LABEL_9:
        v15 = 2;
LABEL_19:
        v30 = (_QWORD *)*((_QWORD *)this + 3);
        if (v30)
        {
          v31 = 0;
          if (v13)
            v32 = 10;
          else
            v32 = 0;
          do
          {
            v33 = (const OpaqueJSValue *)v32;
            if (v31 < a4)
              v33 = a5[v31];
            (*(void (**)(_QWORD *, _QWORD, unint64_t, JSContext *, const OpaqueJSValue *, const OpaqueJSValue **))(*v30 + 16))(v30, *((_QWORD *)this + 2), v15 + v31, a2, v33, a6);
            if (*a6)
              return 0;
            ++v31;
            v30 = (_QWORD *)v30[1];
          }
          while (v30);
        }
        objc_msgSend(*((id *)this + 2), "invoke");
        v34 = (const OpaqueJSValue *)(*(uint64_t (**)(_QWORD, _QWORD, JSContext *, const OpaqueJSValue **))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), *((_QWORD *)this + 2), a2, a6);
        if (*a6)
          return 0;
        v29 = v34;
        if (!*(_DWORD *)this)
        {
          v36 = (void *)tryUnwrapObjcObject(v13, v34);
          if (v36)
            v37 = v36;
        }
      }
      else
      {
LABEL_10:
        v17 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v17 = 0x3600000002;
        *(_QWORD *)(v17 + 8) = "self type check failed for Objective-C instance method";
        *(_DWORD *)(v17 + 16) = 4;
        v46 = (WTF::StringImpl *)v17;
        v19 = (const OpaqueJSValue *)JSC::createTypeError((unint64_t)v13, &v46, v18);
        *a6 = v19;
        v27 = v46;
        v46 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
            v19 = *a6;
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        v28 = 10;
        if (!v13)
          v28 = 0;
        if (v19)
          return 0;
        else
          return (const OpaqueJSValue *)v28;
      }
      return v29;
    case 2:
      goto LABEL_9;
    case 3:
      v15 = 1;
      goto LABEL_19;
    default:
      v15 = 0;
      goto LABEL_19;
  }
}

unint64_t objCCallbackFunctionForInvocation(void *a1, const void *a2, unsigned int a3, const void *a4, char *a5)
{
  unint64_t SlowCase;
  int v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (**v15)();
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  uint64_t (**v49)();
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  JSC::VM *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  unint64_t v94;
  _QWORD *v95;
  int v96;
  uint64_t (*v97)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  const char *Name;
  const char *v110;
  size_t v111;
  size_t v112;
  char *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t (*v126)(NSUInteger *);
  NSUInteger *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  const void *v135;
  void *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  NSUInteger alignp;
  NSUInteger sizep[3];

  if (!a5)
    return 0;
  SlowCase = 0;
  v12 = a5 + 1;
  v11 = *a5;
  if (v11 <= 82)
  {
    switch(*a5)
    {
      case '@':
        v16 = *v12;
        if (v16 == 34)
        {
          v12 = strchr(a5 + 2, 34) + 1;
        }
        else if (v16 == 63 && a5[2] == 60)
        {
          v12 = a5 + 3;
          v17 = 1;
          do
          {
            while (1)
            {
              v19 = *v12++;
              v18 = v19;
              if (v19 != 60)
                break;
              if (!++v17)
                goto LABEL_48;
            }
            if (v18 == 62)
            {
              --v17;
            }
            else if (!v18)
            {
              goto LABEL_183;
            }
          }
          while (v17);
        }
LABEL_48:
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = (uint64_t (**)())off_1E357BBB0;
        break;
      case 'A':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
        return SlowCase;
      case 'B':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = (uint64_t (**)())off_1E357BB60;
        break;
      case 'C':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357BA48;
        break;
      case 'I':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357BA70;
        break;
      default:
        if (v11 == 76)
        {
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          v14 = v13;
          v15 = off_1E357BAC0;
        }
        else
        {
          if (v11 != 81)
            return SlowCase;
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          v14 = v13;
          v15 = off_1E357BAE8;
        }
        break;
    }
LABEL_49:
    *v13 = v15;
  }
  else
  {
    switch(*a5)
    {
      case 'c':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357B980;
        goto LABEL_49;
      case 'd':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357BB38;
        goto LABEL_49;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
      case 't':
      case 'u':
        return SlowCase;
      case 'f':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357BB10;
        goto LABEL_49;
      case 'i':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357B9A8;
        goto LABEL_49;
      case 'l':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357B9F8;
        goto LABEL_49;
      case 'q':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357BA20;
        goto LABEL_49;
      case 's':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = off_1E357B9D0;
        goto LABEL_49;
      case 'v':
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v14 = v13;
        v15 = (uint64_t (**)())off_1E357BB88;
        goto LABEL_49;
      default:
        if (v11 == 83)
        {
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          v14 = v13;
          v15 = off_1E357BA98;
          goto LABEL_49;
        }
        if (v11 != 123)
          return SlowCase;
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = v12[v20];
          if (v22 == 123)
          {
            ++v21;
          }
          else if (v22 == 125)
          {
            --v21;
          }
          else if (!v12[v20])
          {
            goto LABEL_183;
          }
          ++v20;
        }
        while (v21);
        if (v20 + 1 < 0)
        {
LABEL_182:
          __break(1u);
LABEL_183:
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Malformed type encoding"), 0, v135));
        }
        v23 = WTF::fastMalloc((WTF *)(v20 + 18));
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = v20 + 1;
        memcpy((void *)(v23 + 16), a5, v20 + 1);
        *(_BYTE *)(v23 + v20 + 17) = 0;
        v31 = typeToValueInvocationFor(v23 + 16);
        if (v31)
        {
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v14 = off_1E357BBD8;
          v14[1] = v31;
          CFRetain(v31);
          alignp = 0;
          sizep[0] = 0;
          NSGetSizeAndAlignment((const char *)(v23 + 16), sizep, &alignp);
          v14[2] = WTF::fastAlignedMalloc(alignp, sizep[0], v32, v33, v34, v35, v36, v37);
        }
        else
        {
          v14 = 0;
        }
        v12 += v20;
        if (*(_DWORD *)v23 == 1)
        {
          WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          if (!v14)
            return 0;
        }
        else
        {
          --*(_DWORD *)v23;
          if (!v14)
            return 0;
        }
        break;
    }
  }
  if (*v12 - 48 > 9)
  {
    SlowCase = 0;
    goto LABEL_193;
  }
  v38 = v12 + 2;
  do
    v39 = *(v38++ - 1);
  while ((v39 - 48) < 0xA);
  v40 = v38 - 2;
  if (a3 < 3)
  {
    if (v39 == 64 && *(v38 - 1) - 48 <= 9)
    {
      do
      {
        v42 = *v38++;
        v41 = v42;
      }
      while ((v42 - 48) < 0xA);
      if (v41 == 58 && *v38 - 48 <= 9)
      {
        v136 = a1;
        v40 = v38;
        do
          v43 = *++v40;
        while ((v43 - 48) < 0xA);
        goto LABEL_71;
      }
    }
LABEL_191:
    SlowCase = 0;
    goto LABEL_192;
  }
  v136 = a1;
  if (a3 != 3)
    goto LABEL_71;
  if (v39 != 64 || *(v38 - 1) != 63 || *v38 - 48 > 9)
    goto LABEL_191;
  v40 = v38;
  do
    v44 = *++v40;
  while ((v44 - 48) < 0xA);
  if (HIBYTE(word_1ECF58553) == 1)
  {
    if ((_BYTE)word_1ECF58553)
      goto LABEL_71;
  }
  else if (_Block_has_signature(&__block_literal_global_95))
  {
    v132 = (char *)_Block_signature(&__block_literal_global_95);
    v133 = strstr(v132, "NSString");
    LOBYTE(word_1ECF58553) = v133 != 0;
    HIBYTE(word_1ECF58553) = 1;
    if (v133)
      goto LABEL_71;
  }
  else
  {
    word_1ECF58553 = 256;
  }
  if (strchr(v40, 64))
    goto LABEL_191;
LABEL_71:
  v138 = 0;
  v45 = *v40;
  if (!*v40)
  {
LABEL_128:
    v75 = objc_msgSend(v136, "JSGlobalContextRef", v135);
    v76 = *(_QWORD *)(v75 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&alignp, (JSC::VM *)v76, v77, v78, v79, v80, v81, v82, v83);
    v91 = WTF::fastMalloc((WTF *)0x28);
    v92 = v138;
    v138 = 0;
    *(_DWORD *)v91 = a3;
    *(_QWORD *)(v91 + 8) = a4;
    if (a4)
      CFRetain(a4);
    *(_QWORD *)(v91 + 16) = a2;
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(v91 + 24) = v92;
    *(_QWORD *)(v91 + 32) = v14;
    if (*(_DWORD *)v91)
      goto LABEL_133;
    Name = class_getName(*(Class *)(v91 + 8));
    v110 = Name;
    if (Name)
    {
      v111 = strlen(Name);
      if (!v111)
      {
LABEL_133:
        v93 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_134;
      }
      v112 = v111;
      if (v111 >> 31)
      {
LABEL_195:
        __break(0xC471u);
        JUMPOUT(0x197F392ACLL);
      }
      v93 = (int *)WTF::fastCompactMalloc((WTF *)(v111 + 20));
      v113 = (char *)(v93 + 5);
      *v93 = 2;
      v93[1] = v112;
      *((_QWORD *)v93 + 1) = v93 + 5;
      v93[4] = 4;
      if (v112 == 1)
        *v113 = *v110;
      else
        memcpy(v113, v110, v112);
    }
    else
    {
      v93 = 0;
    }
LABEL_134:
    v137 = (WTF::StringImpl *)v93;
    v94 = *(_QWORD *)(v75 + 816);
    if ((v94 & 1) != 0)
    {
      v126 = *(uint64_t (**)(NSUInteger *))(v94 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v75 & 8) != 0)
        v127 = (NSUInteger *)(v75 - 16);
      else
        v127 = (NSUInteger *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
      sizep[0] = *v127;
      sizep[1] = v75;
      sizep[2] = v75 + 816;
      v94 = v126(sizep);
    }
    v95 = *(_QWORD **)(v76 + 40296);
    if (!v95)
      v95 = (_QWORD *)JSC::GCClient::Heap::objCCallbackFunctionSpaceSlow((JSC::Heap **)(v76 + 37552));
    SlowCase = v95[3];
    if (SlowCase >= v95[4])
    {
      SlowCase = v95[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v76, v84, v85, v86, v87, v88, v89, v90);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v95, v76 + 192, 80, 0, 0, v129, v130, v131);
LABEL_139:
        *(_DWORD *)SlowCase = 0;
        v96 = *(_DWORD *)v91;
        if (*(_DWORD *)v91 == 3)
        {
          if (objc_msgSend(*(id *)(v91 + 16), "target"))
            goto LABEL_144;
          v96 = *(_DWORD *)v91;
        }
        if (v96)
        {
          v97 = 0;
LABEL_145:
          JSC::InternalFunction::InternalFunction(SlowCase, v76, v94, (uint64_t)JSC::callObjCCallbackFunction, v97);
          *(_QWORD *)(SlowCase + 48) = JSC::objCCallbackFunctionCallAsFunction;
          *(_QWORD *)(SlowCase + 56) = JSC::objCCallbackFunctionCallAsConstructor;
          *(_QWORD *)(SlowCase + 64) = v91;
          JSC::InternalFunction::finishCreation(SlowCase, (JSC *)v76, 0, (JSC::VM *)&v137, 0, v98, v99, v100);
          v108 = v137;
          v137 = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
            {
              WTF::StringImpl::~StringImpl(v108, v101, v102, v103, v104, v105, v106, v107);
              WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
            }
            else
            {
              *(_DWORD *)v108 -= 2;
            }
          }
          JSC::JSLockHolder::~JSLockHolder((unsigned int **)&alignp, v101, v102, v103, v104, v105, v106, v107);
          v14 = 0;
          goto LABEL_151;
        }
LABEL_144:
        v97 = (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructObjCCallbackFunction;
        goto LABEL_145;
      }
      v128 = *(_QWORD *)(SlowCase + 8) ^ v95[6];
      v95[4] = SlowCase + HIDWORD(v128);
      v95[5] = SlowCase + (int)v128;
    }
    v95[3] = SlowCase + 80;
    goto LABEL_139;
  }
  v46 = &v138;
  while (2)
  {
    v47 = v40 + 1;
    if (v45 > 82)
    {
      switch(v45)
      {
        case 'c':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BC40;
          goto LABEL_108;
        case 'd':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BDF8;
          goto LABEL_108;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
        case 't':
        case 'u':
          goto LABEL_150;
        case 'f':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BDD0;
          goto LABEL_108;
        case 'i':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BC68;
          goto LABEL_108;
        case 'l':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BCB8;
          goto LABEL_108;
        case 'q':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BCE0;
          goto LABEL_108;
        case 's':
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BC90;
          goto LABEL_108;
        case 'v':
          goto LABEL_195;
        default:
          if (v45 == 83)
          {
            v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
            v48[1] = 0;
            v49 = &off_1E357BD58;
            goto LABEL_108;
          }
          if (v45 != 123)
            goto LABEL_150;
          v135 = a2;
          v51 = 0;
          v52 = 1;
          do
          {
            v53 = v47[v51];
            if (v53 == 123)
            {
              ++v52;
            }
            else if (v53 == 125)
            {
              --v52;
            }
            else if (!v47[v51])
            {
              goto LABEL_181;
            }
            ++v51;
          }
          while (v52);
          if (v51 + 1 < 0)
            goto LABEL_182;
          v54 = WTF::fastMalloc((WTF *)(v51 + 18));
          *(_DWORD *)v54 = 1;
          *(_QWORD *)(v54 + 8) = v51 + 1;
          memcpy((void *)(v54 + 16), v40, v51 + 1);
          *(_BYTE *)(v54 + v51 + 17) = 0;
          v62 = valueToTypeInvocationFor(v54 + 16);
          if (v62)
          {
            v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v63 = off_1E357BF88;
            *((_QWORD *)v63 + 1) = 0;
            *((_QWORD *)v63 + 2) = v62;
            CFRetain(v62);
            alignp = 0;
            sizep[0] = 0;
            NSGetSizeAndAlignment((const char *)(v54 + 16), sizep, &alignp);
            *((_QWORD *)v63 + 3) = WTF::fastAlignedMalloc(alignp, sizep[0], v64, v65, v66, v67, v68, v69);
          }
          else
          {
            v63 = 0;
          }
          v47 += v51;
          v137 = v63;
          if (*(_DWORD *)v54 == 1)
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          else
            --*(_DWORD *)v54;
          a2 = v135;
          break;
      }
      goto LABEL_123;
    }
    switch(v45)
    {
      case '@':
        v50 = *v47;
        if (v50 == 34)
        {
          v72 = v40 + 2;
          v73 = strchr(v72, 60);
          v74 = strchr(v72, 34);
          v47 = v74 + 1;
          if (!v73 || v73 > v74)
          {
            ArgumentTypeDelegate::typeOfClass((ArgumentTypeDelegate *)&v137, v72, v74);
LABEL_123:
            v48 = (uint64_t *)v137;
            if (!v137)
              goto LABEL_150;
            goto LABEL_109;
          }
          if (v72 != v73)
          {
            ArgumentTypeDelegate::typeOfClass((ArgumentTypeDelegate *)&v137, v72, v73);
            goto LABEL_123;
          }
LABEL_80:
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = (uint64_t (**)())off_1E357BF60;
LABEL_108:
          *v48 = (uint64_t)v49;
          v137 = (WTF::StringImpl *)v48;
LABEL_109:
          v40 = v47;
          if (*v47 - 48 > 9)
          {
            (*(void (**)(uint64_t *))(*v48 + 8))(v48);
            goto LABEL_150;
          }
          do
            v70 = *++v40;
          while ((v70 - 48) < 0xA);
          v71 = (_QWORD *)*v46;
          *v46 = (uint64_t)v48;
          if (v71)
          {
            (*(void (**)(_QWORD *))(*v71 + 8))(v71);
            v48 = (uint64_t *)*v46;
          }
          v46 = v48 + 1;
          v45 = *v40;
          if (!*v40)
            goto LABEL_128;
          continue;
        }
        if (v50 != 63 || v40[2] != 60)
          goto LABEL_80;
        v122 = (unsigned __int8 *)(v40 + 3);
        v123 = 1;
        do
        {
          v125 = *v122++;
          v124 = v125;
          if (v125 == 60)
          {
            ++v123;
          }
          else if (v124 == 62)
          {
            --v123;
          }
          else if (!v124)
          {
LABEL_181:
            objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Malformed type encoding"), 0, v135));
          }
        }
        while (v123);
LABEL_150:
        SlowCase = 0;
LABEL_151:
        if (v138)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
LABEL_192:
        if (v14)
LABEL_193:
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        return SlowCase;
      case 'A':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
        goto LABEL_150;
      case 'B':
        v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        v48[1] = 0;
        v49 = (uint64_t (**)())off_1E357BE20;
        goto LABEL_108;
      case 'C':
        v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        v48[1] = 0;
        v49 = &off_1E357BD08;
        goto LABEL_108;
      case 'I':
        v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        v48[1] = 0;
        v49 = &off_1E357BD30;
        goto LABEL_108;
      default:
        if (v45 == 76)
        {
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BD80;
        }
        else
        {
          if (v45 != 81)
            goto LABEL_150;
          v48 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          v48[1] = 0;
          v49 = &off_1E357BDA8;
        }
        goto LABEL_108;
    }
  }
}

void sub_197F39388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(exception_object);
}

unint64_t makeWrapper(uint64_t a1, OpaqueJSClass *a2, objc_object *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  unsigned int *v33;
  _QWORD v34[3];

  v12 = *(JSC::VM **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v33, v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(a1 + 824);
  if ((v13 & 1) != 0)
  {
    v31 = *(uint64_t (**)(_QWORD *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v32 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v32 = (_QWORD *)(a1 - 16);
    v34[0] = *v32;
    v34[1] = a1;
    v34[2] = a1 + 824;
    v13 = v31(v34);
  }
  JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::create(a1, v13, (unsigned int *)a2);
  v15 = v14;
  *(_QWORD *)(v14 + 16) = a3;
  v23 = OpaqueJSClass::prototype(a2, a1, v16, v17, v18, v19, v20, v21);
  if (v23)
    JSC::JSObject::setPrototypeDirect(v15, v12, v23, v24, v25, v26, v27, v28, v29);
  JSC::JSLockHolder::~JSLockHolder(&v33, v22, v23, v24, v25, v26, v27, v28);
  return v15;
}

void sub_197F3979C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  JSC::JSLockHolder::~JSLockHolder(&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)(a1 + 48);
      do
      {
        v11 = *v10;
        if (*v10 != (WTF::StringImpl *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void ___ZL33allocateConstructorForCustomClassP9JSContextPKcP10objc_class_block_invoke(uint64_t a1, Protocol *p)
{
  uint64_t v2;
  objc_method_description *v3;
  objc_method_description *v4;
  unint64_t v5;
  char **p_types;
  _QWORD v7[2];
  void (*v8)(uint64_t, SEL);
  void *v9;
  Protocol *v10;
  uint64_t v11;
  unsigned int outCount;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v8 = ___ZL33allocateConstructorForCustomClassP9JSContextPKcP10objc_class_block_invoke_2;
  v9 = &unk_1E357B848;
  v2 = *(_QWORD *)(a1 + 32);
  v10 = p;
  v11 = v2;
  outCount = 0;
  v3 = protocol_copyMethodDescriptionList(p, 1, 1, &outCount);
  v4 = v3;
  if (outCount)
  {
    v5 = 0;
    p_types = &v3->types;
    do
    {
      ((void (*)(_QWORD *, _QWORD, char *))v8)(v7, *(p_types - 1), *p_types);
      ++v5;
      p_types += 2;
    }
    while (v5 < outCount);
  }
  else if (!v3)
  {
    return;
  }
  free(v4);
}

void sub_197F3990C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void ___ZL33allocateConstructorForCustomClassP9JSContextPKcP10objc_class_block_invoke_2(uint64_t a1, SEL sel)
{
  const char *Name;
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  int *v13;
  char *v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int **v21;
  int i;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  Name = sel_getName(sel);
  if (isInitFamilyMethod((NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Name)))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (Name)
    {
      v11 = strlen(Name);
      if (v11)
      {
        v12 = v11;
        if (v11 >> 31)
        {
          __break(0xC471u);
          return;
        }
        v13 = (int *)WTF::fastCompactMalloc((WTF *)(v11 + 20));
        v14 = (char *)(v13 + 5);
        *v13 = 2;
        v13[1] = v12;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 4;
        if (v12 == 1)
          *v14 = *Name;
        else
          memcpy(v14, Name, v12);
      }
      else
      {
        v13 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = (uint64_t *)(v10 + 48);
    v16 = *(int **)(a1 + 32);
    v17 = *(_QWORD *)(v10 + 48);
    if (v17
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v15, 8uLL, 0, v5, v6, v7, v8, v9), (v17 = *v15) != 0))
    {
      v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = v13[4];
    if (v19 < 0x100)
      v20 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v13);
    else
      v20 = v19 >> 8;
    v21 = 0;
    for (i = 1; ; ++i)
    {
      v23 = v20 & v18;
      v24 = (WTF **)(v17 + 16 * v23);
      v25 = *v24;
      if (*v24 == (WTF *)-1)
      {
        v21 = (int **)(v17 + 16 * v23);
      }
      else
      {
        if (!v25)
        {
          if (v21)
          {
            *v21 = 0;
            v21[1] = 0;
            --*(_DWORD *)(*v15 - 16);
            *v21 = v13;
          }
          else
          {
            *v24 = (WTF *)v13;
            v21 = (int **)(v17 + 16 * v23);
          }
          v21[1] = v16;
          v27 = *v15;
          if (*v15)
            v28 = *(_DWORD *)(v27 - 12) + 1;
          else
            v28 = 1;
          *(_DWORD *)(v27 - 12) = v28;
          v29 = *v15;
          if (*v15)
            v30 = *(_DWORD *)(v29 - 12);
          else
            v30 = 0;
          v31 = (*(_DWORD *)(v29 - 16) + v30);
          v32 = *(unsigned int *)(v29 - 4);
          if (v32 > 0x400)
          {
            if (v32 > 2 * v31)
              return;
LABEL_37:
            v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
          }
          else
          {
            if (3 * v32 > 4 * v31)
              return;
            if ((_DWORD)v32)
              goto LABEL_37;
            v33 = 8;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v15, v33, (uint64_t)v21, v5, v6, v7, v8, v9);
          return;
        }
        if (WTF::equal(v25, (const WTF::StringImpl *)v13, v4))
        {
          *(_QWORD *)(v17 + 16 * v23 + 8) = v16;
          if (*v13 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v26, (uint64_t)v4, v5, v6, v7, v8, v9);
            WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
          }
          else
          {
            *v13 -= 2;
          }
          return;
        }
      }
      v20 = i + v23;
    }
  }
}

void sub_197F39BD0(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t isInitFamilyMethod(NSString *a1)
{
  unint64_t i;
  unint64_t v3;
  int v4;

  for (i = 0; i < -[NSString length](a1, "length"); ++i)
  {
    if (-[NSString characterAtIndex:](a1, "characterAtIndex:", i) != 95)
      break;
  }
  if (i >= -[NSString length](a1, "length"))
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    while (v3 < objc_msgSend(CFSTR("init"), "length"))
    {
      v4 = -[NSString characterAtIndex:](a1, "characterAtIndex:", i + v3);
      if (v4 != objc_msgSend(CFSTR("init"), "characterAtIndex:", v3))
        return 0;
      ++v3;
      if (i + v3 >= -[NSString length](a1, "length"))
      {
        i += v3;
        goto LABEL_12;
      }
    }
    i += v3;
  }
LABEL_12:
  if (v3 < objc_msgSend(CFSTR("init"), "length"))
    return 0;
  if (i == -[NSString length](a1, "length"))
    return 1;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "uppercaseLetterCharacterSet"), "characterIsMember:", -[NSString characterAtIndex:](a1, "characterAtIndex:", i));
}

void __Block_byref_object_copy__64(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__65(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZL33allocateConstructorForCustomClassP9JSContextPKcP10objc_class_block_invoke_66(_QWORD *a1, Method m)
{
  const char *Name;
  const char *v5;
  WTF::AtomStringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  size_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  Name = method_getName(m);
  v5 = sel_getName(Name);
  v13 = *(_QWORD *)(a1[4] + 8);
  if (v5)
  {
    v14 = v5;
    v15 = strlen(v5);
    if (v15)
    {
      v16 = v15;
      if (v15 >> 31)
      {
        __break(0xC471u);
        return;
      }
      v17 = (int *)WTF::fastCompactMalloc((WTF *)(v15 + 20));
      v18 = (char *)(v17 + 5);
      *v17 = 2;
      v17[1] = v16;
      *((_QWORD *)v17 + 1) = v17 + 5;
      v17[4] = 4;
      if (v16 == 1)
        *v18 = *v14;
      else
        memcpy(v18, v14, v16);
    }
    else
    {
      v17 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = *(_QWORD *)(v13 + 48);
  if (!v19)
  {
LABEL_21:
    if (!v17)
      goto LABEL_24;
LABEL_22:
    if (*v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *v17 -= 2;
    }
    goto LABEL_24;
  }
  v20 = *(_DWORD *)(v19 - 8);
  v21 = v17[4];
  if (v21 < 0x100)
    v22 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v17);
  else
    v22 = v21 >> 8;
  for (i = 0; ; v22 = i + v24)
  {
    v24 = v22 & v20;
    v25 = *(WTF **)(v19 + 16 * v24);
    if (v25 == (WTF *)-1)
      goto LABEL_16;
    if (!v25)
      break;
    if (WTF::equal(v25, (const WTF::StringImpl *)v17, v7))
    {
      v19 += 16 * v24;
      goto LABEL_21;
    }
LABEL_16:
    ++i;
  }
  v26 = *(_QWORD *)(v13 + 48);
  if (!v26)
  {
    v19 = 0;
    if (!v17)
      goto LABEL_24;
    goto LABEL_22;
  }
  v19 = v26 + 16 * *(unsigned int *)(v26 - 4);
  if (v17)
    goto LABEL_22;
LABEL_24:
  v27 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48);
  if (v27)
    v27 += 16 * *(unsigned int *)(v27 - 4);
  if (v27 != v19)
  {
    ++*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = Name;
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = method_getTypeEncoding(m);
  }
}

void sub_197F39F5C(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t constructorHasInstance(const OpaqueJSContext *a1, OpaqueJSValue *a2, const OpaqueJSValue *a3, const OpaqueJSValue **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t HasInstance;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v34;

  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v34, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v18 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*((_QWORD *)v12 + 5244) + 2160), v13, v14, v15, v16, v17);
  if (a3)
    v24 = (uint64_t)a3;
  else
    v24 = 2;
  HasInstance = JSC::JSObject::defaultHasInstance((unint64_t)a1, v24, v18, v19, v20, v21, v22, v23);
  JSC::JSLockHolder::~JSLockHolder(&v34, v26, v27, v28, v29, v30, v31, v32);
  return HasInstance;
}

void sub_197F3A018(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr(a1);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, a1));
  if (!v9)
  {
    atomic_store(1u, a1);
    JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (WTF::StringImpl **)(v10 + 16 * i);
      v23 = *v22;
      if (*v22 != (WTF::StringImpl *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if (v26 < 0x100)
            v27 = WTF::StringImpl::hashSlowCase(v23);
          else
            v27 = v26 >> 8;
          v28 = 0;
          do
          {
            v29 = v27 & v25;
            v27 = ++v28 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = (_QWORD *)(v24 + 16 * v29);
          *v30 = 0;
          v31 = *(_OWORD *)v22;
          *v22 = 0;
          *(_OWORD *)v30 = v31;
          v32 = *v22;
          *v22 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
        else
        {
          *v22 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = *(_QWORD *)(v10 + 8 * i);
      if ((unint64_t)(v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v14 = *(void **)(v23 + 8 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v14);
        *(_QWORD *)(v23 + 8 * v30) = v22;
      }
    }
  }
  if (v10)
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(result + 56) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v2;
  return result;
}

void __Block_byref_object_dispose__77(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void *v12;
  const void *v13;
  unint64_t v14;

  v9 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v9)
  {
    v10 = 24 * v9;
    v11 = (const void **)(*(_QWORD *)(a1 + 48) + 16);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
        CFRelease(v12);
      v13 = *(v11 - 1);
      *(v11 - 1) = 0;
      if (v13)
        CFRelease(v13);
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
}

void ___ZL23copyPrototypePropertiesP9JSContextP10objc_classP8ProtocolP7JSValue_block_invoke(uint64_t a1, objc_property_t property)
{
  const char *Name;
  objc_property_attribute_t *v5;
  objc_property_attribute_t *v6;
  const void *v7;
  unint64_t v8;
  char v9;
  const char **p_value;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  char v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  size_t v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  char v25;
  const void *v26;
  int v27;
  char v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeRef v45;
  const char **v46;
  CFTypeRef v47;
  const char *v48;
  CFTypeRef cf;
  CFTypeRef v50;
  unsigned int outCount[2];
  int v52;
  unsigned int v53;
  _BYTE v54[128];

  Name = property_getName(property);
  cf = 0;
  v50 = 0;
  v48 = Name;
  outCount[0] = 0;
  v5 = property_copyAttributeList(property, outCount);
  v6 = v5;
  if (!outCount[0])
  {
    if (v5)
      free(v5);
    v17 = 0;
    goto LABEL_22;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  p_value = &v5->value;
  do
  {
    v11 = **(p_value - 1);
    switch(v11)
    {
      case 'G':
        v14 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *p_value);
        v15 = v14;
        if (v14)
          CFRetain(v14);
        v16 = cf;
        cf = v15;
        if (v16)
          CFRelease(v16);
        break;
      case 'R':
        v9 = 1;
        break;
      case 'S':
        v12 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *p_value);
        v13 = v12;
        if (v12)
          CFRetain(v12);
        v50 = v13;
        if (v7)
          CFRelease(v7);
        v7 = v13;
        break;
    }
    ++v8;
    p_value += 2;
  }
  while (v8 < outCount[0]);
  v17 = v9;
  v18 = cf;
  free(v6);
  if (!cf)
  {
LABEL_22:
    v19 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Name);
    v18 = v19;
    if (v19)
      CFRetain(v19);
    cf = v18;
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), v18);
  if ((v17 & 1) != 0)
    goto LABEL_47;
  v20 = v50;
  if (!v50)
  {
    v21 = strlen(Name);
    v22 = v21;
    v23 = v21 + 5;
    *(_QWORD *)outCount = v54;
    v52 = 128;
    v53 = v21 + 5;
    if (v21 + 5 < 0x81)
    {
      v24 = v54;
    }
    else
    {
      if (HIDWORD(v23))
        goto LABEL_60;
      v24 = (_BYTE *)WTF::fastMalloc((WTF *)(v21 + 5));
      v52 = v23;
      *(_QWORD *)outCount = v24;
      LODWORD(v23) = v53;
    }
    if ((_DWORD)v23)
    {
      *v24 = 115;
      if (v53 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F3A774);
      }
      *(_BYTE *)(*(_QWORD *)outCount + 1) = 101;
      if (v53 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197F3A77CLL);
      }
      *(_BYTE *)(*(_QWORD *)outCount + 2) = 116;
      if (v53 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197F3A784);
      }
      v27 = *(unsigned __int8 *)Name;
      v26 = Name + 1;
      v25 = v27;
      if ((v27 - 97) >= 0x1A)
        v28 = -1;
      else
        v28 = -33;
      *(_BYTE *)(*(_QWORD *)outCount + 3) = v28 & v25;
      memcpy((void *)(*(_QWORD *)outCount + 4), v26, v22 - 1);
      if (v22 + 3 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x197F3A78CLL);
      }
      *(_BYTE *)(*(_QWORD *)outCount + v22 + 3) = 58;
      if (v22 + 4 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x197F3A794);
      }
      *(_BYTE *)(*(_QWORD *)outCount + v22 + 4) = 0;
      v29 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)outCount);
      v20 = v29;
      if (v29)
        CFRetain(v29);
      v37 = *(_QWORD *)outCount;
      if (v54 != *(_BYTE **)outCount && *(_QWORD *)outCount)
      {
        *(_QWORD *)outCount = 0;
        v52 = 0;
        WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
      }
      v50 = v20;
      goto LABEL_46;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x197F3A76CLL);
  }
LABEL_46:
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), v20);
LABEL_47:
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v39 = *(unsigned int *)(v38 + 60);
  if ((_DWORD)v39 == *(_DWORD *)(v38 + 56))
  {
    v40 = (_QWORD *)WTF::Vector<Property,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 48, v39 + 1, (unint64_t)&v48);
    v41 = *(_DWORD *)(v38 + 60);
    v42 = (_QWORD *)(*(_QWORD *)(v38 + 48) + 24 * v41);
    *v42 = *v40;
    v43 = v40[1];
    v40[1] = 0;
    v42[1] = v43;
    v44 = v40[2];
    v40[2] = 0;
    v42[2] = v44;
    v45 = v50;
    *(_DWORD *)(v38 + 60) = v41 + 1;
    v50 = 0;
    if (v45)
      CFRelease(v45);
  }
  else
  {
    v46 = (const char **)(*(_QWORD *)(v38 + 48) + 24 * v39);
    *v46 = v48;
    cf = 0;
    v46[1] = (const char *)v18;
    v46[2] = (const char *)v50;
    *(_DWORD *)(v38 + 60) = v39 + 1;
    v50 = 0;
  }
  v47 = cf;
  cf = 0;
  if (v47)
    CFRelease(v47);
}

void sub_197F3A7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, WTF *a13, int a14)
{
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<Property,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<Property,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<Property,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<Property,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = (_QWORD *)v6;
        v15 = (_QWORD *)(v3 + 24 * v4);
        v16 = (_QWORD *)v3;
        do
        {
          *v14 = *v16;
          v17 = v16[1];
          v16[1] = 0;
          v14[1] = v17;
          v18 = v16[2];
          v16[2] = 0;
          v14[2] = v18;
          v19 = (const void *)v16[2];
          v16[2] = 0;
          if (v19)
            CFRelease(v19);
          v20 = (const void *)v16[1];
          v16[1] = 0;
          if (v20)
            CFRelease(v20);
          v16 += 3;
          v14 += 3;
        }
        while (v16 != v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void ___ZL19copyMethodsToObjectP9JSContextP10objc_classP8ProtocolbP7JSValueP19NSMutableDictionary_block_invoke(uint64_t a1, SEL sel, uint64_t a3)
{
  char *Name;
  NSString *v7;
  void *v8;
  void *v9;
  const void *v10;
  int v11;
  void *v12;
  unsigned int v13;
  const __CFString *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  void *v24;
  const void *v25;
  int v26;
  void *v27;
  unsigned int v28;
  char *v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  WTF *v33;
  _BYTE *v34;
  char *i;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  unint64_t v43;
  char *MethodTypeEncoding;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[256];

  Name = (char *)sel_getName(sel);
  v7 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Name);
  if (byte_1ECF58551 != 1)
  {
    v55 = (WTF *)NSVersionOfLinkTimeLibrary("JavaScriptCore");
    if ((_DWORD)v55 == -1)
    {
      _MergedGlobals_26 = WTF::sdkAlignedBehaviors(v55)[1] & 1;
      byte_1ECF58551 = 1;
      if (!_MergedGlobals_26)
        goto LABEL_4;
    }
    else
    {
      byte_1ECF58551 = 1;
      _MergedGlobals_26 = (int)v55 > 35259391;
      if ((int)v55 <= 35259391)
        goto LABEL_4;
    }
LABEL_3:
    if ((isInitFamilyMethod(v7) & 1) != 0)
      return;
    goto LABEL_4;
  }
  if (_MergedGlobals_26)
    goto LABEL_3;
LABEL_4:
  v8 = *(void **)(a1 + 32);
  if (v8 && objc_msgSend(v8, "objectForKeyedSubscript:", v7))
  {
    v9 = *(void **)(a1 + 40);
    v10 = *(const void **)(a1 + 48);
    v11 = *(unsigned __int8 *)(a1 + 80);
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", a3));
    objc_msgSend(v12, "setSelector:", sel);
    if (v11)
    {
      v13 = 1;
    }
    else
    {
      objc_msgSend(v12, "setTarget:", v10);
      CFRetain(v10);
      v10 = 0;
      v13 = 2;
    }
    MethodTypeEncoding = (char *)_protocol_getMethodTypeEncoding();
    v45 = objCCallbackFunctionForInvocation(v9, v12, v13, v10, MethodTypeEncoding);
    if (v45)
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v45, *(_QWORD *)(a1 + 40)), v7);
  }
  else
  {
    v14 = (const __CFString *)objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:", v7);
    if (!v14)
    {
      v29 = strchr(Name, 58);
      if (v29)
      {
        v30 = v29 - Name;
        v31 = strlen(v29 + 1);
        v32 = v30 + v31 + 1;
        v57 = (WTF *)v60;
        LODWORD(v59) = 256;
        HIDWORD(v59) = v30 + v31 + 1;
        v33 = (WTF *)v60;
        if (v32 >= 0x101)
        {
          if (HIDWORD(v32))
          {
            __break(0xC471u);
            return;
          }
          v33 = (WTF *)WTF::fastMalloc((WTF *)v32);
          LODWORD(v59) = v32;
          v57 = v33;
        }
        memcpy(v33, Name, v30);
        v34 = (char *)v57 + v30;
        for (i = &Name[v30 + 1]; ; i += v40 + 1)
        {
          do
          {
            v37 = *i++;
            v36 = v37;
          }
          while (v37 == 58);
          v38 = (v36 - 97) >= 0x1A ? 255 : 223;
          v39 = v38 & v36;
          *v34 = v39;
          if (!v39)
            break;
          v40 = 0;
          while (1)
          {
            v41 = i[v40];
            if (v41 == 58)
              break;
            v34[++v40] = v41;
            if (!v41)
              goto LABEL_47;
          }
          v34 += v40 + 1;
        }
LABEL_47:
        v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v57, v57, v59);
        v53 = (unint64_t)v56;
        if (v60 != (_BYTE *)v56 && v56 != 0)
        {
          v56 = 0;
          LODWORD(v58) = 0;
          WTF::fastFree(v53, v46, v47, v48, v49, v50, v51, v52);
        }
      }
      else
      {
        v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Name);
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "JSGlobalContextRef", v56, v58);
    v15 = (void *)objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v14);
    if (!objc_msgSend(v15, "isObject"))
      goto LABEL_23;
    v16 = objc_msgSend(v15, "JSValueRef");
    v17 = 2;
    if (v16)
      v17 = v16;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_23;
    v18 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
    v19 = *(unsigned int *)(v18 + 76);
    v20 = *(_DWORD *)(v18 + 76) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &JSC::ObjCCallbackFunction::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &JSC::ObjCCallbackFunction::s_info && v21 != 0);
    }
    if (!v20)
    {
LABEL_23:
      v24 = *(void **)(a1 + 40);
      v25 = *(const void **)(a1 + 48);
      v26 = *(unsigned __int8 *)(a1 + 80);
      v27 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", a3));
      objc_msgSend(v27, "setSelector:", sel);
      if (v26)
      {
        v28 = 1;
      }
      else
      {
        objc_msgSend(v27, "setTarget:", v25);
        CFRetain(v25);
        v25 = 0;
        v28 = 2;
      }
      v42 = (char *)_protocol_getMethodTypeEncoding();
      v43 = objCCallbackFunctionForInvocation(v24, v27, v28, v25, v42);
      if (v43)
        putNonEnumerable(*(JSContext **)(a1 + 40), *(JSValue **)(a1 + 64), v14, +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v43, *(_QWORD *)(a1 + 40)));
    }
  }
}

void sub_197F3AE38(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, int a10)
{
  WTF *v10;

  if (v10 != a9 && a9 != 0)
    WTF::fastFree((unint64_t)a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_72c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_72c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t ___ZL15createRenameMapP8Protocolb_block_invoke(uint64_t a1, SEL sel)
{
  void *v3;
  uint64_t result;
  uint64_t v5;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sel_getName(sel));
  result = objc_msgSend(v3, "rangeOfString:", CFSTR("__JS_EXPORT_AS__"));
  if (result != 0x7FFFFFFFFFFFFFFFLL)
    return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", objc_msgSend(v3, "substringWithRange:", result + v5, objc_msgSend(v3, "length") + ~(result + v5)), objc_msgSend(v3, "substringToIndex:", result));
  return result;
}

CFTypeRef __copy_helper_block_e8_32c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t JSC::WeakGCMap<objc_object *,JSC::JSObject,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>>::~WeakGCMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v18 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v18)
    {
      v19 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v19 - 8) != -1 && *(_QWORD *)v19)
        {
          *(_QWORD *)(*(_QWORD *)v19 + 8) = 3;
          *(_QWORD *)v19 = 0;
        }
        v19 += 16;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

void JSC::WeakGCMap<objc_object *,JSC::JSObject,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>>::~WeakGCMap(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != -1 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::WeakGCMap<objc_object *,JSC::JSObject,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>>::pruneStaleEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  v10 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  v9 = v10;
  if (!v10)
    return;
  v11 = *(_DWORD *)(v9 - 4);
  if (!v11)
    return;
  v12 = 0;
  v13 = v11 - 1;
  do
  {
    v14 = v13;
    v15 = (_QWORD *)(v9 + 16 * v13);
    if ((unint64_t)(*v15 + 1) < 2)
      goto LABEL_6;
    v16 = v9 + 16 * v13;
    v19 = *(_QWORD **)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v18 = v19;
    if (!v19)
    {
      *v15 = -1;
      goto LABEL_12;
    }
    if (!*v18 || (v18[1] & 3) != 0)
    {
      *v15 = -1;
      v18[1] = 3;
      *v17 = 0;
LABEL_12:
      ++v12;
    }
LABEL_6:
    --v13;
  }
  while (v14);
  v20 = *v8;
  if (v12)
  {
    *(_DWORD *)(v20 - 16) += v12;
    v21 = *v8;
    if (*v8)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    *(_DWORD *)(v21 - 12) = v22 - v12;
    v20 = *v8;
  }
  if (v20)
  {
    v23 = *(_DWORD *)(v20 - 4);
    v24 = 6 * *(_DWORD *)(v20 - 12);
    if (v23 >= 9 && v24 < v23)
      WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::shrinkToBestSize(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::shrinkToBestSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  if (*a1)
    v8 = *(_DWORD *)(*a1 - 12);
  else
    v8 = 0;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * (unint64_t)v8)
      goto LABEL_8;
  }
  else if (3 * v11 > 4 * (unint64_t)v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_9:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::rehash(a1, v15, 0, a4, a5, a6, a7, a8);
}

void WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = *(_QWORD *)(v10 + 16 * i);
      if (v22 != -1)
      {
        if (v22)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          LODWORD(v14) = v28 & ((v31 >> 31) ^ v31);
          v32 = 1;
          do
          {
            v33 = v14;
            v15 = *(_QWORD *)(v27 + 16 * v14);
            v14 = (void *)(((_DWORD)v14 + v32++) & v28);
          }
          while (v15);
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = v34 + 1;
          v36 = v34[1];
          if (v36)
          {
            *(_QWORD *)(v36 + 8) = 3;
            *v35 = 0;
          }
          *v34 = v22;
          v37 = v10 + 16 * i;
          v39 = *(_QWORD *)(v37 + 8);
          v38 = v37 + 8;
          *(_QWORD *)v38 = 0;
          *v35 = v39;
          if (*(_QWORD *)v38)
          {
            *(_QWORD *)(*(_QWORD *)v38 + 8) = 3;
            *(_QWORD *)v38 = 0;
          }
        }
        else
        {
          v23 = v10 + 16 * i;
          v26 = *(_QWORD *)(v23 + 8);
          v24 = (_QWORD *)(v23 + 8);
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v25 + 8) = 3;
            *v24 = 0;
          }
        }
      }
    }
    goto LABEL_21;
  }
  if (v10)
LABEL_21:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t JSC::JSString::getIndex(JSC::JSString *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v10;
  int *v11;
  const char *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  const char *v52;
  WTF::StringImpl *v53;

  v9 = a3;
  v10 = *((_QWORD *)a2 + 7);
  v11 = (int *)*((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    if ((v11 & 2) != 0)
    {
      v17 = *(_QWORD *)((*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL) + 8);
      if (v17
        && (v18 = *(unsigned int *)(v17 + 4),
            v19 = *((_QWORD *)this + 3),
            v20 = v19 >> 16,
            v18 > (v19 >> 16)))
      {
        v21 = *(unsigned int *)(v17 + 16);
        v12 = *(const char **)(v17 + 8);
        v22 = *((_DWORD *)this + 4);
        if ((int)v18 - (int)v20 > v22 || (v22 = v18 - v20, (_DWORD)v20))
        {
          v23 = (v21 >> 2) & 1;
          v24 = (v19 >> 16);
          v13 = v22;
          v25 = v18 - v20;
          if ((_DWORD)v23)
          {
            if (v25 < v22)
              goto LABEL_29;
            v12 += v24;
            v13 = v22 | 0x100000000;
          }
          else
          {
            if (v25 < v22)
              goto LABEL_29;
            v12 += 2 * v24;
          }
        }
        else
        {
          v13 = v18 & 0xFFFFFFFEFFFFFFFFLL | (((v21 >> 2) & 1) << 32);
        }
      }
      else
      {
        v12 = "";
        v13 = 0x100000000;
      }
      goto LABEL_4;
    }
    v11 = *JSC::JSRopeString::resolveRope((unint64_t)this, a2, a3, a4, a9, a5, a6, a7, a8);
    if (v11)
      goto LABEL_3;
  }
  else if (v11)
  {
LABEL_3:
    v12 = (const char *)*((_QWORD *)v11 + 1);
    v13 = v11[1] | ((unint64_t)((v11[4] >> 2) & 1) << 32);
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0x100000000;
LABEL_4:
  if (*(_DWORD *)(v10 + 80))
    goto LABEL_30;
  while ((v13 & 0x100000000) != 0)
  {
    if (v13 > v9)
    {
      v14 = v12[v9];
      return *(_QWORD *)(v10 + 8 * v14 + 42216);
    }
LABEL_29:
    __break(1u);
LABEL_30:
    v42 = *(_DWORD *)(v10 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    {
      v51 = v13;
      v52 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v13 = v51;
      v12 = v52;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v13 <= v9)
    goto LABEL_29;
  v26 = *(unsigned __int16 *)&v12[2 * v9];
  if (v26 <= 0xFF)
  {
    v14 = v26;
    return *(_QWORD *)(v10 + 8 * v14 + 42216);
  }
  v27 = WTF::fastCompactMalloc((WTF *)0x16);
  *(_QWORD *)v27 = 0x100000002;
  *(_WORD *)(v27 + 20) = v26;
  *(_QWORD *)(v27 + 8) = v27 + 20;
  *(_DWORD *)(v27 + 16) = 0;
  v53 = (WTF::StringImpl *)v27;
  v15 = JSC::JSString::create(v10, (JSC::VM *)&v53, v28, v29, v30, v31, v32, v33);
  v41 = v53;
  v53 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  return v15;
}

void sub_197F3B598(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::~StringImpl(a14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t CallbackResultNumeric<char>::get(uint64_t a1, void *a2, void *a3)
{
  char v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  if (objc_msgSend(a3, "JSGlobalContextRef"))
    return v5 & 0xFFFFFFFFLL | 0xFFFE000000000000;
  else
    return 0;
}

unint64_t CallbackResultNumeric<int>::get(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  if (objc_msgSend(a3, "JSGlobalContextRef"))
    return v5 | 0xFFFE000000000000;
  else
    return 0;
}

unint64_t CallbackResultNumeric<short>::get(uint64_t a1, void *a2, void *a3)
{
  __int16 v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  if (objc_msgSend(a3, "JSGlobalContextRef"))
    return v5 & 0xFFFFFFFFLL | 0xFFFE000000000000;
  else
    return 0;
}

unint64_t CallbackResultNumeric<long>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  uint64_t v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((double)v5 == (double)(int)v5 && ((v5 & 0x8000000000000000) == 0 || (_DWORD)v5))
      return v5 | 0xFFFE000000000000;
    else
      return COERCE__INT64((double)v5) + 0x2000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<long long>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  uint64_t v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((double)v5 == (double)(int)v5 && ((v5 & 0x8000000000000000) == 0 || (_DWORD)v5))
      return v5 | 0xFFFE000000000000;
    else
      return COERCE__INT64((double)v5) + 0x2000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<unsigned char>::get(uint64_t a1, void *a2, void *a3)
{
  unsigned __int8 v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  if (objc_msgSend(a3, "JSGlobalContextRef"))
    return v5 | 0xFFFE000000000000;
  else
    return 0;
}

unint64_t CallbackResultNumeric<unsigned int>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  unsigned int v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((double)v5 == (double)(int)v5)
      return v5 | 0xFFFE000000000000;
    else
      return COERCE__INT64((double)v5) + 0x2000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<unsigned short>::get(uint64_t a1, void *a2, void *a3)
{
  unsigned __int16 v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  if (objc_msgSend(a3, "JSGlobalContextRef"))
    return v5 | 0xFFFE000000000000;
  else
    return 0;
}

unint64_t CallbackResultNumeric<unsigned long>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  unint64_t v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((double)v5 == (double)(int)v5)
      return v5 | 0xFFFE000000000000;
    else
      return COERCE__INT64((double)v5) + 0x2000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<unsigned long long>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  unint64_t v5;

  v5 = 0;
  objc_msgSend(a2, "getReturnValue:", &v5);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((double)v5 == (double)(int)v5)
      return v5 | 0xFFFE000000000000;
    else
      return COERCE__INT64((double)v5) + 0x2000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<float>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  double v5;
  double v6;
  uint64_t v8;
  float v9;

  v9 = 0.0;
  objc_msgSend(a2, "getReturnValue:", &v9);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    v5 = v9;
    v6 = fabs(v9);
    if (*(_QWORD *)&v6 > 0x7FF7FFFFFFFFFFFFuLL || *(_QWORD *)&v6 == 0x7FF0000000000000)
      return *(_QWORD *)&v5 + 0x2000000000000;
    v8 = (int)v9;
    if (v5 != (double)(int)v8 || !(_DWORD)v8 && (*(_QWORD *)&v5 & 0x8000000000000000) != 0)
      return *(_QWORD *)&v5 + 0x2000000000000;
    else
      return v8 | 0xFFFE000000000000;
  }
  return result;
}

unint64_t CallbackResultNumeric<double>::get(uint64_t a1, void *a2, void *a3)
{
  unint64_t result;
  uint64_t v6;
  double v7;

  v7 = 0.0;
  objc_msgSend(a2, "getReturnValue:", &v7);
  result = objc_msgSend(a3, "JSGlobalContextRef");
  if (result)
  {
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
      || (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
    {
      return *(_QWORD *)&v7 + 0x2000000000000;
    }
    v6 = (int)v7;
    if (v7 != (double)(int)v6 || !(_DWORD)v6 && (*(_QWORD *)&v7 & 0x8000000000000000) != 0)
      return *(_QWORD *)&v7 + 0x2000000000000;
    else
      return v6 | 0xFFFE000000000000;
  }
  return result;
}

uint64_t CallbackResultBoolean::get(CallbackResultBoolean *this, NSInvocation *a2, JSContext *a3, const OpaqueJSValue **a4)
{
  OpaqueJSContext *v5;
  uint64_t v6;
  char v8;

  v8 = 0;
  -[NSInvocation getReturnValue:](a2, "getReturnValue:", &v8, a4);
  v5 = -[JSContext JSGlobalContextRef](a3, "JSGlobalContextRef");
  v6 = 6;
  if (v8)
    v6 = 7;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t CallbackResultVoid::get(CallbackResultVoid *this, NSInvocation *a2, JSContext *a3, const OpaqueJSValue **a4)
{
  if (-[JSContext JSGlobalContextRef](a3, "JSGlobalContextRef"))
    return 10;
  else
    return 0;
}

void CallbackResultId::get(CallbackResultId *this, NSInvocation *a2, objc_object *a3, const OpaqueJSValue **a4)
{
  __CFString *v5;

  v5 = 0;
  -[NSInvocation getReturnValue:](a2, "getReturnValue:", &v5, a4);
  objectToValue(a3, v5);
}

void CallbackResultStruct::~CallbackResultStruct(CallbackResultStruct *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  WTF::fastAlignedFree(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, a7, a8);
  v9 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    CFRelease(v9);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;

  WTF::fastAlignedFree(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, a7, a8);
  v16 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
    CFRelease(v16);
  WTF::fastFree((unint64_t)this, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t CallbackResultStruct::get(CallbackResultStruct *this, NSInvocation *a2, JSContext *a3, const OpaqueJSValue **a4)
{
  uint64_t v6;
  JSContext *v7;

  v7 = a3;
  -[NSInvocation getReturnValue:](a2, "getReturnValue:", *((_QWORD *)this + 2), a4);
  objc_msgSend(*((id *)this + 1), "setArgument:atIndex:", *((_QWORD *)this + 2), 2);
  objc_msgSend(*((id *)this + 1), "setArgument:atIndex:", &v7, 3);
  objc_msgSend(*((id *)this + 1), "invokeWithTarget:", objc_opt_class());
  v6 = 0;
  objc_msgSend(*((id *)this + 1), "getReturnValue:", &v6);
  return *(_QWORD *)(v6 + 8);
}

uint64_t ___ZL27blockSignatureContainsClassv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

void ArgumentTypeDelegate::typeOfClass(ArgumentTypeDelegate *this, const char *a2, const char *a3)
{
  size_t v3;
  unint64_t v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class Class;
  _QWORD *v16;
  void (**v17)(CallbackArgumentJSValue *__hidden);

  v3 = a3 - a2;
  if (a3 - a2 < 0)
  {
    __break(1u);
    return;
  }
  if (a2)
  {
    v6 = WTF::fastMalloc((WTF *)(v3 + 17));
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v3;
    memcpy((void *)(v6 + 16), a2, v3);
    *(_BYTE *)(v6 + 16 + v3) = 0;
  }
  else
  {
    v6 = 0;
  }
  if (v6)
    v7 = (const char *)(v6 + 16);
  else
    v7 = 0;
  Class = objc_getClass(v7);
  if (Class)
  {
    if (Class == (Class)objc_opt_class())
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BE48;
    }
    else if (Class == (Class)objc_opt_class())
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BE70;
    }
    else if (Class == (Class)objc_opt_class())
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BE98;
    }
    else if (Class == (Class)objc_opt_class())
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BEC0;
    }
    else if (Class == (Class)objc_opt_class())
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BEE8;
    }
    else
    {
      if (Class != (Class)objc_opt_class())
      {
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v16 = off_1E357BF38;
        v16[1] = 0;
        v16[2] = Class;
        CFRetain(Class);
        goto LABEL_24;
      }
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v17 = off_1E357BF10;
    }
    *v16 = v17;
    v16[1] = 0;
  }
  else
  {
    v16 = 0;
  }
LABEL_24:
  *(_QWORD *)this = v16;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v8, v9, v10, v11, v12, v13, v14);
    else
      --*(_DWORD *)v6;
  }
}

void sub_197F3BEE0(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;

  if (v8)
  {
    if (*v8 == 1)
      WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v8;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CallbackArgumentInteger<char>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<char>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<char>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LOBYTE(v14) = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    LOBYTE(v14) = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<int>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<int>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<int>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    v14 = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    v14 = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<short>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<short>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<short>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LOWORD(v14) = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    LOWORD(v14) = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<long>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<long>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<long>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LODWORD(v14) = v13;
  else
    LODWORD(v14) = -v13;
  v14 = (int)v14;
  if (v11 > 0x53)
    v14 = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentDouble<long long>::~CallbackArgumentDouble(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentDouble<long long>::~CallbackArgumentDouble(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentDouble<long long>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  uint64_t v9;

  v9 = (uint64_t)JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v9, a3);
}

_QWORD *CallbackArgumentInteger<unsigned char>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<unsigned char>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<unsigned char>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LOBYTE(v14) = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    LOBYTE(v14) = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<unsigned int>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<unsigned int>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<unsigned int>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    v14 = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    v14 = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<unsigned short>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<unsigned short>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<unsigned short>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LOWORD(v14) = v13;
  else
    v14 = -v13;
  if (v11 > 0x53)
    LOWORD(v14) = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentInteger<unsigned long>::~CallbackArgumentInteger(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentInteger<unsigned long>::~CallbackArgumentInteger(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentInteger<unsigned long>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
  v11 = v10 - 1023;
  v12 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
  if (v10 > 0x433)
    LODWORD(v12) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
  if (v10 >= 0x41F)
    v13 = v12;
  else
    v13 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v12) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
  if (v9 >= 0.0)
    LODWORD(v14) = v13;
  else
    LODWORD(v14) = -v13;
  v14 = (int)v14;
  if (v11 > 0x53)
    v14 = 0;
  v15 = v14;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v15, a3);
}

_QWORD *CallbackArgumentDouble<unsigned long long>::~CallbackArgumentDouble(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentDouble<unsigned long long>::~CallbackArgumentDouble(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentDouble<unsigned long long>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  unint64_t v9;

  v9 = (unint64_t)JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v9, a3);
}

_QWORD *CallbackArgumentDouble<float>::~CallbackArgumentDouble(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentDouble<float>::~CallbackArgumentDouble(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentDouble<float>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  float v9;
  float v10;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  v10 = v9;
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v10, a3);
}

_QWORD *CallbackArgumentDouble<double>::~CallbackArgumentDouble(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E357B828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void CallbackArgumentDouble<double>::~CallbackArgumentDouble(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentDouble<double>::set(uint64_t a1, void *a2, uint64_t a3, void *a4, const OpaqueJSValue *a5, JSValueRef *a6)
{
  double v9;

  v9 = JSValueToNumber((JSContextRef)objc_msgSend(a4, "JSGlobalContextRef"), a5, a6);
  if (!*a6)
    objc_msgSend(a2, "setArgument:atIndex:", &v9, a3);
}

void CallbackArgumentBoolean::~CallbackArgumentBoolean(CallbackArgumentBoolean *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentBoolean::~CallbackArgumentBoolean(CallbackArgumentBoolean *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentBoolean::set(CallbackArgumentBoolean *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  OpaqueJSContext *v15;
  double v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int *v30;
  int v31;
  BOOL v33;
  BOOL v34;
  char v35;
  unsigned int *v36;

  v15 = -[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef");
  if (v15)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, v15, v9, v10, v11, v12, v13, v14, v16);
    v24 = 2;
    if (a5)
      v24 = (unint64_t)a5;
    if (v24 >= 0xFFFE000000000000)
    {
      v28 = (_DWORD)v24 == 0;
      goto LABEL_17;
    }
    *(_QWORD *)&v25 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v33 = v25 <= 0.0;
      v34 = v25 < 0.0;
      LOBYTE(v15) = !v33 || v34;
      goto LABEL_20;
    }
    if ((v24 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v15) = v24 == 7;
LABEL_20:
      JSC::JSLockHolder::~JSLockHolder(&v36, v17, v18, v19, v20, v21, v22, v23);
      goto LABEL_21;
    }
    v26 = *(unsigned __int8 *)(v24 + 5);
    if (v26 == 2)
    {
      v29 = *(_QWORD *)(v24 + 8);
      v30 = (int *)(v24 + 16);
      if ((v29 & 1) == 0)
        v30 = (int *)(v29 + 4);
      v31 = *v30;
    }
    else
    {
      if (v26 != 3)
      {
        v27 = 16 * (*(_DWORD *)v24 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v27 + 10) & 1) == 0)
        {
          LOBYTE(v15) = 1;
          goto LABEL_20;
        }
        v28 = *(_QWORD *)(v27 + 40) == (_QWORD)v15;
LABEL_17:
        LOBYTE(v15) = !v28;
        goto LABEL_20;
      }
      v31 = *(_DWORD *)(v24 + 8);
    }
    v28 = v31 == 0;
    goto LABEL_17;
  }
LABEL_21:
  v35 = (char)v15;
  return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v35, a3);
}

void CallbackArgumentJSValue::~CallbackArgumentJSValue(CallbackArgumentJSValue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentJSValue::~CallbackArgumentJSValue(CallbackArgumentJSValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentJSValue::set(CallbackArgumentJSValue *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  JSValue *v9;

  v9 = +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", a5, a4);
  return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v9, a3);
}

void CallbackArgumentNSString::~CallbackArgumentNSString(CallbackArgumentNSString *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentNSString::~CallbackArgumentNSString(CallbackArgumentNSString *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

CFTypeRef CallbackArgumentNSString::set(CallbackArgumentNSString *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  CFTypeRef result;
  CFTypeRef v10;

  result = valueToString(-[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef"), a5, a6);
  v10 = result;
  if (!*a6)
    return (CFTypeRef)-[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v10, a3);
  return result;
}

void CallbackArgumentNSNumber::~CallbackArgumentNSNumber(CallbackArgumentNSNumber *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentNSNumber::~CallbackArgumentNSNumber(CallbackArgumentNSNumber *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentNSNumber::set(CallbackArgumentNSNumber *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t result;
  uint64_t v10;

  result = valueToNumber(-[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef"), a5, a6);
  v10 = result;
  if (!*a6)
    return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v10, a3);
  return result;
}

void CallbackArgumentNSDate::~CallbackArgumentNSDate(CallbackArgumentNSDate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentNSDate::~CallbackArgumentNSDate(CallbackArgumentNSDate *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentNSDate::set(CallbackArgumentNSDate *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t result;
  uint64_t v10;

  result = valueToDate(-[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef"), a5, a6);
  v10 = result;
  if (!*a6)
    return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v10, a3);
  return result;
}

void CallbackArgumentNSArray::~CallbackArgumentNSArray(CallbackArgumentNSArray *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentNSArray::~CallbackArgumentNSArray(CallbackArgumentNSArray *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentNSArray::set(CallbackArgumentNSArray *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t result;
  uint64_t v10;

  result = valueToArray(-[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef"), a5, a6);
  v10 = result;
  if (!*a6)
    return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v10, a3);
  return result;
}

void CallbackArgumentNSDictionary::~CallbackArgumentNSDictionary(CallbackArgumentNSDictionary *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentNSDictionary::~CallbackArgumentNSDictionary(CallbackArgumentNSDictionary *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentNSDictionary::set(CallbackArgumentNSDictionary *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t result;
  uint64_t v10;

  result = valueToDictionary(-[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef"), a5, a6);
  v10 = result;
  if (!*a6)
    return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v10, a3);
  return result;
}

void CallbackArgumentOfClass::~CallbackArgumentOfClass(CallbackArgumentOfClass *this)
{
  const void *v2;
  uint64_t v3;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void CallbackArgumentOfClass::~CallbackArgumentOfClass(CallbackArgumentOfClass *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  uint64_t v10;

  v9 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void CallbackArgumentOfClass::set(CallbackArgumentOfClass *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  OpaqueJSContext *v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;

  v10 = -[JSContext JSGlobalContextRef](a4, "JSGlobalContextRef");
  v30 = tryUnwrapObjcObject(v10, a5);
  if (v30 && (objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  if (v10 && (unint64_t)a5 <= 0xA && ((1 << (char)a5) & 0x405) != 0)
  {
    v30 = 0;
LABEL_7:
    -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v30, a3);
    return;
  }
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x2900000002;
  *(_QWORD *)(v11 + 8) = "Argument does not match Objective-C Class";
  *(_DWORD *)(v11 + 16) = 4;
  v29 = (WTF::StringImpl *)v11;
  *a6 = (const OpaqueJSValue *)JSC::createTypeError((unint64_t)v10, &v29, v12);
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

void CallbackArgumentId::~CallbackArgumentId(CallbackArgumentId *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void CallbackArgumentId::~CallbackArgumentId(CallbackArgumentId *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CallbackArgumentId::set(CallbackArgumentId *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  uint64_t v9;

  v9 = valueToObject(a4, (unint64_t)a5);
  return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", &v9, a3);
}

void CallbackArgumentStruct::~CallbackArgumentStruct(CallbackArgumentStruct *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  uint64_t v10;

  WTF::fastAlignedFree(*((_QWORD *)this + 3), a2, a3, a4, a5, a6, a7, a8);
  v9 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;

  WTF::fastAlignedFree(*((_QWORD *)this + 3), a2, a3, a4, a5, a6, a7, a8);
  v16 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E357B828;
  *((_QWORD *)this + 1) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::fastFree((unint64_t)this, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t CallbackArgumentStruct::set(id *this, NSInvocation *a2, uint64_t a3, JSContext *a4, const OpaqueJSValue *a5, const OpaqueJSValue **a6)
{
  objc_msgSend(this[2], "invokeWithTarget:", +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", a5, a4));
  objc_msgSend(this[2], "getReturnValue:", this[3]);
  return -[NSInvocation setArgument:atIndex:](a2, "setArgument:atIndex:", this[3], a3);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::customToPrimitive(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t result;
  double v24;
  JSC::Exception *v25;
  int v26;
  JSC::Exception *v27;
  JSC::VM *v28;

  v10 = *((_QWORD *)a1 + 7);
  v28 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a2 + 40);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"JSCallbackObject[Symbol.toPrimitive] method called on incompatible |this| value.", 81);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    v12 = 10;
  else
    v12 = *(_QWORD *)(a2 + 48);
  v19 = (JSC::Structure *)JSC::toPreferredPrimitiveType(a1, v12, a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_6;
  v26 = *(_DWORD *)(v10 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_6:
  if ((_DWORD)v19 == 2)
    v20 = 4;
  else
    v20 = 3;
  v21 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
  if (v21)
  {
    while (1)
    {
      v22 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v21 + 104);
      if (v22)
      {
        v27 = 0;
        result = v22(a1, v11, v20, &v27);
        v25 = v27;
        if (v27)
        {
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
          {
            v25 = (JSC::Exception *)JSC::Exception::create(v10, v27, 0, v14, v15, v16, v17, v18);
          }
          return (uint64_t)JSC::VM::throwException((JSC::VM *)v10, a1, v25, v24, v14, v15, v16, v17, v18);
        }
        if (result)
          break;
      }
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_14;
    }
    if ((result & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(result + 5) >= 0x17u)
      return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  else
  {
LABEL_14:
    result = v11;
    return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  return result;
}

uint64_t WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x11)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197F3DA98);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::toPreferredPrimitiveType(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  int *v11;
  int16x8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  JSC::VM *v23;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v23 = v10;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
  {
    JSC::throwTypeError((unint64_t)a1, &v23, (uint64_t)"Primitive hint is not a string.", 32);
    return 0;
  }
  v11 = *(int **)(a2 + 8);
  if ((v11 & 1) == 0)
  {
    if (v11)
      goto LABEL_5;
LABEL_21:
    v12 = 0;
    v13 = 0x100000000;
    goto LABEL_6;
  }
  if ((v11 & 2) != 0)
  {
    v15 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
    if (!v15
      || (v16 = *(unsigned int *)(v15 + 4),
          v17 = *(_QWORD *)(a2 + 24),
          v18 = v17 >> 16,
          v16 <= (v17 >> 16)))
    {
      v13 = 0x100000000;
      v12 = (int16x8_t *)"";
      goto LABEL_6;
    }
    v19 = *(unsigned int *)(v15 + 16);
    v12 = *(int16x8_t **)(v15 + 8);
    v20 = *(_DWORD *)(a2 + 16);
    if ((int)v16 - (int)v18 <= v20)
    {
      v20 = v16 - v18;
      if (!(_DWORD)v18)
      {
        v13 = v16 & 0xFFFFFFFEFFFFFFFFLL | (((v19 >> 2) & 1) << 32);
        goto LABEL_6;
      }
    }
    v21 = (v17 >> 16);
    v13 = v20;
    v22 = v16 - v18;
    if (((v19 >> 2) & 1) != 0)
    {
      if (v22 >= v20)
      {
        v12 = (int16x8_t *)((char *)v12 + v21);
        v13 = v20 | 0x100000000;
        goto LABEL_6;
      }
    }
    else if (v22 >= v20)
    {
      v12 = (int16x8_t *)((char *)v12 + 2 * v21);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_28;
  }
  v11 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (!v11)
    goto LABEL_21;
LABEL_5:
  v12 = (int16x8_t *)*((_QWORD *)v11 + 1);
  v13 = v11[1] | ((unint64_t)((v11[4] >> 2) & 1) << 32);
LABEL_6:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8)
    || (WTF::equal(v12, v13, (uint8x8_t *)"default") & 1) != 0)
  {
    return 0;
  }
  if ((WTF::equal(v12, v13, (uint8x8_t *)"number") & 1) != 0)
    return 1;
LABEL_28:
  if ((WTF::equal(v12, v13, (uint8x8_t *)"string") & 1) == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v23, (uint64_t)"Expected primitive hint to match one of 'default', 'number', 'string'.", 71);
    return 0;
  }
  return 2;
}

void sub_197F3DC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::equal(int16x8_t *a1, uint64_t a2, uint8x8_t *a3)
{
  size_t v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v11;
  uint8x16_t v13;
  BOOL v14;
  uint8x16_t v15;
  unsigned int v16;
  uint8x16_t v17;
  BOOL v18;
  uint16x8_t v19;
  unsigned int v20;
  uint16x8_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (!a3)
  {
    v14 = (_DWORD)a2 == 0;
    return !v14;
  }
  if (!(_DWORD)a2)
    return 0;
  v6 = strlen((const char *)a3);
  if (v6 != a2)
    return 0;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v6 >= 8)
    {
      v19 = (uint16x8_t)vceqq_s16(*a1, (int16x8_t)vmovl_u8(*a3));
      v19.i16[0] = vminvq_u16(v19);
      v11 = v19.u32[0];
      if (v19.i32[0])
      {
        v20 = v6 & 7;
        do
        {
          v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a1 + 2 * v20), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a3 + v20)));
          v21.i16[0] = vminvq_u16(v21);
          v11 = v21.i32[0] != 0;
          v20 += 8;
          if (v21.i32[0])
            v22 = v20 >= v6;
          else
            v22 = 1;
        }
        while (!v22);
      }
      return v11;
    }
    if (v6 >= 4)
    {
      v23 = (a3->u32[0] | ((unint64_t)a3->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v24 = (*(unsigned int *)((char *)a3->u32 + (v6 & 3)) | ((unint64_t)*(unsigned int *)((char *)a3->u32
                                                                                                + (v6 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v25 = (v24 | (v24 << 8)) & 0xFF00FF00FF00FFLL;
      return ((v23 | (v23 << 8)) & 0xFF00FF00FF00FFLL) == a1->i64[0]
          && v25 == *(uint64_t *)((char *)a1->i64 + 2 * (v6 & 3));
    }
    if (v6 >= 2)
      return ((a3->u16[0] | (a3->u16[0] << 8)) & 0xFF00FF) == a1->i32[0]
          && ((*(unsigned __int16 *)((char *)a3->u16 + (v6 & 1)) | (*(unsigned __int16 *)((char *)a3->u16 + (v6 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)a1->i32 + 2 * (v6 & 1));
    goto LABEL_56;
  }
  if ((_DWORD)v6 == 1)
  {
    if (v6)
    {
      v8 = a1->u8[0];
      v9 = a3->u8[0];
      return v8 == v9;
    }
    __break(1u);
LABEL_56:
    if ((_DWORD)v6 == 1)
      return a1->u16[0] == a3->u8[0];
    return 1;
  }
  if (!(_DWORD)v6)
    return 1;
  v7 = 32 - __clz(v6 - 1);
  if (v7 == 3)
  {
    if (a1->i32[0] == a3->i32[0])
    {
      v8 = *(__int32 *)((char *)&a1->i32[-1] + v6);
      v9 = *(__int32 *)((char *)&a3->i32[-1] + v6);
      return v8 == v9;
    }
    return 0;
  }
  switch(v7)
  {
    case 1u:
      v8 = a1->u16[0];
      v9 = a3->u16[0];
      return v8 == v9;
    case 2u:
      if (a1->u16[0] != a3->u16[0])
        return 0;
      v8 = *(unsigned __int16 *)((char *)&a1->u16[-1] + v6);
      v9 = *(unsigned __int16 *)((char *)&a3->u16[-1] + v6);
      return v8 == v9;
    case 4u:
      if (a1->i64[0] != *a3)
        return 0;
      return *(uint64_t *)((char *)&a1->i64[-1] + v6) == *(_QWORD *)((char *)&a3[-1] + v6);
    case 5u:
      v13 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&a1[-1] + v6), *(int8x16_t *)&a3[-2].i8[v6]), vceqq_s8(*(int8x16_t *)a1, *(int8x16_t *)a3->i8));
      v13.i8[0] = vminvq_u8(v13);
      v14 = v13.i32[0] == 0;
      return !v14;
    default:
      v15 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, *(int8x16_t *)a3->i8);
      v15.i8[0] = vminvq_u8(v15);
      v11 = v15.u32[0];
      if (!v15.i32[0])
        return v11;
      if (v6 < 0x10)
        return 1;
      v16 = v6 & 0xF;
      do
      {
        v17 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)a1 + v16), *(int8x16_t *)&a3->i8[v16]);
        v17.i8[0] = vminvq_u8(v17);
        v11 = v17.i32[0] != 0;
        v16 += 16;
        if (v17.i32[0])
          v18 = v16 >= v6;
        else
          v18 = 1;
      }
      while (!v18);
      break;
  }
  return v11;
}

JSC::Integrity *jsAuditJSObjectRef(JSC::Integrity *result, JSC::JSObject *a2)
{
  if (result)
    return JSC::Integrity::doAudit(result, a2);
  return result;
}

unint64_t jsAuditJSValueRef(unint64_t a1)
{
  if (a1 && (a1 & 0xFFFE000000000002) == 0)
    JSC::Integrity::Analyzer::analyzeCell(a1, (char *)1);
  return a1;
}

JSC::JSAPIGlobalObject *JSC::JSAPIGlobalObject::create(JSC::Heap **this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSAPIGlobalObject *v10;
  uint64_t (**v11)(JSC::JSGlobalObject *__hidden, const JSC::JSGlobalObject *);
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (JSC::JSAPIGlobalObject *)JSC::allocateCell<JSC::JSAPIGlobalObject>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = JSC::JSAPIGlobalObject::globalObjectMethodTable(v10);
  v12 = (JSC::JSGlobalObject *)JSC::JSGlobalObject::JSGlobalObject((uint64_t)v10, (uint64_t)this, (unint64_t)a2, v11);
  JSC::JSGlobalObject::finishCreation(v12, (JSC::VM *)this, v13, v14, v15, v16, v17, v18);
  return v10;
}

unint64_t JSC::allocateCell<JSC::JSAPIGlobalObject>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1[5038];
  if (!v9)
    v9 = JSC::GCClient::Heap::apiGlobalObjectSpaceSlow(a1 + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)(a1 + 24), 3296, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 3296;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

uint64_t JSC::JSAPIGlobalObject::createStructure(JSC::VM *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  int v10;

  v10 = 71575603;
  result = JSC::Structure::create(a1, 0, a2, (uint64_t)&v10, (unint64_t)&JSC::JSAPIGlobalObject::s_info, 0, 0, a9, a3);
  *(_DWORD *)(result + 16) |= 0x4000000u;
  return result;
}

void JSC::JSCell::visitChildren(JSC::JSCell *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;

  v8 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v10 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v8) & 0xFFFFFC000 | 0x20) != v10)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v8) & 0xFFFFFC000), v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v8) & 0xFFFFFC000) + 8 * ((v8 >> 6) & 0xF) + 0x28) >> (v8 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v8, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSCell::visitChildren(_DWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = a1;
  v6 = 0;
  v2 = a2[11];
  v5 = v2;
  if (v2 && *(_BYTE *)(v2 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    a2[11] = v4;
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, 16 * (*a1 & 0xFFFFFFFE));
    *(_QWORD *)(v4[0] + 88) = v5;
  }
  return result;
}

uint64_t JSC::JSAPIValueWrapper::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 33554439;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSAPIValueWrapper::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSEvaluateScriptInternal(double a1, uint64_t a2, Inspector::JSGlobalObjectInspectorController **a3, uint64_t a4, SourceCode *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Exception *v17;
  JSC::Exception *v18;

  v18 = 0;
  result = JSC::profiledEvaluate((JSC::JSGlobalObject *)a3, a1, 0, a5, a4, &v18, a7, a8, a9);
  v17 = v18;
  if (v18)
  {
    if (a6)
      *a6 = *((_QWORD *)v18 + 1);
    Inspector::JSGlobalObjectInspectorController::reportAPIException(a3[253], (JSC::JSGlobalObject *)a3, v17, v12, v13, v14, v15, v16);
    return 0;
  }
  else if (!result)
  {
    return 10;
  }
  return result;
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v10;
  WTF::StringImpl *v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  WTF::StringImpl *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const OpaqueJSValue *v41;
  SourceProvider *var0;
  WTF::StringImpl *v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int32x2_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99[6];
  WTF::StringImpl *v100;
  SourceCode v101;
  WTF::StringImpl *v102[5];
  unsigned int *v103;

  if (!ctx)
    return 0;
  v10 = startingLineNumber;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v103, *((JSC::VM **)ctx + 7), (uint64_t)thisObject, (uint64_t)sourceURL, *(uint64_t *)&startingLineNumber, (uint64_t)exception, v6, v7, v8);
  if (v10 <= 1)
    v10 = 1;
  if (sourceURL)
  {
    memset(v99, 0, 40);
    WTF::String::isolatedCopy((_DWORD *)sourceURL + 2, (uint64_t *)&v101);
    WTF::URL::URL((uint64_t)v102, (uint64_t)v99, (WTF::StringImpl **)&v101, 0, v69, v70, v71, v72);
    if (v101.var0.var0)
    {
      if (*(_DWORD *)v101.var0.var0 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v101.var0.var0, v73, v74, v75, v76, v77, v78, v79);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      }
      else
      {
        *(_DWORD *)v101.var0.var0 -= 2;
      }
    }
    v80 = v99[0];
    v99[0] = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::~StringImpl(v80, v73, v74, v75, v76, v77, v78, v79);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v80 -= 2;
      }
    }
  }
  else
  {
    memset(v102, 0, sizeof(v102));
  }
  WTF::String::isolatedCopy((_DWORD *)script + 2, (uint64_t *)&v100);
  v15 = v102[0];
  if (v102[0])
  {
    v16 = *(_DWORD *)v102[0];
    *(_DWORD *)v102[0] += 2;
    *(_OWORD *)&v99[1] = *(_OWORD *)&v102[1];
    *(_OWORD *)&v99[3] = *(_OWORD *)&v102[3];
    *(_DWORD *)v15 = v16 + 4;
  }
  else
  {
    *(_OWORD *)&v99[1] = *(_OWORD *)&v102[1];
    *(_OWORD *)&v99[3] = *(_OWORD *)&v102[3];
  }
  v98 = v15;
  v99[0] = v15;
  v99[5] = 0;
  v97 = (int32x2_t)(v10 - 1);
  JSC::makeSource((int **)&v100, (uint64_t)v99, 0, (uint64_t *)&v98, &v97, 0, (int32x2_t *)&v101);
  v24 = v98;
  v98 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  JSC::SourceOrigin::~SourceOrigin((JSC::SourceOrigin *)v99, v17, v18, v19, v20, v21, v22, v23);
  v33 = v100;
  v100 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v41 = (const OpaqueJSValue *)JSEvaluateScriptInternal(v32, (uint64_t)v33, (Inspector::JSGlobalObjectInspectorController **)ctx, (uint64_t)thisObject, &v101, exception, v29, v30, v31);
  var0 = v101.var0.var0;
  v101.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 2) == 1)
      (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
    else
      --*((_DWORD *)var0 + 2);
  }
  v43 = v102[0];
  v102[0] = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v103, v34, v35, v36, v37, v38, v39, v40);
  return v41;
}

int32x2_t JSC::makeSource@<D0>(int **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, int32x2_t *a5@<X4>, char a6@<W5>, int32x2_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  __int32 v19;
  int32x2_t result;

  v13 = *a4;
  *a4 = 0;
  v14 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E35964B0;
  *(_BYTE *)(v14 + 12) = a6;
  v15 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v15 += 2;
  *(_QWORD *)(v14 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v14 + 24) = v16;
  v17 = *(_QWORD *)(a2 + 40);
  if (v17)
    ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v14 + 56) = v17;
  *(_QWORD *)(v14 + 64) = v13;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(int32x2_t *)(v14 + 104) = *a5;
  *(_DWORD *)(v14 + 112) = 0;
  *(_BYTE *)(v14 + 116) = a3;
  *(_QWORD *)v14 = off_1E357C4B0;
  v18 = *a1;
  if (!*a1)
    v18 = &WTF::StringImpl::s_emptyAtomString;
  v19 = v18[1];
  *v18 += 2;
  *(_QWORD *)(v14 + 120) = v18;
  *a7 = (int32x2_t)v14;
  a7[1].i32[0] = 0;
  a7[1].i32[1] = v19;
  result = vmax_s32(*a5, 0);
  a7[2] = result;
  return result;
}

void JSC::SourceOrigin::~SourceOrigin(JSC::SourceOrigin *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

BOOL JSCheckScriptSyntax(JSContextRef ctx, JSStringRef script, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v10;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  JSC::JSValue *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::VM *v65;
  JSC::Exception *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _BYTE v105[32];
  uint64_t v106;
  WTF::StringImpl *v107[5];
  unsigned int *v108;

  if (!ctx)
    return 0;
  v10 = startingLineNumber;
  v14 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v108, v14, (uint64_t)sourceURL, *(uint64_t *)&startingLineNumber, (uint64_t)exception, v5, v6, v7, v8);
  if (v10 <= 1)
    v10 = 1;
  if (sourceURL)
  {
    v106 = 0;
    memset(v105, 0, sizeof(v105));
    WTF::String::isolatedCopy((_DWORD *)sourceURL + 2, (uint64_t *)&v100);
    WTF::URL::URL((uint64_t)v107, (uint64_t)v105, &v100, 0, v15, v16, v17, v18);
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::~StringImpl(v100, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v100 -= 2;
      }
    }
    v26 = *(WTF::StringImpl **)v105;
    *(_QWORD *)v105 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  else
  {
    memset(v107, 0, sizeof(v107));
  }
  WTF::String::isolatedCopy((_DWORD *)script + 2, (uint64_t *)&v99);
  v44 = v107[0];
  if (v107[0])
  {
    v45 = *(_DWORD *)v107[0];
    *(_DWORD *)v107[0] += 2;
    *(_OWORD *)v105 = *(_OWORD *)&v107[1];
    *(_OWORD *)&v105[16] = *(_OWORD *)&v107[3];
    *(_DWORD *)v44 = v45 + 4;
  }
  else
  {
    *(_OWORD *)v105 = *(_OWORD *)&v107[1];
    *(_OWORD *)&v105[16] = *(_OWORD *)&v107[3];
  }
  v46 = (v10 - 1);
  v47 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v47 + 8) = 1;
  *(_BYTE *)(v47 + 12) = 0;
  if (v44)
    *(_DWORD *)v44 += 2;
  *(_QWORD *)(v47 + 16) = v44;
  *(_OWORD *)(v47 + 24) = *(_OWORD *)v105;
  *(_OWORD *)(v47 + 40) = *(_OWORD *)&v105[16];
  *(_QWORD *)(v47 + 56) = 0;
  *(_QWORD *)(v47 + 64) = v44;
  v55 = 0.0;
  *(_OWORD *)(v47 + 72) = 0u;
  *(_OWORD *)(v47 + 88) = 0u;
  *(_QWORD *)(v47 + 104) = v46;
  *(_DWORD *)(v47 + 112) = 0;
  *(_BYTE *)(v47 + 116) = 0;
  *(_QWORD *)v47 = off_1E357C4B0;
  v56 = v99;
  v57 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  if (v99)
    v57 = v99;
  *(_DWORD *)v57 += 2;
  *(_QWORD *)(v47 + 120) = v57;
  v100 = (WTF::StringImpl *)v47;
  v101 = 0;
  v102 = *((_DWORD *)v57 + 1);
  v103 = v46;
  v104 = 0;
  if (!v44)
  {
LABEL_24:
    if (v56)
      goto LABEL_25;
    goto LABEL_27;
  }
  if (*(_DWORD *)v44 != 2)
  {
    *(_DWORD *)v44 -= 2;
    goto LABEL_24;
  }
  WTF::StringImpl::~StringImpl(v44, v48, v49, (uint64_t)v50, v51, v52, v53, v54);
  WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
  if (v56)
  {
LABEL_25:
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v48, v49, (uint64_t)v50, v51, v52, v53, v54);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
LABEL_27:
  *(_QWORD *)v105 = 0;
  v27 = JSC::checkSyntax(ctx, (JSC::JSGlobalObject *)&v100, (const SourceCode *)v105, v50, v51, v52, v53, v54, v55);
  if ((v27 & 1) == 0)
  {
    v65 = *(JSC::VM **)v105;
    if (exception)
      *exception = *(JSValueRef *)v105;
    v66 = (JSC::Exception *)JSC::Exception::create((uint64_t)v14, v65, 0, v60, v61, v62, v63, v64);
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, v66, v67, v68, v69, v70, v71);
  }
  v72 = v100;
  v100 = 0;
  if (v72)
  {
    if (*((_DWORD *)v72 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v72 + 8))(v72);
    else
      --*((_DWORD *)v72 + 2);
  }
  v73 = v107[0];
  v107[0] = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v108, v58, v59, v60, v61, v62, v63, v64);
  return v27;
}

void JSGarbageCollect(JSContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  if (ctx)
  {
    v8 = *((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v16, (JSC::VM *)v8, v1, v2, v3, v4, v5, v6, v7);
    JSC::Heap::reportAbandonedObjectGraph((JSC::Heap *)(v8 + 192));
    JSC::JSLockHolder::~JSLockHolder(&v16, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSReportExtraMemoryCost(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;

  if (a1)
  {
    v10 = *(JSC::VM **)(a1 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v21, v10, a3, a4, a5, a6, a7, a8, a9);
    if (a2 >= 0x101)
    {
      v18 = *((_QWORD *)v10 + 68);
      v19 = __CFADD__(v18, a2);
      v20 = v18 + a2;
      if (v19)
        v20 = -1;
      *((_QWORD *)v10 + 68) = v20;
      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v10 + 192, 0, 0, a2, v14, v15, v16, v17);
    }
    JSC::JSLockHolder::~JSLockHolder(&v21, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSSynchronousGarbageCollectForDebugging(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  __int16 v26;
  unsigned int *v27;
  unsigned int *v28;

  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v28, (JSC::VM *)v9, a4, a5, a6, a7, a8, a9, a2);
    v26 = 257;
    v27 = 0;
    JSC::Heap::collectNow((JSC::Heap *)(v9 + 192), (void *)1, (uint64_t)&v26, v10, v11, v12, v13, v14);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v28, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSSynchronousEdenCollectForDebugging(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  __int16 v26;
  uint64_t v27;

  if (a1)
  {
    v9 = *(_BYTE **)(a1 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, (JSC::VM *)v9, a4, a5, a6, a7, a8, a9, a2);
    if (HIBYTE(word_1ECF4C5CC))
    {
      if (v9[753])
      {
        v17 = (JSC::Heap *)(v9 + 192);
        v26 = 256;
        v27 = 0;
        v18 = JSC::Heap::requestCollection((uint64_t)v17, (uint64_t)&v26, v11, v12, v13, v14, v15, v16);
        JSC::Heap::waitForCollection(v17, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v25, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSDisableGCTimer()
{
  JSC::GCActivityCallback::s_shouldCreateGCTimer = 0;
}

unint64_t JSGetMemoryUsageStatistics(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t SlowCase;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  double v66;
  double v67;
  uint32x4_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  double v95;
  unint64_t v96;
  uint64_t v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  double v116;
  unint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  double v127;
  double v128;
  uint32x4_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  unint64_t v134;
  uint64_t v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  unint64_t v147;
  WTF::AtomStringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  unint64_t v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  unint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  WTF::AtomStringImpl *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  double v266;
  double v267;
  double v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  JSC *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  JSC *v278;
  uint64_t Slow;
  WTF *v280;
  unsigned int *v281;
  WTF::StringImpl *v282;
  unint64_t v283;
  int v284;
  int v285;
  uint64_t v286;
  WTF::StringImpl **v287;

  if (!a1)
    return 0;
  v10 = *(_QWORD *)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v281, (JSC::VM *)v10, a4, a5, a6, a7, a8, a9, a2);
  JSC::Heap::objectTypeCounts((JSC::Heap *)(v10 + 192), (uint64_t **)&v280);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(v18 + 15056);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 + 60);
    SlowCase = *(_QWORD *)(v19 + 24);
    if (SlowCase < *(_QWORD *)(v19 + 32))
    {
LABEL_4:
      *(_QWORD *)(v19 + 24) = SlowCase + v20;
      goto LABEL_5;
    }
    SlowCase = *(_QWORD *)(v19 + 40);
    if ((SlowCase & 1) == 0)
    {
      v264 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v19 + 48);
      *(_QWORD *)(v19 + 32) = SlowCase + HIDWORD(v264);
      *(_QWORD *)(v19 + 40) = SlowCase + (int)v264;
      goto LABEL_4;
    }
    JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, v18 + 192, v20, 0, 0, v269, v270, v271);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v18 + 14936, *(JSC **)(a1 + 56), 0x40uLL, 0, v14, v15, v16, v17);
    if (!SlowCase)
      goto LABEL_148;
  }
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  v22.n128_u64[1] = 0;
  *(_OWORD *)(SlowCase + 8) = 0uLL;
  *(_OWORD *)(SlowCase + 24) = 0uLL;
  *(_OWORD *)(SlowCase + 40) = 0uLL;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)v280;
  if (!*(_QWORD *)v280)
  {
    v26 = 0;
    v24 = 0;
    goto LABEL_16;
  }
  v24 = *(unsigned int *)(v23 - 4);
  v25 = v23 + 16 * v24;
  if (!*(_DWORD *)(v23 - 12))
  {
    v26 = v23 + 16 * v24;
LABEL_16:
    v25 = v23 + 16 * v24;
    goto LABEL_17;
  }
  v26 = *(_QWORD *)v280;
  if ((_DWORD)v24)
  {
    v27 = 16 * v24;
    v26 = *(_QWORD *)v280;
    while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
    {
      v26 += 16;
      v27 -= 16;
      if (!v27)
      {
        v26 = v25;
        break;
      }
    }
  }
LABEL_17:
  if (v23)
    v29 = v23 + 16 * *(unsigned int *)(v23 - 4);
  else
    v29 = 0;
  while (v26 != v29)
  {
    v30 = *(WTF::StringImpl **)v26;
    if (*(_QWORD *)v26)
    {
      v42 = strlen(*(const char **)v26);
      WTF::AtomStringImpl::add((uint64_t)v30, v42, v43, v44, v45, v46, v47, &v282);
      v30 = v282;
      if (v282)
      {
        v53 = *(_DWORD *)v282;
        *(_DWORD *)v282 += 2;
        if (v53)
        {
          *(_DWORD *)v30 = v53;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v30, v48, v49, v50, v51, v52, v16, v17);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
      }
    }
    v31 = *(unsigned int *)(v26 + 8);
    if ((v31 & 0x80000000) != 0)
      v32 = COERCE__INT64((double)v31) + 0x2000000000000;
    else
      v32 = v31 | 0xFFFE000000000000;
    v282 = 0;
    v283 = SlowCase;
    v284 = -1;
    v22.n128_u64[0] = 0x100000001000000;
    v285 = 0x1000000;
    v286 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v30, v32, 0, (uint64_t)&v282, v16, v17, v22);
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v33 = v26 + 16;
    v26 = v25;
    if (v33 != v25)
    {
      v26 = v33;
      while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
      {
        v26 += 16;
        if (v26 == v25)
        {
          v26 = v25;
          break;
        }
      }
    }
  }
  v62 = *(JSC **)(a1 + 56);
  v63 = *((_QWORD *)v62 + 1882);
  if (!v63)
  {
    v278 = *(JSC **)(a1 + 56);
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v62 + 14936, v278, 0x40uLL, 0, v14, v15, v16, v17);
    v62 = v278;
    v28 = Slow;
    if (Slow)
      goto LABEL_42;
LABEL_148:
    __break(0xC471u);
    JUMPOUT(0x197F3F558);
  }
  v64 = *(unsigned int *)(v63 + 60);
  v28 = *(_QWORD *)(v63 + 24);
  if (v28 < *(_QWORD *)(v63 + 32))
  {
LABEL_41:
    *(_QWORD *)(v63 + 24) = v28 + v64;
    goto LABEL_42;
  }
  v28 = *(_QWORD *)(v63 + 40);
  if ((v28 & 1) == 0)
  {
    v265 = *(_QWORD *)(v28 + 8) ^ *(_QWORD *)(v63 + 48);
    *(_QWORD *)(v63 + 32) = v28 + HIDWORD(v265);
    *(_QWORD *)(v63 + 40) = v28 + (int)v265;
    goto LABEL_41;
  }
  v272 = (uint64_t)v62 + 192;
  v273 = *(JSC **)(a1 + 56);
  JSC::sanitizeStackForVM(v273, v11, v12, v13, v14, v15, v16, v17);
  v277 = JSC::LocalAllocator::allocateSlowCase(v63, v272, v64, 0, 0, v274, v275, v276);
  v62 = v273;
  v28 = v277;
LABEL_42:
  *(_DWORD *)v28 = 0;
  *(_DWORD *)v28 = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(v28 + 4) = 16783360;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_QWORD *)(v28 + 56) = 0;
  if (*((_BYTE *)v62 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"heapSize", 8uLL, v13, v14, v15, v16, v17, &v282);
  v65 = v282;
  v69 = JSC::Heap::size((uint64_t **)(v10 + 192), v66, v67, v68);
  v73 = v69 | 0xFFFE000000000000;
  if ((v69 & 0x80000000) != 0)
    v73 = COERCE__INT64((double)v69) + 0x2000000000000;
  if (HIDWORD(v69))
    v74 = COERCE__INT64((double)v69) + 0x2000000000000;
  else
    v74 = v73;
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v72.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v65, v74, 0, (uint64_t)&v282, v70, v71, v72);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"heapCapacity", 0xCuLL, v77, v78, v79, v80, v81, &v282);
  v85 = v282;
  v86 = *(_QWORD *)(v10 + 424);
  v87 = *(_QWORD *)(v10 + 536);
  v88 = *(_QWORD *)(v10 + 544);
  v89 = __CFADD__(v87, v88);
  v90 = v87 + v88;
  if (v89)
  {
    v92 = -1;
  }
  else
  {
    v91 = *(_QWORD *)(v10 + 528);
    v89 = __CFADD__(v90, v91);
    v92 = v90 + v91;
    if (v89)
      v92 = -1;
  }
  v89 = __CFADD__(v92, v86);
  v93 = v92 + v86;
  if (v89)
    v93 = -1;
  v94 = HIDWORD(v93);
  v95 = (double)v93;
  if ((v93 & 0x80000000) != 0)
    v96 = COERCE__INT64((double)v93) + 0x2000000000000;
  else
    v96 = v93 | 0xFFFE000000000000;
  if (v94)
    v97 = *(_QWORD *)&v95 + 0x2000000000000;
  else
    v97 = v96;
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v84.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v85, v97, 0, (uint64_t)&v282, v82, v83, v84);
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"extraMemorySize", 0xFuLL, v100, v101, v102, v103, v104, &v282);
  v108 = v282;
  v109 = *(_QWORD *)(v10 + 536);
  v110 = *(_QWORD *)(v10 + 544);
  v89 = __CFADD__(v109, v110);
  v111 = v109 + v110;
  if (v89)
  {
    v113 = -1;
  }
  else
  {
    v112 = *(_QWORD *)(v10 + 528);
    v89 = __CFADD__(v111, v112);
    v113 = v111 + v112;
    if (v89)
      v113 = -1;
  }
  v114 = *(_QWORD *)(v10 + 424);
  if (v113 >= ~v114)
    v113 = ~v114;
  v115 = HIDWORD(v113);
  v116 = (double)v113;
  if ((v113 & 0x80000000) != 0)
    v117 = COERCE__INT64((double)v113) + 0x2000000000000;
  else
    v117 = v113 | 0xFFFE000000000000;
  if (v115)
    v118 = *(_QWORD *)&v116 + 0x2000000000000;
  else
    v118 = v117;
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v107.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v108, v118, 0, (uint64_t)&v282, v105, v106, v107);
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v119, v120, v121, v122, v123, v124, v125);
      WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"objectCount", 0xBuLL, v121, v122, v123, v124, v125, &v282);
  v126 = v282;
  v130 = JSC::MarkedSpace::objectCount((uint64_t **)(v10 + 352), v127, v128, v129);
  v134 = v130 | 0xFFFE000000000000;
  if ((v130 & 0x80000000) != 0)
    v134 = COERCE__INT64((double)v130) + 0x2000000000000;
  v282 = 0;
  v283 = v28;
  v284 = -1;
  if (HIDWORD(v130))
    v135 = COERCE__INT64((double)v130) + 0x2000000000000;
  else
    v135 = v134;
  v133.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v126, v135, 0, (uint64_t)&v282, v131, v132, v133);
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"protectedObjectCount", 0x14uLL, v138, v139, v140, v141, v142, &v282);
  v143 = v282;
  v282 = 0;
  JSC::Heap::forEachProtectedCell<JSC::Heap::protectedObjectCount(void)::$_0>(v10 + 192, (uint64_t *)&v282);
  if ((unint64_t)v282 >> 32)
  {
    v266 = (double)(unint64_t)v282;
  }
  else
  {
    if ((v282 & 0x80000000) == 0)
    {
      v147 = (unint64_t)v282 | 0xFFFE000000000000;
      goto LABEL_94;
    }
    v266 = (double)v282;
  }
  v147 = *(_QWORD *)&v266 + 0x2000000000000;
LABEL_94:
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v146.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v143, v147, 0, (uint64_t)&v282, v144, v145, v146);
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"globalObjectCount", 0x11uLL, v150, v151, v152, v153, v154, &v282);
  v155 = v282;
  v163 = JSC::Heap::globalObjectCount((JSC::Heap *)(v10 + 192), v156, v157, v158, v159, v160, v161, v162);
  if (HIDWORD(v163))
  {
    v267 = (double)v163;
  }
  else
  {
    if ((v163 & 0x80000000) == 0)
    {
      v167 = v163 | 0xFFFE000000000000;
      goto LABEL_100;
    }
    v267 = (double)v163;
  }
  v167 = *(_QWORD *)&v267 + 0x2000000000000;
LABEL_100:
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v166.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v155, v167, 0, (uint64_t)&v282, v164, v165, v166);
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, v168, v169, v170, v171, v172, v173, v174);
      WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"protectedGlobalObjectCount", 0x1AuLL, v170, v171, v172, v173, v174, &v282);
  v175 = v282;
  v282 = 0;
  v287 = &v282;
  JSC::Heap::forEachProtectedCell<JSC::Heap::protectedGlobalObjectCount(void)::$_0>(v10 + 192, &v287);
  if ((unint64_t)v282 >> 32)
  {
    v268 = (double)(unint64_t)v282;
    goto LABEL_136;
  }
  if ((v282 & 0x80000000) != 0)
  {
    v268 = (double)v282;
LABEL_136:
    v179 = *(_QWORD *)&v268 + 0x2000000000000;
    goto LABEL_106;
  }
  v179 = (unint64_t)v282 | 0xFFFE000000000000;
LABEL_106:
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v178.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v175, v179, 0, (uint64_t)&v282, v176, v177, v178);
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, v180, v181, v182, v183, v184, v185, v186);
      WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"objectTypeCounts", 0x10uLL, v182, v183, v184, v185, v186, &v282);
  v187 = v282;
  v282 = 0;
  v283 = v28;
  v284 = -1;
  v188.n128_u64[0] = 0x100000001000000;
  v285 = 0x1000000;
  v286 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v28, v10, (unint64_t)v187, SlowCase, 0, (uint64_t)&v282, v189, v190, v188);
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, v191, v192, v193, v194, v195, v196, v197);
      WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v198 = v280;
  v280 = 0;
  if (v198)
  {
    if (*(_QWORD *)v198)
      WTF::fastFree(*(_QWORD *)v198 - 16, v191, v192, v193, v194, v195, v196, v197);
    WTF::fastFree((unint64_t)v198, v191, v192, v193, v194, v195, v196, v197);
  }
  JSC::JSLockHolder::~JSLockHolder(&v281, v191, v192, v193, v194, v195, v196, v197);
  return v28;
}

uint64_t JSC::failNextNewCodeBlock(JSC *this, const OpaqueJSContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, this, a3, a4, a5, a6, a7, a8, a9);
  *(_BYTE *)(*((_QWORD *)this + 7) + 93121) = 1;
  JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  return 10;
}

unint64_t JSC::numberOfDFGCompiles(JSC *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (a2)
    v10 = (uint64_t)a2;
  else
    v10 = 2;
  v11 = JSC::numberOfDFGCompiles(v10);
  JSC::JSLockHolder::~JSLockHolder(&v20, v12, v13, v14, v15, v16, v17, v18);
  return v11;
}

uint64_t JSC::setNeverInline(JSC *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v17 = 2;
  if (a2)
    v17 = (uint64_t)a2;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 26)
  {
    v18 = *(_QWORD *)(v17 + 24);
    if ((v18 & 1) != 0)
      v18 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v18 + 5) == 12)
      *(_WORD *)(v18 + 70) |= 2u;
  }
  JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
  return 10;
}

uint64_t JSC::setNeverOptimize(JSC *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v17 = 2;
  if (a2)
    v17 = (uint64_t)a2;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 26)
  {
    v18 = *(_QWORD *)(v17 + 24);
    if ((v18 & 1) != 0)
      v18 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v18 + 5) == 12)
      *(_WORD *)(v18 + 70) |= 4u;
  }
  JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
  return 10;
}

void JSC::JSCallbackConstructor::destroy(JSC::JSCallbackConstructor *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  OpaqueJSClass *v11;

  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v11 = (OpaqueJSClass *)v8;
      WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSCallbackConstructor::getConstructData(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = JSC::constructJSCallbackConstructor;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t JSC::JSCallbackConstructor::JSCallbackConstructor(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  return result;
}

uint64_t JSC::JSCallbackConstructor::finishCreation(uint64_t result, uint64_t a2, unsigned int *a3)
{
  unsigned int v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 56) + 755))
    __dmb(0xAu);
  if (*(_QWORD *)(result + 16))
  {
    do
      v3 = __ldaxr(a3);
    while (__stlxr(v3 + 1, a3));
  }
  return result;
}

JSObjectRef JSC::constructJSCallbackConstructor(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  JSC::VM *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::VM *v28;
  JSC *v29;
  JSC::VM *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  char OwnStaticPropertySlot;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  int v74;
  JSC::VM *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  BOOL v83;
  int v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  JSC::VM *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  unsigned int *v99;
  JSC::Exception *v100;
  JSC::VM *v101;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int8x16_t **v108;
  int v109;
  _BYTE *v110;
  uint64_t v111;
  unsigned int v112;
  JSC::VMTraps *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::VM *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  int v132;
  unsigned int v133;
  int v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  JSC::VM *v141;
  JSC::CallFrame *v142;
  unint64_t v143;
  char v144;
  char v145;
  JSC::CallFrame *v146;
  JSC::VM *v147;
  unint64_t v148;
  uint64_t v149;
  JSC::VM *v150;
  unint64_t v151;
  char v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int8 *v156;
  int v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  size_t v165;
  char *v166;
  char *v167;
  int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  JSC::VM **v171;
  uint64_t v172;
  int v173;
  int v174;
  JSC::VM **p_dst;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  char v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  char v200;
  int v201;
  JSC::VM *v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int8x16_t **v207;
  JSC *v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t Index;
  int v219;
  char v220;
  int v221;
  _BYTE *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v227;
  unsigned __int16 *v228;
  unsigned int v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  uint64_t v235;
  unsigned __int8 *v236;
  unsigned int v237;
  uint64_t v238;
  _DWORD *v239;
  int v240;
  unint64_t v241;
  JSC::VM *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  JSC::CallFrame *v249;
  JSC::CallFrame *v250;
  JSC::VMTraps *v251;
  JSC::VMTraps *v252;
  JSC::VMTraps *v253;
  JSC::VMTraps *v254;
  JSC::VMTraps *v255;
  JSC::CallFrame *v256;
  JSC::VMTraps *v257;
  JSC::VMTraps *v258;
  JSC::VMTraps *v259;
  JSC::VMTraps *v260;
  JSC::CallFrame *v261;
  uint64_t (*v262)(JSC *, uint64_t, unint64_t, JSC::VM *, char *);
  uint64_t v263;
  JSC::VM *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  _DWORD *v268;
  _DWORD *v269;
  _QWORD v270[2];
  uint64_t v271;
  char v272;
  int8x16_t **v273;
  uint64_t v274;
  JSC::VM *__dst;
  uint64_t v276;
  _BYTE v277[128];
  char __s[8];
  uint64_t v279;

  v9 = this;
  v279 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  v264 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(v11 + 24))
    return JSObjectMake(this, *(JSClassRef *)(v11 + 16), 0);
  v13 = *((_QWORD *)a2 + 5);
  v262 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, JSC::VM *, char *))(v11 + 24);
  v263 = v13;
  if (v11 == v13)
  {
    v14 = 0;
    v15 = (JSC::VM *)v10;
    goto LABEL_135;
  }
  v17 = *(_QWORD *)(v10 + 41952);
  a7 = *(_QWORD *)(v17 + 2160);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v267 = 0xFFFFFFFF00000000;
  LOBYTE(v271) = 0;
  v272 = 0;
  v273 = 0;
  v274 = 0;
  v269 = 0;
  memset(v270, 0, 13);
  v268 = (_DWORD *)v13;
  if ((v13 & 0xFFFE000000000002) != 0)
    goto LABEL_421;
  v18 = *(unsigned __int8 *)(v13 + 5);
  v19 = (JSC::VM *)v10;
  if (v18 <= 0x16)
  {
    if (v18 != 2)
    {
LABEL_421:
      v224 = a7;
      v225 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v263, (unint64_t)v9);
      if (!v225)
        goto LABEL_50;
      v13 = v225;
      v19 = (JSC::VM *)*((_QWORD *)v9 + 7);
      a7 = v224;
      goto LABEL_7;
    }
    v214 = a7;
    if (*(_QWORD *)(v17 + 1768) == a7)
    {
      v215 = *(_QWORD *)(v13 + 8);
      if ((v215 & 1) != 0)
        v216 = (unsigned int *)(v13 + 16);
      else
        v216 = (unsigned int *)(v215 + 4);
      v217 = *v216;
      if ((v217 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v217) + 0x2000000000000;
      else
        Index = v217 | 0xFFFE000000000000;
      v219 = 14;
      goto LABEL_412;
    }
    if (a7)
    {
      v221 = *(_DWORD *)(a7 + 16);
      if ((v221 & 0x20) == 0)
      {
        v222 = *(_BYTE **)(a7 + 8);
        v223 = *(unsigned int *)(a7 + 4);
        if ((v221 & 4) != 0)
        {
          if (!(_DWORD)v223)
            goto LABEL_418;
          a3 = *v222 - 48;
          if (a3 > 9)
            goto LABEL_418;
          if (v223 >= 2 && *v222 == 48)
            goto LABEL_418;
          v235 = v223 - 1;
          v236 = v222 + 1;
          while (v235)
          {
            if (a3 > 0x19999999)
              goto LABEL_418;
            v237 = *v236 - 48;
            if (v237 > 9)
              goto LABEL_418;
            v220 = 0;
            v63 = __CFADD__(v237, 10 * a3);
            a3 = v237 + 10 * (_DWORD)a3;
            --v235;
            ++v236;
            if (v63)
              goto LABEL_419;
          }
        }
        else
        {
          if (!(_DWORD)v223)
            goto LABEL_418;
          a3 = *(unsigned __int16 *)v222 - 48;
          if (a3 > 9)
            goto LABEL_418;
          if (*(_WORD *)v222 == 48 && v223 > 1)
            goto LABEL_418;
          v227 = v223 - 1;
          v228 = (unsigned __int16 *)(v222 + 2);
          while (v227)
          {
            if (a3 > 0x19999999)
              goto LABEL_418;
            v229 = *v228 - 48;
            if (v229 > 9)
              goto LABEL_418;
            v220 = 0;
            v63 = __CFADD__(v229, 10 * a3);
            a3 = v229 + 10 * (_DWORD)a3;
            --v227;
            ++v228;
            if (v63)
              goto LABEL_419;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          v238 = *(_QWORD *)(v13 + 8);
          v239 = (_DWORD *)((v238 & 1) != 0 ? v13 + 16 : v238 + 4);
          if (*v239 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)v13, this, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v10 + 80))
              goto LABEL_474;
            v240 = *(_DWORD *)(v10 + 80);
            if ((v240 & 0x27) != 0 && (v240 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v10 + 16))
            {
LABEL_474:
              v219 = 10;
LABEL_412:
              v265 = Index;
              LODWORD(v267) = v219;
              v269 = 0;
              v220 = 1;
              BYTE1(v270[1]) = 1;
              goto LABEL_419;
            }
          }
        }
      }
    }
LABEL_418:
    v220 = 0;
LABEL_419:
    if (*(_DWORD *)(v10 + 80))
    {
      v233 = *(_DWORD *)(v10 + 80);
      if ((v233 & 0x27) != 0 && (v233 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_50;
    }
    a7 = v214;
    if ((v220 & 1) != 0)
      goto LABEL_111;
    goto LABEL_421;
  }
LABEL_7:
  v20 = (_BYTE *)(v13 + 6);
  v21 = a7 >> 4;
  v22 = v13;
  if ((*(_BYTE *)(v13 + 6) & 8) == 0)
  {
    v23 = v13;
    do
    {
      v24 = *(_DWORD *)v23 & 0xFFFFFFFE;
      v25 = 16 * v24;
      if (!(_DWORD)v21 || (v21 & ~*(_DWORD *)(16 * v24 + 0x20)) != 0)
        goto LABEL_36;
      v26 = *(_QWORD *)(16 * v24 + 0x58);
      if (!v26)
      {
        v27 = *(_QWORD *)(16 * v24 + 0x40);
        if (!v27 || *(_BYTE *)(v27 + 5) != 1 && *(_DWORD *)(v27 + 80) < 2u)
          goto LABEL_36;
        v28 = v19;
        v255 = (JSC::VMTraps *)v13;
        v29 = v9;
        v30 = v19;
        v31 = v11;
        v32 = v21;
        v33 = v10;
        v34 = a7;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v25, v28, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        a7 = v34;
        v10 = v33;
        v21 = v32;
        v11 = v31;
        v19 = v30;
        v9 = v29;
        v13 = (uint64_t)v255;
        if (!v26)
          goto LABEL_36;
      }
      if (!*(_DWORD *)(v26 + 24))
        goto LABEL_36;
      v35 = *(_QWORD *)(v26 + 16);
      v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
      v37 = *(unsigned int *)(v26 + 8);
      v38 = *(_DWORD *)(a7 + 16);
      if ((v35 & 1) != 0)
      {
        if ((v38 & 0x20) != 0)
          v38 = *(_DWORD *)(a7 + 32);
        v39 = *(_DWORD *)(v26 + 12);
        v40 = (v38 >> 8) & *(_QWORD *)&v39;
        v41 = *(unsigned __int8 *)(v36 + v40);
        if (!*(_BYTE *)(v36 + v40))
          goto LABEL_36;
        v42 = v36 + v37;
        v43 = 1;
        while (1)
        {
          v44 = *(_QWORD *)(v42 + 8 * (v41 - 1));
          if (a7 == (v44 & 0xFFFFFFFFFFFFLL))
            break;
          v40 = ((_DWORD)v40 + v43) & v39;
          v41 = *(unsigned __int8 *)(v36 + v40);
          ++v43;
          if (!*(_BYTE *)(v36 + v40))
            goto LABEL_36;
        }
        a6 = (v44 >> 16) & 0xFF00000000 | HIBYTE(v44);
      }
      else
      {
        if ((v38 & 0x20) != 0)
          v38 = *(_DWORD *)(a7 + 32);
        v45 = *(_DWORD *)(v26 + 12);
        v46 = v45 & (v38 >> 8);
        v47 = *(_DWORD *)(v36 + 4 * v46);
        if (!v47)
          goto LABEL_36;
        v48 = v36 + 4 * v37;
        v49 = 1;
        while (1)
        {
          v50 = (v47 - 1);
          if (a7 == *(_QWORD *)(v48 + 16 * v50))
            break;
          v46 = (v46 + v49) & v45;
          v47 = *(_DWORD *)(v36 + 4 * v46);
          ++v49;
          if (!v47)
            goto LABEL_36;
        }
        a6 = *(unsigned int *)(v48 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v48 + 16 * v50 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v57 = v23 + 16;
          v58 = a6 << 32;
        }
        else
        {
          v57 = *(_QWORD *)(v23 + 8) - 8;
          v58 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v57 + (v58 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_57;
        v59 = *(unsigned __int8 *)(a4 + 5);
        if (v59 == 5)
        {
          v22 = v23;
          v75 = v19;
LABEL_110:
          v76 = a7;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v22, (uint64_t)v75, (uint64_t)&v265, a4, a5, a6);
          a7 = v76;
          goto LABEL_111;
        }
        if (v59 == 6)
        {
          v105 = *(_DWORD *)(v25 + 16) & 3;
          v106 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v108 = *(int8x16_t ***)(a4 + 24);
            v107 = *(_QWORD *)(a4 + 32);
            v265 = *(_QWORD *)(a4 + 8);
            v266 = v106;
            LODWORD(v267) = HIDWORD(a6);
            v269 = (_DWORD *)v23;
            BYTE1(v270[1]) = 3;
            if (v105 != 2)
              LOBYTE(v270[1]) = 1;
            BYTE3(v270[1]) = 1;
            v273 = v108;
            v274 = v107;
          }
          else
          {
            v265 = *(_QWORD *)(a4 + 8);
            v266 = v106;
            LODWORD(v267) = HIDWORD(a6);
            v269 = (_DWORD *)v23;
            BYTE1(v270[1]) = 3;
            if (v105 != 2)
LABEL_354:
              LOBYTE(v270[1]) = 1;
          }
        }
        else
        {
LABEL_57:
          v265 = a4;
          v269 = (_DWORD *)v23;
LABEL_58:
          v267 = __PAIR64__(a6, a5);
          LOWORD(v270[1]) = 257;
        }
LABEL_111:
        if (BYTE1(v270[1]) == 1)
        {
          v14 = v265;
        }
        else
        {
          if (BYTE1(v270[1]) == 2)
          {
            v77 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v265, v9, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v78 = (unint64_t)v269;
            v79 = *(_QWORD *)(16 * (*v269 & 0xFFFFFFFE) + 0x28);
            if ((v267 & 0x20) != 0)
              v78 = (unint64_t)v268;
            if (BYTE3(v270[1]) != 1)
              goto LABEL_129;
            if ((v78 & 0xFFFE000000000002) != 0)
              goto LABEL_386;
            v80 = *(unsigned int *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C);
            v81 = *(_DWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C) != 0;
            v82 = 16 * v80;
            if ((_DWORD)v80)
              v83 = v273 == (int8x16_t **)v82;
            else
              v83 = 1;
            if (!v83)
            {
              do
              {
                v82 = *(_QWORD *)(v82 + 16);
                v81 = v82 != 0;
              }
              while ((int8x16_t **)v82 != v273 && v82 != 0);
            }
            if (!v81)
            {
LABEL_386:
              __dst = (JSC::VM *)*((_QWORD *)v9 + 7);
              v77 = JSC::throwDOMAttributeGetterTypeError(v79, &__dst, v273, (WTF::StringImpl *)a7);
            }
            else
            {
LABEL_129:
              v77 = ((uint64_t (*)(unint64_t))v265)(v79);
            }
          }
          v14 = v77;
        }
        goto LABEL_131;
      }
LABEL_36:
      if ((*v20 & 0x20) != 0)
      {
        v51 = a7;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, v19, a7, (uint64_t)&v265);
        a7 = v51;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_111;
      }
      v22 = *(_QWORD *)(v25 + 48);
      if (!v22)
        v22 = *(_QWORD *)(v23 + 16);
      if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
      {
        if (!a7)
          goto LABEL_50;
        v53 = *(_DWORD *)(a7 + 16);
        if ((v53 & 0x20) != 0)
          goto LABEL_50;
        v54 = *(_BYTE **)(a7 + 8);
        v55 = *(unsigned int *)(a7 + 4);
        if ((v53 & 4) != 0)
        {
          v208 = v9;
          v209 = v11;
          v210 = v10;
          if (!(_DWORD)v55 || (v56 = *v54 - 48, v56 > 9) || v55 >= 2 && *v54 == 48)
          {
            v14 = 10;
LABEL_391:
            v10 = v210;
            v11 = v209;
            v9 = v208;
            goto LABEL_131;
          }
          v211 = v54 + 1;
          v212 = v55 - 1;
          v14 = 10;
          while (v212)
          {
            if (v56 > 0x19999999)
              goto LABEL_391;
            v213 = *v211 - 48;
            if (v213 > 9)
              goto LABEL_391;
            v63 = __CFADD__(v213, 10 * v56);
            v56 = v213 + 10 * v56;
            ++v211;
            --v212;
            v10 = v210;
            v11 = v209;
            v9 = v208;
            if (v63)
              goto LABEL_131;
          }
          v10 = v210;
          v11 = v209;
          v9 = v208;
          if (v56 == -1)
            goto LABEL_50;
        }
        else
        {
          if (!(_DWORD)v55)
            goto LABEL_50;
          v56 = *(unsigned __int16 *)v54 - 48;
          if (v56 > 9 || *(_WORD *)v54 == 48 && v55 > 1)
            goto LABEL_50;
          v60 = (unsigned __int16 *)(v54 + 2);
          v61 = v55 - 1;
          v14 = 10;
          while (v61)
          {
            if (v56 <= 0x19999999)
            {
              v62 = *v60 - 48;
              if (v62 <= 9)
              {
                v63 = __CFADD__(v62, 10 * v56);
                v56 = v62 + 10 * v56;
                ++v60;
                --v61;
                if (!v63)
                  continue;
              }
            }
            goto LABEL_131;
          }
          if (v56 == -1)
            goto LABEL_50;
        }
        v64 = *((_QWORD *)v9 + 7);
        v251 = (JSC::VMTraps *)(v64 + 64);
        v256 = (JSC::CallFrame *)v56;
        v14 = 10;
        while (2)
        {
          v65 = a7;
          v66 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
          v67 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v66 + 0x4C) + 0x70))(v13, v9);
          if (*(_DWORD *)(v64 + 80))
          {
            v70 = *(_DWORD *)(v64 + 80);
            if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v251, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v64 + 16))
              goto LABEL_131;
          }
          a7 = v65;
          if ((v67 & 1) != 0)
            goto LABEL_111;
          if (BYTE2(v270[1]) == 3)
          {
            if (BYTE4(v270[1]))
              goto LABEL_131;
            v68 = *(unsigned __int8 *)(v13 + 5);
            a7 = v65;
            if (v68 != 61)
              goto LABEL_73;
          }
          else
          {
            v68 = *(unsigned __int8 *)(v13 + 5);
            if (v68 == 61)
            {
              if (BYTE2(v270[1]) == 1)
                goto LABEL_131;
            }
            else
            {
LABEL_73:
              if ((v68 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v13 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v276) = 0;
                  v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v13, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v71 = v73 ? v72 : 0;
                }
                else
                {
                  v71 = *(_QWORD *)(v13 + 24);
                }
                a7 = v65;
                if (v71 <= (unint64_t)v256)
                  goto LABEL_131;
              }
            }
          }
          if ((*(_WORD *)(v66 + 12) & 0x800) == 0 || BYTE2(v270[1]) == 3)
          {
            v69 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
            if (!v69)
              v69 = *(_QWORD *)(v13 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v69 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xB0))(v13, v9);
            }
            else
            {
              v69 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
              if (!v69)
                v69 = *(_QWORD *)(v13 + 16);
            }
            if (*(_DWORD *)(v64 + 80))
            {
              v74 = *(_DWORD *)(v64 + 80);
              if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v251, 7u, a3, a4, a5, a6, a7, a8);
              a7 = v65;
              if (*(_QWORD *)(v64 + 16))
                goto LABEL_131;
            }
            else
            {
              a7 = v65;
            }
          }
          if ((v69 & 0xFFFE000000000002) != 0)
            goto LABEL_131;
          v13 = v69;
          a3 = (uint64_t)v256;
          if (*(unsigned __int8 *)(v69 + 5) <= 0x16u)
            goto LABEL_131;
          continue;
        }
      }
      v20 = (_BYTE *)(v22 + 6);
      v23 = v22;
    }
    while ((*(_BYTE *)(v22 + 6) & 8) == 0);
  }
  if (!a7)
    goto LABEL_173;
  v109 = *(_DWORD *)(a7 + 16);
  if ((v109 & 0x20) != 0)
    goto LABEL_173;
  v110 = *(_BYTE **)(a7 + 8);
  v111 = *(unsigned int *)(a7 + 4);
  if ((v109 & 4) != 0)
  {
    if ((_DWORD)v111)
    {
      v112 = *v110 - 48;
      if (v112 <= 9 && (v111 < 2 || *v110 != 48))
      {
        v230 = v110 + 1;
        v231 = v111 - 1;
        while (v231)
        {
          if (v112 <= 0x19999999)
          {
            v232 = *v230 - 48;
            if (v232 <= 9)
            {
              v63 = __CFADD__(v232, 10 * v112);
              v112 = v232 + 10 * v112;
              ++v230;
              --v231;
              if (!v63)
                continue;
            }
          }
          goto LABEL_173;
        }
        if (v112 != -1)
          goto LABEL_310;
      }
    }
    goto LABEL_173;
  }
  if (!(_DWORD)v111)
    goto LABEL_173;
  v112 = *(unsigned __int16 *)v110 - 48;
  if (v112 > 9 || *(_WORD *)v110 == 48 && v111 > 1)
    goto LABEL_173;
  v184 = (unsigned __int16 *)(v110 + 2);
  v185 = v111 - 1;
  while (v185)
  {
    if (v112 <= 0x19999999)
    {
      v186 = *v184 - 48;
      if (v186 <= 9)
      {
        v63 = __CFADD__(v186, 10 * v112);
        v112 = v186 + 10 * v112;
        ++v184;
        --v185;
        if (!v63)
          continue;
      }
    }
    goto LABEL_173;
  }
  if (v112 == -1)
  {
LABEL_173:
    v75 = (JSC::VM *)*((_QWORD *)v9 + 7);
    v113 = (JSC::VM *)((char *)v75 + 64);
    a3 = (uint64_t)&__s[1];
    a4 = (uint64_t)&__s[3];
    v14 = 10;
    while (1)
    {
      v114 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v22 + 6) & 8) == 0)
      {
        if ((_DWORD)v21 && (v21 & ~*(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v115 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x58);
          if (v115)
            goto LABEL_484;
          v116 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x40);
          if (v116 && (*(_BYTE *)(v116 + 5) == 1 || *(_DWORD *)(v116 + 80) >= 2u))
          {
            v252 = (JSC::VMTraps *)v22;
            v257 = v113;
            v117 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
            v118 = v75;
            v249 = (JSC::CallFrame *)a3;
            v119 = a7;
            v120 = a4;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v114, v75, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            a4 = v120;
            v75 = v118;
            a7 = v119;
            v115 = v121;
            v114 = v117;
            v113 = v257;
            a3 = (uint64_t)v249;
            v22 = (uint64_t)v252;
            if (v115)
            {
LABEL_484:
              if (*(_DWORD *)(v115 + 24))
              {
                v122 = *(_QWORD *)(v115 + 16);
                v123 = v122 & 0xFFFFFFFFFFFFFFFELL;
                v124 = *(unsigned int *)(v115 + 8);
                v125 = *(_DWORD *)(a7 + 16);
                if ((v122 & 1) != 0)
                {
                  if ((v125 & 0x20) != 0)
                    v125 = *(_DWORD *)(a7 + 32);
                  v126 = *(_DWORD *)(v115 + 12);
                  v127 = (v125 >> 8) & *(_QWORD *)&v126;
                  v128 = *(unsigned __int8 *)(v123 + v127);
                  if (*(_BYTE *)(v123 + v127))
                  {
                    v129 = v123 + v124;
                    v130 = 1;
                    while (1)
                    {
                      v131 = *(_QWORD *)(v129 + 8 * (v128 - 1));
                      if (a7 == (v131 & 0xFFFFFFFFFFFFLL))
                        break;
                      v127 = ((_DWORD)v127 + v130) & v126;
                      v128 = *(unsigned __int8 *)(v123 + v127);
                      ++v130;
                      if (!*(_BYTE *)(v123 + v127))
                        goto LABEL_202;
                    }
                    a6 = (v131 >> 16) & 0xFF00000000 | HIBYTE(v131);
LABEL_199:
                    if ((_DWORD)a6 != -1)
                    {
                      a5 = HIDWORD(a6);
                      if ((int)a6 <= 63)
                      {
                        v182 = v22 + 16;
                        v183 = a6 << 32;
                      }
                      else
                      {
                        v182 = *(_QWORD *)(v22 + 8) - 8;
                        v183 = 0x3F00000000 - (a6 << 32);
                      }
                      a4 = *(_QWORD *)(v182 + (v183 >> 29));
                      if ((a4 & 0xFFFE000000000002) != 0)
                        goto LABEL_359;
                      v201 = *(unsigned __int8 *)(a4 + 5);
                      if (v201 == 5)
                        goto LABEL_110;
                      if (v201 != 6)
                      {
LABEL_359:
                        v265 = a4;
                        v269 = (_DWORD *)v22;
                        goto LABEL_58;
                      }
                      v204 = *(_DWORD *)(v114 + 16) & 3;
                      v205 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v207 = *(int8x16_t ***)(a4 + 24);
                        v206 = *(_QWORD *)(a4 + 32);
                        v265 = *(_QWORD *)(a4 + 8);
                        v266 = v205;
                        LODWORD(v267) = HIDWORD(a6);
                        v269 = (_DWORD *)v22;
                        BYTE1(v270[1]) = 3;
                        if (v204 != 2)
                          LOBYTE(v270[1]) = 1;
                        BYTE3(v270[1]) = 1;
                        v273 = v207;
                        v274 = v206;
                      }
                      else
                      {
                        v265 = *(_QWORD *)(a4 + 8);
                        v266 = v205;
                        LODWORD(v267) = HIDWORD(a6);
                        v269 = (_DWORD *)v22;
                        BYTE1(v270[1]) = 3;
                        if (v204 != 2)
                          goto LABEL_354;
                      }
                      goto LABEL_111;
                    }
                  }
                }
                else
                {
                  if ((v125 & 0x20) != 0)
                    v125 = *(_DWORD *)(a7 + 32);
                  v132 = *(_DWORD *)(v115 + 12);
                  v133 = v132 & (v125 >> 8);
                  v134 = *(_DWORD *)(v123 + 4 * v133);
                  if (v134)
                  {
                    v135 = v123 + 4 * v124;
                    v136 = 1;
                    while (1)
                    {
                      v137 = (v134 - 1);
                      if (a7 == *(_QWORD *)(v135 + 16 * v137))
                        break;
                      v133 = (v133 + v136) & v132;
                      v134 = *(_DWORD *)(v123 + 4 * v133);
                      ++v136;
                      if (!v134)
                        goto LABEL_202;
                    }
                    a6 = *(unsigned int *)(v135 + 16 * v137 + 8) | ((unint64_t)*(unsigned __int8 *)(v135 + 16 * v137 + 12) << 32);
                    goto LABEL_199;
                  }
                }
              }
            }
          }
        }
LABEL_202:
        if ((*(_BYTE *)(v22 + 6) & 0x20) != 0)
        {
          v244 = v114;
          v246 = a4;
          v140 = v22;
          v258 = v113;
          v141 = v75;
          v142 = (JSC::CallFrame *)a3;
          v143 = a7;
          v144 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, v75, a7, (uint64_t)&v265);
          v114 = v244;
          a4 = v246;
          a3 = (uint64_t)v142;
          v75 = v141;
          a7 = v143;
          v145 = v144;
          v113 = v258;
          v22 = v140;
          if ((v145 & 1) != 0)
            goto LABEL_111;
        }
        goto LABEL_203;
      }
      v248 = (char *)a4;
      v250 = (JSC::CallFrame *)a3;
      v243 = v11;
      v245 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
      v253 = (JSC::VMTraps *)v22;
      v260 = v113;
      v150 = v75;
      v151 = a7;
      v152 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v245 + 0x4C) + 0x68))();
      v242 = v150;
      if (*((_DWORD *)v150 + 20))
      {
        v179 = *((_DWORD *)v150 + 20);
        if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v260, 7u, a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v150 + 2))
        {
LABEL_403:
          v11 = v243;
          goto LABEL_131;
        }
      }
      a7 = v151;
      v11 = v243;
      if ((v152 & 1) != 0)
        goto LABEL_111;
      if (BYTE2(v270[1]) == 3)
      {
        if (BYTE4(v270[1]))
          goto LABEL_403;
        v153 = *((unsigned __int8 *)v253 + 5);
        if (v153 == 61)
        {
LABEL_274:
          v22 = (uint64_t)v253;
          v113 = v260;
          v114 = v245;
          goto LABEL_275;
        }
      }
      else
      {
        v153 = *((unsigned __int8 *)v253 + 5);
        if (v153 == 61)
        {
          v22 = (uint64_t)v253;
          v113 = v260;
          v11 = v243;
          v114 = v245;
          a7 = v151;
          v75 = v242;
          a4 = (uint64_t)v248;
          a3 = (uint64_t)v250;
          if (BYTE2(v270[1]) == 1)
            goto LABEL_131;
          goto LABEL_203;
        }
      }
      if (!v151)
        goto LABEL_274;
      if ((v153 - 50) < 0xFFFFFFF5)
        goto LABEL_274;
      v154 = *(_DWORD *)(v151 + 16);
      if ((v154 & 0x20) != 0)
        goto LABEL_274;
      v155 = *(unsigned int *)(v151 + 4);
      if (!(_DWORD)v155)
        goto LABEL_274;
      v156 = *(unsigned __int8 **)(v151 + 8);
      if ((v154 & 4) != 0)
      {
        v157 = *v156;
        if ((_DWORD)v155 == 1)
        {
LABEL_228:
          v158 = v157 - 48;
          v22 = (uint64_t)v253;
          v113 = v260;
          v11 = v243;
          v114 = v245;
          a7 = v151;
          v75 = v242;
          a4 = (uint64_t)v248;
          a3 = (uint64_t)v250;
          if (v158 < 0xA)
            goto LABEL_131;
          goto LABEL_203;
        }
        if (v157 == 45)
        {
          v157 = v156[1];
          goto LABEL_232;
        }
        if ((v157 - 48) < 0xA)
          goto LABEL_243;
        if ((_DWORD)v155 == 8)
          goto LABEL_242;
      }
      else
      {
        v157 = *(unsigned __int16 *)v156;
        if ((_DWORD)v155 == 1)
          goto LABEL_228;
        if (v157 == 45)
        {
          v157 = *((unsigned __int16 *)v156 + 1);
LABEL_232:
          if ((v157 - 48) < 0xA)
          {
            if ((_DWORD)v155 == 2)
              goto LABEL_403;
            goto LABEL_243;
          }
          if ((_DWORD)v155 != 9)
            goto LABEL_274;
LABEL_242:
          if (v157 != 73)
            goto LABEL_274;
          goto LABEL_243;
        }
        if ((v157 - 48) < 0xA || (_DWORD)v155 == 8 && v157 == 73)
          goto LABEL_243;
      }
      if ((_DWORD)v155 != 3 || v157 != 78)
        goto LABEL_274;
LABEL_243:
      v241 = v241 & 0xFFFFFF0000000000 | v155 | ((unint64_t)((v154 >> 2) & 1) << 32);
      JSC::jsToNumber(v156, v241);
      v160 = (v159 >> 52) & 0x7FF;
      if ((_DWORD)v160 == 2047)
      {
        if ((v159 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v161 = v248;
        }
        else
        {
          if ((v159 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v167 = (char *)v250;
          }
          else
          {
            v167 = __s;
          }
          *(_QWORD *)v167 = 0x7974696E69666E49;
          v161 = v167 + 8;
        }
        goto LABEL_257;
      }
      v162 = v159 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v159 & 0x8000000000000000) != 0 && v162)
      {
        __s[0] = 45;
        v163 = (char *)v250;
      }
      else
      {
        if (!v162)
        {
          __s[0] = 48;
          v161 = (char *)v250;
          goto LABEL_257;
        }
        v163 = __s;
      }
      v164 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v159 & 0x800FFFFFFFFFFFFFLL, v160);
      v161 = WTF::dragonbox::detail::to_shortest(v164, v165, (uint64_t)v163, v166);
LABEL_257:
      *v161 = 0;
      v168 = strlen(__s);
      memcpy(&__dst, __s, v168);
      *((_BYTE *)&__dst + v168) = 0;
      v169 = *(unsigned int *)(v151 + 4);
      v170 = *(unsigned __int8 **)(v151 + 8);
      if ((*(_BYTE *)(v151 + 16) & 4) != 0)
      {
        if ((_DWORD)v169)
        {
          p_dst = &__dst;
          v176 = *(unsigned int *)(v151 + 4);
          do
          {
            v178 = *(unsigned __int8 *)p_dst;
            p_dst = (JSC::VM **)((char *)p_dst + 1);
            v177 = v178;
            if (!v178 || *v170 != v177)
              goto LABEL_271;
            ++v170;
          }
          while (--v176);
        }
      }
      else if ((_DWORD)v169)
      {
        v171 = &__dst;
        v172 = *(unsigned int *)(v151 + 4);
        while (1)
        {
          v174 = *(unsigned __int8 *)v171;
          v171 = (JSC::VM **)((char *)v171 + 1);
          v173 = v174;
          if (!v174 || *(unsigned __int16 *)v170 != v173)
            break;
          v170 += 2;
          if (!--v172)
            goto LABEL_269;
        }
LABEL_271:
        v22 = (uint64_t)v253;
        v113 = v260;
        v114 = v245;
LABEL_275:
        a7 = v151;
        v75 = v242;
        v11 = v243;
        a4 = (uint64_t)v248;
        a3 = (uint64_t)v250;
        goto LABEL_203;
      }
LABEL_269:
      v22 = (uint64_t)v253;
      v113 = v260;
      v11 = v243;
      v114 = v245;
      a7 = v151;
      v75 = v242;
      a4 = (uint64_t)v248;
      a3 = (uint64_t)v250;
      if (!*((_BYTE *)&__dst + v169))
        goto LABEL_131;
LABEL_203:
      if ((*(_WORD *)(v114 + 12) & 0x800) == 0)
      {
        v138 = *(_DWORD *)v22;
LABEL_205:
        v139 = *(_QWORD *)(16 * (v138 & 0xFFFFFFFE) + 0x30);
        if (!v139)
          v139 = *(_QWORD *)(v22 + 16);
        goto LABEL_207;
      }
      v138 = *(_DWORD *)v22;
      if (BYTE2(v270[1]) == 3)
        goto LABEL_205;
      v247 = a4;
      v146 = (JSC::CallFrame *)a3;
      v147 = v75;
      v148 = a7;
      v259 = v113;
      v149 = 16 * (v138 & 0xFFFFFFFE);
      if ((*(_WORD *)(v149 + 12) & 0x800) != 0)
      {
        v139 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v149 + 76) + 0xB0))();
      }
      else
      {
        v139 = *(_QWORD *)(v149 + 48);
        if (!v139)
          v139 = *(_QWORD *)(v22 + 16);
      }
      if (*((_DWORD *)v147 + 20))
      {
        v180 = *((_DWORD *)v147 + 20);
        if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v259, 7u, a3, a4, a5, a6, a7, a8);
        v75 = v147;
        v113 = v259;
        a7 = v148;
        a3 = (uint64_t)v146;
        a4 = v247;
        if (*((_QWORD *)v147 + 2))
          goto LABEL_131;
      }
      else
      {
        v113 = v259;
        a7 = v148;
        v75 = v147;
        a3 = (uint64_t)v146;
        a4 = v247;
      }
LABEL_207:
      if ((v139 & 0xFFFE000000000002) == 0)
      {
        v22 = v139;
        if (*(unsigned __int8 *)(v139 + 5) > 0x16u)
          continue;
      }
      goto LABEL_131;
    }
  }
LABEL_310:
  v187 = *((_QWORD *)v9 + 7);
  v254 = (JSC::VMTraps *)(v187 + 64);
  v261 = (JSC::CallFrame *)v112;
  v14 = 10;
  while (1)
  {
    v188 = a7;
    v189 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    v190 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v189 + 0x4C) + 0x70))(v13, v9);
    v191 = v190;
    if (*(_DWORD *)(v187 + 80))
      break;
    a7 = v188;
    if ((v190 & 1) != 0)
      goto LABEL_111;
LABEL_313:
    if (BYTE2(v270[1]) == 3)
    {
      if (BYTE4(v270[1]))
        goto LABEL_131;
      v192 = *(unsigned __int8 *)(v13 + 5);
      if (v192 == 61)
        goto LABEL_316;
    }
    else
    {
      v192 = *(unsigned __int8 *)(v13 + 5);
      if (v192 == 61)
      {
        if (BYTE2(v270[1]) == 1)
          goto LABEL_131;
        goto LABEL_316;
      }
    }
    if ((v192 - 39) <= 0xA)
    {
      if ((*(_BYTE *)(v13 + 40) & 7u) > 2)
      {
        LOBYTE(__dst) = 0;
        LOBYTE(v276) = 0;
        v199 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v13, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
        v198 = v200 ? v199 : 0;
      }
      else
      {
        v198 = *(_QWORD *)(v13 + 24);
      }
      if (v198 <= (unint64_t)v261)
        goto LABEL_131;
    }
LABEL_316:
    if ((*(_WORD *)(v189 + 12) & 0x800) == 0 || BYTE2(v270[1]) == 3)
    {
      v193 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
      if (!v193)
        v193 = *(_QWORD *)(v13 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v193 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)
                                                         + 0xB0))(v13, v9);
      }
      else
      {
        v193 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
        if (!v193)
          v193 = *(_QWORD *)(v13 + 16);
      }
      if (*(_DWORD *)(v187 + 80))
      {
        v197 = *(_DWORD *)(v187 + 80);
        if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v254, 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v187 + 16))
          goto LABEL_131;
      }
    }
    if ((v193 & 0xFFFE000000000002) == 0)
    {
      v13 = v193;
      a7 = v188;
      a3 = (uint64_t)v261;
      if (*(unsigned __int8 *)(v193 + 5) > 0x16u)
        continue;
    }
    goto LABEL_131;
  }
  v194 = *(_DWORD *)(v187 + 80);
  if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v254, 7u, a3, a4, a5, a6, a7, a8);
  v195 = *(_QWORD *)(v187 + 16);
  if (v195)
    v196 = 1;
  else
    v196 = v191;
  if ((v196 & 1) == 0)
    goto LABEL_313;
  a7 = v188;
  if (!v195)
    goto LABEL_111;
LABEL_50:
  v14 = 10;
LABEL_131:
  if (v272)
  {
    v85 = *(_DWORD *)(v271 + 4);
    if (!v85)
    {
      __break(0xC471u);
      JUMPOUT(0x197F40928);
    }
    *(_DWORD *)(v271 + 4) = v85 - 1;
  }
  v15 = v264;
  if (*((_DWORD *)v264 + 20))
  {
    v181 = *((_DWORD *)v264 + 20);
    if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v264 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v15 + 2))
      return 0;
  }
LABEL_135:
  v86 = *((int *)a2 + 8) - 1;
  __dst = (JSC::VM *)v277;
  v276 = 16;
  if (v86 >= 0x11)
  {
    if (v86 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197F40F9CLL);
    }
    v202 = (JSC::VM *)WTF::fastMalloc((WTF *)(8 * v86));
    LODWORD(v276) = v86;
    __dst = v202;
    v87 = HIDWORD(v276);
LABEL_138:
    v88 = 0x600000000;
    v89 = v86;
    do
    {
      *((_QWORD *)__dst + v87++) = *(_QWORD *)((char *)a2 + (v88 >> 29));
      v88 += 0x100000000;
      --v89;
    }
    while (v89);
    HIDWORD(v276) = v87;
  }
  else if (v86)
  {
    v87 = 0;
    goto LABEL_138;
  }
  v90 = 0;
  *(_QWORD *)__s = 0;
  if (v9)
    v90 = (JSC::VM *)*((_QWORD *)v9 + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v265, v90, a3, a4, a5, a6, a7, a8);
  v16 = v262(v9, v11, v86, __dst, __s);
  if (v266)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v266 + 112), (uint64_t)&v265, v265, v92, v93, v94, v95, v96);
    v99 = (unsigned int *)v266;
    v266 = 0;
    if (v99)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v99, (uint64_t)v91, v98, v92, v93, v94, v95, v96);
  }
  v100 = *(JSC::Exception **)__s;
  if (*(_QWORD *)__s)
  {
    if ((*(_QWORD *)__s & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (**(_DWORD **)__s & 0xFFFFFFFE) + 0x4C)))
    {
      v100 = (JSC::Exception *)JSC::Exception::create((uint64_t)v15, *(JSC::VM **)__s, 0, v92, v93, v94, v95, v96);
    }
    JSC::VM::throwException(v15, v9, v100, v97, v92, v93, v94, v95, v96);
    v16 = 10;
  }
  else if (v16)
  {
    if (v11 != v263)
    {
      v103 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
      if (!v103)
        v103 = *(_QWORD *)(v16 + 16);
      if (v103 == JSC::JSObject::get((unsigned int *)v11, (uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2160), v92, v93, v94, v95, v96))
      {
        if (*((_DWORD *)v15 + 20))
        {
          v203 = *((_DWORD *)v15 + 20);
          if ((v203 & 0x27) != 0 && (v203 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)v100, v92, v93, v94, v95, v96);
          if (*((_QWORD *)v15 + 2))
            goto LABEL_367;
        }
        (*(void (**)(uint64_t, JSC *, uint64_t, _QWORD))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xA8))(v16, v9, v14, 0);
        if (*((_DWORD *)v15 + 20))
        {
          v104 = *((_DWORD *)v15 + 20);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)v100, v92, v93, v94, v95, v96);
          if (*((_QWORD *)v15 + 2))
LABEL_367:
            v16 = 0;
        }
      }
    }
  }
  else
  {
    v16 = JSC::throwTypeError(v9, &v264);
  }
  v101 = __dst;
  if (v277 != (_BYTE *)__dst && __dst)
  {
    __dst = 0;
    LODWORD(v276) = 0;
    WTF::fastFree((unint64_t)v101, v91, (uint64_t)v100, v92, v93, v94, v95, v96);
  }
  return (JSObjectRef)v16;
}

JSC::JSGlobalObject *JSC::callJSCallbackFunction(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  JSC::JSGlobalObject *v32;
  unint64_t v33;
  JSC::JSGlobalObject *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[128];

  v8 = this;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 3);
  v11 = (WTF *)*((_QWORD *)a2 + 5);
  v38 = v11;
  if (((unint64_t)v11 & 0xFFFE000000000002) == 0)
  {
    v12 = *((unsigned __int8 *)v11 + 5);
    if (v12 >= 0x17)
    {
      if (v12 - 51 > 5)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  if (((unint64_t)v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_23:
    v11 = (WTF *)*((_QWORD *)this + 8);
    goto LABEL_4;
  }
  v32 = a2;
  this = (JSC::JSGlobalObject *)JSC::JSValue::toThisSloppySlowCase((JSC::JSValue *)&v38, this, a3, a4, a5, a6, a7, a8);
  a2 = v32;
  v11 = this;
LABEL_4:
  v13 = ((unint64_t)*((unsigned int *)a2 + 8) << 32) - 0x100000000;
  v14 = (uint64_t)v13 >> 32;
  v38 = (WTF *)v40;
  v39 = 16;
  if (HIDWORD(v13) >= 0x11)
  {
    v33 = HIDWORD(v13);
    v34 = a2;
    if (v13 >> 61)
    {
      __break(0xC471u);
      return this;
    }
    v31 = (WTF *)WTF::fastMalloc((WTF *)(v13 >> 29));
    a2 = v34;
    LODWORD(v39) = v33;
    v38 = v31;
    v15 = HIDWORD(v39);
LABEL_7:
    v16 = 0x600000000;
    v17 = v14;
    do
    {
      *((_QWORD *)v38 + v15++) = *(_QWORD *)((char *)a2 + (v16 >> 29));
      v16 += 0x100000000;
      --v17;
    }
    while (v17);
    v18 = 0;
    HIDWORD(v39) = v15;
    v37 = 0;
    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v13)
  {
    v15 = 0;
    goto LABEL_7;
  }
  v37 = 0;
LABEL_12:
  v18 = (JSC::VM *)*((_QWORD *)v8 + 7);
LABEL_13:
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v35, v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v25 = (*(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, WTF *, uint64_t, WTF *, unint64_t *))(v10 + 48))(v8, v10, v11, v14, v38, &v37);
  if (v36)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v36 + 112), (uint64_t)&v35, v35, v20, v21, v22, v23, v24);
    v27 = (unsigned int *)v36;
    v36 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v27, (uint64_t)v19, v26, v20, v21, v22, v23, v24);
  }
  v28 = v37;
  if (v37)
  {
    JSC::VM::throwException(v9, v8, v37, v20, v21, v22, v23, v24);
    v29 = 10;
  }
  else if (v25)
  {
    v29 = v25;
  }
  else
  {
    v29 = 10;
  }
  v30 = v38;
  if (v40 != (_BYTE *)v38)
  {
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v30, v19, v28, v20, v21, v22, v23, v24);
    }
  }
  return (JSC::JSGlobalObject *)v29;
}

unint64_t JSC::JSCallbackFunction::create(JSC::JSCallbackFunction *this, unint64_t a2, JSC::JSGlobalObject *a3, JSC::VM *a4, const WTF::String *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::Heap *v12;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v19)(_QWORD *);
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v11 = *(_QWORD *)(a2 + 800);
  if ((v11 & 1) != 0)
  {
    v19 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v20 = (_QWORD *)(a2 - 16);
    v26[0] = *v20;
    v26[1] = a2;
    v26[2] = a2 + 800;
    v11 = v19(v26);
  }
  v12 = (JSC::Heap *)*((_QWORD *)this + 5050);
  if (!v12)
    v12 = JSC::GCClient::Heap::callbackFunctionSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v12 + 3);
  if (SlowCase >= *((_QWORD *)v12 + 4))
  {
    SlowCase = *((_QWORD *)v12 + 5);
    if ((SlowCase & 1) != 0)
    {
      v22 = (uint64_t)v12;
      JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, (uint64_t)this + 192, 64, 0, 0, v23, v24, v25);
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v21);
    *((_QWORD *)v12 + 5) = SlowCase + (int)v21;
  }
  *((_QWORD *)v12 + 3) = SlowCase + 64;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v14 = JSC::InternalFunction::InternalFunction(SlowCase, (uint64_t)this, v11, (uint64_t)JSC::callJSCallbackFunction, 0);
  *(_QWORD *)(SlowCase + 48) = a3;
  JSC::InternalFunction::finishCreation(v14, this, 0, a4, 0, v15, v16, v17);
  return SlowCase;
}

void JSC::JSCallbackObject<JSC::JSNonFinalObject>::visitChildren(JSC::JSObject *a1, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;

  v13[0] = a2;
  v13[1] = a1;
  v15 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v14 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v13;
    JSC::JSObject::visitChildren(a1, a2, a3);
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16);
    if (v12)
      JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::AbstractSlotVisitor>(v12, (uint64_t)a2, v6, v7, v8, v9, v10, v11);
    *(_QWORD *)(v13[0] + 88) = v14;
  }
}

void JSC::JSCallbackObject<JSC::JSNonFinalObject>::visitChildren(JSC::JSObject *a1, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::JSObject::visitChildren(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16);
  if (v16)
    JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::SlotVisitor>(v16, (uint64_t)a2, v10, v11, v12, v13, v14, v15);
}

void JSC::JSCallbackObject<JSC::JSGlobalObject>::visitChildren(JSC::JSGlobalObject *a1, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;

  v13[0] = a2;
  v13[1] = a1;
  v15 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v14 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v13;
    JSC::JSGlobalObject::visitChildren(a1, a2, a3);
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 412) + 16);
    if (v12)
      JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::AbstractSlotVisitor>(v12, (uint64_t)a2, v6, v7, v8, v9, v10, v11);
    *(_QWORD *)(v13[0] + 88) = v14;
  }
}

void JSC::JSCallbackObject<JSC::JSGlobalObject>::visitChildren(JSC::JSGlobalObject *a1, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::JSGlobalObject::visitChildren(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(*((_QWORD *)a1 + 412) + 16);
  if (v16)
    JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::SlotVisitor>(v16, (uint64_t)a2, v10, v11, v12, v13, v14, v15);
}

void JSC::JSCallbackObject<JSC::JSNonFinalObject>::destroy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF **v12;
  uint64_t i;
  void (*v14)(uint64_t);
  WTF *v15;

  v9 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a1 & 8) != 0)
    v9 = (_QWORD *)(a1 - 16);
  v10 = (_QWORD *)(*v9 + 41896);
  v11 = *(_QWORD *)(a1 + 24);
  *v10 = a1;
  v10[1] = v11;
  v12 = (WTF **)(a1 + 16);
  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i; i = *(_QWORD *)(i + 8))
  {
    v14 = *(void (**)(uint64_t))(i + 32);
    if (v14)
      v14(a1);
  }
  *v10 = 0;
  v10[1] = 0;
  v15 = *v12;
  *v12 = 0;
  if (v15)
    std::default_delete<JSC::JSCallbackObjectData>::operator()[abi:sn180100]((int)v12, v15, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::getCallData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 16);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 80))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::callJSNonFinalObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::getConstructData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 16);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 88))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::constructJSNonFinalObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::put(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  const JSC::PropertyTable *v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  OpaqueJSClass *v15;
  unsigned int *v16;
  uint64_t (*v17)(JSC::VM **, uint64_t, unsigned int *, const JSC::PropertyTable *, JSC::Exception **);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Exception *v25;
  char v26;
  uint64_t v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  uint64_t (*v31)(JSC::VM **, uint64_t, _QWORD, const JSC::PropertyTable *, JSC::Exception **);
  double v32;
  uint64_t v33;
  unsigned int *v34;
  JSC::Exception *v35;
  char v36;
  uint64_t v37;
  WTF **v38;
  WTF *v39;
  WTF *v41;
  JSC::VM *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int OwnPropertySlotByIndex;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  unsigned __int16 *v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  JSC::Exception *v98[2];
  int v99;
  int v100;
  uint64_t v101;

  v9 = (const JSC::PropertyTable *)a4;
  v10 = a3;
  v13 = (uint64_t)a2[7];
  v14 = *(_QWORD *)(a5 + 8);
  if (v14 != a1 && ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 32 || *(_QWORD *)(v14 + 16) != a1))
    return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v85 = a5;
  if (a3)
  {
    v15 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 16) + 8);
    if (v15)
    {
      v84 = a1 + 16;
      v16 = 0;
      while (1)
      {
        v17 = (uint64_t (*)(JSC::VM **, uint64_t, unsigned int *, const JSC::PropertyTable *, JSC::Exception **))*((_QWORD *)v15 + 7);
        if (v17)
        {
          if (!v16)
          {
            *(_DWORD *)v10 += 2;
            v18 = WTF::fastMalloc((WTF *)0x18);
            v16 = (unsigned int *)v18;
            *(_DWORD *)v18 = 1;
            *(_QWORD *)(v18 + 8) = v10;
            if ((*(_BYTE *)(v10 + 16) & 4) != 0)
              v19 = 0;
            else
              v19 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)(v18 + 16) = v19;
          }
          v98[0] = 0;
          JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v86, a2[7], a3, a4, a5, a6, a7, a8);
          v21 = v17(a2, a1, v16, v9, v98);
          if (v87)
          {
            JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v87 + 112), (uint64_t)&v86, v86, a4, a5, a6, a7, a8);
            v24 = (unsigned int *)v87;
            v87 = 0;
            if (v24)
              WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v24, (uint64_t)v20, v23, a4, a5, a6, a7, a8);
          }
          a3 = (unint64_t)v98[0];
          if (v98[0])
          {
            if (((unint64_t)v98[0] & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v98[0] & 0xFFFFFFFE) + 0x4C)))
            {
              a3 = JSC::Exception::create(v13, v98[0], 0, a4, a5, a6, a7, a8);
            }
            JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v22, a4, a5, a6, a7, a8);
            v25 = v98[0];
          }
          else
          {
            v25 = 0;
          }
          v26 = v25 ? 1 : v21;
          if ((v26 & 1) != 0)
            goto LABEL_48;
        }
        OpaqueJSClass::contextData(v15, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
        v28 = *(WTF ***)(v27 + 8);
        if (v28)
        {
          v29 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v28, (WTF::StringImpl *)v10, (const WTF::StringImpl *)a3);
          if (v29)
          {
            v30 = v29;
            if ((*((_BYTE *)v29 + 16) & 2) != 0)
            {
              v21 = 0;
              goto LABEL_47;
            }
            v31 = (uint64_t (*)(JSC::VM **, uint64_t, _QWORD, const JSC::PropertyTable *, JSC::Exception **))*((_QWORD *)v29 + 1);
            if (v31)
            {
              v98[0] = 0;
              JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v86, a2[7], a3, a4, a5, a6, a7, a8);
              v21 = v31(a2, a1, *((_QWORD *)v30 + 3), v9, v98);
              if (v87)
              {
                JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v87 + 112), (uint64_t)&v86, v86, a4, a5, a6, a7, a8);
                v34 = (unsigned int *)v87;
                v87 = 0;
                if (v34)
                  WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v34, (uint64_t)v20, v33, a4, a5, a6, a7, a8);
              }
              a3 = (unint64_t)v98[0];
              if (v98[0])
              {
                if (((unint64_t)v98[0] & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v98[0] & 0xFFFFFFFE)
                                                                          + 0x4C)))
                {
                  a3 = JSC::Exception::create(v13, v98[0], 0, a4, a5, a6, a7, a8);
                }
                JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v32, a4, a5, a6, a7, a8);
                v35 = v98[0];
              }
              else
              {
                v35 = 0;
              }
              v36 = v35 ? 1 : v21;
              if ((v36 & 1) != 0)
                goto LABEL_47;
            }
          }
        }
        OpaqueJSClass::contextData(v15, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
        v38 = *(WTF ***)(v37 + 16);
        if (v38)
        {
          v39 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v38, (WTF::StringImpl *)v10, (const WTF::StringImpl *)a3);
          if (v39)
            break;
        }
        v15 = (OpaqueJSClass *)*((_QWORD *)v15 + 1);
        if (!v15)
          goto LABEL_46;
      }
      v41 = v39;
      a9.n128_u64[0] = 0xFFFFFFFF00000000;
      v88 = 0xFFFFFFFF00000000;
      v90 = 0;
      v91 = 0;
      v89 = a1;
      v92 = 196608;
      v93 = 0;
      v96 = 0;
      v97 = 0;
      v94 = v13;
      ++*(_DWORD *)(v13 + 4);
      v95 = 1;
      v42 = a2[7];
      if ((v10 >> 4))
      {
        v43 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
        if (((v10 >> 4) & ~*(_DWORD *)(v43 + 0x20)) == 0)
        {
          v44 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
          if (v44
            || (v45 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40)) != 0
            && (*(_BYTE *)(v45 + 5) == 1 || *(_DWORD *)(v45 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v44))
          {
            if (*(_DWORD *)(v44 + 24))
            {
              v46 = *(_QWORD *)(v44 + 16);
              v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
              v48 = *(unsigned int *)(v44 + 8);
              v49 = *(_DWORD *)(v10 + 16);
              if ((v46 & 1) != 0)
              {
                if ((v49 & 0x20) != 0)
                  v49 = *(_DWORD *)(v10 + 32);
                v50 = *(_DWORD *)(v44 + 12);
                v51 = (v49 >> 8) & *(_QWORD *)&v50;
                v52 = *(unsigned __int8 *)(v47 + v51);
                if (!*(_BYTE *)(v47 + v51))
                  goto LABEL_85;
                v53 = v47 + v48;
                v54 = 1;
                while (1)
                {
                  v55 = *(_QWORD *)(v53 + 8 * (v52 - 1));
                  if (v10 == (v55 & 0xFFFFFFFFFFFFLL))
                    break;
                  v51 = ((_DWORD)v51 + v54) & v50;
                  v52 = *(unsigned __int8 *)(v47 + v51);
                  ++v54;
                  if (!*(_BYTE *)(v47 + v51))
                    goto LABEL_85;
                }
                a6 = (v55 >> 16) & 0xFF00000000 | HIBYTE(v55);
              }
              else
              {
                if ((v49 & 0x20) != 0)
                  v49 = *(_DWORD *)(v10 + 32);
                v56 = *(_DWORD *)(v44 + 12);
                v57 = v56 & (v49 >> 8);
                v58 = *(_DWORD *)(v47 + 4 * v57);
                if (!v58)
                  goto LABEL_85;
                v59 = v47 + 4 * v48;
                v60 = 1;
                while (1)
                {
                  v61 = (v58 - 1);
                  if (*(_QWORD *)(v59 + 16 * v61) == v10)
                    break;
                  v57 = (v57 + v60) & v56;
                  v58 = *(_DWORD *)(v47 + 4 * v57);
                  ++v60;
                  if (!v58)
                    goto LABEL_85;
                }
                a6 = *(unsigned int *)(v59 + 16 * v61 + 8) | ((unint64_t)*(unsigned __int8 *)(v59 + 16 * v61 + 12) << 32);
              }
              if ((_DWORD)a6 != -1)
              {
                a5 = HIDWORD(a6);
                if ((int)a6 <= 63)
                {
                  v63 = a6 << 32;
                  v62 = v84;
                }
                else
                {
                  v62 = *(_QWORD *)(a1 + 8) - 8;
                  v63 = 0x3F00000000 - (a6 << 32);
                }
                a4 = *(_QWORD *)(v62 + (v63 >> 29));
                if ((a4 & 0xFFFE000000000002) != 0)
                {
LABEL_82:
                  v86 = a4;
                  v90 = a1;
                  v88 = __PAIR64__(a6, HIDWORD(a6));
                  OwnPropertySlotByIndex = 1;
                  LOWORD(v92) = 257;
                  goto LABEL_127;
                }
                v64 = *(unsigned __int8 *)(a4 + 5);
                if (v64 != 5)
                {
                  if (v64 == 6)
                  {
                    v74 = *(_DWORD *)(v43 + 16) & 3;
                    v75 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v77 = *(_QWORD *)(a4 + 24);
                      v76 = *(_QWORD *)(a4 + 32);
                      v86 = *(_QWORD *)(a4 + 8);
                      v87 = v75;
                      LODWORD(v88) = HIDWORD(a6);
                      v90 = a1;
                      BYTE1(v92) = 3;
                      OwnPropertySlotByIndex = 1;
                      if (v74 != 2)
                        LOBYTE(v92) = 1;
                      HIBYTE(v92) = 1;
                      v96 = v77;
                      v97 = v76;
                    }
                    else
                    {
                      v86 = *(_QWORD *)(a4 + 8);
                      v87 = v75;
                      LODWORD(v88) = HIDWORD(a6);
                      v90 = a1;
                      OwnPropertySlotByIndex = 1;
                      BYTE1(v92) = 3;
                      if (v74 != 2)
                        LOBYTE(v92) = 1;
                    }
                    goto LABEL_127;
                  }
                  goto LABEL_82;
                }
                JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v42, (uint64_t)&v86, a4, SHIDWORD(a6), a6);
                goto LABEL_103;
              }
            }
          }
        }
      }
LABEL_85:
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v42, v10, (uint64_t)&v86) & 1) != 0)
      {
LABEL_103:
        OwnPropertySlotByIndex = 1;
        goto LABEL_127;
      }
      v66 = *(_DWORD *)(v10 + 16);
      if ((v66 & 0x20) == 0)
      {
        v67 = *(_BYTE **)(v10 + 8);
        v68 = *(unsigned int *)(v10 + 4);
        if ((v66 & 4) != 0)
        {
          if (!(_DWORD)v68)
            goto LABEL_90;
          a3 = *v67 - 48;
          if (a3 > 9 || v68 >= 2 && *v67 == 48)
            goto LABEL_90;
          v78 = v67 + 1;
          v79 = v68 - 1;
          while (v79)
          {
            if (a3 > 0x19999999)
              goto LABEL_90;
            v80 = *v78 - 48;
            if (v80 > 9)
              goto LABEL_90;
            OwnPropertySlotByIndex = 0;
            v73 = __CFADD__(v80, 10 * a3);
            a3 = v80 + 10 * (_DWORD)a3;
            ++v78;
            --v79;
            if (v73)
              goto LABEL_127;
          }
        }
        else
        {
          if (!(_DWORD)v68)
            goto LABEL_90;
          a3 = *(unsigned __int16 *)v67 - 48;
          if (a3 > 9)
            goto LABEL_90;
          if (*(_WORD *)v67 == 48 && v68 > 1)
            goto LABEL_90;
          v70 = (unsigned __int16 *)(v67 + 2);
          v71 = v68 - 1;
          while (v71)
          {
            if (a3 > 0x19999999)
              goto LABEL_90;
            v72 = *v70 - 48;
            if (v72 > 9)
              goto LABEL_90;
            OwnPropertySlotByIndex = 0;
            v73 = __CFADD__(v72, 10 * a3);
            a3 = v72 + 10 * (_DWORD)a3;
            ++v70;
            --v71;
            if (v73)
              goto LABEL_127;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, (const WTF::StringImpl *)a3, (uint64_t)&v86, a5, a6, a7, a8);
LABEL_127:
          if (*(_DWORD *)(v13 + 80))
          {
            v82 = *(_DWORD *)(v13 + 80);
            if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v13 + 16))
              goto LABEL_137;
          }
          if (v95)
          {
            v81 = *(_DWORD *)(v94 + 4);
            if (!v81)
            {
              __break(0xC471u);
              JUMPOUT(0x197F41E9CLL);
            }
            *(_DWORD *)(v94 + 4) = v81 - 1;
            v94 = 0;
            v95 = 0;
          }
          if (OwnPropertySlotByIndex)
          {
            v21 = JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, v10, v9, v85, a6, a7, a8, a9);
            goto LABEL_138;
          }
          if ((*((_BYTE *)v41 + 8) & 2) != 0)
          {
LABEL_137:
            v21 = 0;
          }
          else
          {
            v98[0] = 0;
            v98[1] = (JSC::Exception *)a1;
            v99 = -1;
            a9.n128_u64[0] = 0x100000001000000;
            v100 = 0x1000000;
            v101 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v13, v10, (uint64_t)v9, 0, (uint64_t)v98, a7, a8, a9);
            v21 = v20 == 0;
          }
LABEL_138:
          if (v95)
          {
            v83 = *(_DWORD *)(v94 + 4);
            if (!v83)
            {
              __break(0xC471u);
              JUMPOUT(0x197F41E7CLL);
            }
            *(_DWORD *)(v94 + 4) = v83 - 1;
          }
          goto LABEL_47;
        }
      }
LABEL_90:
      OwnPropertySlotByIndex = 0;
      goto LABEL_127;
    }
  }
  v16 = 0;
LABEL_46:
  v21 = JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, v10, v9, v85, a6, a7, a8, a9);
LABEL_47:
  if (v16)
LABEL_48:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v16, v20, a3, a4, a5, a6, a7, a8);
  return v21;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::putByIndex(unint64_t a1, JSC::VM **a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v12;
  JSC::Exception *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  OpaqueJSClass *v20;
  unsigned int *v21;
  uint64_t (*v22)(JSC::VM **, unint64_t, unsigned int *, unint64_t, JSC::Exception **);
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Exception *v31;
  char v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  WTF *v36;
  uint64_t (*v37)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **);
  double v38;
  uint64_t v39;
  unsigned int *v40;
  JSC::Exception *v41;
  char v42;
  uint64_t v43;
  WTF **v44;
  WTF *v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  JSC::Exception *v59;
  WTF::StringImpl *v60;

  v56 = a5;
  v12 = (uint64_t **)a2[7];
  JSC::Identifier::from(v12, (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v60);
  v20 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 16) + 8);
  if (v20)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t (*)(JSC::VM **, unint64_t, unsigned int *, unint64_t, JSC::Exception **))*((_QWORD *)v20 + 7);
      if (v22)
      {
        if (!v21)
        {
          v23 = v60;
          if (v60)
          {
            *(_DWORD *)v60 += 2;
            v24 = WTF::fastMalloc((WTF *)0x18);
            v21 = (unsigned int *)v24;
            *(_DWORD *)v24 = 1;
            *(_QWORD *)(v24 + 8) = v23;
            if ((*((_BYTE *)v23 + 16) & 4) != 0)
              v25 = 0;
            else
              v25 = *((_QWORD *)v23 + 1);
            *(_QWORD *)(v24 + 16) = v25;
          }
          else
          {
            v21 = 0;
          }
        }
        v59 = 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v57, a2[7], (uint64_t)v13, v14, v15, v16, v17, v18);
        v27 = v22(a2, a1, v21, a4, &v59);
        if (v58)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v58 + 112), (uint64_t)&v57, v57, v14, v15, v16, v17, v18);
          v30 = (unsigned int *)v58;
          v58 = 0;
          if (v30)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v30, (uint64_t)v26, v29, v14, v15, v16, v17, v18);
        }
        v13 = v59;
        if (v59)
        {
          if (((unint64_t)v59 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x4C)))
          {
            v13 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v59, 0, v14, v15, v16, v17, v18);
          }
          JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v13, v28, v14, v15, v16, v17, v18);
          v31 = v59;
        }
        else
        {
          v31 = 0;
        }
        v32 = v31 ? 1 : v27;
        if ((v32 & 1) != 0)
          break;
      }
      OpaqueJSClass::contextData(v20, (JSC::JSGlobalObject *)a2, (uint64_t)v13, v14, v15, v16, v17, v18);
      v34 = *(WTF ***)(v33 + 8);
      if (v34)
      {
        v35 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v34, v60, v13);
        if (v35)
        {
          v36 = v35;
          if ((*((_BYTE *)v35 + 16) & 2) != 0)
            goto LABEL_56;
          v37 = (uint64_t (*)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **))*((_QWORD *)v35 + 1);
          if (v37)
          {
            v59 = 0;
            JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v57, a2[7], (uint64_t)v13, v14, v15, v16, v17, v18);
            v27 = v37(a2, a1, *((_QWORD *)v36 + 3), a4, &v59);
            if (v58)
            {
              JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v58 + 112), (uint64_t)&v57, v57, v14, v15, v16, v17, v18);
              v40 = (unsigned int *)v58;
              v58 = 0;
              if (v40)
                WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v40, (uint64_t)v26, v39, v14, v15, v16, v17, v18);
            }
            v13 = v59;
            if (v59)
            {
              if (((unint64_t)v59 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x4C)))
              {
                v13 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v59, 0, v14, v15, v16, v17, v18);
              }
              JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v13, v38, v14, v15, v16, v17, v18);
              v41 = v59;
            }
            else
            {
              v41 = 0;
            }
            v42 = v41 ? 1 : v27;
            if ((v42 & 1) != 0)
              break;
          }
        }
      }
      OpaqueJSClass::contextData(v20, (JSC::JSGlobalObject *)a2, (uint64_t)v13, v14, v15, v16, v17, v18);
      v44 = *(WTF ***)(v43 + 16);
      if (v44)
      {
        v45 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v44, v60, v13);
        if (v45)
        {
          if ((*((_BYTE *)v45 + 8) & 2) == 0)
            goto LABEL_46;
LABEL_56:
          v27 = 0;
          break;
        }
      }
      v20 = (OpaqueJSClass *)*((_QWORD *)v20 + 1);
      if (!v20)
        goto LABEL_46;
    }
  }
  else
  {
    v21 = 0;
LABEL_46:
    v27 = JSC::JSObject::putByIndex(a1, a2, a3, a4, v56, v16, v17, v18, v19);
  }
  v46 = v60;
  v60 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v26, (uint64_t)v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      if (!v21)
        return v27;
      goto LABEL_51;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (v21)
LABEL_51:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v21, v26, (uint64_t)v13, v14, v15, v16, v17, v18);
  return v27;
}

BOOL JSC::JSCallbackObject<JSC::JSNonFinalObject>::deleteProperty(JSC::JSObject *a1, JSC::VM **a2, JSC::Exception *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  OpaqueJSClass *v12;
  unsigned int *v13;
  JSC::VM *v14;
  uint64_t (*v15)(JSC::VM **, JSC::JSObject *, unsigned int *, JSC::Exception **);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  double v20;
  uint64_t v21;
  unsigned int *v22;
  JSC::Exception *v23;
  char v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  _BOOL8 v43;
  char v44;
  JSC::JSGlobalObject *v45;
  uint64_t v46;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55[2];
  uint64_t v56;
  uint64_t v57;
  JSC::Exception *v58;

  v9 = (uint64_t)a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_60;
  }
  *(_QWORD *)v55 = a4;
  v12 = *(OpaqueJSClass **)(*((_QWORD *)a1 + 2) + 8);
  if (!v12)
  {
    v13 = 0;
LABEL_31:
    v31 = *(_DWORD *)(v9 + 16);
    if ((v31 & 0x20) != 0)
    {
      a4 = *(const JSC::PropertyTable **)v55;
    }
    else
    {
      v32 = *(_BYTE **)(v9 + 8);
      v33 = *(unsigned int *)(v9 + 4);
      a4 = *(const JSC::PropertyTable **)v55;
      if ((v31 & 4) != 0)
      {
        if (!(_DWORD)v33 || (v48 = *v32 - 48, v48 > 9) || v33 >= 2 && *v32 == 48)
        {
LABEL_67:
          v49 = 0;
          v50 = 0;
          v51 = 0;
        }
        else
        {
          v52 = v32 + 1;
          v53 = v33 - 1;
          while (v53)
          {
            if (v48 > 0x19999999)
              goto LABEL_67;
            v54 = *v52 - 48;
            if (v54 > 9)
              goto LABEL_67;
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v42 = __CFADD__(v54, 10 * v48);
            v48 = v54 + 10 * v48;
            ++v52;
            --v53;
            if (v42)
              goto LABEL_68;
          }
          v49 = 0x100000000;
          if (v48 == -1)
          {
            v49 = 0;
            v50 = 0;
          }
          else
          {
            v50 = v48;
          }
          if (v48 == -1)
            v51 = 0;
          else
            v51 = v48 & 0xFFFFFF00;
        }
LABEL_68:
        v45 = (JSC::JSGlobalObject *)(v51 | v50);
        a4 = *(const JSC::PropertyTable **)v55;
        if ((v49 & 0x100000000) != 0)
          goto LABEL_58;
      }
      else
      {
        if (!(_DWORD)v33
          || (v34 = *(unsigned __int16 *)v32 - 48, v34 > 9)
          || (*(_WORD *)v32 == 48 ? (v38 = v33 > 1) : (v38 = 0), v38))
        {
LABEL_35:
          v35 = 0;
          v36 = 0;
          v37 = 0;
        }
        else
        {
          v39 = (unsigned __int16 *)(v32 + 2);
          v40 = v33 - 1;
          while (v40)
          {
            if (v34 > 0x19999999)
              goto LABEL_35;
            v41 = *v39 - 48;
            if (v41 > 9)
              goto LABEL_35;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v42 = __CFADD__(v41, 10 * v34);
            v34 = v41 + 10 * v34;
            ++v39;
            --v40;
            if (v42)
              goto LABEL_57;
          }
          v35 = 0x100000000;
          if (v34 == -1)
          {
            v35 = 0;
            v36 = 0;
          }
          else
          {
            v36 = v34;
          }
          if (v34 == -1)
            v37 = 0;
          else
            v37 = v34 & 0xFFFFFF00;
        }
LABEL_57:
        v45 = (JSC::JSGlobalObject *)(v37 | v36);
        if ((v35 & 0x100000000) != 0)
        {
LABEL_58:
          v46 = JSC::JSObject::deletePropertyByIndex(a1, (JSC::JSCell *)a2, v45, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_61:
          v43 = v46;
          goto LABEL_62;
        }
      }
    }
LABEL_60:
    v46 = JSC::JSObject::deleteProperty((unsigned int *)a1, (JSC::JSGlobalObject *)a2, v9, a4, a5, a6, a7, a8);
    goto LABEL_61;
  }
  v13 = 0;
  v14 = a2[7];
  while (1)
  {
    v15 = (uint64_t (*)(JSC::VM **, JSC::JSObject *, unsigned int *, JSC::Exception **))*((_QWORD *)v12 + 8);
    if (v15)
    {
      if (!v13)
      {
        *(_DWORD *)v9 += 2;
        v16 = WTF::fastMalloc((WTF *)0x18);
        v13 = (unsigned int *)v16;
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = v9;
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
          v17 = 0;
        else
          v17 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v16 + 16) = v17;
      }
      v58 = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v56, a2[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v19 = v15(a2, a1, v13, &v58);
      if (v57)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v57 + 112), (uint64_t)&v56, v56, (uint64_t)a4, a5, a6, a7, a8);
        v22 = (unsigned int *)v57;
        v57 = 0;
        if (v22)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v22, (uint64_t)v18, v21, (uint64_t)a4, a5, a6, a7, a8);
      }
      a3 = v58;
      if (v58)
      {
        if (((unint64_t)v58 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v14, v58, 0, (uint64_t)a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException(v14, (JSC::JSGlobalObject *)a2, a3, v20, (uint64_t)a4, a5, a6, a7, a8);
        v23 = v58;
      }
      else
      {
        v23 = 0;
      }
      v24 = v23 ? 1 : v19;
      if ((v24 & 1) != 0)
      {
        v43 = 1;
        goto LABEL_63;
      }
    }
    OpaqueJSClass::contextData(v12, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v26 = *(WTF ***)(v25 + 8);
    if (v26)
    {
      v27 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v26, (WTF::StringImpl *)v9, a3);
      if (v27)
      {
        v44 = *((_BYTE *)v27 + 16);
        goto LABEL_50;
      }
    }
    OpaqueJSClass::contextData(v12, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v29 = *(WTF ***)(v28 + 16);
    if (v29)
    {
      v30 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v29, (WTF::StringImpl *)v9, a3);
      if (v30)
        break;
    }
    v12 = (OpaqueJSClass *)*((_QWORD *)v12 + 1);
    if (!v12)
      goto LABEL_31;
  }
  v44 = *((_BYTE *)v30 + 8);
LABEL_50:
  v43 = (v44 & 8) == 0;
LABEL_62:
  if (v13)
LABEL_63:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v13, v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v43;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::deletePropertyByIndex(unint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Symbol *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v33);
  v22 = JSC::JSCell::deleteProperty(a1, a2, (uint64_t)v33, v10, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v13;
  OpaqueJSClass *v14;
  unsigned int (*v15)(JSC::VM **, uint64_t, OpaqueJSString *);
  uint64_t (*v16)(JSC::VM **, uint64_t, OpaqueJSString *, WTF::StringImpl **);
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int k;
  int v26;
  WTF *v27;
  int v28;
  WTF *v29;
  int i;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int j;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t (*v42)(JSC::VM **, uint64_t, _QWORD, WTF::StringImpl **);
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  JSC::VM *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  OpaqueJSClass *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  BOOL v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  int OwnStaticPropertySlot;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::AtomStringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::AtomStringImpl *v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned __int8 *v189;
  uint64_t v190;
  unsigned int v191;
  JSC::VM *v192;
  OpaqueJSClass *v193;
  JSC::VM *v194;
  OpaqueJSString *v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  WTF::StringImpl *v198;

  v8 = a4;
  v9 = (unint64_t)a3;
  v11 = (uint64_t)a2[7];
  v195 = 0;
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
      goto LABEL_101;
    OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, (JSC::VM *)v11, 0, a4);
    goto LABEL_124;
  }
  v13 = a1 + 16;
  v14 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 16) + 8);
  v194 = (JSC::VM *)v11;
  if (!v14)
  {
LABEL_48:
    if ((v9 >> 4))
    {
      v52 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
      if (((v9 >> 4) & ~*(_DWORD *)(v52 + 0x20)) == 0)
      {
        v53 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
        if (v53
          || (v68 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v68 + 5) == 1 || *(_DWORD *)(v68 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v53))
        {
          if (*(_DWORD *)(v53 + 24))
          {
            v54 = *(_QWORD *)(v53 + 16);
            v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
            v56 = *(unsigned int *)(v53 + 8);
            v57 = *(_DWORD *)(v9 + 16);
            if ((v54 & 1) != 0)
            {
              if ((v57 & 0x20) != 0)
                v57 = *(_DWORD *)(v9 + 32);
              v58 = *(_DWORD *)(v53 + 12);
              v59 = (v57 >> 8) & *(_QWORD *)&v58;
              v60 = *(unsigned __int8 *)(v55 + v59);
              if (*(_BYTE *)(v55 + v59))
              {
                v61 = v55 + v56;
                v62 = 1;
                while (1)
                {
                  v63 = *(_QWORD *)(v61 + 8 * (v60 - 1));
                  if (v9 == (v63 & 0xFFFFFFFFFFFFLL))
                    break;
                  v59 = ((_DWORD)v59 + v62) & v58;
                  v60 = *(unsigned __int8 *)(v55 + v59);
                  ++v62;
                  if (!*(_BYTE *)(v55 + v59))
                    goto LABEL_93;
                }
                a6 = (v63 >> 16) & 0xFF00000000 | HIBYTE(v63);
                goto LABEL_72;
              }
            }
            else
            {
              if ((v57 & 0x20) != 0)
                v57 = *(_DWORD *)(v9 + 32);
              v72 = *(_DWORD *)(v53 + 12);
              v73 = v72 & (v57 >> 8);
              v74 = *(_DWORD *)(v55 + 4 * v73);
              if (v74)
              {
                v75 = v55 + 4 * v56;
                v76 = 1;
                while (1)
                {
                  v77 = (v74 - 1);
                  if (*(_QWORD *)(v75 + 16 * v77) == v9)
                    break;
                  v73 = (v73 + v76) & v72;
                  v74 = *(_DWORD *)(v55 + 4 * v73);
                  ++v76;
                  if (!v74)
                    goto LABEL_93;
                }
                a6 = *(unsigned int *)(v75 + 16 * v77 + 8) | ((unint64_t)*(unsigned __int8 *)(v75 + 16 * v77 + 12) << 32);
LABEL_72:
                if ((_DWORD)a6 != -1)
                {
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v69 = a6 << 32;
                  }
                  else
                  {
                    v13 = *(_QWORD *)(a1 + 8) - 8;
                    v69 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v13 + (v69 >> 29));
                  if ((a4 & 0xFFFE000000000002) != 0)
                    goto LABEL_78;
                  v70 = *(unsigned __int8 *)(a4 + 5);
                  if (v70 != 5)
                  {
                    if (v70 != 6)
                    {
LABEL_78:
                      *(_QWORD *)v8 = a4;
                      *(_QWORD *)(v8 + 32) = a1;
                      *(_DWORD *)(v8 + 16) = HIDWORD(a6);
                      *(_DWORD *)(v8 + 20) = a6;
                      v71 = 1;
                      *(_WORD *)(v8 + 48) = 257;
LABEL_79:
                      v11 = (uint64_t)v194;
                      goto LABEL_102;
                    }
                    v91 = *(_DWORD *)(v52 + 16) & 3;
                    v93 = *(_QWORD *)(a4 + 8);
                    v92 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      *(_QWORD *)v8 = v93;
                      *(_QWORD *)(v8 + 8) = v92;
                      *(_DWORD *)(v8 + 16) = HIDWORD(a6);
                      *(_QWORD *)(v8 + 32) = a1;
                      v71 = 1;
                      *(_BYTE *)(v8 + 49) = 3;
                      if (v91 != 2)
                        *(_BYTE *)(v8 + 48) = 1;
                      goto LABEL_79;
                    }
                    v95 = *(_QWORD *)(a4 + 24);
                    v94 = *(_QWORD *)(a4 + 32);
                    *(_QWORD *)v8 = v93;
                    *(_QWORD *)(v8 + 8) = v92;
                    *(_DWORD *)(v8 + 16) = HIDWORD(a6);
                    *(_QWORD *)(v8 + 32) = a1;
                    *(_BYTE *)(v8 + 49) = 3;
                    v11 = (uint64_t)v194;
                    v71 = 1;
                    if (v91 != 2)
                      *(_BYTE *)(v8 + 48) = 1;
                    *(_BYTE *)(v8 + 51) = 1;
                    *(_QWORD *)(v8 + 72) = v95;
                    *(_QWORD *)(v8 + 80) = v94;
LABEL_102:
                    if (*(_DWORD *)(v11 + 80))
                    {
                      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      if (((hasExceptionsAfterHandlingTraps | v71) & 1) != 0)
                      {
                        v47 = !hasExceptionsAfterHandlingTraps;
                        goto LABEL_43;
                      }
                    }
                    else if ((v71 & 1) != 0)
                    {
                      goto LABEL_42;
                    }
                    if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2776) != v9)
                    {
LABEL_105:
                      v47 = 0;
                      goto LABEL_43;
                    }
                    WTF::String::isolatedCopy((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 112), (uint64_t *)&v196);
                    v126 = v196;
                    if (!v196 || !*((_DWORD *)v196 + 1))
                    {
                      WTF::String::String((int **)&v198, *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)), *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 8));
                      v128 = v198;
                      v198 = 0;
                      v196 = v128;
                      if (v126)
                      {
                        if (*(_DWORD *)v126 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v126, v127, v120, v121, v122, v123, v124, v125);
                          WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
                          v161 = v198;
                          v198 = 0;
                          if (v161)
                          {
                            if (*(_DWORD *)v161 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v161, v160, v120, v121, v122, v123, v124, v125);
                              WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
                            }
                            else
                            {
                              *(_DWORD *)v161 -= 2;
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)v126 -= 2;
                        }
                      }
                    }
                    *(_QWORD *)v8 = JSC::jsString(v11, (JSC::VM *)&v196, v120, v121, v122, v123, v124, v125);
                    *(_DWORD *)(v8 + 16) = 4;
                    *(_QWORD *)(v8 + 32) = a1;
                    *(_BYTE *)(v8 + 49) = 1;
                    v129 = v196;
                    v196 = 0;
                    if (v129)
                    {
                      if (*(_DWORD *)v129 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v129, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
                      }
                      else
                      {
                        *(_DWORD *)v129 -= 2;
                      }
                    }
LABEL_42:
                    v47 = 1;
                    goto LABEL_43;
                  }
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, v11, v8, a4, SHIDWORD(a6), a6);
LABEL_126:
                  v71 = 1;
                  goto LABEL_79;
                }
              }
            }
          }
        }
      }
    }
LABEL_93:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, (JSC::VM *)v11, v9, v8) & 1) != 0)
    {
      goto LABEL_126;
    }
    v78 = *(_DWORD *)(v9 + 16);
    if ((v78 & 0x20) != 0)
    {
      v71 = 0;
      goto LABEL_79;
    }
    v79 = *(_BYTE **)(v9 + 8);
    v80 = *(unsigned int *)(v9 + 4);
    v11 = (uint64_t)v194;
    if ((v78 & 4) != 0)
    {
      if (!(_DWORD)v80 || (v186 = *v79 - 48, v186 > 9) || v80 >= 2 && *v79 == 48)
      {
LABEL_181:
        v82 = 0;
        v187 = 0;
        v188 = 0;
      }
      else
      {
        v189 = v79 + 1;
        v190 = v80 - 1;
        while (v190)
        {
          if (v186 > 0x19999999)
            goto LABEL_181;
          v191 = *v189 - 48;
          if (v191 > 9)
            goto LABEL_181;
          v82 = 0;
          v187 = 0;
          v188 = 0;
          v89 = __CFADD__(v191, 10 * v186);
          v186 = v191 + 10 * v186;
          ++v189;
          --v190;
          if (v89)
            goto LABEL_182;
        }
        v82 = 0x100000000;
        if (v186 == -1)
        {
          v82 = 0;
          v187 = 0;
        }
        else
        {
          v187 = v186;
        }
        if (v186 == -1)
          v188 = 0;
        else
          v188 = v186 & 0xFFFFFF00;
      }
LABEL_182:
      a3 = (WTF::StringImpl *)(v188 | v187);
      v11 = (uint64_t)v194;
    }
    else
    {
      if (!(_DWORD)v80
        || (v81 = *(unsigned __int16 *)v79 - 48, v81 > 9)
        || (*(_WORD *)v79 == 48 ? (v85 = v80 > 1) : (v85 = 0), v85))
      {
LABEL_98:
        v82 = 0;
        v83 = 0;
        v84 = 0;
      }
      else
      {
        v86 = (unsigned __int16 *)(v79 + 2);
        v87 = v80 - 1;
        while (v87)
        {
          if (v81 > 0x19999999)
            goto LABEL_98;
          v88 = *v86 - 48;
          if (v88 > 9)
            goto LABEL_98;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v89 = __CFADD__(v88, 10 * v81);
          v81 = v88 + 10 * v81;
          ++v86;
          --v87;
          if (v89)
            goto LABEL_99;
        }
        v82 = 0x100000000;
        if (v81 == -1)
        {
          v82 = 0;
          v83 = 0;
        }
        else
        {
          v83 = v81;
        }
        if (v81 == -1)
          v84 = 0;
        else
          v84 = v81 & 0xFFFFFF00;
      }
LABEL_99:
      a3 = (WTF::StringImpl *)(v84 | v83);
    }
    if ((v82 & 0x100000000) == 0)
    {
LABEL_101:
      v71 = 0;
      goto LABEL_102;
    }
    OwnStaticPropertySlot = JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, a3, v8, a5, a6, a7, a8);
LABEL_124:
    v71 = OwnStaticPropertySlot;
    goto LABEL_102;
  }
  while (1)
  {
    v15 = (unsigned int (*)(JSC::VM **, uint64_t, OpaqueJSString *))*((_QWORD *)v14 + 5);
    if (v15)
    {
      if (!v195)
      {
        *(_DWORD *)v9 += 2;
        v198 = (WTF::StringImpl *)v9;
        OpaqueJSString::tryCreate((uint64_t *)&v198, (uint64_t *)&v196);
        WTF::RefPtr<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::operator=((unint64_t *)&v195, (unint64_t *)&v196, v130, v131, v132, v133, v134, v135);
        if (v196)
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v196, v136, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v198)
        {
          if (*(_DWORD *)v198 == 2)
          {
            WTF::StringImpl::~StringImpl(v198, (WTF::AtomStringImpl *)v136, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
          }
          else
          {
            *(_DWORD *)v198 -= 2;
          }
        }
      }
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v15(a2, a1, v195))
      {
        *(_QWORD *)v8 = JSC::callbackGetterJSNonFinalObjectCallbackObject;
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 6;
        *(_QWORD *)(v8 + 32) = a1;
        *(_BYTE *)(v8 + 49) = 3;
        JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, v105, v106, v107, v108, v109, v110, v111);
        goto LABEL_42;
      }
      JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, v105, v106, v107, v108, v109, v110, v111);
      goto LABEL_5;
    }
    v16 = (uint64_t (*)(JSC::VM **, uint64_t, OpaqueJSString *, WTF::StringImpl **))*((_QWORD *)v14 + 6);
    if (!v16)
      goto LABEL_5;
    if (!v195)
    {
      *(_DWORD *)v9 += 2;
      v198 = (WTF::StringImpl *)v9;
      OpaqueJSString::tryCreate((uint64_t *)&v198, (uint64_t *)&v196);
      WTF::RefPtr<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::operator=((unint64_t *)&v195, (unint64_t *)&v196, v137, v138, v139, v140, v141, v142);
      if (v196)
        WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v196, v143, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v198)
      {
        if (*(_DWORD *)v198 == 2)
        {
          WTF::StringImpl::~StringImpl(v198, (WTF::AtomStringImpl *)v143, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
        }
        else
        {
          *(_DWORD *)v198 -= 2;
        }
      }
    }
    v198 = 0;
    JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
    v112 = v16(a2, a1, v195, &v198);
    JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, v113, v114, v115, v116, v117, v118, v119);
    a3 = v198;
    if (v198)
      break;
    if (v112)
      goto LABEL_177;
LABEL_5:
    OpaqueJSClass::contextData(v14, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v18 = *(uint64_t **)(v17 + 8);
    if (v18)
    {
      v64 = *v18;
      if (*v18)
      {
        v65 = *(_DWORD *)(v64 - 8);
        v66 = *(_DWORD *)(v9 + 16);
        if (v66 < 0x100)
          v31 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
        else
          v31 = v66 >> 8;
        for (i = 0; ; v31 = i + v28)
        {
          v28 = v31 & v65;
          v29 = *(WTF **)(v64 + 16 * (v31 & v65));
          if (!v29)
            break;
          if (v29 != (WTF *)-1 && WTF::equal(v29, (const WTF::StringImpl *)v9, a3))
          {
            v67 = *(OpaqueJSClass **)(*(_QWORD *)v13 + 8);
            if (v67)
            {
              v192 = a2[7];
              do
              {
                v193 = v67;
                OpaqueJSClass::contextData(v67, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v33 = *(uint64_t **)(v32 + 8);
                if (v33)
                {
                  v34 = *v33;
                  if (*v33)
                  {
                    v35 = *(_DWORD *)(v34 - 8);
                    v36 = *(_DWORD *)(v9 + 16);
                    if (v36 < 0x100)
                      v37 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
                    else
                      v37 = v36 >> 8;
                    for (j = 0; ; v37 = j + v39)
                    {
                      v39 = v37 & v35;
                      v40 = *(WTF **)(v34 + 16 * v39);
                      if (!v40)
                        break;
                      if (v40 != (WTF *)-1 && WTF::equal(v40, (const WTF::StringImpl *)v9, a3))
                      {
                        v41 = *(_QWORD *)(v34 + 16 * v39 + 8);
                        if (!v41)
                          break;
                        v42 = *(uint64_t (**)(JSC::VM **, uint64_t, _QWORD, WTF::StringImpl **))v41;
                        if (!*(_QWORD *)v41)
                          break;
                        v198 = 0;
                        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v196, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
                        v43 = v42(a2, a1, *(_QWORD *)(v41 + 24), &v198);
                        if (v197)
                        {
                          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v197 + 112), (uint64_t)&v196, v196, a4, a5, a6, a7, a8);
                          v45 = (unsigned int *)v197;
                          v197 = 0;
                          if (v45)
                            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v45, (uint64_t)a2, v44, a4, a5, a6, a7, a8);
                        }
                        a3 = v198;
                        v46 = v194;
                        if (v198)
                        {
                          JSC::VM::throwException(v192, (JSC::JSGlobalObject *)a2, (unint64_t)v198, a4, a5, a6, a7, a8);
                          v43 = 10;
                        }
                        else if (!v43)
                        {
                          break;
                        }
                        goto LABEL_37;
                      }
                      ++j;
                    }
                  }
                }
                v67 = (OpaqueJSClass *)*((_QWORD *)v193 + 1);
              }
              while (v67);
            }
            v43 = 0;
            v46 = v194;
LABEL_37:
            if (*((_DWORD *)v46 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v194, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_105;
            }
            if (!v43)
              break;
            *(_QWORD *)v8 = v43;
            goto LABEL_40;
          }
          ++i;
        }
      }
    }
    OpaqueJSClass::contextData(v14, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v20 = *(uint64_t **)(v19 + 16);
    if (v20)
    {
      v21 = *v20;
      if (*v20)
      {
        v22 = *(_DWORD *)(v21 - 8);
        v23 = *(_DWORD *)(v9 + 16);
        if (v23 < 0x100)
          v24 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
        else
          v24 = v23 >> 8;
        for (k = 0; ; v24 = k + v26)
        {
          v26 = v24 & v22;
          v27 = *(WTF **)(v21 + 16 * (v24 & v22));
          if (!v27)
            break;
          if (v27 != (WTF *)-1 && WTF::equal(v27, (const WTF::StringImpl *)v9, a3))
          {
            *(_QWORD *)v8 = JSC::staticFunctionGetterJSNonFinalObjectCallbackObject;
            *(_QWORD *)(v8 + 8) = 0;
            *(_DWORD *)(v8 + 16) = 6;
            *(_QWORD *)(v8 + 32) = a1;
            *(_BYTE *)(v8 + 49) = 3;
            goto LABEL_42;
          }
          ++k;
        }
      }
    }
    v14 = (OpaqueJSClass *)*((_QWORD *)v14 + 1);
    if (!v14)
    {
      v11 = (uint64_t)a2[7];
      goto LABEL_48;
    }
  }
  JSC::VM::throwException(v194, (JSC::JSGlobalObject *)a2, (unint64_t)v198, a4, a5, a6, a7, a8);
  v112 = 10;
LABEL_177:
  *(_QWORD *)v8 = v112;
LABEL_40:
  *(_DWORD *)(v8 + 16) = 6;
  *(_QWORD *)(v8 + 32) = a1;
  v47 = 1;
  *(_BYTE *)(v8 + 49) = 1;
LABEL_43:
  v48 = (unsigned int *)v195;
  v195 = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
  }
  return v47;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::getOwnPropertySlotByIndex(_DWORD *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v11 = *(uint64_t (**)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x68);
  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v30);
  v19 = v11(a1, a2, v30, a4);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

void JSC::JSCallbackObject<JSC::JSNonFinalObject>::getOwnSpecialPropertyNames(uint64_t a1, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OpaqueJSClass *v8;
  int v9;
  const WTF::StringImpl *v10;
  uint64_t *v11;
  void (*v12)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *);
  JSC::VM *v13;
  uint64_t v14;
  unsigned int *v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  const WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  int v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  _QWORD **v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t j;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  WTF::StringImpl *v197;
  const WTF::StringImpl *v198;
  int v199;
  uint64_t v200;
  int v201;
  WTF::StringImpl **v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  int v209;
  WTF::StringImpl *v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  _QWORD *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  OpaqueJSClass *v263;
  WTF::StringImpl *v265;
  _QWORD *v266;
  unint64_t StatusReg;
  uint64_t **v268;
  int v269;
  _QWORD *v270;
  WTF::StringImpl *v271;
  uint64_t *v272;
  _QWORD *v273;
  const WTF::StringImpl *v274;
  WTF *v275;
  WTF *v276;
  WTF::StringImpl *v277;
  uint64_t v278;

  v8 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 16) + 8);
  if (v8)
  {
    v9 = a4;
    v10 = a3;
    v268 = (uint64_t **)(*((_QWORD *)a2 + 7) + 41912);
    v11 = (uint64_t *)((char *)a3 + 8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v269 = a4;
    v274 = a3;
    while (1)
    {
      v12 = (void (*)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *))*((_QWORD *)v8 + 9);
      if (v12)
      {
        v13 = a2 ? (JSC::VM *)*((_QWORD *)a2 + 7) : 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v277, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        v12(a2, a1, v10);
        if (v278)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v278 + 112), (uint64_t)&v277, v277, a4, a5, a6, a7, a8);
          v15 = (unsigned int *)v278;
          v278 = 0;
          if (v15)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v15, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v263 = v8;
      OpaqueJSClass::contextData(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v24 = *(_QWORD ***)(v23 + 8);
      if (!v24)
        goto LABEL_142;
      v25 = *v24;
      if (!*v24)
        break;
      v26 = *((unsigned int *)v25 - 1);
      v27 = &v25[2 * v26];
      if (!*((_DWORD *)v25 - 3))
      {
        v261 = &v25[2 * v26];
        goto LABEL_291;
      }
      if ((_DWORD)v26)
      {
        v28 = 16 * v26;
        do
        {
          if ((unint64_t)(*v25 + 1) > 1)
            goto LABEL_17;
          v25 += 2;
          v28 -= 16;
        }
        while (v28);
        v25 = v27;
      }
LABEL_17:
      v29 = v27;
LABEL_18:
      if (v27 != v25)
      {
        v270 = v27;
        do
        {
          v30 = v25[1];
          if (!*(_QWORD *)v30)
            goto LABEL_115;
          v31 = (WTF::StringImpl *)*v25;
          if (v9)
          {
            if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              goto LABEL_115;
          }
          if (v31)
          {
            v32 = *(_DWORD *)v31;
            *(_DWORD *)v31 += 2;
            if ((*((_BYTE *)v31 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v31 = v32 + 4;
              v33 = v31;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*v268, (unint64_t)v31, v17, v18, v19, v20, v21, v22, &v277);
              v33 = v277;
            }
          }
          else
          {
            v33 = 0;
          }
          v34 = *(_DWORD *)v33;
          *(_DWORD *)v33 += 2;
          v275 = v33;
          if (v34)
          {
            *(_DWORD *)v33 = v34;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v33, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
            WTF::fastFree((unint64_t)v275, v97, v98, v99, v100, v101, v102, v103);
            v33 = v275;
          }
          if ((*((_BYTE *)v33 + 16) & 0x20) != 0)
          {
            if ((*((_BYTE *)v10 + 24) & 1) == 0 || *((_BYTE *)v10 + 25) && (*((_BYTE *)v33 + 36) & 4) != 0)
              goto LABEL_110;
          }
          else if ((*((_BYTE *)v10 + 24) & 2) == 0)
          {
            goto LABEL_110;
          }
          v35 = *(_QWORD *)v10;
          v36 = *(unsigned int *)(*(_QWORD *)v10 + 20);
          if (v36 > 0x13)
          {
            v37 = *v11;
            if (*v11 && *(_DWORD *)(v37 - 12))
              goto LABEL_75;
            v265 = v31;
            v38 = *(uint64_t **)(v35 + 8);
            v39 = &v38[v36];
            v272 = v39;
            while (1)
            {
              v40 = *v38;
              v41 = *v11;
              if (*v11)
                goto LABEL_36;
              v71 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22);
              v39 = v272;
              v33 = v275;
              *v11 = v71 + 16;
              *(_DWORD *)(v71 + 12) = 8;
              *(_DWORD *)(*v11 - 8) = 7;
              *(_DWORD *)(*v11 - 16) = 0;
              *(_DWORD *)(*v11 - 12) = 0;
              v41 = *v11;
              if (*v11)
LABEL_36:
                v42 = *(_DWORD *)(v41 - 8);
              else
                v42 = 0;
              v43 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
              v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
              v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
              v46 = v42 & ((v45 >> 31) ^ v45);
              v47 = (_QWORD *)(v41 + 8 * v46);
              v48 = *v47;
              if (*v47)
              {
                v49 = 0;
                v50 = 1;
                do
                {
                  if (v48 == v40)
                    goto LABEL_53;
                  if (v48 == -1)
                    v49 = v47;
                  v46 = (v46 + v50) & v42;
                  v47 = (_QWORD *)(v41 + 8 * v46);
                  v48 = *v47;
                  ++v50;
                }
                while (*v47);
                if (v49)
                {
                  *v49 = 0;
                  --*(_DWORD *)(*v11 - 16);
                  v47 = v49;
                }
              }
              *v47 = v40;
              v51 = *v11;
              if (*v11)
                v52 = *(_DWORD *)(v51 - 12) + 1;
              else
                v52 = 1;
              *(_DWORD *)(v51 - 12) = v52;
              v53 = *v11;
              if (*v11)
                v54 = *(_DWORD *)(v53 - 12);
              else
                v54 = 0;
              v55 = (*(_DWORD *)(v53 - 16) + v54);
              v56 = *(unsigned int *)(v53 - 4);
              if (v56 > 0x400)
              {
                if (v56 <= 2 * v55)
                  goto LABEL_73;
              }
              else if (3 * v56 <= 4 * v55)
              {
                if ((_DWORD)v56)
                {
LABEL_73:
                  v57 = *(_DWORD *)(v53 - 12);
                  v58 = (_DWORD)v56 << (6 * v57 >= (2 * v56));
                }
                else
                {
                  v57 = *(_DWORD *)(v53 - 12);
                  v58 = 8;
                }
                v59 = WTF::fastZeroedMalloc(8 * v58 + 16, (unint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                *v11 = v59 + 16;
                *(_DWORD *)(v59 + 12) = v58;
                *(_DWORD *)(*v11 - 8) = v58 - 1;
                *(_DWORD *)(*v11 - 16) = 0;
                *(_DWORD *)(*v11 - 12) = v57;
                v10 = v274;
                v33 = v275;
                v27 = v270;
                v39 = v272;
                if (!(_DWORD)v56)
                  goto LABEL_69;
                for (i = 0; i != v56; ++i)
                {
                  v61 = *(_QWORD *)(v53 + 8 * i);
                  if ((unint64_t)(v61 + 1) >= 2)
                  {
                    v62 = *v11;
                    if (*v11)
                      v63 = *(_DWORD *)(v62 - 8);
                    else
                      v63 = 0;
                    v64 = (~(v61 << 32) + v61) ^ ((unint64_t)(~(v61 << 32) + v61) >> 22);
                    v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
                    v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
                    v67 = v63 & ((v66 >> 31) ^ v66);
                    v68 = 1;
                    do
                    {
                      v69 = v67;
                      v70 = *(_QWORD *)(v62 + 8 * v67);
                      v67 = (v67 + v68++) & v63;
                    }
                    while (v70);
                    *(_QWORD *)(v62 + 8 * v69) = v61;
                  }
                }
                if (v53)
                {
LABEL_69:
                  WTF::fastFree(v53 - 16, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                  v39 = v272;
                  v33 = v275;
                }
              }
LABEL_53:
              if (++v38 == v39)
              {
                v37 = *v11;
                v9 = v269;
                v31 = v265;
                if (!*v11)
                {
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, 8uLL, 0, v18, v19, v20, v21, v22);
                  v33 = v275;
                  v37 = *v11;
                  if (!*v11)
                  {
                    v72 = 0;
LABEL_76:
                    v73 = ((unint64_t)v33 + ~((_QWORD)v33 << 32)) ^ (((unint64_t)v33 + ~((_QWORD)v33 << 32)) >> 22);
                    v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
                    v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
                    v76 = v72 & ((v75 >> 31) ^ v75);
                    v17 = (const WTF::StringImpl *)(v37 + 8 * v76);
                    v77 = *(WTF::StringImpl **)v17;
                    if (*(_QWORD *)v17)
                    {
                      v78 = 0;
                      v79 = 1;
                      do
                      {
                        if (v77 == v33)
                          goto LABEL_91;
                        if (v77 == (WTF::StringImpl *)-1)
                          v78 = v17;
                        v76 = (v76 + v79) & v72;
                        v17 = (const WTF::StringImpl *)(v37 + 8 * v76);
                        v77 = *(WTF::StringImpl **)v17;
                        ++v79;
                      }
                      while (*(_QWORD *)v17);
                      if (v78)
                      {
                        *(_QWORD *)v78 = 0;
                        --*(_DWORD *)(*v11 - 16);
                        v17 = v78;
                      }
                    }
                    *(_QWORD *)v17 = v33;
                    v80 = *v11;
                    if (*v11)
                      v81 = *(_DWORD *)(v80 - 12) + 1;
                    else
                      v81 = 1;
                    *(_DWORD *)(v80 - 12) = v81;
                    v83 = *v11;
                    if (*v11)
                      v84 = *(_DWORD *)(v83 - 12);
                    else
                      v84 = 0;
                    v85 = (*(_DWORD *)(v83 - 16) + v84);
                    v86 = *(unsigned int *)(v83 - 4);
                    if (v86 > 0x400)
                    {
                      if (v86 > 2 * v85)
                        goto LABEL_99;
                    }
                    else
                    {
                      if (3 * v86 > 4 * v85)
                        goto LABEL_99;
                      if (!(_DWORD)v86)
                      {
                        v136 = 8;
                        goto LABEL_134;
                      }
                    }
                    v136 = ((_DWORD)v86 << (6 * *(_DWORD *)(v83 - 12) >= (2 * v86)));
LABEL_134:
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, v136, (uint64_t)v17, v18, v19, v20, v21, v22);
                    v33 = v275;
                    goto LABEL_99;
                  }
                }
LABEL_75:
                v72 = *(_DWORD *)(v37 - 8);
                goto LABEL_76;
              }
            }
          }
          if ((_DWORD)v36)
          {
            v82 = *(WTF::StringImpl ***)(v35 + 8);
            while (*v82 != v33)
            {
              ++v82;
              if (!--v36)
                goto LABEL_99;
            }
LABEL_91:
            if (!v33)
              goto LABEL_112;
          }
          else
          {
LABEL_99:
            v87 = v31;
            v88 = *(_QWORD *)v10;
            v89 = *((_DWORD *)v33 + 4);
            if ((v89 & 0x20) != 0)
            {
              *(_DWORD *)v33 += 2;
              v90 = v33;
            }
            else
            {
              if ((v89 & 0x10) != 0)
              {
                *(_DWORD *)v33 += 2;
                v90 = v33;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v10 + 2) + 41912), (unint64_t)v275, v17, v18, v19, v20, v21, v22, &v277);
                v33 = v275;
                v90 = v277;
              }
              v91 = *(_DWORD *)v90;
              *(_DWORD *)v90 += 2;
              if (v91)
              {
                *(_DWORD *)v90 = v91;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v90, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
                v33 = v275;
              }
            }
            v92 = (uint64_t *)(v88 + 8);
            v277 = v90;
            v93 = *(unsigned int *)(v88 + 20);
            if ((_DWORD)v93 == *(_DWORD *)(v88 + 16))
            {
              v137 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v277);
              v33 = v275;
              v93 = *(unsigned int *)(v88 + 20);
              v138 = *(_QWORD *)(v88 + 8);
              v139 = *v137;
              *v137 = 0;
              *(_QWORD *)(v138 + 8 * v93) = v139;
            }
            else
            {
              v94 = *v92;
              v277 = 0;
              *(_QWORD *)(v94 + 8 * v93) = v90;
            }
            *(_DWORD *)(v88 + 20) = v93 + 1;
            v95 = v277;
            v277 = 0;
            v31 = v87;
            if (v95)
            {
              if (*(_DWORD *)v95 == 2)
              {
                WTF::StringImpl::~StringImpl(v95, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
                v33 = v275;
              }
              else
              {
                *(_DWORD *)v95 -= 2;
              }
            }
          }
LABEL_110:
          if (*(_DWORD *)v33 != 2)
          {
            *(_DWORD *)v33 -= 2;
LABEL_112:
            if (v31)
              goto LABEL_113;
            goto LABEL_115;
          }
          v112 = (unint64_t)v33;
          WTF::StringImpl::~StringImpl(v33, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
          WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
          if (v31)
          {
LABEL_113:
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
LABEL_115:
          v96 = v25 + 2;
          v25 = v29;
          if (v96 != v29)
          {
            v25 = v96;
            do
            {
              if ((unint64_t)(*v25 + 1) > 1)
                goto LABEL_120;
              v25 += 2;
            }
            while (v25 != v29);
            v25 = v29;
          }
LABEL_120:
          ;
        }
        while (v25 != v27);
      }
LABEL_142:
      OpaqueJSClass::contextData(v263, a2, (uint64_t)v17, v18, v19, v20, v21, v22);
      v142 = *(_QWORD ***)(v141 + 16);
      if (!v142)
        goto LABEL_286;
      v143 = *v142;
      if (*v142)
      {
        v144 = *((unsigned int *)v143 - 1);
        v145 = &v143[2 * v144];
        if (*((_DWORD *)v143 - 3))
        {
          if ((_DWORD)v144)
          {
            v146 = 16 * v144;
            do
            {
              if ((unint64_t)(*v143 + 1) > 1)
                goto LABEL_150;
              v143 += 2;
              v146 -= 16;
            }
            while (v146);
            v143 = v145;
          }
LABEL_150:
          v147 = v145;
          goto LABEL_151;
        }
        v260 = &v143[2 * v144];
      }
      else
      {
        v145 = 0;
        v260 = 0;
        v144 = 0;
      }
      v147 = &v143[2 * v144];
      v143 = v260;
LABEL_151:
      if (v145 == v143)
        goto LABEL_286;
      v273 = v147;
      v266 = v145;
      do
      {
        v148 = (WTF::StringImpl *)*v143;
        if (v9 && (*(_BYTE *)(v143[1] + 8) & 4) != 0)
          goto LABEL_259;
        if (v148)
        {
          v149 = *(_DWORD *)v148;
          *(_DWORD *)v148 += 2;
          if ((*((_BYTE *)v148 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v148 = v149 + 4;
            v150 = v148;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*v268, (unint64_t)v148, a3, a4, a5, a6, a7, a8, &v277);
            v150 = v277;
          }
        }
        else
        {
          v150 = 0;
        }
        v151 = *(_DWORD *)v150;
        *(_DWORD *)v150 += 2;
        v276 = v150;
        if (v151)
        {
          *(_DWORD *)v150 = v151;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v150, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v276, v217, v218, v219, v220, v221, v222, v223);
          v150 = v276;
        }
        if ((*((_BYTE *)v150 + 16) & 0x20) != 0)
        {
          if ((*((_BYTE *)v10 + 24) & 1) == 0 || *((_BYTE *)v10 + 25) && (*((_BYTE *)v150 + 36) & 4) != 0)
            goto LABEL_254;
        }
        else if ((*((_BYTE *)v10 + 24) & 2) == 0)
        {
          goto LABEL_254;
        }
        v152 = *(_QWORD *)v10;
        v153 = *(unsigned int *)(*(_QWORD *)v10 + 20);
        if (v153 <= 0x13)
        {
          if ((_DWORD)v153)
          {
            v202 = *(WTF::StringImpl ***)(v152 + 8);
            do
            {
              if (*v202 == v150)
                goto LABEL_235;
              ++v202;
              --v153;
            }
            while (v153);
          }
          goto LABEL_243;
        }
        v154 = *v11;
        if (*v11 && *(_DWORD *)(v154 - 12))
        {
LABEL_219:
          v192 = *(_DWORD *)(v154 - 8);
          goto LABEL_220;
        }
        v271 = v148;
        v155 = *(uint64_t **)(v152 + 8);
        v156 = &v155[v153];
        do
        {
          v157 = *v155;
          v158 = *v11;
          if (*v11)
            goto LABEL_168;
          v191 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          v150 = v276;
          *v11 = v191 + 16;
          *(_DWORD *)(v191 + 12) = 8;
          *(_DWORD *)(*v11 - 8) = 7;
          *(_DWORD *)(*v11 - 16) = 0;
          *(_DWORD *)(*v11 - 12) = 0;
          v158 = *v11;
          if (*v11)
LABEL_168:
            v159 = *(_DWORD *)(v158 - 8);
          else
            v159 = 0;
          v160 = (~(v157 << 32) + v157) ^ ((unint64_t)(~(v157 << 32) + v157) >> 22);
          v161 = 9 * ((v160 + ~(v160 << 13)) ^ ((v160 + ~(v160 << 13)) >> 8));
          v162 = (v161 ^ (v161 >> 15)) + ~((v161 ^ (v161 >> 15)) << 27);
          v163 = v159 & ((v162 >> 31) ^ v162);
          v164 = (_QWORD *)(v158 + 8 * v163);
          v165 = *v164;
          if (*v164)
          {
            v166 = 0;
            v167 = 1;
            while (v165 != v157)
            {
              if (v165 == -1)
                v166 = v164;
              v163 = (v163 + v167) & v159;
              v164 = (_QWORD *)(v158 + 8 * v163);
              v165 = *v164;
              ++v167;
              if (!*v164)
              {
                if (v166)
                {
                  *v166 = 0;
                  --*(_DWORD *)(*v11 - 16);
                  v164 = v166;
                }
                goto LABEL_177;
              }
            }
            goto LABEL_185;
          }
LABEL_177:
          *v164 = v157;
          v168 = *v11;
          if (*v11)
            v169 = *(_DWORD *)(v168 - 12) + 1;
          else
            v169 = 1;
          *(_DWORD *)(v168 - 12) = v169;
          v170 = *v11;
          if (*v11)
            v171 = *(_DWORD *)(v170 - 12);
          else
            v171 = 0;
          v172 = v170 - 16;
          v173 = (*(_DWORD *)(v170 - 16) + v171);
          v174 = *(unsigned int *)(v170 - 4);
          if (v174 > 0x400)
          {
            if (v174 > 2 * v173)
              goto LABEL_185;
LABEL_210:
            v175 = *(_DWORD *)(v170 - 12);
            v176 = (_DWORD)v174 << (6 * v175 >= (2 * v174));
            goto LABEL_189;
          }
          if (3 * v174 > 4 * v173)
            goto LABEL_185;
          if ((_DWORD)v174)
            goto LABEL_210;
          v175 = *(_DWORD *)(v170 - 12);
          v176 = 8;
LABEL_189:
          v177 = WTF::fastZeroedMalloc(8 * v176 + 16, (unint64_t)v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          *v11 = v177 + 16;
          *(_DWORD *)(v177 + 12) = v176;
          *(_DWORD *)(*v11 - 8) = v176 - 1;
          *(_DWORD *)(*v11 - 16) = 0;
          *(_DWORD *)(*v11 - 12) = v175;
          v147 = v273;
          v10 = v274;
          v150 = v276;
          if (!(_DWORD)v174)
            goto LABEL_201;
          for (j = 0; j != v174; ++j)
          {
            v179 = *(_QWORD *)(v170 + 8 * j);
            if ((unint64_t)(v179 + 1) >= 2)
            {
              v180 = *v11;
              if (*v11)
                v181 = *(_DWORD *)(v180 - 8);
              else
                v181 = 0;
              v182 = (~(v179 << 32) + v179) ^ ((unint64_t)(~(v179 << 32) + v179) >> 22);
              v183 = 9 * ((v182 + ~(v182 << 13)) ^ ((v182 + ~(v182 << 13)) >> 8));
              v184 = (v183 ^ (v183 >> 15)) + ~((v183 ^ (v183 >> 15)) << 27);
              v185 = v181 & ((v184 >> 31) ^ v184);
              v186 = 1;
              do
              {
                v187 = v185;
                v188 = *(_QWORD *)(v180 + 8 * v185);
                v185 = (v185 + v186++) & v181;
              }
              while (v188);
              *(_QWORD *)(v180 + 8 * v187) = v179;
            }
          }
          if (v170)
          {
LABEL_201:
            v189 = *(_QWORD *)(StatusReg + 752);
            if (v189)
            {
              if (v172 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v170 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v170 - 16) >> 24)) & 1) == 0)
              {
                if (v172 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v172 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((unint64_t)(v170 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((((v170 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_204;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v189, v170 - 16, 1, a4, a5, a6, a7, a8);
              }
              else
              {
LABEL_204:
                v190 = *(unsigned int *)(v189 + 8000);
                if (v190 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v189, v170 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v189 + 8 * v190) = v172 | 0x5000000000000;
                  *(_DWORD *)(v189 + 8000) = v190 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v170 - 16, (uint64_t)&bmalloc_heap_config, 1);
            }
            v150 = v276;
          }
LABEL_185:
          ++v155;
        }
        while (v155 != v156);
        v154 = *v11;
        v9 = v269;
        v145 = v266;
        v148 = v271;
        if (*v11)
          goto LABEL_219;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, 8uLL, 0, a4, a5, a6, a7, a8);
        v150 = v276;
        v154 = *v11;
        if (*v11)
          goto LABEL_219;
        v192 = 0;
LABEL_220:
        v193 = ((unint64_t)v150 + ~((_QWORD)v150 << 32)) ^ (((unint64_t)v150 + ~((_QWORD)v150 << 32)) >> 22);
        v194 = 9 * ((v193 + ~(v193 << 13)) ^ ((v193 + ~(v193 << 13)) >> 8));
        v195 = (v194 ^ (v194 >> 15)) + ~((v194 ^ (v194 >> 15)) << 27);
        v196 = v192 & ((v195 >> 31) ^ v195);
        a3 = (const WTF::StringImpl *)(v154 + 8 * v196);
        v197 = *(WTF::StringImpl **)a3;
        if (!*(_QWORD *)a3)
        {
LABEL_228:
          *(_QWORD *)a3 = v150;
          v200 = *v11;
          if (*v11)
            v201 = *(_DWORD *)(v200 - 12) + 1;
          else
            v201 = 1;
          *(_DWORD *)(v200 - 12) = v201;
          v203 = *v11;
          if (*v11)
            v204 = *(_DWORD *)(v203 - 12);
          else
            v204 = 0;
          v205 = (*(_DWORD *)(v203 - 16) + v204);
          v206 = *(unsigned int *)(v203 - 4);
          if (v206 > 0x400)
          {
            if (v206 > 2 * v205)
              goto LABEL_243;
          }
          else
          {
            if (3 * v206 > 4 * v205)
            {
LABEL_243:
              v207 = v148;
              v208 = *(_QWORD *)v10;
              v209 = *((_DWORD *)v150 + 4);
              if ((v209 & 0x20) != 0)
              {
                *(_DWORD *)v150 += 2;
                v210 = v150;
              }
              else
              {
                if ((v209 & 0x10) != 0)
                {
                  *(_DWORD *)v150 += 2;
                  v210 = v150;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v10 + 2) + 41912), (unint64_t)v276, a3, a4, a5, a6, a7, a8, &v277);
                  v150 = v276;
                  v210 = v277;
                }
                v211 = *(_DWORD *)v210;
                *(_DWORD *)v210 += 2;
                if (v211)
                {
                  *(_DWORD *)v210 = v211;
                }
                else
                {
                  WTF::StringImpl::~StringImpl(v210, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
                  v150 = v276;
                }
              }
              v212 = (uint64_t *)(v208 + 8);
              v277 = v210;
              v213 = *(unsigned int *)(v208 + 20);
              if ((_DWORD)v213 == *(_DWORD *)(v208 + 16))
              {
                v257 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v212, v213 + 1, (unint64_t)&v277);
                v150 = v276;
                v213 = *(unsigned int *)(v208 + 20);
                v258 = *(_QWORD *)(v208 + 8);
                v259 = *v257;
                *v257 = 0;
                *(_QWORD *)(v258 + 8 * v213) = v259;
              }
              else
              {
                v214 = *v212;
                v277 = 0;
                *(_QWORD *)(v214 + 8 * v213) = v210;
              }
              *(_DWORD *)(v208 + 20) = v213 + 1;
              v215 = v277;
              v277 = 0;
              v148 = v207;
              if (v215)
              {
                if (*(_DWORD *)v215 == 2)
                {
                  WTF::StringImpl::~StringImpl(v215, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
                  v150 = v276;
                }
                else
                {
                  *(_DWORD *)v215 -= 2;
                }
              }
              goto LABEL_254;
            }
            if (!(_DWORD)v206)
            {
              v256 = 8;
              goto LABEL_278;
            }
          }
          v256 = ((_DWORD)v206 << (6 * *(_DWORD *)(v203 - 12) >= (2 * v206)));
LABEL_278:
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, v256, (uint64_t)a3, a4, a5, a6, a7, a8);
          v150 = v276;
          goto LABEL_243;
        }
        v198 = 0;
        v199 = 1;
        while (v197 != v150)
        {
          if (v197 == (WTF::StringImpl *)-1)
            v198 = a3;
          v196 = (v196 + v199) & v192;
          a3 = (const WTF::StringImpl *)(v154 + 8 * v196);
          v197 = *(WTF::StringImpl **)a3;
          ++v199;
          if (!*(_QWORD *)a3)
          {
            if (v198)
            {
              *(_QWORD *)v198 = 0;
              --*(_DWORD *)(*v11 - 16);
              a3 = v198;
            }
            goto LABEL_228;
          }
        }
LABEL_235:
        if (!v150)
        {
LABEL_256:
          if (v148)
            goto LABEL_257;
          goto LABEL_259;
        }
LABEL_254:
        if (*(_DWORD *)v150 != 2)
        {
          *(_DWORD *)v150 -= 2;
          goto LABEL_256;
        }
        v232 = (unint64_t)v150;
        WTF::StringImpl::~StringImpl(v150, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
        if (v148)
        {
LABEL_257:
          if (*(_DWORD *)v148 == 2)
          {
            WTF::StringImpl::~StringImpl(v148, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
          }
          else
          {
            *(_DWORD *)v148 -= 2;
          }
        }
LABEL_259:
        v216 = v143 + 2;
        v143 = v147;
        if (v216 != v147)
        {
          v143 = v216;
          while ((unint64_t)(*v143 + 1) <= 1)
          {
            v143 += 2;
            if (v143 == v147)
            {
              v143 = v147;
              break;
            }
          }
        }
      }
      while (v143 != v145);
LABEL_286:
      v8 = (OpaqueJSClass *)*((_QWORD *)v263 + 1);
      if (!v8)
        return;
    }
    v27 = 0;
    v261 = 0;
    v26 = 0;
LABEL_291:
    v29 = &v25[2 * v26];
    v25 = v261;
    goto LABEL_18;
  }
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::customHasInstance(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v12;
  uint64_t (*v13)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Exception *v25;
  uint64_t v27;
  uint64_t v28;
  JSC::Exception *v29;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (!v8)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v13 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v8 + 96);
    if (v13)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return 0;
  }
  v29 = 0;
  if (a2)
    v15 = v12;
  else
    v15 = 0;
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v27, v15, a3, a4, a5, a6, a7, a8);
  v14 = v13(a2, a1, a3, &v29);
  if (v28)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v28 + 112), (uint64_t)&v27, v27, v16, v17, v18, v19, v20);
    v24 = (unsigned int *)v28;
    v28 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v24, v22, v23, v16, v17, v18, v19, v20);
  }
  v25 = v29;
  if (v29)
  {
    if (((unint64_t)v29 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v29, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException(v12, a2, v25, v21, v16, v17, v18, v19, v20);
  }
  return v14;
}

void JSC::JSCallbackObject<JSC::JSGlobalObject>::destroy(WTF **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v9;
  _QWORD *v10;
  WTF *v11;
  WTF **v12;
  uint64_t i;
  void (*v14)(WTF **);
  WTF *v15;

  v9 = (WTF **)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a1 & 8) != 0)
    v9 = a1 - 2;
  v10 = (_QWORD *)((char *)*v9 + 41896);
  v11 = a1[413];
  *v10 = a1;
  v10[1] = v11;
  v12 = a1 + 412;
  for (i = *((_QWORD *)a1[412] + 1); i; i = *(_QWORD *)(i + 8))
  {
    v14 = *(void (**)(WTF **))(i + 32);
    if (v14)
      v14(a1);
  }
  *v10 = 0;
  v10[1] = 0;
  v15 = *v12;
  *v12 = 0;
  if (v15)
    std::default_delete<JSC::JSCallbackObjectData>::operator()[abi:sn180100]((int)v12, v15, a3, a4, a5, a6, a7, a8);
  JSC::JSGlobalObject::~JSGlobalObject((JSC::JSGlobalObject *)a1);
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::getCallData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 3296);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 80))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::callJSGlobalObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::getConstructData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 3296);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 88))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::constructJSGlobalObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::put(JSC::Exception *a1, JSC::VM **a2, JSC::Exception *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  OpaqueJSClass *v16;
  unsigned int *v17;
  uint64_t (*v18)(JSC::VM **, JSC::Exception *, unsigned int *, const JSC::PropertyTable *, JSC::Exception **);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unsigned int *v25;
  JSC::Exception *v26;
  char v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  WTF *v31;
  uint64_t (*v32)(JSC::VM **, JSC::Exception *, _QWORD, const JSC::PropertyTable *, JSC::Exception **);
  double v33;
  uint64_t v34;
  unsigned int *v35;
  JSC::Exception *v36;
  char v37;
  uint64_t v38;
  WTF **v39;
  WTF *v40;
  WTF *v42;
  __n128 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Exception *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Exception *v61[2];
  int v62;
  int v63;
  uint64_t v64;

  v11 = (unint64_t)a3;
  v14 = (uint64_t)a2[7];
  v15 = *(_QWORD *)(a5 + 8);
  if ((JSC::Exception *)v15 != a1
    && ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 32 || *(JSC::Exception **)(v15 + 16) != a1))
  {
    return JSC::JSGlobalObject::put((unint64_t)a1, (unint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
  if (a3)
  {
    v16 = *(OpaqueJSClass **)(*((_QWORD *)a1 + 412) + 8);
    if (v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = (uint64_t (*)(JSC::VM **, JSC::Exception *, unsigned int *, const JSC::PropertyTable *, JSC::Exception **))*((_QWORD *)v16 + 7);
        if (v18)
        {
          if (!v17)
          {
            *(_DWORD *)v11 += 2;
            v19 = WTF::fastMalloc((WTF *)0x18);
            v17 = (unsigned int *)v19;
            *(_DWORD *)v19 = 1;
            *(_QWORD *)(v19 + 8) = v11;
            if ((*(_BYTE *)(v11 + 16) & 4) != 0)
              v20 = 0;
            else
              v20 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v19 + 16) = v20;
          }
          v61[0] = 0;
          JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v49, a2[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v22 = v18(a2, a1, v17, a4, v61);
          if (v50)
          {
            JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v50 + 112), (uint64_t)&v49, v49, (uint64_t)a4, a5, a6, a7, a8);
            v25 = (unsigned int *)v50;
            v50 = 0;
            if (v25)
              WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v25, (uint64_t)v21, v24, (uint64_t)a4, a5, a6, a7, a8);
          }
          a3 = v61[0];
          if (v61[0])
          {
            if (((unint64_t)v61[0] & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v61[0] & 0xFFFFFFFE) + 0x4C)))
            {
              a3 = (JSC::Exception *)JSC::Exception::create(v14, v61[0], 0, (uint64_t)a4, a5, a6, a7, a8);
            }
            JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, a3, v23, (uint64_t)a4, a5, a6, a7, a8);
            v26 = v61[0];
          }
          else
          {
            v26 = 0;
          }
          v27 = v26 ? 1 : v22;
          if ((v27 & 1) != 0)
            goto LABEL_48;
        }
        OpaqueJSClass::contextData(v16, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v29 = *(WTF ***)(v28 + 8);
        if (v29)
        {
          v30 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v29, (WTF::StringImpl *)v11, a3);
          if (v30)
          {
            v31 = v30;
            if ((*((_BYTE *)v30 + 16) & 2) != 0)
            {
              v22 = 0;
              goto LABEL_47;
            }
            v32 = (uint64_t (*)(JSC::VM **, JSC::Exception *, _QWORD, const JSC::PropertyTable *, JSC::Exception **))*((_QWORD *)v30 + 1);
            if (v32)
            {
              v61[0] = 0;
              JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v49, a2[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v22 = v32(a2, a1, *((_QWORD *)v31 + 3), a4, v61);
              if (v50)
              {
                JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v50 + 112), (uint64_t)&v49, v49, (uint64_t)a4, a5, a6, a7, a8);
                v35 = (unsigned int *)v50;
                v50 = 0;
                if (v35)
                  WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v35, (uint64_t)v21, v34, (uint64_t)a4, a5, a6, a7, a8);
              }
              a3 = v61[0];
              if (v61[0])
              {
                if (((unint64_t)v61[0] & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v61[0] & 0xFFFFFFFE)
                                                                          + 0x4C)))
                {
                  a3 = (JSC::Exception *)JSC::Exception::create(v14, v61[0], 0, (uint64_t)a4, a5, a6, a7, a8);
                }
                JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, a3, v33, (uint64_t)a4, a5, a6, a7, a8);
                v36 = v61[0];
              }
              else
              {
                v36 = 0;
              }
              v37 = v36 ? 1 : v22;
              if ((v37 & 1) != 0)
                goto LABEL_47;
            }
          }
        }
        OpaqueJSClass::contextData(v16, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v39 = *(WTF ***)(v38 + 16);
        if (v39)
        {
          v40 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v39, (WTF::StringImpl *)v11, a3);
          if (v40)
            break;
        }
        v16 = (OpaqueJSClass *)*((_QWORD *)v16 + 1);
        if (!v16)
          goto LABEL_46;
      }
      v42 = v40;
      v51 = 0xFFFFFFFF00000000;
      v53 = 0;
      v54 = 0;
      v52 = a1;
      v55 = 196608;
      v56 = 0;
      v59 = 0;
      v60 = 0;
      v57 = v14;
      ++*(_DWORD *)(v14 + 4);
      v58 = 1;
      JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v49, a5, a6, a7, a8);
      v45 = v44;
      if (*(_DWORD *)(v14 + 80))
      {
        v47 = *(_DWORD *)(v14 + 80);
        if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v14 + 16))
          goto LABEL_65;
      }
      if (v58)
      {
        v46 = *(_DWORD *)(v57 + 4);
        if (!v46)
        {
          __break(0xC471u);
          JUMPOUT(0x197F446CCLL);
        }
        *(_DWORD *)(v57 + 4) = v46 - 1;
        v57 = 0;
        v58 = 0;
      }
      if (v45)
      {
        v22 = JSC::JSGlobalObject::put((unint64_t)a1, (unint64_t)a2, v11, a4, a5, a6, a7, a8, v43.n128_f64[0]);
        goto LABEL_66;
      }
      if ((*((_BYTE *)v42 + 8) & 2) != 0)
      {
LABEL_65:
        v22 = 0;
      }
      else
      {
        v61[0] = 0;
        v61[1] = a1;
        v62 = -1;
        v43.n128_u64[0] = 0x100000001000000;
        v63 = 0x1000000;
        v64 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v14, v11, (uint64_t)a4, 0, (uint64_t)v61, a7, a8, v43);
        v22 = v21 == 0;
      }
LABEL_66:
      if (v58)
      {
        v48 = *(_DWORD *)(v57 + 4);
        if (!v48)
        {
          __break(0xC471u);
          JUMPOUT(0x197F446ECLL);
        }
        *(_DWORD *)(v57 + 4) = v48 - 1;
      }
      goto LABEL_47;
    }
  }
  v17 = 0;
LABEL_46:
  v22 = JSC::JSGlobalObject::put((unint64_t)a1, (unint64_t)a2, v11, a4, a5, a6, a7, a8, a9);
LABEL_47:
  if (v17)
LABEL_48:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v17, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v22;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::putByIndex(unint64_t a1, JSC::VM **a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v12;
  JSC::Exception *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  OpaqueJSClass *v20;
  unsigned int *v21;
  uint64_t (*v22)(JSC::VM **, unint64_t, unsigned int *, unint64_t, JSC::Exception **);
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Exception *v31;
  char v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  WTF *v36;
  uint64_t (*v37)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **);
  double v38;
  uint64_t v39;
  unsigned int *v40;
  JSC::Exception *v41;
  char v42;
  uint64_t v43;
  WTF **v44;
  WTF *v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  JSC::Exception *v59;
  WTF::StringImpl *v60;

  v56 = a5;
  v12 = (uint64_t **)a2[7];
  JSC::Identifier::from(v12, (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v60);
  v20 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 3296) + 8);
  if (v20)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t (*)(JSC::VM **, unint64_t, unsigned int *, unint64_t, JSC::Exception **))*((_QWORD *)v20 + 7);
      if (v22)
      {
        if (!v21)
        {
          v23 = v60;
          if (v60)
          {
            *(_DWORD *)v60 += 2;
            v24 = WTF::fastMalloc((WTF *)0x18);
            v21 = (unsigned int *)v24;
            *(_DWORD *)v24 = 1;
            *(_QWORD *)(v24 + 8) = v23;
            if ((*((_BYTE *)v23 + 16) & 4) != 0)
              v25 = 0;
            else
              v25 = *((_QWORD *)v23 + 1);
            *(_QWORD *)(v24 + 16) = v25;
          }
          else
          {
            v21 = 0;
          }
        }
        v59 = 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v57, a2[7], (uint64_t)v13, v14, v15, v16, v17, v18);
        v27 = v22(a2, a1, v21, a4, &v59);
        if (v58)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v58 + 112), (uint64_t)&v57, v57, v14, v15, v16, v17, v18);
          v30 = (unsigned int *)v58;
          v58 = 0;
          if (v30)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v30, (uint64_t)v26, v29, v14, v15, v16, v17, v18);
        }
        v13 = v59;
        if (v59)
        {
          if (((unint64_t)v59 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x4C)))
          {
            v13 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v59, 0, v14, v15, v16, v17, v18);
          }
          JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v13, v28, v14, v15, v16, v17, v18);
          v31 = v59;
        }
        else
        {
          v31 = 0;
        }
        v32 = v31 ? 1 : v27;
        if ((v32 & 1) != 0)
          break;
      }
      OpaqueJSClass::contextData(v20, (JSC::JSGlobalObject *)a2, (uint64_t)v13, v14, v15, v16, v17, v18);
      v34 = *(WTF ***)(v33 + 8);
      if (v34)
      {
        v35 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v34, v60, v13);
        if (v35)
        {
          v36 = v35;
          if ((*((_BYTE *)v35 + 16) & 2) != 0)
            goto LABEL_56;
          v37 = (uint64_t (*)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **))*((_QWORD *)v35 + 1);
          if (v37)
          {
            v59 = 0;
            JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v57, a2[7], (uint64_t)v13, v14, v15, v16, v17, v18);
            v27 = v37(a2, a1, *((_QWORD *)v36 + 3), a4, &v59);
            if (v58)
            {
              JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v58 + 112), (uint64_t)&v57, v57, v14, v15, v16, v17, v18);
              v40 = (unsigned int *)v58;
              v58 = 0;
              if (v40)
                WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v40, (uint64_t)v26, v39, v14, v15, v16, v17, v18);
            }
            v13 = v59;
            if (v59)
            {
              if (((unint64_t)v59 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x4C)))
              {
                v13 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v59, 0, v14, v15, v16, v17, v18);
              }
              JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v13, v38, v14, v15, v16, v17, v18);
              v41 = v59;
            }
            else
            {
              v41 = 0;
            }
            v42 = v41 ? 1 : v27;
            if ((v42 & 1) != 0)
              break;
          }
        }
      }
      OpaqueJSClass::contextData(v20, (JSC::JSGlobalObject *)a2, (uint64_t)v13, v14, v15, v16, v17, v18);
      v44 = *(WTF ***)(v43 + 16);
      if (v44)
      {
        v45 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v44, v60, v13);
        if (v45)
        {
          if ((*((_BYTE *)v45 + 8) & 2) == 0)
            goto LABEL_46;
LABEL_56:
          v27 = 0;
          break;
        }
      }
      v20 = (OpaqueJSClass *)*((_QWORD *)v20 + 1);
      if (!v20)
        goto LABEL_46;
    }
  }
  else
  {
    v21 = 0;
LABEL_46:
    v27 = JSC::JSObject::putByIndex(a1, a2, a3, a4, v56, v16, v17, v18, v19);
  }
  v46 = v60;
  v60 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v26, (uint64_t)v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      if (!v21)
        return v27;
      goto LABEL_51;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (v21)
LABEL_51:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v21, v26, (uint64_t)v13, v14, v15, v16, v17, v18);
  return v27;
}

BOOL JSC::JSCallbackObject<JSC::JSGlobalObject>::deleteProperty(JSC::JSObject *a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  const JSC::PropertyTable *v9;
  uint64_t v10;
  OpaqueJSClass *v13;
  unsigned int *v14;
  JSC::VM *v15;
  uint64_t (*v16)(JSC::VM **, JSC::JSObject *, unsigned int *, JSC::Exception **);
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  unsigned int *v22;
  JSC::Exception *v23;
  char v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  _BOOL8 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v49;
  BOOL v50;
  int v51;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v66;
  uint64_t v67;
  JSC::Exception *v68;

  v9 = (const JSC::PropertyTable *)a4;
  v10 = a3;
  if (!a3)
  {
    v14 = 0;
    goto LABEL_61;
  }
  v13 = *(OpaqueJSClass **)(*((_QWORD *)a1 + 412) + 8);
  if (!v13)
  {
    v14 = 0;
LABEL_31:
    v31 = *(_DWORD *)(v10 + 16);
    if ((v31 & 0x20) != 0)
    {
      v9 = (const JSC::PropertyTable *)a4;
    }
    else
    {
      v32 = *(_BYTE **)(v10 + 8);
      v33 = *(unsigned int *)(v10 + 4);
      v9 = (const JSC::PropertyTable *)a4;
      if ((v31 & 4) != 0)
      {
        if (!(_DWORD)v33 || (v58 = *v32 - 48, v58 > 9) || v33 >= 2 && *v32 == 48)
        {
LABEL_89:
          v59 = 0;
          v60 = 0;
          v61 = 0;
        }
        else
        {
          v62 = v32 + 1;
          v63 = v33 - 1;
          while (v63)
          {
            if (v58 > 0x19999999)
              goto LABEL_89;
            v64 = *v62 - 48;
            if (v64 > 9)
              goto LABEL_89;
            v59 = 0;
            v60 = 0;
            v61 = 0;
            v42 = __CFADD__(v64, 10 * v58);
            v58 = v64 + 10 * v58;
            ++v62;
            --v63;
            if (v42)
              goto LABEL_90;
          }
          v59 = 0x100000000;
          if (v58 == -1)
          {
            v59 = 0;
            v60 = 0;
          }
          else
          {
            v60 = v58;
          }
          if (v58 == -1)
            v61 = 0;
          else
            v61 = v58 & 0xFFFFFF00;
        }
LABEL_90:
        a3 = v61 | v60;
        v9 = (const JSC::PropertyTable *)a4;
        if ((v59 & 0x100000000) != 0)
          goto LABEL_59;
      }
      else
      {
        if (!(_DWORD)v33
          || (v34 = *(unsigned __int16 *)v32 - 48, v34 > 9)
          || (*(_WORD *)v32 == 48 ? (v38 = v33 > 1) : (v38 = 0), v38))
        {
LABEL_35:
          v35 = 0;
          v36 = 0;
          v37 = 0;
        }
        else
        {
          v39 = (unsigned __int16 *)(v32 + 2);
          v40 = v33 - 1;
          while (v40)
          {
            if (v34 > 0x19999999)
              goto LABEL_35;
            v41 = *v39 - 48;
            if (v41 > 9)
              goto LABEL_35;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v42 = __CFADD__(v41, 10 * v34);
            v34 = v41 + 10 * v34;
            ++v39;
            --v40;
            if (v42)
              goto LABEL_58;
          }
          v35 = 0x100000000;
          if (v34 == -1)
          {
            v35 = 0;
            v36 = 0;
          }
          else
          {
            v36 = v34;
          }
          if (v34 == -1)
            v37 = 0;
          else
            v37 = v34 & 0xFFFFFF00;
        }
LABEL_58:
        a3 = v37 | v36;
        if ((v35 & 0x100000000) != 0)
        {
LABEL_59:
          v45 = JSC::JSObject::deletePropertyByIndex(a1, (JSC::JSCell *)a2, (JSC::JSGlobalObject *)a3, a4, a5, a6, a7, a8, a9);
LABEL_74:
          v43 = v45;
          if (!v14)
            return v43;
LABEL_75:
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v14, a2, a3, a4, a5, a6, a7, a8);
          return v43;
        }
      }
    }
LABEL_61:
    v46 = *((_QWORD *)a1 + 3);
    v47 = (unsigned __int8 *)(v46 + 20);
    if (__ldaxr((unsigned __int8 *)(v46 + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v47))
    {
      goto LABEL_65;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v46 + 20);
LABEL_65:
    v49 = *(_QWORD *)(v46 + 8);
    if (v49)
    {
      v53 = *(_DWORD *)(v49 - 8);
      v54 = *(_DWORD *)(v10 + 16);
      if ((v54 & 0x20) != 0)
        v54 = *(_DWORD *)(v10 + 32);
      v55 = v53 & (v54 >> 8);
      v56 = *(_QWORD *)(v49 + 16 * v55);
      if (v56 == v10)
      {
        v50 = 1;
      }
      else
      {
        v57 = 1;
        do
        {
          v50 = v56 != 0;
          if (!v56)
            break;
          v55 = (v55 + v57) & v53;
          v56 = *(_QWORD *)(v49 + 16 * v55);
          ++v57;
        }
        while (v56 != v10);
      }
    }
    else
    {
      v50 = 0;
    }
    v51 = __ldxr(v47);
    if (v51 == 1)
    {
      if (!__stlxr(0, v47))
        goto LABEL_72;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v47, 0, a3, a4, a5, a6, a7, a8);
LABEL_72:
    if (v50)
    {
      v43 = 0;
      if (!v14)
        return v43;
      goto LABEL_75;
    }
    v45 = JSC::JSObject::deleteProperty((unsigned int *)a1, (JSC::JSGlobalObject *)a2, v10, v9, a5, a6, a7, a8);
    goto LABEL_74;
  }
  v14 = 0;
  v15 = a2[7];
  while (1)
  {
    v16 = (uint64_t (*)(JSC::VM **, JSC::JSObject *, unsigned int *, JSC::Exception **))*((_QWORD *)v13 + 8);
    if (v16)
    {
      if (!v14)
      {
        *(_DWORD *)v10 += 2;
        v17 = WTF::fastMalloc((WTF *)0x18);
        v14 = (unsigned int *)v17;
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = v10;
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          v18 = 0;
        else
          v18 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v17 + 16) = v18;
      }
      v68 = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v66, a2[7], a3, a4, a5, a6, a7, a8);
      v19 = v16(a2, a1, v14, &v68);
      if (v67)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v67 + 112), (uint64_t)&v66, v66, a4, a5, a6, a7, a8);
        v22 = (unsigned int *)v67;
        v67 = 0;
        if (v22)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v22, (uint64_t)a2, v21, a4, a5, a6, a7, a8);
      }
      a3 = (uint64_t)v68;
      if (v68)
      {
        if (((unint64_t)v68 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = JSC::Exception::create((uint64_t)v15, v68, 0, a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException(v15, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v20, a4, a5, a6, a7, a8);
        v23 = v68;
      }
      else
      {
        v23 = 0;
      }
      v24 = v23 ? 1 : v19;
      if ((v24 & 1) != 0)
      {
        v43 = 1;
        goto LABEL_75;
      }
    }
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v26 = *(WTF ***)(v25 + 8);
    if (v26)
    {
      v27 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v26, (WTF::StringImpl *)v10, (const WTF::StringImpl *)a3);
      if (v27)
      {
        v44 = *((_BYTE *)v27 + 16);
        goto LABEL_50;
      }
    }
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v29 = *(WTF ***)(v28 + 16);
    if (v29)
    {
      v30 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v29, (WTF::StringImpl *)v10, (const WTF::StringImpl *)a3);
      if (v30)
        break;
    }
    v13 = (OpaqueJSClass *)*((_QWORD *)v13 + 1);
    if (!v13)
      goto LABEL_31;
  }
  v44 = *((_BYTE *)v30 + 8);
LABEL_50:
  v43 = (v44 & 8) == 0;
  if (v14)
    goto LABEL_75;
  return v43;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::deletePropertyByIndex(unint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Symbol *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v33);
  v22 = JSC::JSCell::deleteProperty(a1, a2, (uint64_t)v33, v10, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

BOOL JSC::JSCallbackObject<JSC::JSGlobalObject>::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v12;
  OpaqueJSClass *v13;
  unsigned int *v14;
  unsigned int (*v15)(JSC::VM **, uint64_t, unsigned int *);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(JSC::VM **, uint64_t, unsigned int *, JSC::Exception **);
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t *v29;
  OpaqueJSClass *v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  WTF *v34;
  uint64_t (*v35)(JSC::VM **, uint64_t, _QWORD, JSC::Exception **);
  uint64_t v36;
  double v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t *v41;
  JSC::VM *v42;
  int v43;
  char v44;
  char v45;
  _BOOL8 v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  JSC::VM *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  JSC::Exception *v84;

  v9 = (unint64_t)a3;
  v12 = (uint64_t)a2[7];
  if (!a3 || (v13 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 3296) + 8)) == 0)
  {
    v14 = 0;
LABEL_56:
    JSC::JSGlobalObject::getOwnPropertySlot(a1, (uint64_t)a2, v9, a4, a5, a6, a7, a8);
    v45 = v44;
    if (*(_DWORD *)(v12 + 80))
    {
      v78 = *(_DWORD *)(v12 + 80);
      if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v79 = *(_QWORD *)(v12 + 16);
      v46 = v79 == 0;
      if (v79)
        v80 = 1;
      else
        v80 = v45;
      if ((v80 & 1) != 0)
      {
LABEL_82:
        if (v14)
          goto LABEL_83;
        return v46;
      }
    }
    else if ((v44 & 1) != 0)
    {
LABEL_81:
      v46 = 1;
      goto LABEL_82;
    }
    if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2776) != v9)
    {
LABEL_59:
      v46 = 0;
      goto LABEL_82;
    }
    WTF::String::isolatedCopy((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3296) + 8) + 112), (uint64_t *)&v82);
    v54 = v82;
    if (!v82 || !*((_DWORD *)v82 + 1))
    {
      v55 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 8);
      if (v55)
      {
        v56 = v55 - 1;
        if (v55 == 1)
        {
          v58 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        else
        {
          v57 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
          v58 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
          *v58 = 2;
          v58[1] = v56;
          *((_QWORD *)v58 + 1) = v57;
          v58[4] = 4;
        }
      }
      else
      {
        v58 = 0;
      }
      v82 = (WTF::StringImpl *)v58;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
    }
    *(_QWORD *)a4 = JSC::jsString(v12, (JSC::VM *)&v82, v48, v49, v50, v51, v52, v53);
    *(_DWORD *)(a4 + 16) = 4;
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 1;
    v59 = v82;
    v82 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    goto LABEL_81;
  }
  v14 = 0;
  while (1)
  {
    v15 = (unsigned int (*)(JSC::VM **, uint64_t, unsigned int *))*((_QWORD *)v13 + 5);
    if (v15)
      break;
    v18 = (uint64_t (*)(JSC::VM **, uint64_t, unsigned int *, JSC::Exception **))*((_QWORD *)v13 + 6);
    if (v18)
    {
      if (!v14)
      {
        *(_DWORD *)v9 += 2;
        v19 = WTF::fastMalloc((WTF *)0x18);
        v14 = (unsigned int *)v19;
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = v9;
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
          v20 = 0;
        else
          v20 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v19 + 16) = v20;
      }
      v84 = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v82, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
      v24 = v18(a2, a1, v14, &v84);
      if (v83)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v83 + 112), (uint64_t)&v82, v82, a4, a5, a6, a7, a8);
        v27 = (unsigned int *)v83;
        v83 = 0;
        if (v27)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v27, (uint64_t)v21, v26, a4, a5, a6, a7, a8);
      }
      a3 = v84;
      if (v84)
      {
        if (((unint64_t)v84 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = (JSC::Exception *)JSC::Exception::create(v12, v84, 0, a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, a3, v25, a4, a5, a6, a7, a8);
        v24 = 10;
LABEL_79:
        *(_QWORD *)a4 = v24;
        *(_DWORD *)(a4 + 16) = 6;
        *(_QWORD *)(a4 + 32) = a1;
        v46 = 1;
        *(_BYTE *)(a4 + 49) = 1;
        goto LABEL_83;
      }
      if (v24)
        goto LABEL_79;
    }
LABEL_25:
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v29 = *(uint64_t **)(v28 + 8);
    if (v29
      && WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v29, (WTF::StringImpl *)v9, a3))
    {
      v30 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 3296) + 8);
      if (v30)
      {
        v81 = a2[7];
        do
        {
          OpaqueJSClass::contextData(v30, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v32 = *(WTF ***)(v31 + 8);
          if (v32)
          {
            v33 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v32, (WTF::StringImpl *)v9, a3);
            if (v33)
            {
              v34 = v33;
              v35 = *(uint64_t (**)(JSC::VM **, uint64_t, _QWORD, JSC::Exception **))v33;
              if (*(_QWORD *)v33)
              {
                v84 = 0;
                JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v82, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
                v36 = v35(a2, a1, *((_QWORD *)v34 + 3), &v84);
                if (v83)
                {
                  JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v83 + 112), (uint64_t)&v82, v82, a4, a5, a6, a7, a8);
                  v39 = (unsigned int *)v83;
                  v83 = 0;
                  if (v39)
                    WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v39, (uint64_t)v21, v38, a4, a5, a6, a7, a8);
                }
                a3 = v84;
                if (v84)
                {
                  if (((unint64_t)v84 & 0xFFFE000000000002) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C)))
                  {
                    v42 = v81;
                    a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v81, v84, 0, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    v42 = v81;
                  }
                  JSC::VM::throwException(v42, (JSC::JSGlobalObject *)a2, a3, v37, a4, a5, a6, a7, a8);
                  v36 = 10;
                  goto LABEL_39;
                }
                if (v36)
                  goto LABEL_39;
              }
            }
          }
          v30 = (OpaqueJSClass *)*((_QWORD *)v30 + 1);
        }
        while (v30);
      }
      v36 = 0;
LABEL_39:
      if (*(_DWORD *)(v12 + 80))
      {
        v43 = *(_DWORD *)(v12 + 80);
        if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_59;
      }
      if (v36)
      {
        *(_QWORD *)a4 = v36;
        *(_DWORD *)(a4 + 16) = 6;
        *(_QWORD *)(a4 + 32) = a1;
        v46 = 1;
        *(_BYTE *)(a4 + 49) = 1;
        goto LABEL_82;
      }
    }
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v41 = *(uint64_t **)(v40 + 16);
    if (v41
      && WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v41, (WTF::StringImpl *)v9, a3))
    {
      *(_QWORD *)a4 = JSC::staticFunctionGetterJSGlobalObjectCallbackObject;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 6;
      *(_QWORD *)(a4 + 32) = a1;
      *(_BYTE *)(a4 + 49) = 3;
      goto LABEL_81;
    }
    v13 = (OpaqueJSClass *)*((_QWORD *)v13 + 1);
    if (!v13)
      goto LABEL_56;
  }
  if (!v14)
  {
    *(_DWORD *)v9 += 2;
    v16 = WTF::fastMalloc((WTF *)0x18);
    v14 = (unsigned int *)v16;
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v9;
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      v17 = 0;
    else
      v17 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v16 + 16) = v17;
  }
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v82, a2[7], (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v15(a2, a1, v14))
  {
    if (v83)
    {
      JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v83 + 112), (uint64_t)&v82, v82, a4, a5, a6, a7, a8);
      v23 = (unsigned int *)v83;
      v83 = 0;
      if (v23)
        WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v23, v22, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_25;
  }
  *(_QWORD *)a4 = JSC::callbackGetterJSGlobalObjectCallbackObject;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 6;
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 49) = 3;
  if (v83)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v83 + 112), (uint64_t)&v82, v82, a4, a5, a6, a7, a8);
    v60 = (unsigned int *)v83;
    v83 = 0;
    if (v60)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v60, (uint64_t)v21, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v46 = 1;
LABEL_83:
  WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v14, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v46;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::getOwnPropertySlotByIndex(_DWORD *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v11 = *(uint64_t (**)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x68);
  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v30);
  v19 = v11(a1, a2, v30, a4);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

void JSC::JSCallbackObject<JSC::JSGlobalObject>::getOwnSpecialPropertyNames(uint64_t a1, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OpaqueJSClass *v8;
  int v9;
  const WTF::StringImpl *v10;
  uint64_t *v11;
  void (*v12)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *);
  JSC::VM *v13;
  uint64_t v14;
  unsigned int *v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  const WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  int v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  _QWORD **v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t j;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  WTF::StringImpl *v197;
  const WTF::StringImpl *v198;
  int v199;
  uint64_t v200;
  int v201;
  WTF::StringImpl **v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  int v209;
  WTF::StringImpl *v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  _QWORD *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  OpaqueJSClass *v263;
  WTF::StringImpl *v265;
  _QWORD *v266;
  unint64_t StatusReg;
  uint64_t **v268;
  int v269;
  _QWORD *v270;
  WTF::StringImpl *v271;
  uint64_t *v272;
  _QWORD *v273;
  const WTF::StringImpl *v274;
  WTF *v275;
  WTF *v276;
  WTF::StringImpl *v277;
  uint64_t v278;

  v8 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 3296) + 8);
  if (v8)
  {
    v9 = a4;
    v10 = a3;
    v268 = (uint64_t **)(*((_QWORD *)a2 + 7) + 41912);
    v11 = (uint64_t *)((char *)a3 + 8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v269 = a4;
    v274 = a3;
    while (1)
    {
      v12 = (void (*)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *))*((_QWORD *)v8 + 9);
      if (v12)
      {
        v13 = a2 ? (JSC::VM *)*((_QWORD *)a2 + 7) : 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v277, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        v12(a2, a1, v10);
        if (v278)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v278 + 112), (uint64_t)&v277, v277, a4, a5, a6, a7, a8);
          v15 = (unsigned int *)v278;
          v278 = 0;
          if (v15)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v15, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v263 = v8;
      OpaqueJSClass::contextData(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v24 = *(_QWORD ***)(v23 + 8);
      if (!v24)
        goto LABEL_142;
      v25 = *v24;
      if (!*v24)
        break;
      v26 = *((unsigned int *)v25 - 1);
      v27 = &v25[2 * v26];
      if (!*((_DWORD *)v25 - 3))
      {
        v261 = &v25[2 * v26];
        goto LABEL_291;
      }
      if ((_DWORD)v26)
      {
        v28 = 16 * v26;
        do
        {
          if ((unint64_t)(*v25 + 1) > 1)
            goto LABEL_17;
          v25 += 2;
          v28 -= 16;
        }
        while (v28);
        v25 = v27;
      }
LABEL_17:
      v29 = v27;
LABEL_18:
      if (v27 != v25)
      {
        v270 = v27;
        do
        {
          v30 = v25[1];
          if (!*(_QWORD *)v30)
            goto LABEL_115;
          v31 = (WTF::StringImpl *)*v25;
          if (v9)
          {
            if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              goto LABEL_115;
          }
          if (v31)
          {
            v32 = *(_DWORD *)v31;
            *(_DWORD *)v31 += 2;
            if ((*((_BYTE *)v31 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v31 = v32 + 4;
              v33 = v31;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*v268, (unint64_t)v31, v17, v18, v19, v20, v21, v22, &v277);
              v33 = v277;
            }
          }
          else
          {
            v33 = 0;
          }
          v34 = *(_DWORD *)v33;
          *(_DWORD *)v33 += 2;
          v275 = v33;
          if (v34)
          {
            *(_DWORD *)v33 = v34;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v33, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
            WTF::fastFree((unint64_t)v275, v97, v98, v99, v100, v101, v102, v103);
            v33 = v275;
          }
          if ((*((_BYTE *)v33 + 16) & 0x20) != 0)
          {
            if ((*((_BYTE *)v10 + 24) & 1) == 0 || *((_BYTE *)v10 + 25) && (*((_BYTE *)v33 + 36) & 4) != 0)
              goto LABEL_110;
          }
          else if ((*((_BYTE *)v10 + 24) & 2) == 0)
          {
            goto LABEL_110;
          }
          v35 = *(_QWORD *)v10;
          v36 = *(unsigned int *)(*(_QWORD *)v10 + 20);
          if (v36 > 0x13)
          {
            v37 = *v11;
            if (*v11 && *(_DWORD *)(v37 - 12))
              goto LABEL_75;
            v265 = v31;
            v38 = *(uint64_t **)(v35 + 8);
            v39 = &v38[v36];
            v272 = v39;
            while (1)
            {
              v40 = *v38;
              v41 = *v11;
              if (*v11)
                goto LABEL_36;
              v71 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22);
              v39 = v272;
              v33 = v275;
              *v11 = v71 + 16;
              *(_DWORD *)(v71 + 12) = 8;
              *(_DWORD *)(*v11 - 8) = 7;
              *(_DWORD *)(*v11 - 16) = 0;
              *(_DWORD *)(*v11 - 12) = 0;
              v41 = *v11;
              if (*v11)
LABEL_36:
                v42 = *(_DWORD *)(v41 - 8);
              else
                v42 = 0;
              v43 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
              v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
              v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
              v46 = v42 & ((v45 >> 31) ^ v45);
              v47 = (_QWORD *)(v41 + 8 * v46);
              v48 = *v47;
              if (*v47)
              {
                v49 = 0;
                v50 = 1;
                do
                {
                  if (v48 == v40)
                    goto LABEL_53;
                  if (v48 == -1)
                    v49 = v47;
                  v46 = (v46 + v50) & v42;
                  v47 = (_QWORD *)(v41 + 8 * v46);
                  v48 = *v47;
                  ++v50;
                }
                while (*v47);
                if (v49)
                {
                  *v49 = 0;
                  --*(_DWORD *)(*v11 - 16);
                  v47 = v49;
                }
              }
              *v47 = v40;
              v51 = *v11;
              if (*v11)
                v52 = *(_DWORD *)(v51 - 12) + 1;
              else
                v52 = 1;
              *(_DWORD *)(v51 - 12) = v52;
              v53 = *v11;
              if (*v11)
                v54 = *(_DWORD *)(v53 - 12);
              else
                v54 = 0;
              v55 = (*(_DWORD *)(v53 - 16) + v54);
              v56 = *(unsigned int *)(v53 - 4);
              if (v56 > 0x400)
              {
                if (v56 <= 2 * v55)
                  goto LABEL_73;
              }
              else if (3 * v56 <= 4 * v55)
              {
                if ((_DWORD)v56)
                {
LABEL_73:
                  v57 = *(_DWORD *)(v53 - 12);
                  v58 = (_DWORD)v56 << (6 * v57 >= (2 * v56));
                }
                else
                {
                  v57 = *(_DWORD *)(v53 - 12);
                  v58 = 8;
                }
                v59 = WTF::fastZeroedMalloc(8 * v58 + 16, (unint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                *v11 = v59 + 16;
                *(_DWORD *)(v59 + 12) = v58;
                *(_DWORD *)(*v11 - 8) = v58 - 1;
                *(_DWORD *)(*v11 - 16) = 0;
                *(_DWORD *)(*v11 - 12) = v57;
                v10 = v274;
                v33 = v275;
                v27 = v270;
                v39 = v272;
                if (!(_DWORD)v56)
                  goto LABEL_69;
                for (i = 0; i != v56; ++i)
                {
                  v61 = *(_QWORD *)(v53 + 8 * i);
                  if ((unint64_t)(v61 + 1) >= 2)
                  {
                    v62 = *v11;
                    if (*v11)
                      v63 = *(_DWORD *)(v62 - 8);
                    else
                      v63 = 0;
                    v64 = (~(v61 << 32) + v61) ^ ((unint64_t)(~(v61 << 32) + v61) >> 22);
                    v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
                    v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
                    v67 = v63 & ((v66 >> 31) ^ v66);
                    v68 = 1;
                    do
                    {
                      v69 = v67;
                      v70 = *(_QWORD *)(v62 + 8 * v67);
                      v67 = (v67 + v68++) & v63;
                    }
                    while (v70);
                    *(_QWORD *)(v62 + 8 * v69) = v61;
                  }
                }
                if (v53)
                {
LABEL_69:
                  WTF::fastFree(v53 - 16, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                  v39 = v272;
                  v33 = v275;
                }
              }
LABEL_53:
              if (++v38 == v39)
              {
                v37 = *v11;
                v9 = v269;
                v31 = v265;
                if (!*v11)
                {
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, 8uLL, 0, v18, v19, v20, v21, v22);
                  v33 = v275;
                  v37 = *v11;
                  if (!*v11)
                  {
                    v72 = 0;
LABEL_76:
                    v73 = ((unint64_t)v33 + ~((_QWORD)v33 << 32)) ^ (((unint64_t)v33 + ~((_QWORD)v33 << 32)) >> 22);
                    v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
                    v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
                    v76 = v72 & ((v75 >> 31) ^ v75);
                    v17 = (const WTF::StringImpl *)(v37 + 8 * v76);
                    v77 = *(WTF::StringImpl **)v17;
                    if (*(_QWORD *)v17)
                    {
                      v78 = 0;
                      v79 = 1;
                      do
                      {
                        if (v77 == v33)
                          goto LABEL_91;
                        if (v77 == (WTF::StringImpl *)-1)
                          v78 = v17;
                        v76 = (v76 + v79) & v72;
                        v17 = (const WTF::StringImpl *)(v37 + 8 * v76);
                        v77 = *(WTF::StringImpl **)v17;
                        ++v79;
                      }
                      while (*(_QWORD *)v17);
                      if (v78)
                      {
                        *(_QWORD *)v78 = 0;
                        --*(_DWORD *)(*v11 - 16);
                        v17 = v78;
                      }
                    }
                    *(_QWORD *)v17 = v33;
                    v80 = *v11;
                    if (*v11)
                      v81 = *(_DWORD *)(v80 - 12) + 1;
                    else
                      v81 = 1;
                    *(_DWORD *)(v80 - 12) = v81;
                    v83 = *v11;
                    if (*v11)
                      v84 = *(_DWORD *)(v83 - 12);
                    else
                      v84 = 0;
                    v85 = (*(_DWORD *)(v83 - 16) + v84);
                    v86 = *(unsigned int *)(v83 - 4);
                    if (v86 > 0x400)
                    {
                      if (v86 > 2 * v85)
                        goto LABEL_99;
                    }
                    else
                    {
                      if (3 * v86 > 4 * v85)
                        goto LABEL_99;
                      if (!(_DWORD)v86)
                      {
                        v136 = 8;
                        goto LABEL_134;
                      }
                    }
                    v136 = ((_DWORD)v86 << (6 * *(_DWORD *)(v83 - 12) >= (2 * v86)));
LABEL_134:
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, v136, (uint64_t)v17, v18, v19, v20, v21, v22);
                    v33 = v275;
                    goto LABEL_99;
                  }
                }
LABEL_75:
                v72 = *(_DWORD *)(v37 - 8);
                goto LABEL_76;
              }
            }
          }
          if ((_DWORD)v36)
          {
            v82 = *(WTF::StringImpl ***)(v35 + 8);
            while (*v82 != v33)
            {
              ++v82;
              if (!--v36)
                goto LABEL_99;
            }
LABEL_91:
            if (!v33)
              goto LABEL_112;
          }
          else
          {
LABEL_99:
            v87 = v31;
            v88 = *(_QWORD *)v10;
            v89 = *((_DWORD *)v33 + 4);
            if ((v89 & 0x20) != 0)
            {
              *(_DWORD *)v33 += 2;
              v90 = v33;
            }
            else
            {
              if ((v89 & 0x10) != 0)
              {
                *(_DWORD *)v33 += 2;
                v90 = v33;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v10 + 2) + 41912), (unint64_t)v275, v17, v18, v19, v20, v21, v22, &v277);
                v33 = v275;
                v90 = v277;
              }
              v91 = *(_DWORD *)v90;
              *(_DWORD *)v90 += 2;
              if (v91)
              {
                *(_DWORD *)v90 = v91;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v90, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
                v33 = v275;
              }
            }
            v92 = (uint64_t *)(v88 + 8);
            v277 = v90;
            v93 = *(unsigned int *)(v88 + 20);
            if ((_DWORD)v93 == *(_DWORD *)(v88 + 16))
            {
              v137 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v277);
              v33 = v275;
              v93 = *(unsigned int *)(v88 + 20);
              v138 = *(_QWORD *)(v88 + 8);
              v139 = *v137;
              *v137 = 0;
              *(_QWORD *)(v138 + 8 * v93) = v139;
            }
            else
            {
              v94 = *v92;
              v277 = 0;
              *(_QWORD *)(v94 + 8 * v93) = v90;
            }
            *(_DWORD *)(v88 + 20) = v93 + 1;
            v95 = v277;
            v277 = 0;
            v31 = v87;
            if (v95)
            {
              if (*(_DWORD *)v95 == 2)
              {
                WTF::StringImpl::~StringImpl(v95, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
                v33 = v275;
              }
              else
              {
                *(_DWORD *)v95 -= 2;
              }
            }
          }
LABEL_110:
          if (*(_DWORD *)v33 != 2)
          {
            *(_DWORD *)v33 -= 2;
LABEL_112:
            if (v31)
              goto LABEL_113;
            goto LABEL_115;
          }
          v112 = (unint64_t)v33;
          WTF::StringImpl::~StringImpl(v33, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
          WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
          if (v31)
          {
LABEL_113:
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
LABEL_115:
          v96 = v25 + 2;
          v25 = v29;
          if (v96 != v29)
          {
            v25 = v96;
            do
            {
              if ((unint64_t)(*v25 + 1) > 1)
                goto LABEL_120;
              v25 += 2;
            }
            while (v25 != v29);
            v25 = v29;
          }
LABEL_120:
          ;
        }
        while (v25 != v27);
      }
LABEL_142:
      OpaqueJSClass::contextData(v263, a2, (uint64_t)v17, v18, v19, v20, v21, v22);
      v142 = *(_QWORD ***)(v141 + 16);
      if (!v142)
        goto LABEL_286;
      v143 = *v142;
      if (*v142)
      {
        v144 = *((unsigned int *)v143 - 1);
        v145 = &v143[2 * v144];
        if (*((_DWORD *)v143 - 3))
        {
          if ((_DWORD)v144)
          {
            v146 = 16 * v144;
            do
            {
              if ((unint64_t)(*v143 + 1) > 1)
                goto LABEL_150;
              v143 += 2;
              v146 -= 16;
            }
            while (v146);
            v143 = v145;
          }
LABEL_150:
          v147 = v145;
          goto LABEL_151;
        }
        v260 = &v143[2 * v144];
      }
      else
      {
        v145 = 0;
        v260 = 0;
        v144 = 0;
      }
      v147 = &v143[2 * v144];
      v143 = v260;
LABEL_151:
      if (v145 == v143)
        goto LABEL_286;
      v273 = v147;
      v266 = v145;
      do
      {
        v148 = (WTF::StringImpl *)*v143;
        if (v9 && (*(_BYTE *)(v143[1] + 8) & 4) != 0)
          goto LABEL_259;
        if (v148)
        {
          v149 = *(_DWORD *)v148;
          *(_DWORD *)v148 += 2;
          if ((*((_BYTE *)v148 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v148 = v149 + 4;
            v150 = v148;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*v268, (unint64_t)v148, a3, a4, a5, a6, a7, a8, &v277);
            v150 = v277;
          }
        }
        else
        {
          v150 = 0;
        }
        v151 = *(_DWORD *)v150;
        *(_DWORD *)v150 += 2;
        v276 = v150;
        if (v151)
        {
          *(_DWORD *)v150 = v151;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v150, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v276, v217, v218, v219, v220, v221, v222, v223);
          v150 = v276;
        }
        if ((*((_BYTE *)v150 + 16) & 0x20) != 0)
        {
          if ((*((_BYTE *)v10 + 24) & 1) == 0 || *((_BYTE *)v10 + 25) && (*((_BYTE *)v150 + 36) & 4) != 0)
            goto LABEL_254;
        }
        else if ((*((_BYTE *)v10 + 24) & 2) == 0)
        {
          goto LABEL_254;
        }
        v152 = *(_QWORD *)v10;
        v153 = *(unsigned int *)(*(_QWORD *)v10 + 20);
        if (v153 <= 0x13)
        {
          if ((_DWORD)v153)
          {
            v202 = *(WTF::StringImpl ***)(v152 + 8);
            do
            {
              if (*v202 == v150)
                goto LABEL_235;
              ++v202;
              --v153;
            }
            while (v153);
          }
          goto LABEL_243;
        }
        v154 = *v11;
        if (*v11 && *(_DWORD *)(v154 - 12))
        {
LABEL_219:
          v192 = *(_DWORD *)(v154 - 8);
          goto LABEL_220;
        }
        v271 = v148;
        v155 = *(uint64_t **)(v152 + 8);
        v156 = &v155[v153];
        do
        {
          v157 = *v155;
          v158 = *v11;
          if (*v11)
            goto LABEL_168;
          v191 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          v150 = v276;
          *v11 = v191 + 16;
          *(_DWORD *)(v191 + 12) = 8;
          *(_DWORD *)(*v11 - 8) = 7;
          *(_DWORD *)(*v11 - 16) = 0;
          *(_DWORD *)(*v11 - 12) = 0;
          v158 = *v11;
          if (*v11)
LABEL_168:
            v159 = *(_DWORD *)(v158 - 8);
          else
            v159 = 0;
          v160 = (~(v157 << 32) + v157) ^ ((unint64_t)(~(v157 << 32) + v157) >> 22);
          v161 = 9 * ((v160 + ~(v160 << 13)) ^ ((v160 + ~(v160 << 13)) >> 8));
          v162 = (v161 ^ (v161 >> 15)) + ~((v161 ^ (v161 >> 15)) << 27);
          v163 = v159 & ((v162 >> 31) ^ v162);
          v164 = (_QWORD *)(v158 + 8 * v163);
          v165 = *v164;
          if (*v164)
          {
            v166 = 0;
            v167 = 1;
            while (v165 != v157)
            {
              if (v165 == -1)
                v166 = v164;
              v163 = (v163 + v167) & v159;
              v164 = (_QWORD *)(v158 + 8 * v163);
              v165 = *v164;
              ++v167;
              if (!*v164)
              {
                if (v166)
                {
                  *v166 = 0;
                  --*(_DWORD *)(*v11 - 16);
                  v164 = v166;
                }
                goto LABEL_177;
              }
            }
            goto LABEL_185;
          }
LABEL_177:
          *v164 = v157;
          v168 = *v11;
          if (*v11)
            v169 = *(_DWORD *)(v168 - 12) + 1;
          else
            v169 = 1;
          *(_DWORD *)(v168 - 12) = v169;
          v170 = *v11;
          if (*v11)
            v171 = *(_DWORD *)(v170 - 12);
          else
            v171 = 0;
          v172 = v170 - 16;
          v173 = (*(_DWORD *)(v170 - 16) + v171);
          v174 = *(unsigned int *)(v170 - 4);
          if (v174 > 0x400)
          {
            if (v174 > 2 * v173)
              goto LABEL_185;
LABEL_210:
            v175 = *(_DWORD *)(v170 - 12);
            v176 = (_DWORD)v174 << (6 * v175 >= (2 * v174));
            goto LABEL_189;
          }
          if (3 * v174 > 4 * v173)
            goto LABEL_185;
          if ((_DWORD)v174)
            goto LABEL_210;
          v175 = *(_DWORD *)(v170 - 12);
          v176 = 8;
LABEL_189:
          v177 = WTF::fastZeroedMalloc(8 * v176 + 16, (unint64_t)v140, (uint64_t)a3, a4, a5, a6, a7, a8);
          *v11 = v177 + 16;
          *(_DWORD *)(v177 + 12) = v176;
          *(_DWORD *)(*v11 - 8) = v176 - 1;
          *(_DWORD *)(*v11 - 16) = 0;
          *(_DWORD *)(*v11 - 12) = v175;
          v147 = v273;
          v10 = v274;
          v150 = v276;
          if (!(_DWORD)v174)
            goto LABEL_201;
          for (j = 0; j != v174; ++j)
          {
            v179 = *(_QWORD *)(v170 + 8 * j);
            if ((unint64_t)(v179 + 1) >= 2)
            {
              v180 = *v11;
              if (*v11)
                v181 = *(_DWORD *)(v180 - 8);
              else
                v181 = 0;
              v182 = (~(v179 << 32) + v179) ^ ((unint64_t)(~(v179 << 32) + v179) >> 22);
              v183 = 9 * ((v182 + ~(v182 << 13)) ^ ((v182 + ~(v182 << 13)) >> 8));
              v184 = (v183 ^ (v183 >> 15)) + ~((v183 ^ (v183 >> 15)) << 27);
              v185 = v181 & ((v184 >> 31) ^ v184);
              v186 = 1;
              do
              {
                v187 = v185;
                v188 = *(_QWORD *)(v180 + 8 * v185);
                v185 = (v185 + v186++) & v181;
              }
              while (v188);
              *(_QWORD *)(v180 + 8 * v187) = v179;
            }
          }
          if (v170)
          {
LABEL_201:
            v189 = *(_QWORD *)(StatusReg + 752);
            if (v189)
            {
              if (v172 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v170 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v170 - 16) >> 24)) & 1) == 0)
              {
                if (v172 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v172 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((unint64_t)(v170 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((((v170 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_204;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v189, v170 - 16, 1, a4, a5, a6, a7, a8);
              }
              else
              {
LABEL_204:
                v190 = *(unsigned int *)(v189 + 8000);
                if (v190 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v189, v170 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v189 + 8 * v190) = v172 | 0x5000000000000;
                  *(_DWORD *)(v189 + 8000) = v190 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v170 - 16, (uint64_t)&bmalloc_heap_config, 1);
            }
            v150 = v276;
          }
LABEL_185:
          ++v155;
        }
        while (v155 != v156);
        v154 = *v11;
        v9 = v269;
        v145 = v266;
        v148 = v271;
        if (*v11)
          goto LABEL_219;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, 8uLL, 0, a4, a5, a6, a7, a8);
        v150 = v276;
        v154 = *v11;
        if (*v11)
          goto LABEL_219;
        v192 = 0;
LABEL_220:
        v193 = ((unint64_t)v150 + ~((_QWORD)v150 << 32)) ^ (((unint64_t)v150 + ~((_QWORD)v150 << 32)) >> 22);
        v194 = 9 * ((v193 + ~(v193 << 13)) ^ ((v193 + ~(v193 << 13)) >> 8));
        v195 = (v194 ^ (v194 >> 15)) + ~((v194 ^ (v194 >> 15)) << 27);
        v196 = v192 & ((v195 >> 31) ^ v195);
        a3 = (const WTF::StringImpl *)(v154 + 8 * v196);
        v197 = *(WTF::StringImpl **)a3;
        if (!*(_QWORD *)a3)
        {
LABEL_228:
          *(_QWORD *)a3 = v150;
          v200 = *v11;
          if (*v11)
            v201 = *(_DWORD *)(v200 - 12) + 1;
          else
            v201 = 1;
          *(_DWORD *)(v200 - 12) = v201;
          v203 = *v11;
          if (*v11)
            v204 = *(_DWORD *)(v203 - 12);
          else
            v204 = 0;
          v205 = (*(_DWORD *)(v203 - 16) + v204);
          v206 = *(unsigned int *)(v203 - 4);
          if (v206 > 0x400)
          {
            if (v206 > 2 * v205)
              goto LABEL_243;
          }
          else
          {
            if (3 * v206 > 4 * v205)
            {
LABEL_243:
              v207 = v148;
              v208 = *(_QWORD *)v10;
              v209 = *((_DWORD *)v150 + 4);
              if ((v209 & 0x20) != 0)
              {
                *(_DWORD *)v150 += 2;
                v210 = v150;
              }
              else
              {
                if ((v209 & 0x10) != 0)
                {
                  *(_DWORD *)v150 += 2;
                  v210 = v150;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v10 + 2) + 41912), (unint64_t)v276, a3, a4, a5, a6, a7, a8, &v277);
                  v150 = v276;
                  v210 = v277;
                }
                v211 = *(_DWORD *)v210;
                *(_DWORD *)v210 += 2;
                if (v211)
                {
                  *(_DWORD *)v210 = v211;
                }
                else
                {
                  WTF::StringImpl::~StringImpl(v210, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
                  v150 = v276;
                }
              }
              v212 = (uint64_t *)(v208 + 8);
              v277 = v210;
              v213 = *(unsigned int *)(v208 + 20);
              if ((_DWORD)v213 == *(_DWORD *)(v208 + 16))
              {
                v257 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v212, v213 + 1, (unint64_t)&v277);
                v150 = v276;
                v213 = *(unsigned int *)(v208 + 20);
                v258 = *(_QWORD *)(v208 + 8);
                v259 = *v257;
                *v257 = 0;
                *(_QWORD *)(v258 + 8 * v213) = v259;
              }
              else
              {
                v214 = *v212;
                v277 = 0;
                *(_QWORD *)(v214 + 8 * v213) = v210;
              }
              *(_DWORD *)(v208 + 20) = v213 + 1;
              v215 = v277;
              v277 = 0;
              v148 = v207;
              if (v215)
              {
                if (*(_DWORD *)v215 == 2)
                {
                  WTF::StringImpl::~StringImpl(v215, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
                  v150 = v276;
                }
                else
                {
                  *(_DWORD *)v215 -= 2;
                }
              }
              goto LABEL_254;
            }
            if (!(_DWORD)v206)
            {
              v256 = 8;
              goto LABEL_278;
            }
          }
          v256 = ((_DWORD)v206 << (6 * *(_DWORD *)(v203 - 12) >= (2 * v206)));
LABEL_278:
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v11, v256, (uint64_t)a3, a4, a5, a6, a7, a8);
          v150 = v276;
          goto LABEL_243;
        }
        v198 = 0;
        v199 = 1;
        while (v197 != v150)
        {
          if (v197 == (WTF::StringImpl *)-1)
            v198 = a3;
          v196 = (v196 + v199) & v192;
          a3 = (const WTF::StringImpl *)(v154 + 8 * v196);
          v197 = *(WTF::StringImpl **)a3;
          ++v199;
          if (!*(_QWORD *)a3)
          {
            if (v198)
            {
              *(_QWORD *)v198 = 0;
              --*(_DWORD *)(*v11 - 16);
              a3 = v198;
            }
            goto LABEL_228;
          }
        }
LABEL_235:
        if (!v150)
        {
LABEL_256:
          if (v148)
            goto LABEL_257;
          goto LABEL_259;
        }
LABEL_254:
        if (*(_DWORD *)v150 != 2)
        {
          *(_DWORD *)v150 -= 2;
          goto LABEL_256;
        }
        v232 = (unint64_t)v150;
        WTF::StringImpl::~StringImpl(v150, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
        if (v148)
        {
LABEL_257:
          if (*(_DWORD *)v148 == 2)
          {
            WTF::StringImpl::~StringImpl(v148, v140, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
          }
          else
          {
            *(_DWORD *)v148 -= 2;
          }
        }
LABEL_259:
        v216 = v143 + 2;
        v143 = v147;
        if (v216 != v147)
        {
          v143 = v216;
          while ((unint64_t)(*v143 + 1) <= 1)
          {
            v143 += 2;
            if (v143 == v147)
            {
              v143 = v147;
              break;
            }
          }
        }
      }
      while (v143 != v145);
LABEL_286:
      v8 = (OpaqueJSClass *)*((_QWORD *)v263 + 1);
      if (!v8)
        return;
    }
    v27 = 0;
    v261 = 0;
    v26 = 0;
LABEL_291:
    v29 = &v25[2 * v26];
    v25 = v261;
    goto LABEL_18;
  }
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::customHasInstance(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v12;
  uint64_t (*v13)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Exception *v25;
  uint64_t v27;
  uint64_t v28;
  JSC::Exception *v29;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 3296) + 8);
  if (!v8)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v13 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v8 + 96);
    if (v13)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return 0;
  }
  v29 = 0;
  if (a2)
    v15 = v12;
  else
    v15 = 0;
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v27, v15, a3, a4, a5, a6, a7, a8);
  v14 = v13(a2, a1, a3, &v29);
  if (v28)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v28 + 112), (uint64_t)&v27, v27, v16, v17, v18, v19, v20);
    v24 = (unsigned int *)v28;
    v28 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v24, v22, v23, v16, v17, v18, v19, v20);
  }
  v25 = v29;
  if (v29)
  {
    if (((unint64_t)v29 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v29, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException(v12, a2, v25, v21, v16, v17, v18, v19, v20);
  }
  return v14;
}

uint64_t JSC::callJSNonFinalObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v14)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Exception *v31;
  WTF *v32;
  WTF *v34;
  JSC::JSGlobalObject *v35;
  unint64_t v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Exception *v40;
  WTF *v41;
  uint64_t v42;
  _BYTE v43[128];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 5);
  v41 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) != 0 || (v12 = *(unsigned __int8 *)(v11 + 5), v12 < 0x17))
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_28;
    v35 = a2;
    if (v11 >> 49)
    {
      v36 = JSC::constructNumber((uint64_t)this, (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v36 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v11, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFE000000000002) != 0)
    {
      v36 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v41, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(v11 + 5) > 0x16u)
      {
LABEL_39:
        a2 = v35;
        goto LABEL_4;
      }
      v36 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v11 = v36;
    goto LABEL_39;
  }
  if (v12 - 51 <= 5)
LABEL_28:
    v11 = *((_QWORD *)this + 8);
LABEL_4:
  v13 = *(_QWORD *)(v10 + 16);
  do
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_45;
    v14 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **))(v13 + 80);
  }
  while (!v14);
  v15 = *((int *)a2 + 8) - 1;
  v41 = (WTF *)v43;
  v42 = 16;
  if (v15 >= 0x11)
  {
    v37 = a2;
    if (v15 >> 29)
    {
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x197F46878);
    }
    v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
    LODWORD(v42) = v15;
    v41 = v34;
    v16 = HIDWORD(v42);
    a2 = v37;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v16 = 0;
  }
  v17 = 0x600000000;
  v18 = v15;
  do
  {
    *((_QWORD *)v41 + v16++) = *(_QWORD *)((char *)a2 + (v17 >> 29));
    v17 += 0x100000000;
    --v18;
  }
  while (v18);
  HIDWORD(v42) = v16;
LABEL_13:
  v19 = 0;
  v40 = 0;
  if (this)
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v38, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = v14(this, v10, v11, v15, v41, &v40);
  if (v20)
    v28 = v20;
  else
    v28 = 2;
  if (v39)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v39 + 112), (uint64_t)&v38, v38, v22, v23, v24, v25, v26);
    v30 = (unsigned int *)v39;
    v39 = 0;
    if (v30)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v30, (uint64_t)v21, v29, v22, v23, v24, v25, v26);
  }
  v31 = v40;
  if (v40)
  {
    if (((unint64_t)v40 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
    {
      v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v40, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException(v9, this, v31, v27, v22, v23, v24, v25, v26);
    v28 = 10;
  }
  v32 = v41;
  if (v43 != (_BYTE *)v41 && v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree((unint64_t)v32, v21, (uint64_t)v31, v22, v23, v24, v25, v26);
  }
  return v28;
}

uint64_t JSC::constructJSNonFinalObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;
  uint64_t (*v12)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  JSC::Exception *v28;
  WTF *v29;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::Exception *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[128];

  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
  if (!v9)
  {
LABEL_5:
    __break(0xC471u);
    goto LABEL_29;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v12 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **))(v9 + 88);
    if (v12)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_5;
  }
  v13 = *((int *)a2 + 8) - 1;
  v35 = (WTF *)v37;
  v36 = 16;
  if (v13 >= 0x11)
  {
    v31 = a2;
    if (!(v13 >> 29))
    {
      LODWORD(v36) = v13;
      v35 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
      v14 = HIDWORD(v36);
      a2 = v31;
      goto LABEL_9;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197F46960);
  }
  if (!v13)
    goto LABEL_12;
  v14 = 0;
LABEL_9:
  v15 = 0x600000000;
  v16 = v13;
  do
  {
    *((_QWORD *)v35 + v14++) = *(_QWORD *)((char *)a2 + (v15 >> 29));
    v15 += 0x100000000;
    --v16;
  }
  while (v16);
  HIDWORD(v36) = v14;
LABEL_12:
  v17 = 0;
  v34 = 0;
  if (this)
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v32, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = v12(this, v8, v13, v35, &v34);
  if (v33)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v33 + 112), (uint64_t)&v32, v32, v19, v20, v21, v22, v23);
    v27 = (unsigned int *)v33;
    v33 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v27, (uint64_t)v18, v26, v19, v20, v21, v22, v23);
  }
  v28 = v34;
  if (v34)
  {
    if (((unint64_t)v34 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v11, v34, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v11, this, v28, v25, v19, v20, v21, v22, v23);
    v24 = 10;
  }
  v29 = v35;
  if (v37 != (_BYTE *)v35 && v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree((unint64_t)v29, v18, (uint64_t)v28, v19, v20, v21, v22, v23);
  }
  return v24;
}

uint64_t JSC::callbackGetterJSNonFinalObjectCallbackObject(uint64_t a1, uint64_t a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v11;
  JSC::Exception *v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t (*v48)(uint64_t *);
  uint64_t *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v9 = *(JSC::VM **)(a1 + 56);
  if (a3)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if (v11)
    {
      v12 = a3;
      v13 = 0;
      while (1)
      {
        v14 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(v11 + 48);
        if (v14)
        {
          if (!v13)
          {
            *(_DWORD *)v12 += 2;
            v15 = WTF::fastMalloc((WTF *)0x18);
            v13 = v15;
            *(_DWORD *)v15 = 1;
            *(_QWORD *)(v15 + 8) = v12;
            if ((*((_BYTE *)v12 + 16) & 4) != 0)
              v16 = 0;
            else
              v16 = *((_QWORD *)v12 + 1);
            *(_QWORD *)(v15 + 16) = v16;
          }
          v58 = 0;
          JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v59, *(JSC::VM **)(a1 + 56), (uint64_t)a3, a4, a5, a6, a7, a8);
          v18 = v14(a1, a2, v13, &v58);
          if (v60)
          {
            JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v60 + 112), (uint64_t)&v59, v59, a4, a5, a6, a7, a8);
            v21 = (unsigned int *)v60;
            v60 = 0;
            if (v21)
              WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v21, (uint64_t)v17, v20, a4, a5, a6, a7, a8);
          }
          a3 = v58;
          if (v58)
          {
            if (((unint64_t)v58 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
            {
              a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v58, 0, a4, a5, a6, a7, a8);
            }
            JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, a3, v19, a4, a5, a6, a7, a8);
            v18 = 10;
            do
            {
LABEL_25:
              v34 = __ldaxr((unsigned int *)v13);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, (unsigned int *)v13));
            if (!v35)
            {
              atomic_store(1u, (unsigned int *)v13);
              v45 = atomic_load((unint64_t *)(v13 + 16));
              if (v45)
              {
                v46 = *(_QWORD *)(v13 + 8);
                if (!v46 || (*(_BYTE *)(v46 + 16) & 4) != 0 || *(_QWORD *)(v46 + 8) != v45)
                  WTF::fastFree(v45, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v47 = *(WTF::StringImpl **)(v13 + 8);
              *(_QWORD *)(v13 + 8) = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                {
                  WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
                }
                else
                {
                  *(_DWORD *)v47 -= 2;
                }
              }
              WTF::fastFree(v13, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            return v18;
          }
          if (v18)
            goto LABEL_25;
        }
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_18;
      }
    }
  }
  v13 = 0;
LABEL_18:
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x4500000002;
  *(_QWORD *)(v22 + 8) = "hasProperty callback returned true for a property that doesn't exist.";
  *(_DWORD *)(v22 + 16) = 4;
  v58 = (WTF::StringImpl *)v22;
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(JSC::Heap ***)(a1 + 56);
  if ((v23 & 1) != 0)
  {
    v48 = *(uint64_t (**)(uint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v49 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v49 = (uint64_t *)(a1 - 16);
    v59 = *v49;
    v60 = a1;
    v61 = a1 + 144;
    v23 = v48(&v59);
  }
  v25 = JSC::ErrorInstance::create(v24, v23, &v58, 0, 0, 0, 3, 1);
  v32 = (JSC::Exception *)v25;
  if ((v25 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
  {
    v32 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
  }
  v18 = (uint64_t)JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v32, v31, v26, v27, v28, v29, v30);
  v33 = v58;
  v58 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      if (v13)
        goto LABEL_25;
      return v18;
    }
    *(_DWORD *)v33 -= 2;
  }
  if (v13)
    goto LABEL_25;
  return v18;
}

uint64_t JSC::staticFunctionGetterJSNonFinalObjectCallbackObject(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, const WTF::String *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int OwnPropertySlotByIndex;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  OpaqueJSClass *i;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int j;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  unint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t **v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const WTF::String *v89;
  unint64_t ReferenceError;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t (*v115)(unint64_t);
  uint64_t v116;
  unint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  int v121;
  char v122;
  JSC::VM *v123;
  char v124;
  int8x16_t **v125;
  uint64_t v126;
  WTF::StringImpl *v127[2];
  int v128;
  int v129;
  uint64_t v130;

  v8 = a3;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v117 = 0xFFFFFFFF00000000;
  v119 = 0;
  v120 = 0;
  v118 = (_DWORD *)a2;
  v121 = 196608;
  v122 = 0;
  v125 = 0;
  v126 = 0;
  v123 = v11;
  ++*((_DWORD *)v11 + 1);
  v124 = 1;
  if (!(a3 >> 4))
    goto LABEL_36;
  v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    goto LABEL_36;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v13)
  {
    v24 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v24 || *(_BYTE *)(v24 + 5) != 1 && *(_DWORD *)(v24 + 80) < 2u)
      goto LABEL_36;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v11, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
    if (!v13)
      goto LABEL_36;
  }
  if (!*(_DWORD *)(v13 + 24))
    goto LABEL_36;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v16 = *(unsigned int *)(v13 + 8);
  v17 = *(_DWORD *)(v8 + 16);
  if ((v14 & 1) != 0)
  {
    if ((v17 & 0x20) != 0)
      v17 = *(_DWORD *)(v8 + 32);
    v18 = *(_DWORD *)(v13 + 12);
    v19 = (v17 >> 8) & *(_QWORD *)&v18;
    v20 = *(unsigned __int8 *)(v15 + v19);
    if (*(_BYTE *)(v15 + v19))
    {
      v21 = v15 + v16;
      v22 = 1;
      while (1)
      {
        v23 = *(_QWORD *)(v21 + 8 * (v20 - 1));
        if (v8 == (v23 & 0xFFFFFFFFFFFFLL))
          break;
        v19 = ((_DWORD)v19 + v22) & v18;
        v20 = *(unsigned __int8 *)(v15 + v19);
        ++v22;
        if (!*(_BYTE *)(v15 + v19))
          goto LABEL_36;
      }
      a6 = (v23 >> 16) & 0xFF00000000 | HIBYTE(v23);
      goto LABEL_18;
    }
LABEL_36:
    if ((*(_BYTE *)(a2 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v11, v8, (uint64_t)&v115) & 1) != 0)
    {
      goto LABEL_66;
    }
    if (v8)
    {
      v35 = *(_DWORD *)(v8 + 16);
      if ((v35 & 0x20) == 0)
      {
        v36 = *(_BYTE **)(v8 + 8);
        v37 = *(unsigned int *)(v8 + 4);
        if ((v35 & 4) != 0)
        {
          if ((_DWORD)v37)
          {
            a3 = *v36 - 48;
            if (a3 <= 9 && (v37 < 2 || *v36 != 48))
            {
              v112 = v36 + 1;
              v113 = v37 - 1;
              while (v113)
              {
                if (a3 > 0x19999999)
                  goto LABEL_42;
                v114 = *v112 - 48;
                if (v114 > 9)
                  goto LABEL_42;
                OwnPropertySlotByIndex = 0;
                v45 = __CFADD__(v114, 10 * a3);
                a3 = v114 + 10 * (_DWORD)a3;
                ++v112;
                --v113;
                if (v45)
                  goto LABEL_43;
              }
LABEL_130:
              if ((_DWORD)a3 != -1)
              {
                OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a2, (uint64_t)a1, (const WTF::StringImpl *)a3, (uint64_t)&v115, (uint64_t)a5, a6, a7, a8);
                goto LABEL_43;
              }
            }
          }
        }
        else if ((_DWORD)v37)
        {
          a3 = *(unsigned __int16 *)v36 - 48;
          if (a3 <= 9 && (*(_WORD *)v36 != 48 || v37 <= 1))
          {
            v42 = (unsigned __int16 *)(v36 + 2);
            v43 = v37 - 1;
            while (v43)
            {
              if (a3 > 0x19999999)
                goto LABEL_42;
              v44 = *v42 - 48;
              if (v44 > 9)
                goto LABEL_42;
              OwnPropertySlotByIndex = 0;
              v45 = __CFADD__(v44, 10 * a3);
              a3 = v44 + 10 * (_DWORD)a3;
              ++v42;
              --v43;
              if (v45)
                goto LABEL_43;
            }
            goto LABEL_130;
          }
        }
      }
    }
LABEL_42:
    OwnPropertySlotByIndex = 0;
    goto LABEL_43;
  }
  if ((v17 & 0x20) != 0)
    v17 = *(_DWORD *)(v8 + 32);
  v29 = *(_DWORD *)(v13 + 12);
  v30 = v29 & (v17 >> 8);
  v31 = *(_DWORD *)(v15 + 4 * v30);
  if (!v31)
    goto LABEL_36;
  v32 = v15 + 4 * v16;
  v33 = 1;
  while (1)
  {
    v34 = (v31 - 1);
    if (*(_QWORD *)(v32 + 16 * v34) == v8)
      break;
    v30 = (v30 + v33) & v29;
    v31 = *(_DWORD *)(v15 + 4 * v30);
    ++v33;
    if (!v31)
      goto LABEL_36;
  }
  a6 = *(unsigned int *)(v32 + 16 * v34 + 8) | ((unint64_t)*(unsigned __int8 *)(v32 + 16 * v34 + 12) << 32);
LABEL_18:
  if ((_DWORD)a6 == -1)
    goto LABEL_36;
  a5 = (const WTF::String *)HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v25 = a2 + 16;
    v26 = a6 << 32;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 8) - 8;
    v26 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v27 = *(unsigned __int8 *)(a4 + 5);
  if (v27 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v11, (uint64_t)&v115, a4, SHIDWORD(a6), a6);
LABEL_66:
    OwnPropertySlotByIndex = 1;
    goto LABEL_43;
  }
  if (v27 != 6)
  {
LABEL_24:
    v115 = (uint64_t (*)(unint64_t))a4;
    v119 = (_DWORD *)a2;
    v117 = __PAIR64__(a6, HIDWORD(a6));
    OwnPropertySlotByIndex = 1;
    LOWORD(v121) = 257;
    goto LABEL_43;
  }
  v76 = *(_DWORD *)(v12 + 16) & 3;
  v77 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v79 = *(int8x16_t ***)(a4 + 24);
    v78 = *(_QWORD *)(a4 + 32);
    v115 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v116 = v77;
    LODWORD(v117) = HIDWORD(a6);
    v119 = (_DWORD *)a2;
    BYTE1(v121) = 3;
    OwnPropertySlotByIndex = 1;
    if (v76 != 2)
      LOBYTE(v121) = 1;
    HIBYTE(v121) = 1;
    v125 = v79;
    v126 = v78;
  }
  else
  {
    v115 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v116 = v77;
    LODWORD(v117) = HIDWORD(a6);
    v119 = (_DWORD *)a2;
    OwnPropertySlotByIndex = 1;
    BYTE1(v121) = 3;
    if (v76 != 2)
      LOBYTE(v121) = 1;
  }
LABEL_43:
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, a4, (uint64_t)a5, a6, a7, a8))
  {
    v39 = 0;
  }
  else
  {
    if (v124)
    {
      v38 = *((_DWORD *)v123 + 1);
      if (!v38)
      {
        __break(0xC471u);
        JUMPOUT(0x197F473C0);
      }
      *((_DWORD *)v123 + 1) = v38 - 1;
      v123 = 0;
      v124 = 0;
    }
    if (OwnPropertySlotByIndex)
    {
      if (BYTE1(v121) == 1)
      {
        v39 = (uint64_t)v115;
      }
      else
      {
        if (BYTE1(v121) == 2)
        {
          v46 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v115, a1, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
        else
        {
          v47 = (unint64_t)v119;
          v48 = *(_QWORD *)(16 * (*v119 & 0xFFFFFFFE) + 0x28);
          if ((v117 & 0x20) != 0)
            v47 = (unint64_t)v118;
          if (HIBYTE(v121) != 1)
            goto LABEL_81;
          if ((v47 & 0xFFFE000000000002) != 0)
            goto LABEL_118;
          v49 = *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C);
          v50 = *(_DWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C) != 0;
          v51 = 16 * v49;
          if ((_DWORD)v49)
            v52 = v125 == (int8x16_t **)v51;
          else
            v52 = 1;
          if (!v52)
          {
            do
            {
              v51 = *(_QWORD *)(v51 + 16);
              v50 = v51 != 0;
            }
            while ((int8x16_t **)v51 != v125 && v51 != 0);
          }
          if (!v50)
          {
LABEL_118:
            v127[0] = *((WTF::StringImpl **)a1 + 7);
            v46 = JSC::throwDOMAttributeGetterTypeError(v48, v127, v125, (WTF::StringImpl *)v8);
          }
          else
          {
LABEL_81:
            v46 = v115(v48);
          }
        }
        v39 = v46;
      }
    }
    else
    {
      if (v8)
      {
        for (i = *(OpaqueJSClass **)(*(_QWORD *)(a2 + 16) + 8); i; i = (OpaqueJSClass *)*((_QWORD *)i + 1))
        {
          OpaqueJSClass::contextData(i, a1, a3, a4, (uint64_t)a5, a6, a7, a8);
          v56 = *(uint64_t **)(v55 + 16);
          if (v56)
          {
            v57 = *v56;
            if (*v56)
            {
              v58 = *(_DWORD *)(v57 - 8);
              v59 = *(_DWORD *)(v8 + 16);
              if (v59 < 0x100)
                v60 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v8);
              else
                v60 = v59 >> 8;
              for (j = 0; ; v60 = j + v62)
              {
                v62 = v60 & v58;
                v63 = *(WTF **)(v57 + 16 * v62);
                if (!v63)
                  break;
                if (v63 != (WTF *)-1 && WTF::equal(v63, (const WTF::StringImpl *)v8, (const WTF::StringImpl *)a3))
                {
                  v64 = *(_QWORD *)(v57 + 16 * v62 + 8);
                  if (!v64)
                    break;
                  a3 = *(_QWORD *)v64;
                  if (!*(_QWORD *)v64)
                    break;
                  v65 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
                  *(_DWORD *)v8 += 2;
                  v127[0] = (WTF::StringImpl *)v8;
                  v39 = JSC::JSCallbackFunction::create(v11, v65, (JSC::JSGlobalObject *)a3, (JSC::VM *)v127, a5, a6, a7, a8);
                  v74 = v127[0];
                  v127[0] = 0;
                  if (v74)
                  {
                    if (*(_DWORD *)v74 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v74, v66, v67, v68, v69, v70, v71, v72);
                      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                    }
                    else
                    {
                      *(_DWORD *)v74 -= 2;
                    }
                  }
                  v75 = *(unsigned int *)(v64 + 8);
                  v127[0] = 0;
                  v127[1] = (WTF::StringImpl *)a2;
                  v128 = -1;
                  v73.n128_u64[0] = 0x100000001000000;
                  v129 = 0x1000000;
                  v130 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v11, v8, v39, v75, (uint64_t)v127, v71, v72, v73);
                  goto LABEL_50;
                }
                ++j;
              }
            }
          }
        }
      }
      v88 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v88 = 0x4300000002;
      *(_QWORD *)(v88 + 8) = "Static function property defined with NULL callAsFunction callback.";
      *(_DWORD *)(v88 + 16) = 4;
      v127[0] = (WTF::StringImpl *)v88;
      ReferenceError = JSC::createReferenceError((unint64_t)a1, v127, v89);
      v39 = JSC::VM::throwException(v11, a1, ReferenceError, v91, v92, v93, v94, v95);
      v103 = v127[0];
      v127[0] = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
        {
          WTF::StringImpl::~StringImpl(v103, v96, v97, v98, v99, v100, v101, v102);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v103 -= 2;
        }
      }
    }
  }
LABEL_50:
  if (v124)
  {
    v40 = *((_DWORD *)v123 + 1);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197F473E0);
    }
    *((_DWORD *)v123 + 1) = v40 - 1;
  }
  return v39;
}

uint64_t JSC::callJSGlobalObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v14)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Exception *v31;
  WTF *v32;
  WTF *v34;
  JSC::JSGlobalObject *v35;
  unint64_t v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Exception *v40;
  WTF *v41;
  uint64_t v42;
  _BYTE v43[128];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 5);
  v41 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) != 0 || (v12 = *(unsigned __int8 *)(v11 + 5), v12 < 0x17))
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_28;
    v35 = a2;
    if (v11 >> 49)
    {
      v36 = JSC::constructNumber((uint64_t)this, (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v36 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v11, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFE000000000002) != 0)
    {
      v36 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v41, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(v11 + 5) > 0x16u)
      {
LABEL_39:
        a2 = v35;
        goto LABEL_4;
      }
      v36 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v11 = v36;
    goto LABEL_39;
  }
  if (v12 - 51 <= 5)
LABEL_28:
    v11 = *((_QWORD *)this + 8);
LABEL_4:
  v13 = *(_QWORD *)(v10 + 3296);
  do
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_45;
    v14 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **))(v13 + 80);
  }
  while (!v14);
  v15 = *((int *)a2 + 8) - 1;
  v41 = (WTF *)v43;
  v42 = 16;
  if (v15 >= 0x11)
  {
    v37 = a2;
    if (v15 >> 29)
    {
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x197F47764);
    }
    v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
    LODWORD(v42) = v15;
    v41 = v34;
    v16 = HIDWORD(v42);
    a2 = v37;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v16 = 0;
  }
  v17 = 0x600000000;
  v18 = v15;
  do
  {
    *((_QWORD *)v41 + v16++) = *(_QWORD *)((char *)a2 + (v17 >> 29));
    v17 += 0x100000000;
    --v18;
  }
  while (v18);
  HIDWORD(v42) = v16;
LABEL_13:
  v19 = 0;
  v40 = 0;
  if (this)
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v38, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = v14(this, v10, v11, v15, v41, &v40);
  if (v20)
    v28 = v20;
  else
    v28 = 2;
  if (v39)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v39 + 112), (uint64_t)&v38, v38, v22, v23, v24, v25, v26);
    v30 = (unsigned int *)v39;
    v39 = 0;
    if (v30)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v30, (uint64_t)v21, v29, v22, v23, v24, v25, v26);
  }
  v31 = v40;
  if (v40)
  {
    if (((unint64_t)v40 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
    {
      v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v40, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException(v9, this, v31, v27, v22, v23, v24, v25, v26);
    v28 = 10;
  }
  v32 = v41;
  if (v43 != (_BYTE *)v41 && v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree((unint64_t)v32, v21, (uint64_t)v31, v22, v23, v24, v25, v26);
  }
  return v28;
}

uint64_t JSC::constructJSGlobalObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;
  uint64_t (*v12)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  JSC::Exception *v28;
  WTF *v29;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::Exception *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[128];

  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 3296) + 8);
  if (!v9)
  {
LABEL_5:
    __break(0xC471u);
    goto LABEL_29;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v12 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **))(v9 + 88);
    if (v12)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_5;
  }
  v13 = *((int *)a2 + 8) - 1;
  v35 = (WTF *)v37;
  v36 = 16;
  if (v13 >= 0x11)
  {
    v31 = a2;
    if (!(v13 >> 29))
    {
      LODWORD(v36) = v13;
      v35 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
      v14 = HIDWORD(v36);
      a2 = v31;
      goto LABEL_9;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197F4784CLL);
  }
  if (!v13)
    goto LABEL_12;
  v14 = 0;
LABEL_9:
  v15 = 0x600000000;
  v16 = v13;
  do
  {
    *((_QWORD *)v35 + v14++) = *(_QWORD *)((char *)a2 + (v15 >> 29));
    v15 += 0x100000000;
    --v16;
  }
  while (v16);
  HIDWORD(v36) = v14;
LABEL_12:
  v17 = 0;
  v34 = 0;
  if (this)
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v32, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = v12(this, v8, v13, v35, &v34);
  if (v33)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v33 + 112), (uint64_t)&v32, v32, v19, v20, v21, v22, v23);
    v27 = (unsigned int *)v33;
    v33 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v27, (uint64_t)v18, v26, v19, v20, v21, v22, v23);
  }
  v28 = v34;
  if (v34)
  {
    if (((unint64_t)v34 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v11, v34, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v11, this, v28, v25, v19, v20, v21, v22, v23);
    v24 = 10;
  }
  v29 = v35;
  if (v37 != (_BYTE *)v35 && v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree((unint64_t)v29, v18, (uint64_t)v28, v19, v20, v21, v22, v23);
  }
  return v24;
}

uint64_t JSC::callbackGetterJSGlobalObjectCallbackObject(uint64_t a1, uint64_t a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v11;
  JSC::Exception *v12;
  unsigned int *v13;
  uint64_t (*v14)(uint64_t, uint64_t, unsigned int *, WTF::StringImpl **);
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *);
  uint64_t *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v9 = *(JSC::VM **)(a1 + 56);
  if (!a3 || (v11 = *(_QWORD *)(*(_QWORD *)(a2 + 3296) + 8)) == 0)
  {
    v13 = 0;
LABEL_18:
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x4500000002;
    *(_QWORD *)(v22 + 8) = "hasProperty callback returned true for a property that doesn't exist.";
    *(_DWORD *)(v22 + 16) = 4;
    v45 = (WTF::StringImpl *)v22;
    v23 = *(_QWORD *)(a1 + 144);
    v24 = *(JSC::Heap ***)(a1 + 56);
    if ((v23 & 1) != 0)
    {
      v43 = *(uint64_t (**)(uint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
      v44 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v44 = (uint64_t *)(a1 - 16);
      v46 = *v44;
      v47 = a1;
      v48 = a1 + 144;
      v23 = v43(&v46);
    }
    v25 = JSC::ErrorInstance::create(v24, v23, &v45, 0, 0, 0, 3, 1);
    v32 = (JSC::Exception *)v25;
    if ((v25 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
    {
      v32 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
    }
    v18 = (uint64_t)JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v32, v31, v26, v27, v28, v29, v30);
    v33 = v45;
    v45 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        if (v13)
          goto LABEL_25;
        return v18;
      }
      *(_DWORD *)v33 -= 2;
    }
    if (v13)
      goto LABEL_25;
    return v18;
  }
  v12 = a3;
  v13 = 0;
  while (1)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *, WTF::StringImpl **))(v11 + 48);
    if (v14)
      break;
LABEL_15:
    v11 = *(_QWORD *)(v11 + 8);
    if (!v11)
      goto LABEL_18;
  }
  if (!v13)
  {
    *(_DWORD *)v12 += 2;
    v15 = WTF::fastMalloc((WTF *)0x18);
    v13 = (unsigned int *)v15;
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v12;
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
      v16 = 0;
    else
      v16 = *((_QWORD *)v12 + 1);
    *(_QWORD *)(v15 + 16) = v16;
  }
  v45 = 0;
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v46, *(JSC::VM **)(a1 + 56), (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = v14(a1, a2, v13, &v45);
  if (v47)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v47 + 112), (uint64_t)&v46, v46, a4, a5, a6, a7, a8);
    v21 = (unsigned int *)v47;
    v47 = 0;
    if (v21)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v21, (uint64_t)v17, v20, a4, a5, a6, a7, a8);
  }
  a3 = v45;
  if (!v45)
  {
    if (v18)
      goto LABEL_25;
    goto LABEL_15;
  }
  if (((unint64_t)v45 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
  {
    a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v45, 0, a4, a5, a6, a7, a8);
  }
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, a3, v19, a4, a5, a6, a7, a8);
  v18 = 10;
LABEL_25:
  WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v13, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v18;
}

uint64_t JSC::staticFunctionGetterJSGlobalObjectCallbackObject(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  OpaqueJSClass *v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  unint64_t v28;
  JSC::Heap **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  JSC::Exception *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  BOOL v71;
  int v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t (*v84)(JSC::VM **);
  JSC::VM **v85;
  WTF::StringImpl *v86;
  _QWORD v87[2];
  unint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  char v95;
  int8x16_t **v96;
  uint64_t v97;
  JSC::VM *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v11 = *(_QWORD *)(a1 + 56);
  v88 = 0xFFFFFFFF00000000;
  v90 = 0;
  v91 = 0;
  v89 = (_DWORD *)a2;
  v92 = 196608;
  v93 = 0;
  v96 = 0;
  v97 = 0;
  v94 = v11;
  ++*(_DWORD *)(v11 + 4);
  v95 = 1;
  JSC::JSGlobalObject::getOwnPropertySlot(a2, a1, (unint64_t)a3, (uint64_t)v87, a5, a6, a7, a8);
  v19 = v18;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_2;
  v83 = *(_DWORD *)(v11 + 80);
  if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v12, v13, (uint64_t)v14, v15, v16, v17);
  if (*(_QWORD *)(v11 + 16))
  {
    v21 = 0;
  }
  else
  {
LABEL_2:
    if (v95)
    {
      v20 = *(_DWORD *)(v94 + 4);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x197F4800CLL);
      }
      *(_DWORD *)(v94 + 4) = v20 - 1;
      v94 = 0;
      v95 = 0;
    }
    if (v19)
    {
      if (BYTE1(v92) == 1)
      {
        v21 = v87[0];
      }
      else
      {
        if (BYTE1(v92) == 2)
        {
          v46 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v87, (JSC::JSGlobalObject *)a1, (uint64_t)v12, v13, (uint64_t)v14, v15, v16, v17);
        }
        else
        {
          v66 = (unint64_t)v90;
          v67 = *(_QWORD *)(16 * (*v90 & 0xFFFFFFFE) + 0x28);
          if ((v88 & 0x20) != 0)
            v66 = (unint64_t)v89;
          if (HIBYTE(v92) != 1)
            goto LABEL_41;
          if ((v66 & 0xFFFE000000000002) != 0)
            goto LABEL_59;
          v68 = *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C);
          v69 = *(_DWORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C) != 0;
          v70 = 16 * v68;
          if ((_DWORD)v68)
            v71 = v96 == (int8x16_t **)v70;
          else
            v71 = 1;
          if (!v71)
          {
            do
            {
              v70 = *(_QWORD *)(v70 + 16);
              v69 = v70 != 0;
            }
            while ((int8x16_t **)v70 != v96 && v70 != 0);
          }
          if (!v69)
          {
LABEL_59:
            v98 = *(JSC::VM **)(a1 + 56);
            v46 = JSC::throwDOMAttributeGetterTypeError(v67, &v98, v96, a3);
          }
          else
          {
LABEL_41:
            v46 = ((uint64_t (*)(unint64_t))v87[0])(v67);
          }
        }
        v21 = v46;
      }
    }
    else if (a3 && (v22 = *(OpaqueJSClass **)(*(_QWORD *)(a2 + 3296) + 8)) != 0)
    {
      while (1)
      {
        OpaqueJSClass::contextData(v22, (JSC::JSGlobalObject *)a1, (uint64_t)v12, v13, (uint64_t)v14, v15, v16, v17);
        v24 = *(WTF ***)(v23 + 16);
        if (v24)
        {
          v25 = WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(*v24, a3, v12);
          if (v25)
          {
            v26 = v25;
            v12 = *(const WTF::StringImpl **)v25;
            if (*(_QWORD *)v25)
              break;
          }
        }
        v22 = (OpaqueJSClass *)*((_QWORD *)v22 + 1);
        if (!v22)
          goto LABEL_14;
      }
      v55 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      *(_DWORD *)a3 += 2;
      v98 = a3;
      v21 = JSC::JSCallbackFunction::create((JSC::JSCallbackFunction *)v11, v55, v12, (JSC::VM *)&v98, v14, v15, v16, v17);
      v64 = v98;
      v98 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
        {
          WTF::StringImpl::~StringImpl(v64, v56, v57, v58, v59, v60, v61, v62);
          WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        }
        else
        {
          *(_DWORD *)v64 -= 2;
        }
      }
      v65 = *((unsigned int *)v26 + 2);
      v98 = 0;
      v99 = a2;
      v100 = 0x1000000FFFFFFFFLL;
      v63.n128_u64[0] = 0x100000001000000;
      v101 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v11, (unint64_t)a3, v21, v65, (uint64_t)&v98, v61, v62, v63);
    }
    else
    {
LABEL_14:
      v27 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v27 = 0x4300000002;
      *(_QWORD *)(v27 + 8) = "Static function property defined with NULL callAsFunction callback.";
      *(_DWORD *)(v27 + 16) = 4;
      v86 = (WTF::StringImpl *)v27;
      v28 = *(_QWORD *)(a1 + 144);
      v29 = *(JSC::Heap ***)(a1 + 56);
      if ((v28 & 1) != 0)
      {
        v84 = *(uint64_t (**)(JSC::VM **))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v85 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v85 = (JSC::VM **)(a1 - 16);
        v98 = *v85;
        v99 = a1;
        v100 = a1 + 144;
        v28 = v84(&v98);
      }
      v30 = JSC::ErrorInstance::create(v29, v28, &v86, 0, 0, 0, 3, 1);
      v37 = (JSC::Exception *)v30;
      if ((v30 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)))
      {
        v37 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v30, 0, v31, v32, v33, v34, v35);
      }
      v21 = (uint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v37, v36, v31, v32, v33, v34, v35);
      v45 = v86;
      v86 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
  }
  if (v95)
  {
    v73 = *(_DWORD *)(v94 + 4);
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x197F4802CLL);
    }
    *(_DWORD *)(v94 + 4) = v73 - 1;
  }
  return v21;
}

JSC::JSLock::DropAllLocks *JSC::JSCallbackObject<JSC::JSGlobalObject>::create(uint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  JSC::JSLock::DropAllLocks *result;
  unsigned int *v44;
  WTF *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;

  v11 = *(_QWORD **)(a1 + 40392);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::callbackGlobalObjectSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = v11[3];
  if (SlowCase < v11[4])
    goto LABEL_4;
  SlowCase = v11[5];
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v54);
    v11[5] = SlowCase + (int)v54;
LABEL_4:
    v11[3] = SlowCase + 3312;
    goto LABEL_5;
  }
  v55 = (uint64_t)v11;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v55, a1 + 192, 3312, 0, 0, v56, v57, v58);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::JSGlobalObject::JSGlobalObject(SlowCase, a1, a3, 0);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = 0;
  v13[1] = a2;
  v13[2] = 0;
  do
    v20 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v20 + 1, (unsigned int *)a2));
  *(_QWORD *)(SlowCase + 3296) = v13;
  *(_QWORD *)(SlowCase + 3304) = 0;
  JSC::JSGlobalObject::finishCreation((JSC::JSGlobalObject *)SlowCase, (JSC::VM *)a1, v14, v15, v16, v17, v18, v19);
  v28 = 0;
  v29 = 0;
  v30 = *(_QWORD *)(SlowCase + 56);
  v60 = (WTF *)v62;
  v61 = 16;
  v31 = *(_QWORD **)(*(_QWORD *)(SlowCase + 3296) + 8);
  do
  {
    v32 = v31[13] != 0;
    v33 = v31[3];
    v63 = v33;
    if (v33)
    {
      if (v28 == (_DWORD)v61)
      {
        v34 = (_QWORD *)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, v28 + 1, (unint64_t)&v63);
        v28 = HIDWORD(v61);
        *((_QWORD *)v60 + HIDWORD(v61)) = *v34;
      }
      else
      {
        *((_QWORD *)v60 + v28) = v33;
      }
      HIDWORD(v61) = ++v28;
    }
    v29 |= v32;
    v31 = (_QWORD *)v31[1];
  }
  while (v31);
  if ((v29 & 1) != 0)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v30 + 41952) + 2768);
    v36 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v36 = 0x1400000002;
    *(_QWORD *)(v36 + 8) = "[Symbol.toPrimitive]";
    *(_DWORD *)(v36 + 16) = 4;
    v59 = (WTF::StringImpl *)v36;
    v37 = JSC::JSFunction::create(v30, SlowCase, 1, &v59, (uint64_t)JSC::JSCallbackObject<JSC::JSGlobalObject>::customToPrimitive, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v63 = 0;
    v64 = SlowCase;
    v65 = -1;
    v38.n128_u64[0] = 0x100000001000000;
    v66 = 0x1000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v30, v35, v37, 4, (uint64_t)&v63, v39, v40, v38);
    v41 = v59;
    v59 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    v28 = HIDWORD(v61);
  }
  if ((int)v28 < 1)
  {
LABEL_27:
    *(_QWORD *)(SlowCase + 3304) = 16 * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C);
    v45 = v60;
    if (v62 != (_BYTE *)v60)
    {
      if (v60)
      {
        v60 = 0;
        LODWORD(v61) = 0;
        WTF::fastFree((unint64_t)v45, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    return (JSC::JSLock::DropAllLocks *)SlowCase;
  }
  else
  {
    v42 = v28;
    while (1)
    {
      --v42;
      result = JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v63, *(JSC::VM **)(SlowCase + 56), v22, v23, v24, v25, v26, v27);
      if (HIDWORD(v61) <= v42)
        break;
      (*((void (**)(unint64_t, unint64_t))v60 + v42))(SlowCase, SlowCase);
      if (v64)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v64 + 112), (uint64_t)&v63, v63, v23, v24, v25, v26, v27);
        v44 = (unsigned int *)v64;
        v64 = 0;
        if (v44)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v44, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      }
      if ((unint64_t)(v42 + 1) <= 1)
        goto LABEL_27;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = (unint64_t *)((char *)a1 + 40136);
  v19 = 353176599;
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, (uint64_t)&v19, (unint64_t)&JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = (unint64_t *)((char *)a1 + 40136);
  v19 = 357379123;
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, (uint64_t)&v19, (unint64_t)&JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::subspaceForImpl(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  if (a2)
  {
    if (a2 == 1)
      return *(_QWORD *)(a1 + 40408);
    result = 131;
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40408);
    if (v2)
      return v2;
    return (uint64_t)JSC::GCClient::Heap::callbackObjectSpaceSlow((JSC::Heap **)(a1 + 37552));
  }
  return result;
}

void JSC::StringSourceProvider::~StringSourceProvider(JSC::StringSourceProvider *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E357C4B0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = off_1E357C4B0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::StringSourceProvider::hash(JSC::StringSourceProvider *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  v2 = *((_DWORD *)v1 + 4);
  if (v2 < 0x100)
    return WTF::StringImpl::hashSlowCase(v1);
  else
    return v2 >> 8;
}

uint64_t JSC::StringSourceProvider::source(JSC::StringSourceProvider *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 15) + 8);
}

void JSC::SourceProvider::cachedBytecode(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void std::default_delete<JSC::JSCallbackObjectData>::operator()[abi:sn180100](int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  OpaqueJSClass *v25;

  if (this)
  {
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v25 = (OpaqueJSClass *)v9;
      WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    v12 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *((unsigned int *)v13 - 1);
        if ((_DWORD)v14)
        {
          v15 = *v12;
          do
          {
            v16 = *v15;
            if (*v15 != (WTF::StringImpl *)-1)
            {
              *v15 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                {
                  WTF::StringImpl::~StringImpl(v16, this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
                }
                else
                {
                  *(_DWORD *)v16 -= 2;
                }
              }
            }
            v15 += 2;
            --v14;
          }
          while (v14);
        }
        WTF::fastFree((unint64_t)(v13 - 2), this, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree((unint64_t)v12, this, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t *WTF::RefPtr<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::operator=(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = atomic_load((unint64_t *)(v10 + 16));
      if (v14)
      {
        v15 = *(_QWORD *)(v10 + 8);
        if (!v15 || (*(_BYTE *)(v15 + 16) & 4) != 0 || *(_QWORD *)(v15 + 8) != v14)
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

WTF *WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(WTF *result, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  WTF *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)this + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(this);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + 2 * v9);
      if (!result)
        break;
      if (result != (WTF *)-1 && WTF::equal(result, this, a3))
        return (WTF *)*((_QWORD *)v4 + 2 * v9 + 1);
      ++i;
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(WTF *result, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  WTF *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)this + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(this);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + 2 * v9);
      if (!result)
        break;
      if (result != (WTF *)-1 && WTF::equal(result, this, a3))
        return (WTF *)*((_QWORD *)v4 + 2 * v9 + 1);
      ++i;
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(uint64_t result, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  int v9;

  if (result)
  {
    v4 = result;
    v5 = *(_DWORD *)(result - 8);
    v6 = *((_DWORD *)this + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(this);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = *(_QWORD *)(v4 + 16 * (v7 & v5));
      if (!result)
        break;
      if (result != -1 && WTF::equal((WTF *)result, this, a3))
        return 1;
      ++i;
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(uint64_t result, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  int v9;

  if (result)
  {
    v4 = result;
    v5 = *(_DWORD *)(result - 8);
    v6 = *((_DWORD *)this + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(this);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = *(_QWORD *)(v4 + 16 * (v7 & v5));
      if (!result)
        break;
      if (result != -1 && WTF::equal((WTF *)result, this, a3))
        return 1;
      ++i;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSGlobalObject>::customToPrimitive(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t result;
  double v24;
  JSC::Exception *v25;
  int v26;
  JSC::Exception *v27;
  JSC::VM *v28;

  v10 = *((_QWORD *)a1 + 7);
  v28 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a2 + 40);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"JSCallbackObject[Symbol.toPrimitive] method called on incompatible |this| value.", 81);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    v12 = 10;
  else
    v12 = *(_QWORD *)(a2 + 48);
  v19 = (JSC::Structure *)JSC::toPreferredPrimitiveType(a1, v12, a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_6;
  v26 = *(_DWORD *)(v10 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_6:
  if ((_DWORD)v19 == 2)
    v20 = 4;
  else
    v20 = 3;
  v21 = *(_QWORD *)(*(_QWORD *)(v11 + 3296) + 8);
  if (v21)
  {
    while (1)
    {
      v22 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v21 + 104);
      if (v22)
      {
        v27 = 0;
        result = v22(a1, v11, v20, &v27);
        v25 = v27;
        if (v27)
        {
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
          {
            v25 = (JSC::Exception *)JSC::Exception::create(v10, v27, 0, v14, v15, v16, v17, v18);
          }
          return (uint64_t)JSC::VM::throwException((JSC::VM *)v10, a1, v25, v24, v14, v15, v16, v17, v18);
        }
        if (result)
          break;
      }
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_14;
    }
    if ((result & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(result + 5) >= 0x17u)
      return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  else
  {
LABEL_14:
    result = v11;
    return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  return result;
}

void Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget(Inspector::RemoteConnectionToTarget *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFRunLoop *v9;
  const __CFString *v10;
  Inspector::JSGlobalObjectDebugger *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  WTF::ThreadSafeWeakPtrControlBlock *v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v9 = (__CFRunLoop *)*((_QWORD *)this + 2);
  if (v9)
  {
    v10 = (const __CFString *)*MEMORY[0x1E0C9B280];
    CFRunLoopRemoveSource(v9, *((CFRunLoopSourceRef *)this + 3), (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    a3 = Inspector::JSGlobalObjectDebugger::runLoopMode(v11);
    if (a3 != v10)
      CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 2), *((CFRunLoopSourceRef *)this + 3), a3);
    v12 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
      CFRelease(v12);
    v13 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v13)
      CFRelease(v13);
  }
  v14 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *((unsigned int *)this + 11);
  if ((_DWORD)v17)
  {
    v21 = (uint64_t *)*((_QWORD *)this + 4);
    v22 = 8 * v17;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v19 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
    CFRelease(v19);
  v20 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
    CFRelease(v20);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void sub_197F48DEC(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const void *v10;
  const void *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  const void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(const void **)(v8 + 88);
  *(_QWORD *)(v8 + 88) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v8 + 80);
  *(_QWORD *)(v8 + 80) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v8 + 56);
  *(_QWORD *)(v8 + 56) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned int *)(v8 + 44);
  if ((_DWORD)v13)
  {
    v17 = *(uint64_t **)(v8 + 32);
    v18 = 8 * v13;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v14 = *(_QWORD *)(v8 + 32);
  if (v14)
  {
    *(_QWORD *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(const void **)(v8 + 24);
  *(_QWORD *)(v8 + 24) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = 0;
  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

uint64_t Inspector::RemoteConnectionToTarget::targetIdentifier(Inspector::RemoteConnectionToTarget *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v23;

  v8 = *((_QWORD *)this + 7);
  if (!v8)
    goto LABEL_16;
  v9 = *((_QWORD *)this + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8);
LABEL_6:
  if (*(_QWORD *)(v8 + 24))
    ++*(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (v9)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v8, 0, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
LABEL_12:
    v12 = *(_DWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_19;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13);
LABEL_19:
    v17 = *(_QWORD *)(v13 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v13 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v23 = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v20 = v23 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v15 = v12 >> 8;
    v21 = __ldxr((unsigned __int8 *)v13);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (!v18)
          goto LABEL_27;
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13, 0, a3, a4, a5, a6, a7, a8);
    if (!v18)
    {
LABEL_27:
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (!v20)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_31:
    v16 = 0x100000000;
    return v16 | v12 | (v15 << 8);
  }
LABEL_16:
  v15 = 0;
  v16 = 0;
  LOBYTE(v12) = 0;
  return v16 | v12 | (v15 << 8);
}

CFTypeRef Inspector::RemoteConnectionToTarget::connectionIdentifier(Inspector::RemoteConnectionToTarget *this)
{
  return (id)CFMakeCollectable((CFTypeRef)-[Inspector::RemoteConnectionToTarget copy](this, "copy"));
}

void Inspector::RemoteConnectionToTarget::dispatchAsyncOnTarget(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __CFRunLoop *Main;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[6];
  uint64_t v27;

  if (*(_QWORD *)(a1 + 16))
  {
    v10 = (unsigned __int8 *)(a1 + 48);
    if (__ldaxr((unsigned __int8 *)(a1 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_13;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 48);
LABEL_13:
    v15 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 40))
    {
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(a1 + 32, (unint64_t)a2);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *a2;
      *a2 = 0;
      *(_QWORD *)(v21 + 8 * v15) = v22;
      *(_DWORD *)(a1 + 44) = v15 + 1;
    }
    v16 = __ldxr(v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, v10))
        goto LABEL_20;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_20:
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 24));
    CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 16));
    return;
  }
  if (!WebCoreWebThreadIsEnabled || !WebCoreWebThreadIsEnabled())
  {
    if (__ldaxr(_MergedGlobals_27))
    {
      __clrex();
    }
    else if (!__stxr(1u, _MergedGlobals_27))
    {
      goto LABEL_23;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_27);
LABEL_23:
    v17 = qword_1ECF58578;
    v18 = *(unsigned int *)(qword_1ECF58578 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(qword_1ECF58578 + 8))
    {
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(qword_1ECF58578, (unint64_t)a2);
    }
    else
    {
      v23 = *(_QWORD *)qword_1ECF58578;
      v24 = *a2;
      *a2 = 0;
      *(_QWORD *)(v23 + 8 * v18) = v24;
      *(_DWORD *)(v17 + 12) = v18 + 1;
    }
    v19 = __ldxr(_MergedGlobals_27);
    if (v19 == 1)
    {
      if (!__stlxr(0, _MergedGlobals_27))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_27, 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_1ECF58580);
    Main = CFRunLoopGetMain();
    CFRunLoopWakeUp(Main);
    return;
  }
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3812000000;
  v26[3] = __Block_byref_object_copy__0;
  v26[4] = __Block_byref_object_dispose__0;
  v12 = *a2;
  *a2 = 0;
  v26[5] = 0;
  v27 = v12;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN9Inspector24RemoteConnectionToTarget21dispatchAsyncOnTargetEON3WTF8FunctionIFvvEEE_block_invoke;
  v25[3] = &unk_1E357C728;
  v25[4] = v26;
  WebCoreWebThreadRun(v25);
  _Block_object_dispose(v26, 8);
  v13 = v27;
  v27 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void sub_197F4926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;

  _Block_object_dispose(&a14, 8);
  v21 = a20;
  a20 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN9Inspector24RemoteConnectionToTarget21dispatchAsyncOnTargetEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t Inspector::RemoteConnectionToTarget::setup(Inspector::RemoteConnectionToTarget *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  int v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;

  v8 = a3;
  v9 = (char)a2;
  v11 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 12);
LABEL_5:
  v13 = *((_QWORD *)this + 7);
  if (!v13)
    goto LABEL_26;
  v14 = *((_QWORD *)this + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13);
LABEL_10:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 != 1)
  {
    __clrex();
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13, 0, a3, a4, a5, a6, a7, a8);
    if (v14)
      goto LABEL_16;
LABEL_26:
    v32 = 0;
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_25;
  if (!v14)
    goto LABEL_26;
LABEL_16:
  v17 = Inspector::RemoteConnectionToTarget::targetIdentifier(this, a2, a3, a4, a5, a6, a7, a8);
  v18 = (unsigned int *)((char *)this + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = WTF::fastMalloc((WTF *)0x20);
  v27 = 0;
  *(_QWORD *)v20 = &off_1E357C940;
  *(_QWORD *)(v20 + 8) = this;
  if (v17 > 0x100000000)
    v27 = v17;
  *(_DWORD *)(v20 + 16) = v27;
  *(_BYTE *)(v20 + 20) = v9;
  *(_BYTE *)(v20 + 21) = v8;
  *(_QWORD *)(v20 + 24) = this;
  v41 = v20;
  Inspector::RemoteConnectionToTarget::dispatchAsyncOnTarget((uint64_t)this, &v41, v21, v22, v23, v24, v25, v26);
  v29 = v41;
  v41 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v30))
  {
    goto LABEL_29;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v30);
LABEL_29:
  v33 = *(_QWORD *)(v30 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v30 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v40 = *(_QWORD *)(v30 + 16);
    v35 = *(_QWORD *)(v30 + 24);
    *(_QWORD *)(v30 + 24) = 0;
    v36 = v40 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v30);
  if (v37 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v30))
    {
      if (!v34)
        goto LABEL_37;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v30, 0, a3, a4, a5, a6, a7, a8);
  if (!v34)
  {
LABEL_37:
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (!v36)
      WTF::fastFree(v30, v28, a3, a4, a5, a6, a7, a8);
  }
LABEL_41:
  v32 = 1;
LABEL_42:
  v38 = __ldxr(v11);
  if (v38 == 1)
  {
    if (!__stlxr(0, v11))
      return v32;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return v32;
}

void sub_197F49578(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v13 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_8:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v21 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v21 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_15:
        if (!v16)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
        v20 = __ldxr(v10);
        if (v20 == 1)
        {
          if (!__stlxr(0, v10))
LABEL_25:
            _Unwind_Resume(exception_object);
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13);
  goto LABEL_8;
}

void Inspector::RemoteConnectionToTarget::targetClosed(Inspector::RemoteConnectionToTarget *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  int v12;

  v9 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 12);
LABEL_5:
  v11 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 8) = 0;
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F49724(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteConnectionToTarget::close(Inspector::RemoteConnectionToTarget *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  int v14;
  char v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v9 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 12);
LABEL_5:
  v11 = *((_QWORD *)this + 7);
  if (!v11)
  {
    v12 = 0;
LABEL_22:
    v15 = 1;
    goto LABEL_23;
  }
  v12 = *((_QWORD *)this + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11);
LABEL_11:
  if (*(_QWORD *)(v11 + 24))
    ++*(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (v12)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v11, 0, a3, a4, a5, a6, a7, a8);
  if (!v12)
  {
LABEL_21:
    LODWORD(v11) = 0;
    goto LABEL_22;
  }
LABEL_17:
  LODWORD(v11) = *(_DWORD *)(v12 + 16);
  v15 = 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
    *(_BYTE *)(v12 + 21) = 1;
LABEL_23:
  v16 = (unsigned int *)((char *)this + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v18 = &off_1E357C968;
  *(_QWORD *)(v18 + 8) = this;
  *(_DWORD *)(v18 + 16) = v11;
  *(_QWORD *)(v18 + 24) = this;
  v42 = v18;
  Inspector::RemoteConnectionToTarget::dispatchAsyncOnTarget((uint64_t)this, &v42, v19, v20, v21, v22, v23, v24);
  v32 = v42;
  v42 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if ((v15 & 1) == 0)
  {
    v33 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_32;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v33);
LABEL_32:
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v41 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v41 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
        if (v36)
          goto LABEL_44;
LABEL_40:
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (!v38)
          WTF::fastFree(v33, v25, v26, v27, v28, v29, v30, v31);
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v33, 0, v26, v27, v28, v29, v30, v31);
    if (v36)
      goto LABEL_44;
    goto LABEL_40;
  }
LABEL_44:
  v40 = __ldxr(v9);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v9))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v26, v27, v28, v29, v30, v31);
}

void sub_197F4998C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;

  v13 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_6:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v21 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v21 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_13:
        if (!v16)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
        v20 = __ldxr(v10);
        if (v20 == 1)
        {
          if (!__stlxr(0, v10))
LABEL_23:
            _Unwind_Resume(exception_object);
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13);
  goto LABEL_6;
}

void Inspector::RemoteConnectionToTarget::sendMessageToFrontend(Inspector::RemoteConnectionToTarget *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned __int8 v20;

  v10 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 12);
LABEL_5:
  v18 = Inspector::RemoteConnectionToTarget::targetIdentifier(this, a2, a3, a4, a5, a6, a7, a8);
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v12, v13, v14, v15, v16, v17);
  if (HIDWORD(v18))
  {
    if (qword_1ECF58568 != -1)
      dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
    v20 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
    if ((v20 & 1) == 0 && qword_1ECF58570 != -1)
      dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
    Inspector::RemoteInspector::sendMessageToRemote((Inspector::RemoteInspector *)&unk_1ECF58588, v18, (WTF::StringImpl **)a2, v13, v14, v15, v16, v17);
  }
}

void sub_197F49BD0(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void *Inspector::RemoteInspector::singleton(Inspector::RemoteInspector *this)
{
  unsigned __int8 v1;

  if (qword_1ECF58568 != -1)
    dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
  v1 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
  if ((v1 & 1) == 0 && qword_1ECF58570 != -1)
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
  return &unk_1ECF58588;
}

void Inspector::RemoteInspector::sendMessageToRemote(Inspector::RemoteInspector *this, int a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __CFString *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  xpc_connection_t *v31;
  uint64_t v32;
  const __CFString *v33;
  xpc_connection_t *v34;
  int v35;
  unsigned __int8 *v36;
  id v37;
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[6];

  v41[4] = *MEMORY[0x1E0C80C00];
  v11 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v11))
    goto LABEL_4;
LABEL_5:
  v36 = v11;
  if (*((_QWORD *)this + 5))
  {
    v13 = *((_QWORD *)this + 3);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
      v17 = v14 & (v16 ^ HIWORD(v16));
      v18 = *(_DWORD *)(v13 + 16 * v17);
      if (v18 == a2)
      {
LABEL_11:
        v20 = *(_QWORD *)(v13 + 16 * v17 + 8);
        if (v20)
        {
          if (*a3)
          {
            WTF::StringImpl::createCFString(*a3, (CFStringRef *)&v37);
            v21 = (__CFString *)v37;
          }
          else
          {
            v21 = &stru_1E35BF3F0;
          }
          v22 = (void *)-[__CFString dataUsingEncoding:](v21, "dataUsingEncoding:", 4, v11);
          v23 = objc_msgSend(v22, "length");
          if (*((_BYTE *)this + 128) && (v24 = v23, v23 >= 0x200000))
          {
            v25 = 0;
            v26 = v23;
            do
            {
              if (v26 >= 0x200000)
                v27 = 0x200000;
              else
                v27 = v26;
              v28 = (void *)MEMORY[0x19AEBB88C]();
              v29 = v26 - 0x200000;
              if (v26 >= 0x200000)
                v30 = 0x200000;
              else
                v30 = v26;
              v31 = (xpc_connection_t *)*((_QWORD *)this + 5);
              v38[0] = CFSTR("WIRRawDataKey");
              v32 = objc_msgSend(v22, "subdataWithRange:", v25, v30);
              v33 = CFSTR("WIRMessageDataTypeChunk");
              if (v24 - v27 == v25)
                v33 = CFSTR("WIRMessageDataTypeFinalChunk");
              v39[0] = v32;
              v39[1] = v33;
              v38[1] = CFSTR("WIRMessageDataTypeKey");
              v38[2] = CFSTR("WIRConnectionIdentifierKey");
              v39[2] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(v20 + 80), "copy"));
              v38[3] = CFSTR("WIRDestinationKey");
              v39[3] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(v20 + 88), "copy"));
              Inspector::RemoteInspectorXPCConnection::sendMessage(v31, (NSString *)CFSTR("WIRRawDataMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 4));
              objc_autoreleasePoolPop(v28);
              v25 += 0x200000;
              v26 = v29;
            }
            while (v25 < v24);
          }
          else
          {
            v34 = (xpc_connection_t *)*((_QWORD *)this + 5);
            v40[0] = CFSTR("WIRRawDataKey");
            v40[1] = CFSTR("WIRMessageDataTypeKey");
            v41[0] = v22;
            v41[1] = CFSTR("WIRMessageDataTypeFull");
            v40[2] = CFSTR("WIRConnectionIdentifierKey");
            v41[2] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(v20 + 80), "copy"));
            v40[3] = CFSTR("WIRDestinationKey");
            v41[3] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(v20 + 88), "copy"));
            Inspector::RemoteInspectorXPCConnection::sendMessage(v34, (NSString *)CFSTR("WIRRawDataMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 4));
          }
        }
      }
      else
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v14;
          v18 = *(_DWORD *)(v13 + 16 * v17);
          ++v19;
          if (v18 == a2)
            goto LABEL_11;
        }
      }
    }
  }
  v35 = __ldxr(v36);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v36))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v36, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_197F49F8C(_Unwind_Exception *exception_object, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  int v10;

  v10 = __ldxr(a9);
  if (v10 == 1)
  {
    if (!__stlxr(0, a9))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(a9, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteTargetHandleRunSourceWithInfo(Inspector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v9 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 48);
LABEL_5:
  v11 = *((_QWORD *)this + 4);
  v12 = *((unsigned int *)this + 11);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v13 = __ldxr(v9);
  if (v13 == 1)
  {
    if (!__stlxr(0, v9))
    {
      if (!(_DWORD)v12)
        goto LABEL_17;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v12)
    goto LABEL_17;
LABEL_11:
  v14 = 0;
  v15 = 8 * v12;
  do
  {
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(v11 + v14) + 16))(*(_QWORD *)(v11 + v14), a2);
    v14 += 8;
  }
  while (v15 != v14);
  v16 = (uint64_t *)v11;
  do
  {
    v17 = *v16;
    *v16 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    ++v16;
    v15 -= 8;
  }
  while (v15);
LABEL_17:
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
}

void sub_197F4A0CC(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(v8 + v11);
    *(_QWORD *)(v8 + v11) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v11 += 8;
    if (v9 == v11)
    {
      if (v8)
        WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t Inspector::RemoteInspector::updateFromGlobalNotifyState(Inspector::RemoteInspector *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int out_token;

  out_token = 0;
  result = notify_register_check("com.apple.webinspectord.automatic_inspection_enabled", &out_token);
  if (!(_DWORD)result)
  {
    v4 = 0;
    result = notify_get_state(out_token, &v4);
    v3 = v4;
    *((_BYTE *)this + 132) = v4 & 1;
    *((_BYTE *)this + 129) = v3 < 0;
  }
  return result;
}

void ___ZN9Inspector15RemoteInspector9singletonEv_block_invoke_2(Inspector *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (Inspector::canAccessWebInspectorMachPort(a1))
  {
    if (__ldaxr(byte_1ECF58590))
    {
      __clrex();
    }
    else if (!__stxr(1u, byte_1ECF58590))
    {
LABEL_5:
      Inspector::RemoteInspector::updateFromGlobalNotifyState((Inspector::RemoteInspector *)&unk_1ECF58588);
      v8 = __ldxr(byte_1ECF58590);
      if (v8 == 1)
      {
        if (!__stlxr(0, byte_1ECF58590))
        {
LABEL_10:
          Inspector::RemoteInspector::setPendingMainThreadInitialization((Inspector::RemoteInspector *)&unk_1ECF58588, (void *)1, v2, v3, v4, v5, v6, v7);
          if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
            Inspector::RemoteInspector::initialize((Inspector::RemoteInspector *)&unk_1ECF58588, v9, v10, v11, v12, v13, v14, v15);
          else
            dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF58590, 0, v2, v3, v4, v5, v6, v7);
      goto LABEL_10;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)byte_1ECF58590);
    goto LABEL_5;
  }
}

void sub_197F4A254(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;

  v9 = v8;
  v11 = v9;
  LODWORD(v9) = __ldxr(v9);
  if ((_DWORD)v9 == 1)
  {
    if (!__stlxr(0, v11))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF58590, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

BOOL Inspector::canAccessWebInspectorMachPort(Inspector *this)
{
  getpid();
  return sandbox_check() == 0;
}

void Inspector::RemoteInspector::setPendingMainThreadInitialization(Inspector::RemoteInspector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;

  v8 = (char)a2;
  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  *((_BYTE *)this + 49) = v8;
  if ((v8 & 1) == 0 && !*((_BYTE *)this + 132))
  {
    v12 = *((_QWORD *)this + 17);
    if (v12)
    {
      *((_QWORD *)this + 17) = 0;
      WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v10))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void Inspector::RemoteInspector::initialize(Inspector::RemoteInspector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  char **v21;
  char *v22;

  v9 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v11 = *((unsigned __int8 *)this + 49);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
    {
      if (!v11)
        return;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  if (!v11)
    return;
LABEL_11:
  v13 = atomic_load(&WTF::initializeMainThread(void)::initializeKey);
  if (v13 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeMainThread(void)::initializeKey, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeMainThread(void)::$_0 &&>>);
  }
  v14 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v14 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  v15 = Inspector::RemoteInspector::startEnabled;
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else
  {
    v17 = 1;
    if (!__stxr(1u, v9))
      goto LABEL_19;
  }
  v17 = 0;
LABEL_19:
  if (v15)
  {
    if ((v17 & 1) == 0)
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    if (!*((_BYTE *)this + 112))
    {
      *((_BYTE *)this + 112) = 1;
      notify_register_dispatch("com.apple.webinspectord.available", (int *)this + 27, *((dispatch_queue_t *)this + 12), &__block_literal_global_29);
      notify_post("com.apple.webinspectord.availability_check");
      *((_BYTE *)this + 49) = 0;
    }
  }
  else
  {
    if ((v17 & 1) == 0)
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    *((_BYTE *)this + 49) = 0;
    if (!*((_BYTE *)this + 132))
    {
      v18 = *((_QWORD *)this + 17);
      if (v18)
      {
        *((_QWORD *)this + 17) = 0;
        WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v19 = __ldxr(v9);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v9))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4A568(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void ___ZN9Inspector15RemoteInspector9singletonEv_block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::RemoteInspector::initialize((Inspector::RemoteInspector *)&unk_1ECF58588, a2, a3, a4, a5, a6, a7, a8);
}

Inspector::RemoteInspector *Inspector::RemoteInspector::RemoteInspector(Inspector::RemoteInspector *this)
{
  *(_QWORD *)this = &off_1E357C7B8;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 12) = dispatch_queue_create("com.apple.JavaScriptCore.remote-inspector-xpc", 0);
  *((_QWORD *)this + 13) = 1;
  *((_QWORD *)this + 17) = 0;
  *(_DWORD *)((char *)this + 111) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  *((_BYTE *)this + 132) = 0;
  return this;
}

void Inspector::RemoteInspector::start(Inspector::RemoteInspector *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;

  v9 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  if (!*((_BYTE *)this + 112))
  {
    *((_BYTE *)this + 112) = 1;
    notify_register_dispatch("com.apple.webinspectord.available", (int *)this + 27, *((dispatch_queue_t *)this + 12), &__block_literal_global_29);
    notify_post("com.apple.webinspectord.availability_check");
    *((_BYTE *)this + 49) = 0;
  }
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4A6CC(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspector::updateAutomaticInspectionCandidate(Inspector::RemoteInspector *this, Inspector::RemoteInspectionTarget *a2)
{
  _opaque_pthread_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  dispatch_time_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  dispatch_time_t v34;
  NSObject *global_queue;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v49;
  _QWORD block[5];
  unsigned int v51;
  unsigned int v52;
  _QWORD v53[5];
  _QWORD v54[2];

  v54[1] = *MEMORY[0x1E0C80C00];
  v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)WTF::s_webThreadPthread) && !pthread_main_np()
    || WebCoreWebThreadIsLockedOrDisabled && !WebCoreWebThreadIsLockedOrDisabled())
  {
    goto LABEL_13;
  }
  v12 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_9;
  }
  if (__stxr(1u, v12))
    goto LABEL_8;
LABEL_9:
  v14 = *((unsigned __int8 *)this + 49);
  v15 = __ldxr(v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, v12))
    {
      if (!v14)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 8, 0, v6, v7, v8, v9, v10, v11);
  if (v14)
LABEL_12:
    Inspector::RemoteInspector::initialize(this, v5, v6, v7, v8, v9, v10, v11);
LABEL_13:
  v52 = *((_DWORD *)a2 + 4);
  v16 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_17:
  if (!Inspector::RemoteInspector::updateTargetMap(this, a2, v6, v7, v8, v9, v10, v11))
    goto LABEL_55;
  if (!*((_BYTE *)this + 132) || !*((_BYTE *)this + 112) && !*((_BYTE *)this + 49))
  {
    if (*((_QWORD *)this + 5) && !*((_BYTE *)this + 114))
    {
      *((_BYTE *)this + 114) = 1;
      v34 = dispatch_time(0, 200000000);
      global_queue = dispatch_get_global_queue(0, 0);
      v53[0] = MEMORY[0x1E0C809B0];
      v53[1] = 3221225472;
      v53[2] = ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke;
      v53[3] = &__block_descriptor_40_e5_v8__0l;
      v53[4] = this;
      dispatch_after(v34, global_queue, v53);
    }
    goto LABEL_55;
  }
  v24 = (uint64_t *)((char *)this + 136);
  WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)this + 17, (int *)&v52, (uint64_t)v53);
  if (*((_QWORD *)this + 5))
  {
    Inspector::RemoteInspector::pushListingsNow(this);
    v54[0] = CFSTR("WIRPageIdentifierKey");
    v53[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v52);
    Inspector::RemoteInspectorXPCConnection::sendMessage(*((xpc_connection_t **)this + 5), (NSString *)CFSTR("WIRAutomaticInspectionCandidateMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v53, v54, 1));
  }
  v25 = dispatch_time(0, 10000000000);
  v26 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN9Inspector15RemoteInspector34updateAutomaticInspectionCandidateEPNS_22RemoteInspectionTargetE_block_invoke;
  block[3] = &__block_descriptor_44_e5_v8__0l;
  block[4] = this;
  v51 = v52;
  dispatch_after(v25, v26, block);
  v33 = __ldxr(v16);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v16))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 8, 0, v27, v28, v29, v30, v31, v32);
  (*(void (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 112))(a2);
  if (__ldaxr(v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_38;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_38:
  v37 = *v24;
  if (*v24)
  {
    v38 = *(_DWORD *)(v37 - 8);
    v39 = 9 * ((v52 + ~(v52 << 15)) ^ ((v52 + ~(v52 << 15)) >> 10));
    v40 = (((v39 ^ (v39 >> 6)) + ~((v39 ^ (v39 >> 6)) << 11)) ^ (((v39 ^ (v39 >> 6)) + ~((v39 ^ (v39 >> 6)) << 11)) >> 16)) & v38;
    v41 = *(_DWORD *)(v37 + 4 * v40);
    if (v41 != v52)
    {
      v42 = 1;
      while (v41 != -1)
      {
        v40 = ((_DWORD)v40 + v42) & v38;
        v41 = *(_DWORD *)(v37 + 4 * v40);
        ++v42;
        if (v41 == v52)
          goto LABEL_45;
      }
      v40 = *(unsigned int *)(v37 - 4);
    }
LABEL_45:
    if (v40 != *(_DWORD *)(v37 - 4))
    {
      *(_DWORD *)(v37 + 4 * v40) = -2;
      ++*(_DWORD *)(*v24 - 16);
      v43 = *v24;
      v44 = *v24 ? *(_DWORD *)(v43 - 12) - 1 : -1;
      *(_DWORD *)(v43 - 12) = v44;
      v45 = *v24;
      if (*v24)
      {
        v46 = 6 * *(_DWORD *)(v45 - 12);
        v47 = *(_DWORD *)(v45 - 4);
        if (v46 < v47 && v47 >= 9)
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 17, v47 >> 1, 0);
      }
    }
  }
LABEL_55:
  v49 = __ldxr(v16);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stlxr(0, v16))
LABEL_59:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 8, 0, v18, v19, v20, v21, v22, v23);
}

void sub_197F4AB14(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspector::pushListingsSoon(Inspector::RemoteInspector *this)
{
  dispatch_time_t v2;
  NSObject *global_queue;
  _QWORD block[5];

  if (*((_QWORD *)this + 5))
  {
    if (!*((_BYTE *)this + 114))
    {
      *((_BYTE *)this + 114) = 1;
      v2 = dispatch_time(0, 200000000);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = this;
      dispatch_after(v2, global_queue, block);
    }
  }
}

uint64_t *WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 != -1)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v22 = 0;
        v21 = v6 + 4 * v26;
        goto LABEL_11;
      }
      if (v14 == -2)
        v23 = v13;
      v12 = (v12 + v24) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v24;
    }
    while (*v13 != -1);
    if (v23)
    {
      *v23 = -1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v23;
    }
  }
  *v13 = v9;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_10;
    goto LABEL_24;
  }
  if (3 * v20 <= 4 * v19)
  {
    if (!(_DWORD)v20)
    {
      v25 = 8;
LABEL_27:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, v25, v13);
      v13 = (int *)result;
      v17 = *v4;
      if (*v4)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_10;
    }
LABEL_24:
    v25 = (_DWORD)v20 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v20));
    goto LABEL_27;
  }
LABEL_10:
  v21 = v17 + 4 * v20;
  v22 = 1;
LABEL_11:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

void Inspector::RemoteInspector::pushListingsNow(Inspector::RemoteInspector *this)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSDictionary *v10;
  const __CFString *v11;
  uint64_t v12;

  if (!*((_QWORD *)this + 5))
    return;
  *((_BYTE *)this + 114) = 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 16 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *((_QWORD *)this + 4);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *((_QWORD *)this + 4);
        while ((*(_DWORD *)v6 + 1) <= 1)
        {
          v6 += 16;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v6 = v3 + 16 * v4;
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = v3 + 16 * v4;
LABEL_12:
  if (v3)
    v8 = v3 + 16 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    objc_msgSend(v2, "setObject:forKey:", *(_QWORD *)(v6 + 8), objc_msgSend((id)objc_msgSend(*(id *)(v6 + 8), "objectForKey:", CFSTR("WIRPageIdentifierKey")), "stringValue"));
    v9 = v6 + 16;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((*(_DWORD *)v6 + 1) <= 1)
      {
        v6 += 16;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v10 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  -[NSDictionary setObject:forKey:](v10, "setObject:forKey:", v2, CFSTR("WIRListingKey"));
  if (*((_BYTE *)this + 88))
  {
    if ((*((_BYTE *)this + 64) & 1) != 0)
      v11 = CFSTR("WIRAutomationAvailabilityAvailable");
    else
      v11 = CFSTR("WIRAutomationAvailabilityNotAvailable");
  }
  else
  {
    v11 = CFSTR("WIRAutomationAvailabilityUnknown");
  }
  -[NSDictionary setObject:forKey:](v10, "setObject:forKey:", v11, CFSTR("WIRAutomationAvailabilityKey"));
  if (*((_BYTE *)this + 88))
    v12 = *((_BYTE *)this + 64) & 1;
  else
    v12 = 0;
  -[NSDictionary setObject:forKey:](v10, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v12), CFSTR("WIRRemoteAutomationEnabledKey"));
  Inspector::RemoteInspectorXPCConnection::sendMessage(*((xpc_connection_t **)this + 5), (NSString *)CFSTR("WIRListingMessage"), v10);
  if (!v10)
  {
    if (!v2)
      return;
LABEL_33:
    CFRelease(v2);
    return;
  }
  CFRelease(v10);
  if (v2)
    goto LABEL_33;
}

void sub_197F4AFC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void Inspector::RemoteInspector::sendAutomaticInspectionCandidateMessage(xpc_connection_t **this, uint64_t a2)
{
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("WIRPageIdentifierKey");
  v4[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  Inspector::RemoteInspectorXPCConnection::sendMessage(this[5], (NSString *)CFSTR("WIRAutomaticInspectionCandidateMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1));
}

void ___ZN9Inspector15RemoteInspector34updateAutomaticInspectionCandidateEPNS_22RemoteInspectionTargetE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = (unsigned __int8 *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)(v9 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 8);
LABEL_5:
  v14 = *(_QWORD *)(v9 + 136);
  v13 = (uint64_t *)(v9 + 136);
  v12 = v14;
  if (v14)
  {
    v15 = *(_DWORD *)(v12 - 8);
    v16 = *(_DWORD *)(a1 + 40);
    v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
    v18 = (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16)) & v15;
    v19 = *(_DWORD *)(v12 + 4 * v18);
    if (v19 != v16)
    {
      v20 = 1;
      while (v19 != -1)
      {
        v18 = ((_DWORD)v18 + v20) & v15;
        v19 = *(_DWORD *)(v12 + 4 * v18);
        ++v20;
        if (v19 == v16)
          goto LABEL_12;
      }
      v18 = *(unsigned int *)(v12 - 4);
    }
LABEL_12:
    if (v18 != *(_DWORD *)(v12 - 4))
    {
      *(_DWORD *)(v12 + 4 * v18) = -2;
      ++*(_DWORD *)(*v13 - 16);
      v21 = *v13;
      if (*v13)
        v22 = *(_DWORD *)(v21 - 12) - 1;
      else
        v22 = -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v13;
      if (*v13)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v13, v25 >> 1, 0);
      }
      WTFLogAlways("Skipping Automatic Inspection Candidate with pageId(%u) because we failed to receive a response in time.", a2, a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 40));
    }
  }
  v27 = __ldxr(v10);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v10))
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4B21C(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspectorXPCConnection::sendMessage(xpc_connection_t *this, NSString *a2, NSDictionary *a3)
{
  id v6;
  void *v7;
  xpc_object_t v8;

  if (!*((_BYTE *)this + 40))
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v6, "setObject:forKey:", a2, CFSTR("messageName"));
    if (a3)
      objc_msgSend(v6, "setObject:forKey:", a3, CFSTR("userInfo"));
    v7 = (void *)_CFXPCCreateXPCMessageWithCFObject();
    if (v7)
    {
      v8 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_value(v8, "msgData", v7);
      xpc_connection_send_message(this[2], v8);
      if (v8)

    }
    if (v6)
      CFRelease(v6);
  }
}

void sub_197F4B320(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::get(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
      return *(_QWORD *)(result + 16 * v5 + 8);
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          return *(_QWORD *)(result + 16 * v5 + 8);
      }
      return 0;
    }
  }
  return result;
}

void ___ZN9Inspector15RemoteInspector5startEv_block_invoke()
{
  unsigned __int8 v0;

  if (qword_1ECF58568 != -1)
    dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
  v0 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
  if ((v0 & 1) == 0 && qword_1ECF58570 != -1)
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
  Inspector::RemoteInspector::setupXPCConnectionIfNeeded((Inspector::RemoteInspector *)&unk_1ECF58588);
}

void Inspector::RemoteInspector::setupXPCConnectionIfNeeded(Inspector::RemoteInspector *this)
{
  unsigned __int8 *v2;
  xpc_connection_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  xpc_connection_t mach_service;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  _xpc_connection_s *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  _xpc_connection_s *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  dispatch_time_t v38;
  NSObject *global_queue;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  char v44;
  const __CFString *v45;
  uint64_t handler;
  uint64_t v47;
  void *v48;
  void *v49;
  Inspector::RemoteInspector *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v4 = (xpc_connection_t *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_BYTE *)this + 48) = 1;
    Inspector::RemoteInspectorXPCConnection::sendMessage(v4, (NSString *)CFSTR("WIRPingMessage"), 0);
    goto LABEL_44;
  }
  mach_service = xpc_connection_create_mach_service("com.apple.webinspector", *((dispatch_queue_t *)this + 12), 0);
  if (!mach_service)
  {
    WTFLogAlways("RemoteInspector failed to create XPC connection.", v11, v12, v13, v14, v15, v16, v17, v44);
    goto LABEL_44;
  }
  v19 = WTF::fastMalloc((WTF *)0x30);
  v20 = (void *)*((_QWORD *)this + 12);
  *(_DWORD *)(v19 + 8) = 1;
  v21 = (unsigned int *)(v19 + 8);
  *(_QWORD *)v19 = off_1E357C890;
  *(_BYTE *)(v19 + 12) = 0;
  *(_QWORD *)(v19 + 16) = mach_service;
  v22 = mach_service;
  *(_QWORD *)(v19 + 24) = v20;
  if (v20)
  {
    v23 = v20;
    v24 = *(NSObject **)(v19 + 24);
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(v19 + 32) = this;
  *(_BYTE *)(v19 + 40) = 0;
  xpc_connection_set_target_queue(*(xpc_connection_t *)(v19 + 16), v24);
  v25 = MEMORY[0x1E0C809B0];
  v26 = *(_xpc_connection_s **)(v19 + 16);
  handler = MEMORY[0x1E0C809B0];
  v47 = 3221225472;
  v48 = ___ZN9Inspector28RemoteInspectorXPCConnectionC2EPU24objcproto13OS_xpc_object8NSObjectPU28objcproto17OS_dispatch_queueS1_PNS0_6ClientE_block_invoke;
  v49 = &__block_descriptor_40_e33_v16__0__NSObject_OS_xpc_object__8l;
  v50 = (Inspector::RemoteInspector *)v19;
  xpc_connection_set_event_handler(v26, &handler);
  do
    v27 = __ldaxr(v21);
  while (__stlxr(v27 + 1, v21));
  xpc_connection_resume(*(xpc_connection_t *)(v19 + 16));
  v28 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v19;
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  Inspector::RemoteInspectorXPCConnection::sendMessage(*((xpc_connection_t **)this + 5), (NSString *)CFSTR("syn"), 0);
  v32 = *((_QWORD *)this + 17);
  if (v32 && *(_DWORD *)(v32 - 12))
  {
    Inspector::RemoteInspector::pushListingsNow(this);
    v33 = *((_QWORD *)this + 17);
    if (v33)
    {
      v34 = *(unsigned int *)(v33 - 4);
      v35 = (_DWORD *)(v33 + 4 * v34);
      if (*(_DWORD *)(v33 - 12))
      {
        v36 = (_DWORD *)*((_QWORD *)this + 17);
        if ((_DWORD)v34)
        {
          v37 = 4 * v34;
          v36 = (_DWORD *)*((_QWORD *)this + 17);
          while (*v36 >= 0xFFFFFFFE)
          {
            ++v36;
            v37 -= 4;
            if (!v37)
            {
              v36 = v35;
              goto LABEL_34;
            }
          }
        }
        goto LABEL_34;
      }
      v36 = (_DWORD *)(v33 + 4 * v34);
    }
    else
    {
      v36 = 0;
      v34 = 0;
    }
    v35 = (_DWORD *)(v33 + 4 * v34);
LABEL_34:
    if (v33)
      v40 = (_DWORD *)(v33 + 4 * *(unsigned int *)(v33 - 4));
    else
      v40 = 0;
    while (v36 != v40)
    {
      v41 = *v36;
      v45 = CFSTR("WIRPageIdentifierKey");
      handler = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v41);
      Inspector::RemoteInspectorXPCConnection::sendMessage(*((xpc_connection_t **)this + 5), (NSString *)CFSTR("WIRAutomaticInspectionCandidateMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &handler, &v45, 1));
      v42 = v36 + 1;
      v36 = v35;
      if (v42 != v35)
      {
        v36 = v42;
        while (*v36 >= 0xFFFFFFFE)
        {
          if (++v36 == v35)
          {
            v36 = v35;
            break;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (*((_QWORD *)this + 5) && !*((_BYTE *)this + 114))
  {
    *((_BYTE *)this + 114) = 1;
    v38 = dispatch_time(0, 200000000);
    global_queue = dispatch_get_global_queue(0, 0);
    handler = v25;
    v47 = 3221225472;
    v48 = ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke;
    v49 = &__block_descriptor_40_e5_v8__0l;
    v50 = this;
    dispatch_after(v38, global_queue, &handler);
  }
LABEL_43:

LABEL_44:
  v43 = __ldxr(v2);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v2))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v5, v6, v7, v8, v9, v10);
}

void sub_197F4B7EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  void *v9;
  unint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = *(void **)(v10 + 16);
  if (v12)

  WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = __ldxr(v8);
  if (v19 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_8:
      _Unwind_Resume(a1);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, v13, v14, v15, v16, v17, v18);
  goto LABEL_8;
}

uint64_t Inspector::RemoteInspector::stopInternal(uint64_t result, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  unsigned __int8 *v36;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t block;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v52;
  uint64_t v53;

  if (*(_BYTE *)(result + 112))
  {
    v8 = (int)a2;
    v9 = result;
    *(_BYTE *)(result + 112) = 0;
    *(_BYTE *)(result + 114) = 0;
    v10 = *(_QWORD *)(result + 24);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 - 4);
      v12 = v10 + 16 * v11;
      if (*(_DWORD *)(v10 - 12))
      {
        v13 = *(_QWORD *)(result + 24);
        if ((_DWORD)v11)
        {
          v14 = 16 * v11;
          v13 = *(_QWORD *)(result + 24);
          while ((*(_DWORD *)v13 + 1) <= 1)
          {
            v13 += 16;
            v14 -= 16;
            if (!v14)
            {
              v13 = v12;
              break;
            }
          }
        }
LABEL_12:
        if (v10)
          v15 = v10 + 16 * *(unsigned int *)(v10 - 4);
        else
          v15 = 0;
        if (v15 != v13)
        {
          do
          {
            Inspector::RemoteConnectionToTarget::close(*(Inspector::RemoteConnectionToTarget **)(v13 + 8), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v16 = v13 + 16;
            v13 = v12;
            if (v16 != v12)
            {
              v13 = v16;
              while ((*(_DWORD *)v13 + 1) <= 1)
              {
                v13 += 16;
                if (v13 == v12)
                {
                  v13 = v12;
                  break;
                }
              }
            }
          }
          while (v13 != v15);
          v10 = *(_QWORD *)(v9 + 24);
        }
        if (v10)
        {
          *(_QWORD *)(v9 + 24) = 0;
          v17 = *(unsigned int *)(v10 - 4);
          if ((_DWORD)v17)
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_DWORD *)(v10 + 16 * i) != -1)
              {
                v19 = v10 + 16 * i;
                v20 = *(unsigned int **)(v19 + 8);
                *(_QWORD *)(v19 + 8) = 0;
                if (v20)
                {
                  v21 = v20 + 2;
                  do
                  {
                    v22 = __ldaxr(v21);
                    v23 = v22 - 1;
                  }
                  while (__stlxr(v23, v21));
                  if (!v23)
                  {
                    atomic_store(1u, v20 + 2);
                    Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v20, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                  }
                }
              }
            }
          }
          WTF::fastFree(v10 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v32 = *(_QWORD *)(v9 + 24);
          if (v32)
            LODWORD(v32) = *(_DWORD *)(v32 - 12) != 0;
        }
        else
        {
          LODWORD(v32) = 0;
        }
        if (*(unsigned __int8 *)(v9 + 113) != (_DWORD)v32)
          *(_BYTE *)(v9 + 113) = v32;
        v33 = *(_QWORD *)(v9 + 136);
        if (v33)
        {
          *(_QWORD *)(v9 + 136) = 0;
          WTF::fastFree(v33 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v34 = *(_QWORD *)(v9 + 40);
        if (!v34)
          goto LABEL_58;
        if (v8)
        {
          if (v8 != 1)
          {
            *(_QWORD *)(v9 + 40) = 0;
            goto LABEL_54;
          }
          *(_BYTE *)(v34 + 40) = 1;
          *(_QWORD *)(v34 + 32) = 0;
          v35 = *(NSObject **)(v34 + 24);
          block = MEMORY[0x1E0C809B0];
          v50 = 3221225472;
          v51 = ___ZN9Inspector28RemoteInspectorXPCConnection16closeFromMessageEv_block_invoke;
          v52 = &__block_descriptor_40_e5_v8__0l;
          v53 = v34;
          dispatch_async(v35, &block);
LABEL_53:
          v34 = *(_QWORD *)(v9 + 40);
          *(_QWORD *)(v9 + 40) = 0;
          if (!v34)
          {
LABEL_58:
            *(_BYTE *)(v9 + 48) = 0;
            return notify_cancel(*(_DWORD *)(v9 + 108));
          }
LABEL_54:
          v46 = (unsigned int *)(v34 + 8);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, (unsigned int *)(v34 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          }
          goto LABEL_58;
        }
        v36 = (unsigned __int8 *)(v34 + 12);
        if (__ldaxr((unsigned __int8 *)(v34 + 12)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v36))
        {
          goto LABEL_48;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v34 + 12);
LABEL_48:
        *(_BYTE *)(v34 + 40) = 1;
        *(_QWORD *)(v34 + 32) = 0;
        v38 = *(NSObject **)(v34 + 24);
        block = MEMORY[0x1E0C809B0];
        v50 = 3221225472;
        v51 = ___ZN9Inspector28RemoteInspectorXPCConnection16closeFromMessageEv_block_invoke;
        v52 = &__block_descriptor_40_e5_v8__0l;
        v53 = v34;
        dispatch_async(v38, &block);
        v45 = __ldxr(v36);
        if (v45 == 1)
        {
          if (!__stlxr(0, v36))
            goto LABEL_53;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v34 + 12), 0, v39, v40, v41, v42, v43, v44);
        goto LABEL_53;
      }
      v13 = v10 + 16 * v11;
    }
    else
    {
      v13 = 0;
      v11 = 0;
    }
    v12 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return result;
}

void Inspector::RemoteInspector::connectToWebInspector(dispatch_queue_t *this)
{
  dispatch_async(this[12], &__block_literal_global_37);
}

void ___ZN9Inspector15RemoteInspector21connectToWebInspectorEv_block_invoke()
{
  unsigned __int8 v0;

  if (qword_1ECF58568 != -1)
    dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
  v0 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
  if ((v0 & 1) == 0 && qword_1ECF58570 != -1)
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
  Inspector::RemoteInspector::setupXPCConnectionIfNeeded((Inspector::RemoteInspector *)&unk_1ECF58588);
}

void Inspector::RemoteInspector::setParentProcessInformation(uint64_t a1, int a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  NSDictionary *v13;
  int v14;

  v11 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 8);
LABEL_4:
  if (!*(_DWORD *)(a1 + 116) && !*(_QWORD *)(a1 + 120))
  {
    *(_DWORD *)(a1 + 116) = a2;
    WTF::RetainPtr<__CFData const*>::operator=((const void **)(a1 + 120), a3);
    if (*(_BYTE *)(a1 + 131))
      Inspector::RemoteInspector::receivedProxyApplicationSetupMessage((Inspector::RemoteInspector *)a1, v13);
  }
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v11))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_197F4BCC8(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

const void **WTF::RetainPtr<__CFData const*>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(v4);
  return a1;
}

void Inspector::RemoteInspector::receivedProxyApplicationSetupMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  xpc_connection_t *v2;
  uint64_t v4;
  uint64_t v5;
  dispatch_time_t v6;
  NSObject *global_queue;
  _QWORD v8[5];
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v2 = (xpc_connection_t *)*((_QWORD *)this + 5);
  if (v2 && !*((_BYTE *)this + 130))
  {
    if (*((_DWORD *)this + 29) && *((_QWORD *)this + 15))
    {
      *((_BYTE *)this + 131) = 0;
      v9[0] = CFSTR("WIRProxyApplicationParentPID");
      v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
      v9[1] = CFSTR("WIRProxyApplicationParentAuditData");
      v5 = *((_QWORD *)this + 15);
      v10[0] = v4;
      v10[1] = v5;
      Inspector::RemoteInspectorXPCConnection::sendMessage(v2, (NSString *)CFSTR("WIRProxyApplicationSetupResponseMessage"), (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2));
    }
    else
    {
      *((_BYTE *)this + 131) = 1;
      v6 = dispatch_time(0, 1000000000);
      global_queue = dispatch_get_global_queue(0, 0);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = ___ZN9Inspector15RemoteInspector36receivedProxyApplicationSetupMessageEP12NSDictionary_block_invoke;
      v8[3] = &__block_descriptor_40_e5_v8__0l;
      v8[4] = this;
      dispatch_after(v6, global_queue, v8);
    }
  }
}

void Inspector::RemoteInspector::parentProcessAuditToken(Inspector::RemoteInspector *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned __int8 *v10;
  const __CFData *v12;
  const UInt8 *BytePtr;
  __int128 v14;
  char v15;
  int v16;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_4:
  v12 = (const __CFData *)*((_QWORD *)this + 15);
  if (v12 && CFDataGetLength(v12) == 32)
  {
    BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 15));
    v14 = *((_OWORD *)BytePtr + 1);
    *(_OWORD *)a8 = *(_OWORD *)BytePtr;
    *(_OWORD *)(a8 + 16) = v14;
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a8 = 0;
  }
  *(_BYTE *)(a8 + 32) = v15;
  v16 = __ldxr(v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v10))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a2, a3, a4, a5, a6, a7);
}

void sub_197F4BF30(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspector::xpcConnectionReceivedMessage(Inspector::RemoteInspector *this, Inspector::RemoteInspectorXPCConnection *a2, NSString *a3, NSDictionary *a4)
{
  unsigned __int8 *v7;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSDictionary *v22;
  id v23;
  char v24;
  void *v25;
  uint64_t v26;
  int v27;

  v7 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRPermissionDenied")))
  {
    Inspector::RemoteInspector::stopInternal((uint64_t)this, (void *)1, v9, v10, v11, v12, v13, v14);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRSocketDataMessage")))
  {
    Inspector::RemoteInspector::receivedDataMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRSocketSetupMessage")))
  {
    Inspector::RemoteInspector::receivedSetupMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRWebPageCloseMessage")))
  {
    Inspector::RemoteInspector::receivedDidCloseMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRApplicationGetListingMessage")))
  {
    Inspector::RemoteInspector::pushListingsNow(this);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRApplicationWakeUpDebuggablesMessage")))
  {
    v21 = *((_QWORD *)this + 7);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRIndicateMessage")))
  {
    Inspector::RemoteInspector::receivedIndicateMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRProxyApplicationSetupMessage")))
  {
    Inspector::RemoteInspector::receivedProxyApplicationSetupMessage(this, v22);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRConnectionDiedMessage")))
  {
    Inspector::RemoteInspector::receivedConnectionDiedMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRAutomaticInspectionConfigurationMessage")))
  {
    v23 = -[NSDictionary objectForKeyedSubscript:](a4, "objectForKeyedSubscript:", CFSTR("WIRAutomaticInspectionEnabledKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v24 = objc_msgSend(v23, "BOOLValue");
      *((_BYTE *)this + 132) = v24;
      if ((v24 & 1) == 0)
      {
        v26 = *((_QWORD *)this + 17);
        if (v26)
        {
          *((_QWORD *)this + 17) = 0;
          WTF::fastFree(v26 - 16, v25, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRAutomaticInspectionRejectMessage")))
  {
    Inspector::RemoteInspector::receivedAutomaticInspectionRejectMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRAutomationSessionRequestMessage")))
  {
    Inspector::RemoteInspector::receivedAutomationSessionRequestMessage(this, a4);
  }
  else if (-[NSString isEqualToString:](a3, "isEqualToString:", CFSTR("WIRPingSuccessMessage")))
  {
    *((_BYTE *)this + 48) = 0;
  }
  else
  {
    NSLog((NSString *)CFSTR("Unrecognized RemoteInspector XPC Message: %@"), a3);
  }
  v27 = __ldxr(v7);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v7))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, v15, v16, v17, v18, v19, v20);
}

void sub_197F4C218(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspector::receivedDataMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRPageIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRSocketDataKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = objc_msgSend(v4, "unsignedIntValue");
      if (v6)
      {
        v7 = *((_QWORD *)this + 3);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 - 8);
          v9 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
          v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
          v11 = v8 & (v10 ^ HIWORD(v10));
          v12 = *(_DWORD *)(v7 + 16 * v11);
          if (v12 == v6)
          {
LABEL_9:
            v14 = *(_QWORD *)(v7 + 16 * v11 + 8);
            if (v14)
            {
              v15 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v5, 4);
              v16 = v15;
              if (v15)
                CFRetain(v15);
              v17 = (unsigned int *)(v14 + 8);
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 + 1, v17));
              v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v19 = &off_1E357C990;
              v19[1] = v14;
              v19[2] = v16;
              v19[3] = v14;
              v27 = v19;
              Inspector::RemoteConnectionToTarget::dispatchAsyncOnTarget(v14, (uint64_t *)&v27, v20, v21, v22, v23, v24, v25);
              v26 = (uint64_t)v27;
              v27 = 0;
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
              if (v16)
                CFRelease(v16);
            }
          }
          else
          {
            v13 = 1;
            while (v12)
            {
              v11 = ((_DWORD)v11 + v13) & v8;
              v12 = *(_DWORD *)(v7 + 16 * v11);
              ++v13;
              if (v12 == v6)
                goto LABEL_9;
            }
          }
        }
      }
    }
  }
}

void sub_197F4C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void Inspector::RemoteInspector::receivedSetupMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v4;
  __CFRunLoop *v5;
  __CFRunLoop *v6;
  id v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  void *v14;
  char isKindOfClass;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF::ThreadSafeWeakPtrControlBlock **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFRunLoopRef *v40;
  unsigned __int8 *v41;
  WTF::ThreadSafeWeakPtrControlBlock *v42;
  uint64_t v44;
  _QWORD *v45;
  int v47;
  void *v48;
  void *v49;
  const __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  int v65;
  uint64_t v66;
  CFRunLoopRef *v67;
  WTF::ThreadSafeWeakPtrControlBlock **v68;
  CFRunLoopRef v69;
  __CFRunLoopSource *v70;
  CFRunLoopRef v71;
  const __CFString *v72;
  Inspector::JSGlobalObjectDebugger *v73;
  const __CFString *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::ThreadSafeWeakPtrControlBlock **v109;
  Inspector::RemoteConnectionToTarget *v110;
  int v111;
  CFRunLoopSourceContext context;

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRPageIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRConnectionIdentifierKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRSenderKey"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRAutomaticallyPause"));
        v8 = objc_msgSend(v7, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
        objc_opt_class();
        v9 = 0;
        if ((v8 & 1) != 0 || !v7 || (v10 = objc_opt_isKindOfClass(), v9 = v7, (v10 & 1) != 0))
        {
          v11 = objc_msgSend(v9, "BOOLValue");
          v12 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRMessageDataTypeChunkSupportedKey"));
          v13 = objc_msgSend(v12, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
          objc_opt_class();
          v14 = 0;
          if ((v13 & 1) != 0 || !v12 || (isKindOfClass = objc_opt_isKindOfClass(), v14 = v12, (isKindOfClass & 1) != 0))
          {
            *((_BYTE *)this + 128) = objc_msgSend(v14, "BOOLValue");
            v16 = objc_msgSend(v4, "unsignedIntValue");
            v111 = v16;
            if (v16)
            {
              v18 = (uint64_t *)((char *)this + 24);
              v17 = *((_QWORD *)this + 3);
              if (v17)
              {
                v19 = *(_DWORD *)(v17 - 8);
                v20 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
                v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
                v22 = v19 & (v21 ^ HIWORD(v21));
                v23 = *(_DWORD *)(v17 + 16 * v22);
                if (v23 == v16)
                  return;
                v24 = 1;
                while (v23)
                {
                  v22 = (v22 + v24) & v19;
                  v23 = *(_DWORD *)(v17 + 16 * v22);
                  ++v24;
                  if (v23 == v16)
                    return;
                }
              }
              v25 = *((_QWORD *)this + 2);
              if (v25)
              {
                v26 = *(_DWORD *)(v25 - 8);
                v27 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
                v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
                v29 = v26 & (v28 ^ HIWORD(v28));
                v30 = *(_DWORD *)(v25 + 16 * v29);
                if (v30 != v16)
                {
                  v31 = 1;
                  while (v30)
                  {
                    v29 = ((_DWORD)v29 + v31) & v26;
                    v30 = *(_DWORD *)(v25 + 16 * v29);
                    ++v31;
                    if (v30 == v16)
                      goto LABEL_24;
                  }
                  v29 = *(unsigned int *)(v25 - 4);
                }
LABEL_24:
                if (v29 != *(_DWORD *)(v25 - 4))
                {
                  v32 = *(WTF::ThreadSafeWeakPtrControlBlock ***)(v25 + 16 * v29 + 8);
                  v40 = (CFRunLoopRef *)WTF::fastMalloc((WTF *)0x60);
                  *((_DWORD *)v40 + 2) = 1;
                  *v40 = (CFRunLoopRef)off_1E357C700;
                  *((_BYTE *)v40 + 12) = 0;
                  v41 = (unsigned __int8 *)v40 + 12;
                  *((_OWORD *)v40 + 1) = 0u;
                  *((_OWORD *)v40 + 2) = 0u;
                  *((_BYTE *)v40 + 48) = 0;
                  if (v32)
                  {
                    v42 = v32[1];
                    if (v42)
                      v42 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v42, v33, v34, v35, v36, v37, v38, v39);
                  }
                  else
                  {
                    v42 = 0;
                  }
                  v40[7] = v42;
                  v40[8] = (CFRunLoopRef)v32;
                  *((_BYTE *)v40 + 72) = 0;
                  v40[10] = v5;
                  if (v5)
                    CFRetain(v5);
                  v40[11] = v6;
                  if (v6)
                    CFRetain(v6);
                  if (__ldaxr(v41))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v41))
                  {
                    goto LABEL_37;
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v41);
LABEL_37:
                  v44 = (uint64_t)v40[7];
                  v45 = v40[8];
                  if (__ldaxr((unsigned __int8 *)v44))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v44))
                  {
                    goto LABEL_41;
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v44);
LABEL_41:
                  if (*(_QWORD *)(v44 + 24))
                    ++*(_QWORD *)(v44 + 8);
                  else
                    v45 = 0;
                  v47 = __ldxr((unsigned __int8 *)v44);
                  if (v47 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v44))
                    {
LABEL_49:
                      v48 = (void *)(*(uint64_t (**)(_QWORD *))(*v45 + 56))(v45);
                      v56 = v48;
                      if (v48)
                        CFRetain(v48);
                      v57 = v45[1];
                      v58 = __ldaxr((unsigned __int8 *)v57);
                      v109 = v32;
                      v59 = v11;
                      if (v58)
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v57))
                      {
                        goto LABEL_55;
                      }
                      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v57);
LABEL_55:
                      v60 = *(_QWORD *)(v57 + 8);
                      v61 = v60 - 1;
                      *(_QWORD *)(v57 + 8) = v60 - 1;
                      if (v60 == 1)
                      {
                        v100 = *(_QWORD *)(v57 + 16);
                        v62 = *(_QWORD *)(v57 + 24);
                        *(_QWORD *)(v57 + 24) = 0;
                        v63 = v100 != 0;
                      }
                      else
                      {
                        v62 = 0;
                        v63 = 1;
                      }
                      v64 = __ldxr((unsigned __int8 *)v57);
                      if (v64 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v57))
                        {
LABEL_62:
                          if (!v61)
                          {
                            if (v62)
                              (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
                            if (!v63)
                              WTF::fastFree(v57, v49, (uint64_t)v50, v51, v52, v53, v54, v55);
                          }
                          v65 = __ldxr(v41);
                          if (v65 == 1)
                          {
                            v66 = v59;
                            v68 = v109;
                            v67 = v40 + 2;
                            if (!__stlxr(0, v41))
                            {
LABEL_72:
                              if (v56)
                              {
                                CFRetain(v56);
                                v69 = *v67;
                                *v67 = (CFRunLoopRef)v56;
                                if (v69)
                                  CFRelease(v69);
                                context.version = 0;
                                memset(&context.retain, 0, 56);
                                context.info = v40;
                                context.perform = (void (__cdecl *)(void *))Inspector::RemoteTargetHandleRunSourceWithInfo;
                                v70 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, &context);
                                v71 = v40[3];
                                v40[3] = v70;
                                if (v71)
                                {
                                  CFRelease(v71);
                                  v70 = v40[3];
                                }
                                v72 = (const __CFString *)*MEMORY[0x1E0C9B280];
                                CFRunLoopAddSource(*v67, v70, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
                                v74 = Inspector::JSGlobalObjectDebugger::runLoopMode(v73);
                                if (v74 != v72)
                                  CFRunLoopAddSource(v40[2], v40[3], v74);
                                CFRelease(v56);
                              }
                              else if (Inspector::RemoteTargetInitializeGlobalQueue(void)::pred != -1)
                              {
                                dispatch_once(&Inspector::RemoteTargetInitializeGlobalQueue(void)::pred, &__block_literal_global_151);
                              }
                              v110 = (Inspector::RemoteConnectionToTarget *)v40;
                              if (!v68)
                                goto LABEL_96;
                              if ((*((unsigned int (**)(WTF::ThreadSafeWeakPtrControlBlock **))*v68 + 4))(v68))
                              {
                                v80 = *((_QWORD *)this + 17);
                                if (v80)
                                {
                                  v81 = *((_DWORD *)v68 + 4);
                                  v82 = *(_DWORD *)(v80 - 8);
                                  v83 = 9 * ((v81 + ~(v81 << 15)) ^ ((v81 + ~(v81 << 15)) >> 10));
                                  v84 = v82 & (((v83 ^ (v83 >> 6)) + ~((v83 ^ (v83 >> 6)) << 11)) ^ (((v83 ^ (v83 >> 6)) + ~((v83 ^ (v83 >> 6)) << 11)) >> 16));
                                  v85 = *(_DWORD *)(v80 + 4 * v84);
                                  if (v85 == v81)
                                  {
                                    v86 = 1;
                                  }
                                  else
                                  {
                                    v94 = 1;
                                    do
                                    {
                                      v86 = v85 != -1;
                                      if (v85 == -1)
                                        break;
                                      v84 = (v84 + v94) & v82;
                                      v85 = *(_DWORD *)(v80 + 4 * v84);
                                      ++v94;
                                    }
                                    while (v85 != v81);
                                  }
                                }
                                else
                                {
                                  v86 = 0;
                                }
                                if ((Inspector::RemoteConnectionToTarget::setup((Inspector::RemoteConnectionToTarget *)v40, (void *)v86, v66, v75, v76, v77, v78, v79) & 1) != 0)goto LABEL_95;
                              }
                              else
                              {
                                if ((*((unsigned int (**)(WTF::ThreadSafeWeakPtrControlBlock **))*v68 + 4))(v68))
                                {
LABEL_96:
                                  v95 = *v18;
                                  if (*v18)
                                    LODWORD(v95) = *(_DWORD *)(v95 - 12) != 0;
                                  if (*((unsigned __int8 *)this + 113) != (_DWORD)v95)
                                    *((_BYTE *)this + 113) = v95;
                                  goto LABEL_101;
                                }
                                if ((Inspector::RemoteConnectionToTarget::setup((Inspector::RemoteConnectionToTarget *)v40, 0, 0, v51, v52, v53, v54, v55) & 1) != 0)
                                {
LABEL_95:
                                  WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Ref<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>((uint64_t)&context, (uint64_t *)this + 3, (const __CFString *)&v111, (uint64_t *)&v110, v90, v91, v92, v93);
                                  goto LABEL_96;
                                }
                              }
                              Inspector::RemoteConnectionToTarget::close((Inspector::RemoteConnectionToTarget *)v40, v87, v88, v89, v90, v91, v92, v93);
LABEL_101:
                              v96 = (unsigned int *)v110;
                              v110 = 0;
                              if (v96)
                              {
                                v97 = v96 + 2;
                                do
                                {
                                  v98 = __ldaxr(v97);
                                  v99 = v98 - 1;
                                }
                                while (__stlxr(v99, v97));
                                if (!v99)
                                {
                                  atomic_store(1u, v96 + 2);
                                  Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v96, v49, v50, v51, v52, v53, v54, v55);
                                  WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
                                }
                              }
                              return;
                            }
                          }
                          else
                          {
                            __clrex();
                            v66 = v59;
                            v68 = v109;
                            v67 = v40 + 2;
                          }
                          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, (uint64_t)v50, v51, v52, v53, v54, v55);
                          goto LABEL_72;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v57, 0, (uint64_t)v50, v51, v52, v53, v54, v55);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v44, 0, v34, v35, v36, v37, v38, v39);
                  goto LABEL_49;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_197F4CB64(_Unwind_Exception *exception_object, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, Inspector::RemoteConnectionToTarget *a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a11)
  {
    v12 = (unsigned int *)((char *)a11 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)a11 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget(a11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  _Unwind_Resume(exception_object);
}

void Inspector::RemoteInspector::receivedDidCloseMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  BOOL v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRPageIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRConnectionIdentifierKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = objc_msgSend(v4, "unsignedIntValue");
      if (v6)
      {
        v8 = (uint64_t *)((char *)this + 24);
        v7 = *((_QWORD *)this + 3);
        if (v7)
        {
          v9 = v6;
          v10 = *(_DWORD *)(v7 - 8);
          v11 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
          v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
          v13 = v12 ^ HIWORD(v12);
          v14 = v10 & v13;
          v15 = *(_DWORD *)(v7 + 16 * v14);
          if (v15 == v6)
          {
LABEL_9:
            v17 = *(id **)(v7 + 16 * v14 + 8);
            if (v17
              && objc_msgSend(v5, "isEqualToString:", (id)CFMakeCollectable((CFTypeRef)objc_msgSend(v17[10], "copy"))))
            {
              Inspector::RemoteConnectionToTarget::close((Inspector::RemoteConnectionToTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
              v32 = *v8;
              if (*v8)
              {
                v33 = *(_DWORD *)(v32 - 8);
                v34 = v33 & v13;
                v35 = *(_DWORD *)(v32 + 16 * v34);
                if (v35 != v9)
                {
                  v36 = 1;
                  while (v35)
                  {
                    v34 = ((_DWORD)v34 + v36) & v33;
                    v35 = *(_DWORD *)(v32 + 16 * v34);
                    ++v36;
                    if (v35 == v9)
                      goto LABEL_21;
                  }
                  v34 = *(unsigned int *)(v32 - 4);
                }
LABEL_21:
                if (v34 == *(_DWORD *)(v32 - 4))
                  goto LABEL_37;
                v37 = v32 + 16 * v34;
                *(_DWORD *)v37 = -1;
                v38 = *(unsigned int **)(v37 + 8);
                *(_QWORD *)(v37 + 8) = 0;
                if (v38)
                {
                  v39 = v38 + 2;
                  do
                  {
                    v40 = __ldaxr(v39);
                    v41 = v40 - 1;
                  }
                  while (__stlxr(v41, v39));
                  if (!v41)
                  {
                    atomic_store(1u, v38 + 2);
                    Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v38, v25, v26, v27, v28, v29, v30, v31);
                    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
                  }
                }
                ++*(_DWORD *)(*v8 - 16);
                v42 = *v8;
                v43 = *v8 ? *(_DWORD *)(v42 - 12) - 1 : -1;
                *(_DWORD *)(v42 - 12) = v43;
                v32 = *v8;
                if (*v8)
                {
                  v44 = *(_DWORD *)(v32 - 4);
                  v45 = 6 * *(_DWORD *)(v32 - 12) < v44 && v44 >= 9;
                  if (!v45
                    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)this + 3, v44 >> 1, 0, v27, v28, v29, v30, v31), (v32 = *v8) != 0))
                  {
LABEL_37:
                    LODWORD(v32) = *(_DWORD *)(v32 - 12) != 0;
                  }
                }
              }
              if (*((unsigned __int8 *)this + 113) != (_DWORD)v32)
                *((_BYTE *)this + 113) = v32;
            }
          }
          else
          {
            v16 = 1;
            while (v15)
            {
              v14 = ((_DWORD)v14 + v16) & v10;
              v15 = *(_DWORD *)(v7 + 16 * v14);
              ++v16;
              if (v15 == v6)
                goto LABEL_9;
            }
          }
        }
      }
    }
  }
}

uint64_t Inspector::RemoteInspector::receivedWakeUpDebuggables(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void Inspector::RemoteInspector::receivedIndicateMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v4;
  id v5;
  char v6;
  int v7;
  _QWORD v8[5];
  int v9;
  char v10;

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRPageIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRIndicateEnabledKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = objc_msgSend(v5, "BOOLValue");
      v7 = objc_msgSend(v4, "unsignedIntValue");
      if (v7)
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 3221225472;
        v8[2] = ___ZN9Inspector15RemoteInspector23receivedIndicateMessageEP12NSDictionary_block_invoke;
        v8[3] = &__block_descriptor_45_e5_v8__0l;
        v8[4] = this;
        v9 = v7;
        v10 = v6;
        WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(v8);
      }
    }
  }
}

void Inspector::RemoteInspector::receivedConnectionDiedMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRConnectionIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return;
  v5 = (uint64_t *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    v8 = 0;
    v6 = 0;
LABEL_11:
    v7 = v4 + 16 * v6;
    goto LABEL_12;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 16 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v8 = v4 + 16 * v6;
    goto LABEL_11;
  }
  v8 = *((_QWORD *)this + 3);
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = *((_QWORD *)this + 3);
    while ((*(_DWORD *)v8 + 1) <= 1)
    {
      v8 += 16;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_12:
  if (v4)
    v10 = v4 + 16 * *(unsigned int *)(v4 - 4);
  else
    v10 = 0;
  if (v10 == v8)
    return;
  while ((objc_msgSend(v3, "isEqualToString:", (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(*(_QWORD *)(v8 + 8) + 80), "copy"))) & 1) == 0)
  {
    v18 = v8 + 16;
    v8 = v7;
    if (v18 != v7)
    {
      v8 = v18;
      while ((*(_DWORD *)v8 + 1) <= 1)
      {
        v8 += 16;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v8 == v10)
      return;
  }
  v19 = *(unsigned int **)(v8 + 8);
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  Inspector::RemoteConnectionToTarget::close((Inspector::RemoteConnectionToTarget *)v19, v11, v12, v13, v14, v15, v16, v17);
  v29 = *v5;
  if (*v5)
  {
    v30 = v29 + 16 * *(unsigned int *)(v29 - 4);
    if (v30 == v8)
      goto LABEL_45;
  }
  else
  {
    v30 = 0;
  }
  if (v30 != v8)
  {
    *(_DWORD *)v8 = -1;
    v31 = *(unsigned int **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v31)
    {
      v32 = v31 + 2;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v31 + 2);
        Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v31, v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
    }
    ++*(_DWORD *)(*v5 - 16);
    v35 = *v5;
    if (*v5)
      v36 = *(_DWORD *)(v35 - 12) - 1;
    else
      v36 = -1;
    *(_DWORD *)(v35 - 12) = v36;
    v29 = *v5;
    if (!*v5)
      goto LABEL_46;
    v37 = *(_DWORD *)(v29 - 4);
    if (6 * *(_DWORD *)(v29 - 12) >= v37 || v37 < 9)
      goto LABEL_45;
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)this + 3, v37 >> 1, 0, v24, v25, v26, v27, v28);
    v29 = *v5;
  }
  if (v29)
LABEL_45:
    LODWORD(v29) = *(_DWORD *)(v29 - 12) != 0;
LABEL_46:
  if (*((unsigned __int8 *)this + 113) != (_DWORD)v29)
    *((_BYTE *)this + 113) = v29;
  if (v19)
  {
    v39 = v19 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v19 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v19, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
  }
}

void sub_197F4D364(_Unwind_Exception *exception_object, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (v8)
  {
    v10 = v8 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v8 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  _Unwind_Resume(exception_object);
}

void Inspector::RemoteInspector::receivedAutomaticInspectionConfigurationMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRAutomaticInspectionEnabledKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "BOOLValue");
    *((_BYTE *)this + 132) = v4;
    if ((v4 & 1) == 0)
    {
      v12 = *((_QWORD *)this + 17);
      if (v12)
      {
        *((_QWORD *)this + 17) = 0;
        WTF::fastFree(v12 - 16, v5, v6, v7, v8, v9, v10, v11);
      }
    }
  }
}

uint64_t Inspector::RemoteInspector::receivedAutomaticInspectionRejectMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  id v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v3 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRPageIdentifierKey"));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    result = objc_msgSend(v3, "unsignedIntValue");
    if ((_DWORD)result)
    {
      v7 = *((_QWORD *)this + 17);
      v6 = (uint64_t *)((char *)this + 136);
      v5 = v7;
      if (v7)
      {
        v8 = *(_DWORD *)(v5 - 8);
        v9 = 9 * ((result + ~((_DWORD)result << 15)) ^ ((result + ~((_DWORD)result << 15)) >> 10));
        v10 = v8 & (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16));
        v11 = *(_DWORD *)(v5 + 4 * v10);
        if (v11 != (_DWORD)result)
        {
          v12 = 1;
          while (v11 != -1)
          {
            v10 = ((_DWORD)v10 + v12) & v8;
            v11 = *(_DWORD *)(v5 + 4 * v10);
            ++v12;
            if (v11 == (_DWORD)result)
              goto LABEL_10;
          }
          v10 = *(unsigned int *)(v5 - 4);
        }
LABEL_10:
        if (v10 != *(_DWORD *)(v5 - 4))
        {
          *(_DWORD *)(v5 + 4 * v10) = -2;
          ++*(_DWORD *)(*v6 - 16);
          v13 = *v6;
          v14 = *v6 ? *(_DWORD *)(v13 - 12) - 1 : -1;
          *(_DWORD *)(v13 - 12) = v14;
          v15 = *v6;
          if (*v6)
          {
            v16 = 6 * *(_DWORD *)(v15 - 12);
            v17 = *(_DWORD *)(v15 - 4);
            if (v16 < v17 && v17 >= 9)
              return (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v17 >> 1, 0);
          }
        }
      }
    }
  }
  return result;
}

void Inspector::RemoteInspector::receivedAutomationSessionRequestMessage(Inspector::RemoteInspector *this, NSDictionary *a2)
{
  const __CFString *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD v30[2];

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRSessionIdentifierKey"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("WIRSessionCapabilitiesKey"));
    objc_opt_class();
    if (!v5 || (objc_opt_isKindOfClass() & 1) != 0)
    {
      memset(v30, 0, 5);
      v6 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("org.webkit.webdriver.accept-insecure-certificates"));
      if (v6)
      {
        v7 = (void *)v6;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          LOBYTE(v30[0]) = objc_msgSend(v7, "BOOLValue");
      }
      v8 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("org.webkit.webdriver.webrtc.allow-insecure-media-capture"));
      if (v8)
      {
        v9 = (void *)v8;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          *(_WORD *)((char *)v30 + 1) = objc_msgSend(v9, "BOOLValue") | 0x100;
      }
      v10 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("org.webkit.webdriver.webrtc.suppress-ice-candidate-filtering"));
      if (v10)
      {
        v11 = (void *)v10;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          *(_WORD *)((char *)v30 + 3) = objc_msgSend(v11, "BOOLValue") | 0x100;
      }
      v12 = *((_QWORD *)this + 7);
      if (v12)
      {
        if (*((_BYTE *)this + 88))
        {
          if ((*((_BYTE *)this + 64) & 1) != 0)
          {
            WTF::String::String(&v29, v4);
            (*(void (**)(uint64_t, WTF::StringImpl **, _DWORD *))(*(_QWORD *)v12 + 40))(v12, &v29, v30);
            v20 = v29;
            v29 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
              {
                WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
                WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
              }
              else
              {
                *(_DWORD *)v20 -= 2;
              }
            }
          }
        }
      }
    }
  }
}

void sub_197F4D728(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9)
{
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::~StringImpl(a9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t Inspector::RemoteInspector::receivedPingSuccessMessage(uint64_t this)
{
  *(_BYTE *)(this + 48) = 0;
  return this;
}

void Inspector::RemoteInspector::xpcConnectionFailed(Inspector::RemoteInspector *this, Inspector::RemoteInspectorXPCConnection *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  dispatch_time_t v40;
  NSObject *global_queue;
  int v42;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  if (*((Inspector::RemoteInspectorXPCConnection **)this + 5) != a2)
    goto LABEL_50;
  *((_BYTE *)this + 114) = 0;
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = v12 + 16 * v13;
    if (*(_DWORD *)(v12 - 12))
    {
      v15 = *((_QWORD *)this + 3);
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = *((_QWORD *)this + 3);
        while ((*(_DWORD *)v15 + 1) <= 1)
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v15 = v12 + 16 * v13;
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = v12 + 16 * v13;
LABEL_16:
  if (v12)
    v17 = v12 + 16 * *(unsigned int *)(v12 - 4);
  else
    v17 = 0;
  if (v17 != v15)
  {
    do
    {
      Inspector::RemoteConnectionToTarget::close(*(Inspector::RemoteConnectionToTarget **)(v15 + 8), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v18 = v15 + 16;
      v15 = v14;
      if (v18 != v14)
      {
        v15 = v18;
        while ((*(_DWORD *)v15 + 1) <= 1)
        {
          v15 += 16;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v17);
    v12 = *((_QWORD *)this + 3);
  }
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    v19 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_DWORD *)(v12 + 16 * i) != -1)
        {
          v21 = v12 + 16 * i;
          v22 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            v23 = v22 + 2;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v22 + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v22, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
            }
          }
        }
      }
    }
    WTF::fastFree(v12 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v34 = *((_QWORD *)this + 3);
    if (v34)
      LODWORD(v34) = *(_DWORD *)(v34 - 12) != 0;
  }
  else
  {
    LODWORD(v34) = 0;
  }
  if (*((unsigned __int8 *)this + 113) != (_DWORD)v34)
    *((_BYTE *)this + 113) = v34;
  v35 = *((_QWORD *)this + 17);
  if (v35)
  {
    *((_QWORD *)this + 17) = 0;
    WTF::fastFree(v35 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v36 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v36)
  {
    v37 = v36 + 2;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
    }
  }
  if (*((_BYTE *)this + 48))
  {
    *((_BYTE *)this + 48) = 0;
    v40 = dispatch_time(0, 1000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_after(v40, global_queue, &__block_literal_global_66);
  }
LABEL_50:
  v42 = __ldxr(v10);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_54;
  }
  if (__stlxr(0, v10))
LABEL_54:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_197F4DA00(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void ___ZN9Inspector15RemoteInspector19xpcConnectionFailedEPNS_28RemoteInspectorXPCConnectionE_block_invoke()
{
  unsigned __int8 v0;

  if (qword_1ECF58568 != -1)
    dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
  v0 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
  if ((v0 & 1) == 0 && qword_1ECF58570 != -1)
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
  Inspector::RemoteInspector::setupXPCConnectionIfNeeded((Inspector::RemoteInspector *)&unk_1ECF58588);
}

uint64_t Inspector::RemoteInspector::listingForInspectionTarget@<X0>(uint64_t this@<X0>, const Inspector::RemoteInspectionTarget *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  id v6;
  const __CFString *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  const __CFString *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  const __CFString *v38;
  const __CFString *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  const __CFString *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  const __CFString *v58;
  const __CFString *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  const __CFString *v69;
  const __CFString *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  const __CFString *v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  const __CFString *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;

  v4 = this;
  if (*((_BYTE *)a2 + 20)
    && (*((_BYTE *)a2 + 20) != 1
       ? (this = os_variant_allows_internal_security_policies(),
          Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies = this,
       : (this = Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies),
         !(_DWORD)this
      || (this = (uint64_t)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)this), byte_1ECF58609))))
  {
    v6 = 0;
  }
  else
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)a2 + 4)), CFSTR("WIRPageIdentifierKey"));
    switch((*(unsigned int (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 32))(a2))
    {
      case 1u:
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 64))(&v156, a2);
        if (v156)
          v7 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v7 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v7, CFSTR("WIRTitleKey"));
        v15 = v156;
        v156 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        v16 = *(WTF::StringImpl **)(*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 80))(a2);
        if (v16)
          v17 = (const __CFString *)WTF::StringImpl::operator NSString *(v16);
        else
          v17 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v17, CFSTR("WIROverrideNameKey"));
        v18 = CFSTR("WIRTypeITML");
        goto LABEL_65;
      case 2u:
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 64))(&v156, a2);
        if (v156)
          v59 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v59 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v59, CFSTR("WIRTitleKey"));
        v67 = v156;
        v156 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::~StringImpl(v67, v60, v61, v62, v63, v64, v65, v66);
            WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
          }
          else
          {
            *(_DWORD *)v67 -= 2;
          }
        }
        v68 = *(WTF::StringImpl **)(*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 80))(a2);
        if (v68)
          v69 = (const __CFString *)WTF::StringImpl::operator NSString *(v68);
        else
          v69 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v69, CFSTR("WIROverrideNameKey"));
        v18 = CFSTR("WIRTypeJavaScript");
        goto LABEL_65;
      case 3u:
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 72))(&v156, a2);
        if (v156)
          v19 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v19 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v19, CFSTR("WIRURLKey"));
        v27 = v156;
        v156 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 64))(&v156, a2);
        if (v156)
          v28 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v28 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v28, CFSTR("WIRTitleKey"));
        v36 = v156;
        v156 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        v37 = *(WTF::StringImpl **)(*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 80))(a2);
        if (v37)
          v38 = (const __CFString *)WTF::StringImpl::operator NSString *(v37);
        else
          v38 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v38, CFSTR("WIROverrideNameKey"));
        v18 = CFSTR("WIRTypePage");
        goto LABEL_65;
      case 4u:
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 72))(&v156, a2);
        if (v156)
          v70 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v70 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v70, CFSTR("WIRURLKey"));
        v78 = v156;
        v156 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
            WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
          }
          else
          {
            *(_DWORD *)v78 -= 2;
          }
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 64))(&v156, a2);
        if (v156)
          v79 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v79 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v79, CFSTR("WIRTitleKey"));
        v87 = v156;
        v156 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
          {
            WTF::StringImpl::~StringImpl(v87, v80, v81, v82, v83, v84, v85, v86);
            WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
          }
          else
          {
            *(_DWORD *)v87 -= 2;
          }
        }
        v88 = *(WTF::StringImpl **)(*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 80))(a2);
        if (v88)
          v89 = (const __CFString *)WTF::StringImpl::operator NSString *(v88);
        else
          v89 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v89, CFSTR("WIROverrideNameKey"));
        v18 = CFSTR("WIRTypeServiceWorker");
        goto LABEL_65;
      case 5u:
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 72))(&v156, a2);
        if (v156)
          v39 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v39 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v39, CFSTR("WIRURLKey"));
        v47 = v156;
        v156 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v47 -= 2;
          }
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 64))(&v156, a2);
        if (v156)
          v48 = (const __CFString *)WTF::StringImpl::operator NSString *(v156);
        else
          v48 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v48, CFSTR("WIRTitleKey"));
        v56 = v156;
        v156 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
        v57 = *(WTF::StringImpl **)(*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 80))(a2);
        if (v57)
          v58 = (const __CFString *)WTF::StringImpl::operator NSString *(v57);
        else
          v58 = &stru_1E35BF3F0;
        objc_msgSend(v6, "setObject:forKey:", v58, CFSTR("WIROverrideNameKey"));
        v18 = CFSTR("WIRTypeWebPage");
LABEL_65:
        objc_msgSend(v6, "setObject:forKey:", v18, CFSTR("WIRTypeKey"));
        break;
      default:
        break;
    }
    v90 = *((_QWORD *)a2 + 4);
    if ((v90 & 0xFF00000000) != 0)
      objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PID:%lu"), (int)v90), CFSTR("WIRHostApplicationIdentifierKey"));
    v91 = WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::get(*(_QWORD *)(v4 + 24), *((_DWORD *)a2 + 4));
    if (v91)
      objc_msgSend(v6, "setObject:forKey:", Inspector::RemoteConnectionToTarget::connectionIdentifier(*(Inspector::RemoteConnectionToTarget **)(v91 + 80)), CFSTR("WIRConnectionIdentifierKey"));
    this = (*(uint64_t (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)a2 + 88))(a2);
    if ((_DWORD)this)
      this = objc_msgSend(v6, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("WIRHasLocalDebuggerKey"));
  }
  *a3 = v6;
  return this;
}

void sub_197F4E0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t Inspector::RemoteInspector::listingForAutomationTarget@<X0>(uint64_t this@<X0>, const Inspector::RemoteAutomationTarget *a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  uint64_t v6;
  const __CFString *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const __CFString *v17;
  WTF::StringImpl *v18;
  const __CFString *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  id v38;

  if (*((_BYTE *)a2 + 21))
  {
    v4 = 0;
LABEL_3:
    *a3 = v4;
    return this;
  }
  v6 = this;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)a2 + 4)), CFSTR("WIRPageIdentifierKey"));
  (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::RemoteAutomationTarget *))(*(_QWORD *)a2 + 64))(&v37, a2);
  if (v37)
  {
    WTF::StringImpl::createCFString(v37, (CFStringRef *)&v38);
    v7 = (const __CFString *)v38;
  }
  else
  {
    v7 = &stru_1E35BF3F0;
  }
  objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("WIRSessionIdentifierKey"));
  v15 = v37;
  v37 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  objc_msgSend(v4, "setObject:forKey:", CFSTR("WIRTypeAutomation"), CFSTR("WIRTypeKey"), v37);
  this = objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)a2 + 20)), CFSTR("WIRAutomationTargetIsPairedKey"));
  if (!*(_BYTE *)(v6 + 88))
  {
LABEL_19:
    v20 = *(_QWORD *)(v6 + 24);
    if (v20)
    {
      v21 = *((_DWORD *)a2 + 4);
      v22 = *(_DWORD *)(v20 - 8);
      v23 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
      v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
      v25 = v22 & (v24 ^ HIWORD(v24));
      v26 = *(_DWORD *)(v20 + 16 * v25);
      if (v26 == v21)
      {
LABEL_24:
        v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
        if (v28)
          this = objc_msgSend(v4, "setObject:forKey:", (id)CFMakeCollectable((CFTypeRef)objc_msgSend(*(id *)(v28 + 80), "copy")), CFSTR("WIRConnectionIdentifierKey"));
      }
      else
      {
        v27 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v27) & v22;
          v26 = *(_DWORD *)(v20 + 16 * v25);
          ++v27;
          if (v26 == v21)
            goto LABEL_24;
        }
      }
    }
    goto LABEL_3;
  }
  v16 = *(WTF::StringImpl **)(v6 + 72);
  if (v16)
  {
    WTF::StringImpl::createCFString(v16, (CFStringRef *)&v38);
    v17 = (const __CFString *)v38;
  }
  else
  {
    v17 = &stru_1E35BF3F0;
  }
  this = objc_msgSend(v4, "setObject:forKey:", v17, CFSTR("WIRAutomationTargetNameKey"));
  if (*(_BYTE *)(v6 + 88))
  {
    v18 = *(WTF::StringImpl **)(v6 + 80);
    if (v18)
    {
      WTF::StringImpl::createCFString(v18, (CFStringRef *)&v38);
      v19 = (const __CFString *)v38;
    }
    else
    {
      v19 = &stru_1E35BF3F0;
    }
    this = objc_msgSend(v4, "setObject:forKey:", v19, CFSTR("WIRAutomationTargetVersionKey"));
    goto LABEL_19;
  }
  __break(1u);
  return this;
}

void sub_197F4E3D4(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9)
{
  const void *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::~StringImpl(a9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v11;

  v8 = *(unsigned __int8 **)(a1 + 32);
  v9 = v8 + 8;
  if (__ldaxr(v8 + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v8 + 8));
LABEL_5:
  if (v8[114])
    Inspector::RemoteInspector::pushListingsNow((Inspector::RemoteInspector *)v8);
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8 + 8, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4E4A4(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void ___ZN9Inspector15RemoteInspector23receivedIndicateMessageEP12NSDictionary_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = (unsigned __int8 *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)(v9 + 8)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  v12 = *(_QWORD *)(v9 + 16);
  if (!v12)
    goto LABEL_13;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *(_DWORD *)(a1 + 40);
  v15 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = (v16 ^ HIWORD(v16)) & v13;
  v18 = *(_DWORD *)(v12 + 16 * v17);
  if (v18 != v14)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(_DWORD *)(v12 + 16 * v17);
      ++v19;
      if (v18 == v14)
        goto LABEL_12;
    }
    v17 = *(unsigned int *)(v12 - 4);
  }
LABEL_12:
  if (v17 != *(_DWORD *)(v12 - 4))
  {
    v21 = 0;
    v20 = *(_QWORD *)(v12 + 16 * v17 + 8);
  }
  else
  {
LABEL_13:
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr(v10);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v10))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (v20)
    v23 = v21;
  else
    v23 = 1;
  if ((v23 & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 96))(v20, *(unsigned __int8 *)(a1 + 44));
  }
}

void ___ZN9Inspector15RemoteInspector36receivedProxyApplicationSetupMessageEP12NSDictionary_block_invoke(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = (unsigned __int8 *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)(v8 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 8);
LABEL_5:
  if (*(_BYTE *)(v8 + 131))
    Inspector::RemoteInspector::stopInternal(v8, (void *)1, a3, a4, a5, a6, a7, a8);
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 8), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_197F4E6AC(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void ___ZN9Inspector28RemoteInspectorXPCConnectionC2EPU24objcproto13OS_xpc_object8NSObjectPU28objcproto17OS_dispatch_queueS1_PNS0_6ClientE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class Class;
  objc_class *v11;
  xpc_object_t value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v21;
  uint64_t v23;
  _xpc_connection_s *v24;
  void *v25;
  void *v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  uint64_t v47;
  int v48;

  v3 = *(_QWORD *)(a1 + 32);
  if (object_getClass(a2) == (Class)MEMORY[0x1E0C81310])
  {
    v21 = (unsigned __int8 *)(v3 + 12);
    if (__ldaxr((unsigned __int8 *)(v3 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_11;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v3 + 12);
LABEL_11:
    v23 = *(_QWORD *)(v3 + 32);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v3);
    *(_BYTE *)(v3 + 40) = 1;
    *(_QWORD *)(v3 + 32) = 0;
    v24 = *(_xpc_connection_s **)(v3 + 16);
    if (v24)
    {
      xpc_connection_cancel(v24);
      v25 = *(void **)(v3 + 16);
      if (v25)

      *(_QWORD *)(v3 + 16) = 0;
    }
    v26 = *(void **)(v3 + 24);
    if (v26)

    *(_QWORD *)(v3 + 24) = 0;
    v27 = __ldxr(v21);
    if (v27 == 1)
    {
      if (!__stlxr(0, v21))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v3 + 12), 0, v4, v5, v6, v7, v8, v9);
LABEL_24:
    if (a2 == (id)MEMORY[0x1E0C81260])
    {
      v28 = (unsigned int *)(v3 + 8);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)(v3 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    return;
  }
  Class = object_getClass(a2);
  v11 = (objc_class *)MEMORY[0x1E0C812F8];
  if (Class != (Class)MEMORY[0x1E0C812F8])
    goto LABEL_38;
  value = xpc_dictionary_get_value(a2, "msgData");
  if (!value || object_getClass(value) != v11)
  {
    v19 = (unsigned __int8 *)(v3 + 12);
    if (__ldaxr((unsigned __int8 *)(v3 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
LABEL_31:
      v31 = *(_QWORD *)(v3 + 32);
      if (v31)
        (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v31 + 32))(v31, v3, a2);
      v32 = __ldxr(v19);
      if (v32 == 1)
      {
        if (!__stlxr(0, v19))
          goto LABEL_38;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v3 + 12), 0, v13, v14, v15, v16, v17, v18);
LABEL_38:
      v33 = 0;
      goto LABEL_39;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v3 + 12);
    goto LABEL_31;
  }
  v44 = (const void *)_CFXPCCreateCFObjectFromXPCMessage();
  v45 = v44;
  if (v44)
  {
    v46 = CFGetTypeID(v44);
    if (v46 != CFDictionaryGetTypeID())
    {
      CFRelease(v45);
      v45 = 0;
    }
  }
  v33 = (id)CFMakeCollectable(v45);
LABEL_39:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v34 = objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("messageName"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v41 = objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("userInfo"));
      if (!v41 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        v42 = (unsigned __int8 *)(v3 + 12);
        if (__ldaxr((unsigned __int8 *)(v3 + 12)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v42))
        {
          goto LABEL_51;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v3 + 12);
LABEL_51:
        v47 = *(_QWORD *)(v3 + 32);
        if (v47)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v3, v34, v41);
        v48 = __ldxr(v42);
        if (v48 == 1)
        {
          if (!__stlxr(0, v42))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v3 + 12), 0, v35, v36, v37, v38, v39, v40);
      }
    }
  }
}

void sub_197F4EA08(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void Inspector::RemoteInspectorXPCConnection::~RemoteInspectorXPCConnection(Inspector::RemoteInspectorXPCConnection *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E357C890;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

void Inspector::RemoteInspectorXPCConnection::~RemoteInspectorXPCConnection(Inspector::RemoteInspectorXPCConnection *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  void *v10;

  *(_QWORD *)this = off_1E357C890;
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)

  v10 = (void *)*((_QWORD *)this + 2);
  if (v10)

  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void ___ZN9Inspector28RemoteInspectorXPCConnection16closeFromMessageEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  _xpc_connection_s *v11;
  void *v12;
  void *v13;
  int v14;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = (unsigned __int8 *)(v8 + 12);
  if (__ldaxr((unsigned __int8 *)(v8 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 12);
LABEL_5:
  v11 = *(_xpc_connection_s **)(v8 + 16);
  if (v11)
  {
    xpc_connection_cancel(v11);
    v12 = *(void **)(v8 + 16);
    if (v12)

    *(_QWORD *)(v8 + 16) = 0;
  }
  v13 = *(void **)(v8 + 24);
  if (v13)

  *(_QWORD *)(v8 + 24) = 0;
  v14 = __ldxr(v9);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v9))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4EB78(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

uint64_t Inspector::RemoteConnectionToTarget::connectionType(Inspector::RemoteConnectionToTarget *this)
{
  return 0;
}

void Inspector::RemoteInspector::~RemoteInspector(Inspector::RemoteInspector *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::RemoteInspector::~RemoteInspector(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

{
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *((_QWORD *)this + 17);
  if (v9)
    WTF::fastFree(v9 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v10 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
    CFRelease(v10);
  if (*((_BYTE *)this + 88))
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (const void **)(v17 + 8);
      do
      {
        if (*((_DWORD *)v19 - 2) != -1)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
            CFRelease(v20);
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v17 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_DWORD *)(v21 + 16 * i) != -1)
        {
          v24 = v21 + 16 * i;
          v25 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            v26 = v25 + 2;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v25 + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v25, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            }
          }
        }
      }
    }
    WTF::fastFree(v21 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 2);
  if (v37)
    WTF::fastFree(v37 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::ThreadSafeWeakPtrControlBlock::weakDeref(WTF::ThreadSafeWeakPtrControlBlock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v10 = *((_QWORD *)this + 2) - 1;
  *((_QWORD *)this + 2) = v10;
  if (v10)
  {
    v13 = __ldxr((unsigned __int8 *)this);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)this))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = *((_QWORD *)this + 1);
  v12 = __ldxr((unsigned __int8 *)this);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
LABEL_7:
  if (!v11)
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void ___ZN9InspectorL33RemoteTargetInitializeGlobalQueueEv_block_invoke()
{
  _QWORD *v0;
  __CFRunLoop *Main;
  const __CFString *v2;
  Inspector::JSGlobalObjectDebugger *v3;
  const __CFString *v4;
  const __CFString *v5;
  __CFRunLoop *v6;
  CFRunLoopSourceContext v7;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = 0;
  v0[1] = 0;
  qword_1ECF58578 = (uint64_t)v0;
  *(_OWORD *)&v7.cancel = xmmword_1E357C920;
  memset(&v7, 0, 64);
  qword_1ECF58580 = (uint64_t)CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, &v7);
  Main = CFRunLoopGetMain();
  v2 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddSource(Main, (CFRunLoopSourceRef)qword_1ECF58580, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  v4 = Inspector::JSGlobalObjectDebugger::runLoopMode(v3);
  if (v4 != v2)
  {
    v5 = v4;
    v6 = CFRunLoopGetMain();
    CFRunLoopAddSource(v6, (CFRunLoopSourceRef)qword_1ECF58580, v5);
  }
}

void Inspector::RemoteTargetHandleRunSourceGlobal(Inspector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  if (__ldaxr(_MergedGlobals_27))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_27))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_27);
LABEL_5:
  v9 = qword_1ECF58578;
  v10 = *(_QWORD *)qword_1ECF58578;
  v11 = *(unsigned int *)(qword_1ECF58578 + 12);
  *(_QWORD *)qword_1ECF58578 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  LODWORD(v9) = __ldxr(_MergedGlobals_27);
  if ((_DWORD)v9 == 1)
  {
    if (!__stlxr(0, _MergedGlobals_27))
    {
      if (!(_DWORD)v11)
        goto LABEL_17;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_27, 0, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v11)
    goto LABEL_17;
LABEL_11:
  v12 = 0;
  v13 = 8 * v11;
  do
  {
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(v10 + v12) + 16))(*(_QWORD *)(v10 + v12), a2);
    v12 += 8;
  }
  while (v13 != v12);
  v14 = (uint64_t *)v10;
  do
  {
    v15 = *v14;
    *v14 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    ++v14;
    v13 -= 8;
  }
  while (v13);
LABEL_17:
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
}

void sub_197F4EE48(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(v8 + v11);
    *(_QWORD *)(v8 + v11) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v11 += 8;
    if (v9 == v11)
    {
      if (v8)
        WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v14 = (_QWORD *)v6;
      v15 = 8 * v5;
      v16 = (uint64_t *)v4;
      do
      {
        v17 = *v16;
        *v16 = 0;
        *v14 = v17;
        v18 = *v16;
        *v16 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        ++v14;
        ++v16;
        v15 -= 8;
      }
      while (v15);
    }
    if (v4)
    {
      if (*(_QWORD *)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::ThreadSafeWeakPtrControlBlock::weakRef(WTF::ThreadSafeWeakPtrControlBlock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  int v11;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  if (*((_QWORD *)this + 3))
  {
    ++*((_QWORD *)this + 2);
    v10 = this;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)this);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::setup(BOOL,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = &off_1E357C940;
  v9 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::setup(BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = &off_1E357C940;
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  WTF::fastFree((unint64_t)this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::setup(BOOL,BOOL)::$_0,void>::call(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  _QWORD *v13;
  int v15;
  int v16;
  unsigned __int8 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  WTF::ThreadSafeWeakPtrControlBlock *v27;
  int v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (unsigned __int8 *)(v9 + 12);
  if (__ldaxr((unsigned __int8 *)(v9 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 12);
LABEL_5:
  v12 = *(_QWORD *)(v9 + 56);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_19;
  }
  v13 = *(_QWORD **)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12);
LABEL_11:
  if (*(_QWORD *)(v12 + 24))
    ++*(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_19:
  v16 = __ldxr(v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 12), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v13)
      goto LABEL_32;
LABEL_25:
    if (((*(uint64_t (**)(_QWORD *))(*v13 + 40))(v13) & 1) == 0)
      goto LABEL_32;
    if ((*(unsigned int (**)(_QWORD *))(*v13 + 32))(v13))
    {
      (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v13 + 16))(v13, v9, *(unsigned __int8 *)(a1 + 20), *(unsigned __int8 *)(a1 + 21));
      *(_BYTE *)(v9 + 72) = 1;
      if (qword_1ECF58568 != -1)
        dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
      v17 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
      if ((v17 & 1) != 0 || qword_1ECF58570 == -1)
        goto LABEL_31;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *))(*v13 + 32))(v13))
        goto LABEL_49;
      (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v13 + 16))(v13, v9, 0, 0);
      *(_BYTE *)(v9 + 72) = 1;
      if (qword_1ECF58568 != -1)
        dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
      v36 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
      if ((v36 & 1) != 0 || qword_1ECF58570 == -1)
      {
LABEL_31:
        Inspector::RemoteInspector::updateTargetListing((Inspector::RemoteInspector *)&unk_1ECF58588, *(_DWORD *)(a1 + 16));
        goto LABEL_49;
      }
    }
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
    goto LABEL_31;
  }
  if (__stlxr(0, v10))
    goto LABEL_24;
  if (v13)
    goto LABEL_25;
LABEL_32:
  if (qword_1ECF58568 != -1)
    dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
  v25 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
  if ((v25 & 1) == 0 && qword_1ECF58570 != -1)
    dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
  Inspector::RemoteInspector::setupFailed((Inspector::RemoteInspector *)&unk_1ECF58588, (void *)*(unsigned int *)(a1 + 16), a3, a4, a5, a6, a7, a8);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_41;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 12);
LABEL_41:
  v27 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 56);
  *(_QWORD *)(v9 + 56) = 0;
  if (v27)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v18, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)(v9 + 64) = 0;
  v28 = __ldxr(v10);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, v10))
LABEL_47:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 12), 0, v19, v20, v21, v22, v23, v24);
  if (!v13)
    return;
LABEL_49:
  v29 = v13[1];
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v29))
  {
    goto LABEL_53;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v29);
LABEL_53:
  v31 = *(_QWORD *)(v29 + 8);
  v32 = v31 - 1;
  *(_QWORD *)(v29 + 8) = v31 - 1;
  if (v31 == 1)
  {
    v37 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    v34 = v37 != 0;
  }
  else
  {
    v33 = 0;
    v34 = 1;
  }
  v35 = __ldxr((unsigned __int8 *)v29);
  if (v35 != 1)
  {
    __clrex();
LABEL_60:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v29, 0, v19, v20, v21, v22, v23, v24);
    if (v32)
      return;
    goto LABEL_61;
  }
  if (__stlxr(0, (unsigned __int8 *)v29))
    goto LABEL_60;
  if (v32)
    return;
LABEL_61:
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (!v34)
    WTF::fastFree(v29, v18, v19, v20, v21, v22, v23, v24);
}

void sub_197F4F734(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  v10 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
LABEL_6:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v17 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v17 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_13:
        if (!v13)
        {
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          if (!v15)
            WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = &off_1E357C968;
  v9 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = &off_1E357C968;
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  WTF::fastFree((unint64_t)this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::close(void)::$_0,void>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  _QWORD *v13;
  int v15;
  WTF::ThreadSafeWeakPtrControlBlock *v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (unsigned __int8 *)(v9 + 12);
  if (__ldaxr((unsigned __int8 *)(v9 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 12);
LABEL_5:
  v12 = *(_QWORD *)(v9 + 56);
  if (!v12)
    goto LABEL_46;
  v13 = *(_QWORD **)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12);
LABEL_10:
  if (*(_QWORD *)(v12 + 24))
    ++*(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 != 1)
  {
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12, 0, a3, a4, a5, a6, a7, a8);
    if (!v13)
      goto LABEL_46;
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_18;
  if (!v13)
    goto LABEL_46;
LABEL_19:
  if (*(_BYTE *)(v9 + 72))
    (*(void (**)(_QWORD *, uint64_t))(*v13 + 24))(v13, v9);
  v16 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 56);
  *(_QWORD *)(v9 + 56) = 0;
  if (v16)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 64) = 0;
  if (*(_DWORD *)(a1 + 16))
  {
    if (qword_1ECF58568 != -1)
      dispatch_once(&qword_1ECF58568, &__block_literal_global_3);
    v17 = atomic_load((unsigned __int8 *)&Inspector::RemoteInspector::needMachSandboxExtension);
    if ((v17 & 1) == 0 && qword_1ECF58570 != -1)
      dispatch_once(&qword_1ECF58570, &__block_literal_global_2);
    Inspector::RemoteInspector::updateTargetListing((Inspector::RemoteInspector *)&unk_1ECF58588, *(_DWORD *)(a1 + 16));
  }
  v18 = v13[1];
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_34;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v18);
LABEL_34:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v26 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v26 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v18, 0, a3, a4, a5, a6, a7, a8);
    if (v21)
      goto LABEL_46;
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
    goto LABEL_41;
  if (v21)
    goto LABEL_46;
LABEL_42:
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v23)
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
LABEL_46:
  v25 = __ldxr(v10);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v10))
LABEL_50:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F4FB44(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;

  v11 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_6:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v19 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v19 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_13:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        }
        v18 = __ldxr(v8);
        if (v18 == 1)
        {
          if (!__stlxr(0, v8))
LABEL_23:
            _Unwind_Resume(exception_object);
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v11, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::sendMessageToTarget(NSString *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = &off_1E357C990;
  v9 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  v13 = (const void *)a1[2];
  a1[2] = 0;
  if (v13)
    CFRelease(v13);
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::sendMessageToTarget(NSString *)::$_0,void>::~CallableWrapper(WTF *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E357C990;
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  v13 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    CFRelease(v13);
  WTF::fastFree((unint64_t)this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<Inspector::RemoteConnectionToTarget::sendMessageToTarget(NSString *)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  _QWORD *v13;
  int v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (unsigned __int8 *)(v9 + 12);
  if (__ldaxr((unsigned __int8 *)(v9 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 12);
LABEL_5:
  v12 = *(_QWORD *)(v9 + 56);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_19;
  }
  v13 = *(_QWORD **)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12);
LABEL_11:
  if (*(_QWORD *)(v12 + 24))
    ++*(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12, 0, a3, a4, a5, a6, a7, a8);
LABEL_19:
  v16 = __ldxr(v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, v10))
    {
      if (!v13)
        return;
      goto LABEL_25;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (!v13)
    return;
LABEL_25:
  WTF::String::String(&v41, *(CFStringRef *)(a1 + 16));
  (*(void (**)(_QWORD *, WTF::StringImpl **))(*v13 + 48))(v13, &v41);
  v24 = v41;
  v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v13[1];
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_32;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v25);
LABEL_32:
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v27 - 1;
  *(_QWORD *)(v25 + 8) = v27 - 1;
  if (v27 == 1)
  {
    v40 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v30 = v40 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 != 1)
  {
    __clrex();
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v25, 0, v18, v19, v20, v21, v22, v23);
    if (v28)
      return;
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
    goto LABEL_39;
  if (v28)
    return;
LABEL_40:
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v30)
    WTF::fastFree(v25, v17, v18, v19, v20, v21, v22, v23);
}

void sub_197F4FF00(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }
  v12 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_9:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v27 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v27 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_16:
        if (!v15)
        {
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_16;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12);
  goto LABEL_9;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(4 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, 4 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 4 * v19);
      v22 = *v21;
      if (*v21 <= 0xFFFFFFFD)
      {
        v23 = *a1;
        v24 = *a1 ? *(_DWORD *)(v23 - 8) : 0;
        v25 = 0;
        v26 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 4 * v28) != -1);
        v29 = (_DWORD *)(v23 + 4 * v28);
        *v29 = v22;
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
  }
  if (v6)
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Ref<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>(uint64_t a1, uint64_t *a2, const __CFString *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  int isa;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  isa = (int)a3->isa;
  v16 = 9 * ((isa + ~(isa << 15)) ^ ((isa + ~(isa << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (!*(_DWORD *)v19)
  {
LABEL_12:
    *(_DWORD *)v19 = isa;
    v23 = *a4;
    *a4 = 0;
    v24 = *(unsigned int **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v23;
    if (v24)
    {
      v25 = v24 + 2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v24 + 2);
        Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v24, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
    }
    v28 = *a2;
    if (*a2)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v44 = *a2;
    if (*a2)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    v46 = (*(_DWORD *)(v44 - 16) + v45);
    v47 = *(unsigned int *)(v44 - 4);
    if (v47 > 0x400)
    {
      if (v47 <= 2 * v46)
        goto LABEL_33;
    }
    else if (3 * v47 <= 4 * v46)
    {
      if (!(_DWORD)v47)
      {
        v48 = 8;
LABEL_36:
        v19 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, v48, v19, (uint64_t)a4, a5, a6, a7, a8);
        v44 = *a2;
        if (*a2)
          v47 = *(unsigned int *)(v44 - 4);
        else
          v47 = 0;
        goto LABEL_38;
      }
LABEL_33:
      v48 = ((_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47)));
      goto LABEL_36;
    }
LABEL_38:
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v44 + 16 * v47;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != isa)
  {
    if (v20 == -1)
      v21 = (_QWORD *)v19;
    v18 = (v18 + v22) & v14;
    v19 = v12 + 16 * v18;
    v20 = *(_DWORD *)v19;
    ++v22;
    if (!*(_DWORD *)v19)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        isa = (int)a3->isa;
        v19 = (uint64_t)v21;
      }
      goto LABEL_12;
    }
  }
  if ((v13 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v12 - 4);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v12 + 16 * v30;
  *(_BYTE *)(a1 + 16) = 0;
  v31 = *a4;
  *a4 = 0;
  v32 = *(unsigned int **)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v31;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v32, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    do
    {
      v25 = (int *)(v11 + 16 * v22);
      v26 = *v25;
      if (*v25 != -1)
      {
        if (v26)
        {
          v40 = *a1;
          if (*a1)
            v41 = *(_DWORD *)(v40 - 8);
          else
            v41 = 0;
          v42 = 0;
          v43 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
          v44 = ((v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11)) ^ (((v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11)) >> 16);
          do
          {
            v45 = v44 & v41;
            v44 = ++v42 + v45;
          }
          while (*(_DWORD *)(v40 + 16 * v45));
          v46 = v40 + 16 * v45;
          v47 = *(unsigned int **)(v46 + 8);
          *(_QWORD *)(v46 + 8) = 0;
          if (v47)
          {
            v48 = v47 + 2;
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v47 + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v47, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
            }
          }
          *(_DWORD *)v46 = *v25;
          v51 = v11 + 16 * v22;
          v52 = *(_QWORD *)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          *(_QWORD *)(v46 + 8) = v52;
          v53 = *(unsigned int **)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          if (v53)
          {
            v54 = v53 + 2;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v53 + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v53, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
            }
          }
          if (v25 == (int *)a3)
            v23 = v46;
        }
        else
        {
          v27 = v11 + 16 * v22;
          v28 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            v29 = v28 + 2;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v28 + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v28, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  return v23;
}

void OpaqueJSClass::OpaqueJSClass(OpaqueJSClass *this, const JSClassDefinition *a2, OpaqueJSClass *a3)
{
  JSC *v6;
  const JSStaticValue *staticValues;
  const char **p_name;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  WTF *v25;
  uint64_t *v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  const char *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *name;
  size_t v73;
  WTF::StringImpl *v74;
  uint64_t *v75;
  void *v76;
  const WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSPropertyAttributes attributes;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  WTF **v91;
  int i;
  uint64_t v93;
  WTF **v94;
  WTF *v95;
  WTF *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  WTF *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  WTF::StringImpl *v111;
  const char *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const JSClassDefinition *v145;
  uint64_t **v146;
  OpaqueJSClass *v147;
  uint64_t **v148;
  WTF::StringImpl *v149[3];
  WTF *v150;
  WTF::StringImpl *v151;
  WTF *v152;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a2->parentClass;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)&a2->initialize;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&a2->hasProperty;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)&a2->setProperty;
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)&a2->getPropertyNames;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)&a2->callAsConstructor;
  *((_QWORD *)this + 13) = a2->convertToType;
  WTF::String::fromUTF8((OpaqueJSClass *)((char *)this + 112), a2->className);
  v147 = this;
  *((_QWORD *)this + 15) = 0;
  v148 = (uint64_t **)((char *)this + 120);
  *((_QWORD *)this + 16) = 0;
  v146 = (uint64_t **)((char *)this + 128);
  JSC::initialize(v6);
  v145 = a2;
  staticValues = a2->staticValues;
  if (!staticValues)
    goto LABEL_2;
  v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v58 = 0;
  v149[0] = v58;
  std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v148, (uint64_t **)v149, v59, v60, v61, v62, v63, v64);
  std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((uint64_t **)v149, v65, v66, v67, v68, v69, v70, v71);
  name = staticValues->name;
  if (!staticValues->name)
    goto LABEL_2;
  do
  {
    v73 = strlen(name);
    WTF::fromUTF8Impl<false>((unint64_t)name, v73, (uint64_t *)v149);
    v74 = v149[0];
    if (!v149[0])
      goto LABEL_63;
    v75 = *v148;
    *(_DWORD *)v149[0] += 2;
    v83 = WTF::fastMalloc((WTF *)0x20);
    attributes = staticValues->attributes;
    *(_OWORD *)v83 = *(_OWORD *)&staticValues->getProperty;
    *(_DWORD *)(v83 + 16) = attributes;
    if (v149[0])
    {
      v85 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v85 = 1;
      WTF::String::isolatedCopy(v149, (uint64_t *)(v85 + 8));
      v86 = *(_QWORD *)(v85 + 8);
      if (v86)
      {
        if ((*(_BYTE *)(v86 + 16) & 4) != 0)
          v86 = 0;
        else
          v86 = *(_QWORD *)(v86 + 8);
      }
      *(_QWORD *)(v85 + 16) = v86;
    }
    else
    {
      v85 = 0;
    }
    *(_QWORD *)(v83 + 24) = v85;
    v152 = (WTF *)v83;
    v87 = *v75;
    if (*v75
      || (WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(v75, 0, (uint64_t)v77, v78, v79, v80, v81, v82), (v87 = *v75) != 0))
    {
      v88 = *(_DWORD *)(v87 - 8);
    }
    else
    {
      v88 = 0;
    }
    v89 = *((_DWORD *)v74 + 4);
    if (v89 < 0x100)
      v90 = WTF::StringImpl::hashSlowCase(v74);
    else
      v90 = v89 >> 8;
    v91 = 0;
    for (i = 1; ; ++i)
    {
      v93 = v90 & v88;
      v94 = (WTF **)(v87 + 16 * v93);
      v95 = *v94;
      if (!*v94)
      {
        if (v91)
        {
          *v91 = 0;
          v91[1] = 0;
          --*(_DWORD *)(*v75 - 16);
          *v91 = v74;
        }
        else
        {
          *v94 = v74;
          v91 = (WTF **)(v87 + 16 * v93);
        }
        v96 = v152;
        v152 = 0;
        v97 = (unint64_t)v91[1];
        v91[1] = v96;
        if (v97)
        {
          v98 = *(unsigned int **)(v97 + 24);
          *(_QWORD *)(v97 + 24) = 0;
          if (v98)
          {
            do
            {
              v99 = __ldaxr(v98);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v98));
            if (!v100)
            {
              atomic_store(1u, v98);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v98, v76, (uint64_t)v77, v78, v79, v80, v81, v82);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
          }
          WTF::fastFree(v97, v76, (uint64_t)v77, v78, v79, v80, v81, v82);
        }
        v101 = *v75;
        if (*v75)
          v102 = *(_DWORD *)(v101 - 12) + 1;
        else
          v102 = 1;
        *(_DWORD *)(v101 - 12) = v102;
        v103 = *v75;
        if (*v75)
          v104 = *(_DWORD *)(v103 - 12);
        else
          v104 = 0;
        v105 = (*(_DWORD *)(v103 - 16) + v104);
        v106 = *(unsigned int *)(v103 - 4);
        if (v106 > 0x400)
        {
          if (v106 > 2 * v105)
            goto LABEL_50;
        }
        else if (3 * v106 > 4 * v105)
        {
LABEL_50:
          v74 = 0;
          goto LABEL_51;
        }
        WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(v75, (uint64_t)v91, (uint64_t)v77, v78, v79, v80, v81, v82);
        goto LABEL_50;
      }
      if (v95 != (WTF *)-1)
      {
        v94 = v91;
        if (WTF::equal(v95, v74, v77))
          break;
      }
      v90 = i + v93;
      v91 = v94;
    }
    std::unique_ptr<StaticValueEntry>::operator=[abi:sn180100]((unint64_t *)(v87 + 16 * v93 + 8), (unint64_t *)&v152, (uint64_t)v77, v78, v79, v80, v81, v82);
LABEL_51:
    v107 = v152;
    v152 = 0;
    if (v107)
    {
      v108 = (unsigned int *)*((_QWORD *)v107 + 3);
      *((_QWORD *)v107 + 3) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v108, v76, (uint64_t)v77, v78, v79, v80, v81, v82);
          WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
        }
      }
      WTF::fastFree((unint64_t)v107, v76, (uint64_t)v77, v78, v79, v80, v81, v82);
    }
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, (WTF::AtomStringImpl *)v76, (uint64_t)v77, v78, v79, v80, v81, v82);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    v111 = v149[0];
    v149[0] = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
      {
        WTF::StringImpl::~StringImpl(v111, (WTF::AtomStringImpl *)v76, (uint64_t)v77, v78, v79, v80, v81, v82);
        WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
      }
      else
      {
        *(_DWORD *)v111 -= 2;
      }
    }
LABEL_63:
    v112 = staticValues[1].name;
    ++staticValues;
    name = v112;
  }
  while (v112);
LABEL_2:
  p_name = &v145->staticFunctions->name;
  if (p_name)
  {
    v10 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v10 = 0;
    v149[0] = 0;
    std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100](v146, v10, v11, v12, v13, v14, v15, v16);
    std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)v149, 0, v17, v18, v19, v20, v21, v22);
    v23 = *p_name;
    if (*p_name)
    {
      v24 = p_name + 3;
      do
      {
        WTF::String::fromUTF8((WTF::String *)&v152, v23);
        v25 = v152;
        if (v152)
        {
          v26 = *v146;
          *(_DWORD *)v152 += 2;
          v151 = v25;
          v27 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          v28 = *((_DWORD *)v24 - 2);
          *(_QWORD *)v27 = *(v24 - 2);
          *((_DWORD *)v27 + 2) = v28;
          v150 = v27;
          WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>((uint64_t)v149, v26, &v151, (uint64_t *)&v150, v29, v30, v31, v32);
          if (v150)
            WTF::fastFree((unint64_t)v150, v33, v34, v35, v36, v37, v38, v39);
          if (v151)
          {
            if (*(_DWORD *)v151 == 2)
            {
              WTF::StringImpl::~StringImpl(v151, (WTF::AtomStringImpl *)v33, v34, v35, v36, v37, v38, v39);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)v151 -= 2;
            }
          }
          v40 = v152;
          v152 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
            {
              WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)v33, v34, v35, v36, v37, v38, v39);
              WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_DWORD *)v40 -= 2;
            }
          }
        }
        v41 = (const char *)*v24;
        v24 += 3;
        v23 = v41;
      }
      while (v41);
    }
  }
  if (a3)
  {
    do
      v9 = __ldaxr((unsigned int *)a3);
    while (__stlxr(v9 + 1, (unsigned int *)a3));
    *((_QWORD *)v147 + 2) = a3;
  }
}

void WTF::String::fromUTF8(WTF::String *this, const char *__s)
{
  size_t v4;

  if (__s)
  {
    v4 = strlen(__s);
    WTF::fromUTF8Impl<false>((unint64_t)__s, v4, (uint64_t *)this);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t **std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*v10)
      WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(*v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t **std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*v9)
      WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(*v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSClassRef JSClassRetain(JSClassRef jsClass)
{
  unsigned int v1;

  do
    v1 = __ldaxr((unsigned int *)jsClass);
  while (__stlxr(v1 + 1, (unsigned int *)jsClass));
  return jsClass;
}

void OpaqueJSClass::~OpaqueJSClass(OpaqueJSClass *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      OpaqueJSClass::~OpaqueJSClass((OpaqueJSClass *)v9);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)this + 16, 0, a3, a4, a5, a6, a7, a8);
  v19 = (uint64_t *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v19)
  {
    if (*v19)
      WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(*v19, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

void JSClassRelease(JSClassRef jsClass)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  JSClassRef v10;

  do
  {
    v8 = __ldaxr((unsigned int *)jsClass);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)jsClass));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)jsClass);
    v10 = jsClass;
    WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10, v1, v2, v3, v4, v5, v6, v7);
  }
}

void OpaqueJSClass::create(OpaqueJSClass *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const JSStaticFunction *staticFunctions;
  OpaqueJSClass *v9;
  OpaqueJSClass *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  JSClassDefinition v21;
  JSClassDefinition v22;
  OpaqueJSClass *v23;

  v4 = *((_OWORD *)this + 5);
  *(_OWORD *)&v22.getProperty = *((_OWORD *)this + 4);
  *(_OWORD *)&v22.deleteProperty = v4;
  v5 = *((_OWORD *)this + 7);
  *(_OWORD *)&v22.callAsFunction = *((_OWORD *)this + 6);
  *(_OWORD *)&v22.hasInstance = v5;
  v6 = *((_OWORD *)this + 1);
  *(_OWORD *)&v22.version = *(_OWORD *)this;
  *(_OWORD *)&v22.parentClass = v6;
  v7 = *((_OWORD *)this + 3);
  *(_OWORD *)&v22.staticFunctions = *((_OWORD *)this + 2);
  *(_OWORD *)&v22.finalize = v7;
  memset(&v21.finalize, 0, 80);
  memset(&v21, 0, 32);
  staticFunctions = v22.staticFunctions;
  v22.staticFunctions = 0;
  *(_OWORD *)&v21.staticFunctions = (unint64_t)staticFunctions;
  v9 = (OpaqueJSClass *)WTF::fastMalloc((WTF *)0x88);
  OpaqueJSClass::OpaqueJSClass(v9, &v21, 0);
  v10 = (OpaqueJSClass *)WTF::fastMalloc((WTF *)0x88);
  OpaqueJSClass::OpaqueJSClass(v10, &v22, v9);
  *a2 = v18;
  do
  {
    v19 = __ldaxr((unsigned int *)v9);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v9));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)v9);
    v23 = v9;
    WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23, v11, v12, v13, v14, v15, v16, v17);
  }
}

void OpaqueJSClassContextData::OpaqueJSClassContextData(OpaqueJSClassContextData *this, JSC::VM *a2, OpaqueJSClass *a3)
{
  unsigned int v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _BYTE *v19;
  size_t v20;
  int *v22;
  _BYTE *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  WTF **v42;
  int i;
  int v44;
  WTF **v45;
  WTF *v46;
  _QWORD *v47;
  WTF *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  int v82;
  _WORD *v83;
  unint64_t v84;
  BOOL v85;
  int *v86;
  _BYTE *v87;
  uint64_t v88;
  void *v89;
  const WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  WTF **v102;
  int j;
  int v104;
  WTF **v105;
  WTF *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t **v162;
  _QWORD *v164;
  uint64_t **v165;
  _QWORD *v166;
  WTF *v167;
  uint64_t *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;

  if (a3)
  {
    do
      v3 = __ldaxr((unsigned int *)a3);
    while (__stlxr(v3 + 1, (unsigned int *)a3));
  }
  *((_QWORD *)this + 1) = 0;
  v165 = (uint64_t **)((char *)this + 8);
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 2) = 0;
  v162 = (uint64_t **)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  if (!*((_QWORD *)a3 + 15))
    goto LABEL_4;
  v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v4 = 0;
  v12 = *v165;
  *v165 = v4;
  if (v12)
  {
    if (*v12)
      WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(*v12, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
  }
  v13 = (_QWORD *)**((_QWORD **)a3 + 15);
  if (v13)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[2 * v14];
    if (*((_DWORD *)v13 - 3))
    {
      if ((_DWORD)v14)
      {
        v16 = 16 * v14;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v16 -= 16;
          if (!v16)
          {
            v13 = v15;
            break;
          }
        }
      }
      v17 = v15;
      goto LABEL_18;
    }
    v117 = &v13[2 * v14];
  }
  else
  {
    v15 = 0;
    v117 = 0;
    v14 = 0;
  }
  v17 = &v13[2 * v14];
  v13 = v117;
LABEL_18:
  if (v15 == v13)
    goto LABEL_4;
  v164 = v15;
  do
  {
    v18 = *(_DWORD *)(*v13 + 16);
    v19 = *(_BYTE **)(*v13 + 8);
    v20 = *(unsigned int *)(*v13 + 4);
    if ((v18 & 3) == 0 && v19 != (_BYTE *)(*v13 + 20))
    {
      if ((v18 & 4) != 0)
      {
        if ((_DWORD)v20)
        {
          v22 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
          v24 = 2;
          *v22 = 2;
          v22[1] = v20;
          *((_QWORD *)v22 + 1) = v19;
          v22[4] = 4;
LABEL_32:
          v170 = (WTF::StringImpl *)v22;
          v25 = *v165;
          goto LABEL_33;
        }
      }
      else if ((_DWORD)v20)
      {
        v22 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        v24 = 2;
        *v22 = 2;
        v22[1] = v20;
        *((_QWORD *)v22 + 1) = v19;
        v22[4] = 0;
        goto LABEL_32;
      }
LABEL_84:
      v22 = &WTF::StringImpl::s_emptyAtomString;
      v24 = WTF::StringImpl::s_emptyAtomString + 2;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_32;
    }
    if ((v18 & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        if ((v20 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197F51624);
        }
        v22 = (int *)WTF::fastCompactMalloc((WTF *)(v20 + 20));
        v23 = v22 + 5;
        *v22 = 2;
        v22[1] = v20;
        *((_QWORD *)v22 + 1) = v22 + 5;
        v22[4] = 4;
        if ((_DWORD)v20 == 1)
          *v23 = *v19;
        else
          memcpy(v23, v19, v20);
        v24 = 2;
        goto LABEL_32;
      }
      goto LABEL_84;
    }
    WTF::StringImpl::create(*(_WORD **)(*v13 + 8), *(unsigned int *)(*v13 + 4), (uint64_t *)&v169);
    v22 = (int *)v169;
    v170 = v169;
    v25 = *v165;
    if (!v169)
      goto LABEL_34;
    v24 = *(_DWORD *)v169;
LABEL_33:
    *v22 = v24 + 2;
LABEL_34:
    v26 = v13[1];
    v34 = WTF::fastMalloc((WTF *)0x20);
    v35 = *(_DWORD *)(v26 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v26;
    *(_DWORD *)(v34 + 16) = v35;
    if (v22)
    {
      v36 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v36 = 1;
      WTF::String::isolatedCopy(&v170, (uint64_t *)(v36 + 8));
      v37 = *(_QWORD *)(v36 + 8);
      if (v37)
      {
        if ((*(_BYTE *)(v37 + 16) & 4) != 0)
          v37 = 0;
        else
          v37 = *(_QWORD *)(v37 + 8);
      }
      *(_QWORD *)(v36 + 16) = v37;
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)(v34 + 24) = v36;
    v38 = *v25;
    if (*v25
      || (WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(v25, 8uLL, 0, v29, v30, v31, v32, v33), (v38 = *v25) != 0))
    {
      v39 = *(_DWORD *)(v38 - 8);
    }
    else
    {
      v39 = 0;
    }
    v40 = v22[4];
    v167 = (WTF *)v34;
    if (v40 < 0x100)
      v41 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v22);
    else
      v41 = v40 >> 8;
    v42 = 0;
    for (i = 1; ; ++i)
    {
      v44 = v41 & v39;
      v45 = (WTF **)(v38 + 16 * (v41 & v39));
      v46 = *v45;
      if (!*v45)
      {
        if (v42)
        {
          *v42 = 0;
          v42[1] = 0;
          --*(_DWORD *)(*v25 - 16);
          *v42 = (WTF *)v22;
          v47 = v164;
          v48 = v167;
        }
        else
        {
          *v45 = (WTF *)v22;
          v47 = v164;
          v48 = v167;
          v42 = v45;
        }
        v49 = (unint64_t)v42[1];
        v42[1] = v48;
        if (v49)
        {
          v50 = *(unsigned int **)(v49 + 24);
          *(_QWORD *)(v49 + 24) = 0;
          if (v50)
          {
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              atomic_store(1u, v50);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v50, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
              WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
            }
          }
          WTF::fastFree(v49, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
        }
        v53 = *v25;
        if (*v25)
          v54 = *(_DWORD *)(v53 - 12) + 1;
        else
          v54 = 1;
        *(_DWORD *)(v53 - 12) = v54;
        v55 = *v25;
        if (*v25)
          v56 = *(_DWORD *)(v55 - 12);
        else
          v56 = 0;
        v57 = (*(_DWORD *)(v55 - 16) + v56);
        v58 = *(unsigned int *)(v55 - 4);
        if (v58 > 0x400)
        {
          if (v58 > 2 * v57)
            goto LABEL_60;
        }
        else
        {
          if (3 * v58 > 4 * v57)
            goto LABEL_60;
          if (!(_DWORD)v58)
          {
            v68 = 8;
LABEL_76:
            WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(v25, v68, (uint64_t)v42, v29, v30, v31, v32, v33);
            goto LABEL_60;
          }
        }
        v68 = ((_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58)));
        goto LABEL_76;
      }
      if (v46 != (WTF *)-1)
      {
        v45 = v42;
        if (WTF::equal(v46, (const WTF::StringImpl *)v22, v28))
          break;
      }
      v41 = i + v44;
      v42 = v45;
    }
    v134 = (unsigned int *)*((_QWORD *)v167 + 3);
    *((_QWORD *)v167 + 3) = 0;
    if (v134)
    {
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        atomic_store(1u, v134);
        OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v134, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
      }
    }
    WTF::fastFree((unint64_t)v167, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
    v47 = v164;
    if (*v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, (WTF::AtomStringImpl *)v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *v22 -= 2;
    }
LABEL_60:
    if (v170)
    {
      if (*(_DWORD *)v170 == 2)
      {
        WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v27, (uint64_t)v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v170 -= 2;
      }
    }
    v59 = v13 + 2;
    v13 = v17;
    if (v59 != v17)
    {
      v13 = v59;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        v13 += 2;
        if (v13 == v17)
        {
          v13 = v17;
          break;
        }
      }
    }
  }
  while (v13 != v47);
LABEL_4:
  if (!*((_QWORD *)a3 + 16))
    return;
  v69 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v69 = 0;
  std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100](v162, v69, v70, v71, v72, v73, v74, v75);
  v76 = (_QWORD *)**((_QWORD **)a3 + 16);
  if (!v76)
  {
    v78 = 0;
    v116 = 0;
    v77 = 0;
LABEL_141:
    v80 = &v76[2 * v77];
    v76 = v116;
    goto LABEL_93;
  }
  v77 = *((unsigned int *)v76 - 1);
  v78 = &v76[2 * v77];
  if (!*((_DWORD *)v76 - 3))
  {
    v116 = &v76[2 * v77];
    goto LABEL_141;
  }
  if ((_DWORD)v77)
  {
    v79 = 16 * v77;
    while ((unint64_t)(*v76 + 1) <= 1)
    {
      v76 += 2;
      v79 -= 16;
      if (!v79)
      {
        v76 = v78;
        break;
      }
    }
  }
  v80 = v78;
LABEL_93:
  if (v78 != v76)
  {
    v166 = v78;
    while (1)
    {
      v81 = *v162;
      v82 = *(_DWORD *)(*v76 + 16);
      v83 = *(_WORD **)(*v76 + 8);
      v84 = *(unsigned int *)(*v76 + 4);
      v85 = (v82 & 3) != 0 || v83 == (_WORD *)(*v76 + 20);
      v168 = *v162;
      if (!v85)
        break;
      if ((v82 & 4) == 0)
      {
        WTF::StringImpl::create(v83, v84, (uint64_t *)&v170);
        v86 = (int *)v170;
        goto LABEL_106;
      }
      if (!(_DWORD)v84)
        goto LABEL_105;
      if ((v84 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197F51640);
      }
      v86 = (int *)WTF::fastCompactMalloc((WTF *)(v84 + 20));
      v87 = v86 + 5;
      *v86 = 2;
      v86[1] = v84;
      *((_QWORD *)v86 + 1) = v86 + 5;
      v86[4] = 4;
      if ((_DWORD)v84 == 1)
        *v87 = *(_BYTE *)v83;
      else
        memcpy(v87, v83, v84);
LABEL_106:
      v170 = 0;
      v88 = v76[1];
      v96 = WTF::fastMalloc((WTF *)0x10);
      v97 = *(_DWORD *)(v88 + 8);
      *(_QWORD *)v96 = *(_QWORD *)v88;
      *(_DWORD *)(v96 + 8) = v97;
      v98 = *v81;
      if (*v81
        || (WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(v81, 8uLL, 0, v91, v92, v93, v94, v95), (v98 = *v81) != 0))
      {
        v99 = *(_DWORD *)(v98 - 8);
      }
      else
      {
        v99 = 0;
      }
      v100 = v86[4];
      if (v100 < 0x100)
        v101 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v86);
      else
        v101 = v100 >> 8;
      v102 = 0;
      for (j = 1; ; ++j)
      {
        v104 = v101 & v99;
        v105 = (WTF **)(v98 + 16 * (v101 & v99));
        v106 = *v105;
        if (!*v105)
          break;
        if (v106 != (WTF *)-1)
        {
          v105 = v102;
          if (WTF::equal(v106, (const WTF::StringImpl *)v86, v90))
          {
            WTF::fastFree(v96, v89, (uint64_t)v90, v91, v92, v93, v94, v95);
            if (*v86 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v86, (WTF::AtomStringImpl *)v89, (uint64_t)v90, v91, v92, v93, v94, v95);
              WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
            }
            else
            {
              *v86 -= 2;
            }
            v161 = v166;
            goto LABEL_126;
          }
        }
        v101 = j + v104;
        v102 = v105;
      }
      if (v102)
      {
        *v102 = 0;
        v102[1] = 0;
        v161 = v166;
        v107 = v168;
        --*(_DWORD *)(*v168 - 16);
        *v102 = (WTF *)v86;
      }
      else
      {
        *v105 = (WTF *)v86;
        v107 = v168;
        v102 = v105;
        v161 = v166;
      }
      v108 = (unint64_t)v102[1];
      v102[1] = (WTF *)v96;
      if (v108)
        WTF::fastFree(v108, v89, (uint64_t)v90, v91, v92, v93, v94, v95);
      v109 = *v107;
      if (*v107)
        v110 = *(_DWORD *)(v109 - 12) + 1;
      else
        v110 = 1;
      *(_DWORD *)(v109 - 12) = v110;
      v111 = *v107;
      if (*v107)
        v112 = *(_DWORD *)(v111 - 12);
      else
        v112 = 0;
      v113 = (*(_DWORD *)(v111 - 16) + v112);
      v114 = *(unsigned int *)(v111 - 4);
      if (v114 > 0x400)
      {
        if (v114 > 2 * v113)
          goto LABEL_126;
      }
      else if (3 * v114 > 4 * v113)
      {
        goto LABEL_126;
      }
      WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(v107, (uint64_t)v102, (uint64_t)v90, v91, v92, v93, v94, v95);
LABEL_126:
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
        {
          WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v89, (uint64_t)v90, v91, v92, v93, v94, v95);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
        }
        else
        {
          *(_DWORD *)v170 -= 2;
        }
      }
      v115 = v76 + 2;
      v76 = v80;
      if (v115 != v80)
      {
        v76 = v115;
        while ((unint64_t)(*v76 + 1) <= 1)
        {
          v76 += 2;
          if (v76 == v80)
          {
            v76 = v80;
            break;
          }
        }
      }
      if (v76 == v161)
        return;
    }
    if ((v82 & 4) == 0)
    {
      if ((_DWORD)v84)
      {
        v86 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v86 = 2;
        v86[1] = v84;
        *((_QWORD *)v86 + 1) = v83;
        v86[4] = 0;
      }
      else
      {
        v86 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v81 = v168;
      goto LABEL_106;
    }
    if ((_DWORD)v84)
    {
      v86 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v86 = 2;
      v86[1] = v84;
      *((_QWORD *)v86 + 1) = v83;
      v86[4] = 4;
      v170 = (WTF::StringImpl *)v86;
      goto LABEL_106;
    }
LABEL_105:
    v86 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_106;
  }
}

void OpaqueJSClass::contextData(OpaqueJSClass *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t *v10;
  OpaqueJSClassContextData *v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37[3];
  OpaqueJSClass *v38;

  v38 = this;
  v9 = *((_QWORD *)a2 + 261);
  if (!v9)
  {
    v21 = (unint64_t *)((char *)a2 + 2088);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = 0;
    v22[1] = 0;
    v37[0] = (unint64_t)v22;
    std::unique_ptr<JSC::JSGlobalObject::RareData>::operator=[abi:sn180100](v21, v37, v23, v24, v25, v26, v27, v28);
    std::unique_ptr<JSC::JSGlobalObject::RareData>::~unique_ptr[abi:sn180100](v37, v29, v30, v31, v32, v33, v34, v35);
    v9 = *v21;
  }
  v36 = 0;
  WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v9 + 8), (uint64_t *)&v38, (uint64_t)&v36, a4, a5, a6, a7, a8, (uint64_t)v37);
  v10 = (unint64_t *)(v37[0] + 8);
  if (!*(_QWORD *)(v37[0] + 8))
  {
    v11 = (OpaqueJSClassContextData *)WTF::fastMalloc((WTF *)0x20);
    OpaqueJSClassContextData::OpaqueJSClassContextData(v11, v12, this);
    v19 = *v10;
    *v10 = v20;
    if (v19)
      std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v10, v19, v13, v14, v15, v16, v17, v18);
  }
}

unint64_t OpaqueJSClass::prototype(OpaqueJSClass *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  OpaqueJSClass *v17;
  _QWORD *Allocator;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t (*v27)(_QWORD *);
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v31[3];

  if (!*((_QWORD *)this + 2))
    return 0;
  OpaqueJSClass::contextData(this, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v12 = *(_QWORD *)(v10 + 24);
  if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0 || (v13 = *(_QWORD *)v12) == 0)
  {
    v15 = *(_QWORD *)(a2 + 808);
    if ((v15 & 1) != 0)
    {
      v27 = *(uint64_t (**)(_QWORD *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v28 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v28 = (_QWORD *)(a2 - 16);
      v31[0] = *v28;
      v31[1] = a2;
      v31[2] = a2 + 808;
      v15 = v27(v31);
    }
    JSC::JSCallbackObject<JSC::JSNonFinalObject>::create(a2, v15, *((unsigned int **)this + 2), v11);
    v13 = v16;
    v17 = (OpaqueJSClass *)*((_QWORD *)this + 1);
    if (v17)
    {
      v20 = OpaqueJSClass::prototype(v17, (JSC::JSGlobalObject *)a2);
      if (v20)
        JSC::JSObject::setPrototypeDirect(v13, *(JSC::VM **)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
    }
    if (v13)
    {
      if ((v13 & 8) != 0)
        v29 = (v13 - 112) | 1;
      else
        v29 = v13 & 0xFFFFFFFFFFFFC000;
      if ((v29 & 1) != 0)
        v30 = (_QWORD *)(v29 + 47);
      else
        v30 = (_QWORD *)(*(_QWORD *)v29 + 32);
      Allocator = (_QWORD *)v30[2];
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v30, v29);
      v30[2] = *Allocator;
      *Allocator = v13;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    else
    {
      Allocator = 0;
    }
    v19 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = Allocator;
    if (v19)
      *(_QWORD *)(v19 + 8) = 3;
  }
  return v13;
}

void JSC::JSCallbackObject<JSC::JSNonFinalObject>::create(uint64_t a1, unint64_t a2, unsigned int *a3, uint64_t a4)
{
  JSC *v8;
  _QWORD *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  int v18;
  _QWORD *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF *v33;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[128];

  v8 = *(JSC **)(a1 + 56);
  v9 = (_QWORD *)JSC::JSCallbackObject<JSC::JSNonFinalObject>::subspaceForImpl((uint64_t)v8, 0);
  SlowCase = v9[3];
  if (SlowCase >= v9[4])
  {
    SlowCase = v9[5];
    if ((SlowCase & 1) != 0)
    {
      v54 = (uint64_t)v9;
      JSC::sanitizeStackForVM(v8, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v54, (uint64_t)v8 + 192, 32, 0, 0, v55, v56, v57);
      goto LABEL_3;
    }
    v36 = *(_QWORD *)(SlowCase + 8) ^ v9[6];
    v9[4] = SlowCase + HIDWORD(v36);
    v9[5] = SlowCase + (int)v36;
  }
  v9[3] = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v18 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v18;
  *(_QWORD *)(SlowCase + 8) = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = a4;
  v19[1] = a3;
  v19[2] = 0;
  do
    v27 = __ldaxr(a3);
  while (__stlxr(v27 + 1, a3));
  *(_QWORD *)(SlowCase + 16) = v19;
  *(_QWORD *)(SlowCase + 24) = 0;
  v28 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v28 + 755))
  {
    __dmb(0xAu);
    v28 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD **)(SlowCase + 16);
  }
  v29 = 0;
  v60 = (WTF *)v62;
  v61 = 16;
  v30 = (_QWORD *)v19[1];
  do
  {
    if (v30[13])
      v29 = 1;
    v31 = (WTF::StringImpl *)v30[3];
    v58 = v31;
    if (v31)
    {
      v35 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,void (*&)(OpaqueJSContext const*,OpaqueJSValue *)>((uint64_t)&v60, (unint64_t)&v58);
      }
      else
      {
        *((_QWORD *)v60 + HIDWORD(v61)) = v31;
        HIDWORD(v61) = v35 + 1;
      }
    }
    v30 = (_QWORD *)v30[1];
  }
  while (v30);
  if ((v29 & 1) != 0)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v28 + 41952) + 2768);
    v38 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v38 = 0x1400000002;
    *(_QWORD *)(v38 + 8) = "[Symbol.toPrimitive]";
    *(_DWORD *)(v38 + 16) = 4;
    v58 = (WTF::StringImpl *)v38;
    v39 = JSC::JSFunction::create(v28, a1, 1, &v58, (uint64_t)JSC::JSCallbackObject<JSC::JSNonFinalObject>::customToPrimitive, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirect((int *)SlowCase, v28, v37, v39, 4, v43, v40, v41, v42);
    v44 = v58;
    v58 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  v32 = HIDWORD(v61);
  if (SHIDWORD(v61) >= 1)
  {
    if (a1)
    {
      while (1)
      {
        --v32;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v58, *(JSC::VM **)(a1 + 56), v21, v22, v23, v24, v25, v26);
        if (HIDWORD(v61) <= v32)
          break;
        (*((void (**)(uint64_t, unint64_t))v60 + v32))(a1, SlowCase);
        if (v59)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v59 + 112), (uint64_t)&v58, v58, v22, v23, v24, v25, v26);
          v53 = (unsigned int *)v59;
          v59 = 0;
          if (v53)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v53, (uint64_t)v20, v21, v22, v23, v24, v25, v26);
        }
        if ((unint64_t)(v32 + 1) <= 1)
          goto LABEL_14;
      }
    }
    else
    {
      while (1)
      {
        --v32;
        v58 = 0;
        v59 = 0;
        if (HIDWORD(v61) <= v32)
          break;
        (*((void (**)(_QWORD, unint64_t))v60 + v32))(0, SlowCase);
        if ((unint64_t)(v32 + 1) <= 1)
          goto LABEL_14;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:
    *(_QWORD *)(SlowCase + 24) = 16 * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C);
    v33 = v60;
    if (v62 != (_BYTE *)v60 && v60 != 0)
    {
      v60 = 0;
      LODWORD(v61) = 0;
      WTF::fastFree((unint64_t)v33, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

JSContextGroupRef JSContextGroupCreate(void)
{
  unint64_t v0;
  uint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v0 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v0 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  v1 = WTF::fastMalloc((WTF *)0x16D60);
  return (JSContextGroupRef)JSC::VM::VM(v1, 1, 0, 0, 0);
}

unsigned int **WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::VM::~VM((JSC::VM *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  return a1;
}

JSContextGroupRef JSContextGroupRetain(JSContextGroupRef group)
{
  unsigned int v1;

  do
    v1 = __ldaxr((unsigned int *)group);
  while (__stlxr(v1 + 1, (unsigned int *)group));
  return group;
}

void JSContextGroupRelease(JSContextGroupRef group)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v26, group, v1, v2, v3, v4, v5, v6, v7);
  do
  {
    v16 = __ldaxr((unsigned int *)group);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)group));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)group);
    JSC::VM::~VM(group, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  JSC::JSLockHolder::~JSLockHolder(&v26, v9, v10, v11, v12, v13, v14, v15);
}

void JSContextGroupSetExecutionTimeLimit(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unsigned int *v21;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v21, (JSC::VM *)a1, a3, a4, a5, a6, a7, a8, a9);
  v19 = a1 + 11668;
  v20 = a1[11668];
  if ((v20 & 1) != 0)
    v20 = (*(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL))(a1);
  *(double *)(v20 + 16) = a9;
  if (a2)
  {
    *(_QWORD *)(v20 + 40) = internalScriptTimeoutCallback;
    *(_QWORD *)(v20 + 48) = a2;
    *(_QWORD *)(v20 + 56) = a3;
  }
  else
  {
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
  }
  if (a9 != INFINITY && *(_BYTE *)(v20 + 4))
    JSC::Watchdog::startTimer(v20, a9);
  JSC::JSLockHolder::~JSLockHolder(&v21, v19, v13, v14, v15, v16, v17, v18);
}

uint64_t internalScriptTimeoutCallback(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  return a2(a1, a3);
}

void JSContextGroupClearExecutionTimeLimit(JSC::VM *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, a1, a4, a5, a6, a7, a8, a9, a2);
  v17 = (_QWORD *)*((_QWORD *)a1 + 11668);
  if ((v17 & 1) == 0 && v17)
  {
    v17[2] = 0x7FF0000000000000;
    v17[6] = 0;
    v17[7] = 0;
    v17[5] = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
}

JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const OpaqueJSContextGroup *v10;
  uint64_t v11;
  int v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  if (NSVersionOfLinkTimeLibrary("JavaScriptCore") <= 34604288)
  {
    if (__ldaxr(JSC::GlobalJSLock::s_sharedInstanceMutex))
    {
      __clrex();
    }
    else if (!__stxr(1u, JSC::GlobalJSLock::s_sharedInstanceMutex))
    {
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::GlobalJSLock::s_sharedInstanceMutex);
LABEL_9:
    v11 = JSC::VM::sharedInstanceInternal(void)::sharedInstance;
    if (!JSC::VM::sharedInstanceInternal(void)::sharedInstance)
    {
      v11 = WTF::fastMalloc((WTF *)0x16D60);
      JSC::VM::sharedInstanceInternal(void)::sharedInstance = JSC::VM::VM(v11, 2, 0, 0, 0);
    }
    v12 = __ldxr(JSC::GlobalJSLock::s_sharedInstanceMutex);
    if (v12 == 1)
    {
      if (!__stlxr(0, JSC::GlobalJSLock::s_sharedInstanceMutex))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::GlobalJSLock::s_sharedInstanceMutex, 0, v3, v4, v5, v6, v7, v8);
LABEL_16:
    v10 = (const OpaqueJSContextGroup *)v11;
    return JSGlobalContextCreateInGroup(v10, globalObjectClass);
  }
  v10 = 0;
  return JSGlobalContextCreateInGroup(v10, globalObjectClass);
}

JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  JSC::VM *v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Inspector::RemoteInspector *v25;
  Inspector::RemoteInspectionTarget **v26;
  _BOOL4 InspectionEnabledByDefault;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  unint64_t Structure;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  unint64_t v63;
  unsigned int *v64;
  JSC::VM *v65;

  v3 = (unsigned int *)group;
  JSC::initialize(group);
  if (v3)
  {
    do
      v43 = __ldaxr(v3);
    while (__stlxr(v43 + 1, v3));
    v65 = (JSC::VM *)v3;
  }
  else
  {
    JSC::VM::createContextGroup(0, (uint64_t *)&v65);
    v3 = (unsigned int *)v65;
  }
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v64, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9, v10);
  if (globalObjectClass)
  {
    Structure = JSC::JSCallbackObject<JSC::JSGlobalObject>::createStructure((JSC::VM *)v3, 0, 2, v12, v13, v14, v15, v16, v17);
    v26 = (Inspector::RemoteInspectionTarget **)JSC::JSCallbackObject<JSC::JSGlobalObject>::create((uint64_t)v3, globalObjectClass, Structure, v45, v46, v47, v48, v49);
    v56 = OpaqueJSClass::prototype(globalObjectClass, (uint64_t)v26, v50, v51, v52, v53, v54, v55);
    if (v56)
      v63 = v56;
    else
      v63 = 2;
    v25 = (Inspector::RemoteInspector *)JSC::JSGlobalObject::resetPrototype((uint64_t)v26, (uint64_t)v3, v63, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    v18 = (JSC::VM *)JSC::JSAPIGlobalObject::createStructure((JSC::VM *)v3, 2, v17, v11, v12, v13, v14, v15, v16);
    v25 = JSC::JSAPIGlobalObject::create((JSC::Heap **)v3, v18, v19, v20, v21, v22, v23, v24);
    v26 = (Inspector::RemoteInspectionTarget **)v25;
  }
  InspectionEnabledByDefault = JSRemoteInspectorGetInspectionEnabledByDefault(v25);
  Inspector::RemoteInspectionTarget::setInspectable(v26[254], InspectionEnabledByDefault);
  JSGlobalContextRetain((JSGlobalContextRef)v26);
  JSC::JSLockHolder::~JSLockHolder(&v64, v28, v29, v30, v31, v32, v33, v34);
  WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref((unsigned int **)&v65, v35, v36, v37, v38, v39, v40, v41);
  return (JSGlobalContextRef)v26;
}

JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  JSC::VM *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  unsigned int *v21;
  _QWORD v22[3];
  JSGlobalContextRef v23;
  int v24;

  v9 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v21, v9, v1, v2, v3, v4, v5, v6, v7);
  v17 = (unint64_t)ctx & 0xFFFE000000000002;
  if (ctx && !v17)
  {
    v20 = (_QWORD *)((unint64_t)ctx & 0xFFFFFFFFFFFFC000 | 8);
    if ((ctx & 8) != 0)
      v20 = (_QWORD *)((char *)ctx - 16);
    v17 = *v20 + 192;
  }
  else if (v17)
  {
    goto LABEL_5;
  }
  v23 = ctx;
  v24 = 0;
  WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v17 + 360), (uint64_t *)&v23, &v24, v12, v13, v14, v15, v16, (uint64_t)v22);
  ++*(_DWORD *)(v22[0] + 8);
  do
LABEL_5:
    v18 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v18 + 1, (unsigned int *)v9));
  JSC::JSLockHolder::~JSLockHolder(&v21, v10, v11, v12, v13, v14, v15, v16);
  return ctx;
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  JSGlobalContextRef v28;

  v9 = (uint64_t *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v27, (JSC::VM *)v9, v1, v2, v3, v4, v5, v6, v7);
  if (((unint64_t)ctx & 0xFFFE000000000002) == 0)
  {
    v28 = ctx;
    if (WTF::HashCountedSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::remove(v9 + 69, &v28, v11, v12, v13, v14, v15, v16))JSC::Heap::reportAbandonedObjectGraph((JSC::Heap *)(v9 + 24));
  }
  do
  {
    v17 = __ldaxr((unsigned int *)v9);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)v9));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)v9);
    JSC::VM::~VM((JSC::VM *)v9, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  JSC::JSLockHolder::~JSLockHolder(&v27, v10, v11, v12, v13, v14, v15, v16);
}

JSObjectRef JSContextGetGlobalObject(JSContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  void *v9;
  JSC::Structure *v10;
  JSC::Symbol *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int *v19;

  v8 = (uint64_t)ctx;
  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, *((JSC::VM **)ctx + 7), v1, v2, v3, v4, v5, v6, v7);
    v18 = v8;
    if ((v8 & 0xFFFE000000000002) != 0 || (v16 = *(unsigned __int8 *)(v8 + 5), v16 < 0x17))
    {
      if ((v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        v8 = JSC::JSValue::toThisSloppySlowCase((JSC::JSValue *)&v18, (JSC::JSGlobalObject *)v8, v10, v11, v12, v13, v14, v15);
        goto LABEL_5;
      }
    }
    else if (v16 - 51 > 5)
    {
LABEL_5:
      JSC::JSLockHolder::~JSLockHolder(&v19, v9, (uint64_t)v10, (uint64_t)v11, v12, v13, v14, v15);
      return (JSObjectRef)v8;
    }
    v8 = *(_QWORD *)(v8 + 64);
    goto LABEL_5;
  }
  return (JSObjectRef)v8;
}

JSContextGroupRef JSContextGetGroup(JSContextGroupRef ctx)
{
  if (ctx)
    return (JSContextGroupRef)*((_QWORD *)ctx + 7);
  return ctx;
}

JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;

  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v17, ctx, v1, v2, v3, v4, v5, v6, v7);
    JSC::JSLockHolder::~JSLockHolder(&v17, v9, v10, v11, v12, v13, v14, v15);
  }
  return ctx;
}

JSStringRef JSGlobalContextCopyName(JSGlobalContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;

  v8 = (uint64_t *)ctx;
  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v28, *((JSC::VM **)ctx + 7), v1, v2, v3, v4, v5, v6, v7);
    v16 = (WTF::StringImpl *)v8[250];
    if (v16)
    {
      *(_DWORD *)v16 += 2;
      v27 = v16;
      v8 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 1;
      WTF::String::isolatedCopy(&v27, v8 + 1);
      v17 = v8[1];
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 16) & 4) != 0)
          v17 = 0;
        else
          v17 = *(_QWORD *)(v17 + 8);
      }
      v8[2] = v17;
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    else
    {
      v8 = 0;
    }
    JSC::JSLockHolder::~JSLockHolder(&v28, v9, v10, v11, v12, v13, v14, v15);
  }
  return (JSStringRef)v8;
}

void JSGlobalContextSetName(JSGlobalContextRef ctx, JSStringRef name)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  Inspector::RemoteControllableTarget *v20;
  Inspector::RemoteInspector *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  OpaqueJSString *v51;
  unsigned int *v52;

  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v52, *((JSC::VM **)ctx + 7), v2, v3, v4, v5, v6, v7, v8);
    if (name && (WTF::String::isolatedCopy((_DWORD *)name + 2, (uint64_t *)&v51), (name = v51) != 0))
    {
      v18 = 0;
      *(_DWORD *)v51 += 2;
    }
    else
    {
      v18 = 1;
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)ctx + 250);
    *((_QWORD *)ctx + 250) = name;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v20 = (Inspector::RemoteControllableTarget *)*((_QWORD *)ctx + 254);
    v21 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(v19);
    Inspector::RemoteInspector::updateTarget(v21, v20, v22, v23, v24, v25, v26, v27);
    if ((v18 & 1) == 0)
    {
      if (*(_DWORD *)name == 2)
      {
        WTF::StringImpl::~StringImpl(name, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)name -= 2;
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v52, v28, v29, v30, v31, v32, v33, v34);
  }
}

BOOL JSGlobalContextIsInspectable(JSGlobalContextRef ctx)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  JSGlobalContextRef v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v19;

  v8 = ctx;
  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, *((JSC::VM **)ctx + 7), v1, v2, v3, v4, v5, v6, v7);
    v16 = *(unsigned __int8 *)(*((_QWORD *)v8 + 254) + 20);
    LOBYTE(v8) = (v16 & 7) == 0 && v16 < 3;
    JSC::JSLockHolder::~JSLockHolder(&v19, v9, v10, v11, v12, v13, v14, v15);
  }
  return (char)v8;
}

void JSGlobalContextSetInspectable(JSGlobalContextRef ctx, BOOL inspectable)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BOOL4 v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  if (ctx)
  {
    v9 = inspectable;
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *((JSC::VM **)ctx + 7), v2, v3, v4, v5, v6, v7, v8);
    Inspector::RemoteInspectionTarget::setInspectable(*((Inspector::RemoteInspectionTarget **)ctx + 254), v9);
    JSC::JSLockHolder::~JSLockHolder(&v18, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSGlobalContextSetUnhandledRejectionCallback(unint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  const WTF::String *v22;
  unint64_t TypeError;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  WTF::StringImpl *v38[3];

  if (a1)
  {
    v12 = *(_QWORD **)(a1 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v37, (JSC::VM *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v20 = *(unsigned __int8 *)(a2 + 5);
    if (v20 >= 0x17
      && ((v20 & 0xFE) == 0x1A
       || (*(_BYTE *)(a2 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(v38, a2), LOBYTE(v38[0]))))
    {
      v33 = *(_QWORD **)(a1 + 2008);
      if (!v33)
      {
        v34 = (_QWORD *)v12[89];
        if (!v34)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 84), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
          v34 = (_QWORD *)v12[89];
        }
        v12[89] = *v34;
        v34[2] = 0;
        v33 = v34 + 2;
        *v34 = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 2008) = v34 + 2;
      }
      if (!*v33)
      {
        v35 = *(_QWORD **)(((unint64_t)(v33 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v36 = v35[3];
        v35 += 3;
        *(v33 - 2) = v36;
        *(v33 - 1) = v35;
        *v35 = v33 - 2;
        *(_QWORD *)(v36 + 8) = v33 - 2;
      }
      *v33 = a2;
    }
    else
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0xA00000002;
      *(_QWORD *)(v21 + 8) = "Type error";
      *(_DWORD *)(v21 + 16) = 4;
      v38[0] = (WTF::StringImpl *)v21;
      TypeError = JSC::createTypeError(a1, v38, v22);
      v24 = v38[0];
      v38[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
      *a3 = TypeError;
    }
    JSC::JSLockHolder::~JSLockHolder(&v37, v13, v14, v15, v16, v17, v18, v19);
  }
}

void JSGlobalContextSetEvalEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int *v37;

  if (a1)
  {
    v9 = (WTF::StringImpl *)a3;
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v37, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
    if (v9)
    {
      WTF::String::isolatedCopy((_DWORD *)v9 + 2, (uint64_t *)&v36);
      v9 = v36;
      *(_BYTE *)(a1 + 3169) = a2;
      if (v9)
        *(_DWORD *)v9 += 2;
    }
    else
    {
      *(_BYTE *)(a1 + 3169) = a2;
    }
    v19 = *(WTF::StringImpl **)(a1 + 3184);
    *(_QWORD *)(a1 + 3184) = v9;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
        if (v9)
        {
LABEL_10:
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::~StringImpl(v9, v12, v13, v14, v15, v16, v17, v18);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
        }
LABEL_12:
        JSC::JSLockHolder::~JSLockHolder(&v37, v12, v13, v14, v15, v16, v17, v18);
        return;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v9)
      goto LABEL_10;
    goto LABEL_12;
  }
}

uint64_t JSContextCreateBacktrace(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::CallFrame **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _WORD *v58;
  int v59;
  _WORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned __int128 *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  __int32 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int16 v76;
  char *v77;
  char *v78;
  __int16 v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  int v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  int8x16_t v106;
  int8x16_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  int8x16_t v112;
  int8x16_t v113;
  char *v114;
  char *v115;
  char *v116;
  unsigned __int128 *v117;
  unsigned __int128 *v118;
  unsigned __int128 v119;
  unsigned __int128 *v120;
  unsigned __int128 *v121;
  unsigned __int128 v122;
  char v123;
  char v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  unsigned int v176;
  char v177;
  unsigned int *v178;
  _BYTE v179[16];
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  int8x16_t v187[2];
  uint64_t v188;
  int8x16x2_t v189;
  int8x16x2_t v190;
  int8x16x2_t v191;
  int8x16x2_t v192;
  int8x16x2_t v193;
  int8x16x2_t v194;
  int8x16x2_t v195;
  int8x16x2_t v196;

  v188 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = *(JSC::CallFrame ***)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v178, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8, a9);
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 1;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v179, v10[5], (JSC::VM *)v10, 0, v11, v12, v13, v14);
  if (v180)
  {
    while (a2)
    {
      v22 = v183;
      if (!v181 && v183 != 0)
        break;
      v24 = v176;
      if (v176)
      {
        v187[0].i8[0] = 10;
        if (v175 && (v176 < *((_DWORD *)v175 + 1) ? (v25 = v174 == 0) : (v25 = 0), v25))
        {
          v26 = *((_DWORD *)v175 + 4);
          v27 = *((_QWORD *)v175 + 1);
          ++v176;
          if ((v26 & 4) != 0)
            *(_BYTE *)(v27 + v24) = 10;
          else
            *(_WORD *)(v27 + 2 * v24) = 10;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v174, v187, 1uLL, v17, v18, v19, v20, v21);
        }
        v22 = v183;
      }
      JSC::StackVisitor::Frame::functionName((JSC::StackVisitor::Frame *)v179, &v186);
      JSC::StackVisitor::Frame::sourceURL((JSC::StackVisitor::Frame *)v179, (uint64_t *)&v185);
      v34 = 0;
      v36 = v185;
      v35 = v186;
      v37 = v22;
      do
      {
        ++v34;
        v38 = v37 > 9;
        v37 /= 0xAuLL;
      }
      while (v38);
      if (v186)
      {
        v39 = *(_DWORD *)(v186 + 4);
        if (v185)
          goto LABEL_23;
      }
      else
      {
        v39 = 0;
        if (v185)
        {
LABEL_23:
          v40 = *((_DWORD *)v185 + 1);
          if (v40 >= 0xFFFFFFFA)
            v41 = -1;
          else
            v41 = v40 + 6;
          goto LABEL_25;
        }
      }
      v41 = 6;
LABEL_25:
      v42 = __CFADD__(v41, v39);
      v43 = v41 + v39;
      v44 = v42;
      v42 = __CFADD__(v43, 1);
      v45 = v43 + 1;
      v46 = v42;
      if ((v44 & 1) != 0 || v46)
        v45 = -1;
      v42 = __CFADD__(v45, v34);
      v47 = v45 + v34;
      v48 = v42;
      v42 = __CFADD__(v47, 1);
      v49 = v47 + 1;
      v50 = v42;
      if ((v48 & 1) != 0 || v50)
        v49 = -1;
      v51 = v49 + v176;
      if (__CFADD__(v49, v176))
        v51 = 0xFFFFFFFFLL;
      v52 = v175;
      if ((!v175 && (v52 = v174) == 0 || (*((_BYTE *)v52 + 16) & 4) != 0)
        && (!v186 || (*(_BYTE *)(v186 + 16) & 4) != 0)
        && (!v185 || (*((_BYTE *)v185 + 16) & 4) != 0))
      {
        v96 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v174, (WTF::AtomStringImpl *)v51, v28, v29, v30, v31, v32, v33);
        if (!v96)
          goto LABEL_70;
        v97 = 0;
        *v96 = 35;
        v98 = v22;
        do
        {
          v187[1].i8[v97-- + 8] = (v98 % 0xA) | 0x30;
          v38 = v98 > 9;
          v98 /= 0xAuLL;
        }
        while (v38);
        v99 = v96 + 1;
        if (v97 + 26 <= 25)
          memcpy(v96 + 1, (char *)&v187[1].u64[1] + v97 + 1, -v97);
        v100 = 0;
        do
        {
          ++v100;
          v38 = v22 > 9;
          v22 /= 0xAuLL;
        }
        while (v38);
        v101 = &v99[v100];
        *v101 = 32;
        v102 = v101 + 1;
        if (v35)
        {
          v15 = *(_OWORD **)(v35 + 8);
          v16 = *(unsigned int *)(v35 + 4);
          if ((*(_BYTE *)(v35 + 16) & 4) != 0)
          {
            if ((_DWORD)v16 == 1)
            {
              *v102 = *(_BYTE *)v15;
            }
            else if ((_DWORD)v16)
            {
              memcpy(v102, v15, v16);
            }
          }
          else
          {
            if (v16 < 0x10)
            {
              v117 = (unsigned __int128 *)v102;
            }
            else
            {
              v117 = (unsigned __int128 *)&v102[v16 & 0xFFFFFFF0];
              v118 = (unsigned __int128 *)v102;
              do
              {
                v119 = (unsigned __int128)vld2q_s8((const char *)v15);
                v15 += 2;
                *v118++ = v119;
              }
              while (v118 != v117);
            }
            while (v117 != (unsigned __int128 *)&v102[v16])
            {
              v123 = *(_BYTE *)v15;
              v15 = (_OWORD *)((char *)v15 + 2);
              *(_BYTE *)v117 = v123;
              v117 = (unsigned __int128 *)((char *)v117 + 1);
            }
          }
          v103 = *(unsigned int *)(v35 + 4);
        }
        else
        {
          v103 = 0;
        }
        v104 = &v102[v103];
        *((_WORD *)v104 + 2) = 8308;
        *(_DWORD *)v104 = 1629497640;
        if (!v36)
          goto LABEL_70;
        v65 = (unsigned __int128 *)(v104 + 6);
        v15 = (_OWORD *)*((_QWORD *)v36 + 1);
        v16 = *((unsigned int *)v36 + 1);
        if ((*((_BYTE *)v36 + 16) & 4) == 0)
        {
          if (v16 < 0x10)
          {
            v120 = (unsigned __int128 *)(v104 + 6);
          }
          else
          {
            v120 = (unsigned __int128 *)((char *)v65 + (v16 & 0xFFFFFFF0));
            v121 = v65;
            do
            {
              v122 = (unsigned __int128)vld2q_s8((const char *)v15);
              v15 += 2;
              *v121++ = v122;
            }
            while (v121 != v120);
          }
          while (v120 != (unsigned __int128 *)((char *)v65 + v16))
          {
            v124 = *(_BYTE *)v15;
            v15 = (_OWORD *)((char *)v15 + 2);
            *(_BYTE *)v120 = v124;
            v120 = (unsigned __int128 *)((char *)v120 + 1);
          }
          goto LABEL_70;
        }
        if ((_DWORD)v16 == 1)
        {
          *(_BYTE *)v65 = *(_BYTE *)v15;
          goto LABEL_70;
        }
        if (!(_DWORD)v16)
          goto LABEL_70;
        goto LABEL_69;
      }
      v53 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v174, (WTF::AtomStringImpl *)v51, v28, v29, v30, v31, v32, v33);
      if (!v53)
        goto LABEL_70;
      *v53 = 35;
      v54 = -1;
      v55 = 24;
      v56 = v22;
      do
      {
        v57 = v54;
        v187[0].i8[v55--] = (v56 % 0xA) | 0x30;
        --v54;
        v38 = v56 > 9;
        v56 /= 0xAuLL;
      }
      while (v38);
      if (v55 + 2 <= 25)
      {
        v58 = v53 + 1;
        do
        {
          *v58++ = v187[1].u8[v57 + 9];
          v42 = __CFADD__(v57++, 1);
        }
        while (!v42);
      }
      v59 = 0;
      do
      {
        ++v59;
        v38 = v22 > 9;
        v22 /= 0xAuLL;
      }
      while (v38);
      v60 = &v53[v59 + 1];
      *v60 = 32;
      v61 = (char *)(v60 + 1);
      if (v35)
      {
        v15 = *(_OWORD **)(v35 + 8);
        v62 = *(unsigned int *)(v35 + 4);
        if ((*(_BYTE *)(v35 + 16) & 4) != 0)
        {
          if (v62 >= 0x40)
          {
            v74 = &v61[2 * (v62 & 0xFFFFFFC0)];
            v105 = v61;
            do
            {
              v189.val[0] = (int8x16_t)*v15;
              v106 = *((int8x16_t *)v15 + 1);
              v191.val[0] = (int8x16_t)v15[2];
              v107 = *((int8x16_t *)v15 + 3);
              v15 += 4;
              v195.val[1] = 0u;
              v195.val[0] = v107;
              v191.val[1] = 0u;
              v193.val[0] = v106;
              v189.val[1] = 0u;
              v108 = v105;
              vst2q_s8(v108, v189);
              v108 += 32;
              v193.val[1] = 0u;
              vst2q_s8(v108, v193);
              v109 = v105 + 64;
              vst2q_s8(v109, v191);
              v110 = v105 + 96;
              vst2q_s8(v110, v195);
              v105 += 128;
            }
            while (v105 != v74);
          }
          else
          {
            v74 = v61;
          }
          v75 = &v61[2 * v62];
          while (v74 != v75)
          {
            v76 = *(unsigned __int8 *)v15;
            v15 = (_OWORD *)((char *)v15 + 1);
            *(_WORD *)v74 = v76;
            v74 += 2;
          }
        }
        else if ((_DWORD)v62 == 1)
        {
          *(_WORD *)v61 = *(_WORD *)v15;
        }
        else if ((_DWORD)v62)
        {
          memcpy(v61, v15, 2 * v62);
        }
        v63 = *(unsigned int *)(v35 + 4);
      }
      else
      {
        v63 = 0;
      }
      v64 = &v61[2 * v63];
      *(_QWORD *)v64 = 0x61002000290028;
      *((_DWORD *)v64 + 2) = 2097268;
      if (!v36)
        goto LABEL_70;
      v65 = (unsigned __int128 *)(v64 + 12);
      v15 = (_OWORD *)*((_QWORD *)v36 + 1);
      v66 = *((unsigned int *)v36 + 1);
      if ((*((_BYTE *)v36 + 16) & 4) != 0)
      {
        if (v66 >= 0x40)
        {
          v77 = (char *)v65 + 2 * (v66 & 0xFFFFFFC0);
          v111 = (char *)v65;
          do
          {
            v190.val[0] = (int8x16_t)*v15;
            v112 = *((int8x16_t *)v15 + 1);
            v192.val[0] = (int8x16_t)v15[2];
            v113 = *((int8x16_t *)v15 + 3);
            v15 += 4;
            v194.val[0] = v113;
            v192.val[1] = 0u;
            v196.val[0] = v112;
            v190.val[1] = 0u;
            v114 = v111;
            vst2q_s8(v114, v190);
            v114 += 32;
            v194.val[1] = 0u;
            v196.val[1] = 0u;
            vst2q_s8(v114, v196);
            v115 = v111 + 64;
            vst2q_s8(v115, v192);
            v116 = v111 + 96;
            v111 += 128;
            vst2q_s8(v116, v194);
          }
          while (v111 != v77);
        }
        else
        {
          v77 = (char *)v65;
        }
        v78 = (char *)v65 + 2 * v66;
        while (v77 != v78)
        {
          v79 = *(unsigned __int8 *)v15;
          v15 = (_OWORD *)((char *)v15 + 1);
          *(_WORD *)v77 = v79;
          v77 += 2;
        }
        goto LABEL_70;
      }
      if ((_DWORD)v66 == 1)
      {
        *(_WORD *)v65 = *(_WORD *)v15;
        goto LABEL_70;
      }
      if ((_DWORD)v66)
      {
        v16 = 2 * v66;
LABEL_69:
        memcpy(v65, v15, v16);
      }
LABEL_70:
      if (v185)
      {
        if (*(_DWORD *)v185 == 2)
        {
          WTF::StringImpl::~StringImpl(v185, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v185 -= 2;
        }
      }
      v67 = (WTF::StringImpl *)v186;
      v186 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
        {
          WTF::StringImpl::~StringImpl(v67, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
        }
        else
        {
          *(_DWORD *)v67 -= 2;
        }
      }
      if (v182)
      {
        v68 = JSC::StackVisitor::Frame::computeLineAndColumn((JSC::StackVisitor::Frame *)v179);
        LOBYTE(v186) = 58;
        v187[0].i32[0] = v68;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v174, &v186, (unsigned int *)v187, v69, v70, v71, v72, v73);
      }
      if (v181)
      {
        --a2;
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v179, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
        if (v180)
          continue;
      }
      break;
    }
  }
  v125 = v184;
  v184 = 0;
  if (v125)
  {
    do
    {
      v126 = __ldaxr(v125);
      v127 = v126 - 1;
    }
    while (__stlxr(v127, v125));
    if (!v127)
    {
      atomic_store(1u, v125);
      v187[0].i64[0] = (uint64_t)v125;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v187, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  v128 = v174;
  if (v174)
    goto LABEL_151;
  if ((v176 & 0x80000000) == 0 && v175 && *((_DWORD *)v175 + 1) > v176 + (v176 >> 2))
  {
    if ((*((_BYTE *)v175 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v174, (WTF::AtomStringImpl *)v176, v16, v17, v18, v19, v20, v21);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v174, (WTF::AtomStringImpl *)v176, v16, v17, v18, v19, v20, v21);
    v165 = v174;
    v174 = v175;
    v175 = 0;
    if (v165)
    {
      if (*(_DWORD *)v165 == 2)
      {
        WTF::StringImpl::~StringImpl(v165, v158, v159, v160, v161, v162, v163, v164);
        WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
      }
      else
      {
        *(_DWORD *)v165 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v174);
  v128 = v174;
  if (v174)
  {
LABEL_151:
    *(_DWORD *)v128 += 2;
    v129 = WTF::fastMalloc((WTF *)0x18);
    v137 = v129;
    *(_DWORD *)v129 = 1;
    *(_QWORD *)(v129 + 8) = v128;
    if ((*((_BYTE *)v128 + 16) & 4) != 0)
      v138 = 0;
    else
      v138 = *((_QWORD *)v128 + 1);
    *(_QWORD *)(v129 + 16) = v138;
  }
  else
  {
    v137 = 0;
  }
  v139 = v175;
  v175 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v174;
  v174 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v178, v130, v131, v132, v133, v134, v135, v136);
  return v137;
}

uint64_t JSGlobalContextGetRemoteInspectionEnabled(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v20;

  v9 = a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, *(JSC::VM **)(a1 + 56), a4, a5, a6, a7, a8, a9, a2);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 2032) + 20);
    v9 = (v17 & 7) == 0 && v17 < 3;
    JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
  }
  return v9;
}

void JSGlobalContextSetRemoteInspectionEnabled(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
    Inspector::RemoteInspectionTarget::setInspectable(*(Inspector::RemoteInspectionTarget **)(a1 + 2032), a2);
    JSC::JSLockHolder::~JSLockHolder(&v18, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t JSGlobalContextGetIncludesNativeCallStackWhenReportingExceptions(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  v9 = a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *(JSC::VM **)(a1 + 56), a4, a5, a6, a7, a8, a9, a2);
    v9 = *(_BYTE *)(*(_QWORD *)(v9 + 2024) + 128) != 0;
    JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  }
  return v9;
}

void JSGlobalContextSetIncludesNativeCallStackWhenReportingExceptions(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
    *(_BYTE *)(*(_QWORD *)(a1 + 2024) + 128) = a2;
    JSC::JSLockHolder::~JSLockHolder(&v18, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t JSGlobalContextGetDebuggerRunLoop(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  v9 = a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *(JSC::VM **)(a1 + 56), a4, a5, a6, a7, a8, a9, a2);
    v9 = *(_QWORD *)(*(_QWORD *)(v9 + 2032) + 24);
    JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  }
  return v9;
}

void JSGlobalContextSetDebuggerRunLoop(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  unsigned int *v20;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
    v18 = *(_QWORD *)(a1 + 2032);
    if (a2)
      CFRetain(a2);
    v19 = *(const void **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = a2;
    if (v19)
      CFRelease(v19);
    JSC::JSLockHolder::~JSLockHolder(&v20, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t JSGlobalContextGetAugmentableInspectorController(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  v9 = a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *(JSC::VM **)(a1 + 56), a4, a5, a6, a7, a8, a9, a2);
    v9 = *(_QWORD *)(v9 + 2024) + 8;
    JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  }
  return v9;
}

uint64_t JSContextGroupEnableSamplingProfiler(JSC::VM *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, a1, a4, a5, a6, a7, a8, a9, a2);
  JSC::VM::enableSamplingProfiler(a1);
  JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  return 1;
}

void JSContextGroupDisableSamplingProfiler(JSC::VM *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v24, a1, a4, a5, a6, a7, a8, a9, a2);
  JSC::VM::disableSamplingProfiler(a1, v10, v11, v12, v13, v14, v15, v16);
  JSC::JSLockHolder::~JSLockHolder(&v24, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t JSContextGroupTakeSamplesFromSamplingProfiler(JSC::VM *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::SamplingProfiler *v17;
  WTF *v18;
  WTF::JSONImpl::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v24;
  WTF::JSONImpl::Value *v25;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v24, a1, a4, a5, a6, a7, a8, a9, a2);
  v17 = (JSC::SamplingProfiler *)*((_QWORD *)a1 + 11671);
  if (v17
    && (JSC::SamplingProfiler::stackTracesAsJSON(v17, (uint64_t)v10, v11, v12, v13, v14, v15, v16, (uint64_t *)&v25),
        (v18 = v25) != 0))
  {
    WTF::JSONImpl::Value::toJSONString(v25, v11, v12, v13, v14, v15, v16, &v25);
    v19 = v25;
    if (v25)
    {
      v20 = WTF::fastMalloc((WTF *)0x18);
      v21 = v20;
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = v19;
      if ((*((_BYTE *)v19 + 16) & 4) != 0)
        v22 = 0;
      else
        v22 = *((_QWORD *)v19 + 1);
      *(_QWORD *)(v20 + 16) = v22;
    }
    else
    {
      v21 = 0;
    }
    if (*(_DWORD *)v18 == 1)
      WTF::JSONImpl::Value::operator delete(v18, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v18;
  }
  else
  {
    v21 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v24, v10, v11, v12, v13, v14, v15, v16);
  return v21;
}

void JSContextGroupAddHeapFinalizer(JSC::VM *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unsigned int *v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  v19.n128_u64[0] = a2;
  v19.n128_u64[1] = a3;
  JSC::Heap::addHeapFinalizerCallback((uint64_t)a1 + 192, &v19);
  JSC::JSLockHolder::~JSLockHolder(&v20, v12, v13, v14, v15, v16, v17, v18);
}

void JSContextGroupRemoveHeapFinalizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  unsigned int *v28;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v28, (JSC::VM *)a1, a3, a4, a5, a6, a7, a8, a9);
  v19 = *(unsigned int *)(a1 + 884);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD **)(a1 + 872);
    v21 = 0;
    if (*v20 == a2 && v20[1] == a3)
    {
LABEL_13:
      v27 = (char *)&v20[2 * v21];
      v12 = v27 + 16;
      if (v27 + 16 != (char *)&v20[2 * v19])
      {
        memmove(v27, v12, 16 * (v19 - v21) - 16);
        LODWORD(v19) = *(_DWORD *)(a1 + 884);
      }
      *(_DWORD *)(a1 + 884) = v19 - 1;
    }
    else
    {
      v23 = v20 + 3;
      while (v19 - 1 != v21)
      {
        v24 = *(v23 - 1);
        v25 = *v23;
        v23 += 2;
        ++v21;
        if (v24 == a2 && v25 == a3)
          goto LABEL_13;
      }
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v28, v12, v13, v14, v15, v16, v17, v18);
}

void JSLock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
    JSC::JSLock::lock(*(JSC::JSLock **)(*(_QWORD *)(a1 + 56) + 112), a2, a3, a4, a5, a6, a7, a8);
}

void JSUnlock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;

  if (a1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
    if (!*(_BYTE *)(v8 + 6))
      goto LABEL_15;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v10)
      v10 = WTF::Thread::initializeCurrentTLS(0);
    if (v9 != v10)
    {
LABEL_15:
      __break(0xC471u);
      return;
    }
    if (*(_QWORD *)(v8 + 16) != 1)
    {
      --*(_QWORD *)(v8 + 16);
      return;
    }
    JSC::JSLock::willReleaseLock((JSC::JSLock *)v8, a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(v8 + 16) - 1;
    *(_QWORD *)(v8 + 16) = v17;
    if (!v17)
    {
      *(_BYTE *)(v8 + 6) = 0;
      v18 = (unsigned __int8 *)(v8 + 4);
      v19 = __ldxr((unsigned __int8 *)(v8 + 4));
      if (v19 == 1)
      {
        if (!__stlxr(0, v18))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, v11, v12, v13, v14, v15, v16);
    }
  }
}

void JSContextGroupAddMarkingConstraint(JSC::VM *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  _QWORD *v43;
  const void *v44;
  const void *v45;
  WTF *v46;
  const void *v47;
  WTF *v48;
  _QWORD *v49;
  char v50;
  unsigned int v51;
  unsigned int *v52;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v52, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v51 = 0;
  do
  v51 = v12;
  v50 = 2;
  v47 = a2;
  WTF::toCString<char [4],unsigned int,char [2],WTF::RawPointer,char [2]>((uint64_t *)&v48, &v51, &v47);
  v44 = a3;
  v45 = a2;
  WTF::toCString<char [25],unsigned int,char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>((uint64_t *)&v46, &v51, &v45, &v44);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E357CA28;
  v13[1] = a2;
  v13[2] = a3;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E357CA50;
  v14[1] = a2;
  v14[2] = a3;
  v42 = v13;
  v43 = v14;
  v41 = 0;
  std::make_unique[abi:sn180100]<JSC::SimpleMarkingConstraint,WTF::CString,WTF::CString,JSC::MarkingConstraintExecutorPair,JSC::ConstraintVolatility &,JSC::ConstraintConcurrency>((uint64_t *)&v49, (_DWORD **)&v48, (uint64_t *)&v46, (uint64_t *)&v42, &v50, &v41);
  if (v43)
    (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  if (v42)
    (*(void (**)(_QWORD *))(*v42 + 8))(v42);
  v22 = v46;
  v46 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v22;
  }
  v23 = v48;
  v48 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v23;
  }
  v24 = v49;
  v49 = 0;
  v40 = v24;
  JSC::Heap::addMarkingConstraint((uint64_t)a1 + 192, (uint64_t *)&v40, v16, v17, v18, v19, v20, v21);
  v32 = (uint64_t)v40;
  v40 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::unique_ptr<JSC::SimpleMarkingConstraint>::~unique_ptr[abi:sn180100](&v49, v25, v26, v27, v28, v29, v30, v31);
  JSC::JSLockHolder::~JSLockHolder(&v52, v33, v34, v35, v36, v37, v38, v39);
}

void WTF::toCString<char [4],unsigned int,char [2],WTF::RawPointer,char [2]>(uint64_t *a1, unsigned int *a2, const void **a3)
{
  double v6;
  WTF::PrintStream *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[21];

  v15[20] = *MEMORY[0x1E0C80C00];
  v6 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v15);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD *, double))(v15[0] + 32))(v15, v6);
  WTF::PrintStream::printImpl<char [4],unsigned int,char [2],WTF::RawPointer,char [2]>(v7, a2, a3);
  (*(void (**)(_QWORD *))(v15[0] + 40))(v15);
  WTF::StringPrintStream::toCString(v15, a1);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v15, v8, v9, v10, v11, v12, v13, v14);
}

void WTF::toCString<char [25],unsigned int,char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>(uint64_t *a1, unsigned int *a2, const void **a3, const void **a4)
{
  double v8;
  WTF::PrintStream *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[21];

  v17[20] = *MEMORY[0x1E0C80C00];
  v8 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v17);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD *, double))(v17[0] + 32))(v17, v8);
  WTF::PrintStream::printImpl<char [25],unsigned int,char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>(v9, a2, a3, a4);
  (*(void (**)(_QWORD *))(v17[0] + 40))(v17);
  WTF::StringPrintStream::toCString(v17, a1);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v17, v10, v11, v12, v13, v14, v15, v16);
}

_QWORD **std::unique_ptr<JSC::SimpleMarkingConstraint>::~unique_ptr[abi:sn180100](_QWORD **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = v9[6];
    v9[6] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v9[5];
    v9[5] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *v9 = off_1E3590DC0;
    v12 = (_DWORD *)v9[2];
    v9[2] = 0;
    if (v12)
    {
      if (*v12 == 1)
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      else
        --*v12;
    }
    v13 = (_DWORD *)v9[1];
    v9[1] = 0;
    if (v13)
    {
      if (*v13 == 1)
        WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      else
        --*v13;
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  JSClassRef result;
  OpaqueJSClass *v3;
  OpaqueJSClass *v4;

  JSC::initialize((JSC *)definition);
  if ((definition->attributes & 2) != 0)
  {
    v3 = (OpaqueJSClass *)WTF::fastMalloc((WTF *)0x88);
    OpaqueJSClass::OpaqueJSClass(v3, definition, 0);
  }
  else
  {
    OpaqueJSClass::create((OpaqueJSClass *)definition, &v4);
    return v4;
  }
  return result;
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  OpaqueJSValue *v21;
  OpaqueJSValue *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t (*v39)(_QWORD *);
  _QWORD *v40;
  unsigned int *v41;
  _QWORD v42[3];

  if (!ctx)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, v12, (uint64_t)data, v3, v4, v5, v6, v7, v8);
  if (jsClass)
  {
    v20 = *((_QWORD *)ctx + 101);
    if ((v20 & 1) != 0)
    {
      v39 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
      v40 = (_QWORD *)((unint64_t)ctx & 0xFFFFFFFFFFFFC000 | 8);
      if ((ctx & 8) != 0)
        v40 = (_QWORD *)((char *)ctx - 16);
      v42[0] = *v40;
      v42[1] = ctx;
      v42[2] = (char *)ctx + 808;
      v20 = v39(v42);
    }
    JSC::JSCallbackObject<JSC::JSNonFinalObject>::create((uint64_t)ctx, v20, (unsigned int *)jsClass, (uint64_t)data);
    v22 = v21;
    v29 = OpaqueJSClass::prototype(jsClass, (uint64_t)ctx, v23, v24, v25, v26, v27, v28);
    if (v29)
      JSC::JSObject::setPrototypeDirect((unint64_t)v22, v12, v29, v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v22 = (OpaqueJSValue *)JSC::constructEmptyObject(ctx, v13, v14, v15, v16, v17, v18, v19);
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v30, v31, v32, v33, v34, v35, v36);
  return v22;
}

unint64_t JSC::constructEmptyObject(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  JSC *v16;
  uint64_t v17;
  uint64_t v18;

  v8 = this;
  v9 = *((_QWORD *)this + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    result = *(_QWORD *)(v10 + 24);
    if (result < *(_QWORD *)(v10 + 32))
    {
LABEL_3:
      *(_QWORD *)(v10 + 24) = result + v11;
      goto LABEL_4;
    }
    result = *(_QWORD *)(v10 + 40);
    if ((result & 1) == 0)
    {
      v13 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = result + HIDWORD(v13);
      *(_QWORD *)(v10 + 40) = result + (int)v13;
      goto LABEL_3;
    }
    v14 = v9 + 192;
    v16 = v8;
    v17 = v9;
    JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
    result = JSC::LocalAllocator::allocateSlowCase(v10, v14, v11, 0, 0);
    v8 = v16;
    v9 = v17;
  }
  else
  {
    v18 = *((_QWORD *)this + 7);
    result = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, (JSC *)v9, 0x40uLL, 0, a5, a6, a7, a8);
    v9 = v18;
    v8 = this;
    if (!result)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)result = 0;
  *(_DWORD *)result = *((_DWORD *)v8 + 212);
  *(_DWORD *)(result + 4) = 16783360;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  return result;
}

JSObjectRef JSObjectMakeFunctionWithCallback(JSContextRef ctx, JSStringRef name, JSObjectCallAsFunctionCallback callAsFunction)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  OpaqueJSValue *v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int *v37;

  if (!ctx)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v37, v12, (uint64_t)callAsFunction, v3, v4, v5, v6, v7, v8);
  if (name)
  {
    WTF::String::isolatedCopy((_DWORD *)name + 2, (uint64_t *)&v36);
  }
  else
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x900000002;
    *(_QWORD *)(v18 + 8) = "anonymous";
    *(_DWORD *)(v18 + 16) = 4;
    v36 = (WTF::StringImpl *)v18;
  }
  v17 = (OpaqueJSValue *)JSC::JSCallbackFunction::create(v12, (unint64_t)ctx, (JSC::JSGlobalObject *)callAsFunction, (JSC::VM *)&v36, v13, v14, v15, v16);
  v26 = v36;
  v36 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v37, v19, v20, v21, v22, v23, v24, v25);
  return v17;
}

JSObjectRef JSObjectMakeConstructor(JSContextRef ctx, JSClassRef jsClass, JSObjectCallAsConstructorCallback callAsConstructor)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t SlowCase;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v38)(uint64_t *);
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  JSContextRef v47;
  uint64_t v48;
  uint64_t v49;

  if (!ctx)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v45, v12, (uint64_t)callAsConstructor, v3, v4, v5, v6, v7, v8);
  if (!jsClass || (v20 = OpaqueJSClass::prototype(jsClass, (uint64_t)ctx, v14, v15, v16, v17, v18, v19)) == 0)
    v20 = *((_QWORD *)ctx + 82);
  v21 = *((_QWORD *)ctx + 99);
  if ((v21 & 1) != 0)
  {
    v38 = *(uint64_t (**)(uint64_t *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v39 = (uint64_t *)((unint64_t)ctx & 0xFFFFFFFFFFFFC000 | 8);
    if ((ctx & 8) != 0)
      v39 = (uint64_t *)((char *)ctx - 16);
    v46 = *v39;
    v47 = ctx;
    v48 = (uint64_t)ctx + 792;
    v21 = v38(&v46);
  }
  v22 = *((_QWORD *)ctx + 7);
  v23 = *(_QWORD **)(v22 + 40384);
  if (!v23)
    v23 = (_QWORD *)JSC::GCClient::Heap::callbackConstructorSpaceSlow((JSC::Heap **)(v22 + 37552));
  SlowCase = v23[3];
  if (SlowCase >= v23[4])
  {
    SlowCase = v23[5];
    if ((SlowCase & 1) != 0)
    {
      v41 = (uint64_t)v23;
      JSC::sanitizeStackForVM((JSC *)v22, v13, v14, v15, v16, v17, v18, v19);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v41, v22 + 192, 32, 0, 0, v42, v43, v44);
      goto LABEL_10;
    }
    v40 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v40);
    v23[5] = SlowCase + (int)v40;
  }
  v23[3] = SlowCase + 32;
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v25 = JSC::JSCallbackConstructor::JSCallbackConstructor(SlowCase, (uint64_t)ctx, v21, (uint64_t)jsClass, (uint64_t)callAsConstructor);
  JSC::JSCallbackConstructor::finishCreation(v25, (uint64_t)ctx, (unsigned int *)jsClass);
  v26 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 2160);
  v46 = 0;
  v47 = (JSContextRef)SlowCase;
  v48 = 0x1000000FFFFFFFFLL;
  v27.n128_u64[0] = 0x100000001000000;
  v49 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)v12, v26, v20, 14, (uint64_t)&v46, v28, v29, v27);
  JSC::JSLockHolder::~JSLockHolder(&v45, v30, v31, v32, v33, v34, v35, v36);
  return (JSObjectRef)SlowCase;
}

BOOL JSC::JSObject::putDirect(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  int v13;
  uint64_t v14;

  v11[0] = 0;
  v11[1] = a1;
  v12 = -1;
  a6.n128_u64[0] = 0x100000001000000;
  v13 = 0x1000000;
  v14 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, a3, a4, a5, (uint64_t)v11, a8, a9, a6);
  return v9 == 0;
}

JSObjectRef JSObjectMakeFunction(JSContextRef ctx, JSStringRef name, unsigned int parameterCount, const JSStringRef parameterNames[], JSStringRef body, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  double v8;
  int v9;
  const JSStringRef *__attribute__((__org_arrdim(0,0))) v12;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  OpaqueJSValue *v22;
  unsigned int v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  JSValueRef *v91;
  WTF::StringImpl *v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t OutOfMemoryError;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  JSC::Exception *v157;
  unsigned int *v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  int32x2_t v164;
  WTF::StringImpl *v165[5];
  _DWORD *v166;
  WTF::StringImpl *v167;
  int v168;
  WTF::StringImpl *v169[6];
  int *v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173[9];
  int *v174;
  unsigned int *v175[3];

  if (!ctx)
    return 0;
  v9 = startingLineNumber;
  v12 = parameterNames;
  v16 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v175, (JSC::VM *)v16, *(uint64_t *)&parameterCount, (uint64_t)parameterNames, (uint64_t)body, (uint64_t)sourceURL, *(uint64_t *)&startingLineNumber, (uint64_t)exception, v8);
  if (v9 <= 1)
    v9 = 1;
  if (name)
  {
    OpaqueJSString::identifier(name, (JSC::VM *)v16, v17, v18, v19, v20, v21, &v174);
  }
  else
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"anonymous", 9uLL, v17, v18, v19, v20, v21, &v170);
    v174 = v170;
  }
  LOBYTE(v170) = 0;
  v171 = 0x800000000;
  memset(v173, 0, sizeof(v173));
  v172 = &v173[1];
  v23 = parameterCount + 1;
  if (parameterCount + 1 >= 9)
  {
    if ((v23 & 0x80000000) != 0
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v171, v23))
    {
      LOBYTE(v170) = 1;
    }
    goto LABEL_10;
  }
  if (parameterCount)
  {
LABEL_10:
    for (i = parameterCount; i; --i)
    {
      WTF::String::isolatedCopy((_DWORD *)*v12 + 2, (uint64_t *)&v167);
      v31 = JSC::jsString((uint64_t)v16, (JSC::VM *)&v167, v25, v26, v27, v28, v29, v30);
      v39 = v31;
      v40 = v171;
      if ((_DWORD)v171 == HIDWORD(v171))
      {
        if (!(v171 >> 30)
          && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v171, 2 * (int)v171))
        {
          v40 = v171;
LABEL_28:
          v172[v40] = (uint64_t *)v39;
          LODWORD(v171) = v40 + 1;
          if (!v173[0] && (v39 & 0xFFFE000000000002) == 0 && v39)
          {
            v51 = v39 & 0xFFFFFFFFFFFFC000 | 8;
            if ((v39 & 8) != 0)
              v51 = v39 - 16;
            v173[0] = (uint64_t *)(*(_QWORD *)v51 + 560);
            v169[0] = (WTF::StringImpl *)&v171;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v173[0], (uint64_t *)v169, v34, v35, v36, v37, v38, (uint64_t)v165);
          }
          goto LABEL_18;
        }
        LOBYTE(v170) = 1;
      }
      else
      {
        if (v172 != &v173[1] && v172 != 0)
          goto LABEL_28;
        v172[v171] = (uint64_t *)v31;
        LODWORD(v171) = v40 + 1;
      }
LABEL_18:
      v42 = v167;
      v167 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      ++v12;
    }
  }
  WTF::String::isolatedCopy((_DWORD *)body + 2, (uint64_t *)&v167);
  v58 = JSC::jsString((uint64_t)v16, (JSC::VM *)&v167, v52, v53, v54, v55, v56, v57);
  v66 = v58;
  v67 = v171;
  if ((_DWORD)v171 == HIDWORD(v171))
  {
    if (v171 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v171, 2 * (int)v171))
    {
      LOBYTE(v170) = 1;
      goto LABEL_38;
    }
    v67 = v171;
LABEL_90:
    v172[v67] = (uint64_t *)v66;
    LODWORD(v171) = v67 + 1;
    if (!v173[0] && (v66 & 0xFFFE000000000002) == 0 && v66)
    {
      v160 = v66 & 0xFFFFFFFFFFFFC000 | 8;
      if ((v66 & 8) != 0)
        v160 = v66 - 16;
      v173[0] = (uint64_t *)(*(_QWORD *)v160 + 560);
      v169[0] = (WTF::StringImpl *)&v171;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v173[0], (uint64_t *)v169, v61, v62, v63, v64, v65, (uint64_t)v165);
    }
    goto LABEL_38;
  }
  if (v172 != &v173[1] && v172)
    goto LABEL_90;
  v172[v171] = (uint64_t *)v58;
  LODWORD(v171) = v67 + 1;
LABEL_38:
  v68 = v167;
  v167 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  if ((_BYTE)v170)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)ctx, v59);
    v157 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v157 = (JSC::Exception *)JSC::Exception::create((uint64_t)v16, (JSC::VM *)OutOfMemoryError, 0, v151, v152, v153, v154, v155);
    }
    JSC::VM::throwException((JSC::VM *)v16, ctx, v157, v156, v151, v152, v153, v154, v155);
    v91 = (JSValueRef *)*((_QWORD *)v16 + 2);
    if (v91)
    {
      if (exception)
        *exception = v91[1];
      *((_QWORD *)v16 + 2) = 0;
      v161 = v16 + 20;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 & 0xFFFFFFEF, v161));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v91, v84, v85, v86, v87, v88);
    }
    v22 = 0;
  }
  else
  {
    if (sourceURL)
    {
      memset(v165, 0, sizeof(v165));
      WTF::String::isolatedCopy((_DWORD *)sourceURL + 2, (uint64_t *)&v167);
      WTF::URL::URL((uint64_t)v169, (uint64_t)v165, &v167, 0, v69, v70, v71, v72);
      if (v167)
      {
        if (*(_DWORD *)v167 == 2)
        {
          WTF::StringImpl::~StringImpl(v167, v73, v74, v75, v76, v77, v78, v79);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        }
        else
        {
          *(_DWORD *)v167 -= 2;
        }
      }
      v80 = v165[0];
      v165[0] = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::~StringImpl(v80, v73, v74, v75, v76, v77, v78, v79);
          WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
        }
        else
        {
          *(_DWORD *)v80 -= 2;
        }
      }
      v81 = v169[0];
      v167 = (WTF::StringImpl *)v172;
      v168 = v171;
      if (v169[0])
        *(_DWORD *)v169[0] += 2;
    }
    else
    {
      v81 = 0;
      memset(v169, 0, 40);
      v167 = (WTF::StringImpl *)v172;
      v168 = v171;
    }
    v165[0] = v81;
    *(_OWORD *)&v165[1] = *(_OWORD *)&v169[1];
    *(_OWORD *)&v165[3] = *(_OWORD *)&v169[3];
    v166 = 0;
    v164 = (int32x2_t)(v9 - 1);
    v22 = (OpaqueJSValue *)JSC::constructFunction((unint64_t)ctx, (unint64_t **)&v167, (size_t)&v174, (uint64_t)v165, (_DWORD **)v169, 0, &v164, 0, *(int8x16_t *)&v169[3], 0);
    v89 = v166;
    v166 = 0;
    if (v89)
    {
      if (v89[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v89 + 8))(v89);
      else
        --v89[2];
    }
    v90 = v165[0];
    v165[0] = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v82, v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    v91 = (JSValueRef *)*((_QWORD *)v16 + 2);
    if (v91)
    {
      if (exception)
        *exception = v91[1];
      *((_QWORD *)v16 + 2) = 0;
      v158 = v16 + 20;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 & 0xFFFFFFEF, v158));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v91, v84, v85, v86, v87, v88);
      v22 = 0;
    }
    v92 = v169[0];
    v169[0] = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
        WTF::StringImpl::~StringImpl(v92, v82, (uint64_t)v91, v84, v85, v86, v87, v88);
        WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
      }
      else
      {
        *(_DWORD *)v92 -= 2;
      }
    }
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v171, v82, (uint64_t)v91, v84, v85, v86, v87, v88);
  v100 = (WTF::StringImpl *)v174;
  v174 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(v175, v93, v94, v95, v96, v97, v98, v99);
  return v22;
}

uint64_t handleExceptionIfNeeded(uint64_t *a1, Inspector::JSGlobalObjectInspectorController **a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::Exception *v10;
  unsigned int *v12;
  unsigned int v13;

  v9 = *a1;
  v10 = *(JSC::Exception **)(*a1 + 16);
  if (!v10)
    return 1;
  if (a3)
  {
    *a3 = *((_QWORD *)v10 + 1);
    v9 = *a1;
  }
  *(_QWORD *)(v9 + 16) = 0;
  v12 = (unsigned int *)(v9 + 80);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 & 0xFFFFFFEF, v12));
  Inspector::JSGlobalObjectInspectorController::reportAPIException(a2[253], (JSC::JSGlobalObject *)a2, v10, a4, a5, a6, a7, a8);
  return 0;
}

JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const JSValueRef *__attribute__((__org_arrdim(0,0))) v10;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v26;
  JSC::VM *v27;
  int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  OpaqueJSValue *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSValueRef *v39;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD v58[4];
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  int v63;
  uint64_t *v64;

  if (!ctx)
    return 0;
  v10 = arguments;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v61, (JSC::VM *)v13, (uint64_t)arguments, (uint64_t)exception, v4, v5, v6, v7, v8);
  v60 = v13;
  if (!argumentCount)
  {
    v32 = (OpaqueJSValue *)JSC::constructEmptyArray((unint64_t)ctx, 0, 0, 0, v17, v18, v19, v20, v21);
    goto LABEL_31;
  }
  v55 = 0;
  v56 = 0x800000000;
  v57 = (_OWORD *)((char *)v58 + 8);
  memset(v58, 0, sizeof(v58));
  v59 = 0;
  if (argumentCount > 8
    && (argumentCount >> 31
     || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v56, argumentCount)))
  {
    v55 = 1;
  }
  do
  {
    if (*v10)
      v22 = (uint64_t)*v10;
    else
      v22 = 2;
    v23 = v56;
    if ((_DWORD)v56 == HIDWORD(v56))
    {
      if (v56 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v56, 2 * (int)v56))
      {
        v55 = 1;
        goto LABEL_14;
      }
      v23 = v56;
    }
    else if (v57 == (_OWORD *)((char *)v58 + 8) || v57 == 0)
    {
      *((_QWORD *)v57 + v56) = v22;
      LODWORD(v56) = v23 + 1;
      goto LABEL_14;
    }
    *((_QWORD *)v57 + v23) = v22;
    LODWORD(v56) = v23 + 1;
    if (!*(_QWORD *)&v58[0] && (v22 & 0xFFFE000000000002) == 0 && v22 != 0)
    {
      v26 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v22 & 8) != 0)
        v26 = (_QWORD *)(v22 - 16);
      *(_QWORD *)&v58[0] = *v26 + 560;
      v64 = &v56;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v58[0], (uint64_t *)&v64, v16, v17, v18, v19, v20, (uint64_t)&v62);
    }
LABEL_14:
    ++v10;
    --argumentCount;
  }
  while (argumentCount);
  if (v55)
  {
    v62 = v13;
    JSC::throwOutOfMemoryError(ctx, (JSC::JSGlobalObject *)&v62);
    handleExceptionIfNeeded((uint64_t *)&v60, (Inspector::JSGlobalObjectInspectorController **)ctx, exception, v43, v44, v45, v46, v47);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v56, v48, v49, v50, v51, v52, v53, v54);
LABEL_46:
    v32 = 0;
    goto LABEL_32;
  }
  v62 = (unsigned int *)v57;
  v63 = v56;
  v27 = (JSC::VM *)*((_QWORD *)ctx + 7);
  v28 = *((_DWORD *)ctx + 224);
  if (v28)
    v29 = 16 * (v28 & 0xFFFFFFFE);
  else
    v29 = 0;
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27, v14, v15, v16, v17, v18, v19, v20))
    v32 = 0;
  else
    v32 = (OpaqueJSValue *)JSC::constructArray((uint64_t)ctx, v29, (uint64_t)&v62, v16, v17, v18, v19, v20);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v56, v30, v31, v16, v17, v18, v19, v20);
LABEL_31:
  v39 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v39)
  {
    if (exception)
      *exception = v39[1];
    *((_QWORD *)v13 + 2) = 0;
    v41 = v13 + 20;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 & 0xFFFFFFEF, v41));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v39, v34, v35, v36, v37, v38);
    goto LABEL_46;
  }
LABEL_32:
  JSC::JSLockHolder::~JSLockHolder(&v61, v33, (uint64_t)v39, v34, v35, v36, v37, v38);
  return v32;
}

unint64_t JSC::constructEmptyArray(unint64_t a1, unint64_t a2, unint64_t a3, JSC::JSGlobalObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t InternalFunctionAllocationStructureFromBase;
  JSC::JSGlobalObject *v22;
  char **v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::FunctionRareData *v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  _DWORD *v51;
  unint64_t result;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  __n128 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t SlowCase;
  __n128 *v68;
  __n128 *v69;
  __n128 *v70;
  JSC::JSGlobalObject *v71;
  unint64_t OutOfMemoryError;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::Exception *v78;
  unint64_t v79;
  unint64_t v80;
  JSC::InternalFunction *v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  JSC::JSGlobalObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t FunctionRealm;
  int v94;
  JSC::JSObject *v95;
  JSC::JSObject *SubclassStructure;
  unint64_t v97;
  JSC::VM *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t Slow;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  JSC::VM *v117;

  v9 = (unint64_t)a4;
  v10 = a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 56);
  if (a3 >> 27)
  {
    v81 = (JSC::InternalFunction *)a1;
    if (a4)
    {
      v90 = a4;
      if (*(JSC::JSGlobalObject **)(a1 + 232) != a4)
      {
        FunctionRealm = JSC::getFunctionRealm((JSC *)a1, a4, (JSC::JSObject *)a3);
        if (!*(_DWORD *)(v13 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v91, v92, (uint64_t)a4, a5, a6, a7, a8))
        {
          v94 = *(_DWORD *)(FunctionRealm + 912);
          if (v94)
            v95 = (JSC::JSObject *)(16 * (v94 & 0xFFFFFFFE));
          else
            v95 = 0;
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(v81, v90, v95, a4, a5, a6, a7, a8);
          v12 = (unint64_t)v81;
          InternalFunctionAllocationStructureFromBase = (unint64_t)SubclassStructure;
          goto LABEL_43;
        }
        InternalFunctionAllocationStructureFromBase = 0;
        goto LABEL_144;
      }
    }
    v20 = *(_DWORD *)(a1 + 912);
LABEL_11:
    if (v20)
      InternalFunctionAllocationStructureFromBase = 16 * (v20 & 0xFFFFFFFE);
    else
      InternalFunctionAllocationStructureFromBase = 0;
    if (!*(_DWORD *)(v13 + 80))
      goto LABEL_44;
    goto LABEL_118;
  }
  if (a2)
  {
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      v16 = *(_BYTE *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFLL) + 4);
      v17 = HIBYTE(v14);
      if ((v16 & 0xF) != HIBYTE(v14))
      {
        *(_QWORD *)a2 = v14 & 0xFFFF000000000000;
        if (byte_1ECF4C722)
        {
          v59 = HIWORD(v14);
          v60 = HIBYTE(v14) & 0xF;
          if (v60 <= (v16 & 0xFu))
            LODWORD(v60) = v16 & 0xF;
          if ((v17 & 0x10) != 0)
          {
            if (v60 >= 0xA)
              LODWORD(v60) = 9;
            LODWORD(v60) = v60 | 0x10;
          }
          if ((v16 & 0xE) != 0)
            v61 = *(_DWORD *)(*(_QWORD *)(v15 + 8) - 4);
          else
            v61 = 0;
          if (v59 > v61)
            v61 = v59;
          if (v61 >= 0x19)
            v61 = 25;
          v14 = (unint64_t)(v61 | ((_DWORD)v60 << 8)) << 48;
          *(_QWORD *)a2 = v14;
        }
        else
        {
          v14 &= 0xFFFF000000000000;
        }
      }
    }
    v18 = HIBYTE(v14);
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    LODWORD(v18) = 3;
    if (!a4)
    {
LABEL_8:
      v19 = (v18 >> 1) & 7;
      if ((v18 & 0x10) != 0)
        v19 = ((v18 & 0xE) + 10) >> 1;
      v20 = *(_DWORD *)(a1 + 4 * v19 + 892);
      goto LABEL_11;
    }
  }
  if (*(JSC::JSGlobalObject **)(a1 + 232) == a4)
    goto LABEL_8;
  v117 = (JSC::VM *)v13;
  v22 = a4;
  while (1)
  {
    while (1)
    {
      v23 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C));
      if (v23 != &JSC::JSBoundFunction::s_info && v23 != &JSC::JSRemoteFunction::s_info)
        break;
      v22 = (JSC::JSGlobalObject *)*((_QWORD *)v22 + 4);
    }
    if (*((_BYTE *)v22 + 5) != 61)
    {
      v24 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28);
      goto LABEL_22;
    }
    v88 = v12;
    v89 = v9;
    if (JSC::ProxyObject::isRevoked(v22))
      break;
    v22 = (JSC::JSGlobalObject *)*((_QWORD *)v22 + 2);
    v9 = v89;
    v12 = v88;
  }
  JSC::throwTypeError(v88, &v117, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v12 = v88;
  v24 = 0;
  v9 = v89;
LABEL_22:
  if (*(_DWORD *)(v13 + 80))
  {
    v83 = *(_DWORD *)(v13 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
    {
      v105 = v9;
      v106 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12 = v106;
      v9 = v105;
    }
    if (*(_QWORD *)(v13 + 16))
    {
      InternalFunctionAllocationStructureFromBase = 0;
      goto LABEL_43;
    }
  }
  v25 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v25 = ((v18 & 0xE) + 10) >> 1;
  v26 = *(_DWORD *)(v24 + 4 * v25 + 892);
  v27 = 16 * (v26 & 0xFFFFFFFE);
  if (v26)
    v28 = 16 * (v26 & 0xFFFFFFFE);
  else
    v28 = 0;
  v29 = *(_QWORD *)(v12 + 56);
  v30 = *(_QWORD **)(v28 + 40);
  if (*(_BYTE *)(v9 + 5) != 26)
    goto LABEL_186;
  a2 = *(_QWORD *)(v9 + 24);
  if ((a2 & 1) != 0)
  {
    v54 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v54 + 5) == 8)
      goto LABEL_186;
    v31 = *(_QWORD *)(v54 + 88);
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 8)
      goto LABEL_186;
    v31 = *(_QWORD *)(a2 + 88);
  }
  if ((*(_DWORD *)(v31 + 16) & 0x80000000) != 0)
  {
    v97 = v12;
    v98 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) + 56);
    LODWORD(v117) = 0;
    v99 = v9;
    JSC::JSObject::getDirect((_DWORD *)v9, v98, *(_QWORD *)(*((_QWORD *)v98 + 5244) + 2160), (const JSC::PropertyTable *)&v117, a5, a6, a7, a8);
    if (!v100 || (v117 & 0x70) != 0)
    {
      v9 = v99;
      v12 = v97;
      goto LABEL_186;
    }
    v9 = v99;
    a2 = *(_QWORD *)(v99 + 24);
    v12 = v97;
  }
  if ((a2 & 1) != 0)
    v32 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v32 = a2;
  v33 = *(_QWORD *)(v32 + 88);
  if (((1 << *(_BYTE *)(v33 + 50)) & 0x78007) != 0 || (v34 = *(_QWORD **)(v33 + 88)) != 0 && *v34)
  {
    if ((a2 & 1) != 0)
    {
      v35 = (JSC::FunctionRareData *)(a2 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v84 = v12;
      v85 = v9;
      v86 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v29, (JSC::VM *)a2, (JSC::ExecutableBase *)a3, (uint64_t)a4, a5, a6, a7, a8);
      v9 = v85;
      v35 = (JSC::FunctionRareData *)v86;
      __dmb(0xAu);
      *(_QWORD *)(v85 + 24) = v86 | 1;
      if (v86)
      {
        if (*(_DWORD *)(v29 + 760) >= *(unsigned __int8 *)(v85 + 7))
          JSC::Heap::writeBarrierSlowPath(v29 + 192, v85);
        v9 = v85;
      }
      v12 = v84;
    }
    v36 = *((_DWORD *)v35 + 10) & 0xFFFFFFFE;
    if ((_DWORD)v36)
    {
      InternalFunctionAllocationStructureFromBase = 16 * v36;
      if (16 * *(unsigned int *)(16 * v36 + 0x4C) == 16 * *(unsigned int *)(v28 + 76)
        && *(_QWORD **)(16 * v36 + 0x28) == v30)
      {
        goto LABEL_43;
      }
    }
    v81 = (JSC::InternalFunction *)v12;
    v82 = JSC::JSObject::get((unsigned int *)v9, v12, *(_QWORD *)(*(_QWORD *)(v29 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
    if ((v82 & 0xFFFE000000000002) != 0 || (a4 = (JSC::JSGlobalObject *)v82, *(unsigned __int8 *)(v82 + 5) < 0x17u))
      InternalFunctionAllocationStructureFromBase = v27;
    else
      InternalFunctionAllocationStructureFromBase = JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase(v35, (JSC::VM *)v29, (JSC::JSGlobalObject *)v30, (JSC::JSObject *)v82, (JSC::Structure *)v28, a9.n128_f64[0]);
LABEL_144:
    v12 = (unint64_t)v81;
    goto LABEL_43;
  }
LABEL_186:
  v107 = v12;
  v108 = JSC::JSObject::get((unsigned int *)v9, v12, *(_QWORD *)(*(_QWORD *)(v29 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
  a3 = v108;
  if (!*(_DWORD *)(v29 + 80))
    goto LABEL_187;
  v109 = v108;
  v110 = *(_DWORD *)(v29 + 80);
  if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, v108, (uint64_t)a4, a5, a6, a7, a8);
  a3 = v109;
  if (*(_QWORD *)(v29 + 16))
  {
    InternalFunctionAllocationStructureFromBase = 0;
  }
  else
  {
LABEL_187:
    InternalFunctionAllocationStructureFromBase = v27;
    if (*(_BYTE *)(v30[256] + 4) == 2)
    {
      v111 = *(unsigned __int8 *)(v28 + 8);
      v112 = (v111 >> 1) & 7;
      if ((v111 & 0x10) != 0)
        v112 = ((v111 & 0xE) + 10) >> 1;
      v113 = *((_DWORD *)v30 + v112 + 213);
      if (v113)
        v114 = 16 * (v113 & 0xFFFFFFFE);
      else
        v114 = 0;
      InternalFunctionAllocationStructureFromBase = v27;
      if (v114 == v28)
      {
        v115 = *((_DWORD *)v30 + ((v111 >> 1) & 7) + 223);
        if (v115)
          InternalFunctionAllocationStructureFromBase = 16 * (v115 & 0xFFFFFFFE);
        else
          InternalFunctionAllocationStructureFromBase = 0;
      }
    }
    if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
      InternalFunctionAllocationStructureFromBase = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v30 + 246), (JSC::JSGlobalObject *)v30, (JSC::JSObject *)a3, (JSC::Structure *)InternalFunctionAllocationStructureFromBase, a9.n128_f64[0]);
  }
  v12 = v107;
LABEL_43:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_44;
LABEL_118:
  v64 = *(_DWORD *)(v13 + 80);
  if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
  {
    v102 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    v12 = v102;
  }
  if (*(_QWORD *)(v13 + 16))
    return 0;
LABEL_44:
  v37 = *(unsigned __int16 *)(InternalFunctionAllocationStructureFromBase + 24);
  if (v37 == 65534
    || (v37 == 0xFFFF
      ? (v38 = *(_DWORD *)(*(_QWORD *)(InternalFunctionAllocationStructureFromBase + 64) + 84))
      : (v38 = *(unsigned __int16 *)(InternalFunctionAllocationStructureFromBase + 24)),
        v38 < 64))
  {
    v39 = 0;
  }
  else if ((v38 - 63) >= 5)
  {
    v55 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
    v56 = v55 | (v55 >> 4) | ((v55 | (v55 >> 4)) >> 8);
    v39 = (v56 | HIWORD(v56)) + 1;
  }
  else
  {
    v39 = 4;
  }
  v40 = *(_BYTE *)(InternalFunctionAllocationStructureFromBase + 8) & 0xE;
  if (v40 > 9)
  {
    v65 = *(_QWORD *)(v13 + 6768);
    if (v65)
    {
      v66 = *(unsigned int *)(v65 + 60);
      SlowCase = *(_QWORD *)(v65 + 24);
      if (SlowCase >= *(_QWORD *)(v65 + 32))
      {
        v68 = *(__n128 **)(v65 + 40);
        if ((v68 & 1) == 0)
        {
          v87 = v68->n128_u64[1] ^ *(_QWORD *)(v65 + 48);
          *(_QWORD *)(v65 + 32) = (char *)v68 + HIDWORD(v87);
          *(_QWORD *)(v65 + 40) = (char *)v68 + (int)v87;
          *(_QWORD *)(v65 + 24) = (char *)v68 + v66;
          SlowCase = (unint64_t)v68;
          goto LABEL_126;
        }
        v101 = v12;
        JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v65, v13 + 192, v66, 0, 1);
        v12 = v101;
      }
      else
      {
        *(_QWORD *)(v65 + 24) = SlowCase + v66;
      }
    }
    else
    {
      v103 = v12;
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v13 + 6648, (JSC *)v13, 0x38uLL, 0, a5, a6, a7, a8);
      v12 = v103;
      SlowCase = Slow;
    }
    if (!SlowCase)
    {
LABEL_132:
      v71 = (JSC::JSGlobalObject *)v12;
      OutOfMemoryError = JSC::createOutOfMemoryError(v12, (JSC::JSGlobalObject *)a2);
      v78 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v78 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)OutOfMemoryError, 0, v73, v74, v75, v76, v77);
      }
      JSC::VM::throwException((JSC::VM *)v13, v71, v78);
      return 0;
    }
    v68 = (__n128 *)SlowCase;
LABEL_126:
    *(_QWORD *)SlowCase = v10 | 0x400000000;
    v69 = v68;
    v70 = v68;
    a9.n128_u64[0] = 0;
    while (v68 != v70)
    {
      *v68 = a9;
      v68[1] = a9;
      v68[2] = a9;
      v68[3] = a9;
      v68 += 4;
    }
    while (v68 != v69)
    {
      v68->n128_u64[0] = 0;
      v68 = (__n128 *)((char *)v68 + 8);
    }
    *(_OWORD *)(SlowCase + 8) = 0u;
    v51 = (_DWORD *)(SlowCase + 8);
    *((_OWORD *)v51 + 1) = 0u;
    *((_OWORD *)v51 + 2) = 0u;
    goto LABEL_74;
  }
  if (v10 > 0x10000000)
    goto LABEL_132;
  if (v37 == 65534)
    goto LABEL_55;
  if (v37 == 0xFFFF)
    v37 = *(_DWORD *)(*(_QWORD *)(InternalFunctionAllocationStructureFromBase + 64) + 84);
  if (v37 < 64)
  {
LABEL_55:
    v41 = 0;
  }
  else if ((v37 - 63) >= 5)
  {
    v57 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
    v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
    v41 = (v58 | HIWORD(v58)) + 1;
  }
  else
  {
    v41 = 4;
  }
  LODWORD(v42) = v10 <= 3 ? 3 : v10;
  v42 = v10 ? v42 : 5;
  v43 = v41 + v42;
  v44 = 8 * v43;
  if (v43 > 9)
    v45 = v43 > 0x3EB
        ? v44 + 8
        : *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                          + (((unint64_t)(v44 + 23) >> 2) & 0x7FFFFFFFCLL));
  else
    v45 = (v44 + 23) & 0x1FFFFFFFF0;
  v46 = v45 - 8 * v41 - 8;
  a3 = (v46 & 0x7FFFFFFF8) + 8 * v39 + 8;
  if (a3 <= 0x1F60
    && (v47 = *(_QWORD *)(v13 + ((((v46 & 0x7FFFFFFF8) + 8 * v39 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v48 = *(unsigned int *)(v47 + 60);
    v49 = *(_QWORD *)(v47 + 24);
    if (v49 >= *(_QWORD *)(v47 + 32))
    {
      v49 = *(_QWORD *)(v47 + 40);
      if ((v49 & 1) == 0)
      {
        v80 = *(_QWORD *)(v49 + 8) ^ *(_QWORD *)(v47 + 48);
        *(_QWORD *)(v47 + 32) = v49 + HIDWORD(v80);
        *(_QWORD *)(v47 + 40) = v49 + (int)v80;
        *(_QWORD *)(v47 + 24) = v49 + v48;
        goto LABEL_69;
      }
      v116 = v12;
      JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v49 = JSC::LocalAllocator::allocateSlowCase(v47, v13 + 192, v48, 0, 1);
      v12 = v116;
    }
    else
    {
      *(_QWORD *)(v47 + 24) = v49 + v48;
    }
  }
  else
  {
    v62 = v12;
    v49 = JSC::CompleteSubspace::tryAllocateSlow(v13 + 6648, (JSC *)v13, a3, 0, a5, a6, a7, a8);
    v12 = v62;
  }
  if (!v49)
    goto LABEL_132;
LABEL_69:
  a2 = v46 >> 3;
  if ((v46 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x197F54CF4);
  }
  v50 = (unsigned int *)(v49 + 8 * v39);
  v51 = v50 + 2;
  *v50 = v10;
  v50[1] = a2;
  if (v40 == 6)
  {
    if (a2 > 0x63)
    {
      JSC::clearArrayMemset((JSC *)(v50 + 2), (double *)a2);
    }
    else if ((_DWORD)a2)
    {
      memset_pattern16(v50 + 2, &unk_199124A40, v46 & 0x7FFFFFFF8);
    }
  }
  else if (a2 > 0x63)
  {
    v63 = (__n128 *)(v50 + 2);
    a9.n128_u64[0] = 0;
    while (v63 != (__n128 *)((char *)v51 + (v46 & 0x7FFFFFFC0)))
    {
      *v63 = a9;
      v63[1] = a9;
      v63[2] = a9;
      v63[3] = a9;
      v63 += 4;
    }
    while (v63 != (__n128 *)((char *)v51 + (v46 & 0x7FFFFFFF8)))
    {
      v63->n128_u64[0] = 0;
      v63 = (__n128 *)((char *)v63 + 8);
    }
  }
  else if ((_DWORD)a2)
  {
    bzero(v50 + 2, v46 & 0x7FFFFFFF8);
  }
LABEL_74:
  result = *(_QWORD *)(v13 + 37584);
  if (result >= *(_QWORD *)(v13 + 37592))
  {
    result = *(_QWORD *)(v13 + 37600);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v13 + 37560, v13 + 192, 16, 0, 0);
      goto LABEL_76;
    }
    v79 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v13 + 37608);
    *(_QWORD *)(v13 + 37592) = result + HIDWORD(v79);
    *(_QWORD *)(v13 + 37600) = result + (int)v79;
  }
  *(_QWORD *)(v13 + 37584) = result + 16;
LABEL_76:
  *(_DWORD *)result = 0;
  v53 = *(_DWORD *)(InternalFunctionAllocationStructureFromBase + 8);
  *(_DWORD *)result = InternalFunctionAllocationStructureFromBase >> 4;
  *(_DWORD *)(result + 4) = v53;
  *(_QWORD *)(result + 8) = v51;
  if (*(_BYTE *)(v13 + 755))
    __dmb(0xAu);
  if (v11)
    *(_QWORD *)v11 = result | ((unint64_t)*(unsigned __int16 *)(v11 + 6) << 48);
  return result;
}

JSObjectRef JSObjectMakeDate(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const JSValueRef *__attribute__((__org_arrdim(0,0))) v10;
  unsigned int *v13;
  JSC::JSGlobalObject *v14;
  JSC::Structure *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSValueRef *v33;
  OpaqueJSValue *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t OutOfMemoryError;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  unsigned int *v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  _OWORD v56[4];
  uint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;

  if (!ctx)
    return 0;
  v10 = arguments;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v58, (JSC::VM *)v13, (uint64_t)arguments, (uint64_t)exception, v4, v5, v6, v7, v8);
  v53 = 0;
  v54 = 0x800000000;
  v55 = (uint64_t *)v56 + 1;
  v20 = 0uLL;
  memset(v56, 0, sizeof(v56));
  v57 = 0;
  if (argumentCount < 9)
  {
    if (argumentCount)
      goto LABEL_4;
LABEL_29:
    v59 = v55;
    v60 = v54;
    v26 = JSC::constructDate((unint64_t)ctx, 0, &v59, v15, v16, v17, v18, v19, v20);
    v33 = (JSValueRef *)*((_QWORD *)v13 + 2);
    if (v33)
      goto LABEL_40;
    v34 = (OpaqueJSValue *)v26;
    goto LABEL_31;
  }
  if (argumentCount >> 31
    || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v54, argumentCount))
  {
    v53 = 1;
  }
  do
  {
LABEL_4:
    if (*v10)
      v21 = (uint64_t)*v10;
    else
      v21 = 2;
    v22 = v54;
    if ((_DWORD)v54 == HIDWORD(v54))
    {
      if (v54 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v54, 2 * (int)v54))
      {
        v53 = 1;
        goto LABEL_14;
      }
      v22 = v54;
    }
    else if (v55 == (uint64_t *)((char *)v56 + 8) || v55 == 0)
    {
      v55[v54] = v21;
      LODWORD(v54) = v22 + 1;
      goto LABEL_14;
    }
    v55[v22] = v21;
    LODWORD(v54) = v22 + 1;
    if (!*(_QWORD *)&v56[0] && (v21 & 0xFFFE000000000002) == 0 && v21 != 0)
    {
      v25 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v21 & 8) != 0)
        v25 = (_QWORD *)(v21 - 16);
      *(_QWORD *)&v56[0] = *v25 + 560;
      v61 = &v54;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v56[0], (uint64_t *)&v61, (uint64_t)v15, v16, v17, v18, v19, (uint64_t)&v59);
    }
LABEL_14:
    ++v10;
    --argumentCount;
  }
  while (argumentCount);
  if (!v53)
    goto LABEL_29;
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)ctx, v14);
  v50 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v50 = (JSC::Exception *)JSC::Exception::create((uint64_t)v13, (JSC::VM *)OutOfMemoryError, 0, v44, v45, v46, v47, v48);
  }
  JSC::VM::throwException((JSC::VM *)v13, ctx, v50, v49, v44, v45, v46, v47, v48);
  v33 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v33)
  {
LABEL_40:
    if (exception)
      *exception = v33[1];
    *((_QWORD *)v13 + 2) = 0;
    v51 = v13 + 20;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 & 0xFFFFFFEF, v51));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v33, v28, v29, v30, v31, v32);
  }
  v34 = 0;
LABEL_31:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v54, v27, (uint64_t)v33, v28, v29, v30, v31, v32);
  JSC::JSLockHolder::~JSLockHolder(&v58, v35, v36, v37, v38, v39, v40, v41);
  return v34;
}

JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  OpaqueJSValue *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSValueRef *v26;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  _QWORD v33[3];

  if (!ctx)
    return 0;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, (JSC::VM *)v13, (uint64_t)arguments, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (argumentCount)
  {
    if (*arguments)
      v15 = (unint64_t)*arguments;
    else
      v15 = 2;
    if (argumentCount != 1)
    {
      if (*((_QWORD *)arguments + 1))
        v16 = *((_QWORD *)arguments + 1);
      else
        v16 = 2;
      goto LABEL_13;
    }
  }
  else
  {
    v15 = 10;
  }
  v16 = 10;
LABEL_13:
  v18 = *((_QWORD *)ctx + 188);
  if ((v18 & 1) != 0)
  {
    v28 = *(uint64_t (**)(_QWORD *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)((unint64_t)ctx & 0xFFFFFFFFFFFFC000 | 8);
    if ((ctx & 8) != 0)
      v29 = (_QWORD *)((char *)ctx - 16);
    v33[0] = *v29;
    v33[1] = ctx;
    v33[2] = (char *)ctx + 1504;
    v18 = v28(v33);
  }
  v19 = JSC::ErrorInstance::create(ctx, v18, v15, v16, 0, 0, 0, 1, v14);
  v26 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v26)
  {
    if (exception)
      *exception = v26[1];
    *((_QWORD *)v13 + 2) = 0;
    v30 = v13 + 20;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 & 0xFFFFFFEF, v30));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v26, v21, v22, v23, v24, v25);
    v17 = 0;
  }
  else
  {
    v17 = (OpaqueJSValue *)v19;
  }
  JSC::JSLockHolder::~JSLockHolder(&v32, v20, (uint64_t)v26, v21, v22, v23, v24, v25);
  return v17;
}

JSObjectRef JSObjectMakeRegExp(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const JSValueRef *__attribute__((__org_arrdim(0,0))) v10;
  unsigned int *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSValueRef *v33;
  OpaqueJSValue *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t OutOfMemoryError;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  unsigned int *v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD v56[4];
  uint64_t v57;
  unsigned int *v58;
  _OWORD *v59;
  int v60;
  uint64_t *v61;

  if (!ctx)
    return 0;
  v10 = arguments;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v58, (JSC::VM *)v13, (uint64_t)arguments, (uint64_t)exception, v4, v5, v6, v7, v8);
  v53 = 0;
  v54 = 0x800000000;
  v55 = (_OWORD *)((char *)v56 + 8);
  v20 = 0uLL;
  memset(v56, 0, sizeof(v56));
  v57 = 0;
  if (argumentCount < 9)
  {
    if (argumentCount)
      goto LABEL_4;
LABEL_29:
    v59 = v55;
    v60 = v54;
    v26 = JSC::constructRegExp(ctx, (uint64_t)&v59, 0, 0, v16, v17, v18, v19, v20);
    v33 = (JSValueRef *)*((_QWORD *)v13 + 2);
    if (v33)
      goto LABEL_40;
    v34 = (OpaqueJSValue *)v26;
    goto LABEL_31;
  }
  if (argumentCount >> 31
    || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v54, argumentCount))
  {
    v53 = 1;
  }
  do
  {
LABEL_4:
    if (*v10)
      v21 = (uint64_t)*v10;
    else
      v21 = 2;
    v22 = v54;
    if ((_DWORD)v54 == HIDWORD(v54))
    {
      if (v54 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v54, 2 * (int)v54))
      {
        v53 = 1;
        goto LABEL_14;
      }
      v22 = v54;
    }
    else if (v55 == (_OWORD *)((char *)v56 + 8) || v55 == 0)
    {
      *((_QWORD *)v55 + v54) = v21;
      LODWORD(v54) = v22 + 1;
      goto LABEL_14;
    }
    *((_QWORD *)v55 + v22) = v21;
    LODWORD(v54) = v22 + 1;
    if (!*(_QWORD *)&v56[0] && (v21 & 0xFFFE000000000002) == 0 && v21 != 0)
    {
      v25 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v21 & 8) != 0)
        v25 = (_QWORD *)(v21 - 16);
      *(_QWORD *)&v56[0] = *v25 + 560;
      v61 = &v54;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v56[0], (uint64_t *)&v61, v15, v16, v17, v18, v19, (uint64_t)&v59);
    }
LABEL_14:
    ++v10;
    --argumentCount;
  }
  while (argumentCount);
  if (!v53)
    goto LABEL_29;
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)ctx, v14);
  v50 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v50 = (JSC::Exception *)JSC::Exception::create((uint64_t)v13, (JSC::VM *)OutOfMemoryError, 0, v44, v45, v46, v47, v48);
  }
  JSC::VM::throwException((JSC::VM *)v13, ctx, v50, v49, v44, v45, v46, v47, v48);
  v33 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v33)
  {
LABEL_40:
    if (exception)
      *exception = v33[1];
    *((_QWORD *)v13 + 2) = 0;
    v51 = v13 + 20;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 & 0xFFFFFFEF, v51));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v33, v28, v29, v30, v31, v32);
  }
  v34 = 0;
LABEL_31:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v54, v27, (uint64_t)v33, v28, v29, v30, v31, v32);
  JSC::JSLockHolder::~JSLockHolder(&v58, v35, v36, v37, v38, v39, v40, v41);
  return v34;
}

JSObjectRef JSObjectMakeDeferredPromise(JSContextRef ctx, JSObjectRef *resolve, JSObjectRef *reject, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSContextRef v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *NewPromiseCapability;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  JSValueRef *v29;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  void *v34;
  const OpaqueJSContext *v35;
  OpaqueJSValue *v36;
  OpaqueJSValue *v37;
  unsigned int *v38;

  v9 = ctx;
  if (ctx)
  {
    v13 = *((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v38, ctx, (uint64_t)reject, (uint64_t)exception, v4, v5, v6, v7, v8);
    v14 = *((_QWORD *)v9 + 7);
    NewPromiseCapability = (void *)JSC::JSPromise::createNewPromiseCapability((uint64_t)v9, *((_QWORD *)v9 + 33), v15, v16, v17, v18, v19, v20);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_3;
    v31 = *(_DWORD *)(v14 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
    {
      v34 = NewPromiseCapability;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v22, v23, v24, v25, v26, v27);
      NewPromiseCapability = v34;
    }
    if (*(_QWORD *)(v14 + 16))
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
    }
    else
    {
LABEL_3:
      JSC::JSPromise::convertCapabilityToDeferredData(v9, (uint64_t)NewPromiseCapability, v22, v23, v24, v25, v26, v27, (uint64_t *)&v35, v28);
    }
    v29 = *(JSValueRef **)(v13 + 16);
    if (v29)
    {
      if (exception)
        *exception = v29[1];
      *(_QWORD *)(v13 + 16) = 0;
      v32 = (unsigned int *)(v13 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 & 0xFFFFFFEF, v32));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)v9 + 253), v9, (JSC::Exception *)v29, v23, v24, v25, v26, v27);
      v9 = 0;
    }
    else
    {
      if (resolve)
        *resolve = v36;
      if (reject)
        *reject = v37;
      v9 = v35;
    }
    JSC::JSLockHolder::~JSLockHolder(&v38, NewPromiseCapability, (uint64_t)v29, v23, v24, v25, v26, v27);
  }
  return v9;
}

JSValueRef JSObjectGetPrototype(JSContextRef ctx, JSObjectRef object)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const OpaqueJSValue *v17;
  unsigned int *v19;

  if (!ctx)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, ctx, v2, v3, v4, v5, v6, v7, v8);
  v17 = *(const OpaqueJSValue **)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x30);
  if (!v17)
    v17 = (const OpaqueJSValue *)*((_QWORD *)object + 2);
  JSC::JSLockHolder::~JSLockHolder(&v19, v10, v11, v12, v13, v14, v15, v16);
  return v17;
}

void JSObjectSetPrototype(JSContextRef ctx, JSObjectRef object, JSValueRef value)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::Exception *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;

  if (ctx)
  {
    v12 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v23, (JSC::VM *)v12, (uint64_t)value, v3, v4, v5, v6, v7, v8);
    if (value)
      v13 = (uint64_t)value;
    else
      v13 = 2;
    if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
      v13 = 2;
    (*(void (**)(JSObjectRef, JSContextRef, uint64_t, _QWORD))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xA8))(object, ctx, v13, 0);
    v20 = (JSC::Exception *)*((_QWORD *)v12 + 2);
    if (v20)
    {
      *((_QWORD *)v12 + 2) = 0;
      v21 = v12 + 20;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, v20, v15, v16, v17, v18, v19);
    }
    JSC::JSLockHolder::~JSLockHolder(&v23, v14, (uint64_t)v20, v15, v16, v17, v18, v19);
  }
}

BOOL JSObjectHasProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSContextRef v9;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const JSC::PropertyTable *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int *v41;

  v9 = ctx;
  if (ctx)
  {
    v12 = (JSC::VM *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, v12, (uint64_t)propertyName, v3, v4, v5, v6, v7, v8);
    OpaqueJSString::identifier(propertyName, v12, v13, v14, v15, v16, v17, (int **)&v40);
    LOBYTE(v9) = JSC::JSObject::hasProperty((unint64_t)object, (uint64_t)v9, (unint64_t)v40, v18, v19, v20, v21, v22);
    v30 = v40;
    v40 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v41, v23, v24, v25, v26, v27, v28, v29);
  }
  return (char)v9;
}

JSValueRef JSObjectGetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const OpaqueJSValue *v9;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  JSValueRef *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned int *v46;

  v9 = 0;
  if (ctx && object)
  {
    v14 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v46, (JSC::VM *)v14, (uint64_t)propertyName, (uint64_t)exception, v4, v5, v6, v7, v8);
    OpaqueJSString::identifier(propertyName, (JSC::VM *)v14, v15, v16, v17, v18, v19, (int **)&v45);
    v9 = (const OpaqueJSValue *)JSC::JSObject::get((unsigned int *)object, (uint64_t)ctx, (unint64_t)v45, v20, v21, v22, v23, v24);
    v32 = v45;
    v45 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    v33 = (JSValueRef *)*((_QWORD *)v14 + 2);
    if (v33)
    {
      if (exception)
        *exception = v33[1];
      *((_QWORD *)v14 + 2) = 0;
      v43 = v14 + 20;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 & 0xFFFFFFEF, v43));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v33, v27, v28, v29, v30, v31);
      v9 = 0;
    }
    JSC::JSLockHolder::~JSLockHolder(&v46, v25, (uint64_t)v33, v27, v28, v29, v30, v31);
  }
  return v9;
}

void JSObjectSetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v11;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const JSC::PropertyTable *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSValueRef *v26;
  JSValueRef **v27;
  WTF::AtomStringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char hasProperty;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  JSObjectRef v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int *v46;

  if (!ctx)
    return;
  v11 = (uint64_t)value;
  v15 = (_QWORD *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v46, (JSC::VM *)v15, (uint64_t)propertyName, (uint64_t)value, *(uint64_t *)&attributes, (uint64_t)exception, v6, v7, v8);
  OpaqueJSString::identifier(propertyName, (JSC::VM *)v15, v16, v17, v18, v19, v20, (int **)&v45);
  if (!v11)
    v11 = 2;
  if (!attributes)
  {
    v27 = (JSValueRef **)(v15 + 2);
    v26 = (JSValueRef *)v15[2];
    if (v26)
    {
LABEL_17:
      if (exception)
        *exception = v26[1];
      v15[2] = 0;
      v39 = (unsigned int *)(v15 + 10);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v26, (uint64_t)v21, v22, v23, v24, v25);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  hasProperty = JSC::JSObject::hasProperty((unint64_t)object, (uint64_t)ctx, (unint64_t)v45, v21, v22, v23, v24, v25);
  v27 = (JSValueRef **)(v15 + 2);
  v26 = (JSValueRef *)v15[2];
  if (v26)
    goto LABEL_17;
  if ((hasProperty & 1) != 0)
  {
LABEL_6:
    v41 = 0;
    v42 = object;
    v43 = 0x1000000FFFFFFFFLL;
    v44 = 0;
    (*(void (**)(JSObjectRef, JSContextRef, WTF::StringImpl *, uint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x48))(object, ctx, v45, v11, &v41);
    goto LABEL_7;
  }
  v42 = 0;
  v43 = 0;
  v41 = v11;
  v44 = attributes | 0x700000000;
  (*(void (**)(JSObjectRef, JSContextRef, WTF::StringImpl *, uint64_t *, _QWORD))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0x90))(object, ctx, v45, &v41, 0);
LABEL_7:
  v26 = *v27;
  if (*v27)
    goto LABEL_17;
LABEL_8:
  v29 = v45;
  v45 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v28, (uint64_t)v26, (uint64_t)v21, v22, v23, v24, v25);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v46, v28, (uint64_t)v26, (uint64_t)v21, v22, v23, v24, v25);
}

BOOL JSObjectHasPropertyForKey(JSContextRef ctx, JSObjectRef object, JSValueRef propertyKey, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v10;
  unsigned int *v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  JSValueRef *v24;
  char hasProperty;
  WTF::AtomStringImpl *v26;
  BOOL v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned __int8 *v122;
  WTF::StringImpl *v123;

  if (!ctx)
    return 0;
  v10 = (uint64_t)propertyKey;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v121, (JSC::VM *)v13, (uint64_t)propertyKey, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (!v10)
    v10 = 2;
  v21 = *((_QWORD *)ctx + 7);
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_48:
    v122 = (unsigned __int8 *)v10;
    if (*(_DWORD *)(v21 + 80))
    {
      v102 = *(_DWORD *)(v21 + 80);
      if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v21 + 16))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 8);
        if (!v22)
          goto LABEL_10;
        goto LABEL_8;
      }
      v10 = (uint64_t)v122;
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v73 = *(unsigned __int8 *)(v10 + 5);
      if (v73 == 2)
      {
LABEL_55:
        if (*(_DWORD *)(v21 + 80))
        {
          v103 = *(_DWORD *)(v21 + 80);
          if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          if (*(_QWORD *)(v21 + 16))
          {
            v22 = 0;
            goto LABEL_10;
          }
        }
        v22 = *(_QWORD *)(v10 + 8);
        v21 = *((_QWORD *)ctx + 7);
        if ((v22 & 1) == 0)
        {
          if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
          {
            v76 = *(WTF::StringImpl **)(v21 + 64768);
            if (v76 != (WTF::StringImpl *)v22)
            {
              *(_DWORD *)v22 += 2;
              *(_QWORD *)(v21 + 64768) = v22;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
              v77 = *(WTF::StringImpl **)(v10 + 8);
              if (v77)
              {
                if ((*((_BYTE *)v77 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v77 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v77, v15, (uint64_t)v16, v17, v18, v19, v20, (WTF *)&v123);
                  v77 = v123;
                }
              }
              v78 = *(WTF::StringImpl **)(v21 + 64776);
              *(_QWORD *)(v21 + 64776) = v77;
              if (v78)
              {
                if (*(_DWORD *)v78 == 2)
                {
                  WTF::StringImpl::~StringImpl(v78, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v78 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v79 = *(_DWORD **)(v21 + 64776);
              *v79 += 2;
              __dmb(0xAu);
              v80 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v79;
              v123 = v80;
              v81 = (_QWORD *)(v21 + 808);
              v82 = *(unsigned int *)(v21 + 820);
              if ((_DWORD)v82 == *(_DWORD *)(v21 + 816))
              {
                v84 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v123);
                v82 = *(unsigned int *)(v21 + 820);
                v83 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v82);
                v80 = *v84;
              }
              else
              {
                v83 = (WTF::StringImpl **)(*v81 + 8 * v82);
                v84 = &v123;
              }
              *v84 = 0;
              *v83 = v80;
              *(_DWORD *)(v21 + 820) = v82 + 1;
              v85 = v123;
              v123 = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                {
                  WTF::StringImpl::~StringImpl(v85, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                }
                else
                {
                  *(_DWORD *)v85 -= 2;
                }
              }
            }
            v22 = *(_QWORD *)(v21 + 64776);
          }
          goto LABEL_8;
        }
        goto LABEL_71;
      }
      if (v73 == 4)
      {
        v22 = *(_QWORD *)(v10 + 8);
        v74 = *(_DWORD *)v22;
        *(_DWORD *)v22 += 4;
        v23 = v74 + 2;
        if (v23)
          goto LABEL_9;
        v75 = (WTF::StringImpl *)v22;
LABEL_76:
        WTF::StringImpl::~StringImpl(v75, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        goto LABEL_10;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(&v122, (uint64_t)ctx, (JSC::Structure *)1, (uint64_t)v16, v17, v18, v19, v20);
    goto LABEL_55;
  }
  if (*(_BYTE *)(v10 + 5) != 2)
  {
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)ctx, (JSC::Structure *)2, (uint64_t)v16, v17, v18, v19, v20);
    goto LABEL_48;
  }
  v22 = *(_QWORD *)(v10 + 8);
  if ((v22 & 1) != 0)
  {
LABEL_71:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, ctx);
    if (!*(_DWORD *)(v21 + 80))
      goto LABEL_72;
    v104 = *(_DWORD *)(v21 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v21 + 16))
    {
      v22 = 0;
      v75 = v123;
      v123 = 0;
      if (!v75)
        goto LABEL_10;
    }
    else
    {
LABEL_72:
      v22 = (unint64_t)v123;
      if (!v123)
        goto LABEL_10;
      *(_DWORD *)v123 += 2;
      v123 = 0;
      v75 = (WTF::StringImpl *)v22;
    }
    if (*(_DWORD *)v75 != 2)
    {
      *(_DWORD *)v75 -= 2;
      goto LABEL_10;
    }
    goto LABEL_76;
  }
  if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
  {
    v37 = *(WTF::StringImpl **)(v21 + 64768);
    if (v37 != (WTF::StringImpl *)v22)
    {
      *(_DWORD *)v22 += 2;
      *(_QWORD *)(v21 + 64768) = v22;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      v38 = *(WTF::StringImpl **)(v10 + 8);
      if (v38)
      {
        if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v38 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v15, (uint64_t)v16, v17, v18, v19, v20, (WTF *)&v123);
          v38 = v123;
        }
      }
      v39 = *(WTF::StringImpl **)(v21 + 64776);
      *(_QWORD *)(v21 + 64776) = v38;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v40 = *(_DWORD **)(v21 + 64776);
      *v40 += 2;
      __dmb(0xAu);
      v41 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v40;
      v123 = v41;
      v42 = (_QWORD *)(v21 + 808);
      v43 = *(unsigned int *)(v21 + 820);
      if ((_DWORD)v43 == *(_DWORD *)(v21 + 816))
      {
        v45 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v123);
        v43 = *(unsigned int *)(v21 + 820);
        v44 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v43);
        v41 = *v45;
      }
      else
      {
        v44 = (WTF::StringImpl **)(*v42 + 8 * v43);
        v45 = &v123;
      }
      *v45 = 0;
      *v44 = v41;
      *(_DWORD *)(v21 + 820) = v43 + 1;
      v46 = v123;
      v123 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    v22 = *(_QWORD *)(v21 + 64776);
  }
LABEL_8:
  v23 = *(_DWORD *)v22 + 2;
LABEL_9:
  *(_DWORD *)v22 = v23;
LABEL_10:
  v24 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v24
    || (hasProperty = JSC::JSObject::hasProperty((unint64_t)object, (uint64_t)ctx, v22, v16, v17, v18, v19, v20),
        (v24 = (JSValueRef *)*((_QWORD *)v13 + 2)) != 0))
  {
    if (exception)
      *exception = v24[1];
    *((_QWORD *)v13 + 2) = 0;
    v55 = v13 + 20;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 & 0xFFFFFFEF, v55));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v24, (uint64_t)v16, v17, v18, v19, v20);
    v27 = 0;
    if (!v22)
      goto LABEL_15;
    goto LABEL_13;
  }
  v27 = hasProperty;
  if (v22)
  {
LABEL_13:
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v26, (uint64_t)v24, (uint64_t)v16, v17, v18, v19, v20);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_15:
  JSC::JSLockHolder::~JSLockHolder(&v121, v26, (uint64_t)v24, (uint64_t)v16, v17, v18, v19, v20);
  return v27;
}

JSValueRef JSObjectGetPropertyForKey(JSContextRef ctx, JSObjectRef object, JSValueRef propertyKey, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v10;
  unsigned int *v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  JSValueRef *v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  const OpaqueJSValue *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  _QWORD *v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned __int8 *v124;
  WTF::StringImpl *v125;

  if (!ctx)
    return 0;
  v10 = (uint64_t)propertyKey;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v123, (JSC::VM *)v13, (uint64_t)propertyKey, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (!v10)
    v10 = 2;
  v21 = *((_QWORD *)ctx + 7);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 2)
    {
      v22 = *(_QWORD *)(v10 + 8);
      if ((v22 & 1) == 0)
      {
        if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
        {
          v37 = *(WTF::StringImpl **)(v21 + 64768);
          if (v37 != (WTF::StringImpl *)v22)
          {
            *(_DWORD *)v22 += 2;
            *(_QWORD *)(v21 + 64768) = v22;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
              {
                WTF::StringImpl::~StringImpl(v37, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
                WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
              }
              else
              {
                *(_DWORD *)v37 -= 2;
              }
            }
            v38 = *(WTF::StringImpl **)(v10 + 8);
            if (v38)
            {
              if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v38 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v15, v16, v17, v18, v19, v20, (WTF *)&v125);
                v38 = v125;
              }
            }
            v39 = *(WTF::StringImpl **)(v21 + 64776);
            *(_QWORD *)(v21 + 64776) = v38;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
                WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
          {
            v40 = *(_DWORD **)(v21 + 64776);
            *v40 += 2;
            __dmb(0xAu);
            v41 = *(WTF::StringImpl **)(v10 + 8);
            *(_QWORD *)(v10 + 8) = v40;
            v125 = v41;
            v42 = (_QWORD *)(v21 + 808);
            v43 = *(unsigned int *)(v21 + 820);
            if ((_DWORD)v43 == *(_DWORD *)(v21 + 816))
            {
              v45 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v125);
              v43 = *(unsigned int *)(v21 + 820);
              v44 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v43);
              v41 = *v45;
            }
            else
            {
              v44 = (WTF::StringImpl **)(*v42 + 8 * v43);
              v45 = &v125;
            }
            *v45 = 0;
            *v44 = v41;
            *(_DWORD *)(v21 + 820) = v43 + 1;
            v46 = v125;
            v125 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
              {
                WTF::StringImpl::~StringImpl(v46, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
                WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
              }
              else
              {
                *(_DWORD *)v46 -= 2;
              }
            }
          }
          v22 = *(_QWORD *)(v21 + 64776);
        }
        goto LABEL_8;
      }
LABEL_76:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, ctx);
      if (!*(_DWORD *)(v21 + 80))
        goto LABEL_77;
      v106 = *(_DWORD *)(v21 + 80);
      if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v21 + 16))
      {
        v22 = 0;
        v77 = v125;
        v125 = 0;
        if (!v77)
          goto LABEL_10;
      }
      else
      {
LABEL_77:
        v22 = (unint64_t)v125;
        if (!v125)
          goto LABEL_10;
        *(_DWORD *)v125 += 2;
        v125 = 0;
        v77 = (WTF::StringImpl *)v22;
      }
      if (*(_DWORD *)v77 != 2)
      {
        *(_DWORD *)v77 -= 2;
        goto LABEL_10;
      }
LABEL_81:
      WTF::StringImpl::~StringImpl(v77, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      goto LABEL_10;
    }
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)ctx, (JSC::Structure *)2, v16, v17, v18, v19, v20);
  }
  v124 = (unsigned __int8 *)v10;
  if (!*(_DWORD *)(v21 + 80))
  {
LABEL_54:
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v75 = *(unsigned __int8 *)(v10 + 5);
      if (v75 == 2)
        goto LABEL_60;
      if (v75 == 4)
      {
        v22 = *(_QWORD *)(v10 + 8);
        v76 = *(_DWORD *)v22;
        *(_DWORD *)v22 += 4;
        v23 = v76 + 2;
        if (v23)
          goto LABEL_9;
        v77 = (WTF::StringImpl *)v22;
        goto LABEL_81;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(&v124, (uint64_t)ctx, (JSC::Structure *)1, v16, v17, v18, v19, v20);
LABEL_60:
    if (*(_DWORD *)(v21 + 80))
    {
      v105 = *(_DWORD *)(v21 + 80);
      if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v21 + 16))
      {
        v22 = 0;
        goto LABEL_10;
      }
    }
    v22 = *(_QWORD *)(v10 + 8);
    v21 = *((_QWORD *)ctx + 7);
    if ((v22 & 1) == 0)
    {
      if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
      {
        v78 = *(WTF::StringImpl **)(v21 + 64768);
        if (v78 != (WTF::StringImpl *)v22)
        {
          *(_DWORD *)v22 += 2;
          *(_QWORD *)(v21 + 64768) = v22;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
            {
              WTF::StringImpl::~StringImpl(v78, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
            }
            else
            {
              *(_DWORD *)v78 -= 2;
            }
          }
          v79 = *(WTF::StringImpl **)(v10 + 8);
          if (v79)
          {
            if ((*((_BYTE *)v79 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v79 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v79, v15, v16, v17, v18, v19, v20, (WTF *)&v125);
              v79 = v125;
            }
          }
          v80 = *(WTF::StringImpl **)(v21 + 64776);
          *(_QWORD *)(v21 + 64776) = v79;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
            {
              WTF::StringImpl::~StringImpl(v80, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
            }
            else
            {
              *(_DWORD *)v80 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v81 = *(_DWORD **)(v21 + 64776);
          *v81 += 2;
          __dmb(0xAu);
          v82 = *(WTF::StringImpl **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v81;
          v125 = v82;
          v83 = (_QWORD *)(v21 + 808);
          v84 = *(unsigned int *)(v21 + 820);
          if ((_DWORD)v84 == *(_DWORD *)(v21 + 816))
          {
            v86 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v125);
            v84 = *(unsigned int *)(v21 + 820);
            v85 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v84);
            v82 = *v86;
          }
          else
          {
            v85 = (WTF::StringImpl **)(*v83 + 8 * v84);
            v86 = &v125;
          }
          *v86 = 0;
          *v85 = v82;
          *(_DWORD *)(v21 + 820) = v84 + 1;
          v87 = v125;
          v125 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::~StringImpl(v87, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
            }
            else
            {
              *(_DWORD *)v87 -= 2;
            }
          }
        }
        v22 = *(_QWORD *)(v21 + 64776);
      }
      goto LABEL_8;
    }
    goto LABEL_76;
  }
  v104 = *(_DWORD *)(v21 + 80);
  if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
  if (!*(_QWORD *)(v21 + 16))
  {
    v10 = (uint64_t)v124;
    goto LABEL_54;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 8);
  if (v22)
  {
LABEL_8:
    v23 = *(_DWORD *)v22 + 2;
LABEL_9:
    *(_DWORD *)v22 = v23;
  }
LABEL_10:
  v24 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v24)
  {
    if (exception)
      *exception = v24[1];
    *((_QWORD *)v13 + 2) = 0;
    v55 = v13 + 20;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 & 0xFFFFFFEF, v55));
  }
  else
  {
    v25 = JSC::JSObject::get((unsigned int *)object, (uint64_t)ctx, v22, v16, v17, v18, v19, v20);
    v24 = (JSValueRef *)*((_QWORD *)v13 + 2);
    if (!v24)
    {
      v27 = (const OpaqueJSValue *)v25;
      if (v22)
        goto LABEL_13;
      goto LABEL_15;
    }
    if (exception)
      *exception = v24[1];
    *((_QWORD *)v13 + 2) = 0;
    v57 = v13 + 20;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 & 0xFFFFFFEF, v57));
  }
  Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v24, v16, v17, v18, v19, v20);
  v27 = 0;
  if (v22)
  {
LABEL_13:
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v26, (uint64_t)v24, v16, v17, v18, v19, v20);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_15:
  JSC::JSLockHolder::~JSLockHolder(&v123, v26, (uint64_t)v24, v16, v17, v18, v19, v20);
  return v27;
}

void JSObjectSetPropertyForKey(JSContextRef ctx, JSObjectRef object, JSValueRef propertyKey, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  WTF::StringImpl *v10;
  unsigned int *v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  const JSC::PropertyTable *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  JSValueRef *v26;
  char hasProperty;
  void *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v122;
  JSObjectRef v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned __int8 *v127;

  if (ctx)
  {
    v10 = value;
    v14 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v126, (JSC::VM *)v14, (uint64_t)propertyKey, (uint64_t)value, *(uint64_t *)&attributes, (uint64_t)exception, v6, v7, v8);
    if (!v10)
      v10 = (WTF::StringImpl *)2;
    if (propertyKey)
      v22 = (uint64_t)propertyKey;
    else
      v22 = 2;
    v23 = *((_QWORD *)ctx + 7);
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v22 + 5) == 2)
      {
        v24 = *(_QWORD *)(v22 + 8);
        if ((v24 & 1) == 0)
        {
          if ((*(_BYTE *)(v24 + 16) & 0x10) == 0)
          {
            v37 = *(WTF::StringImpl **)(v23 + 64768);
            if (v37 != (WTF::StringImpl *)v24)
            {
              *(_DWORD *)v24 += 2;
              *(_QWORD *)(v23 + 64768) = v24;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                {
                  WTF::StringImpl::~StringImpl(v37, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
                }
                else
                {
                  *(_DWORD *)v37 -= 2;
                }
              }
              v38 = *(WTF::StringImpl **)(v22 + 8);
              if (v38)
              {
                if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v38 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v16, (uint64_t)v17, v18, v19, v20, v21, (WTF *)&v122);
                  v38 = v122;
                }
              }
              v39 = *(WTF::StringImpl **)(v23 + 64776);
              *(_QWORD *)(v23 + 64776) = v38;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::~StringImpl(v39, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v22 + 8) + 16) & 0x10) == 0)
            {
              v40 = *(_DWORD **)(v23 + 64776);
              *v40 += 2;
              __dmb(0xAu);
              v41 = *(WTF::StringImpl **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v40;
              v122 = v41;
              v42 = (_QWORD *)(v23 + 808);
              v43 = *(unsigned int *)(v23 + 820);
              if ((_DWORD)v43 == *(_DWORD *)(v23 + 816))
              {
                v45 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v122);
                v43 = *(unsigned int *)(v23 + 820);
                v44 = (WTF::StringImpl **)(*(_QWORD *)(v23 + 808) + 8 * v43);
                v41 = *v45;
              }
              else
              {
                v44 = (WTF::StringImpl **)(*v42 + 8 * v43);
                v45 = &v122;
              }
              *v45 = 0;
              *v44 = v41;
              *(_DWORD *)(v23 + 820) = v43 + 1;
              v46 = v122;
              v122 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                {
                  WTF::StringImpl::~StringImpl(v46, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
                }
                else
                {
                  *(_DWORD *)v46 -= 2;
                }
              }
            }
            v24 = *(_QWORD *)(v23 + 64776);
          }
LABEL_11:
          v25 = *(_DWORD *)v24 + 2;
LABEL_12:
          *(_DWORD *)v24 = v25;
LABEL_13:
          v26 = (JSValueRef *)*((_QWORD *)v14 + 2);
          if (v26)
            goto LABEL_40;
          if (!attributes)
            goto LABEL_17;
          hasProperty = JSC::JSObject::hasProperty((unint64_t)object, (uint64_t)ctx, v24, v17, v18, v19, v20, v21);
          v26 = (JSValueRef *)*((_QWORD *)v14 + 2);
          if (v26)
            goto LABEL_40;
          if ((hasProperty & 1) == 0)
          {
            v123 = 0;
            v124 = 0;
            v122 = v10;
            v125 = attributes | 0x700000000;
            (*(void (**)(JSObjectRef, JSContextRef, unint64_t, WTF::StringImpl **, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C) + 0x90))(object, ctx, v24, &v122, 0);
          }
          else
          {
LABEL_17:
            v122 = 0;
            v123 = object;
            v124 = 0x1000000FFFFFFFFLL;
            v125 = 0;
            (*(void (**)(JSObjectRef, JSContextRef, unint64_t, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C) + 0x48))(object, ctx, v24, v10, &v122);
          }
          v26 = (JSValueRef *)*((_QWORD *)v14 + 2);
          if (!v26)
          {
            if (!v24)
            {
LABEL_23:
              JSC::JSLockHolder::~JSLockHolder(&v126, v28, (uint64_t)v26, (uint64_t)v17, v18, v19, v20, v21);
              return;
            }
LABEL_21:
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v24, (WTF::AtomStringImpl *)v28, (uint64_t)v26, (uint64_t)v17, v18, v19, v20, v21);
              WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
            goto LABEL_23;
          }
LABEL_40:
          if (exception)
            *exception = v26[1];
          *((_QWORD *)v14 + 2) = 0;
          v55 = v14 + 20;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 & 0xFFFFFFEF, v55));
          Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v26, (uint64_t)v17, v18, v19, v20, v21);
          if (!v24)
            goto LABEL_23;
          goto LABEL_21;
        }
LABEL_78:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v22, ctx);
        if (!*(_DWORD *)(v23 + 80))
          goto LABEL_79;
        v104 = *(_DWORD *)(v23 + 80);
        if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v23 + 16))
        {
          v24 = 0;
          v75 = v122;
          v122 = 0;
          if (!v75)
            goto LABEL_13;
        }
        else
        {
LABEL_79:
          v24 = (unint64_t)v122;
          if (!v122)
            goto LABEL_13;
          *(_DWORD *)v122 += 2;
          v122 = 0;
          v75 = (WTF::StringImpl *)v24;
        }
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
          goto LABEL_13;
        }
        goto LABEL_83;
      }
      v22 = JSC::JSCell::toPrimitive(v22, (JSC::VM **)ctx, (JSC::Structure *)2, (uint64_t)v17, v18, v19, v20, v21);
    }
    v127 = (unsigned __int8 *)v22;
    if (*(_DWORD *)(v23 + 80))
    {
      v102 = *(_DWORD *)(v23 + 80);
      if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v23 + 16))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v23 + 41952) + 8);
        if (!v24)
          goto LABEL_13;
        goto LABEL_11;
      }
      v22 = (uint64_t)v127;
    }
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      v73 = *(unsigned __int8 *)(v22 + 5);
      if (v73 == 2)
      {
LABEL_62:
        if (*(_DWORD *)(v23 + 80))
        {
          v103 = *(_DWORD *)(v23 + 80);
          if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
          if (*(_QWORD *)(v23 + 16))
          {
            v24 = 0;
            goto LABEL_13;
          }
        }
        v24 = *(_QWORD *)(v22 + 8);
        v23 = *((_QWORD *)ctx + 7);
        if ((v24 & 1) == 0)
        {
          if ((*(_BYTE *)(v24 + 16) & 0x10) == 0)
          {
            v76 = *(WTF::StringImpl **)(v23 + 64768);
            if (v76 != (WTF::StringImpl *)v24)
            {
              *(_DWORD *)v24 += 2;
              *(_QWORD *)(v23 + 64768) = v24;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
              v77 = *(WTF::StringImpl **)(v22 + 8);
              if (v77)
              {
                if ((*((_BYTE *)v77 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v77 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v77, v16, (uint64_t)v17, v18, v19, v20, v21, (WTF *)&v122);
                  v77 = v122;
                }
              }
              v78 = *(WTF::StringImpl **)(v23 + 64776);
              *(_QWORD *)(v23 + 64776) = v77;
              if (v78)
              {
                if (*(_DWORD *)v78 == 2)
                {
                  WTF::StringImpl::~StringImpl(v78, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v78 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v22 + 8) + 16) & 0x10) == 0)
            {
              v79 = *(_DWORD **)(v23 + 64776);
              *v79 += 2;
              __dmb(0xAu);
              v80 = *(WTF::StringImpl **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v79;
              v122 = v80;
              v81 = (_QWORD *)(v23 + 808);
              v82 = *(unsigned int *)(v23 + 820);
              if ((_DWORD)v82 == *(_DWORD *)(v23 + 816))
              {
                v84 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v122);
                v82 = *(unsigned int *)(v23 + 820);
                v83 = (WTF::StringImpl **)(*(_QWORD *)(v23 + 808) + 8 * v82);
                v80 = *v84;
              }
              else
              {
                v83 = (WTF::StringImpl **)(*v81 + 8 * v82);
                v84 = &v122;
              }
              *v84 = 0;
              *v83 = v80;
              *(_DWORD *)(v23 + 820) = v82 + 1;
              v85 = v122;
              v122 = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                {
                  WTF::StringImpl::~StringImpl(v85, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
                  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                }
                else
                {
                  *(_DWORD *)v85 -= 2;
                }
              }
            }
            v24 = *(_QWORD *)(v23 + 64776);
          }
          goto LABEL_11;
        }
        goto LABEL_78;
      }
      if (v73 == 4)
      {
        v24 = *(_QWORD *)(v22 + 8);
        v74 = *(_DWORD *)v24;
        *(_DWORD *)v24 += 4;
        v25 = v74 + 2;
        if (v25)
          goto LABEL_12;
        v75 = (WTF::StringImpl *)v24;
LABEL_83:
        WTF::StringImpl::~StringImpl(v75, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        goto LABEL_13;
      }
    }
    v22 = (uint64_t)JSC::JSValue::toStringSlowCase(&v127, (uint64_t)ctx, (JSC::Structure *)1, (uint64_t)v17, v18, v19, v20, v21);
    goto LABEL_62;
  }
}

BOOL JSObjectDeletePropertyForKey(JSContextRef ctx, JSObjectRef object, JSValueRef propertyKey, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v10;
  unsigned int *v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  JSC::Symbol *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  JSValueRef *v24;
  char v25;
  WTF::AtomStringImpl *v26;
  BOOL v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned __int8 *v122;
  WTF::StringImpl *v123;

  if (!ctx)
    return 0;
  v10 = (uint64_t)propertyKey;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v121, (JSC::VM *)v13, (uint64_t)propertyKey, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (!v10)
    v10 = 2;
  v21 = *((_QWORD *)ctx + 7);
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_48:
    v122 = (unsigned __int8 *)v10;
    if (*(_DWORD *)(v21 + 80))
    {
      v102 = *(_DWORD *)(v21 + 80);
      if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v21 + 16))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 8);
        if (!v22)
          goto LABEL_10;
        goto LABEL_8;
      }
      v10 = (uint64_t)v122;
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v73 = *(unsigned __int8 *)(v10 + 5);
      if (v73 == 2)
      {
LABEL_55:
        if (*(_DWORD *)(v21 + 80))
        {
          v103 = *(_DWORD *)(v21 + 80);
          if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          if (*(_QWORD *)(v21 + 16))
          {
            v22 = 0;
            goto LABEL_10;
          }
        }
        v22 = *(_QWORD *)(v10 + 8);
        v21 = *((_QWORD *)ctx + 7);
        if ((v22 & 1) == 0)
        {
          if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
          {
            v76 = *(WTF::StringImpl **)(v21 + 64768);
            if (v76 != (WTF::StringImpl *)v22)
            {
              *(_DWORD *)v22 += 2;
              *(_QWORD *)(v21 + 64768) = v22;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
              v77 = *(WTF::StringImpl **)(v10 + 8);
              if (v77)
              {
                if ((*((_BYTE *)v77 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v77 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v77, v15, (uint64_t)v16, v17, v18, v19, v20, (WTF *)&v123);
                  v77 = v123;
                }
              }
              v78 = *(WTF::StringImpl **)(v21 + 64776);
              *(_QWORD *)(v21 + 64776) = v77;
              if (v78)
              {
                if (*(_DWORD *)v78 == 2)
                {
                  WTF::StringImpl::~StringImpl(v78, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v78 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v79 = *(_DWORD **)(v21 + 64776);
              *v79 += 2;
              __dmb(0xAu);
              v80 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v79;
              v123 = v80;
              v81 = (_QWORD *)(v21 + 808);
              v82 = *(unsigned int *)(v21 + 820);
              if ((_DWORD)v82 == *(_DWORD *)(v21 + 816))
              {
                v84 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v123);
                v82 = *(unsigned int *)(v21 + 820);
                v83 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v82);
                v80 = *v84;
              }
              else
              {
                v83 = (WTF::StringImpl **)(*v81 + 8 * v82);
                v84 = &v123;
              }
              *v84 = 0;
              *v83 = v80;
              *(_DWORD *)(v21 + 820) = v82 + 1;
              v85 = v123;
              v123 = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                {
                  WTF::StringImpl::~StringImpl(v85, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
                  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                }
                else
                {
                  *(_DWORD *)v85 -= 2;
                }
              }
            }
            v22 = *(_QWORD *)(v21 + 64776);
          }
          goto LABEL_8;
        }
        goto LABEL_71;
      }
      if (v73 == 4)
      {
        v22 = *(_QWORD *)(v10 + 8);
        v74 = *(_DWORD *)v22;
        *(_DWORD *)v22 += 4;
        v23 = v74 + 2;
        if (v23)
          goto LABEL_9;
        v75 = (WTF::StringImpl *)v22;
LABEL_76:
        WTF::StringImpl::~StringImpl(v75, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        goto LABEL_10;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(&v122, (uint64_t)ctx, (JSC::Structure *)1, (uint64_t)v16, v17, v18, v19, v20);
    goto LABEL_55;
  }
  if (*(_BYTE *)(v10 + 5) != 2)
  {
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)ctx, (JSC::Structure *)2, (uint64_t)v16, v17, v18, v19, v20);
    goto LABEL_48;
  }
  v22 = *(_QWORD *)(v10 + 8);
  if ((v22 & 1) != 0)
  {
LABEL_71:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, ctx);
    if (!*(_DWORD *)(v21 + 80))
      goto LABEL_72;
    v104 = *(_DWORD *)(v21 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v21 + 16))
    {
      v22 = 0;
      v75 = v123;
      v123 = 0;
      if (!v75)
        goto LABEL_10;
    }
    else
    {
LABEL_72:
      v22 = (uint64_t)v123;
      if (!v123)
        goto LABEL_10;
      *(_DWORD *)v123 += 2;
      v123 = 0;
      v75 = (WTF::StringImpl *)v22;
    }
    if (*(_DWORD *)v75 != 2)
    {
      *(_DWORD *)v75 -= 2;
      goto LABEL_10;
    }
    goto LABEL_76;
  }
  if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
  {
    v37 = *(WTF::StringImpl **)(v21 + 64768);
    if (v37 != (WTF::StringImpl *)v22)
    {
      *(_DWORD *)v22 += 2;
      *(_QWORD *)(v21 + 64768) = v22;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      v38 = *(WTF::StringImpl **)(v10 + 8);
      if (v38)
      {
        if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v38 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v15, (uint64_t)v16, v17, v18, v19, v20, (WTF *)&v123);
          v38 = v123;
        }
      }
      v39 = *(WTF::StringImpl **)(v21 + 64776);
      *(_QWORD *)(v21 + 64776) = v38;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v40 = *(_DWORD **)(v21 + 64776);
      *v40 += 2;
      __dmb(0xAu);
      v41 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v40;
      v123 = v41;
      v42 = (_QWORD *)(v21 + 808);
      v43 = *(unsigned int *)(v21 + 820);
      if ((_DWORD)v43 == *(_DWORD *)(v21 + 816))
      {
        v45 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v123);
        v43 = *(unsigned int *)(v21 + 820);
        v44 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 808) + 8 * v43);
        v41 = *v45;
      }
      else
      {
        v44 = (WTF::StringImpl **)(*v42 + 8 * v43);
        v45 = &v123;
      }
      *v45 = 0;
      *v44 = v41;
      *(_DWORD *)(v21 + 820) = v43 + 1;
      v46 = v123;
      v123 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v14, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    v22 = *(_QWORD *)(v21 + 64776);
  }
LABEL_8:
  v23 = *(_DWORD *)v22 + 2;
LABEL_9:
  *(_DWORD *)v22 = v23;
LABEL_10:
  v24 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v24
    || (v25 = JSC::JSCell::deleteProperty((unint64_t)object, (uint64_t)ctx, v22, v16, v17, v18, v19, v20),
        (v24 = (JSValueRef *)*((_QWORD *)v13 + 2)) != 0))
  {
    if (exception)
      *exception = v24[1];
    *((_QWORD *)v13 + 2) = 0;
    v55 = v13 + 20;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 & 0xFFFFFFEF, v55));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v24, (uint64_t)v16, v17, v18, v19, v20);
    v27 = 0;
    if (!v22)
      goto LABEL_15;
    goto LABEL_13;
  }
  v27 = v25;
  if (v22)
  {
LABEL_13:
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v26, (uint64_t)v24, (uint64_t)v16, v17, v18, v19, v20);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_15:
  JSC::JSLockHolder::~JSLockHolder(&v121, v26, (uint64_t)v24, (uint64_t)v16, v17, v18, v19, v20);
  return v27;
}

JSValueRef JSObjectGetPropertyAtIndex(JSContextRef ctx, JSObjectRef object, unsigned int propertyIndex, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v10;
  unsigned int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValueRef *v21;
  const OpaqueJSValue *v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;

  if (!ctx)
    return 0;
  v10 = *(_QWORD *)&propertyIndex;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v26, (JSC::VM *)v13, *(uint64_t *)&propertyIndex, (uint64_t)exception, v4, v5, v6, v7, v8);
  v14 = JSC::JSObject::get(object, ctx, v10);
  v21 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v21)
  {
    if (exception)
      *exception = v21[1];
    *((_QWORD *)v13 + 2) = 0;
    v24 = v13 + 20;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 & 0xFFFFFFEF, v24));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v21, v16, v17, v18, v19, v20);
    v22 = 0;
  }
  else
  {
    v22 = (const OpaqueJSValue *)v14;
  }
  JSC::JSLockHolder::~JSLockHolder(&v26, v15, (uint64_t)v21, v16, v17, v18, v19, v20);
  return v22;
}

void JSObjectSetPropertyAtIndex(JSContextRef ctx, JSObjectRef object, unsigned int propertyIndex, JSValueRef value, JSValueRef *exception)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v11;
  unsigned int *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSValueRef *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;

  if (ctx)
  {
    v11 = *(_QWORD *)&propertyIndex;
    v14 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, (JSC::VM *)v14, *(uint64_t *)&propertyIndex, (uint64_t)value, (uint64_t)exception, v5, v6, v7, v8);
    if (value)
      v15 = (uint64_t)value;
    else
      v15 = 2;
    (*(void (**)(JSObjectRef, JSContextRef, uint64_t, uint64_t, _QWORD))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x50))(object, ctx, v11, v15, 0);
    v22 = (JSValueRef *)*((_QWORD *)v14 + 2);
    if (v22)
    {
      if (exception)
        *exception = v22[1];
      *((_QWORD *)v14 + 2) = 0;
      v23 = v14 + 20;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 & 0xFFFFFFEF, v23));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v22, v17, v18, v19, v20, v21);
    }
    JSC::JSLockHolder::~JSLockHolder(&v25, v16, (uint64_t)v22, v17, v18, v19, v20, v21);
  }
}

BOOL JSObjectDeleteProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Symbol *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  JSValueRef *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned int *v46;

  if (!ctx)
    return 0;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v46, (JSC::VM *)v13, (uint64_t)propertyName, (uint64_t)exception, v4, v5, v6, v7, v8);
  OpaqueJSString::identifier(propertyName, (JSC::VM *)v13, v14, v15, v16, v17, v18, (int **)&v45);
  v31 = JSC::JSCell::deleteProperty((unint64_t)object, (uint64_t)ctx, (uint64_t)v45, v19, v20, v21, v22, v23);
  v32 = v45;
  v45 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v33 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v33)
  {
    if (exception)
      *exception = v33[1];
    *((_QWORD *)v13 + 2) = 0;
    v43 = v13 + 20;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 & 0xFFFFFFEF, v43));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v33, v26, v27, v28, v29, v30);
    v31 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v46, v24, (uint64_t)v33, v26, v27, v28, v29, v30);
  return v31;
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v6;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t v13;
  void ***v15;

  v1 = (_QWORD *)((unint64_t)object & 0xFFFFFFFFFFFFC000 | 8);
  if ((object & 8) != 0)
    v1 = (_QWORD *)((char *)object - 16);
  v2 = *v1 + 41896;
  if (*(JSObjectRef *)v2 == object)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C);
  v4 = v3 != 0;
  if ((char **)v3 != &JSC::JSGlobalProxy::s_info && v3 != 0)
  {
    v6 = v3;
    do
    {
      v6 = *(_QWORD *)(v6 + 16);
      v4 = v6 != 0;
    }
    while ((char **)v6 != &JSC::JSGlobalProxy::s_info && v6 != 0);
  }
  if (v4)
  {
    object = (JSObjectRef)*((_QWORD *)object + 2);
    v3 = 16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C);
  }
  v8 = v3 != 0;
  v9 = v8;
  if ((char **)v3 != &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
  {
    v9 = v3 != 0;
    if (v3)
    {
      v10 = v3;
      do
      {
        v10 = *(_QWORD *)(v10 + 16);
        v9 = v10 != 0;
      }
      while ((char **)v10 != &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info && v10 != 0);
    }
  }
  if (v9)
  {
    v15 = (void ***)((char *)object + 3296);
    return **v15;
  }
  v12 = v3 != 0;
  if ((char **)v3 != &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
  {
    v12 = v3 != 0;
    if (v3)
    {
      v13 = v3;
      do
      {
        v13 = *(_QWORD *)(v13 + 16);
        v12 = v13 != 0;
      }
      while ((char **)v13 != &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info && v13 != 0);
    }
  }
  if (v12)
  {
    v15 = (void ***)((char *)object + 16);
    return **v15;
  }
  if ((char **)v3 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info && v3)
  {
    do
    {
      v3 = *(_QWORD *)(v3 + 16);
      v8 = v3 != 0;
    }
    while ((char **)v3 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info && v3 != 0);
  }
  if (v8)
  {
    v15 = (void ***)((char *)object + 24);
    return **v15;
  }
  return 0;
}

BOOL JSObjectSetPrivate(JSObjectRef object, void *data)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v7;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v13;
  uint64_t v14;
  char *v16;

  v2 = (_QWORD *)((unint64_t)object & 0xFFFFFFFFFFFFC000 | 8);
  if ((object & 8) != 0)
    v2 = (_QWORD *)((char *)object - 16);
  v3 = *v2 + 41896;
  if (*(JSObjectRef *)v3 == object)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C);
  v5 = v4 != 0;
  if ((char **)v4 != &JSC::JSGlobalProxy::s_info && v4 != 0)
  {
    v7 = v4;
    do
    {
      v7 = *(_QWORD *)(v7 + 16);
      v5 = v7 != 0;
    }
    while ((char **)v7 != &JSC::JSGlobalProxy::s_info && v7 != 0);
  }
  if (v5)
  {
    object = (JSObjectRef)*((_QWORD *)object + 2);
    v4 = 16 * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x4C);
  }
  v9 = v4 != 0;
  v10 = v9;
  if ((char **)v4 != &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
  {
    v10 = v4 != 0;
    if (v4)
    {
      v11 = v4;
      do
      {
        v11 = *(_QWORD *)(v11 + 16);
        v10 = v11 != 0;
      }
      while ((char **)v11 != &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info && v11 != 0);
    }
  }
  if (v10)
  {
    v16 = (char *)object + 3296;
    goto LABEL_36;
  }
  v13 = v4 != 0;
  if ((char **)v4 != &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
  {
    v13 = v4 != 0;
    if (v4)
    {
      v14 = v4;
      do
      {
        v14 = *(_QWORD *)(v14 + 16);
        v13 = v14 != 0;
      }
      while ((char **)v14 != &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info && v14 != 0);
    }
  }
  if (v13)
  {
    v16 = (char *)object + 16;
LABEL_36:
    **(_QWORD **)v16 = data;
    return 1;
  }
  if ((char **)v4 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info && v4)
  {
    do
    {
      v4 = *(_QWORD *)(v4 + 16);
      v9 = v4 != 0;
    }
    while ((char **)v4 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info && v4 != 0);
  }
  if (v9)
  {
    v16 = (char *)object + 24;
    goto LABEL_36;
  }
  return 0;
}

uint64_t JSObjectGetPrivateProperty(uint64_t a1, uint64_t a2, OpaqueJSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  int v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned int *v54;

  v11 = *(JSC::VM **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v54, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  OpaqueJSString::identifier(a3, v11, v12, v13, v14, v15, v16, (int **)&v53);
  if (*(_BYTE *)(a2 + 5) == 32)
    a2 = *(_QWORD *)(a2 + 16);
  v24 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v24 == &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
  {
    v27 = *(uint64_t **)(*(_QWORD *)(a2 + 3296) + 16);
    v26 = v53;
    if (!v27)
      goto LABEL_36;
    v28 = *v27;
    if (!v28)
      goto LABEL_36;
    v29 = *(_DWORD *)(v28 - 8);
    v30 = *((_DWORD *)v53 + 4);
    if ((v30 & 0x20) != 0)
      v30 = *((_DWORD *)v53 + 8);
    v31 = v29 & (v30 >> 8);
    v32 = *(WTF::StringImpl **)(v28 + 16 * v31);
    if (v32 != v53)
    {
      v33 = 1;
      while (v32)
      {
        v31 = ((_DWORD)v31 + v33) & v29;
        v32 = *(WTF::StringImpl **)(v28 + 16 * v31);
        ++v33;
        if (v32 == v53)
          goto LABEL_35;
      }
      goto LABEL_34;
    }
  }
  else
  {
    if (v24 == &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
    {
      v34 = *(uint64_t **)(*(_QWORD *)(a2 + 16) + 16);
      v26 = v53;
      if (!v34)
        goto LABEL_36;
      v28 = *v34;
      if (!v28)
        goto LABEL_36;
      v35 = *(_DWORD *)(v28 - 8);
      v36 = *((_DWORD *)v53 + 4);
      if ((v36 & 0x20) != 0)
        v36 = *((_DWORD *)v53 + 8);
      v31 = v35 & (v36 >> 8);
      v37 = *(WTF::StringImpl **)(v28 + 16 * v31);
      if (v37 == v53)
        goto LABEL_35;
      v38 = 1;
      while (v37)
      {
        v31 = ((_DWORD)v31 + v38) & v35;
        v37 = *(WTF::StringImpl **)(v28 + 16 * v31);
        ++v38;
        if (v37 == v53)
          goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (v24 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info)
    {
      v25 = 0;
      v26 = v53;
      goto LABEL_37;
    }
    v39 = *(uint64_t **)(*(_QWORD *)(a2 + 24) + 16);
    v26 = v53;
    if (!v39)
      goto LABEL_36;
    v28 = *v39;
    if (!v28)
      goto LABEL_36;
    v40 = *(_DWORD *)(v28 - 8);
    v41 = *((_DWORD *)v53 + 4);
    if ((v41 & 0x20) != 0)
      v41 = *((_DWORD *)v53 + 8);
    v31 = v40 & (v41 >> 8);
    v42 = *(WTF::StringImpl **)(v28 + 16 * v31);
    if (v42 != v53)
    {
      v43 = 1;
      while (v42)
      {
        v31 = ((_DWORD)v31 + v43) & v40;
        v42 = *(WTF::StringImpl **)(v28 + 16 * v31);
        ++v43;
        if (v42 == v53)
          goto LABEL_35;
      }
LABEL_34:
      v31 = *(unsigned int *)(v28 - 4);
    }
  }
LABEL_35:
  if (v31 == *(_DWORD *)(v28 - 4))
  {
LABEL_36:
    v25 = 0;
    goto LABEL_37;
  }
  v25 = *(_QWORD *)(v28 + 16 * v31 + 8);
LABEL_37:
  v53 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v54, v17, v18, v19, v20, v21, v22, v23);
  return v25;
}

uint64_t JSObjectSetPrivateProperty(uint64_t a1, unint64_t a2, OpaqueJSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  WTF::StringImpl ***v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl **v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  WTF::StringImpl *v63;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unsigned int *v82;

  v12 = *(JSC::VM **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v82, v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  OpaqueJSString::identifier(a3, v12, v13, v14, v15, v16, v17, (int **)&v81);
  if (*(_BYTE *)(a2 + 5) == 32)
    a2 = *(_QWORD *)(a2 + 16);
  v25 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v25 == &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
  {
    v27 = a2 + 3296;
  }
  else if (v25 == &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
  {
    v27 = a2 + 16;
  }
  else
  {
    if (v25 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info)
    {
      v26 = 0;
      goto LABEL_69;
    }
    v27 = a2 + 24;
  }
  v28 = *(_QWORD *)v27;
  v29 = *(unsigned __int8 **)(*(_QWORD *)v27 + 16);
  if (!v29)
  {
    v30 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    v32 = *(WTF::StringImpl ****)(v28 + 16);
    *(_QWORD *)(v28 + 16) = v30;
    if (v32)
    {
      v33 = *v32;
      if (*v32)
      {
        v34 = *((unsigned int *)v33 - 1);
        if ((_DWORD)v34)
        {
          v35 = *v32;
          do
          {
            v36 = *v35;
            if (*v35 != (WTF::StringImpl *)-1)
            {
              *v35 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::~StringImpl(v36, v18, v31, v20, v21, v22, v23, v24);
                  WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
            }
            v35 += 2;
            --v34;
          }
          while (v34);
        }
        WTF::fastFree((unint64_t)(v33 - 2), v18, v31, v20, v21, v22, v23, v24);
      }
      WTF::fastFree((unint64_t)v32, v18, v31, v20, v21, v22, v23, v24);
      v29 = *(unsigned __int8 **)(v28 + 16);
    }
    else
    {
      v29 = v30;
    }
  }
  v45 = v29 + 8;
  if (__ldaxr(v29 + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v45))
  {
    goto LABEL_29;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v29 + 8));
LABEL_29:
  v47 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v48 = *(_QWORD *)v29;
  if (*(_QWORD *)v29
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)v29, 8u, 0), (v48 = *(_QWORD *)v29) != 0))
  {
    v49 = *(_DWORD *)(v48 - 8);
  }
  else
  {
    v49 = 0;
  }
  v50 = *((_DWORD *)v47 + 4);
  if ((v50 & 0x20) != 0)
    v50 = *((_DWORD *)v47 + 8);
  v51 = v49 & (v50 >> 8);
  v19 = (WTF::StringImpl **)(v48 + 16 * v51);
  v52 = *v19;
  if (!*v19)
  {
LABEL_44:
    *v19 = v47;
    v19[1] = 0;
    v55 = *(_QWORD *)v29;
    if (*(_QWORD *)v29)
      v56 = *(_DWORD *)(v55 - 12) + 1;
    else
      v56 = 1;
    *(_DWORD *)(v55 - 12) = v56;
    v57 = *(_QWORD *)v29;
    if (*(_QWORD *)v29)
      v58 = *(_DWORD *)(v57 - 12);
    else
      v58 = 0;
    v59 = (*(_DWORD *)(v57 - 16) + v58);
    v60 = *(unsigned int *)(v57 - 4);
    if (v60 > 0x400)
    {
      if (v60 > 2 * v59)
        goto LABEL_57;
    }
    else
    {
      if (3 * v60 > 4 * v59)
      {
LABEL_57:
        v47 = 0;
        goto LABEL_58;
      }
      if (!(_DWORD)v60)
      {
        v61 = 8;
        goto LABEL_56;
      }
    }
    v61 = (_DWORD)v60 << (6 * *(_DWORD *)(v57 - 12) >= (2 * v60));
LABEL_56:
    v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)v29, v61, v19);
    goto LABEL_57;
  }
  v53 = 0;
  v54 = 1;
  while (v52 != v47)
  {
    if (v52 == (WTF::StringImpl *)-1)
      v53 = v19;
    v51 = (v51 + v54) & v49;
    v19 = (WTF::StringImpl **)(v48 + 16 * v51);
    v52 = *v19;
    ++v54;
    if (!*v19)
    {
      if (v53)
      {
        *v53 = 0;
        v53[1] = 0;
        --*(_DWORD *)(*(_QWORD *)v29 - 16);
        v19 = v53;
      }
      goto LABEL_44;
    }
  }
LABEL_58:
  v19[1] = (WTF::StringImpl *)a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, a2);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v18, (uint64_t)v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v62 = __ldxr(v45);
  if (v62 == 1)
  {
    if (!__stlxr(0, v45))
      goto LABEL_68;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29 + 8, 0, (uint64_t)v19, v20, v21, v22, v23, v24);
LABEL_68:
  v26 = 1;
LABEL_69:
  v63 = v81;
  v81 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v18, (uint64_t)v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v82, v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  return v26;
}

uint64_t JSObjectDeletePrivateProperty(uint64_t a1, uint64_t a2, OpaqueJSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned int *v42;

  v11 = *(JSC::VM **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v42, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  OpaqueJSString::identifier(a3, v11, v12, v13, v14, v15, v16, (int **)&v41);
  if (*(_BYTE *)(a2 + 5) == 32)
    a2 = *(_QWORD *)(a2 + 16);
  v24 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v24 == &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
  {
    v26 = *(_QWORD *)(a2 + 3296);
  }
  else if (v24 == &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
  {
    v26 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    if (v24 != &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info)
    {
      v25 = 0;
      goto LABEL_21;
    }
    v26 = *(_QWORD *)(a2 + 24);
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
    goto LABEL_20;
  v28 = (unsigned __int8 *)(v27 + 8);
  if (__ldaxr((unsigned __int8 *)(v27 + 8)))
  {
    __clrex();
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v27 + 8);
    goto LABEL_15;
  }
  if (__stxr(1u, v28))
    goto LABEL_14;
LABEL_15:
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>((uint64_t *)v27, v41, v18, v19, v20, v21, v22, v23);
  v30 = __ldxr(v28);
  if (v30 == 1)
  {
    if (!__stlxr(0, v28))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v27 + 8), 0, v18, v19, v20, v21, v22, v23);
LABEL_20:
  v25 = 1;
LABEL_21:
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v42, v17, v18, v19, v20, v21, v22, v23);
  return v25;
}

BOOL JSObjectIsFunction(JSContextRef ctx, JSObjectRef object)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSObjectRef v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v19;
  _QWORD v20[3];

  v9 = object;
  if (object)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, *((JSC::VM **)ctx + 7), v2, v3, v4, v5, v6, v7, v8);
    v17 = *((unsigned __int8 *)v9 + 5);
    if (v17 >= 0x17)
    {
      if ((v17 & 0xFE) == 0x1A)
      {
        LOBYTE(v9) = 1;
        goto LABEL_6;
      }
      if ((*((_BYTE *)v9 + 6) & 4) != 0)
      {
        (*(void (**)(_QWORD *__return_ptr, JSObjectRef))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x38))(v20, v9);
        LOBYTE(v9) = LOBYTE(v20[0]) != 0;
        goto LABEL_6;
      }
    }
    LOBYTE(v9) = 0;
LABEL_6:
    JSC::JSLockHolder::~JSLockHolder(&v19, v10, v11, v12, v13, v14, v15, v16);
  }
  return (char)v9;
}

JSValueRef JSObjectCallAsFunction(JSContextRef ctx, JSObjectRef object, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  const JSValueRef *__attribute__((__org_arrdim(0,0))) v10;
  size_t v11;
  JSObjectRef v12;
  unsigned int *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSValueRef *v30;
  const OpaqueJSValue *v31;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  int v46;
  char v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD v50[4];
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;

  v10 = arguments;
  v11 = argumentCount;
  v12 = thisObject;
  v15 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v53, (JSC::VM *)v15, (uint64_t)thisObject, argumentCount, (uint64_t)arguments, (uint64_t)exception, v6, v7, v8);
  v52 = v15;
  if (!object)
  {
    v31 = 0;
    goto LABEL_14;
  }
  if (!v12)
    v12 = (JSObjectRef)*((_QWORD *)ctx + 8);
  v47 = 0;
  v48 = 0x800000000;
  v49 = (_OWORD *)((char *)v50 + 8);
  memset(v50, 0, sizeof(v50));
  v51 = 0;
  if (v11 < 9)
  {
    if (v11)
      goto LABEL_20;
    goto LABEL_6;
  }
  if (v11 >> 31 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v48, v11))
    v47 = 1;
  do
  {
LABEL_20:
    if (*v10)
      v33 = (uint64_t)*v10;
    else
      v33 = 2;
    v34 = v48;
    if ((_DWORD)v48 == HIDWORD(v48))
    {
      if (v48 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v48, 2 * (int)v48))
      {
        v47 = 1;
        goto LABEL_30;
      }
      v34 = v48;
    }
    else if (v49 == (_OWORD *)((char *)v50 + 8) || v49 == 0)
    {
      *((_QWORD *)v49 + v48) = v33;
      LODWORD(v48) = v34 + 1;
      goto LABEL_30;
    }
    *((_QWORD *)v49 + v34) = v33;
    LODWORD(v48) = v34 + 1;
    if (!*(_QWORD *)&v50[0] && (v33 & 0xFFFE000000000002) == 0 && v33 != 0)
    {
      v37 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v33 & 8) != 0)
        v37 = (_QWORD *)(v33 - 16);
      *(_QWORD *)&v50[0] = *v37 + 560;
      v45 = &v48;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v50[0], (uint64_t *)&v45, v18, v19, v20, v21, v22, (uint64_t)&v54);
    }
LABEL_30:
    ++v10;
    --v11;
  }
  while (v11);
  if (v47)
  {
    v54 = v15;
    JSC::throwOutOfMemoryError(ctx, (JSC::JSGlobalObject *)&v54);
    handleExceptionIfNeeded((uint64_t *)&v52, (Inspector::JSGlobalObjectInspectorController **)ctx, exception, v38, v39, v40, v41, v42);
    goto LABEL_17;
  }
LABEL_6:
  if (*((_BYTE *)object + 5) == 26)
  {
    v23 = *((_QWORD *)object + 3);
    if ((v23 & 1) != 0)
      v23 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v23 + 5) == 8)
    {
      LOBYTE(v54) = 1;
      v55 = *(_QWORD *)(v23 + 40);
      LOBYTE(v56) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v54) = 2;
      v24 = *((_QWORD *)object + 2);
      v55 = v23;
      v56 = v24;
    }
  }
  else
  {
    (*(void (**)(unsigned int **__return_ptr, JSObjectRef))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(&v54, object);
    if (!(_BYTE)v54)
      goto LABEL_17;
  }
  v45 = (uint64_t *)v49;
  v46 = v48;
  v25 = JSC::profiledCall(ctx, 0, (uint64_t)object, (const WTF::StringImpl *)&v54, (uint64_t)v12, (uint64_t)&v45, v21, v22);
  v30 = (JSValueRef *)*((_QWORD *)v15 + 2);
  if (v30)
  {
    if (exception)
      *exception = v30[1];
    *((_QWORD *)v15 + 2) = 0;
    v43 = v15 + 20;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 & 0xFFFFFFEF, v43));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v30, v27, v28, v29, v21, v22);
LABEL_17:
    v31 = 0;
  }
  else
  {
    v31 = (const OpaqueJSValue *)v25;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v48, v26, (uint64_t)v30, v27, v28, v29, v21, v22);
LABEL_14:
  JSC::JSLockHolder::~JSLockHolder(&v53, v16, v17, v18, v19, v20, v21, v22);
  return v31;
}

BOOL JSObjectIsConstructor(JSContextRef ctx, JSObjectRef object)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;
  _QWORD v19[3];

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, *((JSC::VM **)ctx + 7), v2, v3, v4, v5, v6, v7, v8);
  if (object)
  {
    if (*((unsigned __int8 *)object + 5) < 0x17u)
    {
      LOBYTE(object) = 0;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, JSObjectRef))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x40))(v19, object);
      LOBYTE(object) = LOBYTE(v19[0]) != 0;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
  return (char)object;
}

JSObjectRef JSObjectCallAsConstructor(JSContextRef ctx, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const JSValueRef *__attribute__((__org_arrdim(0,0))) v10;
  size_t v11;
  unsigned int *v14;
  JSC::JSCell *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  JSContextRef v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSValueRef *v37;
  unint64_t OutOfMemoryError;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  JSC::Exception *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD v61[4];
  uint64_t v62;
  uint64_t v63[3];
  unsigned int *v64;
  _OWORD *v65;
  int v66;
  uint64_t *v67;

  v10 = arguments;
  v11 = argumentCount;
  v14 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v64, (JSC::VM *)v14, argumentCount, (uint64_t)arguments, (uint64_t)exception, v5, v6, v7, v8);
  if (!object)
    goto LABEL_44;
  if (((unint64_t)object & 0xFFFE000000000002) != 0)
    goto LABEL_9;
  if (*((_BYTE *)object + 5) == 26)
    JSC::JSFunction::getConstructData(v63, (uint64_t *)object, v15);
  else
    (*(void (**)(uint64_t *__return_ptr, JSObjectRef))(16
                                                               * *(unsigned int *)(16
                                                                                 * (*(_DWORD *)object & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v63, object);
  if (!LOBYTE(v63[0]))
  {
LABEL_9:
    object = 0;
    goto LABEL_44;
  }
  v58 = 0;
  v59 = 0x800000000;
  v60 = (_OWORD *)((char *)v61 + 8);
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  if (v11 < 9)
  {
    if (v11)
      goto LABEL_26;
LABEL_38:
    v65 = v60;
    v66 = v59;
    v27 = *((_QWORD *)ctx + 7);
    v28 = *(_QWORD *)(v27 + 90568);
    v29 = ctx;
    if (!v28 || (v29 = *(JSContextRef *)(v28 + 8)) != 0)
    {
      v30 = *((_QWORD *)v29 + 252);
      if (v30)
      {
        v51 = *(_QWORD *)(v30 + 208);
        if (v51)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51))
          {
            v52 = (*(double (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v29 + 252) + 208) + 24))(*(_QWORD *)(*((_QWORD *)v29 + 252) + 208));
            object = (JSObjectRef)JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)ctx + 7) + 90560), object, (unsigned __int8 *)v63, (uint64_t)&v65, object, v53, v54, v55);
            v56 = *((_QWORD *)v29 + 252);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 208);
              if (v57)
                (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v57 + 32))(v57, 0, v52);
            }
LABEL_42:
            v37 = (JSValueRef *)*((_QWORD *)v14 + 2);
            if (v37)
            {
              if (exception)
                *exception = v37[1];
              *((_QWORD *)v14 + 2) = 0;
              v49 = v14 + 20;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 & 0xFFFFFFEF, v49));
              goto LABEL_57;
            }
            goto LABEL_43;
          }
          v27 = *((_QWORD *)ctx + 7);
        }
      }
    }
    object = (JSObjectRef)JSC::Interpreter::executeConstruct((JSC::VM *)(v27 + 90560), object, (unsigned __int8 *)v63, (uint64_t)&v65, object, v19, v20, v21);
    goto LABEL_42;
  }
  if (v11 >> 31 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v59, v11))
    v58 = 1;
  do
  {
LABEL_26:
    if (*v10)
      v25 = (uint64_t)*v10;
    else
      v25 = 2;
    v22 = v59;
    if ((_DWORD)v59 == HIDWORD(v59))
    {
      if (v59 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v59, 2 * (int)v59))
      {
        v58 = 1;
        goto LABEL_36;
      }
      v22 = v59;
    }
    else if (v60 == (_OWORD *)((char *)v61 + 8) || v60 == 0)
    {
      *((_QWORD *)v60 + v59) = v25;
      LODWORD(v59) = v22 + 1;
      goto LABEL_36;
    }
    *((_QWORD *)v60 + v22) = v25;
    LODWORD(v59) = v22 + 1;
    if (!*(_QWORD *)&v61[0] && (v25 & 0xFFFE000000000002) == 0 && v25 != 0)
    {
      v24 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v25 & 8) != 0)
        v24 = (_QWORD *)(v25 - 16);
      *(_QWORD *)&v61[0] = *v24 + 560;
      v67 = &v59;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v61[0], (uint64_t *)&v67, v17, v18, v19, v20, v21, (uint64_t)&v65);
    }
LABEL_36:
    ++v10;
    --v11;
  }
  while (v11);
  if (!v58)
    goto LABEL_38;
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)ctx, v15);
  v46 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v46 = (JSC::Exception *)JSC::Exception::create((uint64_t)v14, (JSC::VM *)OutOfMemoryError, 0, v40, v41, v42, v43, v44);
  }
  JSC::VM::throwException((JSC::VM *)v14, ctx, v46, v45, v40, v41, v42, v43, v44);
  v37 = (JSValueRef *)*((_QWORD *)v14 + 2);
  if (v37)
  {
    if (exception)
      *exception = v37[1];
    *((_QWORD *)v14 + 2) = 0;
    v47 = v14 + 20;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 & 0xFFFFFFEF, v47));
LABEL_57:
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v37, v32, v33, v34, v35, v36);
  }
  object = 0;
LABEL_43:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v59, v31, (uint64_t)v37, v32, v33, v34, v35, v36);
LABEL_44:
  JSC::JSLockHolder::~JSLockHolder(&v64, v15, v16, v17, v18, v19, v20, v21);
  return object;
}

JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int ***v13;
  WTF *v14;
  JSPropertyNameArrayRef result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int **v33;
  WTF *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  unsigned int *v53;

  if (!ctx)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v53, ctx, v2, v3, v4, v5, v6, v7, v8);
  v11 = *((_QWORD *)ctx + 7);
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 16) = 0;
  v13 = (unsigned int ***)(v12 + 16);
  *(_QWORD *)(v12 + 24) = 0;
  v14 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v14 = 1;
  *((_QWORD *)v14 + 1) = (char *)v14 + 24;
  *((_QWORD *)v14 + 2) = 20;
  v49 = v14;
  v50 = 0;
  v51 = v11;
  v52 = 258;
  result = (JSPropertyNameArrayRef)JSC::JSObject::getPropertyNames((uint64_t)object, (unint64_t)ctx, (uint64_t)&v49, 1);
  v23 = *((unsigned int *)v49 + 5);
  if (!(_DWORD)v23)
  {
    v31 = 0;
    v24 = 0;
LABEL_10:
    v32 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v32)
      WTF::VectorTypeOperations<WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>>::destruct(*v13, &(*v13)[v32], v17, v18, v19, v20, v21, v22);
    v33 = *v13;
    if (*v13)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      WTF::fastFree((unint64_t)v33, v16, v17, v18, v19, v20, v21, v22);
    }
    *(_QWORD *)(v12 + 16) = v24;
    *(_DWORD *)(v12 + 24) = v23;
    *(_DWORD *)(v12 + 28) = v31;
    ++*(_DWORD *)v12;
    if (v50)
      WTF::fastFree(v50 - 16, v16, v17, v18, v19, v20, v21, v22);
    v34 = v49;
    v49 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        v35 = *((unsigned int *)v34 + 5);
        if ((_DWORD)v35)
        {
          v36 = (WTF::StringImpl **)*((_QWORD *)v34 + 1);
          v37 = 8 * v35;
          do
          {
            v38 = *v36;
            *v36 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
              {
                WTF::StringImpl::~StringImpl(v38, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
              }
              else
              {
                *(_DWORD *)v38 -= 2;
              }
            }
            ++v36;
            v37 -= 8;
          }
          while (v37);
        }
        v47 = *((_QWORD *)v34 + 1);
        if ((WTF *)((char *)v34 + 24) != (WTF *)v47 && v47 != 0)
        {
          *((_QWORD *)v34 + 1) = 0;
          *((_DWORD *)v34 + 4) = 0;
          WTF::fastFree(v47, v16, v17, v18, v19, v20, v21, v22);
        }
        WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v53, v16, v17, v18, v19, v20, v21, v22);
    return (JSPropertyNameArrayRef)v12;
  }
  if (!(v23 >> 29))
  {
    v24 = WTF::fastMalloc((WTF *)(8 * v23));
    v25 = *((unsigned int *)v49 + 5);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = (_DWORD *)*((_QWORD *)v49 + 1);
      v28 = 8 * v25;
      do
      {
        if (*(_QWORD *)v27)
        {
          v29 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v29 = 1;
          WTF::String::isolatedCopy(v27, (uint64_t *)(v29 + 8));
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              v30 = 0;
            else
              v30 = *(_QWORD *)(v30 + 8);
          }
          *(_QWORD *)(v29 + 16) = v30;
        }
        else
        {
          v29 = 0;
        }
        v31 = v26 + 1;
        *(_QWORD *)(v24 + 8 * v26) = v29;
        v27 += 2;
        ++v26;
        v28 -= 8;
      }
      while (v28);
    }
    else
    {
      v31 = 0;
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

JSPropertyNameArrayRef JSPropertyNameArrayRetain(JSPropertyNameArrayRef array)
{
  ++*(_DWORD *)array;
  return array;
}

void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;

  if ((*(_DWORD *)array)-- == 1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v39, *((JSC::VM **)array + 1), v1, v2, v3, v4, v5, v6, v7);
    v17 = *((unsigned int *)array + 7);
    if ((_DWORD)v17)
    {
      v26 = (unsigned int **)*((_QWORD *)array + 2);
      v27 = &v26[v17];
      do
      {
        v28 = *v26;
        *v26 = 0;
        if (v28)
        {
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v28, v10, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
        }
        ++v26;
      }
      while (v26 != v27);
    }
    v18 = *((_QWORD *)array + 2);
    if (v18)
    {
      *((_QWORD *)array + 2) = 0;
      *((_DWORD *)array + 6) = 0;
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
    }
    WTF::fastFree((unint64_t)array, v10, v11, v12, v13, v14, v15, v16);
    JSC::JSLockHolder::~JSLockHolder(&v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array)
{
  return *((unsigned int *)array + 7);
}

JSStringRef JSPropertyNameArrayGetNameAtIndex(JSStringRef array, size_t index)
{
  if (index < (unint64_t)*((unsigned int *)array + 7))
    return *(JSStringRef *)(*((_QWORD *)array + 2) + 8 * index);
  __break(0xC471u);
  return array;
}

void JSPropertyNameAccumulatorAddName(JSPropertyNameAccumulatorRef accumulator, JSStringRef propertyName)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unsigned int *v66;
  WTF::StringImpl *v67[2];
  char v68;
  uint64_t v69;
  WTF::StringImpl *v70;

  v11 = (JSC::VM *)*((_QWORD *)accumulator + 2);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v66, v11, v2, v3, v4, v5, v6, v7, v8);
  OpaqueJSString::identifier(propertyName, v11, v12, v13, v14, v15, v16, (int **)&v65);
  v24 = v65;
  v70 = v65;
  v25 = *((_DWORD *)v65 + 4);
  if ((v25 & 0x20) != 0)
  {
    if ((*((_BYTE *)accumulator + 24) & 1) == 0 || *((_BYTE *)accumulator + 25) && (*((_BYTE *)v65 + 36) & 4) != 0)
      goto LABEL_22;
  }
  else if ((*((_BYTE *)accumulator + 24) & 2) == 0)
  {
    goto LABEL_22;
  }
  v26 = *(_QWORD *)accumulator;
  v27 = *(unsigned int *)(*(_QWORD *)accumulator + 20);
  if (v27 <= 0x13)
  {
    if (!(_DWORD)v27)
    {
LABEL_14:
      if ((v25 & 0x20) != 0)
      {
        v33 = *(_DWORD *)v24 + 2;
      }
      else
      {
        if ((v25 & 0x10) != 0)
        {
          *(_DWORD *)v24 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)accumulator + 2) + 41912), (unint64_t)v24, v18, v19, v20, v21, v22, v23, v67);
          v24 = v67[0];
        }
        v33 = *(_DWORD *)v24;
        *(_DWORD *)v24 += 2;
        if (!v33)
        {
          WTF::StringImpl::~StringImpl(v24, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
LABEL_20:
          v67[0] = v24;
          v34 = *(unsigned int *)(v26 + 20);
          if ((_DWORD)v34 == *(_DWORD *)(v26 + 16))
          {
            v52 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 8, v34 + 1, (unint64_t)v67);
            v53 = *(unsigned int *)(v26 + 20);
            v54 = *(_QWORD *)(v26 + 8);
            v55 = *v52;
            *v52 = 0;
            *(_QWORD *)(v54 + 8 * v53) = v55;
            v56 = v67[0];
            *(_DWORD *)(v26 + 20) = v53 + 1;
            v67[0] = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
              {
                WTF::StringImpl::~StringImpl(v56, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
              }
              else
              {
                *(_DWORD *)v56 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v34) = v24;
            *(_DWORD *)(v26 + 20) = v34 + 1;
          }
          goto LABEL_22;
        }
      }
      *(_DWORD *)v24 = v33;
      goto LABEL_20;
    }
    v32 = *(WTF::StringImpl ***)(v26 + 8);
    while (*v32 != v65)
    {
      ++v32;
      if (!--v27)
        goto LABEL_14;
    }
  }
  else
  {
    v28 = *((_QWORD *)accumulator + 1);
    if (!v28 || !*(_DWORD *)(v28 - 12))
    {
      v29 = *(uint64_t **)(v26 + 8);
      v30 = 8 * v27;
      do
      {
        v31 = *v29++;
        v69 = v31;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)accumulator + 1, &v69, v19, v20, v21, v22, v23, (uint64_t)v67);
        v30 -= 8;
      }
      while (v30);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)accumulator + 1, (uint64_t *)&v70, v19, v20, v21, v22, v23, (uint64_t)v67);
    if (v68)
    {
      v24 = v70;
      v26 = *(_QWORD *)accumulator;
      v25 = *((_DWORD *)v70 + 4);
      goto LABEL_14;
    }
  }
LABEL_22:
  v35 = v65;
  v65 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v66, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
}

uint64_t JSObjectGetProxyTarget(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::VM **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v20;

  v9 = a1;
  if (a1)
  {
    v10 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v10 = (JSC::VM **)(a1 - 16);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, *v10, a4, a5, a6, a7, a8, a9, a2);
    v18 = *(unsigned __int8 *)(v9 + 5);
    if (v18 == 61 || v18 == 32)
      v9 = *(_QWORD *)(v9 + 16);
    else
      v9 = 0;
    JSC::JSLockHolder::~JSLockHolder(&v20, v11, v12, v13, v14, v15, v16, v17);
  }
  return v9;
}

_DWORD *JSObjectGetGlobalContext(_DWORD *result)
{
  if (result)
    return *(_DWORD **)(16 * (*result & 0xFFFFFFFE) + 0x28);
  return result;
}

uint64_t JSScriptCreateReferencingImmortalASCIIText(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6, int *a7, uint64_t a8, double a9)
{
  int v13;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  WTF::StringImpl *v26;
  int *v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  BOOL v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  int v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  int v106;
  int v107;
  uint64_t v108;
  WTF::StringImpl *v109[5];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  int v115;
  __int16 v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118[5];
  unsigned int *v119;

  v13 = a3;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v119, a1, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
  if (!a5)
  {
LABEL_5:
    if (v13 <= 1)
      v13 = 1;
    if (a2)
    {
      memset(v109, 0, sizeof(v109));
      WTF::String::isolatedCopy((_DWORD *)(a2 + 8), (uint64_t *)&v105);
      WTF::URL::URL((uint64_t)v118, (uint64_t)v109, &v105, 0, v76, v77, v78, v79);
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
        {
          WTF::StringImpl::~StringImpl(v105, v80, v81, v82, v83, v84, v85, v86);
          WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
        }
        else
        {
          *(_DWORD *)v105 -= 2;
        }
      }
      v87 = v109[0];
      v109[0] = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, v80, v81, v82, v83, v84, v85, v86);
          WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      v26 = v118[0];
      if (v118[0])
      {
        v88 = *(_DWORD *)v118[0];
        *(_DWORD *)v118[0] += 2;
        *(_OWORD *)&v109[1] = *(_OWORD *)&v118[1];
        *(_OWORD *)&v109[3] = *(_OWORD *)&v118[3];
        *(_DWORD *)v26 = v88 + 4;
        goto LABEL_10;
      }
    }
    else
    {
      memset(v118, 0, sizeof(v118));
    }
    v26 = 0;
    *(_OWORD *)&v109[1] = *(_OWORD *)&v118[1];
    *(_OWORD *)&v109[3] = *(_OWORD *)&v118[3];
LABEL_10:
    v109[0] = v26;
    v110 = 0;
    v117 = v26;
    if (a5)
    {
      v27 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v27 = 2;
      v27[1] = a5;
      *((_QWORD *)v27 + 1) = a4;
      v27[4] = 4;
    }
    else
    {
      v27 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v105 = (WTF::StringImpl *)v27;
    v28 = WTF::fastMalloc((WTF *)0x88);
    OpaqueJSScript::OpaqueJSScript((_QWORD *)v28, (uint64_t)a1, (uint64_t)v109, (uint64_t *)&v117, v13, (int **)&v105);
    if (*v27 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *v27 -= 2;
    }
    v36 = v117;
    v117 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    JSC::SourceOrigin::~SourceOrigin((JSC::SourceOrigin *)v109, v29, v30, v31, v32, v33, v34, v35);
    LODWORD(v109[0]) = 0x100000;
    memset(&v109[1], 0, 32);
    v110 = 0;
    v111 = -1;
    v112 = -1;
    v113 = -1;
    v114 = 0;
    v115 = -1;
    v116 = 0;
    ++*(_DWORD *)(v28 + 8);
    v105 = (WTF::StringImpl *)v28;
    v106 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    v108 = 0;
    v107 = v37;
    v38 = parseScript((uint64_t)a1, (uint64_t)&v105, (uint64_t)v109);
    v39 = v105;
    v105 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 8))(v39);
      else
        --*((_DWORD *)v39 + 2);
    }
    if (v38)
    {
      v40 = 0;
    }
    else
    {
      if (a6)
      {
        OpaqueJSString::tryCreate(&v114, (uint64_t *)&v105);
        *a6 = v105;
      }
      if (a7)
        *a7 = v115;
      v40 = (_DWORD *)v28;
      v28 = 0;
    }
    v41 = v114;
    v114 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
    v42 = v118[0];
    v118[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
    goto LABEL_29;
  }
  v23 = a5;
  v24 = (char *)a4;
  while (1)
  {
    v25 = *v24++;
    if (v25 < 0)
      break;
    if (!--v23)
      goto LABEL_5;
  }
  v28 = 0;
LABEL_29:
  JSC::JSLockHolder::~JSLockHolder(&v119, v16, v17, v18, v19, v20, v21, v22);
  return v28;
}

BOOL parseScript(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  JSC::parseRootNode<JSC::ProgramNode>(a1, a2, 0, 0, 0, 0, 12, a3, 0, 0, 0);
  v9 = v11;
  v11 = 0;
  if (v9)
    std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v11, v9, v3, v4, v5, v6, v7, v8);
  return v9 != 0;
}

uint64_t JSScriptCreateFromString(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, int *a6, uint64_t a7, uint64_t a8, double a9)
{
  int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  int v111;
  uint64_t v112;
  WTF::StringImpl *v113[5];
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  int v119;
  __int16 v120;
  WTF::StringImpl *v121;
  _BYTE v122[40];
  unsigned int *v123;

  v12 = a3;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v123, a1, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, a9);
  if (v12 <= 1)
    v12 = 1;
  if (a2)
  {
    memset(v113, 0, sizeof(v113));
    WTF::String::isolatedCopy((_DWORD *)(a2 + 8), (uint64_t *)&v109);
    WTF::URL::URL((uint64_t)v122, (uint64_t)v113, &v109, 0, v15, v16, v17, v18);
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
      {
        WTF::StringImpl::~StringImpl(v109, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
      }
      else
      {
        *(_DWORD *)v109 -= 2;
      }
    }
    v26 = v113[0];
    v113[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    v27 = *(WTF::StringImpl **)v122;
    if (*(_QWORD *)v122)
    {
      **(_DWORD **)v122 += 2;
      v113[0] = v27;
      *(_OWORD *)&v113[1] = *(_OWORD *)&v122[8];
      *(_OWORD *)&v113[3] = *(_OWORD *)&v122[24];
      v114 = 0;
      *(_DWORD *)v27 += 2;
      goto LABEL_14;
    }
  }
  else
  {
    memset(v122, 0, sizeof(v122));
  }
  v27 = 0;
  v113[0] = 0;
  *(_OWORD *)&v113[1] = *(_OWORD *)&v122[8];
  *(_OWORD *)&v113[3] = *(_OWORD *)&v122[24];
  v114 = 0;
LABEL_14:
  v121 = v27;
  WTF::String::isolatedCopy((_DWORD *)(a4 + 8), (uint64_t *)&v109);
  v28 = WTF::fastMalloc((WTF *)0x88);
  OpaqueJSScript::OpaqueJSScript((_QWORD *)v28, (uint64_t)a1, (uint64_t)v113, (uint64_t *)&v121, v12, (int **)&v109);
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v36 = v121;
  v121 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v37 = v114;
  v114 = 0;
  if (v37)
  {
    if (v37[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
    else
      --v37[2];
  }
  v38 = v113[0];
  v113[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  LODWORD(v113[0]) = 0x100000;
  memset(&v113[1], 0, 32);
  v114 = 0;
  v115 = -1;
  v116 = -1;
  v117 = -1;
  v118 = 0;
  v119 = -1;
  v120 = 0;
  ++*(_DWORD *)(v28 + 8);
  v109 = (WTF::StringImpl *)v28;
  v110 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v112 = 0;
  v111 = v39;
  v47 = parseScript((uint64_t)a1, (uint64_t)&v109, (uint64_t)v113);
  v48 = v109;
  v109 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 2) == 1)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v48 + 8))(v48);
      if (v47)
        goto LABEL_30;
      goto LABEL_33;
    }
    --*((_DWORD *)v48 + 2);
  }
  if (v47)
  {
LABEL_30:
    v49 = 0;
    goto LABEL_38;
  }
LABEL_33:
  if (a5)
  {
    OpaqueJSString::tryCreate(&v118, (uint64_t *)&v109);
    *a5 = v109;
  }
  if (a6)
    *a6 = v119;
  v49 = (_DWORD *)v28;
  v28 = 0;
LABEL_38:
  v50 = v118;
  v118 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      if (!v49)
        goto LABEL_42;
      goto LABEL_50;
    }
    *(_DWORD *)v50 -= 2;
  }
  if (!v49)
    goto LABEL_42;
LABEL_50:
  if (v49[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
  else
    --v49[2];
LABEL_42:
  v51 = *(WTF::StringImpl **)v122;
  *(_QWORD *)v122 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v123, v40, v41, v42, v43, v44, v45, v46);
  return v28;
}

void JSScriptRetain(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v17, *(JSC::VM **)(a1 + 120), a4, a5, a6, a7, a8, a9, a2);
  ++*(_DWORD *)(a1 + 8);
  JSC::JSLockHolder::~JSLockHolder(&v17, v10, v11, v12, v13, v14, v15, v16);
}

void JSScriptRelease(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v17, *(JSC::VM **)(a1 + 120), a4, a5, a6, a7, a8, a9, a2);
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
  JSC::JSLockHolder::~JSLockHolder(&v17, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSScriptEvaluate(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  SourceProvider *var0;
  uint64_t result;
  SourceCode v30;
  uint64_t v31;
  unsigned int *v32;

  v10 = a3;
  v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, v13, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(JSC::VM **)(a2 + 120) == v13)
  {
    v31 = 0;
    if (!v10)
      v10 = 10;
    ++*(_DWORD *)(a2 + 8);
    v30.var0.var0 = (SourceProvider *)a2;
    v30.var1 = 0;
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)&v30.var3.var0 = 0;
    v30.var2 = v15;
    v27 = JSC::evaluate(a1, &v30, v10, &v31, v16, v17, v18, v19, v14);
    var0 = v30.var0.var0;
    v30.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 2) == 1)
        (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
      else
        --*((_DWORD *)var0 + 2);
    }
    if (v31)
    {
      v27 = 0;
      if (a4)
        *a4 = *(_QWORD *)(v31 + 8);
    }
    JSC::JSLockHolder::~JSLockHolder(&v32, v20, v21, v22, v23, v24, v25, v26);
    return v27;
  }
  else
  {
    result = 148;
    __break(0xC471u);
  }
  return result;
}

JSStringRef JSStringCreateWithCharacters(const JSChar *chars, size_t numChars)
{
  OpaqueJSString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  JSC::initialize((JSC *)chars);
  v4 = (OpaqueJSString *)WTF::fastMalloc((WTF *)0x18);
  OpaqueJSString::OpaqueJSString((uint64_t)v4, chars, numChars);
  v13 = 0;
  WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::~Ref(&v13, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

unint64_t *WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = atomic_load((unint64_t *)(v9 + 16));
      if (v13)
      {
        v14 = *(_QWORD *)(v9 + 8);
        if (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0 || *(_QWORD *)(v14 + 8) != v13)
        {
          v15 = v9;
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          v9 = v15;
        }
      }
      v16 = *(WTF::StringImpl **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          v25 = v9;
          WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          v9 = v25;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  unint64_t v2;
  size_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  __int16 v18;
  int v19;
  int *v20;
  WTF *v21;
  char *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  _BYTE v35[2055];
  char v36;
  WTF **v37;

  v2 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v2 != -1)
  {
    v32 = (WTF *)&v36;
    v37 = &v32;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  if (!string)
    goto LABEL_28;
  v3 = strlen(string);
  v11 = v3;
  v32 = (WTF *)v35;
  v33 = 1024;
  v34 = v3;
  if (v3 >= 0x401)
  {
    if (v3 >> 31)
    {
      __break(0xC471u);
LABEL_47:
      __break(1u);
LABEL_48:
      JUMPOUT(0x197F59C14);
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(2 * v3));
    v33 = v11;
    v32 = v13;
    v12 = v34;
    v37 = 0;
  }
  else
  {
    v37 = 0;
    if (!v3)
    {
      v12 = 0;
      v14 = 0;
      v24 = 0;
      v19 = 1;
      v13 = (WTF *)v35;
LABEL_20:
      v15 = v12;
      goto LABEL_21;
    }
    v12 = v3;
    v13 = (WTF *)v35;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)string, v11, (unint64_t *)&v37);
    if (v16 == -1)
    {
      v24 = 1;
      goto LABEL_35;
    }
    if (v15 == v12)
    {
      v19 = 0;
      v24 = 2;
      goto LABEL_20;
    }
    if (HIWORD(v16))
      break;
    if (v15 >= v12)
      goto LABEL_47;
    v17 = v15 + 1;
    v18 = v16;
LABEL_13:
    *((_WORD *)v13 + v15) = v18;
    v14 = v16 | v14;
    v15 = v17;
    if ((unint64_t)v37 >= v11)
    {
      v24 = 0;
      v15 = v17;
      goto LABEL_35;
    }
  }
  if (HIWORD(v16) <= 0x10u && v15 + 1 < v12)
  {
    if (v15 >= v12)
      goto LABEL_47;
    *((_WORD *)v13 + v15) = (v16 >> 10) - 10304;
    v18 = v16 & 0x3FF | 0xDC00;
    v17 = v15 + 2;
    ++v15;
    goto LABEL_13;
  }
  v24 = 2;
LABEL_35:
  if (v15 > v12)
    goto LABEL_47;
  v19 = 0;
LABEL_21:
  if (v24)
    goto LABEL_26;
  if (v14 > 0x7F)
  {
    v14 = WTF::fastMalloc((WTF *)0x18);
    OpaqueJSString::OpaqueJSString(v14, v13, v15);
    v37 = 0;
    WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::~Ref((unint64_t *)&v37, v25, v26, v27, v28, v29, v30, v31);
    goto LABEL_26;
  }
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v14 = 1;
  if (v19)
  {
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_25;
  }
  if (v11 >> 31)
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v20 = (int *)WTF::fastCompactMalloc((WTF *)(v11 + 20));
  v23 = (char *)(v20 + 5);
  *v20 = 2;
  v20[1] = v11;
  *((_QWORD *)v20 + 1) = v20 + 5;
  v20[4] = 4;
  if (v11 == 1)
    *v23 = *string;
  else
    memcpy(v23, string, v11);
LABEL_25:
  *(_QWORD *)(v14 + 8) = v20;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_26:
  v21 = v32;
  if (v35 != (_BYTE *)v32 && v32)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree((unint64_t)v21, v4, v5, v6, v7, v8, v9, v10);
  }
  if (v24)
  {
LABEL_28:
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
  }
  return (JSStringRef)v14;
}

uint64_t JSStringCreateWithCharactersNoCopy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  if (a2)
  {
    v5 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
    *v5 = 2;
    v5[1] = a2;
    *((_QWORD *)v5 + 1) = a1;
    v5[4] = 0;
  }
  else
  {
    v5 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v5;
  if ((v5[4] & 4) != 0)
    v7 = 0;
  else
    v7 = *((_QWORD *)v5 + 1);
  *(_QWORD *)(result + 16) = v7;
  return result;
}

JSStringRef JSStringRetain(JSStringRef string)
{
  unsigned int v1;

  do
    v1 = __ldaxr((unsigned int *)string);
  while (__stlxr(v1 + 1, (unsigned int *)string));
  return string;
}

void JSStringRelease(JSStringRef string)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr((unsigned int *)string);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)string));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)string);
    OpaqueJSString::~OpaqueJSString(string, v1, v2, v3, v4, v5, v6, v7);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

size_t JSStringGetLength(size_t string)
{
  uint64_t v1;

  if (string)
  {
    v1 = *(_QWORD *)(string + 8);
    if (v1)
      return *(unsigned int *)(v1 + 4);
    else
      return 0;
  }
  return string;
}

const JSChar *__cdecl JSStringGetCharactersPtr(const JSChar *string)
{
  if (string)
    return (const JSChar *)OpaqueJSString::characters((OpaqueJSString *)string);
  return string;
}

size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
{
  uint64_t v1;

  v1 = *((_QWORD *)string + 1);
  if (v1)
    return (3 * *(_DWORD *)(v1 + 4) + 1);
  else
    return 1;
}

size_t JSStringGetUTF8CString(JSStringRef string, char *buffer, size_t bufferSize)
{
  size_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;

  result = 0;
  if (!string || !buffer || !bufferSize)
    return result;
  v6 = bufferSize - 1;
  v7 = *((_QWORD *)string + 1);
  if (v7)
  {
    v8 = *(unsigned __int8 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) == 0)
    {
      v10 = 0;
      v19 = 0;
      while (1)
      {
        if (v10 >= v9)
        {
LABEL_21:
          if (v6 < v19)
            goto LABEL_35;
          v6 = v19;
          goto LABEL_33;
        }
        v11 = v10 + 1;
        v12 = *(unsigned __int16 *)&v8[2 * v10];
        if (v10 + 1 == v9 || (v12 & 0xFC00) != 0xD800)
        {
          ++v10;
        }
        else
        {
          if (v11 >= v9)
            goto LABEL_35;
          v13 = *(unsigned __int16 *)&v8[2 * v11];
          v14 = (v13 & 0xFC00) == 56320;
          v15 = v13 + (v12 << 10) - 56613888;
          if (v14)
            v10 += 2;
          else
            ++v10;
          if (v14)
            v12 = v15;
        }
        if (v12 >> 11 == 27)
          break;
        if (v19 != v6)
        {
          result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)buffer, v6, &v19, v12);
          if (!(_DWORD)result)
            continue;
        }
        goto LABEL_21;
      }
      if (v6 < v19)
        goto LABEL_35;
      return 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v19 = 0;
  while (1)
  {
    v16 = v19;
    if (!v9)
      break;
    if (v19 == v6)
      goto LABEL_33;
    v17 = *v8++;
    result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)buffer, v6, &v19, v17);
    --v9;
    if ((_DWORD)result)
    {
      v16 = v19;
      break;
    }
  }
  v18 = v6 >= v16;
  v6 = v16;
  if (v18)
  {
LABEL_33:
    buffer[v6] = 0;
    return v6 + 1;
  }
LABEL_35:
  __break(1u);
  return result;
}

BOOL JSStringIsEqual(JSStringRef a, JSStringRef b)
{
  const WTF::StringImpl *v2;
  BOOL result;
  WTF *v5;
  const WTF::StringImpl *v6;

  if (a == b)
    return 1;
  result = 0;
  if (!a || !b)
    return result;
  v5 = (WTF *)*((_QWORD *)a + 1);
  v6 = (const WTF::StringImpl *)*((_QWORD *)b + 1);
  if (v5 == v6)
    return 1;
  result = 0;
  if (v5)
  {
    if (v6)
      return WTF::equal(v5, v6, v2);
  }
  return result;
}

BOOL JSStringIsEqualToUTF8CString(JSStringRef a, const char *b)
{
  OpaqueJSString *v3;
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = JSStringCreateWithUTF8CString(b);
  v11 = (unint64_t)v3;
  v12 = v3 == a;
  if (v3 != a && a && v3)
  {
    v13 = (WTF *)*((_QWORD *)a + 1);
    v4 = *(const WTF::StringImpl **)(v11 + 8);
    if (v13 == v4)
    {
      v12 = 1;
    }
    else
    {
      v12 = 0;
      if (v13 && v4)
        v12 = WTF::equal(v13, v4, v5);
    }
  }
  else if (!v3)
  {
    return v12;
  }
  do
  {
    v14 = __ldaxr((unsigned int *)v11);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v11));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v11);
    v17 = atomic_load((unint64_t *)(v11 + 16));
    if (v17)
    {
      v18 = *(_QWORD *)(v11 + 8);
      if (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0 || *(_QWORD *)(v18 + 8) != v17)
        WTF::fastFree(v17, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
    }
    v19 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    WTF::fastFree(v11, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
  }
  return v12;
}

void WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = a1 + 16 * i;
      v12 = *(WTF::StringImpl **)v11;
      if (*(_QWORD *)v11 != -1)
      {
        v13 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v13)
        {
          v14 = *(unsigned int **)(v13 + 24);
          *(_QWORD *)(v13 + 24) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
            }
          }
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          v12 = *(WTF::StringImpl **)v11;
        }
        *(_QWORD *)v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
    }
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *a1;
  *a1 = a2;
  if (v8)
  {
    v9 = *v8;
    if (*v8)
    {
      v10 = *(unsigned int *)(v9 - 4);
      if ((_DWORD)v10)
      {
        v11 = *v8;
        do
        {
          v12 = *(WTF::StringImpl **)v11;
          if (*(_QWORD *)v11 != -1)
          {
            v13 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = 0;
            if (v13)
            {
              WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
              v12 = *(WTF::StringImpl **)v11;
            }
            *(_QWORD *)v11 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
              {
                WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
              }
              else
              {
                *(_DWORD *)v12 -= 2;
              }
            }
          }
          v11 += 16;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

void WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v12 - 4);
        v25 = 0;
        v26 = v12 + 16 * v24;
        goto LABEL_9;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  *v20 = v15;
  v27 = v20[1];
  v20[1] = 0;
  if (v27)
    std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)(v20 + 1), v27, a3, a4, a5, a6, a7, a8);
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_26;
LABEL_30:
    v20 = WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::expand(a1, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
    v30 = *a1;
    if (*a1)
      v33 = *(unsigned int *)(v30 - 4);
    else
      v33 = 0;
    goto LABEL_26;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_30;
LABEL_26:
  v26 = v30 + 16 * v33;
  v25 = 1;
LABEL_9:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v26;
  *(_BYTE *)(a9 + 16) = v25;
}

unint64_t *std::unique_ptr<JSC::JSGlobalObject::RareData>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t **v13;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        v13 = (unint64_t **)(v11 + 8);
        do
        {
          if (*(v13 - 1) != (unint64_t *)-1)
          {
            a2 = *v13;
            *v13 = 0;
            if (a2)
              std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v13, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
          }
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::JSGlobalObject::RareData>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v11)
      {
        v12 = (void **)(v10 + 8);
        do
        {
          if (*(v12 - 1) != (void *)-1)
          {
            a2 = *v12;
            *v12 = 0;
            if (a2)
              std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v12, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
          }
          v12 += 2;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD *WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (void **)(v11 + 8);
    do
    {
      v26 = (uint64_t)*(v25 - 1);
      if (v26 != -1)
      {
        if (v26)
        {
          v27 = WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::reinsert(*a1, v25 - 1, v16, v17, v18, v19, v20, v21);
          v15 = *v25;
          *v25 = 0;
          if (v15)
            std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v15, v16, v17, v18, v19, v20, v21);
          if (v25 - 1 == (void **)a3)
            v22 = v27;
        }
        else
        {
          v15 = *v25;
          *v25 = 0;
          if (v15)
            std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_17;
  }
  result = 0;
  if (v11)
  {
LABEL_17:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::HashTable<OpaqueJSClass *,WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>>>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashMap<OpaqueJSClass *,std::unique_ptr<OpaqueJSClassContextData>,WTF::DefaultHash<OpaqueJSClass *>,WTF::HashTraits<OpaqueJSClass *>,WTF::HashTraits<std::unique_ptr<OpaqueJSClassContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSClass *>>::reinsert(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  if (a1)
    v9 = *(_DWORD *)(a1 - 8);
  else
    v9 = 0;
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v9 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = 1;
  do
  {
    v15 = v13;
    v16 = *(_QWORD *)(a1 + 16 * v13);
    v13 = (v13 + v14++) & v9;
  }
  while (v16);
  v17 = (_QWORD *)(a1 + 16 * v15);
  v19 = v17 + 1;
  v18 = v17[1];
  v17[1] = 0;
  if (v18)
    std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v19, v18, a3, a4, a5, a6, a7, a8);
  *v17 = *a2;
  v20 = a2[1];
  a2[1] = 0;
  *v19 = v20;
  return v17;
}

void std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100](uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a2)
  {
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(a2 + 24) = 0;
    }
    std::unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(a2 + 16), 0, a3, a4, a5, a6, a7, a8);
    v17 = *(uint64_t **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v17)
    {
      if (*v17)
        WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::deallocateTable(*v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    }
    v18 = *(unsigned int **)a2;
    *(_QWORD *)a2 = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        OpaqueJSClass::~OpaqueJSClass((OpaqueJSClass *)v18, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    WTF::fastFree(a2, v10, v11, v12, v13, v14, v15, v16);
  }
}

void std::make_unique[abi:sn180100]<JSC::SimpleMarkingConstraint,WTF::CString,WTF::CString,JSC::MarkingConstraintExecutorPair,JSC::ConstraintVolatility &,JSC::ConstraintConcurrency>(uint64_t *a1, _DWORD **a2, uint64_t *a3, uint64_t *a4, char *a5, char *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v19 = WTF::fastMalloc((WTF *)0x38);
  v20 = *a2;
  *a2 = 0;
  v21 = *a3;
  *a3 = 0;
  v22 = *a5;
  v23 = *a6;
  *(_QWORD *)v19 = off_1E3590DC0;
  if (v20)
    ++*v20;
  *(_QWORD *)(v19 + 8) = v20;
  *(_QWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 32) = -1;
  *(_BYTE *)(v19 + 36) = v22;
  *(_BYTE *)(v19 + 37) = v23;
  *(_WORD *)(v19 + 38) = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::fastFree((unint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
    else
      --*v20;
  }
  *(_QWORD *)v19 = off_1E3590E28;
  v24 = *a4;
  *a4 = 0;
  *(_QWORD *)(v19 + 40) = v24;
  v25 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(v19 + 48) = v25;
  *a1 = v19;
}

void JSC::MarkedVectorBase::~MarkedVectorBase(JSC::MarkedVectorBase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  JSC::MarkedVectorBase *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::MarkedVectorBase *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;

  v9 = (uint64_t *)*((_QWORD *)this + 2);
  if (v9)
  {
    v12 = *v9;
    if (*v9)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(JSC::MarkedVectorBase **)(v12 + 8 * v17);
      if (v18 != this)
      {
        v25 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v25) & v13;
          v18 = *(JSC::MarkedVectorBase **)(v12 + 8 * v17);
          ++v25;
          if (v18 == this)
            goto LABEL_10;
        }
        v17 = *(unsigned int *)(v12 - 4);
      }
LABEL_10:
      if (v17 != *(_DWORD *)(v12 - 4))
      {
        *(_QWORD *)(v12 + 8 * v17) = -1;
        ++*(_DWORD *)(*v9 - 16);
        v19 = *v9;
        v20 = *v9 ? *(_DWORD *)(v19 - 12) - 1 : -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v9;
        if (*v9)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v9, v23 >> 1, 0, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v10 = (JSC::MarkedVectorBase *)*((_QWORD *)this + 1);
  if (v10 != (JSC::MarkedVectorBase *)((char *)this + 24) && v10 != 0)
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_QWORD *OpaqueJSScript::OpaqueJSScript(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int **a6)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int *v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v28 = 0;
  v27 = (a5 - 1);
  JSC::SourceProvider::SourceProvider((uint64_t)a1, a3, a4, (uint64_t *)&v28, 0, &v27, 0);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  *a1 = off_1E357C9B8;
  a1[15] = a2;
  v17 = *a6;
  if (!*a6)
    v17 = &WTF::StringImpl::s_emptyAtomString;
  *v17 += 2;
  a1[16] = v17;
  return a1;
}

void OpaqueJSScript::~OpaqueJSScript(OpaqueJSScript *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t OpaqueJSScript::hash(OpaqueJSScript *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  v2 = *((_DWORD *)v1 + 4);
  if (v2 < 0x100)
    return WTF::StringImpl::hashSlowCase(v1);
  else
    return v2 >> 8;
}

uint64_t OpaqueJSScript::source(OpaqueJSScript *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 16) + 8);
}

void JSC::parseRootNode<JSC::ProgramNode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  WTF::MonotonicTime *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  int *v23;
  int *v24;
  JSC::VM *v25;
  unint64_t *v26;
  unint64_t *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  WTF::MonotonicTime *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  int v79;
  unsigned int v80;
  double v81;
  const char *v82;
  int v83;
  double v84;
  unsigned int v85;
  unsigned int v86;
  const char *v87;
  _DWORD v88[1822];
  uint64_t v89;
  char v90;
  _QWORD v91[2];

  v11 = (WTF::MonotonicTime *)MEMORY[0x1E0C80A78](a1, a2);
  v13 = v12;
  v15 = v14;
  v83 = v16;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = v11;
  v27 = v26;
  v28 = 0.0;
  if (unk_1ECF4C33E)
    v28 = WTF::MonotonicTime::now(v11);
  v91[0] = 0;
  *v27 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24);
  if ((v29 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v88, v25, v24, v22, v20, v18, v83, v15, 0, 1, 0, 0, 0, 0, a11, 0);
    v90 = a9;
    JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ProgramNode>((uint64_t)v88, v13, (WTF::AtomStringImpl *)v91, 0, 0, 0, 0, v30, (uint64_t *)&v87);
    v37 = v87;
    v87 = 0;
    v38 = *v27;
    *v27 = (unint64_t)v37;
    if (v38)
    {
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)v27, v38, v31, v32, v33, v34, v35, v36);
      v45 = v87;
      v87 = 0;
      if (v45)
        std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v87, (unint64_t)v45, v39, v40, v41, v42, v43, v44);
    }
    if (a10)
    {
      v79 = *(_DWORD *)(v89 + 128);
      *(_QWORD *)a10 = *(_QWORD *)(v89 + 120);
      *(_DWORD *)(a10 + 8) = v79;
    }
    v46 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser(v88);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v88, v25, v24, v22, v20, v18, v83, v15, 0, 1, 0, 0, 0, 0, a11, 0);
    JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ProgramNode>((uint64_t)v88, v13, (WTF::AtomStringImpl *)v91, 0, 0, 0, 0, v63, (uint64_t *)&v87);
    v70 = v87;
    v87 = 0;
    v71 = *v27;
    *v27 = (unint64_t)v70;
    if (v71)
    {
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)v27, v71, v64, v65, v66, v67, v68, v69);
      v78 = v87;
      v87 = 0;
      if (v78)
        std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v87, (unint64_t)v78, v72, v73, v74, v75, v76, v77);
    }
    v46 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser(v88);
  }
  if (byte_1ECF4C340)
  {
    do
      v80 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v80 + 1, &JSC::globalParseCount));
  }
  if (unk_1ECF4C33E)
  {
    v81 = WTF::MonotonicTime::now(v46);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)v88, (const SourceCode *)v24);
    if (*v27)
      v82 = "Parsed #";
    else
      v82 = "Failed to parse #";
    v87 = v82;
    v85 = v88[1];
    v86 = v88[0];
    v84 = (v81 - v28) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>(&v87, &v86, "/#", &v85, " in ", &v84, " ms.", "\n");
  }
  v54 = (WTF::StringImpl *)v91[0];
  v91[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ProgramNode>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::AtomStringImpl *a3@<X2>, uint64_t a4@<X3>, JSC::ExpressionNode *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  _BYTE *v12;
  char v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  WTF::AtomStringImpl *v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  int v123;
  char v124;
  __int128 v125;
  __int128 v126;
  WTF::StringImpl *v127;
  uint64_t v129;
  int v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  int v138;
  __int16 v139;
  WTF::AtomStringImpl *v140;
  WTF::StringImpl *v141;
  char v142[8];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[3];
  uint64_t v146[3];
  __int16 v147;
  int v148;
  int v149;
  __int128 v150;
  WTF::StringImpl *v151;

  v12 = (_BYTE *)(a1 + 7352);
  v13 = *(_BYTE *)(a1 + 7474);
  v151 = 0;
  v150 = *(_OWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 20);
  JSC::Parser<JSC::Lexer<unsigned char>>::parseInner(a1, a3, a4, a5, a7, a6, (uint64_t)a7, a8, (uint64_t)v142);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 7288);
  v24 = *(_DWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 150);
  if (*(_BYTE *)(v23 + 150))
  {
    v22 = *(WTF::StringImpl **)(v23 + 152);
    if (v22)
      *(_DWORD *)v22 += 2;
  }
  v141 = v22;
  *(_QWORD *)(v23 + 184) = 0;
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v27 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v28 = *(_QWORD *)(v23 + 40);
  *(_BYTE *)(v23 + 148) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  if (v28)
    WTF::fastFree(v28, v15, v16, v17, v18, v19, v20, v21);
  if (v27)
    WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
  if (v26)
    WTF::fastFree(v26, v15, v16, v17, v18, v19, v20, v21);
  if (v25 || v149)
  {
    if (v141)
    {
      v112 = &v141;
    }
    else
    {
      if (v149 != 1)
      {
        v129 = std::__throw_bad_variant_access[abi:sn180100]();
        JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ProgramNode>(v129);
        return;
      }
      v112 = (WTF::StringImpl **)v142;
    }
    WTF::String::operator=((unint64_t *)&v151, (WTF::AtomStringImpl *)v112, v16, v17, v18, v19, v20, v21);
    v119 = v149;
    *a9 = 0;
    if (v119)
    {
      if (*v12)
      {
        v120 = *(_QWORD *)(a1 + 7432);
        v121 = *(_OWORD *)(a1 + 7416);
        v134 = *(_OWORD *)(a1 + 7400);
        v135 = v121;
        v122 = *(_OWORD *)(a1 + 7384);
        v132 = *(_OWORD *)(a1 + 7368);
        v133 = v122;
        v136 = v120;
        v137 = 0;
        v138 = -1;
        v139 = 1;
      }
      else
      {
        v123 = *(_DWORD *)(a1 + 7368);
        if (v123 == 20)
        {
          v124 = 3;
        }
        else if ((v123 & 0x200000) != 0)
        {
          if (v123 == 3145741 || v123 == 3145732)
            v124 = 3;
          else
            v124 = 2;
        }
        else
        {
          v124 = 1;
        }
        v125 = *(_OWORD *)(a1 + 7416);
        v134 = *(_OWORD *)(a1 + 7400);
        v135 = v125;
        v136 = *(_QWORD *)(a1 + 7432);
        v126 = *(_OWORD *)(a1 + 7384);
        v132 = *(_OWORD *)(a1 + 7368);
        v133 = v126;
        v127 = v151;
        if (v151)
          *(_DWORD *)v151 += 2;
        v137 = v127;
        v138 = v24;
        LOBYTE(v139) = 4;
        HIBYTE(v139) = v124;
      }
      JSC::ParserError::operator=(a2, (uint64_t)&v132, v113, v114, v115, v116, v117, v118);
      v103 = v137;
      v137 = 0;
      if (!v103)
        goto LABEL_32;
      if (*(_DWORD *)v103 != 2)
      {
        *(_DWORD *)v103 -= 2;
        goto LABEL_32;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *a9 = 0;
  }
  v130 = v14;
  v131 = v13;
  v29 = *(_DWORD **)(a1 + 7288);
  v30 = v29[22];
  v31 = v29[28] - v30;
  LODWORD(v132) = *v29;
  DWORD1(v132) = v31;
  v32 = v29[20] - v30;
  *((_QWORD *)&v132 + 1) = v32;
  v33 = *(_DWORD *)(a1 + 12);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x197F5B474);
  }
  v34 = *(uint64_t **)(a1 + 7224);
  v35 = v32 - v31;
  v36 = *(_QWORD *)a1 + 720 * (v33 - 1);
  v37 = *(_BYTE *)(v36 + 9);
  v38 = *(_BYTE *)(v36 + 32);
  v39 = WTF::fastMalloc((WTF *)0xF0);
  v40 = JSC::ScopeNode::ScopeNode(v39, a1 + 7232, (int *)&v150, (uint64_t)&v132, v34, v143, v145, &v144, v146, v147, v37, v38, v148);
  *(_QWORD *)v40 = off_1E358BA00;
  *(_QWORD *)(v40 + 40) = &unk_1E358BAA0;
  *(_QWORD *)(v40 + 104) = &unk_1E358BAC0;
  *(_DWORD *)(v40 + 232) = v130;
  *(_DWORD *)(v40 + 236) = v35;
  v140 = 0;
  v47 = (WTF::AtomStringImpl *)*a9;
  *a9 = v40;
  if (v47)
  {
    std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)a9, (unint64_t)v47, v41, v42, v43, v44, v45, v46);
    v47 = v140;
    v140 = 0;
    if (v47)
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v140, (unint64_t)v47, v41, v42, v43, v44, v45, v46);
  }
  v48 = (WTF::AtomStringImpl *)*a9;
  v49 = *(uint64_t **)(a1 + 7224);
  v50 = *((_DWORD *)v49 + 4) + 1;
  v51 = *(_QWORD *)(a1 + 7288);
  v52 = *(_DWORD *)(v51 + 88);
  v53 = *(_DWORD *)(v51 + 80) - v52;
  v54 = *(_DWORD *)(v51 + 112) - v52;
  *((_DWORD *)v48 + 7) = *(_DWORD *)v51;
  *((_DWORD *)v48 + 2) = v50;
  *((_DWORD *)v48 + 3) = v53;
  *((_DWORD *)v48 + 4) = v54;
  *((_DWORD *)v48 + 5) = v53;
  if (((1 << v131) & 0x1F8FFF) != 0)
    goto LABEL_32;
  v55 = *v49;
  v56 = *(WTF::StringImpl **)(v51 + 160);
  if (v56)
    *(_DWORD *)v56 += 4;
  v57 = *(WTF::StringImpl **)(v55 + 88);
  *(_QWORD *)(v55 + 88) = v56;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v47, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v47, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  v58 = **(_QWORD **)(a1 + 7224);
  v59 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 7288) + 168);
  if (v59)
    *(_DWORD *)v59 += 4;
  v60 = *(WTF::StringImpl **)(v58 + 96);
  *(_QWORD *)(v58 + 96) = v59;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v47, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  if (!v59)
    goto LABEL_32;
  if (*(_DWORD *)v59 == 2)
  {
    v103 = v59;
LABEL_47:
    WTF::StringImpl::~StringImpl(v103, v47, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    goto LABEL_32;
  }
  *(_DWORD *)v59 -= 2;
LABEL_32:
  v61 = v141;
  v141 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v47, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  if (v149 != -1)
    ((void (*)(__int128 *, char *))off_1E357C9F8[v149])(&v132, v142);
  v62 = v151;
  v151 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v47, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ProgramNode>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::AtomStringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  _BYTE *v12;
  char v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  char v126;
  __int128 v127;
  __int128 v128;
  WTF::StringImpl *v129;
  int v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  int v139;
  __int16 v140;
  WTF::AtomStringImpl *v141;
  WTF::StringImpl *v142;
  char v143[8];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[3];
  uint64_t v147[3];
  __int16 v148;
  int v149;
  int v150;
  __int128 v151;
  WTF::StringImpl *v152;

  v12 = (_BYTE *)(a1 + 7352);
  v13 = *(_BYTE *)(a1 + 7474);
  v152 = 0;
  v151 = *(_OWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 20);
  JSC::Parser<JSC::Lexer<char16_t>>::parseInner(a1, a3, a4, a5, a7, a6, (uint64_t)a7, a8, (uint64_t)v143);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 7288);
  v24 = *(_DWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 150);
  if (*(_BYTE *)(v23 + 150))
  {
    v22 = *(WTF::StringImpl **)(v23 + 152);
    if (v22)
      *(_DWORD *)v22 += 2;
  }
  v142 = v22;
  *(_QWORD *)(v23 + 184) = 0;
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v27 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v28 = *(_QWORD *)(v23 + 40);
  *(_BYTE *)(v23 + 148) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  if (v28)
    WTF::fastFree(v28, v15, v16, v17, v18, v19, v20, v21);
  if (v27)
    WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
  if (v26)
    WTF::fastFree(v26, v15, v16, v17, v18, v19, v20, v21);
  if (v25 || v150)
  {
    if (v142)
    {
      v114 = &v142;
    }
    else
    {
      if (v150 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_74;
      }
      v114 = (WTF::StringImpl **)v143;
    }
    WTF::String::operator=((unint64_t *)&v152, (WTF::AtomStringImpl *)v114, v16, v17, v18, v19, v20, v21);
    v121 = v150;
    *a9 = 0;
    if (v121)
    {
      if (*v12)
      {
        v122 = *(_QWORD *)(a1 + 7432);
        v123 = *(_OWORD *)(a1 + 7416);
        v135 = *(_OWORD *)(a1 + 7400);
        v136 = v123;
        v124 = *(_OWORD *)(a1 + 7384);
        v133 = *(_OWORD *)(a1 + 7368);
        v134 = v124;
        v137 = v122;
        v138 = 0;
        v139 = -1;
        v140 = 1;
      }
      else
      {
        v125 = *(_DWORD *)(a1 + 7368);
        if (v125 == 20)
        {
          v126 = 3;
        }
        else if ((v125 & 0x200000) != 0)
        {
          if (v125 == 3145741 || v125 == 3145732)
            v126 = 3;
          else
            v126 = 2;
        }
        else
        {
          v126 = 1;
        }
        v127 = *(_OWORD *)(a1 + 7416);
        v135 = *(_OWORD *)(a1 + 7400);
        v136 = v127;
        v137 = *(_QWORD *)(a1 + 7432);
        v128 = *(_OWORD *)(a1 + 7384);
        v133 = *(_OWORD *)(a1 + 7368);
        v134 = v128;
        v129 = v152;
        if (v152)
          *(_DWORD *)v152 += 2;
        v138 = v129;
        v139 = v24;
        LOBYTE(v140) = 4;
        HIBYTE(v140) = v126;
      }
      JSC::ParserError::operator=(a2, (uint64_t)&v133, v115, v116, v117, v118, v119, v120);
      v105 = v138;
      v138 = 0;
      if (!v105)
        goto LABEL_32;
      if (*(_DWORD *)v105 != 2)
      {
        *(_DWORD *)v105 -= 2;
        goto LABEL_32;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *a9 = 0;
  }
  v131 = v14;
  v132 = v13;
  v29 = *(unsigned int **)(a1 + 7288);
  v30 = *v29;
  v32 = *((_QWORD *)v29 + 10);
  v31 = *((_QWORD *)v29 + 11);
  v33 = (unint64_t)(*((_QWORD *)v29 + 14) - v31) >> 1;
  *(_QWORD *)&v133 = __PAIR64__(v33, v30);
  v34 = (unint64_t)(v32 - v31) >> 1;
  *((_QWORD *)&v133 + 1) = v34;
  v35 = *(_DWORD *)(a1 + 12);
  if (!v35)
  {
LABEL_74:
    __break(0xC471u);
    return;
  }
  v36 = *(uint64_t **)(a1 + 7224);
  v37 = v34 - v33;
  v38 = *(_QWORD *)a1 + 720 * (v35 - 1);
  v39 = *(_BYTE *)(v38 + 9);
  v40 = *(_BYTE *)(v38 + 32);
  v41 = WTF::fastMalloc((WTF *)0xF0);
  v42 = JSC::ScopeNode::ScopeNode(v41, a1 + 7232, (int *)&v151, (uint64_t)&v133, v36, v144, v146, &v145, v147, v148, v39, v40, v149);
  *(_QWORD *)v42 = off_1E358BA00;
  *(_QWORD *)(v42 + 40) = &unk_1E358BAA0;
  *(_QWORD *)(v42 + 104) = &unk_1E358BAC0;
  *(_DWORD *)(v42 + 232) = v131;
  *(_DWORD *)(v42 + 236) = v37;
  v141 = 0;
  v49 = (WTF::AtomStringImpl *)*a9;
  *a9 = v42;
  if (v49)
  {
    std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)a9, (unint64_t)v49, v43, v44, v45, v46, v47, v48);
    v49 = v141;
    v141 = 0;
    if (v49)
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v141, (unint64_t)v49, v43, v44, v45, v46, v47, v48);
  }
  v50 = (WTF::AtomStringImpl *)*a9;
  v51 = *(uint64_t **)(a1 + 7224);
  v52 = *((_DWORD *)v51 + 4) + 1;
  v53 = *(_QWORD *)(a1 + 7288);
  v54 = *(_QWORD *)(v53 + 88);
  v55 = (unint64_t)(*(_QWORD *)(v53 + 80) - v54) >> 1;
  v56 = (unint64_t)(*(_QWORD *)(v53 + 112) - v54) >> 1;
  *((_DWORD *)v50 + 7) = *(_DWORD *)v53;
  *((_DWORD *)v50 + 2) = v52;
  *((_DWORD *)v50 + 3) = v55;
  *((_DWORD *)v50 + 4) = v56;
  *((_DWORD *)v50 + 5) = v55;
  if (((1 << v132) & 0x1F8FFF) != 0)
    goto LABEL_32;
  v57 = *v51;
  v58 = *(WTF::StringImpl **)(v53 + 160);
  if (v58)
    *(_DWORD *)v58 += 4;
  v59 = *(WTF::StringImpl **)(v57 + 88);
  *(_QWORD *)(v57 + 88) = v58;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v49, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v49, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v60 = **(_QWORD **)(a1 + 7224);
  v61 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 7288) + 168);
  if (v61)
    *(_DWORD *)v61 += 4;
  v62 = *(WTF::StringImpl **)(v60 + 96);
  *(_QWORD *)(v60 + 96) = v61;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v49, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  if (!v61)
    goto LABEL_32;
  if (*(_DWORD *)v61 == 2)
  {
    v105 = v61;
LABEL_47:
    WTF::StringImpl::~StringImpl(v105, v49, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    goto LABEL_32;
  }
  *(_DWORD *)v61 -= 2;
LABEL_32:
  v63 = v142;
  v142 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v49, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  if (v150 != -1)
    ((void (*)(__int128 *, char *))off_1E357CA08[v150])(&v133, v143);
  v64 = v152;
  v152 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v49, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
}

uint64_t JSC::ParserError::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 16) = v10;
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v14 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v15;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6ParserINS8_5LexerIhEEE16ParseInnerResultEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 56), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 32), v9, v10, v11, v12, v13, v14, v15);
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v23, v16, v17, v18, v19, v20, v21, v22);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6ParserINS8_5LexerIhEEE16ParseInnerResultEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100](uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    *(_QWORD *)a2 = off_1E3596CB0;
    *(_QWORD *)(a2 + 40) = &unk_1E3596D50;
    *(_QWORD *)(a2 + 104) = &unk_1E3596D70;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 192), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    *(_QWORD *)(a2 + 104) = &off_1E357CA78;
    v17 = *(_QWORD *)(a2 + 136);
    if (v17)
    {
      *(_QWORD *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 144) = 0;
      WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
    *(_QWORD *)(a2 + 40) = off_1E357CA98;
    JSC::ParserArena::~ParserArena((JSC::ParserArena *)(a2 + 48), v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(a2, v25, v26, v27, v28, v29, v30, v31);
  }
}

void JSC::VariableEnvironmentNode::~VariableEnvironmentNode(JSC::VariableEnvironmentNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironmentNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironmentNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ParserArenaRoot::~ParserArenaRoot(JSC::ParserArenaRoot *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ParserArenaRoot *)((char *)this + 8), a2, a3, a4, a5, a6, a7, a8);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ParserArenaRoot *)((char *)this + 8), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v9, v10, v11, v12, v13, v14, v15);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6ParserINS8_5LexerIDsEEE16ParseInnerResultEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 56), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 32), v9, v10, v11, v12, v13, v14, v15);
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v23, v16, v17, v18, v19, v20, v21, v22);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6ParserINS8_5LexerIDsEEE16ParseInnerResultEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>(const char **a1, unsigned int *a2, const char *a3, unsigned int *a4, const char *a5, double *a6, const char *a7, const char *a8)
{
  unint64_t v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  unsigned int v14;
  int v15;
  WTF::PrintStream *v16;
  unsigned int v17;
  int v18;
  WTF::PrintStream *v19;
  char v26;
  char **v27;
  char *v28;

  v11 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v11 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v12 = WTF::s_file;
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v13, "%s", *a1);
  v14 = *a2;
  v15 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v14 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v14 / 0x3A2F8)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(v14 / 0xF04 - 62 * ((69273667 * (unint64_t)(v14 / 0xF04)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a2 / 0xE17810 - 62 * ((1058 * (*a2 / 0xE17810)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[*a2 / 0x369B13E0uLL];
  WORD2(v28) = (((unint64_t)WTF::integerToSixCharacterHashString::table[*a2 % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[*a2 / 0x3E - 62 * (((138547333 * (unint64_t)(*a2 / 0x3E)) >> 32) >> 1)] << 32)) >> 32;
  LODWORD(v28) = v15;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
  WTF::PrintStream::printf(v16, "%.*s", 6, (const char *)&v28);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
  WTF::PrintStream::printf(v13, "%s", a3);
  v17 = *a4;
  v18 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v17 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v17 / 0x3A2F8)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(v17 / 0xF04 - 62 * ((69273667 * (unint64_t)(v17 / 0xF04)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a4 / 0xE17810 - 62 * ((1058 * (*a4 / 0xE17810)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[*a4 / 0x369B13E0uLL];
  WORD2(v28) = (((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 / 0x3E - 62 * (((138547333 * (unint64_t)(*a4 / 0x3E)) >> 32) >> 1)] << 32)) >> 32;
  LODWORD(v28) = v18;
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
  WTF::PrintStream::printf(v19, "%.*s", 6, (const char *)&v28);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
  WTF::PrintStream::printf(v13, "%s", a5);
  WTF::PrintStream::printf(v13, "%lf", *a6);
  WTF::PrintStream::printf(v13, "%s", a7);
  WTF::PrintStream::printf(v13, "%s", a8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
}

uint64_t OpaqueJSString::OpaqueJSString(uint64_t a1, _WORD *a2, unint64_t a3)
{
  uint64_t v4;

  *(_DWORD *)a1 = 1;
  WTF::String::String((int **)(a1 + 8), a2, a3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      v4 = 0;
    else
      v4 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

unint64_t *std::unique_ptr<StaticValueEntry>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v15 = atomic_load((unint64_t *)(v11 + 16));
        if (v15)
        {
          v16 = *(_QWORD *)(v11 + 8);
          if (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0 || *(_QWORD *)(v16 + 8) != v15)
            WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        v17 = *(WTF::StringImpl **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticValueEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = v10 + 16 * v21;
      v23 = *(WTF::StringImpl **)v22;
      if (*(_QWORD *)v22)
      {
        if (v23 == (WTF::StringImpl *)-1)
          goto LABEL_30;
        v24 = *a1;
        v25 = *a1 ? *(_DWORD *)(v24 - 8) : 0;
        v26 = *((_DWORD *)v23 + 4);
        v27 = v26 < 0x100 ? WTF::StringImpl::hashSlowCase(v23) : v26 >> 8;
        v28 = 0;
        do
        {
          v29 = v27 & v25;
          v27 = ++v28 + v29;
        }
        while (*(_QWORD *)(v24 + 16 * v29));
        v30 = v24 + 16 * v29;
        v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)(v30 + 8) = 0;
        if (v31)
        {
          v32 = *(unsigned int **)(v31 + 24);
          *(_QWORD *)(v31 + 24) = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v32);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v32, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
          }
          WTF::fastFree(v31, v14, v15, v16, v17, v18, v19, v20);
          v35 = *(WTF::StringImpl **)v30;
          *(_QWORD *)v30 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v30 = 0;
        }
        v36 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)v30 = v36;
        v37 = v10 + 16 * v21;
        v38 = *(_QWORD *)(v37 + 8);
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v30 + 8) = v38;
        v39 = *(_QWORD *)(v37 + 8);
        *(_QWORD *)(v37 + 8) = 0;
        if (v39)
        {
          v40 = *(unsigned int **)(v39 + 24);
          *(_QWORD *)(v39 + 24) = 0;
          if (v40)
          {
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              atomic_store(1u, v40);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v40, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            }
          }
          WTF::fastFree(v39, v14, v15, v16, v17, v18, v19, v20);
        }
        v23 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = 0;
        if (!v23)
          goto LABEL_30;
        if (*(_DWORD *)v23 == 2)
        {
LABEL_45:
          WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
          goto LABEL_30;
        }
        *(_DWORD *)v23 -= 2;
      }
      else
      {
        v43 = *(_QWORD *)(v22 + 8);
        *(_QWORD *)(v22 + 8) = 0;
        if (v43)
        {
          v44 = *(unsigned int **)(v43 + 24);
          *(_QWORD *)(v43 + 24) = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v44);
              OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v44, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            }
          }
          WTF::fastFree(v43, v14, v15, v16, v17, v18, v19, v20);
          v23 = *(WTF::StringImpl **)v22;
        }
        *(_QWORD *)v22 = 0;
        if (!v23)
          goto LABEL_30;
        if (*(_DWORD *)v23 == 2)
          goto LABEL_45;
        *(_DWORD *)v23 -= 2;
      }
LABEL_30:
      if (++v21 == v11)
        goto LABEL_47;
    }
  }
  if (v10)
LABEL_47:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF **v16;
  int i;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF **)(v12 + 16 * v18);
    v20 = *v19;
    if (!*v19)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v19 = v16;
      }
      WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::translate<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>((uint64_t)v19, (WTF::AtomStringImpl *)a3, a4, (uint64_t)a4, a5, a6, a7, a8);
      v28 = *a2;
      if (*a2)
        v29 = *(_DWORD *)(v28 - 12) + 1;
      else
        v29 = 1;
      *(_DWORD *)(v28 - 12) = v29;
      v30 = *a2;
      if (*a2)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_19;
      }
      else if (3 * v33 > 4 * v32)
      {
LABEL_19:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v30 + 16 * v33;
        *(_BYTE *)(a1 + 16) = 1;
        return;
      }
      v19 = (WTF **)WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(a2, (uint64_t)v19, v22, v23, v24, v25, v26, v27);
      v30 = *a2;
      if (*a2)
        v33 = *(unsigned int *)(v30 - 4);
      else
        v33 = 0;
      goto LABEL_19;
    }
    if (v20 != (WTF *)-1)
      break;
    v16 = (WTF **)(v12 + 16 * v18);
LABEL_10:
    v15 = i + v18;
  }
  if (!WTF::equal(v20, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_10;
  v34 = *a2;
  if (*a2)
    v35 = *(unsigned int *)(v34 - 4);
  else
    v35 = 0;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v34 + 16 * v35;
  *(_BYTE *)(a1 + 16) = 0;
  v36 = v12 + 16 * v18;
  v37 = *a4;
  *a4 = 0;
  v38 = *(_QWORD *)(v36 + 8);
  *(_QWORD *)(v36 + 8) = v37;
  if (v38)
    WTF::fastFree(v38, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::translate<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *a3;
  *a3 = 0;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
    WTF::fastFree(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (_QWORD *)v11;
    do
    {
      if (*v25)
      {
        if (*v25 != -1)
        {
          v26 = WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::reinsert(*a1, (uint64_t)v25);
          WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair((uint64_t)v25, v27, v28, v29, v30, v31, v32, v33);
          if (v25 == (_QWORD *)a3)
            v22 = v26;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair((uint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_15;
  }
  result = 0;
  if (v11)
  {
LABEL_15:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  WTF::StringImpl *v12;
  uint64_t v13;

  v3 = WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(a1, *(WTF::StringImpl **)a2);
  result = (_QWORD *)WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair(v3, v4, v5, v6, v7, v8, v9, v10);
  v12 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *result = v12;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  result[1] = v13;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<std::unique_ptr<StaticFunctionEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>(uint64_t a1, WTF::StringImpl *this)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)this + 4);
  if (v4 < 0x100)
    v5 = WTF::StringImpl::hashSlowCase(this);
  else
    v5 = v4 >> 8;
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  return a1 + 16 * v7;
}

uint64_t JSC::JSCallbackObject<JSC::JSNonFinalObject>::customToPrimitive(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t result;
  double v24;
  JSC::Exception *v25;
  int v26;
  JSC::Exception *v27;
  JSC::VM *v28;

  v10 = *((_QWORD *)a1 + 7);
  v28 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a2 + 40);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"JSCallbackObject[Symbol.toPrimitive] method called on incompatible |this| value.", 81);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    v12 = 10;
  else
    v12 = *(_QWORD *)(a2 + 48);
  v19 = (JSC::Structure *)JSC::toPreferredPrimitiveType(a1, v12, a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_6;
  v26 = *(_DWORD *)(v10 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_6:
  if ((_DWORD)v19 == 2)
    v20 = 4;
  else
    v20 = 3;
  v21 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
  if (v21)
  {
    while (1)
    {
      v22 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v21 + 104);
      if (v22)
      {
        v27 = 0;
        result = v22(a1, v11, v20, &v27);
        v25 = v27;
        if (v27)
        {
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
          {
            v25 = (JSC::Exception *)JSC::Exception::create(v10, v27, 0, v14, v15, v16, v17, v18);
          }
          return (uint64_t)JSC::VM::throwException((JSC::VM *)v10, a1, v25, v24, v14, v15, v16, v17, v18);
        }
        if (result)
          break;
      }
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_14;
    }
    if ((result & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(result + 5) >= 0x17u)
      return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  else
  {
LABEL_14:
    result = v11;
    return JSC::JSObject::ordinaryToPrimitive((JSC::Structure *)result, a1, v19, v14, v15, v16, v17, v18);
  }
  return result;
}

_QWORD *WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,void (*&)(OpaqueJSContext const*,OpaqueJSValue *)>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>(uint64_t a1, _BYTE *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *result;
  uint64_t v21;
  unsigned int v22;
  _WORD *v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE v26[13];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *a3;
  v12 = 1;
  do
  {
    v13 = v12++;
    v14 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v14);
  if (v12)
    v15 = v13 + 1;
  else
    v15 = -1;
  v16 = __CFADD__(v15, v10);
  v17 = v15 + v10;
  if (v16)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 || (v19 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v21 = 0;
      v22 = *a3;
      *result = (char)*a2;
      do
      {
        v26[v21-- + 12] = (v22 % 0xA) | 0x30;
        v14 = v22 > 9;
        v22 /= 0xAu;
      }
      while (v14);
      if (v21 + 14 <= 13)
      {
        v23 = result + 1;
        do
        {
          *v23++ = *((unsigned __int8 *)&v27 + v21);
          v16 = __CFADD__(v21++, 1);
        }
        while (!v16);
      }
    }
  }
  else
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v24 = 0;
      v25 = *a3;
      *(_BYTE *)result = *a2;
      do
      {
        v26[v24-- + 12] = (v25 % 0xA) | 0x30;
        v14 = v25 > 9;
        v25 /= 0xAu;
      }
      while (v14);
      if (v24 + 14 <= 13)
        return memcpy((char *)result + 1, &v26[v24 + 13], -v24);
    }
  }
  return result;
}

void WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::Wasm::NameSection **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::NameSection *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a1;
  if (v8)
  {
    JSC::Wasm::NameSection::~NameSection(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Wasm::NameSection::~NameSection(JSC::Wasm::NameSection *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  WTF::Vector<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  v17 = *((_QWORD *)this + 1);
  if (v17)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::Vector<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    do
    {
      v13 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 16;
      v12 -= 16;
    }
    while (v12);
    v10 = *(_QWORD *)a1;
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::PrintStream::printImpl<char [4],unsigned int,char [2],WTF::RawPointer,char [2]>(WTF::PrintStream *a1, unsigned int *a2, const void **a3)
{
  WTF::PrintStream::printf(a1, "%s", "Amc");
  WTF::printInternal(a1, (WTF::PrintStream *)*a2);
  return WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(a1, "(", a3, ")");
}

uint64_t WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(WTF::PrintStream *a1, const char *a2, const void **a3, const char *a4)
{
  WTF::PrintStream::printf(a1, "%s", a2);
  WTF::printInternal(a1, *a3);
  return WTF::PrintStream::printf(a1, "%s", a4);
}

uint64_t WTF::PrintStream::printImpl<char [25],unsigned int,char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>(WTF::PrintStream *a1, unsigned int *a2, const void **a3, const void **a4)
{
  WTF::PrintStream::printf(a1, "%s", "API Marking Constraint #");
  WTF::printInternal(a1, (WTF::PrintStream *)*a2);
  return WTF::PrintStream::printImpl<char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>(a1, a3, a4);
}

uint64_t WTF::PrintStream::printImpl<char [3],WTF::RawPointer,char [3],WTF::RawPointer,char [2]>(WTF::PrintStream *a1, const void **a2, const void **a3)
{
  WTF::PrintStream::printf(a1, "%s", " (");
  WTF::printInternal(a1, *a2);
  return WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(a1, ", ", a3, ")");
}

uint64_t WTF::Detail::CallableWrapper<JSContextGroupAddMarkingConstraint::$_0,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, uint64_t);
  _QWORD v5[3];

  v3 = *(uint64_t (**)(_QWORD *, uint64_t))(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v5[2] = a2;
  return v3(v5, v2);
}

uint64_t `anonymous namespace'::isMarked(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  else
    return 1;
}

uint64_t `anonymous namespace'::mark(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 64))(*(_QWORD *)(result + 16));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSContextGroupAddMarkingConstraint::$_1,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, uint64_t);
  _QWORD v5[3];

  v3 = *(uint64_t (**)(_QWORD *, uint64_t))(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v5[2] = a2;
  return v3(v5, v2);
}

void WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(OpaqueJSClass **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OpaqueJSClass *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a1;
  if (v8)
  {
    OpaqueJSClass::~OpaqueJSClass(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = v7;
    do
    {
      v22 = (WTF::StringImpl **)(v6 + 16 * v19);
      v23 = *v22;
      if (*v22 != (WTF::StringImpl *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if ((v26 & 0x20) != 0)
            v26 = *((_DWORD *)v23 + 8);
          v27 = 0;
          v28 = v26 >> 8;
          do
          {
            v29 = v28 & v25;
            v28 = ++v27 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = (WTF::StringImpl **)(v24 + 16 * v29);
          *v30 = 0;
          v31 = *v22;
          *v22 = 0;
          *v30 = v31;
          v30[1] = *(WTF::StringImpl **)(v6 + 16 * v19 + 8);
          v32 = *v22;
          *v22 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v22 == a3)
            v20 = v30;
        }
        else
        {
          *v22 = 0;
        }
      }
      ++v19;
    }
    while (v19 != v21);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v8 - 8);
    v11 = *((_DWORD *)a2 + 4);
    if ((v11 & 0x20) != 0)
      v11 = *((_DWORD *)a2 + 8);
    v12 = v10 & (v11 >> 8);
    v13 = *(WTF::AtomStringImpl **)(v8 + 16 * v12);
    if (v13 != a2)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v10;
        v13 = *(WTF::AtomStringImpl **)(v8 + 16 * v12);
        ++v14;
        if (v13 == a2)
          goto LABEL_10;
      }
      v12 = *(unsigned int *)(v8 - 4);
    }
LABEL_10:
    if (v12 != *(_DWORD *)(v8 - 4))
    {
      v15 = 16 * v12;
      v16 = *(WTF::StringImpl **)(v8 + v15);
      *(_QWORD *)(v8 + v15) = -1;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      ++*(_DWORD *)(*a1 - 16);
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a1;
      if (*a1)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v21 >> 1, 0);
      }
    }
  }
}

void WTF::VectorTypeOperations<WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>>::destruct(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v10, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

JSTypedArrayType JSValueGetTypedArrayType(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  JSTypedArrayType v20;
  unsigned int *v22;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v22, *((JSC::VM **)ctx + 7), (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  v17 = 2;
  if (value)
    v17 = (uint64_t)value;
  if ((v17 & 0xFFFE000000000002) != 0
    || (v18 = *(unsigned __int8 *)(v17 + 5), v18 < 0x17)
    || (v19 = v18 - 38, v19 > 0xB))
  {
    v20 = kJSTypedArrayTypeNone;
  }
  else
  {
    v20 = dword_19914F440[(char)v19];
  }
  JSC::JSLockHolder::~JSLockHolder(&v22, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

JSObjectRef JSObjectMakeTypedArray(JSContextRef ctx, JSTypedArrayType arrayType, size_t length, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v11;
  unsigned int *v13;
  void *v14;
  JSValueRef *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  OpaqueJSValue *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  JSC::JSCell *TypedArray;
  JSC::ArrayBuffer *v26;
  BOOL v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSObjectRef result;
  unsigned int *v37;
  unsigned int v38;
  JSC::ArrayBuffer *v39;
  unsigned int *v40;

  v11 = *(JSC::JSGlobalObject **)&arrayType;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v40, (JSC::VM *)v13, length, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (((_DWORD)v11 - 9) < 2)
  {
    v21 = 0;
LABEL_11:
    JSC::JSLockHolder::~JSLockHolder(&v40, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    return v21;
  }
  if (v11 < 0xD && ((0x19FFu >> (char)v11) & 1) != 0)
  {
    JSC::ArrayBuffer::tryCreate(length, (1 << dword_19914F470[(int)v11]), 0, 0, 0, v18, v19, v20, &v39);
    TypedArray = createTypedArray((unint64_t)ctx, v11, (uint64_t)&v39, 0, length, 1u, v22, v23, v24);
    v15 = (JSValueRef *)*((_QWORD *)v13 + 2);
    if (v15)
    {
      if (exception)
        *exception = v15[1];
      *((_QWORD *)v13 + 2) = 0;
      v37 = v13 + 20;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 & 0xFFFFFFEF, v37));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v15, v16, v17, v18, v19, v20);
      v21 = 0;
    }
    else
    {
      v21 = TypedArray;
    }
    v26 = v39;
    v39 = 0;
    if (v26)
    {
      v27 = *(_DWORD *)v26 == 2;
      *(_DWORD *)v26 -= 2;
      if (v27)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v26, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
    goto LABEL_11;
  }
  result = (JSObjectRef)107;
  __break(0xC471u);
  return result;
}

JSC::JSCell *createTypedArray(unint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, unint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSCell *result;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t OutOfMemoryError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  JSC::Exception *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t *);
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)(uint64_t *);
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(uint64_t *);
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t (*v47)(uint64_t *);
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(uint64_t *);
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(uint64_t *);
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t (*v59)(uint64_t *);
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t (*v63)(uint64_t *);
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(uint64_t *);
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(uint64_t *);
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t (*v75)(uint64_t *);
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  const OpaqueJSContext *v90;
  JSTypedArrayType v91;
  void *v92;
  size_t v93;
  JSTypedArrayBytesDeallocator v94;
  void *v95;
  JSValueRef *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;

  if (*(_QWORD *)a3)
  {
    result = 0;
    v14 = a6;
    switch((int)a2)
    {
      case 0:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v15 = *(_QWORD *)(a1 + 1664);
          if ((v15 & 1) == 0)
            goto LABEL_5;
          v35 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
          v36 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v36 = (uint64_t *)(a1 - 16);
          v37 = *v36;
          v38 = a1 + 1664;
          goto LABEL_55;
        }
        v15 = *(_QWORD *)(a1 + 1680);
        if ((v15 & 1) != 0)
        {
          v35 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
          v79 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v79 = (uint64_t *)(a1 - 16);
          v37 = *v79;
          v38 = a1 + 1680;
LABEL_55:
          v97 = v37;
          v98 = a1;
          v99 = v38;
          v15 = v35(&v97);
        }
LABEL_5:
        if (!v14)
          goto LABEL_140;
        return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create((JSC::JSGlobalObject *)a1, v15, a3, a4, a5, 1, a9, a7, a8);
      case 1:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v25 = *(_QWORD *)(a1 + 1736);
          if ((v25 & 1) == 0)
            goto LABEL_13;
          v39 = *(uint64_t (**)(uint64_t *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
          v40 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v40 = (uint64_t *)(a1 - 16);
          v41 = *v40;
          v42 = a1 + 1736;
          goto LABEL_59;
        }
        v25 = *(_QWORD *)(a1 + 1752);
        if ((v25 & 1) != 0)
        {
          v39 = *(uint64_t (**)(uint64_t *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
          v80 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v80 = (uint64_t *)(a1 - 16);
          v41 = *v80;
          v42 = a1 + 1752;
LABEL_59:
          v97 = v41;
          v98 = a1;
          v99 = v42;
          v25 = v39(&v97);
        }
LABEL_13:
        if (!v14)
          goto LABEL_140;
        return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create((JSC::JSGlobalObject *)a1, v25, a3, a4, a5, 1, a9, a7, a8);
      case 2:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v26 = *(_QWORD *)(a1 + 1784);
          if ((v26 & 1) == 0)
            goto LABEL_17;
          v43 = *(uint64_t (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
          v44 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v44 = (uint64_t *)(a1 - 16);
          v45 = *v44;
          v46 = a1 + 1784;
          goto LABEL_63;
        }
        v26 = *(_QWORD *)(a1 + 1800);
        if ((v26 & 1) != 0)
        {
          v43 = *(uint64_t (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
          v81 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v81 = (uint64_t *)(a1 - 16);
          v45 = *v81;
          v46 = a1 + 1800;
LABEL_63:
          v97 = v45;
          v98 = a1;
          v99 = v46;
          v26 = v43(&v97);
        }
LABEL_17:
        if (!v14)
          goto LABEL_140;
        return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create((JSC::JSGlobalObject *)a1, v26, a3, a4, a5, 1, a9, a7, a8);
      case 3:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v27 = *(_QWORD *)(a1 + 1688);
          if ((v27 & 1) == 0)
            goto LABEL_21;
          v47 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
          v48 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v48 = (uint64_t *)(a1 - 16);
          v49 = *v48;
          v50 = a1 + 1688;
          goto LABEL_67;
        }
        v27 = *(_QWORD *)(a1 + 1704);
        if ((v27 & 1) != 0)
        {
          v47 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
          v82 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v82 = (uint64_t *)(a1 - 16);
          v49 = *v82;
          v50 = a1 + 1704;
LABEL_67:
          v97 = v49;
          v98 = a1;
          v99 = v50;
          v27 = v47(&v97);
        }
LABEL_21:
        if (!v14)
          goto LABEL_140;
        return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)a1, v27, a3, a4, a5, 1, a9, a7, a8);
      case 4:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v28 = *(_QWORD *)(a1 + 1712);
          if ((v28 & 1) == 0)
            goto LABEL_25;
          v51 = *(uint64_t (**)(uint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
          v52 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v52 = (uint64_t *)(a1 - 16);
          v53 = *v52;
          v54 = a1 + 1712;
          goto LABEL_71;
        }
        v28 = *(_QWORD *)(a1 + 1728);
        if ((v28 & 1) != 0)
        {
          v51 = *(uint64_t (**)(uint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
          v83 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v83 = (uint64_t *)(a1 - 16);
          v53 = *v83;
          v54 = a1 + 1728;
LABEL_71:
          v97 = v53;
          v98 = a1;
          v99 = v54;
          v28 = v51(&v97);
        }
LABEL_25:
        if (!v14)
          goto LABEL_140;
        return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(a1, v28, a3, a4, a5, 1, a9, a7, a8);
      case 5:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v29 = *(_QWORD *)(a1 + 1760);
          if ((v29 & 1) == 0)
            goto LABEL_29;
          v55 = *(uint64_t (**)(uint64_t *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
          v56 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v56 = (uint64_t *)(a1 - 16);
          v57 = *v56;
          v58 = a1 + 1760;
          goto LABEL_75;
        }
        v29 = *(_QWORD *)(a1 + 1776);
        if ((v29 & 1) != 0)
        {
          v55 = *(uint64_t (**)(uint64_t *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
          v84 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v84 = (uint64_t *)(a1 - 16);
          v57 = *v84;
          v58 = a1 + 1776;
LABEL_75:
          v97 = v57;
          v98 = a1;
          v99 = v58;
          v29 = v55(&v97);
        }
LABEL_29:
        if (!v14)
          goto LABEL_140;
        return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)a1, v29, a3, a4, a5, 1, a9, a7, a8);
      case 6:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v30 = *(_QWORD *)(a1 + 1808);
          if ((v30 & 1) == 0)
            goto LABEL_33;
          v59 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
          v60 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v60 = (uint64_t *)(a1 - 16);
          v61 = *v60;
          v62 = a1 + 1808;
          goto LABEL_79;
        }
        v30 = *(_QWORD *)(a1 + 1824);
        if ((v30 & 1) != 0)
        {
          v59 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
          v85 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v85 = (uint64_t *)(a1 - 16);
          v61 = *v85;
          v62 = a1 + 1824;
LABEL_79:
          v97 = v61;
          v98 = a1;
          v99 = v62;
          v30 = v59(&v97);
        }
LABEL_33:
        if (!v14)
          goto LABEL_140;
        return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create((JSC::JSGlobalObject *)a1, v30, a3, a4, a5, 1, a9, a7, a8);
      case 7:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v31 = *(_QWORD *)(a1 + 1832);
          if ((v31 & 1) == 0)
            goto LABEL_37;
          v63 = *(uint64_t (**)(uint64_t *))(v31 & 0xFFFFFFFFFFFFFFFCLL);
          v64 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v64 = (uint64_t *)(a1 - 16);
          v65 = *v64;
          v66 = a1 + 1832;
          goto LABEL_83;
        }
        v31 = *(_QWORD *)(a1 + 1848);
        if ((v31 & 1) != 0)
        {
          v63 = *(uint64_t (**)(uint64_t *))(v31 & 0xFFFFFFFFFFFFFFFCLL);
          v86 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v86 = (uint64_t *)(a1 - 16);
          v65 = *v86;
          v66 = a1 + 1848;
LABEL_83:
          v97 = v65;
          v98 = a1;
          v99 = v66;
          v31 = v63(&v97);
        }
LABEL_37:
        if (!v14)
          goto LABEL_140;
        return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create((JSC::JSGlobalObject *)a1, v31, a3, a4, a5, 1, a9, a7, a8);
      case 8:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v32 = *(_QWORD *)(a1 + 1856);
          if ((v32 & 1) == 0)
            goto LABEL_41;
          v67 = *(uint64_t (**)(uint64_t *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
          v68 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v68 = (uint64_t *)(a1 - 16);
          v69 = *v68;
          v70 = a1 + 1856;
          goto LABEL_87;
        }
        v32 = *(_QWORD *)(a1 + 1872);
        if ((v32 & 1) != 0)
        {
          v67 = *(uint64_t (**)(uint64_t *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
          v87 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v87 = (uint64_t *)(a1 - 16);
          v69 = *v87;
          v70 = a1 + 1872;
LABEL_87:
          v97 = v69;
          v98 = a1;
          v99 = v70;
          v32 = v67(&v97);
        }
LABEL_41:
        if (!v14)
          goto LABEL_140;
        return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)a1, v32, a3, a4, a5, 1, a9, a7, a8);
      case 11:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v33 = *(_QWORD *)(a1 + 1880);
          if ((v33 & 1) == 0)
            goto LABEL_45;
          v71 = *(uint64_t (**)(uint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
          v72 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v72 = (uint64_t *)(a1 - 16);
          v73 = *v72;
          v74 = a1 + 1880;
          goto LABEL_91;
        }
        v33 = *(_QWORD *)(a1 + 1896);
        if ((v33 & 1) != 0)
        {
          v71 = *(uint64_t (**)(uint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
          v88 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v88 = (uint64_t *)(a1 - 16);
          v73 = *v88;
          v74 = a1 + 1896;
LABEL_91:
          v97 = v73;
          v98 = a1;
          v99 = v74;
          v33 = v71(&v97);
        }
LABEL_45:
        if (!v14)
          goto LABEL_140;
        return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(a1, v33, a3, a4, a5, 1, a9, a7, a8);
      case 12:
        if (!*(_BYTE *)(*(_QWORD *)a3 + 64))
        {
          v34 = *(_QWORD *)(a1 + 1904);
          if ((v34 & 1) == 0)
            goto LABEL_49;
          v75 = *(uint64_t (**)(uint64_t *))(v34 & 0xFFFFFFFFFFFFFFFCLL);
          v76 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v76 = (uint64_t *)(a1 - 16);
          v77 = *v76;
          v78 = a1 + 1904;
          goto LABEL_95;
        }
        v34 = *(_QWORD *)(a1 + 1920);
        if ((v34 & 1) != 0)
        {
          v75 = *(uint64_t (**)(uint64_t *))(v34 & 0xFFFFFFFFFFFFFFFCLL);
          v89 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v89 = (uint64_t *)(a1 - 16);
          v77 = *v89;
          v78 = a1 + 1920;
LABEL_95:
          v97 = v77;
          v98 = a1;
          v99 = v78;
          v34 = v75(&v97);
        }
LABEL_49:
        if (v14)
        {
          result = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(a1, v34, a3, a4, a5, 1, a9, a7, a8);
        }
        else
        {
LABEL_140:
          v90 = (const OpaqueJSContext *)std::__throw_bad_optional_access[abi:sn180100]();
          result = JSObjectMakeTypedArrayWithBytesNoCopy(v90, v91, v92, v93, v94, v95, v96);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    v16 = *(JSC::VM **)(a1 + 56);
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, a2);
    v24 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)v16, (JSC::VM *)OutOfMemoryError, 0, v18, v19, v20, v21, v22);
    }
    JSC::VM::throwException(v16, (JSC::JSGlobalObject *)a1, v24, v23, v18, v19, v20, v21, v22);
    return 0;
  }
  return result;
}

JSObjectRef JSObjectMakeTypedArrayWithBytesNoCopy(JSContextRef ctx, JSTypedArrayType arrayType, void *bytes, size_t byteLength, JSTypedArrayBytesDeallocator bytesDeallocator, void *deallocatorContext, JSValueRef *exception)
{
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v14;
  unsigned int *v16;
  void *v17;
  JSValueRef *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  OpaqueJSValue *TypedArray;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;
  BOOL v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSObjectRef result;
  unsigned int *v46;
  unsigned int v47;
  JSC::ArrayBuffer *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::ArrayBuffer *v57;
  JSC::ArrayBuffer *v58;
  unsigned int *v59;

  v14 = *(JSC::JSGlobalObject **)&arrayType;
  v16 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v59, (JSC::VM *)v16, (uint64_t)bytes, byteLength, (uint64_t)bytesDeallocator, (uint64_t)deallocatorContext, (uint64_t)exception, v7, v8);
  if (((_DWORD)v14 - 9) < 2)
    goto LABEL_2;
  if (v14 < 0xD && ((0x19FFu >> (char)v14) & 1) != 0)
  {
    v25 = qword_19914F4A8[(int)v14];
    v26 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v26 + 8) = 1;
    *(_QWORD *)v26 = off_1E357CAE0;
    *(_QWORD *)(v26 + 16) = bytesDeallocator;
    *(_QWORD *)(v26 + 24) = deallocatorContext;
    v57 = (JSC::ArrayBuffer *)v26;
    JSC::ArrayBuffer::createFromBytes((Gigacage *)bytes, byteLength, &v57, (uint64_t *)&v58);
    v30 = (unsigned int *)v57;
    v57 = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    v57 = v58;
    v58 = 0;
    TypedArray = createTypedArray((unint64_t)ctx, v14, (uint64_t)&v57, 0, byteLength >> v25, 1u, v27, v28, v29);
    v35 = v57;
    v57 = 0;
    if (v35)
    {
      v36 = *(_DWORD *)v35 == 2;
      *(_DWORD *)v35 -= 2;
      if (v36)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v35, v17, v34, v19, v20, v21, v22, v23);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
    }
    v18 = (JSValueRef *)*((_QWORD *)v16 + 2);
    if (!v18)
      goto LABEL_15;
    if (exception)
      *exception = v18[1];
    *((_QWORD *)v16 + 2) = 0;
    v46 = v16 + 20;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 & 0xFFFFFFEF, v46));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v18, v19, v20, v21, v22, v23);
    v48 = v58;
    if (v58)
    {
      v36 = *(_DWORD *)v58 == 2;
      *(_DWORD *)v58 -= 2;
      if (v36)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v48, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
    }
LABEL_2:
    TypedArray = 0;
LABEL_15:
    JSC::JSLockHolder::~JSLockHolder(&v59, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    return TypedArray;
  }
  result = (JSObjectRef)107;
  __break(0xC471u);
  return result;
}

JSObjectRef JSObjectMakeTypedArrayWithArrayBuffer(JSContextRef ctx, JSTypedArrayType arrayType, JSObjectRef buffer, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v11;
  unsigned int *v13;
  void *v14;
  JSValueRef *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  const WTF::String *v26;
  const OpaqueJSValue *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Inspector::JSGlobalObjectInspectorController *v33;
  JSC::Exception *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  OpaqueJSValue *v41;
  JSObjectRef result;
  JSC::JSCell *TypedArray;
  WTF::StringImpl *v44;
  BOOL v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  unsigned int *v65;

  v11 = *(JSC::JSGlobalObject **)&arrayType;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v65, (JSC::VM *)v13, (uint64_t)buffer, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (((_DWORD)v11 - 9) < 2)
  {
LABEL_15:
    v41 = 0;
LABEL_16:
    JSC::JSLockHolder::~JSLockHolder(&v65, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    return v41;
  }
  if (!buffer || *((_BYTE *)buffer + 5) != 38)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x5100000002;
    *(_QWORD *)(v25 + 8) = "JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object";
    *(_DWORD *)(v25 + 16) = 4;
    v64 = (WTF::StringImpl *)v25;
    v27 = (const OpaqueJSValue *)JSC::createTypeError((unint64_t)ctx, &v64, v26);
    if (exception)
      *exception = v27;
    v33 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)ctx + 253);
    v34 = (JSC::Exception *)JSC::Exception::create(*((_QWORD *)ctx + 7), v27, 0, v28, v29, v30, v31, v32);
    Inspector::JSGlobalObjectInspectorController::reportAPIException(v33, ctx, v34, v35, v36, v37, v38, v39);
    v40 = v64;
    v64 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)v14, (uint64_t)v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    goto LABEL_15;
  }
  v22 = *((_QWORD *)buffer + 2);
  if (v22)
    *(_DWORD *)v22 += 2;
  v64 = (WTF::StringImpl *)v22;
  if (v11 < 0xD && ((0x19FFu >> (char)v11) & 1) != 0)
  {
    if (*(_BYTE *)(v22 + 64))
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = *(_QWORD *)(v22 + 48) >> qword_19914F4A8[(int)v11];
      v24 = 1;
    }
    TypedArray = createTypedArray((unint64_t)ctx, v11, (uint64_t)&v64, 0, v23, v24, v19, v20, v21);
    v15 = (JSValueRef *)*((_QWORD *)v13 + 2);
    if (v15)
    {
      if (exception)
        *exception = v15[1];
      *((_QWORD *)v13 + 2) = 0;
      v62 = v13 + 20;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 & 0xFFFFFFEF, v62));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v15, v16, v17, v18, v19, v20);
      v41 = 0;
    }
    else
    {
      v41 = TypedArray;
    }
    v44 = v64;
    v64 = 0;
    if (v44)
    {
      v45 = *(_DWORD *)v44 == 2;
      *(_DWORD *)v44 -= 2;
      if (v45)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v44, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    goto LABEL_16;
  }
  result = (JSObjectRef)107;
  __break(0xC471u);
  return result;
}

JSObjectRef JSObjectMakeTypedArrayWithArrayBufferAndOffset(JSContextRef ctx, JSTypedArrayType arrayType, JSObjectRef buffer, size_t byteOffset, size_t length, JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v13;
  unsigned int *v15;
  WTF::AtomStringImpl *v16;
  JSValueRef *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  OpaqueJSValue *TypedArray;
  WTF::StringImpl *v27;
  BOOL v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  const WTF::String *v40;
  const OpaqueJSValue *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Inspector::JSGlobalObjectInspectorController *v47;
  JSC::Exception *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unsigned int *v65;

  v13 = *(JSC::JSGlobalObject **)&arrayType;
  v15 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v65, (JSC::VM *)v15, (uint64_t)buffer, byteOffset, length, (uint64_t)exception, v6, v7, v8);
  if (((_DWORD)v13 - 9) < 2)
  {
LABEL_21:
    TypedArray = 0;
    goto LABEL_22;
  }
  if (!buffer || *((_BYTE *)buffer + 5) != 38)
  {
    v39 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v39 = 0x5100000002;
    *(_QWORD *)(v39 + 8) = "JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object";
    *(_DWORD *)(v39 + 16) = 4;
    v64 = (WTF::StringImpl *)v39;
    v41 = (const OpaqueJSValue *)JSC::createTypeError((unint64_t)ctx, &v64, v40);
    if (exception)
      *exception = v41;
    v47 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)ctx + 253);
    v48 = (JSC::Exception *)JSC::Exception::create(*((_QWORD *)ctx + 7), v41, 0, v42, v43, v44, v45, v46);
    Inspector::JSGlobalObjectInspectorController::reportAPIException(v47, ctx, v48, v49, v50, v51, v52, v53);
    v54 = v64;
    v64 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    goto LABEL_21;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)buffer + 2);
  if (v24)
    *(_DWORD *)v24 += 2;
  v64 = v24;
  TypedArray = createTypedArray((unint64_t)ctx, v13, (uint64_t)&v64, byteOffset, length, 1u, v21, v22, v23);
  v27 = v64;
  v64 = 0;
  if (v27)
  {
    v28 = *(_DWORD *)v27 == 2;
    *(_DWORD *)v27 -= 2;
    if (v28)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v27, v16, v25, v18, v19, v20, v21, v22);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  v17 = (JSValueRef *)*((_QWORD *)v15 + 2);
  if (v17)
  {
    if (exception)
      *exception = v17[1];
    *((_QWORD *)v15 + 2) = 0;
    v37 = v15 + 20;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 & 0xFFFFFFEF, v37));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v17, v18, v19, v20, v21, v22);
    goto LABEL_21;
  }
LABEL_22:
  JSC::JSLockHolder::~JSLockHolder(&v65, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
  return TypedArray;
}

void *__cdecl JSObjectGetTypedArrayBytesPtr(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::ArrayBuffer *v21;
  unsigned int v22;
  const OpaqueJSValue *OutOfMemoryError;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Inspector::JSGlobalObjectInspectorController *v29;
  JSC::Exception *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v37;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v37, *((JSC::VM **)ctx + 7), (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  v19 = 0;
  if (!object || *((unsigned __int8 *)object + 5) - 51 < 0xFFFFFFF4)
    goto LABEL_21;
  v20 = *((unsigned __int8 *)object + 40);
  if (v20 != 88)
  {
    if (v20 == 48 || v20 == 16)
    {
      v21 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)object, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      if (!v21)
        goto LABEL_18;
      goto LABEL_13;
    }
    v22 = v20 - 90;
    if (v22 <= 0x33)
    {
      if (((1 << v22) & 0xF400000000000) != 0)
      {
        v21 = (JSC::ArrayBuffer *)*((_QWORD *)object + 6);
        if (v21)
          goto LABEL_13;
      }
      else if (((1 << v22) & 0xF) != 0)
      {
        goto LABEL_4;
      }
    }
LABEL_18:
    OutOfMemoryError = (const OpaqueJSValue *)JSC::createOutOfMemoryError((unint64_t)ctx, v12);
    if (exception)
      *exception = OutOfMemoryError;
    v29 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)ctx + 253);
    v30 = (JSC::Exception *)JSC::Exception::create(*((_QWORD *)ctx + 7), OutOfMemoryError, 0, v24, v25, v26, v27, v28);
    Inspector::JSGlobalObjectInspectorController::reportAPIException(v29, ctx, v30, v31, v32, v33, v34, v35);
    v19 = 0;
    goto LABEL_21;
  }
LABEL_4:
  v21 = *(JSC::ArrayBuffer **)(*((_QWORD *)object + 1) - 8);
  if (!v21)
    goto LABEL_18;
LABEL_13:
  *((_BYTE *)v21 + 93) = 1;
  v19 = *((_QWORD *)v21 + 2);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_21:
  JSC::JSLockHolder::~JSLockHolder(&v37, v12, v13, v14, v15, v16, v17, v18);
  return (void *)v19;
}

size_t JSObjectGetTypedArrayLength(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t result;
  char v9;
  _BYTE v10[16];

  result = 0;
  if (object && *((unsigned __int8 *)object + 5) - 51 >= 0xFFFFFFF4)
  {
    if ((*((_BYTE *)object + 40) & 7u) > 2)
    {
      v10[0] = 0;
      v10[8] = 0;
      result = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)object, (uint64_t)v10, (uint64_t)exception, v3, v4, v5, v6, v7);
      if (!v9)
        return 0;
    }
    else
    {
      return *((_QWORD *)object + 3);
    }
  }
  return result;
}

size_t JSObjectGetTypedArrayByteLength(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t result;
  char v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  _BYTE v15[16];

  result = 0;
  if (object)
  {
    v10 = *((_BYTE *)object + 5);
    if ((v10 - 51) >= 0xF4u)
    {
      if ((*((_BYTE *)object + 40) & 7u) > 2)
      {
        v15[0] = 0;
        v15[8] = 0;
        v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)object, (uint64_t)v15, (uint64_t)exception, v3, v4, v5, v6, v7);
        result = 0;
        if (!v14 || !v11)
          return result;
        if ((*((_BYTE *)object + 40) & 1) == 0)
          v11 = *((_QWORD *)object + 3);
        v10 = *((_BYTE *)object + 5);
      }
      else
      {
        v11 = *((_QWORD *)object + 3);
      }
      v12 = v10 - 42;
      if (v12 > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_19914F510[(char)v12];
      return v11 << v13;
    }
  }
  return result;
}

size_t JSObjectGetTypedArrayByteOffset(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t result;
  unint64_t v10;
  char v11;

  result = 0;
  if (object && *((unsigned __int8 *)object + 5) - 51 >= 0xFFFFFFF4)
  {
    if ((*((_BYTE *)object + 40) & 7u) > 2
      && (LOBYTE(v10) = 0,
          v11 = 0,
          JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(object, &v10, (uint64_t)exception, v3, v4, v5, v6, v7)))
    {
      return 0;
    }
    else
    {
      return *((_QWORD *)object + 4);
    }
  }
  return result;
}

JSObjectRef JSObjectGetTypedArrayBuffer(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  OpaqueJSValue *v20;
  int v21;
  JSC::ArrayBuffer *v22;
  unsigned int v23;
  const OpaqueJSValue *OutOfMemoryError;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Inspector::JSGlobalObjectInspectorController *v30;
  JSC::Exception *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v38;

  v12 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v38, v12, (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  v20 = 0;
  if (!object || *((unsigned __int8 *)object + 5) - 51 < 0xFFFFFFF4)
    goto LABEL_18;
  v21 = *((unsigned __int8 *)object + 40);
  if (v21 == 88)
  {
LABEL_4:
    v22 = *(JSC::ArrayBuffer **)(*((_QWORD *)object + 1) - 8);
    if (!v22)
      goto LABEL_15;
LABEL_13:
    v20 = (OpaqueJSValue *)(*(uint64_t (**)(_QWORD *, JSContextRef, _QWORD, JSC::ArrayBuffer *))(**((_QWORD **)v12 + 11628) + 16))(*((_QWORD **)v12 + 11628), ctx, *(_QWORD *)(16 * (*(_DWORD *)object & 0xFFFFFFFE) + 0x28), v22);
    goto LABEL_18;
  }
  if (v21 == 48 || v21 == 16)
  {
    v22 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)object, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    if (!v22)
      goto LABEL_15;
    goto LABEL_13;
  }
  v23 = v21 - 90;
  if (v23 <= 0x33)
  {
    if (((1 << v23) & 0xF400000000000) != 0)
    {
      v22 = (JSC::ArrayBuffer *)*((_QWORD *)object + 6);
      if (v22)
        goto LABEL_13;
    }
    else if (((1 << v23) & 0xF) != 0)
    {
      goto LABEL_4;
    }
  }
LABEL_15:
  OutOfMemoryError = (const OpaqueJSValue *)JSC::createOutOfMemoryError((unint64_t)ctx, v13);
  if (exception)
    *exception = OutOfMemoryError;
  v30 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)ctx + 253);
  v31 = (JSC::Exception *)JSC::Exception::create(*((_QWORD *)ctx + 7), OutOfMemoryError, 0, v25, v26, v27, v28, v29);
  Inspector::JSGlobalObjectInspectorController::reportAPIException(v30, ctx, v31, v32, v33, v34, v35, v36);
  v20 = 0;
LABEL_18:
  JSC::JSLockHolder::~JSLockHolder(&v38, v13, v14, v15, v16, v17, v18, v19);
  return v20;
}

JSObjectRef JSObjectMakeArrayBufferWithBytesNoCopy(JSContextRef ctx, void *bytes, size_t byteLength, JSTypedArrayBytesDeallocator bytesDeallocator, void *deallocatorContext, JSValueRef *exception)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  JSC::ArrayBuffer *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  OpaqueJSValue *v35;
  BOOL v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSValueRef *v45;
  uint64_t (*v47)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v48;
  unsigned int *v49;
  unsigned int v50;
  JSC::ArrayBuffer *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::ArrayBuffer *v60;
  unsigned int *v61;
  JSC::ArrayBuffer *v62[3];

  v15 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v61, (JSC::VM *)v15, byteLength, (uint64_t)bytesDeallocator, (uint64_t)deallocatorContext, (uint64_t)exception, v6, v7, v8);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = off_1E357CB08;
  *(_QWORD *)(v16 + 16) = bytesDeallocator;
  *(_QWORD *)(v16 + 24) = deallocatorContext;
  v62[0] = (JSC::ArrayBuffer *)v16;
  JSC::ArrayBuffer::createFromBytes((Gigacage *)bytes, byteLength, v62, (uint64_t *)&v60);
  v22 = (unsigned int *)v62[0];
  v62[0] = 0;
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  v26 = *((_QWORD *)ctx + 200);
  if ((v26 & 1) != 0)
  {
    v47 = *(uint64_t (**)(JSC::ArrayBuffer **))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    v48 = (JSC::ArrayBuffer **)((unint64_t)ctx & 0xFFFFFFFFFFFFC000 | 8);
    if ((ctx & 8) != 0)
      v48 = (JSC::ArrayBuffer **)((char *)ctx - 16);
    v62[0] = *v48;
    v62[1] = ctx;
    v62[2] = (JSContextRef)((char *)ctx + 1600);
    v26 = v47(v62);
  }
  v27 = v60;
  v60 = 0;
  v62[0] = v27;
  v35 = (OpaqueJSValue *)JSC::JSArrayBuffer::create((uint64_t)v15, v26, v62, v17, v18, v19, v20, v21);
  if (v27)
  {
    v36 = *(_DWORD *)v27 == 2;
    *(_DWORD *)v27 -= 2;
    if (v36)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v27, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  v45 = (JSValueRef *)*((_QWORD *)v15 + 2);
  if (v45)
  {
    if (exception)
      *exception = v45[1];
    *((_QWORD *)v15 + 2) = 0;
    v49 = v15 + 20;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 & 0xFFFFFFEF, v49));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v45, v30, v31, v32, v33, v34);
    v51 = v60;
    if (v60)
    {
      v36 = *(_DWORD *)v60 == 2;
      *(_DWORD *)v60 -= 2;
      if (v36)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v51, v28, (uint64_t)v45, v30, v31, v32, v33, v34);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
    }
    v35 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v61, v28, (uint64_t)v45, v30, v31, v32, v33, v34);
  return v35;
}

void *__cdecl JSObjectGetArrayBufferBytesPtr(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::String *v22;
  const OpaqueJSValue *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Inspector::JSGlobalObjectInspectorController *v29;
  JSC::Exception *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned int *v47;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v47, *((JSC::VM **)ctx + 7), (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  v19 = 0;
  if (object && *((_BYTE *)object + 5) == 38)
  {
    v20 = *((_QWORD *)object + 2);
    if (*(_BYTE *)(v20 + 92))
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x3600000002;
      *(_QWORD *)(v21 + 8) = "Cannot get the backing buffer for a WebAssembly.Memory";
      *(_DWORD *)(v21 + 16) = 4;
      v46 = (WTF::StringImpl *)v21;
      v23 = (const OpaqueJSValue *)JSC::createTypeError((unint64_t)ctx, &v46, v22);
      if (exception)
        *exception = v23;
      v29 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)ctx + 253);
      v30 = (JSC::Exception *)JSC::Exception::create(*((_QWORD *)ctx + 7), v23, 0, v24, v25, v26, v27, v28);
      Inspector::JSGlobalObjectInspectorController::reportAPIException(v29, ctx, v30, v31, v32, v33, v34, v35);
      v36 = v46;
      v46 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
      v19 = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 93) = 1;
      v19 = *(_QWORD *)(v20 + 16);
      if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v47, v12, v13, v14, v15, v16, v17, v18);
  return (void *)v19;
}

size_t JSObjectGetArrayBufferByteLength(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  if (!object)
  {
    if (byte_1ECF5861B == 1)
    {
      if (_MergedGlobals_28)
        return 0;
    }
    else
    {
      v5 = *((_DWORD *)WTF::sdkAlignedBehaviors(ctx) + 1);
      _MergedGlobals_28 = (v5 & 0x2000) == 0;
      byte_1ECF5861B = 1;
      if ((v5 & 0x2000) == 0)
        return 0;
    }
    __break(0xC471u);
    JUMPOUT(0x197F5E968);
  }
  if (*((_BYTE *)object + 5) != 38)
    return 0;
  v3 = *((_QWORD *)object + 2);
  if (*(_BYTE *)(v3 + 64) && (v6 = *(_QWORD *)(v3 + 32)) != 0)
    return *(_QWORD *)(v6 + 32);
  else
    return *(_QWORD *)(v3 + 48);
}

JSType JSValueGetType(JSContextRef ctx, JSValueRef value)
{
  int v2;

  if (ctx)
  {
    if (!value || value == (JSValueRef)2)
    {
      LODWORD(ctx) = 1;
    }
    else if (value == (JSValueRef)10)
    {
      LODWORD(ctx) = 0;
    }
    else if (((unint64_t)value & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      LODWORD(ctx) = 2;
    }
    else if ((unint64_t)value >> 49)
    {
      LODWORD(ctx) = 3;
    }
    else if (((unint64_t)value & 0xFFFE000000000002) != 0)
    {
      LODWORD(ctx) = 5;
    }
    else
    {
      v2 = *((unsigned __int8 *)value + 5);
      if (v2 == 2)
      {
        LODWORD(ctx) = 4;
      }
      else if (v2 == 4)
      {
        LODWORD(ctx) = 6;
      }
      else if (*((_BYTE *)value + 5) == 3)
      {
        LODWORD(ctx) = 7;
      }
      else
      {
        LODWORD(ctx) = 5;
      }
    }
  }
  return ctx;
}

BOOL JSValueIsUndefined(JSContextRef ctx, JSValueRef value)
{
  return ctx && value == (JSValueRef)10;
}

BOOL JSValueIsNull(JSContextRef ctx, JSValueRef value)
{
  BOOL v2;
  BOOL v3;

  if (value)
    v2 = value == (JSValueRef)2;
  else
    v2 = 1;
  v3 = v2;
  return ctx && v3;
}

BOOL JSValueIsBoolean(JSContextRef ctx, JSValueRef value)
{
  return ctx && ((unint64_t)value & 0xFFFFFFFFFFFFFFFELL) == 6;
}

BOOL JSValueIsNumber(JSContextRef ctx, JSValueRef value)
{
  BOOL v2;

  if (ctx)
    v2 = (unint64_t)value >> 49 == 0;
  else
    v2 = 1;
  return !v2;
}

BOOL JSValueIsString(JSContextRef ctx, JSValueRef value)
{
  BOOL result;

  result = 0;
  if (ctx && value && ((unint64_t)value & 0xFFFE000000000002) == 0)
    return *((_BYTE *)value + 5) == 2;
  return result;
}

BOOL JSValueIsObject(JSContextRef ctx, JSValueRef value)
{
  BOOL result;

  result = 0;
  if (ctx && value && ((unint64_t)value & 0xFFFE000000000002) == 0)
    return *((unsigned __int8 *)value + 5) > 0x16u;
  return result;
}

BOOL JSValueIsSymbol(JSContextRef ctx, JSValueRef value)
{
  BOOL result;

  result = 0;
  if (ctx && value && ((unint64_t)value & 0xFFFE000000000002) == 0)
    return *((_BYTE *)value + 5) == 4;
  return result;
}

BOOL JSValueIsBigInt(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1 && a2 && (a2 & 0xFFFE000000000002) == 0)
    return *(_BYTE *)(a2 + 5) == 3;
  return result;
}

BOOL JSValueIsArray(JSContextRef ctx, JSValueRef value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v20;

  if (!ctx)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, ctx, v2, v3, v4, v5, v6, v7, v8);
  v17 = 2;
  if (value)
    v17 = (uint64_t)value;
  v18 = (v17 & 0xFFFE000000000002) == 0 && (*(_BYTE *)(v17 + 5) & 0xFE) == 36;
  JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
  return v18;
}

BOOL JSValueIsDate(JSContextRef ctx, JSValueRef value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v20;

  if (!ctx)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, ctx, v2, v3, v4, v5, v6, v7, v8);
  v17 = 2;
  if (value)
    v17 = (uint64_t)value;
  v18 = (v17 & 0xFFFE000000000002) == 0
     && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C));
  JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
  return v18;
}

BOOL JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char **v21;
  OpaqueJSClass **v22;
  OpaqueJSClass *v23;
  OpaqueJSClass **v25;
  OpaqueJSClass *v26;
  OpaqueJSClass **v28;
  OpaqueJSClass *v29;
  unsigned int *v32;

  v9 = 0;
  if (ctx && jsClass)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, ctx, (uint64_t)jsClass, v3, v4, v5, v6, v7, v8);
    v19 = 2;
    if (value)
      v19 = (uint64_t)value;
    if ((v19 & 0xFFFE000000000002) == 0)
    {
      v9 = 0;
      v20 = *(unsigned __int8 *)(v19 + 5);
      if (v20 < 0x17)
        goto LABEL_34;
      if (v20 == 32)
        v19 = *(_QWORD *)(v19 + 16);
      v21 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
      if (v21 == &JSC::JSCallbackObject<JSC::JSGlobalObject>::s_info)
      {
        v22 = (OpaqueJSClass **)(*(_QWORD *)(v19 + 3296) + 8);
        do
        {
          v23 = *v22;
          v9 = *v22 != 0;
          v22 = (OpaqueJSClass **)((char *)*v22 + 8);
        }
        while (v23 != jsClass && v23 != 0);
        goto LABEL_34;
      }
      if (v21 == &JSC::JSCallbackObject<JSC::JSNonFinalObject>::s_info)
      {
        v25 = (OpaqueJSClass **)(*(_QWORD *)(v19 + 16) + 8);
        do
        {
          v26 = *v25;
          v9 = *v25 != 0;
          v25 = (OpaqueJSClass **)((char *)*v25 + 8);
        }
        while (v26 != jsClass && v26 != 0);
        goto LABEL_34;
      }
      if (v21 == &JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info)
      {
        v28 = (OpaqueJSClass **)(*(_QWORD *)(v19 + 24) + 8);
        do
        {
          v29 = *v28;
          v9 = *v28 != 0;
          v28 = (OpaqueJSClass **)((char *)*v28 + 8);
        }
        while (v29 != jsClass && v29 != 0);
        goto LABEL_34;
      }
    }
    v9 = 0;
LABEL_34:
    JSC::JSLockHolder::~JSLockHolder(&v32, v12, v13, v14, v15, v16, v17, v18);
  }
  return v9;
}

BOOL JSValueIsEqual(JSContextRef ctx, JSValueRef a, JSValueRef b, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSValueRef *v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;

  if (!ctx)
    return 0;
  v13 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v27, (JSC::VM *)v13, (uint64_t)b, (uint64_t)exception, v4, v5, v6, v7, v8);
  if (a)
    v20 = (unint64_t)a;
  else
    v20 = 2;
  if (b)
    v21 = (unint64_t)b;
  else
    v21 = 2;
  if (v20 < 0xFFFE000000000000 || v21 < 0xFFFE000000000000)
    v22 = JSC::JSValue::equalSlowCase((JSC::VM **)ctx, (JSC::JSBigInt *)v20, (JSC::JSBigInt *)v21, v14, v15, v16, v17, v18, v19);
  else
    v22 = v20 == v21;
  v23 = (JSValueRef *)*((_QWORD *)v13 + 2);
  if (v23)
  {
    if (exception)
      *exception = v23[1];
    *((_QWORD *)v13 + 2) = 0;
    v25 = v13 + 20;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 & 0xFFFFFFEF, v25));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v23, v14, v15, v16, v17, v18);
    v22 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v27, (void *)v20, (uint64_t)v23, v14, v15, v16, v17, v18);
  return v22;
}

BOOL JSValueIsStrictEqual(JSContextRef ctx, JSValueRef a, JSValueRef b)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::JSGlobalObject *v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  const WTF::StringImpl *v23;
  BOOL v24;
  double v26;
  double v27;
  unsigned int *v28;

  v9 = ctx;
  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v28, ctx, (uint64_t)b, v3, v4, v5, v6, v7, v8);
    if (a)
      v19 = (unint64_t)a;
    else
      v19 = 2;
    if (b)
      v20 = (unint64_t)b;
    else
      v20 = 2;
    if (v19 >= 0xFFFE000000000000)
    {
      if (v20 >= 0xFFFE000000000000)
      {
LABEL_14:
        v22 = v19 == v20;
LABEL_15:
        LOBYTE(v9) = v22;
        goto LABEL_23;
      }
    }
    else if (!(v19 >> 49))
    {
LABEL_11:
      if (((v20 | v19) & 0xFFFE000000000002) == 0)
      {
        v21 = *(unsigned __int8 *)(v19 + 5);
        if (v21 == 2)
        {
          if (*(_BYTE *)(v20 + 5) == 2)
          {
            if ((*(_QWORD *)(v19 + 8) & 1) != 0
              || (v23 = *(const WTF::StringImpl **)(v20 + 8), (v23 & 1) != 0))
            {
              v24 = JSC::JSString::equalSlowCase((JSC::JSString *)v19, v9, (JSC::JSString *)v20, v13, v14, v15, v16, v17, v18);
            }
            else
            {
              v24 = WTF::equal(*(WTF **)(v19 + 8), v23, (const WTF::StringImpl *)v20);
            }
            goto LABEL_22;
          }
        }
        else if (v21 == 3 && *(_BYTE *)(v20 + 5) == 3)
        {
          v24 = JSC::JSBigInt::equals((JSC::JSBigInt *)v19, (JSC::JSBigInt *)v20, (JSC::JSBigInt *)v20);
LABEL_22:
          LOBYTE(v9) = v24;
LABEL_23:
          JSC::JSLockHolder::~JSLockHolder(&v28, v12, v20, v13, v14, v15, v16, v17);
          return (char)v9;
        }
      }
      goto LABEL_14;
    }
    if (v20 >> 49)
    {
      v26 = (double)(int)v19;
      if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v26 = v19 - 0x2000000000000;
      v27 = (double)(int)v20;
      if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v27 = v20 - 0x2000000000000;
      v22 = v26 == v27;
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return (char)v9;
}

BOOL JSValueIsInstanceOfConstructor(JSContextRef ctx, JSValueRef value, JSObjectRef constructor, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v13;
  void *v14;
  JSValueRef *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char hasInstance;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;

  if (ctx)
  {
    v13 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, (JSC::VM *)v13, (uint64_t)constructor, (uint64_t)exception, v4, v5, v6, v7, v8);
    if ((*(_WORD *)(16 * (*(_DWORD *)constructor & 0xFFFFFFFE) + 0xC) & 1) != 0)
    {
      if (!value)
        value = (JSValueRef)2;
      v22 = *((_QWORD *)ctx + 7);
      v16 = JSC::JSObject::get((unsigned int *)constructor, (uint64_t)ctx, *(_QWORD *)(*(_QWORD *)(v22 + 41952) + 2688), v16, v17, v18, v19, v20);
      if (!*(_DWORD *)(v22 + 80))
        goto LABEL_8;
      v25 = *(_DWORD *)(v22 + 80);
      if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v23, v16, v17, v18, v19, v20);
        v16 = v28;
      }
      if (*(_QWORD *)(v22 + 16))
        hasInstance = 0;
      else
LABEL_8:
        hasInstance = JSC::JSObject::hasInstance((unsigned int *)constructor, ctx, (uint64_t)value, v16, v17, v18, v19, v20);
      v15 = (JSValueRef *)*((_QWORD *)v13 + 2);
      if (!v15)
        goto LABEL_10;
      if (exception)
        *exception = v15[1];
      *((_QWORD *)v13 + 2) = 0;
      v26 = v13 + 20;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v15, v16, v17, v18, v19, v20);
    }
    hasInstance = 0;
LABEL_10:
    JSC::JSLockHolder::~JSLockHolder(&v29, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    return hasInstance;
  }
  return 0;
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  if (ctx)
    return (JSValueRef)10;
  else
    return 0;
}

JSValueRef JSValueMakeNull(JSContextRef ctx)
{
  return (JSValueRef)(2 * (ctx != 0));
}

JSValueRef JSValueMakeBoolean(JSContextRef ctx, BOOL BOOLean)
{
  uint64_t v2;

  v2 = 6;
  if (BOOLean)
    v2 = 7;
  if (ctx)
    return (JSValueRef)v2;
  else
    return 0;
}

JSValueRef JSValueMakeNumber(JSValueRef ctx, double number)
{
  uint64_t v3;

  if (ctx)
  {
    if ((*(_QWORD *)&number & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
      || (*(_QWORD *)&number & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
    {
      return (JSValueRef)(*(_QWORD *)&number + 0x2000000000000);
    }
    v3 = (int)number;
    if (number != (double)(int)v3 || !(_DWORD)v3 && (*(_QWORD *)&number & 0x8000000000000000) != 0)
      return (JSValueRef)(*(_QWORD *)&number + 0x2000000000000);
    else
      return (JSValueRef)(v3 | 0xFFFE000000000000);
  }
  return ctx;
}

JSValueRef JSValueMakeSymbol(JSContextRef ctx, JSStringRef description)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::Symbol *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const OpaqueJSValue *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v42;
  unsigned int *v43;

  if (!ctx)
    return 0;
  v10 = (JSC::Symbol *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v43, ctx, v2, v3, v4, v5, v6, v7, v8);
  if (description)
  {
    WTF::String::isolatedCopy((_DWORD *)description + 2, (uint64_t *)&v42);
    v31 = (const OpaqueJSValue *)JSC::Symbol::createWithDescription(v10, (JSC::VM *)&v42, v18, v19, v20, v21, v22, v23);
    v32 = v42;
    v42 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  else
  {
    v31 = (const OpaqueJSValue *)JSC::Symbol::create(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  JSC::JSLockHolder::~JSLockHolder(&v43, v24, v25, v26, v27, v28, v29, v30);
  return v31;
}

_DWORD *OpaqueJSString::string@<X0>(OpaqueJSString *this@<X0>, uint64_t *a2@<X8>)
{
  return WTF::String::isolatedCopy((_DWORD *)this + 2, a2);
}

uint64_t JSBigIntCreateWithDouble(uint64_t a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  JSC::Heap **v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Inspector::JSGlobalObjectInspectorController *v37;
  JSC::Exception *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::Exception *v44;
  WTF::StringImpl *v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD *);
  _QWORD *v56;
  unsigned int *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  _QWORD v61[3];

  if (a1)
  {
    v12 = *(unsigned int **)(a1 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v60, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
    if ((*(_QWORD *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && trunc(a9) == a9)
    {
      if (fabs(a9) <= 9.00719925e15)
        v20 = JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, (uint64_t)a9, v14, v15, v16, v17, v18, v19);
      else
        v20 = (uint64_t)JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v13, a9, v14, v15, v16, v17, v18, v19);
      v27 = v20;
      v44 = (JSC::Exception *)*((_QWORD *)v12 + 2);
      if (!v44)
        goto LABEL_16;
      if (a2)
        *a2 = (JSC::VM *)*((_QWORD *)v44 + 1);
      *((_QWORD *)v12 + 2) = 0;
      v57 = v12 + 20;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 & 0xFFFFFFEF, v57));
      Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v44, v22, v23, v24, v25, v26);
    }
    else
    {
      v28 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v28 = 0xE00000002;
      *(_QWORD *)(v28 + 8) = "Not an integer";
      *(_DWORD *)(v28 + 16) = 4;
      v59 = (WTF::StringImpl *)v28;
      v29 = *(_QWORD *)(a1 + 128);
      v30 = *(JSC::Heap ***)(a1 + 56);
      if ((v29 & 1) != 0)
      {
        v55 = *(uint64_t (**)(_QWORD *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
        v56 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v56 = (_QWORD *)(a1 - 16);
        v61[0] = *v56;
        v61[1] = a1;
        v61[2] = a1 + 128;
        v29 = v55(v61);
      }
      v31 = (JSC::VM *)JSC::ErrorInstance::create(v30, v29, &v59, 0, 0, 0, 2, 1);
      if (a2)
        *a2 = v31;
      v37 = *(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024);
      v38 = (JSC::Exception *)JSC::Exception::create(*(_QWORD *)(a1 + 56), v31, 0, v32, v33, v34, v35, v36);
      Inspector::JSGlobalObjectInspectorController::reportAPIException(v37, (JSC::JSGlobalObject *)a1, v38, v39, v40, v41, v42, v43);
      v45 = v59;
      v59 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, v21, (uint64_t)v44, v22, v23, v24, v25, v26);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    v27 = 0;
LABEL_16:
    JSC::JSLockHolder::~JSLockHolder(&v60, v21, (uint64_t)v44, v22, v23, v24, v25, v26);
    return v27;
  }
  return 0;
}

unint64_t JSBigIntCreateWithUInt64(JSC::JSGlobalObject **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  JSC::Exception *v28;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;

  if (!a1)
    return 0;
  v12 = (unsigned int *)a1[7];
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v33, (JSC::VM *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v18 = a1[7];
  if (a2)
  {
    v26 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v13, v14, v15, v16, v17);
    if (!*((_DWORD *)v18 + 20))
      goto LABEL_4;
    v32 = *((_DWORD *)v18 + 20);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v18 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*((_QWORD *)v18 + 2))
    {
      v26 = 0;
    }
    else
    {
LABEL_4:
      v27 = *(_QWORD *)(v26 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v27 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v27 = a2;
      *(_BYTE *)(v26 + 16) = 0;
    }
  }
  else
  {
    v26 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v13, v14, v15, v16, v17);
  }
  v28 = (JSC::Exception *)*((_QWORD *)v12 + 2);
  if (v28)
  {
    if (a3)
      *a3 = *((_QWORD *)v28 + 1);
    *((_QWORD *)v12 + 2) = 0;
    v30 = v12 + 20;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 & 0xFFFFFFEF, v30));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(a1[253], (JSC::JSGlobalObject *)a1, v28, v21, v22, v23, v24, v25);
    v26 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v33, v19, (uint64_t)v28, v21, v22, v23, v24, v25);
  return v26;
}

uint64_t JSBigIntCreateWithInt64(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Exception *v26;
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;

  if (!a1)
    return 0;
  v12 = *(unsigned int **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v31, (JSC::VM *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v19 = JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, a2, v13, v14, v15, v16, v17, v18);
  v26 = (JSC::Exception *)*((_QWORD *)v12 + 2);
  if (v26)
  {
    if (a3)
      *a3 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v12 + 2) = 0;
    v29 = v12 + 20;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 & 0xFFFFFFEF, v29));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v26, v21, v22, v23, v24, v25);
    v27 = 0;
  }
  else
  {
    v27 = v19;
  }
  JSC::JSLockHolder::~JSLockHolder(&v31, v20, (uint64_t)v26, v21, v22, v23, v24, v25);
  return v27;
}

JSC::JSBigInt *JSBigIntCreateWithString(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSBigInt *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::JSBigInt *v25;
  JSC::Exception *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;

  if (!a1)
    return 0;
  v12 = *(unsigned int **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v39, (JSC::VM *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  WTF::String::isolatedCopy((_DWORD *)(a2 + 8), &v38);
  v14 = (WTF::StringImpl *)v38;
  if (v38)
  {
    v15 = *(_QWORD *)(v38 + 8);
    v16 = *(unsigned int *)(v38 + 4);
    if ((*(_BYTE *)(v38 + 16) & 4) != 0)
      v17 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)a1, v15, v16, 0, v13);
    else
      v17 = JSC::JSBigInt::parseInt<char16_t>((JSC::JSBigInt *)a1, v15, v16, 0);
    v25 = v17;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v25 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)a1, 0, 0, 0, v13);
  }
  v26 = (JSC::Exception *)*((_QWORD *)v12 + 2);
  if (v26)
  {
    if (a3)
      *a3 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v12 + 2) = 0;
    v36 = v12 + 20;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 & 0xFFFFFFEF, v36));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v26, v20, v21, v22, v23, v24);
    v25 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v39, v18, (uint64_t)v26, v20, v21, v22, v23, v24);
  return v25;
}

uint64_t JSValueToUInt64(JSC::JSGlobalObject *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  JSC::Exception *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  double v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  double v40;
  unsigned int *v41;
  JSC::JSObject *v42;

  v9 = (uint64_t)a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v20 = *(_QWORD *)(v9 + 56);
    if (a2)
      v21 = a2;
    else
      v21 = 2;
    if (v21 >> 49)
    {
LABEL_6:
      v22 = *(JSC::Exception **)(v20 + 16);
      if (v22)
      {
        if (a3)
          *a3 = *((_QWORD *)v22 + 1);
        *(_QWORD *)(v20 + 16) = 0;
        v33 = (unsigned int *)(v20 + 80);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 & 0xFFFFFFEF, v33));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18);
      }
      else if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 3)
      {
        *(_QWORD *)&v25 = a2 - 0x2000000000000;
        if (a2 > 0xFFFDFFFFFFFFFFFFLL)
          v25 = (double)(int)a2;
        v26 = (*(_QWORD *)&v25 >> 52) & 0x7FFLL;
        if ((v26 - 1023) <= 0x73)
        {
          v27 = *(_QWORD *)&v25 >> (51 - (*(_QWORD *)&v25 >> 52));
          if (v26 > 0x433)
            v27 = *(_QWORD *)&v25 << ((*(_QWORD *)&v25 >> 52) - 51);
          if (v26 >= 0x43F)
            v28 = v27;
          else
            v28 = (v27 & ((1 << ((*(_QWORD *)&v25 >> 52) + 1)) - 1))
                + (1 << ((*(_QWORD *)&v25 >> 52) + 1));
          if (v25 >= 0.0)
            v9 = v28;
          else
            v9 = -v28;
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)(a2 + 8))
      {
        v23 = *(_QWORD *)(a2 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)v23;
        if (*(_BYTE *)(a2 + 16))
          v9 = -v24;
        else
          v9 = v24;
        goto LABEL_28;
      }
      v9 = 0;
LABEL_28:
      JSC::JSLockHolder::~JSLockHolder(&v41, v12, (uint64_t)v22, v14, v15, v16, v17, v18);
      return v9;
    }
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v30 = *(unsigned __int8 *)(v21 + 5);
      if (v30 == 3)
        goto LABEL_61;
      if (v30 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v21, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
        if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v32 = (int)v31, v31 == (double)(int)v32)
          && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
        {
          a2 = v32 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v31 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    }
    v42 = (JSC::JSObject *)v21;
    if (*(_DWORD *)(v20 + 80))
    {
      v37 = v21;
      v38 = *(_DWORD *)(v20 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v21 = v37;
      if (*(_QWORD *)(v20 + 16))
      {
LABEL_67:
        v21 = 0;
        goto LABEL_61;
      }
    }
    if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        if (v21 >= 0xFFFE000000000000)
        {
          v35 = (double)(int)v21;
LABEL_54:
          if (!*(_DWORD *)(v20 + 80))
            goto LABEL_58;
          v40 = v35;
          v39 = *(_DWORD *)(v20 + 80);
          if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v13, v14, v15, v16, v17, v18);
          v35 = v40;
          if (!*(_QWORD *)(v20 + 16))
          {
LABEL_58:
            if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v36 = (int)v35, v35 == (double)(int)v36)
              && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
            {
              v21 = v36 | 0xFFFE000000000000;
            }
            else
            {
              v21 = *(_QWORD *)&v35 + 0x2000000000000;
            }
            goto LABEL_61;
          }
          goto LABEL_67;
        }
LABEL_53:
        JSC::JSValue::toNumberSlowCase(&v42, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
        goto LABEL_54;
      }
      if (*(_BYTE *)(v21 + 5) != 3)
        goto LABEL_53;
    }
LABEL_61:
    a2 = v21;
    goto LABEL_6;
  }
  return v9;
}

uint64_t JSValueToInt64(JSC::JSGlobalObject *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  JSC::Exception *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  double v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  double v40;
  unsigned int *v41;
  JSC::JSObject *v42;

  v9 = (uint64_t)a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v20 = *(_QWORD *)(v9 + 56);
    if (a2)
      v21 = a2;
    else
      v21 = 2;
    if (v21 >> 49)
    {
LABEL_6:
      v22 = *(JSC::Exception **)(v20 + 16);
      if (v22)
      {
        if (a3)
          *a3 = *((_QWORD *)v22 + 1);
        *(_QWORD *)(v20 + 16) = 0;
        v33 = (unsigned int *)(v20 + 80);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 & 0xFFFFFFEF, v33));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18);
      }
      else if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 3)
      {
        *(_QWORD *)&v25 = a2 - 0x2000000000000;
        if (a2 > 0xFFFDFFFFFFFFFFFFLL)
          v25 = (double)(int)a2;
        v26 = (*(_QWORD *)&v25 >> 52) & 0x7FFLL;
        if ((v26 - 1023) <= 0x73)
        {
          v27 = *(_QWORD *)&v25 >> (51 - (*(_QWORD *)&v25 >> 52));
          if (v26 > 0x433)
            v27 = *(_QWORD *)&v25 << ((*(_QWORD *)&v25 >> 52) - 51);
          if (v26 >= 0x43F)
            v28 = v27;
          else
            v28 = (v27 & ((1 << ((*(_QWORD *)&v25 >> 52) + 1)) - 1))
                + (1 << ((*(_QWORD *)&v25 >> 52) + 1));
          if (v25 >= 0.0)
            v9 = v28;
          else
            v9 = -v28;
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)(a2 + 8))
      {
        v23 = *(_QWORD *)(a2 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)v23;
        if (*(_BYTE *)(a2 + 16))
          v9 = -v24;
        else
          v9 = v24;
        goto LABEL_28;
      }
      v9 = 0;
LABEL_28:
      JSC::JSLockHolder::~JSLockHolder(&v41, v12, (uint64_t)v22, v14, v15, v16, v17, v18);
      return v9;
    }
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v30 = *(unsigned __int8 *)(v21 + 5);
      if (v30 == 3)
        goto LABEL_61;
      if (v30 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v21, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
        if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v32 = (int)v31, v31 == (double)(int)v32)
          && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
        {
          a2 = v32 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v31 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    }
    v42 = (JSC::JSObject *)v21;
    if (*(_DWORD *)(v20 + 80))
    {
      v37 = v21;
      v38 = *(_DWORD *)(v20 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v21 = v37;
      if (*(_QWORD *)(v20 + 16))
      {
LABEL_67:
        v21 = 0;
        goto LABEL_61;
      }
    }
    if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        if (v21 >= 0xFFFE000000000000)
        {
          v35 = (double)(int)v21;
LABEL_54:
          if (!*(_DWORD *)(v20 + 80))
            goto LABEL_58;
          v40 = v35;
          v39 = *(_DWORD *)(v20 + 80);
          if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v13, v14, v15, v16, v17, v18);
          v35 = v40;
          if (!*(_QWORD *)(v20 + 16))
          {
LABEL_58:
            if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v36 = (int)v35, v35 == (double)(int)v36)
              && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
            {
              v21 = v36 | 0xFFFE000000000000;
            }
            else
            {
              v21 = *(_QWORD *)&v35 + 0x2000000000000;
            }
            goto LABEL_61;
          }
          goto LABEL_67;
        }
LABEL_53:
        JSC::JSValue::toNumberSlowCase(&v42, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
        goto LABEL_54;
      }
      if (*(_BYTE *)(v21 + 5) != 3)
        goto LABEL_53;
    }
LABEL_61:
    a2 = v21;
    goto LABEL_6;
  }
  return v9;
}

uint64_t JSValueToUInt32(JSC::JSGlobalObject *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  JSC::VM *v20;
  unint64_t v21;
  JSC *v22;
  JSC::JSBigInt *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  int v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v40;
  double v41;
  JSC::VM *v42;
  unsigned int *v43;
  JSC::JSObject *v44;

  if (!a1)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v43, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v42 = v20;
  if (a2)
    v21 = a2;
  else
    v21 = 2;
  if (!(v21 >> 49))
  {
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v33 = *(unsigned __int8 *)(v21 + 5);
      if (v33 == 3)
      {
LABEL_16:
        a2 = v21;
        goto LABEL_6;
      }
      if (v33 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v21, a1, v13, v14, v15, v16, v17, v18, v19);
        if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v35 = (int)v34, v34 == (double)(int)v35)
          && ((_DWORD)v35 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
        {
          a2 = v35 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v34 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)a1, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    }
    v44 = (JSC::JSObject *)v21;
    if (*((_DWORD *)v20 + 20))
    {
      v38 = v21;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v20, v12, v13, v14, v15, v16, v17, v18);
      v21 = v38;
      if (hasExceptionsAfterHandlingTraps)
      {
LABEL_43:
        v21 = 0;
        goto LABEL_16;
      }
    }
    if (v21 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_16;
    if ((v21 & 0xFFFE000000000002) != 0)
    {
      if (v21 >= 0xFFFE000000000000)
      {
        v36 = (double)(int)v21;
LABEL_35:
        if (!*((_DWORD *)v20 + 20)
          || (v41 = v36,
              v40 = JSC::VM::hasExceptionsAfterHandlingTraps(v20, v12, v13, v14, v15, v16, v17, v18),
              v36 = v41,
              !v40))
        {
          if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v37 = (int)v36, v36 == (double)(int)v37)
            && ((_DWORD)v37 || (*(_QWORD *)&v36 & 0x8000000000000000) == 0))
          {
            v21 = v37 | 0xFFFE000000000000;
          }
          else
          {
            v21 = *(_QWORD *)&v36 + 0x2000000000000;
          }
          goto LABEL_16;
        }
        goto LABEL_43;
      }
    }
    else if (*(_BYTE *)(v21 + 5) == 3)
    {
      goto LABEL_16;
    }
    JSC::JSValue::toNumberSlowCase(&v44, a1, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_35;
  }
LABEL_6:
  v22 = (JSC *)handleExceptionIfNeeded((uint64_t *)&v42, (Inspector::JSGlobalObjectInspectorController **)a1, a3, v14, v15, v16, v17, v18);
  if ((_DWORD)v22)
  {
    if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 3)
    {
      v31 = JSC::JSBigInt::toBigUInt64Heap((JSC::JSBigInt *)a2, v23);
    }
    else
    {
      v30 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v30 = a2 - 0x2000000000000;
      v31 = JSC::toUInt32(v22, v30);
    }
  }
  else
  {
    v31 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v43, v23, v24, v25, v26, v27, v28, v29);
  return v31;
}

uint64_t JSValueToInt32(JSC::JSGlobalObject *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  JSC::JSBigInt *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  JSC::Exception *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v37;
  double v38;
  unsigned int *v39;
  JSC::JSObject *v40;

  v9 = (uint64_t)a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v39, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v20 = *(_QWORD *)(v9 + 56);
    if (a2)
      v21 = a2;
    else
      v21 = 2;
    if (v21 >> 49)
    {
LABEL_6:
      v22 = *(JSC::Exception **)(v20 + 16);
      if (v22)
      {
        if (a3)
          *a3 = *((_QWORD *)v22 + 1);
        *(_QWORD *)(v20 + 16) = 0;
        v29 = (unsigned int *)(v20 + 80);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 & 0xFFFFFFEF, v29));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18);
      }
      else
      {
        if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 3)
        {
          v9 = JSC::JSBigInt::toBigUInt64Heap((JSC::JSBigInt *)a2, v12);
          goto LABEL_21;
        }
        *(_QWORD *)&v23 = a2 - 0x2000000000000;
        if (a2 > 0xFFFDFFFFFFFFFFFFLL)
          v23 = (double)(int)a2;
        v24 = (*(_QWORD *)&v23 >> 52) & 0x7FFLL;
        if ((v24 - 1023) <= 0x53)
        {
          v25 = *(_QWORD *)&v23 >> (51 - (*(_QWORD *)&v23 >> 52));
          if (v24 > 0x433)
            LODWORD(v25) = *(_QWORD *)&v23 << ((*(_QWORD *)&v23 >> 52) - 51);
          if (v24 >= 0x41F)
            v26 = v25;
          else
            v26 = (((1 << ((*(_QWORD *)&v23 >> 52) + 1)) - 1) & v25) + (1 << ((*(_QWORD *)&v23 >> 52) + 1));
          if (v23 >= 0.0)
            v9 = v26;
          else
            v9 = -v26;
          goto LABEL_21;
        }
      }
      v9 = 0;
LABEL_21:
      JSC::JSLockHolder::~JSLockHolder(&v39, v12, (uint64_t)v22, v14, v15, v16, v17, v18);
      return v9;
    }
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(v21 + 5);
      if (v28 == 3)
      {
LABEL_25:
        a2 = v21;
        goto LABEL_6;
      }
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v21, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
        if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v32 = (int)v31, v31 == (double)(int)v32)
          && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
        {
          a2 = v32 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v31 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    }
    v40 = (JSC::JSObject *)v21;
    if (*(_DWORD *)(v20 + 80))
    {
      v35 = v21;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v21 = v35;
      if (hasExceptionsAfterHandlingTraps)
      {
LABEL_55:
        v21 = 0;
        goto LABEL_25;
      }
    }
    if (v21 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_25;
    if ((v21 & 0xFFFE000000000002) != 0)
    {
      if (v21 >= 0xFFFE000000000000)
      {
        v33 = (double)(int)v21;
LABEL_47:
        if (!*(_DWORD *)(v20 + 80)
          || (v38 = v33,
              v37 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20, (uint64_t)v12, v13, v14, v15, v16, v17, v18),
              v33 = v38,
              !v37))
        {
          if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v34 = (int)v33, v33 == (double)(int)v34)
            && ((_DWORD)v34 || (*(_QWORD *)&v33 & 0x8000000000000000) == 0))
          {
            v21 = v34 | 0xFFFE000000000000;
          }
          else
          {
            v21 = *(_QWORD *)&v33 + 0x2000000000000;
          }
          goto LABEL_25;
        }
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v21 + 5) == 3)
    {
      goto LABEL_25;
    }
    JSC::JSValue::toNumberSlowCase(&v40, (JSC::JSGlobalObject *)v9, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_47;
  }
  return v9;
}

uint64_t JSValueCompareUInt64(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::Exception *v23;
  unsigned int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  double v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  double v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  double v50;
  unsigned int *v51;
  JSC::JSObject *v52;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v51, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v21 = *(_QWORD *)(a1 + 56);
    if (a2)
      v22 = a2;
    else
      v22 = 2;
    if (v22 >> 49)
    {
LABEL_6:
      v23 = *(JSC::Exception **)(v21 + 16);
      if (v23)
      {
        if (a4)
          *a4 = *((_QWORD *)v23 + 1);
        *(_QWORD *)(v21 + 16) = 0;
        v42 = (unsigned int *)(v21 + 80);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 & 0xFFFFFFEF, v42));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v23, v15, v16, v17, v18, v19);
        goto LABEL_49;
      }
      if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 3)
      {
        v24 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::Int64BigIntImpl>(a2, a3, 0);
        if (v24 < 4)
        {
          v25 = dword_19914F570[v24];
LABEL_50:
          JSC::JSLockHolder::~JSLockHolder(&v51, v13, (uint64_t)v23, v15, v16, v17, v18, v19);
          return v25;
        }
LABEL_49:
        v25 = 0;
        goto LABEL_50;
      }
      v26 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v26 = a2 - 0x2000000000000;
      v27 = (*(_QWORD *)&v26 >> 52) & 0x7FFLL;
      if ((_DWORD)v27 == 2047)
      {
        if (v26 == INFINITY)
        {
LABEL_15:
          v25 = 2;
          goto LABEL_50;
        }
        goto LABEL_34;
      }
      if (v26 < 0.0)
        goto LABEL_34;
      if (v26 == 0.0)
      {
        if (a3)
          goto LABEL_34;
      }
      else
      {
        if (!a3)
          goto LABEL_15;
        if (v27 < 0x3FF)
          goto LABEL_34;
        v28 = __clz(a3);
        v29 = v27 - 1022;
        if (64 - v28 < v29)
          goto LABEL_15;
        if (64 - v28 > v29)
          goto LABEL_34;
        v30 = *(_QWORD *)&v26 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
        v31 = v28 | 0xFFFFFFC0;
        v32 = v30 << (11 - v28);
        v33 = v30 >> (v28 - 11);
        v34 = v30 << (75 - v28);
        v35 = __CFADD__(v31, 52);
        v36 = v31 >= 0xFFFFFFCC ? v34 : 0;
        v37 = v35 ? v33 : v32;
        v38 = v37 > a3;
        if (v37 < a3)
        {
LABEL_34:
          v25 = 3;
          goto LABEL_50;
        }
        v25 = 2;
        if (v38 || v36)
          goto LABEL_50;
      }
      v25 = 1;
      goto LABEL_50;
    }
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      v39 = *(unsigned __int8 *)(v22 + 5);
      if (v39 == 3)
        goto LABEL_68;
      if (v39 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v22, (JSC::JSGlobalObject *)a1, v14, v15, v16, v17, v18, v19, v20);
        if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v41 = (int)v40, v40 == (double)(int)v41)
          && ((_DWORD)v41 || (*(_QWORD *)&v40 & 0x8000000000000000) == 0))
        {
          a2 = v41 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v40 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v22 = JSC::JSCell::toPrimitive(v22, (JSC::VM **)a1, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v52 = (JSC::JSObject *)v22;
    if (*(_DWORD *)(v21 + 80))
    {
      v47 = v22;
      v48 = *(_DWORD *)(v21 + 80);
      if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v22 = v47;
      if (*(_QWORD *)(v21 + 16))
      {
LABEL_74:
        v22 = 0;
        goto LABEL_68;
      }
    }
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      if ((v22 & 0xFFFE000000000002) != 0)
      {
        if (v22 >= 0xFFFE000000000000)
        {
          v45 = (double)(int)v22;
LABEL_61:
          if (!*(_DWORD *)(v21 + 80))
            goto LABEL_65;
          v50 = v45;
          v49 = *(_DWORD *)(v21 + 80);
          if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
          v45 = v50;
          if (!*(_QWORD *)(v21 + 16))
          {
LABEL_65:
            if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v46 = (int)v45, v45 == (double)(int)v46)
              && ((_DWORD)v46 || (*(_QWORD *)&v45 & 0x8000000000000000) == 0))
            {
              v22 = v46 | 0xFFFE000000000000;
            }
            else
            {
              v22 = *(_QWORD *)&v45 + 0x2000000000000;
            }
            goto LABEL_68;
          }
          goto LABEL_74;
        }
LABEL_60:
        JSC::JSValue::toNumberSlowCase(&v52, (JSC::JSGlobalObject *)a1, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_61;
      }
      if (*(_BYTE *)(v22 + 5) != 3)
        goto LABEL_60;
    }
LABEL_68:
    a2 = v22;
    goto LABEL_6;
  }
  return 0;
}

uint64_t JSValueCompareInt64(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::Exception *v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  double v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  double v49;
  unsigned int *v50;
  JSC::JSObject *v51;

  v9 = (uint64_t)a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v50, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v21 = *(_QWORD *)(v9 + 56);
    if (a2)
      v22 = a2;
    else
      v22 = 2;
    if (v22 >> 49)
    {
LABEL_6:
      v23 = *(JSC::Exception **)(v21 + 16);
      if (v23)
      {
        if (a4)
          *a4 = *((_QWORD *)v23 + 1);
        *(_QWORD *)(v21 + 16) = 0;
        v41 = (unsigned int *)(v21 + 80);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 & 0xFFFFFFEF, v41));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v23, v15, v16, v17, v18, v19);
        goto LABEL_59;
      }
      if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 3)
      {
        v24 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::Int64BigIntImpl>(a2, a3, a3 < 0);
        if (v24 < 4)
        {
          v9 = dword_19914F570[v24];
LABEL_60:
          JSC::JSLockHolder::~JSLockHolder(&v50, v13, (uint64_t)v23, v15, v16, v17, v18, v19);
          return v9;
        }
LABEL_59:
        v9 = 0;
        goto LABEL_60;
      }
      v25 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v25 = a2 - 0x2000000000000;
      v26 = (*(_QWORD *)&v25 >> 52) & 0x7FFLL;
      if ((_DWORD)v26 == 2047)
      {
        if (v25 != INFINITY)
          goto LABEL_23;
        goto LABEL_21;
      }
      if (a3 < 0 == v25 >= 0.0)
        goto LABEL_20;
      if (v25 == 0.0)
      {
        if (!a3)
        {
          v9 = 1;
          goto LABEL_60;
        }
        goto LABEL_23;
      }
      if (!a3)
        goto LABEL_21;
      v27 = v26 - 1022;
      if (v26 <= 0x3FE)
      {
LABEL_20:
        if ((a3 & 0x8000000000000000) == 0)
        {
LABEL_23:
          v9 = 3;
          goto LABEL_60;
        }
LABEL_21:
        v9 = 2;
        goto LABEL_60;
      }
      if (a3 >= 0)
        v31 = a3;
      else
        v31 = -a3;
      v32 = __clz(v31);
      if (64 - v32 >= v27)
      {
        if (64 - v32 > v27)
          goto LABEL_20;
        v33 = *(_QWORD *)&v25 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
        v34 = v32 | 0xFFFFFFC0;
        v35 = v33 << (11 - v32);
        v36 = v33 >> (v32 - 11);
        v37 = v33 << (75 - v32);
        v38 = __CFADD__(v34, 52);
        v39 = v34 >= 0xFFFFFFCC ? v37 : 0;
        v40 = v38 ? v36 : v35;
        if (v31 > v40)
          goto LABEL_20;
        if (v31 >= v40)
        {
          if (v39)
            v9 = 2;
          else
            v9 = 1;
          if ((a3 & 0x8000000000000000) == 0 || !v39)
            goto LABEL_60;
          goto LABEL_23;
        }
      }
      if (a3 < 0)
        goto LABEL_23;
      goto LABEL_21;
    }
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(v22 + 5);
      if (v28 == 3)
        goto LABEL_78;
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v22, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v20);
        if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v30 = (int)v29, v29 == (double)(int)v30)
          && ((_DWORD)v30 || (*(_QWORD *)&v29 & 0x8000000000000000) == 0))
        {
          a2 = v30 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v29 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v22 = JSC::JSCell::toPrimitive(v22, (JSC::VM **)v9, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v51 = (JSC::JSObject *)v22;
    if (*(_DWORD *)(v21 + 80))
    {
      v46 = v22;
      v47 = *(_DWORD *)(v21 + 80);
      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v22 = v46;
      if (*(_QWORD *)(v21 + 16))
      {
LABEL_84:
        v22 = 0;
        goto LABEL_78;
      }
    }
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      if ((v22 & 0xFFFE000000000002) != 0)
      {
        if (v22 >= 0xFFFE000000000000)
        {
          v44 = (double)(int)v22;
LABEL_71:
          if (!*(_DWORD *)(v21 + 80))
            goto LABEL_75;
          v49 = v44;
          v48 = *(_DWORD *)(v21 + 80);
          if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
          v44 = v49;
          if (!*(_QWORD *)(v21 + 16))
          {
LABEL_75:
            if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v45 = (int)v44, v44 == (double)(int)v45)
              && ((_DWORD)v45 || (*(_QWORD *)&v44 & 0x8000000000000000) == 0))
            {
              v22 = v45 | 0xFFFE000000000000;
            }
            else
            {
              v22 = *(_QWORD *)&v44 + 0x2000000000000;
            }
            goto LABEL_78;
          }
          goto LABEL_84;
        }
LABEL_70:
        JSC::JSValue::toNumberSlowCase(&v51, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_71;
      }
      if (*(_BYTE *)(v22 + 5) != 3)
        goto LABEL_70;
    }
LABEL_78:
    a2 = v22;
    goto LABEL_6;
  }
  return v9;
}

uint64_t JSValueCompareDouble(JSC::JSGlobalObject *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::Exception *v23;
  unsigned int v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  double v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  double v37;
  unsigned int *v38;
  JSC::JSObject *v39;

  v9 = (uint64_t)a1;
  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v38, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v21 = *(_QWORD *)(v9 + 56);
    if (a2)
      v22 = a2;
    else
      v22 = 2;
    if (v22 >> 49)
    {
LABEL_6:
      v23 = *(JSC::Exception **)(v21 + 16);
      if (v23)
      {
        if (a3)
          *a3 = *((_QWORD *)v23 + 1);
        *(_QWORD *)(v21 + 16) = 0;
        v29 = (unsigned int *)(v21 + 80);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 & 0xFFFFFFEF, v29));
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v23, v15, v16, v17, v18, v19);
      }
      else
      {
        if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 3)
        {
          v25 = (double)(int)a2;
          if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v25 = a2 - 0x2000000000000;
          if (v25 == a9)
          {
            v9 = 1;
          }
          else if (v25 >= a9)
          {
            v9 = 2;
          }
          else
          {
            v9 = 3;
          }
          goto LABEL_32;
        }
        v24 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(a2, a9);
        if (v24 < 4)
        {
          v9 = dword_19914F570[v24];
LABEL_32:
          JSC::JSLockHolder::~JSLockHolder(&v38, v13, (uint64_t)v23, v15, v16, v17, v18, v19);
          return v9;
        }
      }
      v9 = 0;
      goto LABEL_32;
    }
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      v26 = *(unsigned __int8 *)(v22 + 5);
      if (v26 == 3)
        goto LABEL_50;
      if (v26 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v22, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v20);
        if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v28 = (int)v27, v27 == (double)(int)v28)
          && ((_DWORD)v28 || (*(_QWORD *)&v27 & 0x8000000000000000) == 0))
        {
          a2 = v28 | 0xFFFE000000000000;
        }
        else
        {
          a2 = *(_QWORD *)&v27 + 0x2000000000000;
        }
        goto LABEL_6;
      }
      v22 = JSC::JSCell::toPrimitive(v22, (JSC::VM **)v9, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v39 = (JSC::JSObject *)v22;
    if (*(_DWORD *)(v21 + 80))
    {
      v34 = v22;
      v35 = *(_DWORD *)(v21 + 80);
      if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v22 = v34;
      if (*(_QWORD *)(v21 + 16))
      {
LABEL_56:
        v22 = 0;
        goto LABEL_50;
      }
    }
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      if ((v22 & 0xFFFE000000000002) != 0)
      {
        if (v22 >= 0xFFFE000000000000)
        {
          v32 = (double)(int)v22;
LABEL_43:
          if (!*(_DWORD *)(v21 + 80))
            goto LABEL_47;
          v37 = v32;
          v36 = *(_DWORD *)(v21 + 80);
          if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v14, v15, v16, v17, v18, v19);
          v32 = v37;
          if (!*(_QWORD *)(v21 + 16))
          {
LABEL_47:
            if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v33 = (int)v32, v32 == (double)(int)v33)
              && ((_DWORD)v33 || (*(_QWORD *)&v32 & 0x8000000000000000) == 0))
            {
              v22 = v33 | 0xFFFE000000000000;
            }
            else
            {
              v22 = *(_QWORD *)&v32 + 0x2000000000000;
            }
            goto LABEL_50;
          }
          goto LABEL_56;
        }
LABEL_42:
        JSC::JSValue::toNumberSlowCase(&v39, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_43;
      }
      if (*(_BYTE *)(v22 + 5) != 3)
        goto LABEL_42;
    }
LABEL_50:
    a2 = v22;
    goto LABEL_6;
  }
  return v9;
}

uint64_t JSValueCompare(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  char v21;
  const WTF::String *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int **v26;
  int **v27;
  int v28;
  double v29;
  BOOL v30;
  unint64_t v31;
  double v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  int v38;
  int v39;
  JSC::JSObject *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int **v44;
  int **v45;
  int v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  _BOOL4 v51;
  int v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  int v56;
  JSC::JSObject *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  JSC::Exception *v61;
  unsigned int v62;
  int **v64;
  int **v65;
  int **v66;
  int **v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  double v90;
  double v91;
  unint64_t v92;
  int **v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  JSC::JSBigInt *v97;
  int v98;
  BOOL v99;
  unint64_t v100;
  double v101;
  int **v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  JSC::JSBigInt *v106;
  BOOL v107;
  int **v108;
  int *v109;
  uint64_t v110;
  unint64_t v111;
  JSC::JSBigInt *v112;
  int **v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  JSC::JSBigInt *v117;
  double v118;
  uint64_t v119;
  int v120;
  double v121;
  uint64_t v122;
  double v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unsigned int *v148;
  unint64_t v149;
  uint64_t v150;
  JSC::JSObject *v151[2];

  v9 = (uint64_t)a1;
  if (a1)
  {
    v11 = a3;
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v148, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v20 = *(_QWORD *)(v9 + 56);
    if (!a2)
      a2 = 2;
    if (!v11)
      v11 = 2;
    if (a2 < 0xFFFE000000000000 || v11 < 0xFFFE000000000000)
      v21 = JSC::JSValue::equalSlowCase((JSC::VM **)v9, (JSC::JSBigInt *)a2, (JSC::JSBigInt *)v11, v14, v15, v16, v17, v18, v19);
    else
      v21 = a2 == v11;
    v22 = *(const WTF::String **)(v20 + 16);
    if (v22)
    {
      if (a4)
        *a4 = *((_QWORD *)v22 + 1);
      *(_QWORD *)(v20 + 16) = 0;
      v68 = (unsigned int *)(v20 + 80);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 & 0xFFFFFFEF, v68));
      goto LABEL_170;
    }
    if ((v21 & 1) != 0)
    {
      v9 = 1;
LABEL_135:
      JSC::JSLockHolder::~JSLockHolder(&v148, v13, (uint64_t)v22, v14, v15, v16, v17, v18);
      return v9;
    }
    v23 = *(_QWORD *)(v9 + 56);
    v24 = a2 >> 49;
    v25 = v11 >> 49;
    v147 = a4;
    if (a2 >= 0xFFFE000000000000)
    {
      if (v11 >= 0xFFFE000000000000)
      {
        v28 = (int)a2 < (int)v11;
LABEL_69:
        v22 = *(const WTF::String **)(v20 + 16);
        if (!v22)
        {
          v43 = *(_QWORD *)(v9 + 56);
          if (v11 >= 0xFFFE000000000000)
          {
            if (a2 >= 0xFFFE000000000000)
            {
              v46 = (int)v11 < (int)a2;
              goto LABEL_128;
            }
            if (!v24)
            {
LABEL_73:
              if ((v11 & 0xFFFE000000000002) != 0)
              {
                v149 = 0;
              }
              else
              {
                if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2 && *(_BYTE *)(a2 + 5) == 2)
                {
                  v44 = (int **)(v11 + 8);
                  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
                    v44 = JSC::JSRopeString::resolveRope(v11, (JSC::JSGlobalObject *)v9, 0, v14, v19, v15, v16, v17, v18);
                  if (!*(_DWORD *)(v43 + 80))
                    goto LABEL_80;
                  v76 = *(_DWORD *)(v43 + 80);
                  if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                  if (*(_QWORD *)(v43 + 16))
                  {
                    v46 = 0;
                  }
                  else
                  {
LABEL_80:
                    v45 = (int **)(a2 + 8);
                    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
                      v45 = JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
                    if (!*(_DWORD *)(v43 + 80))
                      goto LABEL_83;
                    v77 = *(_DWORD *)(v43 + 80);
                    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                    if (*(_QWORD *)(v43 + 16))
                      v46 = 0;
                    else
LABEL_83:
                      v46 = WTF::codePointCompareLessThan((WTF *)v44, (const WTF::String *)v45, v22);
                  }
                  goto LABEL_128;
                }
                v149 = 0;
                v150 = 0;
                v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
              }
              v150 = v11;
              if (*(_DWORD *)(v43 + 80))
              {
                v83 = *(_DWORD *)(v43 + 80);
                if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                if (*(_QWORD *)(v43 + 16))
                {
                  v52 = 0;
                  v50 = 0.0;
                  goto LABEL_103;
                }
                v11 = v150;
              }
              if ((v11 & 0xFFFE000000000002) != 0)
              {
                if (v11 >= 0xFFFE000000000000)
                {
                  v50 = (double)(int)v11;
                  goto LABEL_99;
                }
                if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  *(_QWORD *)&v50 = v11 - 0x2000000000000;
                  goto LABEL_99;
                }
              }
              else if (*(_BYTE *)(v11 + 5) == 3)
              {
                v52 = 1;
                v50 = 0.0;
                goto LABEL_103;
              }
              JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
              v50 = *(double *)v19.i64;
              if (!*(_DWORD *)(v43 + 80))
                goto LABEL_100;
LABEL_99:
              v88 = *(_DWORD *)(v43 + 80);
              if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
              if (*(_QWORD *)(v43 + 16))
              {
                v52 = 0;
              }
              else
              {
LABEL_100:
                v51 = (v150 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v150 + 5) == 2;
                v52 = !v51;
              }
LABEL_103:
              if (*(_DWORD *)(v43 + 80))
              {
                v84 = *(_DWORD *)(v43 + 80);
                if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                if (*(_QWORD *)(v43 + 16))
                  goto LABEL_217;
              }
              v53 = *(_QWORD *)(v9 + 56);
              if ((a2 & 0xFFFE000000000002) == 0)
                a2 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
              v149 = a2;
              if (*(_DWORD *)(v53 + 80))
              {
                v86 = *(_DWORD *)(v53 + 80);
                if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                if (*(_QWORD *)(v53 + 16))
                {
                  v55 = 0;
                  v19.i64[0] = 0;
                  goto LABEL_116;
                }
                a2 = v149;
              }
              if ((a2 & 0xFFFE000000000002) != 0)
              {
                if (a2 >= 0xFFFE000000000000)
                {
                  *(double *)v19.i64 = (double)(int)a2;
                  goto LABEL_112;
                }
                if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  v19.i64[0] = a2 - 0x2000000000000;
                  goto LABEL_112;
                }
LABEL_109:
                JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v149, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
                if (!*(_DWORD *)(v53 + 80))
                  goto LABEL_113;
LABEL_112:
                v146 = v19.i64[0];
                v89 = *(_DWORD *)(v53 + 80);
                if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                v19.i64[0] = v146;
                if (*(_QWORD *)(v53 + 16))
                {
                  v55 = 0;
                }
                else
                {
LABEL_113:
                  v54 = (v149 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v149 + 5) == 2;
                  v55 = !v54;
                }
                goto LABEL_116;
              }
              if (*(_BYTE *)(a2 + 5) != 3)
                goto LABEL_109;
              v55 = 1;
              v19.i64[0] = 0;
LABEL_116:
              if (*(_DWORD *)(v43 + 80))
              {
                v145 = v19.i64[0];
                v87 = *(_DWORD *)(v43 + 80);
                if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                v19.i64[0] = v145;
                if (*(_QWORD *)(v43 + 16))
                  goto LABEL_217;
              }
              v56 = v52 | v55;
              v57 = (JSC::JSObject *)v150;
              if (v56 != 1)
              {
                v66 = (int **)(v150 + 8);
                if ((*(_BYTE *)(v150 + 8) & 1) != 0)
                  v66 = JSC::JSRopeString::resolveRope(v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
                v67 = (int **)(v149 + 8);
                if ((*(_BYTE *)(v149 + 8) & 1) != 0)
                  v67 = JSC::JSRopeString::resolveRope(v149, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
                v46 = WTF::codePointCompareLessThan((WTF *)v66, (const WTF::String *)v67, v22);
                goto LABEL_128;
              }
              if ((v150 & 0xFFFE000000000002) != 0)
              {
                v58 = v149;
              }
              else
              {
                v58 = v149;
                if (*(_BYTE *)(v150 + 5) == 3)
                {
                  v59 = *(_QWORD *)(v9 + 56);
                  v60 = 3;
                  goto LABEL_270;
                }
              }
              if ((v58 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v58 + 5) == 3)
              {
                v59 = *(_QWORD *)(v9 + 56);
                if ((v150 & 0xFFFE000000000002) != 0)
                {
                  v151[0] = (JSC::JSObject *)v150;
                  if ((unint64_t)v150 >= 0xFFFE000000000000)
                  {
                    v91 = (double)(int)v150;
                  }
                  else
                  {
                    if ((unint64_t)(v150 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL)
                      goto LABEL_371;
                    *(_QWORD *)&v91 = v150 - 0x2000000000000;
                  }
                  if (!*(_DWORD *)(v59 + 80))
                    goto LABEL_373;
LABEL_372:
                  v127 = *(_DWORD *)(v59 + 80);
                  if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                  if (*(_QWORD *)(v59 + 16))
                    v120 = 1;
                  else
LABEL_373:
                    v120 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v58, v91);
                  goto LABEL_374;
                }
                v60 = *(unsigned __int8 *)(v150 + 5);
LABEL_270:
                v100 = v58 & 0xFFFE000000000002;
                if (v60 == 3 && !v100)
                {
                  if (*(_BYTE *)(v58 + 5) == 3)
                  {
                    v107 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v150, v58) == 3;
                    goto LABEL_417;
                  }
                  v151[0] = (JSC::JSObject *)v58;
                  goto LABEL_299;
                }
                if (v60 == 3)
                {
                  v151[0] = (JSC::JSObject *)v58;
                  if (v100)
                  {
                    if (v58 >= 0xFFFE000000000000)
                    {
                      v101 = (double)(int)v58;
                      if (!*(_DWORD *)(v59 + 80))
                        goto LABEL_355;
LABEL_354:
                      v129 = *(_DWORD *)(v59 + 80);
                      if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                      if (*(_QWORD *)(v59 + 16))
                        v120 = 1;
                      else
LABEL_355:
                        v120 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v57, v101);
                      goto LABEL_415;
                    }
                    if (v58 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                    {
                      *(_QWORD *)&v101 = v58 - 0x2000000000000;
                      goto LABEL_354;
                    }
LABEL_353:
                    JSC::JSValue::toNumberSlowCase(v151, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
                    v101 = v121;
                    goto LABEL_354;
                  }
LABEL_299:
                  if (*(_BYTE *)(v58 + 5) != 2)
                    goto LABEL_353;
                  v113 = (int **)(v58 + 8);
                  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
                    v113 = JSC::JSRopeString::resolveRope(v58, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
                  if (*(_DWORD *)(v59 + 80))
                  {
                    v133 = *(_DWORD *)(v59 + 80);
                    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                    if (*(_QWORD *)(v59 + 16))
                    {
LABEL_414:
                      v120 = 1;
                      goto LABEL_415;
                    }
                  }
                  v114 = *v113;
                  if (*v113)
                  {
                    v115 = *((_QWORD *)v114 + 1);
                    v116 = v114[1];
                    if ((v114[4] & 4) == 0)
                    {
                      v117 = JSC::JSBigInt::parseInt<char16_t>((JSC::JSBigInt *)v9, v115, v116, 1);
                      goto LABEL_348;
                    }
                  }
                  else
                  {
                    v115 = 0;
                    v116 = 0;
                  }
                  v117 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)v9, v115, v116, 1, v15);
LABEL_348:
                  v119 = (uint64_t)v117;
                  if (*(_DWORD *)(v59 + 80))
                  {
                    v135 = *(_DWORD *)(v59 + 80);
                    if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                    v120 = 1;
                    if (*(_QWORD *)(v59 + 16) || !v119)
                    {
LABEL_415:
                      if (!*(_DWORD *)(v59 + 80))
                        goto LABEL_416;
                      v134 = *(_DWORD *)(v59 + 80);
                      if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                      if (!*(_QWORD *)(v59 + 16))
                      {
LABEL_416:
                        v107 = v120 == 3;
LABEL_417:
                        v46 = v107;
                        goto LABEL_128;
                      }
                      goto LABEL_217;
                    }
                  }
                  else if (!v117)
                  {
                    goto LABEL_414;
                  }
                  if ((v119 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v119 + 5) == 3)
                  {
                    v120 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v57, v119);
                    goto LABEL_415;
                  }
                  goto LABEL_353;
                }
                v151[0] = (JSC::JSObject *)v150;
                if (v60 == 2)
                {
                  v102 = (int **)(v150 + 8);
                  if ((*(_BYTE *)(v150 + 8) & 1) != 0)
                    v102 = JSC::JSRopeString::resolveRope(v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
                  if (*(_DWORD *)(v59 + 80))
                  {
                    v138 = *(_DWORD *)(v59 + 80);
                    if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                    if (*(_QWORD *)(v59 + 16))
                      goto LABEL_437;
                  }
                  v103 = *v102;
                  if (*v102)
                  {
                    v104 = *((_QWORD *)v103 + 1);
                    v105 = v103[1];
                    if ((v103[4] & 4) == 0)
                    {
                      v106 = JSC::JSBigInt::parseInt<char16_t>((JSC::JSBigInt *)v9, v104, v105, 1);
LABEL_366:
                      v122 = (uint64_t)v106;
                      if (*(_DWORD *)(v59 + 80))
                      {
                        v139 = *(_DWORD *)(v59 + 80);
                        if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                        v120 = 1;
                        if (*(_QWORD *)(v59 + 16) || !v122)
                        {
LABEL_374:
                          if (!*(_DWORD *)(v59 + 80))
                            goto LABEL_375;
                          v125 = *(_DWORD *)(v59 + 80);
                          if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
                          if (!*(_QWORD *)(v59 + 16))
                          {
LABEL_375:
                            if (v120 == 2)
                            {
                              v120 = 3;
                            }
                            else if (v120 == 3)
                            {
                              v120 = 2;
                            }
                            goto LABEL_416;
                          }
LABEL_217:
                          v46 = 0;
LABEL_128:
                          v61 = *(JSC::Exception **)(v20 + 16);
                          if (v61)
                          {
                            if (v147)
                              *v147 = *((_QWORD *)v61 + 1);
                            *(_QWORD *)(v20 + 16) = 0;
                            v72 = (unsigned int *)(v20 + 80);
                            do
                              v73 = __ldaxr(v72);
                            while (__stlxr(v73 & 0xFFFFFFEF, v72));
                            Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v61, v14, v15, v16, v17, v18);
                          }
                          if (v28)
                            v62 = 3;
                          else
                            v62 = 2;
                          if (((v61 == 0) & (v28 | v46)) != 0)
                            v9 = v62;
                          else
                            v9 = 0;
                          goto LABEL_135;
                        }
                      }
                      else if (!v106)
                      {
LABEL_437:
                        v120 = 1;
                        goto LABEL_374;
                      }
                      if ((v122 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v122 + 5) == 3)
                      {
                        v120 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v58, v122);
                        goto LABEL_374;
                      }
                      goto LABEL_371;
                    }
                  }
                  else
                  {
                    v104 = 0;
                    v105 = 0;
                  }
                  v106 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)v9, v104, v105, 1, v15);
                  goto LABEL_366;
                }
LABEL_371:
                JSC::JSValue::toNumberSlowCase(v151, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
                v91 = v123;
                goto LABEL_372;
              }
              v49 = v50 < *(double *)v19.i64;
LABEL_125:
              v46 = v49;
              goto LABEL_128;
            }
          }
          else if (!v24 || !v25)
          {
            goto LABEL_73;
          }
          v47 = (double)(int)v11;
          if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v47 = v11 - 0x2000000000000;
          v48 = (double)(int)a2;
          if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v48 = a2 - 0x2000000000000;
          v49 = v47 < v48;
          goto LABEL_125;
        }
        if (v147)
          *v147 = *((_QWORD *)v22 + 1);
        *(_QWORD *)(v20 + 16) = 0;
        v70 = (unsigned int *)(v20 + 80);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 & 0xFFFFFFEF, v70));
LABEL_170:
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18);
        v9 = 0;
        goto LABEL_135;
      }
    }
    else if (!v24)
    {
      goto LABEL_14;
    }
    if (v25)
    {
      *(double *)v19.i64 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        v19.i64[0] = a2 - 0x2000000000000;
      v29 = (double)(int)v11;
      if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v29 = v11 - 0x2000000000000;
      v30 = *(double *)v19.i64 < v29;
      goto LABEL_66;
    }
LABEL_14:
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      v149 = 0;
      v31 = a2;
    }
    else
    {
      if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 2 && *(_BYTE *)(v11 + 5) == 2)
      {
        v26 = (int **)(a2 + 8);
        if ((*(_BYTE *)(a2 + 8) & 1) != 0)
          v26 = JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)v9, 0, v14, v19, v15, v16, v17, v18);
        if (!*(_DWORD *)(v23 + 80))
          goto LABEL_21;
        v74 = *(_DWORD *)(v23 + 80);
        if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
        if (*(_QWORD *)(v23 + 16))
        {
          v28 = 0;
        }
        else
        {
LABEL_21:
          v27 = (int **)(v11 + 8);
          if ((*(_BYTE *)(v11 + 8) & 1) != 0)
            v27 = JSC::JSRopeString::resolveRope(v11, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
          if (!*(_DWORD *)(v23 + 80))
            goto LABEL_24;
          v75 = *(_DWORD *)(v23 + 80);
          if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
          if (*(_QWORD *)(v23 + 16))
            v28 = 0;
          else
LABEL_24:
            v28 = WTF::codePointCompareLessThan((WTF *)v26, (const WTF::String *)v27, v22);
        }
        goto LABEL_69;
      }
      v149 = 0;
      v150 = 0;
      v31 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    }
    v150 = v31;
    if (*(_DWORD *)(v23 + 80))
    {
      v78 = *(_DWORD *)(v23 + 80);
      if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
      if (*(_QWORD *)(v23 + 16))
      {
        v34 = 0;
        v32 = 0.0;
        goto LABEL_44;
      }
      v31 = v150;
    }
    if ((v31 & 0xFFFE000000000002) != 0)
    {
      if (v31 >= 0xFFFE000000000000)
      {
        v32 = (double)(int)v31;
        goto LABEL_40;
      }
      if (v31 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v32 = v31 - 0x2000000000000;
        goto LABEL_40;
      }
    }
    else if (*(_BYTE *)(v31 + 5) == 3)
    {
      v34 = 1;
      v32 = 0.0;
      goto LABEL_44;
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
    v32 = *(double *)v19.i64;
    if (!*(_DWORD *)(v23 + 80))
      goto LABEL_41;
LABEL_40:
    v82 = *(_DWORD *)(v23 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v23 + 16))
    {
      v34 = 0;
    }
    else
    {
LABEL_41:
      v33 = (v150 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v150 + 5) == 2;
      v34 = !v33;
    }
LABEL_44:
    if (*(_DWORD *)(v23 + 80))
    {
      v79 = *(_DWORD *)(v23 + 80);
      if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
      if (*(_QWORD *)(v23 + 16))
        goto LABEL_199;
    }
    v35 = *(_QWORD *)(v9 + 56);
    v36 = v11;
    if ((v11 & 0xFFFE000000000002) == 0)
      v36 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v9, (JSC::Structure *)1, v14, v15, v16, v17, v18);
    v149 = v36;
    if (*(_DWORD *)(v35 + 80))
    {
      v80 = *(_DWORD *)(v35 + 80);
      if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
      if (*(_QWORD *)(v35 + 16))
      {
        v38 = 0;
        v19.i64[0] = 0;
        goto LABEL_57;
      }
      v36 = v149;
    }
    if ((v36 & 0xFFFE000000000002) != 0)
    {
      if (v36 >= 0xFFFE000000000000)
      {
        *(double *)v19.i64 = (double)(int)v36;
        goto LABEL_53;
      }
      if (v36 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v19.i64[0] = v36 - 0x2000000000000;
        goto LABEL_53;
      }
LABEL_50:
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v149, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
      if (!*(_DWORD *)(v35 + 80))
        goto LABEL_54;
LABEL_53:
      v144 = v19.i64[0];
      v85 = *(_DWORD *)(v35 + 80);
      if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
      v19.i64[0] = v144;
      if (*(_QWORD *)(v35 + 16))
      {
        v38 = 0;
      }
      else
      {
LABEL_54:
        v37 = (v149 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v149 + 5) == 2;
        v38 = !v37;
      }
      goto LABEL_57;
    }
    if (*(_BYTE *)(v36 + 5) != 3)
      goto LABEL_50;
    v38 = 1;
    v19.i64[0] = 0;
LABEL_57:
    if (*(_DWORD *)(v23 + 80))
    {
      v143 = v19.i64[0];
      v81 = *(_DWORD *)(v23 + 80);
      if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
      v19.i64[0] = v143;
      if (*(_QWORD *)(v23 + 16))
      {
LABEL_199:
        v28 = 0;
        goto LABEL_69;
      }
    }
    v39 = v34 | v38;
    v40 = (JSC::JSObject *)v150;
    if (v39 != 1)
    {
      v64 = (int **)(v150 + 8);
      if ((*(_BYTE *)(v150 + 8) & 1) != 0)
        v64 = JSC::JSRopeString::resolveRope(v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
      v65 = (int **)(v149 + 8);
      if ((*(_BYTE *)(v149 + 8) & 1) != 0)
        v65 = JSC::JSRopeString::resolveRope(v149, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
      v28 = WTF::codePointCompareLessThan((WTF *)v64, (const WTF::String *)v65, v22);
      goto LABEL_69;
    }
    if ((v150 & 0xFFFE000000000002) != 0)
    {
      v41 = v149;
    }
    else
    {
      v41 = v149;
      if (*(_BYTE *)(v150 + 5) == 3)
      {
        v142 = *(_QWORD *)(v9 + 56);
        v42 = 3;
        goto LABEL_246;
      }
    }
    if ((v41 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v41 + 5) == 3)
    {
      v142 = *(_QWORD *)(v9 + 56);
      if ((v150 & 0xFFFE000000000002) != 0)
      {
        v151[0] = (JSC::JSObject *)v150;
        goto LABEL_230;
      }
      v42 = *(unsigned __int8 *)(v150 + 5);
LABEL_246:
      v92 = v41 & 0xFFFE000000000002;
      if (v42 == 3 && !v92)
      {
        if (*(_BYTE *)(v41 + 5) == 3)
        {
          v99 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v150, v41) == 3;
          goto LABEL_402;
        }
        v151[0] = (JSC::JSObject *)v41;
        goto LABEL_291;
      }
      if (v42 == 3)
      {
        v151[0] = (JSC::JSObject *)v41;
        if (v92)
          goto LABEL_339;
LABEL_291:
        if (*(_BYTE *)(v41 + 5) != 2)
          goto LABEL_341;
        v108 = (int **)(v41 + 8);
        if ((*(_BYTE *)(v41 + 8) & 1) != 0)
          v108 = JSC::JSRopeString::resolveRope(v41, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
        if (*(_DWORD *)(v142 + 80))
        {
          v130 = *(_DWORD *)(v142 + 80);
          if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
          if (*(_QWORD *)(v142 + 16))
          {
LABEL_399:
            v98 = 1;
            goto LABEL_400;
          }
        }
        v109 = *v108;
        if (*v108)
        {
          v110 = *((_QWORD *)v109 + 1);
          v111 = v109[1];
          if ((v109[4] & 4) == 0)
          {
            v112 = JSC::JSBigInt::parseInt<char16_t>((JSC::JSBigInt *)v9, v110, v111, 1);
            goto LABEL_333;
          }
        }
        else
        {
          v110 = 0;
          v111 = 0;
        }
        v112 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)v9, v110, v111, 1, v15);
LABEL_333:
        v140 = (uint64_t)v112;
        if (*(_DWORD *)(v142 + 80))
        {
          v132 = *(_DWORD *)(v142 + 80);
          if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
          v98 = 1;
          if (*(_QWORD *)(v142 + 16) || !v140)
          {
LABEL_400:
            if (*(_DWORD *)(v142 + 80))
            {
              v131 = *(_DWORD *)(v142 + 80);
              if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
              if (*(_QWORD *)(v142 + 16))
              {
LABEL_407:
                v28 = 0;
                goto LABEL_69;
              }
            }
            goto LABEL_401;
          }
        }
        else if (!v112)
        {
          goto LABEL_399;
        }
        if ((v140 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v140 + 5) == 3)
        {
          v98 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v40, v140);
          goto LABEL_400;
        }
        v41 = (unint64_t)v151[0];
LABEL_339:
        if (v41 >= 0xFFFE000000000000)
        {
          v118 = (double)(int)v41;
          if (!*(_DWORD *)(v142 + 80))
            goto LABEL_344;
LABEL_343:
          v128 = *(_DWORD *)(v142 + 80);
          if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
          if (*(_QWORD *)(v142 + 16))
            v98 = 1;
          else
LABEL_344:
            v98 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v40, v118);
          goto LABEL_400;
        }
LABEL_341:
        if (v41 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase(v151, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
          v118 = *(double *)v19.i64;
        }
        else
        {
          *(_QWORD *)&v118 = v41 - 0x2000000000000;
        }
        goto LABEL_343;
      }
      v151[0] = (JSC::JSObject *)v150;
      if (*(_BYTE *)(v150 + 5) != 2)
        goto LABEL_258;
      v93 = (int **)(v150 + 8);
      if ((*(_BYTE *)(v150 + 8) & 1) != 0)
        v93 = JSC::JSRopeString::resolveRope(v150, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v19, v15, v16, v17, v18);
      if (*(_DWORD *)(v142 + 80))
      {
        v136 = *(_DWORD *)(v142 + 80);
        if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
        if (*(_QWORD *)(v142 + 16))
          goto LABEL_429;
      }
      v94 = *v93;
      if (*v93)
      {
        v95 = *((_QWORD *)v94 + 1);
        v96 = v94[1];
        if ((v94[4] & 4) == 0)
        {
          v97 = JSC::JSBigInt::parseInt<char16_t>((JSC::JSBigInt *)v9, v95, v96, 1);
LABEL_358:
          v141 = (uint64_t)v97;
          if (*(_DWORD *)(v142 + 80))
          {
            v137 = *(_DWORD *)(v142 + 80);
            if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
            v98 = 1;
            if (*(_QWORD *)(v142 + 16) || !v141)
              goto LABEL_262;
          }
          else if (!v97)
          {
LABEL_429:
            v98 = 1;
LABEL_262:
            if (*(_DWORD *)(v142 + 80))
            {
              v124 = *(_DWORD *)(v142 + 80);
              if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
              if (*(_QWORD *)(v142 + 16))
                goto LABEL_407;
            }
            if (v98 == 2)
            {
              v98 = 3;
            }
            else if (v98 == 3)
            {
              v98 = 2;
            }
LABEL_401:
            v99 = v98 == 3;
LABEL_402:
            v28 = v99;
            goto LABEL_69;
          }
          if ((v141 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v141 + 5) == 3)
          {
            v98 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v41, v141);
            goto LABEL_262;
          }
          v40 = v151[0];
LABEL_230:
          if ((unint64_t)v40 >= 0xFFFE000000000000)
          {
            v90 = (double)(int)v40;
            if (!*(_DWORD *)(v142 + 80))
              goto LABEL_261;
LABEL_260:
            v126 = *(_DWORD *)(v142 + 80);
            if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v142 + 64), 7u, (uint64_t)v22, v14, v15, v16, v17, v18);
            if (*(_QWORD *)(v142 + 16))
              v98 = 1;
            else
LABEL_261:
              v98 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v41, v90);
            goto LABEL_262;
          }
LABEL_258:
          if ((unint64_t)v40 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase(v151, (JSC::JSGlobalObject *)v9, (uint64_t)v22, v14, v15, v16, v17, v18, v19);
            v90 = *(double *)v19.i64;
          }
          else
          {
            *(_QWORD *)&v90 = (char *)v40 - 0x2000000000000;
          }
          goto LABEL_260;
        }
      }
      else
      {
        v95 = 0;
        v96 = 0;
      }
      v97 = JSC::JSBigInt::parseInt<unsigned char>((JSC::JSBigInt *)v9, v95, v96, 1, v15);
      goto LABEL_358;
    }
    v30 = v32 < *(double *)v19.i64;
LABEL_66:
    v28 = v30;
    goto LABEL_69;
  }
  return v9;
}

JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const OpaqueJSValue *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int *v36;

  if (!ctx)
    return 0;
  v10 = (JSC::VM *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, v10, v2, v3, v4, v5, v6, v7, v8);
  if (string)
    WTF::String::isolatedCopy((_DWORD *)string + 2, (uint64_t *)&v35);
  else
    v35 = 0;
  v24 = (const OpaqueJSValue *)JSC::jsString((uint64_t)v10, (JSC::VM *)&v35, v11, v12, v13, v14, v15, v16);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v36, v17, v18, v19, v20, v21, v22, v23);
  return v24;
}

JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  size_t v20;
  int *v22;
  _BYTE *v23;
  const OpaqueJSValue *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  int16x8_t *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  int16x8_t v39;
  int16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  unsigned __int16 *v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  unint64_t v50;
  __n128 v51;
  unsigned __int16 *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int8 *v58;
  int8x16_t v59;
  int8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint8x16_t v69;
  char v70;
  char v71;
  char v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  unint64_t *v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unsigned __int16 *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  int v106;
  int v107;
  int v108;
  unsigned __int8 *v109;
  unsigned __int8 **v110;
  unint64_t v111;
  WTF::AtomStringImpl *v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned __int8 *v129;
  BOOL v130;
  unsigned __int16 *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  BOOL v147;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unsigned __int16 *v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  unint64_t v162;
  int8x16_t *v163;
  unsigned __int8 *v164;
  int8x16_t v165;
  int8x16_t v166;
  uint8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  unsigned __int8 *v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  uint8x16_t v176;
  unsigned __int16 *v177;
  BOOL v178;
  char v179;
  uint8x16_t v180;
  char v181;
  char v182;
  unsigned __int8 *v183;
  int v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  double v191;
  unsigned __int8 *v192;
  uint64_t v193;
  WTF::AtomStringImpl *v194;
  WTF::StringImpl *v195;
  const char *v196;
  unsigned __int8 *v197;
  int v198;
  unsigned __int8 *v199;
  uint64_t v200;
  WTF::AtomStringImpl *v201;
  WTF::StringImpl *v202;
  const char *v203;
  WTF::StringImpl *v204;
  unsigned __int16 *v205;
  int v206;
  BOOL v208;
  int8x16_t *v209;
  unsigned __int16 *v210;
  unint64_t v211;
  unsigned __int16 *v212;
  int v213;
  unsigned __int16 *v214;
  uint64_t v215;
  int16x8_t *v216;
  unint64_t v217;
  WTF::StringImpl *v218;
  unsigned int v219;
  uint64_t v220;
  int16x8_t *v221;
  unsigned __int16 *v222;
  unsigned __int16 *v223;
  int16x8_t v224;
  int16x8_t v225;
  uint16x8_t v226;
  int16x8_t v227;
  int8x16_t v228;
  int8x16_t v229;
  unsigned __int16 *v230;
  int16x8_t v231;
  int16x8_t v232;
  int8x16_t v233;
  int16x8_t v234;
  uint16x8_t v235;
  char v236;
  char v237;
  uint64_t v238;
  unsigned __int16 *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int16 *v244;
  int v245;
  int v246;
  int v247;
  double v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  int v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  int v254;
  int v255;
  int v256;
  unint64_t v257;
  int v258;
  BOOL v259;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  uint64_t v295;
  const char *v296;
  unsigned __int8 *v297;
  int v298;
  unsigned __int8 *v299;
  uint64_t v300;
  unsigned int v301;
  BOOL v302;
  BOOL v303;
  BOOL v304;
  uint64_t v305;
  WTF::StringImpl *v306;
  uint64_t v307;
  const char *v308;
  unsigned __int16 *v309;
  int v310;
  BOOL v312;
  unsigned int v313;
  unsigned __int16 *v314;
  unint64_t v315;
  unsigned __int16 *v316;
  int v317;
  unsigned __int16 *v318;
  uint64_t v319;
  int16x8_t *v320;
  unint64_t v321;
  uint64_t v322;
  JSContextRef v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  char v326;
  char v327;
  unsigned int v328;
  unint64_t v329;
  char v330;
  unsigned __int16 *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  char v336;
  char v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  uint64_t v341;
  char *v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  _BYTE v350[16];
  _BYTE *v351;
  uint64_t v352;
  _BYTE v353[128];
  unsigned int *v354;
  WTF::StringImpl *v355;

  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v354, ctx, v2, v3, v4, v5, v6, v7, v8);
    v17 = *((_QWORD *)string + 1);
    if (!v17)
    {
      v22 = 0;
      v25 = 0;
      v26 = 0;
      goto LABEL_55;
    }
    v18 = *(_DWORD *)(v17 + 16);
    v19 = *(_BYTE **)(v17 + 8);
    v20 = *(unsigned int *)(v17 + 4);
    if ((v18 & 3) == 0 && v19 != (_BYTE *)(v17 + 20))
    {
      if ((v18 & 4) != 0)
      {
        if ((_DWORD)v20)
        {
          v22 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
          *v22 = 2;
          v22[1] = v20;
          *((_QWORD *)v22 + 1) = v19;
          v22[4] = 4;
          goto LABEL_28;
        }
      }
      else if ((_DWORD)v20)
      {
        v22 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v22 = 2;
        v22[1] = v20;
        *((_QWORD *)v22 + 1) = v19;
        v22[4] = 0;
        goto LABEL_28;
      }
LABEL_24:
      v22 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_28;
    }
    if ((v18 & 4) != 0)
    {
      if (!(_DWORD)v20)
        goto LABEL_24;
      if ((v20 & 0x80000000) != 0)
      {
LABEL_502:
        __break(0xC471u);
        JUMPOUT(0x197F63C90);
      }
      v22 = (int *)WTF::fastCompactMalloc((WTF *)(v20 + 20));
      v23 = v22 + 5;
      *v22 = 2;
      v22[1] = v20;
      *((_QWORD *)v22 + 1) = v22 + 5;
      v22[4] = 4;
      if ((_DWORD)v20 == 1)
      {
        *v23 = *v19;
        goto LABEL_28;
      }
      v27 = v19;
      v28 = v20;
    }
    else
    {
      if (!(_DWORD)v20)
        goto LABEL_24;
      if (v20 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        goto LABEL_501;
      }
      v22 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v20 + 20));
      v23 = v22 + 5;
      *v22 = 2;
      v22[1] = v20;
      *((_QWORD *)v22 + 1) = v22 + 5;
      v22[4] = 0;
      if ((_DWORD)v20 == 1)
      {
        *(_WORD *)v23 = *(_WORD *)v19;
LABEL_28:
        if ((v22[4] & 4) == 0)
        {
          v29 = (unsigned __int16 *)*((_QWORD *)v22 + 1);
          v30 = v22[1];
          v330 = 0;
          v324 = 0;
          v325 = 0;
          v323 = ctx;
          v31 = (unint64_t)&v29[v30];
          v331 = v29;
          v332 = v31;
          v333 = 0;
          v334 = 0;
          v335 = 0;
          v336 = 1;
          v337 = 0;
          v338 = 0;
          v339 = 0;
          v340 = 0;
          v341 = 0x800000000;
          v343 = 0u;
          v344 = 0u;
          v345 = 0u;
          v346 = 0u;
          v342 = (char *)&v343 + 8;
          v347 = 0;
          v348 = v350;
          v32 = (__n128)0x10uLL;
          v349 = 16;
          v351 = v353;
          v352 = 16;
          if ((_DWORD)v30)
          {
            do
            {
              v33 = *v29 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v29] == 19;
              LOBYTE(v30) = !v33;
              if (!v33)
                break;
              v331 = ++v29;
            }
            while ((unint64_t)v29 < v31);
          }
          if (v29 == (unsigned __int16 *)v31)
          {
            v81 = 14;
            goto LABEL_117;
          }
          v326 = 18;
          v12 = *v29;
          if (v12 > 0xFF)
            goto LABEL_203;
          v34 = JSC::tokenTypesOfLatin1Characters[v12];
          if (v34 <= 4)
          {
            if (v34 == 4)
            {
              if ((_DWORD)v12 != 39)
              {
                v11 = (size_t)(v29 + 1);
                v331 = v29 + 1;
                v35 = v31 - (_QWORD)(v29 + 1);
                if (v35 < -2 || v31 == (_QWORD)v29)
                  goto LABEL_501;
                v36 = (int16x8_t *)((char *)v29 + (v35 & 0xFFFFFFFFFFFFFFFELL) + 2);
                if ((unint64_t)v35 <= 0xE)
                {
                  if (v31 != v11)
                  {
                    v215 = 2 * (v35 >> 1);
                    v216 = (int16x8_t *)v11;
                    while (1)
                    {
                      v217 = v216->u16[0];
                      if (v217 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v217])
                        break;
                      v216 = (int16x8_t *)((char *)v216 + 2);
                      v215 -= 2;
                      if (!v215)
                        goto LABEL_114;
                    }
                    v36 = v216;
                  }
                  goto LABEL_114;
                }
                v37 = v29 + 1;
                if (v35 < 15)
                {
LABEL_51:
                  if (v37 >= (unsigned __int16 *)v36)
                    goto LABEL_114;
                  v44 = (unsigned __int16 *)&v36[-1];
                  v45 = v36[-1];
                  v46.i64[0] = 0x22002200220022;
                  v46.i64[1] = 0x22002200220022;
                  v47 = (int8x16_t)vceqq_s16(v45, v46);
                  v48.i64[0] = 0x5C005C005C005CLL;
                  v48.i64[1] = 0x5C005C005C005CLL;
                  v49.i64[0] = 0x20002000200020;
                  v49.i64[1] = 0x20002000200020;
                  v32 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v45, v48), (int8x16_t)vcgtq_u16(v49, (uint16x8_t)v45)), v47);
                  v47.i16[0] = vmaxvq_u16((uint16x8_t)v32);
                  if (!v47.i32[0])
                    goto LABEL_114;
                }
                else
                {
                  v38 = v29 + 8;
                  v39.i64[0] = 0x22002200220022;
                  v39.i64[1] = 0x22002200220022;
                  v40.i64[0] = 0x5C005C005C005CLL;
                  v40.i64[1] = 0x5C005C005C005CLL;
                  v41.i64[0] = 0x20002000200020;
                  v41.i64[1] = 0x20002000200020;
                  while (1)
                  {
                    v42 = *(int16x8_t *)(v38 - 7);
                    v43 = (int8x16_t)vceqq_s16(v42, v39);
                    v32 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v42, v40), (int8x16_t)vcgtq_u16(v41, (uint16x8_t)v42)), v43);
                    v43.i16[0] = vmaxvq_u16((uint16x8_t)v32);
                    if (v43.i32[0])
                      break;
                    v38 += 8;
                    if (v38 >= (unsigned __int16 *)v36)
                    {
                      v37 = v38 - 7;
                      goto LABEL_51;
                    }
                  }
                  v44 = v38 - 7;
                }
                v32 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v32);
                v32.n128_u16[0] = vminvq_u16((uint16x8_t)v32);
                v36 = (int16x8_t *)&v44[v32.n128_u8[0]];
LABEL_114:
                v331 = (unsigned __int16 *)v36;
                if ((unint64_t)v36 < v31 && v36->u16[0] == (_DWORD)v12)
                {
                  v327 &= ~1u;
                  v329 = v11;
                  v331 = &v36->u16[1];
                  v328 = v328 & 0x80000000 | (((_DWORD)v36 - v11) >> 1);
                  v81 = 4;
LABEL_117:
                  v326 = v81;
                  goto LABEL_118;
                }
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)&v325, (uint64_t)&v326, v11, v12, v13, v14, v15, v16);
LABEL_118:
                v82 = (unint64_t *)*((_QWORD *)v323 + 7);
                if (!v337)
                {
                  v83 = JSC::LiteralParser<char16_t>::parseRecursivelyEntry((uint64_t)&v323, v82, v32, v11, v12, v13, v14, v15, v16);
LABEL_120:
                  if (v326 == 14)
                    v24 = (const OpaqueJSValue *)v83;
                  else
                    v24 = 0;
                  JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v323, v84, v85, v86, v87, v88, v89, v90);
LABEL_174:
                  if (*v22 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v91, v92, v93, v94, v95, v96, v97);
                    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
                  }
                  else
                  {
                    *v22 -= 2;
                  }
LABEL_176:
                  JSC::JSLockHolder::~JSLockHolder(&v354, v91, v92, v93, v94, v95, v96, v97);
                  return v24;
                }
                v322 = JSC::LiteralParser<char16_t>::parse((uint64_t *)&v323, (uint64_t)v82, 3uLL, v12, v13, v14, v15, v16);
                if (v326 != 17)
                {
LABEL_434:
                  v83 = v322;
                  goto LABEL_120;
                }
                v177 = v331;
                if ((unint64_t)v331 >= v332)
                {
                  v179 = 0;
                }
                else
                {
                  do
                  {
                    v178 = *v177 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v177] == 19;
                    v179 = !v178;
                    if (!v178)
                      break;
                    v331 = ++v177;
                  }
                  while ((unint64_t)v177 < v332);
                }
                if (v177 == (unsigned __int16 *)v332)
                {
                  v236 = 14;
                  goto LABEL_433;
                }
                v326 = 18;
                v86 = *v177;
                if (v86 > 0xFF)
                  goto LABEL_470;
                v219 = JSC::tokenTypesOfLatin1Characters[v86];
                if (v219 <= 4)
                {
                  if (v219 == 4)
                  {
                    if ((_DWORD)v86 != 39)
                    {
                      v85 = (unint64_t)(v177 + 1);
                      v331 = v177 + 1;
                      if (!v330)
                      {
                        v220 = v332 - v85;
                        if ((uint64_t)(v332 - v85) > -2)
                        {
                          v221 = (int16x8_t *)((char *)v177 + (v220 & 0xFFFFFFFFFFFFFFFELL) + 2);
                          if ((unint64_t)v220 <= 0xE)
                          {
                            if (v332 != v85)
                            {
                              v319 = 2 * (v220 >> 1);
                              v320 = (int16x8_t *)v85;
                              while (1)
                              {
                                v321 = v320->u16[0];
                                if (v321 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v321])
                                  break;
                                v320 = (int16x8_t *)((char *)v320 + 2);
                                v319 -= 2;
                                if (!v319)
                                  goto LABEL_429;
                              }
                              v221 = v320;
                            }
                            goto LABEL_429;
                          }
                          v222 = v177 + 1;
                          if (v220 < 15)
                          {
LABEL_420:
                            if (v222 >= (unsigned __int16 *)v221)
                              goto LABEL_429;
                            v230 = (unsigned __int16 *)&v221[-1];
                            v231 = v221[-1];
                            v232.i64[0] = 0x22002200220022;
                            v232.i64[1] = 0x22002200220022;
                            v233 = (int8x16_t)vceqq_s16(v231, v232);
                            v234.i64[0] = 0x5C005C005C005CLL;
                            v234.i64[1] = 0x5C005C005C005CLL;
                            v235.i64[0] = 0x20002000200020;
                            v235.i64[1] = 0x20002000200020;
                            v229 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v231, v234), (int8x16_t)vcgtq_u16(v235, (uint16x8_t)v231)), v233);
                            v233.i16[0] = vmaxvq_u16((uint16x8_t)v229);
                            if (!v233.i32[0])
                              goto LABEL_429;
                          }
                          else
                          {
                            v223 = v177 + 8;
                            v224.i64[0] = 0x22002200220022;
                            v224.i64[1] = 0x22002200220022;
                            v225.i64[0] = 0x5C005C005C005CLL;
                            v225.i64[1] = 0x5C005C005C005CLL;
                            v226.i64[0] = 0x20002000200020;
                            v226.i64[1] = 0x20002000200020;
                            while (1)
                            {
                              v227 = *(int16x8_t *)(v223 - 7);
                              v228 = (int8x16_t)vceqq_s16(v227, v224);
                              v229 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v227, v225), (int8x16_t)vcgtq_u16(v226, (uint16x8_t)v227)), v228);
                              v228.i16[0] = vmaxvq_u16((uint16x8_t)v229);
                              if (v228.i32[0])
                                break;
                              v223 += 8;
                              if (v223 >= (unsigned __int16 *)v221)
                              {
                                v222 = v223 - 7;
                                goto LABEL_420;
                              }
                            }
                            v230 = v223 - 7;
                          }
                          v221 = (int16x8_t *)&v230[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v229))];
LABEL_429:
                          v331 = (unsigned __int16 *)v221;
LABEL_430:
                          if ((unint64_t)v221 >= v332 || v221->u16[0] != (_DWORD)v86)
                          {
                            JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)&v325, (uint64_t)&v326, v85, v86, v87, v88, v89, v90);
                            goto LABEL_434;
                          }
                          v327 &= ~1u;
                          v329 = v85;
                          v331 = &v221->u16[1];
                          v328 = v328 & 0x80000000 | (((_DWORD)v221 - v85) >> 1);
                          v236 = 4;
                          goto LABEL_433;
                        }
                        goto LABEL_501;
                      }
LABEL_557:
                      v221 = (int16x8_t *)v85;
                      if (v85 < v332)
                      {
                        while (1)
                        {
                          v313 = v221->u16[0];
                          if (v313 < 0x20)
                          {
                            if (v313 != 9)
                              goto LABEL_430;
                          }
                          else if (v313 == (_DWORD)v86 || v313 > 0xFF || v313 == 92)
                          {
                            goto LABEL_430;
                          }
                          v221 = (int16x8_t *)((char *)v221 + 2);
                          v331 = (unsigned __int16 *)v221;
                          if ((unint64_t)v221 >= v332)
                            goto LABEL_430;
                        }
                      }
                      goto LABEL_430;
                    }
                    if (v330)
                    {
                      v85 = (unint64_t)(v177 + 1);
                      v331 = v177 + 1;
                      goto LABEL_557;
                    }
                    v305 = WTF::fastCompactMalloc((WTF *)0x20);
                    v306 = (WTF::StringImpl *)v305;
                    v307 = 0x2900000002;
                    v308 = "Single quotes (') are not allowed in JSON";
                    goto LABEL_601;
                  }
                  goto LABEL_426;
                }
                if (v219 != 5)
                {
                  if (v219 != 6)
                  {
                    if (v219 - 18 >= 2)
                    {
LABEL_426:
                      v326 = v219;
                      v331 = v177 + 1;
                      goto LABEL_434;
                    }
LABEL_470:
                    WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v177, 1uLL, 39, &v355);
                    v252 = v355;
                    v355 = 0;
                    v253 = v325;
                    v325 = v252;
                    if (!v253)
                      goto LABEL_434;
                    v254 = *(_DWORD *)v253 - 2;
                    if (*(_DWORD *)v253 != 2)
                    {
LABEL_472:
                      *(_DWORD *)v253 = v254;
                      goto LABEL_434;
                    }
                    WTF::StringImpl::~StringImpl(v253, v84, v85, v86, v87, v88, v89, v90);
                    WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
                    v253 = v355;
                    v355 = 0;
                    if (!v253)
                      goto LABEL_434;
LABEL_498:
                    v254 = *(_DWORD *)v253 - 2;
                    if (*(_DWORD *)v253 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v253, v84, v85, v86, v87, v88, v89, v90);
                      WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
                      goto LABEL_434;
                    }
                    goto LABEL_472;
                  }
                  v237 = v179 ^ 1;
                  if ((_DWORD)v86 != 45)
                    v237 = 1;
                  if ((v237 & 1) != 0)
                  {
                    v238 = 0;
                  }
                  else
                  {
                    v331 = v177 + 1;
                    v238 = 1;
                  }
                  v239 = &v177[v238];
                  if ((unint64_t)v239 < v332)
                  {
                    v240 = *v239;
                    if (v240 == 48)
                    {
                      v243 = v238 + 1;
                      goto LABEL_445;
                    }
                    if ((v240 - 49) <= 8)
                    {
                      v241 = v238 + 1;
                      v242 = 2 * v238 + 2;
                      do
                      {
                        v243 = v241;
                        if ((unint64_t)v177 + v242 >= v332)
                          break;
                        ++v241;
                        v242 += 2;
                      }
                      while (v177[v243] - 48 < 0xA);
LABEL_445:
                      v244 = &v177[v243];
                      v331 = v244;
                      if ((unint64_t)v244 < v332)
                      {
                        v245 = *v244;
                        if (v245 != 101 && v245 != 69)
                        {
                          if (v245 == 46)
                          {
                            v314 = v244 + 1;
                            v331 = v314;
                            if ((unint64_t)v314 >= v332 || *v314 - 48 > 9)
                            {
                              v305 = WTF::fastCompactMalloc((WTF *)0x20);
                              v306 = (WTF::StringImpl *)v305;
                              v307 = 0x2200000002;
                              v308 = "Invalid digits after decimal point";
                              goto LABEL_601;
                            }
                            v315 = (unint64_t)&v177[v243 + 2];
                            do
                            {
                              v244 = (unsigned __int16 *)v315;
                              if (v315 >= v332)
                                break;
                              v315 += 2;
                            }
                            while (*v244 - 48 < 0xA);
                            v331 = v244;
                          }
                          else if (v243 <= 9)
                          {
                            v326 = 6;
                            if ((_DWORD)v86 == 45)
                            {
                              if (v243 < 2)
                                goto LABEL_603;
                              ++v177;
                            }
                            v246 = 0;
                            do
                            {
                              v247 = *v177++;
                              v246 = v247 + 10 * v246 - 48;
                            }
                            while (v177 < v244);
                            if ((_DWORD)v86 != 45)
                              goto LABEL_454;
                            if (v246)
                            {
                              v246 = -v246;
LABEL_454:
                              v248 = (double)v246;
LABEL_455:
                              v329 = *(_QWORD *)&v248;
                              goto LABEL_434;
                            }
LABEL_603:
                            v329 = 0x8000000000000000;
                            goto LABEL_434;
                          }
                        }
                      }
                      if ((unint64_t)v244 >= v332 || (*v244 | 0x20) != 0x65)
                        goto LABEL_586;
                      v316 = v244 + 1;
                      v331 = v244 + 1;
                      if ((unint64_t)(v244 + 1) < v332)
                      {
                        v317 = *v316;
                        if (v317 == 45 || v317 == 43)
                        {
                          v316 = v244 + 2;
                          v331 = v244 + 2;
                        }
                      }
                      if ((unint64_t)v316 < v332 && *v316 - 48 <= 9)
                      {
                        v318 = v316 + 1;
                        do
                        {
                          v244 = v318;
                          if ((unint64_t)v318 >= v332)
                            break;
                          ++v318;
                        }
                        while (*v244 - 48 < 0xA);
                        v331 = v244;
LABEL_586:
                        v326 = 6;
                        v355 = 0;
                        if ((char *)v244 - (char *)v177 > -2)
                        {
                          v248 = WTF::parseDouble(v177, v244 - v177, &v355);
                          goto LABEL_455;
                        }
LABEL_501:
                        __break(1u);
                        goto LABEL_502;
                      }
                      v305 = WTF::fastCompactMalloc((WTF *)0x20);
                      v306 = (WTF::StringImpl *)v305;
                      v307 = 0x5D00000002;
                      v308 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_601:
                      *(_QWORD *)v305 = v307;
                      *(_QWORD *)(v305 + 8) = v308;
                      *(_DWORD *)(v305 + 16) = 4;
                      v253 = v325;
                      v325 = v306;
                      if (!v253)
                        goto LABEL_434;
                      goto LABEL_498;
                    }
                  }
                  v305 = WTF::fastCompactMalloc((WTF *)0x20);
                  v306 = (WTF::StringImpl *)v305;
                  v307 = 0xE00000002;
                  v308 = "Invalid number";
                  goto LABEL_601;
                }
                if ((_DWORD)v86 == 102)
                {
                  if ((uint64_t)(v332 - (_QWORD)v177) >= 9
                    && *(_DWORD *)(v177 + 1) == 7077985
                    && *(_DWORD *)(v177 + 3) == 6619251)
                  {
                    v331 = v177 + 5;
                    v236 = 12;
LABEL_433:
                    v326 = v236;
                    goto LABEL_434;
                  }
                }
                else if ((_DWORD)v86 == 116)
                {
                  if ((uint64_t)(v332 - (_QWORD)v177) >= 7 && *(_DWORD *)(v177 + 1) == 7667826 && v177[3] == 101)
                  {
                    v331 = v177 + 4;
                    v236 = 11;
                    goto LABEL_433;
                  }
                }
                else if ((_DWORD)v86 == 110
                       && (uint64_t)(v332 - (_QWORD)v177) >= 7
                       && *(_DWORD *)(v177 + 1) == 7078005
                       && v177[3] == 108)
                {
                  v331 = v177 + 4;
                  v236 = 13;
                  goto LABEL_433;
                }
                v329 = (unint64_t)v177;
                LODWORD(v309) = (_DWORD)v177;
                if ((unint64_t)v177 < v332)
                {
                  v309 = v177;
                  do
                  {
                    v310 = *v309;
                    v312 = (v310 | 0x20u) - 97 >= 0x1A
                        && (v310 - 48) >= 0xA
                        && (v310 - 8204) >= 2;
                    if (v312 && v310 != 95 && v310 != 36)
                      break;
                    v331 = ++v309;
                  }
                  while ((unint64_t)v309 < v332);
                }
                v328 = v328 & 0x80000000 | (((_DWORD)v309 - (_DWORD)v177) >> 1);
                v236 = 5;
                goto LABEL_433;
              }
              v200 = WTF::fastCompactMalloc((WTF *)0x20);
              v202 = (WTF::StringImpl *)v200;
              v32.n128_u64[0] = 0x2900000002;
              v203 = "Single quotes (') are not allowed in JSON";
LABEL_402:
              *(_QWORD *)v200 = v32.n128_u64[0];
              *(_QWORD *)(v200 + 8) = v203;
              *(_DWORD *)(v200 + 16) = 4;
              v218 = v325;
              v325 = v202;
              if (v218)
              {
                if (*(_DWORD *)v218 == 2)
                {
                  WTF::StringImpl::~StringImpl(v218, v201, v11, v12, v13, v14, v15, v16);
                  WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
                }
                else
                {
                  *(_DWORD *)v218 -= 2;
                }
              }
              goto LABEL_118;
            }
LABEL_87:
            v326 = v34;
            v331 = v29 + 1;
            goto LABEL_118;
          }
          if (v34 == 5)
          {
            if ((_DWORD)v12 == 102)
            {
              if ((uint64_t)(v31 - (_QWORD)v29) >= 9
                && *(_DWORD *)(v29 + 1) == 7077985
                && *(_DWORD *)(v29 + 3) == 6619251)
              {
                v331 = v29 + 5;
                v81 = 12;
                goto LABEL_117;
              }
            }
            else if ((_DWORD)v12 == 116)
            {
              if ((uint64_t)(v31 - (_QWORD)v29) >= 7 && *(_DWORD *)(v29 + 1) == 7667826 && v29[3] == 101)
              {
                v331 = v29 + 4;
                v81 = 11;
                goto LABEL_117;
              }
            }
            else if ((_DWORD)v12 == 110
                   && (uint64_t)(v31 - (_QWORD)v29) >= 7
                   && *(_DWORD *)(v29 + 1) == 7078005
                   && v29[3] == 108)
            {
              v331 = v29 + 4;
              v81 = 13;
              goto LABEL_117;
            }
            v329 = (unint64_t)v29;
            LODWORD(v205) = (_DWORD)v29;
            if ((unint64_t)v29 < v31)
            {
              v205 = v29;
              do
              {
                v206 = *v205;
                v208 = (v206 | 0x20u) - 97 >= 0x1A
                    && (v206 - 48) >= 0xA
                    && (v206 - 8204) >= 2;
                if (v208 && v206 != 95 && v206 != 36)
                  break;
                v331 = ++v205;
              }
              while ((unint64_t)v205 < v31);
            }
            v328 = v328 & 0x80000000 | (((_DWORD)v205 - (_DWORD)v29) >> 1);
            v81 = 5;
            goto LABEL_117;
          }
          if (v34 != 6)
          {
            if (v34 - 18 >= 2)
              goto LABEL_87;
LABEL_203:
            WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v29, 1uLL, 39, &v355);
            v132 = v355;
            v355 = 0;
            v325 = v132;
            goto LABEL_118;
          }
          v98 = v30 ^ 1;
          if ((_DWORD)v12 != 45)
            v98 = 1;
          if ((v98 & 1) != 0)
          {
            v99 = 0;
          }
          else
          {
            v331 = v29 + 1;
            v99 = 1;
          }
          v100 = &v29[v99];
          if ((unint64_t)v100 < v31)
          {
            v101 = *v100;
            if (v101 == 48)
            {
              v104 = v99 + 1;
              goto LABEL_134;
            }
            if ((v101 - 49) <= 8)
            {
              v102 = v99 + 1;
              v103 = 2 * v99 + 2;
              do
              {
                v104 = v102;
                if ((unint64_t)v29 + v103 >= v31)
                  break;
                ++v102;
                v103 += 2;
              }
              while (v29[v104] - 48 < 0xA);
LABEL_134:
              v105 = &v29[v104];
              v331 = v105;
              if ((unint64_t)v105 < v31)
              {
                v106 = *v105;
                if (v106 != 101 && v106 != 69)
                {
                  if (v106 == 46)
                  {
                    v210 = v105 + 1;
                    v331 = v210;
                    if ((unint64_t)v210 >= v31 || *v210 - 48 > 9)
                    {
                      v200 = WTF::fastCompactMalloc((WTF *)0x20);
                      v202 = (WTF::StringImpl *)v200;
                      v32.n128_u64[0] = 0x2200000002;
                      v203 = "Invalid digits after decimal point";
                      goto LABEL_402;
                    }
                    v211 = (unint64_t)&v29[v104 + 2];
                    do
                    {
                      v105 = (unsigned __int16 *)v211;
                      if (v211 >= v31)
                        break;
                      v211 += 2;
                    }
                    while (*v105 - 48 < 0xA);
                    v331 = v105;
                  }
                  else if (v104 <= 9)
                  {
                    v326 = 6;
                    if ((_DWORD)v12 == 45)
                    {
                      if (v104 < 2)
                        goto LABEL_405;
                      ++v29;
                    }
                    v107 = 0;
                    do
                    {
                      v108 = *v29++;
                      v107 = v108 + 10 * v107 - 48;
                    }
                    while (v29 < v105);
                    if ((_DWORD)v12 != 45)
                      goto LABEL_143;
                    if (v107)
                    {
                      v107 = -v107;
LABEL_143:
                      v32.n128_f64[0] = (double)v107;
                      goto LABEL_144;
                    }
LABEL_405:
                    v329 = 0x8000000000000000;
                    goto LABEL_118;
                  }
                }
              }
              if ((unint64_t)v105 < v31 && (*v105 | 0x20) == 0x65)
              {
                v212 = v105 + 1;
                v331 = v105 + 1;
                if ((unint64_t)(v105 + 1) < v31)
                {
                  v213 = *v212;
                  if (v213 == 45 || v213 == 43)
                  {
                    v212 = v105 + 2;
                    v331 = v105 + 2;
                  }
                }
                if ((unint64_t)v212 >= v31 || *v212 - 48 > 9)
                {
                  v200 = WTF::fastCompactMalloc((WTF *)0x20);
                  v202 = (WTF::StringImpl *)v200;
                  v32.n128_u64[0] = 0x5D00000002;
                  v203 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                  goto LABEL_402;
                }
                v214 = v212 + 1;
                do
                {
                  v105 = v214;
                  if ((unint64_t)v214 >= v31)
                    break;
                  ++v214;
                }
                while (*v105 - 48 < 0xA);
                v331 = v105;
              }
              v326 = 6;
              v355 = 0;
              if ((char *)v105 - (char *)v29 <= -2)
                goto LABEL_501;
              v32.n128_f64[0] = WTF::parseDouble(v29, v105 - v29, &v355);
LABEL_144:
              v329 = v32.n128_u64[0];
              goto LABEL_118;
            }
          }
          v200 = WTF::fastCompactMalloc((WTF *)0x20);
          v202 = (WTF::StringImpl *)v200;
          v32.n128_u64[0] = 0xE00000002;
          v203 = "Invalid number";
          goto LABEL_402;
        }
        v25 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
        v26 = v22[1];
LABEL_55:
        v330 = 0;
        v324 = 0;
        v325 = 0;
        v323 = ctx;
        v50 = (unint64_t)&v25[v26];
        v331 = (unsigned __int16 *)v25;
        v332 = (unint64_t)&v25[v26];
        v333 = 0;
        v334 = 0;
        v335 = 0;
        v336 = 1;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0x800000000;
        v343 = 0u;
        v344 = 0u;
        v345 = 0u;
        v346 = 0u;
        v342 = (char *)&v343 + 8;
        v347 = 0;
        v348 = v350;
        v51 = (__n128)0x10uLL;
        v349 = 16;
        v351 = v353;
        v352 = 16;
        if (v26)
        {
          if (JSC::tokenTypesOfLatin1Characters[*v25] == 19)
          {
            v52 = (unsigned __int16 *)(v25 + 1);
            v53 = v26 - 1;
            do
            {
              v331 = v52;
              if (!v53)
                goto LABEL_200;
              v54 = *(unsigned __int8 *)v52;
              v52 = (unsigned __int16 *)((char *)v52 + 1);
              --v53;
            }
            while (JSC::tokenTypesOfLatin1Characters[v54] == 19);
            v25 = (unsigned __int8 *)v52 - 1;
            LOBYTE(v26) = (unint64_t)v25 < v50;
          }
          else
          {
            LOBYTE(v26) = 1;
          }
        }
        if (v25 == (unsigned __int8 *)v50)
        {
LABEL_200:
          v70 = 14;
          goto LABEL_83;
        }
        v326 = 18;
        v12 = *v25;
        v55 = JSC::tokenTypesOfLatin1Characters[v12];
        if (v55 <= 4)
        {
          if (v55 == 4)
          {
            if ((_DWORD)v12 != 39)
            {
              v11 = (size_t)(v25 + 1);
              v331 = (unsigned __int16 *)(v25 + 1);
              v56 = v50 - (_QWORD)(v25 + 1);
              if (v56 < 0)
                goto LABEL_501;
              v57 = (unsigned __int16 *)v50;
              if ((unint64_t)v56 >= 0x10)
              {
                v58 = v25 + 16;
                v59.i64[0] = 0x2222222222222222;
                v59.i64[1] = 0x2222222222222222;
                v60.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v60.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v61.i64[0] = 0x2020202020202020;
                v61.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v62 = *(int8x16_t *)(v58 - 15);
                  v63 = vceqq_s8(v62, v59);
                  v51 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v62, v60), (int8x16_t)vcgtq_u8(v61, (uint8x16_t)v62)), v63);
                  v63.i8[0] = vmaxvq_u8((uint8x16_t)v51);
                  if (v63.i32[0])
                    break;
                  v58 += 16;
                  if ((unint64_t)v58 >= v50)
                  {
                    if ((unint64_t)(v58 - 15) >= v50)
                      goto LABEL_80;
                    v64 = v50 - 16;
                    v65 = *(int8x16_t *)(v50 - 16);
                    v66.i64[0] = 0x2222222222222222;
                    v66.i64[1] = 0x2222222222222222;
                    v67 = vceqq_s8(v65, v66);
                    v68.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v68.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v69.i64[0] = 0x2020202020202020;
                    v69.i64[1] = 0x2020202020202020;
                    v51 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v65, v68), (int8x16_t)vcgtq_u8(v69, (uint8x16_t)v65)), v67);
                    v67.i8[0] = vmaxvq_u8((uint8x16_t)v51);
                    if (!v67.i32[0])
                      goto LABEL_80;
LABEL_79:
                    v51 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v51);
                    v51.n128_u8[0] = vminvq_u8((uint8x16_t)v51);
                    v57 = (unsigned __int16 *)(v64 + v51.n128_u32[0]);
                    goto LABEL_80;
                  }
                }
                v64 = (unint64_t)(v58 - 15);
                goto LABEL_79;
              }
              if (v50 != v11)
              {
                v131 = (unsigned __int16 *)(v25 + 1);
                while (JSC::safeStringLatin1CharactersInStrictJSON[*(unsigned __int8 *)v131])
                {
                  v131 = (unsigned __int16 *)((char *)v131 + 1);
                  if (!--v56)
                    goto LABEL_80;
                }
                v57 = v131;
              }
LABEL_80:
              v331 = v57;
              if ((unint64_t)v57 < v50 && *(unsigned __int8 *)v57 == (_DWORD)v12)
              {
                v327 |= 1u;
                v329 = v11;
                v331 = (unsigned __int16 *)((char *)v57 + 1);
                v328 = v328 & 0x80000000 | ((_DWORD)v57 - v11) & 0x7FFFFFFF;
                v70 = 4;
LABEL_83:
                v326 = v70;
                goto LABEL_168;
              }
              JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v325, (uint64_t)&v326, v11, v12, v13, v14, v15, v16);
LABEL_168:
              v110 = (unsigned __int8 **)*((_QWORD *)v323 + 7);
              if (!v337)
              {
                v111 = JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v323, v110, v51, v11, v12, v13, v14, v15, v16);
                goto LABEL_170;
              }
              v111 = JSC::LiteralParser<unsigned char>::parse((uint64_t)&v323, (uint64_t)v110, 3uLL, v12, v13, v14, v15, v16);
              if (v326 != 17)
              {
LABEL_170:
                if (v326 == 14)
                  v24 = (const OpaqueJSValue *)v111;
                else
                  v24 = 0;
                JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v323, v112, v113, v114, v115, v116, v117, v118);
                if (!v17)
                  goto LABEL_176;
                goto LABEL_174;
              }
              v128 = v111;
              v129 = (unsigned __int8 *)v331;
              if ((unint64_t)v331 >= v332)
              {
                v130 = 0;
              }
              else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v331] == 19)
              {
                v157 = (unsigned __int8 *)v332;
                v158 = (unsigned __int16 *)((char *)v331 + 1);
                v159 = ~(unint64_t)v331 + v332;
                while (1)
                {
                  v160 = (unsigned __int8 *)v158;
                  v331 = v158;
                  if (!v159)
                    break;
                  v158 = (unsigned __int16 *)((char *)v158 + 1);
                  --v159;
                  if (JSC::tokenTypesOfLatin1Characters[*v160] != 19)
                  {
                    v157 = v160;
                    break;
                  }
                }
                v130 = (unint64_t)v160 < v332;
                v129 = v157;
              }
              else
              {
                v130 = 1;
              }
              if (v129 == (unsigned __int8 *)v332)
              {
                v181 = 14;
                goto LABEL_272;
              }
              v326 = 18;
              v114 = *v129;
              v161 = JSC::tokenTypesOfLatin1Characters[v114];
              if (v161 <= 4)
              {
                if (v161 == 4)
                {
                  if ((_DWORD)v114 != 39)
                  {
                    v113 = (size_t)(v129 + 1);
                    v331 = (unsigned __int16 *)(v129 + 1);
                    if (!v330)
                    {
                      v162 = v332 - v113;
                      if ((uint64_t)(v332 - v113) < 0)
                        goto LABEL_501;
                      v163 = (int8x16_t *)&v129[v162 + 1];
                      if (v162 >= 0x10)
                      {
                        v164 = v129 + 16;
                        v165.i64[0] = 0x2222222222222222;
                        v165.i64[1] = 0x2222222222222222;
                        v166.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v166.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v167.i64[0] = 0x2020202020202020;
                        v167.i64[1] = 0x2020202020202020;
                        while (1)
                        {
                          v168 = *(int8x16_t *)(v164 - 15);
                          v169 = vceqq_s8(v168, v165);
                          v170 = vorrq_s8(vorrq_s8(vceqq_s8(v168, v166), (int8x16_t)vcgtq_u8(v167, (uint8x16_t)v168)), v169);
                          v169.i8[0] = vmaxvq_u8((uint8x16_t)v170);
                          if (v169.i32[0])
                            break;
                          v164 += 16;
                          if (v164 >= (unsigned __int8 *)v163)
                          {
                            if (v164 - 15 >= (unsigned __int8 *)v163)
                              goto LABEL_268;
                            v171 = (unsigned __int8 *)&v163[-1];
                            v172 = v163[-1];
                            v173.i64[0] = 0x2222222222222222;
                            v173.i64[1] = 0x2222222222222222;
                            v174 = vceqq_s8(v172, v173);
                            v175.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v175.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v176.i64[0] = 0x2020202020202020;
                            v176.i64[1] = 0x2020202020202020;
                            v170 = vorrq_s8(vorrq_s8(vceqq_s8(v172, v175), (int8x16_t)vcgtq_u8(v176, (uint8x16_t)v172)), v174);
                            v174.i8[0] = vmaxvq_u8((uint8x16_t)v170);
                            if (!v174.i32[0])
                              goto LABEL_268;
LABEL_267:
                            v180 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v170);
                            v180.i8[0] = vminvq_u8(v180);
                            v163 = (int8x16_t *)&v171[v180.u32[0]];
                            goto LABEL_268;
                          }
                        }
                        v171 = v164 - 15;
                        goto LABEL_267;
                      }
                      if (v332 == v113)
                        goto LABEL_268;
                      v209 = (int8x16_t *)(v129 + 1);
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v209->u8[0]])
                        {
                          v163 = v209;
                          break;
                        }
                        v209 = (int8x16_t *)((char *)v209 + 1);
                        --v162;
                      }
                      while (v162);
LABEL_268:
                      v331 = (unsigned __int16 *)v163;
                      goto LABEL_269;
                    }
LABEL_520:
                    if (v113 >= v332)
                    {
                      v163 = (int8x16_t *)v113;
                    }
                    else
                    {
                      v300 = (uint64_t)&v129[v332 - v113 + 1];
                      v163 = (int8x16_t *)v113;
                      while (1)
                      {
                        v301 = v163->u8[0];
                        v302 = v301 < 0x20 || v301 == 92;
                        v303 = v302 || v301 == (_DWORD)v114;
                        v304 = v303;
                        if (v301 != 9 && v304)
                          break;
                        v163 = (int8x16_t *)((char *)v163 + 1);
                        v331 = (unsigned __int16 *)v163;
                        if (v163 == (int8x16_t *)v300)
                        {
                          v163 = (int8x16_t *)v300;
                          break;
                        }
                      }
                    }
LABEL_269:
                    if ((unint64_t)v163 >= v332 || v163->u8[0] != (_DWORD)v114)
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v325, (uint64_t)&v326, v113, v114, v115, v116, v117, v118);
                      goto LABEL_310;
                    }
                    v327 |= 1u;
                    v329 = v113;
                    v331 = (unsigned __int16 *)((char *)v163->u16 + 1);
                    v328 = v328 & 0x80000000 | ((_DWORD)v163 - v113) & 0x7FFFFFFF;
                    v181 = 4;
                    goto LABEL_272;
                  }
                  if (v330)
                  {
                    v113 = (size_t)(v129 + 1);
                    v331 = (unsigned __int16 *)(v129 + 1);
                    goto LABEL_520;
                  }
                  v293 = WTF::fastCompactMalloc((WTF *)0x20);
                  v294 = (WTF::StringImpl *)v293;
                  v295 = 0x2900000002;
                  v296 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_516;
                }
LABEL_253:
                v326 = v161;
                v331 = (unsigned __int16 *)(v129 + 1);
LABEL_310:
                v111 = v128;
                goto LABEL_170;
              }
              if (v161 != 6)
              {
                if (v161 != 5)
                {
                  if (v161 - 18 < 2)
                  {
                    WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v129, 1uLL, 39, &v355);
                    v249 = v355;
                    v355 = 0;
                    v250 = v325;
                    v325 = v249;
                    if (!v250)
                      goto LABEL_310;
                    v251 = *(_DWORD *)v250 - 2;
                    if (*(_DWORD *)v250 != 2)
                    {
LABEL_469:
                      *(_DWORD *)v250 = v251;
                      goto LABEL_310;
                    }
                    WTF::StringImpl::~StringImpl(v250, v112, v113, v114, v115, v116, v117, v118);
                    WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
                    v250 = v355;
                    v355 = 0;
                    if (!v250)
                      goto LABEL_310;
LABEL_495:
                    v251 = *(_DWORD *)v250 - 2;
                    if (*(_DWORD *)v250 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v250, v112, v113, v114, v115, v116, v117, v118);
                      WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
                      goto LABEL_310;
                    }
                    goto LABEL_469;
                  }
                  goto LABEL_253;
                }
                if ((_DWORD)v114 == 110)
                {
                  if ((uint64_t)(v332 - (_QWORD)v129) >= 4 && *(_WORD *)(v129 + 1) == 27765 && v129[3] == 108)
                  {
                    v331 = (unsigned __int16 *)(v129 + 4);
                    v181 = 13;
LABEL_272:
                    v326 = v181;
                    goto LABEL_310;
                  }
                }
                else if ((_DWORD)v114 == 102)
                {
                  if ((uint64_t)(v332 - (_QWORD)v129) >= 5
                    && *(_WORD *)(v129 + 1) == 27745
                    && *(_WORD *)(v129 + 3) == 25971)
                  {
                    v331 = (unsigned __int16 *)(v129 + 5);
                    v181 = 12;
                    goto LABEL_272;
                  }
                }
                else if ((_DWORD)v114 == 116
                       && (uint64_t)(v332 - (_QWORD)v129) >= 4
                       && *(_WORD *)(v129 + 1) == 30066
                       && v129[3] == 101)
                {
                  v331 = (unsigned __int16 *)(v129 + 4);
                  v181 = 11;
                  goto LABEL_272;
                }
                v255 = (int)v129;
                v329 = (unint64_t)v129;
                v256 = (int)v129;
                if ((unint64_t)v129 < v332)
                {
                  v257 = v332 - (_QWORD)v129;
                  while (1)
                  {
                    v258 = *v129;
                    if (v258 != 36)
                    {
                      v259 = v258 != 95 && (v258 - 48) >= 0xA;
                      if (v259 && (v258 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    v331 = (unsigned __int16 *)++v129;
                    if (!--v257)
                    {
                      LODWORD(v129) = v332;
                      break;
                    }
                  }
                  v256 = (int)v129;
                }
                v328 = v328 & 0x80000000 | (v256 - v255) & 0x7FFFFFFF;
                v181 = 5;
                goto LABEL_272;
              }
              v182 = (_DWORD)v114 != 45 || !v130;
              v183 = v129;
              if ((v182 & 1) == 0)
              {
                v183 = v129 + 1;
                v331 = (unsigned __int16 *)(v129 + 1);
              }
              if ((unint64_t)v183 < v332)
              {
                v184 = *v183;
                if (v184 == 48)
                {
                  v186 = v183 + 1;
                  v331 = (unsigned __int16 *)v186;
                  goto LABEL_284;
                }
                if ((v184 - 49) <= 8)
                {
                  v185 = v183 + 1;
                  do
                  {
                    v186 = v185;
                    v331 = (unsigned __int16 *)v185;
                    if ((unint64_t)v185 >= v332)
                      break;
                    ++v185;
                  }
                  while (*v186 - 48 < 0xA);
LABEL_284:
                  if ((unint64_t)v186 < v332)
                  {
                    v187 = *v186;
                    if (v187 == 46)
                    {
                      v331 = (unsigned __int16 *)(v186 + 1);
                      if ((unint64_t)(v186 + 1) >= v332 || v186[1] - 48 > 9)
                      {
                        v293 = WTF::fastCompactMalloc((WTF *)0x20);
                        v294 = (WTF::StringImpl *)v293;
                        v295 = 0x2200000002;
                        v296 = "Invalid digits after decimal point";
                        goto LABEL_516;
                      }
                      v192 = v186 + 2;
                      do
                      {
                        v186 = v192;
                        v331 = (unsigned __int16 *)v192;
                        if ((unint64_t)v192 >= v332)
                          break;
                        ++v192;
                      }
                      while (*v186 - 48 < 0xA);
                    }
                    else if (v187 != 69 && v187 != 101 && v186 - v129 <= 9)
                    {
                      v326 = 6;
                      v188 = *v129;
                      if (v188 == 45)
                        ++v129;
                      if (v129 >= v186)
                      {
                        if (v188 != 45)
                        {
                          v189 = 0;
                          goto LABEL_299;
                        }
                      }
                      else
                      {
                        v189 = 0;
                        do
                        {
                          v190 = *v129++;
                          v189 = v190 + 10 * v189 - 48;
                        }
                        while (v129 < v186);
                        if (v188 != 45)
                          goto LABEL_299;
                        if (v189)
                        {
                          v189 = -v189;
LABEL_299:
                          v191 = (double)v189;
LABEL_309:
                          v329 = *(_QWORD *)&v191;
                          goto LABEL_310;
                        }
                      }
                      v329 = 0x8000000000000000;
                      goto LABEL_310;
                    }
                  }
                  if ((unint64_t)v186 >= v332 || (*v186 | 0x20) != 0x65)
                  {
LABEL_307:
                    v326 = 6;
                    v355 = 0;
                    if (v186 - v129 < 0)
                      goto LABEL_501;
                    v191 = WTF::parseDouble(v129, v186 - v129, &v355);
                    goto LABEL_309;
                  }
                  v297 = v186 + 1;
                  v331 = (unsigned __int16 *)(v186 + 1);
                  if ((unint64_t)(v186 + 1) < v332)
                  {
                    v298 = *v297;
                    if (v298 == 45 || v298 == 43)
                    {
                      v297 = v186 + 2;
                      v331 = (unsigned __int16 *)(v186 + 2);
                    }
                  }
                  if ((unint64_t)v297 < v332 && *v297 - 48 <= 9)
                  {
                    v299 = v297 + 1;
                    do
                    {
                      v186 = v299;
                      v331 = (unsigned __int16 *)v299;
                      if ((unint64_t)v299 >= v332)
                        break;
                      ++v299;
                    }
                    while (*v186 - 48 < 0xA);
                    goto LABEL_307;
                  }
                  v293 = WTF::fastCompactMalloc((WTF *)0x20);
                  v294 = (WTF::StringImpl *)v293;
                  v295 = 0x5D00000002;
                  v296 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_516:
                  *(_QWORD *)v293 = v295;
                  *(_QWORD *)(v293 + 8) = v296;
                  *(_DWORD *)(v293 + 16) = 4;
                  v250 = v325;
                  v325 = v294;
                  if (!v250)
                    goto LABEL_310;
                  goto LABEL_495;
                }
              }
              v293 = WTF::fastCompactMalloc((WTF *)0x20);
              v294 = (WTF::StringImpl *)v293;
              v295 = 0xE00000002;
              v296 = "Invalid number";
              goto LABEL_516;
            }
            v193 = WTF::fastCompactMalloc((WTF *)0x20);
            v195 = (WTF::StringImpl *)v193;
            v51.n128_u64[0] = 0x2900000002;
            v196 = "Single quotes (') are not allowed in JSON";
LABEL_337:
            *(_QWORD *)v193 = v51.n128_u64[0];
            *(_QWORD *)(v193 + 8) = v196;
            *(_DWORD *)(v193 + 16) = 4;
            v204 = v325;
            v325 = v195;
            if (v204)
            {
              if (*(_DWORD *)v204 == 2)
              {
                WTF::StringImpl::~StringImpl(v204, v194, v11, v12, v13, v14, v15, v16);
                WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
              }
              else
              {
                *(_DWORD *)v204 -= 2;
              }
            }
            goto LABEL_168;
          }
LABEL_77:
          v326 = v55;
          v331 = (unsigned __int16 *)(v25 + 1);
          goto LABEL_168;
        }
        if (v55 != 6)
        {
          if (v55 == 5)
          {
            if ((_DWORD)v12 == 110)
            {
              if ((uint64_t)(v50 - (_QWORD)v25) >= 4 && *(_WORD *)(v25 + 1) == 27765 && v25[3] == 108)
              {
                v331 = (unsigned __int16 *)(v25 + 4);
                v70 = 13;
                goto LABEL_83;
              }
            }
            else if ((_DWORD)v12 == 102)
            {
              if ((uint64_t)(v50 - (_QWORD)v25) >= 5 && *(_WORD *)(v25 + 1) == 27745 && *(_WORD *)(v25 + 3) == 25971)
              {
                v331 = (unsigned __int16 *)(v25 + 5);
                v70 = 12;
                goto LABEL_83;
              }
            }
            else if ((_DWORD)v12 == 116
                   && (uint64_t)(v50 - (_QWORD)v25) >= 4
                   && *(_WORD *)(v25 + 1) == 30066
                   && v25[3] == 101)
            {
              v331 = (unsigned __int16 *)(v25 + 4);
              v70 = 11;
              goto LABEL_83;
            }
            v142 = (int)v25;
            v329 = (unint64_t)v25;
            v143 = (int)v25;
            if ((unint64_t)v25 < v50)
            {
              v144 = v50 - (_QWORD)v25;
              v145 = (_DWORD)v25 + v144;
              while (1)
              {
                v146 = *v25;
                if (v146 != 36)
                {
                  v147 = v146 != 95 && (v146 - 48) >= 0xA;
                  if (v147 && (v146 | 0x20u) - 97 > 0x19)
                    break;
                }
                v331 = (unsigned __int16 *)++v25;
                if (!--v144)
                {
                  LODWORD(v25) = v145;
                  break;
                }
              }
              v143 = (int)v25;
            }
            v328 = v328 & 0x80000000 | (v143 - v142) & 0x7FFFFFFF;
            v70 = 5;
            goto LABEL_83;
          }
          if (v55 - 18 < 2)
          {
            WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v25, 1uLL, 39, &v355);
            v133 = v355;
            v355 = 0;
            v325 = v133;
            goto LABEL_168;
          }
          goto LABEL_77;
        }
        v71 = v26 ^ 1;
        if ((_DWORD)v12 == 45)
          v72 = v71;
        else
          v72 = 1;
        v73 = v25;
        if ((v72 & 1) == 0)
        {
          v73 = v25 + 1;
          v331 = (unsigned __int16 *)(v25 + 1);
        }
        if ((unint64_t)v73 < v50)
        {
          v74 = *v73;
          if (v74 == 48)
          {
            v76 = v73 + 1;
            v331 = (unsigned __int16 *)v76;
            goto LABEL_99;
          }
          if ((v74 - 49) <= 8)
          {
            v75 = v73 + 1;
            do
            {
              v76 = v75;
              v331 = (unsigned __int16 *)v75;
              if ((unint64_t)v75 >= v50)
                break;
              ++v75;
            }
            while (*v76 - 48 < 0xA);
LABEL_99:
            if ((unint64_t)v76 < v50)
            {
              v77 = *v76;
              if (v77 == 46)
              {
                v331 = (unsigned __int16 *)(v76 + 1);
                if ((unint64_t)(v76 + 1) >= v50 || v76[1] - 48 > 9)
                {
                  v193 = WTF::fastCompactMalloc((WTF *)0x20);
                  v195 = (WTF::StringImpl *)v193;
                  v51.n128_u64[0] = 0x2200000002;
                  v196 = "Invalid digits after decimal point";
                  goto LABEL_337;
                }
                v109 = v76 + 2;
                do
                {
                  v76 = v109;
                  v331 = (unsigned __int16 *)v109;
                  if ((unint64_t)v109 >= v50)
                    break;
                  ++v109;
                }
                while (*v76 - 48 < 0xA);
              }
              else if (v77 != 69 && v77 != 101 && v76 - v25 <= 9)
              {
                v326 = 6;
                v78 = *v25;
                if (v78 == 45)
                  ++v25;
                if (v25 >= v76)
                {
                  if (v78 != 45)
                  {
                    v79 = 0;
                    goto LABEL_152;
                  }
                }
                else
                {
                  v79 = 0;
                  do
                  {
                    v80 = *v25++;
                    v79 = v80 + 10 * v79 - 48;
                  }
                  while (v25 < v76);
                  if (v78 != 45)
                    goto LABEL_152;
                  if (v79)
                  {
                    v79 = -v79;
LABEL_152:
                    v51.n128_f64[0] = (double)v79;
                    goto LABEL_167;
                  }
                }
                v329 = 0x8000000000000000;
                goto LABEL_168;
              }
            }
            if ((unint64_t)v76 < v50 && (*v76 | 0x20) == 0x65)
            {
              v197 = v76 + 1;
              v331 = (unsigned __int16 *)(v76 + 1);
              if ((unint64_t)(v76 + 1) < v50)
              {
                v198 = *v197;
                if (v198 == 45 || v198 == 43)
                {
                  v197 = v76 + 2;
                  v331 = (unsigned __int16 *)(v76 + 2);
                }
              }
              if ((unint64_t)v197 >= v50 || *v197 - 48 > 9)
              {
                v193 = WTF::fastCompactMalloc((WTF *)0x20);
                v195 = (WTF::StringImpl *)v193;
                v51.n128_u64[0] = 0x5D00000002;
                v196 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                goto LABEL_337;
              }
              v199 = v197 + 1;
              do
              {
                v76 = v199;
                v331 = (unsigned __int16 *)v199;
                if ((unint64_t)v199 >= v50)
                  break;
                ++v199;
              }
              while (*v76 - 48 < 0xA);
            }
            v326 = 6;
            v355 = 0;
            if (v76 - v25 < 0)
              goto LABEL_501;
            v51.n128_f64[0] = WTF::parseDouble(v25, v76 - v25, &v355);
LABEL_167:
            v329 = v51.n128_u64[0];
            goto LABEL_168;
          }
        }
        v193 = WTF::fastCompactMalloc((WTF *)0x20);
        v195 = (WTF::StringImpl *)v193;
        v51.n128_u64[0] = 0xE00000002;
        v196 = "Invalid number";
        goto LABEL_337;
      }
      v27 = v19;
      v28 = 2 * v20;
    }
    memcpy(v23, v27, v28);
    goto LABEL_28;
  }
  return 0;
}

JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned int indent, JSValueRef *exception)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSValueRef *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  unsigned int *v35;

  v9 = (uint64_t)ctx;
  if (ctx)
  {
    v11 = (unsigned int *)*((_QWORD *)ctx + 7);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v35, (JSC::VM *)v11, *(uint64_t *)&indent, (uint64_t)exception, v4, v5, v6, v7, v8);
    JSC::stringify((uint64_t)&v34, v9);
    if (exception)
    {
      *exception = 0;
      v18 = (JSValueRef *)*((_QWORD *)v11 + 2);
      if (v18)
      {
        *exception = v18[1];
        *((_QWORD *)v11 + 2) = 0;
        v19 = v11 + 20;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 & 0xFFFFFFEF, v19));
LABEL_19:
        Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v9 + 2024), (JSC::JSGlobalObject *)v9, (JSC::Exception *)v18, v13, v14, v15, v16, v17);
        v9 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      v18 = (JSValueRef *)*((_QWORD *)v11 + 2);
      if (v18)
      {
        *((_QWORD *)v11 + 2) = 0;
        v32 = v11 + 20;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 & 0xFFFFFFEF, v32));
        goto LABEL_19;
      }
    }
    if (!v34)
    {
      v9 = 0;
LABEL_14:
      JSC::JSLockHolder::~JSLockHolder(&v35, v12, (uint64_t)v18, v13, v14, v15, v16, v17);
      return (JSStringRef)v9;
    }
    v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 1;
    WTF::String::isolatedCopy(&v34, (uint64_t *)(v9 + 8));
    v21 = *(_QWORD *)(v9 + 8);
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
        v21 = 0;
      else
        v21 = *(_QWORD *)(v21 + 8);
    }
    *(_QWORD *)(v9 + 16) = v21;
LABEL_11:
    v22 = v34;
    v34 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)v12, (uint64_t)v18, v13, v14, v15, v16, v17);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    goto LABEL_14;
  }
  return (JSStringRef)v9;
}

_DWORD *OpaqueJSString::tryCreate@<X0>(_DWORD *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)this)
  {
    v4 = this;
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    this = WTF::String::isolatedCopy(v4, (uint64_t *)(v5 + 8));
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
        v6 = 0;
      else
        v6 = *(_QWORD *)(v6 + 8);
    }
    *(_QWORD *)(v5 + 16) = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return this;
}

BOOL JSValueToBoolean(JSContextRef ctx, JSValueRef value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSContextRef v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int *v25;
  int v26;
  BOOL v27;
  BOOL v28;
  unsigned int *v29;

  v9 = ctx;
  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, ctx, v2, v3, v4, v5, v6, v7, v8);
    v18 = 2;
    if (value)
      v18 = (unint64_t)value;
    if (v18 >= 0xFFFE000000000000)
    {
      v23 = (_DWORD)v18 == 0;
      goto LABEL_15;
    }
    *(_QWORD *)&v19 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v27 = v19 <= 0.0;
      v28 = v19 < 0.0;
      LOBYTE(v9) = !v27 || v28;
      goto LABEL_8;
    }
    if ((v18 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v9) = v18 == 7;
LABEL_8:
      JSC::JSLockHolder::~JSLockHolder(&v29, v11, v12, v13, v14, v15, v16, v17);
      return (char)v9;
    }
    v21 = *(unsigned __int8 *)(v18 + 5);
    if (v21 == 2)
    {
      v24 = *(_QWORD *)(v18 + 8);
      v25 = (int *)(v18 + 16);
      if ((v24 & 1) == 0)
        v25 = (int *)(v24 + 4);
      v26 = *v25;
    }
    else
    {
      if (v21 != 3)
      {
        v22 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v22 + 10) & 1) == 0)
        {
          LOBYTE(v9) = 1;
          goto LABEL_8;
        }
        v23 = *(_QWORD *)(v22 + 40) == (_QWORD)v9;
LABEL_15:
        LOBYTE(v9) = !v23;
        goto LABEL_8;
      }
      v26 = *(_DWORD *)(v18 + 8);
    }
    v23 = v26 == 0;
    goto LABEL_15;
  }
  return (char)v9;
}

double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v12;
  JSC::JSBigInt *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  JSValueRef *v22;
  double v23;
  char *v24;
  BOOL v25;
  double v26;
  JSC::VM *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  BOOL hasExceptionsAfterHandlingTraps;
  double v38;
  BOOL v39;
  unint64_t v40;
  unsigned int *v41;
  JSC::JSObject *v42;

  if (!ctx)
    return NAN;
  v12 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v12, (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  if (value)
    v21 = (unint64_t)value;
  else
    v21 = 2;
  if (!(v21 >> 49))
  {
    v28 = (JSC::VM *)*((_QWORD *)ctx + 7);
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v29 = *(unsigned __int8 *)(v21 + 5);
      if (v29 == 3)
      {
LABEL_17:
        value = (JSValueRef)v21;
        goto LABEL_6;
      }
      if (v29 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v21, ctx, v14, v15, v16, v17, v18, v19, v20);
        if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v34 = (int)v33, v33 == (double)(int)v34)
          && ((_DWORD)v34 || (*(_QWORD *)&v33 & 0x8000000000000000) == 0))
        {
          value = (JSValueRef)(v34 | 0xFFFE000000000000);
        }
        else
        {
          value = (JSValueRef)(*(_QWORD *)&v33 + 0x2000000000000);
        }
        goto LABEL_6;
      }
      v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)ctx, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v42 = (JSC::JSObject *)v21;
    if (*((_DWORD *)v28 + 20))
    {
      v40 = v21;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
      v21 = v40;
      if (hasExceptionsAfterHandlingTraps)
      {
LABEL_48:
        v21 = 0;
        goto LABEL_17;
      }
    }
    if (v21 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_17;
    if ((v21 & 0xFFFE000000000002) != 0)
    {
      if (v21 >= 0xFFFE000000000000)
      {
        v35 = (double)(int)v21;
LABEL_40:
        if (!*((_DWORD *)v28 + 20)
          || (v38 = v35,
              v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)v13, v14, v15, v16, v17, v18, v19),
              v35 = v38,
              !v39))
        {
          if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v36 = (int)v35, v35 == (double)(int)v36)
            && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
          {
            v21 = v36 | 0xFFFE000000000000;
          }
          else
          {
            v21 = *(_QWORD *)&v35 + 0x2000000000000;
          }
          goto LABEL_17;
        }
        goto LABEL_48;
      }
    }
    else if (*(_BYTE *)(v21 + 5) == 3)
    {
      goto LABEL_17;
    }
    JSC::JSValue::toNumberSlowCase(&v42, ctx, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_40;
  }
LABEL_6:
  v22 = (JSValueRef *)*((_QWORD *)v12 + 2);
  if (v22)
  {
    if (exception)
      *exception = v22[1];
    *((_QWORD *)v12 + 2) = 0;
    v30 = v12 + 20;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 & 0xFFFFFFEF, v30));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v22, v15, v16, v17, v18, v19);
    v26 = NAN;
  }
  else
  {
    if (((unint64_t)value & 0xFFFE000000000002) == 0 && *((_BYTE *)value + 5) == 3)
    {
      v32 = JSC::JSBigInt::toNumberHeap(value, v13);
      v23 = (double)(int)v32;
      v24 = (char *)(v32 - 0x2000000000000);
      v25 = v32 > 0xFFFDFFFFFFFFFFFFLL;
    }
    else
    {
      v23 = (double)(int)value;
      v24 = (char *)value - 0x2000000000000;
      v25 = (unint64_t)value > 0xFFFDFFFFFFFFFFFFLL;
    }
    if (v25)
      v26 = v23;
    else
      v26 = *(double *)&v24;
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v13, (uint64_t)v22, v15, v16, v17, v18, v19);
  return v26;
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v12;
  void *v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  int *v21;
  uint64_t v22;
  OpaqueJSString *v23;
  int *v24;
  JSValueRef *v25;
  unsigned int *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  OpaqueJSString *v38;
  JSValueRef v39;
  unsigned int *v40;

  if (!ctx)
    return 0;
  v12 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v40, (JSC::VM *)v12, (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  if (!value)
    value = (JSValueRef)2;
  v39 = value;
  if (((unint64_t)value & 0xFFFE000000000002) != 0 || *((_BYTE *)value + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, ctx, v14, v15, v16, v17, v18, v19, &v37);
    v21 = v37;
  }
  else
  {
    v21 = (int *)*((_QWORD *)value + 1);
    if ((v21 & 1) != 0)
      v21 = *JSC::JSRopeString::resolveRope((unint64_t)value, ctx, (uint64_t)v14, v15, v20, v16, v17, v18, v19);
    if (v21)
      *v21 += 2;
    v37 = v21;
  }
  if (v21)
  {
    v22 = WTF::fastMalloc((WTF *)0x18);
    v23 = (OpaqueJSString *)v22;
    *(_DWORD *)v22 = 1;
    v24 = v37;
    *(_QWORD *)(v22 + 8) = v37;
    if (v24)
    {
      if ((v24[4] & 4) != 0)
        v36 = 0;
      else
        v36 = *((_QWORD *)v24 + 1);
      *(_QWORD *)(v22 + 16) = v36;
    }
    else
    {
      *(_QWORD *)(v22 + 16) = 0;
    }
    v38 = (OpaqueJSString *)v22;
  }
  else
  {
    v23 = 0;
    v38 = 0;
  }
  v25 = (JSValueRef *)*((_QWORD *)v12 + 2);
  if (v25)
  {
    if (exception)
      *exception = v25[1];
    *((_QWORD *)v12 + 2) = 0;
    v27 = v12 + 20;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 & 0xFFFFFFEF, v27));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v25, v15, v16, v17, v18, v19);
    WTF::RefPtr<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::operator=((unint64_t *)&v38, v29, v30, v31, v32, v33, v34, v35);
    v23 = v38;
  }
  JSC::JSLockHolder::~JSLockHolder(&v40, v13, (uint64_t)v25, v15, v16, v17, v18, v19);
  return v23;
}

uint64_t OpaqueJSString::tryCreate@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (*a1)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    v5 = 0;
    *(_DWORD *)result = 1;
    v6 = *a1;
    *a1 = 0;
    *(_QWORD *)(result + 8) = v6;
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
        v5 = 0;
      else
        v5 = *(_QWORD *)(v6 + 8);
    }
    *(_QWORD *)(result + 16) = v5;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

unint64_t *WTF::RefPtr<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::operator=(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = atomic_load((unint64_t *)(v9 + 16));
      if (v13)
      {
        v14 = *(_QWORD *)(v9 + 8);
        if (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0 || *(_QWORD *)(v14 + 8) != v13)
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v15 = *(WTF::StringImpl **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int *v12;
  void *v13;
  JSC::Structure *v14;
  JSC::Symbol *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValueRef *v20;
  const OpaqueJSValue *v22;
  unsigned int *v23;
  unsigned int v24;
  JSValueRef v25;
  unsigned int *v26;

  if (!ctx)
    return 0;
  v12 = (unsigned int *)*((_QWORD *)ctx + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v26, (JSC::VM *)v12, (uint64_t)exception, v3, v4, v5, v6, v7, v8);
  if (!value)
    value = (JSValueRef)2;
  v25 = value;
  if (((unint64_t)value & 0xFFFE000000000002) != 0)
  {
    v22 = (const OpaqueJSValue *)JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v25, ctx, v14, (uint64_t)v15, v16, v17, v18, v19);
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)value + 5) <= 0x16u)
  {
    v22 = (const OpaqueJSValue *)JSC::JSCell::toObjectSlow(value, (JSC::SymbolObject **)ctx, (uint64_t)v14, v15, v16, v17, v18, v19);
LABEL_11:
    value = v22;
  }
  v20 = (JSValueRef *)*((_QWORD *)v12 + 2);
  if (v20)
  {
    if (exception)
      *exception = v20[1];
    *((_QWORD *)v12 + 2) = 0;
    v23 = v12 + 20;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 & 0xFFFFFFEF, v23));
    Inspector::JSGlobalObjectInspectorController::reportAPIException(*((Inspector::JSGlobalObjectInspectorController **)ctx + 253), ctx, (JSC::Exception *)v20, (uint64_t)v15, v16, v17, v18, v19);
    value = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v26, v13, (uint64_t)v20, (uint64_t)v15, v16, v17, v18, v19);
  return value;
}

void JSValueProtect(JSContextRef ctx, JSValueRef value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unsigned int *v19;
  _QWORD v20[3];
  JSValueRef v21;
  int v22;

  if (ctx)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, ctx, v2, v3, v4, v5, v6, v7, v8);
    if (value && ((unint64_t)value & 0xFFFE000000000002) == 0)
    {
      v17 = (_QWORD *)((unint64_t)value & 0xFFFFFFFFFFFFC000 | 8);
      if ((value & 8) != 0)
        v17 = (_QWORD *)((char *)value - 16);
      v18 = (uint64_t *)(*v17 + 552);
      v21 = value;
      v22 = 0;
      WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v18, (uint64_t *)&v21, &v22, v12, v13, v14, v15, v16, (uint64_t)v20);
      ++*(_DWORD *)(v20[0] + 8);
    }
    JSC::JSLockHolder::~JSLockHolder(&v19, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSValueUnprotect(JSContextRef ctx, JSValueRef value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unsigned int *v19;
  JSValueRef v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, ctx, v2, v3, v4, v5, v6, v7, v8);
  if (value && ((unint64_t)value & 0xFFFE000000000002) == 0)
  {
    v17 = (_QWORD *)((unint64_t)value & 0xFFFFFFFFFFFFC000 | 8);
    if ((value & 8) != 0)
      v17 = (_QWORD *)((char *)value - 16);
    v18 = (uint64_t *)(*v17 + 552);
    v20 = value;
    WTF::HashCountedSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::remove(v18, &v20, v11, v12, v13, v14, v15, v16);
  }
  JSC::JSLockHolder::~JSLockHolder(&v19, v10, v11, v12, v13, v14, v15, v16);
}

OpaqueJSWeakObjectMap *JSWeakObjectMapCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  OpaqueJSWeakObjectMap *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  OpaqueJSWeakObjectMap *v21;
  unsigned int *v22;

  v11 = *(JSC::VM **)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v22, v11, a3, a4, a5, a6, a7, a8, a9);
  OpaqueJSWeakObjectMap::create((uint64_t *)&v21, (uint64_t)v11, a2, a3);
  v12 = v21;
  ++*(_DWORD *)v21;
  WTF::RefCounted<OpaqueJSWeakObjectMap>::deref(v12);
  JSC::JSLockHolder::~JSLockHolder(&v22, v13, v14, v15, v16, v17, v18, v19);
  return v12;
}

uint64_t *OpaqueJSWeakObjectMap::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *result;

  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = off_1E357CAB8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = a2;
  result = JSC::Heap::registerWeakGCHashTable(a2 + 192, v8 + 8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *a1 = v8;
  return result;
}

void JSWeakObjectMapSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *Allocator;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
    if (a4)
    {
      if ((a4 & 8) != 0)
        v19 = (a4 - 112) | 1;
      else
        v19 = a4 & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = (_QWORD *)(v19 + 47);
      else
        v20 = (_QWORD *)(*(_QWORD *)v19 + 32);
      Allocator = (_QWORD *)v20[2];
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v20, v19);
      v20[2] = *Allocator;
      *Allocator = a4;
      Allocator[1] = 0;
      Allocator[2] = 0;
      v24 = *(_QWORD *)(a2 + 16);
      v23 = (uint64_t *)(a2 + 16);
      v22 = v24;
      if (v24
        || (WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::expand(v23, 0, v13, v14, v15, v16, v17, v18), (v22 = *v23) != 0))
      {
        v25 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        v25 = 0;
      }
      v26 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v12 = (uint64_t *)(v22 + 16 * v29);
      v30 = *v12;
      if (*v12)
      {
        v38 = 0;
        v39 = 1;
        while (v30 != a3)
        {
          if (v30 == -1)
            v38 = v12;
          v29 = (v29 + v39) & v25;
          v12 = (uint64_t *)(v22 + 16 * v29);
          v30 = *v12;
          ++v39;
          if (!*v12)
          {
            if (v38)
            {
              *v38 = 0;
              v38[1] = 0;
              --*(_DWORD *)(*v23 - 16);
              v12 = v38;
            }
            goto LABEL_13;
          }
        }
        v40 = v12[1];
        v12[1] = (uint64_t)Allocator;
        if (v40)
          *(_QWORD *)(v40 + 8) = 3;
        goto LABEL_21;
      }
LABEL_13:
      v31 = v12[1];
      *v12 = a3;
      v12[1] = (uint64_t)Allocator;
      if (v31)
        *(_QWORD *)(v31 + 8) = 3;
      v32 = *v23;
      if (*v23)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v23;
      if (*v23)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_21;
      }
      else if (3 * v37 > 4 * v36)
      {
        goto LABEL_21;
      }
      WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::expand(v23, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    }
LABEL_21:
    JSC::JSLockHolder::~JSLockHolder(&v41, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSWeakObjectMapGet(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int *v29;

  if (!a1)
    return 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, a1, a3, a4, a5, a6, a7, a8, a9);
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
    goto LABEL_10;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(_QWORD *)(v18 + 16 * v23);
  if (v24 != a3)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(_QWORD *)(v18 + 16 * v23);
      ++v25;
      if (v24 == a3)
        goto LABEL_7;
    }
    goto LABEL_10;
  }
LABEL_7:
  v26 = *(uint64_t **)(v18 + 16 * v23 + 8);
  if (!v26 || (v26[1] & 3) != 0)
  {
LABEL_10:
    v27 = 0;
    goto LABEL_11;
  }
  v27 = *v26;
LABEL_11:
  JSC::JSLockHolder::~JSLockHolder(&v29, v11, v12, v13, v14, v15, v16, v17);
  return v27;
}

void JSWeakObjectMapRemove(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v35;

  if (a1)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v35, a1, a3, a4, a5, a6, a7, a8, a9);
    v20 = *(_QWORD *)(a2 + 16);
    v18 = (uint64_t *)(a2 + 16);
    v19 = v20;
    if (v20)
    {
      v21 = *(_DWORD *)(v19 - 8);
      v22 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a3) & v21;
      v23 = *(_QWORD *)(v19 + 16 * v22);
      if (v23 != a3)
      {
        v24 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v24) & v21;
          v23 = *(_QWORD *)(v19 + 16 * v22);
          ++v24;
          if (v23 == a3)
            goto LABEL_9;
        }
        v22 = *(unsigned int *)(v19 - 4);
      }
LABEL_9:
      if (v22 != *(_DWORD *)(v19 - 4))
      {
        v25 = (_QWORD *)(v19 + 16 * v22);
        *v25 = -1;
        v28 = v25[1];
        v27 = v25 + 1;
        v26 = v28;
        if (v28)
        {
          *(_QWORD *)(v26 + 8) = 3;
          *v27 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v29 = *v18;
        if (*v18)
          v30 = *(_DWORD *)(v29 - 12) - 1;
        else
          v30 = -1;
        *(_DWORD *)(v29 - 12) = v30;
        v31 = *v18;
        if (*v18)
        {
          v32 = 6 * *(_DWORD *)(v31 - 12);
          v33 = *(_DWORD *)(v31 - 4);
          if (v32 < v33 && v33 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v33 >> 1, 0, v13, v14, v15, v16, v17);
        }
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v35, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t JSWeakCreate(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int *v36;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, a1, a3, a4, a5, a6, a7, a8, a9);
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v20 = (a2 - 112) | 1;
    else
      v20 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v20 & 1) != 0)
      v21 = v20 + 47;
    else
      v21 = *(_QWORD *)v20 + 32;
    v18 = *(_QWORD **)(v21 + 16);
    if (!v18)
    {
      v34 = v20;
      v35 = (_QWORD *)v21;
      while (1)
      {
        v22 = *(_QWORD **)(v21 + 24);
        if (!v22)
          break;
        v21 = (uint64_t)v35;
        v35[3] = v22[2];
        v18 = (_QWORD *)v22[4];
        v22[3] = 257;
        v22[4] = 0;
        if (v18)
          goto LABEL_10;
      }
      v23 = v35[6];
      if (!v35[1])
      {
        v24 = *(_QWORD **)(v23 + 488);
        *v35 = v23 + 480;
        v35[1] = v24;
        *v24 = v35;
        *(_QWORD *)(v23 + 488) = v35;
      }
      *(_QWORD *)(v23 + 1072) += 1024;
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v25, v34);
      JSC::Heap::didAllocate((JSC::Heap *)(v35[6] + 192), 0x400uLL, v26, v27, v28, v29, v30, v31);
      v21 = (uint64_t)v35;
      v32 = v35 + 4;
      v33 = v35[5];
      if (v33)
        v32 = (_QWORD *)(v33 + 16);
      *v32 = v25;
      v35[5] = v25;
      v25[1] = v33;
      v25[2] = 0;
      v18 = (_QWORD *)v25[4];
      v25[3] = 257;
      v25[4] = 0;
    }
LABEL_10:
    *(_QWORD *)(v21 + 16) = *v18;
    *v18 = a2;
    v18[1] = 0;
    v18[2] = 0;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(v17 + 8) = v18;
  JSC::JSLockHolder::~JSLockHolder(&v36, v10, v11, v12, v13, v14, v15, v16);
  return v17;
}

void JSWeakRetain(JSC::VM *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v18, a1, a3, a4, a5, a6, a7, a8, a9);
  do
    v17 = __ldaxr(a2);
  while (__stlxr(v17 + 1, a2));
  JSC::JSLockHolder::~JSLockHolder(&v18, v10, v11, v12, v13, v14, v15, v16);
}

void JSWeakRelease(JSC::VM *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  do
  {
    v17 = __ldaxr((unsigned int *)a2);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)a2));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)a2);
    v19 = *(_QWORD *)(a2 + 8);
    if (v19)
    {
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree(a2, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::JSLockHolder::~JSLockHolder(&v20, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSWeakGetObject(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1 || (v1[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t JSC::JSWeakValue::setObject(uint64_t this, unint64_t a2, JSC::WeakHandleOwner *a3, void *a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  JSC::WeakHandleOwner *v25;
  JSC::JSObject *v26;

  *(_DWORD *)this = 2;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v6 = (a2 - 112) | 1;
    else
      v6 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(v6 + 47);
    else
      v7 = (_QWORD *)(*(_QWORD *)v6 + 32);
    v4 = (unint64_t *)v7[2];
    if (!v4)
    {
      v22 = v6;
      v26 = (JSC::JSObject *)a2;
      v24 = a4;
      v25 = a3;
      v23 = this;
      while (1)
      {
        v8 = v7;
        v9 = (_QWORD *)v7[3];
        if (!v9)
          break;
        v7[3] = v9[2];
        v4 = (unint64_t *)v9[4];
        v9[3] = 257;
        v9[4] = 0;
        if (v4)
          goto LABEL_12;
      }
      v10 = v7[1];
      v11 = v7[6];
      if (!v10)
      {
        v12 = *(_QWORD **)(v11 + 488);
        *v8 = v11 + 480;
        v8[1] = v12;
        *v12 = v8;
        *(_QWORD *)(v11 + 488) = v8;
      }
      *(_QWORD *)(v11 + 1072) += 1024;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v13, v22);
      JSC::Heap::didAllocate((JSC::Heap *)(v8[6] + 192), 0x400uLL, v14, v15, v16, v17, v18, v19);
      v7 = v8;
      v20 = v8 + 4;
      v21 = v8[5];
      if (v21)
        v20 = (_QWORD *)(v21 + 16);
      *v20 = v13;
      v8[5] = v13;
      v13[1] = v21;
      v13[2] = 0;
      v4 = (unint64_t *)v13[4];
      v13[3] = 257;
      v13[4] = 0;
      this = v23;
      a4 = v24;
      a3 = v25;
      a2 = (unint64_t)v26;
    }
LABEL_12:
    v7[2] = *v4;
    *v4 = a2;
    v4[1] = (unint64_t)a3;
    v4[2] = (unint64_t)a4;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = v4;
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return this;
}

void JSC::JSWeakValue::setString(JSC::JSWeakValue *this, unint64_t a2, JSC::WeakHandleOwner *a3, unint64_t a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  *(_DWORD *)this = 3;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v8 = (a2 - 112) | 1;
    else
      v8 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v8 & 1) != 0)
      v9 = (_QWORD *)(v8 + 47);
    else
      v9 = (_QWORD *)(*(_QWORD *)v8 + 32);
    v10 = (unint64_t *)v9[2];
    if (!v10)
    {
      while (1)
      {
        v12 = (_QWORD *)v9[3];
        if (!v12)
          break;
        v9[3] = v12[2];
        v10 = (unint64_t *)v12[4];
        v12[3] = 257;
        v12[4] = 0;
        if (v10)
          goto LABEL_8;
      }
      v13 = v9[6];
      if (!v9[1])
      {
        v14 = *(_QWORD **)(v13 + 488);
        *v9 = v13 + 480;
        v9[1] = v14;
        *v14 = v9;
        *(_QWORD *)(v13 + 488) = v9;
      }
      *(_QWORD *)(v13 + 1072) += 1024;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v15, v8);
      JSC::Heap::didAllocate((JSC::Heap *)(v9[6] + 192), 0x400uLL, v16, v17, v18, v19, v20, v21);
      v22 = v9 + 4;
      v23 = v9[5];
      if (v23)
        v22 = (_QWORD *)(v23 + 16);
      *v22 = v15;
      v9[5] = v15;
      v15[1] = v23;
      v15[2] = 0;
      v10 = (unint64_t *)v15[4];
      v15[3] = 257;
      v15[4] = 0;
    }
LABEL_8:
    v9[2] = *v10;
    *v10 = a2;
    v10[1] = (unint64_t)a3;
    v10[2] = a4;
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v10;
  if (v11)
    *(_QWORD *)(v11 + 8) = 3;
}

void JSC::MarkedJSValueRefArray::visitAggregate<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t i;
  unint64_t v12;
  BOOL v13;
  int v14;

  if (*(_QWORD *)(a1 + 88))
    v8 = *(_QWORD *)(a1 + 88);
  else
    v8 = a1 + 24;
  if (*(_DWORD *)(a1 + 16))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 16); ++i)
    {
      v12 = *(_QWORD *)(v8 + 8 * i);
      if (v12)
        v13 = (v12 & 0xFFFE000000000002) == 0;
      else
        v13 = 0;
      if (!v13)
        continue;
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        v14 = *(_DWORD *)(a2 + 132);
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v14)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v14, a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
        {
LABEL_19:
          JSC::SlotVisitor::appendSlow(a2, v12, 0, a4, a5, a6, a7, a8);
          continue;
        }
      }
      if (*(_QWORD *)(a2 + 168))
        goto LABEL_19;
    }
  }
}

JSC::MarkedJSValueRefArray *JSC::MarkedJSValueRefArray::MarkedJSValueRefArray(JSC::MarkedJSValueRefArray *this, OpaqueJSContext *a2, unsigned int a3)
{
  WTF *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  if (a3 >= 9)
  {
    v6 = (WTF *)(8 * a3);
    v7 = (void *)WTF::fastMalloc(v6);
    bzero(v7, (size_t)v6);
    v15 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v7;
    if (v15)
      WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
    JSC::Heap::addMarkedJSValueRefArray(*((_QWORD *)a2 + 7) + 192, this);
  }
  return this;
}

void JSC::MarkedJSValueRefArray::~MarkedJSValueRefArray(JSC::MarkedJSValueRefArray *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (v9)
  {
    v11 = *(_QWORD *)this;
    *v9 = *(_QWORD *)this;
    *(_QWORD *)(v11 + 8) = v9;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
}

void OpaqueJSString::~OpaqueJSString(OpaqueJSString *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = atomic_load((unint64_t *)this + 2);
  if (v9)
  {
    v11 = *((_QWORD *)this + 1);
    if (!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0 || *(_QWORD *)(v11 + 8) != v9)
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

{
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = atomic_load((unint64_t *)this + 2);
  if (v9)
  {
    v10 = *((_QWORD *)this + 1);
    if (!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0 || *(_QWORD *)(v10 + 8) != v9)
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

void OpaqueJSString::identifier(OpaqueJSString *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  WTF::AtomStringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  char v32;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 4);
    if ((_DWORD)v10)
    {
      v11 = *(WTF::AtomStringImpl **)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        if ((_DWORD)v10 == 1)
        {
          if (*((_BYTE *)a2 + 44265))
          {
            v29 = *((_QWORD *)a2 + *(unsigned __int8 *)v11 + 5277);
            v19 = *(WTF::StringImpl **)(v29 + 8);
            if ((v19 & 1) != 0)
              v30 = 0;
            else
              v30 = *(_DWORD **)(v29 + 8);
            *v30 += 2;
          }
          else
          {
            v32 = *(_BYTE *)v11;
            WTF::AtomStringImpl::add((uint64_t)&v32, 1uLL, a3, a4, a5, a6, a7, &v31);
            v19 = v31;
          }
        }
        else
        {
          WTF::AtomStringImpl::add((uint64_t)v11, v10, a3, a4, a5, a6, a7, &v31);
          v19 = v31;
          v20 = *(_DWORD *)v31;
          *(_DWORD *)v31 += 2;
          v31 = 0;
          if (v20)
          {
            *(_DWORD *)v19 = v20;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
            WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
          }
        }
        *a8 = (int *)v19;
      }
      else
      {
        JSC::Identifier::fromString((uint64_t)a2, v11, v10, a3, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      JSC::Identifier::Identifier(a8, 0, (const WTF::StringImpl *)v10, a3, a4, a5, a6, a7);
    }
  }
  else
  {
    *a8 = 0;
  }
}

int **JSC::Identifier::Identifier(int **a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int *v11;

  v9 = &WTF::StringImpl::s_emptyAtomString;
  if ((dword_1ECF2C430 & 0x10) != 0)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((unint64_t)&WTF::StringImpl::s_emptyAtomString, a3, a4, a5, a6, a7, a8, (WTF *)&v11);
    v9 = v11;
  }
  *a1 = v9;
  return a1;
}

void JSC::Identifier::fromString(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  int v36;
  _QWORD v37[2];
  char v38;

  if (a3 != 1)
  {
    if (!a3)
    {
      v20 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      v22 = WTF::StringImpl::s_emptyAtomString + 2;
LABEL_23:
      *(_DWORD *)v20 = v22;
      goto LABEL_24;
    }
    if (a2)
    {
      v10 = 0;
      v11 = -1640531527;
      v34 = a2;
      v35 = a3;
      do
      {
        v12 = ((v11 + *((unsigned __int16 *)a2 + v10)) << 16) ^ (*((unsigned __int16 *)a2 + v10 + 1) << 11) ^ (v11 + *((unsigned __int16 *)a2 + v10));
        v11 = v12 + (v12 >> 11);
        v13 = v10 + 3;
        v10 += 2;
      }
      while (v13 < a3);
      if ((a3 & 1) == 0)
      {
LABEL_8:
        v15 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
        v16 = (v15 ^ (4 * v15)) + ((v15 ^ (4 * v15)) >> 15);
        v17 = (v16 ^ (v16 << 10)) & 0xFFFFFF;
        if (!v17)
          v17 = 0x800000;
        v36 = v17;
        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
        {
LABEL_13:
          v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v19)
            v19 = WTF::Thread::initializeCurrentTLS(0);
          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v19 + 56), (uint64_t)&v34, a4, a5, a6, a7, a8, (uint64_t)v37);
          v20 = (WTF::StringImpl *)(16 * *(unsigned int *)v37[0]);
          if (!v38)
            *(_DWORD *)v20 += 2;
          v21 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
          if (v21 == 1)
          {
            if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
            {
LABEL_22:
              v22 = *(_DWORD *)v20;
              *(_DWORD *)v20 += 2;
              if (!v22)
              {
                WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
                goto LABEL_24;
              }
              goto LABEL_23;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_22;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
        goto LABEL_13;
      }
LABEL_7:
      v14 = *((unsigned __int16 *)a2 + a3 - 1);
      v11 = ((v11 + v14) ^ ((v11 + v14) << 11)) + (((v11 + v14) ^ ((v11 + v14) << 11)) >> 17);
      goto LABEL_8;
    }
    goto LABEL_36;
  }
  v31 = *(unsigned __int16 *)a2;
  if (v31 > 0xFF)
  {
    if (a2)
    {
      v11 = -1640531527;
      v34 = a2;
      v35 = 1;
      goto LABEL_7;
    }
LABEL_36:
    v20 = 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 44265))
  {
    v32 = *(_QWORD *)(a1 + 8 * v31 + 42216);
    v20 = *(WTF::StringImpl **)(v32 + 8);
    if ((v20 & 1) != 0)
      v33 = 0;
    else
      v33 = *(_DWORD **)(v32 + 8);
    *v33 += 2;
  }
  else
  {
    LOBYTE(v34) = *(_WORD *)a2;
    WTF::AtomStringImpl::add((uint64_t)&v34, 1uLL, a4, a5, a6, a7, a8, v37);
    v20 = (WTF::StringImpl *)v37[0];
  }
LABEL_24:
  *a9 = v20;
}

unint64_t OpaqueJSString::characters(OpaqueJSString *this)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  char *v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;

  v1 = (unint64_t *)((char *)this + 16);
  v2 = atomic_load((unint64_t *)this + 2);
  if (!v2)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = (char *)WTF::fastMalloc((WTF *)(2 * *(unsigned int *)(v4 + 4)));
      v2 = (unint64_t)v5;
      v13 = *((_QWORD *)this + 1);
      if (v13)
      {
        v6 = *(int8x16_t **)(v13 + 8);
        v14 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        {
          v18 = &v5[2 * v14];
          if (v14 >= 0x40)
          {
            v19 = &v5[2 * (v14 & 0xFFFFFFC0)];
            v20 = 0uLL;
            v21 = v5;
            do
            {
              v29.val[0] = *v6;
              v22 = v6[1];
              v30.val[0] = v6[2];
              v23 = v6[3];
              v6 += 4;
              v24 = v23;
              v30.val[1] = 0uLL;
              v31.val[0] = v22;
              v29.val[1] = 0uLL;
              v25 = v21;
              vst2q_s8(v25, v29);
              v25 += 32;
              v31.val[1] = 0uLL;
              vst2q_s8(v25, v31);
              v26 = v21 + 64;
              vst2q_s8(v26, v30);
              v27 = v21 + 96;
              vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
              v21 += 128;
            }
            while (v21 != v19);
          }
          else
          {
            v19 = v5;
          }
          while (v19 != v18)
          {
            v28 = v6->u8[0];
            v6 = (int8x16_t *)((char *)v6 + 1);
            *(_WORD *)v19 = v28;
            v19 += 2;
          }
        }
        else if ((_DWORD)v14 == 1)
        {
          *(_WORD *)v5 = v6->i16[0];
        }
        else if ((_DWORD)v14)
        {
          memcpy(v5, v6, 2 * v14);
        }
      }
      while (1)
      {
        v15 = __ldaxr(v1);
        if (v15)
          break;
        if (!__stlxr(v2, v1))
        {
          v16 = 1;
          goto LABEL_12;
        }
      }
      v16 = 0;
      __clrex();
LABEL_12:
      if ((v16 & 1) == 0)
      {
        WTF::fastFree(v2, v6, v7, v8, v9, v10, v11, v12);
        return v15;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void JSRemoteInspectorDisableAutoStart()
{
  Inspector::RemoteInspector::startEnabled = 0;
}

void JSRemoteInspectorSetParentProcessInformation(int a1, const UInt8 *a2, CFIndex a3)
{
  Inspector::RemoteInspector *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3);
  v10 = Inspector::RemoteInspector::singleton(v4);
  cf = v4;
  if (v4)
    CFRetain(v4);
  Inspector::RemoteInspector::setParentProcessInformation((uint64_t)v10, a1, &cf, v5, v6, v7, v8, v9);
  v11 = cf;
  cf = 0;
  if (!v11)
  {
    if (!v4)
      return;
LABEL_7:
    CFRelease(v4);
    return;
  }
  CFRelease(v11);
  if (v4)
    goto LABEL_7;
}

uint64_t JSRemoteInspectorSetLogToSystemConsole(uint64_t result)
{
  Inspector::sLogToSystemConsole = result;
  return result;
}

BOOL JSRemoteInspectorGetInspectionEnabledByDefault(Inspector::RemoteInspector *a1)
{
  _BOOL8 result;

  if (HIBYTE(remoteInspectionEnabledByDefault))
    return (_BYTE)remoteInspectionEnabledByDefault != 0;
  result = defaultStateForRemoteInspectionEnabledByDefault(a1);
  remoteInspectionEnabledByDefault = result | 0x100;
  return result;
}

BOOL defaultStateForRemoteInspectionEnabledByDefault(Inspector::RemoteInspector *a1)
{
  Inspector::RemoteInspector *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  int v25;
  _OWORD v26[2];
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v1 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(a1);
  Inspector::RemoteInspector::parentProcessAuditToken(v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v28);
  if ((*((_BYTE *)WTF::sdkAlignedBehaviors(v8) + 3) & 0x10) == 0)
  {
    v26[0] = v28;
    v26[1] = v29;
    v27 = v30;
    if (mainProcessHasEntitlement("get-task-allow", 15, (uint64_t)v26))
    {
      return 1;
    }
  }
  v24[0] = v28;
  v24[1] = v29;
  v25 = v30;
  result = mainProcessHasEntitlement("com.apple.private.webinspector.allow-remote-inspection", 55, (uint64_t)v24);
  if (result)
  {
    return 1;
  }
  return result;
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault(uint64_t result)
{
  remoteInspectionEnabledByDefault = result | 0x100;
  return result;
}

uint64_t JSRemoteInspectorGetInspectionFollowsInternalPolicies()
{
  return inspectionFollowsInternalPolicies;
}

uint64_t JSRemoteInspectorSetInspectionFollowsInternalPolicies(uint64_t result)
{
  inspectionFollowsInternalPolicies = result;
  return result;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::JSCell *v23;
  uint64_t v25;
  const WTF::String *v26;
  unint64_t RangeError;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50[6];
  JSC::VM *v51;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v51 = v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v51, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v49 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v49 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  if ((_BYTE)a6)
    v14 = a5 > v13 - a4;
  else
    v14 = 0;
  v15 = !v14;
  if (v13 < a4 || (v15 & 1) == 0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1D00000002;
    *(_QWORD *)(v25 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v25 + 16) = 4;
    v50[0] = (WTF::StringImpl *)v25;
    RangeError = JSC::createRangeError((unint64_t)a1, v50, v26);
    JSC::VM::throwException(v10, a1, RangeError, v28, v29, v30, v31, v32);
    v40 = v50[0];
    v50[0] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v50, v10, a2, a3, a4, a5, a6, a9, a7);
  v22 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::Heap **)v10, (JSC::VM *)0x30, v16, v17, v18, v19, v20, v21);
  v23 = JSC::JSArrayBufferView::JSArrayBufferView(v22, (uint64_t)v10, (uint64_t)v50);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v23, v10);
  return v22;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Heap *v23;
  uint64_t v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  const WTF::String *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  JSC::VM *v65;

  v10 = *((_QWORD *)a1 + 7);
  v65 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v65, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v55 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v55 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  if ((_BYTE)a6)
    v14 = a5 > v13 - a4;
  else
    v14 = 0;
  v15 = !v14;
  if (v13 < a4 || (v15 & 1) == 0)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x1D00000002;
    *(_QWORD *)(v31 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v31 + 16) = 4;
    v60 = (WTF::StringImpl *)v31;
    v33 = JSC::createRangeError((unint64_t)a1, &v60, v32);
    JSC::VM::throwException((JSC::VM *)v10, a1, v33, v34, v35, v36, v37, v38);
    v46 = v60;
    v60 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v60, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v23 = *(JSC::Heap **)(v10 + 40864);
  if (!v23)
    v23 = JSC::GCClient::Heap::uint8ArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  v24 = v10 + 192;
  SlowCase = *((_QWORD *)v23 + 3);
  if (SlowCase >= *((_QWORD *)v23 + 4))
  {
    SlowCase = *((_QWORD *)v23 + 5);
    if ((SlowCase & 1) != 0)
    {
      v56 = (uint64_t)v23;
      JSC::sanitizeStackForVM((JSC *)v10, v16, v17, v18, v19, v20, v21, v22);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v56, v10 + 192, 48, 0, 0, v57, v58, v59);
      v24 = v10 + 192;
      goto LABEL_19;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v23 + 6);
    *((_QWORD *)v23 + 4) = SlowCase + HIDWORD(v30);
    *((_QWORD *)v23 + 5) = SlowCase + (int)v30;
  }
  *((_QWORD *)v23 + 3) = SlowCase + 48;
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  v26 = *((_DWORD *)v60 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v60 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v62;
  *(_BYTE *)(SlowCase + 40) = v63;
  v27 = v64;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v27;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v64;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
  }
  v28 = v61;
  if (v61 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v28 = (v61 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v28;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Heap *v23;
  uint64_t v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  JSC::Heap **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::Exception *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(unint64_t *);
  unint64_t *v58;
  JSC::Heap **v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;

  v10 = *(_QWORD *)(a1 + 56);
  v72 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError(a1, &v72, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v61 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v61 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  if ((_BYTE)a6)
    v14 = a5 > v13 - a4;
  else
    v14 = 0;
  v15 = !v14;
  if (v13 < a4 || (v15 & 1) == 0)
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v29 = 0x1D00000002;
    *(_QWORD *)(v29 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v29 + 16) = 4;
    v71 = (WTF::StringImpl *)v29;
    v30 = *(_QWORD *)(a1 + 128);
    v31 = *(JSC::Heap ***)(a1 + 56);
    if ((v30 & 1) != 0)
    {
      v57 = *(uint64_t (**)(unint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v58 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v58 = (unint64_t *)(a1 - 16);
      v66 = *v58;
      v67 = a1;
      *(_QWORD *)&v68 = a1 + 128;
      v59 = v31;
      v30 = v57(&v66);
      v31 = v59;
    }
    v32 = JSC::ErrorInstance::create(v31, v30, &v71, 0, 0, 0, 2, 1);
    v39 = (JSC::Exception *)v32;
    if ((v32 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)))
    {
      v39 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v32, 0, v33, v34, v35, v36, v37);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v39, v38, v33, v34, v35, v36, v37);
    v47 = v71;
    v71 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v66, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v23 = *(JSC::Heap **)(v10 + 40872);
  if (!v23)
    v23 = JSC::GCClient::Heap::uint8ClampedArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  v24 = v10 + 192;
  SlowCase = *((_QWORD *)v23 + 3);
  if (SlowCase >= *((_QWORD *)v23 + 4))
  {
    SlowCase = *((_QWORD *)v23 + 5);
    if ((SlowCase & 1) != 0)
    {
      v62 = (uint64_t)v23;
      JSC::sanitizeStackForVM((JSC *)v10, v16, v17, v18, v19, v20, v21, v22);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v62, v10 + 192, 48, 0, 0, v63, v64, v65);
      v24 = v10 + 192;
      goto LABEL_21;
    }
    v60 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v23 + 6);
    *((_QWORD *)v23 + 4) = SlowCase + HIDWORD(v60);
    *((_QWORD *)v23 + 5) = SlowCase + (int)v60;
  }
  *((_QWORD *)v23 + 3) = SlowCase + 48;
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  v26 = *(_DWORD *)(v66 + 8);
  *(_DWORD *)SlowCase = v66 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v68;
  *(_BYTE *)(SlowCase + 40) = v69;
  v27 = v70;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v27;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v70;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
  }
  v28 = v67;
  if (v67 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v28 = (v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v28;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::JSCell *v23;
  uint64_t v25;
  const WTF::String *v26;
  const char *v27;
  unint64_t RangeError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51[6];
  JSC::VM *v52;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v52, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v50 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v50 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 1)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1D00000002;
    v27 = "Length out of range of buffer";
    goto LABEL_17;
  }
  if ((a4 & 1) != 0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1A00000002;
    v27 = "Byte offset is not aligned";
LABEL_17:
    *(_QWORD *)(v25 + 8) = v27;
    *(_DWORD *)(v25 + 16) = 4;
    v51[0] = (WTF::StringImpl *)v25;
    RangeError = JSC::createRangeError((unint64_t)a1, v51, v26);
    JSC::VM::throwException(v10, a1, RangeError, v29, v30, v31, v32, v33);
    v41 = v51[0];
    v51[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v51, v10, a2, a3, a4, a5, a6, a9, a7);
  v22 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v10, (JSC::VM *)0x30, v16, v17, v18, v19, v20, v21);
  v23 = JSC::JSArrayBufferView::JSArrayBufferView(v22, (uint64_t)v10, (uint64_t)v51);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v23, v10);
  return v22;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::JSCell *v23;
  uint64_t v25;
  const WTF::String *v26;
  const char *v27;
  unint64_t RangeError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51[6];
  JSC::VM *v52;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v52, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v50 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v50 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 1)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1D00000002;
    v27 = "Length out of range of buffer";
    goto LABEL_17;
  }
  if ((a4 & 1) != 0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1A00000002;
    v27 = "Byte offset is not aligned";
LABEL_17:
    *(_QWORD *)(v25 + 8) = v27;
    *(_DWORD *)(v25 + 16) = 4;
    v51[0] = (WTF::StringImpl *)v25;
    RangeError = JSC::createRangeError((unint64_t)a1, v51, v26);
    JSC::VM::throwException(v10, a1, RangeError, v29, v30, v31, v32, v33);
    v41 = v51[0];
    v51[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v51, v10, a2, a3, a4, a5, a6, a9, a7);
  v22 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::Heap **)v10, (JSC::VM *)0x30, v16, v17, v18, v19, v20, v21);
  v23 = JSC::JSArrayBufferView::JSArrayBufferView(v22, (uint64_t)v10, (uint64_t)v51);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v23, v10);
  return v22;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Heap *v23;
  uint64_t v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  const WTF::String *v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  uint64_t v65;
  JSC::VM *v66;

  v10 = *((_QWORD *)a1 + 7);
  v66 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v66, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v56 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v56 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 2)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x1D00000002;
    v33 = "Length out of range of buffer";
    goto LABEL_33;
  }
  if ((a4 & 3) != 0)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x1A00000002;
    v33 = "Byte offset is not aligned";
LABEL_33:
    *(_QWORD *)(v31 + 8) = v33;
    *(_DWORD *)(v31 + 16) = 4;
    v61 = (WTF::StringImpl *)v31;
    v34 = JSC::createRangeError((unint64_t)a1, &v61, v32);
    JSC::VM::throwException((JSC::VM *)v10, a1, v34, v35, v36, v37, v38, v39);
    v47 = v61;
    v61 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v61, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v23 = *(JSC::Heap **)(v10 + 40528);
  if (!v23)
    v23 = JSC::GCClient::Heap::int32ArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  v24 = v10 + 192;
  SlowCase = *((_QWORD *)v23 + 3);
  if (SlowCase >= *((_QWORD *)v23 + 4))
  {
    SlowCase = *((_QWORD *)v23 + 5);
    if ((SlowCase & 1) != 0)
    {
      v57 = (uint64_t)v23;
      JSC::sanitizeStackForVM((JSC *)v10, v16, v17, v18, v19, v20, v21, v22);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v57, v10 + 192, 48, 0, 0, v58, v59, v60);
      v24 = v10 + 192;
      goto LABEL_16;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v23 + 6);
    *((_QWORD *)v23 + 4) = SlowCase + HIDWORD(v30);
    *((_QWORD *)v23 + 5) = SlowCase + (int)v30;
  }
  *((_QWORD *)v23 + 3) = SlowCase + 48;
LABEL_16:
  *(_DWORD *)SlowCase = 0;
  v26 = *((_DWORD *)v61 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v61 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v63;
  *(_BYTE *)(SlowCase + 40) = v64;
  v27 = v65;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v27;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v65;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
  }
  v28 = v62;
  if (v62 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v28 = (v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v28;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Heap *v23;
  uint64_t v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  const WTF::String *v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  uint64_t v65;
  JSC::VM *v66;

  v10 = *((_QWORD *)a1 + 7);
  v66 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v66, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v56 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v56 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 2)
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x1D00000002;
    v32 = "Length out of range of buffer";
    goto LABEL_31;
  }
  if ((a4 & 3) != 0)
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x1A00000002;
    v32 = "Byte offset is not aligned";
LABEL_31:
    *(_QWORD *)(v30 + 8) = v32;
    *(_DWORD *)(v30 + 16) = 4;
    v61 = (WTF::StringImpl *)v30;
    v33 = JSC::createRangeError((unint64_t)a1, &v61, v31);
    JSC::VM::throwException((JSC::VM *)v10, a1, v33, v34, v35, v36, v37, v38);
    v46 = v61;
    v61 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v61, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v23 = *(JSC::Heap **)(v10 + 40888);
  if (!v23)
    v23 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  v24 = v10 + 192;
  SlowCase = *((_QWORD *)v23 + 3);
  if (SlowCase >= *((_QWORD *)v23 + 4))
  {
    SlowCase = *((_QWORD *)v23 + 5);
    if ((SlowCase & 1) != 0)
    {
      v57 = (uint64_t)v23;
      JSC::sanitizeStackForVM((JSC *)v10, v16, v17, v18, v19, v20, v21, v22);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v57, v10 + 192, 48, 0, 0, v58, v59, v60);
      v24 = v10 + 192;
      goto LABEL_16;
    }
    v55 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v23 + 6);
    *((_QWORD *)v23 + 4) = SlowCase + HIDWORD(v55);
    *((_QWORD *)v23 + 5) = SlowCase + (int)v55;
  }
  *((_QWORD *)v23 + 3) = SlowCase + 48;
LABEL_16:
  *(_DWORD *)SlowCase = 0;
  v26 = *((_DWORD *)v61 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v61 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v63;
  *(_BYTE *)(SlowCase + 40) = v64;
  v27 = v65;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v27;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v65;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v24, SlowCase);
  }
  v28 = v62;
  if (v62 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v28 = (v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v28;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::JSCell *v23;
  uint64_t v25;
  const WTF::String *v26;
  const char *v27;
  unint64_t RangeError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51[6];
  JSC::VM *v52;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v52, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v50 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v50 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 2)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1D00000002;
    v27 = "Length out of range of buffer";
    goto LABEL_17;
  }
  if ((a4 & 3) != 0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1A00000002;
    v27 = "Byte offset is not aligned";
LABEL_17:
    *(_QWORD *)(v25 + 8) = v27;
    *(_DWORD *)(v25 + 16) = 4;
    v51[0] = (WTF::StringImpl *)v25;
    RangeError = JSC::createRangeError((unint64_t)a1, v51, v26);
    JSC::VM::throwException(v10, a1, RangeError, v29, v30, v31, v32, v33);
    v41 = v51[0];
    v51[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v51, v10, a2, a3, a4, a5, a6, a9, a7);
  v22 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>((JSC::Heap **)v10, (JSC::VM *)0x30, v16, v17, v18, v19, v20, v21);
  v23 = JSC::JSArrayBufferView::JSArrayBufferView(v22, (uint64_t)v10, (uint64_t)v51);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v23, v10);
  return v22;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::JSCell *v23;
  uint64_t v25;
  const WTF::String *v26;
  const char *v27;
  unint64_t RangeError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51[6];
  JSC::VM *v52;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v52, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v50 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v50 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 3)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1D00000002;
    v27 = "Length out of range of buffer";
    goto LABEL_17;
  }
  if ((a4 & 7) != 0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x1A00000002;
    v27 = "Byte offset is not aligned";
LABEL_17:
    *(_QWORD *)(v25 + 8) = v27;
    *(_DWORD *)(v25 + 16) = 4;
    v51[0] = (WTF::StringImpl *)v25;
    RangeError = JSC::createRangeError((unint64_t)a1, v51, v26);
    JSC::VM::throwException(v10, a1, RangeError, v29, v30, v31, v32, v33);
    v41 = v51[0];
    v51[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v51, v10, a2, a3, a4, a5, a6, a9, a7);
  v22 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::Heap **)v10, (JSC::VM *)0x30, v16, v17, v18, v19, v20, v21);
  v23 = JSC::JSArrayBufferView::JSArrayBufferView(v22, (uint64_t)v10, (uint64_t)v51);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v23, v10);
  return v22;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Heap **v18;
  uint64_t (*v19)(unint64_t *);
  unint64_t *v20;
  JSC::Heap **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t SlowCase;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  JSC::VM *v73;

  v10 = *(_QWORD *)(a1 + 56);
  v73 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError(a1, &v73, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v62 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v62 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 3)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v16 = 0x1D00000002;
    *(_QWORD *)(v16 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v16 + 16) = 4;
    v72 = (WTF::StringImpl *)v16;
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(JSC::Heap ***)(a1 + 56);
    if ((v17 & 1) == 0)
      goto LABEL_19;
    v19 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v20 = (unint64_t *)(a1 - 16);
    v67 = *v20;
    v68 = a1;
    *(_QWORD *)&v69 = a1 + 128;
    v21 = v18;
    goto LABEL_46;
  }
  if ((a4 & 7) != 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1A00000002;
    *(_QWORD *)(v22 + 8) = "Byte offset is not aligned";
    *(_DWORD *)(v22 + 16) = 4;
    v72 = (WTF::StringImpl *)v22;
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(JSC::Heap ***)(a1 + 56);
    if ((v17 & 1) == 0)
      goto LABEL_19;
    v21 = *(JSC::Heap ***)(a1 + 56);
    v19 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v60 = (unint64_t *)(a1 - 16);
    else
      v60 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v67 = *v60;
    v68 = a1;
    *(_QWORD *)&v69 = a1 + 128;
LABEL_46:
    v17 = v19(&v67);
    v18 = v21;
LABEL_19:
    v23 = JSC::ErrorInstance::create(v18, v17, &v72, 0, 0, 0, 2, 1);
    v30 = (JSC::Exception *)v23;
    if ((v23 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C)))
    {
      v30 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v23, 0, v24, v25, v26, v27, v28);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v30, v29, v24, v25, v26, v27, v28);
    v38 = v72;
    v72 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v67, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v48 = *(_QWORD **)(v10 + 40344);
  if (!v48)
    v48 = (_QWORD *)JSC::GCClient::Heap::bigInt64ArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  SlowCase = v48[3];
  if (SlowCase >= v48[4])
  {
    v66 = (uint64_t)v48;
    SlowCase = v48[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v41, v42, v43, v44, v45, v46, v47);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v66, v10 + 192, 48, 0, 0, v63, v64, v65);
      goto LABEL_30;
    }
    v61 = *(_QWORD *)(SlowCase + 8) ^ v48[6];
    v48[4] = SlowCase + HIDWORD(v61);
    v48[5] = SlowCase + (int)v61;
  }
  v48[3] = SlowCase + 48;
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  v49 = *(_DWORD *)(v67 + 8);
  *(_DWORD *)SlowCase = v67 >> 4;
  *(_DWORD *)(SlowCase + 4) = v49;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v69;
  *(_BYTE *)(SlowCase + 40) = v70;
  v50 = v71;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v50;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v71;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
  }
  v51 = v68;
  if (v68 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v51 = (v68 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v51;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, __n128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Heap **v18;
  uint64_t (*v19)(unint64_t *);
  unint64_t *v20;
  JSC::Heap **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t SlowCase;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  JSC::VM *v73;

  v10 = *(_QWORD *)(a1 + 56);
  v73 = (JSC::VM *)v10;
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v12
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError(a1, &v73, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v11 + 64) && (v62 = *(_QWORD *)(v11 + 32)) != 0)
    v13 = *(_QWORD *)(v62 + 32);
  else
    v13 = *(_QWORD *)(v11 + 48);
  v14 = v13 >= a4;
  v15 = v13 - a4;
  if (!v14 || (_BYTE)a6 && a5 > v15 >> 3)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v16 = 0x1D00000002;
    *(_QWORD *)(v16 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v16 + 16) = 4;
    v72 = (WTF::StringImpl *)v16;
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(JSC::Heap ***)(a1 + 56);
    if ((v17 & 1) == 0)
      goto LABEL_19;
    v19 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v20 = (unint64_t *)(a1 - 16);
    v67 = *v20;
    v68 = a1;
    *(_QWORD *)&v69 = a1 + 128;
    v21 = v18;
    goto LABEL_46;
  }
  if ((a4 & 7) != 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1A00000002;
    *(_QWORD *)(v22 + 8) = "Byte offset is not aligned";
    *(_DWORD *)(v22 + 16) = 4;
    v72 = (WTF::StringImpl *)v22;
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(JSC::Heap ***)(a1 + 56);
    if ((v17 & 1) == 0)
      goto LABEL_19;
    v21 = *(JSC::Heap ***)(a1 + 56);
    v19 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v60 = (unint64_t *)(a1 - 16);
    else
      v60 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v67 = *v60;
    v68 = a1;
    *(_QWORD *)&v69 = a1 + 128;
LABEL_46:
    v17 = v19(&v67);
    v18 = v21;
LABEL_19:
    v23 = JSC::ErrorInstance::create(v18, v17, &v72, 0, 0, 0, 2, 1);
    v30 = (JSC::Exception *)v23;
    if ((v23 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C)))
    {
      v30 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v23, 0, v24, v25, v26, v27, v28);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v30, v29, v24, v25, v26, v27, v28);
    v38 = v72;
    v72 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    return 0;
  }
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v67, (JSC *)v10, a2, a3, a4, a5, a6, a9, a7);
  v48 = *(_QWORD **)(v10 + 40360);
  if (!v48)
    v48 = (_QWORD *)JSC::GCClient::Heap::bigUint64ArraySpaceSlow((JSC::Heap **)(v10 + 37552));
  SlowCase = v48[3];
  if (SlowCase >= v48[4])
  {
    v66 = (uint64_t)v48;
    SlowCase = v48[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v41, v42, v43, v44, v45, v46, v47);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v66, v10 + 192, 48, 0, 0, v63, v64, v65);
      goto LABEL_30;
    }
    v61 = *(_QWORD *)(SlowCase + 8) ^ v48[6];
    v48[4] = SlowCase + HIDWORD(v61);
    v48[5] = SlowCase + (int)v61;
  }
  v48[3] = SlowCase + 48;
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  v49 = *(_DWORD *)(v67 + 8);
  *(_DWORD *)SlowCase = v67 >> 4;
  *(_DWORD *)(SlowCase + 4) = v49;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v69;
  *(_BYTE *)(SlowCase + 40) = v70;
  v50 = v71;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v50;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v71;
    if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
  }
  v51 = v68;
  if (v68 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v51 = (v68 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v51;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v10);
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a1[5064];
  if (!v10)
    v10 = JSC::GCClient::Heap::int8ArraySpaceSlow(a1 + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (uint64_t)(a1 + 24);
      v16 = (uint64_t)v10;
      v17 = (JSC *)a1;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a1[5065];
  if (!v10)
    v10 = JSC::GCClient::Heap::int16ArraySpaceSlow(a1 + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (uint64_t)(a1 + 24);
      v16 = (uint64_t)v10;
      v17 = (JSC *)a1;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a1[5110];
  if (!v10)
    v10 = JSC::GCClient::Heap::uint16ArraySpaceSlow(a1 + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (uint64_t)(a1 + 24);
      v16 = (uint64_t)v10;
      v17 = (JSC *)a1;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap **v8;
  JSC::Heap *v9;
  unint64_t v10;
  unint64_t SlowCase;
  unint64_t v13;
  JSC::Heap **v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a1;
  v9 = a1[5058];
  if (!v9)
  {
    v14 = v8;
    v15 = a2;
    v9 = JSC::GCClient::Heap::float32ArraySpaceSlow(v8 + 4694);
    a2 = v15;
    v8 = v14;
  }
  v10 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v16 = (uint64_t)(v8 + 24);
      v17 = (uint64_t)v9;
      JSC::sanitizeStackForVM((JSC *)v8, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v16, v10, 0, 0, v18, v19, v20);
      goto LABEL_5;
    }
    v13 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v13);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v13;
  }
  *((_QWORD *)v9 + 3) = SlowCase + v10;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a1[5059];
  if (!v10)
    v10 = JSC::GCClient::Heap::float64ArraySpaceSlow(a1 + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (uint64_t)(a1 + 24);
      v16 = (uint64_t)v10;
      v17 = (JSC *)a1;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

uint64_t JSC::LiteralParser<unsigned char>::~LiteralParser(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;

  v9 = *(unsigned int *)(a1 + 252);
  if ((_DWORD)v9)
  {
    v59 = *(WTF::StringImpl ***)(a1 + 240);
    v60 = 8 * v9;
    do
    {
      v61 = *v59;
      *v59 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          v70 = v60;
          v71 = v59;
          WTF::StringImpl::~StringImpl(v61, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          v60 = v70;
          v59 = v71;
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  v10 = *(_QWORD *)(a1 + 240);
  if (a1 + 256 != v10 && v10 != 0)
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_DWORD *)(a1 + 248) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 208);
  if (a1 + 224 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)(a1 + 120), a2, a3, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(a1 + 104);
  if (v21)
    WTF::fastFree(v21 - 16, v14, v15, v16, v17, v18, v19, v20);
  v22 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v23 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return a1;
}

uint64_t JSC::WeakGCMap<void *,JSC::JSObject,WTF::DefaultHash<void *>,WTF::HashTraits<void *>>::~WeakGCMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != -1 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

void JSC::WeakGCMap<void *,JSC::JSObject,WTF::DefaultHash<void *>,WTF::HashTraits<void *>>::~WeakGCMap(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != -1 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::WeakGCMap<void *,JSC::JSObject,WTF::DefaultHash<void *>,WTF::HashTraits<void *>>::pruneStaleEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  int v25;

  v10 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  v9 = v10;
  if (!v10)
    return;
  v11 = *(_DWORD *)(v9 - 4);
  if (!v11)
    return;
  v12 = 0;
  v13 = v11 - 1;
  do
  {
    v14 = v13;
    v15 = (_QWORD *)(v9 + 16 * v13);
    if ((unint64_t)(*v15 + 1) < 2)
      goto LABEL_5;
    v16 = v9 + 16 * v13;
    v19 = *(_QWORD **)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v18 = v19;
    if (!v19)
    {
      *v15 = -1;
      goto LABEL_11;
    }
    if (!*v18 || (v18[1] & 3) != 0)
    {
      *v15 = -1;
      v18[1] = 3;
      *v17 = 0;
LABEL_11:
      ++v12;
    }
LABEL_5:
    --v13;
  }
  while (v14);
  v20 = *v8;
  if (v12)
  {
    *(_DWORD *)(v20 - 16) += v12;
    v24 = *v8;
    if (*v8)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    *(_DWORD *)(v24 - 12) = v25 - v12;
    v20 = *v8;
  }
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 4);
    v22 = 6 * *(_DWORD *)(v20 - 12);
    if (v21 >= 9 && v22 < v21)
      WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::shrinkToBestSize(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::shrinkToBestSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  if (*a1)
    v8 = *(_DWORD *)(*a1 - 12);
  else
    v8 = 0;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * (unint64_t)v8)
      goto LABEL_8;
  }
  else if (3 * v11 > 4 * (unint64_t)v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_9:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v15, 0, a4, a5, a6, a7, a8);
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    LODWORD(v11) = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    LODWORD(v11) = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if ((_DWORD)v11)
  {
    v21 = (uint64_t *)v10;
    v11 = v11;
    do
    {
      if (*v21 != -1)
      {
        if (*v21)
        {
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::reinsert(*a1, v21);
          v23 = v21[1];
          if (v23)
          {
            *(_QWORD *)(v23 + 8) = 3;
            v21[1] = 0;
          }
        }
        else
        {
          v22 = v21[1];
          if (v22)
          {
            *(_QWORD *)(v22 + 8) = 3;
            v21[1] = 0;
          }
        }
      }
      v21 += 2;
      --v11;
    }
    while (v11);
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

_QWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  result = (_QWORD *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<void *>>,void *>(a1, *a2);
  v5 = result[1];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    result[1] = 0;
  }
  v6 = a2[1];
  a2[1] = 0;
  *result = v3;
  result[1] = v6;
  return result;
}

uint64_t WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<void *>>,void *>(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(a1 + 16 * v6));
  return a1 + 16 * v6;
}

BOOL mainProcessHasEntitlement(const char *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _OWORD v5[2];

  if (!*(_BYTE *)(a3 + 32))
    return WTF::processHasEntitlement(a1);
  v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  return WTF::hasEntitlement(v5, a1);
}

void WTF::RefCounted<OpaqueJSWeakObjectMap>::deref(OpaqueJSWeakObjectMap *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 1)
  {
    OpaqueJSWeakObjectMap::~OpaqueJSWeakObjectMap(a1);
    WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

void OpaqueJSWeakObjectMap::~OpaqueJSWeakObjectMap(OpaqueJSWeakObjectMap *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*((void (**)(OpaqueJSWeakObjectMap *, _QWORD))this + 5))(this, *((_QWORD *)this + 4));
  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*((_QWORD *)this + 3) + 192), (uint64_t)this + 8, v2, v3, v4, v5, v6, v7);
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = v15 + 8;
      do
      {
        if (*(_QWORD *)(v17 - 8) != -1)
        {
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)(*(_QWORD *)v17 + 8) = 3;
            *(_QWORD *)v17 = 0;
          }
        }
        v17 += 16;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15 - 16, v8, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(void *),JSObjectMakeTypedArrayWithBytesNoCopy::$_0>::run(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(result + 16);
  if (v2)
    return v2(a2, *(_QWORD *)(result + 24));
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(void *),JSObjectMakeArrayBufferWithBytesNoCopy::$_0>::run(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(result + 16);
  if (v2)
    return v2(a2, *(_QWORD *)(result + 24));
  return result;
}

uint64_t WTF::codePointCompareLessThan(WTF *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int16 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)this)
  {
    if (!v4)
      return 0;
    v5 = *(_DWORD *)(v4 + 16);
    v6 = *(_DWORD *)(v3 + 4);
    v7 = *(_DWORD *)(v4 + 4);
    if (v7 >= v6)
      v8 = v6;
    else
      v8 = v7;
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      if ((v5 & 4) != 0)
      {
        if ((_DWORD)v8)
        {
          v20 = *(unsigned __int8 **)(v4 + 8);
          v21 = *(unsigned __int16 **)(v3 + 8);
          do
          {
            v22 = *v21;
            v23 = *v20;
            v13 = v22 > v23;
            if (v22 != v23)
              goto LABEL_42;
            ++v21;
            ++v20;
          }
          while (--v8);
        }
      }
      else if ((_DWORD)v8)
      {
        v9 = *(unsigned __int16 **)(v4 + 8);
        v10 = *(unsigned __int16 **)(v3 + 8);
        while (1)
        {
          v11 = *v10;
          v12 = *v9;
          v13 = v11 > v12;
          if (v11 != v12)
            break;
          ++v10;
          ++v9;
          if (!--v8)
            goto LABEL_35;
        }
LABEL_42:
        if (v13)
          v30 = 1;
        else
          v30 = -1;
        return v30 >> 31;
      }
LABEL_35:
      if (v7 < v6)
        v28 = 1;
      else
        v28 = -1;
      if (v6 == v7)
        v29 = 0;
      else
        v29 = v28;
      return v29 >> 31;
    }
    if ((v5 & 4) != 0)
    {
      if ((_DWORD)v8)
      {
        v24 = *(unsigned __int8 **)(v4 + 8);
        v25 = *(unsigned __int8 **)(v3 + 8);
        while (1)
        {
          v26 = *v25;
          v27 = *v24;
          v13 = v26 > v27;
          if (v26 != v27)
            goto LABEL_42;
          ++v25;
          ++v24;
          if (!--v8)
            goto LABEL_35;
        }
      }
      goto LABEL_35;
    }
    if (!(_DWORD)v8)
      goto LABEL_35;
    v16 = *(unsigned __int16 **)(v4 + 8);
    v17 = *(unsigned __int8 **)(v3 + 8);
    while (1)
    {
      v18 = *v17;
      v19 = *v16;
      if (v19 != v18)
        break;
      ++v17;
      ++v16;
      if (!--v8)
        goto LABEL_35;
    }
    if (v19 < v18)
      v31 = 1;
    else
      v31 = -1;
    return v31 >> 31;
  }
  else if (v4)
  {
    if (*(_DWORD *)(v4 + 4))
      v14 = -1;
    else
      v14 = 0;
    return v14 >> 31;
  }
  else
  {
    return 0;
  }
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

JSStringRef JSStringCreateWithCFString(CFStringRef string)
{
  unint64_t v2;
  unint64_t Length;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  OpaqueJSString *v15;
  int *v16;
  _BYTE *v17;
  WTF *v18;
  UniChar *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  int v44;
  unsigned int v45;
  _BYTE v46[1024];
  CFIndex usedBufLen;
  CFRange v48;
  CFRange v49;

  v2 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v2 != -1)
  {
    v43 = (WTF *)&v42;
    usedBufLen = (CFIndex)&v43;
    std::__call_once(&JSC::initialize(void)::onceFlag, &usedBufLen, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
  Length = CFStringGetLength(string);
  if (!Length)
  {
    v15 = (OpaqueJSString *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v15 = 1;
    WTF::StringImpl::s_emptyAtomString += 2;
    *((_QWORD *)v15 + 1) = &WTF::StringImpl::s_emptyAtomString;
    *((_QWORD *)v15 + 2) = 0;
    v43 = 0;
    WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::~Ref((unint64_t *)&v43, v35, v36, v37, v38, v39, v40, v41);
    return v15;
  }
  v4 = Length;
  v43 = (WTF *)v46;
  v44 = 1024;
  v45 = Length;
  v5 = (WTF *)v46;
  if (Length >= 0x401)
  {
    if (HIDWORD(Length))
      goto LABEL_27;
    v5 = (WTF *)WTF::fastMalloc((WTF *)Length);
    v44 = v4;
    v43 = v5;
  }
  usedBufLen = 0;
  v48.location = 0;
  v48.length = v4;
  if (CFStringGetBytes(string, v48, 0x201u, 0, 0, (UInt8 *)v5, v4, &usedBufLen) != v4 || usedBufLen != v4)
  {
    if (v4 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197F689DCLL);
    }
    v20 = (UniChar *)WTF::fastMalloc((WTF *)(2 * v4));
    v49.location = 0;
    v49.length = v4;
    CFStringGetCharacters(string, v49, v20);
    v15 = (OpaqueJSString *)WTF::fastMalloc((WTF *)0x18);
    OpaqueJSString::OpaqueJSString((uint64_t)v15, v20, v4);
    v42 = 0;
    WTF::Ref<OpaqueJSString,WTF::RawPtrTraits<OpaqueJSString>,WTF::DefaultRefDerefTraits<OpaqueJSString>>::~Ref(&v42, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree((unint64_t)v20, v28, v29, v30, v31, v32, v33, v34);
    goto LABEL_14;
  }
  v6 = v43;
  v7 = v45;
  v15 = (OpaqueJSString *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  if (v6)
  {
    if ((_DWORD)v7)
    {
      if ((v7 & 0x80000000) == 0)
      {
        v16 = (int *)WTF::fastCompactMalloc((WTF *)(v7 + 20));
        v17 = v16 + 5;
        *v16 = 2;
        v16[1] = v7;
        *((_QWORD *)v16 + 1) = v16 + 5;
        v16[4] = 4;
        if ((_DWORD)v7 == 1)
          *v17 = *(_BYTE *)v6;
        else
          memcpy(v17, v6, v7);
        goto LABEL_13;
      }
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x197F689D4);
    }
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v16 = 0;
  }
LABEL_13:
  *((_QWORD *)v15 + 1) = v16;
  *((_QWORD *)v15 + 2) = 0;
LABEL_14:
  v18 = v43;
  if (v46 != (_BYTE *)v43 && v43)
  {
    v43 = 0;
    v44 = 0;
    WTF::fastFree((unint64_t)v18, v8, v9, v10, v11, v12, v13, v14);
  }
  return v15;
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  uint64_t v2;
  CFIndex v3;
  const UInt8 *v4;

  if (!string)
    return &stru_1E35BF3F0;
  v2 = *((_QWORD *)string + 1);
  if (!v2)
    return &stru_1E35BF3F0;
  v3 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v3)
    return &stru_1E35BF3F0;
  v4 = *(const UInt8 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    return CFStringCreateWithBytes(alloc, v4, v3, 0x201u, 0);
  else
    return CFStringCreateWithCharacters(alloc, (const UniChar *)v4, v3);
}

void JSC::AbstractMacroAssemblerBase::initializeRandom(JSC::AbstractMacroAssemblerBase *this)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&JSC::AbstractMacroAssemblerBase::initializeRandom(void)::onceKey);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&JSC::AbstractMacroAssemblerBase::initializeRandom(void)::onceKey, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::AbstractMacroAssemblerBase::initializeRandom(void)::$_0 &&>>);
  }
  LODWORD(v3) = JSC::AbstractMacroAssemblerBase::initializeRandom(void)::globalCounter++;
  *(_DWORD *)this = v3;
  if ((_DWORD)v3)
    v3 = v3;
  else
    v3 = 1;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = ((v3 >> 26) | (v3 << 23)) ^ ((v3 ^ (v3 << 23)) >> 17);
  *((_BYTE *)this + 24) = 1;
}

uint64_t JSC::threadSpecificAssemblerData(JSC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  return JSC::threadSpecificAssemblerDataPtr;
}

BOOL JSC::isARM64_LSE(JSC *this)
{
  int v1;

  v1 = JSC::MacroAssemblerARM64::s_lseCheckState;
  if (!JSC::MacroAssemblerARM64::s_lseCheckState)
  {
    v1 = 1;
    JSC::MacroAssemblerARM64::s_lseCheckState = 1;
    if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
      JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
  }
  return v1 == 2;
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v8 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v8)
  {
    v13 = *(uint64_t **)(a1 + 192);
    v14 = 8 * v8;
    do
    {
      v15 = *v13++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1);
      v14 -= 8;
    }
    while (v14);
  }
  v9 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v9)
  {
    v16 = *(uint64_t **)(a1 + 208);
    v17 = 8 * v9;
    do
    {
      v18 = *v16++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a1);
      v17 -= 8;
    }
    while (v17);
  }
  v10 = *(unsigned int *)(a1 + 176);
  *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v10) += *(_QWORD *)(a1 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v10);
  v11 = (_QWORD *)(a1 + 184);
  sys_icache_invalidate(*(void **)(a1 + 184), *(_QWORD *)(a1 + 8));
  v12 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v19 = __ldaxr(v12);
    while (__stlxr(v19 + 1, v12));
    v11 = v12 + 2;
  }
  *a4 = *v11;
  a4[1] = v12;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf(a1, (uint64_t)a4, a2, a3);
}

void JSC::LinkBuffer::logJITCodeForPerf(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  WTF::PrintStream *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF *v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  JSC::CodeBlock *v33;
  uint64_t v34;
  JSC::RegExp *v35;
  WTF::PrintStream *v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  size_t v41;
  WTF *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  WTF *v47;
  WTF::PrintStream *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  JSC::Wasm::NameSection *v58;
  WTF *v59;
  unsigned int *v60;
  void (**v61)(WTF::StringPrintStream *__hidden);
  WTF *v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v61 = off_1E3572250;
  v62 = (WTF *)v64;
  v63 = xmmword_199122F80;
  v64[0] = 0;
  v4 = *(int *)(a1 + 176);
  if (v4 >= 0x14)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  WTF::PrintStream::printf((WTF::PrintStream *)&v61, "%s", off_1E357CB20[v4]);
  WTF::PrintStream::printf((WTF::PrintStream *)&v61, "%s", ": ");
  v61[5]((WTF::StringPrintStream *)&v61);
  v10 = *(_DWORD *)(a1 + 176);
  if (v10 < 3)
  {
    v33 = *(JSC::CodeBlock **)(a1 + 16);
    if (v33)
    {
      JSC::CodeBlock::dumpSimpleName(v33, (WTF::PrintStream *)&v61);
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (v10 - 14 >= 2)
  {
    if (v10 == 16)
    {
      v34 = *(_QWORD *)(a1 + 16);
      if (v34)
      {
        v35 = *(JSC::RegExp **)(v34 + 96);
        if (v35)
        {
          JSC::RegExp::dumpToStream(v35, (const JSC::JSCell *)&v61, v9);
          goto LABEL_29;
        }
        v48 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v61[4])(&v61);
        WTF::PrintStream::printf(v48, "%s");
        goto LABEL_28;
      }
    }
LABEL_20:
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v61[4])(&v61);
    v37 = v36;
    if (a4)
    {
      v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v36 + 32))(v36);
      if (a3)
      {
        WTF::StringImpl::utf8ForCharacters(a3, (a4 - 1), (uint64_t)&v59, v39);
      }
      else
      {
        v40 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v40 = 1;
        *(_QWORD *)(v40 + 8) = 0;
        *(_BYTE *)(v40 + 16) = 0;
        v59 = (WTF *)v40;
        LODWORD(v60) = 0;
      }
      WTF::printExpectedCStringHelper(v38, "StringView", &v59);
      if ((_DWORD)v60 != -1)
        ((void (*)(JSC::Wasm::NameSection **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v60])(&v58, &v59);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 40))(v37);
    }
    else
    {
      WTF::PrintStream::printf(v36, "%s");
    }
LABEL_28:
    v61[5]((WTF::StringPrintStream *)&v61);
    goto LABEL_29;
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    goto LABEL_20;
  v12 = *(unsigned int **)(v11 + 16);
  v59 = *(WTF **)(v11 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v60 = v12;
  JSC::Wasm::makeString((uint64_t *)&v59, (uint64_t *)&v57);
  v14 = (WTF *)((uint64_t (*)(_QWORD))v61[4])(&v61);
  WTF::printInternal(v14, (WTF::PrintStream *)&v57, v15, v16, v17, v18, v19, v20, v21, v22);
  v61[5]((WTF::StringPrintStream *)&v61);
  v30 = v57;
  v57 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v60 = 0;
  if (v12)
  {
    do
    {
      v31 = __ldaxr(v12);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v12));
    if (!v32)
    {
      atomic_store(1u, v12);
      v58 = (JSC::Wasm::NameSection *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v58, v23, v24, v25, v26, v27, v28, v29);
    }
  }
LABEL_29:
  if (*(_BYTE *)(a1 + 172))
    goto LABEL_40;
  v42 = v62;
  v41 = v63;
  v59 = 0;
  if (v62)
  {
    if ((unint64_t)v63 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197F69048);
    }
    if ((_QWORD)v63 != -17)
    {
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)(v63 + 17));
      *(_DWORD *)v43 = 1;
      v43[1] = v41;
      v59 = (WTF *)v43;
      v44 = v43 + 2;
      memcpy(v43 + 2, v42, v41);
      *((_BYTE *)v44 + v41) = 0;
      goto LABEL_34;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x197F6903CLL);
  }
LABEL_34:
  v45 = *(_QWORD *)(a2 + 8);
  if (v45)
    v46 = *(unsigned int *)(v45 + 4);
  else
    v46 = 0;
  JSC::PerfLog::log((uint64_t *)&v59, *(const void **)a2, v46);
  v47 = v59;
  v59 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::fastFree((unint64_t)v47, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v47;
  }
LABEL_40:
  if (v62 != (WTF *)v64)
    WTF::fastFree((unint64_t)v62, v23, v24, v25, v26, v27, v28, v29);
}

void JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, WTF **a6@<X8>, uint64_t a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF **v19;
  unsigned int *v20;
  WTF *v21;
  _BOOL4 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  const char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  WTF *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  WTF *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  WTF *v102;
  va_list v103;
  va_list v104;
  va_list v105;
  JSC::ExecutableMemoryHandle *v106;
  WTF *v107;
  char v108;
  void *v109;
  uint64_t v110;
  void (**v111)(WTF::StringPrintStream *__hidden);
  WTF *v112;
  __int128 v113;
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v13 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)(a1 + 192);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a1);
      v15 -= 8;
    }
    while (v15);
  }
  v17 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v17)
  {
    v23 = *(uint64_t **)(a1 + 208);
    v24 = 8 * v17;
    do
    {
      v25 = *v23++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a1);
      v24 -= 8;
    }
    while (v24);
  }
  v18 = *(unsigned int *)(a1 + 176);
  *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v18) += *(_QWORD *)(a1 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v18);
  v19 = (WTF **)(a1 + 184);
  sys_icache_invalidate(*(void **)(a1 + 184), *(_QWORD *)(a1 + 8));
  v20 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v101 = __ldaxr(v20);
    while (__stlxr(v101 + 1, v20));
    v19 = (WTF **)(v20 + 2);
  }
  v21 = *v19;
  *a6 = *v19;
  a6[1] = (WTF *)v20;
  if (byte_1ECF4C2A2)
  {
    JSC::LinkBuffer::logJITCodeForPerf(a1, (uint64_t)a6, a3, a4);
    if ((a2 & 1) != 0)
      goto LABEL_8;
  }
  else if ((a2 & 1) != 0)
  {
LABEL_8:
    v22 = *(_BYTE *)(a1 + 170) != 0;
    goto LABEL_15;
  }
  if (!byte_1ECF4C289)
    return;
  v22 = 1;
LABEL_15:
  v111 = off_1E3572250;
  v112 = (WTF *)v114;
  v113 = xmmword_199122F80;
  v114[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v111, "Generated JIT code for ");
  v104 = (va_list)&a7;
  if (!*(_BYTE *)(a1 + 171))
  {
    v105 = v104;
    v109 = v104;
    v38 = vsnprintf((char *)v112 + v113, *((_QWORD *)&v113 + 1) - v113, a5, v104);
    v39 = v113;
    v40 = v113 + v38 + 1;
    if (v40 > *((_QWORD *)&v113 + 1))
    {
      *((_QWORD *)&v113 + 1) = 2 * v40;
      v41 = (void *)WTF::fastMalloc((WTF *)(2 * v40));
      memcpy(v41, v112, v113 + 1);
      if (v112 != (WTF *)v114)
        WTF::fastFree((unint64_t)v112, v42, v43, v44, v45, v46, v47, v48);
      v112 = (WTF *)v41;
      v38 = vsnprintf((char *)v41 + v113, *((_QWORD *)&v113 + 1) - v113, a5, v105);
      v39 = v113;
    }
    *(_QWORD *)&v113 = v39 + v38;
    if (v20)
      goto LABEL_39;
    goto LABEL_41;
  }
  v103 = v104;
  v26 = vsnprintf(0, 0, a5, v104);
  v27 = v26;
  v110 = 0x203A6B6E756874;
  v28 = v26 + 8;
  v29 = v26 + 24;
  if (v28 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  v30 = (WTF *)(v26 + 25);
  if (v29 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x197F69660);
  }
  v31 = WTF::fastMalloc(v30);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)(v31 + 8) = v28;
  v102 = (WTF *)v31;
  *(_BYTE *)(v31 + 16 + v28) = 0;
  snprintf((char *)(v31 + 16), v28, "%s", (const char *)&v110);
  vsnprintf((char *)(v31 + 23), v27 + 1, a5, v104);
  WTF::PrintStream::printf((WTF::PrintStream *)&v111, "%s", (const char *)(v31 + 16));
  v107 = v21;
  if (__ldaxr(JSC::Disassembler::labelMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, JSC::Disassembler::labelMapLock))
  {
    goto LABEL_28;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::Disassembler::labelMapLock);
LABEL_28:
  v49 = atomic_load(&JSC::Disassembler::ensureLabelMap(void)::onceKey);
  if (v49 != -1)
  {
    v105 = &v108;
    v109 = &v105;
    std::__call_once(&JSC::Disassembler::ensureLabelMap(void)::onceKey, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Disassembler::ensureLabelMap(void)::$_0 &&>>);
  }
  WTF::HashMap<void *,std::variant<WTF::CString,char const*>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::variant<WTF::CString,char const*>>,WTF::HashTableTraits>::add<WTF::CString>(&JSC::Disassembler::labelMap, (uint64_t *)&v107, &v102, v32, v33, v34, v35, v36, (uint64_t)&v105);
  v57 = __ldxr(JSC::Disassembler::labelMapLock);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, JSC::Disassembler::labelMapLock))
LABEL_34:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::Disassembler::labelMapLock, 0, v51, v52, v53, v54, v55, v56);
  v58 = v102;
  v102 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
    {
      WTF::fastFree((unint64_t)v58, v50, v51, v52, v53, v54, v55, v56);
      if (v20)
        goto LABEL_39;
      goto LABEL_41;
    }
    --*(_DWORD *)v58;
  }
  if (v20)
  {
LABEL_39:
    v59 = v20[1];
    v60 = (WTF *)((char *)v21 + v59);
    goto LABEL_42;
  }
LABEL_41:
  v59 = 0;
  v60 = v21;
LABEL_42:
  v61 = ":";
  if (v22)
    v61 = ".";
  WTF::PrintStream::printf((WTF::PrintStream *)&v111, ": [%p, %p) %zu bytes%s\n", v21, v60, v59, v61);
  v70 = v112;
  v69 = v113;
  v107 = 0;
  if (!v112)
    goto LABEL_48;
  if ((unint64_t)v113 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x197F69668);
  }
  if ((_QWORD)v113 == -17)
  {
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x197F69658);
  }
  v71 = (_QWORD *)WTF::fastMalloc((WTF *)(v113 + 17));
  *(_DWORD *)v71 = 1;
  v71[1] = v69;
  v107 = (WTF *)v71;
  v72 = v71 + 2;
  memcpy(v71 + 2, v70, v69);
  *((_BYTE *)v72 + v69) = 0;
LABEL_48:
  if (v22)
  {
    if (byte_1ECF4C289)
      WTF::dataLog<WTF::CString>(&v107);
  }
  else
  {
    v73 = *(_QWORD *)(a1 + 184);
    v74 = v73 + *(_QWORD *)(a1 + 8);
    if (byte_1ECF4C288)
    {
      v105 = (va_list)v21;
      v106 = 0;
      if (v20)
      {
        do
          v75 = __ldaxr(v20);
        while (__stlxr(v75 + 1, v20));
        v76 = (unsigned int *)v106;
        v106 = (JSC::ExecutableMemoryHandle *)v20;
        if (v76)
        {
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            atomic_store(1u, v76);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v76, (uint64_t)v62, v63, v64, v65, v66, v67, v68);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
        }
      }
      JSC::disassembleAsynchronously(&v107, &v105, *(_QWORD *)(a1 + 8), v73, v74, (uint64_t)"    ");
      v79 = (unsigned int *)v106;
      v106 = 0;
      if (v79)
      {
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          atomic_store(1u, v79);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v79, (uint64_t)v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
      }
    }
    else
    {
      WTF::dataLog<WTF::CString>(&v107);
      v103 = (va_list)v21;
      v90 = *(_QWORD *)(a1 + 8);
      v91 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v91 != -1)
      {
        v105 = (va_list)&v110;
        v109 = &v105;
        std::__call_once(&WTF::initializeLogFile(void)::once, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      JSC::tryToDisassemble((unint64_t *)&v103, v90, v73, v74, "    ", (WTF::PrintStream *)WTF::s_file);
    }
  }
  v92 = v107;
  v107 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::fastFree((unint64_t)v92, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v92;
  }
  if (v112 != (WTF *)v114)
    WTF::fastFree((unint64_t)v112, v62, v63, v64, v65, v66, v67, v68);
}

uint64_t WTF::dataLog<WTF::CString>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  if (*a1)
    v5 = (const char *)(*a1 + 16);
  else
    v5 = 0;
  WTF::PrintStream::printf(v4, "%s", v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::LinkBuffer::linkCode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v54;
  unsigned int v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  _DWORD *v80;
  __int128 *v81;
  uint64_t v82;
  JSC *v83;
  WTF *v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  JSC *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _OWORD *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  _QWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t StatusReg;
  uint64_t v171;
  uint64_t v172;
  uint64_t casual;
  uint64_t common_primitive_impl_casual_case;
  WTF *v175;
  unint64_t v176;
  pthread_key_t *v177;
  _QWORD *v178;
  _QWORD *v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  int *v187;
  int v188;
  int v189;
  char *v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  int v194;
  char *v195;
  BOOL v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  JSC::ExecutableAllocator *v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  char v211;
  int v212;
  int v213;
  char v214;
  int v215;
  int v216;
  int v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  JSC::ExecutableMemoryHandle *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  unsigned int v241;
  unint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int *v248;
  uint64_t v249;
  WTF::AtomStringImpl *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  JSC *v262;
  BOOL v263;
  int v264;
  BOOL v265;
  uint64_t v266;
  unint64_t v267;
  pthread_key_t *v268;
  void *v269;
  _QWORD *v270;
  size_t v271;
  unint64_t v272;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t JumpIslandToUsingMemcpy;
  unsigned int **v280;
  unsigned int **v281;
  unsigned int *v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int **v286;
  unsigned int **v287;
  unsigned int *v288;
  unsigned int *v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  WTF::StringImpl *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::AtomStringImpl *v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  unint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  WTF::StringImpl *v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  WTF *v352;
  int v353;
  uint64_t v354;
  JSC *__src;
  _DWORD *v356;
  uint64_t i;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  unint64_t v361;
  unint64_t *p_pattern4;
  uint64_t *__pattern4;
  uint64_t v364;
  char v365;

  v8 = a3;
  v9 = a1;
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 200);
  v356 = (_DWORD *)a2;
  for (i = a1; (signed int)v11 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v11)
  {
    if (v11 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      a2 = (uint64_t)v356;
      v9 = i;
      v11 = v356[50];
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
    v11 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v12 = v11;
  if (!*(_QWORD *)(v9 + 184))
  {
    if ((v11 & 0x1F) != 0)
    {
      LODWORD(v12) = v11;
      do
      {
        if ((v12 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
          a2 = (uint64_t)v356;
          v9 = i;
          LODWORD(v12) = v356[50];
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = -734491104;
        v12 = (*(_DWORD *)(a2 + 200) + 4);
        *(_DWORD *)(a2 + 200) = v12;
      }
      while ((v12 & 0x1F) != 0);
    }
    p_pattern4 = (unint64_t *)v12;
    v13 = (_QWORD *)qword_1ECF4C1F0;
    if (!qword_1ECF4C1F0)
      goto LABEL_186;
    if (v8)
    {
      v19 = v12;
      if (byte_1ECF4C246)
      {
        WTF::dataLog<char [17],unsigned long,char [2]>("Allocating ", &p_pattern4, " bytes of executable memory with JITCompilationMustSucceed.\n");
        a1 = WTFReportBacktrace();
        a2 = (uint64_t)v356;
        v9 = i;
        v19 = (unint64_t)p_pattern4;
      }
    }
    else
    {
      if (byte_1ECF4C632)
      {
        a1 = JSC::doExecutableAllocationFuzzing((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
        a2 = (uint64_t)v356;
        v9 = i;
        if ((_DWORD)a1)
        {
LABEL_186:
          v32 = 0;
LABEL_77:
          v63 = *(unsigned int **)v9;
          *(_QWORD *)v9 = v32;
          if (v63)
          {
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              atomic_store(1u, v63);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v63, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
              a2 = (uint64_t)v356;
              v9 = i;
            }
            v32 = *(_QWORD *)v9;
          }
          if (!v32)
            goto LABEL_85;
          *(_QWORD *)(v9 + 184) = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v9 + 8) = v12;
          goto LABEL_84;
        }
      }
      __pattern4 = 0;
      v14 = v13[10] + v12;
      v15 = v13[9];
      __pattern4 = (uint64_t *)v14;
      v16 = (double)v15 * 0.25;
      v17 = v15 - (unint64_t)v16;
      v18 = v15 - 0x40000;
      if ((unint64_t)v16 >> 18)
        v18 = v17;
      v361 = v18;
      if (v14 > v18)
      {
        if (byte_1ECF4C45E)
          WTF::dataLog<char [43],unsigned long,char [4],unsigned long,char [19]>("Allocation failed because bytes allocated ", &__pattern4, " > ", &v361, " bytes available.\n");
LABEL_218:
        v32 = 0;
        a2 = (uint64_t)v356;
        v9 = i;
        goto LABEL_77;
      }
      v19 = v12;
    }
    if (!BYTE4(qword_1ECF4C75C))
    {
      v20 = 0;
      LODWORD(v21) = 0;
      goto LABEL_17;
    }
    v140 = (v13[3] - v13[10]) / 0x64uLL;
    if (v140 < v19)
      v141 = 1;
    else
      v141 = v140 / v19;
    v21 = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, a3, a4, a5, a6, a7, a8) % v141;
    if (v21)
    {
      v142 = 16;
      if ((unint64_t)(int)v21 > 0x10)
        v142 = (int)v21;
      if (v142 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197F6A544);
      }
      v20 = WTF::fastMalloc((WTF *)(8 * v142));
      if ((int)v21 >= 1)
      {
        v144 = 0;
        while (1)
        {
          v145 = jit_heap_try_allocate(v19, v143, a3, a4, a5, a6, a7, a8);
          if (!v145)
            break;
          *(_QWORD *)(v20 + 8 * v144++) = v145;
          if ((int)v21 == v144)
            goto LABEL_188;
        }
        if ((_DWORD)v144)
        {
          v169 = 0;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v171 = 8 * v144;
          do
          {
            if (8 * v21 == v169)
            {
              __break(0xC471u);
              JUMPOUT(0x197F6A53CLL);
            }
            v172 = *(_QWORD *)(StatusReg + 752);
            if (v172)
              jit_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v172, *(_QWORD *)(v20 + v169), 1, 0, a5, a6, a7, a8);
            else
              pas_try_deallocate_slow_no_cache(*(_QWORD *)(v20 + v169), (uint64_t)&jit_heap_config, 1);
            v169 += 8;
          }
          while (v171 != v169);
        }
        LODWORD(v21) = 0;
        a2 = (uint64_t)v356;
        v9 = i;
LABEL_17:
        v22 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (v19 + 3 <= 0x9C7)
        {
          v23 = *(_QWORD *)(v22 + 752);
          if (v23)
          {
            v24 = *(unsigned int *)((char *)&jit_common_primitive_heap_support
                                  + ((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 2504);
            if (*(_DWORD *)(v23 + 8052) > v24)
            {
              v25 = v23 + 8 * v24;
              v26 = v25 + 8064;
              *(_BYTE *)(v25 + 8064) = 1;
              v27 = *(unsigned int *)(v25 + 8080);
              if ((_DWORD)v27)
              {
                *(_DWORD *)(v26 + 16) = v27 - *(_DWORD *)(v26 + 20);
                v28 = *(_QWORD *)(v26 + 8) - v27;
LABEL_22:
                *(_BYTE *)v26 = 0;
                goto LABEL_23;
              }
              v43 = *(_QWORD *)(v26 + 40);
              v44 = *(_QWORD *)(v26 + 24);
              if (v43)
              {
LABEL_38:
                v45 = __clz(v43);
                *(_QWORD *)(v26 + 40) = v43 & ~(0x8000000000000000 >> v45);
                v28 = v44 + 16 * v45;
                goto LABEL_22;
              }
              if (*(_BYTE *)(v26 + 5) == 10)
              {
                v163 = *(unsigned int *)(v26 + 32);
                v164 = *(_DWORD *)(v26 + 36);
                if (v163 < v164)
                {
                  *(_QWORD *)(v26 + 8 * v163 + 56) = 0;
                  v165 = (unint64_t *)(8 * v24 + 8 * v163 + v23 + 8128);
                  v166 = v164 - 1 - v163;
                  while (v166)
                  {
                    v44 += 1024;
                    v168 = *v165++;
                    v167 = v168;
                    LODWORD(v163) = v163 + 1;
                    --v166;
                    if (v168)
                    {
                      v43 = __rbit64(v167);
                      *(_DWORD *)(v26 + 32) = v163;
                      *(_QWORD *)(v26 + 24) = v44;
                      a2 = (uint64_t)v356;
                      v9 = i;
                      goto LABEL_38;
                    }
                  }
                  *(_DWORD *)(v26 + 32) = v164;
                }
              }
              *(_BYTE *)v26 = 0;
            }
          }
        }
        common_primitive_impl_casual_case = jit_try_allocate_common_primitive_impl_casual_case(v19, a2, a3, a4, a5, a6, a7, a8);
        a2 = (uint64_t)v356;
        v9 = i;
        v28 = common_primitive_impl_casual_case;
LABEL_23:
        if (!v28)
        {
          v32 = 0;
LABEL_61:
          if (BYTE4(qword_1ECF4C75C))
            v58 = (_DWORD)v21 == 0;
          else
            v58 = 1;
          if (v58)
          {
            if (!v20)
            {
LABEL_67:
              if (v32)
              {
                v59 = *(_QWORD *)(v32 + 8);
                v60 = qword_1ECF4C1F8 > v59 || v59 >= qword_1ECF4C200;
                if (v60)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F6A178);
                }
                v61 = *(unsigned int *)(v32 + 4) + v59;
                if (qword_1ECF4C1F8 >= v61 || qword_1ECF4C200 < v61)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F6A198);
                }
                goto LABEL_77;
              }
              if (v8)
              {
                WTF::dataLog<char [17],unsigned long,char [2]>("Ran out of executable memory while allocating ", &p_pattern4, " bytes.\n");
                __break(0xC471u);
                JUMPOUT(0x197F6A564);
              }
              goto LABEL_218;
            }
          }
          else
          {
            v154 = v21;
            v155 = (unint64_t *)v20;
            do
            {
              v156 = *(_QWORD *)(v22 + 752);
              if (v156)
                jit_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v156, *v155, 1, 0, a5, a6, a7, a8);
              else
                pas_try_deallocate_slow_no_cache(*v155, (uint64_t)&jit_heap_config, 1);
              ++v155;
              --v154;
            }
            while (v154);
          }
          WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
          a2 = (uint64_t)v356;
          v9 = i;
          goto LABEL_67;
        }
        v29 = *(_QWORD *)(v22 + 752);
        if (v29)
        {
          v30 = (_BYTE *)(v29 + 8304);
          *(_BYTE *)(v29 + 8304) = 1;
          v31 = *(unsigned int *)(v29 + 8320);
          if ((_DWORD)v31)
          {
            *(_DWORD *)(v29 + 8320) = v31 - *(_DWORD *)(v29 + 8324);
            v32 = *(_QWORD *)(v29 + 8312) - v31;
LABEL_27:
            *v30 = 0;
            goto LABEL_28;
          }
          v40 = *(_QWORD *)(v29 + 8344);
          v41 = *(_QWORD *)(v29 + 8328);
          if (v40)
          {
LABEL_36:
            v42 = __clz(v40);
            *(_QWORD *)(v29 + 8344) = v40 & ~(0x8000000000000000 >> v42);
            v32 = v41 + 16 * v42;
            goto LABEL_27;
          }
          if (*(_BYTE *)(v29 + 8309) == 6)
          {
            v157 = *(_DWORD *)(v29 + 8340);
            v158 = *(unsigned int *)(v29 + 8336);
            if (v158 < v157)
            {
              *(_QWORD *)&v30[8 * v158 + 56] = 0;
              v159 = (unint64_t *)(v29 + 8 * v158 + 8368);
              v160 = v157 - 1 - v158;
              while (v160)
              {
                v41 += 1024;
                v162 = *v159++;
                v161 = v162;
                LODWORD(v158) = v158 + 1;
                --v160;
                if (v162)
                {
                  v40 = __rbit64(v161);
                  *(_DWORD *)(v29 + 8336) = v158;
                  *(_QWORD *)(v29 + 8328) = v41;
                  a2 = (uint64_t)v356;
                  v9 = i;
                  goto LABEL_36;
                }
              }
              *(_DWORD *)(v29 + 8336) = v157;
            }
          }
          *v30 = 0;
        }
        casual = bmalloc_allocate_casual(16, 0);
        a2 = (uint64_t)v356;
        v9 = i;
        v32 = casual;
LABEL_28:
        if (off_1EE342948)
        {
          v33 = (v28 >> 14) ^ ((v28 >> 14) >> 4);
          v34 = ((v33 ^ 0xDEADBEEF) + 32 * v33) ^ (((v33 ^ 0xDEADBEEF) + 32 * v33) >> 11);
          v35 = (char *)off_1EE342948 + 32;
          v36 = *((_DWORD *)off_1EE342948 + 3) & v34;
          v37 = *((_QWORD *)off_1EE342948 + 2 * v36 + 4);
          if (v37 == (v28 & 0xFFFFFFFFFFFFC000))
          {
LABEL_30:
            v38 = *(_QWORD *)&v35[16 * v36 + 8];
            if (v38)
              goto LABEL_31;
          }
          else
          {
            v46 = v34 + 1;
            while (v37 != -1)
            {
              v36 = *((_DWORD *)off_1EE342948 + 3) & v46;
              v37 = *(_QWORD *)&v35[16 * v36];
              ++v46;
              if (v37 == (v28 & 0xFFFFFFFFFFFFC000))
                goto LABEL_30;
            }
          }
        }
        if (off_1EE342918)
        {
          v47 = (v28 >> 17) ^ ((v28 >> 17) >> 4);
          v48 = ((v47 ^ 0xDEADBEEF) + 32 * v47) ^ (((v47 ^ 0xDEADBEEF) + 32 * v47) >> 11);
          v49 = (char *)off_1EE342918 + 32;
          v50 = *((_DWORD *)off_1EE342918 + 3) & v48;
          v51 = *((_QWORD *)off_1EE342918 + 2 * v50 + 4);
          if (v51 == (v28 & 0xFFFFFFFFFFFE0000))
          {
LABEL_45:
            v38 = *(_QWORD *)&v49[16 * v50 + 8];
            if (v38)
            {
LABEL_31:
              switch(*(_BYTE *)v38)
              {
                case 1:
                  v96 = (*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * ((v28 >> 9) & 0x1F);
                  goto LABEL_118;
                case 2:
                case 4:
                  v39 = *(_DWORD *)(v38 + 4);
                  break;
                case 3:
                  v96 = (*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v28;
LABEL_118:
                  v97 = *(unsigned int *)(v96 + 20);
                  if ((_DWORD)v97)
                    v98 = pas_compact_heap_reservation_base + 8 * v97;
                  else
                    v98 = 0;
                  v99 = *(unsigned __int16 *)(v98 + 7) | ((unint64_t)*(unsigned __int8 *)(v98 + 9) << 16);
                  if ((_DWORD)v99)
                    v100 = pas_compact_heap_reservation_base + 8 * v99;
                  else
                    v100 = 0;
                  v39 = *(_DWORD *)(v100 + 24) & 0x7FFFFFF;
                  break;
                case 5:
                  v94 = v38 + 8 * ((v28 >> 8) & 0x3F);
                  v95 = *(_QWORD *)(v94 + 528) >> (v28 >> 2);
                  if (v95)
                  {
                    LODWORD(v95) = __clz(__rbit64(v95));
                  }
                  else
                  {
                    v114 = -(uint64_t)(v28 >> 2);
                    v115 = (unint64_t *)(v94 + 536);
                    do
                    {
                      v117 = *v115++;
                      v116 = v117;
                      v114 += 64;
                    }
                    while (!v117);
                    v95 = __clz(__rbit64(v116)) + v114;
                  }
                  v39 = 4 * v95 + 4;
                  break;
                case 6:
                  v101 = v38 + 8 * ((v28 >> 14) & 7);
                  v102 = *(_QWORD *)(v101 + 80);
                  if (v102 >> SBYTE1(v28))
                  {
                    LODWORD(v103) = __clz(__rbit64(v102 >> SBYTE1(v28)));
                  }
                  else
                  {
                    v118 = -(uint64_t)((v28 >> 8) & 0x3F);
                    v119 = (unint64_t *)(v101 + 88);
                    do
                    {
                      v121 = *v119++;
                      v120 = v121;
                      v118 += 64;
                    }
                    while (!v121);
                    v103 = __clz(__rbit64(v120)) + v118;
                  }
                  v39 = ((_DWORD)v103 << 8) + 256;
                  break;
                default:
                  v39 = 0;
                  break;
              }
LABEL_59:
              *(_DWORD *)v32 = 1;
              *(_DWORD *)(v32 + 4) = v39;
              *(_QWORD *)(v32 + 8) = v28;
              v56 = v13 + 10;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + v39, v56));
              goto LABEL_61;
            }
          }
          else
          {
            v93 = v48 + 1;
            while (v51 != -1)
            {
              v50 = *((_DWORD *)off_1EE342918 + 3) & v93;
              v51 = *(_QWORD *)&v49[16 * v50];
              ++v93;
              if (v51 == (v28 & 0xFFFFFFFFFFFE0000))
                goto LABEL_45;
            }
          }
        }
        v52 = *(_DWORD *)(v22 + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v52, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_51;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_51:
        pas_large_map_find(v28, (unint64_t *)&__pattern4);
        if (__pattern4)
          v39 = v364 - v28;
        else
          v39 = 0;
        v54 = *(_DWORD *)(v22 + 24);
        a2 = (uint64_t)v356;
        v9 = i;
        while (1)
        {
          v55 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v55 != v54)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_59;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
        a2 = (uint64_t)v356;
        v9 = i;
        goto LABEL_59;
      }
    }
    else
    {
      v20 = 0;
    }
LABEL_188:
    a2 = (uint64_t)v356;
    v9 = i;
    goto LABEL_17;
  }
  v104 = *(_QWORD *)(v9 + 8);
  v60 = v104 >= v11;
  v105 = v104 - v11;
  if (!v60)
    goto LABEL_85;
  if ((v105 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A3B4);
  }
  if (v105 >= 4)
  {
    v106 = v105 >> 2;
    v107 = 1;
    do
    {
      if (v11 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        a2 = (uint64_t)v356;
        v9 = i;
        v11 = v356[50];
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
      v11 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v11;
      v263 = v106 > v107++;
    }
    while (v263);
  }
LABEL_84:
  *(_BYTE *)(v9 + 169) = 1;
LABEL_85:
  if (!*(_BYTE *)(v9 + 169))
    goto LABEL_325;
  v66 = *(unsigned int *)(a2 + 200);
  v67 = *(unsigned int *)(a2 + 44);
  v68 = 126 - 2 * __clz(v67);
  if ((_DWORD)v67)
    v69 = v68;
  else
    v69 = 0;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordELb0EEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEb(*(_QWORD *)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 24 * v67), v69, 1);
  v77 = i;
  v78 = *(_QWORD *)(i + 24);
  v79 = (_OWORD *)(i + 32);
  if (v78 && (_OWORD *)v78 != v79)
  {
    WTF::fastFree(v78, v70, v71, v72, v73, v74, v75, v76);
    v77 = i;
  }
  v80 = v356;
  v81 = (__int128 *)*((_QWORD *)v356 + 7);
  v354 = v66;
  if (v81 == (__int128 *)(v356 + 16))
  {
    v108 = *v81;
    v109 = v81[1];
    v110 = v81[3];
    *(_OWORD *)(i + 64) = v81[2];
    *(_OWORD *)(i + 80) = v110;
    *v79 = v108;
    *(_OWORD *)(i + 48) = v109;
    v111 = v81[4];
    v112 = v81[5];
    v113 = v81[7];
    *(_OWORD *)(i + 128) = v81[6];
    *(_OWORD *)(i + 144) = v113;
    *(_OWORD *)(i + 96) = v111;
    *(_OWORD *)(i + 112) = v112;
    v81 = (__int128 *)(i + 32);
  }
  *(_QWORD *)(v77 + 24) = v81;
  *(_DWORD *)(v77 + 160) = v356[48];
  *((_QWORD *)v356 + 7) = v356 + 16;
  v356[48] = 128;
  v82 = *(_QWORD *)(v77 + 24);
  v83 = *(JSC **)(v77 + 184);
  v84 = *(WTF **)(v77 + 8);
  if (byte_1ECF4C1E4)
    v85 = v83 == 0;
  else
    v85 = 1;
  v86 = v85;
  if (v85)
  {
    v175 = *(WTF **)(v77 + 8);
    v176 = atomic_load(&_MergedGlobals_29);
    if (v176 != -1)
    {
      __pattern4 = (uint64_t *)&v361;
      p_pattern4 = (unint64_t *)&__pattern4;
      std::__call_once(&_MergedGlobals_29, &p_pattern4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificBranchCompactionLinkBuffer(void)::$_0 &&>>);
    }
    v177 = (pthread_key_t *)qword_1ECF58628;
    v178 = pthread_getspecific(*(_QWORD *)qword_1ECF58628);
    if (!v178)
    {
      v178 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v178[3] = v177;
      pthread_setspecific(*v177, v178);
      *v178 = 0;
      v178[1] = 0;
      *((_BYTE *)v178 + 16) = 0;
    }
    if (v178[1] >= (unint64_t)v175)
    {
      v179 = pthread_getspecific(*v177);
      if (!v179)
      {
        v179 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        v179[3] = v177;
        pthread_setspecific(*v177, v179);
        *v179 = 0;
        v179[1] = 0;
        *((_BYTE *)v179 + 16) = 0;
      }
      v84 = (WTF *)v179[1];
      if (v84)
      {
        v87 = *v179;
        *v179 = 0;
        v179[1] = 0;
      }
      else
      {
        v87 = 0;
      }
    }
    else
    {
      v84 = v175;
      v87 = WTF::fastMalloc(v175);
    }
    v80 = v356;
  }
  else
  {
    v87 = *(_QWORD *)(v77 + 184);
  }
  if (v87 != ((v87 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A040);
  }
  if (v83 != (JSC *)(((unint64_t)v83 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A060);
  }
  __src = (JSC *)v87;
  v352 = v84;
  v88 = v80[11];
  if (byte_1ECF4C1E4)
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
  v353 = v86;
  LODWORD(v89) = 0;
  v90 = i;
  if (*(_BYTE *)(i + 168))
  {
    v91 = 0;
    if ((_DWORD)v88)
    {
      v92 = 0;
      v91 = 0;
      LODWORD(v89) = 0;
      while (2)
      {
        v181 = v89;
        v182 = *((_QWORD *)v356 + 4) + 24 * v92;
        v89 = *(_QWORD *)v182;
        v183 = v181;
        v184 = *(_QWORD *)v182;
        v185 = *(_QWORD *)v182 - v181;
        if (*(_QWORD *)v182 != v181)
        {
          v186 = (_DWORD *)((char *)__src + v91);
          v187 = (int *)(v82 + v181);
          do
          {
            v188 = *v187++;
            *v186++ = v188;
            v185 -= 4;
          }
          while (v185);
          v184 = *(_QWORD *)v182;
        }
        v189 = v181 - v91;
        LODWORD(__pattern4) = v181 - v91;
        memset_pattern4((void *)(*(_QWORD *)(v90 + 24) + v181), &__pattern4, (int)v184 - v181);
        v190 = *(char **)(v182 + 8);
        v191 = *(unsigned __int16 *)(v182 + 20);
        if ((v191 & 0x80) == 0)
        {
          v192 = &v190[(_QWORD)v83];
          if ((uint64_t)v190 < *(_QWORD *)v182)
          {
            v90 = i;
            if ((int)v190 < 4)
              v201 = 0;
            else
              v201 = *(_DWORD *)((*(_QWORD *)(v182 + 8) & 0xFFFFFFFCLL) + *(_QWORD *)(i + 24) - 4);
            v190 = &v192[-v201];
            goto LABEL_248;
          }
          v190 = &v192[-v189];
        }
        v90 = i;
LABEL_248:
        v91 += v89 - v183;
        v193 = v91;
        v194 = *(unsigned __int16 *)(v182 + 17) | (*(unsigned __int8 *)(v182 + 19) << 16);
        v180 = *(_WORD *)(v182 + 17);
        v195 = (char *)v83 + v91;
        switch(*(_WORD *)(v182 + 17))
        {
          case 0x41u:
            goto LABEL_253;
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x4Fu:
          case 0x50u:
          case 0x51u:
          case 0x52u:
          case 0x53u:
          case 0x54u:
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
          case 0x59u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x85u:
            goto LABEL_263;
          case 0x45u:
            LOBYTE(v180) = 65;
            goto LABEL_238;
          case 0x82u:
            v196 = (unint64_t)&v190[((v191 >> 5) & 4) - (_QWORD)v195 + 0x100000] >= 0x200000;
            v197 = 131;
            v198 = 66;
            goto LABEL_250;
          case 0x83u:
            v196 = (unint64_t)&v190[((v191 >> 5) & 4) - (_QWORD)v195 + 0x100000] >= 0x200000;
            v197 = 132;
            v198 = 69;
            goto LABEL_250;
          case 0x84u:
            v196 = (unint64_t)&v190[((v191 >> 5) & 4) - (_QWORD)v195 + 0x2000] >= 0x4000;
            v197 = 134;
            v198 = 71;
LABEL_250:
            if (v196)
              v180 = v197;
            else
              v180 = v198;
LABEL_253:
            *(_BYTE *)(v182 + 19) = BYTE2(v194);
            *(_WORD *)(v182 + 17) = v194 | (v180 << 8);
            v199 = (v194 >> 4) - (v180 >> 4);
            if (v199)
            {
              v91 -= v199;
              v200 = *(_DWORD *)v182 - v199;
              LODWORD(__pattern4) = v89 - v91;
              memset_pattern4((void *)(*(_QWORD *)(v90 + 24) + v200), &__pattern4, (int)v89 - v200);
              v90 = i;
              v193 = v91;
            }
            goto LABEL_239;
          case 0x86u:
            LOBYTE(v180) = -125;
            goto LABEL_238;
          case 0x87u:
            LOBYTE(v180) = -124;
            goto LABEL_238;
          case 0x88u:
            LOBYTE(v180) = -122;
            goto LABEL_238;
          default:
            if (*(_WORD *)(v182 + 17))
            {
LABEL_263:
              *(_BYTE *)(v182 + 19) = BYTE2(v194);
              *(_WORD *)(v182 + 17) = v194 | 0x4100;
            }
            else
            {
LABEL_238:
              *(_BYTE *)(v182 + 19) = BYTE2(v194);
              *(_WORD *)(v182 + 17) = v194 | (v180 << 8);
            }
LABEL_239:
            *(_QWORD *)v182 = v193;
            if (++v92 != v88)
              continue;
            goto LABEL_145;
        }
      }
    }
  }
  else
  {
    v91 = 0;
  }
LABEL_145:
  v122 = __src;
  v123 = (char *)__src + v91;
  if ((v123 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A080);
  }
  v124 = (char *)(v82 + (int)v89);
  if ((v124 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A0A0);
  }
  v125 = v354;
  v126 = v354 - (int)v89;
  if ((v126 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197F6A0C0);
  }
  v127 = v91;
  if (v354 != (int)v89)
  {
    v128 = 0;
    v129 = 4;
    if (v126 > 4)
      v129 = v354 - (int)v89;
    if (v129 < 0x1D)
      goto LABEL_546;
    if ((unint64_t)(v123 - v124) < 0x20)
      goto LABEL_546;
    v130 = ((v129 - 1) >> 2) + 1;
    v128 = 4 * (v130 & 0x7FFFFFFFFFFFFFF8);
    v124 += v128;
    v123 += v128;
    v131 = (_OWORD *)((char *)__src + v91 + 16);
    v132 = (__int128 *)((int)v89 + v82 + 16);
    v133 = v130 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v134 = *v132;
      *(v131 - 1) = *(v132 - 1);
      *v131 = v134;
      v131 += 2;
      v132 += 2;
      v133 -= 8;
    }
    while (v133);
    if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_546:
      do
      {
        v135 = *(_DWORD *)v124;
        v124 += 4;
        *(_DWORD *)v123 = v135;
        v123 += 4;
        v128 += 4;
      }
      while (v128 < v126);
    }
  }
  LODWORD(__pattern4) = v89 - v91;
  v351 = (int)v89;
  memset_pattern4((void *)(*(_QWORD *)(v90 + 24) + (int)v89), &__pattern4, (int)v354 - (int)v89);
  v137 = v356;
  v136 = (_QWORD *)i;
  if ((_DWORD)v88)
  {
    v138 = 0;
    v139 = 24 * v88;
    a3 = 889192448;
    a4 = 905969664;
    a7 = 922746880;
    a8 = 3573751839;
    while (1)
    {
      v203 = *((_QWORD *)v137 + 4);
      a6 = *(_QWORD *)(v203 + v138 + 8);
      v204 = *(unsigned __int16 *)(v203 + v138 + 20);
      if ((v204 & 0x80) == 0)
      {
        if ((int)a6 < 4)
          v205 = 0;
        else
          v205 = *(_DWORD *)((*(_QWORD *)(v203 + v138 + 8) & 0xFFFFFFFCLL) + v136[3] - 4);
        a6 = (unint64_t)v83 + a6 - v205;
      }
      v206 = *(_QWORD *)(v203 + v138);
      a5 = (unint64_t)v83 + v206;
      v207 = (JSC *)((char *)v122 + v206);
      v208 = *(unsigned __int16 *)(v203 + v138 + 17) | (*(unsigned __int8 *)(v203 + v138 + 19) << 16);
      if (byte_1ECF4C1E4)
      {
        switch(HIBYTE(*(_WORD *)(v203 + v138 + 17)))
        {
          case 65:
            v209 = (v204 >> 8) & 3;
            if (!v209)
            {
              v210 = (uint64_t)(a6 - a5) >> 2;
              if ((unint64_t)(v210 + 0x2000000) >> 26)
              {
                v277 = v125;
                v278 = a5;
                JumpIslandToUsingMemcpy = JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy((JSC::ExecutableAllocator *)qword_1ECF4C1E8, a5, a6, 905969664, a5, a6, 922746880, 3573751839);
                if ((unint64_t)(((uint64_t)(JumpIslandToUsingMemcpy - v278) >> 2) + 0x2000000) >> 26)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F6B74CLL);
                }
                v210 = (uint64_t)(JumpIslandToUsingMemcpy - v278) >> 2;
                v125 = v277;
                v137 = v356;
                v136 = (_QWORD *)i;
                v122 = __src;
                a3 = 889192448;
                a4 = 905969664;
                a7 = 922746880;
                a8 = 3573751839;
              }
              if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
              {
                __break(0xC471u);
                JUMPOUT(0x197F6AD68);
              }
              goto LABEL_266;
            }
            if (v209 == 1)
            {
              if ((unint64_t)(((uint64_t)(a6 - a5) >> 2) + 0x2000000) >> 26)
              {
                v274 = v125;
                v275 = a5;
                v276 = JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy((JSC::ExecutableAllocator *)qword_1ECF4C1E8, a5, a6, 905969664, a5, a6, 922746880, 3573751839);
                if ((unint64_t)(((uint64_t)(v276 - v275) >> 2) + 0x2000000) >> 26)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F6B72CLL);
                }
                v210 = (uint64_t)(v276 - v275) >> 2;
                v125 = v274;
                v137 = v356;
                v136 = (_QWORD *)i;
                v122 = __src;
                a3 = 889192448;
                a4 = 905969664;
                a7 = 922746880;
                a8 = 3573751839;
              }
              else
              {
                v210 = (uint64_t)(a6 - a5) >> 2;
              }
              if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
              {
                __break(0xC471u);
                JUMPOUT(0x197F6ADFCLL);
              }
              v202 = -1811939328;
              goto LABEL_267;
            }
            goto LABEL_268;
          case 66:
            if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AD48);
            }
            *(_DWORD *)v207 = (8 * (a6 - a5)) & 0xFFFFE0 | HIWORD(v208) & 0xF | 0x54000000;
            goto LABEL_268;
          case 69:
            if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6ADDCLL);
            }
            v211 = *(_BYTE *)(v203 + v138 + 16);
            v212 = (v204 & 0x40) >> 6;
            if ((v208 & 0xF0000) == 0x10000)
              v213 = 889192448;
            else
              v213 = 872415232;
            *(_DWORD *)v207 = v213 & 0x7F000000 | (v212 << 31) | v211 & 0x1F | (32
                                                                                               * (((a6 - a5) >> 2) & 0x7FFFF));
            goto LABEL_268;
          case 71:
            if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AE1CLL);
            }
            v214 = *(_BYTE *)(v203 + v138 + 16);
            if ((v208 & 0xF0000) == 0x10000)
              v215 = 922746880;
            else
              v215 = 905969664;
            *(_DWORD *)v207 = (v204 << 26) & 0x80000000 | ((v204 & 0x1F) << 19) | (32
                                                                                 * (((a6 - a5) >> 2) & 0x3FFF)) | v215 & 0xFFFFFFE0 | v214 & 0x1F;
            goto LABEL_268;
          case 131:
            if ((JSC::ExecutableAllocator *)((char *)v207 - 4) != (JSC::ExecutableAllocator *)(((unint64_t)v207
                                                                                               - 1) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AFBCLL);
            }
            v222 = HIWORD(v208) & 0xF;
            v223 = a6 - a5;
            v224 = a6 - a5 + 4;
            if (!((unint64_t)((v224 >> 2) + 0x40000) >> 19))
            {
              v241 = v222 & 0xFF00001F | (32 * ((v224 >> 2) & 0x7FFFF)) | 0x54000000;
              goto LABEL_346;
            }
            *((_DWORD *)v207 - 1) = v222 ^ 0x41 | 0x54000000;
            if ((unint64_t)((v223 >> 2) + 0x2000000) >> 26)
            {
              v296 = v125;
              v297 = a5;
              v298 = JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy((JSC::ExecutableAllocator *)qword_1ECF4C1E8, a5, a6, 905969664, a5, a6, 922746880, 3573751839);
              if ((unint64_t)(((uint64_t)(v298 - v297) >> 2) + 0x2000000) >> 26)
              {
                __break(0xC471u);
                JUMPOUT(0x197F6B70CLL);
              }
              v210 = (uint64_t)(v298 - v297) >> 2;
              v125 = v296;
              v137 = v356;
              v136 = (_QWORD *)i;
              v122 = __src;
              a3 = 889192448;
              a4 = 905969664;
              a7 = 922746880;
              a8 = 3573751839;
            }
            else
            {
              v210 = v223 >> 2;
            }
            if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AA80);
            }
            goto LABEL_266;
          case 132:
            if ((JSC::ExecutableAllocator *)((char *)v207 - 4) != (JSC::ExecutableAllocator *)(((unint64_t)v207
                                                                                               - 1) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AE3CLL);
            }
            v216 = HIWORD(v208) & 0xF;
            v217 = v204 & 0x40;
            v218 = *(_BYTE *)(v203 + v138 + 16);
            v219 = a6 - a5;
            v220 = a6 - a5 + 4;
            if (!((unint64_t)((v220 >> 2) + 0x40000) >> 19))
            {
              if (v216 == 1)
                v257 = 889192448;
              else
                v257 = 872415232;
              *((_DWORD *)v207 - 1) = v257 & 0xFF000000 | (v217 << 25) | v218 & 0x1F | (32
                                                                                      * ((v220 >> 2) & 0x7FFFF));
              *(_DWORD *)v207 = -721215457;
              goto LABEL_268;
            }
            if (v216)
              v221 = 872415296;
            else
              v221 = 889192512;
            *((_DWORD *)v207 - 1) = v221 & 0xFFFFFFE0 | (v217 << 25) | v218 & 0x1F;
            if ((unint64_t)((v219 >> 2) + 0x2000000) >> 26)
            {
              v293 = v125;
              v294 = a5;
              v295 = JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy((JSC::ExecutableAllocator *)qword_1ECF4C1E8, a5, a6, 905969664, a5, a6, 922746880, 3573751839);
              if ((unint64_t)(((uint64_t)(v295 - v294) >> 2) + 0x2000000) >> 26)
              {
                __break(0xC471u);
                JUMPOUT(0x197F6B6ECLL);
              }
              v210 = (uint64_t)(v295 - v294) >> 2;
              v125 = v293;
              v137 = v356;
              v136 = (_QWORD *)i;
              v122 = __src;
              a3 = 889192448;
              a4 = 905969664;
              a7 = 922746880;
              a8 = 3573751839;
            }
            else
            {
              v210 = v219 >> 2;
            }
            if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6AE5CLL);
            }
            goto LABEL_266;
          case 134:
            if ((JSC::ExecutableAllocator *)((char *)v207 - 4) != (JSC::ExecutableAllocator *)(((unint64_t)v207
                                                                                               - 1) & 0xFFFFFFFFFFFFFFFCLL))
            {
              __break(0xC471u);
              JUMPOUT(0x197F6B020);
            }
            v234 = HIWORD(v208) & 0xF;
            v235 = v204 & 0x3F;
            v236 = *(_BYTE *)(v203 + v138 + 16);
            v237 = a6 - a5;
            v238 = a6 - a5 + 4;
            if ((unint64_t)((v238 >> 2) + 0x2000) >> 14)
            {
              v244 = (v235 << 26) | (v235 << 19);
              v245 = v236 & 0x1F;
              if (v234)
                v246 = 905969728;
              else
                v246 = 922746944;
              *((_DWORD *)v207 - 1) = v244 & 0x80FFFFFF | v246 | v245;
              if ((unint64_t)((v237 >> 2) + 0x2000000) >> 26)
              {
                v299 = v125;
                v300 = a5;
                v301 = JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy((JSC::ExecutableAllocator *)qword_1ECF4C1E8, a5, a6, 905969664, a5, a6, 922746880, 3573751839);
                if ((unint64_t)(((uint64_t)(v301 - v300) >> 2) + 0x2000000) >> 26)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F6B6CCLL);
                }
                v210 = (uint64_t)(v301 - v300) >> 2;
                v125 = v299;
                v137 = v356;
                v136 = (_QWORD *)i;
                v122 = __src;
                a3 = 889192448;
                a4 = 905969664;
                a7 = 922746880;
                a8 = 3573751839;
              }
              else
              {
                v210 = v237 >> 2;
              }
              if (v207 != (JSC::ExecutableAllocator *)(((unint64_t)v207 + 3) & 0xFFFFFFFFFFFFFFFCLL))
              {
                __break(0xC471u);
                JUMPOUT(0x197F6AD28);
              }
LABEL_266:
              v202 = 335544320;
LABEL_267:
              *(_DWORD *)v207 = v202 & 0xFC000000 | v210 & 0x3FFFFFF;
            }
            else
            {
              v239 = v236 & 0x1F;
              if (v234 == 1)
                v240 = 922746880;
              else
                v240 = 905969664;
              v241 = ((v235 << 26) | (v235 << 19)) & 0x80FFFFFF | (8 * v238) & 0x7FFE0 | v240 | v239;
LABEL_346:
              *((_DWORD *)v207 - 1) = v241;
              *(_DWORD *)v207 = -721215457;
            }
            break;
          default:
            goto LABEL_268;
        }
        goto LABEL_268;
      }
      if (HIBYTE(*(_WORD *)(v203 + v138 + 17)) <= 0x82u)
      {
        switch(HIBYTE(*(_WORD *)(v203 + v138 + 17)))
        {
          case 'A':
            v247 = (v204 >> 8) & 3;
            if (v247 == 1)
            {
              JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v207, a5, a6);
            }
            else
            {
              if (v247)
                goto LABEL_268;
              JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>(v207, a5, a6);
            }
            break;
          case 'B':
            JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, v207, a5, a6);
            goto LABEL_376;
          case 'E':
            JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, (v204 >> 6) & 1, *(_BYTE *)(v203 + v138 + 16), v207, a5, a6);
            goto LABEL_376;
          case 'G':
            JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, v204 & 0x3F, *(_BYTE *)(v203 + v138 + 16), v207, a5, a6);
            goto LABEL_376;
          default:
            goto LABEL_268;
        }
        goto LABEL_376;
      }
      if (HIBYTE(*(_WORD *)(v203 + v138 + 17)) == 131)
        break;
      if (HIBYTE(*(_WORD *)(v203 + v138 + 17)) == 132)
      {
        JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, (v204 >> 6) & 1, *(_BYTE *)(v203 + v138 + 16), (unint64_t)v207 - 4, a5 - 4, a6);
        goto LABEL_376;
      }
      if (HIBYTE(*(_WORD *)(v203 + v138 + 17)) == 134)
      {
        JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, v204 & 0x3F, *(_BYTE *)(v203 + v138 + 16), (unint64_t)v207 - 4, a5 - 4, a6);
LABEL_376:
        a8 = 3573751839;
        a7 = 922746880;
        a4 = 905969664;
        a3 = 889192448;
        v137 = v356;
        v136 = (_QWORD *)i;
      }
LABEL_268:
      v138 += 24;
      if (v139 == v138)
        goto LABEL_311;
    }
    JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIWORD(v208) & 0xF, (unint64_t)v207 - 4, a5 - 4, a6);
    goto LABEL_376;
  }
LABEL_311:
  v225 = v126 + v127;
  if (!*v136)
  {
    v242 = v125 - v225;
    v243 = (v125 - v225) & 3;
    if (byte_1ECF4C1E4)
    {
      if (v243)
      {
        __break(0xC471u);
        JUMPOUT(0x197F6B040);
      }
      if ((JSC *)((char *)__src + v225) != (JSC *)(((unint64_t)__src + v225 + 3) & 0xFFFFFFFFFFFFFFFCLL))
      {
        __break(0xC471u);
        JUMPOUT(0x197F6B060);
      }
      if (v242 >= 4)
        memset_pattern16((char *)__src + v225, &unk_19914F580, v242 & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_312;
    }
    if (v243)
    {
      __break(0xC471u);
      JUMPOUT(0x197F6B76CLL);
    }
    if ((JSC *)((char *)__src + v225) != (JSC *)(((unint64_t)__src + v225 + 3) & 0xFFFFFFFFFFFFFFFCLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197F6B78CLL);
    }
    if (v242 >= 4)
    {
      v258 = v125;
      v259 = v242 >> 2;
      v260 = (char *)__src + v127 - (int)v89;
      v261 = (char *)__src + v127 - v351;
      do
      {
        v262 = (JSC *)&v260[v258];
        LODWORD(__pattern4) = -721215457;
        if (&v260[v258] != (char *)((unint64_t)&v261[v258 + 3] & 0xFFFFFFFFFFFFFFFCLL))
        {
          __break(0xC471u);
          JUMPOUT(0x197F6B7ACLL);
        }
        v263 = qword_1ECF4C1F8 <= (unint64_t)v262 && qword_1ECF4C200 > (unint64_t)v262;
        if (v263)
        {
          if ((unint64_t)&__pattern4 - qword_1ECF4C028 < qword_1ECF4C030)
          {
            __break(0xC471u);
            JUMPOUT(0x197F6B85CLL);
          }
          if (qword_1ECF4C1F0)
            v265 = qword_1ECF4C200 >= (unint64_t)v262 + 4;
          else
            v265 = 0;
          if (!v265)
          {
            __break(0xC471u);
            JUMPOUT(0x197F6B87CLL);
          }
          if (qword_1ECF4C748)
            JSC::dumpJITMemory(v262, &__pattern4, (char *)4);
          if (byte_1ECF4C1E4)
          {
            be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
            *(_DWORD *)v262 = (_DWORD)__pattern4;
            be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
            goto LABEL_397;
          }
          if (off_1ECF4C228)
          {
            if (qword_1ECF4C1F0)
              v266 = qword_1ECF4C1F8;
            else
              v266 = 0;
            off_1ECF4C228(&v261[v125 - v266], &__pattern4, 4);
            if ((unint64_t)&__pattern4 - qword_1ECF4C028 < qword_1ECF4C030)
            {
              __break(0xC471u);
              JUMPOUT(0x197F6B200);
            }
            goto LABEL_397;
          }
          v264 = (int)__pattern4;
        }
        else
        {
          v264 = -721215457;
        }
        *(_DWORD *)v262 = v264;
LABEL_397:
        v260 += 4;
        v261 += 4;
        --v259;
        v258 = v125;
      }
      while (v259);
    }
  }
LABEL_312:
  if (byte_1ECF4C1E4)
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
  v9 = i;
  v226 = *(JSC::ExecutableMemoryHandle **)i;
  if (*(_QWORD *)i)
  {
    *(_QWORD *)(i + 8) = v225;
    JSC::ExecutableMemoryHandle::shrink(v226, v225, a3, a4, a5, a6, a7, a8);
    v9 = i;
  }
  if (byte_1ECF4C1E4)
  {
    a2 = (uint64_t)v356;
    if (qword_1ECF4C748)
    {
      JSC::dumpJITMemory(__src, __src, *(char **)(v9 + 8));
      a2 = (uint64_t)v356;
      v9 = i;
    }
    goto LABEL_319;
  }
  v271 = *(_QWORD *)(v9 + 8);
  v272 = qword_1ECF4C200;
  if (qword_1ECF4C1F8 <= (unint64_t)v83 && qword_1ECF4C200 > (unint64_t)v83)
  {
    if ((unint64_t)__src - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x197F6B7CCLL);
    }
    if (!qword_1ECF4C1F0)
      v272 = 0;
    if ((unint64_t)v83 + v271 > v272)
    {
      __break(0xC471u);
      JUMPOUT(0x197F6B7ECLL);
    }
    if (qword_1ECF4C748)
    {
      JSC::dumpJITMemory(v83, __src, *(char **)(v9 + 8));
      if (byte_1ECF4C1E4)
      {
        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
        memcpy(v83, __src, v271);
        be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
        goto LABEL_428;
      }
    }
    if (off_1ECF4C228)
    {
      if (qword_1ECF4C1F0)
        v292 = qword_1ECF4C1F8;
      else
        v292 = 0;
      off_1ECF4C228((char *)v83 - v292, __src, v271);
      a2 = (uint64_t)v356;
      v9 = i;
      if ((unint64_t)__src - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x197F6B534);
      }
      goto LABEL_319;
    }
  }
  memcpy(v83, __src, v271);
LABEL_428:
  a2 = (uint64_t)v356;
  v9 = i;
LABEL_319:
  if (*(_DWORD *)(a2 + 40))
  {
    if (*(_DWORD *)(a2 + 44))
      *(_DWORD *)(a2 + 44) = 0;
    v227 = *(_QWORD *)(a2 + 32);
    if (v227)
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      WTF::fastFree(v227, (void *)a2, a3, a4, a5, a6, a7, a8);
      a2 = (uint64_t)v356;
      v9 = i;
    }
  }
  if (v353)
  {
    v267 = atomic_load(&_MergedGlobals_29);
    if (v267 != -1)
    {
      __pattern4 = (uint64_t *)&v361;
      p_pattern4 = (unint64_t *)&__pattern4;
      std::__call_once(&_MergedGlobals_29, &p_pattern4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificBranchCompactionLinkBuffer(void)::$_0 &&>>);
    }
    v268 = (pthread_key_t *)qword_1ECF58628;
    v270 = pthread_getspecific(*(_QWORD *)qword_1ECF58628);
    if (!v270)
    {
      v270 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v270[3] = v268;
      pthread_setspecific(*v268, v270);
      *v270 = 0;
      v270[1] = 0;
      *((_BYTE *)v270 + 16) = 0;
    }
    if (v270[1] >= (unint64_t)v352)
    {
      a2 = (uint64_t)v356;
      v9 = i;
      if (__src)
      {
        WTF::fastFree((unint64_t)__src, v356, a3, a4, a5, a6, a7, a8);
        a2 = (uint64_t)v356;
        v9 = i;
      }
    }
    else
    {
      if (*v270)
        WTF::fastFree(*v270, v269, a3, a4, a5, a6, a7, a8);
      a2 = (uint64_t)v356;
      *v270 = __src;
      v270[1] = v352;
      v9 = i;
    }
  }
LABEL_325:
  v228 = *(unsigned int *)(v9 + 204);
  if ((_DWORD)v228)
  {
    v280 = *(unsigned int ***)(v9 + 192);
    v281 = &v280[v228];
    do
    {
      v282 = *v280;
      *v280 = 0;
      if (v282)
      {
        v283 = v282 + 2;
        do
        {
          v284 = __ldaxr(v283);
          v285 = v284 - 1;
        }
        while (__stlxr(v285, v283));
        if (!v285)
        {
          atomic_store(1u, v282 + 2);
          (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v282 + 8))(v282, a2);
        }
      }
      ++v280;
      a2 = (uint64_t)v356;
      v9 = i;
    }
    while (v280 != v281);
  }
  v229 = *(_QWORD *)(v9 + 192);
  if (v229)
  {
    *(_QWORD *)(v9 + 192) = 0;
    *(_DWORD *)(v9 + 200) = 0;
    WTF::fastFree(v229, (void *)a2, a3, a4, a5, a6, a7, a8);
    a2 = (uint64_t)v356;
    v9 = i;
  }
  v230 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(v9 + 192) = v230;
  LODWORD(v230) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(v9 + 200) = v230;
  LODWORD(v230) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(v9 + 204) = v230;
  v231 = *(unsigned int *)(v9 + 220);
  if ((_DWORD)v231)
  {
    v286 = *(unsigned int ***)(v9 + 208);
    v287 = &v286[v231];
    do
    {
      v288 = *v286;
      *v286 = 0;
      if (v288)
      {
        v289 = v288 + 2;
        do
        {
          v290 = __ldaxr(v289);
          v291 = v290 - 1;
        }
        while (__stlxr(v291, v289));
        if (!v291)
        {
          atomic_store(1u, v288 + 2);
          (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v288 + 8))(v288, a2);
        }
      }
      ++v286;
      a2 = (uint64_t)v356;
      v9 = i;
    }
    while (v286 != v287);
  }
  v232 = *(_QWORD *)(v9 + 208);
  if (v232)
  {
    *(_QWORD *)(v9 + 208) = 0;
    *(_DWORD *)(v9 + 216) = 0;
    WTF::fastFree(v232, (void *)a2, a3, a4, a5, a6, a7, a8);
    a2 = (uint64_t)v356;
    v9 = i;
  }
  v233 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(v9 + 208) = v233;
  LODWORD(v233) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a2 + 256) = 0;
  *(_DWORD *)(v9 + 216) = v233;
  LODWORD(v233) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a2 + 260) = 0;
  *(_DWORD *)(v9 + 220) = v233;
  if ((_BYTE)word_1ECF4C286)
  {
    v248 = *(unsigned int **)v9;
    if (*(_QWORD *)v9)
    {
      p_pattern4 = 0;
      v249 = *(unsigned int *)(a2 + 228);
      if ((_DWORD)v249)
      {
        v302 = 16 * v249;
        v303 = (WTF::StringImpl *)(*((_QWORD *)v356 + 27) + 8);
        do
        {
          v304 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)3123>((_QWORD *)i, *((_DWORD *)v303 - 2));
          v360 = v303;
          v361 = v304;
          WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::ensure<JSC::LinkBuffer::linkComments(JSC::MacroAssembler &)::$_0>((uint64_t)&__pattern4, (uint64_t *)&p_pattern4, (uint64_t *)&v361, &v360, v305, v306, v307, v308);
          if (!v365)
          {
            v309 = (unint64_t)__pattern4;
            v310 = (WTF::StringImpl *)__pattern4[1];
            if (v310)
              *(_DWORD *)v310 += 2;
            v359 = v310;
            v311 = *(WTF::StringImpl **)v303;
            if (*(_QWORD *)v303)
              *(_DWORD *)v311 += 2;
            v358 = v311;
            WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v359, (int8x16_t *)"\n; ",
              4,
              (uint64_t *)&v358,
              (int **)&v360);
            v314 = v360;
            v360 = 0;
            v315 = *(WTF::StringImpl **)(v309 + 8);
            *(_QWORD *)(v309 + 8) = v314;
            if (v315)
            {
              if (*(_DWORD *)v315 == 2)
              {
                WTF::StringImpl::~StringImpl(v315, v312, v313, a4, a5, a6, a7, a8);
                WTF::fastFree(v318, v319, v320, v321, v322, v323, v324, v325);
                v326 = v360;
                v360 = 0;
                if (v326)
                {
                  if (*(_DWORD *)v326 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v326, v312, v313, a4, a5, a6, a7, a8);
                    WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
                  }
                  else
                  {
                    *(_DWORD *)v326 -= 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)v315 -= 2;
                v360 = 0;
              }
            }
            v316 = v358;
            v358 = 0;
            if (v316)
            {
              if (*(_DWORD *)v316 == 2)
              {
                WTF::StringImpl::~StringImpl(v316, v312, v313, a4, a5, a6, a7, a8);
                WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
              }
              else
              {
                *(_DWORD *)v316 -= 2;
              }
            }
            v317 = v359;
            v359 = 0;
            if (v317)
            {
              if (*(_DWORD *)v317 == 2)
              {
                WTF::StringImpl::~StringImpl(v317, v312, v313, a4, a5, a6, a7, a8);
                WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
              }
              else
              {
                *(_DWORD *)v317 -= 2;
              }
            }
          }
          v303 = (WTF::StringImpl *)((char *)v303 + 16);
          v302 -= 16;
        }
        while (v302);
        v248 = *(unsigned int **)i;
      }
      JSC::AssemblyCommentRegistry::registerCodeRange(*((_QWORD *)v248 + 1), (WTF::AtomStringImpl *)(v248[1] + *((_QWORD *)v248 + 1)), (uint64_t *)&p_pattern4, a4, a5, a6, a7, a8);
      WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap((uint64_t *)&p_pattern4, v250, v251, v252, v253, v254, v255, v256);
    }
  }
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)3123>(_QWORD *a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 4)
    v2 = 0;
  else
    v2 = *(_DWORD *)((a2 & 0xFFFFFFFC) + a1[3] - 4);
  v3 = a1[23];
  v4 = (a2 - v2) + v3;
  if (v3 <= v4 && v3 + a1[1] >= v4)
    return v4;
  result = 366;
  __break(0xC471u);
  return result;
}

void WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::ensure<JSC::LinkBuffer::linkComments(JSC::MacroAssembler &)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  _DWORD *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::String>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *a3 + ~(*a3 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v35 = 0;
        else
          v35 = *(unsigned int *)(v12 - 4);
        v41 = 0;
        v42 = v12 + 16 * v35;
        goto LABEL_35;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  v24 = (_DWORD *)*a4;
  *v20 = v15;
  WTF::String::isolatedCopy(v24, &v51);
  v32 = (WTF::StringImpl *)v20[1];
  v20[1] = v51;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v33 = *a2;
  if (*a2)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v36 = *a2;
  if (*a2)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 <= 2 * v38)
      goto LABEL_26;
  }
  else if (3 * v39 <= 4 * v38)
  {
    if (!(_DWORD)v39)
    {
      v40 = 8;
LABEL_31:
      v20 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::String>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a2, v40, (uint64_t)v20, v27, v28, v29, v30, v31);
      v36 = *a2;
      if (*a2)
        v39 = *(unsigned int *)(v36 - 4);
      else
        v39 = 0;
      goto LABEL_34;
    }
LABEL_26:
    v40 = ((_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39)));
    goto LABEL_31;
  }
LABEL_34:
  v42 = v36 + 16 * v39;
  v41 = 1;
LABEL_35:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v42;
  *(_BYTE *)(a1 + 16) = v41;
}

uint64_t WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, int **a5@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;

  v8 = *a1;
  if (a3)
  {
    v9 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x197F6BF94);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *a4;
  if (v8)
    v11 = *(_DWORD *)(v8 + 4);
  else
    v11 = 0;
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 4);
    if (v12 < 0)
    {
LABEL_23:
      *a5 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v9, v12);
  v14 = v9 + v12;
  v15 = v13;
  if (v11 < 0)
    goto LABEL_23;
  if ((v15 & 1) != 0)
    goto LABEL_23;
  v16 = (v11 + v14);
  if (__OFADD__(v11, v14))
    goto LABEL_23;
  if (v8)
  {
    v17 = *(_DWORD *)(v8 + 16);
    v18 = (v17 >> 2) & 1;
    if (v10 && (v17 & 4) != 0)
      goto LABEL_16;
  }
  else
  {
    if (v10)
    {
LABEL_16:
      v18 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
      goto LABEL_17;
    }
    v18 = 1;
  }
LABEL_17:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, v8, a2, v9, v10, a5);
  if (!*a5)
    goto LABEL_26;
  return result;
}

void JSC::AssemblyCommentRegistry::registerCodeRange(unint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((_BYTE)word_1ECF4C286 && *a3 && *(_DWORD *)(*a3 - 12))
  {
    if (__ldaxr(JSC::commentsRegistry))
    {
      __clrex();
    }
    else if (!__stxr(1u, JSC::commentsRegistry))
    {
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::commentsRegistry);
LABEL_9:
    if (a1 >= (unint64_t)a2)
    {
      __break(0xC471u);
      return;
    }
    v12 = ~a1;
    v13 = *a3;
    *a3 = 0;
    v14 = xmmword_1ECF500D0;
    if ((_QWORD)xmmword_1ECF500D0)
    {
      while (1)
      {
        while (1)
        {
          v15 = (__int128 *)v14;
          v16 = *(_QWORD *)(v14 + 32);
          if (v16 <= v12)
            break;
          v14 = *(_QWORD *)v15;
          v17 = v15;
          if (!*(_QWORD *)v15)
            goto LABEL_18;
        }
        if (v16 >= v12)
          break;
        v14 = *((_QWORD *)v15 + 1);
        if (!v14)
        {
          v17 = (__int128 *)((char *)v15 + 8);
          goto LABEL_18;
        }
      }
      if (v13)
      {
        v21 = *(unsigned int *)(v13 - 4);
        if ((_DWORD)v21)
        {
          v22 = (WTF::StringImpl **)(v13 + 8);
          do
          {
            if (*(v22 - 1) != (WTF::StringImpl *)-1)
            {
              v23 = *v22;
              *v22 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                }
                else
                {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            v22 += 2;
            --v21;
          }
          while (v21);
        }
        WTF::fastFree(v13 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      v17 = &xmmword_1ECF500D0;
      v15 = &xmmword_1ECF500D0;
LABEL_18:
      v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x38);
      v18[4] = v12;
      v18[5] = (uint64_t)a2;
      v18[6] = v13;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = (uint64_t)v15;
      *(_QWORD *)v17 = v18;
      if (*(_QWORD *)qword_1ECF500C8)
      {
        qword_1ECF500C8 = *(_QWORD *)qword_1ECF500C8;
        v19 = *(uint64_t **)v17;
      }
      else
      {
        v19 = v18;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)xmmword_1ECF500D0, v19);
      ++*((_QWORD *)&xmmword_1ECF500D0 + 1);
    }
    v20 = __ldxr(JSC::commentsRegistry);
    if (v20 == 1)
    {
      if (!__stlxr(0, JSC::commentsRegistry))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::commentsRegistry, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

uint64_t *WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  if (*a1)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)(v9 + 8);
      do
      {
        if (*(v11 - 1) != (WTF::StringImpl *)-1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

double JSC::LinkBuffer::clearProfileStatistics(JSC::LinkBuffer *this)
{
  double result;

  result = 0.0;
  xmmword_1EE342CE0 = 0u;
  *(_OWORD *)&qword_1EE342CF0 = 0u;
  xmmword_1EE342CC0 = 0u;
  *(_OWORD *)&qword_1EE342CD0 = 0u;
  xmmword_1EE342CA0 = 0u;
  *(_OWORD *)&qword_1EE342CB0 = 0u;
  xmmword_1EE342C80 = 0u;
  *(_OWORD *)&qword_1EE342C90 = 0u;
  JSC::LinkBuffer::s_profileCummulativeLinkedSizes = 0u;
  *(_OWORD *)&qword_1EE342C70 = 0u;
  JSC::LinkBuffer::s_profileCummulativeLinkedCounts = 0u;
  *(_OWORD *)&qword_1EE342D10 = 0u;
  xmmword_1EE342D20 = 0u;
  *(_OWORD *)&qword_1EE342D30 = 0u;
  xmmword_1EE342D40 = 0u;
  *(_OWORD *)&qword_1EE342D50 = 0u;
  xmmword_1EE342D60 = 0u;
  *(_OWORD *)&qword_1EE342D70 = 0u;
  xmmword_1EE342D80 = 0u;
  *(_OWORD *)&qword_1EE342D90 = 0u;
  return result;
}

uint64_t JSC::LinkBuffer::dumpProfileStatistics(uint64_t a1, char a2, __n128 a3)
{
  unint64_t v4;
  WTF::PrintStream *v5;
  unint64_t i;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  double v10;
  const char *v11;
  double v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  unint64_t v15;
  unint64_t v16;
  WTF::PrintStream *v17;
  uint64_t result;
  char v19;
  __n128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  char __str[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v4 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v4 != -1)
    {
      v20.n128_u64[0] = (unint64_t)&v19;
      *(_QWORD *)__str = &v20;
      std::__call_once(&WTF::initializeLogFile(void)::once, __str, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    a1 = WTF::s_file;
  }
  v20.n128_u64[1] = *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[0];
  v21 = JSC::LinkBuffer::s_profileCummulativeLinkedCounts;
  v22 = 1;
  v23 = *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[0] + 1);
  v24 = *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + 1);
  v25 = 2;
  v26 = qword_1EE342C70;
  v27 = qword_1EE342D10;
  v28 = 3;
  v29 = unk_1EE342C78;
  v30 = unk_1EE342D18;
  v31 = 4;
  v32 = xmmword_1EE342C80;
  v33 = xmmword_1EE342D20;
  v34 = 5;
  v35 = *((_QWORD *)&xmmword_1EE342C80 + 1);
  v36 = *((_QWORD *)&xmmword_1EE342D20 + 1);
  v37 = 6;
  v38 = qword_1EE342C90;
  v39 = qword_1EE342D30;
  v40 = 7;
  v41 = unk_1EE342C98;
  v42 = unk_1EE342D38;
  v43 = 8;
  v44 = xmmword_1EE342CA0;
  v45 = xmmword_1EE342D40;
  v46 = 9;
  v47 = *((_QWORD *)&xmmword_1EE342CA0 + 1);
  v48 = *((_QWORD *)&xmmword_1EE342D40 + 1);
  v49 = 10;
  v50 = qword_1EE342CB0;
  v51 = qword_1EE342D50;
  v52 = 11;
  v53 = unk_1EE342CB8;
  v54 = unk_1EE342D58;
  v55 = 12;
  v56 = xmmword_1EE342CC0;
  v57 = xmmword_1EE342D60;
  v58 = 13;
  v59 = *((_QWORD *)&xmmword_1EE342CC0 + 1);
  v60 = *((_QWORD *)&xmmword_1EE342D60 + 1);
  v61 = 14;
  v62 = qword_1EE342CD0;
  v63 = qword_1EE342D70;
  v64 = 15;
  v65 = unk_1EE342CD8;
  v66 = unk_1EE342D78;
  v67 = 16;
  v68 = xmmword_1EE342CE0;
  v69 = xmmword_1EE342D80;
  v70 = 17;
  v20.n128_u32[0] = 0;
  v71 = *((_QWORD *)&xmmword_1EE342CE0 + 1);
  v72 = *((_QWORD *)&xmmword_1EE342D80 + 1);
  v73 = 18;
  v74 = qword_1EE342CF0;
  v75 = qword_1EE342D90;
  v76.n128_u32[0] = 19;
  v76.n128_u64[1] = *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[0] + 1)
                  + *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[0]
                  + qword_1EE342C70
                  + unk_1EE342C78
                  + xmmword_1EE342C80
                  + *((_QWORD *)&xmmword_1EE342C80 + 1)
                  + qword_1EE342C90
                  + unk_1EE342C98
                  + xmmword_1EE342CA0
                  + *((_QWORD *)&xmmword_1EE342CA0 + 1)
                  + qword_1EE342CB0
                  + unk_1EE342CB8
                  + xmmword_1EE342CC0
                  + *((_QWORD *)&xmmword_1EE342CC0 + 1)
                  + qword_1EE342CD0
                  + unk_1EE342CD8
                  + xmmword_1EE342CE0
                  + *((_QWORD *)&xmmword_1EE342CE0 + 1)
                  + qword_1EE342CF0
                  + unk_1EE342CF8;
  v77 = unk_1EE342D98;
  std::__introsort<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *,false>(&v20, &v76, 8, 1, a3);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v5, "%s", "Cummulative LinkBuffer profile sizes:");
  WTF::PrintStream::printf(v5, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  for (i = 0; i != 480; i += 24)
  {
    v7 = v20.n128_i32[i / 4];
    if (v7 >= 0x14)
    {
      __break(0xC471u);
      JUMPOUT(0x197F6C7ECLL);
    }
    snprintf(__str, 0x15uLL, "%20s", off_1E357CB20[v7]);
    v8 = (char *)&v20 + i;
    v9 = v20.n128_u64[i / 8 + 1];
    if (v9 > 0x100000)
    {
      v10 = 0.000000953674316;
      v11 = "MB";
LABEL_12:
      v12 = v10 * (double)v9;
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printf(v13, "%s", "  ");
      WTF::PrintStream::printf(v13, "%s", __str);
      WTF::PrintStream::printf(v13, "%s", ": ");
      WTF::PrintStream::printf(v13, "%lu", *((_QWORD *)v8 + 1));
      WTF::PrintStream::printf(v13, "%s", " (");
      WTF::PrintStream::printf(v13, "%lf", v12);
      WTF::PrintStream::printf(v13, "%s", " ");
      WTF::PrintStream::printf(v13, "%s", v11);
      WTF::PrintStream::printf(v13, "%s");
      goto LABEL_14;
    }
    if (v9 >= 0x401)
    {
      v10 = 0.0009765625;
      v11 = "KB";
      goto LABEL_12;
    }
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v14, "%s", "  ");
    WTF::PrintStream::printf(v14, "%s", __str);
    WTF::PrintStream::printf(v14, "%s", ": ");
    WTF::PrintStream::printf(v14, "%lu");
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v15 = *(_QWORD *)((char *)&v20 + i + 16);
    if (v15)
    {
      v16 = *((_QWORD *)v8 + 1) / v15;
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printf(v17, "%s", " count ");
      WTF::PrintStream::printf(v17, "%lu", *(_QWORD *)((char *)&v20 + i + 16));
      WTF::PrintStream::printf(v17, "%s", " avg size ");
      WTF::PrintStream::printf(v17, "%lu", v16);
    }
    else
    {
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    }
    WTF::PrintStream::printf(v17, "%s", "\n");
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

void JSC::MacroAssembler::probeDebug(_DWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v5 = *a2;
  *a2 = 0;
  *v4 = v5;
  JSC::MacroAssembler::probe(a1, (uint64_t)JSC::stdFunctionCallback, (uint64_t)v4, 1, v6, v7, v8, v9);
}

uint64_t JSC::stdFunctionCallback(uint64_t a1)
{
  uint64_t v2;

  v2 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1);
}

void JSC::MacroAssemblerCodeRefBase::disassembly(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  WTF *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = (WTF *)v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  v15 = a1;
  if ((JSC::tryToDisassemble(&v15, a2, 0, 0, "", (WTF::PrintStream *)&v16) & 1) != 0)
  {
    v12 = v17;
    v11 = v18;
    *a3 = 0;
    if (v12)
    {
      if (v11 > 0xFFFFFFFFFFFFFFEELL)
      {
        __break(0xC471u);
        JUMPOUT(0x197F6C95CLL);
      }
      v13 = WTF::fastMalloc((WTF *)(v11 + 17));
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = v11;
      *a3 = v13;
      v14 = v13 + 16;
      memcpy((void *)(v13 + 16), v12, v11);
      *(_BYTE *)(v14 + v11) = 0;
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v17 != (WTF *)v19)
    WTF::fastFree((unint64_t)v17, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t JSC::shouldDumpDisassemblyFor(uint64_t result)
{
  int v1;

  if (byte_1ECF4C288 || HIBYTE(word_1ECF4C286) | byte_1ECF4C28E)
    return 1;
  if ((result - 2) < 2)
  {
    v1 = word_1ECF4C2A0;
    return v1 != 0;
  }
  if (result > 9)
    goto LABEL_12;
  if (((1 << result) & 0x30) != 0)
  {
    v1 = HIBYTE(word_1ECF4C2A0);
    return v1 != 0;
  }
  if (((1 << result) & 0x3C3) != 0)
    return 0;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  __n128 v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __n128 *v71;
  __n128 *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  __n128 *v76;
  __n128 v77;
  __n128 *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __n128 *v90;
  __n128 *v91;
  unint64_t v92;
  __n128 v93;
  __n128 *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  __n128 v101;
  __n128 v102;
  __n128 *v103;
  __n128 *v104;
  __n128 *v105;
  __n128 v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  __n128 v112;
  BOOL v114;
  uint64_t v115;
  _QWORD *n128_u64;
  __n128 *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  __n128 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __n128 v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __n128 *v169;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>(uint64_t a1, __n128 *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  __n128 *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (a2[-1].n128_u64[0] > *(_QWORD *)(a1 + 8))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(__n128 *)a1;
        v9 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 16) = v9;
        *(__n128 *)((char *)a2 - 24) = v8;
        a2[-1].n128_u64[1] = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)((char *)a2 - 24);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = a2[-1].n128_u64[0];
      if (v12 <= *(_QWORD *)(a1 + 8))
      {
        if (v13 > v12)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *v10;
          v38 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v38;
          *v11 = v37;
          a2[-1].n128_u64[1] = v36;
          if (*(_QWORD *)(a1 + 32) > *(_QWORD *)(a1 + 8))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v10 = v40;
            *(_QWORD *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 <= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v10 = v46;
        *(_QWORD *)(a1 + 40) = v45;
        if (a2[-1].n128_u64[0] > *(_QWORD *)(a1 + 32))
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *v10;
          v49 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v49;
          *v11 = v48;
          a2[-1].n128_u64[1] = v47;
        }
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 16);
        v15 = *(__n128 *)a1;
        v16 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *v11;
        *(_QWORD *)(a1 + 16) = v16;
        *v11 = v15;
        a2[-1].n128_u64[1] = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (a2[-1].n128_u64[0] > *(_QWORD *)(a1 + 80))
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *v26;
        v29 = a2[-1].n128_i64[1];
        *v26 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 88) = v29;
        *(__n128 *)((char *)a2 - 24) = v28;
        a2[-1].n128_u64[1] = v27;
        if (*(_QWORD *)(a1 + 80) > *(_QWORD *)(a1 + 56))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v26 = v31;
          *(_QWORD *)(a1 + 88) = v30;
          if (*(_QWORD *)(a1 + 56) > *(_QWORD *)(a1 + 32))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v25 = v33;
            *(_QWORD *)(a1 + 64) = v32;
            if (*(_QWORD *)(a1 + 32) > *(_QWORD *)(a1 + 8))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v24 = v35;
              *(_QWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(a1 + 56);
      if (v19 <= v20)
      {
        if (v21 > v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v42;
          *(_QWORD *)(a1 + 64) = v41;
          if (*(_QWORD *)(a1 + 32) > v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v18 = v44;
            *(_QWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 <= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v18 = v51;
        *(_QWORD *)(a1 + 40) = v50;
        if (v21 > *(_QWORD *)(a1 + 32))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v53;
          *(_QWORD *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v17 = v23;
        *(_QWORD *)(a1 + 64) = v22;
      }
      v54 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v57 = v54->n128_u64[1];
    if (v57 > v17->n128_u64[1])
    {
      v58 = v54->n128_u64[0];
      v59 = v54[1].n128_i64[0];
      v60 = v55;
      while (1)
      {
        v61 = a1 + v60;
        *(_OWORD *)(v61 + 72) = *(_OWORD *)(a1 + v60 + 48);
        *(_QWORD *)(v61 + 88) = *(_QWORD *)(a1 + v60 + 64);
        if (v60 == -48)
          break;
        v60 -= 24;
        if (v57 <= *(_QWORD *)(v61 + 32))
        {
          v62 = (unint64_t *)(a1 + v60 + 72);
          goto LABEL_34;
        }
      }
      v62 = (unint64_t *)a1;
LABEL_34:
      *v62 = v58;
      v62[1] = v57;
      v62[2] = v59;
      if (++v56 == 8)
        return &v54[1].n128_i8[8] == (__int8 *)a2;
    }
    v17 = v54;
    v55 += 24;
    v54 = (__n128 *)((char *)v54 + 24);
    if (v54 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::$_0 &,JSC::LinkBuffer::dumpProfileStatistics(std::optional<WTF::PrintStream *>)::Stat *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u64[1];
  v6 = a3->n128_u64[1];
  if (v5 <= a1->n128_u64[1])
  {
    if (v6 > v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if (a2->n128_u64[1] > a1->n128_u64[1])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (a3->n128_u64[1] > a2->n128_u64[1])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u64[1] > a3->n128_u64[1])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    if (a3->n128_u64[1] > a2->n128_u64[1])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      if (a2->n128_u64[1] > a1->n128_u64[1])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::AbstractMacroAssemblerBase::initializeRandom(void)::$_0 &&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssemblerBase::initializeRandom(void)::globalCounter = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>()
{
  pthread_key_t *v0;
  uint64_t result;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  result = pthread_key_create(v0, (void (__cdecl *)(void *))WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  else
    JSC::threadSpecificAssemblerDataPtr = (uint64_t)v0;
  return result;
}

void WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::destroy(char *a1)
{
  unint64_t v2;
  pthread_key_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char **v31;
  char *v32;

  pthread_setspecific(**((_QWORD **)a1 + 18), a1);
  v2 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v2 != -1)
  {
    v32 = &v30;
    v31 = &v32;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v3 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v11 = pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v11)
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x98);
    v11[18] = v3;
    pthread_setspecific(*v3, v11);
    *v11 = v11 + 1;
    *((_DWORD *)v11 + 34) = 128;
    v23 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v23 != -1)
    {
      v32 = &v30;
      v31 = &v32;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v24 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*((pthread_key_t *)JSC::threadSpecificAssemblerDataPtr);
    v26 = v24 + 1;
    v25 = *v24;
    if ((_QWORD *)*v24 != v24 + 1)
    {
      v27 = v24;
      v28 = *((_DWORD *)v24 + 34);
      if (*((_DWORD *)v11 + 34) < v28)
      {
        v29 = *v11;
        if (*v11 && (_QWORD *)v29 != v11 + 1)
        {
          WTF::fastFree(v29, v4, v5, v6, v7, v8, v9, v10);
          v25 = *v27;
          v28 = *((_DWORD *)v27 + 34);
        }
        *v11 = v25;
        *((_DWORD *)v11 + 34) = v28;
        *v27 = v26;
        *((_DWORD *)v27 + 34) = 128;
      }
    }
  }
  v13 = a1 + 8;
  v12 = *(_QWORD **)a1;
  if (*(char **)a1 != a1 + 8)
  {
    v21 = *((_DWORD *)a1 + 34);
    if (*((_DWORD *)v11 + 34) >= v21)
    {
      if (v12)
      {
        WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
        *((_DWORD *)a1 + 34) = 128;
        *(_QWORD *)a1 = v13;
      }
    }
    else
    {
      if (*v11)
        v22 = *v11 == (_QWORD)(v11 + 1);
      else
        v22 = 1;
      if (!v22)
      {
        WTF::fastFree(*v11, v4, v5, v6, v7, v8, v9, v10);
        v12 = *(_QWORD **)a1;
        v21 = *((_DWORD *)a1 + 34);
      }
      *v11 = v12;
      *((_DWORD *)v11 + 34) = v21;
      *(_QWORD *)a1 = v13;
      *((_DWORD *)a1 + 34) = 128;
    }
  }
  pthread_setspecific(**((_QWORD **)a1 + 18), 0);
  WTF::fastFree((unint64_t)a1, v14, v15, v16, v17, v18, v19, v20);
}

_QWORD *WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(pthread_key_t *a1)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  char **v19;
  char *v20;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x98);
    v2[18] = a1;
    pthread_setspecific(*a1, v2);
    *v2 = v2 + 1;
    *((_DWORD *)v2 + 34) = 128;
    v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v4 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v5 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(JSC::threadSpecificAssemblerDataPtr);
    v14 = v5 + 8;
    v13 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 != v5 + 8)
    {
      v15 = v5;
      v16 = *(_DWORD *)(v5 + 136);
      if (*((_DWORD *)v2 + 34) < v16)
      {
        v17 = *v2;
        if (*v2 && (_QWORD *)v17 != v2 + 1)
        {
          WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
          v13 = *(_QWORD *)v15;
          v16 = *(_DWORD *)(v15 + 136);
        }
        *v2 = v13;
        *((_DWORD *)v2 + 34) = v16;
        *(_QWORD *)v15 = v14;
        *(_DWORD *)(v15 + 136) = 128;
      }
    }
  }
  return v2;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordELb0EEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEb(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t *v16;
  char v17;
  __int16 v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int16 v33;
  char v34;
  int v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  __int16 v41;
  char v42;
  int v43;
  char v44;
  __int16 v45;
  char v46;
  int v47;
  __int128 v48;
  char v49;
  __int16 v50;
  char v51;
  int v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int16 v56;
  char v57;
  int v58;
  char v59;
  __int16 v60;
  char v61;
  int v62;
  char v63;
  int v64;
  __int16 v65;
  __int16 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  __int16 v70;
  char v71;
  int v72;
  __int128 v73;
  char v74;
  __int16 v75;
  char v76;
  int v77;
  char v78;
  __int16 v79;
  char v80;
  int v81;
  __int128 v82;
  char v83;
  __int16 v84;
  char v85;
  int v86;
  __int128 v87;
  __int128 v88;
  char v89;
  __int16 v90;
  char v91;
  int v92;
  char v93;
  int v94;
  int v95;
  __int16 v96;
  __int16 v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  char v101;
  int v102;
  int v103;
  __int16 v104;
  __int16 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  __int16 v109;
  char v110;
  int v111;
  __int128 v112;
  __int128 v113;
  char v114;
  __int16 v115;
  char v116;
  int v117;
  char v118;
  __int16 v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  int v131;
  __int16 v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t *v142;
  char v143;
  __int16 v144;
  char v145;
  int v146;
  uint64_t v147;
  BOOL v148;
  uint64_t *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;

  while (2)
  {
    v6 = 1 - a3;
LABEL_2:
    v7 = result;
    v8 = v6;
    v9 = (uint64_t)a2 - result;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - result) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v36 = a2 - 3;
        if (*(a2 - 3) < *(_QWORD *)result)
        {
          v154 = *(_OWORD *)result;
          v37 = *(_BYTE *)(result + 16);
          v25 = *(_WORD *)(result + 17);
          v26 = *(_BYTE *)(result + 19);
          v27 = *(_DWORD *)(result + 20);
          v38 = *(a2 - 1);
          *(_OWORD *)result = *(_OWORD *)v36;
          *(_QWORD *)(result + 16) = v38;
          *(_OWORD *)v36 = v154;
          *((_BYTE *)a2 - 8) = v37;
          goto LABEL_15;
        }
        return result;
      case 3uLL:
        v11 = result + 24;
        v21 = *(_QWORD *)(result + 24);
        v22 = a2 - 3;
        v23 = *(a2 - 3);
        if (v21 >= *(_QWORD *)result)
        {
          if (v23 < v21)
          {
            v48 = *(_OWORD *)v11;
            v49 = *(_BYTE *)(result + 40);
            v50 = *(_WORD *)(result + 41);
            v51 = *(_BYTE *)(result + 43);
            v52 = *(_DWORD *)(result + 44);
            v53 = *(_OWORD *)v22;
            *(_QWORD *)(result + 40) = *(a2 - 1);
            *(_OWORD *)v11 = v53;
            *(_OWORD *)v22 = v48;
            *((_BYTE *)a2 - 8) = v49;
            *((_BYTE *)a2 - 5) = v51;
            *(_WORD *)((char *)a2 - 7) = v50;
            *((_DWORD *)a2 - 1) = v52;
            goto LABEL_41;
          }
        }
        else if (v23 >= v21)
        {
          v159 = *(_OWORD *)result;
          v93 = *(_BYTE *)(result + 16);
          v94 = *(unsigned __int8 *)(result + 19);
          v95 = *(unsigned __int16 *)(result + 17);
          v96 = *(_WORD *)(result + 20);
          v97 = *(_WORD *)(result + 22);
          *(_OWORD *)result = *(_OWORD *)v11;
          *(_QWORD *)(result + 16) = *(_QWORD *)(result + 40);
          *(_OWORD *)v11 = v159;
          *(_BYTE *)(result + 40) = v93;
          *(_BYTE *)(result + 43) = v94;
          *(_WORD *)(result + 41) = v95;
          *(_WORD *)(result + 44) = v96;
          *(_WORD *)(result + 46) = v97;
          if (*v22 < *(_QWORD *)(result + 24))
          {
            v98 = *(_OWORD *)v11;
            v99 = v95 | (v94 << 16);
            v100 = *(a2 - 1);
            *(_OWORD *)v11 = *(_OWORD *)v22;
            *(_QWORD *)(result + 40) = v100;
            *(_OWORD *)v22 = v98;
            *((_BYTE *)a2 - 8) = v93;
            *((_BYTE *)a2 - 5) = BYTE2(v99);
            *(_WORD *)((char *)a2 - 7) = v99;
            *((_WORD *)a2 - 2) = v96;
            *((_WORD *)a2 - 1) = v97;
          }
        }
        else
        {
          v152 = *(_OWORD *)result;
          v24 = *(_BYTE *)(result + 16);
          v25 = *(_WORD *)(result + 17);
          v26 = *(_BYTE *)(result + 19);
          v27 = *(_DWORD *)(result + 20);
          v28 = *(a2 - 1);
          *(_OWORD *)result = *(_OWORD *)v22;
          *(_QWORD *)(result + 16) = v28;
          *(_OWORD *)v22 = v152;
          *((_BYTE *)a2 - 8) = v24;
LABEL_15:
          *((_BYTE *)a2 - 5) = v26;
          *(_WORD *)((char *)a2 - 7) = v25;
          *((_DWORD *)a2 - 1) = v27;
        }
        return result;
      case 4uLL:
        v11 = result + 24;
        v29 = *(_QWORD *)(result + 24);
        v13 = result + 48;
        v30 = *(_QWORD *)(result + 48);
        v31 = a2 - 3;
        if (v29 >= *(_QWORD *)result)
        {
          if (v30 < v29)
          {
            v54 = *(_OWORD *)v11;
            v55 = *(_BYTE *)(result + 40);
            v56 = *(_WORD *)(result + 41);
            v57 = *(_BYTE *)(result + 43);
            v58 = *(_DWORD *)(result + 44);
            *(_QWORD *)(result + 40) = *(_QWORD *)(result + 64);
            *(_OWORD *)v11 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v54;
            *(_BYTE *)(result + 64) = v55;
            *(_BYTE *)(result + 67) = v57;
            *(_WORD *)(result + 65) = v56;
            *(_DWORD *)(result + 68) = v58;
            if (*(_QWORD *)(result + 24) < *(_QWORD *)result)
            {
              v156 = *(_OWORD *)result;
              v59 = *(_BYTE *)(result + 16);
              v60 = *(_WORD *)(result + 17);
              v61 = *(_BYTE *)(result + 19);
              v62 = *(_DWORD *)(result + 20);
              *(_OWORD *)result = *(_OWORD *)v11;
              *(_QWORD *)(result + 16) = *(_QWORD *)(result + 40);
              *(_OWORD *)v11 = v156;
              *(_BYTE *)(result + 40) = v59;
              *(_BYTE *)(result + 43) = v61;
              *(_WORD *)(result + 41) = v60;
              *(_DWORD *)(result + 44) = v62;
            }
          }
        }
        else if (v30 >= v29)
        {
          v160 = *(_OWORD *)result;
          v101 = *(_BYTE *)(result + 16);
          v102 = *(unsigned __int8 *)(result + 19);
          v103 = *(unsigned __int16 *)(result + 17);
          v104 = *(_WORD *)(result + 20);
          v105 = *(_WORD *)(result + 22);
          *(_OWORD *)result = *(_OWORD *)v11;
          *(_QWORD *)(result + 16) = *(_QWORD *)(result + 40);
          *(_OWORD *)v11 = v160;
          *(_BYTE *)(result + 40) = v101;
          *(_BYTE *)(result + 43) = v102;
          *(_WORD *)(result + 41) = v103;
          *(_WORD *)(result + 44) = v104;
          *(_WORD *)(result + 46) = v105;
          result = *(_QWORD *)(result + 24);
          if (v30 < result)
          {
            v106 = *(_OWORD *)v11;
            *(_OWORD *)v11 = *(_OWORD *)v13;
            *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
            *(_OWORD *)v13 = v106;
            *(_BYTE *)(v7 + 64) = v101;
            *(_BYTE *)(v7 + 67) = (v103 | (v102 << 16)) >> 16;
            *(_WORD *)(v7 + 65) = v103;
            *(_WORD *)(v7 + 68) = v104;
            *(_WORD *)(v7 + 70) = v105;
          }
        }
        else
        {
          v153 = *(_OWORD *)result;
          v32 = *(_BYTE *)(result + 16);
          v33 = *(_WORD *)(result + 17);
          v34 = *(_BYTE *)(result + 19);
          v35 = *(_DWORD *)(result + 20);
          *(_OWORD *)result = *(_OWORD *)v13;
          *(_QWORD *)(result + 16) = *(_QWORD *)(result + 64);
          *(_OWORD *)v13 = v153;
          *(_BYTE *)(result + 64) = v32;
          *(_BYTE *)(result + 67) = v34;
          *(_WORD *)(result + 65) = v33;
          *(_DWORD *)(result + 68) = v35;
        }
        if (*v31 < *(_QWORD *)v13)
        {
          v107 = *(_OWORD *)v13;
          v108 = *(_BYTE *)(v7 + 64);
          v109 = *(_WORD *)(v7 + 65);
          v110 = *(_BYTE *)(v7 + 67);
          v111 = *(_DWORD *)(v7 + 68);
          v112 = *(_OWORD *)v31;
          *(_QWORD *)(v7 + 64) = *(a2 - 1);
          *(_OWORD *)v13 = v112;
          *(_OWORD *)v31 = v107;
          *((_BYTE *)a2 - 8) = v108;
          *((_BYTE *)a2 - 5) = v110;
          *(_WORD *)((char *)a2 - 7) = v109;
          *((_DWORD *)a2 - 1) = v111;
          goto LABEL_39;
        }
        return result;
      case 5uLL:
        v11 = result + 24;
        v12 = *(_QWORD *)(result + 24);
        v13 = result + 48;
        v14 = *(_QWORD *)(result + 48);
        v15 = (_OWORD *)(result + 72);
        v16 = a2 - 3;
        if (v12 >= *(_QWORD *)result)
        {
          if (v14 < v12)
          {
            v39 = *(_OWORD *)v11;
            v40 = *(_BYTE *)(result + 40);
            v41 = *(_WORD *)(result + 41);
            v42 = *(_BYTE *)(result + 43);
            v43 = *(_DWORD *)(result + 44);
            *(_QWORD *)(result + 40) = *(_QWORD *)(result + 64);
            *(_OWORD *)v11 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v39;
            *(_BYTE *)(result + 64) = v40;
            *(_BYTE *)(result + 67) = v42;
            *(_WORD *)(result + 65) = v41;
            *(_DWORD *)(result + 68) = v43;
            if (*(_QWORD *)(result + 24) < *(_QWORD *)result)
            {
              v155 = *(_OWORD *)result;
              v44 = *(_BYTE *)(result + 16);
              v45 = *(_WORD *)(result + 17);
              v46 = *(_BYTE *)(result + 19);
              v47 = *(_DWORD *)(result + 20);
              *(_OWORD *)result = *(_OWORD *)v11;
              *(_QWORD *)(result + 16) = *(_QWORD *)(result + 40);
              *(_OWORD *)v11 = v155;
              *(_BYTE *)(result + 40) = v44;
              *(_BYTE *)(result + 43) = v46;
              *(_WORD *)(result + 41) = v45;
              *(_DWORD *)(result + 44) = v47;
            }
          }
        }
        else if (v14 >= v12)
        {
          v157 = *(_OWORD *)result;
          v63 = *(_BYTE *)(result + 16);
          v64 = *(unsigned __int8 *)(result + 19);
          result = *(unsigned __int16 *)(result + 17);
          v65 = *(_WORD *)(v7 + 20);
          v66 = *(_WORD *)(v7 + 22);
          *(_OWORD *)v7 = *(_OWORD *)v11;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
          *(_OWORD *)v11 = v157;
          *(_BYTE *)(v7 + 40) = v63;
          *(_BYTE *)(v7 + 43) = v64;
          *(_WORD *)(v7 + 41) = result;
          *(_WORD *)(v7 + 44) = v65;
          *(_WORD *)(v7 + 46) = v66;
          if (v14 < *(_QWORD *)(v7 + 24))
          {
            v67 = *(_OWORD *)v11;
            *(_OWORD *)v11 = *(_OWORD *)v13;
            *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
            *(_OWORD *)v13 = v67;
            *(_BYTE *)(v7 + 64) = v63;
            *(_BYTE *)(v7 + 67) = (result | (v64 << 16)) >> 16;
            *(_WORD *)(v7 + 65) = result;
            *(_WORD *)(v7 + 68) = v65;
            *(_WORD *)(v7 + 70) = v66;
          }
        }
        else
        {
          v151 = *(_OWORD *)result;
          v17 = *(_BYTE *)(result + 16);
          v18 = *(_WORD *)(result + 17);
          v19 = *(_BYTE *)(result + 19);
          v20 = *(_DWORD *)(result + 20);
          *(_OWORD *)result = *(_OWORD *)v13;
          *(_QWORD *)(result + 16) = *(_QWORD *)(result + 64);
          *(_OWORD *)v13 = v151;
          *(_BYTE *)(result + 64) = v17;
          *(_BYTE *)(result + 67) = v19;
          *(_WORD *)(result + 65) = v18;
          *(_DWORD *)(result + 68) = v20;
        }
        if (*(_QWORD *)v15 < *(_QWORD *)v13)
        {
          v68 = *(_OWORD *)v13;
          v69 = *(_BYTE *)(v7 + 64);
          v70 = *(_WORD *)(v7 + 65);
          v71 = *(_BYTE *)(v7 + 67);
          v72 = *(_DWORD *)(v7 + 68);
          *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
          *(_OWORD *)v13 = *v15;
          *v15 = v68;
          *(_BYTE *)(v7 + 88) = v69;
          *(_BYTE *)(v7 + 91) = v71;
          *(_WORD *)(v7 + 89) = v70;
          *(_DWORD *)(v7 + 92) = v72;
          if (*(_QWORD *)(v7 + 48) < *(_QWORD *)(v7 + 24))
          {
            v73 = *(_OWORD *)v11;
            v74 = *(_BYTE *)(v7 + 40);
            v75 = *(_WORD *)(v7 + 41);
            v76 = *(_BYTE *)(v7 + 43);
            v77 = *(_DWORD *)(v7 + 44);
            *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
            *(_OWORD *)v11 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v73;
            *(_BYTE *)(v7 + 64) = v74;
            *(_BYTE *)(v7 + 67) = v76;
            *(_WORD *)(v7 + 65) = v75;
            *(_DWORD *)(v7 + 68) = v77;
            if (*(_QWORD *)(v7 + 24) < *(_QWORD *)v7)
            {
              v158 = *(_OWORD *)v7;
              v78 = *(_BYTE *)(v7 + 16);
              v79 = *(_WORD *)(v7 + 17);
              v80 = *(_BYTE *)(v7 + 19);
              v81 = *(_DWORD *)(v7 + 20);
              *(_OWORD *)v7 = *(_OWORD *)v11;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
              *(_OWORD *)v11 = v158;
              *(_BYTE *)(v7 + 40) = v78;
              *(_BYTE *)(v7 + 43) = v80;
              *(_WORD *)(v7 + 41) = v79;
              *(_DWORD *)(v7 + 44) = v81;
            }
          }
        }
        if (*v16 < *(_QWORD *)v15)
        {
          v82 = *v15;
          v83 = *(_BYTE *)(v7 + 88);
          v84 = *(_WORD *)(v7 + 89);
          v85 = *(_BYTE *)(v7 + 91);
          v86 = *(_DWORD *)(v7 + 92);
          v87 = *(_OWORD *)v16;
          *(_QWORD *)(v7 + 88) = *(a2 - 1);
          *v15 = v87;
          *(_OWORD *)v16 = v82;
          *((_BYTE *)a2 - 8) = v83;
          *((_BYTE *)a2 - 5) = v85;
          *(_WORD *)((char *)a2 - 7) = v84;
          *((_DWORD *)a2 - 1) = v86;
          if (*(_QWORD *)(v7 + 72) < *(_QWORD *)(v7 + 48))
          {
            v88 = *(_OWORD *)v13;
            v89 = *(_BYTE *)(v7 + 64);
            v90 = *(_WORD *)(v7 + 65);
            v91 = *(_BYTE *)(v7 + 67);
            v92 = *(_DWORD *)(v7 + 68);
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
            *(_OWORD *)v13 = *v15;
            *v15 = v88;
            *(_BYTE *)(v7 + 88) = v89;
            *(_BYTE *)(v7 + 91) = v91;
            *(_WORD *)(v7 + 89) = v90;
            *(_DWORD *)(v7 + 92) = v92;
LABEL_39:
            if (*(_QWORD *)(v7 + 48) < *(_QWORD *)(v7 + 24))
            {
              v113 = *(_OWORD *)v11;
              v114 = *(_BYTE *)(v7 + 40);
              v115 = *(_WORD *)(v7 + 41);
              v116 = *(_BYTE *)(v7 + 43);
              v117 = *(_DWORD *)(v7 + 44);
              *(_QWORD *)(v11 + 16) = *(_QWORD *)(v13 + 16);
              *(_OWORD *)v11 = *(_OWORD *)v13;
              *(_OWORD *)v13 = v113;
              *(_BYTE *)(v7 + 64) = v114;
              *(_BYTE *)(v7 + 67) = v116;
              *(_WORD *)(v7 + 65) = v115;
              *(_DWORD *)(v7 + 68) = v117;
LABEL_41:
              if (*(_QWORD *)(v7 + 24) < *(_QWORD *)v7)
              {
                v161 = *(_OWORD *)v7;
                v118 = *(_BYTE *)(v7 + 16);
                v119 = *(_WORD *)(v7 + 17);
                v120 = *(_BYTE *)(v7 + 19);
                v121 = *(_DWORD *)(v7 + 20);
                *(_OWORD *)v7 = *(_OWORD *)v11;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v11 + 16);
                *(_OWORD *)v11 = v161;
                *(_BYTE *)(v7 + 40) = v118;
                *(_BYTE *)(v7 + 43) = v120;
                *(_WORD *)(v7 + 41) = v119;
                *(_DWORD *)(v7 + 44) = v121;
              }
            }
          }
        }
        return result;
      default:
        v122 = a4;
        v149 = a2;
        v150 = result;
        if (v9 > 575)
        {
          if (v8 == 1)
          {
            if ((uint64_t *)result != a2)
              return _ZNSt3__119__partial_sort_implB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordESB_EET1_SC_SC_T2_OS6_(result, a2, a2);
            return result;
          }
          v138 = a2 - 3;
          v139 = v10 >> 1;
          v4 = (uint64_t *)(result + 24 * (v10 >> 1));
          if ((unint64_t)v9 >= 0xC01)
          {
            v5 = result;
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(result, (uint64_t *)(result + 24 * v139), v138);
            v141 = 3 * v139;
            v142 = (uint64_t *)(v150 + 24 * v139 - 24);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(v150 + 24, v142, v149 - 6);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(v150 + 48, (uint64_t *)(v150 + 24 + 8 * v141), v149 - 9);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_((uint64_t)v142, v4, (uint64_t *)(v150 + 24 + 8 * v141));
            v162 = *(_OWORD *)v150;
            v143 = *(_BYTE *)(v150 + 16);
            v144 = *(_WORD *)(v150 + 17);
            v145 = *(_BYTE *)(v150 + 19);
            v146 = *(_DWORD *)(v150 + 20);
            v147 = v4[2];
            *(_OWORD *)v150 = *(_OWORD *)v4;
            *(_QWORD *)(v150 + 16) = v147;
            *(_OWORD *)v4 = v162;
            *((_BYTE *)v4 + 16) = v143;
            *((_BYTE *)v4 + 19) = v145;
            *(_WORD *)((char *)v4 + 17) = v144;
            *((_DWORD *)v4 + 5) = v146;
          }
          else
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(result + 24 * v139, (uint64_t *)result, v138);
          }
          if ((v122 & 1) == 0 && *(_QWORD *)(v150 - 24) >= *(_QWORD *)v150)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ARM64Assembler::LinkRecord *,JSC::ARM64Assembler::jumpsToLink(void)::{lambda(std::_ClassicAlgPolicy &,JSC::ARM64Assembler::LinkRecord * &)#1} &>((__int128 *)v150, v149);
            goto LABEL_62;
          }
          v5 = (uint64_t)v149;
          v4 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ARM64Assembler::LinkRecord *,JSC::ARM64Assembler::jumpsToLink(void)::{lambda(std::_ClassicAlgPolicy &,JSC::ARM64Assembler::LinkRecord * &)#1} &>((__int128 *)v150, v149);
          LOBYTE(a4) = v122;
          if ((v140 & 1) == 0)
            goto LABEL_61;
LABEL_66:
          v148 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEbT1_SC_S6_(v150, (uint64_t)v4);
          if (!_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEbT1_SC_S6_((uint64_t)(v4 + 3), v5))
          {
            v6 = v8 + 1;
            a2 = v149;
            a4 = v122;
            result = (uint64_t)(v4 + 3);
            if (!v148)
            {
LABEL_61:
              _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordELb0EEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEb(v150, v4, -v8, a4 & 1);
              result = (uint64_t)(v4 + 3);
LABEL_62:
              a4 = 0;
              a3 = -v8;
              a2 = v149;
              continue;
            }
            goto LABEL_2;
          }
          a3 = -v8;
          a2 = v4;
          result = v150;
          a4 = v122;
          if (v148)
            return result;
          continue;
        }
        if ((a4 & 1) != 0)
          return _ZNSt3__116__insertion_sortB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEvT1_SC_S6_(result, (uint64_t)a2);
        v123 = result;
        if ((uint64_t *)result != a2)
        {
          v124 = (uint64_t *)(result + 24);
          if ((uint64_t *)(result + 24) != a2)
          {
            v125 = result - 24;
            v126 = -2;
            v127 = 1;
LABEL_48:
            v128 = *v124;
            if (v128 >= *(_QWORD *)v123)
              goto LABEL_53;
            v129 = *(_QWORD *)(v123 + 32);
            v130 = *(_BYTE *)(v123 + 40);
            v131 = *(unsigned __int16 *)(v123 + 41) | (*(unsigned __int8 *)(v123 + 43) << 16);
            v132 = *(_WORD *)(v123 + 44);
            v133 = *(_WORD *)(v123 + 46);
            result = v126;
            v134 = v125;
            while (1)
            {
              *(_OWORD *)(v134 + 48) = *(_OWORD *)(v134 + 24);
              *(_QWORD *)(v134 + 64) = *(_QWORD *)(v134 + 40);
              if (__CFADD__(result++, 1))
                break;
              v136 = v134 - 24;
              v137 = *(_QWORD *)v134;
              v134 -= 24;
              if (v128 >= v137)
              {
                *(_QWORD *)(v136 + 48) = v128;
                *(_QWORD *)(v136 + 56) = v129;
                *(_BYTE *)(v136 + 64) = v130;
                *(_WORD *)(v136 + 65) = v131;
                *(_BYTE *)(v136 + 67) = BYTE2(v131);
                *(_WORD *)(v136 + 68) = v132;
                *(_WORD *)(v136 + 70) = v133;
LABEL_53:
                v123 = v150 + 24 * v127++;
                v124 = (uint64_t *)(v123 + 24);
                v125 += 24;
                --v126;
                if ((uint64_t *)(v123 + 24) == v149)
                  return result;
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_66;
          }
        }
        return result;
    }
  }
}

uint64_t _ZNSt3__116__insertion_sortB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEvT1_SC_S6_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
        {
          v7 = *(_QWORD *)(v4 + 32);
          v8 = *(_BYTE *)(v4 + 40);
          v9 = *(unsigned __int16 *)(v4 + 41) | (*(unsigned __int8 *)(v4 + 43) << 16);
          v10 = *(_WORD *)(v4 + 44);
          v11 = *(_WORD *)(v4 + 46);
          v12 = v3;
          while (1)
          {
            v13 = result + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(result + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(result + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            if (v6 >= *(_QWORD *)(v13 - 24))
            {
              v14 = result + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = result;
LABEL_10:
          *(_QWORD *)v14 = v6;
          *(_QWORD *)(v14 + 8) = v7;
          *(_BYTE *)(v14 + 16) = v8;
          *(_WORD *)(v14 + 17) = v9;
          *(_BYTE *)(v14 + 19) = BYTE2(v9);
          *(_WORD *)(v14 + 20) = v10;
          *(_WORD *)(v14 + 22) = v11;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

__n128 _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  char v6;
  __int16 v7;
  char v8;
  int v9;
  __int128 v10;
  char v11;
  __int16 v12;
  char v13;
  int v14;
  __int128 v15;
  char v16;
  __int16 v17;
  char v18;
  int v19;
  __int128 v20;
  char v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      result = *(__n128 *)a2;
      v11 = *((_BYTE *)a2 + 16);
      v12 = *(_WORD *)((char *)a2 + 17);
      v13 = *((_BYTE *)a2 + 19);
      v14 = *((_DWORD *)a2 + 5);
      v15 = *(_OWORD *)a3;
      a2[2] = a3[2];
      *(_OWORD *)a2 = v15;
      *(__n128 *)a3 = result;
      *((_BYTE *)a3 + 16) = v11;
      *((_BYTE *)a3 + 19) = v13;
      *(_WORD *)((char *)a3 + 17) = v12;
      *((_DWORD *)a3 + 5) = v14;
      if (*a2 < *(_QWORD *)a1)
      {
        result = *(__n128 *)a1;
        v16 = *(_BYTE *)(a1 + 16);
        v17 = *(_WORD *)(a1 + 17);
        v18 = *(_BYTE *)(a1 + 19);
        v19 = *(_DWORD *)(a1 + 20);
        v20 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_OWORD *)a1 = v20;
        *(__n128 *)a2 = result;
        *((_BYTE *)a2 + 16) = v16;
        *((_BYTE *)a2 + 19) = v18;
        *(_WORD *)((char *)a2 + 17) = v17;
        *((_DWORD *)a2 + 5) = v19;
      }
    }
  }
  else if (v4 >= v3)
  {
    result = *(__n128 *)a1;
    v21 = *(_BYTE *)(a1 + 16);
    v22 = *(unsigned __int8 *)(a1 + 19);
    v23 = *(unsigned __int16 *)(a1 + 17);
    v24 = *(_WORD *)(a1 + 20);
    v25 = *(_WORD *)(a1 + 22);
    v26 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v26;
    *(__n128 *)a2 = result;
    *((_BYTE *)a2 + 16) = v21;
    *((_BYTE *)a2 + 19) = v22;
    *(_WORD *)((char *)a2 + 17) = v23;
    *((_WORD *)a2 + 10) = v24;
    *((_WORD *)a2 + 11) = v25;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      v27 = v23 | (v22 << 16);
      v28 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v28;
      *(__n128 *)a3 = result;
      *((_BYTE *)a3 + 16) = v21;
      *((_BYTE *)a3 + 19) = BYTE2(v27);
      *(_WORD *)((char *)a3 + 17) = v27;
      *((_WORD *)a3 + 10) = v24;
      *((_WORD *)a3 + 11) = v25;
    }
  }
  else
  {
    result = *(__n128 *)a1;
    v6 = *(_BYTE *)(a1 + 16);
    v7 = *(_WORD *)(a1 + 17);
    v8 = *(_BYTE *)(a1 + 19);
    v9 = *(_DWORD *)(a1 + 20);
    v10 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 16) = a3[2];
    *(_OWORD *)a1 = v10;
    *(__n128 *)a3 = result;
    *((_BYTE *)a3 + 16) = v6;
    *((_BYTE *)a3 + 19) = v8;
    *(_WORD *)((char *)a3 + 17) = v7;
    *((_DWORD *)a3 + 5) = v9;
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ARM64Assembler::LinkRecord *,JSC::ARM64Assembler::jumpsToLink(void)::{lambda(std::_ClassicAlgPolicy &,JSC::ARM64Assembler::LinkRecord * &)#1} &>(__int128 *a1, uint64_t *a2)
{
  __int128 v2;
  char v3;
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v26;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 16);
  v4 = *((unsigned __int8 *)a1 + 19);
  v5 = *(unsigned __int16 *)((char *)a1 + 17);
  v6 = *((_WORD *)a1 + 10);
  v7 = *((_WORD *)a1 + 11);
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= *(a2 - 3))
  {
    v12 = (uint64_t *)a1 + 3;
    do
    {
      v11 = v12;
      if (v12 >= a2)
        break;
      v12 += 3;
    }
    while (v8 >= *v11);
  }
  else
  {
    v9 = (uint64_t *)a1 + 3;
    do
    {
      if (v9 == a2)
        goto LABEL_24;
      v10 = *v9;
      v9 += 3;
    }
    while (v8 >= v10);
    v11 = v9 - 3;
  }
  v13 = (__int128 *)a2;
  if (v11 < a2)
  {
    v13 = (__int128 *)a2;
    while (v13 != a1)
    {
      v14 = *((_QWORD *)v13 - 3);
      v13 = (__int128 *)((char *)v13 - 24);
      if (v8 >= v14)
        goto LABEL_20;
    }
LABEL_24:
    __break(1u);
  }
LABEL_20:
  if (v11 < (uint64_t *)v13)
  {
    v26 = *(_OWORD *)v11;
    v15 = *((_BYTE *)v11 + 16);
    v16 = *(_WORD *)((char *)v11 + 17);
    v17 = *((_BYTE *)v11 + 19);
    v18 = *((_DWORD *)v11 + 5);
    v19 = *((_QWORD *)v13 + 2);
    *(_OWORD *)v11 = *v13;
    v11[2] = v19;
    *v13 = v26;
    *((_BYTE *)v13 + 16) = v15;
    *((_BYTE *)v13 + 19) = v17;
    *(_WORD *)((char *)v13 + 17) = v16;
    *((_DWORD *)v13 + 5) = v18;
    v20 = v11 + 3;
    do
    {
      if (v20 == a2)
        goto LABEL_24;
      v21 = *v20;
      v20 += 3;
    }
    while (v8 >= v21);
    v11 = v20 - 3;
    while (v13 != a1)
    {
      v22 = *((_QWORD *)v13 - 3);
      v13 = (__int128 *)((char *)v13 - 24);
      if (v8 >= v22)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
  v23 = v5 | (v4 << 16);
  if (v11 - 3 != (uint64_t *)a1)
  {
    v24 = *(_OWORD *)(v11 - 3);
    *((_QWORD *)a1 + 2) = *(v11 - 1);
    *a1 = v24;
  }
  *(_OWORD *)(v11 - 3) = v2;
  *((_BYTE *)v11 - 8) = v3;
  *(_WORD *)((char *)v11 - 7) = v23;
  *((_BYTE *)v11 - 5) = BYTE2(v23);
  *((_WORD *)v11 - 2) = v6;
  *((_WORD *)v11 - 1) = v7;
  return v11;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ARM64Assembler::LinkRecord *,JSC::ARM64Assembler::jumpsToLink(void)::{lambda(std::_ClassicAlgPolicy &,JSC::ARM64Assembler::LinkRecord * &)#1} &>(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  char v4;
  int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v26;

  v2 = 0;
  v3 = *a1;
  v4 = *((_BYTE *)a1 + 16);
  v5 = *(unsigned __int16 *)((char *)a1 + 17) | (*((unsigned __int8 *)a1 + 19) << 16);
  v6 = *((_WORD *)a1 + 10);
  v7 = *((_WORD *)a1 + 11);
  v8 = *(_QWORD *)a1;
  do
  {
    v9 = (uint64_t *)((char *)a1 + v2 + 24);
    if (v9 == a2)
      goto LABEL_24;
    v2 += 24;
  }
  while (*v9 < v8);
  v10 = (__int128 *)((char *)a1 + v2);
  if (v2 != 24)
  {
    v11 = (__int128 *)a2;
    while (v11 != a1)
    {
      v12 = *((_QWORD *)v11 - 3);
      v11 = (__int128 *)((char *)v11 - 24);
      if (v12 < v8)
        goto LABEL_12;
    }
LABEL_24:
    __break(1u);
  }
  v11 = (__int128 *)a2;
  do
  {
    if (v10 >= v11)
      break;
    v13 = *((_QWORD *)v11 - 3);
    v11 = (__int128 *)((char *)v11 - 24);
  }
  while (v13 >= v8);
LABEL_12:
  v14 = (uint64_t *)v10;
  if (v10 < v11)
  {
    v15 = (unint64_t)v11;
    do
    {
      v26 = *(_OWORD *)v14;
      v16 = *((_BYTE *)v14 + 16);
      v17 = *(_WORD *)((char *)v14 + 17);
      v18 = *((_BYTE *)v14 + 19);
      v19 = *((_DWORD *)v14 + 5);
      v20 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v14[2] = v20;
      *(_OWORD *)v15 = v26;
      *(_BYTE *)(v15 + 16) = v16;
      *(_BYTE *)(v15 + 19) = v18;
      *(_WORD *)(v15 + 17) = v17;
      *(_DWORD *)(v15 + 20) = v19;
      v21 = v14 + 3;
      do
      {
        if (v21 == a2)
          goto LABEL_24;
        v22 = *v21;
        v21 += 3;
      }
      while (v22 < v8);
      v14 = v21 - 3;
      do
      {
        if ((__int128 *)v15 == a1)
          goto LABEL_24;
        v23 = *(_QWORD *)(v15 - 24);
        v15 -= 24;
      }
      while (v23 >= v8);
    }
    while ((unint64_t)v14 < v15);
  }
  if (v14 - 3 != (uint64_t *)a1)
  {
    v24 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)a1 + 2) = *(v14 - 1);
    *a1 = v24;
  }
  *(_OWORD *)(v14 - 3) = v3;
  *((_BYTE *)v14 - 8) = v4;
  *(_WORD *)((char *)v14 - 7) = v5;
  *((_BYTE *)v14 - 5) = BYTE2(v5);
  *((_WORD *)v14 - 2) = v6;
  *((_WORD *)v14 - 1) = v7;
  return v14 - 3;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEbT1_SC_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  char v8;
  __int16 v9;
  char v10;
  int v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  char v30;
  __int16 v31;
  char v32;
  int v33;
  __int128 v34;
  _OWORD *v35;
  _QWORD *v36;
  __int128 v37;
  char v38;
  __int16 v39;
  char v40;
  int v41;
  __int128 v42;
  char v43;
  __int16 v44;
  char v45;
  int v46;
  __int128 v47;
  char v48;
  __int16 v49;
  char v50;
  int v51;
  __int128 v52;
  char v53;
  __int16 v54;
  char v55;
  int v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int16 v60;
  char v61;
  int v62;
  __int128 v63;
  char v64;
  __int16 v65;
  char v66;
  int v67;
  __int128 v68;
  char v69;
  __int16 v70;
  char v71;
  int v72;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_BYTE *)(a1 + 16);
        v9 = *(_WORD *)(a1 + 17);
        v10 = *(_BYTE *)(a1 + 19);
        v11 = *(_DWORD *)(a1 + 20);
        v12 = *v6;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = v12;
        *v6 = v7;
        *(_BYTE *)(a2 - 8) = v8;
        *(_BYTE *)(a2 - 5) = v10;
        *(_WORD *)(a2 - 7) = v9;
        *(_DWORD *)(a2 - 4) = v11;
      }
      return result;
    case 3uLL:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      v26 = a1 + 24;
      v27 = a1 + 48;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v28 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) >= *(_QWORD *)(a1 + 48))
        return 1;
      v29 = *(_OWORD *)v27;
      v30 = *(_BYTE *)(a1 + 64);
      v31 = *(_WORD *)(a1 + 65);
      v32 = *(_BYTE *)(a1 + 67);
      v33 = *(_DWORD *)(a1 + 68);
      v34 = *v28;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v27 = v34;
      *v28 = v29;
      *(_BYTE *)(a2 - 8) = v30;
      *(_BYTE *)(a2 - 5) = v32;
      *(_WORD *)(a2 - 7) = v31;
      *(_DWORD *)(a2 - 4) = v33;
      goto LABEL_25;
    case 5uLL:
      v26 = a1 + 24;
      v27 = a1 + 48;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v35 = (_OWORD *)(a1 + 72);
      v36 = (_QWORD *)(a2 - 24);
      if (*(_QWORD *)(a1 + 72) < *(_QWORD *)(a1 + 48))
      {
        v37 = *(_OWORD *)v27;
        v38 = *(_BYTE *)(a1 + 64);
        v39 = *(_WORD *)(a1 + 65);
        v40 = *(_BYTE *)(a1 + 67);
        v41 = *(_DWORD *)(a1 + 68);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
        *(_OWORD *)v27 = *v35;
        *v35 = v37;
        *(_BYTE *)(a1 + 88) = v38;
        *(_BYTE *)(a1 + 91) = v40;
        *(_WORD *)(a1 + 89) = v39;
        *(_DWORD *)(a1 + 92) = v41;
        if (*(_QWORD *)(a1 + 48) < *(_QWORD *)(a1 + 24))
        {
          v42 = *(_OWORD *)v26;
          v43 = *(_BYTE *)(a1 + 40);
          v44 = *(_WORD *)(a1 + 41);
          v45 = *(_BYTE *)(a1 + 43);
          v46 = *(_DWORD *)(a1 + 44);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)v26 = *(_OWORD *)v27;
          *(_OWORD *)v27 = v42;
          *(_BYTE *)(a1 + 64) = v43;
          *(_BYTE *)(a1 + 67) = v45;
          *(_WORD *)(a1 + 65) = v44;
          *(_DWORD *)(a1 + 68) = v46;
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
          {
            v47 = *(_OWORD *)a1;
            v48 = *(_BYTE *)(a1 + 16);
            v49 = *(_WORD *)(a1 + 17);
            v50 = *(_BYTE *)(a1 + 19);
            v51 = *(_DWORD *)(a1 + 20);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *(_OWORD *)a1 = *(_OWORD *)v26;
            *(_OWORD *)v26 = v47;
            *(_BYTE *)(a1 + 40) = v48;
            *(_BYTE *)(a1 + 43) = v50;
            *(_WORD *)(a1 + 41) = v49;
            *(_DWORD *)(a1 + 44) = v51;
          }
        }
      }
      if (*v36 >= *(_QWORD *)v35)
        return 1;
      v52 = *v35;
      v53 = *(_BYTE *)(a1 + 88);
      v54 = *(_WORD *)(a1 + 89);
      v55 = *(_BYTE *)(a1 + 91);
      v56 = *(_DWORD *)(a1 + 92);
      v57 = *(_OWORD *)v36;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 - 8);
      *v35 = v57;
      *(_OWORD *)v36 = v52;
      *(_BYTE *)(a2 - 8) = v53;
      *(_BYTE *)(a2 - 5) = v55;
      *(_WORD *)(a2 - 7) = v54;
      *(_DWORD *)(a2 - 4) = v56;
      if (*(_QWORD *)(a1 + 72) >= *(_QWORD *)(a1 + 48))
        return 1;
      v58 = *(_OWORD *)v27;
      v59 = *(_BYTE *)(a1 + 64);
      v60 = *(_WORD *)(a1 + 65);
      v61 = *(_BYTE *)(a1 + 67);
      v62 = *(_DWORD *)(a1 + 68);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
      *(_OWORD *)v27 = *v35;
      *v35 = v58;
      *(_BYTE *)(a1 + 88) = v59;
      *(_BYTE *)(a1 + 91) = v61;
      *(_WORD *)(a1 + 89) = v60;
      *(_DWORD *)(a1 + 92) = v62;
LABEL_25:
      if (*(_QWORD *)(a1 + 48) >= *(_QWORD *)(a1 + 24))
        return 1;
      v63 = *(_OWORD *)v26;
      v64 = *(_BYTE *)(a1 + 40);
      v65 = *(_WORD *)(a1 + 41);
      v66 = *(_BYTE *)(a1 + 43);
      v67 = *(_DWORD *)(a1 + 44);
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_OWORD *)v27 = v63;
      *(_BYTE *)(a1 + 64) = v64;
      *(_BYTE *)(a1 + 67) = v66;
      *(_WORD *)(a1 + 65) = v65;
      *(_DWORD *)(a1 + 68) = v67;
      if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)a1)
        return 1;
      v68 = *(_OWORD *)a1;
      v69 = *(_BYTE *)(a1 + 16);
      v70 = *(_WORD *)(a1 + 17);
      v71 = *(_BYTE *)(a1 + 19);
      v72 = *(_DWORD *)(a1 + 20);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v26 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v26;
      *(_OWORD *)v26 = v68;
      *(_BYTE *)(a1 + 40) = v69;
      *(_BYTE *)(a1 + 43) = v71;
      *(_WORD *)(a1 + 41) = v70;
      result = 1;
      *(_DWORD *)(a1 + 44) = v72;
      return result;
    default:
      v13 = (_QWORD *)(a1 + 48);
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordEEEjT1_SC_SC_S6_(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_QWORD *)v14;
    if (*(_QWORD *)v14 < *v13)
    {
      v18 = *(_QWORD *)(v14 + 8);
      v19 = *(_BYTE *)(v14 + 16);
      v20 = *(unsigned __int16 *)(v14 + 17) | (*(unsigned __int8 *)(v14 + 19) << 16);
      v21 = *(_WORD *)(v14 + 20);
      v22 = *(_WORD *)(v14 + 22);
      v23 = v15;
      while (1)
      {
        v24 = a1 + v23;
        *(_OWORD *)(v24 + 72) = *(_OWORD *)(a1 + v23 + 48);
        *(_QWORD *)(v24 + 88) = *(_QWORD *)(a1 + v23 + 64);
        if (v23 == -48)
          break;
        v23 -= 24;
        if (v17 >= *(_QWORD *)(v24 + 24))
        {
          v25 = a1 + v23 + 72;
          goto LABEL_12;
        }
      }
      v25 = a1;
LABEL_12:
      *(_QWORD *)v25 = v17;
      *(_QWORD *)(v25 + 8) = v18;
      *(_BYTE *)(v25 + 16) = v19;
      *(_WORD *)(v25 + 17) = v20;
      *(_BYTE *)(v25 + 19) = BYTE2(v20);
      *(_WORD *)(v25 + 20) = v21;
      ++v16;
      *(_WORD *)(v25 + 22) = v22;
      if (v16 == 8)
        return v14 + 24 == a2;
    }
    v13 = (_QWORD *)v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__119__partial_sort_implB8sn180100INS_17_ClassicAlgPolicyERZN3JSC14ARM64Assembler11jumpsToLinkEvEUlRT_RT0_E_PNS3_10LinkRecordESB_EET1_SC_SC_T2_OS6_(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  __int16 v16;
  __int16 v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  char v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  uint64_t *v30;
  _OWORD *v31;
  __int128 v32;
  char v33;
  int v34;
  int v35;
  __int16 v36;
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  BOOL v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char v55;
  int v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;

  if ((_OWORD *)result != a2)
  {
    v3 = (uint64_t)a2 - result;
    v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - result) >> 3);
    if ((uint64_t)a2 - result >= 25 && (unint64_t)v3 >= 0x30)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = (_QWORD *)(result + 24 * v7);
          if (2 * v6 + 2 >= v4)
          {
            v9 = *v8;
          }
          else
          {
            v9 = *v8;
            v10 = v8[3];
            if (*v8 <= v10)
              v9 = v8[3];
            if (*v8 < v10)
            {
              v8 += 3;
              v7 = 2 * v6 + 2;
            }
          }
          v11 = (_QWORD *)(result + 24 * v6);
          v12 = *v11;
          if (v9 >= *v11)
          {
            v13 = v11[1];
            v14 = *((_BYTE *)v11 + 16);
            v15 = *(unsigned __int16 *)((char *)v11 + 17) | (*((unsigned __int8 *)v11 + 19) << 16);
            v16 = *((_WORD *)v11 + 10);
            v17 = *((_WORD *)v11 + 11);
            do
            {
              v18 = v8;
              v19 = *(_OWORD *)v8;
              v11[2] = v8[2];
              *(_OWORD *)v11 = v19;
              if (v5 < v7)
                break;
              v20 = (2 * v7) | 1;
              v8 = (_QWORD *)(result + 24 * v20);
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v21 = *v8;
                v7 = v20;
              }
              else
              {
                v21 = *v8;
                v22 = v8[3];
                if (*v8 <= v22)
                  v21 = v8[3];
                if (*v8 >= v22)
                  v7 = v20;
                else
                  v8 += 3;
              }
              v11 = v18;
            }
            while (v21 >= v12);
            *v18 = v12;
            v18[1] = v13;
            *((_BYTE *)v18 + 16) = v14;
            *(_WORD *)((char *)v18 + 17) = v15;
            *((_BYTE *)v18 + 19) = BYTE2(v15);
            *((_WORD *)v18 + 10) = v16;
            *((_WORD *)v18 + 11) = v17;
          }
        }
        v40 = v6-- <= 0;
      }
      while (!v40);
    }
    if (a2 != a3)
    {
      if (v3 >= 48)
      {
        v30 = (uint64_t *)(result + 48);
        v31 = a2;
        do
        {
          if (*(_QWORD *)v31 < *(_QWORD *)result)
          {
            v32 = *v31;
            v33 = *((_BYTE *)v31 + 16);
            v34 = *((unsigned __int8 *)v31 + 19);
            v35 = *(unsigned __int16 *)((char *)v31 + 17);
            v36 = *((_WORD *)v31 + 10);
            v37 = *((_WORD *)v31 + 11);
            v38 = *(_OWORD *)result;
            *((_QWORD *)v31 + 2) = *(_QWORD *)(result + 16);
            *v31 = v38;
            *(_OWORD *)result = v32;
            *(_BYTE *)(result + 16) = v33;
            *(_BYTE *)(result + 19) = v34;
            *(_WORD *)(result + 17) = v35;
            *(_WORD *)(result + 20) = v36;
            *(_WORD *)(result + 22) = v37;
            v39 = *(_QWORD *)(result + 24);
            if ((unint64_t)v4 < 3)
            {
              v41 = (__int128 *)(result + 24);
              v42 = 1;
            }
            else
            {
              v40 = v39 < *v30;
              if (v39 <= *v30)
                v39 = *v30;
              if (v40)
                v41 = (__int128 *)(result + 48);
              else
                v41 = (__int128 *)(result + 24);
              if (v40)
                v42 = 2;
              else
                v42 = 1;
            }
            v43 = *(_QWORD *)result;
            if (v39 >= *(_QWORD *)result)
            {
              v44 = v35 | (v34 << 16);
              v45 = *(_QWORD *)(result + 8);
              v46 = result;
              do
              {
                v47 = v41;
                v48 = *v41;
                *(_QWORD *)(v46 + 16) = *((_QWORD *)v41 + 2);
                *(_OWORD *)v46 = v48;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v42)
                  break;
                v49 = (2 * v42) | 1;
                v41 = (__int128 *)(result + 24 * v49);
                v42 = 2 * v42 + 2;
                if (v42 >= v4)
                {
                  v50 = *(_QWORD *)v41;
                  v42 = v49;
                }
                else
                {
                  v50 = *(_QWORD *)v41;
                  v51 = *((_QWORD *)v41 + 3);
                  if (*(_QWORD *)v41 <= v51)
                    v50 = *((_QWORD *)v41 + 3);
                  if (*(_QWORD *)v41 >= v51)
                    v42 = v49;
                  else
                    v41 = (__int128 *)((char *)v41 + 24);
                }
                v46 = (uint64_t)v47;
              }
              while (v50 >= v43);
              *(_QWORD *)v47 = v43;
              *((_QWORD *)v47 + 1) = v45;
              *((_BYTE *)v47 + 16) = v33;
              *(_WORD *)((char *)v47 + 17) = v44;
              *((_BYTE *)v47 + 19) = BYTE2(v44);
              *((_WORD *)v47 + 10) = v36;
              *((_WORD *)v47 + 11) = v37;
            }
          }
          v31 = (_OWORD *)((char *)v31 + 24);
        }
        while (v31 != a3);
      }
      else
      {
        v23 = a2;
        do
        {
          if (*(_QWORD *)v23 < *(_QWORD *)result)
          {
            v24 = *v23;
            v25 = *((_BYTE *)v23 + 16);
            v26 = *(_WORD *)((char *)v23 + 17);
            v27 = *((_BYTE *)v23 + 19);
            v28 = *((_DWORD *)v23 + 5);
            v29 = *(_OWORD *)result;
            *((_QWORD *)v23 + 2) = *(_QWORD *)(result + 16);
            *v23 = v29;
            *(_OWORD *)result = v24;
            *(_BYTE *)(result + 16) = v25;
            *(_BYTE *)(result + 19) = v27;
            *(_WORD *)(result + 17) = v26;
            *(_DWORD *)(result + 20) = v28;
          }
          v23 = (_OWORD *)((char *)v23 + 24);
        }
        while (v23 != a3);
      }
    }
    if (v3 >= 25)
    {
      v52 = v3 / 0x18uLL;
      do
      {
        v53 = 0;
        v54 = a2;
        v72 = *(_OWORD *)result;
        v55 = *(_BYTE *)(result + 16);
        v56 = *(unsigned __int16 *)(result + 17) | (*(unsigned __int8 *)(result + 19) << 16);
        v57 = *(_WORD *)(result + 20);
        v58 = *(_WORD *)(result + 22);
        v59 = result;
        do
        {
          v60 = v59 + 24 * v53 + 24;
          v61 = (2 * v53) | 1;
          v62 = 2 * v53 + 2;
          if (v62 < v52 && *(_QWORD *)v60 < *(_QWORD *)(v60 + 24))
          {
            v60 += 24;
            v61 = v62;
          }
          v63 = *(_OWORD *)v60;
          *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
          *(_OWORD *)v59 = v63;
          v59 = v60;
          v53 = v61;
        }
        while (v61 <= (uint64_t)((unint64_t)(v52 - 2) >> 1));
        a2 = (_OWORD *)((char *)v54 - 24);
        if ((_OWORD *)v60 == (_OWORD *)((char *)v54 - 24))
        {
          *(_OWORD *)v60 = v72;
        }
        else
        {
          v64 = *((_QWORD *)v54 - 1);
          *(_OWORD *)v60 = *a2;
          *(_QWORD *)(v60 + 16) = v64;
          *a2 = v72;
          *((_BYTE *)v54 - 8) = v55;
          *((_BYTE *)v54 - 5) = BYTE2(v56);
          *(_WORD *)((char *)v54 - 7) = v56;
          *((_WORD *)v54 - 2) = v57;
          *((_WORD *)v54 - 1) = v58;
          v65 = v60 - result + 24;
          if (v65 < 25)
            goto LABEL_75;
          v66 = (v65 / 0x18uLL - 2) >> 1;
          v67 = (_QWORD *)(result + 24 * v66);
          v68 = *(_QWORD *)v60;
          if (*v67 >= *(_QWORD *)v60)
            goto LABEL_75;
          v69 = *(_QWORD *)(v60 + 8);
          v55 = *(_BYTE *)(v60 + 16);
          v56 = *(unsigned __int16 *)(v60 + 17) | (*(unsigned __int8 *)(v60 + 19) << 16);
          v57 = *(_WORD *)(v60 + 20);
          v58 = *(_WORD *)(v60 + 22);
          v70 = v60;
          do
          {
            v60 = (uint64_t)v67;
            v71 = *(_OWORD *)v67;
            *(_QWORD *)(v70 + 16) = v67[2];
            *(_OWORD *)v70 = v71;
            if (!v66)
              break;
            v66 = (v66 - 1) >> 1;
            v67 = (_QWORD *)(result + 24 * v66);
            v70 = v60;
          }
          while (*v67 < v68);
          *(_QWORD *)v60 = v68;
          *(_QWORD *)(v60 + 8) = v69;
        }
        *(_BYTE *)(v60 + 16) = v55;
        *(_WORD *)(v60 + 17) = v56;
        *(_BYTE *)(v60 + 19) = BYTE2(v56);
        *(_WORD *)(v60 + 20) = v57;
        *(_WORD *)(v60 + 22) = v58;
LABEL_75:
        v40 = v52-- <= 2;
      }
      while (!v40);
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificBranchCompactionLinkBuffer(void)::$_0 &&>>()
{
  pthread_key_t *v0;
  uint64_t result;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  result = pthread_key_create(v0, (void (__cdecl *)(void *))WTF::ThreadSpecific<JSC::BranchCompactionLinkBuffer,(WTF::CanBeGCThread)1>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  else
    qword_1ECF58628 = (uint64_t)v0;
  return result;
}

void WTF::ThreadSpecific<JSC::BranchCompactionLinkBuffer,(WTF::CanBeGCThread)1>::destroy(unint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  pthread_key_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  char **v21;
  char *v22;

  pthread_setspecific(*(_QWORD *)a1[3], a1);
  if (!*((_BYTE *)a1 + 16))
  {
    v9 = atomic_load(&_MergedGlobals_29);
    if (v9 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&_MergedGlobals_29, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificBranchCompactionLinkBuffer(void)::$_0 &&>>);
    }
    v10 = (pthread_key_t *)qword_1ECF58628;
    v18 = pthread_getspecific(*(_QWORD *)qword_1ECF58628);
    if (!v18)
    {
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v18[3] = v10;
      pthread_setspecific(*v10, v18);
      *v18 = 0;
      v18[1] = 0;
      *((_BYTE *)v18 + 16) = 0;
    }
    v19 = (_QWORD *)a1[1];
    if (v18[1] >= (unint64_t)v19)
    {
      if (*a1)
        WTF::fastFree(*a1, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      if (*v18)
      {
        WTF::fastFree(*v18, v11, v12, v13, v14, v15, v16, v17);
        v19 = (_QWORD *)a1[1];
      }
      *v18 = *a1;
      v18[1] = v19;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  pthread_setspecific(*(_QWORD *)a1[3], 0);
  WTF::fastFree((unint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
}

void JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(int a1, JSC *a2, int a3, int a4)
{
  int v5;
  BOOL v7;
  uint64_t v8;
  int v9;

  if ((JSC *)(((unint64_t)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a2)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v5 = (8 * (a4 - a3)) & 0xFFFFE0 | a1 | 0x54000000;
  v9 = v5;
  if (qword_1ECF4C1F8 > (unint64_t)a2 || qword_1ECF4C200 <= (unint64_t)a2)
    goto LABEL_6;
  if ((unint64_t)&v9 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197F70084);
  }
  if (qword_1ECF4C1F0)
    v7 = qword_1ECF4C200 >= (unint64_t)a2 + 4;
  else
    v7 = 0;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197F700A4);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a2, &v9, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a2 = v9;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v5 = v9;
LABEL_6:
    *(_DWORD *)a2 = v5;
    return;
  }
  if (qword_1ECF4C1F0)
    v8 = qword_1ECF4C1F8;
  else
    v8 = 0;
  off_1ECF4C228((char *)a2 - v8, &v9, 4);
  if ((unint64_t)&v9 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x197F70064);
  }
}

void JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(int a1, int a2, char a3, JSC *a4, int a5, int a6)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;

  if ((JSC *)(((unint64_t)a4 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a4)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  if (a2)
    v7 = 0x80000000;
  else
    v7 = 0;
  if (a1 == 1)
    v8 = 889192448;
  else
    v8 = 872415232;
  v9 = (v8 | v7) & 0xFF000000 | a3 & 0x1F | (32 * (((a6 - a5) >> 2) & 0x7FFFF));
  v13 = v9;
  if (qword_1ECF4C1F8 > (unint64_t)a4 || qword_1ECF4C200 <= (unint64_t)a4)
    goto LABEL_12;
  if ((unint64_t)&v13 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197F70240);
  }
  if (qword_1ECF4C1F0)
    v11 = qword_1ECF4C200 >= (unint64_t)a4 + 4;
  else
    v11 = 0;
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197F70260);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a4, &v13, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a4 = v13;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v9 = v13;
LABEL_12:
    *(_DWORD *)a4 = v9;
    return;
  }
  if (qword_1ECF4C1F0)
    v12 = qword_1ECF4C1F8;
  else
    v12 = 0;
  off_1ECF4C228((char *)a4 - v12, &v13, 4);
  if ((unint64_t)&v13 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x197F70220);
  }
}

void JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)0,(JSC::MachineCodeCopyMode)1>(int a1, unsigned int a2, char a3, JSC *a4, int a5, int a6)
{
  int v7;
  unsigned int v8;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;

  if ((JSC *)(((unint64_t)a4 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a4)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  if (a1 == 1)
    v7 = 922746880;
  else
    v7 = 905969664;
  v8 = v7 & 0x7F000000 | ((a2 >> 5) << 31) | ((a2 & 0x1F) << 19) | a3 & 0x1F | (32
                                                                                               * (((a6 - a5) >> 2) & 0x3FFF));
  v12 = v8;
  if (qword_1ECF4C1F8 > (unint64_t)a4 || qword_1ECF4C200 <= (unint64_t)a4)
    goto LABEL_9;
  if ((unint64_t)&v12 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197F703F8);
  }
  if (qword_1ECF4C1F0)
    v10 = qword_1ECF4C200 >= (unint64_t)a4 + 4;
  else
    v10 = 0;
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197F70418);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a4, &v12, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a4 = v12;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v8 = v12;
LABEL_9:
    *(_DWORD *)a4 = v8;
    return;
  }
  if (qword_1ECF4C1F0)
    v11 = qword_1ECF4C1F8;
  else
    v11 = 0;
  off_1ECF4C228((char *)a4 - v11, &v12, 4);
  if ((unint64_t)&v12 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x197F703D8);
  }
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::String>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = (WTF::StringImpl *)v37[1];
          v37[1] = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::~StringImpl(v38, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          *v37 = *v24;
          v39 = v11 + 16 * v22;
          v40 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          v37[1] = v40;
          v41 = *(WTF::StringImpl **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              WTF::StringImpl::~StringImpl(v41, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
            }
            else
            {
              *(_DWORD *)v41 -= 2;
            }
          }
          if (v24 == (uint64_t *)a3)
            v23 = v37;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_DWORD *)v27 -= 2;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::PerfLog::log(uint64_t *a1, const void *a2, size_t a3)
{
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[2];
  pid_t v27;
  int v28;
  const void *v29;
  const void *v30;
  size_t v31;
  uint64_t v32;
  char v33;
  __uint64_t *v34;
  __uint64_t v35;

  if (!a3)
    return;
  v6 = atomic_load(&_MergedGlobals_30);
  if (v6 != -1)
  {
    v26[0] = &v34;
    v35 = (__uint64_t)v26;
    std::__call_once(&_MergedGlobals_30, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::PerfLog::singleton(void)::$_0 &&>>);
  }
  if (__ldaxr((unsigned __int8 *)&byte_1ECF58654))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&byte_1ECF58654);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)&byte_1ECF58654))
    goto LABEL_7;
LABEL_8:
  v26[0] = 0;
  v8 = mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v35 = (__uint64_t)&v33;
    v34 = &v35;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v9) = dword_1ECF4400C;
  v11 = (double)(v8 * WTF::machTimebaseInfo(void)::timebaseInfo)
      / ((double)v9
       * 1000000000.0)
      * 1000.0
      * 1000.0
      * 1000.0;
  v12 = 0.0;
  if (v11 > 0.0)
    v12 = v11;
  v13 = (unint64_t)v12;
  if (v11 >= 1.84467441e19)
    v13 = -1;
  v26[1] = v13;
  if (*a1)
    v14 = *(_QWORD *)(*a1 + 8) + 57;
  else
    LODWORD(v14) = 57;
  HIDWORD(v26[0]) = v14 + a3;
  v27 = getpid();
  v35 = 0;
  pthread_threadid_np(0, &v35);
  v28 = v35;
  v29 = a2;
  v30 = a2;
  v15 = qword_1ECF58648++;
  v31 = a3;
  v32 = v15;
  if (fwrite(v26, 1uLL, 0x38uLL, (FILE *)qword_1ECF58638) != 56)
  {
    __break(0xC471u);
    JUMPOUT(0x197F708ACLL);
  }
  v16 = *a1;
  if (*a1)
    v17 = (const void *)(*a1 + 16);
  else
    v17 = 0;
  if (v16)
    v18 = *(_QWORD *)(v16 + 8) + 1;
  else
    v18 = 1;
  if (fwrite(v17, 1uLL, v18, (FILE *)qword_1ECF58638) != v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197F708CCLL);
  }
  if (fwrite(a2, 1uLL, a3, (FILE *)qword_1ECF58638) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x197F708ECLL);
  }
  v25 = __ldxr((unsigned __int8 *)&byte_1ECF58654);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&byte_1ECF58654))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58654, 0, v19, v20, v21, v22, v23, v24);
}

void executeJSCJITProbe(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Probe::Stack *v12;
  JSC::Probe::Stack *v13;
  uint64_t v14;
  JSC::Probe::Stack *v15;
  JSC::Probe::Stack *v16;
  JSC::Probe::Stack *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  JSC::Probe::Stack *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[2];
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  JSC::Probe::Stack *v33;

  v28[0] = a1 + 32;
  v28[1] = a1;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(0);
  v32 = *(_OWORD *)(v2 + 16);
  v33 = 0;
  v3 = *(_QWORD *)(a1 + 272);
  v4 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(_QWORD *))a1)(v28);
  if (v4 != *(_QWORD *)(a1 + 288) && v3 != *(_QWORD *)(a1 + 272))
  {
    __break(0xC471u);
    JUMPOUT(0x197F70A80);
  }
  v12 = v33;
  if (!v33)
  {
    v13 = 0;
    v14 = 0;
LABEL_6:
    v15 = (JSC::Probe::Stack *)((char *)v33 + 16 * v14);
    goto LABEL_7;
  }
  v14 = *((unsigned int *)v33 - 1);
  v15 = (JSC::Probe::Stack *)((char *)v33 + 16 * v14);
  if (!*((_DWORD *)v33 - 3))
  {
    v13 = (JSC::Probe::Stack *)((char *)v33 + 16 * v14);
    goto LABEL_6;
  }
  v13 = v33;
  if ((_DWORD)v14)
  {
    v24 = 16 * v14;
    v13 = v33;
    while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
    {
      v13 = (JSC::Probe::Stack *)((char *)v13 + 16);
      v24 -= 16;
      if (!v24)
      {
        v13 = v15;
        break;
      }
    }
  }
LABEL_7:
  if (v33)
    v16 = (JSC::Probe::Stack *)((char *)v33 + 16 * *((unsigned int *)v33 - 1));
  else
    v16 = 0;
  if (v16 != v13)
  {
    while (!*(_QWORD *)(*((_QWORD *)v13 + 1) + 16))
    {
      v17 = (JSC::Probe::Stack *)((char *)v13 + 16);
      v13 = v15;
      if (v17 != v15)
      {
        v13 = v17;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 = (JSC::Probe::Stack *)((char *)v13 + 16);
          if (v13 == v15)
          {
            v13 = v15;
            break;
          }
        }
      }
      if (v13 == v16)
        goto LABEL_17;
    }
    v29 = *(_QWORD *)(a1 + 280);
    v18 = v29;
    v19 = JSC::Probe::Stack::lowWatermarkFromVisitingDirtyPages(v33);
    if (v18 >= v19)
      v20 = v19;
    else
      v20 = v18;
    *(_QWORD *)(a1 + 280) = v20;
    *(_QWORD *)(a1 + 16) = JSC::Probe::flushDirtyStackPages;
    v21 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)v21 = 0;
    *(_OWORD *)(v21 + 24) = v32;
    *(_QWORD *)(v21 + 40) = 0;
    v22 = v33;
    v23 = v29;
    v33 = 0;
    *(_QWORD *)(v21 + 40) = v22;
    *(_QWORD *)v21 = v23;
    *(_QWORD *)(a1 + 24) = v21;
    v12 = v33;
  }
LABEL_17:
  if (v12)
  {
    v25 = *((unsigned int *)v12 - 1);
    if ((_DWORD)v25)
    {
      v26 = (unint64_t *)((char *)v12 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            WTF::fastFree(v27, v5, v6, v7, v8, v9, v10, v11);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((unint64_t)v12 - 16, v5, v6, v7, v8, v9, v10, v11);
  }
}

unint64_t JSC::Probe::Stack::lowWatermarkFromVisitingDirtyPages(JSC::Probe::Stack *this)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v2 = (char *)WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(this);
  if (!this)
  {
    if (v2)
    {
      v4 = -1;
      while (1)
      {
LABEL_4:
        v5 = (unint64_t *)*((_QWORD *)v2 + 1);
        v6 = v5[2];
        if (v6)
        {
          v7 = *v5;
          if (v4 >= v7)
          {
            do
            {
              if ((v6 & 1) != 0)
                goto LABEL_9;
              v7 += 16;
              v8 = v6 > 1;
              v6 >>= 1;
            }
            while (v8);
            v7 = -1;
LABEL_9:
            if (v7 < v4)
              v4 = v7;
          }
        }
        v9 = v2 + 16;
        v2 = v3;
        if (v9 != v3)
        {
          v2 = v9;
          do
          {
            if ((unint64_t)(*(_QWORD *)v2 + 1) > 1)
              goto LABEL_4;
            v2 += 16;
          }
          while (v2 != v3);
          v2 = v3;
        }
      }
    }
    return -1;
  }
  v10 = (char *)this + 16 * *((unsigned int *)this - 1);
  if (v10 == v2)
    return -1;
  v11 = -1;
  do
  {
    v12 = (unint64_t *)*((_QWORD *)v2 + 1);
    v13 = v12[2];
    if (!v13)
      goto LABEL_25;
    v14 = *v12;
    if (v11 < v14)
      goto LABEL_25;
    while ((v13 & 1) == 0)
    {
      v14 += 16;
      v8 = v13 > 1;
      v13 >>= 1;
      if (!v8)
      {
        v14 = -1;
        break;
      }
    }
    if (v14 < v11)
      v11 = v14;
LABEL_25:
    while (1)
    {
      v2 += 16;
      if (v2 == v3)
        break;
      if ((unint64_t)(*(_QWORD *)v2 + 1) > 1)
        goto LABEL_29;
    }
    v2 = v3;
LABEL_29:
    ;
  }
  while (v2 != v10);
  return v11;
}

void JSC::Probe::flushDirtyStackPages(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *i;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (_QWORD *)v2[5];
  v11 = WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(v3);
  v12 = v4;
  if (v3)
    goto LABEL_17;
LABEL_2:
  for (i = 0; v11 != i; i = &v3[2 * *((unsigned int *)v3 - 1)])
  {
    v14 = (_QWORD *)v11[1];
    v15 = v14[2];
    if (v15)
    {
      v16 = 0;
      do
      {
        if ((v15 & 1) != 0)
        {
          v17 = 0;
          do
          {
            v18 = v15;
            v15 >>= 1;
            v17 += 16;
          }
          while ((v18 & 2) != 0);
          memcpy((void *)(*v14 + v16), (char *)v14 + v16 + 24, v17);
          v16 += v17;
        }
        v16 += 16;
        v19 = v15 > 1;
        v15 >>= 1;
      }
      while (v19);
      v14[2] = 0;
    }
    while (1)
    {
      v11 += 2;
      if (v11 == v12)
        break;
      if ((unint64_t)(*v11 + 1) > 1)
        goto LABEL_16;
    }
    v11 = v12;
LABEL_16:
    v3 = (_QWORD *)v2[5];
    if (!v3)
      goto LABEL_2;
LABEL_17:
    ;
  }
  *(_QWORD *)(a1 + 280) = *v2;
  v20 = v2[5];
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
            WTF::fastFree(v23, v4, v5, v6, v7, v8, v9, v10);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v20 - 16, v4, v5, v6, v7, v8, v9, v10);
  }
  WTF::fastFree((unint64_t)v2, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t JSC::Probe::probeStateForContext(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t JSC::Probe::Stack::ensurePageFor(JSC::Probe::Stack *this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = v2 >= a2;
  else
    v3 = 0;
  if (!v3 || *((_QWORD *)this + 4) >= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197F71030);
  }
  v5 = a2 & 0xFFFFFFFFFFFFFC00;
  v7 = (uint64_t *)((char *)this + 40);
  v6 = *((_QWORD *)this + 5);
  if (!v6)
    goto LABEL_16;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (v5 + ~(v5 << 32)) ^ ((v5 + ~(v5 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != v5)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == v5)
        goto LABEL_14;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
LABEL_14:
  if (v12 == *(_DWORD *)(v6 - 4))
  {
LABEL_16:
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x418);
    *v16 = v5;
    v16[1] = (char *)v16 - v5 + 24;
    v16[2] = 0;
    memcpy(v16 + 3, (const void *)v5, 0x400uLL);
    v24 = *v7;
    if (*v7
      || (WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::Probe::Page>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::Probe::Page>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 5, 8uLL, 0, v19, v20, v21, v22, v23), (v24 = *v7) != 0))
    {
      v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = (v5 + ~(v5 << 32)) ^ ((v5 + ~(v5 << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = (uint64_t *)(v24 + 16 * v29);
    v31 = *v30;
    if (*v30)
    {
      v32 = 0;
      v33 = 1;
      do
      {
        if (v31 == v5)
        {
          *((_QWORD *)this + 2) = v30[1];
          WTF::fastFree((unint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
          result = *((_QWORD *)this + 2);
          goto LABEL_43;
        }
        if (v31 == -1)
          v32 = v30;
        v29 = (v29 + v33) & v25;
        v30 = (uint64_t *)(v24 + 16 * v29);
        v31 = *v30;
        ++v33;
      }
      while (*v30);
      if (v32)
      {
        *v32 = 0;
        v32[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v30 = v32;
      }
    }
    v34 = v30[1];
    *v30 = v5;
    v30[1] = (uint64_t)v16;
    if (v34)
      WTF::fastFree(v34, v17, v18, v19, v20, v21, v22, v23);
    v35 = *v7;
    if (*v7)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v7;
    if (*v7)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_41;
    }
    else
    {
      if (3 * v40 > 4 * v39)
      {
LABEL_41:
        result = v30[1];
        goto LABEL_42;
      }
      if (!(_DWORD)v40)
      {
        v41 = 8;
        goto LABEL_40;
      }
    }
    v41 = ((_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40)));
LABEL_40:
    v30 = WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::Probe::Page>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::Probe::Page>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 5, v41, (uint64_t)v30, v19, v20, v21, v22, v23);
    goto LABEL_41;
  }
  result = *(_QWORD *)(v6 + 16 * v12 + 8);
LABEL_42:
  *((_QWORD *)this + 2) = result;
LABEL_43:
  *((_QWORD *)this + 1) = v5;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::PerfLog::singleton(void)::$_0 &&>>()
{
  const char *v0;
  pid_t v1;
  WTF::PrintStream *v2;
  const void *v3;
  size_t v4;
  unint64_t v5;
  const char *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char **v37;
  char *v38;
  __int128 __ptr;
  __int128 v40;
  _QWORD v41[18];

  v41[17] = *MEMORY[0x1E0C80C00];
  qword_1ECF58640 = 0;
  qword_1ECF58648 = 0;
  qword_1ECF58638 = 0;
  dword_1ECF58650 = -1;
  byte_1ECF58654 = 0;
  *(_QWORD *)&__ptr = off_1E3572250;
  *((_QWORD *)&__ptr + 1) = v41;
  v40 = xmmword_199122F80;
  LOBYTE(v41[0]) = 0;
  v0 = (const char *)qword_1ECF4C2A8;
  if (!qword_1ECF4C2A8)
    v0 = "/tmp";
  WTF::PrintStream::printf((WTF::PrintStream *)&__ptr, "%s", v0);
  (*(void (**)(__int128 *))(__ptr + 40))(&__ptr);
  v1 = getpid();
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(__int128 *))(__ptr + 32))(&__ptr);
  WTF::PrintStream::printf(v2, "%s", "/jit-");
  WTF::PrintStream::printf(v2, "%d", v1);
  WTF::PrintStream::printf(v2, "%s", ".dump");
  (*(void (**)(__int128 *))(__ptr + 40))(&__ptr);
  v3 = (const void *)*((_QWORD *)&__ptr + 1);
  if (*((_QWORD *)&__ptr + 1))
  {
    v4 = v40;
    if ((unint64_t)v40 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197F713FCLL);
    }
    if ((_QWORD)v40 == -17)
    {
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x197F713B0);
    }
    v5 = WTF::fastMalloc((WTF *)(v40 + 17));
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    memcpy((void *)(v5 + 16), v3, v4);
    *(_BYTE *)(v5 + 16 + v4) = 0;
  }
  else
  {
    v5 = 0;
  }
  if (v5)
    v6 = (const char *)(v5 + 16);
  else
    v6 = 0;
  v7 = open(v6, 1538, 438);
  dword_1ECF58650 = v7;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WTF::fastFree(v5, v8, v9, v10, v11, v12, v13, v14);
      v7 = dword_1ECF58650;
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  if (v7 == -1)
    goto LABEL_39;
  qword_1ECF58638 = (uint64_t)fdopen(v7, "wb");
  if (!qword_1ECF58638)
  {
    __break(0xC471u);
    JUMPOUT(0x197F713D0);
  }
  if (*((_QWORD **)&__ptr + 1) != v41)
    WTF::fastFree(*((unint64_t *)&__ptr + 1), v15, v16, v17, v18, v19, v20, v21);
  __ptr = xmmword_19914F5C0;
  v41[0] = 0;
  v40 = 0uLL;
  v22 = mach_absolute_time();
  v24 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v24 != -1)
  {
    v38 = &v36;
    v37 = &v38;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v23) = dword_1ECF4400C;
  v25 = (double)(v22 * WTF::machTimebaseInfo(void)::timebaseInfo)
      / ((double)v23
       * 1000000000.0)
      * 1000.0
      * 1000.0
      * 1000.0;
  v26 = 0.0;
  if (v25 > 0.0)
    v26 = v25;
  v27 = (unint64_t)v26;
  if (v25 >= 1.84467441e19)
    v27 = -1;
  *((_QWORD *)&v40 + 1) = v27;
  DWORD1(v40) = getpid();
  if (__ldaxr((unsigned __int8 *)&byte_1ECF58654))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&byte_1ECF58654))
  {
    goto LABEL_28;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&byte_1ECF58654);
LABEL_28:
  if (fwrite(&__ptr, 1uLL, 0x28uLL, (FILE *)qword_1ECF58638) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x197F713F0);
  }
  v35 = __ldxr((unsigned __int8 *)&byte_1ECF58654);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)&byte_1ECF58654))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58654, 0, v29, v30, v31, v32, v33, v34);
}

uint64_t *WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::Probe::Page>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::Probe::Page>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::Probe::Page>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = v37[1];
          v37[1] = 0;
          if (v38)
            WTF::fastFree(v38, v15, v16, v17, v18, v19, v20, v21);
          *v37 = *v24;
          v39 = v11 + 16 * v22;
          v40 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          v37[1] = v40;
          v41 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
            WTF::fastFree(v41, v15, v16, v17, v18, v19, v20, v21);
          if (v24 == (uint64_t *)a3)
            v23 = v37;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
            WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::B3::ArgumentRegValue::~ArgumentRegValue(JSC::B3::ArgumentRegValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::ArgumentRegValue::~ArgumentRegValue(JSC::B3::ArgumentRegValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::ArgumentRegValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  JSC::Reg::dump((JSC::Reg *)(a1 + 40), v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

void JSC::B3::AtomicValue::~AtomicValue(JSC::B3::AtomicValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::AtomicValue::~AtomicValue(JSC::B3::AtomicValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::AtomicValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  unint64_t v20;
  const char *v21;
  WTF::PrintStream *v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  char v26;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v24, v12);
    }
    else
    {
      WTF::CString::CString(&v24, &str_25, 0);
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v24, v18);
    }
    else
    {
      WTF::CString::CString(&v24, &str_25, 0);
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%s", "width = ");
  v20 = *(char *)(a1 + 60);
  if (v20 >= 5)
  {
    result = 50;
    __break(0xC471u);
  }
  else
  {
    v21 = off_1E357D460[v20];
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v22, "%s", v21);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    return JSC::B3::MemoryValue::dumpMeta(a1, a2, a3);
  }
  return result;
}

uint64_t JSC::B3::AtomicValue::AtomicValue(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  int v13;

  v13 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 20) = 2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 2, a6, a7);
  *(_DWORD *)(a1 + 40) = a8;
  *(_QWORD *)(a1 + 44) = a9;
  *(_QWORD *)(a1 + 52) = a10;
  *(_QWORD *)a1 = off_1E357CDD0;
  *(_BYTE *)(a1 + 60) = a5;
  return a1;
}

{
  int v13;

  v13 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 20) = 2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 2, a6, a7);
  *(_DWORD *)(a1 + 40) = a8;
  *(_QWORD *)(a1 + 44) = a9;
  *(_QWORD *)(a1 + 52) = a10;
  *(_QWORD *)a1 = off_1E357CDD0;
  *(_BYTE *)(a1 + 60) = a5;
  return a1;
}

JSC::B3::Value *JSC::B3::AtomicValue::AtomicValue(JSC::B3::Value *this, int a2, __int16 a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  int v16;
  _QWORD *v17;

  if (a3 == 71)
    v16 = 1;
  else
    v16 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)this = off_1E357F5F0;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = a3;
  *((_DWORD *)this + 4) = v16;
  *((_BYTE *)this + 20) = 3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  v17 = (_QWORD *)JSC::B3::Value::childrenAlloc(this);
  *v17 = a6;
  v17[1] = a7;
  v17[2] = a8;
  *((_DWORD *)this + 10) = a9;
  *(_QWORD *)((char *)this + 44) = a10;
  *(_QWORD *)((char *)this + 52) = a11;
  *(_QWORD *)this = off_1E357CDD0;
  *((_BYTE *)this + 60) = a5;
  return this;
}

{
  int v16;
  _QWORD *v17;

  if (a3 == 71)
    v16 = 1;
  else
    v16 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)this = off_1E357F5F0;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = a3;
  *((_DWORD *)this + 4) = v16;
  *((_BYTE *)this + 20) = 3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  v17 = (_QWORD *)JSC::B3::Value::childrenAlloc(this);
  *v17 = a6;
  v17[1] = a7;
  v17[2] = a8;
  *((_DWORD *)this + 10) = a9;
  *(_QWORD *)((char *)this + 44) = a10;
  *(_QWORD *)((char *)this + 52) = a11;
  *(_QWORD *)this = off_1E357CDD0;
  *((_BYTE *)this + 60) = a5;
  return this;
}

void JSC::B3::BasicBlock::~BasicBlock(JSC::B3::BasicBlock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::BasicBlock *v9;
  JSC::B3::BasicBlock *v11;
  unint64_t v13;

  v9 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 7);
  if ((JSC::B3::BasicBlock *)((char *)this + 72) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 3);
  if ((JSC::B3::BasicBlock *)((char *)this + 40) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

char *JSC::B3::BasicBlock::append(JSC::B3::BasicBlock *this, JSC::B3::Value *a2)
{
  char *result;
  uint64_t v4;
  JSC::B3::Value *v5;

  v5 = a2;
  result = (char *)this + 8;
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4 == *((_DWORD *)this + 4))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v4 + 1, (unint64_t)&v5);
    v4 = *((unsigned int *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4) = *(_QWORD *)result;
    a2 = v5;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v4) = a2;
  }
  *((_DWORD *)this + 5) = v4 + 1;
  *((_QWORD *)a2 + 4) = this;
  return result;
}

char *JSC::B3::BasicBlock::appendNonTerminal(char *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  char *v4;
  _QWORD *v5;
  char *v6;
  unsigned int v7;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    goto LABEL_6;
  v4 = this;
  v5 = (_QWORD *)(*((_QWORD *)this + 1) + 8 * v2);
  v6 = (char *)(v5 - 1);
  if ((_DWORD)v2 == *((_DWORD *)this + 4))
  {
    this = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 1, v2 + 1, (unint64_t)v6);
    v6 = this;
    v2 = *((unsigned int *)v4 + 5);
    v5 = (_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v2);
  }
  *v5 = *(_QWORD *)v6;
  v7 = v2 + 1;
  *((_DWORD *)v4 + 5) = v7;
  if (v7 <= 1)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x197F720DCLL);
  }
  *(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v7 - 16) = a2;
  *((_QWORD *)a2 + 4) = v4;
  return this;
}

uint64_t JSC::B3::BasicBlock::removeLast(JSC::B3::BasicBlock *this, JSC::B3::Procedure *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x197F72230);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v2 - 8);
  *((_DWORD *)this + 5) = v2 - 1;
  v5 = *(unsigned int *)(v4 + 8);
  v6 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(v6 + 8 * v5) != v4)
    goto LABEL_22;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7 != *((_DWORD *)a2 + 22))
  {
    *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7) = v5;
    goto LABEL_5;
  }
  v10 = v7 + (v7 >> 2);
  v11 = v10 >= 0x10 ? v10 + 1 : 16;
  v12 = v11 <= v7 + 1 ? v7 + 1 : v11;
  if (v12 >> 29)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197F72228);
  }
  v13 = (const void *)*((_QWORD *)a2 + 10);
  v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
  *((_DWORD *)a2 + 22) = v12;
  *((_QWORD *)a2 + 10) = v14;
  memcpy(v14, v13, 8 * v7);
  if (v13)
  {
    if (*((const void **)a2 + 10) == v13)
    {
      *((_QWORD *)a2 + 10) = 0;
      *((_DWORD *)a2 + 22) = 0;
    }
    WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
  }
  v7 = *((unsigned int *)a2 + 23);
  *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7) = *(unsigned int *)(v4 + 8);
  v6 = *((_QWORD *)a2 + 8);
LABEL_5:
  *((_DWORD *)a2 + 23) = v7 + 1;
  v8 = *(unsigned int *)(v4 + 8);
  result = *(_QWORD *)(v6 + 8 * v8);
  *(_QWORD *)(v6 + 8 * v8) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *JSC::B3::BasicBlock::replaceLast(JSC::B3::BasicBlock *this, JSC::B3::Procedure *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;

  v3 = *((unsigned int *)this + 5);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x197F723DCLL);
  }
  v6 = (char **)((char *)this + 8);
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v3 - 8);
  *((_DWORD *)this + 5) = v3 - 1;
  v8 = *(unsigned int *)(v7 + 8);
  v9 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(v9 + 8 * v8) != v7)
    goto LABEL_25;
  v11 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 22))
  {
    *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v11) = v8;
    goto LABEL_5;
  }
  v15 = v11 + (v11 >> 2);
  v16 = v15 >= 0x10 ? v15 + 1 : 16;
  v17 = v16 <= v11 + 1 ? v11 + 1 : v16;
  if (v17 >> 29)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197F723D4);
  }
  v18 = (const void *)*((_QWORD *)a2 + 10);
  v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
  *((_DWORD *)a2 + 22) = v17;
  *((_QWORD *)a2 + 10) = v19;
  memcpy(v19, v18, 8 * v11);
  if (v18)
  {
    if (*((const void **)a2 + 10) == v18)
    {
      *((_QWORD *)a2 + 10) = 0;
      *((_DWORD *)a2 + 22) = 0;
    }
    WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
  }
  v11 = *((unsigned int *)a2 + 23);
  *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v11) = *(unsigned int *)(v7 + 8);
  v9 = *((_QWORD *)a2 + 8);
LABEL_5:
  *((_DWORD *)a2 + 23) = v11 + 1;
  v12 = *(unsigned int *)(v7 + 8);
  result = *(char **)(v9 + 8 * v12);
  *(_QWORD *)(v9 + 8 * v12) = 0;
  if (result)
    result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  v27 = a3;
  v14 = *((unsigned int *)this + 5);
  if ((_DWORD)v14 == *((_DWORD *)this + 4))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v14 + 1, (unint64_t)&v27);
    v14 = *((unsigned int *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v14) = *(_QWORD *)result;
    a3 = v27;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v14] = a3;
  }
  *((_DWORD *)this + 5) = v14 + 1;
  *((_QWORD *)a3 + 4) = this;
  return result;
}

uint64_t JSC::B3::BasicBlock::appendIntConstant(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  uint64_t v14;

  if (a4 >= 0x80000000)
    v6 = 0x80000000;
  else
    v6 = a4;
  switch(v6)
  {
    case 1u:
      v7 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, a3, a5);
      break;
    case 2u:
      v7 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a2, a3, a5);
      break;
    case 3u:
      v7 = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, a3, (float)a5);
      break;
    case 4u:
      v7 = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, a3, (double)a5);
      break;
    default:
      result = 129;
      __break(0xC471u);
      return result;
  }
  v8 = v7;
  v14 = v7;
  v9 = (char **)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v14);
    v10 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *(_QWORD *)v13;
    v11 = v14;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
    v11 = v8;
  }
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = a1;
  return v8;
}

uint64_t JSC::B3::BasicBlock::appendIntConstant(JSC::B3::BasicBlock *this, JSC::B3::Procedure *a2, JSC::B3::Value *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  uint64_t v15;

  v6 = *((_QWORD *)a3 + 3);
  v7 = *((_DWORD *)a3 + 4);
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  switch(v7)
  {
    case 1u:
      v8 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, v6, a4);
      break;
    case 2u:
      v8 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a2, v6, a4);
      break;
    case 3u:
      v8 = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, v6, (float)a4);
      break;
    case 4u:
      v8 = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, v6, (double)a4);
      break;
    default:
      result = 129;
      __break(0xC471u);
      return result;
  }
  v9 = v8;
  v15 = v8;
  v10 = (char **)((char *)this + 8);
  v11 = *((unsigned int *)this + 5);
  if ((_DWORD)v11 == *((_DWORD *)this + 4))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *((unsigned int *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *((_DWORD *)this + 5) = v11 + 1;
  *(_QWORD *)(v12 + 32) = this;
  return v9;
}

unint64_t JSC::B3::BasicBlock::clearSuccessors(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(this + 64))
  {
    v8 = this;
    if (*(_DWORD *)(this + 68))
      *(_DWORD *)(this + 68) = 0;
    this = *(_QWORD *)(this + 56);
    if (v8 + 72 != this && this != 0)
    {
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
      this = *(_QWORD *)(v8 + 56);
    }
    if (!this)
    {
      *(_QWORD *)(v8 + 56) = v8 + 72;
      *(_DWORD *)(v8 + 64) = 2;
    }
  }
  return this;
}

__int128 *JSC::B3::BasicBlock::appendSuccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = a2;
  *((_QWORD *)&v13 + 1) = a3;
  result = (__int128 *)(a1 + 56);
  v10 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 64))
  {
    result = (__int128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v10 + 1), (unint64_t)&v13, a4, a5, a6, a7, a8);
    v10 = *(unsigned int *)(a1 + 68);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *result;
  }
  else
  {
    v11 = *(_QWORD *)result;
    v12 = v13;
  }
  *(_OWORD *)(v11 + 16 * v10) = v12;
  ++*(_DWORD *)(a1 + 68);
  return result;
}

uint64_t JSC::B3::BasicBlock::setSuccessors(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v8 = (uint64_t *)(result + 56);
  if (*(_DWORD *)(result + 68))
  {
    v10 = *v8;
  }
  else
  {
    if (*(_DWORD *)(result + 64))
    {
      v9 = 0;
      v10 = *v8;
    }
    else
    {
      v15 = a3;
      v16 = a2;
      v14 = result;
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 56, (void *)1, a3, a4, a5, a6, a7, a8);
      v9 = *(_DWORD *)(v14 + 68);
      result = v14;
      v10 = *(_QWORD *)(v14 + 56);
      if (v9 == 1)
      {
        LOBYTE(a3) = v15;
        a2 = v16;
        goto LABEL_6;
      }
      LOBYTE(a3) = v15;
      a2 = v16;
    }
    v11 = 16 * v9;
    do
    {
      v12 = v11;
      v13 = v10 + v11;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      v11 = v12 + 16;
    }
    while (v12);
  }
LABEL_6:
  *(_DWORD *)(result + 68) = 1;
  *(_QWORD *)v10 = a2;
  *(_BYTE *)(v10 + 8) = a3;
  return result;
}

{
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v8 = (uint64_t *)(result + 56);
  v9 = *(_DWORD *)(result + 68);
  if (v9 >= 2)
  {
    v10 = *v8;
  }
  else
  {
    if (*(_DWORD *)(result + 64) < 2u)
    {
      v17 = a3;
      v18 = a2;
      v15 = a5;
      v16 = a4;
      v14 = result;
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 56, (void *)2, a3, a4, a5, a6, a7, a8);
      v9 = *(_DWORD *)(v14 + 68);
      result = v14;
      v10 = *(_QWORD *)(v14 + 56);
      if (v9 == 2)
      {
        LOBYTE(a5) = v15;
        a4 = v16;
        LOBYTE(a3) = v17;
        a2 = v18;
        goto LABEL_6;
      }
      LOBYTE(a5) = v15;
      a4 = v16;
      LOBYTE(a3) = v17;
      a2 = v18;
    }
    else
    {
      v10 = *v8;
    }
    v11 = 16 * v9;
    do
    {
      v12 = v10 + v11;
      *(_QWORD *)v12 = 0;
      *(_BYTE *)(v12 + 8) = 0;
      v11 += 16;
    }
    while (v11 != 32);
  }
LABEL_6:
  *(_DWORD *)(result + 68) = 2;
  *(_QWORD *)v10 = a2;
  *(_BYTE *)(v10 + 8) = a3;
  v13 = *(_QWORD *)(result + 56);
  *(_QWORD *)(v13 + 16) = a4;
  *(_BYTE *)(v13 + 24) = a5;
  return result;
}

uint64_t JSC::B3::BasicBlock::addPredecessor(JSC::B3::BasicBlock *this, JSC::B3::BasicBlock *a2)
{
  JSC::B3::BasicBlock ***v3;
  uint64_t v4;
  JSC::B3::BasicBlock **v5;
  uint64_t v6;
  _QWORD *v8;
  JSC::B3::BasicBlock *v9;

  v9 = a2;
  v3 = (JSC::B3::BasicBlock ***)((char *)this + 24);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = *v3;
    v6 = *((unsigned int *)this + 9);
    while (*v5 != a2)
    {
      ++v5;
      if (!--v6)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if ((_DWORD)v4 == *((_DWORD *)this + 8))
    {
      v8 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
      v4 = *((unsigned int *)this + 9);
      *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v4) = *v8;
    }
    else
    {
      (*v3)[v4] = a2;
    }
    *((_DWORD *)this + 9) = v4 + 1;
    return 1;
  }
}

BOOL JSC::B3::BasicBlock::removePredecessor(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  v2 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3 != a2)
  {
    v4 = 0;
    while (v2 - 1 != v4)
    {
      v5 = v3[++v4];
      if (v5 == a2)
      {
        v6 = v4 < v2;
        goto LABEL_7;
      }
    }
    return 0;
  }
  v4 = 0;
  v6 = 1;
LABEL_7:
  v3[v4] = v3[v2 - 1];
  *(_DWORD *)(a1 + 36) = v2 - 1;
  return v6;
}

uint64_t JSC::B3::BasicBlock::replacePredecessor(JSC::B3::BasicBlock *this, JSC::B3::BasicBlock *a2, JSC::B3::BasicBlock *a3)
{
  unint64_t v4;
  _QWORD *v5;
  JSC::B3::BasicBlock **v6;
  unint64_t v7;
  JSC::B3::BasicBlock *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v14;
  JSC::B3::BasicBlock *v15;

  v4 = *((unsigned int *)this + 9);
  if (!(_DWORD)v4)
  {
    v4 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    v15 = a3;
    v5 = (_QWORD *)((char *)this + 24);
    goto LABEL_12;
  }
  v5 = (_QWORD *)((char *)this + 24);
  v6 = (JSC::B3::BasicBlock **)*((_QWORD *)this + 3);
  if (*v6 == a2)
  {
    v7 = 0;
    v9 = 1;
LABEL_7:
    v6[v7] = v6[v4 - 1];
    v4 = (v4 - 1);
    *((_DWORD *)this + 9) = v4;
  }
  else
  {
    v7 = 0;
    while (v4 - 1 != v7)
    {
      v8 = v6[++v7];
      if (v8 == a2)
      {
        v9 = v7 < v4;
        goto LABEL_7;
      }
    }
    v9 = 0;
  }
  LODWORD(v10) = v4;
  v15 = a3;
  if (!(_DWORD)v4)
  {
    v4 = 0;
LABEL_12:
    if ((_DWORD)v10 == *((_DWORD *)this + 8))
    {
      v14 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v4 + 1, (unint64_t)&v15);
      v10 = *((unsigned int *)this + 9);
      *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v10) = *v14;
    }
    else
    {
      *(_QWORD *)(*v5 + 8 * v4) = a3;
    }
    *((_DWORD *)this + 9) = v10 + 1;
    v12 = 1;
    return v9 | v12;
  }
  v11 = 0;
  while (*(JSC::B3::BasicBlock **)(*v5 + 8 * v11) != a3)
  {
    if (v4 == ++v11)
      goto LABEL_12;
  }
  v12 = 0;
  return v9 | v12;
}

void JSC::B3::updatePredecessorsAfter<JSC::B3::BasicBlock>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  _QWORD v28[16];
  uint64_t v29;

  v25 = (WTF *)v28;
  v26 = 16;
  v28[0] = a1;
  v8 = 1;
  while (1)
  {
    v9 = *((_QWORD *)v25 + --v8);
    v27 = v8;
    v10 = *(unsigned int *)(v9 + 68);
    if ((_DWORD)v10)
      break;
LABEL_2:
    if (!v8)
    {
      v22 = v25;
      if (v28 != (_QWORD *)v25 && v25 != 0)
      {
        v25 = 0;
        v26 = 0;
        WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
      }
      return;
    }
  }
  v11 = 0;
  while (1)
  {
    v24 = 0;
    if (v11 >= *(unsigned int *)(v9 + 68))
      break;
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v11);
    v12 = v24;
    v29 = v9;
    v13 = (_QWORD *)(v24 + 24);
    v14 = *(unsigned int *)(v24 + 36);
    if ((_DWORD)v14)
    {
      v15 = (_QWORD *)*v13;
      v16 = *(unsigned int *)(v24 + 36);
      while (*v15 != v9)
      {
        ++v15;
        if (!--v16)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if ((_DWORD)v14 == *(_DWORD *)(v24 + 32))
      {
        v20 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v29);
        v14 = *(unsigned int *)(v12 + 36);
        *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v14) = *v20;
        v8 = v27;
      }
      else
      {
        *(_QWORD *)(*v13 + 8 * v14) = v9;
      }
      *(_DWORD *)(v12 + 36) = v14 + 1;
      v17 = v8;
      if (v8 == v26)
      {
        v21 = (uint64_t *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v8 + 1, (unint64_t)&v24);
        v17 = v27;
        v8 = v27 + 1;
        v18 = v25;
        v19 = *v21;
      }
      else
      {
        ++v8;
        v19 = v24;
        v18 = v25;
      }
      *((_QWORD *)v18 + v17) = v19;
      v27 = v8;
    }
    if (++v11 == v10)
      goto LABEL_2;
  }
  __break(0xC471u);
}

uint64_t JSC::B3::BasicBlock::deepDump(JSC::B3::BasicBlock *this, const JSC::B3::Procedure *a2, WTF::PrintStream *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t result;
  WTF::PrintStream *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value **v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  uint64_t **v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v6, "%s", "b3  ");
  WTF::PrintStream::printf(v6, "%s", "BB");
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "#");
  WTF::PrintStream::printf(v7, "%u", *(_DWORD *)this);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ": ; frequency = ");
  WTF::PrintStream::printf(v6, "%lf", *((double *)this + 13));
  WTF::PrintStream::printf(v6, "%s", "\n");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  if (*((_DWORD *)this + 9))
  {
    v24 = (uint64_t **)((char *)this + 24);
    v25 = ", ";
    v26 = 3;
    v27 = "";
    v28 = 1;
    v29 = 0;
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::PrintStream::printf(v9, "%s", "b3  ");
    WTF::PrintStream::printf(v9, "%s", "  Predecessors: ");
    if (*((_DWORD *)this + 9))
    {
      v10 = (uint64_t *)*((_QWORD *)this + 3);
      do
      {
        v11 = *v10++;
        v30 = v11;
        v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>(v12, (uint64_t)&v25, &v30);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
      }
      while (v10 != &(*v24)[*((unsigned int *)v24 + 3)]);
    }
    WTF::PrintStream::printf(v9, "%s", "\n");
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  }
  v13 = *((unsigned int *)this + 5);
  if ((_DWORD)v13)
  {
    v14 = (JSC::B3::Value **)*((_QWORD *)this + 1);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      WTF::PrintStream::printf(v17, "%s", "b3  ");
      WTF::PrintStream::printf(v17, "%s", "    ");
      if (v16)
      {
        JSC::B3::Value::deepDump(v16, a2, v17);
      }
      else
      {
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 32))(v17);
        WTF::PrintStream::printf(v18, "%s", "<null>");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 40))(v17);
      }
      WTF::PrintStream::printf(v17, "%s", "\n");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  if (*((_DWORD *)this + 17))
  {
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::PrintStream::printf(v19, "%s", "b3  ");
    WTF::PrintStream::printf(v19, "%s", "  Successors: ");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
    v20 = *((unsigned int *)this + 5);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v20 - 8);
      (*(void (**)(uint64_t, JSC::B3::BasicBlock *, WTF::PrintStream *))(*(_QWORD *)v21 + 16))(v21, this, a3);
    }
    else
    {
      v24 = (uint64_t **)((char *)this + 56);
      v25 = ", ";
      v26 = 3;
      v27 = "";
      v28 = 1;
      v29 = 0;
      v22 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(&v24, v22);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
    }
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::PrintStream::printf(v23, "%s", "\n");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  }
  return result;
}

uint64_t JSC::B3::BasicBlock::appendNewControlValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v12;
  __int16 v14;
  uint64_t Space;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if ((a3 & 0xFE) != 0x9E)
    goto LABEL_32;
  v9 = a3;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v12 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 != v12 && v12 != 0)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v12, (void *)a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(a1 + 56);
    }
    if (!v12)
    {
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 2;
    }
  }
  v14 = v9;
  Space = JSC::B3::Value::allocateSpace(v9, 40);
  JSC::B3::Value::Value<>(Space, v14, a4);
  v16 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v16 - 8);
    *(_DWORD *)(a2 + 92) = v16 - 1;
    v18 = *(_QWORD *)(a2 + 64);
    goto LABEL_15;
  }
  v17 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v17 != *(_DWORD *)(a2 + 72))
  {
    v18 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    *(_DWORD *)(a2 + 76) = v17 + 1;
    goto LABEL_15;
  }
  v24 = v17 + (v17 >> 2);
  v25 = v24 >= 0x10 ? v24 + 1 : 16;
  v26 = v25 <= v17 + 1 ? v17 + 1 : v25;
  if (v26 >> 29)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x197F7322CLL);
  }
  v27 = *(const void **)(a2 + 64);
  v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
  *(_DWORD *)(a2 + 72) = v26;
  *(_QWORD *)(a2 + 64) = v28;
  memcpy(v28, v27, 8 * v17);
  if (v27)
  {
    if (*(const void **)(a2 + 64) == v27)
    {
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v27, v29, v30, v31, v32, v33, v34, v35);
  }
  v36 = *(unsigned int *)(a2 + 76);
  v18 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v18 + 8 * v36) = 0;
  *(_DWORD *)(a2 + 76) = v36 + 1;
LABEL_15:
  *(_QWORD *)(v18 + 8 * v17) = Space;
  *(_DWORD *)(Space + 8) = v17;
  v37 = Space;
  v19 = (char **)(a1 + 8);
  v20 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(a1 + 16))
  {
    v23 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v37);
    v20 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20) = *(_QWORD *)v23;
    v21 = v37;
  }
  else
  {
    *(_QWORD *)&(*v19)[8 * v20] = Space;
    v21 = Space;
  }
  *(_DWORD *)(a1 + 20) = v20 + 1;
  *(_QWORD *)(v21 + 32) = a1;
  return Space;
}

{
  unint64_t v12;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t casual;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  if ((_DWORD)a3 != 158)
    goto LABEL_48;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v12 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 != v12 && v12 != 0)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v12, (void *)a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(a1 + 56);
    }
    if (!v12)
    {
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 2;
    }
  }
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v14)
  {
    v15 = (_BYTE *)(v14 + 8672);
    *(_BYTE *)(v14 + 8672) = 1;
    v16 = *(unsigned int *)(v14 + 8688);
    if ((_DWORD)v16)
    {
      *(_DWORD *)(v14 + 8688) = v16 - *(_DWORD *)(v14 + 8692);
      casual = *(_QWORD *)(v14 + 8680) - v16;
LABEL_15:
      *v15 = 0;
      goto LABEL_16;
    }
    v25 = *(_QWORD *)(v14 + 8712);
    v26 = *(_QWORD *)(v14 + 8696);
    if (v25)
    {
LABEL_23:
      v27 = __clz(v25);
      *(_QWORD *)(v14 + 8712) = v25 & ~(0x8000000000000000 >> v27);
      casual = v26 + 16 * v27;
      goto LABEL_15;
    }
    if (*(_BYTE *)(v14 + 8677) == 6)
    {
      v42 = *(_DWORD *)(v14 + 8708);
      v43 = *(unsigned int *)(v14 + 8704);
      if (v43 < v42)
      {
        *(_QWORD *)&v15[8 * v43 + 56] = 0;
        v44 = (unint64_t *)(v14 + 8 * v43 + 8736);
        v45 = v42 - 1 - v43;
        while (v45)
        {
          v26 += 1024;
          v47 = *v44++;
          v46 = v47;
          LODWORD(v43) = v43 + 1;
          --v45;
          if (v47)
          {
            v25 = __rbit64(v46);
            *(_DWORD *)(v14 + 8704) = v43;
            *(_QWORD *)(v14 + 8696) = v26;
            goto LABEL_23;
          }
        }
        *(_DWORD *)(v14 + 8704) = v42;
      }
    }
    *v15 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_16:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 158;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a4;
  *(_QWORD *)(casual + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)casual, 1, a5);
  v18 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v18 - 8);
    *(_DWORD *)(a2 + 92) = v18 - 1;
    v20 = *(_QWORD *)(a2 + 64);
    goto LABEL_19;
  }
  v19 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v19 != *(_DWORD *)(a2 + 72))
  {
    v20 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v20 + 8 * v19) = 0;
    *(_DWORD *)(a2 + 76) = v19 + 1;
    goto LABEL_19;
  }
  v29 = v19 + (v19 >> 2);
  if (v29 >= 0x10)
    v30 = v29 + 1;
  else
    v30 = 16;
  if (v30 <= v19 + 1)
    v31 = v19 + 1;
  else
    v31 = v30;
  if (v31 >> 29)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x197F734ACLL);
  }
  v32 = *(const void **)(a2 + 64);
  v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
  *(_DWORD *)(a2 + 72) = v31;
  *(_QWORD *)(a2 + 64) = v33;
  memcpy(v33, v32, 8 * v19);
  if (v32)
  {
    if (*(const void **)(a2 + 64) == v32)
    {
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v32, v34, v35, v36, v37, v38, v39, v40);
  }
  v41 = *(unsigned int *)(a2 + 76);
  v20 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v20 + 8 * v41) = 0;
  *(_DWORD *)(a2 + 76) = v41 + 1;
LABEL_19:
  *(_QWORD *)(v20 + 8 * v19) = casual;
  *(_DWORD *)(casual + 8) = v19;
  v48 = casual;
  v21 = (char **)(a1 + 8);
  v22 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(a1 + 16))
  {
    v28 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v48);
    v22 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22) = *(_QWORD *)v28;
    v23 = v48;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = casual;
    v23 = casual;
  }
  *(_DWORD *)(a1 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = a1;
  return casual;
}

uint64_t JSC::B3::BasicBlock::appendNewControlValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t casual;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  if ((_DWORD)a3 != 154)
    goto LABEL_46;
  v12 = *a5;
  v11 = a5[1];
  v13 = (uint64_t *)(a1 + 56);
  if (*(_DWORD *)(a1 + 68))
  {
    v15 = *v13;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 64))
  {
    v14 = 0;
    v15 = *v13;
  }
  else
  {
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, (void *)1, a3, a4, (uint64_t)a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 68);
    v15 = *(_QWORD *)(a1 + 56);
    if (v14 == 1)
      goto LABEL_7;
  }
  v16 = 16 * v14;
  do
  {
    v17 = v16;
    v18 = v15 + v16;
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 8) = 0;
    v16 = v17 + 16;
  }
  while (v17);
LABEL_7:
  *(_DWORD *)(a1 + 68) = 1;
  *(_QWORD *)v15 = v12;
  *(_BYTE *)(v15 + 8) = v11;
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v19)
  {
    v20 = (_BYTE *)(v19 + 8672);
    *(_BYTE *)(v19 + 8672) = 1;
    v21 = *(unsigned int *)(v19 + 8688);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(v19 + 8688) = v21 - *(_DWORD *)(v19 + 8692);
      casual = *(_QWORD *)(v19 + 8680) - v21;
LABEL_10:
      *v20 = 0;
      goto LABEL_11;
    }
    v30 = *(_QWORD *)(v19 + 8712);
    v31 = *(_QWORD *)(v19 + 8696);
    if (v30)
    {
LABEL_18:
      v32 = __clz(v30);
      *(_QWORD *)(v19 + 8712) = v30 & ~(0x8000000000000000 >> v32);
      casual = v31 + 16 * v32;
      goto LABEL_10;
    }
    if (*(_BYTE *)(v19 + 8677) == 6)
    {
      v47 = *(_DWORD *)(v19 + 8708);
      v48 = *(unsigned int *)(v19 + 8704);
      if (v48 < v47)
      {
        *(_QWORD *)&v20[8 * v48 + 56] = 0;
        v49 = (unint64_t *)(v19 + 8 * v48 + 8736);
        v50 = v47 - 1 - v48;
        while (v50)
        {
          v31 += 1024;
          v52 = *v49++;
          v51 = v52;
          LODWORD(v48) = v48 + 1;
          --v50;
          if (v52)
          {
            v30 = __rbit64(v51);
            *(_DWORD *)(v19 + 8704) = v48;
            *(_QWORD *)(v19 + 8696) = v31;
            goto LABEL_18;
          }
        }
        *(_DWORD *)(v19 + 8704) = v47;
      }
    }
    *v20 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_11:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 154;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 0;
  *(_QWORD *)(casual + 24) = a4;
  *(_QWORD *)(casual + 32) = 0;
  v23 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v23 - 8);
    *(_DWORD *)(a2 + 92) = v23 - 1;
    v25 = *(_QWORD *)(a2 + 64);
    goto LABEL_14;
  }
  v24 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v24 != *(_DWORD *)(a2 + 72))
  {
    v25 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v25 + 8 * v24) = 0;
    *(_DWORD *)(a2 + 76) = v24 + 1;
    goto LABEL_14;
  }
  v34 = v24 + (v24 >> 2);
  if (v34 >= 0x10)
    v35 = v34 + 1;
  else
    v35 = 16;
  if (v35 <= v24 + 1)
    v36 = v24 + 1;
  else
    v36 = v35;
  if (v36 >> 29)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x197F73790);
  }
  v37 = *(const void **)(a2 + 64);
  v38 = (void *)WTF::fastMalloc((WTF *)(8 * v36));
  *(_DWORD *)(a2 + 72) = v36;
  *(_QWORD *)(a2 + 64) = v38;
  memcpy(v38, v37, 8 * v24);
  if (v37)
  {
    if (*(const void **)(a2 + 64) == v37)
    {
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v37, v39, v40, v41, v42, v43, v44, v45);
  }
  v46 = *(unsigned int *)(a2 + 76);
  v25 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v25 + 8 * v46) = 0;
  *(_DWORD *)(a2 + 76) = v46 + 1;
LABEL_14:
  *(_QWORD *)(v25 + 8 * v24) = casual;
  *(_DWORD *)(casual + 8) = v24;
  v53 = casual;
  v26 = (char **)(a1 + 8);
  v27 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(a1 + 16))
  {
    v33 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v27 + 1, (unint64_t)&v53);
    v27 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27) = *(_QWORD *)v33;
    v28 = v53;
  }
  else
  {
    *(_QWORD *)&(*v26)[8 * v27] = casual;
    v28 = casual;
  }
  *(_DWORD *)(a1 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = a1;
  return casual;
}

uint64_t JSC::B3::BasicBlock::appendNewControlValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t casual;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if ((_DWORD)a3 != 155)
  {
    __break(0xC471u);
    JUMPOUT(0x197F73AC0);
  }
  v13 = *a6;
  v12 = a6[1];
  v14 = *a7;
  v15 = a7[1];
  v16 = (uint64_t *)(a1 + 56);
  v17 = *(_DWORD *)(a1 + 68);
  if (v17 >= 2)
  {
    v18 = *v16;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 64) < 2u)
  {
    v57 = *a7;
    v58 = *a6;
    v56 = a6[1];
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    v17 = *(_DWORD *)(a1 + 68);
    v18 = *(_QWORD *)(a1 + 56);
    if (v17 == 2)
    {
      LOBYTE(v12) = v56;
      v14 = v57;
      v13 = v58;
      goto LABEL_7;
    }
    LOBYTE(v12) = v56;
    v14 = v57;
    v13 = v58;
  }
  else
  {
    v18 = *v16;
  }
  v19 = 16 * v17;
  do
  {
    v20 = v18 + v19;
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 0;
    v19 += 16;
  }
  while (v19 != 32);
LABEL_7:
  *(_DWORD *)(a1 + 68) = 2;
  *(_QWORD *)v18 = v13;
  *(_BYTE *)(v18 + 8) = v12;
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v21 + 16) = v14;
  *(_BYTE *)(v21 + 24) = v15;
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v22)
  {
    v23 = (_BYTE *)(v22 + 8672);
    *(_BYTE *)(v22 + 8672) = 1;
    v24 = *(unsigned int *)(v22 + 8688);
    if ((_DWORD)v24)
    {
      *(_DWORD *)(v22 + 8688) = v24 - *(_DWORD *)(v22 + 8692);
      casual = *(_QWORD *)(v22 + 8680) - v24;
LABEL_10:
      *v23 = 0;
      goto LABEL_11;
    }
    v33 = *(_QWORD *)(v22 + 8712);
    v34 = *(_QWORD *)(v22 + 8696);
    if (v33)
    {
LABEL_18:
      v35 = __clz(v33);
      *(_QWORD *)(v22 + 8712) = v33 & ~(0x8000000000000000 >> v35);
      casual = v34 + 16 * v35;
      goto LABEL_10;
    }
    if (*(_BYTE *)(v22 + 8677) == 6)
    {
      v50 = *(_DWORD *)(v22 + 8708);
      v51 = *(unsigned int *)(v22 + 8704);
      if (v51 < v50)
      {
        *(_QWORD *)&v23[8 * v51 + 56] = 0;
        v52 = (unint64_t *)(v22 + 8 * v51 + 8736);
        v53 = v50 - 1 - v51;
        while (v53)
        {
          v34 += 1024;
          v55 = *v52++;
          v54 = v55;
          LODWORD(v51) = v51 + 1;
          --v53;
          if (v55)
          {
            v33 = __rbit64(v54);
            *(_DWORD *)(v22 + 8704) = v51;
            *(_QWORD *)(v22 + 8696) = v34;
            goto LABEL_18;
          }
        }
        *(_DWORD *)(v22 + 8704) = v50;
      }
    }
    *v23 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_11:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 155;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a4;
  *(_QWORD *)(casual + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)casual, 1, a5);
  v26 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v26 - 8);
    *(_DWORD *)(a2 + 92) = v26 - 1;
    v28 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v27 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v27 == *(_DWORD *)(a2 + 72))
    {
      v37 = v27 + (v27 >> 2);
      if (v37 >= 0x10)
        v38 = v37 + 1;
      else
        v38 = 16;
      if (v38 <= v27 + 1)
        v39 = v27 + 1;
      else
        v39 = v38;
      if (v39 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197F73B70);
      }
      v40 = *(const void **)(a2 + 64);
      v41 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
      *(_DWORD *)(a2 + 72) = v39;
      *(_QWORD *)(a2 + 64) = v41;
      memcpy(v41, v40, 8 * v27);
      if (v40)
      {
        if (*(const void **)(a2 + 64) == v40)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v40, v42, v43, v44, v45, v46, v47, v48);
      }
      v49 = *(unsigned int *)(a2 + 76);
      v28 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v28 + 8 * v49) = 0;
      *(_DWORD *)(a2 + 76) = v49 + 1;
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v28 + 8 * v27) = 0;
      *(_DWORD *)(a2 + 76) = v27 + 1;
    }
  }
  *(_QWORD *)(v28 + 8 * v27) = casual;
  *(_DWORD *)(casual + 8) = v27;
  v59 = casual;
  v29 = (char **)(a1 + 8);
  v30 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(a1 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v59);
    v30 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) = *(_QWORD *)v36;
    v31 = v59;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = casual;
    v31 = casual;
  }
  *(_DWORD *)(a1 + 20) = v30 + 1;
  *(_QWORD *)(v31 + 32) = a1;
  return casual;
}

uint64_t JSC::B3::BlockInsertionSet::splitForward(uint64_t a1, uint64_t a2, _DWORD *a3, JSC::B3::InsertionSet *a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const void *v63;
  int v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;

  v5 = *a3;
  if (*(_DWORD *)(a2 + 20) <= v5)
    goto LABEL_81;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
  v11 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(a1, *(_DWORD *)a2, a5);
  v12 = v11;
  v13 = (*a3 + 1);
  v14 = *(unsigned int *)(v11 + 20);
  if (v14 < v13)
  {
    v15 = *(unsigned int *)(v11 + 16);
    if (v15 < v13)
    {
      v16 = v15 + (v15 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v13)
        v18 = (*a3 + 1);
      else
        v18 = v17;
      if (v18 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197F74020);
      }
      v19 = *(const void **)(v11 + 8);
      v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
      *(_DWORD *)(v12 + 16) = v18;
      *(_QWORD *)(v12 + 8) = v20;
      memcpy(v20, v19, 8 * v14);
      if (v19)
      {
        if (*(const void **)(v12 + 8) == v19)
        {
          *(_QWORD *)(v12 + 8) = 0;
          *(_DWORD *)(v12 + 16) = 0;
        }
        WTF::fastFree((unint64_t)v19, v21, v22, v23, v24, v25, v26, v27);
      }
    }
  }
  *(_DWORD *)(v12 + 20) = v13;
  v28 = *a3;
  if (!(_DWORD)v28)
    goto LABEL_25;
  v29 = *(_DWORD *)(a2 + 20);
  v30 = v28 - 1;
  if (v29 <= v13)
  {
    if (v30 < v29)
    {
      v31 = v28 - 1;
      do
        *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v31) = *(_QWORD *)(*(_QWORD *)(a2 + 8)
                                                                                + 8 * v31);
      while ((unint64_t)v31--);
      goto LABEL_25;
    }
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x197F74028);
  }
  if (v30 >= v29)
    goto LABEL_79;
  if (v30 >= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197F74030);
  }
  v33 = v28 - 1;
  do
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a2 + 8)
                                                                            + 8 * v33);
  while ((unint64_t)v33--);
LABEL_25:
  v35 = *(_QWORD *)(a1 + 152);
  v36 = *(_QWORD *)(v10 + 24);
  v43 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v43 = off_1E357F5F0;
  *(_DWORD *)(v43 + 8) = -1;
  *(_WORD *)(v43 + 12) = 154;
  *(_DWORD *)(v43 + 16) = 0;
  *(_BYTE *)(v43 + 20) = 0;
  *(_QWORD *)(v43 + 24) = v36;
  *(_QWORD *)(v43 + 32) = 0;
  v44 = *(unsigned int *)(v35 + 92);
  if ((_DWORD)v44)
  {
    v45 = *(_QWORD *)(*(_QWORD *)(v35 + 80) + 8 * v44 - 8);
    *(_DWORD *)(v35 + 92) = v44 - 1;
    v46 = *(_QWORD *)(v35 + 64);
    goto LABEL_28;
  }
  v45 = *(unsigned int *)(v35 + 76);
  if ((_DWORD)v45 != *(_DWORD *)(v35 + 72))
  {
    v46 = *(_QWORD *)(v35 + 64);
    *(_QWORD *)(v46 + 8 * v45) = 0;
    *(_DWORD *)(v35 + 76) = v45 + 1;
    goto LABEL_28;
  }
  v77 = v45 + (v45 >> 2);
  if (v77 >= 0x10)
    v78 = v77 + 1;
  else
    v78 = 16;
  if (v78 <= v45 + 1)
    v79 = v45 + 1;
  else
    v79 = v78;
  if (v79 >> 29)
  {
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x197F74010);
  }
  v80 = *(const void **)(v35 + 64);
  v81 = (void *)WTF::fastMalloc((WTF *)(8 * v79));
  *(_DWORD *)(v35 + 72) = v79;
  *(_QWORD *)(v35 + 64) = v81;
  memcpy(v81, v80, 8 * v45);
  if (v80)
  {
    if (*(const void **)(v35 + 64) == v80)
    {
      *(_QWORD *)(v35 + 64) = 0;
      *(_DWORD *)(v35 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v80, v82, v37, v38, v39, v40, v41, v42);
  }
  v83 = *(unsigned int *)(v35 + 76);
  v46 = *(_QWORD *)(v35 + 64);
  *(_QWORD *)(v46 + 8 * v83) = 0;
  *(_DWORD *)(v35 + 76) = v83 + 1;
LABEL_28:
  *(_DWORD *)(v43 + 8) = v45;
  *(_QWORD *)(v46 + 8 * v45) = v43;
  v47 = *a3;
  if (*(_DWORD *)(v12 + 20) <= v47)
  {
    __break(0xC471u);
    JUMPOUT(0x197F74018);
  }
  *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v47) = v43;
  v48 = (uint64_t *)(v12 + 56);
  if (*(_DWORD *)(v12 + 68))
  {
    v50 = *v48;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v12 + 64))
  {
    v49 = 0;
    v50 = *v48;
  }
  else
  {
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, (void *)1, v37, v38, v39, v40, v41, v42);
    v49 = *(_DWORD *)(v12 + 68);
    v50 = *(_QWORD *)(v12 + 56);
    if (v49 == 1)
      goto LABEL_34;
  }
  v51 = 16 * v49;
  do
  {
    v52 = v51;
    v53 = v50 + v51;
    *(_QWORD *)v53 = 0;
    *(_BYTE *)(v53 + 8) = 0;
    v51 = v52 + 16;
  }
  while (v52);
LABEL_34:
  *(_DWORD *)(v12 + 68) = 1;
  *(_QWORD *)v50 = a2;
  *(_BYTE *)(v50 + 8) = 0;
  if (a4)
    JSC::B3::InsertionSet::execute(a4, (JSC::B3::BasicBlock *)v12);
  v54 = *a3;
  memmove(*(void **)(a2 + 8), (const void *)(*(_QWORD *)(a2 + 8) + 8 * v54), 8 * *(unsigned int *)(a2 + 20) - 8 * v54);
  *(_DWORD *)(a2 + 20) -= v54;
  *a3 = 0;
  v62 = *(_QWORD *)(v12 + 24);
  if (v62 != v12 + 40)
  {
    if (v62)
    {
      *(_QWORD *)(v12 + 24) = 0;
      *(_DWORD *)(v12 + 32) = 0;
      WTF::fastFree(v62, v55, v56, v57, v58, v59, v60, v61);
    }
    *(_QWORD *)(v12 + 24) = v12 + 40;
    v62 = v12 + 40;
  }
  v63 = *(const void **)(a2 + 24);
  if (v63 == (const void *)(a2 + 40))
  {
    memcpy((void *)(v12 + 40), v63, 8 * *(unsigned int *)(a2 + 36));
    v64 = *(_DWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(v12 + 24) = v63;
    v64 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 2;
    v62 = (unint64_t)v63;
  }
  v65 = (_QWORD *)(a2 + 24);
  *(_DWORD *)(v12 + 32) = v64;
  v66 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(v12 + 36) = v66;
  v85 = v12;
  v67 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v67)
  {
    v68 = (_QWORD *)*v65;
    v69 = *(unsigned int *)(a2 + 36);
    while (*v68 != v12)
    {
      ++v68;
      if (!--v69)
        goto LABEL_43;
    }
  }
  else
  {
LABEL_43:
    if ((_DWORD)v67 == *(_DWORD *)(a2 + 32))
    {
      v84 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v67 + 1, (unint64_t)&v85);
      v67 = *(unsigned int *)(a2 + 36);
      *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v67) = *v84;
    }
    else
    {
      *(_QWORD *)(*v65 + 8 * v67) = v12;
    }
    *(_DWORD *)(a2 + 36) = v67 + 1;
    v62 = *(_QWORD *)(v12 + 24);
    v66 = *(_DWORD *)(v12 + 36);
  }
  if (v66)
  {
    v70 = v62 + 8 * v66;
    do
    {
      v71 = *(_QWORD *)v62;
      v72 = *(unsigned int *)(*(_QWORD *)v62 + 68);
      if ((_DWORD)v72)
      {
        v73 = 0;
        v74 = 16 * v72;
        do
        {
          v75 = *(_QWORD *)(v71 + 56);
          if (*(_QWORD *)(v75 + v73) == a2)
            *(_QWORD *)(v75 + v73) = v12;
          v73 += 16;
        }
        while (v74 != v73);
      }
      v62 += 8;
    }
    while (v62 != v70);
  }
  return v12;
}

void JSC::B3::BottomTupleValue::~BottomTupleValue(JSC::B3::BottomTupleValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::BottomTupleValue::~BottomTupleValue(JSC::B3::BottomTupleValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::BottomTupleValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%s", "<<");
  WTF::PrintStream::printf(v7, "%u", *(_DWORD *)(a1 + 8));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

unsigned int *JSC::B3::breakCriticalEdges(JSC::B3 *this, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  WTF *v63;
  unsigned int v64;
  char *v65;
  _QWORD v66[2];
  _QWORD v67[17];
  _QWORD v68[2];

  v9 = (_QWORD *)((char *)this + 48);
  v65 = (char *)this + 48;
  v66[0] = v67;
  v66[1] = 8;
  v67[16] = this;
  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (!*(_QWORD *)(*v9 + 8 * v11))
    {
      if (v10 == ++v11)
        goto LABEL_5;
    }
    if ((_DWORD)v10 != (_DWORD)v11)
    {
      v64 = *((_DWORD *)this + 15);
      v20 = v64;
      v21 = v64;
      while (1)
      {
        if (v21 <= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x197F74878);
        }
        v22 = *(_QWORD *)(*v9 + 8 * v11);
        v23 = *(unsigned int *)(v22 + 68);
        if (v23 > 1)
          break;
        v24 = *(unsigned int *)(v22 + 20);
        if (!(_DWORD)v24)
        {
LABEL_85:
          __break(0xC471u);
          JUMPOUT(0x197F74870);
        }
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v24 - 8) + 16))
        {
          v21 = v20;
          if ((_DWORD)v23)
            break;
        }
LABEL_54:
        v11 = (v11 + 1);
        if (v21 > v11)
        {
          while (!*(_QWORD *)(*v9 + 8 * v11))
          {
            if (v21 == ++v11)
            {
              LODWORD(v11) = v21;
              break;
            }
          }
        }
        if ((_DWORD)v10 == (_DWORD)v11)
          goto LABEL_5;
      }
      v25 = 0;
      while (1)
      {
        if (v25 >= *(unsigned int *)(v22 + 68))
          goto LABEL_85;
        v26 = (unsigned int **)(*(_QWORD *)(v22 + 56) + 16 * v25);
        if ((*v26)[9] < 2)
          goto LABEL_18;
        v27 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)&v65, **v26, *((double *)*v26 + 13));
        if (!(*v26)[5])
        {
          __break(0xC471u);
          JUMPOUT(0x197F74880);
        }
        v28 = v27;
        v29 = *(_QWORD *)(**((_QWORD **)*v26 + 1) + 24);
        v30 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v30 = off_1E357F5F0;
        *(_DWORD *)(v30 + 8) = -1;
        *(_WORD *)(v30 + 12) = 154;
        *(_DWORD *)(v30 + 16) = 0;
        *(_BYTE *)(v30 + 20) = 0;
        *(_QWORD *)(v30 + 24) = v29;
        *(_QWORD *)(v30 + 32) = 0;
        v31 = *((unsigned int *)this + 23);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v31 - 8);
          *((_DWORD *)this + 23) = v31 - 1;
          v33 = *((_QWORD *)this + 8);
        }
        else
        {
          v32 = *((unsigned int *)this + 19);
          if ((_DWORD)v32 == *((_DWORD *)this + 18))
          {
            v56 = v32 + (v32 >> 2);
            if (v56 >= 0x10)
              v57 = v56 + 1;
            else
              v57 = 16;
            if (v57 <= v32 + 1)
              v57 = v32 + 1;
            if (v57 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x197F74888);
            }
            v62 = v57;
            v63 = (WTF *)*((_QWORD *)this + 8);
            v58 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
            *((_DWORD *)this + 18) = v62;
            *((_QWORD *)this + 8) = v58;
            memcpy(v58, v63, 8 * v32);
            if (v63)
            {
              if (*((WTF **)this + 8) == v63)
              {
                *((_QWORD *)this + 8) = 0;
                *((_DWORD *)this + 18) = 0;
              }
              WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
            }
            v59 = *((unsigned int *)this + 19);
            v33 = *((_QWORD *)this + 8);
            *(_QWORD *)(v33 + 8 * v59) = 0;
            *((_DWORD *)this + 19) = v59 + 1;
          }
          else
          {
            v33 = *((_QWORD *)this + 8);
            *(_QWORD *)(v33 + 8 * v32) = 0;
            *((_DWORD *)this + 19) = v32 + 1;
          }
        }
        *(_DWORD *)(v30 + 8) = v32;
        *(_QWORD *)(v33 + 8 * v32) = v30;
        v68[0] = v30;
        v34 = (char **)(v28 + 8);
        v35 = *(unsigned int *)(v28 + 20);
        if ((_DWORD)v35 == *(_DWORD *)(v28 + 16))
        {
          v55 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)v68);
          v35 = *(unsigned int *)(v28 + 20);
          *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8 * v35) = *(_QWORD *)v55;
          v30 = v68[0];
        }
        else
        {
          *(_QWORD *)&(*v34)[8 * v35] = v30;
        }
        *(_DWORD *)(v28 + 20) = v35 + 1;
        *(_QWORD *)(v30 + 32) = v28;
        v36 = *v26;
        v37 = (uint64_t *)(v28 + 56);
        if (*(_DWORD *)(v28 + 68))
        {
          v39 = *v37;
          goto LABEL_31;
        }
        if (*(_DWORD *)(v28 + 64))
        {
          v38 = 0;
          v39 = *v37;
        }
        else
        {
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, (void *)1, a3, a4, a5, a6, a7, a8);
          v38 = *(unsigned int *)(v28 + 68);
          v39 = *(_QWORD *)(v28 + 56);
          if ((_DWORD)v38 == 1)
            goto LABEL_31;
        }
        v40 = 16 * v38;
        do
        {
          v41 = v40;
          v42 = v39 + v40;
          *(_QWORD *)v42 = 0;
          *(_BYTE *)(v42 + 8) = 0;
          v40 = v41 + 16;
        }
        while (v41);
LABEL_31:
        *(_DWORD *)(v28 + 68) = 1;
        *(_QWORD *)v39 = v36;
        *(_BYTE *)(v39 + 8) = 0;
        v68[0] = v22;
        v43 = (_QWORD *)(v28 + 24);
        v44 = *(unsigned int *)(v28 + 36);
        if ((_DWORD)v44)
        {
          v45 = (_QWORD *)*v43;
          v46 = *(unsigned int *)(v28 + 36);
          while (*v45 != v22)
          {
            ++v45;
            if (!--v46)
              goto LABEL_35;
          }
        }
        else
        {
LABEL_35:
          if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
          {
            v60 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)v68);
            v44 = *(unsigned int *)(v28 + 36);
            *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8 * v44) = *v60;
          }
          else
          {
            *(_QWORD *)(*v43 + 8 * v44) = v22;
          }
          *(_DWORD *)(v28 + 36) = v44 + 1;
        }
        v47 = *v26;
        v48 = (*v26)[9];
        if ((_DWORD)v48)
        {
          v49 = v47 + 6;
          v50 = (_QWORD *)*((_QWORD *)v47 + 3);
          if (*v50 == v22)
          {
            v51 = 0;
LABEL_43:
            v50[v51] = v50[v48 - 1];
            v48 = (v48 - 1);
            v47[9] = v48;
          }
          else
          {
            v51 = 0;
            while (v48 - 1 != v51)
            {
              v52 = v50[++v51];
              if (v52 == v22)
                goto LABEL_43;
            }
          }
          LODWORD(v53) = v48;
          v68[0] = v28;
          if ((_DWORD)v48)
          {
            v54 = 0;
            while (*(_QWORD *)(*v49 + 8 * v54) != v28)
            {
              if (v48 == ++v54)
                goto LABEL_48;
            }
            goto LABEL_51;
          }
          v48 = 0;
        }
        else
        {
          v48 = 0;
          LODWORD(v53) = 0;
          v68[0] = v28;
          v49 = v47 + 6;
        }
LABEL_48:
        if ((_DWORD)v53 == v47[8])
        {
          v61 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v48 + 1, (unint64_t)v68);
          v53 = v47[9];
          *(_QWORD *)(*((_QWORD *)v47 + 3) + 8 * v53) = *v61;
        }
        else
        {
          *(_QWORD *)(*v49 + 8 * v48) = v28;
        }
        v47[9] = v53 + 1;
LABEL_51:
        *v26 = (unsigned int *)v28;
LABEL_18:
        if (++v25 == v23)
        {
          v20 = *((_DWORD *)this + 15);
          v21 = v20;
          LODWORD(v10) = v64;
          goto LABEL_54;
        }
      }
    }
  }
LABEL_5:
  if (JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute((unsigned int *)&v65, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    JSC::B3::Procedure::invalidateCFG(this, (unint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  return WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v66, v12, v13, v14, v15, v16, v17, v18);
}

BOOL JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  char *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  int v33;
  uint64_t v34;
  unint64_t *v35;
  char *v36;
  unint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v49;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = a1[5];
  if (!(_DWORD)v8)
    return (_DWORD)v8 != 0;
  v11 = (_QWORD *)*((_QWORD *)a1 + 1);
  v12 = (char *)&v11[2 * v8];
  v13 = v11 + 5;
  do
  {
    if ((unint64_t)(v12 - (char *)v11) < 0x11)
      break;
    v14 = 0;
    v15 = (v12 - (char *)v11) >> 4;
LABEL_6:
    v16 = 2 * v15;
    do
    {
      --v15;
      v17 = &v11[v16];
      v18 = v11[v16 - 2];
      v19 = v11[v16 - 4];
      if (v18 < v19)
      {
        v20 = *(v17 - 1);
        v21 = *(v17 - 3);
        *(v17 - 2) = v19;
        *(v17 - 1) = v21;
        *(v17 - 4) = v18;
        *(v17 - 3) = v20;
        v14 = 1;
        if (v15 > 1)
          goto LABEL_6;
        goto LABEL_11;
      }
      v16 -= 2;
    }
    while (v15 > 1);
    if ((v14 & 1) == 0)
      break;
LABEL_11:
    v11 += 2;
    if ((unint64_t)(v12 - (char *)v11) < 0x11)
      break;
    v22 = 0;
    v23 = (v12 - (char *)v11) >> 4;
    if (v23 <= 2)
      v23 = 2;
    v24 = v23 - 1;
    v25 = v13;
    do
    {
      v26 = *(v25 - 1);
      v27 = *(v25 - 3);
      if (v26 < v27)
      {
        v28 = *v25;
        *(v25 - 1) = v27;
        *v25 = *(v25 - 2);
        *(v25 - 3) = v26;
        *(v25 - 2) = v28;
        v22 = 1;
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    v12 -= 16;
    v13 += 2;
  }
  while ((v22 & 1) != 0);
  WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(_QWORD *)a1, a1 + 2, a3, a4, a5, a6, a7, a8);
  v29 = *(_QWORD *)a1;
  v30 = **(unint64_t ***)a1;
  v31 = *(unsigned int *)(*(_QWORD *)a1 + 12);
  v32 = &v30[v31];
  if ((_DWORD)v31)
  {
    v33 = 0;
    v34 = **(_QWORD **)a1;
    v35 = &v30[v31];
    v36 = (char *)v35;
    while (*v30)
    {
LABEL_24:
      ++v30;
      v34 += 8;
      if (v30 >= v32)
      {
        v30 = *(unint64_t **)v29;
        v52 = *(unsigned int *)(v29 + 12);
        LODWORD(v31) = *(_DWORD *)(v29 + 12);
        v32 = (unint64_t *)v36;
        goto LABEL_45;
      }
    }
    v37 = v30;
    if (v36 != (char *)(*(_QWORD *)v29 + 8 * *(unsigned int *)(v29 + 12)))
    {
      if (v30 != v35)
      {
        v38 = v34 - (_QWORD)v35;
        memmove(v36, v35, v34 - (_QWORD)v35);
        v36 += v38;
        v46 = *v30;
        *v30 = 0;
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 56);
          if (v46 + 72 != v47 && v47 != 0)
          {
            *(_QWORD *)(v46 + 56) = 0;
            *(_DWORD *)(v46 + 64) = 0;
            WTF::fastFree(v47, v39, v40, v41, v42, v43, v44, v45);
          }
          v49 = *(_QWORD *)(v46 + 24);
          if (v46 + 40 != v49 && v49 != 0)
          {
            *(_QWORD *)(v46 + 24) = 0;
            *(_DWORD *)(v46 + 32) = 0;
            WTF::fastFree(v49, v39, v40, v41, v42, v43, v44, v45);
          }
          v51 = *(_QWORD *)(v46 + 8);
          if (v51)
          {
            *(_QWORD *)(v46 + 8) = 0;
            *(_DWORD *)(v46 + 16) = 0;
            WTF::fastFree(v51, v39, v40, v41, v42, v43, v44, v45);
          }
          WTF::fastFree(v46, v39, v40, v41, v42, v43, v44, v45);
        }
        goto LABEL_44;
      }
      v37 = (unint64_t *)v36;
    }
    *v30 = 0;
    v36 = (char *)v37;
LABEL_44:
    v35 = v30 + 1;
    ++v33;
    goto LABEL_24;
  }
  v52 = 0;
  v33 = 0;
  v35 = &v30[v31];
LABEL_45:
  v53 = &v30[v52];
  if (v35 != v53)
  {
    memmove(v32, v35, (char *)v53 - (char *)v35);
    LODWORD(v31) = *(_DWORD *)(v29 + 12);
  }
  *(_DWORD *)(v29 + 12) = v31 - v33;
  v54 = *(unsigned int *)(*(_QWORD *)a1 + 12);
  if ((_DWORD)v54)
  {
    v55 = 0;
    v56 = **(_QWORD **)a1;
    do
    {
      **(_DWORD **)(v56 + 8 * v55) = v55;
      ++v55;
    }
    while (v54 != v55);
  }
  return (_DWORD)v8 != 0;
}

void JSC::B3::CCallValue::~CCallValue(JSC::B3::CCallValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::CCallValue::~CCallValue(JSC::B3::CCallValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::B3::CCallValue::appendArgs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(const void **)a2;
    v5 = *((unsigned int *)result + 18);
    v6 = *((unsigned int *)result + 19);
    v7 = v6 + v2;
    if (v6 + v2 > v5)
    {
      v8 = v5 + (v5 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= v7)
        v10 = v6 + v2;
      else
        v10 = v9;
      v11 = (_QWORD *)result[8];
      if (v10 < 4)
      {
        v12 = result + 10;
        v3[8] = v3 + 10;
        *((_DWORD *)v3 + 18) = 3;
      }
      else
      {
        if (v10 >> 29)
          goto LABEL_21;
        v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)v3 + 18) = v10;
        v3[8] = v12;
      }
      memcpy(v12, v11, 8 * v6);
      if (v3 + 10 != v11 && v11)
      {
        if ((_QWORD *)v3[8] == v11)
        {
          v3[8] = 0;
          *((_DWORD *)v3 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v11, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    v20 = *((unsigned int *)v3 + 19);
    if (v7 >= v20)
    {
      result = memcpy((void *)(v3[8] + 8 * v20), v4, 8 * v2);
      *((_DWORD *)v3 + 19) = v7;
      return result;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197F74D84);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v13 = 16 * v9;
    v14 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 56);
        if (v15 + 72 != v16 && v16 != 0)
        {
          *(_QWORD *)(v15 + 56) = 0;
          *(_DWORD *)(v15 + 64) = 0;
          v23 = (WTF *)v15;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v15 = (unint64_t)v23;
        }
        v18 = *(_QWORD *)(v15 + 24);
        if (v15 + 40 != v18 && v18 != 0)
        {
          *(_QWORD *)(v15 + 24) = 0;
          *(_DWORD *)(v15 + 32) = 0;
          v22 = (WTF *)v15;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v15 = (unint64_t)v22;
        }
        v20 = *(_QWORD *)(v15 + 8);
        if (v20)
        {
          *(_QWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 16) = 0;
          v21 = (WTF *)v15;
          WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
          v15 = (unint64_t)v21;
        }
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

char *WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v31 = *((unsigned int *)a1 + 2);
      v32 = v31 + (v31 >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= a2)
        v34 = a2;
      else
        v34 = v33;
      if (v34 <= v31)
      {
        v43 = *a1;
      }
      else
      {
        if (v34 >> 29)
          goto LABEL_49;
        v35 = (char *)WTF::fastMalloc((WTF *)(8 * v34));
        *((_DWORD *)a1 + 2) = v34;
        *a1 = v35;
        memcpy(v35, v5, 8 * v6);
        v43 = *a1;
        if (v5)
        {
          if (v43 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
          v43 = *a1;
        }
      }
      return &v43[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
    }
  }
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 <= v7)
    return (char *)v3;
  if (v10 >> 29)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x197F750F8);
  }
  v11 = *((unsigned int *)a1 + 3);
  v12 = 8 * v10;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v13)
  {
LABEL_15:
    casual = (char *)bmalloc_allocate_casual(v12, 1);
    goto LABEL_20;
  }
  v14 = (unint64_t)(v12 + 15) >> 4;
  if (v10 <= 0x34)
  {
    v15 = 23 * v14 + 7;
  }
  else
  {
    if (v10 > 0x4E2)
      goto LABEL_15;
    v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
    if (*(_DWORD *)(v13 + 8052) <= v15)
      goto LABEL_15;
  }
  v17 = v13 + 8 * v15;
  v18 = v17 + 8064;
  *(_BYTE *)(v17 + 8064) = 1;
  v19 = *(unsigned int *)(v17 + 8080);
  if ((_DWORD)v19)
  {
    *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
    casual = (char *)(*(_QWORD *)(v18 + 8) - v19);
  }
  else
  {
    v28 = *(_QWORD *)(v18 + 40);
    v29 = *(_QWORD *)(v18 + 24);
    if (!v28)
    {
      if (*(_BYTE *)(v18 + 5) == 6)
      {
        v44 = *(unsigned int *)(v18 + 32);
        v45 = *(_DWORD *)(v18 + 36);
        if (v44 < v45)
        {
          *(_QWORD *)(v18 + 8 * v44 + 56) = 0;
          v46 = (unint64_t *)(8 * v15 + 8 * v44 + v13 + 8128);
          v47 = v45 - 1 - v44;
          while (v47)
          {
            v29 += 1024;
            v49 = *v46++;
            v48 = v49;
            LODWORD(v44) = v44 + 1;
            --v47;
            if (v49)
            {
              v28 = __rbit64(v48);
              *(_DWORD *)(v18 + 32) = v44;
              *(_QWORD *)(v18 + 24) = v29;
              goto LABEL_26;
            }
          }
          *(_DWORD *)(v18 + 32) = v45;
        }
      }
      *(_BYTE *)v18 = 0;
      goto LABEL_15;
    }
LABEL_26:
    v30 = __clz(v28);
    *(_QWORD *)(v18 + 40) = v28 & ~(0x8000000000000000 >> v30);
    casual = (char *)(v29 + 16 * v30);
  }
  *(_BYTE *)v18 = 0;
LABEL_20:
  *((_DWORD *)a1 + 2) = v10;
  *a1 = casual;
  memcpy(casual, v5, 8 * v11);
  if (v5)
  {
    if (*a1 == v5)
    {
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
    }
    WTF::fastFree((unint64_t)v5, v20, v21, v22, v23, v24, v25, v26);
  }
  return (char *)v3;
}

unint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v18 = *(_QWORD *)a1;
        return v18 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
      if (v15 < 3)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_13;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_13:
        v17 = 0;
        do
        {
          *(_OWORD *)(v16 + v17) = *(_OWORD *)(v10 + v17);
          v17 += 16;
        }
        while (16 * v11 != v17);
        v18 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v18 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v18 = *(_QWORD *)a1;
        }
        return v18 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x197F752BCLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= (unint64_t)a2)
    v23 = (unint64_t)a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    v24 = *(unsigned int *)(a1 + 12);
    if (v23 < 3)
    {
      v25 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v23 >> 28)
        goto LABEL_43;
      v25 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v23));
      *(_DWORD *)(a1 + 8) = v23;
      *(_QWORD *)a1 = v25;
    }
    if ((_DWORD)v24)
    {
      v26 = 16 * v24;
      v27 = (__int128 *)v10;
      do
      {
        v28 = *v27++;
        *v25++ = v28;
        v26 -= 16;
      }
      while (v26);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 3)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 2;
    goto LABEL_11;
  }
  if (!(v11 >> 28))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 3)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 2;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 3)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 2;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  uint64_t v22;
  int v23;
  char v24;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v22, v10);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v18 = *a3;
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v20 = v19;
  if (v18)
  {
    WTF::PrintStream::printf(v19, "%s", "#");
    WTF::PrintStream::printf(v20, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v19, "%s");
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t ***WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t ***result, uint64_t a2)
{
  uint64_t ***v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  uint64_t **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  uint64_t **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v20, v13);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v20, v18);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump(v4, v5);
      result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 += 2;
    }
    while (v4 != &(**v3)[2 * *((unsigned int *)*v3 + 3)]);
  }
  return result;
}

uint64_t JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;

  v4 = *((unsigned __int8 *)a1 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    if (v4 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197F75B20);
    }
    v6 = (WTF::PrintStream *)v5;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v7, "%s", "Rare");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    WTF::PrintStream::printf(v6, "%s", ":");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
  v8 = *a1;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v11 = v10;
  if (v8)
  {
    WTF::PrintStream::printf(v10, "%s", "#");
    WTF::PrintStream::printf(v11, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v10, "%s");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::Value::allocateSpace(int a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = 0;
  switch(a1)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 81:
    case 153:
    case 154:
    case 157:
    case 159:
      break;
    case 1:
    case 2:
    case 9:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 79:
    case 80:
    case 84:
    case 89:
    case 90:
    case 92:
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 141:
    case 143:
    case 147:
    case 152:
    case 155:
    case 156:
    case 158:
      v2 = 8;
      break;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 68:
    case 69:
    case 70:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 140:
    case 144:
    case 146:
    case 150:
    case 151:
      v2 = 16;
      break;
    case 62:
    case 71:
    case 72:
    case 142:
    case 148:
    case 149:
      v2 = 24;
      break;
    case 82:
    case 83:
    case 85:
    case 86:
    case 87:
    case 88:
    case 145:
      v2 = 40;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F75CC0);
  }
  v3 = v2 + a2;
  if (v3 <= 0x30)
    v4 = 48;
  else
    v4 = v3;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v5)
    return bmalloc_allocate_casual(v4, 1);
  v6 = (unint64_t)(v4 + 15) >> 4;
  if ((unint64_t)(v4 + 15) <= 0x1AF)
  {
    v7 = 23 * v6 + 7;
  }
  else
  {
    if ((unint64_t)(v4 + 15) >> 5 > 0x138)
      return bmalloc_allocate_casual(v4, 1);
    v7 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v6 + 626);
    if (*(_DWORD *)(v5 + 8052) <= v7)
      return bmalloc_allocate_casual(v4, 1);
  }
  v9 = v5 + 8 * v7;
  v10 = v9 + 8064;
  *(_BYTE *)(v9 + 8064) = 1;
  v11 = *(unsigned int *)(v9 + 8080);
  if ((_DWORD)v11)
  {
    *(_DWORD *)(v10 + 16) = v11 - *(_DWORD *)(v10 + 20);
    result = *(_QWORD *)(v10 + 8) - v11;
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 40);
    v13 = *(_QWORD *)(v10 + 24);
    if (!v12)
    {
      if (*(_BYTE *)(v10 + 5) == 6)
      {
        v15 = *(unsigned int *)(v10 + 32);
        v16 = *(_DWORD *)(v10 + 36);
        if (v15 < v16)
        {
          *(_QWORD *)(v10 + 8 * v15 + 56) = 0;
          v17 = (unint64_t *)(8 * v7 + 8 * v15 + v5 + 8128);
          v18 = v16 - 1 - v15;
          while (v18)
          {
            v13 += 1024;
            v20 = *v17++;
            v19 = v20;
            LODWORD(v15) = v15 + 1;
            --v18;
            if (v20)
            {
              v12 = __rbit64(v19);
              *(_DWORD *)(v10 + 32) = v15;
              *(_QWORD *)(v10 + 24) = v13;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v10 + 32) = v16;
        }
      }
      *(_BYTE *)v10 = 0;
      return bmalloc_allocate_casual(v4, 1);
    }
LABEL_15:
    v14 = __clz(v12);
    *(_QWORD *)(v10 + 40) = v12 & ~(0x8000000000000000 >> v14);
    result = v13 + 16 * v14;
  }
  *(_BYTE *)v10 = 0;
  return result;
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*>(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  switch((char)a2)
  {
    case 1:
    case 2:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 79:
    case 90:
    case 92:
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -122:
    case -121:
    case -120:
    case -119:
    case -118:
    case -117:
    case -115:
    case -113:
    case -109:
    case -101:
    case -98:
      *(_QWORD *)a1 = off_1E357F5F0;
      *(_DWORD *)(a1 + 8) = -1;
      *(_WORD *)(a1 + 12) = a2;
      *(_DWORD *)(a1 + 16) = JSC::B3::Value::typeFor(a2, a4, 0);
      *(_BYTE *)(a1 + 20) = 1;
      *(_QWORD *)(a1 + 24) = a3;
      *(_QWORD *)(a1 + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)a1, 1, a4);
      return a1;
    default:
      JSC::B3::Value::badKind(a2, 1);
  }
}

uint64_t *JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v5 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)result);
    v6[0] = a3;
    return WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v6, 1uLL);
  }
  else
  {
    v3 = 5;
    switch(*((_BYTE *)result + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v3 = 6;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v3 = 7;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v3 = 8;
        break;
      case 0x53:
        v3 = 22;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v3 = 14;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F760D4);
    }
    result[v3] = a3;
  }
  return result;
}

uint64_t JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(uint64_t a1, unsigned int a2, double a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF **v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF *v29;

  v13 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)v13 = -1;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v13 + 40;
  *(_QWORD *)(v13 + 32) = 2;
  *(_QWORD *)(v13 + 56) = v13 + 72;
  *(_QWORD *)(v13 + 64) = 2;
  *(double *)(v13 + 104) = a3;
  v28 = a2;
  v29 = (WTF *)v13;
  v14 = (_QWORD *)(a1 + 8);
  v15 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 16))
  {
    v25 = (_QWORD *)WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v28, v8, v9, v10, v11, v12);
    v16 = (WTF **)(v25 + 1);
    v19 = v25[1];
    v26 = *(unsigned int *)(a1 + 20);
    v27 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v26);
    *v27 = *v25;
    v18 = v27 + 1;
    LODWORD(v15) = v26;
  }
  else
  {
    v16 = &v29;
    v17 = (_QWORD *)(*v14 + 16 * v15);
    *v17 = a2;
    v18 = v17 + 1;
    v19 = v13;
  }
  *v16 = 0;
  *v18 = v19;
  *(_DWORD *)(a1 + 20) = v15 + 1;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    v21 = *((_QWORD *)v20 + 7);
    if ((WTF *)((char *)v20 + 72) != (WTF *)v21 && v21)
    {
      *((_QWORD *)v20 + 7) = 0;
      *((_DWORD *)v20 + 16) = 0;
      WTF::fastFree(v21, v6, v7, v8, v9, v10, v11, v12);
    }
    v22 = *((_QWORD *)v20 + 3);
    if ((WTF *)((char *)v20 + 40) != (WTF *)v22 && v22)
    {
      *((_QWORD *)v20 + 3) = 0;
      *((_DWORD *)v20 + 8) = 0;
      WTF::fastFree(v22, v6, v7, v8, v9, v10, v11, v12);
    }
    v23 = *((_QWORD *)v20 + 1);
    if (v23)
    {
      *((_QWORD *)v20 + 1) = 0;
      *((_DWORD *)v20 + 4) = 0;
      WTF::fastFree(v23, v6, v7, v8, v9, v10, v11, v12);
    }
    WTF::fastFree((unint64_t)v20, v6, v7, v8, v9, v10, v11, v12);
  }
  return v13;
}

uint64_t WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = result;
  v10 = *(uint64_t **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v10[2 * *(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - (_QWORD)v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v14 = a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 9)
  {
    v16 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_13:
    WTF::VectorMover<false,WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>>::move(v10, &v10[2 * v15], v16, a4, a5, a6, a7, a8);
    if ((uint64_t *)(v9 + 16) != v10 && v10)
    {
      if (*(uint64_t **)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v17, v18, v19, v20, v21, v22, v23);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(uint64_t **)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 9)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x197F76690);
      }
      v15 = WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    WTF::VectorMover<false,WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>>::move(v13, &v13[2 * v14], v15, a4, a5, a6, a7, a8);
    if ((uint64_t *)(a1 + 16) != v13 && v13)
    {
      if (*(uint64_t **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v13, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void WTF::VectorMover<false,WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>>::move(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      v12 = v10[1];
      v10[1] = 0;
      *v8 = v11;
      v8[1] = v12;
      v13 = v10[1];
      v10[1] = 0;
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 56);
        if (v13 + 72 != v14 && v14 != 0)
        {
          *(_QWORD *)(v13 + 56) = 0;
          *(_DWORD *)(v13 + 64) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v16 = *(_QWORD *)(v13 + 24);
        if (v13 + 40 != v16 && v16 != 0)
        {
          *(_QWORD *)(v13 + 24) = 0;
          *(_DWORD *)(v13 + 32) = 0;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
        }
        v18 = *(_QWORD *)(v13 + 8);
        if (v18)
        {
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 2;
      v8 += 2;
    }
    while (v10 != a2);
  }
}

uint64_t JSC::B3::Value::Value<>(uint64_t a1, __int16 a2, uint64_t a3)
{
  switch((char)a2)
  {
    case 0:
    case 13:
    case -103:
    case -102:
    case -99:
    case -98:
    case -97:
      *(_QWORD *)a1 = off_1E357F5F0;
      *(_DWORD *)(a1 + 8) = -1;
      *(_WORD *)(a1 + 12) = a2;
      *(_DWORD *)(a1 + 16) = JSC::B3::Value::typeFor(a2, 0, 0);
      *(_BYTE *)(a1 + 20) = 0;
      *(_QWORD *)(a1 + 24) = a3;
      *(_QWORD *)(a1 + 32) = 0;
      if (*(unsigned __int8 *)(a1 + 12) >= 0xA0u)
      {
        __break(0xC471u);
        JUMPOUT(0x197F76810);
      }
      return a1;
    default:
      JSC::B3::Value::badKind(a2, 0);
  }
}

unint64_t WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v45;
  unint64_t v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  void *v53;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = v12 + v8;
    if (v12 + v8 > v11)
    {
      v49 = v11 + (v11 >> 2);
      if (v49 >= 0x10)
        v50 = v49 + 1;
      else
        v50 = 16;
      if (v50 <= v13)
        v51 = v12 + v8;
      else
        v51 = v50;
      if (v51 >> 29)
      {
LABEL_79:
        __break(0xC471u);
        JUMPOUT(0x197F76D9CLL);
      }
      v52 = *(_QWORD **)a1;
      v53 = (void *)WTF::fastMalloc((WTF *)(8 * v51));
      *(_DWORD *)(a1 + 8) = v51;
      *(_QWORD *)a1 = v53;
      memcpy(v53, v52, 8 * v12);
      if (v52)
      {
        if (*(_QWORD **)a1 == v52)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * v13 - 8 * *(unsigned int *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = v13;
    v14 = (v12 + v8);
    v15 = ~v8;
    v16 = v8;
    do
    {
      --v16;
      v17 = a2[3];
      if (v16 >= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x197F76DACLL);
      }
      v18 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v16) + v16;
      v19 = v14 - 1;
      if (v14 - 1 > v18)
      {
        v20 = v14 + v15;
        do
        {
          v21 = *(unsigned int *)(a1 + 12);
          if (v20 >= v21)
            goto LABEL_79;
          if (v19 >= v21)
          {
            __break(0xC471u);
            JUMPOUT(0x197F76DA4);
          }
          v22 = *(_QWORD **)a1;
          v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v20);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = 0;
          v24 = v22[v19];
          v22[v19] = v23;
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 56);
            if (v24 + 72 != v25 && v25 != 0)
            {
              *(_QWORD *)(v24 + 56) = 0;
              *(_DWORD *)(v24 + 64) = 0;
              WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
            }
            v27 = *(_QWORD *)(v24 + 24);
            if (v24 + 40 != v27 && v27 != 0)
            {
              *(_QWORD *)(v24 + 24) = 0;
              *(_DWORD *)(v24 + 32) = 0;
              WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
            }
            v29 = *(_QWORD *)(v24 + 8);
            if (v29)
            {
              *(_QWORD *)(v24 + 8) = 0;
              *(_DWORD *)(v24 + 16) = 0;
              WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
          }
          --v19;
          --v20;
        }
        while (v19 > v18);
        v17 = a2[3];
      }
      if (v16 >= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x197F76DB4);
      }
      if (v18 >= *(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197F76DBCLL);
      }
      v14 = v18;
      v30 = *(_QWORD *)a2 + 16 * v16;
      v31 = *(_QWORD **)a1;
      v32 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      v33 = v31[v18];
      v31[v18] = v32;
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 56);
        if (v33 + 72 != v34 && v34 != 0)
        {
          *(_QWORD *)(v33 + 56) = 0;
          *(_DWORD *)(v33 + 64) = 0;
          WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
        }
        v36 = *(_QWORD *)(v33 + 24);
        if (v33 + 40 != v36 && v36 != 0)
        {
          *(_QWORD *)(v33 + 24) = 0;
          *(_DWORD *)(v33 + 32) = 0;
          WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
        }
        v38 = *(_QWORD *)(v33 + 8);
        if (v38)
        {
          *(_QWORD *)(v33 + 8) = 0;
          *(_DWORD *)(v33 + 16) = 0;
          WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v15;
    }
    while (v16);
    v39 = a2[3];
    if ((_DWORD)v39)
    {
      v40 = 16 * v39;
      v41 = (unint64_t *)(*(_QWORD *)a2 + 8);
      do
      {
        v42 = *v41;
        *v41 = 0;
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 56);
          if (v42 + 72 != v43 && v43 != 0)
          {
            *(_QWORD *)(v42 + 56) = 0;
            *(_DWORD *)(v42 + 64) = 0;
            WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
          }
          v45 = *(_QWORD *)(v42 + 24);
          if (v42 + 40 != v45 && v45 != 0)
          {
            *(_QWORD *)(v42 + 24) = 0;
            *(_DWORD *)(v42 + 32) = 0;
            WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
          }
          v47 = *(_QWORD *)(v42 + 8);
          if (v47)
          {
            *(_QWORD *)(v42 + 8) = 0;
            *(_DWORD *)(v42 + 16) = 0;
            WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
        }
        v41 += 2;
        v40 -= 16;
      }
      while (v40);
    }
    a2[3] = 0;
  }
  return v8;
}

uint64_t JSC::B3::canonicalizePrePostIncrements(JSC::B3 *this, JSC::B3::Procedure *a2)
{
  uint64_t **v3;
  WTF **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  _OWORD *v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  WTF *v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  _DWORD *v110;
  unsigned int v111;
  uint64_t i;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char **v123;
  uint64_t v124;
  char *v125;
  int v126;
  unsigned int v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  uint64_t *v134;
  _OWORD *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int v150;
  _DWORD *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t j;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t *v175;
  WTF *v176;
  uint64_t v177;
  uint64_t *v178;
  _OWORD *v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  _DWORD *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t k;
  uint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t *v231;
  unsigned int *v232;
  unsigned int *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t *v239;
  unsigned int v240;
  WTF *v241;
  WTF *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  _DWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  WTF *v259;
  __int128 v260;
  int v261;
  __int16 v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  unint64_t v272;
  void *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  __int128 *v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF *v304;
  const char *v305;
  _DWORD *v306;
  WTF *v308;
  WTF **v309;
  uint64_t **v310;
  char *v311;
  int v312;
  unsigned int v313;
  WTF *v314;
  unint64_t StatusReg;
  uint64_t v316;
  WTF *v317;
  WTF *v318;
  WTF *v319;
  WTF *v320;
  WTF *v321;
  int v322;
  int v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  __int128 v329;
  WTF **v330;
  const char **v331;
  WTF *v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD v338[2];
  _QWORD v339[2];
  _QWORD v340[17];
  const char *v341;
  WTF *v342;
  uint64_t v343;
  _BYTE v344[176];
  uint64_t v345;
  _QWORD v346[3];
  uint64_t v347;
  _DWORD *v348;
  uint64_t v349;
  uint64_t **v350;
  WTF **v351;
  uint64_t v352;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v346, (WTF **)this, (uint64_t)"canonicalizePrePostIncrements", 30);
  v341 = (const char *)this;
  v342 = (WTF *)v344;
  v343 = 8;
  memset(&v344[128], 0, 48);
  v345 = 0;
  v338[1] = (char *)this + 48;
  v339[0] = v340;
  v339[1] = 8;
  v340[16] = this;
  v3 = JSC::B3::Procedure::dominators(this);
  v4 = JSC::B3::Procedure::backwardsDominators(this);
  v337 = 0;
  v338[0] = 0x8000000000000000;
  v335 = 0;
  v336 = 0;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
LABEL_355:
    JUMPOUT(0x197F78384);
  }
  v12 = v4;
  JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(**((unsigned int ***)this + 6), v5, v6, v7, v8, v9, v10, v11, (uint64_t)&v332);
  v20 = v332;
  if (!v334)
  {
    v23 = 0;
    v22 = 0;
    v21 = 0;
    if (v332)
      goto LABEL_222;
    goto LABEL_213;
  }
  v309 = v12;
  v310 = v3;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v311 = (char *)v332 + 8 * v334;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v314 = v20;
    v24 = *(_QWORD *)v20;
    if (*(_DWORD *)(*(_QWORD *)v20 + 20))
    {
      v25 = 0;
      v325 = *(_QWORD *)v20;
      while (1)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v25);
        v349 = v26;
        v27 = *(unsigned __int8 *)(v26 + 12);
        if (v27 == 14)
          break;
        if (v27 == 70)
        {
          v352 = v26;
          if (*(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 0) + 16) == 1
            || *(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 0) + 16) == 2)
          {
            v45 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 0);
            v46 = !*(_QWORD *)v45 || (*(_WORD *)(*(_QWORD *)v45 + 12) & 0xFFFu) - 3 >= 2;
            if (v46 && !*(_DWORD *)(v26 + 40))
            {
              v47 = (uint64_t *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 1u);
              v350 = 0;
              v351 = 0;
              WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v329, &v335, v47, (uint64_t)&v350, v48, v49, v50, v51);
              v52 = v329;
              v53 = (char **)(v329 + 8);
              v54 = *(unsigned int *)(v329 + 20);
              if ((_DWORD)v54 != *(_DWORD *)(v329 + 16))
              {
                *(_QWORD *)&(*v53)[8 * v54] = v26;
                goto LABEL_70;
              }
LABEL_68:
              v84 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v352);
              v54 = *(unsigned int *)(v52 + 20);
              *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8 * v54) = *(_QWORD *)v84;
LABEL_70:
              *(_DWORD *)(v52 + 20) = v54 + 1;
              if (v350)
                WTF::fastFree((unint64_t)v350, (void *)v13, v14, v15, v16, v17, v18, v19);
            }
          }
        }
        else if (v27 == 67)
        {
          v352 = v26;
          if ((*(_DWORD *)(v26 + 16) - 1) <= 1)
          {
            v28 = *(_DWORD *)(v26 + 40);
            if (!v28)
            {
              v79 = (uint64_t *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 0);
              v350 = 0;
              v351 = 0;
              WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v329, &v337, v79, (uint64_t)&v350, v80, v81, v82, v83);
              v52 = v329;
              v53 = (char **)(v329 + 8);
              v54 = *(unsigned int *)(v329 + 20);
              if ((_DWORD)v54 == *(_DWORD *)(v329 + 16))
                goto LABEL_68;
              *(_QWORD *)&(*v53)[8 * v54] = v352;
              goto LABEL_70;
            }
            if ((v28 + 256) <= 0x1FF)
            {
              v29 = (_QWORD *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v26, 0);
              if (v336)
              {
                v30 = *(int *)(v26 + 40);
                v31 = *(_DWORD *)(v336 - 8);
                v32 = ~(*v29 << 32) + *v29;
                v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
                v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
                v35 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
                v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
                v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
                v38 = v31 & ((0xD7862706ELL
                                          * (unint64_t)(95187966
                                                             * ((v37 >> 31) ^ v37)
                                                             + 277951225
                                                             * (((v34 + ~(v34 << 27)) >> 31) ^ ((_DWORD)v34 + ~((_DWORD)v34 << 27))))) >> 4);
                v39 = (uint64_t *)(v336 + 32 * v38);
                v41 = *v39;
                v40 = v39[1];
                if (*v39 != *v29 || v40 != v30)
                {
                  v43 = 1;
                  while (v41 || v40)
                  {
                    v38 = ((_DWORD)v38 + v43) & v31;
                    v39 = (uint64_t *)(v336 + 32 * v38);
                    v41 = *v39;
                    v40 = v39[1];
                    ++v43;
                    if (*v39 == *v29 && v40 == v30)
                      goto LABEL_80;
                  }
                  v39 = (uint64_t *)(v336 + 32 * *(unsigned int *)(v336 - 4));
                }
LABEL_80:
                if ((uint64_t *)(v336 + 32 * *(unsigned int *)(v336 - 4)) != v39)
                {
                  v88 = *((unsigned int *)v39 + 7);
                  if ((_DWORD)v88)
                  {
                    v89 = (uint64_t *)v39[2];
                    v90 = (WTF *)&v89[v88];
                    v317 = v90;
                    while (1)
                    {
                      v91 = *v89;
                      v92 = v23;
                      if (!v23)
                      {
                        v93 = (_OWORD *)WTF::fastZeroedMalloc(0x90uLL, v13, v14, v15, v16, v17, v18, v19);
                        *v93 = xmmword_19914F680;
                        v92 = v93 + 1;
                      }
                      v94 = *((_DWORD *)v92 - 2);
                      v95 = v352;
                      v96 = (~(v95 << 32) + v95) ^ ((unint64_t)(~(v95 << 32) + v95) >> 22);
                      v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
                      v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
                      v99 = v94 & ((v98 >> 31) ^ v98);
                      v100 = &v92[v99];
                      v101 = *v100;
                      if (*v100)
                      {
                        v102 = 0;
                        v103 = 1;
                        do
                        {
                          if (v101 == v352)
                          {
                            v23 = v92;
                            goto LABEL_113;
                          }
                          if (v101 == -1)
                            v102 = v100;
                          v99 = (v99 + v103) & v94;
                          v100 = &v92[v99];
                          v101 = *v100;
                          ++v103;
                        }
                        while (*v100);
                        if (!v102)
                          goto LABEL_93;
                        *v102 = 0;
                        v102[1] = 0;
                        v104 = *((_DWORD *)v92 - 4) - 1;
                        *((_DWORD *)v92 - 4) = v104;
                        *v102 = v95;
                        v102[1] = v91;
                        v105 = *((_DWORD *)v92 - 3);
                      }
                      else
                      {
LABEL_93:
                        *v100 = v352;
                        v100[1] = v91;
                        v104 = *((_DWORD *)v92 - 4);
                        v105 = *((_DWORD *)v92 - 3);
                      }
                      v106 = v105 + 1;
                      *((_DWORD *)v92 - 3) = v105 + 1;
                      v107 = (v104 + v105 + 1);
                      v108 = *((unsigned int *)v92 - 1);
                      if (v108 > 0x400)
                        break;
                      if (3 * v108 > 4 * v107)
                        goto LABEL_96;
                      if ((_DWORD)v108)
                        goto LABEL_98;
                      v109 = 8;
LABEL_101:
                      v110 = (_DWORD *)WTF::fastZeroedMalloc(16 * v109 + 16, v13, v14, v15, v16, v17, v18, v19);
                      v23 = v110 + 4;
                      v111 = v109 - 1;
                      v110[2] = v109 - 1;
                      v110[3] = v109;
                      *v110 = 0;
                      v110[1] = v106;
                      v24 = v325;
                      v90 = v317;
                      if ((_DWORD)v108)
                      {
                        for (i = 0; i != v108; ++i)
                        {
                          v113 = &v92[i];
                          if ((unint64_t)(*v113 + 1) >= 2)
                          {
                            v114 = (~(*v113 << 32) + *v113) ^ ((~(*v113 << 32) + *v113) >> 22);
                            v115 = 9 * ((v114 + ~(v114 << 13)) ^ ((unint64_t)(v114 + ~(v114 << 13)) >> 8));
                            v116 = (v115 ^ (v115 >> 15)) + ~((v115 ^ (v115 >> 15)) << 27);
                            v117 = v111 & ((v116 >> 31) ^ v116);
                            v118 = 1;
                            do
                            {
                              v119 = v117;
                              v120 = v23[2 * v117];
                              v117 = (v117 + v118++) & v111;
                            }
                            while (v120);
                            *(_OWORD *)&v23[2 * v119] = *(_OWORD *)v113;
                          }
                        }
                      }
                      v13 = (unint64_t)(v92 - 1);
                      v121 = *(_QWORD *)(StatusReg + 752);
                      if (v121)
                      {
                        if (!(v13 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                               + (((unint64_t)(v92 - 1) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v92 - 16) >> 24)) & 1) != 0)
                        {
LABEL_111:
                          v122 = *(unsigned int *)(v121 + 8000);
                          if (v122 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v121, v13, (os_unfair_lock_s *)5, v15, v16, v17, v18, v19);
                          }
                          else
                          {
                            *(_QWORD *)(v121 + 8 * v122) = v13 | 0x5000000000000;
                            *(_DWORD *)(v121 + 8000) = v122 + 1;
                          }
                          goto LABEL_113;
                        }
                        if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
                        {
                          v15 = 0;
                        }
                        else
                        {
                          v15 = (*(_DWORD *)((char *)off_1ECF425F8
                                           + (((((unint64_t)(v92 - 1) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                           + 24) >> (2
                                                   * (((((_DWORD)v92 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)v15 == 1)
                            goto LABEL_111;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v121, v13, 1, v15, v16, v17, v18, v19);
                      }
                      else
                      {
                        pas_try_deallocate_slow_no_cache((unint64_t)(v92 - 1), (uint64_t)&bmalloc_heap_config, 1);
                      }
LABEL_113:
                      if (++v89 == (uint64_t *)v90)
                        goto LABEL_72;
                    }
                    if (v108 > 2 * v107)
                    {
LABEL_96:
                      v23 = v92;
                      v24 = v325;
                      goto LABEL_113;
                    }
LABEL_98:
                    v109 = (_DWORD)v108 << (6 * v106 >= (2 * v108));
                    goto LABEL_101;
                  }
                }
              }
            }
          }
        }
LABEL_72:
        if (++v25 >= (unint64_t)*(unsigned int *)(v24 + 20))
          goto LABEL_211;
      }
      v55 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v26, 0);
      v56 = JSC::B3::Value::child((JSC::B3::Value *)v26, 1u);
      if (*(_QWORD *)v56)
        v57 = (*(_WORD *)(*(_QWORD *)v56 + 12) & 0xFFF) == 4;
      else
        v57 = 0;
      if (!v57)
        goto LABEL_72;
      if (*(_DWORD *)(v26 + 16) != 2)
        goto LABEL_72;
      v58 = *(_QWORD *)(*(_QWORD *)v56 + 40);
      if (v58 != (int)v58 || (v58 + 256) > 0x1FF)
        goto LABEL_72;
      v59 = v336;
      if (v336
        || (WTF::HashTable<std::tuple<JSC::B3::Value *,long long>,WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashMap<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>>::rehash(&v336, 8uLL, 0, v15, v16, v17, v18, v19), (v59 = v336) != 0))
      {
        v60 = *(_DWORD *)(v59 - 8);
      }
      else
      {
        v60 = 0;
      }
      v61 = (~(v55 << 32) + v55) ^ ((unint64_t)(~(v55 << 32) + v55) >> 22);
      v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
      v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
      v64 = v63 ^ (v63 >> 31);
      v65 = (v58 + ~(v58 << 32)) ^ ((unint64_t)(v58 + ~(v58 << 32)) >> 22);
      v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
      v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
      v313 = v64;
      v68 = v60 & ((0xD7862706ELL
                                * (unint64_t)(277951225 * (_DWORD)v64
                                                   + 95187966 * ((v67 >> 31) ^ v67))) >> 4);
      v69 = (_QWORD *)(v59 + 32 * v68);
      v70 = *v69;
      v71 = v69[1];
      if (*v69)
        v72 = 0;
      else
        v72 = v71 == 0;
      v316 = v55;
      if (!v72)
      {
        v73 = 0;
        v74 = 1;
        while (v70 != v55 || v71 != v58)
        {
          if (v70 == -1)
            v73 = v69;
          v68 = ((_DWORD)v68 + v74) & v60;
          v69 = (_QWORD *)(v59 + 32 * v68);
          v70 = *v69;
          v71 = v69[1];
          ++v74;
          if (*v69)
            v75 = 0;
          else
            v75 = v71 == 0;
          if (v75)
          {
            if (v73)
            {
              *v73 = 0u;
              v73[1] = 0u;
              --*(_DWORD *)(v59 - 16);
              v69 = v73;
            }
            goto LABEL_63;
          }
        }
LABEL_127:
        v123 = (char **)(v69 + 2);
        v124 = *((unsigned int *)v69 + 7);
        if ((_DWORD)v124 == *((_DWORD *)v69 + 6))
        {
          v213 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v123, v124 + 1, (unint64_t)&v349);
          v124 = *((unsigned int *)v69 + 7);
          v125 = (char *)(v69[2] + 8 * v124);
          v26 = *(_QWORD *)v213;
        }
        else
        {
          v125 = &(*v123)[8 * v124];
        }
        *(_QWORD *)v125 = v26;
        *((_DWORD *)v69 + 7) = v124 + 1;
        if (v337)
        {
          v126 = *(_DWORD *)(v337 - 8);
          v127 = v126 & v313;
          v128 = (uint64_t *)(v337 + 24 * (v126 & v313));
          v129 = *v128;
          if (*v128 != v55)
          {
            v130 = 1;
            while (v129)
            {
              v127 = (v127 + v130) & v126;
              v128 = (uint64_t *)(v337 + 24 * v127);
              v129 = *v128;
              ++v130;
              if (*v128 == v55)
                goto LABEL_136;
            }
            v128 = (uint64_t *)(v337 + 24 * *(unsigned int *)(v337 - 4));
          }
LABEL_136:
          if (v128 != (uint64_t *)(v337 + 24 * *(unsigned int *)(v337 - 4)))
          {
            v131 = *((unsigned int *)v128 + 5);
            if ((_DWORD)v131)
            {
              v132 = (WTF *)v128[1];
              v318 = (WTF *)((char *)v132 + 8 * v131);
              do
              {
                v133 = *(_QWORD *)v132;
                v134 = v22;
                if (!v22)
                {
                  v135 = (_OWORD *)WTF::fastZeroedMalloc(0x90uLL, v13, v14, v15, v16, v17, v18, v19);
                  *v135 = xmmword_19914F680;
                  v134 = (uint64_t *)(v135 + 1);
                }
                v136 = *((_DWORD *)v134 - 2);
                v137 = (~(v133 << 32) + v133) ^ ((unint64_t)(~(v133 << 32) + v133) >> 22);
                v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
                v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
                v140 = v136 & ((v139 >> 31) ^ v139);
                v141 = &v134[2 * v140];
                v142 = *v141;
                if (*v141)
                {
                  v143 = 0;
                  v144 = 1;
                  do
                  {
                    if (v142 == v133)
                    {
                      v22 = v134;
                      goto LABEL_165;
                    }
                    if (v142 == -1)
                      v143 = v141;
                    v140 = (v140 + v144) & v136;
                    v141 = &v134[2 * v140];
                    v142 = *v141;
                    ++v144;
                  }
                  while (*v141);
                  if (!v143)
                    goto LABEL_149;
                  *v143 = 0;
                  v143[1] = 0;
                  v145 = *((_DWORD *)v134 - 4) - 1;
                  *((_DWORD *)v134 - 4) = v145;
                  *v143 = v133;
                  v143[1] = v349;
                  v146 = *((_DWORD *)v134 - 3);
                }
                else
                {
LABEL_149:
                  *v141 = v133;
                  v141[1] = v349;
                  v145 = *((_DWORD *)v134 - 4);
                  v146 = *((_DWORD *)v134 - 3);
                }
                v147 = v146 + 1;
                *((_DWORD *)v134 - 3) = v146 + 1;
                v148 = (v145 + v146 + 1);
                v149 = *((unsigned int *)v134 - 1);
                if (v149 > 0x400)
                {
                  if (v149 <= 2 * v148)
                    goto LABEL_154;
                }
                else if (3 * v149 <= 4 * v148)
                {
                  if ((_DWORD)v149)
LABEL_154:
                    v150 = (_DWORD)v149 << (6 * v147 >= (2 * v149));
                  else
                    v150 = 8;
                  v151 = (_DWORD *)WTF::fastZeroedMalloc(16 * v150 + 16, v13, v14, v15, v16, v17, v18, v19);
                  v22 = (uint64_t *)(v151 + 4);
                  v159 = v150 - 1;
                  v151[2] = v150 - 1;
                  v151[3] = v150;
                  *v151 = 0;
                  v151[1] = v147;
                  v24 = v325;
                  v55 = v316;
                  if ((_DWORD)v149)
                  {
                    for (j = 0; j != v149; ++j)
                    {
                      v161 = &v134[2 * j];
                      if ((unint64_t)(*v161 + 1) >= 2)
                      {
                        v162 = (~(*v161 << 32) + *v161) ^ ((unint64_t)(~(*v161 << 32) + *v161) >> 22);
                        v163 = 9 * ((v162 + ~(v162 << 13)) ^ ((v162 + ~(v162 << 13)) >> 8));
                        v164 = (v163 ^ (v163 >> 15)) + ~((v163 ^ (v163 >> 15)) << 27);
                        v165 = v159 & ((v164 >> 31) ^ v164);
                        v166 = 1;
                        do
                        {
                          v167 = v165;
                          v168 = v22[2 * v165];
                          v165 = (v165 + v166++) & v159;
                        }
                        while (v168);
                        *(_OWORD *)&v22[2 * v167] = *(_OWORD *)v161;
                      }
                    }
                  }
                  WTF::fastFree((unint64_t)(v134 - 2), v152, v153, v154, v155, v156, v157, v158);
                  goto LABEL_165;
                }
                v22 = v134;
                v55 = v316;
LABEL_165:
                v132 = (WTF *)((char *)v132 + 8);
              }
              while (v132 != v318);
            }
          }
        }
        if (!v335)
          goto LABEL_72;
        v169 = *(_DWORD *)(v335 - 8);
        v170 = v169 & v313;
        v171 = (uint64_t *)(v335 + 24 * (v169 & v313));
        v172 = *v171;
        if (*v171 != v55)
        {
          v173 = 1;
          while (v172)
          {
            v170 = (v170 + v173) & v169;
            v171 = (uint64_t *)(v335 + 24 * v170);
            v172 = *v171;
            ++v173;
            if (*v171 == v55)
              goto LABEL_176;
          }
          v171 = (uint64_t *)(v335 + 24 * *(unsigned int *)(v335 - 4));
        }
LABEL_176:
        if (v171 == (uint64_t *)(v335 + 24 * *(unsigned int *)(v335 - 4)))
          goto LABEL_72;
        v174 = *((unsigned int *)v171 + 5);
        if (!(_DWORD)v174)
          goto LABEL_72;
        v175 = (uint64_t *)v171[1];
        v176 = (WTF *)&v175[v174];
        v319 = v176;
        while (1)
        {
          v177 = *v175;
          v178 = v21;
          if (!v21)
          {
            v179 = (_OWORD *)WTF::fastZeroedMalloc(0x90uLL, v13, v14, v15, v16, v17, v18, v19);
            *v179 = xmmword_19914F680;
            v178 = (uint64_t *)(v179 + 1);
          }
          v180 = *((_DWORD *)v178 - 2);
          v181 = (~(v177 << 32) + v177) ^ ((unint64_t)(~(v177 << 32) + v177) >> 22);
          v182 = 9 * ((v181 + ~(v181 << 13)) ^ ((v181 + ~(v181 << 13)) >> 8));
          v183 = (v182 ^ (v182 >> 15)) + ~((v182 ^ (v182 >> 15)) << 27);
          v184 = v180 & ((v183 >> 31) ^ v183);
          v185 = &v178[2 * v184];
          v186 = *v185;
          if (*v185)
          {
            v187 = 0;
            v188 = 1;
            while (v186 != v177)
            {
              if (v186 == -1)
                v187 = v185;
              v184 = (v184 + v188) & v180;
              v185 = &v178[2 * v184];
              v186 = *v185;
              ++v188;
              if (!*v185)
              {
                if (!v187)
                  goto LABEL_189;
                *v187 = 0;
                v187[1] = 0;
                v189 = *((_DWORD *)v178 - 4) - 1;
                *((_DWORD *)v178 - 4) = v189;
                *v187 = v177;
                v187[1] = v349;
                v190 = *((_DWORD *)v178 - 3);
                goto LABEL_190;
              }
            }
          }
          else
          {
LABEL_189:
            *v185 = v177;
            v185[1] = v349;
            v189 = *((_DWORD *)v178 - 4);
            v190 = *((_DWORD *)v178 - 3);
LABEL_190:
            v191 = v190 + 1;
            *((_DWORD *)v178 - 3) = v190 + 1;
            v192 = (v189 + v190 + 1);
            v193 = *((unsigned int *)v178 - 1);
            if (v193 > 0x400)
            {
              if (v193 <= 2 * v192)
                goto LABEL_194;
            }
            else if (3 * v193 <= 4 * v192)
            {
              if ((_DWORD)v193)
LABEL_194:
                v194 = (_DWORD)v193 << (6 * v191 >= (2 * v193));
              else
                v194 = 8;
              v195 = (_DWORD *)WTF::fastZeroedMalloc(16 * v194 + 16, v13, v14, v15, v16, v17, v18, v19);
              v21 = (uint64_t *)(v195 + 4);
              v203 = v194 - 1;
              v195[2] = v194 - 1;
              v195[3] = v194;
              *v195 = 0;
              v195[1] = v191;
              v176 = v319;
              if ((_DWORD)v193)
              {
                for (k = 0; k != v193; ++k)
                {
                  v205 = &v178[2 * k];
                  if ((unint64_t)(*v205 + 1) >= 2)
                  {
                    v206 = (~(*v205 << 32) + *v205) ^ ((unint64_t)(~(*v205 << 32) + *v205) >> 22);
                    v207 = 9 * ((v206 + ~(v206 << 13)) ^ ((v206 + ~(v206 << 13)) >> 8));
                    v208 = (v207 ^ (v207 >> 15)) + ~((v207 ^ (v207 >> 15)) << 27);
                    v209 = v203 & ((v208 >> 31) ^ v208);
                    v210 = 1;
                    do
                    {
                      v211 = v209;
                      v212 = v21[2 * v209];
                      v209 = (v209 + v210++) & v203;
                    }
                    while (v212);
                    *(_OWORD *)&v21[2 * v211] = *(_OWORD *)v205;
                  }
                }
              }
              WTF::fastFree((unint64_t)(v178 - 2), v196, v197, v198, v199, v200, v201, v202);
              goto LABEL_204;
            }
          }
          v21 = v178;
LABEL_204:
          if (++v175 == (uint64_t *)v176)
          {
            v24 = v325;
            goto LABEL_72;
          }
        }
      }
LABEL_63:
      *v69 = v55;
      v69[1] = v58;
      v76 = v69[2];
      if (v76)
      {
        v69[2] = 0;
        *((_DWORD *)v69 + 6) = 0;
        WTF::fastFree(v76, (void *)v13, v14, v15, v16, v17, v18, v19);
      }
      v69[2] = 0;
      v69[3] = 0;
      v77 = v336;
      if (v336)
        v78 = *(_DWORD *)(v336 - 12) + 1;
      else
        v78 = 1;
      *(_DWORD *)(v336 - 12) = v78;
      v85 = (*(_DWORD *)(v77 - 16) + v78);
      v86 = *(unsigned int *)(v77 - 4);
      if (v86 > 0x400)
      {
        if (v86 > 2 * v85)
          goto LABEL_127;
      }
      else
      {
        if (3 * v86 > 4 * v85)
          goto LABEL_127;
        if (!(_DWORD)v86)
        {
          v87 = 8;
          goto LABEL_126;
        }
      }
      v87 = ((_DWORD)v86 << (6 * v78 >= (2 * v86)));
LABEL_126:
      v69 = WTF::HashTable<std::tuple<JSC::B3::Value *,long long>,WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashMap<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>>::rehash(&v336, v87, (uint64_t)v69, v15, v16, v17, v18, v19);
      goto LABEL_127;
    }
LABEL_211:
    v20 = (WTF *)((char *)v314 + 8);
  }
  while ((char *)v314 + 8 != v311);
  v20 = v332;
  v12 = v309;
  v3 = v310;
  if (!v332)
    goto LABEL_213;
LABEL_222:
  v332 = 0;
  v333 = 0;
  WTF::fastFree((unint64_t)v20, (void *)v13, v14, v15, v16, v17, v18, v19);
LABEL_213:
  v350 = v3;
  v351 = v12;
  if (v23)
  {
    v214 = *((unsigned int *)v23 - 1);
    v215 = &v23[2 * v214];
    if (*((_DWORD *)v23 - 3))
    {
      v216 = v23;
      if ((_DWORD)v214)
      {
        v217 = 16 * v214;
        v216 = v23;
        while ((unint64_t)(*v216 + 1) <= 1)
        {
          v216 += 2;
          v217 -= 16;
          if (!v217)
          {
            v216 = v215;
            break;
          }
        }
      }
LABEL_220:
      v218 = &v23[2 * *((unsigned int *)v23 - 1)];
      goto LABEL_227;
    }
    v216 = &v23[2 * v214];
  }
  else
  {
    v216 = 0;
    v214 = 0;
  }
  v215 = &v23[2 * v214];
  if (v23)
    goto LABEL_220;
  v218 = 0;
LABEL_227:
  while (v216 != v218)
  {
    v219 = *v216;
    v220 = v216[1];
    if (!*v216
      || ((v221 = (unint64_t *)(2 * v338[0]), (v338[0] & 0x8000000000000000) != 0)
        ? (v222 = 63)
        : (v222 = *v221),
          (v223 = *(unsigned int *)(v219 + 8), v222 <= v223)
       || ((v224 = v221 + 1, v338[0] >= 0) ? (v225 = v224) : (v225 = v338),
           ((*(_QWORD *)((char *)v225 + ((v223 >> 3) & 0x1FFFFFF8)) >> v223) & 1) == 0)))
    {
      if (!v220
        || ((v226 = (unint64_t *)(2 * v338[0]), (v338[0] & 0x8000000000000000) != 0)
          ? (v227 = 63)
          : (v227 = *v226),
            (v228 = *(unsigned int *)(v220 + 8), v227 <= v228)
         || ((v229 = v226 + 1, v338[0] >= 0) ? (v230 = v229) : (v230 = v338),
             ((*(_QWORD *)((char *)v230 + ((v228 >> 3) & 0x1FFFFFF8)) >> v228) & 1) == 0)))
      {
        v232 = *(unsigned int **)(v219 + 32);
        v233 = *(unsigned int **)(v220 + 32);
        if (v232 == v233)
          goto LABEL_262;
        v234 = *v233;
        v235 = v350[1];
        v236 = &v235[4 * v234];
        v237 = *((_DWORD *)v236 + 6);
        v238 = *v232;
        v239 = &v235[4 * v238];
        v240 = *((_DWORD *)v239 + 6);
        if (v237 > v240 && *((_DWORD *)v236 + 7) < *((_DWORD *)v239 + 7))
        {
          v241 = v351[1];
          if (*((_DWORD *)v241 + 10 * v238 + 8) > *((_DWORD *)v241 + 10 * v234 + 8)
            && *((_DWORD *)v241 + 10 * v238 + 9) < *((_DWORD *)v241 + 10 * v234 + 9))
          {
            goto LABEL_262;
          }
        }
        if (v240 > v237 && HIDWORD(v235[4 * v238 + 3]) < HIDWORD(v235[4 * v234 + 3]))
        {
          v242 = v351[1];
          if (*((_DWORD *)v242 + 10 * v234 + 8) > *((_DWORD *)v242 + 10 * v238 + 8)
            && *((_DWORD *)v242 + 10 * v234 + 9) < *((_DWORD *)v242 + 10 * v238 + 9))
          {
LABEL_262:
            v243 = v233[5];
            if ((_DWORD)v243)
            {
              v244 = 0;
              v245 = *((_QWORD *)v233 + 1);
              while (*(_QWORD *)(v245 + 8 * v244) != v220)
              {
                if (v243 == ++v244)
                {
                  LODWORD(v244) = v243;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v244) = 0;
            }
            v322 = *(_DWORD *)(v219 + 16);
            v326 = *(_QWORD *)(v220 + 24);
            v320 = *(WTF **)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v219);
            v246 = v341;
            v247 = WTF::fastMalloc((WTF *)0x48);
            v253 = v246;
            v254 = (_DWORD *)v247;
            *(_DWORD *)(v247 + 8) = -1;
            *(_WORD *)(v247 + 12) = 67;
            *(_DWORD *)(v247 + 16) = v322;
            *(_BYTE *)(v247 + 20) = 1;
            *(_QWORD *)(v247 + 24) = v326;
            *(_QWORD *)(v247 + 32) = 0;
            *(_QWORD *)(v247 + 64) = v320;
            *(_QWORD *)v247 = off_1E357E4C8;
            *(_DWORD *)(v247 + 40) = 0;
            *(_OWORD *)(v247 + 44) = xmmword_19914F690;
            v255 = *((unsigned int *)v253 + 23);
            if ((_DWORD)v255)
            {
              v256 = *(_QWORD *)(*((_QWORD *)v253 + 10) + 8 * v255 - 8);
              *((_DWORD *)v253 + 23) = v255 - 1;
              v257 = *((_QWORD *)v253 + 8);
            }
            else
            {
              v256 = *((unsigned int *)v253 + 19);
              if ((_DWORD)v256 == *((_DWORD *)v253 + 18))
              {
                v271 = v256 + (v256 >> 2);
                if (v271 >= 0x10)
                  v272 = v271 + 1;
                else
                  v272 = 16;
                if (v272 <= v256 + 1)
                  v272 = v256 + 1;
                v324 = *((unsigned int *)v253 + 19);
                if (v272 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F783ACLL);
                }
                v321 = (WTF *)*((_QWORD *)v253 + 8);
                v328 = v253;
                v312 = v272;
                v273 = (void *)WTF::fastMalloc((WTF *)(8 * v272));
                *((_DWORD *)v328 + 18) = v312;
                *((_QWORD *)v328 + 8) = v273;
                memcpy(v273, v321, 8 * v324);
                if (v321)
                {
                  if (*((WTF **)v328 + 8) == v321)
                  {
                    *((_QWORD *)v328 + 8) = 0;
                    *((_DWORD *)v328 + 18) = 0;
                  }
                  WTF::fastFree((unint64_t)v321, v274, v275, v248, v249, v250, v251, v252);
                }
                v276 = *((unsigned int *)v328 + 19);
                v257 = *((_QWORD *)v328 + 8);
                *(_QWORD *)(v257 + 8 * v276) = 0;
                *((_DWORD *)v328 + 19) = v276 + 1;
                v256 = v324;
              }
              else
              {
                v257 = *((_QWORD *)v253 + 8);
                *(_QWORD *)(v257 + 8 * v256) = 0;
                *((_DWORD *)v253 + 19) = v256 + 1;
              }
            }
            v254[2] = v256;
            *(_QWORD *)(v257 + 8 * v256) = v254;
            *(_QWORD *)&v329 = (v244 + 1);
            *((_QWORD *)&v329 + 1) = v254;
            v258 = HIDWORD(v343);
            if (HIDWORD(v343) == (_DWORD)v343)
            {
              v277 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v342, (void *)(HIDWORD(v343) + 1), (unint64_t)&v329, v248, v249, v250, v251, v252);
              v258 = HIDWORD(v343);
              v259 = v342;
              v260 = *v277;
            }
            else
            {
              v259 = v342;
              v260 = v329;
            }
            *((_OWORD *)v259 + v258) = v260;
            ++HIDWORD(v343);
            v254[10] = *(_DWORD *)(v219 + 40);
            v261 = *(_DWORD *)(v219 + 16);
            if (v261 != v254[4])
            {
              __break(0xC471u);
              goto LABEL_355;
            }
            v327 = *(_QWORD *)(v219 + 32);
            v323 = *(_DWORD *)(v219 + 8);
            (**(void (***)(uint64_t))v219)(v219);
            *(_QWORD *)v219 = off_1E357F5F0;
            if (v261)
            {
              *(_QWORD *)(v219 + 40) = v254;
              v262 = 1;
            }
            else
            {
              v262 = 0;
            }
            *(_WORD *)(v219 + 12) = v262;
            *(_DWORD *)(v219 + 16) = v261;
            *(_BYTE *)(v219 + 20) = v262;
            *(_DWORD *)(v219 + 8) = v323;
            *(_QWORD *)(v219 + 32) = v327;
            JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v341, *(JSC::B3::BasicBlock **)(v220 + 32));
            v263 = *(unsigned int *)(v219 + 8);
            v264 = v338[0];
            if ((v338[0] & 0x8000000000000000) != 0)
              v265 = 63;
            else
              v265 = *(_QWORD *)(2 * v338[0]);
            if (v265 <= v263)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v338, v263 + 1, 0);
              v264 = v338[0];
            }
            if (v264 >= 0)
              v266 = (_QWORD *)(2 * v264 + 8);
            else
              v266 = v338;
            *(_QWORD *)((char *)v266 + ((v263 >> 3) & 0x1FFFFFF8)) |= 1 << v263;
            v267 = *(unsigned int *)(v220 + 8);
            v268 = v338[0];
            if ((v338[0] & 0x8000000000000000) != 0)
              v269 = 63;
            else
              v269 = *(_QWORD *)(2 * v338[0]);
            if (v269 <= v267)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v338, v267 + 1, 0);
              v268 = v338[0];
            }
            if (v268 >= 0)
              v270 = (_QWORD *)(2 * v268 + 8);
            else
              v270 = v338;
            *(_QWORD *)((char *)v270 + ((v267 >> 3) & 0x1FFFFFF8)) |= 1 << v267;
          }
        }
      }
    }
    v231 = v216 + 2;
    v216 = v215;
    if (v231 != v215)
    {
      v216 = v231;
      while ((unint64_t)(*v216 + 1) <= 1)
      {
        v216 += 2;
        if (v216 == v215)
        {
          v216 = v215;
          break;
        }
      }
    }
  }
  *(_QWORD *)&v329 = v338;
  *((_QWORD *)&v329 + 1) = &v350;
  v330 = &v332;
  v331 = &v341;
  JSC::B3::canonicalizePrePostIncrements(JSC::B3::Procedure &)::$_3::operator()((uint64_t)&v329, v22);
  JSC::B3::canonicalizePrePostIncrements(JSC::B3::Procedure &)::$_3::operator()((uint64_t)&v329, v21);
  if (v21)
    WTF::fastFree((unint64_t)(v21 - 2), v278, v279, v280, v281, v282, v283, v284);
  v285 = v335;
  if (v335)
  {
    v286 = *(unsigned int *)(v335 - 4);
    if ((_DWORD)v286)
    {
      v287 = v335 + 8;
      do
      {
        if (*(_QWORD *)(v287 - 8) != -1)
        {
          v288 = *(_QWORD *)v287;
          if (*(_QWORD *)v287)
          {
            *(_QWORD *)v287 = 0;
            *(_DWORD *)(v287 + 8) = 0;
            WTF::fastFree(v288, v278, v279, v280, v281, v282, v283, v284);
          }
        }
        v287 += 24;
        --v286;
      }
      while (v286);
    }
    WTF::fastFree(v285 - 16, v278, v279, v280, v281, v282, v283, v284);
  }
  v289 = v336;
  if (v336)
  {
    v290 = *(unsigned int *)(v336 - 4);
    if ((_DWORD)v290)
    {
      v291 = v336 + 16;
      do
      {
        if (*(_QWORD *)(v291 - 16) != -1)
        {
          v292 = *(_QWORD *)v291;
          if (*(_QWORD *)v291)
          {
            *(_QWORD *)v291 = 0;
            *(_DWORD *)(v291 + 8) = 0;
            WTF::fastFree(v292, v278, v279, v280, v281, v282, v283, v284);
          }
        }
        v291 += 32;
        --v290;
      }
      while (v290);
    }
    WTF::fastFree(v289 - 16, v278, v279, v280, v281, v282, v283, v284);
  }
  if (v22)
    WTF::fastFree((unint64_t)(v22 - 2), v278, v279, v280, v281, v282, v283, v284);
  if (v23)
    WTF::fastFree((unint64_t)(v23 - 2), v278, v279, v280, v281, v282, v283, v284);
  v293 = v337;
  if (v337)
  {
    v294 = *(unsigned int *)(v337 - 4);
    if ((_DWORD)v294)
    {
      v295 = v337 + 8;
      do
      {
        if (*(_QWORD *)(v295 - 8) != -1)
        {
          v296 = *(_QWORD *)v295;
          if (*(_QWORD *)v295)
          {
            *(_QWORD *)v295 = 0;
            *(_DWORD *)(v295 + 8) = 0;
            WTF::fastFree(v296, v278, v279, v280, v281, v282, v283, v284);
          }
        }
        v295 += 24;
        --v294;
      }
      while (v294);
    }
    WTF::fastFree(v293 - 16, v278, v279, v280, v281, v282, v283, v284);
  }
  if ((v338[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v338[0], v278, v279, v280, v281, v282, v283, v284);
  WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v339, v278, v279, v280, v281, v282, v283, v284);
  v304 = v342;
  if (v344 != (_BYTE *)v342 && v342)
  {
    v342 = 0;
    LODWORD(v343) = 0;
    WTF::fastFree((unint64_t)v304, v297, v298, v299, v300, v301, v302, v303);
  }
  v305 = (const char *)v346[0];
  *(_QWORD *)(v346[0] + 144) = v346[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v348)
      v308 = (WTF *)(v348 + 4);
    else
      v308 = 0;
    v341 = v305;
    v342 = v308;
  }
  v306 = v348;
  v348 = 0;
  if (v306)
  {
    if (*v306 == 1)
      WTF::fastFree((unint64_t)v306, v297, v298, v299, v300, v301, v302, v303);
    else
      --*v306;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v347);
  return 1;
}

uint64_t JSC::B3::MemoryValue::lastChild(JSC::B3::MemoryValue *this)
{
  uint64_t v1;

  v1 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      return (uint64_t)this + 8 * *((unsigned __int8 *)this + 20) + v1 - 8;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v1 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v1 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v1 = 64;
      break;
    case 0x53:
      v1 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v1 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F78438);
  }
  return (uint64_t)this + 8 * *((unsigned __int8 *)this + 20) + v1 - 8;
}

uint64_t JSC::B3::canonicalizePrePostIncrements(JSC::B3::Procedure &)::$_3::operator()(uint64_t result, uint64_t *a2)
{
  WTF::BitVector **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::BitVector *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  WTF::BitVector *v14;
  WTF::BitVector *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  WTF::BitVector *v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  WTF::BitVector *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  WTF::BitVector *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  WTF::BitVector *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  int v82;
  WTF *v83;
  WTF::BitVector *v84;
  __int128 v85;

  v2 = (WTF::BitVector **)result;
  if (a2)
  {
    v3 = *((unsigned int *)a2 - 1);
    v4 = &a2[2 * v3];
    if (*((_DWORD *)a2 - 3))
    {
      v5 = a2;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = a2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = &a2[2 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &a2[2 * v3];
  if (a2)
  {
LABEL_8:
    v7 = &a2[2 * *((unsigned int *)a2 - 1)];
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  if (v7 != v5)
  {
    result = 40;
    do
    {
      v9 = *v5;
      v8 = v5[1];
      v10 = *v2;
      if (!*v5
        || ((v11 = (unint64_t *)(2 * *(_QWORD *)v10), (*(_QWORD *)v10 & 0x8000000000000000) != 0)
          ? (v12 = 63)
          : (v12 = *v11),
            (v13 = *(unsigned int *)(v9 + 8), v12 <= v13)
         || ((v14 = (WTF::BitVector *)(v11 + 1), *(uint64_t *)v10 >= 0) ? (v15 = v14) : (v15 = *v2),
             ((*(_QWORD *)((char *)v15 + ((v13 >> 3) & 0x1FFFFFF8)) >> v13) & 1) == 0)))
      {
        if (!v8)
          goto LABEL_43;
        v16 = (_QWORD *)(2 * *(_QWORD *)v10);
        v17 = (*(_QWORD *)v10 & 0x8000000000000000) != 0 ? 63 : *v16;
        v18 = *(unsigned int *)(v8 + 8);
        if (v17 <= v18)
          goto LABEL_43;
        v19 = (WTF::BitVector *)(v16 + 1);
        if (*(uint64_t *)v10 >= 0)
          v10 = v19;
        if (((*(_QWORD *)((char *)v10 + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) == 0)
        {
LABEL_43:
          v21 = *(unsigned int **)(v9 + 32);
          v22 = *(unsigned int **)(v8 + 32);
          if (v21 == v22)
            goto LABEL_48;
          v23 = v2[1];
          v24 = *v22;
          v25 = *(_QWORD *)(*(_QWORD *)v23 + 8);
          v26 = v25 + 32 * v24;
          v27 = *(_DWORD *)(v26 + 24);
          v28 = *v21;
          v29 = v25 + 32 * v28;
          v30 = *(_DWORD *)(v29 + 24);
          if (v27 > v30 && *(_DWORD *)(v26 + 28) < *(_DWORD *)(v29 + 28))
          {
            v31 = *(_QWORD *)(*((_QWORD *)v23 + 1) + 8);
            if (*(_DWORD *)(v31 + 40 * v28 + 32) > *(_DWORD *)(v31 + 40 * v24 + 32)
              && *(_DWORD *)(v31 + 40 * v28 + 36) < *(_DWORD *)(v31 + 40 * v24 + 36))
            {
              goto LABEL_48;
            }
          }
          if (v30 > v27 && *(_DWORD *)(v25 + 32 * v28 + 28) < *(_DWORD *)(v25 + 32 * v24 + 28))
          {
            v32 = *(_QWORD *)(*((_QWORD *)v23 + 1) + 8);
            if (*(_DWORD *)(v32 + 40 * v24 + 32) > *(_DWORD *)(v32 + 40 * v28 + 32)
              && *(_DWORD *)(v32 + 40 * v24 + 36) < *(_DWORD *)(v32 + 40 * v28 + 36))
            {
LABEL_48:
              v33 = v21[5];
              if ((_DWORD)v33)
              {
                v34 = 0;
                v35 = *((_QWORD *)v21 + 1);
                while (*(_QWORD *)(v35 + 8 * v34) != v9)
                {
                  if (v33 == ++v34)
                    goto LABEL_55;
                }
                v33 = v34;
              }
              else
              {
                v33 = 0;
              }
LABEL_55:
              v36 = (uint64_t *)v2[3];
              v37 = *(_QWORD *)(v9 + 24);
              v38 = JSC::B3::Value::child((JSC::B3::Value *)v5[1], 1u);
              v39 = *(_QWORD *)v38;
              v40 = *(_WORD *)(*(_QWORD *)v38 + 12) & 0xFFF;
              if (*(_QWORD *)v38)
                v41 = v40 == 3;
              else
                v41 = 0;
              if (v41)
              {
                v42 = *(int *)(v39 + 40);
              }
              else
              {
                if (v40 != 4)
                  v39 = 0;
                v42 = *(_QWORD *)(v39 + 40);
              }
              v43 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(v36, v33, v37, v42);
              v44 = v2[3];
              v45 = *(_QWORD *)(v9 + 24);
              v46 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v8, 0);
              v84 = v44;
              v47 = *(_QWORD *)v44;
              v53 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, v45, *v46, (uint64_t)v43);
              v54 = *(unsigned int *)(v47 + 92);
              if ((_DWORD)v54)
              {
                v55 = *(_QWORD *)(*(_QWORD *)(v47 + 80) + 8 * v54 - 8);
                *(_DWORD *)(v47 + 92) = v54 - 1;
                v56 = *(_QWORD *)(v47 + 64);
              }
              else
              {
                v55 = *(unsigned int *)(v47 + 76);
                if ((_DWORD)v55 == *(_DWORD *)(v47 + 72))
                {
                  v75 = v55 + (v55 >> 2);
                  if (v75 >= 0x10)
                    v76 = v75 + 1;
                  else
                    v76 = 16;
                  if (v76 <= v55 + 1)
                    v76 = v55 + 1;
                  if (v76 >> 29)
                  {
LABEL_103:
                    __break(0xC471u);
                    JUMPOUT(0x197F78C78);
                  }
                  v82 = v76;
                  v83 = *(WTF **)(v47 + 64);
                  v77 = (void *)WTF::fastMalloc((WTF *)(8 * v76));
                  *(_DWORD *)(v47 + 72) = v82;
                  *(_QWORD *)(v47 + 64) = v77;
                  memcpy(v77, v83, 8 * v55);
                  if (v83)
                  {
                    if (*(WTF **)(v47 + 64) == v83)
                    {
                      *(_QWORD *)(v47 + 64) = 0;
                      *(_DWORD *)(v47 + 72) = 0;
                    }
                    WTF::fastFree((unint64_t)v83, v78, v79, v48, v49, v50, v51, v52);
                  }
                  v80 = *(unsigned int *)(v47 + 76);
                  v56 = *(_QWORD *)(v47 + 64);
                  *(_QWORD *)(v56 + 8 * v80) = 0;
                  *(_DWORD *)(v47 + 76) = v80 + 1;
                }
                else
                {
                  v56 = *(_QWORD *)(v47 + 64);
                  *(_QWORD *)(v56 + 8 * v55) = 0;
                  *(_DWORD *)(v47 + 76) = v55 + 1;
                }
              }
              *(_DWORD *)(v53 + 8) = v55;
              *(_QWORD *)(v56 + 8 * v55) = v53;
              *(_QWORD *)&v85 = v33;
              *((_QWORD *)&v85 + 1) = v53;
              v57 = (uint64_t *)((char *)v84 + 8);
              v58 = *((unsigned int *)v84 + 5);
              if ((_DWORD)v58 == *((_DWORD *)v84 + 4))
              {
                v81 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, (void *)(v58 + 1), (unint64_t)&v85, v48, v49, v50, v51, v52);
                v58 = *((unsigned int *)v84 + 5);
                v59 = *((_QWORD *)v84 + 1);
                v60 = *v81;
              }
              else
              {
                v59 = *v57;
                v60 = v85;
              }
              *(_OWORD *)(v59 + 16 * v58) = v60;
              ++*((_DWORD *)v84 + 5);
              v61 = *(_DWORD *)(v8 + 16);
              if (v61 != *(_DWORD *)(v53 + 16))
                goto LABEL_103;
              v62 = *(_QWORD *)(v8 + 32);
              v63 = *(_DWORD *)(v8 + 8);
              (**(void (***)(uint64_t))v8)(v8);
              *(_QWORD *)v8 = off_1E357F5F0;
              if (v61)
              {
                *(_QWORD *)(v8 + 40) = v53;
                v64 = 1;
              }
              else
              {
                v64 = 0;
              }
              *(_WORD *)(v8 + 12) = v64;
              *(_DWORD *)(v8 + 16) = v61;
              *(_BYTE *)(v8 + 20) = v64;
              *(_DWORD *)(v8 + 8) = v63;
              *(_QWORD *)(v8 + 32) = v62;
              JSC::B3::InsertionSet::execute(v2[3], *(JSC::B3::BasicBlock **)(v9 + 32));
              v65 = (uint64_t *)*v2;
              v66 = *(unsigned int *)(v9 + 8);
              v67 = *(_QWORD *)*v2;
              if (v67 < 0)
                v68 = 63;
              else
                v68 = *(_QWORD *)(2 * v67);
              if (v68 <= v66)
              {
                WTF::BitVector::resizeOutOfLine(*v2, v66 + 1, 0);
                v67 = *v65;
              }
              v69 = *v2;
              if (v67 >= 0)
                v70 = 2 * v67 + 8;
              else
                v70 = (uint64_t)v65;
              *(_QWORD *)(v70 + ((v66 >> 3) & 0x1FFFFFF8)) |= 1 << v66;
              v71 = *(unsigned int *)(v8 + 8);
              v72 = *(_QWORD *)v69;
              if ((*(_QWORD *)v69 & 0x8000000000000000) != 0)
                v73 = 63;
              else
                v73 = *(_QWORD *)(2 * v72);
              if (v73 <= v71)
              {
                WTF::BitVector::resizeOutOfLine(v69, v71 + 1, 0);
                v72 = *(_QWORD *)v69;
              }
              if (v72 >= 0)
                v74 = 2 * v72 + 8;
              else
                v74 = (uint64_t)v69;
              *(_QWORD *)(v74 + ((v71 >> 3) & 0x1FFFFFF8)) |= 1 << v71;
              result = 40;
            }
          }
        }
      }
      v20 = v5 + 2;
      v5 = v4;
      if (v20 != v4)
      {
        v5 = v20;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t JSC::B3::CaseCollection::dump(JSC::B3::CaseCollection *this, WTF::PrintStream *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  char *v22;
  size_t v23;
  WTF::PrintStream *v24;
  float v25;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  char v31;

  v4 = *(_DWORD *)(*(_QWORD *)this + 52);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (*(_DWORD *)(*(_QWORD *)this + 52) > v6)
    {
      v8 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v8 + 68) <= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x197F79004);
      }
      v9 = *(_QWORD *)(v8 + 56);
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * v7);
      v28 = *(_OWORD *)(v9 + 16 * v7);
      v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      if (v5)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v29, v13);
        WTF::printExpectedCStringHelper(v12, "StringView", &v29);
        if (v30 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v30])(&v31, &v29);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v29, v13);
        WTF::printExpectedCStringHelper(v12, "StringView", &v29);
        if (v30 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v30])(&v31, &v29);
        v5 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v14, "%lld", v27);
      WTF::PrintStream::printf(v14, "%s", "->");
      JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump((uint64_t *)&v28, (uint64_t)v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v6 = v7 + 1;
      v7 = (v7 + 1);
      if (v4 == v6)
        goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197F78FFCLL);
  }
LABEL_12:
  v15 = *((_QWORD *)this + 1);
  v16 = *(unsigned int *)(v15 + 68);
  if (!(_DWORD)v16)
    goto LABEL_23;
  v17 = *(_QWORD *)(v15 + 56);
  v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  if (v4)
  {
    v22 = ", ";
    v23 = 2;
  }
  else
  {
    v22 = "";
    v23 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v22, v23, (uint64_t)&v27, v21);
  WTF::printExpectedCStringHelper(v20, "StringView", &v27);
  if ((_DWORD)v28 != -1)
    ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v29, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  WTF::StringImpl::utf8ForCharacters("default->", 9uLL, (uint64_t)&v27, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v27);
  if ((_DWORD)v28 != -1)
    ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v29, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump((uint64_t *)(v17 + 16 * v16 - 16), v18);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::CheckSpecial::forEachArg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  _QWORD v29[4];
  WTF *v30;
  uint64_t v31;
  _QWORD v32[13];
  _DWORD v33[3];
  unsigned __int16 v34;
  _QWORD v35[3];
  _QWORD v36[2];
  _QWORD v37[2];

  v34 = 0;
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 112);
  v30 = (WTF *)v32;
  v31 = 3;
  v32[12] = v7;
  v33[0] = v6;
  v8 = *(unsigned int *)(a1 + 32);
  if (v8 >= 4)
  {
    if (v8 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197F793D4);
    }
    LODWORD(v31) = *(_DWORD *)(a1 + 32);
    v30 = (WTF *)WTF::fastMalloc((WTF *)(32 * v8));
  }
  else if (!(_DWORD)v8)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v9 = 0;
  v10 = 32;
  do
  {
    if (++v9 >= (unint64_t)*(unsigned int *)(a2 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197F793A4);
    }
    v11 = (_OWORD *)(*(_QWORD *)a2 + v10);
    v12 = (_OWORD *)((char *)v30 + 32 * HIDWORD(v31));
    v13 = v11[1];
    *v12 = *v11;
    v12[1] = v13;
    v14 = ++HIDWORD(v31);
    v10 += 32;
  }
  while (v8 != v9);
  LOWORD(v6) = v33[0];
LABEL_7:
  v29[0] = &v34;
  v29[1] = &v30;
  v29[2] = a3;
  v29[3] = a2;
  if (((__int16)v6 - 446) > 5)
  {
    if (v14)
    {
      v24 = 0;
      v25 = v14;
      v26 = (char *)&JSC::B3::Air::g_formTable + 21 * (__int16)v6 + (((v14 - 1) * (unint64_t)v14) >> 1);
      do
      {
        if (v24 >= HIDWORD(v31))
        {
          __break(0xC471u);
          JUMPOUT(0x197F793ACLL);
        }
        v27 = v26[v24];
        if ((v27 >> 5) - 1 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x197F79314);
        }
        if ((v27 & 0xF) != 0xA && (v27 & 0xF) - 4 <= 6)
          v34 = ((v26[v24] >> 5) - 1) | 0x100;
        if (++v24 >= (unint64_t)*(unsigned int *)(a2 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x197F793B4);
        }
        (*(void (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 32 * v24);
      }
      while (v25 != v24);
    }
  }
  else
  {
    v35[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::CheckSpecial::forEachArg(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::$_0>::implFunction;
    v35[1] = v35;
    v35[2] = v29;
    v36[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::CheckSpecial::forEachArg(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::$_0>::implFunction;
    v36[1] = v35;
    if ((__int16)v6 == 448)
    {
      v37[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::CheckSpecial::forEachArg(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::$_0>::implFunction;
      v37[1] = v35;
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197F793BCLL);
      }
      if (*(_DWORD *)(a2 + 12) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x197F793C4);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 32, 0, 0, 3);
      if (!HIDWORD(v31))
      {
        __break(0xC471u);
        JUMPOUT(0x197F793CCLL);
      }
      (*(void (**)(_QWORD, WTF **, _QWORD *))(**(_QWORD **)v30 + 16))(*(_QWORD *)v30, &v30, v37);
    }
    else
    {
      switch((__int16)v6)
      {
        case 446:
          break;
        case 447:
          JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v30, (uint64_t)v36);
          break;
        case 449:
          JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v30, (uint64_t)v36);
          break;
        case 450:
          v37[0] = v36;
          JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)&v30, (uint64_t)v37);
          break;
        case 451:
          JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v30, (uint64_t)v36);
          break;
        default:
          WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)v33, "\n");
          __break(0xC471u);
          JUMPOUT(0x197F7939CLL);
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 112) + 12) - 85) >= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x197F79334);
  }
  v15 = (*(_WORD *)(a1 + 24) & 0xFFFE) == 302;
  JSC::B3::StackmapSpecial::forEachArgImpl(a1, dword_19914F6B0[(char)(*(_BYTE *)(*(_QWORD *)(a2 + 112) + 12) - 85)], *(_DWORD *)(a1 + 32) + 1, (uint64_t *)a2, *(char *)(a1 + 28), v15 | (v15 << 32), a3, v34);
  v23 = v30;
  if (v32 != (_QWORD *)v30)
  {
    if (v30)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

BOOL JSC::B3::CheckSpecial::isValid(JSC::B3::CheckSpecial *this, JSC::B3::Air::Inst *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL8 v28;
  WTF *v29;
  WTF *v31;
  uint64_t v32;
  _QWORD v33[13];
  int v34;

  v10 = *((_DWORD *)this + 6);
  v11 = *((_QWORD *)a2 + 14);
  v31 = (WTF *)v33;
  v32 = 3;
  v33[12] = v11;
  v34 = v10;
  v12 = *((unsigned int *)this + 8);
  if (v12 >= 4)
  {
    if (v12 >> 27)
    {
      __break(0xC471u);
LABEL_22:
      JUMPOUT(0x197F795A0);
    }
    LODWORD(v32) = *((_DWORD *)this + 8);
    v31 = (WTF *)WTF::fastMalloc((WTF *)(32 * v12));
  }
  else if (!(_DWORD)v12)
  {
    goto LABEL_6;
  }
  v13 = 0;
  v14 = 32;
  do
  {
    if (++v13 >= (unint64_t)*((unsigned int *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x197F795C8);
    }
    v15 = (_OWORD *)(*(_QWORD *)a2 + v14);
    v16 = (_OWORD *)((char *)v31 + 32 * HIDWORD(v32));
    v17 = v15[1];
    *v16 = *v15;
    v16[1] = v17;
    ++HIDWORD(v32);
    v14 += 32;
  }
  while (v12 != v13);
LABEL_6:
  if (!JSC::B3::Air::Inst::isValidForm((JSC::B3::Air::Inst *)&v31, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_17:
    v28 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(*((_QWORD *)a2 + 14) + 12) - 85) >= 4u)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (!JSC::B3::StackmapSpecial::isValidImpl(this, dword_19914F6B0[(char)(*(_BYTE *)(*((_QWORD *)a2 + 14) + 12) - 85)], *((_DWORD *)this + 8) + 1, a2))goto LABEL_17;
  v25 = *((unsigned int *)a2 + 3);
  v26 = *((unsigned int *)this + 8);
  v27 = JSC::B3::Value::numChildren(*((JSC::B3::Value **)a2 + 14));
  if ((*(_BYTE *)(*((_QWORD *)a2 + 14) + 12) - 85) >= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x197F795C0);
  }
  v28 = ~v26 + v25 == dword_19914F6A0[(char)(*(_BYTE *)(*((_QWORD *)a2 + 14) + 12) - 85)] + v27;
LABEL_11:
  v29 = v31;
  if (v33 != (_QWORD *)v31 && v31)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree((unint64_t)v29, v18, v19, v20, v21, v22, v23, v24);
  }
  return v28;
}

uint64_t JSC::B3::Value::numChildren(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned __int8 *)this + 20);
  if ((_DWORD)v1 == 4)
  {
    v2 = 40;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        return *(unsigned int *)((char *)this + v2 + 12);
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v2 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v2 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v2 = 64;
        break;
      case 0x53:
        v2 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v2 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F7965CLL);
    }
    return *(unsigned int *)((char *)this + v2 + 12);
  }
  return v1;
}

BOOL JSC::B3::CheckSpecial::admitsStack(JSC::B3::CheckSpecial *this, JSC::B3::Air::Inst *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  WTF *v30;
  uint64_t v31;
  _QWORD v32[13];
  int v33;

  if (!a3 || (v5 = *((unsigned int *)this + 8), (int)v5 + 1 <= a3))
  {
    v6 = *((_QWORD *)a2 + 14);
    v7 = *(unsigned __int8 *)(v6 + 12);
    if (v7 == 88)
    {
      v8 = ~*((_DWORD *)this + 8);
      v9 = 1;
    }
    else
    {
      v29 = v7 - 85;
      if ((v7 - 85) >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197F79AECLL);
      }
      v8 = ~*((_DWORD *)this + 8);
      v9 = 2;
      if (v29 > 2)
        v6 = 0;
    }
    v10 = v9 + a3 + v8;
    v11 = 40;
    switch(*(_BYTE *)(v6 + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v11 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v11 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v11 = 64;
        break;
      case 0x53:
        v11 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v11 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F79B14);
    }
    if (v10 >= *(_DWORD *)(v6 + v11 + 12))
      return 0;
    if (*(_DWORD *)(v6 + 52) > v10)
      return *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 16 * v10 + 8) < 3u;
    return 1;
  }
  v14 = *((_DWORD *)this + 6);
  v15 = *((_QWORD *)a2 + 14);
  v30 = (WTF *)v32;
  v31 = 3;
  v32[12] = v15;
  v33 = v14;
  if (v5 >= 4)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197F79B1CLL);
    }
    LODWORD(v31) = v5;
    v30 = (WTF *)WTF::fastMalloc((WTF *)(32 * v5));
    goto LABEL_12;
  }
  if ((_DWORD)v5)
  {
LABEL_12:
    v16 = 0;
    v17 = 32;
    do
    {
      if (++v16 >= (unint64_t)*((unsigned int *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197F79AF4);
      }
      v18 = (_OWORD *)(*(_QWORD *)a2 + v17);
      v19 = (_OWORD *)((char *)v30 + 32 * HIDWORD(v31));
      v20 = v18[1];
      *v19 = *v18;
      v19[1] = v20;
      ++HIDWORD(v31);
      v17 += 32;
    }
    while (v5 != v16);
  }
  v12 = JSC::B3::Air::Inst::admitsStack((JSC::B3::Air::Inst *)&v30, a3 - 1);
  v28 = v30;
  if (v32 != (_QWORD *)v30 && v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  }
  return v12;
}

BOOL JSC::B3::CheckSpecial::admitsExtendedOffsetAddr(JSC::B3::CheckSpecial *this, JSC::B3::Air::Inst *a2, unsigned int a3)
{
  return (!a3 || *((_DWORD *)this + 8) + 1 <= a3) && JSC::B3::CheckSpecial::admitsStack(this, a2, a3);
}

uint64_t JSC::B3::CheckSpecial::shouldTryAliasingDef(JSC::B3::CheckSpecial *this, JSC::B3::Air::Inst *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  WTF *v17;
  unsigned int v18;
  _QWORD v19[13];
  int v20;

  v9 = *((_DWORD *)this + 6);
  v17 = (WTF *)v19;
  v18 = 0;
  v19[12] = *((_QWORD *)a2 + 14);
  v20 = v9;
  v10 = *((unsigned int *)this + 8);
  if (v10 >= 4)
  {
    if (v10 >> 27)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x197F79EB4);
    }
    v17 = (WTF *)WTF::fastMalloc((WTF *)(32 * v10));
  }
  else if (!(_DWORD)v10)
  {
    return 0;
  }
  v11 = 0;
  v12 = 32;
  do
  {
    if (++v11 >= (unint64_t)*((unsigned int *)a2 + 3))
      goto LABEL_12;
    v13 = (_OWORD *)(*(_QWORD *)a2 + v12);
    v14 = (_OWORD *)((char *)v17 + 32 * v18);
    v15 = v13[1];
    *v14 = *v13;
    v14[1] = v15;
    ++v18;
    v12 += 32;
  }
  while (v10 != v11);
  if (v19 != (_QWORD *)v17 && v17)
    WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

void JSC::B3::CheckSpecial::generate(WTF *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  __int16 v31;
  unsigned int v32;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  __int128 *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  WTF *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  WTF *v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  WTF *v76;
  WTF *v77;
  unint64_t v78;
  int v79;
  __int128 *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  const void *v84;
  void *v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  _BYTE v89[12];
  WTF *v90;
  int v91;
  unsigned int v92;
  _QWORD v93[10];
  int v94;
  WTF *v95[2];
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  _BYTE v99[96];
  __int128 *v100;
  int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;

  v15 = *((_DWORD *)a1 + 6);
  v16 = *(_QWORD *)(a2 + 112);
  v88 = (WTF *)&v89[8];
  *(_QWORD *)v89 = 3;
  v93[9] = v16;
  v94 = v15;
  v17 = *((unsigned int *)a1 + 8);
  if (v17 >= 4)
  {
    if (v17 >> 27)
    {
      __break(0xC471u);
LABEL_74:
      JUMPOUT(0x197F7A388);
    }
    *(_DWORD *)v89 = *((_DWORD *)a1 + 8);
    v88 = (WTF *)WTF::fastMalloc((WTF *)(32 * v17));
  }
  else if (!(_DWORD)v17)
  {
    goto LABEL_6;
  }
  v18 = 0;
  v19 = 32;
  do
  {
    if (++v18 >= (unint64_t)*(unsigned int *)(a2 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197F7A390);
    }
    v20 = *(_QWORD *)a2 + v19;
    v21 = (_OWORD *)((char *)v88 + 32 * *(unsigned int *)&v89[4]);
    a10 = *(__n128 *)v20;
    v22 = *(_OWORD *)(v20 + 16);
    *v21 = *(_OWORD *)v20;
    v21[1] = v22;
    ++*(_DWORD *)&v89[4];
    v19 += 32;
  }
  while (v17 != v18);
LABEL_6:
  JSC::B3::Air::Inst::generate((uint64_t *)&v103, (int **)&v88, a3, a4, a5, a6, a7, a8, (int8x8_t)a10.n128_u64[0]);
  v30 = v88;
  if (&v89[8] != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    *(_DWORD *)v89 = 0;
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  }
  v31 = *(_WORD *)(*(_QWORD *)(a2 + 112) + 12);
  v32 = v31 - 83;
  if (v32 > 5 || v32 == 1)
    v34 = 0;
  else
    v34 = *(WTF **)(a2 + 112);
  if ((v31 - 85) >= 4u)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  JSC::B3::StackmapSpecial::repsImpl(a4, dword_19914F6B0[(char)(v31 - 85)], *((_DWORD *)a1 + 8) + 1, (uint64_t *)a2, (uint64_t)&v100);
  v97 = (WTF *)v99;
  v98 = 3;
  if (*((_DWORD *)a1 + 8))
  {
    v40 = 0;
    v41 = 0;
    v42 = 32;
    do
    {
      if (++v41 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197F7A398);
      }
      v43 = (__int128 *)(*(_QWORD *)a2 + v42);
      if (v40 == (_DWORD)v98)
      {
        v80 = (__int128 *)WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, (void *)(v40 + 1), (unint64_t)v43, v35, v36, v37, v38, v39);
        v44 = (char *)v97 + 32 * HIDWORD(v98);
        v45 = *v80;
        v46 = v80[1];
      }
      else
      {
        v44 = (char *)v97 + 32 * v40;
        v45 = *v43;
        v46 = v43[1];
      }
      *(_OWORD *)v44 = v45;
      *((_OWORD *)v44 + 1) = v46;
      v40 = ++HIDWORD(v98);
      v42 += 32;
    }
    while (v41 < *((unsigned int *)a1 + 8));
  }
  else
  {
    v40 = 0;
  }
  v88 = a1;
  *(_DWORD *)v89 = v103;
  *(_QWORD *)&v89[4] = v104;
  v47 = v40;
  v90 = (WTF *)v93;
  v91 = 3;
  v92 = v40;
  if (v40 >= 4)
  {
    if (v40 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197F7A3A8);
    }
    v48 = (WTF *)WTF::fastMalloc((WTF *)(32 * v40));
    v91 = v40;
    v90 = v48;
    v47 = HIDWORD(v98);
    v40 = HIDWORD(v98);
  }
  else
  {
    v48 = (WTF *)v93;
  }
  if (v40)
  {
    v49 = v97;
    v50 = 32 * v47;
    do
    {
      v51 = *(_OWORD *)v49;
      v52 = *((_OWORD *)v49 + 1);
      v49 = (WTF *)((char *)v49 + 32);
      *(_OWORD *)v48 = v51;
      *((_OWORD *)v48 + 1) = v52;
      v48 = (WTF *)((char *)v48 + 32);
      v50 -= 32;
    }
    while (v50);
  }
  v53 = v102;
  v95[1] = 0;
  LODWORD(v96) = 0;
  v95[0] = v34;
  HIDWORD(v96) = v102;
  if (v102)
  {
    if (v102 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197F7A3A0);
    }
    v54 = (WTF *)WTF::fastMalloc((WTF *)(16 * v102));
    LODWORD(v96) = v53;
    v95[1] = v54;
    if (v102)
    {
      v55 = v100;
      v56 = 16 * v102;
      do
      {
        v57 = *v55++;
        *(_OWORD *)v54 = v57;
        v54 = (WTF *)((char *)v54 + 16);
        v56 -= 16;
      }
      while (v56);
    }
  }
  v58 = WTF::fastMalloc((WTF *)0xB0);
  v66 = v58;
  *(_DWORD *)(v58 + 8) = 1;
  *(_QWORD *)v58 = &off_1E357D528;
  *(_QWORD *)(v58 + 16) = v88;
  *(_DWORD *)(v58 + 24) = *(_DWORD *)v89;
  *(_QWORD *)(v58 + 28) = *(_QWORD *)&v89[4];
  v67 = (_OWORD *)(v58 + 56);
  *(_QWORD *)(v58 + 40) = v58 + 56;
  *(_QWORD *)(v58 + 48) = 3;
  v68 = v90;
  if (v90 == (WTF *)v93)
  {
    if (v92)
    {
      v69 = 32 * v92;
      v70 = (__int128 *)v93;
      do
      {
        v71 = *v70;
        v72 = v70[1];
        v70 += 2;
        *v67 = v71;
        v67[1] = v72;
        v67 += 2;
        v69 -= 32;
      }
      while (v69);
    }
  }
  else
  {
    v90 = (WTF *)v93;
    *(_QWORD *)(v58 + 40) = v68;
    v79 = v91;
    v91 = 3;
    *(_DWORD *)(v58 + 48) = v79;
  }
  v73 = v92;
  v92 = 0;
  *(_DWORD *)(v58 + 52) = v73;
  *(_OWORD *)(v58 + 152) = *(_OWORD *)v95;
  v74 = v96;
  v95[1] = 0;
  v96 = 0;
  *(_QWORD *)(v58 + 168) = v74;
  v75 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v75 == *(_DWORD *)(a4 + 8))
  {
    v81 = v75 + (v75 >> 2);
    if (v81 >= 0x10)
      v82 = v81 + 1;
    else
      v82 = 16;
    if (v82 <= v75 + 1)
      v83 = v75 + 1;
    else
      v83 = v82;
    if (v83 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197F7A3B0);
    }
    v84 = *(const void **)a4;
    v85 = (void *)WTF::fastMalloc((WTF *)(8 * v83));
    *(_DWORD *)(a4 + 8) = v83;
    *(_QWORD *)a4 = v85;
    memcpy(v85, v84, 8 * v75);
    if (v84)
    {
      if (*(const void **)a4 == v84)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v84, v59, v60, v61, v62, v63, v64, v65);
    }
    v86 = *(unsigned int *)(a4 + 12);
    v87 = v95[1];
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v86) = v66;
    *(_DWORD *)(a4 + 12) = v86 + 1;
    if (v87)
    {
      v95[1] = 0;
      LODWORD(v96) = 0;
      WTF::fastFree((unint64_t)v87, v59, v60, v61, v62, v63, v64, v65);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v75) = v58;
    *(_DWORD *)(a4 + 12) = v75 + 1;
  }
  v76 = v90;
  if (v93 != (_QWORD *)v90 && v90)
  {
    v90 = 0;
    v91 = 0;
    WTF::fastFree((unint64_t)v76, v59, v60, v61, v62, v63, v64, v65);
  }
  *(_QWORD *)a9 = 0xFFFFFFFFLL;
  *(_DWORD *)(a9 + 8) = -16773311;
  v77 = v97;
  if (v99 != (_BYTE *)v97 && v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree((unint64_t)v77, v59, v60, v61, v62, v63, v64, v65);
  }
  v78 = (unint64_t)v100;
  if (v100)
  {
    v100 = 0;
    v101 = 0;
    WTF::fastFree(v78, v59, v60, v61, v62, v63, v64, v65);
  }
}

uint64_t JSC::B3::CheckSpecial::dumpImpl(JSC::B3::CheckSpecial *this, WTF::PrintStream *a2)
{
  JSC::B3::Air::Kind *v4;
  WTF::PrintStream *v5;
  unint64_t v6;
  const char *v7;
  WTF::PrintStream *v8;
  uint64_t result;

  v4 = (JSC::B3::CheckSpecial *)((char *)this + 24);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::B3::Air::Kind::dump(v4, v5);
  WTF::PrintStream::printf(v5, "%s", "(");
  WTF::PrintStream::printf(v5, "%u", *((_DWORD *)this + 8));
  WTF::PrintStream::printf(v5, "%s", ",");
  v6 = *((char *)this + 28);
  if (v6 >= 3)
  {
    result = 356;
    __break(0xC471u);
  }
  else
  {
    v7 = off_1E357D890[v6];
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v8, "%s", v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    WTF::PrintStream::printf(v5, "%s", ")");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::B3::CheckSpecial::deepDumpImpl(JSC::B3::CheckSpecial *this, WTF::PrintStream *a2)
{
  JSC::B3::Air::Kind *v4;
  WTF::PrintStream *v5;

  v4 = (JSC::B3::CheckSpecial *)((char *)this + 24);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "B3::CheckValue lowered to ");
  JSC::B3::Air::Kind::dump(v4, v5);
  WTF::PrintStream::printf(v5, "%s", " with ");
  WTF::PrintStream::printf(v5, "%u", *((_DWORD *)this + 8));
  WTF::PrintStream::printf(v5, "%s", " args.");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::CheckValue::~CheckValue(JSC::B3::CheckValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  *(_QWORD *)this = off_1E357EF48;
  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v14 = JSC::B3::Value::childrenAlloc(this);
    v22 = *(_QWORD *)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v22 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v22, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)this = off_1E357EF48;
  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v14 = JSC::B3::Value::childrenAlloc(this);
    v15 = *(_QWORD *)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::CheckValue::convertToAdd(uint64_t this)
{
  if (*(unsigned __int8 *)(this + 12) - 85 >= 3)
  {
    this = 37;
    __break(0xC471u);
  }
  else
  {
    *(_WORD *)(this + 12) = 85;
  }
  return this;
}

uint64_t JSC::B3::CheckValue::CheckValue(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  _QWORD *v9;
  uint64_t v11;
  char v12;

  v8 = *(_DWORD *)(a4 + 16);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v9 = v9 + 2;
  v9[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357D550;
  v11 = 0;
  v12 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a4, (unint64_t)&v11);
  v11 = 0;
  v12 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a5, (unint64_t)&v11);
  return a1;
}

{
  int v8;
  _QWORD *v9;
  uint64_t v11;
  char v12;

  v8 = *(_DWORD *)(a4 + 16);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v9 = v9 + 2;
  v9[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357D550;
  v11 = 0;
  v12 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a4, (unint64_t)&v11);
  v11 = 0;
  v12 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a5, (unint64_t)&v11);
  return a1;
}

uint64_t JSC::B3::CheckValue::CheckValue(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357D550;
  v8 = 0;
  v9 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a4, (unint64_t)&v8);
  return a1;
}

{
  _QWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357D550;
  v8 = 0;
  v9 = 0;
  JSC::B3::StackmapValue::append((__int128 *)a1, a4, (unint64_t)&v8);
  return a1;
}

BOOL JSC::B3::shouldDumpIR(uint64_t a1, int a2)
{
  BOOL v2;
  int v5;

  if (*(_BYTE *)(a1 + 211))
    v2 = 0;
  else
    v2 = qword_1ECF4C32A == 0;
  if (!v2 || byte_1ECF4C323 != 0 || BYTE1(qword_1ECF4C32A) != 0)
    return 1;
  if (a2)
    v5 = byte_1ECF4C327;
  else
    v5 = byte_1ECF4C326;
  return v5 != 0;
}

void JSC::B3::compile(JSC::B3 *this@<X0>, JSC::B3::Procedure *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF **a9@<X8>)
{
  unint64_t v11;
  pthread_key_t *v12;
  void *v13;
  JSC::CCallHelpers *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  unint64_t v23;
  pthread_key_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF **p_start;
  uint64_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  WTF *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[4];
  double v106;
  JSC::ExecutableMemoryHandle **v107;
  JSC::ExecutableMemoryHandle *v108;
  char v109;
  WTF **v110;
  JSC::ExecutableMemoryHandle *v111;
  size_t len;
  uint64_t v113;
  WTF *v114;
  _BYTE v115[128];
  unsigned int v116;
  char v117;
  int v118;
  unsigned int v119;
  __int128 start;
  __int128 v121;
  uint64_t v122;
  _QWORD v123[3];
  char v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  WTF *v128;
  _BYTE v129[128];
  unsigned int v130;
  int v131;
  int v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v105[0] = (uint64_t)"Total B3+Air";
  v105[1] = 13;
  v105[2] = (uint64_t)"compile";
  v105[3] = 8;
  v106 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v69 = mach_absolute_time();
    v71 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v71 != -1)
    {
      v123[0] = &v107;
      v111 = (JSC::ExecutableMemoryHandle *)v123;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v70) = dword_1ECF4400C;
    v106 = (double)(v69 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v70 * 1000000000.0);
  }
  JSC::B3::prepareForGeneration((JSC::B3::Procedure **)this, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v123[0]) = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0x8000000080000000;
  v128 = (WTF *)v129;
  v130 = 128;
  v11 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v11 != -1)
  {
    v111 = (JSC::ExecutableMemoryHandle *)&v110;
    v107 = &v111;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v12 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v20 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v20)
  {
    v20 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v20, v12);
  }
  v21 = *(WTF **)v20;
  if (*(_QWORD *)v20 != v20 + 8)
  {
    v22 = *(_DWORD *)(v20 + 136);
    if (v130 < v22)
    {
      if (v128 && v128 != (WTF *)v129)
      {
        WTF::fastFree((unint64_t)v128, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
        v21 = *(WTF **)v20;
        v22 = *(_DWORD *)(v20 + 136);
      }
      v128 = v21;
      v130 = v22;
      *(_QWORD *)v20 = v20 + 8;
      *(_DWORD *)(v20 + 136) = 128;
    }
  }
  v133 = 1;
  v131 = 0;
  v132 = 0;
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = v123;
  v138 = 16;
  v139 = 0;
  v140 = 0x10000;
  v141 = v123;
  v142 = 17;
  v143 = 0;
  v144 = 0x20000;
  v145 = 0;
  v147 = 0;
  v146 = 0;
  JSC::B3::Air::generate(*((JSC::B3::Air::GenerateAndAllocateRegisters ***)this + 20), (JSC::B3::Air::Code *)v123, v14, v15, v16, v17, v18, v19);
  v111 = 0;
  len = 0;
  v113 = 0;
  v114 = (WTF *)v115;
  v116 = 128;
  v23 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v23 != -1)
  {
    v107 = (JSC::ExecutableMemoryHandle **)&v109;
    v110 = (WTF **)&v107;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v110, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v24 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v32 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v32)
  {
    v32 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v32, v24);
  }
  v33 = *(WTF **)v32;
  if (*(_QWORD *)v32 != v32 + 8)
  {
    v34 = *(_DWORD *)(v32 + 136);
    if (v116 < v34)
    {
      if (v114 && v114 != (WTF *)v115)
      {
        WTF::fastFree((unint64_t)v114, v25, v26, v27, v28, v29, v30, v31);
        v33 = *(WTF **)v32;
        v34 = *(_DWORD *)(v32 + 136);
      }
      v114 = v33;
      v116 = v34;
      *(_QWORD *)v32 = v32 + 8;
      *(_DWORD *)(v32 + 136) = 128;
    }
  }
  v35 = 1;
  v117 = 1;
  v118 = 0;
  v119 = 18;
  start = 0u;
  v121 = 0u;
  v122 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v111, (uint64_t)v123, 1, v27, v28, v29, v30, v31);
  if (byte_1ECF4C288)
  {
LABEL_50:
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v111, v35, 0, 0, "Compilation", (WTF **)&v107, v105[0]);
    v50 = (WTF *)v107;
    v49 = (unsigned int *)v108;
    if (v108)
    {
      do
        v72 = __ldaxr(v49);
      while (__stlxr(v72 + 1, v49));
      v73 = (unsigned int *)v108;
      v108 = 0;
      if (v73)
      {
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v73);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v73, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
          WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
        }
      }
      v76 = (WTF *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = 0;
      *a9 = v50;
      do
        v77 = __ldaxr(v49);
      while (__stlxr(v77 + 1, v49));
      a9[1] = (WTF *)v49;
      a9[2] = v76;
      do
      {
        v78 = __ldaxr(v49);
        v58 = --v78 == 0;
      }
      while (__stlxr(v78, v49));
      goto LABEL_40;
    }
    goto LABEL_62;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v35 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_50;
  }
  if (DWORD1(v121))
  {
    v36 = (uint64_t *)*((_QWORD *)&start + 1);
    v37 = 8 * DWORD1(v121);
    do
    {
      v38 = *v36++;
      (*(void (**)(uint64_t, JSC::ExecutableMemoryHandle **))(*(_QWORD *)v38 + 16))(v38, &v111);
      v37 -= 8;
    }
    while (v37);
  }
  p_start = (WTF **)&start;
  if (HIDWORD(v122))
  {
    v66 = (uint64_t *)*((_QWORD *)&v121 + 1);
    v67 = 8 * HIDWORD(v122);
    do
    {
      v68 = *v66++;
      (*(void (**)(uint64_t, JSC::ExecutableMemoryHandle **))(*(_QWORD *)v68 + 16))(v68, &v111);
      v67 -= 8;
    }
    while (v67);
  }
  v40 = v119;
  v41 = len;
  *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v119 / 2] += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v40);
  sys_icache_invalidate((void *)start, v41);
  v49 = (unsigned int *)v111;
  if (v111)
  {
    do
      v96 = __ldaxr(v49);
    while (__stlxr(v96 + 1, v49));
    p_start = (WTF **)(v49 + 2);
  }
  v50 = *p_start;
  v107 = (JSC::ExecutableMemoryHandle **)v50;
  v108 = (JSC::ExecutableMemoryHandle *)v49;
  if (byte_1ECF4C2A2)
  {
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v111, (uint64_t)&v107, 0, 0);
    if (v49)
      goto LABEL_31;
LABEL_62:
    v87 = (WTF *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    *a9 = v50;
    a9[1] = (WTF *)v49;
    a9[2] = v87;
    goto LABEL_42;
  }
  if (!v49)
    goto LABEL_62;
  do
LABEL_31:
    v51 = __ldaxr(v49);
  while (__stlxr(v51 + 1, v49));
  v52 = (unsigned int *)v108;
  v108 = 0;
  if (v52)
  {
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v52, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
  }
  v55 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  *a9 = v50;
  do
    v56 = __ldaxr(v49);
  while (__stlxr(v56 + 1, v49));
  a9[1] = (WTF *)v49;
  a9[2] = v55;
  do
  {
    v57 = __ldaxr(v49);
    v58 = --v57 == 0;
  }
  while (__stlxr(v57, v49));
LABEL_40:
  if (v58)
  {
    atomic_store(1u, v49);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v49, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
LABEL_42:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v111, v42, v43, v44, v45, v46, v47, v48);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v123, v59, v60, v61, v62, v63, v64, v65);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v105);
}

void JSC::B3::Const128Value::~Const128Value(JSC::B3::Const128Value *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::Const128Value::~Const128Value(JSC::B3::Const128Value *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Const128Value::vectorAndConstant(JSC::B3::Const128Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 7)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v23 = vandq_s8(*(int8x16_t *)((char *)a3 + 40), *(int8x16_t *)((char *)this + 40));
  result = WTF::fastMalloc((WTF *)0x38);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 7;
  *(_DWORD *)(result + 16) = 5;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D6F8;
  *(int8x16_t *)(result + 40) = v23;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v3;
    return v3;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const128Value::vectorOrConstant(JSC::B3::Const128Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 7)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v23 = vorrq_s8(*(int8x16_t *)((char *)a3 + 40), *(int8x16_t *)((char *)this + 40));
  result = WTF::fastMalloc((WTF *)0x38);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 7;
  *(_DWORD *)(result + 16) = 5;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D6F8;
  *(int8x16_t *)(result + 40) = v23;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v3;
    return v3;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const128Value::vectorXorConstant(JSC::B3::Const128Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 7)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v23 = veorq_s8(*(int8x16_t *)((char *)a3 + 40), *(int8x16_t *)((char *)this + 40));
  result = WTF::fastMalloc((WTF *)0x38);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 7;
  *(_DWORD *)(result + 16) = 5;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D6F8;
  *(int8x16_t *)(result + 40) = v23;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v3;
    return v3;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const128Value::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  WTF::PrintStream *v29;
  float v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  char v35;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v33, v12);
    }
    else
    {
      WTF::CString::CString(&v33, &str_25, 0);
      v34 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v33);
    if (v34 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v33, v18);
    }
    else
    {
      WTF::CString::CString(&v33, &str_25, 0);
      v34 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v33);
    if (v34 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%llu", *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v21 = *(char **)a2;
    v22 = *(_QWORD *)(a2 + 8);
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    if (v21)
    {
      v25 = v22 - 1;
      if (!v22)
        v25 = 0;
      WTF::StringImpl::utf8ForCharacters(v21, v25, (uint64_t)&v33, v24);
    }
    else
    {
      WTF::CString::CString(&v33, &str_25, 0);
      v34 = 0;
    }
    WTF::printExpectedCStringHelper(v23, "StringView", &v33);
    if (v34 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v26 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v27 = *(char **)(a2 + 16);
    v28 = *(_QWORD *)(a2 + 24);
    v29 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    if (v27)
    {
      v31 = v28 - 1;
      if (!v28)
        v31 = 0;
      WTF::StringImpl::utf8ForCharacters(v27, v31, (uint64_t)&v33, v30);
    }
    else
    {
      WTF::CString::CString(&v33, &str_25, 0);
      v34 = 0;
    }
    WTF::printExpectedCStringHelper(v29, "StringView", &v33);
    if (v34 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%llu", *(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

uint64_t JSC::B3::Value::child(JSC::B3::Value *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;

  if (*((_BYTE *)this + 20) == 4)
  {
    v5 = JSC::B3::Value::childrenVector(this);
    if (*(_DWORD *)(v5 + 12) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x197F7BAE4);
    }
    return *(_QWORD *)v5 + 8 * a2;
  }
  else
  {
    v2 = 40;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        return (uint64_t)this + 8 * a2 + v2;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v2 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v2 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v2 = 64;
        break;
      case 0x53:
        v2 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v2 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F7BADCLL);
    }
    return (uint64_t)this + 8 * a2 + v2;
  }
}

{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  char *v6;

  if (*((_BYTE *)this + 20) == 4)
  {
    v5 = 40;
    switch(*((_WORD *)this + 6))
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        break;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v5 = 48;
        break;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v5 = 56;
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v5 = 64;
        break;
      case 0x53u:
        v5 = 176;
        break;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v5 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19801EA38);
    }
    v6 = (char *)this + v5;
    if (*((_DWORD *)v6 + 3) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19801EA40);
    }
    v3 = *(char **)v6;
  }
  else
  {
    v2 = 40;
    switch(*((_WORD *)this + 6))
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        break;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v2 = 48;
        break;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v2 = 56;
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v2 = 64;
        break;
      case 0x53u:
        v2 = 176;
        break;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v2 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19801EA18);
    }
    v3 = (char *)this + v2;
  }
  return *(_QWORD *)&v3[8 * a2];
}

uint64_t JSC::B3::MemoryValue::child(JSC::B3::MemoryValue *this, unsigned int a2)
{
  uint64_t v2;

  v2 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      return (uint64_t)this + 8 * a2 + v2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v2 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v2 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v2 = 64;
      break;
    case 0x53:
      v2 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v2 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F7BDE0);
  }
  return (uint64_t)this + 8 * a2 + v2;
}

{
  uint64_t v2;

  v2 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      return *(_QWORD *)((char *)this + 8 * a2 + v2);
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v2 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v2 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v2 = 64;
      break;
    case 0x53:
      v2 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v2 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F9AE60);
  }
  return *(_QWORD *)((char *)this + 8 * a2 + v2);
}

void WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 24 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v12 - 4);
        v34 = 0;
        v35 = v12 + 24 * v28;
        goto LABEL_34;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 24 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  *v20 = v15;
  v24 = v20[1];
  if (v24)
  {
    v20[1] = 0;
    *((_DWORD *)v20 + 4) = 0;
    WTF::fastFree(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  v20[1] = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  *((_DWORD *)v20 + 4) = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  *((_DWORD *)v20 + 5) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_25;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_30:
      v20 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, v33, (uint64_t)v20, a4, a5, a6, a7, a8);
      v29 = *a2;
      if (*a2)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_33;
    }
LABEL_25:
    v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
    goto LABEL_30;
  }
LABEL_33:
  v35 = v29 + 24 * v32;
  v34 = 1;
LABEL_34:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v34;
}

_QWORD *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    do
    {
      v23 = (uint64_t *)(v9 + 24 * v20);
      v24 = *v23;
      if (*v23 != -1)
      {
        if (v24)
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
          v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
          v34 = v30 & ((v33 >> 31) ^ v33);
          v35 = 1;
          do
          {
            v36 = v34;
            v37 = (_QWORD *)(v29 + 24 * v34);
            v34 = (v34 + v35++) & v30;
          }
          while (*v37);
          v38 = v36;
          v39 = v29 + 24 * v36;
          v42 = *(_QWORD *)(v39 + 8);
          v41 = (_QWORD *)(v39 + 8);
          v40 = v42;
          if (v42)
          {
            *v41 = 0;
            *(_DWORD *)(v29 + 24 * v36 + 16) = 0;
            WTF::fastFree(v40, v13, v14, v15, v16, v17, v18, v19);
            v24 = *v23;
          }
          *v37 = v24;
          v43 = v9 + 24 * v20;
          *v41 = 0;
          v41[1] = 0;
          v45 = *(_QWORD *)(v43 + 8);
          v44 = v43 + 8;
          *(_QWORD *)v44 = 0;
          *v41 = v45;
          v46 = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + 8) = 0;
          v47 = v29 + 24 * v38;
          *(_DWORD *)(v47 + 16) = v46;
          v48 = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *(_DWORD *)(v47 + 20) = v48;
          v49 = *(_QWORD *)v44;
          if (*(_QWORD *)v44)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v49, v13, v14, v15, v16, v17, v18, v19);
          }
          if (v23 == (uint64_t *)a3)
            v21 = v37;
        }
        else
        {
          v25 = v9 + 24 * v20;
          v28 = *(_QWORD *)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v9 + 24 * v20 + 16) = 0;
            WTF::fastFree(v26, v13, v14, v15, v16, v17, v18, v19);
          }
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

char *WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x197F7C5C0);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 29)
      goto LABEL_30;
    v24 = *((unsigned int *)a1 + 3);
    v25 = (char *)WTF::fastMalloc((WTF *)(8 * v23));
    *((_DWORD *)a1 + 2) = v23;
    *a1 = v25;
    memcpy(v25, v5, 8 * v24);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

uint64_t JSC::B3::Value::childrenVector(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      goto LABEL_2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      return (uint64_t)this + 48;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v1 = 56;
LABEL_2:
      result = (uint64_t)this + v1;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      result = (uint64_t)this + 64;
      break;
    case 0x53:
      result = (uint64_t)this + 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      result = (uint64_t)this + 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F7C650);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  v1 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      goto LABEL_2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      return (uint64_t)this + 48;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v1 = 56;
LABEL_2:
      result = (uint64_t)this + v1;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      result = (uint64_t)this + 64;
      break;
    case 0x53:
      result = (uint64_t)this + 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      result = (uint64_t)this + 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FE70ECLL);
  }
  return result;
}

_QWORD *WTF::HashTable<std::tuple<JSC::B3::Value *,long long>,WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashMap<std::tuple<JSC::B3::Value *,long long>,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::B3::Value *,long long>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc((32 * a2) | 0x10, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    do
    {
      v23 = (uint64_t *)(v9 + 32 * v20);
      v24 = *v23;
      if (*v23 != -1)
      {
        v25 = v23[1];
        if (v24)
          v26 = 0;
        else
          v26 = v25 == 0;
        if (v26)
        {
          v29 = v9 + 32 * v20;
          v32 = *(_QWORD *)(v29 + 16);
          v31 = (_QWORD *)(v29 + 16);
          v30 = v32;
          if (v32)
          {
            *v31 = 0;
            *(_DWORD *)(v9 + 32 * v20 + 24) = 0;
            WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
          }
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v33 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
          v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
          v36 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
          v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
          v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
          v39 = v28 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v35 >> 31) ^ v35)
                                         + 95187966 * ((v38 >> 31) ^ v38))) >> 4);
          v40 = 1;
          do
          {
            v41 = v39;
            v42 = (_QWORD *)(v27 + 32 * v39);
            v39 = (v39 + v40++) & v28;
            if (*v42)
              v43 = 0;
            else
              v43 = v42[1] == 0;
          }
          while (!v43);
          v45 = v42 + 2;
          v44 = v42[2];
          if (v44)
          {
            *v45 = 0;
            *(_DWORD *)(v27 + 32 * v41 + 24) = 0;
            WTF::fastFree(v44, v13, v14, v15, v16, v17, v18, v19);
          }
          *(_OWORD *)v42 = *(_OWORD *)v23;
          v46 = v9 + 32 * v20;
          *v45 = 0;
          v42[3] = 0;
          v48 = *(_QWORD *)(v46 + 16);
          v47 = v46 + 16;
          *(_QWORD *)v47 = 0;
          *v45 = v48;
          v49 = *(_DWORD *)(v47 + 8);
          *(_DWORD *)(v47 + 8) = 0;
          v50 = v27 + 32 * v41;
          *(_DWORD *)(v50 + 24) = v49;
          v51 = *(_DWORD *)(v47 + 12);
          *(_DWORD *)(v47 + 12) = 0;
          *(_DWORD *)(v50 + 28) = v51;
          v52 = *(_QWORD *)v47;
          if (*(_QWORD *)v47)
          {
            *(_QWORD *)v47 = 0;
            *(_DWORD *)(v47 + 8) = 0;
            WTF::fastFree(v52, v13, v14, v15, v16, v17, v18, v19);
          }
          if (v23 == (uint64_t *)a3)
            v21 = v42;
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (JSC::B3::Value *)JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>(*a1, a3, a4);
  return JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)a1, a2, v6, v7, v8, v9, v10, v11);
}

JSC::B3::Value *JSC::B3::InsertionSet::insertValue(JSC::B3::InsertionSet *this, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v15;
  __int128 v16;

  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v10 = (uint64_t *)((char *)this + 8);
  v11 = *((unsigned int *)this + 5);
  if ((_DWORD)v11 == *((_DWORD *)this + 4))
  {
    v15 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v11 + 1), (unint64_t)&v16, a4, a5, a6, a7, a8);
    v11 = *((unsigned int *)this + 5);
    v12 = *((_QWORD *)this + 1);
    v13 = *v15;
  }
  else
  {
    v12 = *v10;
    v13 = v16;
  }
  *(_OWORD *)(v12 + 16 * v11) = v13;
  ++*((_DWORD *)this + 5);
  return a3;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = a3;
  v8 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8 - 8);
    *(_DWORD *)(a1 + 92) = v8 - 1;
    v10 = *(_QWORD *)(a1 + 64);
    goto LABEL_4;
  }
  v9 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v9 != *(_DWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *(_DWORD *)(a1 + 76) = v9 + 1;
LABEL_4:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = *(const void **)(a1 + 64);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*(const void **)(a1 + 64) == v14)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *(unsigned int *)(a1 + 76);
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *(_DWORD *)(a1 + 76) = v23 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 9)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 9)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 8;
    goto LABEL_11;
  }
  if (!(v11 >> 28))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t casual;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v8 = a1;
  v9 = 40;
  switch(a1)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 81:
    case 153:
    case 154:
    case 157:
    case 159:
      break;
    case 1:
    case 2:
    case 9:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 79:
    case 80:
    case 84:
    case 89:
    case 90:
    case 92:
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 141:
    case 143:
    case 147:
    case 152:
    case 155:
    case 156:
    case 158:
      v9 = 48;
      break;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 68:
    case 69:
    case 70:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 140:
    case 144:
    case 146:
    case 150:
    case 151:
      v9 = 56;
      break;
    case 62:
    case 71:
    case 72:
    case 142:
    case 148:
    case 149:
      v9 = 64;
      break;
    case 82:
    case 83:
    case 85:
    case 86:
    case 87:
    case 88:
    case 145:
      v9 = 80;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F7D184);
  }
  if (v9 <= 0x30)
    v10 = 48;
  else
    v10 = v9;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    goto LABEL_32;
  v12 = (unint64_t)(v10 + 15) >> 4;
  v13 = v11 + 184 * v12;
  v14 = v13 + 8120;
  *(_BYTE *)(v13 + 8120) = 1;
  v15 = *(unsigned int *)(v13 + 8136);
  if (!(_DWORD)v15)
  {
    v17 = *(_QWORD *)(v14 + 40);
    v18 = *(_QWORD *)(v14 + 24);
    if (v17)
    {
LABEL_12:
      v19 = __clz(v17);
      *(_QWORD *)(v14 + 40) = v17 & ~(0x8000000000000000 >> v19);
      casual = v18 + 16 * v19;
      goto LABEL_8;
    }
    if (*(_BYTE *)(v14 + 5) == 6)
    {
      v23 = *(unsigned int *)(v14 + 32);
      v24 = *(_DWORD *)(v14 + 36);
      if (v23 < v24)
      {
        *(_QWORD *)(v14 + 8 * v23 + 56) = 0;
        v25 = (unint64_t *)(8 * v23 + 184 * v12 + v11 + 8184);
        v26 = v24 - 1 - v23;
        while (v26)
        {
          v18 += 1024;
          v28 = *v25++;
          v27 = v28;
          LODWORD(v23) = v23 + 1;
          --v26;
          if (v28)
          {
            v17 = __rbit64(v27);
            *(_DWORD *)(v14 + 32) = v23;
            *(_QWORD *)(v14 + 24) = v18;
            goto LABEL_12;
          }
        }
        *(_DWORD *)(v14 + 32) = v24;
      }
    }
    *(_BYTE *)v14 = 0;
LABEL_32:
    casual = bmalloc_allocate_casual(v10, 1);
    goto LABEL_9;
  }
  *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
  casual = *(_QWORD *)(v14 + 8) - v15;
LABEL_8:
  *(_BYTE *)v14 = 0;
LABEL_9:
  switch(a1)
  {
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 140:
    case 144:
    case 146:
    case 150:
    case 151:
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = a1;
      *(_DWORD *)(casual + 16) = JSC::B3::Value::typeFor(v8, a3, a4);
      *(_BYTE *)(casual + 20) = 2;
      *(_QWORD *)(casual + 24) = a2;
      *(_QWORD *)(casual + 32) = 0;
      v20 = 40;
      switch(*(_BYTE *)(casual + 12))
      {
        case 0:
        case 1:
        case 2:
        case 8:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x4F:
        case 0x99:
        case 0x9A:
        case 0x9B:
        case 0x9D:
        case 0x9E:
        case 0x9F:
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0x50:
        case 0x54:
        case 0x5A:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5E:
        case 0x5F:
        case 0x60:
        case 0x61:
        case 0x62:
        case 0x63:
        case 0x64:
        case 0x65:
        case 0x66:
        case 0x67:
        case 0x68:
        case 0x69:
        case 0x6A:
        case 0x6B:
        case 0x6C:
        case 0x6D:
        case 0x6E:
        case 0x6F:
        case 0x70:
        case 0x71:
        case 0x72:
        case 0x73:
        case 0x74:
        case 0x75:
        case 0x76:
        case 0x77:
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
        case 0x7E:
        case 0x7F:
        case 0x80:
        case 0x81:
        case 0x82:
        case 0x83:
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x88:
        case 0x89:
        case 0x8A:
        case 0x8B:
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
        case 0x91:
        case 0x92:
        case 0x93:
        case 0x94:
        case 0x95:
        case 0x96:
        case 0x97:
        case 0x98:
          v20 = 48;
          break;
        case 7:
        case 0x51:
        case 0x59:
        case 0x9C:
          v20 = 56;
          break;
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x52:
          v20 = 64;
          break;
        case 0x53:
          v20 = 176;
          break;
        case 0x55:
        case 0x56:
        case 0x57:
        case 0x58:
          v20 = 112;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197F7D1A4);
      }
      v21 = (uint64_t *)(casual + v20);
      *v21 = a3;
      v21[1] = a4;
      return casual;
    default:
      JSC::B3::Value::badKind(v8, 2);
  }
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int **v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int **v41;
  unsigned int **v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int **v47;
  unsigned int **v48;

  v9 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v9)
  {
    v35 = *(unsigned int ***)(a1 + 248);
    v36 = &v35[v9];
    do
    {
      v37 = *v35;
      *v35 = 0;
      if (v37)
      {
        v38 = v37 + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v37 + 2);
          v47 = v35;
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
          v35 = v47;
        }
      }
      ++v35;
    }
    while (v35 != v36);
  }
  v10 = *(_QWORD *)(a1 + 248);
  if (v10)
  {
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v11)
  {
    v41 = *(unsigned int ***)(a1 + 232);
    v42 = &v41[v11];
    do
    {
      v43 = *v41;
      *v41 = 0;
      if (v43)
      {
        v44 = v43 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v43 + 2);
          v48 = v41;
          (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
          v41 = v48;
        }
      }
      ++v41;
    }
    while (v41 != v42);
  }
  v12 = *(_QWORD *)(a1 + 232);
  if (v12)
  {
    *(_QWORD *)(a1 + 232) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v13)
  {
    v14 = 16 * v13;
    v15 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 216) + 8);
    do
    {
      v16 = *v15;
      *v15 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      v15 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  v25 = *(_QWORD *)(a1 + 216);
  if (v25)
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AssemblerBuffer::~AssemblerBuffer((JSC::AssemblerBuffer *)(a1 + 56));
  v33 = *(_QWORD *)(a1 + 32);
  if (v33)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
  }
  return a1;
}

void JSC::AssemblerBuffer::~AssemblerBuffer(JSC::AssemblerBuffer *this)
{
  unint64_t v2;
  pthread_key_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  char **v17;
  char *v18;

  v2 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v2 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v3 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v11 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v11)
  {
    v11 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v11, v3);
  }
  v13 = (char *)this + 8;
  v12 = *(_QWORD *)this;
  if (*(JSC::AssemblerBuffer **)this != (JSC::AssemblerBuffer *)((char *)this + 8))
  {
    v14 = *((_DWORD *)this + 34);
    if (*(_DWORD *)(v11 + 136) >= v14)
    {
      if (v12)
      {
        WTF::fastFree(v12, v4, v5, v6, v7, v8, v9, v10);
        *((_DWORD *)this + 34) = 128;
        *(_QWORD *)this = v13;
      }
    }
    else
    {
      if (*(_QWORD *)v11)
        v15 = *(_QWORD *)v11 == v11 + 8;
      else
        v15 = 1;
      if (!v15)
      {
        WTF::fastFree(*(_QWORD *)v11, v4, v5, v6, v7, v8, v9, v10);
        v12 = *(_QWORD *)this;
        v14 = *((_DWORD *)this + 34);
      }
      *(_QWORD *)v11 = v12;
      *(_DWORD *)(v11 + 136) = v14;
      *(_QWORD *)this = v13;
      *((_DWORD *)this + 34) = 128;
    }
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::CheckSpecial::forEachArg(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::$_0>::implFunction(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int16 a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(a1 + 16);
  if (a3 != 10 && (a3 - 4) <= 6)
    **(_WORD **)v5 = a5 | 0x100;
  v6 = *(_QWORD *)(v5 + 8);
  if (!*(_DWORD *)(v6 + 12)
    || (v7 = (unint64_t)(a2 - *(_QWORD *)v6) >> 5,
        v8 = *(_QWORD *)(v5 + 24),
        v9 = (v7 + 1),
        v9 >= *(unsigned int *)(v8 + 12)))
  {
    __break(0xC471u);
    JUMPOUT(0x197F7DC48);
  }
  return (**(uint64_t (***)(_QWORD, uint64_t))(v5 + 16))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), *(_QWORD *)v8 + 32 * v9);
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 4)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 3;
    goto LABEL_15;
  }
  if (!(v14 >> 27))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_15:
    if ((_DWORD)v15)
    {
      v17 = 32 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18;
        v20 = v18[1];
        v18 += 2;
        *v16 = v19;
        v16[1] = v20;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 4)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v11 >> 27))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_12:
    if ((_DWORD)v14)
    {
      v16 = 32 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17;
        v19 = v17[1];
        v17 += 2;
        *v15 = v18;
        v15[1] = v19;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),JSC::B3::CheckSpecial::generate(JSC::B3::Air::Inst &,JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)::$_0>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(a1 + 160);
  if (v9)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (a1 + 56 != v10 && v10 != 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),JSC::B3::CheckSpecial::generate(JSC::B3::Air::Inst &,JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)::$_0>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF *v10;

  v9 = *((_QWORD *)this + 20);
  if (v9)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (WTF *)*((_QWORD *)this + 5);
  if ((WTF *)((char *)this + 56) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),JSC::B3::CheckSpecial::generate(JSC::B3::Air::Inst &,JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _OWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int8x8_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _OWORD *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  JSC::AssemblerBuffer *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  WTF *v143;
  JSC::AssemblerBuffer *v144;
  JSC::AssemblerBuffer *v145;
  JSC::AssemblerBuffer *v146;
  JSC::AssemblerBuffer *v147;
  JSC::AssemblerBuffer *v148;
  JSC::AssemblerBuffer *v149;
  JSC::AssemblerBuffer *v150;
  int v151;
  unsigned int v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  int v156;
  int v157;
  JSC::AssemblerBuffer *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  WTF *v169;
  WTF *v170;
  _BYTE v171[48];
  __int128 v172;
  uint64_t v173;
  int v174;
  _BYTE v175[32];
  _BYTE v176[32];
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 16);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
  switch(*(_WORD *)(v11 + 24))
  {
    case 0x12E:
      v16 = *(_DWORD *)(v11 + 32);
      if (v16 == 3)
      {
        v54 = *(_DWORD *)(a1 + 52);
        if (v54 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB6CLL);
        }
        if (v54 == 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB74);
        }
        v55 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(v55 + 32) != *(_QWORD *)(v55 + 64)
          || *(unsigned __int8 *)(v55 + 40) != *(unsigned __int8 *)(v55 + 72)
          || (v22 = *(_DWORD *)(v55 + 48), v22 != *(_DWORD *)(v55 + 80))
          || *(_DWORD *)(v55 + 52) != *(_DWORD *)(v55 + 84)
          || *(_DWORD *)(v55 + 44) != *(_DWORD *)(v55 + 76))
        {
          v110 = *(_OWORD *)(v55 + 32);
          v111 = *(_OWORD *)(v55 + 41);
          *(_OWORD *)&v176[9] = *(_OWORD *)(v55 + 73);
          v112 = *(_OWORD *)(v55 + 64);
          *(_OWORD *)v175 = v110;
          *(_OWORD *)&v175[9] = v111;
          *(_OWORD *)v176 = v112;
          v169 = (WTF *)v171;
          *(_OWORD *)v171 = *(_OWORD *)v175;
          *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
          *(_OWORD *)&v171[32] = v112;
          v172 = *(_OWORD *)&v176[16];
LABEL_122:
          v33 = (int8x8_t)0x200000003;
          v170 = (WTF *)0x200000003;
          v173 = 0;
          v34 = 9;
          goto LABEL_123;
        }
        goto LABEL_51;
      }
      if (v16 != 4)
        goto LABEL_126;
      v17 = *(_DWORD *)(a1 + 52);
      if (v17 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB4CLL);
      }
      if (v17 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB54);
      }
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(v18 + 32);
      v20 = *(_QWORD *)(v18 + 64);
      if (v19 == v20
        && (v21 = *(unsigned __int8 *)(v18 + 40), v21 == *(unsigned __int8 *)(v18 + 72))
        && (v22 = *(_DWORD *)(v18 + 48), v22 == *(_DWORD *)(v18 + 80))
        && (v23 = *(_DWORD *)(v18 + 52), v23 == *(_DWORD *)(v18 + 84))
        && (v24 = *(_DWORD *)(v18 + 44), v24 == *(_DWORD *)(v18 + 76)))
      {
        if (v17 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB9CLL);
        }
        v25 = (_OWORD *)(v18 + 96);
        v26 = *(_QWORD *)(v18 + 96);
        if (v19 == v26)
        {
          v27 = *(unsigned __int8 *)(v18 + 104);
          if (v21 == v27)
          {
            if (v22 != *(_DWORD *)(v18 + 112) || v23 != *(_DWORD *)(v18 + 116) || v24 != *(_DWORD *)(v18 + 108))
              goto LABEL_90;
LABEL_51:
            v56 = v22 - 1;
            v64 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID>((char)(v22 - 1));
            v65 = (JSC::AssemblerBuffer *)(a2 + 56);
            v66 = *(_DWORD *)(a2 + 200);
            if (v66 + 4 > *(_DWORD *)(a2 + 192))
            {
              v153 = v64;
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v64 = v153;
              v65 = (JSC::AssemblerBuffer *)(a2 + 56);
              v66 = *(_DWORD *)(a2 + 200);
            }
            v67 = v64;
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = v64 | 0xF81F0FE0;
            v68 = *(_DWORD *)(a2 + 200);
            v69 = v68 + 4;
            *(_DWORD *)(a2 + 200) = v68 + 4;
            if ((v68 + 8) > *(_DWORD *)(a2 + 192))
            {
              v162 = v64;
              v144 = v65;
              v154 = v64;
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v64 = v154;
              v65 = v144;
              v67 = v162;
              v69 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = v67 | 0x1A9F37E0;
            v70 = *(_DWORD *)(a2 + 200);
            v71 = v70 + 4;
            *(_DWORD *)(a2 + 200) = v70 + 4;
            if ((v70 + 8) > *(_DWORD *)(a2 + 192))
            {
              v163 = v67;
              v145 = v65;
              v155 = v64;
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v64 = v155;
              v65 = v145;
              v67 = v163;
              v71 = *(_DWORD *)(a2 + 200);
            }
            v72 = v64 & 0x1F;
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v71) = v72 | (32 * v72) | 0x53010000;
            v73 = *(_DWORD *)(a2 + 200);
            v74 = v73 + 4;
            *(_DWORD *)(a2 + 200) = v73 + 4;
            if ((v73 + 8) > *(_DWORD *)(a2 + 192))
            {
              v164 = v67;
              v146 = v65;
              v156 = v72;
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v72 = v156;
              v65 = v146;
              v67 = v164;
              v74 = *(_DWORD *)(a2 + 200);
            }
            v75 = v56 & 0x1F;
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v74) = v75 | (32 * v75) | 0x53017C00;
            v76 = *(_DWORD *)(a2 + 200);
            v77 = v76 + 4;
            *(_DWORD *)(a2 + 200) = v76 + 4;
            if ((v76 + 8) > *(_DWORD *)(a2 + 192))
            {
              v165 = v67;
              v147 = v65;
              v157 = v72;
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v72 = v157;
              v65 = v147;
              v67 = v165;
              v77 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v77) = (v72 << 16) | (32 * v75) | v75 | 0x2A000000;
            v78 = *(_DWORD *)(a2 + 200);
            v79 = v78 + 4;
            *(_DWORD *)(a2 + 200) = v78 + 4;
            if ((v78 + 8) > *(_DWORD *)(a2 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v65, v57, v58, v59, v60, v61, v62, v63);
              v79 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v79) = v67 | 0xF84107E0;
LABEL_84:
            *(_DWORD *)(a2 + 200) += 4;
            goto LABEL_126;
          }
LABEL_89:
          if (v21 != v27)
          {
LABEL_114:
            v26 = *(_QWORD *)(v18 + 32);
            goto LABEL_115;
          }
LABEL_90:
          if (*(_DWORD *)(v18 + 48) == *(_DWORD *)(v18 + 112)
            && *(_DWORD *)(v18 + 52) == *(_DWORD *)(v18 + 116)
            && *(_DWORD *)(v18 + 44) == *(_DWORD *)(v18 + 108))
          {
            *(_OWORD *)&v175[9] = *(_OWORD *)(v18 + 73);
            v108 = *(_OWORD *)(v18 + 64);
LABEL_121:
            *(_OWORD *)v175 = v108;
            v117 = *(_OWORD *)((char *)v25 + 9);
            *(_OWORD *)v176 = *v25;
            *(_OWORD *)&v176[9] = v117;
            v169 = (WTF *)v171;
            *(_OWORD *)v171 = *(_OWORD *)v175;
            *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
            *(_OWORD *)&v171[32] = *(_OWORD *)v176;
            v172 = *(_OWORD *)&v176[16];
            goto LABEL_122;
          }
          goto LABEL_114;
        }
      }
      else
      {
        if (v17 < 4)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB8CLL);
        }
        v26 = *(_QWORD *)(v18 + 96);
      }
      v25 = (_OWORD *)(v18 + 96);
      if (v19 == v26)
      {
        v21 = *(unsigned __int8 *)(v18 + 40);
        v27 = *(unsigned __int8 *)(v18 + 104);
        goto LABEL_89;
      }
LABEL_115:
      if (v20 == v26
        && *(unsigned __int8 *)(v18 + 72) == *(unsigned __int8 *)(v18 + 104)
        && *(_DWORD *)(v18 + 80) == *(_DWORD *)(v18 + 112)
        && *(_DWORD *)(v18 + 84) == *(_DWORD *)(v18 + 116)
        && *(_DWORD *)(v18 + 76) == *(_DWORD *)(v18 + 108))
      {
        *(_OWORD *)&v175[9] = *(_OWORD *)(v18 + 41);
        v108 = *(_OWORD *)(v18 + 32);
        goto LABEL_121;
      }
LABEL_126:
      v126 = *(WTF **)(a1 + 152);
      v127 = *((_QWORD *)v126 + 7);
      v128 = *(unsigned int *)(a1 + 172);
      v170 = 0;
      *(_DWORD *)v171 = 0;
      v169 = v126;
      *(_DWORD *)&v171[4] = v128;
      if ((_DWORD)v128)
      {
        if (v128 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB14);
        }
        v129 = (WTF *)WTF::fastMalloc((WTF *)(16 * v128));
        *(_DWORD *)v171 = v128;
        v170 = v129;
        v130 = *(unsigned int *)(a1 + 172);
        if ((_DWORD)v130)
        {
          v131 = *(__int128 **)(a1 + 160);
          v132 = 16 * v130;
          do
          {
            v133 = *v131++;
            *(_OWORD *)v129 = v133;
            v129 = (WTF *)((char *)v129 + 16);
            v132 -= 16;
          }
          while (v132);
        }
      }
      memset(&v171[8], 0, 32);
      *(_QWORD *)&v171[40] = a3;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v127 + 16))(v127, a2, &v169);
      v141 = *(_QWORD *)&v171[24];
      if (*(_QWORD *)&v171[24])
      {
        *(_QWORD *)&v171[24] = 0;
        *(_DWORD *)&v171[32] = 0;
        WTF::fastFree(v141, v134, v135, v136, v137, v138, v139, v140);
      }
      v142 = *(_QWORD *)&v171[8];
      if (*(_QWORD *)&v171[8])
      {
        *(_QWORD *)&v171[8] = 0;
        *(_DWORD *)&v171[16] = 0;
        WTF::fastFree(v142, v134, v135, v136, v137, v138, v139, v140);
      }
      v143 = v170;
      if (v170)
      {
        v170 = 0;
        *(_DWORD *)v171 = 0;
        WTF::fastFree((unint64_t)v143, v134, v135, v136, v137, v138, v139, v140);
      }
      return;
    case 0x12F:
      v36 = *(_DWORD *)(v11 + 32);
      if (v36 == 3)
      {
        v80 = *(_DWORD *)(a1 + 52);
        if (v80 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB7CLL);
        }
        if (v80 == 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB84);
        }
        v81 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(v81 + 32) != *(_QWORD *)(v81 + 64)
          || *(unsigned __int8 *)(v81 + 40) != *(unsigned __int8 *)(v81 + 72)
          || (v42 = *(_DWORD *)(v81 + 48), v42 != *(_DWORD *)(v81 + 80))
          || *(_DWORD *)(v81 + 52) != *(_DWORD *)(v81 + 84)
          || *(_DWORD *)(v81 + 44) != *(_DWORD *)(v81 + 76))
        {
          v113 = *(_OWORD *)(v81 + 32);
          v114 = *(_OWORD *)(v81 + 41);
          *(_OWORD *)&v176[9] = *(_OWORD *)(v81 + 73);
          v115 = *(_OWORD *)(v81 + 64);
          *(_OWORD *)v175 = v113;
          *(_OWORD *)&v175[9] = v114;
          *(_OWORD *)v176 = v115;
          v169 = (WTF *)v171;
          *(_OWORD *)v171 = *(_OWORD *)v175;
          *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
          *(_OWORD *)&v171[32] = v115;
          v172 = *(_OWORD *)&v176[16];
          goto LABEL_113;
        }
        goto LABEL_71;
      }
      if (v36 != 4)
        goto LABEL_126;
      v37 = *(_DWORD *)(a1 + 52);
      if (v37 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB5CLL);
      }
      if (v37 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB64);
      }
      v38 = *(_QWORD *)(a1 + 40);
      v39 = *(_QWORD *)(v38 + 32);
      v40 = *(_QWORD *)(v38 + 64);
      if (v39 == v40
        && (v41 = *(unsigned __int8 *)(v38 + 40), v41 == *(unsigned __int8 *)(v38 + 72))
        && (v42 = *(_DWORD *)(v38 + 48), v42 == *(_DWORD *)(v38 + 80))
        && (v43 = *(_DWORD *)(v38 + 52), v43 == *(_DWORD *)(v38 + 84))
        && (v44 = *(_DWORD *)(v38 + 44), v44 == *(_DWORD *)(v38 + 76)))
      {
        if (v37 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EBA4);
        }
        v45 = (_OWORD *)(v38 + 96);
        v46 = *(_QWORD *)(v38 + 96);
        if (v39 == v46)
        {
          v47 = *(unsigned __int8 *)(v38 + 104);
          if (v41 == v47)
          {
            if (v42 != *(_DWORD *)(v38 + 112) || v43 != *(_DWORD *)(v38 + 116) || v44 != *(_DWORD *)(v38 + 108))
              goto LABEL_99;
LABEL_71:
            v82 = v42 - 1;
            v90 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID>((char)(v42 - 1));
            v91 = (JSC::AssemblerBuffer *)(a2 + 56);
            v92 = *(_DWORD *)(a2 + 200);
            if (v92 + 4 > *(_DWORD *)(a2 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v91 = (JSC::AssemblerBuffer *)(a2 + 56);
              v92 = *(_DWORD *)(a2 + 200);
            }
            v93 = v90;
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v92) = v90 | 0xF81F0FE0;
            v94 = *(_DWORD *)(a2 + 200);
            v95 = v94 + 4;
            *(_DWORD *)(a2 + 200) = v94 + 4;
            if ((v94 + 8) > *(_DWORD *)(a2 + 192))
            {
              v158 = v91;
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v93 = v90;
              v91 = v158;
              v95 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v95) = v93 | 0x1A9F37E0;
            v96 = *(_DWORD *)(a2 + 200);
            v97 = v96 + 4;
            *(_DWORD *)(a2 + 200) = v96 + 4;
            v98 = v90 & 0x1F;
            v99 = v98 | (32 * v98) | 0xD3410000;
            if ((v96 + 8) > *(_DWORD *)(a2 + 192))
            {
              v148 = v91;
              v166 = v93;
              v152 = v98 | (32 * v98) | 0xD3410000;
              v159 = v98;
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v99 = v152;
              v98 = v159;
              v93 = v166;
              v91 = v148;
              v97 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v97) = v99;
            v100 = *(_DWORD *)(a2 + 200);
            v101 = v100 + 4;
            *(_DWORD *)(a2 + 200) = v100 + 4;
            v102 = v82 & 0x1F;
            v103 = v102 | (32 * v102) | 0xD341FC00;
            if ((v100 + 8) > *(_DWORD *)(a2 + 192))
            {
              v149 = v91;
              v167 = v93;
              v160 = v98;
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v103 = v102 | (32 * v102) | 0xD341FC00;
              v98 = v160;
              v93 = v167;
              v91 = v149;
              v101 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v101) = v103;
            v104 = *(_DWORD *)(a2 + 200);
            v105 = v104 + 4;
            *(_DWORD *)(a2 + 200) = v104 + 4;
            if ((v104 + 8) > *(_DWORD *)(a2 + 192))
            {
              v150 = v91;
              v168 = v93;
              v161 = v98;
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v98 = v161;
              v93 = v168;
              v91 = v150;
              v105 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v105) = (v98 << 16) | (32 * v102) | v102 | 0xAA000000;
            v106 = *(_DWORD *)(a2 + 200);
            v107 = v106 + 4;
            *(_DWORD *)(a2 + 200) = v106 + 4;
            if ((v106 + 8) > *(_DWORD *)(a2 + 192))
            {
              v151 = v93;
              JSC::AssemblerBuffer::outOfLineGrow(v91, v83, v84, v85, v86, v87, v88, v89);
              v93 = v151;
              v107 = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + v107) = v93 | 0xF84107E0;
            goto LABEL_84;
          }
LABEL_98:
          if (v41 != v47)
          {
LABEL_105:
            v46 = *(_QWORD *)(v38 + 32);
LABEL_106:
            if (v40 != v46
              || *(unsigned __int8 *)(v38 + 72) != *(unsigned __int8 *)(v38 + 104)
              || *(_DWORD *)(v38 + 80) != *(_DWORD *)(v38 + 112)
              || *(_DWORD *)(v38 + 84) != *(_DWORD *)(v38 + 116)
              || *(_DWORD *)(v38 + 76) != *(_DWORD *)(v38 + 108))
            {
              goto LABEL_126;
            }
            *(_OWORD *)&v175[9] = *(_OWORD *)(v38 + 41);
            v109 = *(_OWORD *)(v38 + 32);
            goto LABEL_112;
          }
LABEL_99:
          if (*(_DWORD *)(v38 + 48) == *(_DWORD *)(v38 + 112)
            && *(_DWORD *)(v38 + 52) == *(_DWORD *)(v38 + 116)
            && *(_DWORD *)(v38 + 44) == *(_DWORD *)(v38 + 108))
          {
            *(_OWORD *)&v175[9] = *(_OWORD *)(v38 + 73);
            v109 = *(_OWORD *)(v38 + 64);
LABEL_112:
            *(_OWORD *)v175 = v109;
            v116 = *(_OWORD *)((char *)v45 + 9);
            *(_OWORD *)v176 = *v45;
            *(_OWORD *)&v176[9] = v116;
            v169 = (WTF *)v171;
            *(_OWORD *)v171 = *(_OWORD *)v175;
            *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
            *(_OWORD *)&v171[32] = *(_OWORD *)v176;
            v172 = *(_OWORD *)&v176[16];
LABEL_113:
            v33 = (int8x8_t)0x200000003;
            v170 = (WTF *)0x200000003;
            v173 = 0;
            v34 = 10;
LABEL_123:
            v174 = v34;
            JSC::B3::Air::Inst::generate((uint64_t *)v175, (int **)&v169, a2, a3, v12, v13, v14, v15, v33);
            v125 = v169;
            if (v171 != (_BYTE *)v169 && v169)
            {
              v169 = 0;
              LODWORD(v170) = 0;
              WTF::fastFree((unint64_t)v125, v118, v119, v120, v121, v122, v123, v124);
            }
            goto LABEL_126;
          }
          goto LABEL_105;
        }
      }
      else
      {
        if (v37 < 4)
        {
          __break(0xC471u);
          JUMPOUT(0x197F7EB94);
        }
        v46 = *(_QWORD *)(v38 + 96);
      }
      v45 = (_OWORD *)(v38 + 96);
      if (v39 != v46)
        goto LABEL_106;
      v41 = *(unsigned __int8 *)(v38 + 40);
      v47 = *(unsigned __int8 *)(v38 + 104);
      goto LABEL_98;
    case 0x132:
      v28 = *(_DWORD *)(a1 + 52);
      if (v28 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB1CLL);
      }
      if (v28 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB24);
      }
      v29 = *(_OWORD **)(a1 + 40);
      v30 = v29[2];
      v31 = *(_OWORD *)((char *)v29 + 41);
      *(_OWORD *)&v176[9] = *(_OWORD *)((char *)v29 + 73);
      v32 = v29[4];
      *(_OWORD *)v175 = v30;
      *(_OWORD *)&v175[9] = v31;
      *(_OWORD *)v176 = v32;
      v169 = (WTF *)v171;
      *(_OWORD *)v171 = *(_OWORD *)v175;
      *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
      *(_OWORD *)&v171[32] = v32;
      v172 = *(_OWORD *)&v176[16];
      v33 = (int8x8_t)0x200000003;
      v170 = (WTF *)0x200000003;
      v173 = 0;
      v34 = 1;
      goto LABEL_123;
    case 0x133:
      v48 = *(_DWORD *)(a1 + 52);
      if (v48 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB34);
      }
      if (v48 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB3CLL);
      }
      v49 = *(_OWORD **)(a1 + 40);
      v50 = v49[2];
      v51 = *(_OWORD *)((char *)v49 + 41);
      *(_OWORD *)&v176[9] = *(_OWORD *)((char *)v49 + 73);
      v52 = v49[4];
      *(_OWORD *)v175 = v50;
      *(_OWORD *)&v175[9] = v51;
      *(_OWORD *)v176 = v52;
      v169 = (WTF *)v171;
      *(_OWORD *)v171 = *(_OWORD *)v175;
      *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
      *(_OWORD *)&v171[32] = v52;
      v172 = *(_OWORD *)&v176[16];
      v33 = (int8x8_t)0x200000003;
      v170 = (WTF *)0x200000003;
      v173 = 0;
      v34 = 6;
      goto LABEL_123;
    case 0x134:
      if (*(_DWORD *)(a1 + 52) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB44);
      }
      v53 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)v175 = *(_OWORD *)(v53 + 32);
      *(_OWORD *)&v175[9] = *(_OWORD *)(v53 + 41);
      v169 = (WTF *)v171;
      *(_OWORD *)v171 = *(_OWORD *)v175;
      *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
      v33 = (int8x8_t)0x100000003;
      v170 = (WTF *)0x100000003;
      v173 = 0;
      v34 = 13;
      goto LABEL_123;
    case 0x135:
      if (*(_DWORD *)(a1 + 52) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x197F7EB2CLL);
      }
      v35 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)v175 = *(_OWORD *)(v35 + 32);
      *(_OWORD *)&v175[9] = *(_OWORD *)(v35 + 41);
      v169 = (WTF *)v171;
      *(_OWORD *)v171 = *(_OWORD *)v175;
      *(_OWORD *)&v171[16] = *(_OWORD *)&v175[16];
      v33 = (int8x8_t)0x100000003;
      v170 = (WTF *)0x100000003;
      v173 = 0;
      v34 = 14;
      goto LABEL_123;
    default:
      goto LABEL_126;
  }
}

void JSC::B3::Const32Value::~Const32Value(JSC::B3::Const32Value *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::Const32Value::~Const32Value(JSC::B3::Const32Value *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Const32Value::negConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = -*((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_4;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_4:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = a3;
  v8 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8 - 8);
    *(_DWORD *)(a1 + 92) = v8 - 1;
    v10 = *(_QWORD *)(a1 + 64);
    goto LABEL_4;
  }
  v9 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v9 != *(_DWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *(_DWORD *)(a1 + 76) = v9 + 1;
LABEL_4:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = *(const void **)(a1 + 64);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*(const void **)(a1 + 64) == v14)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *(unsigned int *)(a1 + 76);
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *(_DWORD *)(a1 + 76) = v23 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::addConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)this + 3);
  v5 = *((_DWORD *)this + 10) + a3;
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_5:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::addConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_DWORD *)a3 + 10) + *((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v7;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::subConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3)
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, *((_QWORD *)this + 3), *((_DWORD *)this + 10) - *((_DWORD *)a3 + 10));
  else
    return 0;
}

uint64_t JSC::B3::Const32Value::mulConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10) * *((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::Const32Value::checkAddConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  int v4;
  int v5;

  if (a3
    && (*((_WORD *)a3 + 6) & 0xFFF) == 3
    && (v4 = *((_DWORD *)this + 10), v5 = *((_DWORD *)a3 + 10), !__OFADD__(v4, v5)))
  {
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(a2, *((_QWORD *)this + 3), 0, v4 + v5);
  }
  else
  {
    return 0;
  }
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(JSC::B3::Value *a1, uint64_t a2, char a3, int a4)
{
  JSC::B3::Value *v5;
  BOOL v7[4];
  int v8;

  v7[0] = a3 != 0;
  v8 = a4;
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(a2, (uint64_t)v7);
  return JSC::B3::Procedure::addValueImpl(a1, v5);
}

JSC::B3::Value *JSC::B3::Const32Value::checkSubConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  int v4;
  int v5;

  if (a3
    && (*((_WORD *)a3 + 6) & 0xFFF) == 3
    && (v4 = *((_DWORD *)this + 10), v5 = *((_DWORD *)a3 + 10), !__OFSUB__(v4, v5)))
  {
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(a2, *((_QWORD *)this + 3), 0, v4 - v5);
  }
  else
  {
    return 0;
  }
}

JSC::B3::Value *JSC::B3::Const32Value::checkMulConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;

  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3 && (v3 = *((int *)this + 10) * (uint64_t)*((int *)a3 + 10), v3 == (int)v3))
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(a2, *((_QWORD *)this + 3), 0, v3);
  else
    return 0;
}

uint64_t JSC::B3::Const32Value::checkNegConstant(_DWORD *a1)
{
  if (a1[10] == 0x80000000)
    return 0;
  else
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t JSC::B3::Const32Value::divConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  signed int v4;
  int v5;

  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return 0;
  v4 = *((_DWORD *)a3 + 10);
  if (v4)
  {
    v5 = *((_DWORD *)this + 10);
    if (v4 == -1 && v5 == 0x80000000)
      v4 = 0x80000000;
    else
      v4 = v5 / v4;
  }
  return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, *((_QWORD *)this + 3), v4);
}

uint64_t JSC::B3::Const32Value::uDivConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10);
  if (v6)
    v7 = *((_DWORD *)this + 10) / v6;
  else
    v7 = 0;
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v7;
  v9 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v9 - 8);
    *((_DWORD *)a2 + 23) = v9 - 1;
    v11 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v10 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v10 != *((_DWORD *)a2 + 18))
  {
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *((_DWORD *)a2 + 19) = v10 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v3;
    return v3;
  }
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (const void *)*((_QWORD *)a2 + 8);
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)a2 + 18) = v14;
    *((_QWORD *)a2 + 8) = v16;
    memcpy(v16, v15, 8 * v10);
    if (v15)
    {
      if (*((const void **)a2 + 8) == v15)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    }
    v24 = *((unsigned int *)a2 + 19);
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v24) = 0;
    *((_DWORD *)a2 + 19) = v24 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::modConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10);
  if (v6)
  {
    v7 = *((_DWORD *)this + 10);
    if (v6 == -1 && v7 == 0x80000000)
      v6 = 0;
    else
      v6 = v7 % v6;
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_14;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_14:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::uModConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10);
  if (v6)
    v7 = *((_DWORD *)this + 10) % v6;
  else
    v7 = 0;
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v7;
  v9 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v9 - 8);
    *((_DWORD *)a2 + 23) = v9 - 1;
    v11 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v10 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v10 != *((_DWORD *)a2 + 18))
  {
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *((_DWORD *)a2 + 19) = v10 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v3;
    return v3;
  }
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (const void *)*((_QWORD *)a2 + 8);
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)a2 + 18) = v14;
    *((_QWORD *)a2 + 8) = v16;
    memcpy(v16, v15, 8 * v10);
    if (v15)
    {
      if (*((const void **)a2 + 8) == v15)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    }
    v24 = *((unsigned int *)a2 + 19);
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v24) = 0;
    *((_DWORD *)a2 + 19) = v24 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::bitAndConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10) & *((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::bitOrConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3)
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, *((_QWORD *)this + 3), *((_DWORD *)a3 + 10) | *((_DWORD *)this + 10));
  else
    return 0;
}

uint64_t JSC::B3::Const32Value::bitXorConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)a3 + 10) ^ *((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::shlConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3)
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, *((_QWORD *)this + 3), *((_DWORD *)this + 10) << *((_DWORD *)a3 + 10));
  else
    return 0;
}

uint64_t JSC::B3::Const32Value::sShrConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3)
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, *((_QWORD *)this + 3), *((int *)this + 10) >> *((_DWORD *)a3 + 10));
  else
    return 0;
}

uint64_t JSC::B3::Const32Value::zShrConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 10) >> *((_DWORD *)a3 + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::rotRConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = __ROR4__(*((_DWORD *)this + 10), *((_DWORD *)a3 + 10));
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const32Value::rotLConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = __ROR4__(*((_DWORD *)this + 10), -*((_BYTE *)a3 + 40));
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::Const32Value::bitwiseCastConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10));
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(JSC::B3::Value *a1, uint64_t a2, float a3)
{
  uint64_t v6;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 6;
  *(_DWORD *)(v6 + 16) = 3;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357DDD8;
  *(float *)(v6 + 40) = a3;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v6);
}

uint64_t JSC::B3::Const32Value::iToDConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), (double)*((int *)this + 10));
}

uint64_t JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = a3;
  v8 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8 - 8);
    *(_DWORD *)(a1 + 92) = v8 - 1;
    v10 = *(_QWORD *)(a1 + 64);
    goto LABEL_4;
  }
  v9 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v9 != *(_DWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *(_DWORD *)(a1 + 76) = v9 + 1;
LABEL_4:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = *(const void **)(a1 + 64);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*(const void **)(a1 + 64) == v14)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *(unsigned int *)(a1 + 76);
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *(_DWORD *)(a1 + 76) = v23 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::Const32Value::iToFConstant(JSC::B3::Const32Value *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), (float)*((int *)this + 10));
}

uint64_t JSC::B3::Const32Value::equalConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return *((_DWORD *)this + 10) == *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::notEqualConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return *((_DWORD *)this + 10) != *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::lessThanConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == 0x7FFFFFFF)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 < *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::greaterThanConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == 0x80000000)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 > *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::lessEqualConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == 0x80000000)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 <= *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::greaterEqualConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == 0x7FFFFFFF)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 >= *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::aboveConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (!v2)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 > *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::belowConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == -1)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 < *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::aboveEqualConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == -1)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 >= *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::belowEqualConstant(JSC::B3::Const32Value *this, const JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (!v2)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      return v2 <= *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::Const32Value::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%d", *(_DWORD *)(a1 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

void JSC::B3::Const64Value::~Const64Value(JSC::B3::Const64Value *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::Const64Value::~Const64Value(JSC::B3::Const64Value *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Const64Value::negConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = -*((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_4;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_4:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::addConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 5) + a3;
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_5:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::addConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5) + *((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::subConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 4)
    return JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a2, *((_QWORD *)this + 3), *((_QWORD *)this + 5) - *((_QWORD *)a3 + 5));
  else
    return 0;
}

uint64_t JSC::B3::Const64Value::mulConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5) * *((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::checkAddConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v4 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)a3 + 5);
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
    return 0;
  v8 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_9;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_9:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::checkSubConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v4 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)a3 + 5);
  v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
    return 0;
  v8 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::checkMulConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v4 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)a3 + 5);
  v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
    return 0;
  v9 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v9;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::checkNegConstant(_QWORD *a1)
{
  if (a1[5] == 0x8000000000000000)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
}

uint64_t JSC::B3::Const64Value::divConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    v8 = v6 == -1 && v7 == 0x8000000000000000;
    v9 = v7 / v6;
    if (v8)
      v6 = 0x8000000000000000;
    else
      v6 = v9;
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v11 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v11 - 8);
    *((_DWORD *)a2 + 23) = v11 - 1;
    v13 = *((_QWORD *)a2 + 8);
    goto LABEL_14;
  }
  v12 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v12 != *((_DWORD *)a2 + 18))
  {
    v13 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    *((_DWORD *)a2 + 19) = v12 + 1;
LABEL_14:
    *(_DWORD *)(v3 + 8) = v12;
    *(_QWORD *)(v13 + 8 * v12) = v3;
    return v3;
  }
  v14 = v12 + (v12 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v12 + 1)
    v16 = v12 + 1;
  else
    v16 = v15;
  if (!(v16 >> 29))
  {
    v17 = (const void *)*((_QWORD *)a2 + 8);
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *((_DWORD *)a2 + 18) = v16;
    *((_QWORD *)a2 + 8) = v18;
    memcpy(v18, v17, 8 * v12);
    if (v17)
    {
      if (*((const void **)a2 + 8) == v17)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v17, v19, v20, v21, v22, v23, v24, v25);
    }
    v26 = *((unsigned int *)a2 + 19);
    v13 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v13 + 8 * v26) = 0;
    *((_DWORD *)a2 + 19) = v26 + 1;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::uDivConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5);
  if (v6)
    v7 = *((_QWORD *)this + 5) / v6;
  else
    v7 = 0;
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v7;
  v9 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v9 - 8);
    *((_DWORD *)a2 + 23) = v9 - 1;
    v11 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v10 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v10 != *((_DWORD *)a2 + 18))
  {
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *((_DWORD *)a2 + 19) = v10 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v3;
    return v3;
  }
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (const void *)*((_QWORD *)a2 + 8);
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)a2 + 18) = v14;
    *((_QWORD *)a2 + 8) = v16;
    memcpy(v16, v15, 8 * v10);
    if (v15)
    {
      if (*((const void **)a2 + 8) == v15)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    }
    v24 = *((unsigned int *)a2 + 19);
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v24) = 0;
    *((_DWORD *)a2 + 19) = v24 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::modConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v6 == -1 && v7 == 0x8000000000000000)
      v6 = 0;
    else
      v6 = v7 % v6;
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_14;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_14:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::uModConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5);
  if (v6)
    v7 = *((_QWORD *)this + 5) % v6;
  else
    v7 = 0;
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v7;
  v9 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v9 - 8);
    *((_DWORD *)a2 + 23) = v9 - 1;
    v11 = *((_QWORD *)a2 + 8);
    goto LABEL_10;
  }
  v10 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v10 != *((_DWORD *)a2 + 18))
  {
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *((_DWORD *)a2 + 19) = v10 + 1;
LABEL_10:
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v3;
    return v3;
  }
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (const void *)*((_QWORD *)a2 + 8);
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)a2 + 18) = v14;
    *((_QWORD *)a2 + 8) = v16;
    memcpy(v16, v15, 8 * v10);
    if (v15)
    {
      if (*((const void **)a2 + 8) == v15)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    }
    v24 = *((unsigned int *)a2 + 19);
    v11 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v11 + 8 * v24) = 0;
    *((_DWORD *)a2 + 19) = v24 + 1;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::bitAndConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5) & *((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::bitOrConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5) | *((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::bitXorConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 4)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a3 + 5) ^ *((_QWORD *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::shlConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 5) << *((_DWORD *)a3 + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::sShrConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((uint64_t *)this + 5) >> *((_DWORD *)a3 + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::zShrConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 5) >> *((_DWORD *)a3 + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_6;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_6:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::rotRConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = __ROR8__(*((_QWORD *)this + 5), *((_DWORD *)a3 + 10));
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::rotLConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 3)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = __ROR8__(*((_QWORD *)this + 5), -*((_BYTE *)a3 + 40));
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Const64Value::bitwiseCastConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), *((double *)this + 5));
}

uint64_t JSC::B3::Const64Value::iToDConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = (double)*((uint64_t *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::Const64Value::iToFConstant(JSC::B3::Const64Value *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), (float)*((uint64_t *)this + 5));
}

uint64_t JSC::B3::Const64Value::equalConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return *((_QWORD *)this + 5) == *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::notEqualConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return *((_QWORD *)this + 5) != *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::lessThanConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 < *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::greaterThanConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == 0x8000000000000000)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 > *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::lessEqualConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == 0x8000000000000000)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 <= *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::greaterEqualConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 >= *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::aboveConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 > *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::belowConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == -1)
    return 0;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 < *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::aboveEqualConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (v2 == -1)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 >= *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::belowEqualConstant(JSC::B3::Const64Value *this, const JSC::B3::Value *a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 1;
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
      return v2 <= *((_QWORD *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::Const64Value::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%lld", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

void JSC::B3::ConstDoubleValue::~ConstDoubleValue(JSC::B3::ConstDoubleValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::ConstDoubleValue::~ConstDoubleValue(JSC::B3::ConstDoubleValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::ConstDoubleValue::negConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = -*((double *)this + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::addConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, int a3)
{
  uint64_t v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)this + 3);
  v5 = *((double *)this + 5) + (double)a3;
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_5:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::addConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((double *)this + 5) + *((double *)a3 + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::subConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 5)
    return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), *((double *)this + 5) - *((double *)a3 + 5));
  else
    return 0;
}

uint64_t JSC::B3::ConstDoubleValue::mulConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((double *)this + 5) * *((double *)a3 + 5);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::bitAndConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)a3 + 5) & *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(_QWORD *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::bitOrConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)a3 + 5) | *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(_QWORD *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::bitXorConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)a3 + 5) ^ *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 3);
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(_QWORD *)(result + 40) = v5;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::bitwiseCastConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a2, *((_QWORD *)this + 3), *((_QWORD *)this + 5));
}

JSC::B3::Value *JSC::B3::ConstDoubleValue::doubleToFloatConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  float v2;

  v2 = *((double *)this + 5);
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), v2);
}

uint64_t JSC::B3::ConstDoubleValue::absConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), fabs(*((double *)this + 5)));
}

uint64_t JSC::B3::ConstDoubleValue::ceilConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = ceil(*((double *)this + 5));
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::floorConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = floor(*((double *)this + 5));
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::sqrtConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), sqrt(*((double *)this + 5)));
}

uint64_t JSC::B3::ConstDoubleValue::divConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 5)
    return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a2, *((_QWORD *)this + 3), *((double *)this + 5) / *((double *)a3 + 5));
  else
    return 0;
}

uint64_t JSC::B3::ConstDoubleValue::modConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  long double v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = fmod(*((long double *)this + 5), *((long double *)a3 + 5));
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(long double *)(result + 40) = v6;
  v8 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v8 - 8);
    *((_DWORD *)a2 + 23) = v8 - 1;
    v10 = *((_QWORD *)a2 + 8);
    goto LABEL_7;
  }
  v9 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 18))
  {
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *((_DWORD *)a2 + 19) = v9 + 1;
LABEL_7:
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v3;
    return v3;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (const void *)*((_QWORD *)a2 + 8);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)a2 + 18) = v13;
    *((_QWORD *)a2 + 8) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*((const void **)a2 + 8) == v14)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *((unsigned int *)a2 + 19);
    v10 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *((_DWORD *)a2 + 19) = v23 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::fMinConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((double *)this + 5);
  v7 = *((double *)a3 + 5);
  if (v6 == 0.0 && v7 == 0.0 && ((*(_QWORD *)&v7 ^ *(_QWORD *)&v6) & 0x8000000000000000) != 0)
  {
    v8 = 0x8000000000000000;
  }
  else if (v7 >= v6)
  {
    v8 = *((_QWORD *)this + 5);
  }
  else
  {
    v8 = *((_QWORD *)a3 + 5);
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(_QWORD *)(result + 40) = v8;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_13;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_13:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::fMaxConstant(JSC::B3::ConstDoubleValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = 0;
  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 5)
    return v3;
  v5 = *((_QWORD *)this + 3);
  v6 = *((double *)this + 5);
  v7 = *((double *)a3 + 5);
  if (v6 == 0.0 && v7 == 0.0 && ((*(_QWORD *)&v7 ^ *(_QWORD *)&v6) & 0x8000000000000000) != 0)
  {
    v8 = 0;
  }
  else if (v6 >= v7)
  {
    v8 = *((_QWORD *)this + 5);
  }
  else
  {
    v8 = *((_QWORD *)a3 + 5);
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v3 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(_QWORD *)(result + 40) = v8;
  v10 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v10 - 8);
    *((_DWORD *)a2 + 23) = v10 - 1;
    v12 = *((_QWORD *)a2 + 8);
    goto LABEL_13;
  }
  v11 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 18))
  {
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *((_DWORD *)a2 + 19) = v11 + 1;
LABEL_13:
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v3;
    return v3;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (const void *)*((_QWORD *)a2 + 8);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a2 + 18) = v15;
    *((_QWORD *)a2 + 8) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*((const void **)a2 + 8) == v16)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *((unsigned int *)a2 + 19);
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *((_DWORD *)a2 + 19) = v25 + 1;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::equalConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) == *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::notEqualConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) != *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::lessThanConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) < *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::greaterThanConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) > *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::lessEqualConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) <= *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::greaterEqualConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return *((double *)this + 5) >= *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::equalOrUnorderedConstant(JSC::B3::ConstDoubleValue *this, const JSC::B3::Value *a2)
{
  double v2;
  uint64_t result;

  v2 = *((double *)this + 5);
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
      return v2 == *((double *)a2 + 5);
  }
  return result;
}

uint64_t JSC::B3::ConstDoubleValue::dumpMeta(uint64_t a1, uint64_t a2, WTF::PrintStream *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  return WTF::PrintStream::printf(a3, "%le(%llu)", *(double *)(a1 + 40), *(_QWORD *)(a1 + 40));
}

void JSC::B3::ConstFloatValue::~ConstFloatValue(JSC::B3::ConstFloatValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::ConstFloatValue::~ConstFloatValue(JSC::B3::ConstFloatValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

JSC::B3::Value *JSC::B3::ConstFloatValue::negConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), -*((float *)this + 10));
}

JSC::B3::Value *JSC::B3::ConstFloatValue::addConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, int a3)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10) + (float)a3);
}

JSC::B3::Value *JSC::B3::ConstFloatValue::addConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10) + *((float *)a3 + 10));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::subConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10) - *((float *)a3 + 10));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::mulConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10) * *((float *)a3 + 10));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::bitAndConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), COERCE_FLOAT(*((_DWORD *)a3 + 10) & *((_DWORD *)this + 10)));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::bitOrConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), COERCE_FLOAT(*((_DWORD *)a3 + 10) | *((_DWORD *)this + 10)));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::bitXorConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), COERCE_FLOAT(*((_DWORD *)a3 + 10) ^ *((_DWORD *)this + 10)));
  else
    return 0;
}

uint64_t JSC::B3::ConstFloatValue::bitwiseCastConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = *((_DWORD *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::ConstFloatValue::floatToDoubleConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  v4 = *((float *)this + 10);
  result = WTF::fastMalloc((WTF *)0x30);
  v6 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = v4;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
    goto LABEL_5;
  }
  v8 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v8 != *((_DWORD *)a2 + 18))
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    *((_DWORD *)a2 + 19) = v8 + 1;
LABEL_5:
    *(_DWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v9 + 8 * v8) = v6;
    return v6;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (const void *)*((_QWORD *)a2 + 8);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)a2 + 18) = v12;
    *((_QWORD *)a2 + 8) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*((const void **)a2 + 8) == v13)
      {
        *((_QWORD *)a2 + 8) = 0;
        *((_DWORD *)a2 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *((unsigned int *)a2 + 19);
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v9 + 8 * v22) = 0;
    *((_DWORD *)a2 + 19) = v22 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::absConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), fabsf(*((float *)this + 10)));
}

JSC::B3::Value *JSC::B3::ConstFloatValue::ceilConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), ceilf(*((float *)this + 10)));
}

JSC::B3::Value *JSC::B3::ConstFloatValue::floorConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), floorf(*((float *)this + 10)));
}

JSC::B3::Value *JSC::B3::ConstFloatValue::sqrtConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2)
{
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), sqrtf(*((float *)this + 10)));
}

JSC::B3::Value *JSC::B3::ConstFloatValue::divConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 6)
    return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), *((float *)this + 10) / *((float *)a3 + 10));
  else
    return 0;
}

JSC::B3::Value *JSC::B3::ConstFloatValue::fMinConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  float v3;
  float v4;

  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 6)
    return 0;
  v3 = *((float *)this + 10);
  v4 = *((float *)a3 + 10);
  if (v3 == 0.0 && v4 == 0.0 && (LODWORD(v4) ^ LODWORD(v3)) < 0)
  {
    v3 = -0.0;
  }
  else if (v4 < v3)
  {
    v3 = *((float *)a3 + 10);
  }
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), v3);
}

JSC::B3::Value *JSC::B3::ConstFloatValue::fMaxConstant(JSC::B3::ConstFloatValue *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  float v3;
  float v4;

  if (!a3 || (*((_WORD *)a3 + 6) & 0xFFF) != 6)
    return 0;
  v3 = *((float *)this + 10);
  v4 = *((float *)a3 + 10);
  if (v3 == 0.0 && v4 == 0.0 && (LODWORD(v4) ^ LODWORD(v3)) < 0)
  {
    v3 = 0.0;
  }
  else if (v3 < v4)
  {
    v3 = *((float *)a3 + 10);
  }
  return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a2, *((_QWORD *)this + 3), v3);
}

uint64_t JSC::B3::ConstFloatValue::equalConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) == *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::notEqualConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) != *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::lessThanConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) < *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::greaterThanConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) > *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::lessEqualConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) <= *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::greaterEqualConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  uint64_t result;

  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return *((float *)this + 10) >= *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::equalOrUnorderedConstant(JSC::B3::ConstFloatValue *this, const JSC::B3::Value *a2)
{
  float v2;
  uint64_t result;

  v2 = *((float *)this + 10);
  result = 2;
  if (a2)
  {
    if ((*((_WORD *)a2 + 6) & 0xFFF) == 6)
      return v2 == *((float *)a2 + 10);
  }
  return result;
}

uint64_t JSC::B3::ConstFloatValue::dumpMeta(uint64_t a1, uint64_t a2, WTF::PrintStream *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  return WTF::PrintStream::printf(a3, "%le(%u)", *(float *)(a1 + 40), *(_DWORD *)(a1 + 40));
}

void JSC::B3::DataSection::~DataSection(JSC::B3::DataSection *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7, a8);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::B3::DataSection::dump(JSC::B3::DataSection *this, WTF::PrintStream *a2)
{
  const void *v4;
  WTF::PrintStream *v5;

  v4 = (const void *)*((_QWORD *)this + 1);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "DataSection at ");
  WTF::PrintStream::printf(v5, "%p", v4);
  WTF::PrintStream::printf(v5, "%s", " with ");
  WTF::PrintStream::printf(v5, "%lu", *((_QWORD *)this + 2));
  WTF::PrintStream::printf(v5, "%s", " bytes.");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::duplicateTails(WTF **this, JSC::B3::Procedure *a2)
{
  JSC::B3::Procedure *v2;
  JSC::B3::Procedure *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unint64_t v52;
  unsigned int *v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::B3::Procedure *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v91;
  unint64_t v92;
  JSC::B3::Procedure *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::B3::Value **v101;
  JSC::B3::Value **v102;
  JSC::B3::Value *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  JSC::B3::Value *v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  JSC::B3::Procedure *v134;
  _DWORD *v135;
  uint64_t v136;
  unint64_t *v137;
  JSC::B3::Procedure *v138;
  unint64_t *v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  JSC::B3::Procedure *v144;
  JSC::B3::Procedure *v145;
  WTF *v146;
  uint64_t v147;
  _BYTE v148[176];
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[3];
  uint64_t v152;
  _DWORD *v153;
  _QWORD v154[3];
  JSC::B3::Value *v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[2];

  v2 = (JSC::B3::Procedure *)this;
  JSC::B3::PhaseScope::PhaseScope((uint64_t)v151, this, (uint64_t)"duplicateTails", 15);
  v144 = v2;
  v145 = v2;
  v146 = (WTF *)v148;
  v147 = 8;
  memset(&v148[128], 0, 48);
  v149 = 0;
  v150 = qword_1ECF4C69C;
  JSC::B3::breakCriticalEdges(v2, v3, v4, v5, v6, v7, v8, v9);
  v16 = *((unsigned int *)v2 + 15);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = *((_QWORD *)v144 + 6);
    while (!*(_QWORD *)(v18 + 8 * v17))
    {
      if (v16 == ++v17)
        goto LABEL_16;
    }
    while ((_DWORD)v16 != (_DWORD)v17)
    {
      if (v16 <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x197F85660);
      }
      v19 = *(_QWORD *)(v18 + 8 * v17);
      v20 = *(unsigned int *)(v19 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(uint64_t **)(v19 + 8);
        v22 = 8 * v20;
        do
        {
          v23 = *v21++;
          *(_QWORD *)(v23 + 32) = v19;
          v22 -= 8;
        }
        while (v22);
      }
      v17 = (v17 + 1);
      if (v16 > v17)
      {
        while (!*(_QWORD *)(v18 + 8 * v17))
        {
          if (v16 == ++v17)
            goto LABEL_16;
        }
      }
    }
LABEL_16:
    v24 = 0;
    v159[0] = 0x8000000000000000;
    while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v24))
    {
      if (v16 == ++v24)
        goto LABEL_45;
    }
    if ((_DWORD)v16 != (_DWORD)v24)
    {
      v25 = v16;
      v26 = v16;
      do
      {
        if (v26 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x197F85668);
        }
        v27 = *(unsigned int **)(*((_QWORD *)v2 + 6) + 8 * v24);
        v28 = v27[5];
        if (v28 <= v150 && v27[17] <= HIDWORD(v150))
        {
          if (!(_DWORD)v28)
          {
            __break(0xC471u);
            JUMPOUT(0x197F856A8);
          }
          v29 = *((_QWORD *)v27 + 1);
          if (!*(_DWORD *)(*(_QWORD *)(v29 + 8 * v28 - 8) + 16))
          {
            v30 = 8 * v28;
            while ((*(_WORD *)(*(_QWORD *)v29 + 12) & 0x800) == 0)
            {
              v29 += 8;
              v30 -= 8;
              if (!v30)
              {
                v31 = v159[0];
                if ((v159[0] & 0x8000000000000000) != 0)
                  v32 = 63;
                else
                  v32 = *(_QWORD *)(2 * v159[0]);
                v33 = *v27;
                if (v32 <= v33)
                {
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v159, v33 + 1, 0);
                  v31 = v159[0];
                  v25 = *((_DWORD *)v2 + 15);
                }
                if (v31 >= 0)
                  v34 = (_QWORD *)(2 * v31 + 8);
                else
                  v34 = v159;
                *(_QWORD *)((char *)v34 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
                v26 = v25;
                break;
              }
            }
          }
        }
        v24 = (v24 + 1);
        if (v26 > v24)
        {
          while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v24))
          {
            if (v26 == ++v24)
            {
              LODWORD(v24) = v26;
              break;
            }
          }
        }
      }
      while ((_DWORD)v16 != (_DWORD)v24);
      v2 = v144;
      LODWORD(v16) = *((_DWORD *)v144 + 15);
    }
LABEL_45:
    v158 = 0x8000000000000000;
    if ((_DWORD)v16)
    {
      v35 = 0;
      v36 = v16;
      while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v35))
      {
        if (v16 == ++v35)
          goto LABEL_124;
      }
      if ((_DWORD)v16 != (_DWORD)v35)
      {
        v37 = v159[0];
        v38 = (unint64_t *)(2 * v159[0]);
        if (v159[0] >= 0)
          v39 = (_QWORD *)(2 * v159[0] + 8);
        else
          v39 = v159;
        v40 = v16;
        do
        {
          if (v40 <= v35)
          {
            __break(0xC471u);
            JUMPOUT(0x197F85670);
          }
          v41 = *(unsigned int **)(*((_QWORD *)v2 + 6) + 8 * v35);
          v42 = v41[5];
          if ((_DWORD)v42)
          {
            v43 = (uint64_t *)*((_QWORD *)v41 + 1);
            v44 = &v43[v42];
            do
            {
              v45 = *v43;
              v46 = *(unsigned __int8 *)(*v43 + 12);
              if (v46 == 153)
              {
                if (v37 < 0)
                  v70 = 63;
                else
                  v70 = *v38;
                v60 = *v41;
                if (v70 > v60 && ((*(_QWORD *)((char *)v39 + ((v60 >> 3) & 0x1FFFFFF8)) >> v60) & 1) != 0)
                {
                  v65 = v158;
                  if (v158 < 0)
                    v66 = 63;
                  else
                    v66 = *(_QWORD *)(2 * v158);
                  v67 = *(unsigned int *)(v45 + 8);
                  if (v66 <= v67)
                  {
                    v143 = v36;
                    v137 = v38;
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v158, v67 + 1, 0);
                    v38 = v137;
                    v36 = v143;
                    v65 = v158;
                  }
                  if (v65 >= 0)
                    v68 = (unint64_t *)(2 * v65 + 8);
                  else
                    v68 = (unint64_t *)&v158;
                  *(unint64_t *)((char *)v68 + ((v67 >> 3) & 0x1FFFFFF8)) |= 1 << v67;
                  v46 = *(unsigned __int8 *)(v45 + 12);
                }
                else
                {
                  v46 = 153;
                }
              }
              v47 = *(unsigned __int8 *)(v45 + 20);
              if (v47 == 4)
              {
                v56 = 40;
                switch(v46)
                {
                  case 0:
                  case 1:
                  case 2:
                  case 8:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                  case 32:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 46:
                  case 47:
                  case 48:
                  case 49:
                  case 50:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 79:
                  case 153:
                  case 154:
                  case 155:
                  case 157:
                  case 158:
                  case 159:
                    break;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 80:
                  case 84:
                  case 90:
                  case 91:
                  case 92:
                  case 93:
                  case 94:
                  case 95:
                  case 96:
                  case 97:
                  case 98:
                  case 99:
                  case 100:
                  case 101:
                  case 102:
                  case 103:
                  case 104:
                  case 105:
                  case 106:
                  case 107:
                  case 108:
                  case 109:
                  case 110:
                  case 111:
                  case 112:
                  case 113:
                  case 114:
                  case 115:
                  case 116:
                  case 117:
                  case 118:
                  case 119:
                  case 120:
                  case 121:
                  case 122:
                  case 123:
                  case 124:
                  case 125:
                  case 126:
                  case 127:
                  case 128:
                  case 129:
                  case 130:
                  case 131:
                  case 132:
                  case 133:
                  case 134:
                  case 135:
                  case 136:
                  case 137:
                  case 138:
                  case 139:
                  case 140:
                  case 141:
                  case 142:
                  case 143:
                  case 144:
                  case 145:
                  case 146:
                  case 147:
                  case 148:
                  case 149:
                  case 150:
                  case 151:
                  case 152:
                    v56 = 48;
                    break;
                  case 7:
                  case 81:
                  case 89:
                  case 156:
                    v56 = 56;
                    break;
                  case 63:
                  case 64:
                  case 65:
                  case 66:
                  case 67:
                  case 68:
                  case 69:
                  case 70:
                  case 71:
                  case 72:
                  case 73:
                  case 74:
                  case 75:
                  case 76:
                  case 77:
                  case 78:
                  case 82:
                    v56 = 64;
                    break;
                  case 83:
                    v56 = 176;
                    break;
                  case 85:
                  case 86:
                  case 87:
                  case 88:
                    v56 = 112;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197F856A0);
                }
                v57 = (uint64_t *)(v45 + v56);
                v48 = *v57;
                v47 = *((unsigned int *)v57 + 3);
              }
              else
              {
                v48 = v45 + 40;
              }
              v49 = v48 + 8 * v47;
              if (v48 != v49)
              {
                if (v37 < 0)
                {
                  do
                  {
                    v53 = *(unsigned int **)(*(_QWORD *)v48 + 32);
                    if (v53 != v41 && v53 != 0)
                    {
                      v55 = *v53;
                      if (v55 <= 0x3E
                        && ((*(_QWORD *)((char *)v39 + ((v55 >> 3) & 0x1FFFFFF8)) >> v55) & 1) != 0)
                      {
                        v61 = v158;
                        if (v158 < 0)
                          v62 = 63;
                        else
                          v62 = *(_QWORD *)(2 * v158);
                        v63 = *(unsigned int *)(*(_QWORD *)v48 + 8);
                        if (v62 <= v63)
                        {
                          v140 = v38;
                          v142 = v36;
                          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v158, v63 + 1, 0);
                          v38 = v140;
                          v36 = v142;
                          v61 = v158;
                        }
                        v64 = (unint64_t *)(2 * v61 + 8);
                        if (v61 < 0)
                          v64 = (unint64_t *)&v158;
                        *(unint64_t *)((char *)v64 + ((v63 >> 3) & 0x1FFFFFF8)) |= 1 << v63;
                      }
                    }
                    v48 += 8;
                  }
                  while (v48 != v49);
                }
                else
                {
                  do
                  {
                    v50 = *(unsigned int **)(*(_QWORD *)v48 + 32);
                    if (v50 != v41 && v50 != 0)
                    {
                      v52 = *v50;
                      if (*v38 > v52 && ((*(_QWORD *)((char *)v39 + ((v52 >> 3) & 0x1FFFFFF8)) >> v52) & 1) != 0)
                      {
                        v136 = v158;
                        if (v158 < 0)
                          v69 = 63;
                        else
                          v69 = *(_QWORD *)(2 * v158);
                        v58 = *(unsigned int *)(*(_QWORD *)v48 + 8);
                        if (v69 <= v58)
                        {
                          v139 = v38;
                          v141 = v36;
                          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v158, v58 + 1, 0);
                          v38 = v139;
                          v36 = v141;
                          v136 = v158;
                        }
                        v59 = (unint64_t *)(2 * v136 + 8);
                        if (v136 < 0)
                          v59 = (unint64_t *)&v158;
                        *(unint64_t *)((char *)v59 + ((v58 >> 3) & 0x1FFFFFF8)) |= 1 << v58;
                      }
                    }
                    v48 += 8;
                  }
                  while (v48 != v49);
                }
              }
              ++v43;
            }
            while (v43 != v44);
            v40 = *((_DWORD *)v2 + 15);
          }
          v35 = (v35 + 1);
          if (v40 > v35)
          {
            while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v35))
            {
              if (v40 == ++v35)
              {
                LODWORD(v35) = v40;
                break;
              }
            }
          }
        }
        while ((_DWORD)v36 != (_DWORD)v35);
        v2 = v144;
      }
    }
  }
  else
  {
    v158 = 0x8000000000000000;
    v159[0] = 0x8000000000000000;
  }
LABEL_124:
  JSC::B3::demoteValues((uint64_t)v2, (unint64_t *)&v158, v10, v11, v12, v13, v14, v15);
  v78 = v144;
  v79 = *((unsigned int *)v144 + 15);
  if ((_DWORD)v79)
  {
    v80 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v144 + 6) + 8 * v80))
    {
      if (v79 == ++v80)
        goto LABEL_184;
    }
    if ((_DWORD)v79 != (_DWORD)v80)
    {
      v81 = *((_DWORD *)v144 + 15);
      do
      {
        if (v81 <= v80)
        {
          __break(0xC471u);
          JUMPOUT(0x197F85678);
        }
        v82 = *(unsigned int **)(*((_QWORD *)v78 + 6) + 8 * v80);
        v83 = v82[5];
        if (!(_DWORD)v83)
        {
          __break(0xC471u);
          JUMPOUT(0x197F85680);
        }
        v71 = *(unsigned __int8 **)(*((_QWORD *)v82 + 1) + 8 * v83 - 8);
        if (v71[12] == 154)
        {
          if (!v82[17])
          {
            __break(0xC471u);
            JUMPOUT(0x197F856B0);
          }
          v84 = (unsigned int *)**((_QWORD **)v82 + 7);
          if (v84)
          {
            v85 = (unint64_t *)(2 * v159[0]);
            v86 = (v159[0] & 0x8000000000000000) != 0 ? 63 : *v85;
            v87 = *v84;
            if (v86 > v87)
            {
              v88 = v85 + 1;
              if (v159[0] < 0)
                v88 = v159;
              v89 = *(_QWORD *)((char *)v88 + ((v87 >> 3) & 0x1FFFFFF8)) & (1 << v87);
              if (v82 != v84 && v89 != 0)
              {
                if ((v159[0] & 0x8000000000000000) != 0)
                  v91 = 63;
                else
                  v91 = *v85;
                v92 = *v82;
                if (v91 > v92)
                  *(_QWORD *)((char *)v88 + ((v92 >> 3) & 0x1FFFFFF8)) &= ~(1 << v92);
                v93 = v144;
                v82[5] = v83 - 1;
                JSC::B3::Procedure::deleteValue(v93, (JSC::B3::Value *)v71);
                v157 = 0;
                v100 = v84[5];
                if ((_DWORD)v100)
                {
                  v101 = (JSC::B3::Value **)*((_QWORD *)v84 + 1);
                  v102 = &v101[v100];
                  do
                  {
                    v156 = 0;
                    v103 = *v101;
                    v155 = 0;
                    v156 = v103;
                    v155 = (JSC::B3::Value *)JSC::B3::Procedure::clone(v144, v103);
                    v104 = (_QWORD *)JSC::B3::Value::children(v155);
                    v106 = v157;
                    if (v104 != v105 && v157 != 0)
                    {
                      while (1)
                      {
                        if (v106)
                        {
                          v114 = *(_DWORD *)(v106 - 8);
                          v115 = ~(*v104 << 32) + *v104;
                          v116 = (v115 ^ (v115 >> 22)) + ~((v115 ^ (v115 >> 22)) << 13);
                          v117 = (9 * (v116 ^ (v116 >> 8))) ^ ((9 * (v116 ^ (v116 >> 8))) >> 15);
                          v112 = v114 & (((v117 + ~(v117 << 27)) >> 31) ^ ((_DWORD)v117
                                                                                       + ~((_DWORD)v117 << 27)));
                          v113 = *(_QWORD *)(v106 + 16 * v112);
                          if (v113 == *v104)
                          {
LABEL_169:
                            v118 = *(_QWORD *)(v106 + 16 * v112 + 8);
                            if (v118)
                              *v104 = v118;
                          }
                          else
                          {
                            v111 = 1;
                            while (v113)
                            {
                              v112 = ((_DWORD)v112 + v111) & v114;
                              v113 = *(_QWORD *)(v106 + 16 * v112);
                              ++v111;
                              if (v113 == *v104)
                                goto LABEL_169;
                            }
                          }
                        }
                        if (++v104 == v105)
                          break;
                        v106 = v157;
                      }
                    }
                    if (*((_DWORD *)v156 + 4))
                      WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(&v157, (uint64_t *)&v156, (uint64_t *)&v155, v95, v96, v97, v98, v99, (uint64_t)v154);
                    v108 = v155;
                    v154[0] = v155;
                    v109 = v82[5];
                    if ((_DWORD)v109 == v82[4])
                    {
                      v110 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v82 + 1, v109 + 1, (unint64_t)v154);
                      v109 = v82[5];
                      *(_QWORD *)(*((_QWORD *)v82 + 1) + 8 * v109) = *(_QWORD *)v110;
                      v108 = (JSC::B3::Value *)v154[0];
                    }
                    else
                    {
                      *(_QWORD *)(*((_QWORD *)v82 + 1) + 8 * v109) = v155;
                    }
                    v82[5] = v109 + 1;
                    *((_QWORD *)v108 + 4) = v82;
                    ++v101;
                  }
                  while (v101 != v102);
                }
                WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)(v82 + 14), (const void **)v84 + 7, v94, v95, v96, v97, v98, v99);
                if (v157)
                  WTF::fastFree(v157 - 16, v71, v72, v73, v74, v75, v76, v77);
                v81 = *((_DWORD *)v78 + 15);
              }
            }
          }
        }
        v80 = (v80 + 1);
        if (v81 > v80)
        {
          while (!*(_QWORD *)(*((_QWORD *)v78 + 6) + 8 * v80))
          {
            if (v81 == ++v80)
            {
              LODWORD(v80) = v81;
              break;
            }
          }
        }
      }
      while ((_DWORD)v79 != (_DWORD)v80);
      v78 = v144;
    }
  }
LABEL_184:
  JSC::B3::Procedure::resetReachability(v78, v71, v72, v73, v74, v75, v76, v77);
  JSC::B3::Procedure::invalidateCFG(v144, v119, v120, v121, v122, v123, v124, v125);
  if ((v158 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v158, v126, v127, v128, v129, v130, v131, v132);
  if ((v159[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v159[0], v126, v127, v128, v129, v130, v131, v132);
  v133 = v146;
  if (v148 != (_BYTE *)v146 && v146)
  {
    v146 = 0;
    LODWORD(v147) = 0;
    WTF::fastFree((unint64_t)v133, v126, v127, v128, v129, v130, v131, v132);
  }
  v134 = (JSC::B3::Procedure *)v151[0];
  *(_QWORD *)(v151[0] + 144) = v151[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v153)
      v138 = (JSC::B3::Procedure *)(v153 + 4);
    else
      v138 = 0;
    v144 = v134;
    v145 = v138;
  }
  v135 = v153;
  v153 = 0;
  if (v135)
  {
    if (*v135 == 1)
      WTF::fastFree((unint64_t)v135, v126, v127, v128, v129, v130, v131, v132);
    else
      --*v135;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v152);
}

BOOL JSC::B3::Effects::interferes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v4;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a2)
      v4 = 0;
    else
      v4 = *(_BYTE *)(a2 + 2) == 0;
    if (!v4 || *(_BYTE *)(a2 + 3) != 0)
      return 1;
    if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 12) || *(_BYTE *)(a2 + 6) != 0)
      return 1;
  }
  else if (*(_BYTE *)a2
         && (*(unsigned __int8 *)(a1 + 2) | *(unsigned __int8 *)(a1 + 3)
          || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a1 + 12)
          || *(_BYTE *)(a1 + 6)))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_BYTE *)(a2 + 2))
      return 1;
    v2 = 1;
    if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 12) || *(_BYTE *)(a2 + 6))
      return v2;
  }
  if (*(_BYTE *)(a2 + 1) && (*(_BYTE *)(a1 + 2) || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a1 + 12) || *(_BYTE *)(a1 + 6)))
    return 1;
  if (*(_BYTE *)(a1 + 3))
  {
    v2 = 1;
    if (*(_BYTE *)(a2 + 3) || *(_BYTE *)(a2 + 4))
      return v2;
  }
  else if (*(_BYTE *)(a2 + 3) && *(_BYTE *)(a1 + 4))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 6))
  {
    if (!*(_BYTE *)(a2 + 6) && !*(_BYTE *)(a2 + 5))
      goto LABEL_46;
    return 1;
  }
  if (*(_BYTE *)(a2 + 6) && *(_BYTE *)(a1 + 5))
    return 1;
LABEL_46:
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 12);
  if (v7 != v8 && v9 != v10 && v8 > v9 && v10 > v7)
    return 1;
  if (v7 != v8)
  {
    v12 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
    if (v12 != v11 && v8 > v12 && v11 > v7)
      return 1;
  }
  if (v9 != v10)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v13 = *(_DWORD *)(a1 + 20);
    if (v14 != v13 && v10 > v14 && v13 > v9)
      return 1;
  }
  v2 = *(unsigned __int8 *)(a1 + 7);
  if (*(_BYTE *)(a1 + 7))
    return *(_BYTE *)(a2 + 7) != 0;
  return v2;
}

_BYTE *JSC::B3::Effects::dump(_BYTE *this, WTF::PrintStream *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  WTF::PrintStream *v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  WTF::PrintStream *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  WTF::PrintStream *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  WTF::PrintStream *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  float v33;
  WTF::PrintStream *v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  WTF::PrintStream *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  float v45;
  WTF::PrintStream *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  WTF::PrintStream *v50;
  float v51;
  WTF::PrintStream *v52;
  float v53;
  int v54;
  int v55;
  _BYTE *v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[4];
  char v60;
  _QWORD *v61;
  const char **v62;
  _BYTE *v63;

  v3 = this;
  v59[0] = "|";
  v59[1] = 2;
  v59[2] = "";
  v59[3] = 1;
  v60 = 0;
  v4 = *this;
  if (*this)
  {
    v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v8);
    WTF::printExpectedCStringHelper(v7, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v60 = 1;
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::StringImpl::utf8ForCharacters("Terminal", 8uLL, (uint64_t)&v61, v10);
    WTF::printExpectedCStringHelper(v9, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if (v3[1])
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    if (v4)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v15);
      WTF::printExpectedCStringHelper(v14, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v15);
      WTF::printExpectedCStringHelper(v14, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v11 = 1;
      v60 = 1;
    }
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    WTF::StringImpl::utf8ForCharacters("ExitsSideways", 0xDuLL, (uint64_t)&v61, v17);
    WTF::printExpectedCStringHelper(v16, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (v3[2])
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v21);
      WTF::printExpectedCStringHelper(v20, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v21);
      WTF::printExpectedCStringHelper(v20, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      v60 = 1;
    }
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    WTF::StringImpl::utf8ForCharacters("ControlDependent", 0x10uLL, (uint64_t)&v61, v23);
    WTF::printExpectedCStringHelper(v22, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  if (v3[3])
  {
    v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v27);
      WTF::printExpectedCStringHelper(v26, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v27);
      WTF::printExpectedCStringHelper(v26, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v60 = 1;
    }
    v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    WTF::StringImpl::utf8ForCharacters("WritesLocalState", 0x10uLL, (uint64_t)&v61, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  if (v3[4])
  {
    v30 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    v32 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v33);
      WTF::printExpectedCStringHelper(v32, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v33);
      WTF::printExpectedCStringHelper(v32, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      v60 = 1;
    }
    v34 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    WTF::StringImpl::utf8ForCharacters("ReadsLocalState", 0xFuLL, (uint64_t)&v61, v35);
    WTF::printExpectedCStringHelper(v34, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  if (v3[6])
  {
    v36 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v39);
      WTF::printExpectedCStringHelper(v38, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v39);
      WTF::printExpectedCStringHelper(v38, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
      v60 = 1;
    }
    v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
    WTF::StringImpl::utf8ForCharacters("WritesPinned", 0xCuLL, (uint64_t)&v61, v41);
    WTF::printExpectedCStringHelper(v40, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  if (v3[5])
  {
    v42 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    v44 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v45);
      WTF::printExpectedCStringHelper(v44, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v45);
      WTF::printExpectedCStringHelper(v44, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v60 = 1;
    }
    v46 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::StringImpl::utf8ForCharacters("ReadsPinned", 0xBuLL, (uint64_t)&v61, v47);
    WTF::printExpectedCStringHelper(v46, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = 1;
  }
  if (v3[7])
  {
    v48 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
    v50 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    if (v11)
    {
      WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v61, v51);
      WTF::printExpectedCStringHelper(v50, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v61, v51);
      WTF::printExpectedCStringHelper(v50, "StringView", &v61);
      if ((_DWORD)v62 != -1)
        ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
      v60 = 1;
    }
    v52 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
    WTF::StringImpl::utf8ForCharacters("Fence", 5uLL, (uint64_t)&v61, v53);
    WTF::printExpectedCStringHelper(v52, "StringView", &v61);
    if ((_DWORD)v62 != -1)
      ((void (*)(const char **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v57, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
    this = (_BYTE *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (*((_DWORD *)v3 + 2) != *((_DWORD *)v3 + 3))
  {
    v57 = "Writes:";
    v58 = 8;
    v61 = v59;
    v62 = &v57;
    v63 = v3 + 8;
    this = (_BYTE *)WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int>>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int> const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v61);
  }
  v54 = *((_DWORD *)v3 + 4);
  v55 = *((_DWORD *)v3 + 5);
  v56 = v3 + 16;
  if (v54 != v55)
  {
    v57 = "Reads:";
    v58 = 7;
    v61 = v59;
    v62 = &v57;
    v63 = v56;
    return (_BYTE *)WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int>>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int> const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v61);
  }
  return this;
}

uint64_t JSC::B3::Value::children(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (*((_BYTE *)this + 20) == 4)
  {
    v3 = 40;
    switch(*((_WORD *)this + 6))
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        goto LABEL_7;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v3 = 48;
        goto LABEL_7;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v3 = 56;
        goto LABEL_7;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v3 = 64;
        goto LABEL_7;
      case 0x53u:
        return *((_QWORD *)this + 22);
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v3 = 112;
LABEL_7:
        result = *(_QWORD *)((char *)this + v3);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F86B94);
    }
  }
  else
  {
    v1 = 40;
    switch(*((_WORD *)this + 6))
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        goto LABEL_3;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        return (uint64_t)this + 48;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v1 = 56;
LABEL_3:
        result = (uint64_t)this + v1;
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        result = (uint64_t)this + 64;
        break;
      case 0x53u:
        result = (uint64_t)this + 176;
        break;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        result = (uint64_t)this + 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197F86B74);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v34 = 0;
        else
          v34 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v34;
        goto LABEL_12;
      }
      if (v22 == -1)
        v31 = v21;
      v20 = (v20 + v32) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v32;
    }
    while (*v21);
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v31;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_11;
    goto LABEL_23;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v33 = 8;
LABEL_26:
      result = (uint64_t *)WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(v11, v33, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v25 = *v11;
      if (*v11)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_11;
    }
LABEL_23:
    v33 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_26;
  }
LABEL_11:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_12:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

unint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;

  v8 = result;
  if (a2 == (const void **)result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
    goto LABEL_5;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
    goto LABEL_4;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v19 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      *(_QWORD *)v8 = v8 + 16;
      v19 = 2;
      *(_DWORD *)(v8 + 8) = 2;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = *((unsigned int *)a2 + 3);
  if (v19 >= v20)
  {
LABEL_4:
    v11 = *(_DWORD *)(v8 + 12);
LABEL_5:
    v13 = *(char **)v8;
    if (v11)
    {
      memmove(v13, *a2, 16 * v11 - 7);
      v11 = *(_DWORD *)(v8 + 12);
      v13 = *(char **)v8;
    }
    v14 = *((unsigned int *)a2 + 3);
    if (v11 != (_DWORD)v14)
    {
      v15 = &v13[16 * v11];
      v16 = (__int128 *)((char *)*a2 + 16 * v11);
      v17 = 16 * v14 - 16 * v11;
      do
      {
        v18 = *v16++;
        *(_OWORD *)v15 = v18;
        v15 += 16;
        v17 -= 16;
      }
      while (v17);
      v11 = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(v8 + 12) = v11;
    return v8;
  }
  v21 = *(_QWORD *)v8;
  v22 = *(unsigned int *)(v8 + 12);
  if (v20 < 3)
  {
    v23 = (_OWORD *)(v8 + 16);
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 2;
    goto LABEL_26;
  }
  if (!(v20 >> 28))
  {
    v23 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
    *(_DWORD *)(v8 + 8) = v20;
    *(_QWORD *)v8 = v23;
LABEL_26:
    if ((_DWORD)v22)
    {
      v24 = 16 * v22;
      v25 = (__int128 *)v21;
      do
      {
        v26 = *v25++;
        *v23++ = v26;
        v24 -= 16;
      }
      while (v24);
    }
    if (v8 + 16 != v21 && v21)
    {
      if (*(_QWORD *)v8 == v21)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

_OWORD *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (_QWORD *)(v11 + 16 * v24);
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*v25 << 32) + *v25) ^ ((~(*v25 << 32) + *v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_16;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::Const32Value,JSC::B3::Origin,WTF::Checked<int,WTF::RecordOverflow>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  if (*(_BYTE *)a2 || (result = WTF::fastMalloc((WTF *)0x30), *(_BYTE *)a2))
  {
    __break(0xC471u);
    JUMPOUT(0x197F875E0);
  }
  v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = v5;
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int>>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::Range<unsigned int> const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  float v24;
  unsigned int v25;
  uint64_t v27;
  int v28;
  char v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (_DWORD *)a2[2];
  if (*(_BYTE *)(v7 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v27, v13);
    }
    else
    {
      WTF::CString::CString(&v27, &str_25, 0);
      v28 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v27);
    if (v28 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v29, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v27, v19);
    }
    else
    {
      WTF::CString::CString(&v27, &str_25, 0);
      v28 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v27);
    if (v28 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v29, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v21 = *(char **)v6;
  v22 = *(_QWORD *)(v6 + 8);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if (v21)
  {
    v25 = v22 - 1;
    if (!v22)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(v21, v25, (uint64_t)&v27, v24);
  }
  else
  {
    WTF::CString::CString(&v27, &str_25, 0);
    v28 = 0;
  }
  WTF::printExpectedCStringHelper(v23, "StringView", &v27);
  if (v28 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v29, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::Range<unsigned int>::dump(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::Range<unsigned int>::dump(_DWORD *a1, uint64_t a2)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;

  v3 = *a1;
  v4 = a1[1];
  if (!*(_QWORD *)a1 || (!v3 ? (v5 = v4 == -1) : (v5 = 0), v5))
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s");
  }
  else
  {
    v7 = v3 + 1;
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%u", *a1);
    if (v7 != v4)
    {
      WTF::PrintStream::printf(v8, "%s", "...");
      WTF::PrintStream::printf(v8, "%u");
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

BOOL JSC::B3::eliminateCommonSubexpressions(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  int8x16_t *v51;
  uint64_t *v52;
  int8x16_t *v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t i;
  unsigned int v112;
  JSC::B3::Value *v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  JSC::B3::Value *v119;
  _BYTE *v120;
  uint64_t **v121;
  int v123;
  uint64_t *v124;
  int v125;
  JSC::B3::Value *v127;
  __int16 v128;
  _QWORD *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v137;
  unsigned int v138;
  unsigned __int8 *v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unsigned __int8 *v143;
  BOOL v144;
  uint16x4_t v145;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  JSC::B3::Value *v160;
  int v161;
  unint64_t *v162;
  uint64_t v163;
  JSC::B3::Value *v164;
  unint64_t v165;
  int v166;
  int v167;
  JSC::B3::Value *v168;
  JSC::B3::MemoryValue *v169;
  BOOL v170;
  void *v171;
  void *v172;
  uint64_t v173;
  unsigned int **v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  BOOL v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  int v192;
  unsigned int *v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  WTF *v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  void *v205;
  int v206;
  char *v207;
  char *v208;
  _BYTE *v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int **v213;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v226;
  uint64_t v227;
  JSC::B3::MemoryValue **v228;
  uint64_t v229;
  int *v230;
  uint64_t *v231;
  JSC::B3::MemoryValue *v232;
  int v233;
  BOOL v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  int8x16_t *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v245;
  int v246;
  WTF *v247;
  _BYTE *v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int **v252;
  uint64_t v253;
  unsigned int *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  WTF *v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  unsigned int *v309;
  uint64_t v310;
  unsigned int *v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t v314;
  JSC::B3::Value *v315;
  JSC::B3::Value *v316;
  JSC::B3::Value *v317;
  uint64_t v318;
  unint64_t v319;
  JSC::B3::Value *v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD *v337;
  WTF *v338;
  _QWORD *v339;
  int v340;
  int v341;
  __int16 v342;
  int v343;
  unsigned int *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  _BYTE *v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unsigned int **v353;
  uint64_t v354;
  unsigned int *v355;
  WTF *v356;
  unsigned int v357;
  JSC::B3::Value *v358;
  uint64_t *v360;
  uint64_t v361;
  unsigned int **v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  _BYTE *v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  unsigned int v374;
  WTF *v375;
  uint64_t v376;
  const char *v377;
  uint64_t v378;
  uint64_t v379;
  WTF **v380;
  int v381;
  WTF *v382;
  WTF *v383;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  WTF *v393;
  WTF *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  const char *v416;
  WTF *v417;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unsigned int v429;
  uint64_t *v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t *v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  __int16 v442;
  uint64_t v443;
  _QWORD *v444;
  JSC::B3::Value *v445;
  uint64_t v446;
  JSC::B3::MemoryValue *v447;
  uint64_t v448;
  unsigned int **v449;
  uint64_t v450;
  unsigned int *v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  _BYTE *v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  int v460;
  uint64_t v461;
  int v462;
  __int16 v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  JSC::B3::Value *v467;
  uint64_t v468;
  JSC::B3::MemoryValue *v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int **v472;
  uint64_t v473;
  unsigned int *v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  _BYTE *v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  unint64_t v483;
  unint64_t v484;
  WTF *v485;
  uint64_t v486;
  _QWORD *v487;
  unsigned int v488;
  unsigned int *v489;
  WTF *v490;
  unsigned int v491;
  JSC::B3::Value *v492;
  uint64_t v494;
  unsigned int **v495;
  uint64_t v496;
  unsigned int *v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _BYTE *v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  _OWORD *v509;
  _QWORD *v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  WTF *v514;
  _QWORD *v515;
  void *v516;
  WTF *v517;
  unsigned int v518;
  unsigned int v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unsigned int v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unsigned int v527;
  unint64_t v528;
  unint64_t v529;
  int v530;
  int v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t *v534;
  _BYTE *v535;
  JSC::B3::Value *v536;
  _BYTE *v537;
  uint64_t v538;
  uint64_t **v539;
  uint64_t v540;
  uint64_t *v541;
  unsigned int v542;
  void *v543;
  const char *v544;
  uint64_t v545;
  WTF *__src;
  WTF **__srca;
  const char *v548;
  uint64_t **v549;
  uint64_t v550;
  WTF *v551;
  unsigned int v552;
  unsigned int v553;
  int8x16_t v554;
  uint64_t v555;
  char v556;
  _QWORD v557[2];
  _BYTE v558[72];
  __int16 v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  JSC::B3::BasicBlock *v563;
  unsigned int v564;
  JSC::B3::Value *v565;
  uint64_t v566;
  WTF **v567;
  WTF *v568;
  uint64_t v569;
  _BYTE v570[192];
  _QWORD v571[3];
  uint64_t v572;
  WTF *v573;
  WTF *v574;
  int v575;
  unsigned int v576;
  unint64_t v577;
  uint64_t v578;
  int *v579;
  uint64_t *v580;
  int v581;
  uint64_t v582;
  WTF *v583;
  uint64_t v584;
  uint64_t v585;
  JSC::B3::Value *v586;
  uint64_t v587;
  unsigned int *v588;
  __int128 v589;
  uint64_t v590;
  _BYTE v591[32];
  __int128 v592;
  __int128 v593;
  __int128 v594;
  uint64_t v595;
  char *v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  _QWORD v605[5];

  v605[2] = *MEMORY[0x1E0C80C00];
  JSC::B3::PhaseScope::PhaseScope((uint64_t)v571, this, (uint64_t)"eliminateCommonSubexpressions", 30);
  v548 = (const char *)this;
  v549 = JSC::B3::Procedure::dominators((JSC::B3::Procedure *)this);
  v550 = 0;
  v10 = *((_DWORD *)this + 15);
  v595 = 1;
  v597 = 0u;
  v603 = 0;
  v602 = 0;
  v601 = 0u;
  v600 = 0u;
  v599 = 0u;
  v598 = 0u;
  v593 = 0u;
  v594 = 0u;
  *(_OWORD *)&v591[16] = 0u;
  v592 = 0u;
  *(_QWORD *)v591 = &v591[16];
  *(_QWORD *)&v591[8] = 8;
  v596 = (char *)&v597 + 8;
  LODWORD(v597) = 8;
  BYTE8(v601) = 1;
  v605[0] = 0;
  v604 = 0;
  v551 = 0;
  v552 = 0;
  v553 = v10;
  if (v10)
  {
    if (v10 >= 0x13B13B2)
    {
      __break(0xC471u);
      JUMPOUT(0x197F8AAC8);
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(208 * v10));
    v552 = v10;
    v551 = v11;
    if (v553)
    {
      v12 = v11;
      v13 = (WTF *)((char *)v11 + 208 * v553);
      do
      {
        v14 = *(unsigned int *)&v591[12];
        v15 = (_QWORD *)((char *)v12 + 16);
        *(_QWORD *)v12 = (char *)v12 + 16;
        *((_DWORD *)v12 + 2) = 8;
        *((_DWORD *)v12 + 3) = v14;
        if (v14 >= 9)
        {
          if (v14 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197F8AAD0);
          }
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
          *((_DWORD *)v12 + 2) = v14;
          *(_QWORD *)v12 = v15;
        }
        if (*(_DWORD *)&v591[12])
        {
          v24 = *(uint64_t **)v591;
          v25 = 8 * *(unsigned int *)&v591[12];
          do
          {
            v26 = *v24++;
            *v15++ = v26;
            v25 -= 8;
          }
          while (v25);
        }
        *((_BYTE *)v12 + 80) = v595;
        v16 = DWORD1(v597);
        v17 = (_QWORD *)((char *)v12 + 104);
        *((_QWORD *)v12 + 11) = (char *)v12 + 104;
        *((_DWORD *)v12 + 24) = 8;
        *((_DWORD *)v12 + 25) = v16;
        if (v16 >= 9)
        {
          if (v16 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197F8AAD8);
          }
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
          *((_DWORD *)v12 + 24) = v16;
          *((_QWORD *)v12 + 11) = v17;
        }
        if (DWORD1(v597))
        {
          v27 = (uint64_t *)v596;
          v28 = 8 * DWORD1(v597);
          do
          {
            v29 = *v27++;
            *v17++ = v29;
            v28 -= 8;
          }
          while (v28);
        }
        *((_BYTE *)v12 + 168) = BYTE8(v601);
        *((_WORD *)v12 + 88) = v602;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)v12 + 23, &v603);
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)v12 + 24, &v604);
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)v12 + 25, v605, v18, v19, v20, v21, v22, v23);
        v12 = (WTF *)((char *)v12 + 208);
      }
      while (v12 != v13);
    }
  }
  v554.i64[0] = (uint64_t)&v555;
  v554.i64[1] = 8;
  v556 = 1;
  v557[0] = v558;
  v557[1] = 8;
  v558[64] = 1;
  v559 = 0;
  v560 = 0;
  v561 = 0;
  v562 = 0;
  v566 = 0;
  v567 = this;
  v568 = (WTF *)v570;
  v569 = 8;
  memset(&v570[128], 0, 57);
  v37 = v548;
  v38 = *((unsigned int *)v548 + 15);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = *((_QWORD *)v548 + 6);
    while (!*(_QWORD *)(v40 + 8 * v39))
    {
      if (v38 == ++v39)
        goto LABEL_34;
    }
    if ((_DWORD)v38 != (_DWORD)v39)
    {
      v39 = v39;
      do
      {
        if (v38 <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x197F8AA80);
        }
        v41 = *(_QWORD *)(v40 + 8 * v39);
        v42 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v42)
        {
          v43 = *(uint64_t **)(v41 + 8);
          v44 = 8 * v42;
          do
          {
            v45 = *v43++;
            *(_QWORD *)(v45 + 32) = v41;
            v44 -= 8;
          }
          while (v44);
        }
        if (v38 > ++v39)
        {
          while (!*(_QWORD *)(v40 + 8 * v39))
          {
            if (v38 == ++v39)
              goto LABEL_34;
          }
          v39 = v39;
        }
      }
      while (v38 != v39);
    }
LABEL_34:
    v46 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v37 + 6) + 8 * v46))
    {
      if (v38 == ++v46)
        goto LABEL_120;
    }
    if ((_DWORD)v38 == (_DWORD)v46)
      goto LABEL_120;
    v47 = v38;
    v544 = v37;
    while (1)
    {
      if (v47 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197F8AA90);
      }
      v48 = *(unsigned int **)(*((_QWORD *)v37 + 6) + 8 * v46);
      v49 = v48[5];
      if ((_DWORD)v49)
        break;
LABEL_104:
      v46 = (v46 + 1);
      if (v47 > v46)
      {
        while (!*(_QWORD *)(*((_QWORD *)v37 + 6) + 8 * v46))
        {
          if (v47 == ++v46)
          {
            LODWORD(v46) = v47;
            break;
          }
        }
      }
      if ((_DWORD)v38 == (_DWORD)v46)
      {
        v37 = v548;
        goto LABEL_120;
      }
    }
    v50 = *v48;
    v51 = (int8x16_t *)((char *)v551 + 208 * *v48);
    v52 = (uint64_t *)*((_QWORD *)v48 + 1);
    v53 = v51 + 11;
    __src = v551;
    v54 = 8 * v49;
    while (1)
    {
      v55 = *v52;
      memset(v591, 0, 24);
      v56 = *(_WORD *)(v55 + 12);
      if (v56 > 0x97u)
        break;
      if (*(_WORD *)(v55 + 12) <= 0x3Eu)
      {
        if (v56 == 9)
          goto LABEL_103;
        if (v56 == 10)
          goto LABEL_110;
        if (v56 - 17 < 4)
        {
          v591[2] = 1;
          goto LABEL_56;
        }
LABEL_53:
        if (v56 - 63 >= 0x10)
          goto LABEL_56;
        goto LABEL_48;
      }
      switch(*(_WORD *)(v55 + 12))
      {
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
          v57 = (_QWORD *)(v55 + 52);
          v58 = *(_DWORD *)(v55 + 52);
          *(_QWORD *)&v591[16] = *(_QWORD *)(v55 + 44);
          if (v58 == *(_DWORD *)(v55 + 56))
            goto LABEL_47;
          v537 = &v591[8];
          break;
        case 'D':
        case 'E':
        case 'F':
          v57 = (_QWORD *)(v55 + 52);
          v70 = *(_DWORD *)(v55 + 52);
          *(_QWORD *)&v591[8] = *(_QWORD *)(v55 + 44);
          if (v70 == *(_DWORD *)(v55 + 56))
            goto LABEL_47;
          v537 = &v591[16];
          break;
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
          v527 = *(_DWORD *)(v55 + 44);
          LODWORD(v526) = *(_DWORD *)(v55 + 48);
          if (v527 == (_DWORD)v526)
          {
            v528 = *(_QWORD *)(v55 + 52);
            *(_QWORD *)&v591[16] = v528;
            v529 = HIDWORD(v528);
            v526 = HIDWORD(v528);
          }
          else
          {
            LODWORD(v528) = *(_DWORD *)(v55 + 52);
            LODWORD(v529) = *(_DWORD *)(v55 + 56);
            if ((_DWORD)v528 == (_DWORD)v529)
            {
              *(_QWORD *)&v591[16] = *(_QWORD *)(v55 + 44);
              v526 = HIDWORD(*(_QWORD *)&v591[16]);
              LODWORD(v529) = v528;
              LODWORD(v528) = *(_DWORD *)&v591[16];
            }
            else
            {
              if (v528 >= v527)
                v528 = v527;
              else
                v528 = v528;
              if (v526 <= v529)
                v526 = v529;
              else
                v526 = v526;
              if ((_DWORD)v528 == (_DWORD)v526)
              {
                LODWORD(v526) = 0;
                LODWORD(v528) = 0;
              }
              else
              {
                *(_QWORD *)&v591[16] = v528 | (v526 << 32);
              }
            }
          }
          v591[8] = v528;
          v591[9] = BYTE1(v528);
          v591[10] = BYTE2(v528);
          v591[11] = BYTE3(v528);
          v591[12] = v526;
          v591[13] = BYTE1(v526);
          v591[14] = BYTE2(v526);
          v591[15] = BYTE3(v526);
          if (*(_DWORD *)(v55 + 52) != (_DWORD)v529)
            goto LABEL_862;
          goto LABEL_47;
        case 'P':
          v591[5] = 1;
          goto LABEL_56;
        case 'Q':
          if ((v56 & 0xFFF) == 0x51)
            v76 = v55;
          else
            v76 = 0;
          *(int8x16_t *)&v591[8] = vextq_s8(*(int8x16_t *)(v76 + 40), *(int8x16_t *)(v76 + 40), 8uLL);
          v591[7] = 1;
          goto LABEL_56;
        case 'R':
          if ((v56 & 0xFFF) == 0x52)
            v75 = v55;
          else
            v75 = 0;
          *(_OWORD *)v591 = *(_OWORD *)(v75 + 40);
          v69 = *(_QWORD *)(v75 + 56);
          goto LABEL_96;
        case 'S':
          if (v56 == 83)
            v68 = v55;
          else
            v68 = 0;
          *(_OWORD *)v591 = *(_OWORD *)(v68 + 112);
          v69 = *(_QWORD *)(v68 + 128);
          goto LABEL_96;
        case 'U':
        case 'V':
        case 'W':
        case 'X':
          *(_QWORD *)&v591[8] = 0;
          *(_QWORD *)&v591[2] = 0;
          goto LABEL_100;
        case 'Y':
          if ((v56 & 0xFFF) == 0x59)
            v538 = v55;
          else
            v538 = 0;
          if (!*(_DWORD *)(v538 + 44))
            v591[5] = 1;
          goto LABEL_100;
        default:
          goto LABEL_53;
      }
      *(_QWORD *)v537 = *v57;
LABEL_862:
      v591[7] = 1;
LABEL_47:
      v591[2] = 1;
LABEL_48:
      if ((v56 & 0x200) != 0)
      {
LABEL_100:
        v591[1] = 1;
        v69 = 0xFFFFFFFF00000000;
LABEL_96:
        *(_QWORD *)&v591[16] = v69;
      }
LABEL_56:
      if (*(unsigned __int8 *)(v55 + 12) - 63 >= 0x10)
        v59 = 0;
      else
        v59 = v55;
      if (v59
        && *(unsigned __int8 *)(v59 + 12) - 68 <= 2
        && !WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v51, (_DWORD *)(v59 + 44))
        && !WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)__src + 208 * v50 + 88, (_DWORD *)(v59 + 44))
        && (!v53->i8[0] || *(_DWORD *)(v59 + 52) == *(_DWORD *)(v59 + 56)))
      {
      }
      if (*(_DWORD *)&v591[16] == *(_DWORD *)&v591[20])
        goto LABEL_61;
      v61 = v51->u32[3];
      if ((_DWORD)v61)
      {
        v62 = v51->i64[0] + 8 * v61;
        v64 = *(_DWORD *)(v62 - 8);
        v63 = *(_DWORD *)(v62 - 4);
        v65 = v64 <= *(_DWORD *)&v591[16] && v63 >= *(_DWORD *)&v591[20];
        v66 = v51->u32[3];
        if (v65)
          goto LABEL_61;
      }
      else
      {
        v66 = 0;
      }
      v51[5].i8[0] = 0;
      v67 = v51->u32[2];
      if (v66 + 1 >= v67)
      {
        if ((_DWORD)v61 == (_DWORD)v67)
        {
          WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)v51, (unint64_t)&v591[16], v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_QWORD *)(v51->i64[0] + 8 * v66) = *(_QWORD *)&v591[16];
          ++v51->i32[3];
        }
        WTF::RangeSet<WTF::Range<unsigned int>>::compact(v51);
      }
      else if ((_DWORD)v61 == (_DWORD)v67)
      {
        WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)v51, (unint64_t)&v591[16], v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_QWORD *)(v51->i64[0] + 8 * v66) = *(_QWORD *)&v591[16];
        ++v51->i32[3];
      }
LABEL_61:
      v30 = *(void **)&v591[8];
      if (*(_DWORD *)&v591[8] != *(_DWORD *)&v591[12])
      v53->i8[0] |= v591[7];
      if (v59)
      if ((*(_WORD *)(v55 + 12) & 0xFFF) == 0x50)
        v60 = (uint64_t *)v55;
      else
        v60 = 0;
      v583 = (WTF *)v60;
      if (v60)
        WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::WasmAddressValue *&>(&v589, (uint64_t *)__src + 26 * v50 + 25, v60 + 6, &v583, v33, v34, v35, v36);
      if (v591[6])
      {
        v71 = (char *)__src + 208 * v50;
        v74 = *((_QWORD *)v71 + 25);
        v72 = v71 + 200;
        v73 = v74;
        *((_BYTE *)v72 - 23) = 1;
        if (v74)
        {
          *v72 = 0;
          WTF::fastFree(v73 - 16, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      ++v52;
      v54 -= 8;
      if (!v54)
      {
        v37 = v544;
        v47 = *((_DWORD *)v544 + 15);
        goto LABEL_104;
      }
    }
    if (v56 - 154 < 6)
    {
      v591[0] = 1;
      goto LABEL_56;
    }
    if (v56 == 152)
    {
LABEL_103:
      v591[3] = 1;
      goto LABEL_56;
    }
    if (v56 == 153)
    {
LABEL_110:
      v591[4] = 1;
      goto LABEL_56;
    }
    goto LABEL_53;
  }
LABEL_120:
  if (!*((_DWORD *)v37 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197F8AAC0);
  }
  JSC::B3::blocksInPostOrder<JSC::B3::BasicBlock>(**((unsigned int ***)v37 + 6), v30, v31, v32, v33, v34, v35, v36, (uint64_t)&v574);
  v84 = v576;
  if (v576)
  {
LABEL_122:
    v85 = v84 - 1;
    if (v576 <= v85)
    {
      __break(0xC471u);
      JUMPOUT(0x197F8AA88);
    }
    v545 = v85;
    v563 = (JSC::B3::BasicBlock *)*((_QWORD *)v574 + v85);
    v602 = 0;
    v600 = 0u;
    v601 = 0u;
    v598 = 0u;
    v599 = 0u;
    v595 = 1;
    v597 = 0u;
    v593 = 0u;
    v594 = 0u;
    *(_OWORD *)&v591[16] = 0u;
    v592 = 0u;
    *(_QWORD *)v591 = &v591[16];
    *(_QWORD *)&v591[8] = 8;
    v596 = (char *)&v597 + 8;
    LODWORD(v597) = 8;
    BYTE8(v601) = 1;
    v604 = 0;
    v605[0] = 0;
    v603 = 0;
    WTF::RangeSet<WTF::Range<unsigned int>>::operator=(&v554, v591, v78, v79, v80, v81, v82, v83);
    WTF::RangeSet<WTF::Range<unsigned int>>::operator=(v557, &v596, v86, v87, v88, v89, v90, v91);
    v559 = v602;
    v99 = v603;
    v603 = 0;
    v100 = v560;
    v560 = v99;
    if (v100)
    {
      v296 = *(unsigned int *)(v100 - 4);
      if ((_DWORD)v296)
      {
        v297 = v100 + 24;
        do
        {
          if (*(_QWORD *)(v297 - 24) != -1)
          {
            v298 = *(_QWORD *)(v297 - 16);
            if (v297 != v298 && v298 != 0)
            {
              *(_QWORD *)(v297 - 16) = 0;
              *(_DWORD *)(v297 - 8) = 0;
              WTF::fastFree(v298, v92, v93, v94, v95, v96, v97, v98);
            }
          }
          v297 += 32;
          --v296;
        }
        while (v296);
      }
      WTF::fastFree(v100 - 16, v92, v93, v94, v95, v96, v97, v98);
    }
    v101 = v604;
    v604 = 0;
    v102 = v561;
    v561 = v101;
    if (v102)
    {
      v300 = *(unsigned int *)(v102 - 4);
      if ((_DWORD)v300)
      {
        v301 = v102 + 24;
        do
        {
          if (*(_QWORD *)(v301 - 24) != -1)
          {
            v302 = *(_QWORD *)(v301 - 16);
            if (v301 != v302 && v302 != 0)
            {
              *(_QWORD *)(v301 - 16) = 0;
              *(_DWORD *)(v301 - 8) = 0;
              WTF::fastFree(v302, v92, v93, v94, v95, v96, v97, v98);
            }
          }
          v301 += 32;
          --v300;
        }
        while (v300);
      }
      WTF::fastFree(v102 - 16, v92, v93, v94, v95, v96, v97, v98);
    }
    v103 = v605[0];
    v605[0] = 0;
    v104 = v562;
    v562 = v103;
    if (v104)
      WTF::fastFree(v104 - 16, v92, v93, v94, v95, v96, v97, v98);
    v564 = 0;
    i = (uint64_t)v563;
    if (!*((_DWORD *)v563 + 5))
      goto LABEL_414;
    v112 = 0;
    while (1)
    {
      v113 = *(JSC::B3::Value **)(*(_QWORD *)(i + 8) + 8 * v112);
      v565 = v113;
      v114 = *((unsigned __int8 *)v113 + 20);
      v115 = *((_WORD *)v113 + 6);
      if (v114 == 4)
      {
        v158 = 40;
        switch(*((_WORD *)v113 + 6))
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v158 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v158 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v158 = 64;
            break;
          case 0x53u:
            v158 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v158 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197F8AA78);
        }
        v159 = (char *)v113 + v158;
        v117 = *(char **)v159;
        v114 = *((unsigned int *)v159 + 3);
      }
      else
      {
        v116 = 40;
        switch(*((_WORD *)v113 + 6))
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v116 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v116 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v116 = 64;
            break;
          case 0x53u:
            v116 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v116 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197F8AA40);
        }
        v117 = (char *)v113 + v116;
      }
      v118 = &v117[8 * v114];
      if (v117 != v118)
      {
        do
        {
          v119 = *(JSC::B3::Value **)v117;
          if (*(_BYTE *)(*(_QWORD *)v117 + 12) == 1)
          {
            do
            {
              if (*((_BYTE *)v119 + 20) == 4)
              {
                v540 = JSC::B3::Value::childrenVector(v119);
                if (!*(_DWORD *)(v540 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F8AA48);
                }
                v120 = *(_BYTE **)v540;
              }
              else
              {
                v120 = (char *)v119 + 40;
              }
              v119 = *(JSC::B3::Value **)v120;
            }
            while (*(_BYTE *)(*(_QWORD *)v120 + 12) == 1);
            *(_QWORD *)v117 = v119;
          }
          v117 += 8;
        }
        while (v117 != v118);
        v113 = v565;
        v115 = *((_WORD *)v565 + 6);
      }
      v121 = v549;
      v583 = v113;
      if (v115 - 3 < 5 || v115 == 1)
        goto LABEL_145;
      JSC::B3::Value::key((uint64_t)v113, (uint64_t)v591);
      if (v591[0] || v591[1] != 159 || (v591[2] & 0xF) != 0)
        break;
      if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19914F6D0, (int8x16_t)vceqzq_s32(*(int32x4_t *)&v591[4]))) & 0xF) != 0
        || *(_DWORD *)&v591[20] != 0)
      {
        break;
      }
LABEL_242:
      v113 = v565;
      v115 = *((_WORD *)v565 + 6);
LABEL_145:
      v123 = v115 & 0xFFF;
      if (v123 != 80)
      {
        v578 = 0;
        v577 = 0;
        switch((char)v115)
        {
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
            v124 = (uint64_t *)((char *)v113 + 52);
            v125 = *((_DWORD *)v113 + 13);
            v577 = *(_QWORD *)((char *)v113 + 44);
            if (v125 == *((_DWORD *)v113 + 14))
              goto LABEL_148;
            v534 = &v578;
            goto LABEL_850;
          case 'D':
          case 'E':
          case 'F':
            v124 = (uint64_t *)((char *)v113 + 52);
            v166 = *((_DWORD *)v113 + 13);
            v578 = *(_QWORD *)((char *)v113 + 44);
            if (v166 != *((_DWORD *)v113 + 14))
            {
              v534 = (uint64_t *)&v577;
LABEL_850:
              *v534 = *v124;
            }
            goto LABEL_148;
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
            v519 = *((_DWORD *)v113 + 11);
            v518 = *((_DWORD *)v113 + 12);
            if (v519 == v518)
            {
              v520 = *(_QWORD *)((char *)v113 + 52);
              v577 = v520;
              v521 = HIDWORD(v520);
            }
            else
            {
              LODWORD(v532) = *((_DWORD *)v113 + 13);
              v533 = *((_DWORD *)v113 + 14);
              if ((_DWORD)v532 == v533)
              {
                v520 = *(_QWORD *)((char *)v113 + 44);
                v577 = v520;
                v521 = HIDWORD(v520);
              }
              else
              {
                if (v532 >= v519)
                  v532 = v519;
                else
                  v532 = v532;
                if (v518 <= v533)
                  v521 = v533;
                else
                  v521 = v518;
                if ((_DWORD)v532 == (_DWORD)v521)
                {
                  v521 = 0;
                  LODWORD(v520) = 0;
                }
                else
                {
                  v577 = v532 | (v521 << 32);
                  LODWORD(v520) = v532;
                }
              }
            }
            v578 = v520 | (v521 << 32);
            goto LABEL_148;
          case 'O':
          case 'T':
            goto LABEL_156;
          case 'P':
            goto LABEL_157;
          case 'Q':
            if (v123 == 81)
              v317 = v113;
            else
              v317 = 0;
            v319 = *((_QWORD *)v317 + 5);
            v318 = *((_QWORD *)v317 + 6);
            v577 = v319;
            v578 = v318;
            goto LABEL_157;
          case 'R':
            if (v123 == 82)
              v315 = v113;
            else
              v315 = 0;
            v161 = *((unsigned __int8 *)v315 + 46);
            v578 = *((_QWORD *)v315 + 6);
            v162 = (unint64_t *)((char *)v315 + 56);
            goto LABEL_257;
          case 'S':
            if (v115 == 83)
              v160 = v113;
            else
              v160 = 0;
            v161 = *((unsigned __int8 *)v160 + 118);
            v578 = *((_QWORD *)v160 + 15);
            v162 = (unint64_t *)((char *)v160 + 128);
LABEL_257:
            v577 = *v162;
            if (v161)
            {
              HIBYTE(v559) = 1;
              v163 = v562;
              if (v562)
              {
                v562 = 0;
                WTF::fastFree(v163 - 16, (void *)i, v105, v106, v107, v108, v109, v110);
                v113 = v565;
              }
            }
            goto LABEL_157;
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
            goto LABEL_149;
          default:
            if (v115 - 152 < 8)
              goto LABEL_157;
            if (v115 <= 0x14u && ((1 << v115) & 0x1E0600) != 0)
              goto LABEL_157;
LABEL_156:
            if (v115 - 63 < 0x10)
            {
LABEL_148:
              if ((v115 & 0x200) != 0)
LABEL_149:
                v577 = 0xFFFFFFFF00000000;
            }
LABEL_157:
            if (*((unsigned __int8 *)v113 + 12) - 63 >= 0x10)
              v127 = 0;
            else
              v127 = v113;
            if (!v127)
              goto LABEL_161;
            v582 = *(_QWORD *)JSC::B3::MemoryValue::child(v127, 0);
            v133 = *(_QWORD *)JSC::B3::MemoryValue::lastChild(v127);
            v134 = *(_QWORD *)((char *)v127 + 44);
            v581 = *((_DWORD *)v127 + 10);
            v135 = *((unsigned __int8 *)v127 + 12);
            if (v135 != 70)
            {
              if (v135 != 68)
              {
                if (v135 == 69)
                {
                  v579 = &v581;
                  v580 = &v582;
                  v587 = v134;
                  v467 = v565;
                  if (*((unsigned __int8 *)v565 + 12) - 63 >= 0x10)
                    v467 = 0;
                  if (*((_DWORD *)v467 + 13) == *((_DWORD *)v467 + 14))
                  {
                    v468 = v133;
                    if (v469)
                    {
                      *(_QWORD *)v591 = v469;
                      WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v583, (uint64_t *)v591, 1uLL);
LABEL_759:
                      if (!HIDWORD(v584))
                      {
                        v485 = v583;
                        if (&v585 == (uint64_t *)v583)
                          goto LABEL_161;
                        goto LABEL_719;
                      }
                      JSC::B3::Value::replaceWithNop(v565);
                      v570[184] = 1;
                      v517 = v583;
                      if (&v585 == (uint64_t *)v583)
                        goto LABEL_180;
                      goto LABEL_783;
                    }
                    if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v557, &v587))
                      goto LABEL_161;
                    *(_QWORD *)v591 = 0x8000000000000000;
                    *(_QWORD *)&v591[8] = &v591[24];
                    *(_QWORD *)&v591[16] = 16;
                    v470 = *((unsigned int *)v563 + 9);
                    if ((_DWORD)v470)
                    {
                      v471 = v468;
                      v472 = (unsigned int **)*((_QWORD *)v563 + 3);
                      v473 = 8 * v470;
                      do
                      {
                        v474 = *v472;
                        *(_QWORD *)&v589 = *v472;
                        v475 = *(_QWORD *)v591;
                        if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                          v476 = 63;
                        else
                          v476 = *(_QWORD *)(2 * *(_QWORD *)v591);
                        v477 = *v474;
                        if (v476 <= v477)
                        {
                          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v477 + 1, 0);
                          v471 = v468;
                          v475 = *(_QWORD *)v591;
                        }
                        v478 = 2 * v475 + 8;
                        v181 = v475 < 0;
                        v479 = v591;
                        if (!v181)
                          v479 = (_BYTE *)v478;
                        v480 = (v477 >> 3) & 0x1FFFFFF8;
                        v481 = *(_QWORD *)&v479[v480];
                        *(_QWORD *)&v479[v480] = v481 | (1 << v477);
                        if ((v481 & (1 << v477)) == 0)
                        {
                          v482 = *(_DWORD *)&v591[20];
                          if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                          {
                            v515 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v589);
                            v471 = v468;
                            v482 = *(_DWORD *)&v591[20];
                            *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v515;
                          }
                          else
                          {
                            *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v474;
                          }
                          *(_DWORD *)&v591[20] = v482 + 1;
                        }
                        ++v472;
                        v473 -= 8;
                      }
                      while (v473);
                      v488 = *(_DWORD *)&v591[20];
                      *(_QWORD *)&v589 = &v590;
                      *((_QWORD *)&v589 + 1) = 1;
                      if (*(_DWORD *)&v591[20])
                      {
                        do
                        {
                          v489 = *(unsigned int **)(*(_QWORD *)&v591[8] + 8 * v488 - 8);
                          *(_DWORD *)&v591[20] = v488 - 1;
                          if (!v489)
                            break;
                          v490 = v551;
                          v491 = *v489;
                          v586 = 0;
                          v586 = v492;
                          if (!v492 || v492 == v565)
                          {
                            if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v490 + 208 * v491 + 88, &v587)|| (v494 = v489[9], !(_DWORD)v494))
                            {
                              v583 = (WTF *)&v585;
                              v584 = 1;
                              v506 = v589;
                              if (&v590 != (uint64_t *)v589 && (_QWORD)v589)
                              {
                                *(_QWORD *)&v589 = 0;
                                DWORD2(v589) = 0;
                                WTF::fastFree(v506, v360, v105, v106, v107, v108, v109, v110);
                              }
                              goto LABEL_754;
                            }
                            v495 = (unsigned int **)*((_QWORD *)v489 + 3);
                            v496 = 8 * v494;
                            v471 = v468;
                            do
                            {
                              v497 = *v495;
                              v588 = *v495;
                              v498 = *(_QWORD *)v591;
                              if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                                v499 = 63;
                              else
                                v499 = *(_QWORD *)(2 * *(_QWORD *)v591);
                              v500 = *v497;
                              if (v499 <= v500)
                              {
                                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v500 + 1, 0);
                                v471 = v468;
                                v498 = *(_QWORD *)v591;
                              }
                              v501 = 2 * v498 + 8;
                              v181 = v498 < 0;
                              v502 = v591;
                              if (!v181)
                                v502 = (_BYTE *)v501;
                              v503 = (v500 >> 3) & 0x1FFFFFF8;
                              v504 = *(_QWORD *)&v502[v503];
                              *(_QWORD *)&v502[v503] = v504 | (1 << v500);
                              if ((v504 & (1 << v500)) == 0)
                              {
                                v505 = *(_DWORD *)&v591[20];
                                if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                                {
                                  v513 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v588);
                                  v471 = v468;
                                  v505 = *(_DWORD *)&v591[20];
                                  *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v513;
                                }
                                else
                                {
                                  *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v497;
                                }
                                *(_DWORD *)&v591[20] = v505 + 1;
                              }
                              ++v495;
                              v496 -= 8;
                            }
                            while (v496);
                          }
                          else
                          {
                            v531 = HIDWORD(v589);
                            if (HIDWORD(v589) == DWORD2(v589))
                            {
                              WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>((uint64_t)&v589, (unint64_t)&v586);
                            }
                            else
                            {
                              *(_QWORD *)(v589 + 8 * HIDWORD(v589)) = v492;
                              HIDWORD(v589) = v531 + 1;
                            }
                            v471 = v468;
                          }
                          v488 = *(_DWORD *)&v591[20];
                        }
                        while (*(_DWORD *)&v591[20]);
                        v514 = (WTF *)v589;
                        v583 = (WTF *)&v585;
                        LODWORD(v584) = 1;
                        v507 = HIDWORD(v589);
                        v360 = &v590;
                        if ((uint64_t *)v589 == &v590)
                          goto LABEL_752;
                        *(_QWORD *)&v589 = &v590;
                        v583 = v514;
                        LODWORD(v584) = DWORD2(v589);
                        goto LABEL_753;
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v589 = &v590;
                      *((_QWORD *)&v589 + 1) = 1;
                    }
                    v507 = 0;
                    v583 = (WTF *)&v585;
                    LODWORD(v584) = 1;
LABEL_752:
                    memcpy(&v585, &v590, 8 * v507);
LABEL_753:
                    HIDWORD(v584) = v507;
LABEL_754:
                    v508 = *(_QWORD *)&v591[8];
                    if (&v591[24] != *(_BYTE **)&v591[8] && *(_QWORD *)&v591[8])
                    {
                      *(_QWORD *)&v591[8] = 0;
                      *(_DWORD *)&v591[16] = 0;
                      WTF::fastFree(v508, v360, v105, v106, v107, v108, v109, v110);
                    }
                    if ((*(_QWORD *)v591 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * *(_QWORD *)v591, v360, v105, v106, v107, v108, v109, v110);
                    goto LABEL_759;
                  }
                }
LABEL_161:
                if ((_DWORD)v578 != HIDWORD(v578))
                if (v127)
                memset(v591, 0, 24);
                v128 = *((_WORD *)v565 + 6);
                if (v128 > 0x97u)
                {
                  if (v128 - 154 < 6)
                  {
                    v591[0] = 1;
                    goto LABEL_179;
                  }
                  if (v128 != 152)
                  {
                    if (v128 != 153)
                    {
LABEL_175:
                      if (v128 - 63 < 0x10)
                      {
LABEL_170:
                        if ((v128 & 0x200) != 0)
                        {
LABEL_272:
                          v591[1] = 1;
                          v165 = 0xFFFFFFFF00000000;
LABEL_265:
                          *(_QWORD *)&v591[16] = v165;
                        }
                      }
LABEL_179:
                      if (*(_DWORD *)&v591[16] == *(_DWORD *)&v591[20])
                        goto LABEL_180;
                      if (v554.i32[3])
                      {
                        v131 = v554.i64[0] + 8 * v554.u32[3];
                        v132 = v554.u32[3];
                        if (*(_DWORD *)(v131 - 8) <= *(_DWORD *)&v591[16])
                        {
                          v132 = v554.u32[3];
                          if (*(_DWORD *)(v131 - 4) >= *(_DWORD *)&v591[20])
                            goto LABEL_180;
                        }
                      }
                      else
                      {
                        v132 = 0;
                      }
                      v556 = 0;
                      if (v132 + 1 >= (unint64_t)v554.u32[2])
                      {
                        if (v554.i32[3] == v554.i32[2])
                        {
                          WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)&v554, (unint64_t)&v591[16], v105, v106, v107, v108, v109, v110);
                        }
                        else
                        {
                          *(_QWORD *)(v554.i64[0] + 8 * v132) = *(_QWORD *)&v591[16];
                          ++v554.i32[3];
                        }
                        WTF::RangeSet<WTF::Range<unsigned int>>::compact(&v554);
                      }
                      else if (v554.i32[3] == v554.i32[2])
                      {
                        WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)&v554, (unint64_t)&v591[16], v105, v106, v107, v108, v109, v110);
                      }
                      else
                      {
                        *(_QWORD *)(v554.i64[0] + 8 * v132) = *(_QWORD *)&v591[16];
                        ++v554.i32[3];
                      }
                      goto LABEL_180;
                    }
LABEL_455:
                    v591[4] = 1;
                    goto LABEL_179;
                  }
                }
                else
                {
                  if (*((_WORD *)v565 + 6) > 0x3Eu)
                  {
                    switch(*((_WORD *)v565 + 6))
                    {
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'C':
                        v130 = *((_DWORD *)v565 + 13);
                        v129 = (_QWORD *)((char *)v565 + 52);
                        *(_QWORD *)&v591[16] = *(_QWORD *)((char *)v565 + 44);
                        if (v130 == *((_DWORD *)v565 + 14))
                          goto LABEL_169;
                        v535 = &v591[8];
                        break;
                      case 'D':
                      case 'E':
                      case 'F':
                        v167 = *((_DWORD *)v565 + 13);
                        v129 = (_QWORD *)((char *)v565 + 52);
                        *(_QWORD *)&v591[8] = *(_QWORD *)((char *)v565 + 44);
                        if (v167 == *((_DWORD *)v565 + 14))
                          goto LABEL_169;
                        v535 = &v591[16];
                        break;
                      case 'G':
                      case 'H':
                      case 'I':
                      case 'J':
                      case 'K':
                      case 'L':
                      case 'M':
                      case 'N':
                        v523 = *((_DWORD *)v565 + 11);
                        LODWORD(v522) = *((_DWORD *)v565 + 12);
                        if (v523 == (_DWORD)v522)
                        {
                          v524 = *(_QWORD *)((char *)v565 + 52);
                          *(_QWORD *)&v591[16] = v524;
                          v525 = HIDWORD(v524);
                          v522 = HIDWORD(v524);
                        }
                        else
                        {
                          LODWORD(v524) = *((_DWORD *)v565 + 13);
                          LODWORD(v525) = *((_DWORD *)v565 + 14);
                          if ((_DWORD)v524 == (_DWORD)v525)
                          {
                            *(_QWORD *)&v591[16] = *(_QWORD *)((char *)v565 + 44);
                            v522 = HIDWORD(*(_QWORD *)&v591[16]);
                            LODWORD(v525) = v524;
                            LODWORD(v524) = *(_DWORD *)&v591[16];
                          }
                          else
                          {
                            if (v524 >= v523)
                              v524 = v523;
                            else
                              v524 = v524;
                            if (v522 <= v525)
                              v522 = v525;
                            else
                              v522 = v522;
                            if ((_DWORD)v524 == (_DWORD)v522)
                            {
                              LODWORD(v522) = 0;
                              LODWORD(v524) = 0;
                            }
                            else
                            {
                              *(_QWORD *)&v591[16] = v524 | (v522 << 32);
                            }
                          }
                        }
                        v591[8] = v524;
                        v591[9] = BYTE1(v524);
                        v591[10] = BYTE2(v524);
                        v591[11] = BYTE3(v524);
                        v591[12] = v522;
                        v591[13] = BYTE1(v522);
                        v591[14] = BYTE2(v522);
                        v591[15] = BYTE3(v522);
                        if (*((_DWORD *)v565 + 13) != (_DWORD)v525)
                          goto LABEL_853;
                        goto LABEL_169;
                      case 'P':
                        v591[5] = 1;
                        goto LABEL_179;
                      case 'Q':
                        if ((v128 & 0xFFF) == 0x51)
                          v320 = v565;
                        else
                          v320 = 0;
                        *(int8x16_t *)&v591[8] = vextq_s8(*(int8x16_t *)((char *)v320 + 40), *(int8x16_t *)((char *)v320 + 40), 8uLL);
                        v591[7] = 1;
                        goto LABEL_179;
                      case 'R':
                        if ((v128 & 0xFFF) == 0x52)
                          v316 = v565;
                        else
                          v316 = 0;
                        *(_OWORD *)v591 = *(_OWORD *)((char *)v316 + 40);
                        v165 = *((_QWORD *)v316 + 7);
                        goto LABEL_265;
                      case 'S':
                        if (v128 == 83)
                          v164 = v565;
                        else
                          v164 = 0;
                        *(_OWORD *)v591 = *((_OWORD *)v164 + 7);
                        v165 = *((_QWORD *)v164 + 16);
                        goto LABEL_265;
                      case 'U':
                      case 'V':
                      case 'W':
                      case 'X':
                        *(_QWORD *)&v591[8] = 0;
                        *(_QWORD *)&v591[2] = 0;
                        goto LABEL_272;
                      case 'Y':
                        if ((v128 & 0xFFF) == 0x59)
                          v536 = v565;
                        else
                          v536 = 0;
                        if (!*((_DWORD *)v536 + 11))
                          v591[5] = 1;
                        v591[1] = 1;
                        *(_QWORD *)&v591[16] = 0xFFFFFFFF00000000;
                        goto LABEL_179;
                      default:
                        goto LABEL_175;
                    }
                    *(_QWORD *)v535 = *v129;
LABEL_853:
                    v591[7] = 1;
LABEL_169:
                    v591[2] = 1;
                    goto LABEL_170;
                  }
                  if (v128 != 9)
                  {
                    if (v128 != 10)
                    {
                      if (v128 - 17 < 4)
                      {
                        v591[2] = 1;
                        goto LABEL_179;
                      }
                      goto LABEL_175;
                    }
                    goto LABEL_455;
                  }
                }
                v591[3] = 1;
                goto LABEL_179;
              }
              v579 = &v581;
              v580 = &v582;
              v587 = v134;
              v445 = v565;
              if (*((unsigned __int8 *)v565 + 12) - 63 >= 0x10)
                v445 = 0;
              if (*((_DWORD *)v445 + 13) != *((_DWORD *)v445 + 14))
                goto LABEL_161;
              v446 = v133;
              if (v447)
              {
                *(_QWORD *)v591 = v447;
                WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v583, (uint64_t *)v591, 1uLL);
LABEL_717:
                if (!HIDWORD(v584))
                {
                  v485 = v583;
                  if (&v585 == (uint64_t *)v583)
                    goto LABEL_161;
LABEL_719:
                  if (v485)
                  {
                    v583 = 0;
                    LODWORD(v584) = 0;
                    WTF::fastFree((unint64_t)v485, v360, v105, v106, v107, v108, v109, v110);
                  }
                  goto LABEL_161;
                }
                JSC::B3::Value::replaceWithNop(v565);
                v570[184] = 1;
                v517 = v583;
                if (&v585 == (uint64_t *)v583)
                  goto LABEL_180;
LABEL_783:
                if (v517)
                {
                  v583 = 0;
                  LODWORD(v584) = 0;
                  WTF::fastFree((unint64_t)v517, v516, v105, v106, v107, v108, v109, v110);
                }
                goto LABEL_180;
              }
              if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v557, &v587))
                goto LABEL_161;
              *(_QWORD *)v591 = 0x8000000000000000;
              *(_QWORD *)&v591[8] = &v591[24];
              *(_QWORD *)&v591[16] = 16;
              v448 = *((unsigned int *)v563 + 9);
              if ((_DWORD)v448)
              {
                v364 = v446;
                v449 = (unsigned int **)*((_QWORD *)v563 + 3);
                v450 = 8 * v448;
                do
                {
                  v451 = *v449;
                  *(_QWORD *)&v589 = *v449;
                  v452 = *(_QWORD *)v591;
                  if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                    v453 = 63;
                  else
                    v453 = *(_QWORD *)(2 * *(_QWORD *)v591);
                  v454 = *v451;
                  if (v453 <= v454)
                  {
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v454 + 1, 0);
                    v364 = v446;
                    v452 = *(_QWORD *)v591;
                  }
                  v455 = 2 * v452 + 8;
                  v181 = v452 < 0;
                  v456 = v591;
                  if (!v181)
                    v456 = (_BYTE *)v455;
                  v457 = (v454 >> 3) & 0x1FFFFFF8;
                  v458 = *(_QWORD *)&v456[v457];
                  *(_QWORD *)&v456[v457] = v458 | (1 << v454);
                  if ((v458 & (1 << v454)) == 0)
                  {
                    v459 = *(_DWORD *)&v591[20];
                    if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                    {
                      v512 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v589);
                      v364 = v446;
                      v459 = *(_DWORD *)&v591[20];
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v512;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v451;
                    }
                    *(_DWORD *)&v591[20] = v459 + 1;
                  }
                  ++v449;
                  v450 -= 8;
                }
                while (v450);
                v374 = *(_DWORD *)&v591[20];
                *(_QWORD *)&v589 = &v590;
                *((_QWORD *)&v589 + 1) = 1;
                if (*(_DWORD *)&v591[20])
                {
                  do
                  {
                    v355 = *(unsigned int **)(*(_QWORD *)&v591[8] + 8 * v374 - 8);
                    *(_DWORD *)&v591[20] = v374 - 1;
                    if (!v355)
                      break;
                    v356 = v551;
                    v357 = *v355;
                    v586 = 0;
                    v586 = v358;
                    if (!v358 || v358 == v565)
                    {
                      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v356 + 208 * v357 + 88, &v587)
                        || (v361 = v355[9], !(_DWORD)v361))
                      {
                        v583 = (WTF *)&v585;
                        v584 = 1;
                        v483 = v589;
                        if (&v590 != (uint64_t *)v589 && (_QWORD)v589)
                        {
                          *(_QWORD *)&v589 = 0;
                          DWORD2(v589) = 0;
                          WTF::fastFree(v483, v360, v105, v106, v107, v108, v109, v110);
                        }
                        goto LABEL_712;
                      }
                      v362 = (unsigned int **)*((_QWORD *)v355 + 3);
                      v363 = 8 * v361;
                      v364 = v446;
                      do
                      {
                        v365 = *v362;
                        v588 = *v362;
                        v366 = *(_QWORD *)v591;
                        if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                          v367 = 63;
                        else
                          v367 = *(_QWORD *)(2 * *(_QWORD *)v591);
                        v368 = *v365;
                        if (v367 <= v368)
                        {
                          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v368 + 1, 0);
                          v364 = v446;
                          v366 = *(_QWORD *)v591;
                        }
                        v369 = 2 * v366 + 8;
                        v181 = v366 < 0;
                        v370 = v591;
                        if (!v181)
                          v370 = (_BYTE *)v369;
                        v371 = (v368 >> 3) & 0x1FFFFFF8;
                        v372 = *(_QWORD *)&v370[v371];
                        *(_QWORD *)&v370[v371] = v372 | (1 << v368);
                        if ((v372 & (1 << v368)) == 0)
                        {
                          v373 = *(_DWORD *)&v591[20];
                          if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                          {
                            v511 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v588);
                            v364 = v446;
                            v373 = *(_DWORD *)&v591[20];
                            *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v511;
                          }
                          else
                          {
                            *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v365;
                          }
                          *(_DWORD *)&v591[20] = v373 + 1;
                        }
                        ++v362;
                        v363 -= 8;
                      }
                      while (v363);
                    }
                    else
                    {
                      v530 = HIDWORD(v589);
                      if (HIDWORD(v589) == DWORD2(v589))
                      {
                        WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>((uint64_t)&v589, (unint64_t)&v586);
                      }
                      else
                      {
                        *(_QWORD *)(v589 + 8 * HIDWORD(v589)) = v358;
                        HIDWORD(v589) = v530 + 1;
                      }
                      v364 = v446;
                    }
                    v374 = *(_DWORD *)&v591[20];
                  }
                  while (*(_DWORD *)&v591[20]);
                  v375 = (WTF *)v589;
                  v583 = (WTF *)&v585;
                  LODWORD(v584) = 1;
                  v360 = &v590;
                  if ((uint64_t *)v589 != &v590)
                  {
                    *(_QWORD *)&v589 = &v590;
                    v583 = v375;
                    LODWORD(v376) = HIDWORD(v589);
                    LODWORD(v584) = DWORD2(v589);
                    goto LABEL_711;
                  }
                  v376 = HIDWORD(v589);
                  goto LABEL_710;
                }
              }
              else
              {
                *(_QWORD *)&v589 = &v590;
                *((_QWORD *)&v589 + 1) = 1;
              }
              v376 = 0;
              v583 = (WTF *)&v585;
              LODWORD(v584) = 1;
LABEL_710:
              memcpy(&v585, &v590, 8 * v376);
LABEL_711:
              HIDWORD(v584) = v376;
LABEL_712:
              v484 = *(_QWORD *)&v591[8];
              if (&v591[24] != *(_BYTE **)&v591[8] && *(_QWORD *)&v591[8])
              {
                *(_QWORD *)&v591[8] = 0;
                *(_DWORD *)&v591[16] = 0;
                WTF::fastFree(v484, v360, v105, v106, v107, v108, v109, v110);
              }
              if ((*(_QWORD *)v591 & 0x8000000000000000) == 0)
                WTF::fastFree(2 * *(_QWORD *)v591, v360, v105, v106, v107, v108, v109, v110);
              goto LABEL_717;
            }
            v579 = &v581;
            v580 = &v582;
            v587 = v134;
            v168 = v565;
            if (*((unsigned __int8 *)v565 + 12) - 63 >= 0x10)
              v168 = 0;
            if (*((_DWORD *)v168 + 13) != *((_DWORD *)v168 + 14))
              goto LABEL_161;
            v543 = (void *)v133;
            if (v169)
            {
              *(_QWORD *)v591 = v169;
              WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v583, (uint64_t *)v591, 1uLL);
            }
            else
            {
              v170 = WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)v557, &v587);
              v172 = v543;
              if (v170)
                goto LABEL_161;
              *(_QWORD *)v591 = 0x8000000000000000;
              *(_QWORD *)&v591[8] = &v591[24];
              *(_QWORD *)&v591[16] = 16;
              v173 = *((unsigned int *)v563 + 9);
              if ((_DWORD)v173)
              {
                v174 = (unsigned int **)*((_QWORD *)v563 + 3);
                v175 = 8 * v173;
                do
                {
                  v176 = *v174;
                  *(_QWORD *)&v589 = *v174;
                  v177 = *(_QWORD *)v591;
                  if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                    v178 = 63;
                  else
                    v178 = *(_QWORD *)(2 * *(_QWORD *)v591);
                  v179 = *v176;
                  if (v178 <= v179)
                  {
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v179 + 1, 0);
                    v172 = v543;
                    v177 = *(_QWORD *)v591;
                  }
                  v180 = 2 * v177 + 8;
                  v181 = v177 < 0;
                  v182 = v591;
                  if (!v181)
                    v182 = (_BYTE *)v180;
                  v183 = (v179 >> 3) & 0x1FFFFFF8;
                  v184 = *(_QWORD *)&v182[v183];
                  *(_QWORD *)&v182[v183] = v184 | (1 << v179);
                  if ((v184 & (1 << v179)) == 0)
                  {
                    v185 = *(_DWORD *)&v591[20];
                    if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                    {
                      v444 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v589);
                      v172 = v543;
                      v185 = *(_DWORD *)&v591[20];
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v444;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v176;
                    }
                    *(_DWORD *)&v591[20] = v185 + 1;
                  }
                  ++v174;
                  v175 -= 8;
                }
                while (v175);
                v194 = *(_DWORD *)&v591[20];
                *(_QWORD *)&v589 = &v590;
                *((_QWORD *)&v589 + 1) = 1;
                if (*(_DWORD *)&v591[20])
                {
                  v195 = ((unint64_t)v172 + ~((_QWORD)v172 << 32)) ^ (((unint64_t)v172
                                                                            + ~((_QWORD)v172 << 32)) >> 22);
                  v196 = 9 * ((v195 + ~(v195 << 13)) ^ ((v195 + ~(v195 << 13)) >> 8));
                  v197 = (v196 ^ (v196 >> 15)) + ~((v196 ^ (v196 >> 15)) << 27);
                  v198 = (v197 >> 31) ^ v197;
                  while (1)
                  {
                    v199 = *(unsigned int **)(*(_QWORD *)&v591[8] + 8 * v194 - 8);
                    *(_DWORD *)&v591[20] = v194 - 1;
                    if (!v199)
                    {
LABEL_491:
                      v338 = (WTF *)v589;
                      v583 = (WTF *)&v585;
                      LODWORD(v584) = 1;
                      if ((uint64_t *)v589 != &v590)
                      {
                        *(_QWORD *)&v589 = &v590;
                        v583 = v338;
                        LODWORD(v314) = HIDWORD(v589);
                        LODWORD(v584) = DWORD2(v589);
                        goto LABEL_449;
                      }
                      v314 = HIDWORD(v589);
                      goto LABEL_448;
                    }
                    v200 = v551;
                    v201 = *v199;
                    v586 = 0;
                    v202 = *((_QWORD *)v551 + 26 * v201 + 24);
                    if (!v202)
                      break;
                    v203 = *(_DWORD *)(v202 - 8);
                    v204 = v203 & v198;
                    v205 = *(void **)(v202 + 32 * v204);
                    if (v205 != v172)
                    {
                      v206 = 1;
                      while (v205)
                      {
                        v204 = ((_DWORD)v204 + v206) & v203;
                        v205 = *(void **)(v202 + 32 * v204);
                        ++v206;
                        if (v205 == v172)
                          goto LABEL_318;
                      }
                      v204 = *(unsigned int *)(v202 - 4);
                    }
LABEL_318:
                    if (v204 == *(_DWORD *)(v202 - 4))
                      break;
                    v226 = v202 + 32 * v204;
                    v227 = *(unsigned int *)(v226 + 20);
                    if (!(_DWORD)v227)
                      break;
                    v228 = *(JSC::B3::MemoryValue ***)(v226 + 8);
                    v229 = 8 * v227;
                    v230 = v579;
                    v231 = v580;
                    while (1)
                    {
                      v232 = *v228;
                      v233 = *((unsigned __int8 *)*v228 + 12);
                      v234 = *v228 && (v233 - 79) >= 0xFFFFFFF0;
                      if (v234 && *((_DWORD *)v232 + 10) == *v230)
                      {
                        if (v233 == 70)
                        {
                          v542 = v198;
                          v541 = v231;
                          v335 = (_QWORD *)JSC::B3::MemoryValue::child(*v228, 0);
                          v231 = v541;
                          v198 = v542;
                          v172 = v543;
                          if (*v335 == *v541)
                            break;
                          v233 = *((unsigned __int8 *)v232 + 12);
                        }
                        if (v233 == 67 && (JSC::B3::MemoryValue *)*v231 == v232)
                          break;
                      }
                      ++v228;
                      v229 -= 8;
                      if (!v229)
                        goto LABEL_319;
                    }
                    v586 = v232;
                    if (v232 == v565)
                      goto LABEL_320;
                    v437 = HIDWORD(v589);
                    if (HIDWORD(v589) == DWORD2(v589))
                    {
                      v486 = v198;
                      v487 = (_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v589, HIDWORD(v589) + 1, (unint64_t)&v586);
                      v198 = v486;
                      v172 = v543;
                      v437 = HIDWORD(v589);
                      *(_QWORD *)(v589 + 8 * HIDWORD(v589)) = *v487;
                    }
                    else
                    {
                      *(_QWORD *)(v589 + 8 * HIDWORD(v589)) = v232;
                    }
                    HIDWORD(v589) = v437 + 1;
LABEL_339:
                    v194 = *(_DWORD *)&v591[20];
                    if (!*(_DWORD *)&v591[20])
                      goto LABEL_491;
                  }
LABEL_319:
                  v586 = 0;
LABEL_320:
                  if ((_DWORD)v587 != HIDWORD(v587))
                  {
                    v207 = (char *)v200 + 208 * v201;
                    v208 = v207 + 88;
                    v210 = v207[168];
                    v209 = v207 + 168;
                    v211 = *((unsigned int *)v207 + 25);
                    if (!v210)
                    {
                      v235 = v198;
                      if (v211)
                      {
                        std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v208, (int8x16_t *)(*(_QWORD *)v208 + 8 * v211), (uint64_t)&v588, 126 - 2 * __clz(v211), 1);
                        v236 = *((unsigned int *)v208 + 3);
                        if ((_DWORD)v236 == 1)
                        {
                          v211 = *((unsigned int *)v208 + 3);
                          v172 = v543;
                          v198 = v235;
                        }
                        else
                        {
                          if (!*((_DWORD *)v208 + 3))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197F8AA58);
                          }
                          v239 = *(int8x16_t **)v208;
                          v240 = 1;
                          v211 = 1;
                          v172 = v543;
                          v198 = v235;
                          do
                          {
                            v237 = *(_QWORD *)(*(_QWORD *)v208 + 8 * v240);
                            v238 = v239->u32[1];
                            if (v238 < HIDWORD(v237))
                            {
                              if (v238 >= v237)
                              {
                                v241 = HIDWORD(v237);
                                v242 = v239->u32[0];
                                if (v242 == v241)
                                {
                                  v241 = 0;
                                  v242 = 0;
                                }
                                v239->i64[0] = v242 | (v241 << 32);
                              }
                              else
                              {
                                if (v236 <= v211)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x197F8AA50);
                                }
                                v239 = (int8x16_t *)(*(_QWORD *)v208 + 8 * v211++);
                                v239->i64[0] = v237;
                              }
                            }
                            ++v240;
                            v236 = *((unsigned int *)v208 + 3);
                          }
                          while (v240 < v236);
                        }
                        *((_DWORD *)v208 + 3) = v211;
                      }
                      else
                      {
                        v172 = v543;
                      }
                      *v209 = 1;
                    }
                    if (v211)
                    {
                      v223 = (_DWORD *)(*(_QWORD *)v208 + 4);
                      v224 = 0xFFFFFFFFLL;
                      while (HIDWORD(v587) <= *(v223 - 1) || *v223 <= v587)
                      {
                        v223 += 2;
                        --v224;
                        if (!--v211)
                          goto LABEL_323;
                      }
                      if (v224)
                      {
LABEL_378:
                        v583 = (WTF *)&v585;
                        v584 = 1;
                        v243 = v589;
                        if (&v590 != (uint64_t *)v589 && (_QWORD)v589 != 0)
                        {
                          *(_QWORD *)&v589 = 0;
                          DWORD2(v589) = 0;
                          WTF::fastFree(v243, v171, v105, v106, v107, v108, v109, v110);
                        }
                        goto LABEL_383;
                      }
                    }
                  }
LABEL_323:
                  v212 = v199[9];
                  if (!(_DWORD)v212)
                    goto LABEL_378;
                  v213 = (unsigned int **)*((_QWORD *)v199 + 3);
                  v214 = 8 * v212;
                  do
                  {
                    v215 = *v213;
                    v588 = *v213;
                    v216 = *(_QWORD *)v591;
                    if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                      v217 = 63;
                    else
                      v217 = *(_QWORD *)(2 * *(_QWORD *)v591);
                    v218 = *v215;
                    if (v217 <= v218)
                    {
                      v321 = v198;
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v218 + 1, 0);
                      v198 = v321;
                      v172 = v543;
                      v216 = *(_QWORD *)v591;
                    }
                    if (v216 >= 0)
                      v219 = (_BYTE *)(2 * v216 + 8);
                    else
                      v219 = v591;
                    v220 = (v218 >> 3) & 0x1FFFFFF8;
                    v221 = *(_QWORD *)&v219[v220];
                    *(_QWORD *)&v219[v220] = v221 | (1 << v218);
                    if ((v221 & (1 << v218)) == 0)
                    {
                      v222 = *(_DWORD *)&v591[20];
                      if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                      {
                        v336 = v198;
                        v337 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v588);
                        v198 = v336;
                        v172 = v543;
                        v222 = *(_DWORD *)&v591[20];
                        *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v337;
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v215;
                      }
                      *(_DWORD *)&v591[20] = v222 + 1;
                    }
                    ++v213;
                    v214 -= 8;
                  }
                  while (v214);
                  goto LABEL_339;
                }
              }
              else
              {
                *(_QWORD *)&v589 = &v590;
                *((_QWORD *)&v589 + 1) = 1;
              }
              v314 = 0;
              v583 = (WTF *)&v585;
              LODWORD(v584) = 1;
LABEL_448:
              memcpy(&v585, &v590, 8 * v314);
LABEL_449:
              HIDWORD(v584) = v314;
LABEL_383:
              v245 = *(_QWORD *)&v591[8];
              if (&v591[24] != *(_BYTE **)&v591[8] && *(_QWORD *)&v591[8])
              {
                *(_QWORD *)&v591[8] = 0;
                *(_DWORD *)&v591[16] = 0;
                WTF::fastFree(v245, v171, v105, v106, v107, v108, v109, v110);
              }
              if ((*(_QWORD *)v591 & 0x8000000000000000) == 0)
                WTF::fastFree(2 * *(_QWORD *)v591, v171, v105, v106, v107, v108, v109, v110);
            }
            v246 = HIDWORD(v584);
            if (HIDWORD(v584))
            {
              JSC::B3::Value::replaceWithNop(v565);
              v570[184] = 1;
            }
            v247 = v583;
            if (&v585 != (uint64_t *)v583 && v583)
            {
              v583 = 0;
              LODWORD(v584) = 0;
              WTF::fastFree((unint64_t)v247, v171, v105, v106, v107, v108, v109, v110);
            }
            if (v246)
              goto LABEL_180;
            goto LABEL_161;
        }
      }
      v583 = v113;
      v323 = *((_QWORD *)v113 + 6);
      v579 = (int *)v323;
      v324 = ~(v323 << 32);
      if (v562)
      {
        v325 = *(_DWORD *)(v562 - 8);
        v326 = ((v324 + v323) ^ ((unint64_t)(v324 + v323) >> 22))
             + ~(((v324 + v323) ^ ((unint64_t)(v324 + v323) >> 22)) << 13);
        v327 = (9 * (v326 ^ (v326 >> 8))) ^ ((9 * (v326 ^ (v326 >> 8))) >> 15);
        v328 = v325 & (((v327 + ~(v327 << 27)) >> 31) ^ ((_DWORD)v327 + ~((_DWORD)v327 << 27)));
        v329 = *(_QWORD *)(v562 + 16 * v328);
        if (v329 == v323)
        {
LABEL_478:
          v330 = *(_QWORD *)(v562 + 16 * v328 + 8);
          if (v330)
          {
            v439 = *((_DWORD *)v113 + 4);
            if (v439 != *(_DWORD *)(v330 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197F8A67CLL);
            }
            v440 = *((_QWORD *)v113 + 4);
            v441 = *((_DWORD *)v113 + 2);
            (**(void (***)(JSC::B3::Value *))v113)(v113);
            *(_QWORD *)v113 = off_1E357F5F0;
            if (v439)
            {
              *((_QWORD *)v113 + 5) = v330;
              v442 = 1;
            }
            else
            {
              v442 = 0;
            }
            *((_WORD *)v113 + 6) = v442;
            *((_DWORD *)v113 + 4) = v439;
            *((_BYTE *)v113 + 20) = v442;
            *((_DWORD *)v113 + 2) = v441;
            *((_QWORD *)v113 + 4) = v440;
            goto LABEL_498;
          }
        }
        else
        {
          v343 = 1;
          while (v329)
          {
            v328 = ((_DWORD)v328 + v343) & v325;
            v329 = *(_QWORD *)(v562 + 16 * v328);
            ++v343;
            if (v329 == v323)
              goto LABEL_478;
          }
        }
      }
      if (HIBYTE(v559))
        goto LABEL_486;
      v331 = v549[1];
      v193 = (unsigned int *)v331[4 * *(unsigned int *)v563 + 2];
      if (!v193)
        goto LABEL_486;
      v190 = 0;
      v191 = 0;
      v332 = ((v324 + v323) ^ ((unint64_t)(v324 + v323) >> 22))
           + ~(((v324 + v323) ^ ((unint64_t)(v324 + v323) >> 22)) << 13);
      v333 = (9 * (v332 ^ (v332 >> 8))) ^ ((9 * (v332 ^ (v332 >> 8))) >> 15);
      v334 = ((v333 + ~(v333 << 27)) >> 31) ^ (v333 + ~((_DWORD)v333 << 27));
      do
      {
        v186 = *v193;
        if (v190)
          goto LABEL_306;
        v187 = *((_QWORD *)v551 + 26 * v186 + 25);
        if (!v187)
          goto LABEL_305;
        v188 = *(_DWORD *)(v187 - 8);
        v189 = v188 & v334;
        i = *(_QWORD *)(v187 + 16 * v189);
        if (i != v323)
        {
          v192 = 1;
          while (i)
          {
            v189 = ((_DWORD)v189 + v192) & v188;
            i = *(_QWORD *)(v187 + 16 * v189);
            ++v192;
            if (i == v323)
              goto LABEL_298;
          }
LABEL_305:
          v190 = 0;
          goto LABEL_306;
        }
LABEL_298:
        v190 = *(_QWORD *)(v187 + 16 * v189 + 8);
        if (v190)
          v191 = v193;
LABEL_306:
        v193 = (unsigned int *)v331[4 * v186 + 2];
      }
      while (v193);
      if (v190)
      {
        *(_QWORD *)v591 = 0x8000000000000000;
        *(_QWORD *)&v591[8] = &v591[24];
        *(_QWORD *)&v591[16] = 16;
        v438 = *((unsigned int *)v563 + 9);
        if ((_DWORD)v438)
        {
          v353 = (unsigned int **)*((_QWORD *)v563 + 3);
          v354 = 8 * v438;
          do
          {
            v344 = *v353;
            *(_QWORD *)&v589 = *v353;
            v345 = *(_QWORD *)v591;
            if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
              v346 = 63;
            else
              v346 = *(_QWORD *)(2 * *(_QWORD *)v591);
            v347 = *v344;
            if (v346 <= v347)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v347 + 1, 0);
              v345 = *(_QWORD *)v591;
            }
            v348 = 2 * v345 + 8;
            v181 = v345 < 0;
            v349 = v591;
            if (!v181)
              v349 = (_BYTE *)v348;
            v350 = (v347 >> 3) & 0x1FFFFFF8;
            v351 = *(_QWORD *)&v349[v350];
            *(_QWORD *)&v349[v350] = v351 | (1 << v347);
            if ((v351 & (1 << v347)) == 0)
            {
              v352 = *(_DWORD *)&v591[20];
              if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
              {
                v510 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v589);
                v352 = *(_DWORD *)&v591[20];
                *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v510;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v344;
              }
              *(_DWORD *)&v591[20] = v352 + 1;
            }
            ++v353;
            v354 -= 8;
          }
          while (v354);
          v250 = *(_DWORD *)&v591[20];
          while (v250)
          {
            v248 = *(_BYTE **)&v591[8];
            v249 = *(unsigned int **)(*(_QWORD *)&v591[8] + 8 * v250-- - 8);
            *(_DWORD *)&v591[20] = v250;
            if (!v249)
              break;
            if (v249 != v191)
            {
              if (*((_BYTE *)v551 + 208 * *v249 + 177))
                goto LABEL_667;
              v251 = v249[9];
              if ((_DWORD)v251)
              {
                v252 = (unsigned int **)*((_QWORD *)v249 + 3);
                v253 = 8 * v251;
                do
                {
                  v254 = *v252;
                  *(_QWORD *)&v589 = *v252;
                  v255 = *(_QWORD *)v591;
                  if ((*(_QWORD *)v591 & 0x8000000000000000) != 0)
                    v256 = 63;
                  else
                    v256 = *(_QWORD *)(2 * *(_QWORD *)v591);
                  v257 = *v254;
                  if (v256 <= v257)
                  {
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v591, v257 + 1, 0);
                    v255 = *(_QWORD *)v591;
                  }
                  v258 = 2 * v255 + 8;
                  v181 = v255 < 0;
                  v259 = v591;
                  if (!v181)
                    v259 = (_BYTE *)v258;
                  v260 = (v257 >> 3) & 0x1FFFFFF8;
                  v261 = *(_QWORD *)&v259[v260];
                  *(_QWORD *)&v259[v260] = v261 | (1 << v257);
                  if ((v261 & (1 << v257)) == 0)
                  {
                    v262 = *(_DWORD *)&v591[20];
                    if (*(_DWORD *)&v591[20] == *(_DWORD *)&v591[16])
                    {
                      v263 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v591[8], *(unsigned int *)&v591[20] + 1, (unint64_t)&v589);
                      v262 = *(_DWORD *)&v591[20];
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = *v263;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)&v591[8] + 8 * *(unsigned int *)&v591[20]) = v254;
                    }
                    *(_DWORD *)&v591[20] = v262 + 1;
                  }
                  ++v252;
                  v253 -= 8;
                }
                while (v253);
                v250 = *(_DWORD *)&v591[20];
              }
            }
          }
        }
        v460 = *((_DWORD *)v113 + 4);
        if (v460 != *(_DWORD *)(v190 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x197F8A69CLL);
        }
        v461 = *((_QWORD *)v113 + 4);
        v462 = *((_DWORD *)v113 + 2);
        (**(void (***)(JSC::B3::Value *))v113)(v113);
        *(_QWORD *)v113 = off_1E357F5F0;
        if (v460)
        {
          *((_QWORD *)v113 + 5) = v190;
          v463 = 1;
        }
        else
        {
          v463 = 0;
        }
        *((_WORD *)v113 + 6) = v463;
        *((_DWORD *)v113 + 4) = v460;
        *((_BYTE *)v113 + 20) = v463;
        *((_DWORD *)v113 + 2) = v462;
        *((_QWORD *)v113 + 4) = v461;
        v570[184] = 1;
        v248 = *(_BYTE **)&v591[8];
LABEL_667:
        if (&v591[24] != v248 && v248)
        {
          *(_QWORD *)&v591[8] = 0;
          *(_DWORD *)&v591[16] = 0;
          WTF::fastFree((unint64_t)v248, (void *)i, v105, v106, v107, v108, v109, v110);
        }
        if ((*(_QWORD *)v591 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * *(_QWORD *)v591, (void *)i, v105, v106, v107, v108, v109, v110);
      }
LABEL_486:
      WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::WasmAddressValue *&>(v591, &v562, (uint64_t *)&v579, &v583, v107, v108, v109, v110);
LABEL_180:
      v112 = v564 + 1;
      v564 = v112;
      i = (uint64_t)v563;
      if (*((_DWORD *)v563 + 5) <= v112)
      {
LABEL_414:
        JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v567, (JSC::B3::BasicBlock *)i);
        v264 = (char *)v551 + 208 * *(unsigned int *)v563;
        WTF::RangeSet<WTF::Range<unsigned int>>::operator=(v264, &v554, v265, v266, v267, v268, v269, v270);
        WTF::RangeSet<WTF::Range<unsigned int>>::operator=((_DWORD *)v264 + 22, v557, v271, v272, v273, v274, v275, v276);
        *((_WORD *)v264 + 88) = v559;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::operator=((uint64_t *)v264 + 23, &v560, v277, v278, v279, v280, v281, v282);
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::operator=((uint64_t *)v264 + 24, &v561, v283, v284, v285, v286, v287, v288);
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)v591, &v562, v289, v290, v291, v292, v293, v294);
        v295 = *((_QWORD *)v264 + 25);
        *((_QWORD *)v264 + 25) = *(_QWORD *)v591;
        *(_QWORD *)v591 = v295;
        if (v295)
          WTF::fastFree(v295 - 16, v77, v78, v79, v80, v81, v82, v83);
        v84 = v545;
        if (!(_DWORD)v545)
          goto LABEL_545;
        goto LABEL_122;
      }
    }
    *(_QWORD *)&v589 = &v590;
    *((_QWORD *)&v589 + 1) = 1;
    v137 = v550;
    if (v550
      || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(&v550, 8u, 0), (v137 = v550) != 0))
    {
      v138 = *(_DWORD *)(v137 - 8);
    }
    else
    {
      v138 = 0;
    }
    v139 = 0;
    v140 = 9
         * ((*(_DWORD *)&v591[8] + ~(*(_DWORD *)&v591[8] << 15)) ^ ((*(_DWORD *)&v591[8]
                                                                                 + ~(*(_DWORD *)&v591[8] << 15)) >> 10));
    v141 = (v140 ^ (v140 >> 6)) + ~((v140 ^ (v140 >> 6)) << 11);
    v142 = *(_DWORD *)&v591[4]
         + v591[1]
         + ((v591[2] & 1) << 16)
         + ((v591[2] << 6) & 0x80)
         + *(_DWORD *)&v591[12]
         + (((v591[2] >> 2) & 1) << 24)
         + (((v591[2] >> 3) & 1) << 13)
         + *(_DWORD *)&v591[16]
         + *(_DWORD *)&v591[20]
         + (v141 ^ HIWORD(v141));
    for (i = 1; ; i = (i + 1))
    {
      v105 = v142 & v138;
      v143 = (unsigned __int8 *)(v137 + 48 * v105);
      v107 = *v143;
      v108 = v143[1];
      v144 = !*v143 && (_DWORD)v108 == 159;
      v106 = v144;
      if (v144)
      {
        v145 = (uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v143 + 4), *(int32x4_t *)(v143 + 4)));
        v145.i16[0] = vmaxv_u16(v145);
        v109 = v145.u32[0];
        if ((v145.i8[0] & 1) == 0)
        {
          v109 = v143[2] & 0xF;
          if ((v143[2] & 0xF) == 0)
          {
            v109 = *((unsigned int *)v143 + 5);
            if (!(_DWORD)v109)
              break;
          }
        }
      }
      if ((_DWORD)v107 == v591[0]
        && (_DWORD)v108 == v591[1]
        && ((v143[2] ^ v591[2]) & 0xF) == 0
        && *(_OWORD *)(v143 + 4) == *(_OWORD *)&v591[4])
      {
        v107 = *((unsigned int *)v143 + 5);
        if ((_DWORD)v107 == *(_DWORD *)&v591[20])
          goto LABEL_237;
      }
      if ((_DWORD)v106
        && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v143 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (v143[2] & 0xF) == 0&& !*((_DWORD *)v143 + 5))
      {
        v139 = (unsigned __int8 *)(v137 + 48 * v105);
      }
      v142 = i + v105;
    }
    if (v139)
    {
      *(_WORD *)v139 = -24832;
      v139[2] &= 0xF0u;
      *((_DWORD *)v139 + 5) = 0;
      *(_QWORD *)(v139 + 12) = 0;
      *(_QWORD *)(v139 + 4) = 0;
      v147 = (unint64_t)(v139 + 40);
      *((_QWORD *)v139 + 3) = v139 + 40;
      *((_QWORD *)v139 + 4) = 1;
      --*(_DWORD *)(v550 - 16);
      v143 = v139;
    }
    else
    {
      v147 = *(_QWORD *)(v137 + 48 * v105 + 24);
    }
    i = (uint64_t)&v590;
    v148 = *(_OWORD *)v591;
    *((_QWORD *)v143 + 2) = *(_QWORD *)&v591[16];
    *(_OWORD *)v143 = v148;
    if ((unsigned __int8 *)v147 != v143 + 40)
    {
      if (v147)
      {
        *((_QWORD *)v143 + 3) = 0;
        *((_DWORD *)v143 + 8) = 0;
        WTF::fastFree(v147, &v590, v105, v106, v107, v108, v109, v110);
      }
      *((_QWORD *)v143 + 3) = v143 + 40;
      i = (uint64_t)&v590;
    }
    v149 = v589;
    if ((uint64_t *)v589 == &v590)
    {
      v150 = HIDWORD(v589);
      memcpy(v143 + 40, &v590, 8 * HIDWORD(v589));
      v151 = DWORD2(v589);
    }
    else
    {
      *(_QWORD *)&v589 = &v590;
      *((_QWORD *)v143 + 3) = v149;
      v151 = DWORD2(v589);
      v150 = HIDWORD(v589);
      DWORD2(v589) = 1;
    }
    HIDWORD(v589) = 0;
    *((_DWORD *)v143 + 8) = v151;
    *((_DWORD *)v143 + 9) = v150;
    if (v550)
      v152 = *(_DWORD *)(v550 - 12) + 1;
    else
      v152 = 1;
    *(_DWORD *)(v550 - 12) = v152;
    if (v550)
      v153 = *(_DWORD *)(v550 - 12);
    else
      v153 = 0;
    v154 = (*(_DWORD *)(v550 - 16) + v153);
    v155 = *(unsigned int *)(v550 - 4);
    if (v155 > 0x400)
    {
      if (v155 > 2 * v154)
        goto LABEL_237;
    }
    else
    {
      if (3 * v155 > 4 * v154)
        goto LABEL_237;
      if (!(_DWORD)v155)
      {
        v322 = 8;
LABEL_475:
        v143 = (unsigned __int8 *)WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(&v550, v322, (__int128 *)v143);
LABEL_237:
        v156 = v589;
        if (&v590 != (uint64_t *)v589 && (_QWORD)v589)
        {
          *(_QWORD *)&v589 = 0;
          DWORD2(v589) = 0;
          WTF::fastFree(v156, (void *)i, v105, v106, v107, v108, v109, v110);
        }
        v157 = *((unsigned int *)v143 + 9);
        if ((_DWORD)v157)
        {
          v304 = v583;
          v305 = v121[1];
          v306 = 8 * v157;
          v307 = (uint64_t *)*((_QWORD *)v143 + 3);
          while (1)
          {
            v308 = *v307;
            v309 = *(unsigned int **)(*v307 + 32);
            if (v309)
            {
              v310 = *v309;
              if ((_DWORD)v310 != -1)
              {
                v311 = (unsigned int *)*((_QWORD *)v583 + 4);
                if (v309 == v311)
                  break;
                v312 = &v305[4 * *v311];
                v313 = &v305[4 * v310];
                if (*((_DWORD *)v312 + 6) > *((_DWORD *)v313 + 6))
                {
                  v309 = (unsigned int *)*((_QWORD *)v583 + 4);
                  if (*((_DWORD *)v312 + 7) < *((_DWORD *)v313 + 7))
                    break;
                }
              }
            }
            ++v307;
            v306 -= 8;
            if (!v306)
              goto LABEL_239;
          }
          v340 = *((_DWORD *)v583 + 4);
          if (v340 != *(_DWORD *)(v308 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x197F8A4D4);
          }
          v341 = *((_DWORD *)v583 + 2);
          (**(void (***)(WTF *))v583)(v583);
          *(_QWORD *)v304 = off_1E357F5F0;
          if (v340)
          {
            *((_QWORD *)v304 + 5) = v308;
            v342 = 1;
          }
          else
          {
            v342 = 0;
          }
          *((_WORD *)v304 + 6) = v342;
          *((_DWORD *)v304 + 4) = v340;
          *((_BYTE *)v304 + 20) = v342;
          *((_DWORD *)v304 + 2) = v341;
          *((_QWORD *)v304 + 4) = v309;
LABEL_498:
          v570[184] = 1;
          goto LABEL_180;
        }
LABEL_239:
        if ((_DWORD)v157 == *((_DWORD *)v143 + 8))
        {
          v339 = (_QWORD *)WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v143 + 24), v157 + 1, (unint64_t)&v583);
          v157 = *((unsigned int *)v143 + 9);
          *(_QWORD *)(*((_QWORD *)v143 + 3) + 8 * v157) = *v339;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)v143 + 3) + 8 * v157) = v583;
        }
        *((_DWORD *)v143 + 9) = v157 + 1;
        goto LABEL_242;
      }
    }
    v322 = (_DWORD)v155 << (6 * *(_DWORD *)(v550 - 12) >= (2 * v155));
    goto LABEL_475;
  }
LABEL_545:
  v377 = v548;
  v378 = *((unsigned int *)v548 + 15);
  if ((_DWORD)v378)
  {
    v379 = 0;
    v380 = &v568;
    while (!*(_QWORD *)(*((_QWORD *)v548 + 6) + 8 * v379))
    {
      if (v378 == ++v379)
        goto LABEL_549;
    }
    if ((_DWORD)v378 != (_DWORD)v379)
    {
      LODWORD(v419) = *((_DWORD *)v548 + 15);
      do
      {
        if (v419 <= v379)
        {
          __break(0xC471u);
          JUMPOUT(0x197F8AA98);
        }
        v420 = *(_QWORD *)(*((_QWORD *)v377 + 6) + 8 * v379);
        v421 = *(unsigned int *)(v420 + 20);
        if ((_DWORD)v421)
        {
          v422 = v566;
          if (v566)
          {
            v423 = 0;
            while (1)
            {
              if (v422)
              {
                v424 = *(_DWORD *)(v422 - 8);
                v425 = *(_QWORD *)(*(_QWORD *)(v420 + 8) + 8 * v423);
                v426 = (~(v425 << 32) + v425) ^ ((unint64_t)(~(v425 << 32) + v425) >> 22);
                v427 = 9 * ((v426 + ~(v426 << 13)) ^ ((v426 + ~(v426 << 13)) >> 8));
                v428 = (v427 ^ (v427 >> 15)) + ~((v427 ^ (v427 >> 15)) << 27);
                v429 = v424 & ((v428 >> 31) ^ v428);
                v430 = (uint64_t *)(v422 + 24 * v429);
                v431 = *v430;
                if (*v430 != v425)
                {
                  v432 = 1;
                  while (v431)
                  {
                    v429 = (v429 + v432) & v424;
                    v430 = (uint64_t *)(v422 + 24 * v429);
                    v431 = *v430;
                    ++v432;
                    if (*v430 == v425)
                      goto LABEL_613;
                  }
                  v430 = (uint64_t *)(v422 + 24 * *(unsigned int *)(v422 - 4));
                }
LABEL_613:
                if (v430 != (uint64_t *)(v422 + 24 * *(unsigned int *)(v422 - 4)))
                {
                  v443 = *((unsigned int *)v430 + 5);
                  if ((_DWORD)v443)
                  {
                    __srca = v380;
                    v435 = (uint64_t *)v430[1];
                    v434 = HIDWORD(v569);
                    v436 = 8 * v443;
                    do
                    {
                      v433 = *v435;
                      *(_QWORD *)v591 = v423 + 1;
                      *(_QWORD *)&v591[8] = v433;
                      if (v434 == (_DWORD)v569)
                      {
                        v509 = (_OWORD *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)__srca, (void *)(v434 + 1), (unint64_t)v591, v79, v80, v81, v82, v83);
                        *((_OWORD *)v568 + HIDWORD(v569)) = *v509;
                      }
                      else
                      {
                        *((_OWORD *)v568 + v434) = *(_OWORD *)v591;
                      }
                      v434 = ++HIDWORD(v569);
                      ++v435;
                      v436 -= 8;
                    }
                    while (v436);
                    v421 = *(unsigned int *)(v420 + 20);
                    v380 = __srca;
                  }
                }
              }
              if (++v423 >= v421)
                break;
              v422 = v566;
            }
          }
        }
        JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v567, (JSC::B3::BasicBlock *)v420);
        v379 = (v379 + 1);
        v419 = *((unsigned int *)v377 + 15);
        if (v419 > v379)
        {
          while (!*(_QWORD *)(*((_QWORD *)v377 + 6) + 8 * v379))
          {
            if (v419 == ++v379)
            {
              LODWORD(v379) = *((_DWORD *)v377 + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v378 != (_DWORD)v379);
    }
  }
LABEL_549:
  v381 = v570[184];
  v382 = v574;
  if (v574)
  {
    v574 = 0;
    v575 = 0;
    WTF::fastFree((unint64_t)v382, v77, v78, v79, v80, v81, v82, v83);
  }
  v383 = v568;
  if (v570 != (_BYTE *)v568 && v568 != 0)
  {
    v568 = 0;
    LODWORD(v569) = 0;
    WTF::fastFree((unint64_t)v383, v77, v78, v79, v80, v81, v82, v83);
  }
  v385 = v566;
  if (v566)
  {
    v464 = *(unsigned int *)(v566 - 4);
    if ((_DWORD)v464)
    {
      v465 = v566 + 8;
      do
      {
        if (*(_QWORD *)(v465 - 8) != -1)
        {
          v466 = *(_QWORD *)v465;
          if (*(_QWORD *)v465)
          {
            *(_QWORD *)v465 = 0;
            *(_DWORD *)(v465 + 8) = 0;
            WTF::fastFree(v466, v77, v78, v79, v80, v81, v82, v83);
          }
        }
        v465 += 24;
        --v464;
      }
      while (v464);
    }
    WTF::fastFree(v385 - 16, v77, v78, v79, v80, v81, v82, v83);
  }
  v393 = v551;
  if (v553)
  {
    v394 = (WTF *)((char *)v551 + 208 * v553);
    do
    {
      v395 = *((_QWORD *)v393 + 25);
      if (v395)
        WTF::fastFree(v395 - 16, v386, v387, v388, v389, v390, v391, v392);
      v396 = *((_QWORD *)v393 + 24);
      if (v396)
      {
        v401 = *(unsigned int *)(v396 - 4);
        if ((_DWORD)v401)
        {
          v402 = v396 + 24;
          do
          {
            if (*(_QWORD *)(v402 - 24) != -1)
            {
              v403 = *(_QWORD *)(v402 - 16);
              if (v402 != v403 && v403 != 0)
              {
                *(_QWORD *)(v402 - 16) = 0;
                *(_DWORD *)(v402 - 8) = 0;
                WTF::fastFree(v403, v386, v387, v388, v389, v390, v391, v392);
              }
            }
            v402 += 32;
            --v401;
          }
          while (v401);
        }
        WTF::fastFree(v396 - 16, v386, v387, v388, v389, v390, v391, v392);
      }
      v397 = *((_QWORD *)v393 + 23);
      if (v397)
      {
        v405 = *(unsigned int *)(v397 - 4);
        if ((_DWORD)v405)
        {
          v406 = v397 + 24;
          do
          {
            if (*(_QWORD *)(v406 - 24) != -1)
            {
              v407 = *(_QWORD *)(v406 - 16);
              if (v406 != v407 && v407 != 0)
              {
                *(_QWORD *)(v406 - 16) = 0;
                *(_DWORD *)(v406 - 8) = 0;
                WTF::fastFree(v407, v386, v387, v388, v389, v390, v391, v392);
              }
            }
            v406 += 32;
            --v405;
          }
          while (v405);
        }
        WTF::fastFree(v397 - 16, v386, v387, v388, v389, v390, v391, v392);
      }
      v398 = *((_QWORD *)v393 + 11);
      if ((WTF *)((char *)v393 + 104) != (WTF *)v398 && v398 != 0)
      {
        *((_QWORD *)v393 + 11) = 0;
        *((_DWORD *)v393 + 24) = 0;
        WTF::fastFree(v398, v386, v387, v388, v389, v390, v391, v392);
      }
      v400 = *(_QWORD *)v393;
      if ((WTF *)((char *)v393 + 16) != *(WTF **)v393 && v400)
      {
        *(_QWORD *)v393 = 0;
        *((_DWORD *)v393 + 2) = 0;
        WTF::fastFree(v400, v386, v387, v388, v389, v390, v391, v392);
      }
      v393 = (WTF *)((char *)v393 + 208);
    }
    while (v393 != v394);
    v393 = v551;
  }
  if (v393)
  {
    v551 = 0;
    v552 = 0;
    WTF::fastFree((unint64_t)v393, v386, v387, v388, v389, v390, v391, v392);
  }
  WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::~HashTable(&v550, v386, v387, v388, v389, v390, v391, v392);
  v416 = (const char *)v571[0];
  *(_QWORD *)(v571[0] + 144) = v571[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v573)
      v539 = (uint64_t **)((char *)v573 + 16);
    else
      v539 = 0;
    v548 = v416;
    v549 = v539;
  }
  v417 = v573;
  v573 = 0;
  if (v417)
  {
    if (*(_DWORD *)v417 == 1)
      WTF::fastFree((unint64_t)v417, v409, v410, v411, v412, v413, v414, v415);
    else
      --*(_DWORD *)v417;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v572);
  return v381 != 0;
}

