void JSC::DeferredWorkTimer::scheduleWorkSoon(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a1 + 35;
  if (__ldaxr(a1 + 35))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a1 + 35));
    goto LABEL_4;
  }
  if (__stxr(1u, v6))
    goto LABEL_3;
LABEL_4:
  v8 = *a3;
  *a3 = 0;
  v17 = a2;
  v18 = v8;
  WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::append<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>>((uint64_t)(a1 + 40), &v17);
  v15 = v18;
  v18 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!a1[34] && !a1[38])
    JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)a1, 0.0);
  v16 = __ldxr(v6);
  if (v16 == 1)
  {
    if (!__stlxr(0, v6))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v9, v10, v11, v12, v13, v14);
}

uint64_t JSC::DeferredWorkTimer::cancelPendingWork(JSC::DeferredWorkTimer *this, JSC::DeferredWorkTimer::TicketData *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isCancelled;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  isCancelled = JSC::DeferredWorkTimer::TicketData::isCancelled(a2);
  if ((isCancelled & 1) == 0)
  {
    v11 = *((_QWORD *)a2 + 2);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      *((_QWORD *)a2 + 2) = 0;
    }
    v12 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    if (v12)
    {
      v13 = v12 + 2;
      v14 = *v12;
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        do
        {
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
            *(_QWORD *)v13 = 0;
          }
          v13 += 2;
          v15 -= 8;
        }
        while (v15);
      }
      WTF::fastFree((unint64_t)v12, v3, v4, v5, v6, v7, v8, v9);
    }
    v16 = *((_QWORD *)a2 + 3);
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 3;
      *((_QWORD *)a2 + 3) = 0;
    }
  }
  return isCancelled ^ 1u;
}

void JSC::DeferredWorkTimer::cancelPendingWorkSafe(JSC::DeferredWorkTimer *this, JSC::JSGlobalObject *a2)
{
  unsigned __int8 *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  JSC::DeferredWorkTimer *isCancelled;
  uint64_t *v37;
  unsigned __int8 **v38;
  _QWORD v39[3];
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 **v43[2];

  v4 = (unsigned __int8 *)this + 35;
  if (__ldaxr((unsigned __int8 *)this + 35))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 35);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::begin(*((_QWORD *)a2 + 394), &v40);
  v43[0] = 0;
  memset(v39, 0, sizeof(v39));
  v43[1] = 0;
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  v20 = v42;
  for (i = v41; v20 != v41; v42 = v20)
  {
    if (v20 >= i)
      goto LABEL_23;
    WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>::Ref(v43, *(unsigned __int8 ***)(v40 + 8 * v20), v14, v15, v16, v17, v18, v19);
    isCancelled = (JSC::DeferredWorkTimer *)JSC::DeferredWorkTimer::TicketData::isCancelled((JSC::DeferredWorkTimer::TicketData *)v43[0]);
    if ((isCancelled & 1) == 0)
      JSC::DeferredWorkTimer::cancelPendingWork(isCancelled, (JSC::DeferredWorkTimer::TicketData *)v43[0]);
    v38 = v43[0];
    WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::append<std::tuple<JSC::DeferredWorkTimer::TicketData *,JSC::DeferredWorkTimer::cancelPendingWorkSafe(JSC::JSGlobalObject *)::$_0>>((uint64_t)this + 40, &v38);
    v37 = (uint64_t *)v43[0];
    v43[0] = 0;
    if (v37)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v37, v13, v14, v15, v16, v17, v18, v19);
    i = v41;
    if (v42 >= v41)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x198919054);
    }
    v20 = v42 + 1;
  }
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v13, v14, v15, v16, v17, v18, v19);
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v22, v23, v24, v25, v26, v27, v28);
  if (!*((_BYTE *)this + 34) && !*((_BYTE *)this + 38))
    JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)this, 0.0);
  v35 = __ldxr(v4);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v4))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v29, v30, v31, v32, v33, v34);
}

uint64_t WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::begin@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::values(a1, &v12);
  *a2 = v12;
  v3 = v13;
  v12 = 0;
  v13 = 0;
  a2[1] = v3;
  a2[2] = 0;
  return WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v4, v5, v6, v7, v8, v9, v10);
}

unsigned __int8 ***WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>::Ref(unsigned __int8 ***a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v12;

  v10 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  ++*((_QWORD *)v10 + 1);
  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
  *a1 = a2;
  return a1;
}

_QWORD *WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::append<std::tuple<JSC::DeferredWorkTimer::TicketData *,JSC::DeferredWorkTimer::cancelPendingWorkSafe(JSC::JSGlobalObject *)::$_0>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacityIfNeeded((uint64_t *)a1);
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * *(_QWORD *)(a1 + 8));
  *v4 = *a2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3599798;
  v4[1] = result;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 == *(unsigned int *)(a1 + 24) - 1)
    v7 = 0;
  else
    v7 = v6 + 1;
  *(_QWORD *)(a1 + 8) = v7;
  return result;
}

void JSC::DeferredWorkTimer::didResumeScriptExecutionOwner(JSC::DeferredWorkTimer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  unint64_t v12;
  int v13;

  v9 = (unsigned __int8 *)this + 35;
  if (__ldaxr((unsigned __int8 *)this + 35))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 35);
LABEL_5:
  if (!*((_BYTE *)this + 34))
  {
    v11 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 6);
    if (v11 > v12)
      v12 += *((unsigned int *)this + 16);
    if (v12 != v11)
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)this, 0.0);
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v9))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::put(JSC::JSCell *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t result;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  __n128 v41[2];

  v14 = *(_QWORD *)(a2 + 56);
  v15 = *((_QWORD *)a1 + 5);
  if (v15
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    || (v16 = *(_QWORD **)(v14 + 41952), v16[221] != a3) && v16[122] != a3 && v16[339] != a3)
  {
    if (*(JSC::JSCell **)(a5 + 8) != a1)
      return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
    if (!a3)
      return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
    v17 = *(_DWORD *)(a3 + 16);
    if ((v17 & 0x20) != 0)
      return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
    v18 = *(_BYTE **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((v17 & 4) != 0)
    {
      if ((_DWORD)v19)
      {
        v20 = *v18 - 48;
        if (v20 <= 9 && (v19 < 2 || *v18 != 48))
        {
          v36 = v19 - 1;
          v37 = v18 + 1;
          while (v36)
          {
            if (v20 > 0x19999999)
              goto LABEL_14;
            v38 = *v37 - 48;
            if (v38 > 9)
              goto LABEL_14;
            v21 = 0;
            LODWORD(v19) = 0;
            v22 = 0;
            v34 = __CFADD__(v38, 10 * v20);
            v20 = v38 + 10 * v20;
            --v36;
            ++v37;
            if (v34)
              goto LABEL_52;
          }
          goto LABEL_46;
        }
        goto LABEL_14;
      }
    }
    else if ((_DWORD)v19)
    {
      v20 = *(unsigned __int16 *)v18 - 48;
      if (v20 <= 9 && (*(_WORD *)v18 != 48 || v19 <= 1))
      {
        v31 = (unsigned __int16 *)(v18 + 2);
        v32 = v19 - 1;
        while (v32)
        {
          if (v20 > 0x19999999)
            goto LABEL_14;
          v33 = *v31 - 48;
          if (v33 > 9)
            goto LABEL_14;
          v21 = 0;
          LODWORD(v19) = 0;
          v22 = 0;
          v34 = __CFADD__(v33, 10 * v20);
          v20 = v33 + 10 * v20;
          ++v31;
          --v32;
          if (v34)
            goto LABEL_52;
        }
LABEL_46:
        v21 = 0x100000000;
        if (v20 == -1)
        {
          v21 = 0;
          LODWORD(v19) = 0;
        }
        else
        {
          LODWORD(v19) = v20;
        }
        if (v20 == -1)
          v22 = 0;
        else
          v22 = v20 & 0xFFFFFF00;
LABEL_52:
        v39 = v22 | v19;
        if ((v21 & 0x100000000) == 0 || *((_DWORD *)a1 + 8) <= v39)
          return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
        if (!v15)
          goto LABEL_58;
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v40 = v15 & 0x3FFFFFFFFLL;
          if (!(v40 + qword_1ECF4C038))
          {
LABEL_58:
            *((_QWORD *)a1 + v39 + 6) = a4;
            result = 1;
            if (a4
              && (a4 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v14 + 760) >= *((unsigned __int8 *)a1 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v14 + 192, (unint64_t)a1);
              return 1;
            }
            return result;
          }
          v15 = qword_1ECF4C038 + v40;
        }
        if (*(_BYTE *)(v15 + v39))
          return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
        goto LABEL_58;
      }
LABEL_14:
      v21 = 0;
      LODWORD(v19) = 0;
LABEL_15:
      v22 = 0;
      goto LABEL_52;
    }
    v21 = 0;
    goto LABEL_15;
  }
  JSC::DirectArguments::overrideThings(a1, a2, a9, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_17;
  v35 = *(_DWORD *)(v14 + 80);
  if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v23, v24, v25, v26, v27, v28);
  if (*(_QWORD *)(v14 + 16))
    return 0;
LABEL_17:
  v29 = *(__n128 *)(a5 + 16);
  v41[0] = *(__n128 *)a5;
  v41[1] = v29;
  return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, (uint64_t)v41, v26, v27, v28, v41[0]);
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::putByIndex(JSC::JSCell *a1, uint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_DWORD *)a1 + 8) <= a3)
    return JSC::JSObject::putByIndex((unint64_t)a1, (WTF::StringImpl **)a2, a3, a4, a5, a6, a7, a8, a9);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *((_QWORD *)a1 + 5);
  if (v10)
  {
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      v11 = v10 & 0x3FFFFFFFFLL;
      if (!(v11 + qword_1ECF4C038))
        goto LABEL_6;
      v10 = qword_1ECF4C038 + v11;
    }
    if (*(_BYTE *)(v10 + a3))
      return JSC::JSObject::putByIndex((unint64_t)a1, (WTF::StringImpl **)a2, a3, a4, a5, a6, a7, a8, a9);
  }
LABEL_6:
  *((_QWORD *)a1 + a3 + 6) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)a1 + 7))
    JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)a1);
  return 1;
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::deleteProperty(JSC::DirectArguments *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;

  v13 = *((_QWORD *)a2 + 7);
  v14 = *((_QWORD *)a1 + 5);
  if (!v14
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v15 = *(_QWORD **)(v13 + 41952);
    if (v15[221] == a3 || v15[122] == a3 || v15[339] == a3)
    {
      JSC::DirectArguments::overrideThings(a1, (unint64_t)a2, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v13 + 80))
      {
        v28 = *(_DWORD *)(v13 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v16, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v13 + 16))
          return 0;
      }
    }
  }
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a3 + 16);
  if ((v17 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_BYTE **)(a3 + 8);
  v19 = *(unsigned int *)(a3 + 4);
  if ((v17 & 4) != 0)
  {
    if ((_DWORD)v19)
    {
      v20 = *v18 - 48;
      if (v20 <= 9 && (v19 < 2 || *v18 != 48))
      {
        v30 = v19 - 1;
        v31 = v18 + 1;
        while (v30)
        {
          if (v20 > 0x19999999)
            goto LABEL_14;
          v32 = *v31 - 48;
          if (v32 > 9)
            goto LABEL_14;
          v21 = 0;
          LODWORD(v19) = 0;
          v22 = 0;
          v27 = __CFADD__(v32, 10 * v20);
          v20 = v32 + 10 * v20;
          --v30;
          ++v31;
          if (v27)
            goto LABEL_51;
        }
        goto LABEL_45;
      }
      goto LABEL_14;
    }
LABEL_54:
    v21 = 0;
    goto LABEL_15;
  }
  if (!(_DWORD)v19)
    goto LABEL_54;
  v20 = *(unsigned __int16 *)v18 - 48;
  if (v20 > 9 || (*(_WORD *)v18 == 48 ? (v23 = v19 > 1) : (v23 = 0), v23))
  {
LABEL_14:
    v21 = 0;
    LODWORD(v19) = 0;
LABEL_15:
    v22 = 0;
    goto LABEL_51;
  }
  v24 = (unsigned __int16 *)(v18 + 2);
  v25 = v19 - 1;
  while (v25)
  {
    if (v20 > 0x19999999)
      goto LABEL_14;
    v26 = *v24 - 48;
    if (v26 > 9)
      goto LABEL_14;
    v21 = 0;
    LODWORD(v19) = 0;
    v22 = 0;
    v27 = __CFADD__(v26, 10 * v20);
    v20 = v26 + 10 * v20;
    ++v24;
    --v25;
    if (v27)
      goto LABEL_51;
  }
LABEL_45:
  v21 = 0x100000000;
  if (v20 == -1)
  {
    v21 = 0;
    LODWORD(v19) = 0;
  }
  else
  {
    LODWORD(v19) = v20;
  }
  if (v20 == -1)
    v22 = 0;
  else
    v22 = v20 & 0xFFFFFF00;
LABEL_51:
  if ((v21 & 0x100000000) != 0)
    return JSC::GenericArguments<JSC::DirectArguments>::deletePropertyByIndex((uint64_t)a1, (unint64_t)a2, (JSC::JSGlobalObject *)(v22 | v19), (uint64_t)a4, a5, a6, a7, a8, a9);
  return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::GenericArguments<JSC::DirectArguments>::deletePropertyByIndex(uint64_t a1, unint64_t a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;

  v9 = a3;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      if ((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
        v15 = v13 > a3;
      else
        v15 = 0;
      if (v15)
      {
        if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_64:
        if (*(_BYTE *)(v14 + a3))
          v30 = 0;
        else
          v30 = v13 > a3;
        if (!v30)
          goto LABEL_86;
        goto LABEL_9;
      }
    }
    else if (v13 > a3)
    {
      goto LABEL_64;
    }
  }
  if (v13 <= a3)
    goto LABEL_86;
LABEL_9:
  v16 = *(_QWORD *)(a1 + 40);
  if (!v16)
    goto LABEL_13;
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    v17 = v16 & 0x3FFFFFFFFLL;
    if (!(v17 + qword_1ECF4C038))
      goto LABEL_13;
    v16 = qword_1ECF4C038 + v17;
  }
  if (!*(_BYTE *)(v16 + a3))
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 32) <= v9)
      goto LABEL_27;
    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
    {
      if (!qword_1ECF4C038)
      {
        if (*(_BYTE *)(v18 + v9))
          goto LABEL_27;
        v19 = *(_QWORD *)(a2 + 56);
        goto LABEL_21;
      }
      if (byte_1ECF4C022)
      {
        if ((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 && *(_BYTE *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v9))
          goto LABEL_27;
        v19 = *(_QWORD *)(a2 + 56);
      }
      else
      {
        if (disablePrimitiveGigacageRequested)
        {
          if (*(_BYTE *)(v18 + v9))
            goto LABEL_27;
        }
        else if ((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 && *(_BYTE *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v9))
        {
          goto LABEL_27;
        }
        v19 = *(_QWORD *)(a2 + 56);
        if (disablePrimitiveGigacageRequested)
          goto LABEL_21;
      }
      if ((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
      {
LABEL_21:
        if (!*(_DWORD *)(v19 + 80))
          goto LABEL_22;
        v28 = *(_DWORD *)(v19 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v19 + 16))
        {
LABEL_22:
          v20 = *(_QWORD *)(a1 + 40);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v20 + v9) = 1;
        }
        if (*(_DWORD *)(v12 + 80))
        {
          v29 = *(_DWORD *)(v12 + 80);
          if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            return 1;
        }
LABEL_27:
        v21 = *(_DWORD *)(a1 + 32);
        v22 = *(_QWORD *)(a2 + 56);
        v23 = *(_QWORD *)(a1 + 16);
        if (!v23
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor((JSC::JSCell *)a1, (JSC **)a2, *(_DWORD *)(a1 + 32), a4, a5, a6, a7, a8);
        }
        if (*(_DWORD *)(v22 + 80))
        {
          v26 = *(_DWORD *)(v22 + 80);
          if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v21 <= v9 || *(_QWORD *)(v22 + 16))
            goto LABEL_38;
        }
        else if (v21 <= v9)
        {
LABEL_38:
          if (*(_DWORD *)(v12 + 80))
          {
            v27 = *(_DWORD *)(v12 + 80);
            if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          return 1;
        }
        v24 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v24 + v9) = 1;
        goto LABEL_38;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 56);
    }
    JSC::DirectArguments::overrideThings((JSC::DirectArguments *)a1, a2, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_21;
  }
LABEL_86:
  v31 = JSC::JSObject::deletePropertyByIndex((JSC::JSObject *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8, a9);
  v32 = v31;
  if (!*(_DWORD *)(v12 + 80))
  {
    if (!v31)
      return 0;
    goto LABEL_13;
  }
  v33 = *(_DWORD *)(v12 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v34 = *(_QWORD *)(v12 + 16);
  result = v34 != 0;
  if (!v34 && ((v32 ^ 1) & 1) == 0)
    goto LABEL_13;
  return result;
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;

  v12 = *(JSC::VM **)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 40);
  if (!v13
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v14 = (_QWORD *)*((_QWORD *)v12 + 5244);
    if (v14[221] == a3)
    {
      v15 = *(unsigned int *)(a1 + 32);
      if ((v15 & 0x80000000) != 0)
        v16 = COERCE__INT64((double)v15) + 0x2000000000000;
      else
        v16 = v15 | 0xFFFE000000000000;
      goto LABEL_8;
    }
    if (v14[122] == a3)
    {
      v16 = *(_QWORD *)(a1 + 24);
LABEL_8:
      *(_QWORD *)a4 = v16;
LABEL_9:
      *(_DWORD *)(a4 + 16) = 4;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
    if (v14[339] == a3)
    {
      *(_QWORD *)a4 = JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                              + 0x28));
      goto LABEL_9;
    }
  }
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v18 = *(_DWORD *)(a3 + 16);
  if ((v18 & 0x20) == 0)
  {
    v19 = *(_BYTE **)(a3 + 8);
    v20 = *(unsigned int *)(a3 + 4);
    if ((v18 & 4) != 0)
    {
      if (!(_DWORD)v20)
        goto LABEL_18;
      v21 = (const WTF::StringImpl *)(*v19 - 48);
      if (v21 > 9 || v20 >= 2 && *v19 == 48)
        goto LABEL_18;
      v65 = v19 + 1;
      v66 = v20 - 1;
      while (v66)
      {
        if (v21 <= 0x19999999)
        {
          v67 = *v65 - 48;
          if (v67 <= 9)
          {
            v38 = __CFADD__(v67, 10 * (_DWORD)v21);
            v21 = (const WTF::StringImpl *)(v67 + 10 * (_DWORD)v21);
            ++v65;
            --v66;
            if (!v38)
              continue;
          }
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (!(_DWORD)v20)
        goto LABEL_18;
      v21 = (const WTF::StringImpl *)(*(unsigned __int16 *)v19 - 48);
      if (v21 > 9)
        goto LABEL_18;
      if (*(_WORD *)v19 == 48 && v20 > 1)
        goto LABEL_18;
      v35 = (unsigned __int16 *)(v19 + 2);
      v36 = v20 - 1;
      while (v36)
      {
        if (v21 <= 0x19999999)
        {
          v37 = *v35 - 48;
          if (v37 <= 9)
          {
            v38 = __CFADD__(v37, 10 * (_DWORD)v21);
            v21 = (const WTF::StringImpl *)(v37 + 10 * (_DWORD)v21);
            ++v35;
            --v36;
            if (!v38)
              continue;
          }
        }
        goto LABEL_18;
      }
    }
    if ((_DWORD)v21 != -1)
      return JSC::GenericArguments<JSC::DirectArguments>::getOwnPropertySlotByIndex(a1, a2, v21, a4, a5, a6, a7, a8);
  }
LABEL_18:
  if (!(a3 >> 4))
    goto LABEL_64;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_64;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v39 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v39 || *(_BYTE *)(v39 + 5) != 1 && *(_DWORD *)(v39 + 80) < 2u)
      goto LABEL_64;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v23)
      goto LABEL_64;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_64;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(a3 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(a3 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (*(_BYTE *)(v25 + v29))
    {
      v31 = v25 + v26;
      v32 = 1;
      while (1)
      {
        v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
        if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
          break;
        v29 = ((_DWORD)v29 + v32) & v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        ++v32;
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_64;
      }
      a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      goto LABEL_46;
    }
LABEL_64:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v12, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v50 = *(_DWORD *)(a3 + 16);
    if ((v50 & 0x20) == 0)
    {
      v51 = *(_BYTE **)(a3 + 8);
      v52 = *(unsigned int *)(a3 + 4);
      if ((v50 & 4) != 0)
      {
        if ((_DWORD)v52)
        {
          v53 = *v51 - 48;
          if (v53 <= 9 && (v52 < 2 || *v51 != 48))
          {
            v68 = v51 + 1;
            v69 = v52 - 1;
            while (v69)
            {
              if (v53 > 0x19999999)
                goto LABEL_69;
              v70 = *v68 - 48;
              if (v70 > 9)
                goto LABEL_69;
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v38 = __CFADD__(v70, 10 * v53);
              v53 = v70 + 10 * v53;
              ++v68;
              --v69;
              if (v38)
                goto LABEL_70;
            }
            goto LABEL_122;
          }
        }
      }
      else if ((_DWORD)v52)
      {
        v53 = *(unsigned __int16 *)v51 - 48;
        if (v53 <= 9 && (*(_WORD *)v51 != 48 || v52 <= 1))
        {
          v57 = (unsigned __int16 *)(v51 + 2);
          v58 = v52 - 1;
          while (v58)
          {
            if (v53 > 0x19999999)
              goto LABEL_69;
            v59 = *v57 - 48;
            if (v59 > 9)
              goto LABEL_69;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v38 = __CFADD__(v59, 10 * v53);
            v53 = v59 + 10 * v53;
            ++v57;
            --v58;
            if (v38)
              goto LABEL_70;
          }
LABEL_122:
          v54 = 0x100000000;
          if (v53 == -1)
          {
            v54 = 0;
            v55 = 0;
          }
          else
          {
            v55 = v53;
          }
          if (v53 == -1)
            v56 = 0;
          else
            v56 = v53 & 0xFFFFFF00;
LABEL_70:
          if ((v54 & 0x100000000) != 0)
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v56 | v55), a4, a5, a6, a7, a8);
          return 0;
        }
      }
LABEL_69:
      v54 = 0;
      v55 = 0;
      v56 = 0;
      goto LABEL_70;
    }
    return 0;
  }
  if ((v27 & 0x20) != 0)
    v27 = *(_DWORD *)(a3 + 32);
  v44 = *(_DWORD *)(v23 + 12);
  v45 = v44 & (v27 >> 8);
  v46 = *(_DWORD *)(v25 + 4 * v45);
  if (!v46)
    goto LABEL_64;
  v47 = v25 + 4 * v26;
  v48 = 1;
  while (1)
  {
    v49 = (v46 - 1);
    if (*(_QWORD *)(v47 + 16 * v49) == a3)
      break;
    v45 = (v45 + v48) & v44;
    v46 = *(_DWORD *)(v25 + 4 * v45);
    ++v48;
    if (!v46)
      goto LABEL_64;
  }
  a6 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
LABEL_46:
  if ((_DWORD)a6 == -1)
    goto LABEL_64;
  if ((int)a6 <= 63)
  {
    v40 = a1 + 16;
    v41 = a6 << 32;
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 8) - 8;
    v41 = 0x3F00000000 - (a6 << 32);
  }
  v42 = *(_QWORD *)(v40 + (v41 >> 29));
  if ((v42 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v43 = *(unsigned __int8 *)(v42 + 5);
  if (v43 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v12, a4, v42, SHIDWORD(a6), a6);
    return 1;
  }
  if (v43 != 6)
  {
LABEL_52:
    *(_QWORD *)a4 = v42;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v60 = *(_DWORD *)(v22 + 16) & 3;
  v62 = *(_QWORD *)(v42 + 8);
  v61 = *(_QWORD *)(v42 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C)))
  {
    v64 = *(_QWORD *)(v42 + 24);
    v63 = *(_QWORD *)(v42 + 32);
    *(_QWORD *)a4 = v62;
    *(_QWORD *)(a4 + 8) = v61;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v60 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v64;
    *(_QWORD *)(a4 + 80) = v63;
  }
  else
  {
    *(_QWORD *)a4 = v62;
    *(_QWORD *)(a4 + 8) = v61;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v60 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v9 = a3;
  v11 = *(_DWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_8;
  if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
  {
    if (v11 > a3)
      goto LABEL_18;
LABEL_8:
    if (v11 <= a3)
      goto LABEL_22;
LABEL_9:
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
    {
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        v15 = v14 & 0x3FFFFFFFFLL;
        if (!(v15 + qword_1ECF4C038))
          goto LABEL_13;
        v14 = qword_1ECF4C038 + v15;
      }
      if (*(_BYTE *)(v14 + a3))
        goto LABEL_22;
    }
LABEL_13:
    *(_QWORD *)a4 = *(_QWORD *)(a1 + 8 * a3 + 48);
    *(_DWORD *)(a4 + 16) = 0;
LABEL_14:
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
  if ((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    v13 = v11 > a3;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_8;
  if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_18:
  if (*(_BYTE *)(v12 + a3))
    v17 = 0;
  else
    v17 = v11 > a3;
  if (v17)
    goto LABEL_9;
LABEL_22:
  result = JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 32) <= v9)
    return result;
  v18 = *(_QWORD *)(a1 + 40);
  if (!v18)
    goto LABEL_27;
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    v19 = v18 & 0x3FFFFFFFFLL;
    if (v19 + qword_1ECF4C038)
    {
      v18 = qword_1ECF4C038 + v19;
      goto LABEL_38;
    }
LABEL_27:
    *(_QWORD *)a4 = *(_QWORD *)(a1 + 8 * v9 + 48);
    goto LABEL_14;
  }
LABEL_38:
  if (!*(_BYTE *)(v18 + v9))
    goto LABEL_27;
  return result;
}

void JSC::GenericArguments<JSC::DirectArguments>::getOwnPropertyNames(JSC::DirectArguments *this, WTF::AtomStringImpl *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169[2];
  char v170;
  uint64_t v171;
  WTF::StringImpl *v172;

  v12 = *((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    if (*((_DWORD *)this + 8))
    {
      v13 = 0;
      v14 = (_QWORD *)(a3 + 8);
      while (!JSC::DirectArguments::isMappedArgument(this, v13))
      {
LABEL_32:
        v13 = (v13 + 1);
        if (v13 >= *((_DWORD *)this + 8))
          goto LABEL_43;
      }
      JSC::Identifier::from((uint64_t **)v12, v13, v15, v16, a5, a6, a7, a8, (int **)&v168);
      v20 = v168;
      v172 = v168;
      v21 = *((_DWORD *)v168 + 4);
      if ((v21 & 0x20) != 0)
      {
        if ((*(_BYTE *)(a3 + 24) & 1) != 0 && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v168 + 36) & 4) == 0))
        {
LABEL_7:
          v22 = *(_QWORD *)a3;
          v23 = *(unsigned int *)(*(_QWORD *)a3 + 20);
          if (v23 <= 0x13)
          {
            if ((_DWORD)v23)
            {
              v27 = *(WTF::StringImpl ***)(v22 + 8);
              while (*v27 != v168)
              {
                ++v27;
                if (!--v23)
                  goto LABEL_18;
              }
              goto LABEL_29;
            }
          }
          else
          {
            if (!*v14 || !*(_DWORD *)(*v14 - 12))
            {
              v24 = *(uint64_t **)(v22 + 8);
              v25 = 8 * v23;
              do
              {
                v26 = *v24++;
                v171 = v26;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v171, v19, a5, a6, a7, a8, (uint64_t)v169);
                v25 -= 8;
              }
              while (v25);
            }
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v172, v19, a5, a6, a7, a8, (uint64_t)v169);
            if (!v170)
              goto LABEL_29;
            v20 = v172;
            v22 = *(_QWORD *)a3;
            v21 = *((_DWORD *)v172 + 4);
          }
LABEL_18:
          if ((v21 & 0x20) != 0)
          {
            v28 = *(_DWORD *)v20 + 2;
          }
          else
          {
            if ((v21 & 0x10) != 0)
            {
              *(_DWORD *)v20 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v20, v18, v19, a5, a6, a7, a8, v169);
              v20 = v169[0];
            }
            v28 = *(_DWORD *)v20;
            *(_DWORD *)v20 += 2;
            if (!v28)
            {
              WTF::StringImpl::~StringImpl(v20, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
LABEL_24:
              v29 = (uint64_t *)(v22 + 8);
              v169[0] = v20;
              v30 = *(unsigned int *)(v22 + 20);
              if ((_DWORD)v30 == *(_DWORD *)(v22 + 16))
              {
                v58 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)v169);
                v30 = *(unsigned int *)(v22 + 20);
                v59 = *(_QWORD *)(v22 + 8);
                v60 = *v58;
                *v58 = 0;
                *(_QWORD *)(v59 + 8 * v30) = v60;
              }
              else
              {
                v31 = *v29;
                v169[0] = 0;
                *(_QWORD *)(v31 + 8 * v30) = v20;
              }
              *(_DWORD *)(v22 + 20) = v30 + 1;
              v32 = v169[0];
              v169[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::~StringImpl(v32, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
                  WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              goto LABEL_29;
            }
          }
          *(_DWORD *)v20 = v28;
          goto LABEL_24;
        }
      }
      else if ((*(_BYTE *)(a3 + 24) & 2) != 0)
      {
        goto LABEL_7;
      }
LABEL_29:
      v33 = v168;
      v168 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      goto LABEL_32;
    }
LABEL_43:
    JSC::JSObject::getOwnIndexedPropertyNames((uint64_t)this, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if ((_DWORD)a4)
    goto LABEL_118;
  v61 = *((_QWORD *)this + 5);
  if (v61)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v61 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      goto LABEL_118;
    }
  }
  v62 = v12 + 41952;
  v63 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 1768);
  v172 = v63;
  v64 = *((_DWORD *)v63 + 4);
  if ((v64 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v63 + 36) & 4) != 0)
      goto LABEL_73;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_73;
  }
  v65 = *(_QWORD *)a3;
  v66 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v66 <= 0x13)
  {
    if (!(_DWORD)v66)
    {
LABEL_62:
      if ((v64 & 0x20) != 0)
      {
        v72 = *(_DWORD *)v63 + 2;
      }
      else
      {
        if ((v64 & 0x10) != 0)
        {
          *(_DWORD *)v63 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v63, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v169);
          v63 = v169[0];
        }
        v72 = *(_DWORD *)v63;
        *(_DWORD *)v63 += 2;
        if (!v72)
        {
          WTF::StringImpl::~StringImpl(v63, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
LABEL_68:
          v73 = (uint64_t *)(v65 + 8);
          v169[0] = v63;
          v74 = *(unsigned int *)(v65 + 20);
          if ((_DWORD)v74 == *(_DWORD *)(v65 + 16))
          {
            v142 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)v169);
            v74 = *(unsigned int *)(v65 + 20);
            v143 = *(_QWORD *)(v65 + 8);
            v144 = *v142;
            *v142 = 0;
            *(_QWORD *)(v143 + 8 * v74) = v144;
          }
          else
          {
            v75 = *v73;
            v169[0] = 0;
            *(_QWORD *)(v75 + 8 * v74) = v63;
          }
          *(_DWORD *)(v65 + 20) = v74 + 1;
          v76 = v169[0];
          v169[0] = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
            {
              WTF::StringImpl::~StringImpl(v76, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
            }
            else
            {
              *(_DWORD *)v76 -= 2;
            }
          }
          goto LABEL_73;
        }
      }
      *(_DWORD *)v63 = v72;
      goto LABEL_68;
    }
    v71 = *(WTF::StringImpl ***)(v65 + 8);
    while (*v71 != v63)
    {
      ++v71;
      if (!--v66)
        goto LABEL_62;
    }
  }
  else
  {
    v67 = *(_QWORD *)(a3 + 8);
    if (!v67 || !*(_DWORD *)(v67 - 12))
    {
      v68 = *(uint64_t **)(v65 + 8);
      v69 = 8 * v66;
      do
      {
        v70 = *v68++;
        v171 = v70;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
        v69 -= 8;
      }
      while (v69);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v172, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
    if (v170)
    {
      v63 = v172;
      v65 = *(_QWORD *)a3;
      v64 = *((_DWORD *)v172 + 4);
      goto LABEL_62;
    }
  }
LABEL_73:
  v77 = *(WTF::StringImpl **)(*(_QWORD *)v62 + 976);
  v172 = v77;
  v78 = *((_DWORD *)v77 + 4);
  if ((v78 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v77 + 36) & 4) != 0)
      goto LABEL_97;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_97;
  }
  v79 = *(_QWORD *)a3;
  v80 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v80 <= 0x13)
  {
    if (!(_DWORD)v80)
    {
LABEL_86:
      if ((v78 & 0x20) != 0)
      {
        v86 = *(_DWORD *)v77 + 2;
      }
      else
      {
        if ((v78 & 0x10) != 0)
        {
          *(_DWORD *)v77 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v77, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v169);
          v77 = v169[0];
        }
        v86 = *(_DWORD *)v77;
        *(_DWORD *)v77 += 2;
        if (!v86)
        {
          WTF::StringImpl::~StringImpl(v77, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
LABEL_92:
          v87 = (uint64_t *)(v79 + 8);
          v169[0] = v77;
          v88 = *(unsigned int *)(v79 + 20);
          if ((_DWORD)v88 == *(_DWORD *)(v79 + 16))
          {
            v145 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)v169);
            v88 = *(unsigned int *)(v79 + 20);
            v146 = *(_QWORD *)(v79 + 8);
            v147 = *v145;
            *v145 = 0;
            *(_QWORD *)(v146 + 8 * v88) = v147;
          }
          else
          {
            v89 = *v87;
            v169[0] = 0;
            *(_QWORD *)(v89 + 8 * v88) = v77;
          }
          *(_DWORD *)(v79 + 20) = v88 + 1;
          v90 = v169[0];
          v169[0] = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
          goto LABEL_97;
        }
      }
      *(_DWORD *)v77 = v86;
      goto LABEL_92;
    }
    v85 = *(WTF::StringImpl ***)(v79 + 8);
    while (*v85 != v77)
    {
      ++v85;
      if (!--v80)
        goto LABEL_86;
    }
  }
  else
  {
    v81 = *(_QWORD *)(a3 + 8);
    if (!v81 || !*(_DWORD *)(v81 - 12))
    {
      v82 = *(uint64_t **)(v79 + 8);
      v83 = 8 * v80;
      do
      {
        v84 = *v82++;
        v171 = v84;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
        v83 -= 8;
      }
      while (v83);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v172, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
    if (v170)
    {
      v77 = v172;
      v79 = *(_QWORD *)a3;
      v78 = *((_DWORD *)v172 + 4);
      goto LABEL_86;
    }
  }
LABEL_97:
  v91 = *(WTF::StringImpl **)(*(_QWORD *)v62 + 2712);
  v172 = v91;
  v92 = *((_DWORD *)v91 + 4);
  if ((v92 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v91 + 36) & 4) != 0)
      goto LABEL_118;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_118;
  }
  v93 = *(_QWORD *)a3;
  v94 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v94 <= 0x13)
  {
    if (!(_DWORD)v94)
    {
LABEL_110:
      if ((v92 & 0x20) != 0)
      {
        v100 = *(_DWORD *)v91 + 2;
      }
      else
      {
        if ((v92 & 0x10) != 0)
        {
          *(_DWORD *)v91 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v91, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v169);
          v91 = v169[0];
        }
        v100 = *(_DWORD *)v91;
        *(_DWORD *)v91 += 2;
        if (!v100)
        {
          WTF::StringImpl::~StringImpl(v91, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
LABEL_116:
          v169[0] = v91;
          v101 = *(unsigned int *)(v93 + 20);
          if ((_DWORD)v101 == *(_DWORD *)(v93 + 16))
          {
            v148 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v93 + 8, v101 + 1, (unint64_t)v169);
            v156 = *(unsigned int *)(v93 + 20);
            v157 = *(_QWORD *)(v93 + 8);
            v158 = *v148;
            *v148 = 0;
            *(_QWORD *)(v157 + 8 * v156) = v158;
            v159 = v169[0];
            *(_DWORD *)(v93 + 20) = v156 + 1;
            v169[0] = 0;
            if (v159)
            {
              if (*(_DWORD *)v159 == 2)
              {
                WTF::StringImpl::~StringImpl(v159, v149, v150, v151, v152, v153, v154, v155);
                WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
              }
              else
              {
                *(_DWORD *)v159 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v93 + 8) + 8 * v101) = v91;
            *(_DWORD *)(v93 + 20) = v101 + 1;
          }
          goto LABEL_118;
        }
      }
      *(_DWORD *)v91 = v100;
      goto LABEL_116;
    }
    v99 = *(WTF::StringImpl ***)(v93 + 8);
    while (*v99 != v91)
    {
      ++v99;
      if (!--v94)
        goto LABEL_110;
    }
  }
  else
  {
    v95 = *(_QWORD *)(a3 + 8);
    if (!v95 || !*(_DWORD *)(v95 - 12))
    {
      v96 = *(uint64_t **)(v93 + 8);
      v97 = 8 * v94;
      do
      {
        v98 = *v96++;
        v171 = v98;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
        v97 -= 8;
      }
      while (v97);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v172, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v169);
    if (v170)
    {
      v91 = v172;
      v93 = *(_QWORD *)a3;
      v92 = *((_DWORD *)v172 + 4);
      goto LABEL_110;
    }
  }
LABEL_118:
  JSC::JSObject::getOwnNonIndexPropertyNames(this, (uint64_t)a2, a3, a4);
}

uint64_t JSC::GenericArguments<JSC::DirectArguments>::defineOwnProperty(JSC::DirectArguments *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 isMappedArgument;
  __n128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  int v62;
  _OWORD v63[2];

  v14 = *((_QWORD *)a2 + 7);
  v15 = *(_QWORD **)(v14 + 41952);
  if (v15[221] == a3 || v15[122] == a3 || v15[339] == a3)
  {
    v24 = *((_QWORD *)this + 5);
    if (!v24
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::DirectArguments::overrideThings(this, (unint64_t)a2, a9, a3, a4, a5, a6, a7, a8);
    }
    if (!*(_DWORD *)(v14 + 80))
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v26 = *(_DWORD *)(v14 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v14 + 16))
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    return 0;
  }
  if (!a3)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v17 = *(_BYTE **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) != 0)
  {
    if (!(_DWORD)v18)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v19 = *v17 - 48;
    if (v19 > 9 || v18 >= 2 && *v17 == 48)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v27 = v17 + 1;
    v28 = v18 - 1;
    while (v28)
    {
      if (v19 <= 0x19999999)
      {
        v29 = *v27 - 48;
        if (v29 <= 9)
        {
          v23 = __CFADD__(v29, 10 * v19);
          v19 = v29 + 10 * v19;
          ++v27;
          --v28;
          if (!v23)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  else
  {
    if (!(_DWORD)v18)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v19 = *(unsigned __int16 *)v17 - 48;
    if (v19 > 9 || *(_WORD *)v17 == 48 && v18 > 1)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v20 = (unsigned __int16 *)(v17 + 2);
    v21 = v18 - 1;
    while (v21)
    {
      if (v19 <= 0x19999999)
      {
        v22 = *v20 - 48;
        if (v22 <= 9)
        {
          v23 = __CFADD__(v22, 10 * v19);
          v19 = v22 + 10 * v19;
          ++v20;
          --v21;
          if (!v23)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  if (v19 == -1)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v30 = (JSC::VM *)v19;
  isMappedArgument = JSC::DirectArguments::isMappedArgument(this, v19);
  v35 = *(__n128 *)a4;
  v36 = *(_OWORD *)(a4 + 16);
  v63[0] = *(_OWORD *)a4;
  v63[1] = v36;
  if (isMappedArgument)
  {
    if (JSC::DirectArguments::isModifiedArgumentDescriptor(*((_QWORD *)this + 2), *((_DWORD *)this + 8), v30))
    {
      if (!*(_QWORD *)a4 && (*(_BYTE *)(a4 + 28) & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
        *(_QWORD *)&v63[0] = *((_QWORD *)this + (_QWORD)v30 + 6);
    }
    else
    {
      JSC::JSObject::putDirectIndex((unint64_t)this, (unint64_t)a2, v30, *((_QWORD *)this + (_QWORD)v30 + 6), v37, v31, v32, v33, (int32x4_t)v35);
    }
  }
  v38 = JSC::JSObject::defineOwnIndexedProperty(this, a2, v30, (const JSC::PropertyDescriptor *)v63, a5, v31, v32, v33, v35);
  v46 = v38;
  if (*(_DWORD *)(v14 + 80))
  {
    v55 = *(_DWORD *)(v14 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v39, v40, v41, v42, v43, v44);
    if (*(_QWORD *)(v14 + 16))
      v56 = 0;
    else
      v56 = v46;
    if ((v56 & 1) == 0)
      return 0;
  }
  else if (!v38)
  {
    return 0;
  }
  v47 = *((_DWORD *)this + 8);
  v48 = *((_QWORD *)a2 + 7);
  v49 = *((_QWORD *)this + 2);
  if (!v49
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor(this, (JSC **)a2, *((_DWORD *)this + 8), v40, v41, v42, v43, v44);
  }
  if (!*(_DWORD *)(v48 + 80))
  {
    if (v47 <= v30)
      goto LABEL_65;
    goto LABEL_61;
  }
  v57 = *(_DWORD *)(v48 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v48 + 64), 7u, v39, v40, v41, v42, v43, v44);
  if (v47 > v30 && !*(_QWORD *)(v48 + 16))
  {
LABEL_61:
    v50 = *((_QWORD *)this + 2);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v50 = (v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *((_BYTE *)v30 + v50) = 1;
  }
LABEL_65:
  if (!*(_DWORD *)(v14 + 80))
  {
    if (!isMappedArgument)
      return 1;
    goto LABEL_67;
  }
  v58 = *(_DWORD *)(v14 + 80);
  if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v39, v40, v41, v42, v43, v44);
  v59 = *(_QWORD *)(v14 + 16);
  result = v59 == 0;
  if (v59)
    v60 = 0;
  else
    v60 = isMappedArgument;
  if (v60)
  {
LABEL_67:
    if (*(_OWORD *)(a4 + 8) != 0)
      goto LABEL_68;
    v54 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      *((_QWORD *)this + (_QWORD)v30 + 6) = v54;
      if ((v54 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v14 + 760) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath(v14 + 192, (unint64_t)this);
    }
    if ((*(_BYTE *)(a4 + 28) & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
    {
LABEL_68:
      v51 = *((_QWORD *)a2 + 7);
      v52 = *((_QWORD *)this + 5);
      if (!v52
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        JSC::DirectArguments::overrideThings(this, (unint64_t)a2, v45, v39, v40, v41, v42, v43, v44);
      }
      if (!*(_DWORD *)(v51 + 80))
        goto LABEL_74;
      v62 = *(_DWORD *)(v51 + 80);
      if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v51 + 64), 7u, v39, v40, v41, v42, v43, v44);
      if (!*(_QWORD *)(v51 + 16))
      {
LABEL_74:
        v53 = *((_QWORD *)this + 5);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *((_BYTE *)v30 + v53) = 1;
      }
    }
    if (*(_DWORD *)(v14 + 80))
    {
      v61 = *(_DWORD *)(v14 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v39, v40, v41, v42, v43, v44);
      if (*(_QWORD *)(v14 + 16))
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t JSC::DirectArguments::estimatedSize(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v1 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      v2 = *(_DWORD *)(a1 + 32);
      if (v2 <= 1)
        v2 = 1;
      v1 = (v2 + 7) & 0xFFFFFFF8;
    }
    else
    {
      v1 = 0;
    }
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (v3
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v4 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v6 == 65534)
      goto LABEL_23;
    if (v6 == 0xFFFF)
      v6 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v7 = __OFSUB__(v6, 63);
    LODWORD(v5) = v6 - 63;
    if (((int)v5 < 0) ^ v7 | ((_DWORD)v5 == 0))
LABEL_23:
      LODWORD(v5) = 0;
    v5 = v5;
  }
  if ((a1 & 8) != 0)
    v8 = *(_QWORD *)(a1 - 88);
  else
    v8 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v4 + v1 + v5 + v8;
}

void JSC::DirectArguments::visitChildren(JSC::DirectArguments *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::SlotVisitor *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_DWORD *)this + 8);
  v17 = *((_DWORD *)this + 9);
  if (v16 <= v17)
    v18 = v17;
  else
    v18 = v16;
  if ((_DWORD)v18)
  {
    v19 = (unint64_t *)((char *)this + 48);
    do
    {
      v21 = *v19++;
      v20 = v21;
      if ((v21 & 0xFFFE000000000002) != 0 || v20 == 0)
        goto LABEL_15;
      if ((v20 & 8) != 0)
      {
        if ((*(_BYTE *)(v20 - 79) & 1) == 0)
          goto LABEL_32;
      }
      else
      {
        v23 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v23, (uint64_t)v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
        {
LABEL_32:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v11, v12, v13, v14, v15);
          goto LABEL_15;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_32;
LABEL_15:
      --v18;
    }
    while (v18);
  }
  v24 = *((_QWORD *)this + 3);
  if (v24)
  {
    if ((v24 & 8) != 0)
    {
      if ((*(_BYTE *)(v24 - 79) & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v25 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v25)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v25, (uint64_t)v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFC000) + 8 * ((v24 >> 10) & 0xF) + 0x28) >> (v24 >> 4)) & 1) != 0)
      {
LABEL_21:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_22;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v24, 0, v11, v12, v13, v14, v15);
  }
LABEL_22:
  v26 = *((_QWORD *)this + 5);
  if (!v26)
    goto LABEL_26;
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    if (!((v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      goto LABEL_26;
    v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  JSC::SlotVisitor::markAuxiliary(a2, v26, (uint64_t)v10, v11, v12, v13, v14, v15);
LABEL_26:
  JSC::JSObject::visitChildren(this, a2, v10, v11, v12, v13, v14, v15);
  v33 = *((_QWORD *)this + 2);
  if (v33)
  {
    if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
      goto LABEL_42;
    if ((v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      v33 = qword_1ECF4C038 + (v33 & 0x3FFFFFFFFLL);
LABEL_42:
      JSC::SlotVisitor::markAuxiliary(a2, v33, v27, v28, v29, v30, v31, v32);
    }
  }
}

void JSC::DirectArguments::visitChildren(JSC::DirectArguments *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  JSC::AbstractSlotVisitor *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v15[0] = a2;
  v15[1] = this;
  v17 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v16 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19891B5E8);
  }
  *((_QWORD *)a2 + 11) = v15;
  JSC::JSObject::visitChildren(this, a2, a3);
  v6 = *((_DWORD *)this + 8);
  v7 = *((_DWORD *)this + 9);
  if (v6 <= v7)
    v8 = v7;
  else
    v8 = v6;
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)((char *)this + 48);
    do
    {
      v10 = *v9++;
      if ((v10 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      --v8;
    }
    while (v8);
  }
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
  v12 = *((_QWORD *)this + 5);
  if (v12)
  {
    if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
      goto LABEL_16;
    if ((v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_16:
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v12);
    }
  }
  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v13 = *((_QWORD *)a2 + 11);
  v19 = v13;
  if (v13 && *(_BYTE *)(v13 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19891B608);
  }
  *((_QWORD *)a2 + 11) = v18;
  JSC::JSObject::visitChildren(this, a2, v11);
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
      goto LABEL_24;
    if ((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      v14 = qword_1ECF4C038 + (v14 & 0x3FFFFFFFFLL);
LABEL_24:
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v14);
    }
  }
  *(_QWORD *)(v18[0] + 88) = v19;
  *(_QWORD *)(v15[0] + 88) = v16;
}

unint64_t JSC::allocateCell<JSC::DirectArguments>(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  unint64_t v13;
  char *v14;

  v9 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v9 <= 0x1F60 && (v10 = *((_QWORD *)a1 + (((unint64_t)a2 + 15) >> 4) + 2396)) != 0)
  {
    v11 = *(unsigned int *)(v10 + 60);
    result = *(_QWORD *)(v10 + 24);
    if (result >= *(_QWORD *)(v10 + 32))
    {
      result = *(_QWORD *)(v10 + 40);
      if ((result & 1) != 0)
      {
        v14 = (char *)a1 + 192;
        JSC::sanitizeStackForVM(a1, a2, v9, a4, a5, a6, a7, a8);
        result = JSC::LocalAllocator::allocateSlowCase(v10, v14, v11, 0, 0);
        goto LABEL_5;
      }
      v13 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = result + HIDWORD(v13);
      *(_QWORD *)(v10 + 40) = result + (int)v13;
    }
    *(_QWORD *)(v10 + 24) = result + v11;
  }
  else
  {
    result = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 19080, a1, v9, 0, a5, a6, a7, a8);
    if (!result)
    {
      __break(0xC471u);
      JUMPOUT(0x19891B6CCLL);
    }
  }
LABEL_5:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t JSC::DirectArguments::create(JSC::DirectArguments *this, unint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;

  v8 = a4;
  v9 = (int)a3;
  v12 = 8 * a4;
  v13 = JSC::allocateCell<JSC::DirectArguments>(this, (JSC::VM *)(v12 + 48), (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = v13;
  v15 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v13 = a2 >> 4;
  *(_DWORD *)(v13 + 4) = v15;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = v9;
  *(_DWORD *)(v13 + 36) = v8;
  *(_QWORD *)(v13 + 40) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v8)
    memset_pattern16((void *)(v13 + 48), &memset_pattern_3, v12);
  return v14;
}

unint64_t JSC::DirectArguments::createByCopying(JSC::DirectArguments *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_DWORD *)a2 + 8) - 1;
  if (v10 <= *(_DWORD *)(*((_QWORD *)a2 + 2) + 28) - 1)
    v11 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 28) - 1;
  else
    v11 = *((_DWORD *)a2 + 8) - 1;
  v12 = *((_DWORD *)this + 209);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = JSC::allocateCell<JSC::DirectArguments>(*((JSC **)this + 7), (JSC::VM *)(8 * v11 + 48), (uint64_t)a3, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v14 = v13 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 32) = v10;
  *(_DWORD *)(v14 + 36) = v11;
  *(_QWORD *)(v14 + 40) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  if (v11)
  {
    v16 = ((unint64_t)(v11 - 1) << 32) + 0x600000000;
    v17 = 8 * (v11 - 1) + 48;
    do
    {
      v18 = *(_QWORD *)((char *)a2 + (v16 >> 29));
      *(_QWORD *)(v14 + v17) = v18;
      if (v18)
        v19 = (v18 & 0xFFFE000000000002) == 0;
      else
        v19 = 0;
      if (v19 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
      {
        v25 = v16;
        v26 = v14;
        v24 = v17;
        JSC::Heap::writeBarrierSlowPath(v9 + 192, v14);
        v17 = v24;
        v16 = v25;
        v14 = v26;
      }
      v16 -= 0x100000000;
      v17 -= 8;
      --v11;
    }
    while (v11);
  }
  v20 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v14 + 24) = v20;
  if (v20 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
  {
    v22 = v9 + 192;
    v23 = v14;
    JSC::Heap::writeBarrierSlowPath(v22, v14);
    return v23;
  }
  return v14;
}

void JSC::DirectArguments::overrideThings(JSC::DirectArguments *this, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  unint64_t Slow;
  unint64_t OutOfMemoryError;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  uint64_t (*v48)(uint64_t *, __n128);
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::DirectArguments *v56;
  uint64_t v57;
  uint64_t v58;

  v11 = *(_QWORD *)(a2 + 56);
  v12 = *((_QWORD *)this + 5);
  if (v12
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    __break(0xC471u);
    return;
  }
  v13 = v11 + 41952;
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v15 = *((unsigned int *)this + 8);
  if ((int)v15 < 0)
    v16 = COERCE__INT64((double)v15) + 0x2000000000000;
  else
    v16 = v15 | 0xFFFE000000000000;
  v55 = 0;
  v56 = this;
  v57 = 0x1000000FFFFFFFFLL;
  a3.n128_u64[0] = 0x100000001000000;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v14, v16, 4, (uint64_t)&v55, a8, a9, a3);
  v17 = *(_QWORD *)(*(_QWORD *)v13 + 976);
  v18 = *((_QWORD *)this + 3);
  v55 = 0;
  v56 = this;
  v57 = 0x1000000FFFFFFFFLL;
  v19.n128_u64[0] = 0x100000001000000;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v17, v18, 4, (uint64_t)&v55, v20, v21, v19);
  v24.n128_u64[0] = 0x100000001000000;
  v25 = *(_QWORD *)(*(_QWORD *)v13 + 2712);
  v26 = *(_QWORD *)(a2 + 528);
  if ((v26 & 1) != 0)
  {
    v48 = *(uint64_t (**)(uint64_t *, __n128))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v49 = (uint64_t *)(a2 - 16);
    else
      v49 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v55 = *v49;
    v56 = (JSC::DirectArguments *)a2;
    v57 = a2 + 528;
    v26 = v48(&v55, v24);
    v24.n128_u64[0] = 0x100000001000000;
  }
  v55 = 0;
  v56 = this;
  v57 = 0x1000000FFFFFFFFLL;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v25, v26, 4, (uint64_t)&v55, v22, v23, v24);
  v33 = *((_DWORD *)this + 8);
  if (v33 <= 1)
    v33 = 1;
  v34 = (v33 + 7) & 0xFFFFFFF8;
  if (v34 > 0x1F60 || (v35 = *(_QWORD *)(v11 + (((v34 + 15) >> 1) & 0xFFFFFFF8) + 2592)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 2504, (JSC *)v11, v34, 0, v29, v30, v31, v32);
    goto LABEL_21;
  }
  v36 = *(unsigned int *)(v35 + 60);
  v37 = *(_QWORD **)(v35 + 24);
  if ((unint64_t)v37 >= *(_QWORD *)(v35 + 32))
  {
    v37 = *(_QWORD **)(v35 + 40);
    if ((v37 & 1) == 0)
    {
      v50 = v37[1] ^ *(_QWORD *)(v35 + 48);
      *(_QWORD *)(v35 + 32) = (char *)v37 + HIDWORD(v50);
      *(_QWORD *)(v35 + 40) = (char *)v37 + (int)v50;
      *(_QWORD *)(v35 + 24) = (char *)v37 + v36;
      goto LABEL_15;
    }
    v51 = *(_QWORD *)(v11 + (((v34 + 15) >> 1) & 0xFFFFFFF8) + 2592);
    JSC::sanitizeStackForVM((JSC *)v11, v27, v34, v28, v29, v30, v31, v32);
    Slow = JSC::LocalAllocator::allocateSlowCase(v51, v11 + 192, v36, 0, 1, v52, v53, v54);
LABEL_21:
    v37 = (_QWORD *)Slow;
    if (Slow)
      goto LABEL_15;
    goto LABEL_22;
  }
  *(_QWORD *)(v35 + 24) = (char *)v37 + v36;
  if (v37)
  {
LABEL_15:
    *((_QWORD *)this + 5) = v37;
    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)this);
    v38 = *((unsigned int *)this + 8);
    if ((_DWORD)v38)
      bzero(v37, v38);
    return;
  }
LABEL_22:
  OutOfMemoryError = JSC::createOutOfMemoryError(a2, v27);
  v47 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v47 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v41, v42, v43, v44, v45);
  }
  JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
}

void JSC::DirectArguments::copyToArguments(JSC::DirectArguments *this, JSC::JSGlobalObject *a2, JSC::JSValue *a3, unint64_t a4, unsigned int a5)
{
  int v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  JSC::JSValue *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v6 = a4;
  v10 = *((_QWORD *)this + 5);
  if (v10
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    if (a5)
    {
      v19 = 0;
      v20 = *((_QWORD *)a2 + 7);
      do
      {
        if (JSC::DirectArguments::isMappedArgument(this, v19 + v6))
        {
          *((_QWORD *)a3 + v19) = *((_QWORD *)this + v19 + v6 + 6);
        }
        else
        {
          *((_QWORD *)a3 + v19) = JSC::JSObject::get(this, a2, v19 + v6);
          if (*(_DWORD *)(v20 + 80))
          {
            v27 = *(_DWORD *)(v20 + 80);
            if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v21, v22, v23, v24, v25, v26);
            if (*(_QWORD *)(v20 + 16))
              return;
          }
        }
        ++v19;
      }
      while (v19 < a5);
    }
  }
  else
  {
    LODWORD(v11) = *((_DWORD *)this + 8);
    if (v11 >= a5 + a4)
      v11 = a5 + a4;
    else
      v11 = v11;
    v12 = a4;
    if (v11 > a4)
    {
      v13 = v11 - a4;
      v14 = (uint64_t *)((char *)this + 8 * a4 + 48);
      v15 = a3;
      do
      {
        v16 = *v14++;
        *(_QWORD *)v15 = v16;
        v15 = (JSC::JSValue *)((char *)v15 + 8);
        --v13;
      }
      while (v13);
      v12 = v11;
    }
    if (v12 < a5)
    {
      v17 = -(int)a4;
      do
      {
        v18 = v12;
        *((_QWORD *)a3 + (v17 + v12)) = JSC::JSObject::get(this, a2, v12);
        v12 = (v18 + 1);
      }
      while (a5 != (_DWORD)v12);
    }
  }
}

BOOL JSC::DirectArguments::isIteratorProtocolFastAndNonObservable(JSC::DirectArguments *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v1 = *(_QWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v2 = v1[277];
  if ((v2 & 1) != 0)
    v3 = (v2 >> 1) & 3;
  else
    v3 = *(unsigned __int8 *)(v2 + 4);
  if (v3 == 2 || *(_BYTE *)(v1[256] + 4) == 2)
    return 0;
  v4 = v1[289];
  v5 = (v4 & 1) != 0 ? (v4 >> 1) & 3 : *(unsigned __int8 *)(v4 + 4);
  if (v5 == 2)
    return 0;
  v7 = *((_QWORD *)this + 5);
  return (!v7
       || qword_1ECF4C038
       && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
       && !((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x20) == 0;
}

unint64_t JSC::DirectArguments::fastSlice(JSC::DirectArguments *this, JSC::JSGlobalObject *a2, JSC::DirectArguments *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t result;
  _OWORD *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27[7];

  if (a4 >> 5 > 0xC34)
    return 0;
  v27[5] = v8;
  v27[6] = v9;
  v13 = *((_QWORD *)a2 + 5);
  if (v13
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    return 0;
  }
  if ((unint64_t)a3 + a4 > *((unsigned int *)a2 + 8))
    return 0;
  v14 = *((_DWORD *)this + 227);
  v15 = v14 ? 16 * (v14 & 0xFFFFFFFE) : 0;
  if ((*(_BYTE *)(v15 + 8) & 0xEu) > 9)
    return 0;
  v27[0] = *((_QWORD *)this + 7);
  result = JSC::JSArray::tryCreateUninitializedRestricted(v27, 0, v15, a4, a5, a6, a7, a8);
  if (result)
  {
    v17 = *(_OWORD **)(result + 8);
    v18 = (__int128 *)((char *)a2 + 8 * (_QWORD)a3 + 48);
    v19 = (8 * a4) & 0x7FFFFFFF8;
    if (v19 > 0xF0)
    {
      v22 = (_OWORD *)((char *)v17 + v19);
      v23 = (_OWORD *)((char *)v17 + ((8 * a4) & 0x7FFFFFFE0));
      while (v17 != v23)
      {
        v24 = *v18;
        v25 = v18[1];
        v18 += 2;
        *v17 = v24;
        v17[1] = v25;
        v17 += 2;
      }
      while (v17 != v22)
      {
        v26 = *(_QWORD *)v18;
        v18 = (__int128 *)((char *)v18 + 8);
        *(_QWORD *)v17 = v26;
        v17 = (_OWORD *)((char *)v17 + 8);
      }
    }
    else if (v19)
    {
      v20 = v19 >> 3;
      if (v20 <= 1)
        v20 = 1;
      do
      {
        v21 = *(_QWORD *)v18;
        v18 = (__int128 *)((char *)v18 + 8);
        *(_QWORD *)v17 = v21;
        v17 = (_OWORD *)((char *)v17 + 8);
        --v20;
      }
      while (v20);
    }
  }
  if (*(_BYTE *)(v27[0] + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::DirectEvalExecutable::create(unint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl ***a9, uint64_t *a10, char a11)
{
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  _QWORD *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void (*v47)(unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t EvalError;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  SourceProvider *var0;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t SlowCase;
  JSC::Heap *v89;
  uint64_t v90;
  SourceCode v91;
  WTF::StringImpl *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  __int16 v101;
  int *v102[2];

  v13 = *(_QWORD *)(a1 + 56);
  v90 = v13;
  if (*(_BYTE *)(a1 + 3169))
  {
    v14 = a7;
    v15 = a6;
    v16 = a4;
    v17 = a3;
    v18 = a5;
    v19 = a8;
    v20 = *(_QWORD **)(v13 + 41056);
    if (!v20)
    {
      v45 = a7;
      v46 = JSC::GCClient::Heap::evalExecutableSpaceSlow((JSC::Heap **)(v13 + 37552));
      v14 = v45;
      v20 = (_QWORD *)v46;
      v13 = v90;
    }
    v89 = (JSC::Heap *)(v13 + 192);
    v21 = v20[3];
    if (v21 >= v20[4])
    {
      v21 = v20[5];
      if ((v21 & 1) != 0)
      {
        v87 = v14;
        JSC::sanitizeStackForVM((JSC *)v13, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v89, 112, 0, 0);
        v14 = v87;
        v21 = SlowCase;
LABEL_6:
        *(_DWORD *)v21 = 0;
        JSC::ScriptExecutable::ScriptExecutable(v21, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41576), *(_QWORD *)(a1 + 56), (uint64_t *)a2, a11 == 0, v17, v15, v14, v19, 0);
        *(_QWORD *)(v21 + 72) = 0;
        *(_QWORD *)(v21 + 80) = 0;
        *(_QWORD *)(v21 + 88) = -1;
        *(_BYTE *)(v21 + 96) = v16 & 0xFD | (2 * (v18 & 1)) | *(_BYTE *)(v21 + 96) & 0xFC;
        *(_QWORD *)(v21 + 104) = 0;
        if (*(_BYTE *)(v90 + 755))
          __dmb(0xAu);
        LOBYTE(v22) = 0;
        LODWORD(v92) = 0x100000;
        v93 = 0u;
        v94 = 0u;
        v95 = 0;
        v96 = -1;
        v97 = -1;
        v98 = -1;
        v99 = 0;
        v100 = -1;
        v101 = 0;
        v23 = *(_QWORD *)(a1 + 2016);
        if (v23)
          v22 = (*(unsigned __int16 *)(v23 + 48) >> 6) & 1;
        if (byte_1ECF4C274)
          LOBYTE(v22) = 1;
        if (byte_1ECF4C275)
          LOBYTE(v22) = 1;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93168))
          LOBYTE(v22) = v22 | 2;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93280))
          v24 = v22 | 4;
        else
          v24 = v22;
        v25 = (_QWORD *)(v21 + 40);
        v33 = JSC::generateUnlinkedCodeBlockImpl<JSC::UnlinkedEvalCodeBlock,JSC::DirectEvalExecutable>(v90, v21 + 40, a11 == 0, 0, v24, (uint64_t)&v92, v19, HIBYTE(*(unsigned __int16 *)(v21 + 70)) & 3, (*(_WORD *)(v21 + 70) & 0x10) != 0, a9, a10, v21);
        v34 = *(_QWORD *)(a1 + 2016);
        if (v34)
          (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v34 + 16))(v34, a1, *v25, v100, &v99);
        if (!(_BYTE)v101)
        {
          *(_QWORD *)(v21 + 80) = v33;
          if (v33 && *(_DWORD *)(v90 + 760) >= *(unsigned __int8 *)(v21 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v89, v21);
          goto LABEL_23;
        }
        v70 = *v25;
        if (*v25)
          ++*(_DWORD *)(v70 + 8);
        v91.var0.var0 = (SourceProvider *)v70;
        *(_OWORD *)&v91.var1 = *(_OWORD *)(v21 + 48);
        v71 = JSC::ParserError::toErrorObject(&v92, (JSC::JSGlobalObject *)a1, &v91, 0xFFFFFFFFLL, v29, v30, v31, v32);
        JSC::VM::throwException((JSC::VM *)v90, (JSC::JSGlobalObject *)a1, v71, v72, v73, v74, v75, v76);
        var0 = v91.var0.var0;
        v91.var0.var0 = 0;
        if (var0)
        {
          if (*((_DWORD *)var0 + 2) != 1)
          {
            v21 = 0;
            --*((_DWORD *)var0 + 2);
            goto LABEL_23;
          }
          (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
        }
        v21 = 0;
LABEL_23:
        v35 = v99;
        v99 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v26, v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        return v21;
      }
      v78 = *(_QWORD *)(v21 + 8) ^ v20[6];
      v20[4] = v21 + HIDWORD(v78);
      v20[5] = v21 + (int)v78;
    }
    v20[3] = v21 + 112;
    goto LABEL_6;
  }
  v47 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(a1 + 3280) + 112);
  if (*(_QWORD *)a2)
  {
    v92 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    *(_QWORD *)&v93 = v48;
    WTF::StringView::toString(&v92, v102);
    v55 = JSC::jsNontrivialString(v90, (JSC::VM *)v102, v49, v50, v51, v52, v53, v54);
    v47(a1, v55);
    v63 = (WTF::StringImpl *)v102[0];
    v102[0] = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v56, (uint64_t)v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
  }
  else
  {
    v47(a1, 0);
  }
  EvalError = JSC::createEvalError(a1, (WTF::StringImpl **)(a1 + 3184), v57);
  JSC::VM::throwException((JSC::VM *)v90, (JSC::JSGlobalObject *)a1, EvalError, v65, v66, v67, v68, v69);
  return 0;
}

_QWORD *JSC::DoublePredictionFuzzerAgent::DoublePredictionFuzzerAgent(_QWORD *result)
{
  *result = off_1E3599090;
  return result;
}

uint64_t JSC::DoublePredictionFuzzerAgent::getPrediction(JSC::DoublePredictionFuzzerAgent *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, uint64_t a4)
{
  if ((a4 & 0xFFFFFF8CFFFFFFFFLL) != 0 || a4 == 0)
    return a4;
  else
    return 0x7000000000;
}

void JSC::DeferredWorkTimer::~DeferredWorkTimer(JSC::DeferredWorkTimer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::DeferredWorkTimer::~DeferredWorkTimer(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v26 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v26)
    {
      v27 = (uint64_t **)*((_QWORD *)this + 9);
      do
      {
        v28 = *v27;
        if (*v27 != (uint64_t *)-1)
        {
          *v27 = 0;
          if (v28)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v28, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v27;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 5);
  v11 = *((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 7);
  if (v10 > v11)
  {
    if (v11)
    {
      v41 = 16 * v11;
      v42 = (uint64_t *)(v12 + 8);
      do
      {
        v43 = *v42;
        *v42 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v42 += 2;
        v41 -= 16;
      }
      while (v41);
      v12 = *((_QWORD *)this + 7);
      v10 = *((_QWORD *)this + 5);
    }
    v29 = *((unsigned int *)this + 16);
    if (v10 != v29)
    {
      v30 = 16 * v29 - 16 * v10;
      v31 = (uint64_t *)(v12 + 16 * v10 + 8);
      do
      {
        v32 = *v31;
        *v31 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v31 += 2;
        v30 -= 16;
      }
      while (v30);
    }
LABEL_25:
    v12 = *((_QWORD *)this + 7);
    if (!v12)
      goto LABEL_6;
    goto LABEL_26;
  }
  if (v10 != v11)
  {
    v23 = 16 * v11 - 16 * v10;
    v24 = (uint64_t *)(v12 + 16 * v10 + 8);
    do
    {
      v25 = *v24;
      *v24 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v24 += 2;
      v23 -= 16;
    }
    while (v23);
    goto LABEL_25;
  }
  if (!v12)
    goto LABEL_6;
LABEL_26:
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
  *(_QWORD *)this = off_1E35A2D40;
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(unsigned int **)(v13 + 8 * i);
        if (v16 != (unsigned int *)-1)
        {
          *(_QWORD *)(v13 + 8 * i) = 0;
          if (v16)
          {
            v17 = v16 + 2;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v16 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
            }
          }
        }
      }
    }
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      JSC::JSLock::~JSLock((JSC::JSLock *)v20, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
  }
}

uint64_t JSC::dateProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::formateDateInstance(this, *((_QWORD *)a2 + 5), 3, 0, a5, a6, a7, a8);
}

uint64_t JSC::dateProtoFuncToISOString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  long double v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  double *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const WTF::String *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  JSC::VM *v86;

  v9 = *((_QWORD *)this + 7);
  v86 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v86);
  }
  v11 = *(double *)(v10 + 16);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v68 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v68 = 0xC00000002;
    *(_QWORD *)(v68 + 8) = "Invalid Date";
    *(_DWORD *)(v68 + 16) = 4;
    v85 = (WTF::StringImpl *)v68;
    v70 = JSC::createRangeError((unint64_t)this, &v85, v69);
    v76 = JSC::VM::throwException((JSC::VM *)v9, this, v70, v71, v72, v73, v74, v75);
LABEL_38:
    v38 = v76;
    v58 = v85;
    v85 = 0;
    if (!v58)
      return v38;
    if (*(_DWORD *)v58 != 2)
    {
      *(_DWORD *)v58 -= 2;
      return v38;
    }
    goto LABEL_28;
  }
  v12 = *(_QWORD *)(v10 + 24);
  v84 = v9;
  if (v12 && *(double *)(v12 + 56) == v11)
  {
    v13 = (int *)(v12 + 64);
    goto LABEL_7;
  }
  v41 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v41)
  {
    v77 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v77 = 0xC00000002;
    *(_QWORD *)(v77 + 8) = "Invalid Date";
    *(_DWORD *)(v77 + 16) = 4;
    v85 = (WTF::StringImpl *)v77;
    v76 = JSC::jsNontrivialString(v9, (JSC::VM *)&v85, v78, v79, v80, v81, v82, v83);
    goto LABEL_38;
  }
  v13 = (int *)v41;
  v11 = *(double *)(v10 + 16);
LABEL_7:
  v14 = (int)fmod(v11, 1000.0);
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = v14 + 1000;
  v16 = *v13;
  v17 = v13[1] + 1;
  v18 = v13[3];
  v19 = v13[5];
  v20 = v13[6];
  v21 = v13[7];
  if (*v13 >> 4 <= 0x270)
  {
    v22 = 0;
    v23 = 0x400000030;
LABEL_12:
    v24 = 1;
    goto LABEL_13;
  }
  v23 = 0x600000030;
  if (v16 >= 0)
    v67 = "+";
  else
    v67 = "-";
  if (v16 < 0)
    v16 = -v16;
  WTF::String::String((int **)&v85, (uint64_t)v67, 2);
  v22 = v85;
  if (!v85)
    goto LABEL_12;
  v24 = 0;
  *(_DWORD *)v85 += 2;
LABEL_13:
  WTF::makeString<WTF::String,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char>(&v85, (uint64_t)v22, v23, v16, 0x200000030, v17, 0x200000030, v18, 0x200000030, v19, 0x200000030, v20, 0x200000030, v21, 0x300000030, v15);
  v38 = JSC::jsNontrivialString(v84, (JSC::VM *)&v85, v25, v26, v27, v28, v29, v30);
  v39 = v85;
  v85 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  if ((v24 & 1) == 0)
  {
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
      return v38;
    }
    v58 = v22;
LABEL_28:
    WTF::StringImpl::~StringImpl(v58, v31, v32, v33, v34, v35, v36, v37);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  return v38;
}

uint64_t JSC::dateProtoFuncToDateString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::formateDateInstance(this, *((_QWORD *)a2 + 5), 1, 0, a5, a6, a7, a8);
}

uint64_t JSC::dateProtoFuncToTimeString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::formateDateInstance(this, *((_QWORD *)a2 + 5), 2, 0, a5, a6, a7, a8);
}

uint64_t JSC::dateProtoFuncToLocaleString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v13;
  JSC::IntlDateTimeFormat *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  JSC::IntlDateTimeFormat *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v30)(WTF::StringImpl **);
  WTF::StringImpl **v31;
  int v32;
  JSC::VM *v33;
  WTF::StringImpl *v34[3];

  v9 = *(_QWORD *)(this + 56);
  v33 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v33);
  }
  v11 = *(double *)(v10 + 16);
  v13 = *(_QWORD *)(this + 384);
  if ((v13 & 1) != 0)
  {
    v30 = *(uint64_t (**)(WTF::StringImpl **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v31 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v31 = (WTF::StringImpl **)(this - 16);
    v34[0] = *v31;
    v34[1] = (WTF::StringImpl *)this;
    v34[2] = (WTF::StringImpl *)(this + 384);
    v13 = v30(v34);
  }
  v14 = (JSC::IntlDateTimeFormat *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v9, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
  v18 = v14;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
  }
  else
  {
    v19 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v20 = *((_QWORD *)a2 + 7);
      goto LABEL_7;
    }
  }
  v20 = 10;
LABEL_7:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v14, this, v19, (JSC::Symbol *)v20, 2, 2uLL, v15, v16, v17);
  if (*(_DWORD *)(v9 + 80))
  {
    v32 = *(_DWORD *)(v9 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return JSC::IntlDateTimeFormat::format(v18, this, v11);
}

uint64_t JSC::dateProtoFuncToLocaleDateString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v13;
  JSC::IntlDateTimeFormat *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  JSC::IntlDateTimeFormat *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v30)(WTF::StringImpl **);
  WTF::StringImpl **v31;
  int v32;
  JSC::VM *v33;
  WTF::StringImpl *v34[3];

  v9 = *(_QWORD *)(this + 56);
  v33 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v33);
  }
  v11 = *(double *)(v10 + 16);
  v13 = *(_QWORD *)(this + 384);
  if ((v13 & 1) != 0)
  {
    v30 = *(uint64_t (**)(WTF::StringImpl **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v31 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v31 = (WTF::StringImpl **)(this - 16);
    v34[0] = *v31;
    v34[1] = (WTF::StringImpl *)this;
    v34[2] = (WTF::StringImpl *)(this + 384);
    v13 = v30(v34);
  }
  v14 = (JSC::IntlDateTimeFormat *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v9, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
  v18 = v14;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
  }
  else
  {
    v19 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v20 = *((_QWORD *)a2 + 7);
      goto LABEL_7;
    }
  }
  v20 = 10;
LABEL_7:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v14, this, v19, (JSC::Symbol *)v20, 0, 0, v15, v16, v17);
  if (*(_DWORD *)(v9 + 80))
  {
    v32 = *(_DWORD *)(v9 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return JSC::IntlDateTimeFormat::format(v18, this, v11);
}

uint64_t JSC::dateProtoFuncToLocaleTimeString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v13;
  JSC::IntlDateTimeFormat *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  JSC::IntlDateTimeFormat *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v30)(WTF::StringImpl **);
  WTF::StringImpl **v31;
  int v32;
  JSC::VM *v33;
  WTF::StringImpl *v34[3];

  v9 = *(_QWORD *)(this + 56);
  v33 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v33);
  }
  v11 = *(double *)(v10 + 16);
  v13 = *(_QWORD *)(this + 384);
  if ((v13 & 1) != 0)
  {
    v30 = *(uint64_t (**)(WTF::StringImpl **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v31 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v31 = (WTF::StringImpl **)(this - 16);
    v34[0] = *v31;
    v34[1] = (WTF::StringImpl *)this;
    v34[2] = (WTF::StringImpl *)(this + 384);
    v13 = v30(v34);
  }
  v14 = (JSC::IntlDateTimeFormat *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v9, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
  v18 = v14;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
  }
  else
  {
    v19 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v20 = *((_QWORD *)a2 + 7);
      goto LABEL_7;
    }
  }
  v20 = 10;
LABEL_7:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v14, this, v19, (JSC::Symbol *)v20, 1, 1uLL, v15, v16, v17);
  if (*(_DWORD *)(v9 + 80))
  {
    v32 = *(_DWORD *)(v9 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return JSC::IntlDateTimeFormat::format(v18, this, v11);
}

unint64_t JSC::dateProtoFuncGetTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v7);
  }
  v4 = *(double *)(v3 + 16);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v4, v4 == (double)(int)v5)
    && ((_DWORD)v5 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

uint64_t JSC::dateProtoFuncGetFullYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 4) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 4) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCFullYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *(unsigned int *)v12 | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetMonth(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 5) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 5) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCMonth(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 1) | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 7) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 7) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 3) | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetDay(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 8) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 8) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCDay(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 4) | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetHours(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 9) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 9) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCHours(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 5) | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetMinutes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 10) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 10) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCMinutes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 6) | 0xFFFE000000000000;
}

uint64_t JSC::dateProtoFuncGetSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return *((unsigned int *)v10 + 11) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return *((unsigned int *)v10 + 11) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncGetUTCSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  v14 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14);
  }
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(double *)(v11 + 56) == *(double *)(v10 + 16))
  {
    v12 = (double *)(v11 + 64);
  }
  else
  {
    v12 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)v10, (JSC::DateCache *)(v9 + 90592), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v12)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v12 + 7) | 0xFFFE000000000000;
}

unint64_t JSC::dateProtoFuncGetMilliSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  else
  {
    return (int)(*(double *)(v3 + 16) - floor(*(double *)(v3 + 16) / 1000.0) * 1000.0) | 0xFFFE000000000000;
  }
}

unint64_t JSC::dateProtoFuncGetUTCMilliseconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  else
  {
    return (int)(*(double *)(v3 + 16) - floor(*(double *)(v3 + 16) / 1000.0) * 1000.0) | 0xFFFE000000000000;
  }
}

unint64_t JSC::dateProtoFuncGetTimezoneOffset(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v8;
  JSC::DateInstance *v9;
  double *v10;
  int8x16_t *v12;

  v8 = (int8x16_t *)*((_QWORD *)this + 7);
  v12 = v8;
  v9 = (JSC::DateInstance *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, (JSC::VM **)&v12);
  }
  v10 = JSC::DateInstance::gregorianDateTime(v9, v8 + 5662, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v10)
    return -*((_DWORD *)v10 + 8) | 0xFFFE000000000000;
  else
    return 0x7FFA000000000000;
}

uint64_t JSC::dateProtoFuncGetYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  JSC::VM *v23;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0
    && &JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = *(double **)(v9 + 24);
    if (v10)
    {
      v11 = v10[1];
      v12 = *(double *)(v9 + 16);
      if (v11 == v12)
        return (*((_DWORD *)v10 + 4) - 1900) | 0xFFFE000000000000;
    }
    else
    {
      v12 = *(double *)(v9 + 16);
      v14 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = (uint64_t)v8 + 16 * (((v16 >> 31) ^ v16) & 0xF) + 92736;
      if (*(double *)v17 == v12)
      {
        v18 = (uint64_t *)(v17 + 8);
      }
      else
      {
        *(double *)v17 = v12;
        v20 = WTF::fastMalloc((WTF *)0x68);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0x7FF8000000000000;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        v22 = *(_DWORD **)(v17 + 8);
        v18 = (uint64_t *)(v17 + 8);
        v21 = v22;
        *v18 = v20;
        if (v22)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v21;
        }
      }
      v10 = (double *)*v18;
      *(_DWORD *)v10 = *(_DWORD *)*v18 + 1;
      v19 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = v10;
      if (v19)
      {
        if (*v19 == 1)
        {
          WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = *(double **)(v9 + 24);
        }
        else
        {
          --*v19;
        }
      }
      v11 = v10[1];
    }
    if (v11 != v12)
    {
      JSC::DateCache::msToGregorianDateTime((uint64_t)v8 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v12);
      v10 = *(double **)(v9 + 24);
      v10[1] = v12;
    }
    return (*((_DWORD *)v10 + 4) - 1900) | 0xFFFE000000000000;
  }
  return JSC::throwTypeError(this, &v23);
}

unint64_t JSC::dateProtoFuncSetTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSObject *v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  double v19;
  uint64_t v20;
  JSC::VM *v21;

  v9 = *((_QWORD *)this + 7);
  v21 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v21);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
    goto LABEL_19;
  }
  v11 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v20 = (uint64_t)v11;
  if ((unint64_t)v11 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v11;
    goto LABEL_7;
  }
  v12 = (unint64_t)v11 - 0x2000000000000;
  if (v12 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_19:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_7;
  }
  v13 = *(double *)&v12;
LABEL_7:
  v14 = fabs(v13);
  v15 = trunc(v13) + 0.0;
  if (v14 > 8.64e15)
    v15 = NAN;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_10;
  v18 = *(_DWORD *)(v9 + 80);
  if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
  {
    v19 = v15;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v15 = v19;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_10:
  *(double *)(v10 + 16) = v15;
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v16 = (int)v15, v15 == (double)(int)v16)
    && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
  {
    return v16 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v15 + 0x2000000000000;
  }
}

unint64_t JSC::dateProtoFuncSetMilliSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)1, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCMilliseconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)1, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)2, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCSeconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)2, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetMinutes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)3, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCMinutes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)3, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetHours(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)4, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCHours(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromTimeArgs(this, (uint64_t)a2, (JSC::CallFrame *)4, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)1, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)1, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetMonth(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)2, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCMonth(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)2, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetFullYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)3, 1, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetUTCFullYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSC::setNewValueFromDateArgs(this, a2, (JSC::CallFrame *)3, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::dateProtoFuncSetYear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  unsigned __int8 *v14;
  double v15;
  double v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  BOOL v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  _BOOL4 v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  void *v42;
  _DWORD *v43;
  int v44;
  int8x16_t v45;
  __int128 v46;
  JSC::VM *v47;
  unsigned __int8 *v48;

  v9 = *((_QWORD *)this + 7);
  v47 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v47);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_20;
  v12 = *(double *)(v10 + 16);
  v13 = floor(v12 / 1000.0);
  v14 = *(unsigned __int8 **)(v10 + 24);
  if (v14)
  {
    v15 = *((double *)v14 + 1);
    if (v15 == v12)
      goto LABEL_8;
  }
  else
  {
    JSC::DateCache::cachedDateInstanceData((JSC::DateCache *)(v9 + 90592), v12, &v48);
    v14 = v48;
    v43 = *(_DWORD **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = v48;
    if (v43)
    {
      if (*v43 == 1)
      {
        WTF::fastFree((unint64_t)v43, v42, (uint64_t)a3, a4, a5, a6, a7, a8);
        v14 = *(unsigned __int8 **)(v10 + 24);
      }
      else
      {
        --*v43;
      }
    }
    v15 = *((double *)v14 + 1);
  }
  if (v15 != v12)
  {
    JSC::DateCache::msToGregorianDateTime(v9 + 90592, 1, (uint64_t)(v14 + 16), a4, a5, a6, a7, a8, v12);
    v14 = *(unsigned __int8 **)(v10 + 24);
    *((double *)v14 + 1) = v12;
  }
LABEL_8:
  v16 = v12 - v13 * 1000.0;
  v17 = *((int8x16_t *)v14 + 1);
  v45 = v17;
  v46 = *((_OWORD *)v14 + 2);
  if (*((_DWORD *)a2 + 8) == 1)
    v18 = 10;
  else
    v18 = *((_QWORD *)a2 + 6);
  v48 = (unsigned __int8 *)v18;
  v25 = JSC::JSValue::toIntegerPreserveNaN(&v48, this, (uint64_t)a3, a4, a5, a6, a7, a8, v17);
  if (*(_DWORD *)(v9 + 80))
  {
    v44 = *(_DWORD *)(v9 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v19, v20, v21, v22, v23, v24);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_20:
    *(_QWORD *)(v10 + 16) = 0x7FF8000000000000;
    return 0x7FFA000000000000;
  }
  v26 = v25 > 99.0 || v25 < 0.0;
  v27 = v25 + 1900.0;
  if (v26)
    v27 = v25;
  v28 = (*(_QWORD *)&v27 >> 52) & 0x7FFLL;
  if ((v28 - 1023) <= 0x53)
  {
    v31 = *(_QWORD *)&v27 >> (51 - (*(_QWORD *)&v27 >> 52));
    if (v28 > 0x433)
      LODWORD(v31) = *(_QWORD *)&v27 << ((*(_QWORD *)&v27 >> 52) - 51);
    if (v28 >= 0x41F)
      v29 = v31;
    else
      v29 = (((1 << ((*(_QWORD *)&v27 >> 52) + 1)) - 1) & v31) + (1 << ((*(_QWORD *)&v27 >> 52) + 1));
    if (v27 < 0.0)
      v29 = -v29;
  }
  else
  {
    v29 = 0;
  }
  v32 = v45.i32[1] / 12 + v29;
  v33 = v45.i32[1] % 12;
  if (v45.i32[1] % 12 < 0)
  {
    v33 = v45.i32[1] % 12 + 12;
    --v32;
  }
  v34 = 1;
  HIDWORD(v36) = -1030792151 * v32 + 85899344;
  LODWORD(v36) = HIDWORD(v36);
  v35 = v36 >> 4;
  LODWORD(v36) = HIDWORD(v36);
  v37 = (v36 >> 2) > 0x28F5C28;
  if (v35 >= 0xA3D70B)
    v34 = v37;
  if ((v32 & 3) != 0)
    v34 = 0;
  v38 = v16
      + ((double)SHIDWORD(v46) + ((double)SDWORD2(v46) + (double)SDWORD1(v46) * 60.0) * 60.0) * 1000.0
      + (floor(floor(((double)v32 + -1.0) / 400.0)+ -4.0+ floor(((double)v32 + -1.0) * 0.25)+ -492.0+ ((double)v32 + -1970.0) * 365.0- (floor(((double)v32 + -1.0) / 100.0)+ -19.0))+ (double)(v45.i32[3] + WTF::firstDayOfMonth[12 * v34 + v33] - 1))* 86400000.0;
  if (COERCE__INT64(fabs(v38)) <= 0x7FEFFFFFFFFFFFFFLL)
    v38 = v38
        - (double)(int)(JSC::DateCache::localTimeOffset((uint64_t **)(v9 + 90592), (WTF *)(uint64_t)v38, 1, v20, v21, v22, v23, v24) >> 32);
  v39 = trunc(v38) + 0.0;
  v40 = NAN;
  if (fabs(v38) <= 8.64e15)
    v40 = v39;
  *(double *)(v10 + 16) = v40;
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v41 = (int)v40, v40 == (double)(int)v41)
    && ((_DWORD)v41 || (*(_QWORD *)&v40 & 0x8000000000000000) == 0))
  {
    return v41 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v40 + 0x2000000000000;
  }
}

uint64_t JSC::dateProtoFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;

  v9 = *((_QWORD *)this + 7);
  v46 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 - 51 < 6)
  {
    v10 = 10;
LABEL_30:
    v45 = v10;
    v38 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v45, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_31;
  }
  v45 = *((_QWORD *)a2 + 5);
  if (v11 > 0x16)
    goto LABEL_4;
  v38 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_31:
  v10 = v38;
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v39 = *(_DWORD *)(v9 + 80);
    if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v18 = JSC::JSObject::toPrimitive((JSC::Structure *)v10, (JSC::VM **)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v40 = *(_DWORD *)(v9 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (v18 >> 49)
  {
    v19 = (double)(int)v18;
    if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v19 = v18 - 0x2000000000000;
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 2;
  }
  v26 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2480), v13, v14, v15, v16, v17);
  if (*(_DWORD *)(v9 + 80))
  {
    v41 = *(_DWORD *)(v9 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v42) = 0;
    return JSC::throwTypeError((unint64_t)this, &v46, (uint64_t)"toISOString is not a function", 30);
  }
  if (*(_BYTE *)(v26 + 5) != 26)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v42, v26);
    if ((_BYTE)v42)
      goto LABEL_18;
    return JSC::throwTypeError((unint64_t)this, &v46, (uint64_t)"toISOString is not a function", 30);
  }
  v27 = *(_QWORD *)(v26 + 24);
  if ((v27 & 1) != 0)
    v27 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v27 + 5) == 8)
  {
    LOBYTE(v42) = 1;
    v43 = *(_QWORD *)(v27 + 40);
    LOBYTE(v44) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                             + 0x4C));
  }
  else
  {
    LOBYTE(v42) = 2;
    v28 = *(_QWORD *)(v26 + 16);
    v43 = v27;
    v44 = v28;
  }
LABEL_18:
  v35 = JSC::call((uint64_t *)this, v26, (unsigned __int8 *)&v42, v10, *(_QWORD *)(v9 + 41960), v23, v24, v25);
  if (*(_DWORD *)(v9 + 80))
  {
    v36 = *(_DWORD *)(v9 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v29, v30, v31, v32, v33, v34);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return v35;
}

uint64_t JSC::formateDateInstance(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;

  v8 = *((_QWORD *)a1 + 7);
  v39 = (JSC::VM *)v8;
  if ((this & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v39);
  }
  if ((_DWORD)a4)
  {
    v11 = *(_QWORD *)(this + 24);
    if (v11 && *(double *)(v11 + 56) == *(double *)(this + 16))
    {
      v12 = (int *)(v11 + 64);
LABEL_7:
      JSC::formatDateTime(v12, a3, a4, (JSC::DateCache *)(v8 + 90592), a5, a6, a7, a8, &v38);
      goto LABEL_8;
    }
    v12 = (int *)JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)this, (JSC::DateCache *)(v8 + 90592), a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = (int *)JSC::DateInstance::gregorianDateTime((JSC::DateInstance *)this, (int8x16_t *)(v8 + 90592), a3, a4, a5, a6, a7, a8);
  }
  if (v12)
    goto LABEL_7;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0xC00000002;
  *(_QWORD *)(v29 + 8) = "Invalid Date";
  *(_DWORD *)(v29 + 16) = 4;
  v38 = (WTF::StringImpl *)v29;
LABEL_8:
  v26 = JSC::jsNontrivialString(v8, (JSC::VM *)&v38, v13, v14, v15, v16, v17, v18);
  v27 = v38;
  v38 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v26;
}

double *JSC::DateInstance::gregorianDateTime(JSC::DateInstance *this, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int32 v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int8x16_t *v42;
  uint64_t *v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v77;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v124;
  uint64_t v125;
  int8x16_t *v126;
  int8x16_t *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  _OWORD v139[2];
  uint64_t v140;

  v10 = (double *)*((_QWORD *)this + 3);
  if (v10)
  {
    v11 = v10[1];
    v12 = *((double *)this + 2);
    if (v11 == v12)
      return v10 + 2;
  }
  else
  {
    v12 = *((double *)this + 2);
    v39 = (~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) ^ ((~(*(_QWORD *)&v12 << 32) + *(_QWORD *)&v12) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((unint64_t)(v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v42 = &a2[(((v41 >> 31) ^ v41) & 0xF) + 134];
    if (*(double *)v42->i64 == v12)
    {
      v43 = &v42->i64[1];
    }
    else
    {
      *(double *)v42->i64 = v12;
      v60 = WTF::fastMalloc((WTF *)0x68);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = 0x7FF8000000000000;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0x7FF8000000000000;
      *(_OWORD *)(v60 + 64) = 0u;
      *(_OWORD *)(v60 + 80) = 0u;
      *(_QWORD *)(v60 + 96) = 0;
      v62 = (_DWORD *)v42->i64[1];
      v43 = &v42->i64[1];
      v61 = v62;
      *v43 = v60;
      if (v62)
      {
        if (*v61 == 1)
          WTF::fastFree((unint64_t)v61, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v61;
      }
    }
    v10 = (double *)*v43;
    *(_DWORD *)v10 = *(_DWORD *)*v43 + 1;
    v44 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v10;
    if (v44)
    {
      if (*v44 == 1)
      {
        WTF::fastFree((unint64_t)v44, a2, a3, a4, a5, a6, a7, a8);
        v10 = (double *)*((_QWORD *)this + 3);
      }
      else
      {
        --*v44;
      }
    }
    v11 = v10[1];
  }
  if (v11 != v12)
  {
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v21 = 0;
      v20 = 0;
      v23 = 0;
      v22 = v12;
LABEL_14:
      if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        WTF::GregorianDateTime::GregorianDateTime((uint64_t)v139, v23 | (v20 << 32) | v21, v22);
        v137 = v140;
        v138 = v139[1];
        *((_OWORD *)v10 + 1) = v139[0];
        *((_OWORD *)v10 + 2) = v138;
        *((_QWORD *)v10 + 6) = v137;
LABEL_23:
        v10 = (double *)*((_QWORD *)this + 3);
        v10[1] = v12;
        return v10 + 2;
      }
      v24 = (uint64_t)v22 - 86399999;
      if ((uint64_t)v22 >= 0)
        v24 = (uint64_t)v22;
      v25 = (int)v24 / 86400000;
      v26 = (uint64_t)v22 - 86400000 * v25;
      v27 = a2[132].u8[8];
      if (a2[132].i8[8])
      {
        v28 = a2[132].i32[1] + v25 - a2[131].i32[2];
        if ((v28 - 1) <= 0x1B)
        {
          v29 = a2[131].i32[3];
          LODWORD(v30) = a2[132].i32[0];
          a2[131].i32[2] = v25;
          a2[132].i32[1] = v28;
LABEL_20:
          v31 = v26 / 3600000;
          v32 = v26 / 60000 % 60;
          v33 = v26 / 1000 % 60;
          if ((v29 & 3) != 0)
          {
            v34 = 0;
          }
          else
          {
            HIDWORD(v37) = -1030792151 * v29 + 85899344;
            LODWORD(v37) = HIDWORD(v37);
            if ((v37 >> 4) < 0xA3D70B)
            {
              v34 = 1;
            }
            else
            {
              HIDWORD(v38) = -1030792151 * v29 + 85899344;
              LODWORD(v38) = HIDWORD(v38);
              v34 = (v38 >> 2) > 0x28F5C28;
            }
          }
          v35 = v28 + WTF::firstDayOfMonth[12 * v34 + (int)v30] - 1;
          *((_DWORD *)v10 + 4) = v29;
          *((_DWORD *)v10 + 5) = v30;
          *((_DWORD *)v10 + 6) = v35;
          *((_DWORD *)v10 + 7) = v28;
          *((_DWORD *)v10 + 8) = (v25 + 4) % 7 + ((v25 + 4) % 7 < 0 ? 7 : 0);
          *((_DWORD *)v10 + 9) = v31;
          *((_DWORD *)v10 + 10) = v32;
          *((_DWORD *)v10 + 11) = v33;
          *((_DWORD *)v10 + 12) = (int)v20 / 60000;
          *((_DWORD *)v10 + 13) = v21 != 0;
          goto LABEL_23;
        }
      }
      v45 = (v25 + 146816528) % 146097;
      v46 = (v45 - 1) / 36524;
      v47 = (v45 - 1) % 36524;
      v48 = (v47 + 1) / 1461;
      v49 = (v47 + 1) % 1461;
      v50 = ((22983 * (__int16)(v49 - 1)) >> 23) + ((22983 * (__int16)(v49 - 1)) >> 31);
      v51 = v47 - 1460;
      v53 = (v45 + 36522) < 0x11D57 || v51 < 0xFFFFF497;
      v54 = v53 && (v49 + 363) < 0x2D9;
      v55 = v54 + (__int16)(v49 - 1) % 365;
      if (v54)
        v56 = 60;
      else
        v56 = 59;
      v57 = __OFSUB__(v55, v56);
      v58 = v55 - v56;
      if (((v58 & 0x80000000) != 0) != v57)
      {
        v28 = v55 - 30;
        v59 = 0x100000000;
        if (v55 <= 30)
        {
          v59 = 0;
          v28 = v55 + 1;
        }
        goto LABEL_50;
      }
      if ((int)v58 > 30)
      {
        if (v58 >= 0x3D)
        {
          if (v58 >= 0x5C)
          {
            if (v58 >= 0x7A)
            {
              if (v58 >= 0x99)
              {
                if (v58 >= 0xB8)
                {
                  if (v58 >= 0xD6)
                  {
                    if (v58 >= 0xF5)
                    {
                      if (v58 >= 0x113)
                      {
                        if (v58 >= 0x132)
                        {
                          v59 = 0;
                          v28 = 0;
LABEL_50:
                          v29 = (100 * v46 + 400 * ((v25 + 146816528) / 146097) + 4 * v48 - 400000 + v50) | v59;
                          a2[131].i32[2] = v25;
                          a2[131].i32[3] = v29;
                          v30 = HIDWORD(v59);
                          a2[132].i32[0] = HIDWORD(v59);
                          a2[132].i32[1] = v28;
                          if (!v27)
                            a2[132].i8[8] = 1;
                          goto LABEL_20;
                        }
                        v59 = 0xB00000000;
                        v58 -= 275;
                      }
                      else
                      {
                        v59 = 0xA00000000;
                        v58 -= 245;
                      }
                    }
                    else
                    {
                      v59 = 0x900000000;
                      v58 -= 214;
                    }
                  }
                  else
                  {
                    v59 = 0x800000000;
                    v58 -= 184;
                  }
                }
                else
                {
                  v59 = 0x700000000;
                  v58 -= 153;
                }
              }
              else
              {
                v59 = 0x600000000;
                v58 -= 122;
              }
            }
            else
            {
              v59 = 0x500000000;
              v58 -= 92;
            }
          }
          else
          {
            v59 = 0x400000000;
            v58 -= 61;
          }
        }
        else
        {
          v58 -= 31;
          v59 = 0x300000000;
        }
      }
      else
      {
        v59 = 0x200000000;
      }
      v28 = v58 + 1;
      goto LABEL_50;
    }
    v13 = 8640000000000000;
    v14 = (uint64_t)v12;
    v15 = &a2->i64[1];
    if ((unint64_t)((uint64_t)v12 + 8640000000000000) >= 0x3D641185B80001)
      v14 = WTF::equivalentTime((WTF *)(uint64_t)v12);
    if (a2->i32[3])
      JSC::DateCache::DSTCache::reset((JSC::DateCache::DSTCache *)&a2->u64[1]);
    v16 = (unint64_t *)a2[65].i64[0];
    v17 = v16[1];
    if (v17 <= v14 && v14 <= (uint64_t)v16[2])
    {
      v18 = *v15 + 1;
      *v15 = v18;
      v16[3] = v18;
      v19 = *v16;
LABEL_12:
      v20 = HIDWORD(v19);
LABEL_13:
      v21 = v19;
      v22 = v12 + (double)(int)v20;
      v23 = v19 & 0xFFFFFF00;
      goto LABEL_14;
    }
    v63 = 0;
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = a2[v63 + 1].i64[1];
      if (v66 <= v14)
      {
        if (v65)
        {
          if (v65->i64[1] < v66)
            v65 = &a2[v63 + 1];
        }
        else
        {
          v65 = &a2[v63 + 1];
        }
      }
      else
      {
        v67 = a2[v63 + 2].i64[0];
        if (v67 > v14 && (!v64 || v64[1].i64[0] > v67))
          v64 = &a2[v63 + 1];
      }
      v63 += 2;
    }
    while (v63 != 64);
    if (!v65)
    {
      v65 = (int8x16_t *)a2[65].i64[0];
      if (v17 <= (uint64_t)v16[2])
      {
        v126 = v64;
        v127 = (int8x16_t *)JSC::DateCache::DSTCache::leastRecentlyUsed(&a2->i64[1], v64);
        v64 = v126;
        v65 = v127;
      }
    }
    if (!v64)
    {
      v64 = (int8x16_t *)a2[65].i64[1];
      if (v64->i64[1] <= v64[1].i64[0] || v65 == v64)
        v64 = (int8x16_t *)JSC::DateCache::DSTCache::leastRecentlyUsed(&a2->i64[1], v65);
    }
    a2[65].i64[0] = (uint64_t)v65;
    a2[65].i64[1] = (uint64_t)v64;
    v69 = v65[1].i64[0];
    if (v65->i64[1] > v69)
    {
      v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, a3, a4, a5, a6, a7, a8);
      v20 = HIDWORD(v19);
      *(_QWORD *)a2[65].i64[0] = v19;
      v124 = (_QWORD *)a2[65].i64[0];
      v124[1] = v14;
      v124[2] = v14;
      v125 = a2->i64[1] + 1;
      a2->i64[1] = v125;
      v124[3] = v125;
      goto LABEL_13;
    }
    if (v14 <= v69)
    {
      v70 = *v15 + 1;
      *v15 = v70;
      v65[1].i64[1] = v70;
      v19 = v65->i64[0];
      goto LABEL_12;
    }
    if (v14 - 1641600000 > v69)
    {
      v128 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, a3, a4, a5, a6, a7, a8);
      v20 = HIDWORD(v128);
      v129 = (_QWORD *)a2[65].i64[1];
      v130 = v129[1];
      v131 = v129[2];
      v132 = v128;
      if (*(unsigned __int8 *)v129 != v128
        || *((_DWORD *)v129 + 1) != HIDWORD(v128)
        || v130 - 1641600000 > v14
        || v131 < v14)
      {
        if (v130 <= v131)
        {
          v129 = JSC::DateCache::DSTCache::leastRecentlyUsed(&a2->i64[1], (_QWORD *)a2[65].i64[0]);
          a2[65].i64[1] = (uint64_t)v129;
        }
        v129[1] = v14;
        v129[2] = v14;
        *v129 = v132;
        v136 = a2->i64[1] + 1;
        a2->i64[1] = v136;
        *(_QWORD *)(a2[65].i64[1] + 24) = v136;
      }
      else
      {
        v129[1] = v14;
      }
      a2[65] = vextq_s8(a2[65], a2[65], 8uLL);
      LODWORD(v19) = v132;
      goto LABEL_13;
    }
    v71 = *v15;
    v72 = *v15 + 1;
    *v15 = v72;
    v65[1].i64[1] = v72;
    if (v69 < 8639998358400000)
      v13 = v69 + 1641600000;
    if (v13 > v64->i64[1])
    {
      v79 = v71 + 2;
      *v15 = v71 + 2;
    }
    else
    {
      v73 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, a3, a4, a5, a6, a7, a8);
      v64 = (int8x16_t *)a2[65].i64[1];
      v74 = v64->i64[1];
      v75 = v64[1].i64[0];
      v77 = v64->u8[0] == v73 && v64->i32[1] == HIDWORD(v73) && v74 - 1641600000 <= v13;
      if (v77 && v75 >= v13)
      {
        v64->i64[1] = v13;
LABEL_104:
        v80 = (unsigned __int8 *)a2[65].i64[0];
        if (*v80 == v64->u8[0] && *((_DWORD *)v80 + 1) == v64->i32[1])
        {
          *((_QWORD *)v80 + 2) = v64[1].i64[0];
          *v64 = (int8x16_t)xmmword_19914EE70;
          v64[1] = (int8x16_t)xmmword_19914EE80;
          v19 = *(_QWORD *)a2[65].i64[0];
          goto LABEL_12;
        }
        v81 = v64->i64[1];
        v82 = *((_QWORD *)v80 + 2);
        v77 = v81 < v82;
        v83 = v81 - v82;
        if (v77)
          ++v83;
        v84 = v82 + (v83 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, a3, a4, a5, a6, a7, a8);
        v20 = HIDWORD(v19);
        v91 = (unsigned __int8 *)a2[65].i64[0];
        if (*v91 == v19 && *((_DWORD *)v91 + 1) == HIDWORD(v19))
        {
          *((_QWORD *)v91 + 2) = v84;
          if (v14 <= v84)
            goto LABEL_13;
        }
        else
        {
          v93 = a2[65].i64[1];
          *(_QWORD *)(v93 + 8) = v84;
          if (v14 >= v84)
            goto LABEL_167;
          v84 = *((_QWORD *)v91 + 2);
        }
        v94 = *(_QWORD *)(a2[65].i64[1] + 8);
        v77 = v94 < v84;
        v95 = v94 - v84;
        if (v77)
          ++v95;
        v96 = v84 + (v95 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, v85, v86, v87, v88, v89, v90);
        v20 = HIDWORD(v19);
        v91 = (unsigned __int8 *)a2[65].i64[0];
        if (*v91 == v19 && *((_DWORD *)v91 + 1) == HIDWORD(v19))
        {
          *((_QWORD *)v91 + 2) = v96;
          if (v14 <= v96)
            goto LABEL_13;
        }
        else
        {
          v93 = a2[65].i64[1];
          *(_QWORD *)(v93 + 8) = v96;
          if (v14 >= v96)
            goto LABEL_167;
          v96 = *((_QWORD *)v91 + 2);
        }
        v104 = *(_QWORD *)(a2[65].i64[1] + 8);
        v77 = v104 < v96;
        v105 = v104 - v96;
        if (v77)
          ++v105;
        v106 = v96 + (v105 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, v97, v98, v99, v100, v101, v102);
        v20 = HIDWORD(v19);
        v91 = (unsigned __int8 *)a2[65].i64[0];
        if (*v91 == v19 && *((_DWORD *)v91 + 1) == HIDWORD(v19))
        {
          *((_QWORD *)v91 + 2) = v106;
          if (v14 <= v106)
            goto LABEL_13;
        }
        else
        {
          v93 = a2[65].i64[1];
          *(_QWORD *)(v93 + 8) = v106;
          if (v14 >= v106)
            goto LABEL_167;
          v106 = *((_QWORD *)v91 + 2);
        }
        v114 = *(_QWORD *)(a2[65].i64[1] + 8);
        v77 = v114 < v106;
        v115 = v114 - v106;
        if (v77)
          ++v115;
        v116 = v106 + (v115 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, v107, v108, v109, v110, v111, v112);
        v20 = HIDWORD(v19);
        v91 = (unsigned __int8 *)a2[65].i64[0];
        if (*v91 == v19 && *((_DWORD *)v91 + 1) == HIDWORD(v19))
        {
          *((_QWORD *)v91 + 2) = v116;
          if (v14 <= v116)
            goto LABEL_13;
        }
        else
        {
          v93 = a2[65].i64[1];
          *(_QWORD *)(v93 + 8) = v116;
          if (v14 >= v116)
            goto LABEL_167;
        }
        v19 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a2, 0, v117, v118, v119, v120, v121, v122);
        v20 = HIDWORD(v19);
        v91 = (unsigned __int8 *)a2[65].i64[0];
        if (__PAIR64__(*((_DWORD *)v91 + 1), *v91) == v19)
        {
          *((_QWORD *)v91 + 2) = v14;
          goto LABEL_13;
        }
        v93 = a2[65].i64[1];
        *(_QWORD *)(v93 + 8) = v14;
LABEL_167:
        a2[65].i64[0] = v93;
        a2[65].i64[1] = (uint64_t)v91;
        goto LABEL_13;
      }
      if (v74 <= v75)
      {
        v64 = (int8x16_t *)JSC::DateCache::DSTCache::leastRecentlyUsed(&a2->i64[1], (_QWORD *)a2[65].i64[0]);
        a2[65].i64[1] = (uint64_t)v64;
      }
      v64->i64[1] = v13;
      v64[1].i64[0] = v13;
      v64->i64[0] = v73;
      v79 = a2->i64[1] + 1;
      a2->i64[1] = v79;
      v64 = (int8x16_t *)a2[65].i64[1];
    }
    v64[1].i64[1] = v79;
    goto LABEL_104;
  }
  return v10 + 2;
}

unint64_t WTF::makeString<WTF::String,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16)
{
  unint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;

  v30 = a3;
  v31 = a4;
  v28 = a5;
  v29 = a6;
  v26 = a7;
  v27 = a8;
  v24 = a9;
  v25 = a10;
  v22 = a11;
  v23 = a12;
  v20 = a13;
  v21 = a14;
  v18 = a15;
  v19 = a16;
  result = WTF::tryMakeString<WTF::String,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char>(a1, a2, (uint64_t)&v30, 45, (uint64_t)&v28, 45, (uint64_t)&v26, 0x54u, (uint64_t)&v24, 0x3Au, (uint64_t)&v22, 0x3Au, (uint64_t)&v20, 0x2Eu, (uint64_t)&v18, 0x5Au);
  if (!*a1)
    __break(0xC471u);
  return result;
}

unint64_t WTF::tryMakeString<WTF::String,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16)
{
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  int v22;
  unsigned __int8 v23;
  uint64_t v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = a2;
  v36 = a3;
  v37 = *(_DWORD *)(a3 + 8);
  v35 = a4;
  v33 = a5;
  v34 = *(_DWORD *)(a5 + 8);
  v32 = a6;
  v30 = a7;
  v31 = *(_DWORD *)(a7 + 8);
  v29 = a8;
  v27 = a9;
  v28 = *(_DWORD *)(a9 + 8);
  v26 = a10;
  v24 = a11;
  v25 = *(_DWORD *)(a11 + 8);
  v23 = a12;
  v21 = a13;
  v22 = *(_DWORD *)(a13 + 8);
  v20 = a14;
  v18 = a15;
  v19 = *(_DWORD *)(a15 + 8);
  v17 = a16;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(a1, &v38, &v36, &v35, &v33, &v32, &v30, &v29, &v27, &v26, &v24, &v23, &v21, &v20, &v18, &v17);
}

unint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_QWORD *a1, uint64_t *a2, uint64_t *a3, char *a4, uint64_t *a5, char *a6, uint64_t *a7, unsigned __int8 *a8, uint64_t *a9, unsigned __int8 *a10, uint64_t *a11, unsigned __int8 *a12, uint64_t *a13, unsigned __int8 *a14, uint64_t *a15, unsigned __int8 *a16)
{
  int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t result;
  uint64_t v46;
  _BOOL4 v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v58;
  _BYTE v59[4];
  unsigned int v60;

  if (*a2)
    v20 = *(_DWORD *)(*a2 + 4);
  else
    v20 = 0;
  v21 = *((_DWORD *)a3 + 2);
  if ((v21 & 0x80000000) != 0)
  {
    v48 = -v21;
    v22 = 1;
    do
    {
      ++v22;
      v49 = v48 >= 0xA;
      v48 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v22 = 0;
    do
    {
      ++v22;
      v23 = v21 > 9;
      v21 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a3 + 4) <= v22)
    v24 = v22;
  else
    v24 = *(_DWORD *)(*a3 + 4);
  v25 = *((_DWORD *)a5 + 2);
  if ((v25 & 0x80000000) != 0)
  {
    v50 = -v25;
    v26 = 1;
    do
    {
      ++v26;
      v49 = v50 >= 0xA;
      v50 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v26 = 0;
    do
    {
      ++v26;
      v23 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a5 + 4) <= v26)
    v27 = v26;
  else
    v27 = *(_DWORD *)(*a5 + 4);
  v28 = *((_DWORD *)a7 + 2);
  if ((v28 & 0x80000000) != 0)
  {
    v51 = -v28;
    v29 = 1;
    do
    {
      ++v29;
      v49 = v51 >= 0xA;
      v51 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v29 = 0;
    do
    {
      ++v29;
      v23 = v28 > 9;
      v28 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a7 + 4) <= v29)
    v30 = v29;
  else
    v30 = *(_DWORD *)(*a7 + 4);
  v31 = *((_DWORD *)a9 + 2);
  if ((v31 & 0x80000000) != 0)
  {
    v52 = -v31;
    v32 = 1;
    do
    {
      ++v32;
      v49 = v52 >= 0xA;
      v52 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v32 = 0;
    do
    {
      ++v32;
      v23 = v31 > 9;
      v31 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a9 + 4) <= v32)
    v33 = v32;
  else
    v33 = *(_DWORD *)(*a9 + 4);
  v34 = *((_DWORD *)a11 + 2);
  if ((v34 & 0x80000000) != 0)
  {
    v53 = -v34;
    v35 = 1;
    do
    {
      ++v35;
      v49 = v53 >= 0xA;
      v53 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v35 = 0;
    do
    {
      ++v35;
      v23 = v34 > 9;
      v34 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a11 + 4) <= v35)
    v36 = v35;
  else
    v36 = *(_DWORD *)(*a11 + 4);
  v37 = *((_DWORD *)a13 + 2);
  if ((v37 & 0x80000000) != 0)
  {
    v38 = a8;
    v54 = -v37;
    v39 = 1;
    do
    {
      ++v39;
      v49 = v54 >= 0xA;
      v54 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v38 = a8;
    v39 = 0;
    do
    {
      ++v39;
      v23 = v37 > 9;
      v37 /= 0xAu;
    }
    while (v23);
  }
  if (*(_DWORD *)(*a13 + 4) <= v39)
    v40 = v39;
  else
    v40 = *(_DWORD *)(*a13 + 4);
  v41 = *((_DWORD *)a15 + 2);
  if ((v41 & 0x80000000) != 0)
  {
    v42 = a1;
    v55 = -v41;
    v43 = 1;
    do
    {
      ++v43;
      v49 = v55 >= 0xA;
      v55 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v42 = a1;
    v43 = 0;
    do
    {
      ++v43;
      v23 = v41 > 9;
      v41 /= 0xAu;
    }
    while (v23);
  }
  v44 = *(_DWORD *)(*a15 + 4);
  if (v44 <= v43)
    v44 = v43;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>((uint64_t)v59, v20, v24, v27, v30, v33, v36, v40, v44);
  if (v59[0])
  {
    *v42 = 0;
  }
  else
  {
    v46 = *a2;
    v47 = !*a2 || (*(_BYTE *)(v46 + 16) & 4) != 0;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>((unint64_t)&v58, v60, v47, v46, (unsigned __int8 *)*a3, a3[1], *a4, a9[1], (unsigned __int8 *)*a5, a5[1], *a6, (unsigned __int8 *)*a7, a7[1], *v38, (unsigned __int8 *)*a9, a9[1], *a10, (unsigned __int8 *)*a11, a11[1],
               *a12,
               (unsigned __int8 *)*a13,
               a13[1],
               *a14,
               (unsigned __int8 *)*a15,
               a15[1],
               *a16);
    *v42 = v58;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t result;
  int v13;
  BOOL v14;
  int v15;
  _BYTE v16[4];
  int v17;

  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(1, a4, 1, a5, 1, a6, 1, a7, (uint64_t)v16, 1, a8, 1, a9, 1);
  if (a3 < 0
    || v16[0]
    || (v13 = a3 + v17, __OFADD__(a3, v17))
    || a2 < 0
    || (v14 = __OFADD__(a2, v13), v15 = a2 + v13, v14))
  {
    *(_DWORD *)(a1 + 4) = 0;
    *(_BYTE *)a1 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v15;
  }
  return result;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(unint64_t result, unsigned int a2, int a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, char a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10, char a11, unsigned __int8 *a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 *a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 *a18, uint64_t a19, unsigned __int8 a20,unsigned __int8 *a21,uint64_t a22,unsigned __int8 a23,unsigned __int8 *a24,uint64_t a25,unsigned __int8 a26)
{
  int *v30;
  _QWORD *v35;
  _QWORD v36[2];

  v35 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), v36);
        v30 = (int *)v36[0];
        if (v36[0])
        {
          *(_DWORD *)v36[0] = 2;
          v30[1] = a2;
          *((_QWORD *)v30 + 1) = v30 + 5;
          v30[4] = 4;
          result = (unint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>((char *)v30 + 20, a4, (uint64_t)a5, a6, a7, (uint64_t)a9, a10, a11, (uint64_t)a12, a13, a14, (uint64_t)a15, a16, a17, (uint64_t)a18, a19, a20, (uint64_t)a21, a22,
                                       a23,
                                       (uint64_t)a24,
                                       a25,
                                       a26);
        }
        goto LABEL_6;
      }
LABEL_12:
      v30 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v30 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_11;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), v36);
  v30 = (int *)v36[0];
  if (v36[0])
  {
    *(_DWORD *)v36[0] = 2;
    v30[1] = a2;
    *((_QWORD *)v30 + 1) = v30 + 5;
    v30[4] = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>((char *)v30 + 20, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
               a23,
               a24,
               a25,
               a26);
  }
LABEL_6:
  *v35 = v30;
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t result;
  int v18;
  BOOL v19;
  int v20;
  _BYTE v21[4];
  int v22;

  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(a3, a4, a5, a6, a7, a8, a10, a11, (uint64_t)v21, a12, a13, a14);
  if (a2 < 0
    || v21[0]
    || (v18 = a2 + v22, __OFADD__(a2, v22))
    || a1 < 0
    || (v19 = __OFADD__(a1, v18), v20 = a1 + v18, v19))
  {
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)a9 = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v20;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12)
{
  uint64_t result;
  int v16;
  BOOL v17;
  int v18;
  _BYTE v19[4];
  int v20;

  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(a3, a4, a5, a6, a7, a8, a10, a11, (uint64_t)v19, a12);
  if (a2 < 0
    || v19[0]
    || (v16 = a2 + v20, __OFADD__(a2, v20))
    || a1 < 0
    || (v17 = __OFADD__(a1, v16), v18 = a1 + v16, v17))
  {
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)a9 = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v18;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  uint64_t result;
  int v14;
  BOOL v15;
  int v16;
  _BYTE v17[4];
  int v18;

  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(a3, a4, a5, a6, a7, a8, a10, (uint64_t)v17);
  if (a2 < 0
    || v17[0]
    || (v14 = a2 + v18, __OFADD__(a2, v18))
    || a1 < 0
    || (v15 = __OFADD__(a1, v14), v16 = a1 + v14, v15))
  {
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)a9 = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v16;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;

  if ((a7 | a6) < 0)
    goto LABEL_29;
  v8 = a6 + a7;
  v9 = __OFADD__(a6, a7);
  if (a5 < 0 || v9)
    goto LABEL_29;
  v10 = __OFADD__(a5, v8);
  v11 = a5 + v8;
  v12 = v10;
  if (a4 < 0 || v12)
    goto LABEL_29;
  v10 = __OFADD__(a4, v11);
  v13 = a4 + v11;
  v14 = v10;
  if (a3 < 0 || v14)
    goto LABEL_29;
  v10 = __OFADD__(a3, v13);
  v15 = a3 + v13;
  v16 = v10;
  if (a2 < 0
    || v16
    || ((v10 = __OFADD__(a2, v15), v17 = a2 + v15, !v10) ? (v18 = 0) : (v18 = 1),
        (result & 0x80000000) != 0 || v18 || (v10 = __OFADD__((_DWORD)result, v17), v19 = result + v17, v10)))
  {
LABEL_29:
    *(_DWORD *)(a8 + 4) = 0;
    *(_BYTE *)a8 = 1;
  }
  else
  {
    *(_BYTE *)a8 = 0;
    *(_DWORD *)(a8 + 4) = v19;
  }
  return result;
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v33;

  v33 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v33, __dst);
  v25 = v33;
  if (v33)
    v25 = *(unsigned int *)(v33 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&__dst[v25], a3, a4, a5, a6, a7, a8, v24, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

unint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, uint64_t a2, unsigned __int8 *a3, unsigned int a4, char a5, unsigned __int8 *a6, unsigned int a7, char a8, unsigned __int8 *a9, uint64_t a10, uint64_t a11, unsigned __int8 *a12, uint64_t a13, uint64_t a14, unsigned __int8 *a15, uint64_t a16, uint64_t a17, unsigned __int8 *a18, uint64_t a19, uint64_t a20,unsigned __int8 *a21,uint64_t a22,uint64_t a23)
{
  unsigned int v27;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  char *v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  __int16 v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  _WORD *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  __int16 v67;
  _WORD *v68;
  uint64_t v69;
  unsigned int v70;
  _WORD *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  _WORD *v77;
  _WORD *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  __int16 v83;
  _WORD *v84;
  uint64_t v85;
  unsigned int v86;
  _WORD *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _WORD *v94;
  _WORD *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  __int16 v100;
  _WORD *v101;
  uint64_t v102;
  unsigned int v103;
  _WORD *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  _WORD *v111;
  _WORD *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  __int16 v117;
  _WORD *v118;
  uint64_t v119;
  unsigned int v120;
  _WORD *v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _WORD *v128;
  _WORD *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  __int16 v134;
  _WORD *v135;
  uint64_t v136;
  unsigned int v137;
  _WORD *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  _WORD *v145;
  _WORD *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  __int16 v151;
  _WORD *v152;
  uint64_t v153;
  _WORD *v154;
  uint64_t v155;
  unsigned int v156;
  unint64_t result;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  _BYTE v176[13];
  uint64_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x2_t v180;

  v27 = a4;
  v177 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v31 = *(int8x16_t **)(a2 + 8);
    v32 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v33 = &__dst[2 * v32];
      if (v32 >= 0x40)
      {
        v34 = &__dst[2 * (v32 & 0xFFFFFFC0)];
        v35 = 0uLL;
        v36 = __dst;
        do
        {
          v178.val[0] = *v31;
          v37 = v31[1];
          v179.val[0] = v31[2];
          v38 = v31[3];
          v31 += 4;
          v39 = v38;
          v179.val[1] = 0uLL;
          v180.val[0] = v37;
          v178.val[1] = 0uLL;
          v40 = v36;
          vst2q_s8(v40, v178);
          v40 += 32;
          v180.val[1] = 0uLL;
          vst2q_s8(v40, v180);
          v41 = v36 + 64;
          vst2q_s8(v41, v179);
          v42 = v36 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
          v36 += 128;
        }
        while (v36 != v34);
      }
      else
      {
        v34 = __dst;
      }
      while (v34 != v33)
      {
        v43 = v31->u8[0];
        v31 = (int8x16_t *)((char *)v31 + 1);
        *(_WORD *)v34 = v43;
        v34 += 2;
      }
    }
    else if ((_DWORD)v32 == 1)
    {
      *(_WORD *)__dst = v31->i16[0];
    }
    else if ((_DWORD)v32)
    {
      memcpy(__dst, v31, 2 * v32);
    }
    v44 = *(unsigned int *)(a2 + 4);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_226:
    v175 = -v27;
    v45 = 1;
    do
    {
      ++v45;
      v50 = v175 >= 0xA;
      v175 /= 0xAu;
    }
    while (v50);
    goto LABEL_16;
  }
  v44 = 0;
  if ((a4 & 0x80000000) != 0)
    goto LABEL_226;
LABEL_14:
  v45 = 0;
  v46 = v27;
  do
  {
    ++v45;
    v47 = v46 > 9;
    v46 /= 0xAu;
  }
  while (v47);
LABEL_16:
  v48 = &__dst[2 * v44];
  v49 = *((_DWORD *)a3 + 1);
  v50 = v49 >= v45;
  v51 = v49 - v45;
  if ((_DWORD)v51 != 0 && v50)
  {
    v52 = *a3;
    v53 = v48;
    v54 = v51;
    do
    {
      *(_WORD *)v53 = v52;
      v53 += 2;
      --v54;
    }
    while (v54);
  }
  else
  {
    v51 = 0;
  }
  v55 = &v48[2 * v51];
  if ((v27 & 0x80000000) != 0)
  {
    v58 = -v27;
    v59 = 12;
    do
    {
      v176[v59--] = (v58 % 0xA) | 0x30;
      v47 = v58 > 9;
      v58 /= 0xAu;
    }
    while (v47);
    v176[v59] = 45;
    if (v59 + 2 <= 14)
    {
      do
      {
        *(_WORD *)v55 = v176[v59];
        v55 += 2;
        v47 = v59++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v56 = 0;
    v57 = v27;
    do
    {
      v176[v56-- + 12] = (v57 % 0xA) | 0x30;
      v47 = v57 > 9;
      v57 /= 0xAu;
    }
    while (v47);
    if (v56 + 14 <= 13)
    {
      do
      {
        *(_WORD *)v55 = *((unsigned __int8 *)&v177 + v56);
        v55 += 2;
        v50 = __CFADD__(v56++, 1);
      }
      while (!v50);
    }
  }
  if ((v27 & 0x80000000) != 0)
  {
    v162 = -v27;
    v60 = 1;
    do
    {
      ++v60;
      v50 = v162 >= 0xA;
      v162 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v60 = 0;
    do
    {
      ++v60;
      v47 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v47);
  }
  if (v49 <= v60)
    v49 = v60;
  v61 = &v48[2 * v49];
  *(_WORD *)v61 = a5;
  v62 = v61 + 2;
  if ((a7 & 0x80000000) != 0)
  {
    v163 = -a7;
    v63 = 1;
    do
    {
      ++v63;
      v50 = v163 >= 0xA;
      v163 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v63 = 0;
    v64 = a7;
    do
    {
      ++v63;
      v47 = v64 > 9;
      v64 /= 0xAu;
    }
    while (v47);
  }
  v65 = *((_DWORD *)a6 + 1);
  v66 = v65 - v63;
  if (v65 <= v63)
  {
    v66 = 0;
  }
  else
  {
    v67 = *a6;
    v68 = v62;
    v69 = v66;
    do
    {
      *v68++ = v67;
      --v69;
    }
    while (v69);
  }
  v70 = a10;
  v71 = &v62[v66];
  if ((a7 & 0x80000000) != 0)
  {
    v74 = -a7;
    v75 = 12;
    do
    {
      v176[v75--] = (v74 % 0xA) | 0x30;
      v47 = v74 > 9;
      v74 /= 0xAu;
    }
    while (v47);
    v176[v75] = 45;
    if (v75 + 2 <= 14)
    {
      do
      {
        *v71++ = v176[v75];
        v47 = v75++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v72 = 0;
    v73 = a7;
    do
    {
      v176[v72-- + 12] = (v73 % 0xA) | 0x30;
      v47 = v73 > 9;
      v73 /= 0xAu;
    }
    while (v47);
    if (v72 + 14 <= 13)
    {
      do
      {
        *v71++ = *((unsigned __int8 *)&v177 + v72);
        v50 = __CFADD__(v72++, 1);
      }
      while (!v50);
    }
  }
  if ((a7 & 0x80000000) != 0)
  {
    v164 = -a7;
    v76 = 1;
    do
    {
      ++v76;
      v50 = v164 >= 0xA;
      v164 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v76 = 0;
    do
    {
      ++v76;
      v47 = a7 > 9;
      a7 /= 0xAu;
    }
    while (v47);
  }
  if (v65 <= v76)
    v65 = v76;
  v77 = &v62[v65];
  *v77 = a8;
  v78 = v77 + 1;
  if ((a10 & 0x80000000) != 0)
  {
    v165 = -(int)a10;
    v79 = 1;
    do
    {
      ++v79;
      v50 = v165 >= 0xA;
      v165 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v79 = 0;
    v80 = a10;
    do
    {
      ++v79;
      v47 = v80 > 9;
      v80 /= 0xAu;
    }
    while (v47);
  }
  v81 = *((_DWORD *)a9 + 1);
  v82 = v81 - v79;
  if (v81 <= v79)
  {
    v82 = 0;
  }
  else
  {
    v83 = *a9;
    v84 = v78;
    v85 = v82;
    do
    {
      *v84++ = v83;
      --v85;
    }
    while (v85);
  }
  v86 = a13;
  v87 = &v78[v82];
  if ((a10 & 0x80000000) != 0)
  {
    v90 = -(int)a10;
    v91 = 12;
    do
    {
      v176[v91--] = (v90 % 0xA) | 0x30;
      v47 = v90 > 9;
      v90 /= 0xAu;
    }
    while (v47);
    v176[v91] = 45;
    if (v91 + 2 <= 14)
    {
      do
      {
        *v87++ = v176[v91];
        v47 = v91++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v88 = 0;
    v89 = a10;
    do
    {
      v176[v88-- + 12] = (v89 % 0xA) | 0x30;
      v47 = v89 > 9;
      v89 /= 0xAu;
    }
    while (v47);
    if (v88 + 14 <= 13)
    {
      do
      {
        *v87++ = *((unsigned __int8 *)&v177 + v88);
        v50 = __CFADD__(v88++, 1);
      }
      while (!v50);
    }
  }
  if ((a10 & 0x80000000) != 0)
  {
    v166 = -(int)a10;
    v92 = 1;
    do
    {
      ++v92;
      v50 = v166 >= 0xA;
      v166 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v92 = 0;
    do
    {
      ++v92;
      v47 = v70 > 9;
      v70 /= 0xAu;
    }
    while (v47);
  }
  if (v81 <= v92)
    v93 = v92;
  else
    v93 = v81;
  v94 = &v78[v93];
  *v94 = (char)a11;
  v95 = v94 + 1;
  if ((a13 & 0x80000000) != 0)
  {
    v167 = -(int)a13;
    v96 = 1;
    do
    {
      ++v96;
      v50 = v167 >= 0xA;
      v167 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v96 = 0;
    v97 = a13;
    do
    {
      ++v96;
      v47 = v97 > 9;
      v97 /= 0xAu;
    }
    while (v47);
  }
  v98 = *((_DWORD *)a12 + 1);
  v99 = v98 - v96;
  if (v98 <= v96)
  {
    v99 = 0;
  }
  else
  {
    v100 = *a12;
    v101 = v95;
    v102 = v99;
    do
    {
      *v101++ = v100;
      --v102;
    }
    while (v102);
  }
  v103 = a16;
  v104 = &v95[v99];
  if ((a13 & 0x80000000) != 0)
  {
    v107 = -(int)a13;
    v108 = 12;
    do
    {
      v176[v108--] = (v107 % 0xA) | 0x30;
      v47 = v107 > 9;
      v107 /= 0xAu;
    }
    while (v47);
    v176[v108] = 45;
    if (v108 + 2 <= 14)
    {
      do
      {
        *v104++ = v176[v108];
        v47 = v108++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v105 = 0;
    v106 = a13;
    do
    {
      v176[v105-- + 12] = (v106 % 0xA) | 0x30;
      v47 = v106 > 9;
      v106 /= 0xAu;
    }
    while (v47);
    if (v105 + 14 <= 13)
    {
      do
      {
        *v104++ = *((unsigned __int8 *)&v177 + v105);
        v50 = __CFADD__(v105++, 1);
      }
      while (!v50);
    }
  }
  if ((a13 & 0x80000000) != 0)
  {
    v168 = -(int)a13;
    v109 = 1;
    do
    {
      ++v109;
      v50 = v168 >= 0xA;
      v168 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v109 = 0;
    do
    {
      ++v109;
      v47 = v86 > 9;
      v86 /= 0xAu;
    }
    while (v47);
  }
  if (v98 <= v109)
    v110 = v109;
  else
    v110 = v98;
  v111 = &v95[v110];
  *v111 = (char)a14;
  v112 = v111 + 1;
  if ((a16 & 0x80000000) != 0)
  {
    v169 = -(int)a16;
    v113 = 1;
    do
    {
      ++v113;
      v50 = v169 >= 0xA;
      v169 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v113 = 0;
    v114 = a16;
    do
    {
      ++v113;
      v47 = v114 > 9;
      v114 /= 0xAu;
    }
    while (v47);
  }
  v115 = *((_DWORD *)a15 + 1);
  v116 = v115 - v113;
  if (v115 <= v113)
  {
    v116 = 0;
  }
  else
  {
    v117 = *a15;
    v118 = v112;
    v119 = v116;
    do
    {
      *v118++ = v117;
      --v119;
    }
    while (v119);
  }
  v120 = a19;
  v121 = &v112[v116];
  if ((a16 & 0x80000000) != 0)
  {
    v124 = -(int)a16;
    v125 = 12;
    do
    {
      v176[v125--] = (v124 % 0xA) | 0x30;
      v47 = v124 > 9;
      v124 /= 0xAu;
    }
    while (v47);
    v176[v125] = 45;
    if (v125 + 2 <= 14)
    {
      do
      {
        *v121++ = v176[v125];
        v47 = v125++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v122 = 0;
    v123 = a16;
    do
    {
      v176[v122-- + 12] = (v123 % 0xA) | 0x30;
      v47 = v123 > 9;
      v123 /= 0xAu;
    }
    while (v47);
    if (v122 + 14 <= 13)
    {
      do
      {
        *v121++ = *((unsigned __int8 *)&v177 + v122);
        v50 = __CFADD__(v122++, 1);
      }
      while (!v50);
    }
  }
  if ((a16 & 0x80000000) != 0)
  {
    v170 = -(int)a16;
    v126 = 1;
    do
    {
      ++v126;
      v50 = v170 >= 0xA;
      v170 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v126 = 0;
    do
    {
      ++v126;
      v47 = v103 > 9;
      v103 /= 0xAu;
    }
    while (v47);
  }
  if (v115 <= v126)
    v127 = v126;
  else
    v127 = v115;
  v128 = &v112[v127];
  *v128 = (char)a17;
  v129 = v128 + 1;
  if ((a19 & 0x80000000) != 0)
  {
    v171 = -(int)a19;
    v130 = 1;
    do
    {
      ++v130;
      v50 = v171 >= 0xA;
      v171 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v130 = 0;
    v131 = a19;
    do
    {
      ++v130;
      v47 = v131 > 9;
      v131 /= 0xAu;
    }
    while (v47);
  }
  v132 = *((_DWORD *)a18 + 1);
  v133 = v132 - v130;
  if (v132 <= v130)
  {
    v133 = 0;
  }
  else
  {
    v134 = *a18;
    v135 = v129;
    v136 = v133;
    do
    {
      *v135++ = v134;
      --v136;
    }
    while (v136);
  }
  v137 = a22;
  v138 = &v129[v133];
  if ((a19 & 0x80000000) != 0)
  {
    v141 = -(int)a19;
    v142 = 12;
    do
    {
      v176[v142--] = (v141 % 0xA) | 0x30;
      v47 = v141 > 9;
      v141 /= 0xAu;
    }
    while (v47);
    v176[v142] = 45;
    if (v142 + 2 <= 14)
    {
      do
      {
        *v138++ = v176[v142];
        v47 = v142++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v139 = 0;
    v140 = a19;
    do
    {
      v176[v139-- + 12] = (v140 % 0xA) | 0x30;
      v47 = v140 > 9;
      v140 /= 0xAu;
    }
    while (v47);
    if (v139 + 14 <= 13)
    {
      do
      {
        *v138++ = *((unsigned __int8 *)&v177 + v139);
        v50 = __CFADD__(v139++, 1);
      }
      while (!v50);
    }
  }
  if ((a19 & 0x80000000) != 0)
  {
    v172 = -(int)a19;
    v143 = 1;
    do
    {
      ++v143;
      v50 = v172 >= 0xA;
      v172 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v143 = 0;
    do
    {
      ++v143;
      v47 = v120 > 9;
      v120 /= 0xAu;
    }
    while (v47);
  }
  if (v132 <= v143)
    v144 = v143;
  else
    v144 = v132;
  v145 = &v129[v144];
  *v145 = (char)a20;
  v146 = v145 + 1;
  if ((a22 & 0x80000000) != 0)
  {
    v173 = -(int)a22;
    v147 = 1;
    do
    {
      ++v147;
      v50 = v173 >= 0xA;
      v173 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v147 = 0;
    v148 = a22;
    do
    {
      ++v147;
      v47 = v148 > 9;
      v148 /= 0xAu;
    }
    while (v47);
  }
  v149 = *((_DWORD *)a21 + 1);
  v50 = v149 >= v147;
  v150 = v149 - v147;
  if ((_DWORD)v150 != 0 && v50)
  {
    v151 = *a21;
    v152 = v146;
    v153 = v150;
    do
    {
      *v152++ = v151;
      --v153;
    }
    while (v153);
  }
  else
  {
    v150 = 0;
  }
  v154 = &v146[v150];
  if ((a22 & 0x80000000) != 0)
  {
    v158 = -(int)a22;
    v159 = 12;
    do
    {
      result = v158 / 0xAuLL;
      v176[v159--] = (v158 % 0xA) | 0x30;
      v47 = v158 > 9;
      v158 /= 0xAu;
    }
    while (v47);
    v176[v159] = 45;
    if (v159 + 2 <= 14)
    {
      do
      {
        *v154++ = v176[v159];
        v47 = v159++ < 12;
      }
      while (v47);
    }
  }
  else
  {
    v155 = 0;
    v156 = a22;
    do
    {
      result = v156 / 0xAuLL;
      v176[v155-- + 12] = (v156 % 0xA) | 0x30;
      v47 = v156 > 9;
      v156 /= 0xAu;
    }
    while (v47);
    if (v155 + 14 <= 13)
    {
      do
      {
        *v154++ = *((unsigned __int8 *)&v177 + v155);
        v50 = __CFADD__(v155++, 1);
      }
      while (!v50);
    }
  }
  if ((a22 & 0x80000000) != 0)
  {
    v174 = -(int)a22;
    v160 = 1;
    do
    {
      ++v160;
      v50 = v174 >= 0xA;
      v174 /= 0xAu;
    }
    while (v50);
  }
  else
  {
    v160 = 0;
    do
    {
      ++v160;
      v47 = v137 > 9;
      v137 /= 0xAu;
    }
    while (v47);
  }
  if (v149 <= v160)
    v161 = v160;
  else
    v161 = v149;
  v146[v161] = (char)a23;
  return result;
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  unsigned int v23;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v31;
  BOOL v32;
  _QWORD v37[3];

  v23 = a3;
  v37[0] = a2;
  v37[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v37, a1);
  if ((v23 & 0x80000000) != 0)
  {
    v31 = -v23;
    LODWORD(v27) = 1;
    do
    {
      LODWORD(v27) = v27 + 1;
      v32 = v31 >= 0xA;
      v31 /= 0xAu;
    }
    while (v32);
  }
  else
  {
    LODWORD(v27) = 0;
    do
    {
      LODWORD(v27) = v27 + 1;
      v28 = v23 > 9;
      v23 /= 0xAu;
    }
    while (v28);
  }
  v29 = *(_DWORD *)(a2 + 4);
  if (v29 <= v27)
    v27 = v27;
  else
    v27 = v29;
  a1[v27] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v27 + 1], a5, a6, a7, a9, a10, a11, v26, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
           a23);
}

_DWORD *WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(_DWORD *result, _BYTE *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[13];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = result[2];
  if ((v2 & 0x80000000) != 0)
  {
    v13 = -v2;
    v3 = 1;
    do
    {
      ++v3;
      v7 = v13 >= 0xA;
      v13 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    v3 = 0;
    v4 = result[2];
    do
    {
      ++v3;
      v5 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v5);
  }
  v6 = *(_DWORD *)(*(_QWORD *)result + 4);
  v7 = v6 >= v3;
  v8 = v6 - v3;
  if ((_DWORD)v8 != 0 && v7)
  {
    v9 = a2;
    v10 = v8;
    do
    {
      *v9++ = **(_BYTE **)result;
      --v10;
    }
    while (v10);
    v2 = result[2];
  }
  else
  {
    v8 = 0;
  }
  v11 = &a2[v8];
  if ((v2 & 0x80000000) != 0)
    return (_DWORD *)WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-v2, v11);
  v12 = 0;
  do
  {
    v14[v12-- + 12] = (v2 % 0xA) | 0x30;
    v5 = v2 > 9;
    v2 /= 0xAu;
  }
  while (v5);
  if (v12 + 14 <= 13)
    return memcpy(v11, &v14[v12 + 13], -v12);
  return result;
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  unsigned int v20;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  BOOL v29;
  _QWORD v34[3];

  v20 = a3;
  v34[0] = a2;
  v34[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v34, a1);
  if ((v20 & 0x80000000) != 0)
  {
    v28 = -v20;
    LODWORD(v24) = 1;
    do
    {
      LODWORD(v24) = v24 + 1;
      v29 = v28 >= 0xA;
      v28 /= 0xAu;
    }
    while (v29);
  }
  else
  {
    LODWORD(v24) = 0;
    do
    {
      LODWORD(v24) = v24 + 1;
      v25 = v20 > 9;
      v20 /= 0xAu;
    }
    while (v25);
  }
  v26 = *(_DWORD *)(a2 + 4);
  if (v26 <= v24)
    v24 = v24;
  else
    v24 = v26;
  a1[v24] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v24 + 1], a5, a6, a7, a9, a10, a11, v23, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int v17;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v25;
  BOOL v26;
  _QWORD v31[2];

  v17 = a3;
  v31[0] = a2;
  v31[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v31, a1);
  if ((v17 & 0x80000000) != 0)
  {
    v25 = -v17;
    LODWORD(v21) = 1;
    do
    {
      LODWORD(v21) = v21 + 1;
      v26 = v25 >= 0xA;
      v25 /= 0xAu;
    }
    while (v26);
  }
  else
  {
    LODWORD(v21) = 0;
    do
    {
      LODWORD(v21) = v21 + 1;
      v22 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v22);
  }
  v23 = *(_DWORD *)(a2 + 4);
  if (v23 <= v21)
    v21 = v21;
  else
    v21 = v23;
  a1[v21] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v21 + 1], a5, a6, a7, a9, a10, a11, v20, a12, a13, a14, a15, a16, a17);
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned int v16;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v24;
  BOOL v25;
  _QWORD v28[2];

  v16 = a3;
  v28[0] = a2;
  v28[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v28, a1);
  if ((v16 & 0x80000000) != 0)
  {
    v24 = -v16;
    LODWORD(v20) = 1;
    do
    {
      LODWORD(v20) = v20 + 1;
      v25 = v24 >= 0xA;
      v24 /= 0xAu;
    }
    while (v25);
  }
  else
  {
    LODWORD(v20) = 0;
    do
    {
      LODWORD(v20) = v20 + 1;
      v21 = v16 > 9;
      v16 /= 0xAu;
    }
    while (v21);
  }
  v22 = *(_DWORD *)(a2 + 4);
  if (v22 <= v20)
    v20 = v20;
  else
    v20 = v22;
  a1[v20] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v20 + 1], a5, a6, a7, a9, a10, a11, v19, a12, a13, a14);
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int v15;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v22;
  BOOL v23;
  _QWORD v24[2];

  v15 = a3;
  v24[0] = a2;
  v24[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v24, a1);
  if ((v15 & 0x80000000) != 0)
  {
    v22 = -v15;
    LODWORD(v18) = 1;
    do
    {
      LODWORD(v18) = v18 + 1;
      v23 = v22 >= 0xA;
      v22 /= 0xAu;
    }
    while (v23);
  }
  else
  {
    LODWORD(v18) = 0;
    do
    {
      LODWORD(v18) = v18 + 1;
      v19 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v19);
  }
  v20 = *(_DWORD *)(a2 + 4);
  if (v20 <= v18)
    v18 = v18;
  else
    v18 = v20;
  a1[v18] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v18 + 1], a5, a6, a7, a9, a10, a11);
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v11;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v19;
  _QWORD v20[2];

  v11 = a3;
  v20[0] = a2;
  v20[1] = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v20, a1);
  if ((v11 & 0x80000000) != 0)
  {
    v19 = -v11;
    LODWORD(v14) = 1;
    do
    {
      LODWORD(v14) = v14 + 1;
      v15 = v19 >= 0xA;
      v19 /= 0xAu;
    }
    while (v15);
  }
  else
  {
    LODWORD(v14) = 0;
    do
    {
      LODWORD(v14) = v14 + 1;
      v15 = v11 >= 9;
      v16 = v11 == 9;
      v11 /= 0xAu;
    }
    while (!v16 && v15);
  }
  v17 = *(_DWORD *)(a2 + 4);
  if (v17 <= v14)
    v14 = v14;
  else
    v14 = v17;
  a1[v14] = a4;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(&a1[v14 + 1], a5, a6, a7);
}

_DWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v5;
  _DWORD *result;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;
  _QWORD v13[2];

  v5 = a3;
  v13[0] = a2;
  v13[1] = a3;
  result = WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(v13, a1);
  if ((v5 & 0x80000000) != 0)
  {
    v11 = -v5;
    v9 = 1;
    do
    {
      ++v9;
      v12 = v11 >= 0xA;
      v11 /= 0xAu;
    }
    while (v12);
  }
  else
  {
    v9 = 0;
    do
    {
      ++v9;
      v10 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v10);
  }
  if (*(_DWORD *)(a2 + 4) > v9)
    v9 = *(_DWORD *)(a2 + 4);
  a1[v9] = a4;
  return result;
}

unint64_t JSC::setNewValueFromTimeArgs(JSC::JSGlobalObject *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int8x16_t *v10;
  uint64_t v11;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  double *v18;
  JSC::VM *v19;
  unsigned int v20;
  double v21;
  int8x16_t v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  int8x16_t v35;
  double v36;
  BOOL v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL hasExceptionsAfterHandlingTraps;
  int8x16_t v55;
  __int128 v56;
  uint64_t v57;
  int8x16_t *v58;
  unsigned __int8 *v59;

  v10 = (int8x16_t *)*((_QWORD *)a1 + 7);
  v58 = v10;
  v11 = *(_QWORD *)(a2 + 40);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, (JSC::VM **)&v58);
  }
  v14 = *(double *)(v11 + 16);
  v15 = *(_DWORD *)(a2 + 32);
  if (v15 == 1)
  {
    JSC::applyToNumberToOtherwiseIgnoredArguments(a1, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8, a9);
    if (v10[5].i32[0] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v39, v40, v41, v42, v43, v44, v45))
      return 0;
LABEL_48:
    *(_QWORD *)(v11 + 16) = 0x7FF8000000000000;
    return 0x7FFA000000000000;
  }
  v16 = a4;
  if ((_DWORD)a4)
  {
    v18 = JSC::DateInstance::gregorianDateTime(*(JSC::DateInstance **)(a2 + 40), v10 + 5662, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = *(_QWORD *)(v11 + 24);
    if (v17 && *(double *)(v17 + 56) == v14)
    {
      v18 = (double *)(v17 + 64);
      v19 = (JSC::VM *)v10;
      goto LABEL_8;
    }
    v18 = JSC::DateInstance::calculateGregorianDateTimeUTC(*(JSC::DateInstance **)(a2 + 40), (JSC::DateCache *)&v10[5662], (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (!v18)
  {
    JSC::applyToNumberToOtherwiseIgnoredArguments(a1, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8, v35);
    if (v10[5].i32[0] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v46, v47, v48, v49, v50, v51, v52))
      return 0;
    return 0x7FFA000000000000;
  }
  v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v15 = *(_DWORD *)(a2 + 32);
LABEL_8:
  v20 = 0;
  v21 = v14 - floor(v14 / 1000.0) * 1000.0;
  v22 = *(int8x16_t *)v18;
  v23 = *((_OWORD *)v18 + 1);
  v57 = *((_QWORD *)v18 + 4);
  v55 = v22;
  v56 = v23;
  v24 = v15 - 1;
  if (v24 >= a3)
    v25 = a3;
  else
    v25 = v24;
  v26 = 0.0;
  if (a3 >= 4 && v25)
  {
    DWORD1(v56) = 0;
    v59 = *(unsigned __int8 **)(a2 + 48);
    v27 = JSC::JSValue::toIntegerPreserveNaN(&v59, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      goto LABEL_46;
    v22.i64[0] = 0x414B774000000000;
    v26 = v27 * 3600000.0 + 0.0;
    v20 = 1;
  }
  if (a3 >= 3 && v20 < v25)
  {
    DWORD2(v56) = 0;
    v59 = *(unsigned __int8 **)(a2 + 8 * (v20 | 6));
    *(double *)v22.i64 = JSC::JSValue::toIntegerPreserveNaN(&v59, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    if (*((_DWORD *)v19 + 20))
    {
      v53 = v22.i64[0];
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v22.i64[0] = v53;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_46;
    }
    ++v20;
    v26 = v26 + *(double *)v22.i64 * 60000.0;
  }
  if (a3 >= 2 && v20 < v25)
  {
    HIDWORD(v56) = 0;
    v59 = *(unsigned __int8 **)(a2 + 8 * (v20 + 6));
    *(double *)v22.i64 = JSC::JSValue::toIntegerPreserveNaN(&v59, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    v38 = *(double *)v22.i64;
    if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      goto LABEL_46;
    ++v20;
    v26 = v26 + v38 * 1000.0;
  }
  if (v20 < v25)
  {
    v59 = *(unsigned __int8 **)(a2 + 8 * (v20 + 6));
    v28 = JSC::JSValue::toIntegerPreserveNaN(&v59, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    if (!*((_DWORD *)v19 + 20))
      goto LABEL_21;
    v36 = v28;
    v37 = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v28 = v36;
    if (!v37)
      goto LABEL_21;
LABEL_46:
    v29 = 0;
    goto LABEL_22;
  }
  v28 = v21;
LABEL_21:
  v21 = v26 + v28;
  v29 = COERCE__INT64(fabs(v26 + v28)) < 0x7FF0000000000000;
LABEL_22:
  if (v10[5].i32[0] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v29)
    goto LABEL_48;
  JSC::DateCache::gregorianDateTimeToMS((uint64_t **)&v10[5662], &v55, v16, a4, a5, a6, a7, a8, v21);
  v31 = fabs(v30);
  v32 = trunc(v30) + 0.0;
  if (v31 > 8.64e15)
    v32 = NAN;
  *(double *)(v11 + 16) = v32;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v33 = (int)v32, v32 == (double)(int)v33)
    && ((_DWORD)v33 || (*(_QWORD *)&v32 & 0x8000000000000000) == 0))
  {
    return v33 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v32 + 0x2000000000000;
  }
}

void JSC::applyToNumberToOtherwiseIgnoredArguments(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  if (*((_DWORD *)a2 + 8) - 1 >= a3)
    v9 = a3;
  else
    v9 = *((_DWORD *)a2 + 8) - 1;
  if (v9)
  {
    v12 = 0;
    v13 = *((_QWORD *)this + 7);
    do
    {
      v15 = *(_QWORD *)((char *)a2 + (((v12 << 32) + 0x600000000) >> 29));
      if (!(v15 >> 49))
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v15, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      if (*(_DWORD *)(v13 + 80))
      {
        v14 = *(_DWORD *)(v13 + 80);
        if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v13 + 16))
          break;
      }
      v12 = (v12 + 1);
    }
    while (v12 < v9);
  }
}

unint64_t JSC::setNewValueFromDateArgs(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int8x16_t *v10;
  JSC::DateInstance *v11;
  int v14;
  int v15;
  double v16;
  uint64_t v17;
  double *v18;
  JSC::VM *v19;
  double v20;
  int8x16_t v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  int8x16_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int8x16_t v58;
  __int128 v59;
  uint64_t v60;
  int8x16_t *v61;
  unsigned __int8 *v62;

  v10 = (int8x16_t *)*((_QWORD *)this + 7);
  v61 = v10;
  v11 = (JSC::DateInstance *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, (JSC::VM **)&v61);
  }
  v14 = *((_DWORD *)a2 + 8);
  if (v14 == 1)
  {
    JSC::applyToNumberToOtherwiseIgnoredArguments(this, a2, a3, a4, a5, a6, a7, a8, a9);
    if (v10[5].i32[0] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v39, v40, v41, v42, v43, v44, v45))
      return 0;
LABEL_53:
    *((_QWORD *)v11 + 2) = 0x7FF8000000000000;
    return 0x7FFA000000000000;
  }
  v15 = a4;
  v16 = *((double *)v11 + 2);
  v60 = 0;
  v58 = 0u;
  v59 = 0u;
  if ((_DWORD)a4)
  {
    v18 = JSC::DateInstance::gregorianDateTime(v11, v10 + 5662, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = *((_QWORD *)v11 + 3);
    if (v17 && *(double *)(v17 + 56) == v16)
    {
      v18 = (double *)(v17 + 64);
      v19 = (JSC::VM *)v10;
      goto LABEL_8;
    }
    v18 = JSC::DateInstance::calculateGregorianDateTimeUTC(v11, (JSC::DateCache *)&v10[5662], (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (!v18)
  {
    JSC::applyToNumberToOtherwiseIgnoredArguments(this, a2, a3, a4, a5, a6, a7, a8, v33);
    if (v10[5].i32[0] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v49, v50, v51, v52, v53, v54, v55))
      return 0;
    return 0x7FFA000000000000;
  }
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = *((_DWORD *)a2 + 8);
LABEL_8:
  v20 = v16 - floor(v16 / 1000.0) * 1000.0;
  v21 = *(int8x16_t *)v18;
  v22 = *((_OWORD *)v18 + 1);
  v60 = *((_QWORD *)v18 + 4);
  v58 = v21;
  v59 = v22;
  v23 = v14 - 1;
  if (v23 >= a3)
    v24 = a3;
  else
    v24 = v23;
  if (a3 >= 3)
  {
    if (!v24)
    {
      v26 = 1;
      goto LABEL_20;
    }
    v62 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    *(double *)v21.i64 = JSC::JSValue::toIntegerPreserveNaN(&v62, this, (uint64_t)a3, a4, a5, a6, a7, a8, v21);
    v46 = v21.i64[0];
    if (*((_DWORD *)v19 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v19, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_51;
    }
    v26 = (v46 & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000;
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v56 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v56) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v57 = v56;
      else
        v57 = (((1 << ((v46 >> 52) + 1)) - 1) & v56) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        v48 = v57;
      else
        v48 = -v57;
    }
    else
    {
      v48 = 0;
    }
    v58.i32[0] = v48;
    v25 = 1;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  if (a3 >= 2 && v25 < v24)
  {
    v62 = (unsigned __int8 *)*((_QWORD *)a2 + (v25 | 6));
    *(double *)v21.i64 = JSC::JSValue::toIntegerPreserveNaN(&v62, this, (uint64_t)a3, a4, a5, a6, a7, a8, v21);
    v34 = v21.i64[0];
    if (*((_DWORD *)v19 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v19, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_51;
    }
    ++v25;
    if ((v34 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
      v26 = 0;
    v35 = (v34 >> 52) & 0x7FF;
    if ((v35 - 1023) <= 0x53)
    {
      v37 = v34 >> (51 - (v34 >> 52));
      if (v35 > 0x433)
        LODWORD(v37) = v34 << ((v34 >> 52) - 51);
      if (v35 >= 0x41F)
        v38 = v37;
      else
        v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
      if ((v34 & 0x8000000000000000) == 0)
        v36 = v38;
      else
        v36 = -v38;
    }
    else
    {
      v36 = 0;
    }
    v58.i32[1] = v36;
  }
  if (v25 < v24)
  {
    v62 = (unsigned __int8 *)*((_QWORD *)a2 + v25 + 6);
    v27 = JSC::JSValue::toIntegerPreserveNaN(&v62, this, (uint64_t)a3, a4, a5, a6, a7, a8, v21);
    if (*((_DWORD *)v19 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v19, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_51:
      v26 = 0;
      goto LABEL_20;
    }
    if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      v26 = 0;
    v58.i32[3] = 0;
    v20 = v20 + v27 * 86400000.0;
  }
LABEL_20:
  if (v10[5].i32[0]
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (!v26)
    goto LABEL_53;
  JSC::DateCache::gregorianDateTimeToMS((uint64_t **)&v10[5662], &v58, v15, a4, a5, a6, a7, a8, v20);
  v29 = fabs(v28);
  v30 = trunc(v28) + 0.0;
  if (v29 > 8.64e15)
    v30 = NAN;
  *((double *)v11 + 2) = v30;
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v31 = (int)v30, v30 == (double)(int)v31)
    && ((_DWORD)v31 || (*(_QWORD *)&v30 & 0x8000000000000000) == 0))
  {
    return v31 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v30 + 0x2000000000000;
  }
}

uint64_t JSC::DeferredWorkTimer::TicketData::hasValidTarget(JSC::DeferredWorkTimer::TicketData *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!(_DWORD)v2)
    return 0;
  if (v2 >= (int)v2 - 1)
  {
    v3 = *(_QWORD *)&v1[2 * v2];
    if (v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
      return *(_QWORD *)v3 != 0;
    return 0;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DeferredWorkTimer::TicketData::TicketData(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_199123080;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)a1 = v8;
  WTF::FixedVector<JSC::Weak<JSC::JSCell>>::FixedVector<0ul,WTF::CrashOnOverflow>((unsigned int **)(a1 + 8), a4, v9, v10, v11, v12, v13, v14);
  JSC::Weak<JSC::JSObject>::Weak((_QWORD *)(a1 + 16), a3);
  JSC::Weak<JSC::JSGlobalObject>::Weak((_QWORD *)(a1 + 24), (uint64_t)a2);
  JSC::JSGlobalObject::addWeakTicket(a2, (WTF::ThreadSafeWeakPtrControlBlock **)a1, v15, v16, v17, v18, v19, v20);
  return a1;
}

_QWORD *JSC::Weak<JSC::JSObject>::Weak(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (a2)
  {
    if ((a2 & 8) != 0)
      v3 = (a2 - 112) | 1;
    else
      v3 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)(v3 + 47);
    else
      v4 = (_QWORD *)(*(_QWORD *)v3 + 32);
    v2 = (_QWORD *)v4[2];
    if (!v2)
    {
      v19 = v3;
      v20 = result;
      v21 = a2;
      while (1)
      {
        v5 = v4;
        v6 = (_QWORD *)v4[3];
        if (!v6)
          break;
        v4[3] = v6[2];
        v2 = (_QWORD *)v6[4];
        v6[3] = 257;
        v6[4] = 0;
        if (v2)
          goto LABEL_10;
      }
      v7 = v4[1];
      v8 = v4[6];
      if (!v7)
      {
        v9 = *(_QWORD **)(v8 + 488);
        *v5 = v8 + 480;
        v5[1] = v9;
        *v9 = v5;
        *(_QWORD *)(v8 + 488) = v5;
      }
      *(_QWORD *)(v8 + 1072) += 1024;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v10, v19);
      JSC::Heap::didAllocate((JSC::Heap *)(v5[6] + 192), 0x400uLL, v11, v12, v13, v14, v15, v16);
      v4 = v5;
      v17 = v5 + 4;
      v18 = v5[5];
      if (v18)
        v17 = (_QWORD *)(v18 + 16);
      *v17 = v10;
      v5[5] = v10;
      v10[1] = v18;
      v10[2] = 0;
      v2 = (_QWORD *)v10[4];
      v10[3] = 257;
      v10[4] = 0;
      result = v20;
      a2 = v21;
    }
LABEL_10:
    v4[2] = *v2;
    *v2 = a2;
    v2[1] = 0;
    v2[2] = 0;
  }
  else
  {
    v2 = 0;
  }
  *result = v2;
  return result;
}

_QWORD *JSC::Weak<JSC::JSGlobalObject>::Weak(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if (a2)
  {
    v3 = (a2 - 112) | 1;
    if ((a2 & 8) == 0)
      v3 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)(v3 + 47);
    else
      v4 = (_QWORD *)(*(_QWORD *)v3 + 32);
    v2 = (_QWORD *)v4[2];
    if (!v2)
    {
      while (1)
      {
        v5 = (_QWORD *)v4[3];
        if (!v5)
          break;
        v4[3] = v5[2];
        v2 = (_QWORD *)v5[4];
        v5[3] = 257;
        v5[4] = 0;
        if (v2)
          goto LABEL_9;
      }
      v19 = a2;
      v20 = v3;
      v18 = result;
      v6 = v4[1];
      v21 = v4;
      v7 = v4[6];
      if (!v6)
      {
        v8 = *(_QWORD **)(v7 + 488);
        *v21 = v7 + 480;
        v21[1] = v8;
        *v8 = v21;
        *(_QWORD *)(v7 + 488) = v21;
      }
      *(_QWORD *)(v7 + 1072) += 1024;
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v9, v20);
      JSC::Heap::didAllocate((JSC::Heap *)(v21[6] + 192), 0x400uLL, v10, v11, v12, v13, v14, v15);
      v4 = v21;
      v16 = v21 + 4;
      v17 = v21[5];
      if (v17)
        v16 = (_QWORD *)(v17 + 16);
      *v16 = v9;
      v21[5] = v9;
      v9[1] = v17;
      v9[2] = 0;
      v2 = (_QWORD *)v9[4];
      v9[3] = 257;
      v9[4] = 0;
      result = v18;
      a2 = v19;
    }
LABEL_9:
    v4[2] = *v2;
    *v2 = a2;
    v2[1] = 0;
    v2[2] = 0;
  }
  else
  {
    v2 = 0;
  }
  *result = v2;
  return result;
}

unsigned int **WTF::FixedVector<JSC::Weak<JSC::JSCell>>::FixedVector<0ul,WTF::CrashOnOverflow>(unsigned int **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  int v51;

  *a1 = 0;
  v49 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v50 = v9;
  v51 = v10;
  if (v10)
  {
    WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>::createFromVector<0ul,WTF::CrashOnOverflow>(&v47, (uint64_t)&v49);
    v11 = v47;
    v47 = 0;
    v48 = v11;
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::operator=[abi:sn180100](a1, &v48, v12, v13, v14, v15, v16, v17);
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::~unique_ptr[abi:sn180100](&v48, v18, v19, v20, v21, v22, v23, v24);
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::~unique_ptr[abi:sn180100](&v47, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    v48 = 0;
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::operator=[abi:sn180100](a1, &v48, a3, a4, a5, a6, a7, a8);
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::~unique_ptr[abi:sn180100](&v48, v40, v41, v42, v43, v44, v45, v46);
  }
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v32, v33, v34, v35, v36, v37, v38);
  return a1;
}

uint64_t WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>::createFromVector<0ul,WTF::CrashOnOverflow>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v18;
  int v19;
  int v20;

  v3 = *(uint64_t **)a2;
  v18 = *(uint64_t **)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v19 = v4;
  v20 = v5;
  v6 = 8 * v5;
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v5 + 8));
  *v7 = v5;
  if ((_DWORD)v5)
  {
    v15 = v7 + 2;
    do
    {
      v16 = *v3;
      *v3++ = 0;
      *v15++ = v16;
      v6 -= 8;
    }
    while (v6);
  }
  *a1 = v7;
  return WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8, v9, v10, v11, v12, v13, v14);
}

unsigned int **std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::operator=[abi:sn180100](unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = v10 + 2;
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      do
      {
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
          *(_QWORD *)v11 = 0;
        }
        v11 += 2;
        v13 -= 8;
      }
      while (v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int **std::unique_ptr<WTF::EmbeddedFixedVector<JSC::Weak<JSC::JSCell>>>::~unique_ptr[abi:sn180100](unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = v9 + 2;
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      do
      {
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
          *(_QWORD *)v10 = 0;
        }
        v10 += 2;
        v12 -= 8;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v12 = 8 * v9;
    v13 = v10;
    do
    {
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
        *(_QWORD *)v13 = 0;
      }
      v13 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(uint64_t ***)a1;
    v13 = 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v14, a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a3 + 8);
  if (v12 >= 0xFFFFFFFE)
    v13 = -1;
  else
    v13 = v12 + 2;
  v14 = __CFADD__(v13, v11);
  v15 = v13 + v11;
  if (v14)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if ((v17 || (v17 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v17 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v16, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(result, *a2, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *a4);
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v16, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
    {
      v19 = *(int8x16_t **)a3;
      v20 = *(_QWORD *)(a3 + 8);
      v21 = v20;
      v22 = *a4;
      *result = *a2;
      v23 = result + 1;
      if ((_DWORD)v20 == 1)
      {
        *v23 = v19->i8[0];
      }
      else if ((_DWORD)v20)
      {
        result = (char *)memcpy(result + 1, v19, v20);
      }
      v23[v21] = v22;
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(_WORD *a1, char a2, int8x16_t *a3, int a4, char a5)
{
  char *result;
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  int8x16x2_t v16;
  int8x16x2_t v17;
  int8x16x2_t v18;

  *a1 = a2;
  result = (char *)(a1 + 1);
  v6 = &result[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v7 = &result[2 * (a4 & 0xFFFFFFC0)];
    v8 = 0uLL;
    do
    {
      v16.val[0] = *a3;
      v9 = a3[1];
      v17.val[0] = a3[2];
      v10 = a3[3];
      a3 += 4;
      v11 = v10;
      v17.val[1] = 0uLL;
      v18.val[0] = v9;
      v16.val[1] = 0uLL;
      v12 = result;
      vst2q_s8(v12, v16);
      v12 += 32;
      v18.val[1] = 0uLL;
      vst2q_s8(v12, v18);
      v13 = result + 64;
      vst2q_s8(v13, v17);
      v14 = result + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      result += 128;
    }
    while (result != v7);
    result = v7;
  }
  while (result != v6)
  {
    v15 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)result = v15;
    result += 2;
  }
  *(_WORD *)v6 = a5;
  return result;
}

uint64_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, _BYTE **a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = *((_DWORD *)a2 + 2);
  v13 = *a3;
  if (*a3)
  {
    v14 = *(_DWORD *)(v13 + 4);
    v15 = __CFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      v16 = -1;
  }
  else
  {
    v16 = 1;
  }
  v15 = __CFADD__(v16, v12);
  v17 = v16 + v12;
  if (v15)
    v17 = -1;
  v15 = __CFADD__(v17, v11);
  v18 = v17 + v11;
  if (v15)
    v19 = 0xFFFFFFFFLL;
  else
    v19 = v18;
  v20 = *(_QWORD *)(a1 + 8);
  if ((v20 || (v20 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v20 + 16) & 4) == 0 || v13 && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    result = (uint64_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)result, (int8x16_t *)*a2, (int)a2[1], *a3, *a4);
  }
  else
  {
    result = (uint64_t *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return (uint64_t *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, *a2, a2[1], *a3, *a4);
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, char a5)
{
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  unsigned __int128 *v13;
  unsigned __int128 *v14;
  unsigned __int128 v15;
  char v16;

  v8 = __dst;
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    __dst = memcpy(__dst, a2, a3);
  }
  v9 = &v8[a3];
  if (a4)
  {
    v10 = *(_BYTE **)(a4 + 8);
    v11 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v11 == 1)
      {
        *v9 = *v10;
      }
      else if ((_DWORD)v11)
      {
        __dst = memcpy(v9, v10, v11);
      }
    }
    else
    {
      if (v11 < 0x10)
      {
        v13 = (unsigned __int128 *)v9;
      }
      else
      {
        v13 = (unsigned __int128 *)&v9[v11 & 0xFFFFFFF0];
        v14 = (unsigned __int128 *)v9;
        do
        {
          v15 = (unsigned __int128)vld2q_s8(v10);
          v10 += 32;
          *v14++ = v15;
        }
        while (v14 != v13);
      }
      while (v13 != (unsigned __int128 *)&v9[v11])
      {
        v16 = *v10;
        v10 += 2;
        *(_BYTE *)v13 = v16;
        v13 = (unsigned __int128 *)((char *)v13 + 1);
      }
    }
    v12 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v12 = 0;
  }
  v9[v12] = a5;
  return __dst;
}

void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v16[2];
  BOOL v17;

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a1))
    goto LABEL_3;
LABEL_4:
  v10 = *(_QWORD *)(a1 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(a1 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v12 = v15 == 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)a1);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
LABEL_8:
  if (!v11)
  {
    v16[0] = a1;
    v16[1] = v13;
    v17 = v12;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DeferredWorkTimer::TicketData *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v10 = *(_QWORD *)a1;
  v9 = *(JSC::DeferredWorkTimer::TicketData **)(a1 + 8);
  if (v9)
  {
    JSC::DeferredWorkTimer::TicketData::~TicketData(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (*(_BYTE *)(a1 + 16))
    v19 = v10 == 0;
  else
    v19 = 1;
  if (!v19)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DeferredWorkTimer::TicketData::~TicketData(JSC::DeferredWorkTimer::TicketData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    v13 = *v11;
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)(*(_QWORD *)v12 + 8) = 3;
          *(_QWORD *)v12 = 0;
        }
        v12 += 2;
        v14 -= 8;
      }
      while (v14);
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

unsigned int *WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::removeFirst(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *a1;
  if (*a1 == a1[1])
  {
    result = 512;
    __break(0xC471u);
  }
  else
  {
    v3 = a1[2] + 16 * v1;
    result = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v1 = *a1;
    }
    if (v1 == *((unsigned int *)a1 + 6) - 1)
      v5 = 0;
    else
      v5 = v1 + 1;
    *a1 = v5;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>,JSC::DeferredWorkTimer::TicketData const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>,JSC::DeferredWorkTimer::TicketData const*>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 8 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>,JSC::DeferredWorkTimer::TicketData const*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD *)(v3 + 8 * v7);
      if (v8 != -1)
      {
        if (!v8)
          return 0;
        if (v8 == *a2)
          return v3 + 8 * v7;
      }
      ++i;
    }
  }
  return result;
}

void WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::remove(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v10 = *a2;
  *a2 = 0;
  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v10, a2, a3, a4, a5, a6, a7, a8);
  *a2 = (uint64_t *)-1;
  ++*(_DWORD *)(*a1 - 16);
  v11 = *a1;
  if (*a1)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v13 = *a1;
  if (*a1)
  {
    v14 = 6 * *(_DWORD *)(v13 - 12);
    v15 = *(_DWORD *)(v13 - 4);
    if (v14 < v15 && v15 >= 9)
      WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::rehash(a1, v15 >> 1, 0, a4, a5, a6, a7, a8);
  }
}

_QWORD *WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (uint64_t *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v26 = WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::reinsert(*a1, v25);
          v27 = (uint64_t *)*v25;
          *v25 = 0;
          if (v27)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v27, v15, v16, v17, v18, v19, v20, v21);
          if (v25 == (uint64_t *)a3)
            v22 = v26;
        }
        else
        {
          *v25 = 0;
        }
      }
      ++v25;
      --v24;
    }
    while (v24);
  }
  else
  {
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

_QWORD *WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  *v6 = *result;
  v7 = result[1];
  result[1] = 0;
  v6[1] = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = v5 + 16 * *(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v24 = *(_QWORD *)a1;
        return v24 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v18 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v18;
        do
        {
          v20 = (_QWORD *)(v18 + v19);
          v21 = v5 + v19;
          *v20 = *(_QWORD *)(v5 + v19);
          v22 = *(_QWORD *)(v5 + v19 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          v20[1] = v22;
          v23 = *(_QWORD *)(v5 + v19 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v19 += 16;
        }
        while (v21 + 16 != v6);
        v24 = *(_QWORD *)a1;
        if (v5)
        {
          if (v24 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
          v24 = *(_QWORD *)a1;
        }
        return v24 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x198923728);
    }
  }
  v25 = *(unsigned int *)(a1 + 8);
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= a2)
    v28 = a2;
  else
    v28 = v27;
  if (v28 > v25)
  {
    if (v28 >> 28)
      goto LABEL_39;
    v29 = *(unsigned int *)(a1 + 12);
    v30 = WTF::fastMalloc((WTF *)(16 * v28));
    *(_DWORD *)(a1 + 8) = v28;
    *(_QWORD *)a1 = v30;
    if ((_DWORD)v29)
    {
      v38 = (_QWORD *)v30;
      v39 = (_QWORD *)(v5 + 16 * v29);
      v40 = (_QWORD *)v5;
      do
      {
        *v38 = *v40;
        v41 = v40[1];
        v40[1] = 0;
        v38[1] = v41;
        v42 = v40[1];
        v40[1] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v40 += 2;
        v38 += 2;
      }
      while (v40 != v39);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return v3;
}

void WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacityIfNeeded(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  if (*a1)
  {
    ++v1;
    goto LABEL_3;
  }
  v3 = *((unsigned int *)a1 + 6);
  if (v1)
  {
    v2 = v3 - 1;
LABEL_3:
    if (v1 != v2)
      return;
LABEL_7:
    WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacity(a1);
    return;
  }
  if (!(_DWORD)v3)
    goto LABEL_7;
}

void WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacity(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a1[2];
    v5 = v2 + 1;
    v6 = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    v14 = (_QWORD *)v6;
    *((_DWORD *)a1 + 6) = v5;
    a1[2] = v6;
    v15 = *a1;
    v16 = a1[1];
    v17 = (_QWORD *)(v4 + 16 * v16);
    if (*a1 > v16)
    {
      if (v16)
      {
        v23 = (_QWORD *)v4;
        do
        {
          *v14 = *v23;
          v24 = v23[1];
          v23[1] = 0;
          v14[1] = v24;
          v25 = v23[1];
          v23[1] = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v23 += 2;
          v14 += 2;
        }
        while (v23 != v17);
        v5 = *((_DWORD *)a1 + 6);
        v15 = *a1;
        v14 = (_QWORD *)a1[2];
      }
      v18 = v15 - v1 + v5;
      if (v15 != v1)
      {
        v26 = (_QWORD *)(v4 + 16 * v1);
        v27 = &v14[2 * v18];
        v28 = (_QWORD *)(v4 + 16 * v15);
        do
        {
          *v27 = *v28;
          v29 = v28[1];
          v28[1] = 0;
          v27[1] = v29;
          v30 = v28[1];
          v28[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v28 += 2;
          v27 += 2;
        }
        while (v28 != v26);
      }
      *a1 = v18;
    }
    else if (*a1 != v16)
    {
      v19 = (_QWORD *)(v6 + 16 * v15);
      v20 = (_QWORD *)(v4 + 16 * v15);
      do
      {
        *v19 = *v20;
        v21 = v20[1];
        v20[1] = 0;
        v19[1] = v21;
        v22 = v20[1];
        v20[1] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v20 += 2;
        v19 += 2;
      }
      while (v20 != v17);
    }
    if (v4)
    {
      if (a1[2] == v4)
      {
        a1[2] = 0;
        *((_DWORD *)a1 + 6) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

uint64_t WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(const void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::add(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  int i;
  unsigned int v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2);
  v22 = 0;
  v23 = *a2;
  for (i = 1; ; ++i)
  {
    v25 = v14 & v13;
    v26 = (uint64_t **)(v12 + 8 * (v14 & v13));
    v27 = *v26;
    if (!*v26)
    {
      if (v22)
      {
        *v22 = 0;
        --*(_DWORD *)(*a1 - 16);
        v23 = *a2;
        v26 = v22;
      }
      *a2 = 0;
      v28 = *v26;
      *v26 = (uint64_t *)v23;
      if (v28)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v28, v15, v16, v17, v18, v19, v20, v21);
      v29 = *a1;
      if (*a1)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *a1;
      if (*a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_18;
      }
      else if (3 * v34 > 4 * v33)
      {
LABEL_18:
        v35 = v31 + 8 * v34;
        v36 = 1;
        goto LABEL_19;
      }
      v26 = (uint64_t **)WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::expand(a1, (uint64_t)v26, v16, v17, v18, v19, v20, v21);
      v31 = *a1;
      if (*a1)
        v34 = *(unsigned int *)(v31 - 4);
      else
        v34 = 0;
      goto LABEL_18;
    }
    if (v27 == (uint64_t *)-1)
    {
      v22 = (uint64_t **)(v12 + 8 * v25);
      goto LABEL_7;
    }
    if (v27 == (uint64_t *)v23)
      break;
LABEL_7:
    v14 = i + v25;
  }
  v37 = *a1;
  if (*a1)
    v38 = *(unsigned int *)(v37 - 4);
  else
    v38 = 0;
  v36 = 0;
  v35 = v37 + 8 * v38;
LABEL_19:
  *(_QWORD *)a9 = v26;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v36;
}

_QWORD *WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::append<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacityIfNeeded((uint64_t *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v4);
  *v5 = *a2;
  v6 = a2[1];
  a2[1] = 0;
  v5[1] = v6;
  if (v4 == *(unsigned int *)(a1 + 24) - 1)
    v7 = 0;
  else
    v7 = v4 + 1;
  *(_QWORD *)(a1 + 8) = v7;
}

void WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::values(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  char *v27;
  uint64_t v28[2];
  char v29;

  *a2 = 0;
  a2[1] = 0;
  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v29 = 0;
  v27 = &v29;
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::values(void)::{lambda(0ul &)#1},WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>>((_QWORD **)a1, &v27, v28);
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a2, v28, v6, v7, v8, v9, v10, v11);
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v12, v13, v14, v15, v16, v17, v18);
  if (v29)
    _ZN3WTF9HashTableIPKN3JSC17DeferredWorkTimer10TicketDataENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_((uint64_t *)a1, v28, v19, v20, v21, v22, v23, v24);
  *(_DWORD *)(a1 + 8) = 0;
  v25 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    LODWORD(v25) = *((_DWORD *)v25 - 3);
    if (v25 > 0x7FFFFFFE)
      LODWORD(v25) = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 12) = 2 * (_DWORD)v25;
  v26 = __ldxr(v4);
  if (v26 == 1)
  {
    if (!__stlxr(0, v4))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v19, v20, v21, v22, v23, v24);
}

void WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::values(void)::{lambda(0ul &)#1},WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>>(_QWORD **a1@<X0>, _BYTE **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a3 = 0;
  a3[1] = 0;
  if (!*a1)
    goto LABEL_5;
  v6 = *((unsigned int *)*a1 - 3);
  if (!(_DWORD)v6)
    goto LABEL_5;
  if (!(v6 >> 29))
  {
    v7 = WTF::fastMalloc((WTF *)(8 * v6));
    *((_DWORD *)a3 + 2) = v6;
    *a3 = v7;
LABEL_5:
    _ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN3JSC17DeferredWorkTimer10TicketDataEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS4_NS_12RawPtrTraitsIS4_EENS_21DefaultRefDerefTraitsIS4_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSB_ISN_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISL_EENS_10HashTraitsISL_EENST_ISQ_EENS_15HashTableTraitsEEEvE10compactMapERSI_SY_RKS8_((uint64_t)a3, a1, a2);
    return;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t ***)a1;
    v13 = 8 * v10;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v14, a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  WTF::GenericHashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN3JSC17DeferredWorkTimer10TicketDataEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS4_NS_12RawPtrTraitsIS4_EENS_21DefaultRefDerefTraitsIS4_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSB_ISN_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISL_EENS_10HashTraitsISL_EENST_ISQ_EENS_15HashTableTraitsEEEvE10compactMapERSI_SY_RKS8_(uint64_t a1, _QWORD **a2, _BYTE **a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::begin(a2);
  v13 = v6;
  v15 = v14;
  if (*a2)
    v16 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v16 = 0;
  if ((uint64_t *)v16 != v6)
  {
    do
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v13[1], *v13, v7, v8, v9, v10, v11, v12, &v24);
      v18 = v24;
      if (v24)
      {
        v23 = v24;
        v24 = 0;
        v19 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>(a1, (unint64_t)&v23);
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v23 = 0;
          *(_QWORD *)(v20 + 8 * v19) = v18;
          *(_DWORD *)(a1 + 12) = v19 + 1;
        }
        v21 = v23;
        v23 = 0;
        if (v21)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v21, v17, v7, v8, v9, v10, v11, v12);
        v22 = v24;
        v24 = 0;
        if (v22)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v22, v17, v7, v8, v9, v10, v11, v12);
      }
      else
      {
        **a3 = 1;
      }
      while (1)
      {
        v13 += 2;
        if (v13 == v15)
          break;
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_17;
      }
      v13 = v15;
LABEL_17:
      ;
    }
    while (v13 != (uint64_t *)v16);
  }
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, *(unsigned int *)(a1 + 12), v7, v8, v9, v10, v11, v12);
}

_QWORD *WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

void WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v13;

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a1))
    goto LABEL_3;
LABEL_4:
  if (*(_QWORD *)(a1 + 24))
    ++*(_QWORD *)(a1 + 8);
  else
    a2 = 0;
  *a9 = a2;
  v13 = __ldxr((unsigned __int8 *)a1);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)a1))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  void *v12;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(const void **)a1;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = WTF::fastRealloc((unint64_t)v10, 8 * a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(unsigned int *)(a1 + 12);
      v12 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v12;
      if (v12 != v10)
        memcpy(v12, v10, 8 * v11);
    }
    if (v10)
    {
      if (*(const void **)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (uint64_t **)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
    v12 = 8 * v10 - 8 * (_QWORD)a2;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v13, a2, a3, a4, a5, a6, a7, a8);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t _ZN3WTF9HashTableIPKN3JSC17DeferredWorkTimer10TicketDataENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::ThreadSafeWeakPtrControlBlock **v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        v13 = v12;
        v14 = (_QWORD *)(v8 + 16 * v12);
        if ((unint64_t)(*v14 + 1) >= 2)
        {
          v15 = v8 + 16 * v12;
          v17 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          v16 = (WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            *v14 = -1;
            v18 = *v16;
            *v16 = 0;
            if (v18)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
            ++v11;
          }
        }
        --v12;
      }
      while (v13);
      v19 = *a1;
      v8 = v11 != 0;
      if (v11)
      {
        *(_DWORD *)(v19 - 16) += v11;
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 12);
        else
          v21 = 0;
        *(_DWORD *)(v20 - 12) = v21 - v11;
        v19 = *a1;
      }
      if (v19)
      {
        v22 = *(_DWORD *)(v19 - 4);
        if (6 * *(_DWORD *)(v19 - 12) < v22 && v22 >= 9)
          WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::shrinkToBestSize(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::shrinkToBestSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  if (*a1)
    v8 = *(_DWORD *)(*a1 - 12);
  else
    v8 = 0;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * (unint64_t)v8)
      goto LABEL_9;
  }
  else if (3 * v11 > 4 * (unint64_t)v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_9:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_10:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  return WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::rehash(a1, v15, 0, a4, a5, a6, a7, a8);
}

BOOL WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(WTF::ThreadSafeWeakPtrControlBlock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v10 = *((_QWORD *)this + 3);
  v11 = __ldxr((unsigned __int8 *)this);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v10 == 0;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
  return v10 == 0;
}

_QWORD *WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD *v25;
  WTF::ThreadSafeWeakPtrControlBlock *v26;
  _QWORD *v27;
  WTF::ThreadSafeWeakPtrControlBlock *v28;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (_QWORD *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v27 = WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::reinsert(a1, v25, v16, v17, v18, v19, v20, v21);
          v28 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[1];
          v25[1] = 0;
          if (v28)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v28, v15, v16, v17, v18, v19, v20, v21);
          if (v25 == (_QWORD *)a3)
            v22 = v27;
        }
        else
        {
          v26 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[1];
          v25[1] = 0;
          if (v26)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_17;
  }
  result = 0;
  if (v11)
  {
LABEL_17:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::reinsert(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  uint64_t v20;

  v9 = *a1;
  if (*a1)
    v10 = *(_DWORD *)(v9 - 8);
  else
    v10 = 0;
  v11 = ~(*a2 << 32) + *a2;
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  v15 = 1;
  do
  {
    v16 = v14;
    v17 = *(_QWORD *)(v9 + 16 * v14);
    v14 = (v14 + v15++) & v10;
  }
  while (v17);
  v18 = (_QWORD *)(v9 + 16 * v16);
  v19 = (WTF::ThreadSafeWeakPtrControlBlock *)v18[1];
  v18[1] = 0;
  if (v19)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, a2, a3, a4, a5, a6, a7, a8);
  *v18 = *a2;
  v20 = a2[1];
  a2[1] = 0;
  v18[1] = v20;
  return v18;
}

BOOL JSC::DirectArguments::isMappedArgument(JSC::DirectArguments *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)this + 8) <= a2)
    return 0;
  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 1;
  if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
    return *(_BYTE *)(v2 + a2) == 0;
  v3 = v2 & 0x3FFFFFFFFLL;
  if (!(v3 + qword_1ECF4C038))
    return 1;
  v2 = v3 + qword_1ECF4C038;
  return *(_BYTE *)(v2 + a2) == 0;
}

uint64_t JSC::DirectArguments::isModifiedArgumentDescriptor(uint64_t this, unsigned int a2, unsigned int a3)
{
  if (this)
  {
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      if ((this & 0x3FFFFFFFFLL) + qword_1ECF4C038 && a2 > a3)
      {
        if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          this = (this & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        return *(_BYTE *)(this + a3) != 0;
      }
    }
    else if (a2 > a3)
    {
      return *(_BYTE *)(this + a3) != 0;
    }
    return 0;
  }
  return this;
}

void JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor(JSC::JSCell *a1, JSC **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t SlowCase;
  unint64_t OutOfMemoryError;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Exception *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = a2[7];
  v11 = *((_QWORD *)a1 + 2);
  if (v11
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    __break(0xC471u);
    return;
  }
  if (a3)
  {
    v12 = a3;
    v13 = (a3 + 7) & 0x1FFFFFFF8;
    if (v13 <= 0x1F60 && (v14 = *(_QWORD *)((char *)v10 + (((v13 + 15) >> 1) & 0x1FFFFFFF8) + 2592)) != 0)
    {
      v15 = *(unsigned int *)(v14 + 60);
      v16 = *(_QWORD **)(v14 + 24);
      if ((unint64_t)v16 < *(_QWORD *)(v14 + 32))
      {
        *(_QWORD *)(v14 + 24) = (char *)v16 + v15;
        if (v16)
        {
LABEL_10:
          *((_QWORD *)a1 + 2) = v16;
          if (*((_DWORD *)v10 + 190) >= *((unsigned __int8 *)a1 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v10 + 192, (unint64_t)a1);
          bzero(v16, v12);
          return;
        }
        goto LABEL_16;
      }
      v16 = *(_QWORD **)(v14 + 40);
      if ((v16 & 1) == 0)
      {
        v26 = v16[1] ^ *(_QWORD *)(v14 + 48);
        *(_QWORD *)(v14 + 32) = (char *)v16 + HIDWORD(v26);
        *(_QWORD *)(v14 + 40) = (char *)v16 + (int)v26;
        *(_QWORD *)(v14 + 24) = (char *)v16 + v15;
        goto LABEL_10;
      }
      v27 = *(_QWORD *)((char *)v10 + (((v13 + 15) >> 1) & 0x1FFFFFFF8) + 2592);
      JSC::sanitizeStackForVM(v10, (JSC::VM *)a2, v13, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, (uint64_t)v10 + 192, v15, 0, 1, v28, v29, v30);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v10 + 2504, a2[7], v13, 0, a5, a6, a7, a8);
    }
    v16 = (_QWORD *)SlowCase;
    if (SlowCase)
      goto LABEL_10;
LABEL_16:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, (JSC::JSGlobalObject *)a2);
    v25 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)OutOfMemoryError, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v10, (JSC::JSGlobalObject *)a2, v25, v24, v19, v20, v21, v22, v23);
  }
}

_QWORD *JSC::DumpContext::DumpContext(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void JSC::DumpContext::~DumpContext(JSC::DumpContext *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (_DWORD **)*((_QWORD *)this + 1);
      do
      {
        v12 = *v11;
        if (*v11 != (_DWORD *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            if (*v12 == 1)
              WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
            else
              --*v12;
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (_DWORD **)(v13 + 8);
      do
      {
        if (*(v15 - 1) != (_DWORD *)-1)
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            if (*v16 == 1)
              WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
            else
              --*v16;
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL JSC::DumpContext::isEmpty(JSC::DumpContext *this)
{
  return !*(_QWORD *)this || *(_DWORD *)(*(_QWORD *)this - 12) == 0;
}

void WTF::StringHashDumpContext<JSC::Structure>::dump(uint64_t a1, uint64_t a2, const char *a3)
{
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _DWORD **v28;
  WTF *v29;
  _DWORD *v30;
  WTF *v31;
  _DWORD *v32;
  JSC::Structure *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  size_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int8x16_t **v60;
  int8x16_t *v61;
  __int8 v62;
  unsigned int v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  JSC::Structure *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  WTF *v87;
  WTF::PrintStream *v88;
  WTF::PrintStream *v89;
  float v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  size_t v99;
  unint64_t v100;
  WTF *v101;
  WTF::PrintStream *v102;
  const char *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  WTF::PrintStream *v107;
  float v108;
  const char *v109;
  const char *v110;
  WTF::PrintStream *v111;
  WTF::PrintStream *v112;
  float v113;
  WTF::PrintStream *v114;
  float v115;
  WTF *v116;
  uint64_t v117;
  _DWORD *v118;
  WTF *v119;
  const char *v121;
  unsigned int v122;
  WTF *v123;
  uint64_t v124;
  char v125;
  WTF *v126;
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v121 = a3;
  WTF::PrintStream::printf(v5, "%s", a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", "Structures:");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v126, v9);
  WTF::printExpectedCStringHelper(v8, "StringView", &v126);
  if ((_DWORD)v127 != -1)
    ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v123, &v126);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v123 = 0;
  v124 = 0;
  v14 = a1;
  v15 = *(_QWORD **)(a1 + 8);
  if (!v15)
  {
    v25 = 0;
    v16 = 0;
LABEL_19:
    v17 = &v15[2 * v16];
    v15 = v25;
    goto LABEL_20;
  }
  v16 = *((unsigned int *)v15 - 1);
  v17 = &v15[2 * v16];
  if (!*((_DWORD *)v15 - 3))
  {
    v25 = &v15[2 * v16];
    goto LABEL_19;
  }
  if ((_DWORD)v16)
  {
    v18 = 16 * v16;
    while (1)
    {
      v126 = 0;
      v22 = WTF::operator==((uint64_t)v15, (int8x16_t **)&v126);
      v23 = v126;
      v126 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree((unint64_t)v23, v19, v20, v21, v10, v11, v12, v13);
        else
          --*(_DWORD *)v23;
      }
      v24 = *v15 == -1 ? 1 : v22;
      if (v24 != 1)
        break;
      v15 += 2;
      v18 -= 16;
      if (!v18)
      {
        v15 = v17;
        break;
      }
    }
  }
LABEL_20:
  v122 = 0;
  while (1)
  {
LABEL_21:
    v26 = *(_QWORD **)(a1 + 8);
    if (v26)
      v26 += 2 * *((unsigned int *)v26 - 1);
    if (v15 == v26)
      break;
    v27 = HIDWORD(v124);
    if (HIDWORD(v124) == (_DWORD)v124)
    {
      v28 = (_DWORD **)WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v123, HIDWORD(v124) + 1, (unint64_t)v15);
      v27 = HIDWORD(v124);
      v29 = v123;
      v30 = *v28;
      if (*v28)
        ++*v30;
      *((_QWORD *)v29 + v27) = v30;
    }
    else
    {
      v31 = v123;
      v32 = (_DWORD *)*v15;
      if (*v15)
        ++*v32;
      *((_QWORD *)v31 + v27) = v32;
    }
    HIDWORD(v124) = v27 + 1;
    v33 = (JSC::Structure *)v15[1];
    v126 = (WTF *)off_1E3572250;
    v127 = (WTF *)v129;
    v128 = xmmword_199122F80;
    v129[0] = 0;
    JSC::Structure::dumpBrief(v33, (WTF::PrintStream *)&v126, (const WTF::CString *)v15);
    v37 = v127;
    if (!v127)
    {
      v41 = 0;
LABEL_42:
      WTF::fastFree(v41, v34, v35, v36, v10, v11, v12, v13);
      goto LABEL_43;
    }
    v38 = v128;
    if ((unint64_t)v128 >= 0xFFFFFFFFFFFFFFF0)
    {
LABEL_149:
      __break(0xC471u);
      JUMPOUT(0x1989253E4);
    }
    if ((_QWORD)v128 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1989253ECLL);
    }
    v39 = WTF::fastMalloc((WTF *)(v128 + 17));
    *(_DWORD *)v39 = 1;
    *(_QWORD *)(v39 + 8) = v38;
    memcpy((void *)(v39 + 16), v37, v38);
    *(_BYTE *)(v39 + 16 + v38) = 0;
    if (v127 != (WTF *)v129)
      WTF::fastFree((unint64_t)v127, v34, v35, v36, v10, v11, v12, v13);
    v40 = v122;
    if (v122 <= *(_DWORD *)(v39 + 8))
      v40 = *(_DWORD *)(v39 + 8);
    v122 = v40;
    if (*(_DWORD *)v39 == 1)
    {
      v41 = v39;
      goto LABEL_42;
    }
    --*(_DWORD *)v39;
LABEL_43:
    v42 = v15 + 2;
    v15 = v17;
    if (v42 != v17)
    {
      v15 = v42;
      while (1)
      {
        v126 = 0;
        v46 = WTF::operator==((uint64_t)v15, (int8x16_t **)&v126);
        v47 = v126;
        v126 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            WTF::fastFree((unint64_t)v47, v43, v44, v45, v10, v11, v12, v13);
          else
            --*(_DWORD *)v47;
        }
        v48 = *v15 == -1 ? 1 : v46;
        if (v48 != 1)
          break;
        v15 += 2;
        if (v15 == v17)
        {
          v15 = v17;
          goto LABEL_21;
        }
      }
    }
  }
  v49 = 126 - 2 * __clz(HIDWORD(v124));
  if (HIDWORD(v124))
    v50 = v49;
  else
    v50 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *,false>((const char **)v123, (const char **)v123 + HIDWORD(v124), v50, 1, v10, v11, v12, v13);
  if (!HIDWORD(v124))
    goto LABEL_141;
  v58 = 0;
  do
  {
    v59 = *(_QWORD *)(v14 + 8);
    if (!v59)
    {
      v68 = 0;
      goto LABEL_94;
    }
    v60 = (int8x16_t **)((char *)v123 + 8 * v58);
    v61 = *v60;
    if (*v60)
    {
      v62 = v61[1].i8[0];
      v63 = -1640531527;
      if (v62)
      {
        v64 = &v61[1].u8[2];
        while (1)
        {
          v65 = v63 + (unsigned __int16)v62;
          if (!*(v64 - 1))
            break;
          v66 = ((unsigned __int16)(char)*(v64 - 1) << 11) ^ (v65 << 16) ^ v65;
          v63 = v66 + (v66 >> 11);
          v67 = *v64;
          v64 += 2;
          v62 = v67;
          if (!v67)
            goto LABEL_70;
        }
        v63 = (v65 ^ (v65 << 11)) + ((v65 ^ (v65 << 11)) >> 17);
      }
LABEL_70:
      v70 = (v63 ^ (8 * v63)) + ((v63 ^ (8 * v63)) >> 5);
      v71 = (v70 ^ (4 * v70)) + ((v70 ^ (4 * v70)) >> 15);
      v69 = v71 ^ (v71 << 10);
      if (!v69)
        v69 = 0x800000;
    }
    else
    {
      v69 = 0;
    }
    v72 = 0;
    v73 = *(_DWORD *)(v59 - 8);
    while (1)
    {
      v74 = v69 & v73;
      v75 = *(_QWORD *)(v59 + 16 * v74);
      if (v75 == -1 || &v61->i8[1] == 0)
        break;
      v78 = WTF::operator==(v59 + 16 * v74, v60);
      if ((v78 & 1) != 0)
        goto LABEL_92;
LABEL_85:
      v126 = 0;
      v86 = WTF::operator==(v59 + 16 * v74, (int8x16_t **)&v126);
      v87 = v126;
      v126 = 0;
      if (!v87)
        goto LABEL_88;
      if (*(_DWORD *)v87 != 1)
      {
        --*(_DWORD *)v87;
LABEL_88:
        if ((v86 & 1) != 0)
          goto LABEL_91;
        goto LABEL_89;
      }
      WTF::fastFree((unint64_t)v87, v79, v80, v81, v82, v83, v84, v85);
      if ((v86 & 1) != 0)
      {
LABEL_91:
        v68 = 0;
        goto LABEL_93;
      }
LABEL_89:
      v69 = ++v72 + v74;
      v61 = *v60;
    }
    if (v75 != -1 || &v61->i8[1] != 0)
      goto LABEL_85;
LABEL_92:
    v68 = *(JSC::Structure **)(v59 + 16 * v74 + 8);
LABEL_93:
    v14 = a1;
LABEL_94:
    v88 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v88, "%s", v121);
    v89 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v88 + 32))(v88);
    WTF::StringImpl::utf8ForCharacters("    ", 4uLL, (uint64_t)&v126, v90);
    WTF::printExpectedCStringHelper(v89, "StringView", &v126);
    if ((_DWORD)v127 != -1)
      ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v125, &v126);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v88 + 40))(v88);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if (v58 >= HIDWORD(v124))
    {
      __break(0xC471u);
      JUMPOUT(0x1989253F4);
    }
    v126 = (WTF *)off_1E3572250;
    v127 = (WTF *)v129;
    v128 = xmmword_199122F80;
    v129[0] = 0;
    JSC::Structure::dumpBrief(v68, (WTF::PrintStream *)&v126, (WTF *)((char *)v123 + 8 * v58));
    v98 = v127;
    if (!v127)
    {
      v100 = 0;
      v101 = 0;
LABEL_103:
      WTF::fastFree((unint64_t)v101, v91, v92, v93, v94, v95, v96, v97);
      goto LABEL_104;
    }
    v99 = v128;
    if ((unint64_t)v128 >= 0xFFFFFFFFFFFFFFF0)
      goto LABEL_149;
    if ((_QWORD)v128 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1989253FCLL);
    }
    v100 = WTF::fastMalloc((WTF *)(v128 + 17));
    *(_DWORD *)v100 = 1;
    *(_QWORD *)(v100 + 8) = v99;
    memcpy((void *)(v100 + 16), v98, v99);
    *(_BYTE *)(v100 + 16 + v99) = 0;
    v101 = v127;
    if (v127 != (WTF *)v129)
      goto LABEL_103;
LABEL_104:
    v102 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v103 = (const char *)(v100 + 16);
    if (!v100)
      v103 = 0;
    WTF::PrintStream::printf(v102, "%s", v103);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if (v100)
      v104 = *(_QWORD *)(v100 + 8);
    else
      LODWORD(v104) = 0;
    v105 = v122 - v104;
    if (v122 > v104)
    {
      do
      {
        v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v107 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 32))(v106);
        WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v126, v108);
        if ((_DWORD)v127)
        {
          if ((_DWORD)v127 != 1)
            std::__throw_bad_variant_access[abi:sn180100]();
          if ((_BYTE)v126)
            v110 = "(failed to convert ";
          else
            v110 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v107, "%s", v110);
          WTF::PrintStream::printf(v107, "%s", "StringView");
          v109 = " to utf8)";
        }
        else if (v126)
        {
          v109 = (char *)v126 + 16;
        }
        else
        {
          v109 = 0;
        }
        WTF::PrintStream::printf(v107, "%s", v109);
        if ((_DWORD)v127 != -1)
          ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v125, &v126);
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 40))(v106);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        --v105;
      }
      while (v105);
    }
    v111 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v112 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v111 + 32))(v111);
    WTF::StringImpl::utf8ForCharacters(" = ", 3uLL, (uint64_t)&v126, v113);
    WTF::printExpectedCStringHelper(v112, "StringView", &v126);
    if ((_DWORD)v127 != -1)
      ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v125, &v126);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v111 + 40))(v111);
    JSC::Structure::dump((unint64_t)v68, v111);
    v114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v111 + 32))(v111);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v126, v115);
    WTF::printExpectedCStringHelper(v114, "StringView", &v126);
    if ((_DWORD)v127 != -1)
      ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v125, &v126);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v111 + 40))(v111);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if (v100)
    {
      if (*(_DWORD *)v100 == 1)
        WTF::fastFree(v100, v51, v52, v53, v54, v55, v56, v57);
      else
        --*(_DWORD *)v100;
    }
    ++v58;
  }
  while (v58 < HIDWORD(v124));
  if (HIDWORD(v124))
  {
    v116 = v123;
    v117 = 8 * HIDWORD(v124);
    do
    {
      v118 = *(_DWORD **)v116;
      *(_QWORD *)v116 = 0;
      if (v118)
      {
        if (*v118 == 1)
          WTF::fastFree((unint64_t)v118, v51, v52, v53, v54, v55, v56, v57);
        else
          --*v118;
      }
      v116 = (WTF *)((char *)v116 + 8);
      v117 -= 8;
    }
    while (v117);
  }
LABEL_141:
  v119 = v123;
  if (v123)
  {
    v123 = 0;
    LODWORD(v124) = 0;
    WTF::fastFree((unint64_t)v119, v51, v52, v53, v54, v55, v56, v57);
  }
}

unint64_t JSC::createSyntaxError(JSC::JSGlobalObject *a1, WTF::StringImpl **a2, uint64_t a3)
{
  JSC::Heap **v5;
  unint64_t v6;

  v5 = (JSC::Heap **)*((_QWORD *)a1 + 7);
  v6 = JSC::LazyClassStructure::get((JSC::JSGlobalObject *)((char *)a1 + 160), (unint64_t)a1);
  return JSC::ErrorInstance::create(v5, v6, a2, 0, a3, 0, 4, 1);
}

unint64_t JSC::createTypeError(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  JSC::Heap **v8;
  uint64_t (*v10)(_QWORD *);
  _QWORD *v11;
  _QWORD v12[3];

  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(JSC::Heap ***)(a1 + 56);
  if ((v7 & 1) != 0)
  {
    v10 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v11 = (_QWORD *)(a1 - 16);
    v12[0] = *v11;
    v12[1] = a1;
    v12[2] = a1 + 176;
    v7 = v10(v12);
  }
  return JSC::ErrorInstance::create(v8, v7, a2, 0, a3, a4, 5, 1);
}

unint64_t JSC::createNotEnoughArgumentsError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  JSC::Heap **v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *);
  _QWORD *v26;
  WTF::StringImpl *v27;
  _QWORD v28[3];

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1400000002;
  *(_QWORD *)(v4 + 8) = "Not enough arguments";
  *(_DWORD *)(v4 + 16) = 4;
  v27 = (WTF::StringImpl *)v4;
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(JSC::Heap ***)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    v25 = *(uint64_t (**)(_QWORD *))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v26 = (_QWORD *)(a1 - 16);
    v28[0] = *v26;
    v28[1] = a1;
    v28[2] = a1 + 176;
    v5 = v25(v28);
  }
  v14 = JSC::ErrorInstance::create(v6, v5, &v27, 0, a2, 0, 5, 1);
  v15 = v27;
  v27 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v14;
}

unint64_t JSC::createError(JSC::JSGlobalObject *a1, int a2, WTF::StringImpl **a3)
{
  unint64_t result;

  if (a2 == 5)
    return JSC::createTypeError((unint64_t)a1, a3, (const WTF::String *)a3);
  switch(a2)
  {
    case 0:
      result = JSC::createError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    case 1:
      result = JSC::createEvalError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    case 2:
      result = JSC::createRangeError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    case 3:
      result = JSC::createReferenceError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    case 4:
      result = JSC::createSyntaxError(a1, a3, 0);
      break;
    case 6:
      result = JSC::createURIError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    case 8:
      result = JSC::createOutOfMemoryError((unint64_t)a1, a3, (const WTF::String *)a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t JSC::createError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  JSC::Heap **v4;
  unint64_t v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(JSC::Heap ***)(this + 56);
  v5 = *(_QWORD *)(this + 1504);
  if ((v5 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 1504;
    v5 = v7(v9);
  }
  return JSC::ErrorInstance::create(v4, v5, a2, 0, 0, 0, 0, 1);
}

unint64_t JSC::createEvalError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)(this + 112);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 112;
    v4 = v7(v9);
  }
  return JSC::ErrorInstance::create(v5, v4, a2, 0, 0, 0, 1, 1);
}

unint64_t JSC::createRangeError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)(this + 128);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 128;
    v4 = v7(v9);
  }
  return JSC::ErrorInstance::create(v5, v4, a2, 0, 0, 0, 2, 1);
}

unint64_t JSC::createReferenceError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)(this + 144);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 144;
    v4 = v7(v9);
  }
  return JSC::ErrorInstance::create(v5, v4, a2, 0, 0, 0, 3, 1);
}

unint64_t JSC::createSyntaxError(JSC *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  return JSC::createSyntaxError(this, a2, 0);
}

unint64_t JSC::createTypeError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)(this + 176);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 176;
    v4 = v7(v9);
  }
  return JSC::ErrorInstance::create(v5, v4, a2, 0, 0, 0, 5, 1);
}

unint64_t JSC::createURIError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)(this + 192);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v7 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v8 = (_QWORD *)(this - 16);
    v9[0] = *v8;
    v9[1] = this;
    v9[2] = this + 192;
    v4 = v7(v9);
  }
  return JSC::ErrorInstance::create(v5, v4, a2, 0, 0, 0, 6, 1);
}

unint64_t JSC::createOutOfMemoryError(unint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v4;
  unint64_t result;
  unint64_t v6;
  JSC::Heap **v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(const char **);
  const char **v35;
  JSC::Heap **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  const char *v39;
  unint64_t v40;
  char *v41;

  v4 = *a2;
  if (!*a2 || !*((_DWORD *)v4 + 1))
    return JSC::createOutOfMemoryError(this, (JSC::JSGlobalObject *)a2);
  *(_DWORD *)v4 += 2;
  v37 = v4;
  v39 = "Out of memory: ";
  v40 = 16;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v39, (uint64_t *)&v37, (int **)&v38);
  if (v38)
  {
    v6 = *(_QWORD *)(this + 128);
    v7 = *(JSC::Heap ***)(this + 56);
    if ((v6 & 1) != 0)
    {
      v34 = *(uint64_t (**)(const char **))(v6 & 0xFFFFFFFFFFFFFFFCLL);
      v35 = (const char **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v35 = (const char **)(this - 16);
      v39 = *v35;
      v40 = this;
      v41 = (char *)(this + 128);
      v36 = v7;
      v6 = v34(&v39);
      v7 = v36;
    }
    v15 = JSC::ErrorInstance::create(v7, v6, &v38, 0, 0, 0, 2, 1);
    v16 = v38;
    v38 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    v17 = v37;
    v37 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    *(_BYTE *)(v15 + 59) |= 2u;
    return v15;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::getLineColumnAndSource(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int **v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t *v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  WTF::StringImpl *v82;

  v10 = (unint64_t)a2;
  *a3 = 0;
  v12 = (WTF::StringImpl *)*a4;
  *a4 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v10)
  {
    v13 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(*(_QWORD *)v10 + 8);
      if (v15)
      {
        v16 = 0;
        v10 = 1;
LABEL_8:
        v17 = v14 + 40 * v16;
        v18 = *(_DWORD *)(v17 + 32) >> 2;
        v19 = *(_QWORD *)(v15 + 56);
        if (v18 >= *(_DWORD *)(*(_QWORD *)(v19 + 80) + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198925D48);
        }
        v20 = v17 + 8;
        v21 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v19 + 160), v18);
        v29 = *(_QWORD *)(v15 + 64);
        if ((_DWORD)v21)
          v30 = 1;
        else
          v30 = *(_DWORD *)(v29 + 60) + 1;
        v31 = (v21 + *(_DWORD *)(v29 + 56) + 1);
        v32 = (unint64_t)(v30 + HIDWORD(v21)) << 32;
        v33 = *(_QWORD *)(*(_QWORD *)v20 + 64);
        if (*(_BYTE *)(v33 + 5) == 12)
        {
          v34 = *(_QWORD *)(v33 + 72);
          if (v34)
          {
            LODWORD(v34) = *(_DWORD *)(v34 + 16);
            v81 = (_DWORD)v34 == -1;
            v34 = (_DWORD)v34 == -1 ? 0 : v34;
            if (!v81)
              v31 = v34;
          }
        }
        *a3 = v32 | v31;
        if (*(_BYTE *)(v14 + 40 * v16 + 36))
        {
          v43 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v43 = 0xB00000002;
          v48 = "[wasm code]";
        }
        else
        {
          if (*(_QWORD *)v20)
          {
            v35 = (int **)JSC::SourceProvider::sourceURLStripped(*(WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)v20 + 64) + 40), v22, v23, v24, v25, v26, v27, v28);
            JSC::processSourceURL((int **)&v82, a1, v14 + 40 * v16, v35);
            v43 = (uint64_t)v82;
            goto LABEL_16;
          }
          v43 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v43 = 0xD00000002;
          v48 = "[native code]";
        }
        *(_QWORD *)(v43 + 8) = v48;
        *(_DWORD *)(v43 + 16) = 4;
LABEL_16:
        v82 = 0;
        v44 = (WTF::StringImpl *)*a4;
        *a4 = v43;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
            v72 = v82;
            v82 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
              {
                WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
                WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
              }
              else
              {
                *(_DWORD *)v72 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        return v10;
      }
      v16 = 0;
      v46 = (uint64_t *)(v14 + 48);
      while (v13 - 1 != v16)
      {
        v47 = *v46;
        v46 += 5;
        v15 = v47;
        ++v16;
        if (v47)
        {
          v10 = v16 < v13;
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  return v10;
}

void JSC::addErrorInfo(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int64_t v81;
  JSC::Wasm::NameSection *v82;
  JSC::JSGlobalObject *v83;
  int v84;
  int v85;
  uint64_t v86;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v3 + 3220))
  {
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    v6 = v5 + 5244;
    v7 = a3 ^ 1;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if ((*(_QWORD *)(v3 + 3216) & 0xFF00000000) != 0)
      v9 = *(_QWORD *)(v3 + 3216);
    else
      v9 = 0;
    JSC::Interpreter::getStackTrace((uint64_t)(v5 + 11320), (unint64_t)a2, v8, v7, v9, 0, 0, 0);
    if (*(_DWORD *)(v8 + 12))
    {
      v80 = 0;
      v81 = 0;
      JSC::getLineColumnAndSource((uint64_t)v5, (WTF::AtomStringImpl *)v8, (unint64_t *)&v81, (uint64_t *)&v80, v10, v11, v12, v13);
      v18 = *(_QWORD *)(*v6 + 1776);
      if ((int)v81 < 0)
        v19 = COERCE__INT64((double)v81) + 0x2000000000000;
      else
        v19 = v81 | 0xFFFE000000000000;
      v82 = 0;
      v83 = a2;
      v84 = -1;
      v17.n128_u64[0] = 0x100000001000000;
      v85 = 0x1000000;
      v86 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v5, v18, v19, 0, (uint64_t)&v82, v15, v16, v17);
      v23 = *(_QWORD *)(*v6 + 1032);
      if (v81 < 0)
        v24 = COERCE__INT64((double)HIDWORD(v81)) + 0x2000000000000;
      else
        v24 = HIDWORD(v81) | 0xFFFE000000000000;
      v82 = 0;
      v83 = a2;
      v84 = -1;
      v22.n128_u64[0] = 0x100000001000000;
      v85 = 0x1000000;
      v86 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v5, v23, v24, 0, (uint64_t)&v82, v20, v21, v22);
      if (v80 && *((_DWORD *)v80 + 1))
      {
        v74 = *(_QWORD *)(*v6 + 2352);
        v75 = JSC::jsString((uint64_t)v5, (JSC::VM *)&v80, v25, v26, v27, v28, v29, v30);
        v82 = 0;
        v83 = a2;
        v84 = -1;
        v76.n128_u64[0] = 0x100000001000000;
        v85 = 0x1000000;
        v86 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v5, v74, v75, 0, (uint64_t)&v82, v77, v78, v76);
      }
      v31 = *(_QWORD *)(*v6 + 2360);
      JSC::Interpreter::stackTraceAsString((JSC::VM *)v5, v8, v25, v26, v27, v28, v29, v30, &v79);
      v38 = JSC::jsString((uint64_t)v5, (JSC::VM *)&v79, v32, v33, v34, v35, v36, v37);
      v82 = 0;
      v83 = a2;
      v84 = -1;
      v39.n128_u64[0] = 0x100000001000000;
      v85 = 0x1000000;
      v86 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v5, v31, v38, 4, (uint64_t)&v82, v40, v41, v39);
      v49 = v79;
      v79 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      v50 = v80;
      v80 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
        {
          WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
          WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        }
        else
        {
          *(_DWORD *)v50 -= 2;
        }
      }
    }
    else
    {
      JSC::JSObject::putDirect((int *)a2, (uint64_t)v5, *(_QWORD *)(*v6 + 2360), v5[5246], 4, v14, v11, v12, v13);
    }
    v51 = *(_DWORD *)(v8 + 12);
    if (v51)
    {
      v52 = *(_QWORD *)v8;
      v53 = *(_QWORD *)v8 + 40 * v51;
      do
      {
        v54 = *(unsigned int **)(v52 + 24);
        *(_QWORD *)(v52 + 24) = 0;
        if (v54)
        {
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v54);
            v82 = (JSC::Wasm::NameSection *)v54;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v82, v42, v43, v44, v45, v46, v47, v48);
          }
        }
        v52 += 40;
      }
      while (v52 != v53);
    }
    v57 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(v57, v42, v43, v44, v45, v46, v47, v48);
    }
    WTF::fastFree(v8, v42, v43, v44, v45, v46, v47, v48);
  }
}

JSC::VM *JSC::addErrorInfo(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t *a4, const SourceCode *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  JSC::VM *v27;
  int v28;
  int v29;
  uint64_t v30;

  v9 = a3;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &JSC::ErrorInstance::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &JSC::ErrorInstance::s_info && v14 != 0);
  }
  v17 = *a4;
  if (v13)
    JSC::ErrorInstance::materializeErrorInfoIfNeeded(a2, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v18 = (JSC::VM *)(v17 + 64);
  if (v9 != -1)
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 5244) + 1776);
    v26 = 0;
    v27 = a2;
    v28 = -1;
    a9.n128_u64[0] = 0x100000001000000;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)this, v19, v9 | 0xFFFE000000000000, 0, (uint64_t)&v26, a7, a8, a9);
  }
  if (*(_QWORD *)v18)
  {
    v20 = *(_QWORD *)(*((_QWORD *)this + 5244) + 2352);
    v21 = JSC::jsString(this, v18, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v26 = 0;
    v27 = a2;
    v28 = -1;
    v22.n128_u64[0] = 0x100000001000000;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)this, v20, v21, 0, (uint64_t)&v26, v23, v24, v22);
  }
  return a2;
}

BOOL JSC::ErrorInstance::materializeErrorInfoIfNeeded(JSC::ErrorInstance *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;

  v8 = *((_BYTE *)this + 59);
  if ((v8 & 4) == 0)
  {
    JSC::ErrorInstance::computeErrorInfo(this, a2, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)this + 6))
    {
      v15 = (char *)a2 + 41952;
      v16 = *((unsigned int *)this + 8);
      if ((int)v16 < 0)
        v17 = COERCE__INT64((double)v16) + 0x2000000000000;
      else
        v17 = v16 | 0xFFFE000000000000;
      v14.n128_f64[0] = (double)v16;
      JSC::JSObject::putDirect((int *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1776), v17, 4, v14, v11, v12, v13);
      v22 = *((unsigned int *)this + 9);
      if ((int)v22 < 0)
        v23 = COERCE__INT64((double)v22) + 0x2000000000000;
      else
        v23 = v22 | 0xFFFE000000000000;
      v21.n128_f64[0] = (double)v22;
      JSC::JSObject::putDirect((int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v15 + 1032), v23, 4, v21, v18, v19, v20);
      v30 = *((_QWORD *)this + 5);
      if (v30 && *(_DWORD *)(v30 + 4))
      {
        v38 = *(_QWORD *)(*(_QWORD *)v15 + 2352);
        v39 = JSC::jsString((uint64_t)a2, (JSC::ErrorInstance *)((char *)this + 40), v24, v25, v26, v27, v28, v29);
        JSC::JSObject::putDirect((int *)this, (uint64_t)a2, v38, v39, 4, v43, v40, v41, v42);
      }
      v31 = *(_QWORD *)(*(_QWORD *)v15 + 2360);
      v32 = JSC::jsString((uint64_t)a2, (JSC::ErrorInstance *)((char *)this + 48), v24, v25, v26, v27, v28, v29);
      JSC::JSObject::putDirect((int *)this, (uint64_t)a2, v31, v32, 4, v36, v33, v34, v35);
    }
    *((_BYTE *)this + 59) |= 4u;
  }
  return (v8 & 4) == 0;
}

unint64_t JSC::createTypeErrorCopy(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  const WTF::String *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unint64_t v16;
  JSC::Heap **v17;
  unint64_t v18;
  int v20;
  int OwnPropertySlotInline;
  int8x16_t v22;
  int v23;
  unint64_t v24;
  int *v25;
  WTF::StringImpl *v26;
  int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t (*v62)(WTF::StringImpl **);
  WTF::StringImpl **v63;
  int v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79[2];
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;

  v91 = a2;
  v4 = *(_QWORD *)(a1 + 56);
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  v13.i64[0] = 0x2300000002;
  *(_QWORD *)v12 = 0x2300000002;
  *(_QWORD *)(v12 + 8) = "Error encountered during evaluation";
  *(_DWORD *)(v12 + 16) = 4;
  v90 = (WTF::StringImpl *)v12;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  v15 = *(unsigned __int8 *)(a2 + 5);
  if (v15 - 2 >= 3)
  {
    if (v15 < 0x17)
      goto LABEL_11;
    v20 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 9);
    if (v20 == 32 || v20 == 61)
      goto LABEL_11;
    v80 = 0xFFFFFFFF00000000;
    v82 = 0;
    v83 = 0;
    v81 = a2;
    v84 = 0x20000;
    v85 = 0;
    LOBYTE(v86) = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 + 41952) + 1824), (uint64_t)v79, v8, v9, v10, v11);
    if (*(_DWORD *)(v4 + 80))
    {
      v73 = *(_DWORD *)(v4 + 80);
      if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, (uint64_t)v6, v7, v8, v9, v10, v11);
      if (*(_QWORD *)(v4 + 16))
      {
LABEL_67:
        v14 = (WTF::StringImpl *)v12;
        if (v87)
        {
          v76 = *(_DWORD *)(v86 + 4);
          if (!v76)
          {
            __break(0xC471u);
            JUMPOUT(0x19892673CLL);
          }
          *(_DWORD *)(v86 + 4) = v76 - 1;
        }
        goto LABEL_56;
      }
    }
    if (BYTE1(v84) == 1)
      v23 = OwnPropertySlotInline;
    else
      v23 = 0;
    if (v23 != 1)
    {
LABEL_35:
      if (v87)
      {
        v27 = *(_DWORD *)(v86 + 4);
        if (!v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198926694);
        }
        *(_DWORD *)(v86 + 4) = v27 - 1;
      }
      goto LABEL_11;
    }
    v24 = (unint64_t)v79[0];
    v78 = v79[0];
    if (*(_DWORD *)(v4 + 80))
    {
      v74 = *(_DWORD *)(v4 + 80);
      if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, (uint64_t)v6, v7, v8, v9, v10, v11);
      if (*(_QWORD *)(v4 + 16))
        goto LABEL_67;
      v24 = (unint64_t)v78;
    }
    if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v78, (JSC::JSGlobalObject *)a1, v6, v7, v8, v9, v10, v11, (int **)&v77);
LABEL_32:
      v26 = v77;
      v77 = 0;
      v90 = v26;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        v61 = v77;
        v77 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
            WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
      if (*(_DWORD *)(v4 + 80))
      {
        v75 = *(_DWORD *)(v4 + 80);
        if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, (uint64_t)v6, v7, v8, v9, v10, v11);
        v12 = (uint64_t)v26;
        if (*(_QWORD *)(v4 + 16))
          goto LABEL_67;
      }
      goto LABEL_35;
    }
    v25 = *(int **)(v24 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *JSC::JSRopeString::resolveRope(v24, (JSC::JSGlobalObject *)a1, (uint64_t)v6, v7, v22, v8, v9, v10, v11);
      if (!v25)
        goto LABEL_31;
    }
    else if (!v25)
    {
LABEL_31:
      v77 = (WTF::StringImpl *)v25;
      goto LABEL_32;
    }
    *v25 += 2;
    goto LABEL_31;
  }
  if (v15 != 2)
  {
LABEL_2:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, (JSC::JSGlobalObject *)a1, v6, v7, v8, v9, v10, v11, (int **)v79);
    v14 = v79[0];
    goto LABEL_8;
  }
  v14 = *(WTF::StringImpl **)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    if (!v14)
      goto LABEL_8;
    goto LABEL_7;
  }
  v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)a1, (uint64_t)v6, v7, v13, v8, v9, v10, v11);
  if (v14)
LABEL_7:
    *(_DWORD *)v14 += 2;
LABEL_8:
  v79[0] = 0;
  v90 = v14;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    v44 = v79[0];
    v79[0] = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    v64 = *(_DWORD *)(v4 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, (uint64_t)v6, v7, v8, v9, v10, v11);
    if (*(_QWORD *)(v4 + 16))
    {
LABEL_56:
      v18 = 0;
      goto LABEL_13;
    }
  }
LABEL_11:
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(JSC::Heap ***)(a1 + 56);
  if ((v16 & 1) != 0)
  {
    v62 = *(uint64_t (**)(WTF::StringImpl **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v63 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v63 = (WTF::StringImpl **)(a1 - 16);
    v79[0] = *v63;
    v79[1] = (WTF::StringImpl *)a1;
    v80 = a1 + 176;
    v16 = v62(v79);
  }
  v18 = JSC::ErrorInstance::create(v17, v16, &v90, 0, 0, 0, 5, 1);
  v14 = v90;
LABEL_13:
  v90 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v18;
}

void JSC::makeDOMAttributeGetterTypeErrorMessage(int8x16_t *this@<X0>, const char *a2@<X1>, _BYTE *a3@<X8>)
{
  size_t v7;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (this)
    v7 = strlen(this->i8);
  else
    v7 = 0;
  v8 = *(WTF::StringImpl **)a2;
  if (!v8)
  {
    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,WTF::String,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(a3, (int8x16_t *)"The ", 5, this, v7, 46, 0, (int8x16_t *)" getter can only be used on instances of ", 42, this, v7);
    if (*(_QWORD *)a3)
      return;
LABEL_11:
    __break(0xC471u);
    return;
  }
  *(_DWORD *)v8 += 2;
  WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,WTF::String,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(a3, (int8x16_t *)"The ", 5, this, v7, 46, (uint64_t)v8, (int8x16_t *)" getter can only be used on instances of ", 42, this, v7);
  if (!*(_QWORD *)a3)
    goto LABEL_11;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
}

void JSC::makeDOMAttributeSetterTypeErrorMessage(int8x16_t *this@<X0>, const char *a2@<X1>, _BYTE *a3@<X8>)
{
  size_t v7;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (this)
    v7 = strlen(this->i8);
  else
    v7 = 0;
  v8 = *(WTF::StringImpl **)a2;
  if (!v8)
  {
    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,WTF::String,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(a3, (int8x16_t *)"The ", 5, this, v7, 46, 0, (int8x16_t *)" setter can only be used on instances of ", 42, this, v7);
    if (*(_QWORD *)a3)
      return;
LABEL_11:
    __break(0xC471u);
    return;
  }
  *(_DWORD *)v8 += 2;
  WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,WTF::String,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(a3, (int8x16_t *)"The ", 5, this, v7, 46, (uint64_t)v8, (int8x16_t *)" setter can only be used on instances of ", 42, this, v7);
  if (!*(_QWORD *)a3)
    goto LABEL_11;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
}

JSC::Exception *JSC::throwConstructorCannotBeCalledAsFunctionTypeError(unint64_t a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unint64_t v7;
  JSC::Heap **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  JSC::Exception *v16;
  JSC::VM *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Exception *v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(const char **);
  const char **v37;
  WTF::StringImpl *v38;
  const char *v39;
  JSC::JSGlobalObject *v40;
  _QWORD *v41;
  const char *v42;
  int v43;
  uint64_t v44;
  int v45;

  v39 = "calling ";
  LODWORD(v40) = 8;
  if (a4)
  {
    v6 = a4 - 1;
    v44 = a3;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_19;
    }
  }
  else
  {
    v6 = 0;
    v44 = a3;
  }
  v45 = v6;
  v42 = " constructor without new is invalid";
  v43 = 35;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v39, (uint64_t)&v44, (uint64_t)&v42, (int **)&v38);
  if (!v38)
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x198926B24);
  }
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(JSC::Heap ***)(a1 + 56);
  if ((v7 & 1) != 0)
  {
    v36 = *(uint64_t (**)(const char **))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (const char **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v37 = (const char **)(a1 - 16);
    v39 = *v37;
    v40 = (JSC::JSGlobalObject *)a1;
    v41 = (_QWORD *)(a1 + 176);
    v7 = v36(&v39);
  }
  v9 = JSC::ErrorInstance::create(v8, v7, &v38, 0, 0, 0, 5, 1);
  v16 = (JSC::Exception *)v9;
  v17 = *a2;
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v16 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v9, 0, v10, v11, v12, v13, v14);
  }
  v25 = JSC::VM::throwException(v17, (JSC::JSGlobalObject *)a1, v16, v15, v10, v11, v12, v13, v14);
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::throwTypeError(unint64_t a1, JSC::VM **a2, WTF::StringImpl **a3)
{
  unint64_t v6;
  JSC::Heap **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *);
  _QWORD *v16;
  _QWORD v17[3];

  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(JSC::Heap ***)(a1 + 56);
  if ((v6 & 1) != 0)
  {
    v15 = *(uint64_t (**)(_QWORD *))(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v16 = (_QWORD *)(a1 - 16);
    v17[0] = *v16;
    v17[1] = a1;
    v17[2] = a1 + 176;
    v6 = v15(v17);
  }
  v8 = JSC::ErrorInstance::create(v7, v6, a3, 0, 0, 0, 5, 1);
  return JSC::VM::throwException(*a2, (JSC::JSGlobalObject *)a1, v8, v9, v10, v11, v12, v13);
}

uint64_t JSC::throwTypeError(JSC::JSGlobalObject *a1, JSC::VM **a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0xA00000002;
  *(_QWORD *)(v4 + 8) = "Type error";
  *(_DWORD *)(v4 + 16) = 4;
  v25 = (WTF::StringImpl *)v4;
  v13 = JSC::createTypeError((unint64_t)a1, &v25, v5);
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *a2;
  if ((v13 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = JSC::Exception::create((uint64_t)v15, (JSC::VM *)v13, 0, v8, v9, v10, v11, v12);
  }
  return JSC::VM::throwException(v15, a1, (JSC::Exception *)v13);
}

unint64_t JSC::createTypeError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  const WTF::String *v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0xA00000002;
  *(_QWORD *)(v3 + 8) = "Type error";
  *(_DWORD *)(v3 + 16) = 4;
  v23 = (WTF::StringImpl *)v3;
  v12 = JSC::createTypeError((unint64_t)this, &v23, v4);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v12;
}

uint64_t JSC::throwTypeError(unint64_t a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int *v8;
  unint64_t v9;
  JSC::Heap **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Exception *v17;
  JSC::VM *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *);
  _QWORD *v38;
  WTF::StringImpl *v39;
  _QWORD v40[3];

  if (a4)
  {
    v6 = a4 - 1;
    if (a4 == 1)
    {
      v8 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v8 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v8 = 2;
      v8[1] = v6;
      *((_QWORD *)v8 + 1) = a3;
      v8[4] = 4;
    }
  }
  else
  {
    v8 = 0;
  }
  v39 = (WTF::StringImpl *)v8;
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(JSC::Heap ***)(a1 + 56);
  if ((v9 & 1) != 0)
  {
    v37 = *(uint64_t (**)(_QWORD *))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v38 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v38 = (_QWORD *)(a1 - 16);
    v40[0] = *v38;
    v40[1] = a1;
    v40[2] = a1 + 176;
    v9 = v37(v40);
  }
  v11 = JSC::ErrorInstance::create(v10, v9, &v39, 0, 0, 0, 5, 1);
  v17 = (JSC::Exception *)v11;
  v18 = *a2;
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v17 = (JSC::Exception *)JSC::Exception::create((uint64_t)v18, (JSC::VM *)v11, 0, v12, v13, v14, v15, v16);
  }
  v26 = JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, v17);
  v27 = v39;
  v39 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v26;
}

JSC::Exception *JSC::throwSyntaxError(JSC::JSGlobalObject *a1, JSC::VM **a2)
{
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0xC00000002;
  *(_QWORD *)(v4 + 8) = "Syntax error";
  *(_DWORD *)(v4 + 16) = 4;
  v25 = (WTF::StringImpl *)v4;
  v12 = JSC::createSyntaxError(a1, &v25, 0);
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *a2;
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = JSC::Exception::create((uint64_t)v15, (JSC::VM *)v12, 0, v7, v8, v9, v10, v11);
  }
  return JSC::VM::throwException(v15, a1, (JSC::Exception *)v12, v13, v7, v8, v9, v10, v11);
}

unint64_t JSC::createSyntaxError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0xC00000002;
  *(_QWORD *)(v3 + 8) = "Syntax error";
  *(_DWORD *)(v3 + 16) = 4;
  v22 = (WTF::StringImpl *)v3;
  v11 = JSC::createSyntaxError(this, &v22, 0);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

uint64_t JSC::throwSyntaxError(JSC::JSGlobalObject *a1, JSC::VM **a2, WTF::StringImpl **a3)
{
  unint64_t SyntaxError;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Exception *v11;
  JSC::VM *v12;

  SyntaxError = JSC::createSyntaxError(a1, a3, 0);
  v11 = (JSC::Exception *)SyntaxError;
  v12 = *a2;
  if ((SyntaxError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)SyntaxError & 0xFFFFFFFE) + 0x4C)))
  {
    v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)SyntaxError, 0, v6, v7, v8, v9, v10);
  }
  return JSC::VM::throwException(v12, a1, v11);
}

uint64_t JSC::throwDOMAttributeGetterTypeError(unint64_t a1, JSC::VM **a2, int8x16_t **a3, WTF::StringImpl *a4)
{
  int8x16_t *v7;
  unint64_t v8;
  JSC::Heap **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::Exception *v16;
  JSC::VM *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *);
  _QWORD *v45;
  char v46[8];
  WTF::StringImpl *v47;
  _QWORD v48[3];

  v7 = *a3;
  if (a4)
    *(_DWORD *)a4 += 2;
  *(_QWORD *)v46 = a4;
  JSC::makeDOMAttributeGetterTypeErrorMessage(v7, v46, &v47);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(JSC::Heap ***)(a1 + 56);
  if ((v8 & 1) != 0)
  {
    v44 = *(uint64_t (**)(_QWORD *))(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v45 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v45 = (_QWORD *)(a1 - 16);
    v48[0] = *v45;
    v48[1] = a1;
    v48[2] = a1 + 176;
    v8 = v44(v48);
  }
  v10 = JSC::ErrorInstance::create(v9, v8, &v47, 0, 0, 0, 5, 1);
  v16 = (JSC::Exception *)v10;
  *(_BYTE *)(v10 + 59) |= 8u;
  v17 = *a2;
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v16 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v10, 0, v11, v12, v13, v14, v15);
  }
  v25 = JSC::VM::throwException(v17, (JSC::JSGlobalObject *)a1, v16);
  v26 = v47;
  v47 = 0;
  if (!v26)
  {
LABEL_9:
    if (!a4)
      return v25;
    goto LABEL_10;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
  WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  if (!a4)
    return v25;
LABEL_10:
  if (*(_DWORD *)a4 == 2)
  {
    WTF::StringImpl::~StringImpl(a4, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  else
  {
    *(_DWORD *)a4 -= 2;
  }
  return v25;
}

JSC::Exception *JSC::throwDOMAttributeSetterTypeError(JSC::JSGlobalObject *a1, JSC::VM **a2, int8x16_t **a3, WTF::StringImpl *a4)
{
  int8x16_t *v7;
  const WTF::String *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  JSC::Exception *v16;
  JSC::VM *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Exception *v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v7 = *a3;
  if (a4)
    *(_DWORD *)a4 += 2;
  v44 = a4;
  JSC::makeDOMAttributeSetterTypeErrorMessage(v7, (const char *)&v44, &v45);
  v9 = JSC::createTypeError((unint64_t)a1, &v45, v8);
  v16 = (JSC::Exception *)v9;
  v17 = *a2;
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v16 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v9, 0, v10, v11, v12, v13, v14);
  }
  v25 = JSC::VM::throwException(v17, a1, v16, v15, v10, v11, v12, v13, v14);
  v26 = v45;
  v45 = 0;
  if (!v26)
  {
LABEL_8:
    if (!a4)
      return v25;
    goto LABEL_9;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
  WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  if (!a4)
    return v25;
LABEL_9:
  if (*(_DWORD *)a4 == 2)
  {
    WTF::StringImpl::~StringImpl(a4, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  else
  {
    *(_DWORD *)a4 -= 2;
  }
  return v25;
}

unint64_t JSC::createNotEnoughArgumentsError(JSC *this, JSC::JSGlobalObject *a2)
{
  return JSC::createNotEnoughArgumentsError((uint64_t)this, 0);
}

unint64_t JSC::createOutOfMemoryError(unint64_t this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unint64_t v4;
  JSC::Heap **v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *);
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD v27[3];

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0xD00000002;
  *(_QWORD *)(v3 + 8) = "Out of memory";
  *(_DWORD *)(v3 + 16) = 4;
  v26 = (WTF::StringImpl *)v3;
  v4 = *(_QWORD *)(this + 128);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v24 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v25 = (_QWORD *)(this - 16);
    v27[0] = *v25;
    v27[1] = this;
    v27[2] = this + 128;
    v4 = v24(v27);
  }
  v13 = JSC::ErrorInstance::create(v5, v4, &v26, 0, 0, 0, 2, 1);
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  *(_BYTE *)(v13 + 59) |= 2u;
  return v13;
}

uint64_t JSC::ErrorConstructor::put(uint64_t a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  double v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 2368) == a3)
  {
    if ((unint64_t)a4 >> 49)
    {
      v10 = (double)(int)a4;
      if ((unint64_t)a4 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v10 = (char *)a4 - 0x2000000000000;
      a9.n128_f64[0] = fmax(v10, 0.0);
      if (a9.n128_f64[0] > 4294967300.0)
        a9.n128_f64[0] = 4294967300.0;
      v11 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(v11 + 3220) = 1;
      *(_DWORD *)(v11 + 3216) = a9.n128_f64[0];
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(v12 + 3220) = 0;
      *(_DWORD *)(v12 + 3216) = 0;
    }
  }
  return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::ErrorConstructor::deleteProperty(unsigned int *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 2368) == a3)
  {
    v9 = *((_QWORD *)a1 + 5);
    *(_BYTE *)(v9 + 3220) = 0;
    *(_DWORD *)(v9 + 3216) = 0;
  }
  return JSC::JSObject::deleteProperty(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::callErrorConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t v7;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v4 = 10;
    goto LABEL_6;
  }
  v4 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_6:
    v5 = 10;
    goto LABEL_4;
  }
  v5 = *((_QWORD *)a2 + 7);
LABEL_4:
  v6 = JSC::JSGlobalObject::errorStructure((unint64_t)this);
  return JSC::ErrorInstance::create(this, v6, v4, v5, 0, 0, 0, 0, v7);
}

unint64_t JSC::constructErrorConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  uint64_t (*v21)(JSC::VM **);
  JSC::VM **v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  JSC::JSGlobalObject *v25;
  JSC::VM *v26;
  unint64_t v27;
  char *v28;

  v10 = *(JSC::VM **)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 1504);
    if ((v19 & 1) == 0)
      goto LABEL_14;
    v21 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v22 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v22 = (JSC::VM **)(this - 16);
    v26 = *v22;
    v27 = this;
    v28 = (char *)(this + 1504);
    SubclassStructure = (JSC::JSObject *)v21(&v26);
  }
  else
  {
    v26 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v25 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v25 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v26, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_10:
    if (*((_DWORD *)v10 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v19 = 0;
      goto LABEL_14;
    }
    v17 = *(_QWORD *)(v16 + 1504);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v26 = *v24;
      v27 = v16;
      v28 = (char *)(v16 + 1504);
      v17 = v23(&v26);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
LABEL_14:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
  }
}

void JSC::ErrorConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  WTF::StringImpl *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;

  v11 = *(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v12 = (_QWORD *)((char *)a2 + 41952);
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 592), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v12 + 2160), (uint64_t)a3, 14, v13, v14, v15, v16);
  v21 = (int *)(v11 + 3216);
  if (!*(_BYTE *)(v11 + 3220))
    v21 = &dword_1ECF4C61C;
  v22 = *v21;
  if ((v22 & 0x80000000) != 0)
  {
    v20.n128_f64[0] = (double)v22;
    v23 = COERCE__INT64((double)v22) + 0x2000000000000;
  }
  else
  {
    v23 = v22 | 0xFFFE000000000000;
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v12 + 2368), v23, 0, v17, v18, v19, v20);
  v24 = *v12;
  v25 = *(WTF::StringImpl **)(*v12 + 992);
  if (!v25)
  {
    v61 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, (uint64_t)a2, v11, (unint64_t *)&v61, 0, (uint64_t)JSC::errorConstructorCaptureStackTrace, 0, 0, 4u);
    return;
  }
  v26 = *(_DWORD *)v25 + 2;
  *(_DWORD *)v25 = v26;
  if ((*((_BYTE *)v25 + 16) & 0x20) != 0)
  {
    v27 = *(WTF::StringImpl **)(v24 + 872);
    if (!v27)
      goto LABEL_9;
    v26 = *(_DWORD *)v27;
  }
  else
  {
    v27 = v25;
  }
  *(_DWORD *)v27 = v26 + 2;
LABEL_9:
  v61 = v27;
  v35 = JSC::JSFunction::create((uint64_t)a2, v11, 0, &v61, (uint64_t)JSC::errorConstructorCaptureStackTrace, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v37 = v61;
  v61 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v25, v35, 4, v32, v33, v34, v36);
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl(v25, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
}

uint64_t JSC::errorConstructorCaptureStackTrace(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::Wasm::NameSection *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t v51;
  JSC::VM *v52;
  JSC::Wasm::NameSection *v53[2];
  int v54;
  int v55;
  uint64_t v56;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v52 = v4;
  v5 = *((int *)a2 + 8);
  if ((_DWORD)v5 == 1
    || (v6 = (JSC::Wasm::NameSection *)*((_QWORD *)a2 + 6), ((unint64_t)v6 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v6 + 5) <= 0x16u)
  {
    JSC::throwTypeError((unint64_t)this, &v52, (uint64_t)"captureStackTrace expects the first argument to be an object", 61);
    return 0;
  }
  else
  {
    if ((unint64_t)(v5 - 3) > 0xFFFFFFFFFFFFFFFDLL
      || (v7 = *((_QWORD *)a2 + 7), (v7 & 0xFFFE000000000002) != 0)
      || (v8 = *(unsigned __int8 *)(v7 + 5), v8 < 0x17)
      || (v8 & 0xFE) != 0x1A
      && ((*(_BYTE *)(v7 + 6) & 4) == 0
       || ((*(void (**)(JSC::Wasm::NameSection **__return_ptr, _QWORD))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x38))(v53, *((_QWORD *)a2 + 7)), !LOBYTE(v53[0]))))
    {
      v7 = 0;
    }
    v50 = 0;
    v51 = 0;
    if ((*((_QWORD *)this + 402) & 0xFF00000000) != 0)
      v9 = *((_QWORD *)this + 402);
    else
      v9 = 0;
    JSC::Interpreter::getStackTrace((uint64_t)v4 + 90560, (unint64_t)v6, (uint64_t)&v50, 1uLL, v9, v7, 0, 0);
    v10 = *(_QWORD *)(*((_QWORD *)v4 + 5244) + 2360);
    JSC::Interpreter::stackTraceAsString(v4, (uint64_t)&v50, v11, v12, v13, v14, v15, v16, &v49);
    v23 = JSC::jsString((uint64_t)v4, (JSC::VM *)&v49, v17, v18, v19, v20, v21, v22);
    v53[0] = 0;
    v53[1] = v6;
    v54 = -1;
    v24.n128_u64[0] = 0x100000001000000;
    v55 = 0x1000000;
    v56 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v6, (uint64_t)v4, v10, v23, 4, (uint64_t)v53, v25, v26, v24);
    v34 = v49;
    v49 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v50;
    if (HIDWORD(v51))
    {
      v36 = (WTF *)((char *)v50 + 40 * HIDWORD(v51));
      do
      {
        v37 = (unsigned int *)*((_QWORD *)v35 + 3);
        *((_QWORD *)v35 + 3) = 0;
        if (v37)
        {
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            v53[0] = (JSC::Wasm::NameSection *)v37;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v53, v27, v28, v29, v30, v31, v32, v33);
          }
        }
        v35 = (WTF *)((char *)v35 + 40);
      }
      while (v35 != v36);
      v35 = v50;
    }
    if (v35)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      WTF::fastFree((unint64_t)v35, v27, v28, v29, v30, v31, v32, v33);
    }
    return 10;
  }
}

uint64_t JSC::ErrorHandlingScope::ErrorHandlingScope(JSC::ErrorHandlingScope *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;

  *(_QWORD *)this = a2;
  if (*((_QWORD *)a2 + 11636))
  {
    v9 = *((_QWORD *)a2 + 11637);
    *((_QWORD *)a2 + 11637) = dword_1ECF4C250;
    JSC::VM::updateStackLimits(a2, a2, a3, a4, a5, a6, a7, a8);
    *((_QWORD *)this + 1) = v9;
    return (uint64_t)this;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t v9;
  uint64_t result;

  *(_QWORD *)this = a2;
  if (*((_QWORD *)a2 + 11636))
  {
    v9 = *((_QWORD *)a2 + 11637);
    *((_QWORD *)a2 + 11637) = dword_1ECF4C250;
    JSC::VM::updateStackLimits(a2, a2, a3, a4, a5, a6, a7, a8);
    *((_QWORD *)this + 1) = v9;
    return (uint64_t)this;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

void JSC::ErrorHandlingScope::~ErrorHandlingScope(JSC::VM **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = *this;
  if (*((_QWORD *)v9 + 11636))
  {
    *((_QWORD *)v9 + 11637) = this[1];
    JSC::VM::updateStackLimits(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

{
  JSC::VM *v9;

  v9 = *this;
  if (*((_QWORD *)v9 + 11636))
  {
    *((_QWORD *)v9 + 11637) = this[1];
    JSC::VM::updateStackLimits(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::ErrorInstance::put(JSC::ErrorInstance *this, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v14;
  _QWORD *v15;

  v14 = *(JSC::VM **)(a2 + 56);
  v15 = (_QWORD *)*((_QWORD *)v14 + 5244);
  if ((v15[222] == a3 || v15[129] == a3 || v15[294] == a3 || v15[295] == a3)
    && JSC::ErrorInstance::materializeErrorInfoIfNeeded(this, v14, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    *(_BYTE *)(a5 + 23) = 0;
  }
  return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::ErrorInstance::deleteProperty(JSC::ErrorInstance *this, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  _QWORD *v13;

  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v13 = (_QWORD *)*((_QWORD *)v12 + 5244);
  if ((v13[222] == a3 || v13[129] == a3 || v13[294] == a3 || v13[295] == a3)
    && JSC::ErrorInstance::materializeErrorInfoIfNeeded(this, v12, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    *((_BYTE *)a4 + 4) = 0;
  }
  return JSC::JSObject::deleteProperty((unsigned int *)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::ErrorInstance::getOwnPropertySlot(JSC::ErrorInstance *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;

  v12 = *(JSC::VM **)(a2 + 56);
  v13 = (_QWORD *)*((_QWORD *)v12 + 5244);
  if (v13[222] == a3 || v13[129] == a3 || v13[294] == a3 || v13[295] == a3)
  {
    JSC::ErrorInstance::materializeErrorInfoIfNeeded(this, *(JSC::VM **)(a2 + 56), a3, a4, a5, a6, a7, a8);
    v12 = *(JSC::VM **)(a2 + 56);
  }
  if (!(a3 >> 4))
    goto LABEL_40;
  v14 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v14 + 0x20)) != 0)
    goto LABEL_40;
  v15 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
  if (!v15)
  {
    v26 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40);
    if (!v26 || *(_BYTE *)(v26 + 5) != 1 && *(_DWORD *)(v26 + 80) < 2u)
      goto LABEL_40;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v12, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v15)
      goto LABEL_40;
  }
  if (!*(_DWORD *)(v15 + 24))
    goto LABEL_40;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  v18 = *(unsigned int *)(v15 + 8);
  v19 = *(_DWORD *)(a3 + 16);
  if ((v16 & 1) != 0)
  {
    if ((v19 & 0x20) != 0)
      v19 = *(_DWORD *)(a3 + 32);
    v20 = *(_DWORD *)(v15 + 12);
    v21 = (v19 >> 8) & *(_QWORD *)&v20;
    v22 = *(unsigned __int8 *)(v17 + v21);
    if (*(_BYTE *)(v17 + v21))
    {
      v23 = v17 + v18;
      v24 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(v23 + 8 * (v22 - 1));
        if (a3 == (v25 & 0xFFFFFFFFFFFFLL))
          break;
        v21 = ((_DWORD)v21 + v24) & v20;
        v22 = *(unsigned __int8 *)(v17 + v21);
        ++v24;
        if (!*(_BYTE *)(v17 + v21))
          goto LABEL_40;
      }
      a6 = (v25 >> 16) & 0xFF00000000 | HIBYTE(v25);
      goto LABEL_22;
    }
LABEL_40:
    if ((*((_BYTE *)this + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, v12, a3, a4) & 1) != 0)
    {
      return 1;
    }
    if (!a3)
      return 0;
    v38 = *(_DWORD *)(a3 + 16);
    if ((v38 & 0x20) != 0)
      return 0;
    v39 = *(_BYTE **)(a3 + 8);
    v40 = *(unsigned int *)(a3 + 4);
    if ((v38 & 4) != 0)
    {
      if ((_DWORD)v40)
      {
        v41 = *v39 - 48;
        if (v41 <= 9 && (v40 < 2 || *v39 != 48))
        {
          v53 = v40 - 1;
          v54 = v39 + 1;
          while (v53)
          {
            if (v41 > 0x19999999)
              goto LABEL_46;
            v55 = *v54 - 48;
            if (v55 > 9)
              goto LABEL_46;
            v42 = 0;
            LODWORD(v40) = 0;
            v43 = 0;
            v47 = __CFADD__(v55, 10 * v41);
            v41 = v55 + 10 * v41;
            --v53;
            ++v54;
            if (v47)
              goto LABEL_48;
          }
          goto LABEL_82;
        }
        goto LABEL_46;
      }
    }
    else if ((_DWORD)v40)
    {
      v41 = *(unsigned __int16 *)v39 - 48;
      if (v41 <= 9 && (*(_WORD *)v39 != 48 || v40 <= 1))
      {
        v44 = (unsigned __int16 *)(v39 + 2);
        v45 = v40 - 1;
        while (v45)
        {
          if (v41 > 0x19999999)
            goto LABEL_46;
          v46 = *v44 - 48;
          if (v46 > 9)
            goto LABEL_46;
          v42 = 0;
          LODWORD(v40) = 0;
          v43 = 0;
          v47 = __CFADD__(v46, 10 * v41);
          v41 = v46 + 10 * v41;
          ++v44;
          --v45;
          if (v47)
            goto LABEL_48;
        }
LABEL_82:
        v42 = 0x100000000;
        if (v41 == -1)
        {
          v42 = 0;
          LODWORD(v40) = 0;
        }
        else
        {
          LODWORD(v40) = v41;
        }
        if (v41 == -1)
          v43 = 0;
        else
          v43 = v41 & 0xFFFFFF00;
LABEL_48:
        if ((v42 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, a2, (const WTF::StringImpl *)(v43 | v40), a4, a5, a6, a7, a8);
        return 0;
      }
LABEL_46:
      v42 = 0;
      LODWORD(v40) = 0;
LABEL_47:
      v43 = 0;
      goto LABEL_48;
    }
    v42 = 0;
    goto LABEL_47;
  }
  if ((v19 & 0x20) != 0)
    v19 = *(_DWORD *)(a3 + 32);
  v32 = *(_DWORD *)(v15 + 12);
  v33 = v32 & (v19 >> 8);
  v34 = *(_DWORD *)(v17 + 4 * v33);
  if (!v34)
    goto LABEL_40;
  v35 = v17 + 4 * v18;
  v36 = 1;
  while (1)
  {
    v37 = (v34 - 1);
    if (*(_QWORD *)(v35 + 16 * v37) == a3)
      break;
    v33 = (v33 + v36) & v32;
    v34 = *(_DWORD *)(v17 + 4 * v33);
    ++v36;
    if (!v34)
      goto LABEL_40;
  }
  a6 = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
LABEL_22:
  if ((_DWORD)a6 == -1)
    goto LABEL_40;
  if ((int)a6 <= 63)
  {
    v27 = (char *)this + 16;
    v28 = a6 << 32;
  }
  else
  {
    v27 = (char *)(*((_QWORD *)this + 1) - 8);
    v28 = 0x3F00000000 - (a6 << 32);
  }
  v29 = *(_QWORD *)&v27[v28 >> 29];
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_28;
  v30 = *(unsigned __int8 *)(v29 + 5);
  if (v30 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)v12, a4, v29, SHIDWORD(a6), a6);
    return 1;
  }
  if (v30 != 6)
  {
LABEL_28:
    *(_QWORD *)a4 = v29;
    *(_QWORD *)(a4 + 32) = this;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v48 = *(_DWORD *)(v14 + 16) & 3;
  v50 = *(_QWORD *)(v29 + 8);
  v49 = *(_QWORD *)(v29 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
  {
    v52 = *(_QWORD *)(v29 + 24);
    v51 = *(_QWORD *)(v29 + 32);
    *(_QWORD *)a4 = v50;
    *(_QWORD *)(a4 + 8) = v49;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = this;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v48 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v52;
    *(_QWORD *)(a4 + 80) = v51;
  }
  else
  {
    *(_QWORD *)a4 = v50;
    *(_QWORD *)(a4 + 8) = v49;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = this;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v48 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

JSC::ErrorInstance *JSC::ErrorInstance::getOwnSpecialPropertyNames(JSC::ErrorInstance *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!(_DWORD)a4)
    return (JSC::ErrorInstance *)JSC::ErrorInstance::materializeErrorInfoIfNeeded(result, *(JSC::VM **)(a2 + 56), a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t JSC::ErrorInstance::defineOwnProperty(JSC::ErrorInstance *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v14;
  _QWORD *v15;

  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v15 = (_QWORD *)*((_QWORD *)v14 + 5244);
  if (v15[222] == a3 || v15[129] == a3 || v15[294] == a3 || v15[295] == a3)
    JSC::ErrorInstance::materializeErrorInfoIfNeeded(this, v14, a3, a4, a5, a6, a7, a8);
  return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::ErrorInstance::create(unint64_t a1, JSC::VM *a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::Heap *v21;
  unint64_t SlowCase;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  JSC::Heap *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[2];
  int v59;
  int v60;
  uint64_t v61;

  v9 = a3;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = v11 + 40448;
  v13 = JSC::JSGlobalObject::errorStructure(a1, a3);
  v21 = *(JSC::Heap **)(v11 + 40448);
  if (!v21)
  {
    v51 = v13;
    v21 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v11 + 37552));
    v13 = v51;
  }
  SlowCase = *((_QWORD *)v21 + 3);
  if (SlowCase < *((_QWORD *)v21 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v21 + 5);
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v21 + 6);
    *((_QWORD *)v21 + 4) = SlowCase + HIDWORD(v50);
    *((_QWORD *)v21 + 5) = SlowCase + (int)v50;
LABEL_4:
    *((_QWORD *)v21 + 3) = SlowCase + 64;
    goto LABEL_5;
  }
  v57 = v13;
  v52 = v21;
  JSC::sanitizeStackForVM((JSC *)v11, v14, v15, v16, v17, v18, v19, v20);
  v53 = (uint64_t)v52;
  v12 = v11 + 40448;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v53, v11 + 192, 64, 0, 0, v54, v55, v56);
  v13 = v57;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v23 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v23;
  *(_WORD *)(SlowCase + 56) = 0;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_BYTE *)(SlowCase + 58) = v9;
  *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 32) = a4;
  v24 = *a5;
  *a5 = 0;
  v25 = *(WTF::StringImpl **)(SlowCase + 40);
  *(_QWORD *)(SlowCase + 40) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = *a6;
  *a6 = 0;
  v27 = *(WTF::StringImpl **)(SlowCase + 48);
  *(_QWORD *)(SlowCase + 48) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  if (*(_QWORD *)a2)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v12 + 1504) + 1824);
    v29 = JSC::jsString(v11, a2, v15, v16, v17, v18, v19, v20);
    v58[0] = 0;
    v58[1] = SlowCase;
    v59 = -1;
    v30.n128_u64[0] = 0x100000001000000;
    v60 = 0x1000000;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v11, v28, v29, 4, (uint64_t)v58, v31, v32, v30);
  }
  return SlowCase;
}

unint64_t JSC::ErrorInstance::create(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;

  v40 = a3;
  v16 = *((_QWORD *)a1 + 7);
  if (a3 == 10)
  {
    v39 = 0;
  }
  else if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, a1, (const WTF::String *)a3, a4, a5, a6, a7, a8, (int **)&v39);
  }
  else
  {
    v17 = *(WTF::StringImpl **)(a3 + 8);
    if ((v17 & 1) != 0)
      v17 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v17)
      *(_DWORD *)v17 += 2;
    v39 = v17;
  }
  if (*(_DWORD *)(v16 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_21;
  if ((a4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a4 + 5) < 0x17u)
  {
    v18 = 0;
LABEL_13:
    v21 = JSC::ErrorInstance::create((JSC::Heap **)v16, a2, &v39, v18, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v18 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(a4, a1, *(_QWORD *)(v16 + 41952) + 1008, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v16 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v32, v33, v34, v35, v36, v37, v38))
  {
    goto LABEL_13;
  }
LABEL_21:
  v21 = 0;
LABEL_14:
  v22 = v39;
  v39 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v19, v20, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

JSC::ExpressionInfo *JSC::appendSourceToErrorMessage@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _DWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_DWORD **, unint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  JSC::ExpressionInfo *result;
  _DWORD *v9;
  __n128 v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v40;
  int v41;
  int v42;
  int v44;
  BOOL v46;
  int v47;
  int v48;
  BOOL v50;
  const char *Range;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  JSC::ExpressionInfo *v62;
  JSC::ExpressionInfo *v63;
  char v64[4];
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;

  result = *(JSC::ExpressionInfo **)(*(_QWORD *)(a1 + 56) + 160);
  v9 = *a3;
  if (!*((_DWORD *)result + 3))
    goto LABEL_24;
  if (v9)
  {
    v13.n128_f64[0] = JSC::ExpressionInfo::entryForInstPC(result, a2 >> 2, (uint64_t)v64);
    v14 = *(_QWORD *)(a1 + 64);
    v15 = v67 + *(_DWORD *)(v14 + 48);
    v67 = v15;
    if (v65)
      v16 = 1;
    else
      v16 = *(_DWORD *)(v14 + 60) + 1;
    v65 += *(_DWORD *)(v14 + 56) + 1;
    v66 += v16;
    v17 = (v15 - v68);
    v18 = v69 + v15;
    result = (JSC::ExpressionInfo *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v14 + 40) + 24))(*(_QWORD *)(v14 + 40), v13);
    if (v18)
      v23 = (int)v17 <= (int)v19;
    else
      v23 = 0;
    if (!v23)
    {
      v9 = *a3;
LABEL_24:
      if (v9)
        *v9 += 2;
      goto LABEL_26;
    }
    v24 = v17;
    v25 = __OFSUB__(v18, (_DWORD)v17);
    v26 = v18 - v17;
    if (((v26 & 0x80000000) != 0) ^ v25 | (v26 == 0))
    {
      v37 = 0;
      v32 = v19 & 0xFF00000000;
      v27 = v19;
      v38 = v17 - 1;
      do
      {
        v29 = v38;
        v28 = (v38 + 1);
        if ((int)v28 < 1 || v37 > 0x13)
          break;
        if (v32)
        {
          if (v29 >= v19)
            goto LABEL_100;
          v20 = *((unsigned __int8 *)result + v29);
        }
        else
        {
          if (v29 >= v19)
            goto LABEL_100;
          v20 = *((unsigned __int16 *)result + v29);
        }
        v38 = v29 - 1;
        ++v37;
      }
      while ((_DWORD)v20 != 10);
      v26 = v17 - 1;
      v28 = v29 + 1;
      if ((int)v17 - 1 > (int)v29 + 1)
      {
        v20 = 1;
        v21 = 0x100001A00;
        goto LABEL_41;
      }
      goto LABEL_59;
    }
    result = (JSC::ExpressionInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40));
    if (v19 <= v17)
    {
      v30 = 0x100000000;
      v29 = (unint64_t)"";
      goto LABEL_18;
    }
    v29 = (unint64_t)result;
    if ((int)v19 - (int)v17 <= v26)
    {
      v26 = v19 - v17;
      if (!(_DWORD)v17)
      {
        v30 = v19;
        goto LABEL_18;
      }
    }
    v30 = v26;
    v31 = v19 - (unint64_t)v17;
    v32 = v19 & 0xFF00000000;
    if ((v19 & 0xFF00000000) != 0)
    {
      if (v31 >= v26)
      {
        v29 = (unint64_t)result + v17;
        v30 = v26 | 0x100000000;
LABEL_18:
        v33 = a3;
        v34 = v29;
        v35 = a4;
        v36 = 0;
        return (JSC::ExpressionInfo *)a5(v33, v34, v30, v35, v36);
      }
    }
    else if (v31 >= v26)
    {
      v29 = (unint64_t)result + 2 * v17;
      goto LABEL_18;
    }
LABEL_100:
    while (2)
    {
      __break(1u);
LABEL_101:
      if ((_DWORD)v22 == 160)
        goto LABEL_48;
LABEL_56:
      if ((_DWORD)v29 != 10 && (_DWORD)v29 != 13)
      {
        LODWORD(v29) = v29 & 0xFFFE;
        LODWORD(v22) = 8232;
        if ((_DWORD)v29 != 8232)
        {
LABEL_59:
          v26 = v28;
LABEL_60:
          if ((int)v17 < (int)v19)
          {
            v29 = 1;
            v20 = v17;
            while (1)
            {
              if (v32)
              {
                if (v20 >= v27)
                  goto LABEL_100;
                v44 = *((unsigned __int8 *)result + v20);
              }
              else
              {
                if (v20 >= v27)
                  goto LABEL_100;
                v44 = *((unsigned __int16 *)result + v20);
              }
              if (v44 == 10)
                break;
              v28 = v20 + 1;
              if ((int)v20 + 1 < (int)v19)
              {
                v21 = v29 + 1;
                ++v20;
                if (v29++ < 0x14)
                  continue;
              }
              goto LABEL_73;
            }
            LODWORD(v28) = v20;
LABEL_73:
            if ((int)v28 > (int)v17)
            {
              v27 = 1;
              v20 = 0x100001A00;
              while (1)
              {
                v24 = v28;
                v28 = (v28 - 1);
                if (v32)
                  break;
                if (v28 >= v19)
                  goto LABEL_100;
                LODWORD(v29) = *((unsigned __int16 *)result + v28);
                if (v29 <= 0xFF)
                  goto LABEL_78;
                v61 = v19;
                v63 = result;
                v59 = *((unsigned __int16 *)result + v28);
                v57 = v28;
                v47 = u_charType(v29);
                v20 = 0x100001A00;
                v27 = 1;
                LODWORD(v28) = v57;
                LODWORD(v29) = v59;
                v48 = v47;
                v19 = v61;
                result = v63;
                v40 = v48 == 12;
                v32 = 0;
                v21 = 65279;
                if (v40 || v59 == 65279)
                  goto LABEL_82;
LABEL_90:
                v50 = (_DWORD)v29 == 10 || (_DWORD)v29 == 13;
                LODWORD(v29) = v29 & 0xFFFE;
                v21 = 8232;
                if (!v50 && (_DWORD)v29 != 8232)
                  goto LABEL_99;
LABEL_82:
                v24 = v28;
                if ((int)v28 <= (int)v17)
                  goto LABEL_99;
              }
              if (v28 >= v19)
                continue;
              LODWORD(v29) = *((unsigned __int8 *)result + v28);
LABEL_78:
              v21 = v29;
              v22 = (1 << v29) & 0x100001A00;
              v46 = v29 > 0x20u || v22 == 0;
              if (!v46 || v29 == 160)
                goto LABEL_82;
              goto LABEL_90;
            }
            v24 = v28;
          }
LABEL_99:
          Range = JSC::SourceProvider::getRange(*(JSC::SourceProvider **)(*(_QWORD *)(a1 + 64) + 40), v26, v24);
          v54 = v53;
          v33 = a3;
          v34 = (unint64_t)Range;
          v30 = v54;
          v35 = a4;
          v36 = 1;
          return (JSC::ExpressionInfo *)a5(v33, v34, v30, v35, v36);
        }
      }
      break;
    }
    while (1)
    {
LABEL_48:
      if ((int)v26 <= (int)++v28)
        goto LABEL_60;
LABEL_41:
      if (v32)
      {
        if (v28 >= v27)
          goto LABEL_100;
        LODWORD(v29) = *((unsigned __int8 *)result + v28);
LABEL_44:
        LODWORD(v22) = v29;
        v40 = v29 > 0x20u || ((v20 << v29) & v21) == 0;
        if (v40)
          goto LABEL_101;
      }
      else
      {
        if (v28 >= v27)
          goto LABEL_100;
        LODWORD(v29) = *((unsigned __int16 *)result + v28);
        if (v29 <= 0xFF)
          goto LABEL_44;
        v60 = v19;
        v62 = result;
        v58 = *((unsigned __int16 *)result + v28);
        v55 = v28;
        v56 = v27;
        v41 = u_charType(v29);
        v21 = 0x100001A00;
        v20 = 1;
        v28 = v55;
        v27 = v56;
        LODWORD(v29) = v58;
        v42 = v41;
        v19 = v60;
        result = v62;
        v40 = v42 == 12;
        v32 = 0;
        LODWORD(v22) = 65279;
        if (!v40 && v58 != 65279)
          goto LABEL_56;
      }
    }
  }
LABEL_26:
  *a6 = v9;
  return result;
}

void JSC::ErrorInstance::finishCreation(unint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t (*v59)(_DWORD **, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82[2];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  JSC::Wasm::NameSection *v89;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 56) = a6;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v13 + 3220))
  {
    v14 = a7 ^ 1;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = 0;
    v15[1] = 0;
    if ((*(_QWORD *)(v13 + 3216) & 0xFF00000000) != 0)
      v16 = *(_QWORD *)(v13 + 3216);
    else
      v16 = 0;
    JSC::Interpreter::getStackTrace(a2 + 90560, a1, (uint64_t)v15, v14, v16, 0, 0, 0);
  }
  else
  {
    v15 = 0;
  }
  v17 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow((JSC::JSCellLock *)a1);
LABEL_15:
  v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  if (v20)
  {
    v21 = *(_DWORD *)(v20 + 12);
    if (v21)
    {
      v22 = *(_QWORD *)v20;
      v23 = *(_QWORD *)v20 + 40 * v21;
      do
      {
        v24 = *(unsigned int **)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        if (v24)
        {
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v24);
            v82[0] = (WTF::StringImpl *)v24;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v82, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
        v22 += 40;
      }
      while (v22 != v23);
    }
    v27 = *(_QWORD *)v20;
    if (*(_QWORD *)v20)
    {
      *(_QWORD *)v20 = 0;
      *(_DWORD *)(v20 + 8) = 0;
      WTF::fastFree(v27, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v20, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  while (1)
  {
    v28 = *v17;
    if ((v28 & 0xC0) != 0x40)
      break;
    v29 = __ldxr(v17);
    if (v29 == v28)
    {
      if (!__stxr(v28 & 0xBF, v17))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow((JSC::JSCellLock *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_32:
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  v30 = *a3;
  if (*a3)
    *(_DWORD *)v30 += 2;
  v81 = v30;
  v31 = *(_QWORD *)(a1 + 24);
  if (!v31 || !*(_DWORD *)(v31 + 12) || !*(_QWORD *)(a1 + 16))
    goto LABEL_39;
  v46 = *(uint64_t **)(a2 + 40);
  if (v46)
  {
    v47 = v46[3];
    if ((v47 & 0xFFFE000000000007) != 3
      && *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28) + 96) == v47)
    {
      v82[0] = *(WTF::StringImpl **)(a2 + 48);
      v79 = JSC::CallFrame::callerFrame(v46, v82);
      if (v79)
        v48 = v79;
      else
        v48 = (uint64_t)v46;
      v46 = *(uint64_t **)(a2 + 40);
    }
    else
    {
      v48 = *(_QWORD *)(a2 + 40);
    }
  }
  else
  {
    v48 = 0;
  }
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v82, (JSC::CallFrame *)v46, (JSC::VM *)a2, 0, a5, a6, a7, a8);
  v49 = v83;
  if (!v83)
  {
LABEL_64:
    v51 = 0;
    goto LABEL_81;
  }
  v50 = 0;
  while (1)
  {
    if (!v50)
    {
      if (v49 != v48)
      {
        v50 = 0;
        goto LABEL_63;
      }
      v50 = 1;
    }
    if ((v85 & 0xFFFE000000000007) == 3)
      goto LABEL_63;
    v51 = v86;
    if (!v86)
      goto LABEL_63;
    v52 = *(_QWORD *)(v86 + 64);
    if (!v52)
      break;
    v53 = *(unsigned __int8 *)(v52 + 5);
    if (v53 == 12)
    {
      v54 = *(_BYTE *)(*(_QWORD *)(v52 + 88) + 51);
      goto LABEL_62;
    }
    if (v53 != 8)
      break;
    v54 = *(_BYTE *)(v52 + 56);
LABEL_62:
    if ((v54 & 3u) - 1 >= 2)
      break;
LABEL_63:
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v82, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v49 = v83;
    if (!v83)
      goto LABEL_64;
  }
  if ((*(_WORD *)(*(_QWORD *)(v86 + 56) + 28) & 1) != 0)
  {
LABEL_81:
    v55 = 0;
    goto LABEL_68;
  }
  v55 = v87;
LABEL_68:
  v56 = v88;
  v88 = 0;
  if (v56)
  {
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v56);
      v89 = (JSC::Wasm::NameSection *)v56;
      v80 = v51;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v89, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v51 = v80;
    }
  }
  if (v51)
  {
    v59 = *(uint64_t (**)(_DWORD **, unint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v60 = *(unsigned __int16 *)(a1 + 56);
    *(_WORD *)(a1 + 56) = 0;
    JSC::appendSourceToErrorMessage(v51, v55, (_DWORD **)a3, v60, v59, v82);
    v61 = v82[0];
    v81 = v82[0];
    v82[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        v70 = v82[0];
        v82[0] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v30 = v61;
  }
LABEL_39:
  if (v30)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1824);
    v33 = JSC::jsString(a2, (JSC::VM *)&v81, (uint64_t)a3, a4, a5, a6, a7, a8);
    v82[0] = 0;
    v82[1] = (WTF::StringImpl *)a1;
    v83 = 0x1000000FFFFFFFFLL;
    v34.n128_u64[0] = 0x100000001000000;
    v84 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, a2, v32, v33, 4, (uint64_t)v82, v35, v36, v34);
  }
  if (a4)
    JSC::JSObject::putDirect((int *)a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1008), a4, 4, a9, a6, a7, a8);
  v37 = v81;
  v81 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
}

void JSC::ErrorInstance::finishCreation(unint64_t a1, uint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, JSC::CallLinkInfo *a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Wasm::NameSection *v36[2];
  int v37;
  int v38;
  uint64_t v39;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v15 + 3220))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = 0;
    v16[1] = 0;
    if ((*(_QWORD *)(v15 + 3216) & 0xFF00000000) != 0)
      v17 = *(_QWORD *)(v15 + 3216);
    else
      v17 = 0;
    JSC::Interpreter::getStackTrace(a2 + 90560, a1, (uint64_t)v16, 0, v17, 0, a5, a6);
  }
  else
  {
    v16 = 0;
  }
  v18 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v19 = *v18;
    if ((v19 & 0x40) != 0)
      break;
    v20 = __ldaxr(v18);
    if (v20 == v19)
    {
      if (!__stxr(v19 | 0x40, v18))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow((JSC::JSCellLock *)a1);
LABEL_15:
  v21 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 12);
    if (v22)
    {
      v23 = *(_QWORD *)v21;
      v24 = *(_QWORD *)v21 + 40 * v22;
      do
      {
        v25 = *(unsigned int **)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        if (v25)
        {
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v25);
            v36[0] = (JSC::Wasm::NameSection *)v25;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v36, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          }
        }
        v23 += 40;
      }
      while (v23 != v24);
    }
    v28 = *(_QWORD *)v21;
    if (*(_QWORD *)v21)
    {
      *(_QWORD *)v21 = 0;
      *(_DWORD *)(v21 + 8) = 0;
      WTF::fastFree(v28, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
    }
    WTF::fastFree(v21, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  }
  while (1)
  {
    v29 = *v18;
    if ((v29 & 0xC0) != 0x40)
      break;
    v30 = __ldxr(v18);
    if (v30 == v29)
    {
      if (!__stxr(v29 & 0xBF, v18))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow((JSC::JSCellLock *)a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
LABEL_32:
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  if (*(_QWORD *)a3)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1824);
    v32 = JSC::jsString((JSC *)a2, a3, a3, a4, a5, (uint64_t)a6, a7, a8);
    v36[0] = 0;
    v36[1] = (JSC::Wasm::NameSection *)a1;
    v37 = -1;
    v33.n128_u64[0] = 0x100000001000000;
    v38 = 0x1000000;
    v39 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, a2, v31, v32, 4, (uint64_t)v36, v34, v35, v33);
  }
  if (a4)
    JSC::JSObject::putDirect((int *)a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1008), a4, 4, a9, (uint64_t)a6, a7, a8);
}

void JSC::ErrorInstance::sanitizedMessageString(JSC::ErrorInstance *this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v13;
  int v14;
  unint64_t v15;
  JSC::Structure *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int OwnPropertySlotByIndex;
  int v58;
  int *v59;
  int v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  JSC::ErrorInstance *v73;
  JSC::ErrorInstance *v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  v13 = *((_QWORD *)a2 + 7);
  v14 = *(_DWORD *)this;
  v82 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1824);
  if (v15)
    *(_DWORD *)v15 += 2;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v72 = 0xFFFFFFFF00000000;
  v74 = 0;
  v75 = 0;
  v73 = this;
  v76 = 196608;
  v77 = 0;
  v80 = 0;
  v81 = 0;
  v78 = v13;
  ++*(_DWORD *)(v13 + 4);
  v79 = 1;
  if ((v15 >> 4))
  {
    v16 = (JSC::Structure *)(16 * (v14 & 0xFFFFFFFE));
    if (((v15 >> 4) & ~*((_DWORD *)v16 + 8)) == 0)
    {
      v17 = *(_QWORD *)(16 * (v14 & 0xFFFFFFFE) + 0x58);
      if (v17
        || (v18 = *(_QWORD *)(16 * (v14 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v18 + 5) == 1 || *(_DWORD *)(v18 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable(v16, (JSC::VM *)v13, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v17))
      {
        if (*(_DWORD *)(v17 + 24))
        {
          v19 = *(_QWORD *)(v17 + 16);
          v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(unsigned int *)(v17 + 8);
          v22 = *(_DWORD *)(v15 + 16);
          if ((v19 & 1) != 0)
          {
            if ((v22 & 0x20) != 0)
              v22 = *(_DWORD *)(v15 + 32);
            v23 = *(_DWORD *)(v17 + 12);
            v24 = (v22 >> 8) & *(_QWORD *)&v23;
            v25 = *(unsigned __int8 *)(v20 + v24);
            if (!*(_BYTE *)(v20 + v24))
              goto LABEL_37;
            v26 = v20 + v21;
            v27 = 1;
            while (1)
            {
              v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
              if (v15 == (v28 & 0xFFFFFFFFFFFFLL))
                break;
              v24 = ((_DWORD)v24 + v27) & v23;
              v25 = *(unsigned __int8 *)(v20 + v24);
              ++v27;
              if (!*(_BYTE *)(v20 + v24))
                goto LABEL_37;
            }
            a6 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
          }
          else
          {
            if ((v22 & 0x20) != 0)
              v22 = *(_DWORD *)(v15 + 32);
            v29 = *(_DWORD *)(v17 + 12);
            v30 = v29 & (v22 >> 8);
            v31 = *(_DWORD *)(v20 + 4 * v30);
            if (!v31)
              goto LABEL_37;
            v32 = v20 + 4 * v21;
            v33 = 1;
            while (1)
            {
              v34 = (v31 - 1);
              if (v15 == *(_QWORD *)(v32 + 16 * v34))
                break;
              v30 = (v30 + v33) & v29;
              v31 = *(_DWORD *)(v20 + 4 * v30);
              ++v33;
              if (!v31)
                goto LABEL_37;
            }
            a6 = *(unsigned int *)(v32 + 16 * v34 + 8) | ((unint64_t)*(unsigned __int8 *)(v32 + 16 * v34 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v35 = (char *)this + 16;
              v36 = a6 << 32;
            }
            else
            {
              v35 = (char *)(*((_QWORD *)this + 1) - 8);
              v36 = 0x3F00000000 - (a6 << 32);
            }
            a4 = *(_QWORD *)&v35[v36 >> 29];
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_34;
            v37 = *(unsigned __int8 *)(a4 + 5);
            if (v37 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, v13, (uint64_t)&v70, a4, SHIDWORD(a6), a6);
            }
            else
            {
              if (v37 != 6)
              {
LABEL_34:
                v70 = a4;
                v74 = this;
                v72 = __PAIR64__(a6, HIDWORD(a6));
                LOWORD(v76) = 257;
                goto LABEL_53;
              }
              v49 = *((_DWORD *)v16 + 4) & 3;
              v50 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v52 = *(_QWORD *)(a4 + 24);
                v51 = *(_QWORD *)(a4 + 32);
                v70 = *(_QWORD *)(a4 + 8);
                v71 = v50;
                LODWORD(v72) = HIDWORD(a6);
                v74 = this;
                BYTE1(v76) = 3;
                if (v49 != 2)
                  LOBYTE(v76) = 1;
                HIBYTE(v76) = 1;
                v80 = v52;
                v81 = v51;
              }
              else
              {
                v70 = *(_QWORD *)(a4 + 8);
                v71 = v50;
                LODWORD(v72) = HIDWORD(a6);
                v74 = this;
                BYTE1(v76) = 3;
                if (v49 != 2)
                  LOBYTE(v76) = 1;
              }
            }
LABEL_53:
            if (BYTE1(v76) == 1)
            {
LABEL_85:
              v56 = v70;
              v82 = v70;
              goto LABEL_86;
            }
            goto LABEL_82;
          }
        }
      }
    }
  }
LABEL_37:
  if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(this, v13, v15, &v70) & 1) != 0)
    goto LABEL_53;
  if (!v15)
    goto LABEL_82;
  v38 = *(_DWORD *)(v15 + 16);
  if ((v38 & 0x20) != 0)
    goto LABEL_82;
  v39 = *(_BYTE **)(v15 + 8);
  v40 = *(unsigned int *)(v15 + 4);
  if ((v38 & 4) != 0)
  {
    if ((_DWORD)v40)
    {
      v41 = *v39 - 48;
      if (v41 <= 9 && (v40 < 2 || *v39 != 48))
      {
        v53 = v39 + 1;
        v54 = v40 - 1;
        while (v54)
        {
          if (v41 > 0x19999999)
            goto LABEL_43;
          v55 = *v53 - 48;
          if (v55 > 9)
            goto LABEL_43;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v48 = __CFADD__(v55, 10 * v41);
          v41 = v55 + 10 * v41;
          ++v53;
          --v54;
          if (v48)
            goto LABEL_81;
        }
        goto LABEL_75;
      }
    }
LABEL_43:
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_81;
  }
  if (!(_DWORD)v40)
    goto LABEL_43;
  v41 = *(unsigned __int16 *)v39 - 48;
  if (v41 > 9 || *(_WORD *)v39 == 48 && v40 > 1)
    goto LABEL_43;
  v45 = (unsigned __int16 *)(v39 + 2);
  v46 = v40 - 1;
  while (v46)
  {
    if (v41 > 0x19999999)
      goto LABEL_43;
    v47 = *v45 - 48;
    if (v47 > 9)
      goto LABEL_43;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v48 = __CFADD__(v47, 10 * v41);
    v41 = v47 + 10 * v41;
    ++v45;
    --v46;
    if (v48)
      goto LABEL_81;
  }
LABEL_75:
  v42 = 0x100000000;
  if (v41 == -1)
  {
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v43 = v41;
  }
  if (v41 == -1)
    v44 = 0;
  else
    v44 = v41 & 0xFFFFFF00;
LABEL_81:
  a3 = v44 | v43;
  if ((v42 & 0x100000000) != 0)
  {
    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, (uint64_t)a2, (const WTF::StringImpl *)a3, (uint64_t)&v70, a5, a6, a7, a8);
    v56 = 0;
    if (!OwnPropertySlotByIndex || BYTE1(v76) != 1)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_82:
  v56 = 0;
LABEL_86:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_87;
  v60 = *(_DWORD *)(v13 + 80);
  if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_87:
    if (v56)
    {
      if ((v56 & 0xFFFE000000000002) != 0)
      {
LABEL_89:
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v82, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_101;
      }
      v58 = *(unsigned __int8 *)(v56 + 5);
      if ((v58 - 2) < 3)
      {
        if (v58 != 2)
          goto LABEL_89;
        v59 = *(int **)(v56 + 8);
        if ((v59 & 1) != 0)
        {
          v59 = *JSC::JSRopeString::resolveRope(v56, a2, a3, a4, a10, a5, a6, a7, a8);
          if (!v59)
            goto LABEL_95;
        }
        else if (!v59)
        {
LABEL_95:
          *a9 = v59;
          goto LABEL_101;
        }
        *v59 += 2;
        goto LABEL_95;
      }
    }
  }
  *a9 = 0;
LABEL_101:
  if (v79)
  {
    v61 = *(_DWORD *)(v78 + 4);
    if (!v61)
    {
      __break(0xC471u);
      JUMPOUT(0x1989297E8);
    }
    *(_DWORD *)(v78 + 4) = v61 - 1;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

void JSC::ErrorInstance::sanitizedNameString(unint64_t this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, const JSC::PropertyTable *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  JSC::ErrorInstance *v11;
  int **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  JSC::ErrorInstance *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  JSC::ErrorInstance *v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  v11 = (JSC::ErrorInstance *)this;
  v12 = a9;
  v13 = *((_QWORD *)a2 + 7);
  v82 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1968);
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = 0;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v72 = 0xFFFFFFFF00000000;
  v74 = 0;
  v75 = 0;
  v73 = this;
  v76 = 196608;
  v77 = 0;
  v80 = 0;
  v81 = 0;
  v78 = v13;
  ++*(_DWORD *)(v13 + 4);
  v79 = 1;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_88;
  v16 = 0;
  v17 = v14 >> 4;
  while (v16 != 2)
  {
    v18 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((_DWORD)v17)
    {
      v19 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      if ((v17 & ~*(_DWORD *)(v19 + 0x20)) == 0)
      {
        v20 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x58);
        if (v20
          || (v21 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v21 + 5) == 1 || *(_DWORD *)(v21 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)), *((JSC::VM **)a2 + 7), 1, a4, a5, a6, a7, a8), v20))
        {
          if (*(_DWORD *)(v20 + 24))
          {
            v22 = *(_QWORD *)(v20 + 16);
            v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
            v24 = *(unsigned int *)(v20 + 8);
            v25 = *(_DWORD *)(v14 + 16);
            if ((v22 & 1) != 0)
            {
              if ((v25 & 0x20) != 0)
                v25 = *(_DWORD *)(v14 + 32);
              v26 = *(_DWORD *)(v20 + 12);
              v27 = (v25 >> 8) & *(_QWORD *)&v26;
              v28 = *(unsigned __int8 *)(v23 + v27);
              if (!*(_BYTE *)(v23 + v27))
                goto LABEL_43;
              v29 = v23 + v24;
              v30 = 1;
              while (1)
              {
                v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
                if (v14 == (v31 & 0xFFFFFFFFFFFFLL))
                  break;
                v27 = ((_DWORD)v27 + v30) & v26;
                v28 = *(unsigned __int8 *)(v23 + v27);
                ++v30;
                if (!*(_BYTE *)(v23 + v27))
                  goto LABEL_43;
              }
              a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
            }
            else
            {
              if ((v25 & 0x20) != 0)
                v25 = *(_DWORD *)(v14 + 32);
              v32 = *(_DWORD *)(v20 + 12);
              v33 = v32 & (v25 >> 8);
              v34 = *(_DWORD *)(v23 + 4 * v33);
              if (!v34)
                goto LABEL_43;
              v35 = v23 + 4 * v24;
              v36 = 1;
              while (1)
              {
                v37 = (v34 - 1);
                if (v14 == *(_QWORD *)(v35 + 16 * v37))
                  break;
                v33 = (v33 + v36) & v32;
                v34 = *(_DWORD *)(v23 + 4 * v33);
                ++v36;
                if (!v34)
                  goto LABEL_43;
              }
              a6 = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              if ((int)a6 <= 63)
              {
                v38 = (uint64_t)v11 + 16;
                v39 = a6 << 32;
              }
              else
              {
                v38 = *((_QWORD *)v11 + 1) - 8;
                v39 = 0x3F00000000 - (a6 << 32);
              }
              a5 = HIDWORD(a6);
              v15 = *(_QWORD *)(v38 + (v39 >> 29));
              if ((v15 & 0xFFFE000000000002) != 0)
              {
LABEL_84:
                v70 = v15;
                v74 = v11;
                v72 = __PAIR64__(a6, HIDWORD(a6));
                LOWORD(v76) = 257;
LABEL_85:
                v82 = v15;
                goto LABEL_87;
              }
              v40 = *(unsigned __int8 *)(v15 + 5);
              if (v40 != 5)
              {
                if (v40 != 6)
                  goto LABEL_84;
                v41 = *(_DWORD *)(v19 + 16) & 3;
                v42 = *(_QWORD *)(v15 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v44 = *(_QWORD *)(v15 + 24);
                  v43 = *(_QWORD *)(v15 + 32);
                  v70 = *(_QWORD *)(v15 + 8);
                  v71 = v42;
                  LODWORD(v72) = HIDWORD(a6);
                  v74 = v11;
                  BYTE1(v76) = 3;
                  if (v41 != 2)
                    LOBYTE(v76) = 1;
                  HIBYTE(v76) = 1;
                  v80 = v44;
                  v81 = v43;
                }
                else
                {
                  v70 = *(_QWORD *)(v15 + 8);
                  v71 = v42;
                  LODWORD(v72) = HIDWORD(a6);
                  v74 = v11;
                  BYTE1(v76) = 3;
                  if (v41 != 2)
                    LOBYTE(v76) = 1;
                }
                goto LABEL_62;
              }
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v11, (uint64_t)v18, (uint64_t)&v70, v15, SHIDWORD(a6), a6);
LABEL_61:
              if (BYTE1(v76) == 1)
              {
                v15 = v70;
                goto LABEL_85;
              }
              goto LABEL_62;
            }
          }
        }
      }
    }
LABEL_43:
    if ((*((_BYTE *)v11 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v11, v18, v14, (uint64_t)&v70) & 1) != 0)
    {
      goto LABEL_61;
    }
    if (v14)
    {
      v45 = *(_DWORD *)(v14 + 16);
      if ((v45 & 0x20) == 0)
      {
        v46 = *(_BYTE **)(v14 + 8);
        v47 = *(unsigned int *)(v14 + 4);
        if ((v45 & 4) != 0)
        {
          if (!(_DWORD)v47)
            goto LABEL_62;
          a3 = *v46 - 48;
          if (a3 > 9 || v47 >= 2 && *v46 == 48)
            goto LABEL_62;
          v53 = v46 + 1;
          v54 = v47 - 1;
          while (v54)
          {
            if (a3 <= 0x19999999)
            {
              v55 = *v53 - 48;
              if (v55 <= 9)
              {
                v51 = __CFADD__(v55, 10 * a3);
                a3 = v55 + 10 * (_DWORD)a3;
                ++v53;
                --v54;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_62;
          }
          if ((_DWORD)a3 == -1)
            goto LABEL_62;
        }
        else
        {
          if (!(_DWORD)v47)
            goto LABEL_62;
          a3 = *(unsigned __int16 *)v46 - 48;
          if (a3 > 9 || *(_WORD *)v46 == 48 && v47 > 1)
            goto LABEL_62;
          v48 = (unsigned __int16 *)(v46 + 2);
          v49 = v47 - 1;
          while (v49)
          {
            if (a3 <= 0x19999999)
            {
              v50 = *v48 - 48;
              if (v50 <= 9)
              {
                v51 = __CFADD__(v50, 10 * a3);
                a3 = v50 + 10 * (_DWORD)a3;
                ++v48;
                --v49;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_62;
          }
          if ((_DWORD)a3 == -1)
            goto LABEL_62;
        }
        if (JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)v11, (uint64_t)a2, (const WTF::StringImpl *)a3, (uint64_t)&v70, a5, a6, a7, a8))goto LABEL_61;
      }
    }
LABEL_62:
    v52 = *(JSC::ErrorInstance **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
    if (!v52)
      v52 = (JSC::ErrorInstance *)*((_QWORD *)v11 + 2);
    ++v16;
    v11 = v52;
    if (((unint64_t)v52 & 0xFFFE000000000002) != 0)
      break;
  }
  v15 = 0;
LABEL_87:
  v12 = a9;
LABEL_88:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_119;
  v68 = *(_DWORD *)(v13 + 80);
  if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_119:
    if (!v15)
      goto LABEL_98;
    if ((v15 & 0xFFFE000000000002) != 0)
    {
LABEL_91:
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v82, a2, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, v12);
      goto LABEL_99;
    }
    v56 = *(unsigned __int8 *)(v15 + 5);
    if ((v56 - 2) >= 3)
    {
LABEL_98:
      v58 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v58 = 0x500000002;
      *(_QWORD *)(v58 + 8) = "Error";
      *(_DWORD *)(v58 + 16) = 4;
      *v12 = (int *)v58;
      goto LABEL_99;
    }
    if (v56 != 2)
      goto LABEL_91;
    v57 = *(int **)(v15 + 8);
    if ((v57 & 1) != 0)
    {
      v57 = *JSC::JSRopeString::resolveRope(v15, a2, a3, (uint64_t)a4, a10, a5, a6, a7, a8);
      if (!v57)
        goto LABEL_97;
    }
    else if (!v57)
    {
LABEL_97:
      *v12 = v57;
      goto LABEL_99;
    }
    *v57 += 2;
    goto LABEL_97;
  }
  *v12 = 0;
LABEL_99:
  if (v79)
  {
    v59 = *(_DWORD *)(v78 + 4);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x198929DE8);
    }
    *(_DWORD *)(v78 + 4) = v59 - 1;
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
}

void JSC::ErrorInstance::sanitizedToString(JSC::ErrorInstance *this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, const JSC::PropertyTable *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  int8x16_t *v25;
  char v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;

  v13 = *((_QWORD *)a2 + 7);
  JSC::ErrorInstance::sanitizedNameString((unint64_t)this, a2, a3, a4, a5, a6, a7, a8, (int **)&v76, a10);
  if (*(_DWORD *)(v13 + 80))
  {
    v30 = *(_DWORD *)(v13 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v15, v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v13 + 16))
    {
      *a9 = 0;
      goto LABEL_46;
    }
  }
  JSC::ErrorInstance::sanitizedMessageString(this, a2, v15, v16, v17, v18, v19, v20, (int **)&v75, v21);
  if (*(_DWORD *)(v13 + 80))
  {
    v31 = *(_DWORD *)(v13 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v15, v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v13 + 16))
    {
      *a9 = 0;
      goto LABEL_43;
    }
  }
  v22 = v76;
  if (v76)
  {
    v23 = *((_DWORD *)v76 + 1);
    *(_DWORD *)v76 += 2;
    v24 = v75;
    if (v23)
    {
      v25 = (int8x16_t *)"";
      if (!v75)
      {
        v26 = 1;
        v27 = 1;
        goto LABEL_67;
      }
      v28 = *((_DWORD *)v75 + 1);
      v29 = v28 == 0;
      if (v28)
        v25 = (int8x16_t *)": ";
      v27 = 3;
      if (v29)
        v27 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v24 = v75;
  }
  v25 = (int8x16_t *)"";
  v27 = 1;
  if (v24)
  {
LABEL_20:
    v26 = 0;
    *(_DWORD *)v24 += 2;
    goto LABEL_67;
  }
  v26 = 1;
LABEL_67:
  v74 = v27 - 1;
  if ((unint64_t)(v27 - 1) >> 31)
  {
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x19892A078);
  }
  if (v22)
  {
    v32 = *((_DWORD *)v22 + 1);
    if ((v26 & 1) == 0)
      goto LABEL_23;
LABEL_59:
    v33 = 0;
    goto LABEL_24;
  }
  v32 = 0;
  if ((v26 & 1) != 0)
    goto LABEL_59;
LABEL_23:
  v33 = *((_DWORD *)v24 + 1);
  if (v33 < 0)
  {
LABEL_64:
    *a9 = 0;
    goto LABEL_68;
  }
LABEL_24:
  v34 = __OFADD__(v74, v33);
  v35 = v74 + v33;
  v36 = v34;
  if (v32 < 0)
    goto LABEL_64;
  if ((v36 & 1) != 0)
    goto LABEL_64;
  v37 = (v32 + v35);
  if (__OFADD__(v32, v35))
    goto LABEL_64;
  if (v22)
  {
    if ((*((_DWORD *)v22 + 4) & 4) != 0)
      v38 = v26;
    else
      v38 = 1;
    if ((v38 & 1) == 0)
      goto LABEL_35;
    v39 = (*((_DWORD *)v22 + 4) & 4u) >> 2;
  }
  else
  {
    if ((v26 & 1) == 0)
    {
LABEL_35:
      v39 = (*((unsigned __int8 *)v24 + 16) >> 2) & 1;
      goto LABEL_36;
    }
    LOBYTE(v39) = 1;
  }
LABEL_36:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37, v39 & 1, (uint64_t)v22, v25, v74, (uint64_t)v24, a9);
  if (!*a9)
    goto LABEL_68;
  if ((v26 & 1) == 0)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      if (!v22)
        goto LABEL_43;
      goto LABEL_41;
    }
    *(_DWORD *)v24 -= 2;
  }
  if (!v22)
    goto LABEL_43;
LABEL_41:
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
LABEL_43:
  v40 = v75;
  v75 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
LABEL_46:
  v41 = v76;
  v76 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
}

void JSC::ErrorInstance::tryGetMessageForDebugging(unint64_t this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int8x16_t a10@<Q0>)
{
  char *v12;
  JSC::VM *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  JSC::VM *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v12 = (char *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v12 = (char *)(this - 16);
  v13 = *(JSC::VM **)v12;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 41952) + 1824);
  if (v14)
    *(_DWORD *)v14 += 2;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v54 = 0xFFFFFFFF00000000;
  v56 = 0;
  v57 = 0;
  v55 = this;
  v58 = 196608;
  v59 = 0;
  v62 = 0;
  v63 = 0;
  v60 = v13;
  ++*((_DWORD *)v13 + 1);
  v61 = 1;
  if ((v14 >> 4))
  {
    v15 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if (((v14 >> 4) & ~*(_DWORD *)(v15 + 0x20)) == 0)
    {
      v16 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
      if (v16
        || (v17 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v17 + 5) == 1 || *(_DWORD *)(v17 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v13, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v16))
      {
        if (*(_DWORD *)(v16 + 24))
        {
          v18 = *(_QWORD *)(v16 + 16);
          v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
          v20 = *(unsigned int *)(v16 + 8);
          v21 = *(_DWORD *)(v14 + 16);
          if ((v18 & 1) != 0)
          {
            if ((v21 & 0x20) != 0)
              v21 = *(_DWORD *)(v14 + 32);
            v22 = *(_DWORD *)(v16 + 12);
            v23 = (v21 >> 8) & *(_QWORD *)&v22;
            v24 = *(unsigned __int8 *)(v19 + v23);
            if (!*(_BYTE *)(v19 + v23))
              goto LABEL_39;
            v25 = v19 + v20;
            v26 = 1;
            while (1)
            {
              v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
              if (v14 == (v27 & 0xFFFFFFFFFFFFLL))
                break;
              v23 = ((_DWORD)v23 + v26) & v22;
              v24 = *(unsigned __int8 *)(v19 + v23);
              ++v26;
              if (!*(_BYTE *)(v19 + v23))
                goto LABEL_39;
            }
            a6 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
          }
          else
          {
            if ((v21 & 0x20) != 0)
              v21 = *(_DWORD *)(v14 + 32);
            v28 = *(_DWORD *)(v16 + 12);
            v29 = v28 & (v21 >> 8);
            v30 = *(_DWORD *)(v19 + 4 * v29);
            if (!v30)
              goto LABEL_39;
            v31 = v19 + 4 * v20;
            v32 = 1;
            while (1)
            {
              v33 = (v30 - 1);
              if (v14 == *(_QWORD *)(v31 + 16 * v33))
                break;
              v29 = (v29 + v32) & v28;
              v30 = *(_DWORD *)(v19 + 4 * v29);
              ++v32;
              if (!v30)
                goto LABEL_39;
            }
            a6 = *(unsigned int *)(v31 + 16 * v33 + 8) | ((unint64_t)*(unsigned __int8 *)(v31 + 16 * v33 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v34 = (char *)(this + 16);
              v35 = a6 << 32;
            }
            else
            {
              v34 = (char *)(*(_QWORD *)(this + 8) - 8);
              v35 = 0x3F00000000 - (a6 << 32);
            }
            a4 = *(_QWORD *)&v34[v35 >> 29];
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_36;
            v36 = *(unsigned __int8 *)(a4 + 5);
            if (v36 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)v13, (uint64_t)&v52, a4, SHIDWORD(a6), a6);
              goto LABEL_47;
            }
            if (v36 == 6)
            {
              v38 = *(_DWORD *)(v15 + 16) & 3;
              v39 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v41 = *(_QWORD *)(a4 + 24);
                v40 = *(_QWORD *)(a4 + 32);
                v52 = *(_QWORD *)(a4 + 8);
                v53 = v39;
                LODWORD(v54) = HIDWORD(a6);
                v56 = this;
                BYTE1(v58) = 3;
                if (v38 != 2)
                  LOBYTE(v58) = 1;
                HIBYTE(v58) = 1;
                v62 = v41;
                v63 = v40;
              }
              else
              {
                v52 = *(_QWORD *)(a4 + 8);
                v53 = v39;
                LODWORD(v54) = HIDWORD(a6);
                v56 = this;
                BYTE1(v58) = 3;
                if (v38 != 2)
                  LOBYTE(v58) = 1;
              }
            }
            else
            {
LABEL_36:
              v52 = a4;
              v56 = this;
              v54 = __PAIR64__(a6, HIDWORD(a6));
              LOWORD(v58) = 257;
            }
LABEL_47:
            if (v59
              || !BYTE1(v58)
              || (BYTE1(v58) != 1 || v58 != 1) && (BYTE1(v58) != 2 || v58 != 1))
            {
              goto LABEL_67;
            }
            v37 = v52;
            if ((v52 & 0xFFFE000000000002) != 0)
              goto LABEL_67;
            goto LABEL_54;
          }
        }
      }
    }
  }
LABEL_39:
  if ((*(_BYTE *)(this + 6) & 0x20) != 0
    && JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, v13, v14, (uint64_t)&v52))
  {
    goto LABEL_47;
  }
  v37 = 0;
LABEL_54:
  if (*(_BYTE *)(v37 + 5) == 2)
  {
    v42 = *(int **)(v37 + 8);
    if ((v42 & 1) != 0)
    {
      v42 = *JSC::JSRopeString::resolveRope(v37, 0, a3, a4, a10, a5, a6, a7, a8);
      if (!v42)
        goto LABEL_58;
    }
    else if (!v42)
    {
LABEL_58:
      *a9 = v42;
      goto LABEL_59;
    }
    *v42 += 2;
    goto LABEL_58;
  }
LABEL_67:
  WTF::StringImpl::s_emptyAtomString += 2;
  *a9 = &WTF::StringImpl::s_emptyAtomString;
LABEL_59:
  if (v61)
  {
    v43 = *((_DWORD *)v60 + 1);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A490);
    }
    *((_DWORD *)v60 + 1) = v43 - 1;
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t JSC::StackFrame::isMarked(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 8) != 0)
    {
      if ((*(_BYTE *)(v2 - 79) & 1) != 0)
        goto LABEL_5;
    }
    else if (*(_DWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
           && ((*(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8 * ((v2 >> 10) & 0xF) + 0x28) >> (v2 >> 4)) & 1) != 0)
    {
      goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  v3 = a1[1];
  if (!v3)
    return 1;
  if ((v3 & 8) == 0)
  {
    if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
      return (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFC000) + 8 * ((v3 >> 10) & 0xF) + 0x28) >> (v3 >> 4)) & 1;
    return 0;
  }
  return *(_BYTE *)(v3 - 79) & 1;
}

void JSC::ErrorInstance::computeErrorInfo(JSC::ErrorInstance *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;

  ++*((_DWORD *)a2 + 229);
  v9 = (WTF::AtomStringImpl *)*((_QWORD *)this + 3);
  if (!v9 || !*((_DWORD *)v9 + 3))
    goto LABEL_17;
  JSC::getLineColumnAndSource((uint64_t)a2, v9, (unint64_t *)this + 4, (uint64_t *)this + 5, a5, a6, a7, a8);
  JSC::Interpreter::stackTraceAsString(a2, *((_QWORD *)this + 3), v11, v12, v13, v14, v15, v16, &v51);
  v24 = v51;
  v51 = 0;
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v24;
  if (v25)
  {
    v26 = *(_DWORD *)v25 - 2;
    if (*(_DWORD *)v25 != 2)
    {
LABEL_5:
      *(_DWORD *)v25 = v26;
      goto LABEL_6;
    }
    WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    v25 = v51;
    v51 = 0;
    if (v25)
    {
      v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 != 2)
        goto LABEL_5;
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
  }
LABEL_6:
  v27 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v27)
  {
    v28 = *(_DWORD *)(v27 + 12);
    if (v28)
    {
      v29 = *(_QWORD *)v27;
      v30 = *(_QWORD *)v27 + 40 * v28;
      do
      {
        v31 = *(unsigned int **)(v29 + 24);
        *(_QWORD *)(v29 + 24) = 0;
        if (v31)
        {
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v31);
            v51 = (WTF::StringImpl *)v31;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v51, v17, v18, v19, v20, v21, v22, v23);
          }
        }
        v29 += 40;
      }
      while (v29 != v30);
    }
    v34 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      *(_QWORD *)v27 = 0;
      *(_DWORD *)(v27 + 8) = 0;
      WTF::fastFree(v34, v17, v18, v19, v20, v21, v22, v23);
    }
    WTF::fastFree(v27, v17, v18, v19, v20, v21, v22, v23);
  }
LABEL_17:
  --*((_DWORD *)a2 + 229);
}

void JSC::ErrorPrototypeBase::finishCreation(JSC::ErrorPrototypeBase *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;

  v10 = (uint64_t *)((char *)a2 + 41952);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(*v10 + 1968);
  v12 = JSC::jsString(a2, a3, a3, a4, a5, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v11, v12, 4, v13, v14, v15, v16);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*v10 + 1824), v10[2], 4, v17, v18, v19, v20);
}

char *JSC::errorTypeName(unsigned int a1)
{
  return (&JSC::errorTypeName(JSC::ErrorTypeWithExtension)::errorTypeNames)[2 * a1];
}

JSC::Exception *JSC::errorProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::String *v15;
  unint64_t v16;
  int8x16_t v17;
  int *v18;
  int *v19;
  unint64_t v20;
  int8x16_t v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  int *v26;
  BOOL v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v41;
  const WTF::String *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  int *v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94[2];
  char v95;
  WTF::StringImpl *v96;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned __int8 *)(v10 + 5);
    if (v11 >= 0x17 && v11 - 57 < 0xFFFFFFFA)
    {
      v91 = this;
      v92 = v10;
      if ((unint64_t)v86 < *(_QWORD *)(v9 + 8))
      {
        v85 = JSC::StringRecursionChecker::throwStackOverflowError((JSC::StringRecursionChecker *)&v91, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 90576);
        if (!v13)
        {
          *(_QWORD *)(v9 + 90576) = v10;
LABEL_9:
          v93 = 0;
LABEL_10:
          v16 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1968), a4, a5, a6, a7, a8);
          v90 = v16;
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_11;
          if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
          {
            v16 = v90;
LABEL_11:
            if (v16 == 10)
            {
              v19 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v19 = 0x500000002;
              *((_QWORD *)v19 + 1) = "Error";
              v19[4] = 4;
              v89 = (WTF::StringImpl *)v19;
            }
            else
            {
              if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v90, this, v15, a4, a5, a6, a7, a8, v94);
              }
              else
              {
                v18 = *(int **)(v16 + 8);
                if ((v18 & 1) != 0)
                  v18 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)v15, a4, v17, a5, a6, a7, a8);
                if (v18)
                  *v18 += 2;
                v94[0] = v18;
                v86[1] = v16;
              }
              v19 = v94[0];
              v89 = (WTF::StringImpl *)v94[0];
              if (*(_DWORD *)(v9 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
              {
                goto LABEL_87;
              }
            }
            v20 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1824), a4, a5, a6, a7, a8);
            v88 = v20;
            if (*(_DWORD *)(v9 + 80))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
              {
LABEL_87:
                v38 = 0;
LABEL_52:
                v89 = 0;
                if (v19)
                {
                  if (*v19 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
                    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                  }
                  else
                  {
                    *v19 -= 2;
                  }
                }
                goto LABEL_55;
              }
              v20 = v88;
            }
            if (v20 == 10)
            {
              v23 = 0;
              v87 = 0;
            }
            else
            {
              if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, this, v15, a4, a5, a6, a7, a8, v94);
              }
              else
              {
                v22 = *(int **)(v20 + 8);
                if ((v22 & 1) != 0)
                  v22 = *JSC::JSRopeString::resolveRope(v20, this, (uint64_t)v15, a4, v21, a5, a6, a7, a8);
                if (v22)
                  *v22 += 2;
                v94[0] = v22;
                v86[0] = v20;
              }
              v23 = v94[0];
              v87 = v94[0];
              if (*(_DWORD *)(v9 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
              {
                v38 = 0;
                goto LABEL_75;
              }
            }
            if (v19 && (v24 = v19[1]) != 0)
            {
              if (v23)
              {
                v25 = v23[1];
                if (v25)
                {
                  v26 = (int *)*((_QWORD *)this + 7);
                  v94[0] = v26;
                  if (v25 < 0
                    || ((v27 = __OFADD__(v25, 2), v28 = v25 + 2, !v27) ? (v29 = 0) : (v29 = 1),
                        v24 < 0 || (v29 & 1) != 0 || __OFADD__(v24, v28)))
                  {
                    v96 = 0;
                  }
                  else
                  {
                    if ((v19[4] & 4) != 0)
                      v30 = (*((unsigned __int8 *)v23 + 16) >> 2) & 1;
                    else
                      v30 = 0;
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v24 + v28), v30, (uint64_t)v19, (int8x16_t *)": ", 2u, (uint64_t)v23, (int **)&v96);
                    if (v96)
                    {
                      v37 = JSC::jsNontrivialString((uint64_t)v26, (JSC::VM *)&v96, v31, v32, v33, v34, v35, v36);
LABEL_45:
                      v38 = v37;
                      v39 = v96;
                      v96 = 0;
                      if (v39)
                      {
                        if (*(_DWORD *)v39 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
                          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
                        }
                        else
                        {
                          *(_DWORD *)v39 -= 2;
                        }
                      }
                      v87 = 0;
                      goto LABEL_49;
                    }
                  }
                  v37 = (uint64_t)JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v94);
                  goto LABEL_45;
                }
              }
              v38 = v90;
              if ((v90 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v90 + 5) != 2)
                v38 = JSC::jsString(v9, (JSC::VM *)&v89, (uint64_t)v15, a4, a5, a6, a7, a8);
            }
            else
            {
              v38 = v88;
              if ((v88 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v88 + 5) != 2)
              {
                v38 = JSC::jsString(v9, (JSC::VM *)&v87, (uint64_t)v15, a4, a5, a6, a7, a8);
                v23 = v87;
              }
            }
LABEL_75:
            v87 = 0;
            if (!v23)
            {
LABEL_51:
              v19 = (int *)v89;
              goto LABEL_52;
            }
LABEL_49:
            if (*v23 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
            }
            else
            {
              *v23 -= 2;
            }
            goto LABEL_51;
          }
          v38 = 0;
LABEL_55:
          JSC::StringRecursionChecker::~StringRecursionChecker((JSC::StringRecursionChecker *)&v91, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8);
          return (JSC::Exception *)v38;
        }
        if (v13 != v10)
        {
          WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add((uint64_t *)(v9 + 90584), &v92, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v94);
          if (v95)
            goto LABEL_9;
        }
        v85 = JSC::StringRecursionChecker::emptyString((JSC::StringRecursionChecker *)&v91);
      }
      v38 = v85;
      v93 = v85;
      if (v85)
        goto LABEL_55;
      goto LABEL_10;
    }
  }
  v41 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v41 = 0xA00000002;
  *(_QWORD *)(v41 + 8) = "Type error";
  *(_DWORD *)(v41 + 16) = 4;
  v91 = (WTF::StringImpl *)v41;
  v50 = JSC::createTypeError((unint64_t)this, &v91, v42);
  v52 = v91;
  v91 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  if ((v50 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C)))
  {
    v50 = JSC::Exception::create(v9, (JSC::VM *)v50, 0, v45, v46, v47, v48, v49);
  }
  return JSC::VM::throwException((JSC::VM *)v9, this, (JSC::Exception *)v50, v51, v45, v46, v47, v48, v49);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *,false>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  const char **v10;
  const char **i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char **v39;
  const char **v40;
  const char **v41;
  const char *v42;
  int v43;
  BOOL v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char **v59;
  const char *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  const char **v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  const char **v69;
  BOOL v70;
  char v71;
  uint64_t v72;
  const char **v73;
  const char **v74;
  const char *v75;
  const char *v76;
  _DWORD *v77;
  uint64_t m;
  _QWORD *v79;
  _DWORD *v80;
  uint64_t n;
  _QWORD *v82;
  const char *v83;
  int64_t v84;
  int64_t v85;
  const char **v86;
  uint64_t v87;
  const char **v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char **v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  const char **v105;
  uint64_t v106;
  const char **v107;
  const char **v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  const char *v112;
  const char *v113;
  const char **v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  const char **v121;
  const char *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char **v126;
  const char *v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  const char **j;
  unint64_t v132;
  const char *v133;
  const char *v134;
  const char *v135;
  const char *v136;
  uint64_t v137;
  const char **k;
  const char *v139;
  const char *v140;
  const char *v141;
  uint64_t v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  _DWORD *v147;
  const char *v148;
  const char *v149;
  const char *v150;
  int64_t v151;
  char *__s2;
  uint64_t v153;
  int64_t v154;
  const char *v155;
  const char *v156;

  v8 = a4;
  v9 = a3;
  v10 = a2;
LABEL_2:
  v153 = (uint64_t)(v10 - 1);
  i = a1;
  while (2)
  {
    a1 = i;
    v13 = (char *)v10 - (char *)i;
    v14 = v10 - i;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v68 = (uint64_t)*(v10 - 1);
        v13 = (unint64_t)*a1;
        if (!v68)
          goto LABEL_340;
        if (v13 && strcmp((const char *)(v68 + 16), (const char *)(v13 + 16)) < 0)
          goto LABEL_341;
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, v153, a4, a5, a6, a7, a8);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a1 + 2), v153, a5, a6, a7, a8);
        return;
      case 5:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3), v153, a6, a7, a8);
        return;
      default:
        if ((uint64_t)v13 > 191)
        {
          if (!v9)
          {
            if (a1 == v10)
              return;
            v84 = (unint64_t)(v14 - 2) >> 1;
            v154 = v84;
            while (1)
            {
              v85 = v84;
              if (v154 < v84)
                goto LABEL_257;
              v86 = &a1[v84];
              v87 = (2 * v84) | 1;
              v88 = &a1[v87];
              if (2 * v84 + 2 >= v14)
                goto LABEL_218;
              v89 = v88[1];
              v90 = *v88;
              if (*v88)
              {
                if (!v89)
                {
                  v91 = *v86;
                  if (!*v86)
                    goto LABEL_225;
                  goto LABEL_220;
                }
                if (strcmp(v90 + 16, v89 + 16) < 0)
                {
LABEL_217:
                  ++v88;
                  v87 = 2 * v85 + 2;
                }
              }
              else if (v89)
              {
                goto LABEL_217;
              }
LABEL_218:
              v90 = *v88;
              v91 = *v86;
              if (!*v88)
              {
                if (v91)
                  goto LABEL_257;
                goto LABEL_225;
              }
              if (!v91)
                goto LABEL_225;
LABEL_220:
              if (strcmp(v90 + 16, v91 + 16) < 0)
                goto LABEL_257;
LABEL_225:
              v150 = v91;
              v151 = v85;
              *v86 = 0;
              if (v91)
              {
                __s2 = (char *)(v91 + 16);
                v92 = *v88;
                while (1)
                {
                  v93 = v88;
                  *v88 = 0;
                  v94 = *v86;
                  *v86 = v92;
                  if (v94)
                  {
                    if (*(_DWORD *)v94 == 1)
                      WTF::fastFree((unint64_t)v94, a2, a3, a4, a5, a6, a7, a8);
                    else
                      --*(_DWORD *)v94;
                  }
                  if (v154 < v87)
                    goto LABEL_254;
                  v95 = 2 * v87;
                  v87 = (2 * v87) | 1;
                  v88 = &a1[v87];
                  v96 = v95 + 2;
                  if (v95 + 2 >= v14)
                    goto LABEL_238;
                  v97 = v88[1];
                  v92 = *v88;
                  if (!*v88)
                    break;
                  if (v97)
                  {
                    if (strcmp(v92 + 16, v97 + 16) < 0)
                    {
LABEL_237:
                      ++v88;
                      v87 = v96;
                    }
LABEL_238:
                    v92 = *v88;
                    if (!*v88)
                      goto LABEL_254;
                  }
                  v86 = v93;
                  if (strcmp(v92 + 16, __s2) < 0)
                    goto LABEL_254;
                }
                if (v97)
                  goto LABEL_237;
                goto LABEL_238;
              }
              while (1)
              {
                v93 = v88;
                v101 = *v88;
                *v88 = 0;
                v102 = *v86;
                *v86 = v101;
                if (v102)
                {
                  if (*(_DWORD *)v102 == 1)
                    WTF::fastFree((unint64_t)v102, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*(_DWORD *)v102;
                }
                if (v154 < v87)
                  break;
                v98 = 2 * v87;
                v87 = (2 * v87) | 1;
                v88 = &a1[v87];
                v99 = v98 + 2;
                v86 = v93;
                if (v98 + 2 < v14)
                {
                  v100 = v88[1];
                  if (*v88)
                  {
                    v86 = v93;
                    if (v100)
                    {
                      v86 = v93;
                      if (strcmp(*v88 + 16, v100 + 16) < 0)
                      {
LABEL_248:
                        v86 = v93;
                        ++v88;
                        v87 = v99;
                      }
                    }
                  }
                  else
                  {
                    v86 = v93;
                    if (v100)
                      goto LABEL_248;
                  }
                }
              }
LABEL_254:
              v103 = *v93;
              *v93 = v150;
              v85 = v151;
              if (v103)
              {
                if (*(_DWORD *)v103 == 1)
                  WTF::fastFree((unint64_t)v103, a2, a3, a4, a5, a6, a7, a8);
                else
                  --*(_DWORD *)v103;
              }
LABEL_257:
              v84 = v85 - 1;
              if (!v85)
              {
                v104 = v13 >> 3;
                while (1)
                {
                  if (v104 <= 0)
                    goto LABEL_339;
                  if (v104 == 1)
                    return;
                  v105 = v10;
                  v106 = 0;
                  v155 = *a1;
                  *a1 = 0;
                  v107 = a1;
                  do
                  {
                    v108 = v107;
                    v107 += v106 + 1;
                    v109 = 2 * v106;
                    v106 = (2 * v106) | 1;
                    v110 = v109 + 2;
                    if (v109 + 2 >= v104)
                      goto LABEL_270;
                    v111 = v107[1];
                    if (!*v107)
                    {
                      if (!v111)
                        goto LABEL_270;
LABEL_269:
                      ++v107;
                      v106 = v110;
                      goto LABEL_270;
                    }
                    if (v111 && strcmp(*v107 + 16, v111 + 16) < 0)
                      goto LABEL_269;
LABEL_270:
                    v112 = *v107;
                    *v107 = 0;
                    v113 = *v108;
                    *v108 = v112;
                    if (v113)
                    {
                      if (*(_DWORD *)v113 == 1)
                        WTF::fastFree((unint64_t)v113, a2, a3, a4, a5, a6, a7, a8);
                      else
                        --*(_DWORD *)v113;
                    }
                  }
                  while (v106 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                  v114 = v105 - 1;
                  if (v107 != v114)
                  {
                    v115 = *v114;
                    v13 = (unint64_t)v114;
                    *v114 = 0;
                    v116 = *v107;
                    *v107 = v115;
                    v117 = v104 - 1;
                    if (v116)
                    {
                      if (*(_DWORD *)v116 == 1)
                        WTF::fastFree((unint64_t)v116, a2, a3, a4, a5, a6, a7, a8);
                      else
                        --*(_DWORD *)v116;
                    }
                    v118 = *(const char **)v13;
                    *(_QWORD *)v13 = v155;
                    if (v118)
                    {
                      if (*(_DWORD *)v118 == 1)
                        WTF::fastFree((unint64_t)v118, a2, a3, a4, a5, a6, a7, a8);
                      else
                        --*(_DWORD *)v118;
                    }
                    v119 = (char *)(v107 + 1) - (char *)a1;
                    if (v119 < 9)
                      goto LABEL_303;
                    v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
                    v121 = &a1[v120];
                    v122 = *v107;
                    if (*v121)
                    {
                      if (!v122 || (strcmp(*v121 + 16, v122 + 16) & 0x80000000) == 0)
                        goto LABEL_303;
                    }
                    else if (!v122)
                    {
                      goto LABEL_303;
                    }
                    *v107 = 0;
                    v156 = v122;
                    v124 = v122 + 16;
                    v125 = *v121;
                    while (1)
                    {
                      v126 = v121;
                      *v121 = 0;
                      v127 = *v107;
                      *v107 = v125;
                      if (v127)
                      {
                        if (*(_DWORD *)v127 == 1)
                        {
                          WTF::fastFree((unint64_t)v127, a2, a3, a4, a5, a6, a7, a8);
                          if (!v120)
                            goto LABEL_300;
                          goto LABEL_296;
                        }
                        --*(_DWORD *)v127;
                      }
                      if (!v120)
                        goto LABEL_300;
LABEL_296:
                      v120 = (v120 - 1) >> 1;
                      v121 = &a1[v120];
                      v125 = *v121;
                      v107 = v126;
                      if (*v121)
                      {
                        v107 = v126;
                        if ((strcmp(v125 + 16, v124) & 0x80000000) == 0)
                        {
LABEL_300:
                          v123 = *v126;
                          *v126 = v156;
                          if (v123)
                            goto LABEL_301;
                          goto LABEL_303;
                        }
                      }
                    }
                  }
                  v13 = (unint64_t)v114;
                  v123 = *v107;
                  *v107 = v155;
                  v117 = v104 - 1;
                  if (v123)
                  {
LABEL_301:
                    if (*(_DWORD *)v123 == 1)
                      WTF::fastFree((unint64_t)v123, a2, a3, a4, a5, a6, a7, a8);
                    else
                      --*(_DWORD *)v123;
                  }
LABEL_303:
                  v128 = (unint64_t)v104 > 2;
                  v104 = v117;
                  v10 = (const char **)v13;
                  if (!v128)
                    return;
                }
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &a1[(unint64_t)v14 >> 1];
          if (v13 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(v16, a1, v153, a4, a5, a6, a7, a8);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, v16, v153, a4, a5, a6, a7, a8);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1 + 1, v16 - 1, (uint64_t)(v10 - 2), v17, v18, v19, v20, v21);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1 + 2, &a1[v15 + 1], (uint64_t)(v10 - 3), v22, v23, v24, v25, v26);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(v16 - 1, v16, (uint64_t)&a1[v15 + 1], v27, v28, v29, v30, v31);
            v13 = (unint64_t)*a1;
            *a1 = 0;
            v32 = *v16;
            *v16 = 0;
            v33 = *a1;
            *a1 = v32;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
              else
                --*(_DWORD *)v33;
            }
            v34 = *v16;
            *v16 = (const char *)v13;
            if (v34)
            {
              if (*(_DWORD *)v34 == 1)
                WTF::fastFree((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
              else
                --*(_DWORD *)v34;
            }
          }
          --v9;
          v35 = *a1;
          if ((v8 & 1) != 0)
            goto LABEL_26;
          v36 = (uint64_t)*(a1 - 1);
          if (v36)
          {
            if (!v35)
              goto LABEL_75;
            v13 = (unint64_t)(v35 + 16);
            if (strcmp((const char *)(v36 + 16), v35 + 16) < 0)
              goto LABEL_26;
            *a1 = 0;
            if (*(_QWORD *)v153 && strcmp(v35 + 16, (const char *)(*(_QWORD *)v153 + 16)) < 0)
            {
              for (i = a1 + 1; i != v10; ++i)
              {
                if (*i && strcmp(v35 + 16, *i + 16) < 0)
                  goto LABEL_102;
              }
              goto LABEL_339;
            }
            for (i = a1 + 1; i < v10 && (!*i || (strcmp(v35 + 16, *i + 16) & 0x80000000) == 0); ++i)
              ;
LABEL_102:
            v13 = 0;
LABEL_103:
            v59 = v10;
            if (i < v10)
            {
              if (v10 == a1)
                goto LABEL_339;
              if ((v13 & 1) != 0)
              {
                v59 = v10 - 1;
                while (*v59)
                {
                  v70 = v59-- == a1;
                  if (v70)
                    goto LABEL_339;
                }
              }
              else
              {
                v59 = v10 - 1;
                while (*v59 && strcmp(v35 + 16, *v59 + 16) < 0)
                {
                  v70 = v59-- == a1;
                  if (v70)
                    goto LABEL_339;
                }
              }
            }
            if (i < v59)
            {
              v60 = *i;
              while (1)
              {
                *i = 0;
                v61 = *v59;
                *v59 = 0;
                v62 = *i;
                *i = v61;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 1)
                    WTF::fastFree((unint64_t)v62, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*(_DWORD *)v62;
                }
                v63 = *v59;
                *v59 = v60;
                if (v63)
                {
                  if (*(_DWORD *)v63 == 1)
                    WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*(_DWORD *)v63;
                }
                if (++i == v10)
                  break;
                if ((v13 & 1) != 0)
                {
                  while (1)
                  {
                    v60 = *i;
                    if (*i)
                      break;
                    if (++i == v10)
                      goto LABEL_339;
                  }
                }
                else
                {
                  while (1)
                  {
                    v60 = *i;
                    if (*i)
                    {
                      if (strcmp(v35 + 16, v60 + 16) < 0)
                        break;
                    }
                    if (++i == v10)
                      goto LABEL_339;
                  }
                }
                if (v59 == a1)
                  break;
                --v59;
                if ((v13 & 1) != 0)
                {
                  while (*v59)
                  {
                    v70 = v59-- == a1;
                    if (v70)
                      goto LABEL_339;
                  }
                }
                else
                {
                  while (*v59 && strcmp(v35 + 16, *v59 + 16) < 0)
                  {
                    v70 = v59-- == a1;
                    if (v70)
                      goto LABEL_339;
                  }
                }
                if (i >= v59)
                  goto LABEL_149;
              }
LABEL_339:
              __break(1u);
LABEL_340:
              if (v13)
              {
LABEL_341:
                *a1 = 0;
                v145 = *(v10 - 1);
                *(v10 - 1) = 0;
                v146 = *a1;
                *a1 = v145;
                if (v146)
                {
                  if (*(_DWORD *)v146 == 1)
                    WTF::fastFree((unint64_t)v146, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*(_DWORD *)v146;
                }
                v147 = *(v10 - 1);
                *(v10 - 1) = (const char *)v13;
                if (v147)
                {
                  if (*v147 == 1)
                    WTF::fastFree((unint64_t)v147, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*v147;
                }
              }
              return;
            }
LABEL_149:
            v64 = i - 1;
            if (i - 1 != a1)
            {
              v65 = *v64;
              *v64 = 0;
              v66 = *a1;
              *a1 = v65;
              if (v66)
              {
                if (*(_DWORD *)v66 == 1)
                  WTF::fastFree((unint64_t)v66, a2, a3, a4, a5, a6, a7, a8);
                else
                  --*(_DWORD *)v66;
              }
            }
            v8 = 0;
            v67 = *v64;
            *v64 = v35;
            if (v67)
            {
              if (*(_DWORD *)v67 == 1)
              {
                WTF::fastFree((unint64_t)v67, a2, a3, a4, a5, a6, a7, a8);
                v8 = 0;
              }
              else
              {
                v8 = 0;
                --*(_DWORD *)v67;
              }
            }
            continue;
          }
          if (!v35)
          {
LABEL_75:
            *a1 = 0;
            i = a1 + 1;
            if (*(_QWORD *)v153)
            {
              while (i != v10)
              {
                if (*i)
                  goto LABEL_82;
                ++i;
              }
              goto LABEL_339;
            }
            while (i < v10 && !*i)
              ++i;
LABEL_82:
            v13 = 1;
            goto LABEL_103;
          }
LABEL_26:
          *a1 = 0;
          v13 = (unint64_t)(a1 + 1);
          if (a1 + 1 == v10)
            goto LABEL_339;
          if (v35)
          {
            v37 = 0;
            while (1)
            {
              v38 = a1[v37 + 1];
              if (v38)
              {
                if ((strcmp(v38 + 16, v35 + 16) & 0x80000000) == 0)
                  break;
              }
              if (&a1[++v37 + 1] == v10)
                goto LABEL_339;
            }
            v39 = &a1[v37];
            v13 = (unint64_t)&a1[v37 + 1];
            if (v37 * 8)
            {
              v40 = v10 - 1;
              if (v10 == a1)
                goto LABEL_339;
              while (*v40 && (strcmp(*v40 + 16, v35 + 16) & 0x80000000) == 0)
              {
                v70 = v40-- == a1;
                if (v70)
                  goto LABEL_339;
              }
              goto LABEL_51;
            }
            v41 = v10 - 1;
            if (v13 >= (unint64_t)v10)
            {
              v39 = a1;
              v40 = v10;
              goto LABEL_51;
            }
            do
            {
              v40 = v41;
              v42 = *v41;
              if (!v42)
                break;
              v43 = strcmp(v42 + 16, v35 + 16);
              if (v13 >= (unint64_t)v40)
                break;
              v41 = v40 - 1;
            }
            while ((v43 & 0x80000000) == 0);
          }
          else
          {
            if (v13 >= (unint64_t)v10)
            {
              v44 = 0;
              v39 = a1;
              goto LABEL_87;
            }
            v40 = v10;
            do
              --v40;
            while (v13 < (unint64_t)v40);
          }
          v39 = a1;
LABEL_51:
          v44 = v13 < (unint64_t)v40;
          if (v13 < (unint64_t)v40)
          {
            v45 = *(const char **)v13;
            if (!v35)
            {
              *(_QWORD *)v13 = 0;
              v148 = *v40;
              *v40 = 0;
              v149 = *(const char **)v13;
              *(_QWORD *)v13 = v148;
              if (v149)
              {
                if (*(_DWORD *)v149 == 1)
                  goto LABEL_356;
                --*(_DWORD *)v149;
              }
              while (1)
              {
                v149 = *v40;
                *v40 = v45;
                if (v149)
                {
                  if (*(_DWORD *)v149 == 1)
                    WTF::fastFree((unint64_t)v149, a2, a3, a4, a5, a6, a7, a8);
                  else
                    --*(_DWORD *)v149;
                }
                __break(1u);
LABEL_356:
                WTF::fastFree((unint64_t)v149, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            do
            {
              *(_QWORD *)v13 = 0;
              v46 = *v40;
              *v40 = 0;
              v47 = *(const char **)v13;
              *(_QWORD *)v13 = v46;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                  WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
                else
                  --*(_DWORD *)v47;
              }
              v48 = *v40;
              *v40 = v45;
              if (v48)
              {
                if (*(_DWORD *)v48 == 1)
                  WTF::fastFree((unint64_t)v48, a2, a3, a4, a5, a6, a7, a8);
                else
                  --*(_DWORD *)v48;
              }
              do
              {
                v13 += 8;
                if ((const char **)v13 == v10)
                  goto LABEL_339;
                v45 = *(const char **)v13;
              }
              while (!*(_QWORD *)v13 || strcmp(v45 + 16, v35 + 16) < 0);
              if (v40 == a1)
                goto LABEL_339;
              --v40;
              while (*v40 && (strcmp(*v40 + 16, v35 + 16) & 0x80000000) == 0)
              {
                v70 = v40-- == a1;
                if (v70)
                  goto LABEL_339;
              }
            }
            while (v13 < (unint64_t)v40);
            v39 = (const char **)(v13 - 8);
          }
          if (v39 != a1)
          {
            v49 = *v39;
            *v39 = 0;
            v50 = *a1;
            *a1 = v49;
            if (v50)
            {
              if (*(_DWORD *)v50 == 1)
                WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, a7, a8);
              else
                --*(_DWORD *)v50;
            }
          }
LABEL_87:
          v51 = *v39;
          *v39 = v35;
          if (!v51)
            goto LABEL_90;
          if (*(_DWORD *)v51 == 1)
          {
            WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
            if (!v44)
              goto LABEL_91;
LABEL_93:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *,false>(a1, v39, v9, v8 & 1);
            v8 = 0;
            i = v39 + 1;
            continue;
          }
          --*(_DWORD *)v51;
LABEL_90:
          if (v44)
            goto LABEL_93;
LABEL_91:
          v52 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, v39, a3, a4, a5, a6, a7, a8);
          i = v39 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(v39 + 1, v10, v53, v54, v55, v56, v57, v58))
          {
            if (!v52)
              goto LABEL_93;
            continue;
          }
          v10 = v39;
          if (v52)
            return;
          goto LABEL_2;
        }
        v69 = a1 + 1;
        v70 = a1 == v10 || v69 == v10;
        v71 = v70;
        if ((v8 & 1) == 0)
        {
          if ((v71 & 1) != 0)
            return;
          v13 = 0;
          v129 = -1;
          v130 = 1;
          for (j = a1; ; ++j)
          {
            v132 = v13;
            v13 = v130;
            v133 = *v69;
            v134 = a1[v132];
            if (!*v69)
              break;
            if (v134 && strcmp(v133 + 16, v134 + 16) < 0)
            {
              v135 = 0;
              *v69 = 0;
              v136 = a1[v132];
              v137 = v129;
              for (k = j; ; --k)
              {
                *k = 0;
                k[1] = v136;
                if (!v135)
                  goto LABEL_317;
                if (*(_DWORD *)v135 != 1)
                  break;
                WTF::fastFree((unint64_t)v135, a2, a3, a4, a5, a6, a7, a8);
                if (!v137)
                  goto LABEL_339;
LABEL_318:
                v136 = *(k - 1);
                if (!v136 || (strcmp(v133 + 16, v136 + 16) & 0x80000000) == 0)
                  goto LABEL_333;
                v139 = *k;
                v135 = v139;
                ++v137;
              }
              --*(_DWORD *)v135;
LABEL_317:
              if (!v137)
                goto LABEL_339;
              goto LABEL_318;
            }
LABEL_336:
            v130 = v13 + 1;
            v69 = &a1[v13 + 1];
            --v129;
            if (v69 == v10)
              return;
          }
          if (!v134)
            goto LABEL_336;
          v140 = 0;
          *v69 = 0;
          v141 = a1[v132];
          v142 = v129;
          for (k = j; ; --k)
          {
            *k = 0;
            k[1] = v141;
            if (!v140)
              goto LABEL_328;
            if (*(_DWORD *)v140 != 1)
              break;
            WTF::fastFree((unint64_t)v140, a2, a3, a4, a5, a6, a7, a8);
            if (!v142)
              goto LABEL_339;
LABEL_329:
            v141 = *(k - 1);
            if (!v141)
            {
LABEL_333:
              v144 = *k;
              *k = v133;
              if (v144)
              {
                if (*(_DWORD *)v144 == 1)
                  WTF::fastFree((unint64_t)v144, a2, a3, a4, a5, a6, a7, a8);
                else
                  --*(_DWORD *)v144;
              }
              goto LABEL_336;
            }
            v143 = *k;
            v140 = v143;
            ++v142;
          }
          --*(_DWORD *)v140;
LABEL_328:
          if (!v142)
            goto LABEL_339;
          goto LABEL_329;
        }
        if ((v71 & 1) != 0)
          return;
        v72 = 0;
        v73 = a1;
        do
        {
          v74 = v73;
          v73 = v69;
          v76 = *v74;
          v75 = v74[1];
          if (v75)
          {
            if (!v76 || (strcmp(v75 + 16, v76 + 16) & 0x80000000) == 0)
              goto LABEL_205;
            v77 = 0;
            *v69 = 0;
            for (m = v72; ; m -= 8)
            {
              v79 = (const char **)((char *)a1 + m);
              *v79 = 0;
              v79[1] = v76;
              if (!v77)
                goto LABEL_185;
              if (*v77 != 1)
                break;
              WTF::fastFree((unint64_t)v77, a2, a3, a4, a5, a6, a7, a8);
              if (!m)
                goto LABEL_200;
LABEL_186:
              v76 = *(const char **)((char *)a1 + m - 8);
              if (!v76)
                goto LABEL_202;
              if ((strcmp(v75 + 16, v76 + 16) & 0x80000000) == 0)
              {
                v74 = (const char **)((char *)a1 + m);
                goto LABEL_202;
              }
              --v74;
              v77 = (_DWORD *)*v79;
            }
            --*v77;
LABEL_185:
            if (!m)
              goto LABEL_200;
            goto LABEL_186;
          }
          if (!v76)
            goto LABEL_205;
          v80 = 0;
          *v69 = 0;
          for (n = v72; ; n -= 8)
          {
            v82 = (const char **)((char *)a1 + n);
            *v82 = 0;
            v82[1] = v76;
            if (!v80)
              goto LABEL_196;
            if (*v80 == 1)
              break;
            --*v80;
LABEL_196:
            if (!n)
              goto LABEL_200;
LABEL_197:
            v74 = (const char **)((char *)a1 + n);
            v76 = *(const char **)((char *)a1 + n - 8);
            if (!v76)
              goto LABEL_202;
            v80 = (_DWORD *)*v82;
          }
          WTF::fastFree((unint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
          if (n)
            goto LABEL_197;
LABEL_200:
          v74 = a1;
LABEL_202:
          v83 = *v74;
          *v74 = v75;
          if (v83)
          {
            if (*(_DWORD *)v83 == 1)
              WTF::fastFree((unint64_t)v83, a2, a3, a4, a5, a6, a7, a8);
            else
              --*(_DWORD *)v83;
          }
LABEL_205:
          v69 = v73 + 1;
          v72 += 8;
        }
        while (v73 + 1 != v10);
        return;
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  v11 = *a2;
  v12 = *a1;
  if (*a2)
  {
    if (v12)
      v13 = strcmp(v11 + 16, v12 + 16) >> 31;
    else
      LOBYTE(v13) = 0;
    if (*(_QWORD *)a3)
    {
      v14 = strcmp((const char *)(*(_QWORD *)a3 + 16), v11 + 16) >> 31;
      if ((v13 & 1) != 0)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else
  {
    LOBYTE(v13) = v12 != 0;
    if (*(_QWORD *)a3)
    {
      if (!v12)
        return;
      *a1 = 0;
      goto LABEL_25;
    }
  }
  v14 = v11 != 0;
  if ((v13 & 1) != 0)
  {
LABEL_10:
    *a1 = 0;
    if (v14)
    {
      v15 = *(const char **)a3;
      *(_QWORD *)a3 = 0;
      v16 = *a1;
      *a1 = v15;
      if (!v16)
        goto LABEL_39;
      goto LABEL_37;
    }
LABEL_25:
    v21 = *a2;
    *a2 = 0;
    v22 = *a1;
    *a1 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v22;
    }
    v23 = *a2;
    *a2 = v12;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
        v12 = *a2;
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    if (*(_QWORD *)a3)
    {
      if (!v12 || (strcmp((const char *)(*(_QWORD *)a3 + 16), v12 + 16) & 0x80000000) == 0)
        return;
    }
    else if (!v12)
    {
      return;
    }
    *a2 = 0;
    v24 = *(const char **)a3;
    *(_QWORD *)a3 = 0;
    v16 = *a2;
    *a2 = v24;
    if (!v16)
      goto LABEL_39;
LABEL_37:
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v16;
LABEL_39:
    v25 = *(const char **)a3;
    *(_QWORD *)a3 = v12;
    if (!v25)
      return;
    goto LABEL_40;
  }
LABEL_14:
  if (!v14)
    return;
  *a2 = 0;
  v17 = *(const char **)a3;
  *(_QWORD *)a3 = 0;
  v18 = *a2;
  *a2 = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v18;
  }
  v19 = *(const char **)a3;
  *(_QWORD *)a3 = v11;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v19;
  }
  v20 = *a1;
  if (*a2)
  {
    if (!v20 || (strcmp(*a2 + 16, v20 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v20)
  {
    return;
  }
  *a1 = 0;
  v26 = *a2;
  *a2 = 0;
  v27 = *a1;
  *a1 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v27;
  }
  v25 = *a2;
  *a2 = v20;
  if (v25)
  {
LABEL_40:
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v25;
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char **v8;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  const char *v13;
  const char **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char **v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  _DWORD *v27;
  uint64_t i;
  char *v29;
  _DWORD *v30;
  uint64_t j;
  char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  _DWORD *v36;
  const char **v37;

  v8 = a2;
  v10 = a2 - a1;
  result = 1;
  switch(v10)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v12 = (uint64_t)*(a2 - 1);
      v13 = *a1;
      if (v12)
      {
        if (v13)
        {
          if ((strcmp((const char *)(v12 + 16), v13 + 16) & 0x80000000) == 0)
            return 1;
          goto LABEL_45;
        }
      }
      else if (v13)
      {
LABEL_45:
        *a1 = 0;
        v34 = *(v8 - 1);
        *(v8 - 1) = 0;
        v35 = *a1;
        *a1 = v34;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
            WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v35;
        }
        v36 = *(v8 - 1);
        *(v8 - 1) = v13;
        if (v36)
        {
          if (*v36 == 1)
            WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
          else
            --*v36;
        }
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a2 - 1), a4, a5, a6, a7, a8);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1), a5, a6, a7, a8);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3), (uint64_t)(a2 - 1), a6, a7, a8);
      return 1;
    default:
      v14 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a1 + 1, (uint64_t)(a1 + 2), a4, a5, a6, a7, a8);
      v22 = a1 + 3;
      if (a1 + 3 == v8)
        return 1;
      v23 = 0;
      v24 = 0;
      v37 = v8;
      while (2)
      {
        v25 = *v22;
        v26 = *v14;
        if (*v22)
        {
          if (!v26 || (strcmp(v25 + 16, v26 + 16) & 0x80000000) == 0)
            goto LABEL_38;
          v27 = 0;
          *v22 = 0;
          for (i = v23; ; i -= 8)
          {
            v29 = (char *)a1 + i;
            *((_QWORD *)v29 + 2) = 0;
            *((_QWORD *)v29 + 3) = v26;
            if (v27)
            {
              if (*v27 == 1)
                WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
              else
                --*v27;
            }
            if (i == -16)
            {
              v14 = a1;
              goto LABEL_33;
            }
            v26 = *(const char **)((char *)a1 + i + 8);
            if (!v26)
              break;
            if ((strcmp(v25 + 16, v26 + 16) & 0x80000000) == 0)
              goto LABEL_33;
            --v14;
            v27 = (_DWORD *)*((_QWORD *)v29 + 2);
          }
          v14 = (const char **)((char *)a1 + i + 16);
LABEL_33:
          v8 = v37;
        }
        else
        {
          if (!v26)
            goto LABEL_38;
          v30 = 0;
          *v22 = 0;
          for (j = v23; ; j -= 8)
          {
            v32 = (char *)a1 + j;
            *((_QWORD *)v32 + 2) = 0;
            *((_QWORD *)v32 + 3) = v26;
            if (v30)
            {
              if (*v30 == 1)
                WTF::fastFree((unint64_t)v30, v15, v16, v17, v18, v19, v20, v21);
              else
                --*v30;
            }
            if (j == -16)
            {
              v14 = a1;
              goto LABEL_34;
            }
            v26 = *(const char **)((char *)a1 + j + 8);
            if (!v26)
              break;
            v30 = (_DWORD *)*((_QWORD *)v32 + 2);
          }
          v14 = (const char **)((char *)a1 + j + 16);
        }
LABEL_34:
        v33 = *v14;
        *v14 = v25;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree((unint64_t)v33, v15, v16, v17, v18, v19, v20, v21);
          else
            --*(_DWORD *)v33;
        }
        if (++v24 != 8)
        {
LABEL_38:
          v14 = v22;
          v23 += 8;
          if (++v22 == v8)
            return 1;
          continue;
        }
        return v22 + 1 == v8;
      }
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  _DWORD *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(const char **)a3;
  if (*(_QWORD *)a4)
  {
    if (!v19 || (strcmp((const char *)(*(_QWORD *)a4 + 16), v19 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v19)
  {
    return;
  }
  *(_QWORD *)a3 = 0;
  v20 = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  v21 = *(const char **)a3;
  *(_QWORD *)a3 = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::fastFree((unint64_t)v21, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v21;
  }
  v22 = *(_DWORD **)a4;
  *(_QWORD *)a4 = v19;
  if (v22)
  {
    if (*v22 == 1)
      WTF::fastFree((unint64_t)v22, v12, v13, v14, v15, v16, v17, v18);
    else
      --*v22;
  }
  v23 = *a2;
  if (*(_QWORD *)a3)
  {
    if (!v23 || (strcmp((const char *)(*(_QWORD *)a3 + 16), v23 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v23)
  {
    return;
  }
  *a2 = 0;
  v24 = *(const char **)a3;
  *(_QWORD *)a3 = 0;
  v25 = *a2;
  *a2 = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree((unint64_t)v25, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v25;
  }
  v26 = *(const char **)a3;
  *(_QWORD *)a3 = v23;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v26;
  }
  v27 = *a1;
  if (*a2)
  {
    if (!v27 || (strcmp(*a2 + 16, v27 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v27)
  {
    return;
  }
  *a1 = 0;
  v28 = *a2;
  *a2 = 0;
  v29 = *a1;
  *a1 = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree((unint64_t)v29, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v29;
  }
  v30 = *a2;
  *a2 = v27;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v30;
  }
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  _DWORD *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::CString *>(a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = *(const char **)a4;
  if (*(_QWORD *)a5)
  {
    if (!v20 || (strcmp((const char *)(*(_QWORD *)a5 + 16), v20 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v20)
  {
    return;
  }
  *(_QWORD *)a4 = 0;
  v21 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v22 = *(const char **)a4;
  *(_QWORD *)a4 = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree((unint64_t)v22, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v22;
  }
  v23 = *(_DWORD **)a5;
  *(_QWORD *)a5 = v20;
  if (v23)
  {
    if (*v23 == 1)
      WTF::fastFree((unint64_t)v23, v13, v14, v15, v16, v17, v18, v19);
    else
      --*v23;
  }
  v24 = *(const char **)a3;
  if (*(_QWORD *)a4)
  {
    if (!v24 || (strcmp((const char *)(*(_QWORD *)a4 + 16), v24 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v24)
  {
    return;
  }
  *(_QWORD *)a3 = 0;
  v25 = *(const char **)a4;
  *(_QWORD *)a4 = 0;
  v26 = *(const char **)a3;
  *(_QWORD *)a3 = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v26;
  }
  v27 = *(const char **)a4;
  *(_QWORD *)a4 = v24;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::fastFree((unint64_t)v27, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v27;
  }
  v28 = *a2;
  if (*(_QWORD *)a3)
  {
    if (!v28 || (strcmp((const char *)(*(_QWORD *)a3 + 16), v28 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v28)
  {
    return;
  }
  *a2 = 0;
  v29 = *(const char **)a3;
  *(_QWORD *)a3 = 0;
  v30 = *a2;
  *a2 = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree((unint64_t)v30, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v30;
  }
  v31 = *(const char **)a3;
  *(_QWORD *)a3 = v28;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::fastFree((unint64_t)v31, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v31;
  }
  v32 = *a1;
  if (*a2)
  {
    if (!v32 || (strcmp(*a2 + 16, v32 + 16) & 0x80000000) == 0)
      return;
  }
  else if (!v32)
  {
    return;
  }
  *a1 = 0;
  v33 = *a2;
  *a2 = 0;
  v34 = *a1;
  *a1 = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::fastFree((unint64_t)v34, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v34;
  }
  v35 = *a2;
  *a2 = v32;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::fastFree((unint64_t)v35, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v35;
  }
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,WTF::String,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(_BYTE *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, size_t a5, char a6, uint64_t a7, int8x16_t *a8, uint64_t a9, int8x16_t *a10, unint64_t a11)
{
  int **v16;
  size_t v17;
  size_t v18;
  int v19;
  int *v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int8x16_t *v27;
  char *v28;
  char *v29;
  int v30;
  _BYTE *v31;
  unsigned int i;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  size_t v36;
  uint64_t v37;
  _BYTE *v38;
  size_t v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  char *v49;
  char *v50;
  __int128 v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int16 v58;
  char *v59;
  int8x16_t *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  char *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int16 v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int16 v83;
  char *v84;
  char *v85;
  __int128 v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  char *v90;
  char *v91;
  char *v92;
  __int16 v93;
  unsigned __int128 *v94;
  unsigned __int128 *v95;
  unsigned __int128 *v96;
  unsigned __int128 v97;
  char v98;
  int **v99;
  size_t __n;
  _DWORD *v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;

  v16 = (int **)result;
  if (a3)
  {
    v17 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19892CBA8);
    }
  }
  else
  {
    v17 = 0;
  }
  if (a5 >> 31)
    goto LABEL_102;
  if (!a9)
  {
    v18 = 0;
    goto LABEL_6;
  }
  v18 = a9 - 1;
  if ((unint64_t)(a9 - 1) >> 31)
  {
LABEL_102:
    __break(0xC471u);
    JUMPOUT(0x19892CAE4);
  }
LABEL_6:
  if (a11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19892CB04);
  }
  if (a7)
    v19 = *(_DWORD *)(a7 + 4);
  else
    v19 = 0;
  v20 = 0;
  __n = v18;
  v21 = __OFADD__((_DWORD)v18, (_DWORD)a11);
  v22 = v18 + a11;
  if (!v21 && (v19 & 0x80000000) == 0)
  {
    v21 = __OFADD__(v19, v22);
    v23 = v19 + v22;
    if (v21)
      goto LABEL_84;
    v21 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v21)
      goto LABEL_84;
    v21 = __OFADD__((_DWORD)a5, v24);
    v25 = a5 + v24;
    if (v21)
      goto LABEL_84;
    v26 = (v17 + v25);
    if (__OFADD__((_DWORD)v17, v25))
      goto LABEL_84;
    v27 = a10;
    if (a7 && (*(_BYTE *)(a7 + 16) & 4) == 0)
    {
      if ((_DWORD)v26)
      {
        if (v26 <= 0x7FFFFFEF)
        {
          result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20), &v102);
          v20 = v102;
          if (v102)
          {
            v28 = (char *)(v102 + 5);
            *v102 = 2;
            v20[1] = v26;
            *((_QWORD *)v20 + 1) = v20 + 5;
            v20[4] = 0;
            v29 = (char *)v20 + 2 * v17 + 20;
            if ((v17 & 0x7FFFFFC0) != 0)
            {
              v40 = &v28[2 * (v17 & 0x7FFFFFC0)];
              v41 = 0uLL;
              v30 = a11;
              do
              {
                v103.val[0] = *a2;
                v42 = a2[1];
                v108.val[0] = a2[2];
                v43 = a2[3];
                a2 += 4;
                v44 = v43;
                v108.val[1] = 0uLL;
                v113.val[0] = v42;
                v103.val[1] = 0uLL;
                v45 = v28;
                vst2q_s8(v45, v103);
                v45 += 32;
                v113.val[1] = 0uLL;
                vst2q_s8(v45, v113);
                v46 = v28 + 64;
                vst2q_s8(v46, v108);
                v47 = v28 + 96;
                vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
                v28 += 128;
              }
              while (v28 != v40);
              v28 = v40;
            }
            else
            {
              v30 = a11;
            }
            while (v28 != v29)
            {
              v48 = a2->u8[0];
              a2 = (int8x16_t *)((char *)a2 + 1);
              *(_WORD *)v28 = v48;
              v28 += 2;
            }
            v49 = &v29[2 * a5];
            if ((a5 & 0xFFFFFFC0) != 0)
            {
              v50 = &v29[2 * (a5 & 0xFFFFFFC0)];
              v51 = 0uLL;
              do
              {
                v104.val[0] = *a4;
                v52 = a4[1];
                v109.val[0] = a4[2];
                v53 = a4[3];
                a4 += 4;
                v54 = v53;
                v109.val[1] = 0uLL;
                v114.val[0] = v52;
                v104.val[1] = 0uLL;
                v55 = v29;
                vst2q_s8(v55, v104);
                v55 += 32;
                v114.val[1] = 0uLL;
                vst2q_s8(v55, v114);
                v56 = v29 + 64;
                vst2q_s8(v56, v109);
                v57 = v29 + 96;
                vst2q_s8(v57, *(int8x16x2_t *)(&v51 - 1));
                v29 += 128;
              }
              while (v29 != v50);
              v29 = v50;
            }
            while (v29 != v49)
            {
              v58 = a4->u8[0];
              a4 = (int8x16_t *)((char *)a4 + 1);
              *(_WORD *)v29 = v58;
              v29 += 2;
            }
            *(_WORD *)v49 = a6;
            v59 = v49 + 2;
            v60 = *(int8x16_t **)(a7 + 8);
            v61 = *(unsigned int *)(a7 + 4);
            if ((*(_BYTE *)(a7 + 16) & 4) != 0)
            {
              v62 = &v59[2 * v61];
              if (v61 >= 0x40)
              {
                v63 = &v59[2 * (v61 & 0xFFFFFFC0)];
                v64 = 0uLL;
                v65 = v59;
                do
                {
                  v105.val[0] = *v60;
                  v66 = v60[1];
                  v110.val[0] = v60[2];
                  v67 = v60[3];
                  v60 += 4;
                  v68 = v67;
                  v110.val[1] = 0uLL;
                  v115.val[0] = v66;
                  v105.val[1] = 0uLL;
                  v69 = v65;
                  vst2q_s8(v69, v105);
                  v69 += 32;
                  v115.val[1] = 0uLL;
                  vst2q_s8(v69, v115);
                  v70 = v65 + 64;
                  vst2q_s8(v70, v110);
                  v71 = v65 + 96;
                  vst2q_s8(v71, *(int8x16x2_t *)(&v64 - 1));
                  v65 += 128;
                }
                while (v65 != v63);
              }
              else
              {
                v63 = v59;
              }
              while (v63 != v62)
              {
                v72 = v60->u8[0];
                v60 = (int8x16_t *)((char *)v60 + 1);
                *(_WORD *)v63 = v72;
                v63 += 2;
              }
            }
            else if ((_DWORD)v61 == 1)
            {
              *(_WORD *)v59 = v60->i16[0];
            }
            else if ((_DWORD)v61)
            {
              result = memcpy(v59, v60, 2 * v61);
            }
            v73 = &v59[2 * *(unsigned int *)(a7 + 4)];
            v74 = &v73[2 * __n];
            if ((__n & 0x7FFFFFC0) != 0)
            {
              v75 = &v73[2 * (__n & 0x7FFFFFC0)];
              v76 = 0uLL;
              do
              {
                v106.val[0] = *a8;
                v77 = a8[1];
                v111.val[0] = a8[2];
                v78 = a8[3];
                a8 += 4;
                v79 = v78;
                v111.val[1] = 0uLL;
                v116.val[0] = v77;
                v106.val[1] = 0uLL;
                v80 = v73;
                vst2q_s8(v80, v106);
                v80 += 32;
                v116.val[1] = 0uLL;
                vst2q_s8(v80, v116);
                v81 = v73 + 64;
                vst2q_s8(v81, v111);
                v82 = v73 + 96;
                vst2q_s8(v82, *(int8x16x2_t *)(&v76 - 1));
                v73 += 128;
              }
              while (v73 != v75);
              v73 = v75;
            }
            while (v73 != v74)
            {
              v83 = a8->u8[0];
              a8 = (int8x16_t *)((char *)a8 + 1);
              *(_WORD *)v73 = v83;
              v73 += 2;
            }
            v84 = &v74[2 * v30];
            if ((v30 & 0xFFFFFFC0) != 0)
            {
              v85 = &v74[2 * (v30 & 0xFFFFFFC0)];
              v86 = 0uLL;
              do
              {
                v107.val[0] = *v27;
                v87 = v27[1];
                v112.val[0] = v27[2];
                v88 = v27[3];
                v27 += 4;
                v89 = v88;
                v112.val[1] = 0uLL;
                v117.val[0] = v87;
                v107.val[1] = 0uLL;
                v90 = v74;
                vst2q_s8(v90, v107);
                v90 += 32;
                v117.val[1] = 0uLL;
                vst2q_s8(v90, v117);
                v91 = v74 + 64;
                vst2q_s8(v91, v112);
                v92 = v74 + 96;
                vst2q_s8(v92, *(int8x16x2_t *)(&v86 - 1));
                v74 += 128;
              }
              while (v74 != v85);
              v74 = v85;
            }
            while (v74 != v84)
            {
              v93 = v27->u8[0];
              v27 = (int8x16_t *)((char *)v27 + 1);
              *(_WORD *)v74 = v93;
              v74 += 2;
            }
          }
          goto LABEL_83;
        }
LABEL_84:
        v20 = 0;
        goto LABEL_83;
      }
LABEL_89:
      v20 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_83;
    }
    if (!(_DWORD)v26)
      goto LABEL_89;
    if ((v26 & 0x80000000) != 0)
      goto LABEL_84;
    v99 = (int **)result;
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v26 + 20), &v102);
    v20 = v102;
    if (!v102)
    {
LABEL_46:
      v16 = v99;
      goto LABEL_83;
    }
    v31 = v102 + 5;
    *v102 = 2;
    v20[1] = v26;
    *((_QWORD *)v20 + 1) = v20 + 5;
    v20[4] = 4;
    if ((_DWORD)v17 == 1)
    {
      *v31 = a2->i8[0];
      i = a11;
    }
    else
    {
      i = a11;
      if ((_DWORD)v17)
        memcpy(v20 + 5, a2, v17);
    }
    v33 = &v31[v17];
    if ((_DWORD)a5 == 1)
    {
      *v33 = a4->i8[0];
    }
    else if ((_DWORD)a5)
    {
      memcpy(v33, a4, a5);
    }
    v33[a5] = a6;
    v34 = &v33[a5 + 1];
    if (a7)
    {
      v35 = *(_BYTE **)(a7 + 8);
      v36 = *(unsigned int *)(a7 + 4);
      if ((*(_BYTE *)(a7 + 16) & 4) != 0)
      {
        if ((_DWORD)v36 == 1)
        {
          *v34 = *v35;
        }
        else if ((_DWORD)v36)
        {
          memcpy(&v33[a5 + 1], v35, v36);
        }
      }
      else
      {
        v94 = (unsigned __int128 *)&v34[v36];
        if (v36 < 0x10)
        {
          v95 = (unsigned __int128 *)&v33[a5 + 1];
        }
        else
        {
          v95 = (unsigned __int128 *)&v34[v36 & 0xFFFFFFF0];
          v96 = (unsigned __int128 *)&v33[a5 + 1];
          do
          {
            v97 = (unsigned __int128)vld2q_s8(v35);
            v35 += 32;
            *v96++ = v97;
          }
          while (v96 != v95);
        }
        for (i = a11; v95 != v94; v95 = (unsigned __int128 *)((char *)v95 + 1))
        {
          v98 = *v35;
          v35 += 2;
          *(_BYTE *)v95 = v98;
        }
      }
      v37 = *(unsigned int *)(a7 + 4);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v34[v37];
    v39 = __n;
    if ((_DWORD)__n == 1)
    {
      *v38 = a8->i8[0];
    }
    else if ((_DWORD)__n)
    {
      memcpy(&v34[v37], a8, __n);
      v39 = __n;
    }
    result = &v38[v39];
    if (i == 1)
    {
      *result = a10->i8[0];
      goto LABEL_46;
    }
    v16 = v99;
    if (i)
      result = memcpy(result, a10, i);
  }
LABEL_83:
  *v16 = v20;
  return result;
}

_DWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  int v6;
  int *v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  size_t v14;
  _BYTE *v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _DWORD *v21;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  if ((v6 | v5) < 0)
    goto LABEL_24;
  v7 = 0;
  v8 = result[2];
  v9 = __OFADD__(v5, v6);
  v10 = v5 + v6;
  v11 = v9;
  if (v8 < 0 || (v11 & 1) != 0)
    goto LABEL_23;
  v12 = (v8 + v10);
  if (__OFADD__(v8, v10))
    goto LABEL_24;
  if (!(_DWORD)v12)
  {
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_23;
  }
  if ((v12 & 0x80000000) != 0)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_23;
  }
  v13 = *(_BYTE **)result;
  v14 = result[2];
  v15 = *(_BYTE **)a2;
  v16 = *(unsigned int *)(a2 + 8);
  v17 = *(_BYTE **)a3;
  v18 = *(unsigned int *)(a3 + 8);
  result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20), &v21);
  v7 = v21;
  if (v21)
  {
    v19 = v21 + 5;
    *v21 = 2;
    v7[1] = v12;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 4;
    if ((_DWORD)v14 == 1)
    {
      *v19 = *v13;
    }
    else if ((_DWORD)v14)
    {
      memcpy(v7 + 5, v13, v14);
    }
    v20 = &v19[v14];
    if ((_DWORD)v16 == 1)
    {
      *v20 = *v15;
    }
    else if ((_DWORD)v16)
    {
      memcpy(v20, v15, v16);
    }
    result = &v20[v16];
    if ((_DWORD)v18 == 1)
    {
      *(_BYTE *)result = *v17;
    }
    else if ((_DWORD)v18)
    {
      result = memcpy(result, v17, v18);
    }
  }
LABEL_23:
  *a4 = v7;
  return result;
}

unsigned int *JSC::EvalExecutable::destroy(JSC::EvalExecutable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v9 = (_QWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (*v9)
      WTF::fastFree(*v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v10 + 8))(v10, a2);
    else
      --v10[2];
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v11 + 32))(v11, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

void JSC::EvalExecutable::visitChildren(JSC::EvalExecutable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  JSC::EvalExecutable *v27;

  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  v10 = (_QWORD **)*((_QWORD *)this + 13);
  if (v10)
  {
    v27 = this;
    v11 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v12 = *v11;
      if ((v12 & 0x40) != 0)
        break;
      v13 = __ldaxr(v11);
      if (v13 == v12)
      {
        if (!__stxr(v12 | 0x40, v11))
          goto LABEL_9;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_9:
    v14 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v10);
    v22 = v14;
    v23 = (_QWORD *)v15;
    if (*v10)
      v24 = (uint64_t)&(*v10)[2 * *((unsigned int *)*v10 - 1)];
    else
      v24 = 0;
    if ((_QWORD *)v24 != v14)
    {
      do
      {
        v25 = v22[1];
        if (!v25)
          goto LABEL_16;
        if ((v25 & 8) != 0)
        {
          v26 = 0;
          if ((*(_BYTE *)(v25 - 79) & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          v26 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v16, v17, v18, v19, v20, v21);
          if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + v26 + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
            goto LABEL_24;
        }
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_16;
LABEL_24:
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, v26, v17, v18, v19, v20, v21);
LABEL_16:
        while (1)
        {
          v22 += 2;
          if (v22 == v23)
            break;
          if (*v22 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_18;
        }
        v22 = v23;
LABEL_18:
        ;
      }
      while (v22 != (_QWORD *)v24);
    }
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v27, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::EvalExecutable::visitChildren(JSC::EvalExecutable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD v23[2];
  uint64_t v24;
  char v25;

  v23[0] = a2;
  v23[1] = this;
  v25 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v24 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19892D0E8);
  }
  *((_QWORD *)a2 + 11) = v23;
  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3);
  v6 = (_QWORD **)*((_QWORD *)this + 13);
  if (v6)
  {
    v7 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v8 = *v7;
      if ((v8 & 0x40) != 0)
        break;
      v9 = __ldaxr(v7);
      if (v9 == v8)
      {
        if (!__stxr(v8 | 0x40, v7))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_11:
    v10 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v6);
    v17 = v10;
    v19 = v18;
    if (*v6)
      v20 = (uint64_t)&(*v6)[2 * *((unsigned int *)*v6 - 1)];
    else
      v20 = 0;
    if ((_QWORD *)v20 == v10)
    {
LABEL_22:
      while (1)
      {
        v21 = *v7;
        if ((v21 & 0xC0) != 0x40)
          break;
        v22 = __ldxr(v7);
        if (v22 == v21)
        {
          if (!__stxr(v21 & 0xBF, v7))
            goto LABEL_21;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      do
      {
        (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v17[1]);
        while (1)
        {
          v17 += 2;
          if (v17 == v19)
            break;
          if (*v17 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_17;
        }
        v17 = v19;
LABEL_17:
        ;
      }
      while (v17 != (_QWORD *)v20);
      if (this)
        goto LABEL_22;
    }
  }
LABEL_21:
  *(_QWORD *)(v23[0] + 88) = v24;
}

_QWORD *JSC::EvalExecutable::ensureTemplateObjectMap(JSC::EvalExecutable *this, JSC::VM *a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = (_QWORD **)((char *)this + 104);
  v3 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v3)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v5 = 0;
    v19 = v5;
    __dmb(0xAu);
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v2, &v19, v6, v7, v8, v9, v10, v11);
    v3 = *v2;
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v19, v12, v13, v14, v15, v16, v17, v18);
  }
  return v3;
}

void JSC::Exception::destroy(JSC::Exception *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  JSC::Wasm::NameSection *v16;

  v9 = *((_DWORD *)this + 7);
  if (v9)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = v10 + 40 * v9;
    do
    {
      v12 = *(unsigned int **)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v16 = (JSC::Wasm::NameSection *)v12;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v16, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v10 += 40;
    }
    while (v10 != v11);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Exception::visitChildren(JSC::Exception *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 0xFFFE000000000002) == 0 && v12 != 0)
  {
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v14 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v14)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v14, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_14:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_15;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
  }
LABEL_15:
  v15 = *((_DWORD *)this + 7);
  if (v15)
  {
    v16 = (unint64_t *)*((_QWORD *)this + 2);
    v17 = &v16[5 * v15];
    do
    {
      v18 = *v16;
      if (!*v16)
        goto LABEL_24;
      if ((v18 & 8) != 0)
      {
        if ((*(_BYTE *)(v18 - 79) & 1) != 0)
          goto LABEL_23;
      }
      else
      {
        v19 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
        {
LABEL_23:
          if (!*((_QWORD *)a2 + 21))
            goto LABEL_24;
        }
      }
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, a4, a5, a6, a7, a8);
LABEL_24:
      v20 = v16[1];
      if (v20)
      {
        if ((v20 & 8) != 0)
        {
          if ((*(_BYTE *)(v20 - 79) & 1) == 0)
            goto LABEL_38;
        }
        else
        {
          v21 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
          {
LABEL_38:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, a4, a5, a6, a7, a8);
            goto LABEL_30;
          }
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_38;
      }
LABEL_30:
      v16 += 5;
    }
    while (v16 != v17);
  }
}

uint64_t JSC::Exception::visitChildren(JSC::Exception *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[2];
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v13[0] + 88) = v14;
    if ((*((_QWORD *)this + 1) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    v7 = *((_DWORD *)this + 7);
    if (v7)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 2);
      v9 = &v8[5 * v7];
      do
      {
        if (*v8)
          result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        if (v8[1])
          result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        v8 += 5;
      }
      while (v8 != v9);
    }
    *(_QWORD *)(v10[0] + 88) = v11;
  }
  return result;
}

unint64_t JSC::Exception::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int **v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (_QWORD *)(a1 + 38200);
  v9 = *(_QWORD *)(a1 + 38200);
  if (v9 < *(_QWORD *)(a1 + 38208))
    goto LABEL_2;
  v9 = *(_QWORD *)(a1 + 38216);
  if ((v9 & 1) == 0)
  {
    v15 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(a1 + 38224);
    *(_QWORD *)(a1 + 38208) = v9 + HIDWORD(v15);
    *(_QWORD *)(a1 + 38216) = v9 + (int)v15;
LABEL_2:
    *v8 = v9 + 48;
    goto LABEL_3;
  }
  v16 = a1 + 38176;
  v17 = a1 + 192;
  v21 = a1;
  v18 = a3;
  v19 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v17, 48, 0, 0);
  a2 = v19;
  a3 = v18;
  v9 = SlowCase;
  a1 = v21;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = v8[446];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)v9 = v10 >> 4;
  *(_DWORD *)(v9 + 4) = v11;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v22 = 0;
  v23 = 0;
  if (!(_DWORD)a3)
    JSC::Interpreter::getStackTrace(a1 + 90560, v9, (uint64_t)&v22, 0, HIDWORD(qword_1ECF4C614), 0, 0, 0);
  v12 = *(_DWORD *)(v9 + 28);
  v13 = *(unsigned int ***)(v9 + 16);
  if (v12)
  {
    WTF::VectorTypeOperations<JSC::StackFrame>::destruct(v13, &v13[5 * v12], a3, a4, a5, a6, a7, a8);
    v13 = *(unsigned int ***)(v9 + 16);
  }
  if (v13)
  {
    *(_QWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(v9 + 16) = v22;
  *(_QWORD *)(v9 + 24) = v23;
  return v9;
}

uint64_t JSC::Exception::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 0x2000000;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::Exception::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::numberOfExceptionFuzzChecks(JSC *this)
{
  return JSC::s_numberOfExceptionFuzzChecks;
}

void JSC::doExceptionFuzzing(unint64_t a1, JSC::VM **a2, const char *a3, const void *a4)
{
  JSC::VM *v4;
  int v5;
  uint64_t v8;
  JSC::Heap **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Exception *v17;
  JSC::VM *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *);
  _QWORD *v36;
  WTF::StringImpl *v37;
  _QWORD v38[3];

  v4 = *a2;
  v5 = *((_DWORD *)*a2 + 229);
  *((_DWORD *)*a2 + 229) = v5 + 1;
  if (dword_1ECF4C624 == ++JSC::s_numberOfExceptionFuzzChecks)
  {
    printf("JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.\n", (const void *)a1, a3, a4);
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v8 = 0xE00000002;
    *(_QWORD *)(v8 + 8) = "Exception Fuzz";
    *(_DWORD *)(v8 + 16) = 4;
    v37 = (WTF::StringImpl *)v8;
    v9 = *(JSC::Heap ***)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 1504);
    if ((v10 & 1) != 0)
    {
      v35 = *(uint64_t (**)(_QWORD *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v36 = (_QWORD *)(a1 - 16);
      else
        v36 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v38[0] = *v36;
      v38[1] = a1;
      v38[2] = a1 + 1504;
      v10 = v35(v38);
    }
    v11 = JSC::ErrorInstance::create(v9, v10, &v37, 0, 0, 0, 0, 1);
    v17 = (JSC::Exception *)v11;
    v18 = *a2;
    if ((v11 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
    {
      v17 = (JSC::Exception *)JSC::Exception::create((uint64_t)v18, (JSC::VM *)v11, 0, v12, v13, v14, v15, v16);
    }
    JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, v17);
    v26 = v37;
    v37 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    v5 = *((_DWORD *)v4 + 229) - 1;
  }
  *((_DWORD *)v4 + 229) = v5;
}

unint64_t JSC::createStackOverflowError(unint64_t this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unint64_t v4;
  JSC::Heap **v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *);
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD v27[3];

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2100000002;
  *(_QWORD *)(v3 + 8) = "Maximum call stack size exceeded.";
  *(_DWORD *)(v3 + 16) = 4;
  v26 = (WTF::StringImpl *)v3;
  v4 = *(_QWORD *)(this + 128);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v24 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v25 = (_QWORD *)(this - 16);
    v27[0] = *v25;
    v27[1] = this;
    v27[2] = this + 128;
    v4 = v24(v27);
  }
  v13 = JSC::ErrorInstance::create(v5, v4, &v26, 0, 0, 0, 2, 1);
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  *(_BYTE *)(v13 + 59) |= 1u;
  return v13;
}

uint64_t JSC::createUndefinedVariableError(uint64_t this, JSC::JSGlobalObject *a2, const JSC::Identifier *a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unint64_t v8;
  JSC::Heap **v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t ReferenceError;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(WTF::StringImpl **);
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48[3];

  v3 = this;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_DWORD *)(v4 + 16);
    if ((v5 & 0x20) != 0 && (*(_BYTE *)(v4 + 36) & 4) != 0)
    {
      *(_DWORD *)v4 += 2;
      WTF::makeString<WTF::ASCIILiteral,WTF::AtomString>((uint64_t)v48, v4);
      ReferenceError = JSC::createReferenceError(v3, v48, v35);
      v36 = v48[0];
      v48[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, v10, v11, v12, v13, v14, v15, v16);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
      return ReferenceError;
    }
    v6 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v4 += 2;
    if (v6 < 0 || (this = (v6 + 21), __OFADD__(v6, 21)))
    {
      v47 = 0;
      goto LABEL_27;
    }
    v7 = (v5 >> 2) & 1;
  }
  else
  {
    v7 = 1;
    this = 21;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(this, v7, (int8x16_t *)"Can't find variable: ", 0x15u, v4, (int **)&v47);
  if (v47)
  {
    v8 = *(_QWORD *)(v3 + 144);
    v9 = *(JSC::Heap ***)(v3 + 56);
    if ((v8 & 1) != 0)
    {
      v45 = *(uint64_t (**)(WTF::StringImpl **))(v8 & 0xFFFFFFFFFFFFFFFCLL);
      v46 = (WTF::StringImpl **)(v3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v3 & 8) != 0)
        v46 = (WTF::StringImpl **)(v3 - 16);
      v48[0] = *v46;
      v48[1] = (WTF::StringImpl *)v3;
      v48[2] = (WTF::StringImpl *)(v3 + 144);
      v8 = v45(v48);
    }
    ReferenceError = JSC::ErrorInstance::create(v9, v8, &v47, 0, 0, 0, 3, 1);
    v18 = v47;
    v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (!v4)
      return ReferenceError;
    goto LABEL_13;
  }
LABEL_27:
  __break(0xC471u);
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::AtomString>(uint64_t result, uint64_t a2)
{
  int **v3;
  int v4;
  int v5;

  v3 = (int **)result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0 || (result = (v4 + 43), __OFADD__(v4, 43)))
    {
      *v3 = 0;
      goto LABEL_9;
    }
    v5 = (*(unsigned __int8 *)(a2 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 1;
    result = 43;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(result, v5, (int8x16_t *)"Can't find private variable: PrivateSymbol.", 0x2Bu, a2, v3);
  if (!*v3)
LABEL_9:
    __break(0xC471u);
  return result;
}

void JSC::errorDescriptionForValue(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int *v27;
  int *v28;
  unsigned __int8 *v29;
  int *v30;
  int v31;
  char v32;
  char v33;

  v29 = (unsigned __int8 *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
LABEL_5:
    v14 = JSC::JSValue::toStringSlowCase(&v29, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v22 = (int *)*((_QWORD *)v14 + 1);
    if ((v22 & 1) != 0)
      v22 = *JSC::JSRopeString::resolveRope((unint64_t)v14, a1, v15, v16, v21, v17, v18, v19, v20);
    if (v22)
      *v22 += 2;
    *a9 = v22;
    return;
  }
  v13 = *(unsigned __int8 *)(a2 + 5);
  if (v13 == 2)
  {
    v24 = *(int **)(a2 + 8);
    if ((v24 & 1) != 0)
      v24 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a10, a5, a6, a7, a8);
    if (v24)
    {
      v33 = 34;
      v30 = v24;
      v32 = 34;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v33, (uint64_t *)&v30, &v32, a9);
    }
    else
    {
      *a9 = 0;
    }
  }
  else
  {
    if (v13 == 4)
    {
      JSC::Symbol::tryGetDescriptiveString((JSC::Symbol *)a2, (uint64_t)&v30);
      if (v31)
      {
        v25 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v25 = 0x600000002;
        *(_QWORD *)(v25 + 8) = "Symbol";
        *(_DWORD *)(v25 + 16) = 4;
        *a9 = (int *)v25;
        v26 = v31;
        if (v31 == -1)
          return;
      }
      else
      {
        v27 = v30;
        if (v30)
          *v30 += 2;
        v26 = 0;
        *a9 = v27;
      }
      ((void (*)(char *, int **))off_1E3599DC0[v26])(&v33, &v30);
      return;
    }
    if (v13 < 0x17)
      goto LABEL_5;
    v23 = *((_QWORD *)a1 + 7);
    if ((v13 & 0xFE) == 0x1A
      || (*(_BYTE *)(a2 + 6) & 4) != 0
      && ((*(void (**)(int **__return_ptr, unint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x38))(&v30, a2), (_BYTE)v30))
    {
      v28 = *(int **)(*(_QWORD *)(v23 + 42000) + 8);
      if ((v28 & 1) != 0)
        v28 = *JSC::JSRopeString::resolveRope(*(_QWORD *)(v23 + 42000), a1, a3, a4, a10, a5, a6, a7, a8);
      if (v28)
        *v28 += 2;
      *a9 = v28;
    }
    else
    {
      JSC::JSObject::calculatedClassName((JSC::JSObject *)a2, (JSC::JSObject *)a2, a3, a4, a5, a6, a7, a8, a9, a10);
    }
  }
}

_BYTE *JSC::defaultSourceAppender@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *result;

  v8 = *a1;
  if (a4 == 1)
    return JSC::defaultApproximateSourceError(a5, v8, a2, a3);
  if (v8 && (v9 = *(unsigned int *)(v8 + 4), (_DWORD)v9))
  {
    v10 = *(unsigned int *)(v8 + 16);
    v11 = *(char **)(v8 + 8);
    v12 = (v10 >> 2) & 1;
    if (v9 < 0x801)
    {
      v13 = v9 | (v12 << 32);
    }
    else if ((_DWORD)v12)
    {
      v13 = 0x100000800;
    }
    else
    {
      v13 = 2048;
    }
  }
  else
  {
    v13 = 0x100000000;
    v11 = "";
  }
  result = WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(a5, v11, v13, (int8x16_t *)" (evaluating '", 15, a2, a3, (int8x16_t *)"')", 3);
  if (!*(_QWORD *)a5)
    __break(0xC471u);
  return result;
}

_BYTE *JSC::defaultApproximateSourceError(_BYTE *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *result;

  if (a2)
  {
    v6 = *(unsigned int *)(a2 + 4);
    v7 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 2) & 1;
    v8 = v6 | (v7 << 32);
    v9 = (_DWORD)v7 == 0;
    v10 = 2048;
    if (!v9)
      v10 = 0x100000800;
    if (v6 < 0x801)
      v10 = v8;
    if ((_DWORD)v6)
      v11 = *(char **)(a2 + 8);
    else
      v11 = "";
    if ((_DWORD)v6)
      v12 = v10;
    else
      v12 = 0x100000000;
  }
  else
  {
    v12 = 0x100000000;
    v11 = "";
  }
  result = WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(a1, v11, v12, (int8x16_t *)" (near '...", 12, a3, a4, (int8x16_t *)"...')", 6);
  if (!*(_QWORD *)a1)
    __break(0xC471u);
  return result;
}

void JSC::notAFunctionSourceAppender(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];

  v9 = *a1;
  if (a5 == 1)
  {
    v45 = a6;
    v46 = v9;
LABEL_19:
    JSC::defaultApproximateSourceError(v45, v46, a2, a3);
    return;
  }
  if (!v9
    || (v12 = WTF::StringImpl::reverseFind(*a1, (int8x16_t *)"is not a function", 0x11uLL, 0x7FFFFFFFuLL), v12 == -1))
  {
    __break(0xC471u);
    JUMPOUT(0x19892E248);
  }
  v13 = *a1;
  if (*a1 && (v14 = *(unsigned int *)(v13 + 4), (_DWORD)v14))
  {
    v15 = *(int8x16_t **)(v13 + 8);
    v16 = (v12 - 1);
    v17 = (*(_DWORD *)(v13 + 16) >> 2) & 1;
    if (v16 < v14)
      v18 = (v17 << 32) | v16;
    else
      v18 = v14 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v17 & 1) << 32);
  }
  else
  {
    v18 = 0x100000000;
    v15 = (int8x16_t *)"";
  }
  v19 = JSC::functionCallBase((uint64_t)a2, a3);
  if (!v19)
  {
    v46 = *a1;
    v45 = a6;
    goto LABEL_19;
  }
  memset(v48, 0, 21);
  WTF::StringBuilder::append<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(v48, v19, v20, (uint64_t)" is not a function. (In '", 26, (uint64_t)a2, a3, (uint64_t)"', '", 5, v19, v20, (uint64_t)"' is ", 6);
  if (a4 == 256)
  {
    WTF::StringBuilder::append((uint64_t)v48, (int8x16_t *)"a Symbol", 8uLL, v21, v22, v23, v24, v25);
  }
  else
  {
    if (a4 == 128)
      WTF::StringBuilder::append((uint64_t)v48, (int8x16_t *)"an instance of ", 0xFuLL, v21, v22, v23, v24, v25);
    WTF::StringBuilder::append((uint64_t)v48, v15, v18, v21, v22, v23, v24, v25);
  }
  WTF::StringBuilder::append((uint64_t)v48, 0x29u, v26, v27, v28, v29, v30, v31);
  if ((v48[2] & 0x80000000) != 0)
  {
    v47 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v47 = 0x1900000002;
    *(_QWORD *)(v47 + 8) = "object is not a function.";
    *(_DWORD *)(v47 + 16) = 4;
    *a6 = v47;
  }
  else
  {
    WTF::StringBuilder::toString((WTF::StringBuilder *)v48, v32, v33, v34, v35, v36, v37, a6);
  }
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v48, v38, v39, v40, v41, v42, v43, v44);
}

uint64_t JSC::functionCallBase(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  if (a2 < 2)
    return 0;
  v2 = (a2 - 1);
  v3 = a2 & 0xFF00000000;
  v4 = (a2 & 0xFF00000000) != 0 ? *(unsigned __int8 *)(result + v2) : *(unsigned __int16 *)(result + 2 * v2);
  if (v4 != 41)
    return 0;
  v5 = a2 - 2;
  if ((_DWORD)a2 == 2)
    return 0;
  v6 = 0;
  v7 = 1;
  if (!v3)
    goto LABEL_33;
  do
  {
    if (v5 >= a2)
      goto LABEL_32;
    v8 = *(unsigned __int8 *)(result + v5);
    if (v6)
    {
      if (v8 == 42)
      {
        if (v5 - 1 >= a2)
          goto LABEL_32;
        v13 = *(unsigned __int8 *)(result + v5 - 1);
        v14 = v13 == 47;
        v6 = v13 != 47;
        if (v14)
          --v5;
      }
      else
      {
        v6 = 1;
      }
    }
    else
    {
      switch(v8)
      {
        case '(':
          v6 = 0;
          --v7;
          break;
        case ')':
          v6 = 0;
          ++v7;
          break;
        case '/':
          v12 = v5 - 1;
          if (v5 - 1 >= a2)
            goto LABEL_32;
          v6 = *(_BYTE *)(result + v12) == 42;
          if (*(_BYTE *)(result + v12) == 42)
            --v5;
          break;
        default:
          v6 = 0;
          break;
      }
    }
    v9 = v5;
    v10 = v5-- != 0;
    if (!v10)
      v5 = 0;
    v11 = v7 != 0;
  }
  while (v9 >= 2 && v7);
LABEL_50:
  if (v11)
    return 0;
  v7 = v5 - 2;
  if (v5 >= 2)
  {
    if (v3)
    {
      if (v5 < a2)
        return result;
      while (1)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        while (v5 < a2)
        {
          v15 = *(unsigned __int16 *)(result + 2 * v5);
          if (v6)
          {
            if (v15 == 42)
            {
              if (v5 - 1 >= a2)
                goto LABEL_32;
              v18 = *(unsigned __int16 *)(result + 2 * (v5 - 1));
              v14 = v18 == 47;
              v6 = v18 != 47;
              if (v14)
                --v5;
            }
            else
            {
              v6 = 1;
            }
          }
          else
          {
            switch(v15)
            {
              case '(':
                v6 = 0;
                --v7;
                break;
              case ')':
                v6 = 0;
                ++v7;
                break;
              case '/':
                v17 = v5 - 1;
                if (v5 - 1 >= a2)
                  goto LABEL_32;
                v6 = *(unsigned __int16 *)(result + 2 * v17) == 42;
                if (*(_WORD *)(result + 2 * v17) == 42)
                  --v5;
                break;
              default:
                v6 = 0;
                break;
            }
          }
          v16 = v5;
          v10 = v5-- != 0;
          if (!v10)
            v5 = 0;
          v11 = v7 != 0;
          if (v16 < 2 || !v7)
            goto LABEL_50;
        }
      }
    }
    if (v5 >= a2)
      goto LABEL_32;
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  uint64_t v23;
  int v24;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a3;
  if (a5)
  {
    v13 = a5 - 1;
    v23 = a4;
    if ((unint64_t)(a5 - 1) >> 31)
      goto LABEL_13;
  }
  else
  {
    v13 = 0;
    v23 = a4;
  }
  v24 = v13;
  v22[0] = a6;
  v22[1] = a7;
  if (a9)
  {
    v14 = a9 - 1;
    v20 = a8;
    if ((unint64_t)(a9 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19892E5D8);
    }
  }
  else
  {
    v14 = 0;
    v20 = a8;
  }
  v21 = v14;
  v19[0] = a10;
  v19[1] = a11;
  if (a13)
  {
    v15 = a13 - 1;
    v17 = a12;
    if (!((unint64_t)(a13 - 1) >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19892E5A8);
  }
  v15 = 0;
  v17 = a12;
LABEL_7:
  v18 = v15;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, (uint64_t)v25, (uint64_t)&v23, (uint64_t)v22, (uint64_t)&v20, (uint64_t)v19, (uint64_t)&v17, a8);
}

void JSC::constructErrorMessage(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;

  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  JSC::errorDescriptionForValue(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, (int **)&v39, a10);
  if (*((_DWORD *)v12 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)v13, v14, v15, v16, v17, v18, v19))
  {
    goto LABEL_22;
  }
  v20 = v39;
  if (!v39)
  {
    *a9 = 0;
    return;
  }
  v21 = *a3;
  v22 = *((_DWORD *)v39 + 1);
  if (*a3)
  {
    v23 = *(_DWORD *)(v21 + 4);
    if (v23 < 0)
      goto LABEL_22;
  }
  else
  {
    v23 = 0;
  }
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  v26 = v24;
  if ((v22 & 0x80000000) == 0 && (v26 & 1) == 0)
  {
    v27 = (v22 + v25);
    if (!__OFADD__(v22, v25))
    {
      v28 = *((_DWORD *)v39 + 4);
      v29 = (v28 >> 2) & 1;
      if (v21 && (v28 & 4) != 0)
        v29 = (*(unsigned __int8 *)(v21 + 16) >> 2) & 1;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v29, (uint64_t)v39, 32, v21, a9);
      goto LABEL_15;
    }
  }
LABEL_22:
  *a9 = 0;
LABEL_15:
  v30 = v39;
  v39 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v13, (uint64_t)v20, v15, v21, v17, v18, v19);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
}

unint64_t JSC::createError(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t OutOfMemoryError;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  JSC::JSGlobalObject *v36;
  int v37;
  uint64_t (*v38)(_QWORD *);
  _QWORD *v39;
  WTF::StringImpl *v40;
  _QWORD v41[3];

  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  JSC::constructErrorMessage((JSC::JSGlobalObject *)a1, a2, a3, a4, a5, a6, a7, a8, (int **)&v40, a9);
  if (*(_QWORD *)(v12 + 16))
    v13 = 1;
  else
    v13 = v40 == 0;
  if (v13)
  {
    JSC::VM::clearException(v12);
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, v36);
    goto LABEL_9;
  }
  v41[0] = v10;
  if (v10 == 10)
  {
    v10 = 2;
    goto LABEL_7;
  }
  if (v10 == 2)
  {
    v10 = 4;
    goto LABEL_7;
  }
  if (v10)
  {
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)v41))
    {
      v10 = 16;
      goto LABEL_7;
    }
    if (v41[0] >> 49)
    {
      v10 = 32;
      goto LABEL_7;
    }
    if ((v41[0] & 0xFFFE000000000002) != 0)
    {
      if ((v41[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
        goto LABEL_28;
    }
    else
    {
      v35 = *(unsigned __int8 *)(v41[0] + 5);
      if (v35 == 2)
      {
        v10 = 64;
        goto LABEL_7;
      }
      if ((v41[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v35 > 0x16)
        {
          v10 = 128;
          goto LABEL_7;
        }
LABEL_28:
        if (JSC::JSValue::isCallable((JSC::JSValue *)v41))
        {
          v10 = 1;
        }
        else if ((v41[0] & 0xFFFE000000000002) != 0)
        {
          v10 = 0;
        }
        else
        {
          v37 = *(unsigned __int8 *)(v41[0] + 5);
          if (v37 == 4)
            v10 = 256;
          else
            v10 = (v37 == 3) << 9;
        }
        goto LABEL_7;
      }
    }
    v10 = 8;
  }
LABEL_7:
  v14 = *(_QWORD *)(a1 + 176);
  v15 = *(JSC::Heap ***)(a1 + 56);
  if ((v14 & 1) != 0)
  {
    v38 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v39 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v39 = (_QWORD *)(a1 - 16);
    v41[0] = *v39;
    v41[1] = a1;
    v41[2] = a1 + 176;
    v14 = v38(v41);
  }
  OutOfMemoryError = JSC::ErrorInstance::create(v15, v14, &v40, 0, a4, v10, 5, 1);
LABEL_9:
  v24 = OutOfMemoryError;
  v25 = v40;
  v40 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v24;
}

unint64_t JSC::createInvalidFunctionApplyParameterError(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  WTF::StringImpl *v26;
  unint64_t v27;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x4800000002;
  *(_QWORD *)(v4 + 8) = "second argument to Function.prototype.apply must be an Array-like object";
  *(_DWORD *)(v4 + 16) = 4;
  v26 = (WTF::StringImpl *)v4;
  v27 = a2;
  switch(a2)
  {
    case 0xAuLL:
      v5 = 2;
      goto LABEL_3;
    case 2uLL:
      v5 = 4;
      goto LABEL_3;
    case 0uLL:
LABEL_28:
      v5 = 0;
      goto LABEL_3;
  }
  if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v27))
  {
    v5 = 16;
    goto LABEL_3;
  }
  if (v27 >> 49)
  {
    v5 = 32;
    goto LABEL_3;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    if ((v27 & 0xFFFFFFFFFFFFFFFELL) != 6)
      goto LABEL_22;
LABEL_24:
    v5 = 8;
    goto LABEL_3;
  }
  v24 = *(unsigned __int8 *)(v27 + 5);
  if (v24 == 2)
  {
    v5 = 64;
    goto LABEL_3;
  }
  if ((v27 & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_24;
  if (v24 > 0x16)
  {
    v5 = 128;
    goto LABEL_3;
  }
LABEL_22:
  if (JSC::JSValue::isCallable((JSC::JSValue *)&v27))
  {
    v5 = 1;
    goto LABEL_3;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_28;
  v25 = *(unsigned __int8 *)(v27 + 5);
  if (v25 == 4)
    v5 = 256;
  else
    v5 = (v25 == 3) << 9;
LABEL_3:
  v13 = JSC::createTypeError(a1, &v26, (uint64_t)JSC::defaultSourceAppender, v5);
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v13;
}

void JSC::invalidParameterInSourceAppender(WTF::StringImpl **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X8>)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;

  v41 = a2;
  v42 = a3;
  if (a4 != 1)
  {
    v14 = WTF::StringView::reverseFind((uint64_t *)&v41, (uint8x8_t *)"in", 2uLL, 0xFFFFFFFF);
    if (v14 == -1)
    {
      v21 = *a1;
      if (*a1)
        *(_DWORD *)v21 += 2;
      *(_QWORD *)a5 = v21;
      return;
    }
    v15 = v14;
    if (WTF::StringView::find((uint64_t)&v41, (uint8x8_t *)"in", 2uLL, 0) != v14)
    {
      v22 = *a1;
      if (v22)
        *(_DWORD *)v22 += 2;
      WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((uint64_t)a5, (uint64_t)v22, (int8x16_t *)" (evaluating '", 15, v41, v42, (int8x16_t *)"')", 3);
      if (*(_QWORD *)a5)
      {
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, v23, v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        return;
      }
      __break(0xC471u);
      goto LABEL_36;
    }
    v17 = (v15 + 2);
    if (v42 <= v17)
    {
      v18 = 0x100000000;
      v20 = "";
    }
    else if (v15 == -2)
    {
      v20 = v41;
      v18 = v42;
    }
    else
    {
      v18 = (v42 - v17);
      v19 = v42 - (unint64_t)v17;
      if (BYTE4(v42))
      {
        if (v19 >= v18)
        {
          v20 = &v41[v17];
          v18 |= 0x100000000uLL;
          goto LABEL_33;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if (v19 < v18)
        goto LABEL_36;
      v20 = &v41[2 * v17];
    }
LABEL_33:
    v40[0] = v20;
    v40[1] = v18;
    v38 = (char *)WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)v40, v16);
    WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(a5, v38, v39, (int8x16_t *)" is not an Object. (evaluating '", 33, v41, v42, (int8x16_t *)"')", 3);
    if (*(_QWORD *)a5)
      return;
LABEL_37:
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x19892EC0CLL);
  }
  v9 = *a1;
  if (*a1 && (v10 = *((unsigned int *)v9 + 1), (_DWORD)v10))
  {
    v11 = (char *)*((_QWORD *)v9 + 1);
    v12 = ((unint64_t)*((unsigned int *)v9 + 4) >> 2) & 1;
    if (v10 < 0x801)
    {
      v13 = v10 | (v12 << 32);
    }
    else if ((_DWORD)v12)
    {
      v13 = 0x100000800;
    }
    else
    {
      v13 = 2048;
    }
  }
  else
  {
    v13 = 0x100000000;
    v11 = "";
  }
  WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(a5, v11, v13, (int8x16_t *)" (near '...", 12, a2, a3, (int8x16_t *)"...')", 6);
  if (!*(_QWORD *)a5)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
}

uint64_t JSC::createInvalidInstanceofParameterErrorNotFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1200000002;
  *(_QWORD *)(v4 + 8) = " is not a function";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = v4;
  v12 = JSC::createError(a1, a2, &v22, JSC::invalidParameterInstanceofNotFunctionSourceAppender);
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  return v12;
}

void JSC::invalidParameterInstanceofNotFunctionSourceAppender(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1200000002;
  *(_QWORD *)(v10 + 8) = " is not a function";
  *(_DWORD *)(v10 + 16) = 4;
  v26 = (WTF::StringImpl *)v10;
  JSC::invalidParameterInstanceofSourceAppender(a5, &v26, a1, a2, a3, a4);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
}

uint64_t JSC::createInvalidInstanceofParameterErrorHasInstanceValueNotFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x3A00000002;
  *(_QWORD *)(v4 + 8) = "[Symbol.hasInstance] is not a function, undefined, or null";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = v4;
  v12 = JSC::createError(a1, a2, &v22, JSC::invalidParameterInstanceofhasInstanceValueNotFunctionSourceAppender);
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  return v12;
}

void JSC::invalidParameterInstanceofhasInstanceValueNotFunctionSourceAppender(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x3A00000002;
  *(_QWORD *)(v10 + 8) = "[Symbol.hasInstance] is not a function, undefined, or null";
  *(_DWORD *)(v10 + 16) = 4;
  v26 = (WTF::StringImpl *)v10;
  JSC::invalidParameterInstanceofSourceAppender(a5, &v26, a1, a2, a3, a4);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
}

unint64_t JSC::createNotAFunctionError(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  v5.i64[0] = 0x1100000002;
  *(_QWORD *)v4 = 0x1100000002;
  *(_QWORD *)(v4 + 8) = "is not a function";
  *(_DWORD *)(v4 + 16) = 4;
  v27 = v4;
  v17 = JSC::createError(a1, a2, &v27, (uint64_t)JSC::notAFunctionSourceAppender, v6, v7, v8, v9, v5);
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  return v17;
}

unint64_t JSC::createNotAnObjectError(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  v5.i64[0] = 0x1000000002;
  *(_QWORD *)v4 = 0x1000000002;
  *(_QWORD *)(v4 + 8) = "is not an object";
  *(_DWORD *)(v4 + 16) = 4;
  v27 = v4;
  v17 = JSC::createError(a1, a2, &v27, (uint64_t)JSC::defaultSourceAppender, v6, v7, v8, v9, v5);
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  return v17;
}

void JSC::invalidPrototypeSourceAppender(WTF::StringImpl **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X8>)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v32 = a2;
  v33 = a3;
  if (a4 == 1)
  {
    v9 = *a1;
    if (*a1 && (v10 = *((unsigned int *)v9 + 1), (_DWORD)v10))
    {
      v11 = (char *)*((_QWORD *)v9 + 1);
      v12 = ((unint64_t)*((unsigned int *)v9 + 4) >> 2) & 1;
      if (v10 < 0x801)
      {
        v13 = v10 | (v12 << 32);
      }
      else if ((_DWORD)v12)
      {
        v13 = 0x100000800;
      }
      else
      {
        v13 = 2048;
      }
    }
    else
    {
      v13 = 0x100000000;
      v11 = "";
    }
    WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(a5, v11, v13, (int8x16_t *)" (near '...", 12, a2, a3, (int8x16_t *)"...')", 6);
    if (*(_QWORD *)a5)
      return;
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x19892F258);
  }
  v14 = WTF::StringView::reverseFind((uint64_t *)&v32, (uint8x8_t *)"extends", 7uLL, 0xFFFFFFFF);
  if (v14 != -1 && WTF::StringView::find((uint64_t)&v32, (uint8x8_t *)"extends", 7uLL, 0) == v14)
  {
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v15 = 0x4A00000002;
    *(_QWORD *)(v15 + 8) = "The value of the superclass's prototype property is not an object or null.";
    *(_DWORD *)(v15 + 16) = 4;
    *(_QWORD *)a5 = v15;
    return;
  }
  v16 = *a1;
  if (v16)
    *(_DWORD *)v16 += 2;
  WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((uint64_t)a5, (uint64_t)v16, (int8x16_t *)" (evaluating '", 15, v32, v33, (int8x16_t *)"')", 3);
  if (!*(_QWORD *)a5)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
}

unint64_t JSC::createErrorForDuplicateGlobalVariableDeclaration(JSC *a1, uint64_t a2)
{
  _BYTE *v3;
  unint64_t v4;
  const WTF::String *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  if (a2)
  {
    v3 = *(_BYTE **)(a2 + 8);
    v4 = *(unsigned int *)(a2 + 4) | ((unint64_t)((*(_DWORD *)(a2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Can't create duplicate variable: '", 35, v3, v4, 39, (int **)&v24);
  v13 = JSC::createSyntaxError(a1, &v24, v5);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v13;
}

unint64_t JSC::createErrorForInvalidGlobalFunctionDeclaration(JSC *this, WTF::StringImpl **a2, const JSC::Identifier *a3)
{
  WTF::StringImpl *v4;
  unint64_t result;
  const WTF::String *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35[2];
  uint64_t v36[2];

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v33 = v4;
  v36[0] = (uint64_t)"Can't declare global function '";
  v36[1] = 32;
  v35[0] = (uint64_t)"': property must be either configurable or both writable and enumerable";
  v35[1] = 72;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(v36, (uint64_t *)&v33, v35, (int **)&v34);
  if (v34)
  {
    v14 = JSC::createTypeError((unint64_t)this, &v34, v6);
    v15 = v34;
    v34 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v33;
    v33 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    return v14;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::createErrorForInvalidGlobalVarDeclaration(JSC *this, WTF::StringImpl **a2, const JSC::Identifier *a3)
{
  WTF::StringImpl *v4;
  unint64_t result;
  const WTF::String *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35[2];
  uint64_t v36[2];

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v33 = v4;
  v36[0] = (uint64_t)"Can't declare global variable '";
  v36[1] = 32;
  v35[0] = (uint64_t)"': global object must be extensible";
  v35[1] = 36;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(v36, (uint64_t *)&v33, v35, (int **)&v34);
  if (v34)
  {
    v14 = JSC::createTypeError((unint64_t)this, &v34, v6);
    v15 = v34;
    v34 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v33;
    v33 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    return v14;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::createTDZError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  const WTF::String *v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2500000002;
  *(_QWORD *)(v3 + 8) = "Cannot access uninitialized variable.";
  *(_DWORD *)(v3 + 16) = 4;
  v23 = (WTF::StringImpl *)v3;
  v12 = JSC::createReferenceError((unint64_t)this, &v23, v4);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v12;
}

unint64_t JSC::createInvalidPrivateNameError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2300000002;
  *(_QWORD *)(v3 + 8) = "Cannot access invalid private field";
  *(_DWORD *)(v3 + 16) = 4;
  v22 = (WTF::StringImpl *)v3;
  v11 = JSC::createTypeError((uint64_t)this, &v22, (uint64_t)JSC::defaultSourceAppender, 0);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

unint64_t JSC::createRedefinedPrivateNameError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2600000002;
  *(_QWORD *)(v3 + 8) = "Cannot redefine existing private field";
  *(_DWORD *)(v3 + 16) = 4;
  v22 = (WTF::StringImpl *)v3;
  v11 = JSC::createTypeError((uint64_t)this, &v22, (uint64_t)JSC::defaultSourceAppender, 0);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

unint64_t JSC::createPrivateMethodAccessError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2700000002;
  *(_QWORD *)(v3 + 8) = "Cannot access private method or acessor";
  *(_DWORD *)(v3 + 16) = 4;
  v22 = (WTF::StringImpl *)v3;
  v11 = JSC::createTypeError((uint64_t)this, &v22, (uint64_t)JSC::defaultSourceAppender, 0);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

unint64_t JSC::createReinstallPrivateMethodError(JSC *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x3C00000002;
  *(_QWORD *)(v3 + 8) = "Cannot install same private methods on object more than once";
  *(_DWORD *)(v3 + 16) = 4;
  v22 = (WTF::StringImpl *)v3;
  v11 = JSC::createTypeError((uint64_t)this, &v22, (uint64_t)JSC::defaultSourceAppender, 0);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

JSC::Exception *JSC::throwOutOfMemoryError(JSC::JSGlobalObject *a1, JSC::JSGlobalObject *a2)
{
  unint64_t OutOfMemoryError;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::Exception *v11;
  JSC::VM *v12;

  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, a2);
  v11 = (JSC::Exception *)OutOfMemoryError;
  v12 = *(JSC::VM **)a2;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)OutOfMemoryError, 0, v5, v6, v7, v8, v9);
  }
  return JSC::VM::throwException(v12, a1, v11, v10, v5, v6, v7, v8, v9);
}

uint64_t JSC::throwOutOfMemoryError(JSC::JSGlobalObject *a1, JSC::VM **a2, WTF::StringImpl **a3)
{
  unint64_t OutOfMemoryError;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Exception *v11;
  JSC::VM *v12;

  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, a3, (const WTF::String *)a3);
  v11 = (JSC::Exception *)OutOfMemoryError;
  v12 = *a2;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)OutOfMemoryError, 0, v6, v7, v8, v9, v10);
  }
  return JSC::VM::throwException(v12, a1, v11);
}

uint64_t JSC::throwStackOverflowError(unint64_t a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  JSC::Heap **v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD *);
  _QWORD *v44;
  WTF::StringImpl *v45;
  _QWORD v46[3];

  v8 = *(JSC::VM **)(a1 + 56);
  if (!*((_QWORD *)v8 + 11636))
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  v11 = *((_QWORD *)v8 + 11637);
  *((_QWORD *)v8 + 11637) = dword_1ECF4C250;
  JSC::VM::updateStackLimits(v8, a2, a3, a4, a5, a6, a7, a8);
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x2100000002;
  *(_QWORD *)(v12 + 8) = "Maximum call stack size exceeded.";
  *(_DWORD *)(v12 + 16) = 4;
  v45 = (WTF::StringImpl *)v12;
  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(JSC::Heap ***)(a1 + 56);
  if ((v13 & 1) != 0)
  {
    v43 = *(uint64_t (**)(_QWORD *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v44 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v44 = (_QWORD *)(a1 - 16);
    v46[0] = *v44;
    v46[1] = a1;
    v46[2] = a1 + 128;
    v13 = v43(v46);
  }
  v22 = JSC::ErrorInstance::create(v14, v13, &v45, 0, 0, 0, 2, 1);
  v23 = v45;
  v45 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  *(_BYTE *)(v22 + 59) |= 1u;
  v24 = *a2;
  if ((v22 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)))
  {
    v22 = JSC::Exception::create((uint64_t)v24, (JSC::VM *)v22, 0, v17, v18, v19, v20, v21);
  }
  v25 = JSC::VM::throwException(v24, (JSC::JSGlobalObject *)a1, (JSC::Exception *)v22);
  if (!*((_QWORD *)v8 + 11636))
  {
    __break(0xC471u);
LABEL_17:
    JUMPOUT(0x19892FA40);
  }
  v33 = v25;
  *((_QWORD *)v8 + 11637) = v11;
  JSC::VM::updateStackLimits(v8, v26, v27, v28, v29, v30, v31, v32);
  return v33;
}

unsigned int *JSC::ExecutableBase::destroy(JSC::ExecutableBase *this, JSC::JSCell *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v3 + 32))(v3, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

uint64_t JSC::ExecutableBase::dump(JSC::ExecutableBase *this, WTF::PrintStream *a2)
{
  const void *v4;
  const void *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  float v8;
  WTF::PrintStream *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::PrintStream *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::PrintStream *v29;
  float v30;
  char *v31;
  size_t v32;
  int v33;
  int v34;
  char v35;

  switch(*((_BYTE *)this + 5))
  {
    case 8:
      v5 = (const void *)*((_QWORD *)this + 5);
      v4 = (const void *)*((_QWORD *)this + 6);
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      WTF::StringImpl::utf8ForCharacters("NativeExecutable:", 0x11uLL, (uint64_t)&v33, v8);
      WTF::printExpectedCStringHelper(v7, "StringView", &v33);
      if (v34 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      WTF::PrintStream::printf(v6, "%p", v5);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      WTF::StringImpl::utf8ForCharacters("/", 1uLL, (uint64_t)&v33, v10);
      WTF::printExpectedCStringHelper(v9, "StringView", &v33);
      if (v34 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      WTF::PrintStream::printf(v6, "%p", v4);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 9:
      v11 = *((_QWORD *)this + 9);
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = v12;
      if (v11)
        goto LABEL_12;
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      v16 = "ProgramExecutable w/o CodeBlock";
      v17 = 31;
      goto LABEL_27;
    case 0xA:
      v11 = *((_QWORD *)this + 9);
      v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = v18;
      if (v11)
        goto LABEL_12;
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      v16 = "ModuleProgramExecutable w/o CodeBlock";
      v17 = 37;
      goto LABEL_27;
    case 0xB:
      v11 = *((_QWORD *)this + 9);
      v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = v19;
      if (v11)
      {
LABEL_12:
        JSC::CodeBlock::dumpAssumingJITType(v11);
        return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      v16 = "EvalExecutable w/o CodeBlock";
      v17 = 28;
      goto LABEL_27;
    case 0xC:
      v21 = *((_QWORD *)this + 12);
      if (!v21)
      {
        v26 = *((_QWORD *)this + 13);
        if (!v26)
        {
          v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
          v16 = "FunctionExecutable w/o CodeBlock";
          v17 = 32;
LABEL_27:
          WTF::StringImpl::utf8ForCharacters(v16, v17, (uint64_t)&v33, v15);
          WTF::printExpectedCStringHelper(v14, "StringView", &v33);
          if (v34 != -1)
            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        }
LABEL_20:
        v27 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
        v29 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
        if (v21)
        {
          v31 = "/";
          v32 = 1;
        }
        else
        {
          v31 = "";
          v32 = 0;
        }
        WTF::StringImpl::utf8ForCharacters(v31, v32, (uint64_t)&v33, v30);
        WTF::printExpectedCStringHelper(v29, "StringView", &v33);
        if (v34 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        JSC::CodeBlock::dumpAssumingJITType(v26);
        return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
      v22 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v33, v25);
      WTF::printExpectedCStringHelper(v24, "StringView", &v33);
      if (v34 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      JSC::CodeBlock::dumpAssumingJITType(v21);
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v26 = *((_QWORD *)this + 13);
      if (v26)
        goto LABEL_20;
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x198930040);
  }
}

uint64_t JSC::ExecutableBase::hashFor(uint64_t a1, int a2)
{
  unsigned int *v2;
  uint64_t result;
  unsigned int v4;

  if (*(_BYTE *)(a1 + 5) != 8)
  {
    JSC::CodeBlockHash::CodeBlockHash((int *)&v4, (uint64_t *)(a1 + 40), a2);
    return v4;
  }
  if (a2)
  {
    if (a2 != 1)
    {
      result = 100;
      __break(0xC471u);
      return result;
    }
    v2 = (unsigned int *)(a1 + 48);
  }
  else
  {
    v2 = (unsigned int *)(a1 + 40);
  }
  return *v2;
}

uint64_t JSC::FileBasedFuzzerAgent::FileBasedFuzzerAgent(uint64_t result)
{
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = off_1E3599DA0;
  return result;
}

uint64_t JSC::FileBasedFuzzerAgent::getPredictionInternal(uint64_t a1, JSC::CodeBlock *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  const char *v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  const char *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  JSC::CodeBlock *v47;
  WTF::PrintStream *v48;
  WTF::PrintStream *v50;
  WTF *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  StringView v54;
  StringView v55;
  StringView v56;
  StringView v57;
  StringView v58;
  StringView v59;
  StringView v60;
  StringView v61;

  v6 = atomic_load(&JSC::ensureGlobalFuzzerPredictions(void)::initializeFuzzerPredictionsFlag);
  if (v6 != -1)
  {
    v53[0] = &v51;
    v52[0] = v53;
    std::__call_once(&JSC::ensureGlobalFuzzerPredictions(void)::initializeFuzzerPredictionsFlag, v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ensureGlobalFuzzerPredictions(void)::$_0 &&>>);
  }
  v7 = (WTF::StringImpl **)(a3 + 10);
  v8 = JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions;
  if (JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions)
  {
    v9 = *(_DWORD *)(JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions - 8);
    v10 = *((_DWORD *)*v7 + 4);
    if (v10 < 0x100)
      v11 = WTF::StringImpl::hashSlowCase(*v7);
    else
      v11 = v10 >> 8;
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v9;
      v14 = *(WTF **)(v8 + 16 * v13);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v15 = JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions;
          if (!JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions)
            goto LABEL_17;
          v16 = *(unsigned int *)(JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions - 4);
          v17 = JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions + 16 * v16;
          goto LABEL_15;
        }
        if (WTF::equal(v14, *v7, (const WTF::StringImpl *)a3))
          break;
      }
      ++i;
    }
    v17 = v8 + 16 * v13;
    v15 = JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions;
    if (!JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions)
      goto LABEL_16;
    v16 = *(unsigned int *)(JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions - 4);
LABEL_15:
    if (v17 == v15 + 16 * v16)
      goto LABEL_17;
LABEL_16:
    v18 = 0;
    v48 = *(WTF::PrintStream **)(v17 + 8);
  }
  else
  {
LABEL_17:
    v48 = 0;
    v18 = 1;
  }
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 40);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  v22 = a3[4];
  v23 = a3[3];
  v24 = v23 - v22;
  if (v21 <= v24)
  {
    v27 = 0x100000000;
    v25 = "";
  }
  else
  {
    v25 = (const char *)result;
    if ((int)v21 - (int)v24 <= v22 && (v26 = v23 == v22, v22 = v21 - v24, v26))
    {
      v27 = v21;
    }
    else
    {
      v27 = v22;
      v28 = v21 - (unint64_t)v24;
      if ((v21 & 0xFF00000000) != 0)
      {
        if (v28 < v27)
          goto LABEL_60;
        v25 = (const char *)(result + v24);
        v27 |= 0x100000000uLL;
      }
      else
      {
        if (v28 < v27)
          goto LABEL_60;
        v25 = (const char *)(result + 2 * v24);
      }
    }
  }
  v53[0] = v25;
  v53[1] = v27;
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  v24 = a3[3];
  v31 = a3 + 5;
  v47 = a2;
  if (v30 <= v24)
  {
    v34 = 0x100000000;
    v32 = "";
LABEL_36:
    result = a4;
    goto LABEL_39;
  }
  v32 = (const char *)v29;
  v33 = *v31;
  if ((int)v30 - (int)v24 <= *v31)
  {
    v33 = v30 - v24;
    if (!(_DWORD)v24)
    {
      v34 = v30;
      goto LABEL_36;
    }
  }
  v34 = v33;
  v35 = v30 - v24;
  if ((v30 & 0xFF00000000) != 0)
  {
    result = a4;
    if (v35 >= v34)
    {
      v32 += v24;
      v34 |= 0x100000000uLL;
      goto LABEL_39;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    if ((_DWORD)v24)
    {
LABEL_62:
      v50 = v48;
      v51 = (WTF *)result;
      WTF::dataLog<char [6],JSC::OpcodeID,char [5],char [2],char [6],WTF::String,char [5],char [12],char [6],char [5],JSC::SpeculationDump,char [5],char [5],char [13],char [6],char [5],JSC::SpeculationDump,char [5],char [5],char [2]>((unsigned int *)a2, (WTF::PrintStream *)(a3 + 10), &v51, &v50);
      return (uint64_t)v48;
    }
    return (uint64_t)v48;
  }
  result = a4;
  if (v35 < v34)
    goto LABEL_60;
  v32 += 2 * v24;
LABEL_39:
  v52[0] = v32;
  v52[1] = v34;
  a2 = (JSC::CodeBlock *)(a3 + 6);
  v36 = a3[6];
  if (v36 <= 22)
  {
    if (v36 <= 7)
    {
      if (v36 < 2 || v36 == 3)
        goto LABEL_52;
    }
    else
    {
      if ((v36 - 8) < 3)
        goto LABEL_52;
      if ((v36 - 18) < 2)
        goto LABEL_74;
    }
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x198930698);
  }
  if (v36 > 31)
  {
    switch(v36)
    {
      case '*':
      case '/':
        return result;
      case '+':
      case ',':
      case '-':
      case '.':
      case '1':
      case '2':
        goto LABEL_99;
      case '0':
        goto LABEL_74;
      case '3':
        goto LABEL_52;
      default:
        if (v36 == 32)
          goto LABEL_74;
        goto LABEL_99;
    }
  }
  if ((v36 - 23) < 2)
  {
    if (!v18)
      goto LABEL_75;
    v48 = (WTF::PrintStream *)(a3 + 5);
    *(_QWORD *)&v54.m_length = "of ";
    v54.m_characters = (void *)v34;
    v58.m_characters = (void *)0x100000003;
    *(_QWORD *)&v58.m_length = 0;
    if (WTF::findIgnoringASCIICase((uint64_t)v32, v54, v58) != -1)
      return a4;
    v55.m_characters = (void *)v34;
    *(_QWORD *)&v55.m_length = "...";
    v59.m_characters = (void *)0x100000003;
    *(_QWORD *)&v59.m_length = 0;
    if (WTF::findIgnoringASCIICase((uint64_t)v32, v55, v59) != -1)
      return a4;
    *(_QWORD *)&v56.m_length = "yield";
    v56.m_characters = (void *)v34;
    v60.m_characters = (void *)0x100000005;
    *(_QWORD *)&v60.m_length = 0;
    if (WTF::findIgnoringASCIICase((uint64_t)v32, v56, v60) != -1)
      return a4;
    result = a4;
    if ((_DWORD)v34)
    {
      if ((v34 & 0xFF00000000) != 0)
      {
        if (*v32 != 91)
          goto LABEL_81;
        v46 = v32[(v34 - 1)];
      }
      else
      {
        if (*(_WORD *)v32 != 91)
          goto LABEL_81;
        v46 = *(unsigned __int16 *)&v32[2 * (v34 - 1)];
      }
      if (v46 == 93)
        return result;
    }
LABEL_81:
    *(_QWORD *)&v57.m_length = "yield";
    v57.m_characters = (void *)v27;
    v61.m_characters = (void *)0x100000005;
    *(_QWORD *)&v61.m_length = 0;
    if (WTF::findIgnoringASCIICase((uint64_t)v25, v57, v61) == -1)
    {
      if (v25 == "..." || v27 != 3)
      {
        v31 = a3 + 5;
        result = a4;
        if (v25 == "..." && v27 == 3)
          return result;
      }
      else
      {
        v31 = a3 + 5;
        if ((v27 & 0xFF00000000) != 0)
        {
          result = a4;
          if (*v25 == 46 && *(_WORD *)(v25 + 1) == 11822)
            return result;
        }
        else
        {
          result = a4;
          if (*(_WORD *)v25 == 46 && *(_DWORD *)(v25 + 2) == 3014702)
            return result;
        }
      }
      if (!(a3[4] | *v31))
        return result;
      if (BYTE4(qword_1ECF4C664))
        goto LABEL_54;
      goto LABEL_58;
    }
    return a4;
  }
  if (v36 == 26)
  {
LABEL_74:
    if ((v18 & 1) != 0)
      return result;
LABEL_75:
    if (BYTE4(qword_1ECF4C664))
      goto LABEL_62;
    return (uint64_t)v48;
  }
  if (v36 != 31)
    goto LABEL_99;
LABEL_52:
  LODWORD(v24) = BYTE4(qword_1ECF4C664);
  if (!v18)
    goto LABEL_61;
  if (BYTE4(qword_1ECF4C664))
  {
LABEL_54:
    v37 = v31;
    JSC::CodeBlock::inferredName(v47);
    WTF::dataLog<char [6],char [5],unsigned int,char [5],char [5],char [2],char [5],char [6],JSC::OpcodeID,char [5],char [5],char [26],char [6],char [5],WTF::String,char [5],char [5],char [2],char [6],WTF::String,char [5],char [2],char [6],unsigned int,char [5],char [2],char [6],unsigned int,char [5],char [9],unsigned int,char [3],unsigned int,char [3],unsigned int,char [9],char [6],WTF::CString,char [5],char [12],char [6],WTF::StringView,char [5],char [6],char [5],WTF::StringView,char [5],char [5],char [2],char [2]>(a3, a3 + 6, (WTF::PrintStream *)(a3 + 10), (WTF::PrintStream *)(a3 + 8), a3 + 1, a3 + 2, a3 + 3, a3 + 4, v37, &v51, (uint64_t)v53, (uint64_t)v52);
    v45 = v51;
    v51 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
        WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
      else
        --*(_DWORD *)v45;
    }
    result = a4;
  }
LABEL_58:
  LODWORD(v24) = byte_1ECF4C66C;
  if (byte_1ECF4C66C)
  {
    result = 107;
    __break(0xC471u);
    goto LABEL_60;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN3JSC22ErrorTypeWithExtensionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

const char *WTF::StringView::trim<BOOL ()(char16_t)>(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const char *i;
  const char *result;
  uint64_t v9;
  unint64_t v10;

  v3 = *(const char **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 12))
  {
    if ((_DWORD)v4)
    {
      v9 = 0;
      v10 = (v4 - 1);
      for (i = *(const char **)a1; ; i += 2)
      {
        result = (const char *)WTF::deprecatedIsSpaceOrNewline(*(unsigned __int16 *)i, a2);
        if ((result & 1) == 0)
          break;
        if (v4 == ++v9)
          return "";
      }
      if ((_DWORD)v4 != 1)
      {
        while (v10 < v4)
        {
          result = (const char *)WTF::deprecatedIsSpaceOrNewline(*(unsigned __int16 *)&v3[2 * v10], a2);
          if ((_DWORD)result)
          {
            if ((_DWORD)--v10)
              continue;
          }
          goto LABEL_25;
        }
        goto LABEL_30;
      }
LABEL_25:
      if ((_DWORD)v9 || (_DWORD)v10 != *(_DWORD *)(a1 + 8) - 1)
      {
        if (v4 - v9 >= (v10 - v9 + 1))
          return i;
        goto LABEL_30;
      }
      return *(const char **)a1;
    }
    return *(const char **)a1;
  }
  if (!(_DWORD)v4)
    return *(const char **)a1;
  v5 = 0;
  v6 = (v4 - 1);
  i = "";
  while (1)
  {
    result = (const char *)WTF::deprecatedIsSpaceOrNewline(v3[v5], a2);
    if ((result & 1) == 0)
      break;
    if (v4 == ++v5)
      return i;
  }
  if ((_DWORD)v4 != 1)
  {
    while (v6 < v4)
    {
      result = (const char *)WTF::deprecatedIsSpaceOrNewline(v3[v6], a2);
      if ((_DWORD)result)
      {
        if ((_DWORD)--v6)
          continue;
      }
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_17:
  if (!(_DWORD)v5 && (_DWORD)v6 == *(_DWORD *)(a1 + 8) - 1)
    return *(const char **)a1;
  if (v4 - v5 >= (v6 - v5 + 1))
    return &v3[v5];
LABEL_30:
  __break(1u);
  return result;
}

BOOL WTF::deprecatedIsSpaceOrNewline(uint64_t a1, uint64_t a2)
{
  if (a1 > 0xFF)
    return MEMORY[0x19AEBBFB8](a1, a2) == 9;
  if ((_DWORD)a1 == 11)
    return 1;
  return (a1 < 0x21) & (0x100003600uLL >> a1);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(uint64_t result, uint64_t a2, int8x16_t *a3, uint64_t a4, char *a5, uint64_t a6, int8x16_t *a7, uint64_t a8)
{
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int *v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v13 = (_QWORD *)result;
  if (a4)
  {
    v14 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
  }
  if (!a8)
  {
    v15 = 0;
    goto LABEL_5;
  }
  v15 = a8 - 1;
  if ((unint64_t)(a8 - 1) >> 31)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198930A84);
  }
LABEL_5:
  if (a2)
  {
    v16 = *(_DWORD *)(a2 + 4);
    if ((a6 & 0x80000000) != 0)
      goto LABEL_25;
  }
  else
  {
    v16 = 0;
    if ((a6 & 0x80000000) != 0)
      goto LABEL_25;
  }
  v17 = a6 + v15;
  if (__OFADD__((_DWORD)a6, v15))
    goto LABEL_25;
  v18 = 0;
  v19 = __OFADD__(v14, v17);
  v20 = v14 + v17;
  if (v19 || v16 < 0)
    goto LABEL_23;
  v21 = (v16 + v20);
  if (__OFADD__(v16, v20))
  {
LABEL_25:
    v18 = 0;
    goto LABEL_23;
  }
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 16) & 4) != 0 && (a6 & 0xFF00000000) != 0)
    {
LABEL_14:
      if ((_DWORD)v21)
      {
        if ((v21 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20), &v24);
          v18 = v24;
          if (v24)
          {
            v22 = (char *)(v24 + 5);
            *v24 = 2;
            v18[1] = v21;
            *((_QWORD *)v18 + 1) = v18 + 5;
            v18[4] = 4;
            result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v22, a2, a3->i8, v14, a5, a6, a7->i8, v15);
          }
          goto LABEL_23;
        }
        goto LABEL_25;
      }
LABEL_26:
      v18 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_23;
    }
  }
  else if ((a6 & 0xFF00000000) != 0)
  {
    goto LABEL_14;
  }
  if (!(_DWORD)v21)
    goto LABEL_26;
  if (v21 > 0x7FFFFFEF)
    goto LABEL_25;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20), &v24);
  v18 = v24;
  if (v24)
  {
    v23 = (char *)(v24 + 5);
    *v24 = 2;
    v18[1] = v21;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v23, a2, a3, v14, (uint64_t)a5, a6, a7, v15);
  }
LABEL_23:
  *v13 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, char *__src, unsigned int a4, char *a5, uint64_t a6, char *a7, unsigned int a8)
{
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *result;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  char *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  char v28;
  char v29;

  if (a2)
  {
    v16 = *(char **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v17 == 1)
      {
        *__dst = *v16;
      }
      else if ((_DWORD)v17)
      {
        memcpy(__dst, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v25 = __dst;
      }
      else
      {
        v25 = &__dst[v17 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)__dst;
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v26++ = v27;
        }
        while (v26 != (unsigned __int128 *)v25);
      }
      while (v25 != &__dst[v17])
      {
        v29 = *v16;
        v16 += 2;
        *v25++ = v29;
      }
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &__dst[v18];
  if (a4 == 1)
  {
    *v19 = *__src;
  }
  else if (a4)
  {
    memcpy(v19, __src, a4);
  }
  v20 = &v19[a4];
  if ((a6 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a6 == 1)
    {
      *v20 = *a5;
    }
    else if ((_DWORD)a6)
    {
      memcpy(v20, a5, a6);
    }
  }
  else
  {
    if (a6 < 0x10)
    {
      v22 = (unsigned __int128 *)v20;
    }
    else
    {
      v22 = (unsigned __int128 *)&v20[a6 & 0xFFFFFFF0];
      v23 = (unsigned __int128 *)v20;
      do
      {
        v24 = (unsigned __int128)vld2q_s8(a5);
        a5 += 32;
        *v23++ = v24;
      }
      while (v23 != v22);
    }
    while (v22 != (unsigned __int128 *)&v20[a6])
    {
      v28 = *a5;
      a5 += 2;
      *(_BYTE *)v22 = v28;
      v22 = (unsigned __int128 *)((char *)v22 + 1);
    }
  }
  result = &v20[a6];
  if (a8 == 1)
  {
    *result = *a7;
  }
  else if (a8)
  {
    return (char *)memcpy(result, a7, a8);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6, int8x16_t *a7, int a8)
{
  uint64_t v15;
  uint64_t v17;

  v17 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v17, __dst);
  v15 = v17;
  if (v17)
    v15 = *(unsigned int *)(v17 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v15], a3, a4, a5, a6, a7, a8);
}

void JSC::invalidParameterInstanceofSourceAppender(_BYTE *a1, WTF::StringImpl **a2, uint64_t *a3, _BYTE *a4, uint64_t a5, int a6)
{
  unint64_t v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  const char *v32;
  int v33;
  __int128 v34;
  const char *v35;
  int v36;
  const char *v37;
  uint64_t v38;

  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v31 + 1) = a5;
  if (a6 == 1)
  {
    JSC::defaultApproximateSourceError(a1, *a3, a4, a5);
    return;
  }
  v9 = WTF::StringView::reverseFind((uint64_t *)&v31, (uint8x8_t *)"instanceof", 0xAuLL, 0xFFFFFFFF);
  if (v9 != -1)
  {
    v10 = v9;
    if (WTF::StringView::find((uint64_t)&v31, (uint8x8_t *)"instanceof", 0xAuLL, 0) == v9)
    {
      v37 = WTF::StringView::substring((const char *)&v31, v10 + 10, 0xFFFFFFFF);
      v38 = v11;
      v12 = WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)&v37, v11);
      v14 = *a2;
      if (v14)
        *(_DWORD *)v14 += 2;
      v37 = v12;
      v38 = v13;
      v35 = ". (evaluating '";
      v36 = 15;
      v34 = v31;
      v32 = "')";
      v33 = 2;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, (uint64_t)&v37, (uint64_t)v14, (uint64_t)&v35, (uint64_t)&v34, (uint64_t)&v32);
      if (*(_QWORD *)a1)
      {
LABEL_7:
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        return;
      }
    }
    else
    {
      v14 = (WTF::StringImpl *)*a3;
      if (*a3)
        *(_DWORD *)v14 += 2;
      WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((uint64_t)a1, (uint64_t)v14, (int8x16_t *)" (evaluating '", 15, (char *)v31, *((uint64_t *)&v31 + 1), (int8x16_t *)"')", 3);
      if (*(_QWORD *)a1)
        goto LABEL_7;
    }
    __break(0xC471u);
    JUMPOUT(0x198930EB4);
  }
  v22 = (_DWORD *)*a3;
  if (*a3)
    *v22 += 2;
  *(_QWORD *)a1 = v22;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  int v21;
  uint64_t v22;

  v7 = result;
  if (a3)
    v8 = *(_DWORD *)(a3 + 4);
  else
    v8 = 0;
  v9 = *(_DWORD *)(a5 + 8);
  v10 = *(_DWORD *)(a6 + 8);
  if ((v10 | v9) < 0)
    goto LABEL_28;
  v11 = *(_DWORD *)(a4 + 8);
  v12 = __OFADD__(v9, v10);
  v13 = v9 + v10;
  v14 = v12;
  if (v11 < 0 || v14)
    goto LABEL_28;
  v12 = __OFADD__(v11, v13);
  v15 = v11 + v13;
  v16 = v12;
  if (v8 < 0
    || v16
    || ((v17 = *(_DWORD *)(a2 + 8), v12 = __OFADD__(v8, v15), v18 = v8 + v15, !v12) ? (v19 = 0) : (v19 = 1),
        v17 < 0 || (v19 & 1) != 0 || (v12 = __OFADD__(v17, v18), v20 = v17 + v18, v12)))
  {
LABEL_28:
    *result = 0;
    return result;
  }
  if (!*(_BYTE *)(a2 + 12))
    goto LABEL_21;
  if (a3)
  {
    v21 = 0;
    if ((*(_BYTE *)(a3 + 16) & 4) == 0 || !*(_BYTE *)(a5 + 12))
      goto LABEL_22;
    goto LABEL_27;
  }
  if (*(_BYTE *)(a5 + 12))
  {
LABEL_27:
    v21 = 1;
    goto LABEL_22;
  }
LABEL_21:
  v21 = 0;
LABEL_22:
  result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v22, v20, v21, *(char **)a2, *(_QWORD *)(a2 + 8), a3, *(int8x16_t **)a4, *(_QWORD *)(a4 + 8), *(char **)a5, *(_QWORD *)(a5 + 8), *(int8x16_t **)a6, *(_QWORD *)(a6 + 8));
  *v7 = v22;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t result, unsigned int a2, int a3, char *a4, uint64_t a5, uint64_t a6, int8x16_t *a7, unsigned int a8, char *a9, uint64_t a10, int8x16_t *a11, uint64_t a12)
{
  int *v18;
  char *v19;
  char *v25;
  _QWORD *v26;
  _DWORD *v27;

  v26 = (_QWORD *)result;
  if (!a3)
  {
    if (a2)
    {
      if (a2 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v27);
        v18 = v27;
        if (v27)
        {
          v19 = (char *)(v27 + 5);
          *v27 = 2;
          v18[1] = a2;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 0;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v19, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)a9, a10, a11, a12);
        }
        goto LABEL_6;
      }
LABEL_12:
      v18 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_11;
  if ((a2 & 0x80000000) != 0)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v27);
  v18 = v27;
  if (v27)
  {
    v25 = (char *)(v27 + 5);
    *v27 = 2;
    v18[1] = a2;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v25, a4, a5, a6, a7->i8, a8, a9, a10, a11->i8, a12);
  }
LABEL_6:
  *v26 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, uint64_t a3, uint64_t a4, char *__src, unsigned int a6, char *a7, uint64_t a8, char *a9, uint64_t a10)
{
  int v15;
  char *v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  char v21;

  v15 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3 == 1)
    {
      *__dst = *a2;
    }
    else if ((_DWORD)a3)
    {
      memcpy(__dst, a2, a3);
    }
  }
  else
  {
    v18 = __dst;
    if (a3 >= 0x10)
    {
      v18 = &__dst[a3 & 0xFFFFFFF0];
      v19 = (unsigned __int128 *)__dst;
      do
      {
        v20 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *v19++ = v20;
      }
      while (v19 != (unsigned __int128 *)v18);
    }
    while (v18 != &__dst[a3])
    {
      v21 = *a2;
      a2 += 2;
      *v18++ = v21;
    }
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[v15], a4, __src, a6, a7, a8, a9, a10);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, int8x16_t *a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  WTF::StringView::getCharacters<char16_t>(&v17, __dst);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v18], a4, a5, a6, a7, a8, a9, a10);
}

void WTF::VectorTypeOperations<JSC::StackFrame>::destruct(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::NameSection *v8;
  JSC::Wasm::NameSection *v9;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  JSC::Wasm::NameSection *v15[7];

  if (a1 != a2)
  {
    v15[5] = v8;
    v15[6] = v9;
    v11 = a1;
    do
    {
      v12 = v11[3];
      v11[3] = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v15[0] = (JSC::Wasm::NameSection *)v12;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v15, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v11 += 5;
    }
    while (v11 != a2);
  }
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  char v19;
  _DWORD *v20;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v20);
        v11 = v20;
        if (v20)
        {
          v12 = v20 + 5;
          *v20 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4 == 1)
          {
            *v12 = a3->i8[0];
          }
          else if (a4)
          {
            result = (uint64_t)memcpy(v11 + 5, a3, a4);
          }
          if (a5)
          {
            result = (uint64_t)&v12[a4];
            v13 = *(_BYTE **)(a5 + 8);
            v14 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *(_BYTE *)result = *v13;
              }
              else if ((_DWORD)v14)
              {
                result = (uint64_t)memcpy((void *)result, v13, v14);
              }
            }
            else
            {
              v16 = result + v14;
              if (v14 >= 0x10)
              {
                v17 = result + (v14 & 0xFFFFFFF0);
                do
                {
                  v18 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *(_OWORD *)result = v18;
                  result += 16;
                }
                while (result != v17);
                result = v17;
              }
              while (result != v16)
              {
                v19 = *v13;
                v13 += 2;
                *(_BYTE *)result++ = v19;
              }
            }
          }
        }
        goto LABEL_11;
      }
LABEL_21:
      v11 = 0;
      goto LABEL_11;
    }
LABEL_20:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_11;
  }
  if (!(_DWORD)result)
    goto LABEL_20;
  if (result > 0x7FFFFFEF)
    goto LABEL_21;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v20);
  v11 = v20;
  if (v20)
  {
    v15 = (char *)(v20 + 5);
    *v20 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, a3, a4, a5);
  }
LABEL_11:
  *a6 = v11;
  return result;
}

_BYTE *WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(_BYTE *result, _BYTE *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, _BYTE *a6, uint64_t a7, int8x16_t *a8, uint64_t a9)
{
  size_t v14;
  size_t v15;
  int v16;
  int *v17;
  BOOL v18;
  int v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  char *v26;
  int **v28;
  _DWORD *v29;

  v28 = (int **)result;
  if (a5)
  {
    v14 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
      goto LABEL_44;
  }
  else
  {
    v14 = 0;
  }
  if (!a9)
  {
    v15 = 0;
    goto LABEL_5;
  }
  v15 = a9 - 1;
  if ((unint64_t)(a9 - 1) >> 31)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x19893174CLL);
  }
LABEL_5:
  if ((a7 & 0x80000000) != 0)
    goto LABEL_39;
  v16 = a7 + v15;
  if (__OFADD__((_DWORD)a7, (_DWORD)v15))
    goto LABEL_39;
  v17 = 0;
  v18 = __OFADD__((_DWORD)v14, v16);
  v19 = v14 + v16;
  v20 = v18;
  if ((a3 & 0x80000000) != 0 || (v20 & 1) != 0)
    goto LABEL_26;
  v21 = (a3 + v19);
  if (__OFADD__((_DWORD)a3, v19))
    goto LABEL_39;
  if ((a3 & 0xFF00000000) != 0 && (a7 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20), &v29);
        v17 = v29;
        if (v29)
        {
          v22 = v29 + 5;
          *v29 = 2;
          v17[1] = v21;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if ((_DWORD)a3 == 1)
          {
            *v22 = *a2;
          }
          else if ((_DWORD)a3)
          {
            memcpy(v17 + 5, a2, a3);
          }
          v23 = &v22[a3];
          if ((_DWORD)v14 == 1)
          {
            *v23 = a4->i8[0];
          }
          else if ((_DWORD)v14)
          {
            memcpy(v23, a4, v14);
          }
          v24 = &v23[v14];
          if ((_DWORD)a7 == 1)
          {
            *v24 = *a6;
          }
          else if ((_DWORD)a7)
          {
            memcpy(&v23[v14], a6, a7);
          }
          result = &v24[a7];
          if ((_DWORD)v15 == 1)
          {
            *result = a8->i8[0];
          }
          else if ((_DWORD)v15)
          {
            result = memcpy(result, a8, v15);
          }
        }
        goto LABEL_26;
      }
LABEL_39:
      v17 = 0;
      goto LABEL_26;
    }
LABEL_40:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_26;
  }
  if (!(_DWORD)v21)
    goto LABEL_40;
  if (v21 > 0x7FFFFFEF)
    goto LABEL_39;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20), &v29);
  v17 = v29;
  if (v29)
  {
    v26 = (char *)(v29 + 5);
    *v29 = 2;
    v17[1] = v21;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v26, (uint64_t)a2, a3, a4, v14, (uint64_t)a6, a7, v25, a8, v15);
  }
LABEL_26:
  *v28 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, uint64_t a3, char *__src, unsigned int a5, char *a6, uint64_t a7, int a8, char *a9, uint64_t a10)
{
  int v14;
  char *v16;
  char *v17;
  char *result;
  char *v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  char v22;
  unsigned __int128 *v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  char v26;

  v14 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3 == 1)
    {
      *__dst = *a2;
    }
    else if ((_DWORD)a3)
    {
      memcpy(__dst, a2, a3);
    }
  }
  else
  {
    v19 = __dst;
    if (a3 >= 0x10)
    {
      v19 = &__dst[a3 & 0xFFFFFFF0];
      v20 = (unsigned __int128 *)__dst;
      do
      {
        v21 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *v20++ = v21;
      }
      while (v20 != (unsigned __int128 *)v19);
    }
    while (v19 != &__dst[a3])
    {
      v22 = *a2;
      a2 += 2;
      *v19++ = v22;
    }
  }
  v16 = &__dst[v14];
  if (a5 == 1)
  {
    *v16 = *__src;
  }
  else if (a5)
  {
    memcpy(v16, __src, a5);
  }
  v17 = &v16[a5];
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a7 == 1)
    {
      *v17 = *a6;
    }
    else if ((_DWORD)a7)
    {
      memcpy(v17, a6, a7);
    }
  }
  else
  {
    if (a7 < 0x10)
    {
      v23 = (unsigned __int128 *)v17;
    }
    else
    {
      v23 = (unsigned __int128 *)&v17[a7 & 0xFFFFFFF0];
      v24 = (unsigned __int128 *)v17;
      do
      {
        v25 = (unsigned __int128)vld2q_s8(a6);
        a6 += 32;
        *v24++ = v25;
      }
      while (v24 != v23);
    }
    while (v23 != (unsigned __int128 *)&v17[a7])
    {
      v26 = *a6;
      a6 += 2;
      *(_BYTE *)v23 = v26;
      v23 = (unsigned __int128 *)((char *)v23 + 1);
    }
  }
  result = &v17[a7];
  if ((_DWORD)a10 == 1)
  {
    *result = *a9;
  }
  else if ((_DWORD)a10)
  {
    return (char *)memcpy(result, a9, a10);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, int8x16_t *a4, int a5, uint64_t a6, uint64_t a7, int a8, int8x16_t *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v17 = a3;
  WTF::StringView::getCharacters<char16_t>(&v16, __dst);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v17], a4, a5, a6, a7, a9, a10);
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *result;
  int v31;
  int v32;

  v14 = *((_DWORD *)a1 + 4);
  v15 = *(_DWORD *)(a2 + 8);
  v16 = *(_DWORD *)(a3 + 8);
  v17 = *(_DWORD *)(a4 + 8);
  v18 = *(_DWORD *)(a5 + 8);
  v19 = *(_DWORD *)(a6 + 8);
  v20 = *(_DWORD *)(a7 + 8);
  v21 = __CFADD__(v20, v19);
  v22 = v20 + v19;
  if (v21)
    v22 = -1;
  v21 = __CFADD__(v22, v18);
  v23 = v22 + v18;
  if (v21)
    v23 = -1;
  v21 = __CFADD__(v23, v17);
  v24 = v23 + v17;
  if (v21)
    v24 = -1;
  v21 = __CFADD__(v24, v16);
  v25 = v24 + v16;
  if (v21)
    v25 = -1;
  v21 = __CFADD__(v25, v15);
  v26 = v25 + v15;
  if (v21)
    v26 = -1;
  v21 = __CFADD__(v26, v14);
  v27 = v26 + v14;
  if (v21)
    v28 = 0xFFFFFFFFLL;
  else
    v28 = v27;
  v29 = a1[1];
  if ((!v29 && (v29 = *a1) == 0 || (*(_BYTE *)(v29 + 16) & 4) != 0)
    && *(_BYTE *)(a2 + 12)
    && *(_BYTE *)(a4 + 12)
    && *(_BYTE *)(a6 + 12))
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingLChar((WTF::StringBuilder *)a1, v28);
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE **)a3, *(_QWORD *)(a3 + 8), *(char **)a4, *(_QWORD *)(a4 + 8), v32, *(char **)a5, *(_QWORD *)(a5 + 8), *(char **)a6, *(_QWORD *)(a6 + 8), *(char **)a7, *(_QWORD *)(a7 + 8));
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v28, a3, a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v31, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), *(_OWORD *)a6, *(int8x16_t **)a7, *(_QWORD *)(a7 + 8));
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, _BYTE *a4, unsigned int a5, char *a6, uint64_t a7, int a8, char *a9, uint64_t a10, char *a11, uint64_t a12, char *a13, uint64_t a14)
{
  int v16;
  int v18;
  _QWORD v22[2];

  v16 = a3;
  v22[0] = a2;
  v22[1] = a3;
  WTF::StringView::getCharacters<unsigned char>(v22, __dst);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[v16], a4, a5, a6, a7, a9, a10, v18, a11, a12, a13, a14);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, int8x16_t *a4, int a5, uint64_t a6, uint64_t a7, int a8, int8x16_t *a9, uint64_t a10, __int128 a11, int8x16_t *a12, uint64_t a13)
{
  int v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  WTF::StringView::getCharacters<char16_t>(&v20, __dst);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v21], a4, a5, a6, a7, a9, a10, v18, a11, *((uint64_t *)&a11 + 1), a12, a13);
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, char *a4, uint64_t a5, char *__src, unsigned int a7, int a8, char *a9, uint64_t a10, char *a11, uint64_t a12)
{
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[a3], a4, a5, __src, a7, a9, a10, a8, a11, a12);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, uint64_t a5, int8x16_t *a6, int a7, int a8, uint64_t a9, uint64_t a10, int8x16_t *a11, uint64_t a12)
{
  char *v12;
  char *v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  int8x16x2_t v23;
  int8x16x2_t v24;
  int8x16x2_t v25;

  v12 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v13 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v14 = 0uLL;
    do
    {
      v23.val[0] = *a2;
      v15 = a2[1];
      v24.val[0] = a2[2];
      v16 = a2[3];
      a2 += 4;
      v17 = v16;
      v24.val[1] = 0uLL;
      v25.val[0] = v15;
      v23.val[1] = 0uLL;
      v18 = a1;
      vst2q_s8(v18, v23);
      v18 += 32;
      v25.val[1] = 0uLL;
      vst2q_s8(v18, v25);
      v19 = a1 + 64;
      vst2q_s8(v19, v24);
      v20 = a1 + 96;
      vst2q_s8(v20, *(int8x16x2_t *)(&v14 - 1));
      a1 += 128;
    }
    while (a1 != v13);
    a1 = v13;
  }
  while (a1 != v12)
  {
    v21 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v21;
    a1 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v12, a4, a5, a6, a7, a9, a10, a8, a11, a12);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a1[1];
  if (v4)
  {
    --v4;
    v10 = *a1;
    if (v4 >> 31)
      goto LABEL_9;
  }
  else
  {
    v10 = *a1;
  }
  v11 = v4;
  v9 = *a2;
  v5 = a3[1];
  if (v5)
  {
    --v5;
    v7 = *a3;
    if (!(v5 >> 31))
      goto LABEL_5;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x198931DC8);
  }
  v7 = *a3;
LABEL_5:
  v8 = v5;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v10, &v9, (uint64_t)&v7, a4);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = *a2;
  if (*a2)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  if ((v6 | v5) < 0
    || ((v7 = *(_DWORD *)(result + 8), v8 = __OFADD__(v5, v6), v9 = v5 + v6, !v8) ? (v10 = 0) : (v10 = 1),
        v7 < 0 || (v10 & 1) != 0 || (v8 = __OFADD__(v7, v9), v11 = (v7 + v9), v8)))
  {
    *a4 = 0;
  }
  else
  {
    v12 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, v12, *(int8x16_t **)result, *(_QWORD *)(result + 8), v4, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, int **a8@<X8>)
{
  int v13;
  int *v15;
  _BYTE *v16;
  char *v17;
  _DWORD *v18;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v18);
        v15 = v18;
        if (v18)
        {
          v16 = v18 + 5;
          *v18 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v16, a3, a4, a5, a6->i8, a7);
        }
        goto LABEL_6;
      }
LABEL_12:
      v15 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v18);
  v15 = v18;
  if (v18)
  {
    v17 = (char *)(v18 + 5);
    *v18 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17, a3, a4, a5, a6, a7);
  }
LABEL_6:
  *a8 = v15;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t __src, char *a5, unsigned int a6)
{
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[a3], __src, a5, a6);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  char *v9;
  char *v10;
  __int128 v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v9 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v10 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v11 = 0uLL;
    do
    {
      v34.val[0] = *a2;
      v12 = a2[1];
      v36.val[0] = a2[2];
      v13 = a2[3];
      a2 += 4;
      v14 = v13;
      v36.val[1] = 0uLL;
      v38.val[0] = v12;
      v34.val[1] = 0uLL;
      v15 = a1;
      vst2q_s8(v15, v34);
      v15 += 32;
      v38.val[1] = 0uLL;
      vst2q_s8(v15, v38);
      v16 = a1 + 64;
      vst2q_s8(v16, v36);
      v17 = a1 + 96;
      vst2q_s8(v17, *(int8x16x2_t *)(&v11 - 1));
      a1 += 128;
    }
    while (a1 != v10);
    a1 = v10;
  }
  while (a1 != v9)
  {
    v18 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v18;
    a1 += 2;
  }
  if (a4)
  {
    v19 = *(int8x16_t **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v21 = &v9[2 * v20];
      if (v20 >= 0x40)
      {
        v22 = &v9[2 * (v20 & 0xFFFFFFC0)];
        v23 = 0uLL;
        v24 = v9;
        do
        {
          v35.val[0] = *v19;
          v25 = v19[1];
          v37.val[0] = v19[2];
          v26 = v19[3];
          v19 += 4;
          v27 = v26;
          v37.val[1] = 0uLL;
          v39.val[0] = v25;
          v35.val[1] = 0uLL;
          v28 = v24;
          vst2q_s8(v28, v35);
          v28 += 32;
          v39.val[1] = 0uLL;
          vst2q_s8(v28, v39);
          v29 = v24 + 64;
          vst2q_s8(v29, v37);
          v30 = v24 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
          v24 += 128;
        }
        while (v24 != v22);
      }
      else
      {
        v22 = v9;
      }
      while (v22 != v21)
      {
        v31 = v19->u8[0];
        v19 = (int8x16_t *)((char *)v19 + 1);
        *(_WORD *)v22 = v31;
        v22 += 2;
      }
    }
    else if ((_DWORD)v20 == 1)
    {
      *(_WORD *)v9 = v19->i16[0];
    }
    else if ((_DWORD)v20)
    {
      memcpy(v9, v19, 2 * v20);
    }
    v32 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v32 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v9[2 * v32], a5, a6);
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v7;
  char *result;
  uint64_t v9;

  v9 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v9, __dst);
  v7 = v9;
  if (v9)
    v7 = *(unsigned int *)(v9 + 4);
  result = &__dst[v7];
  if (a4 == 1)
  {
    *result = *a3;
  }
  else if (a4)
  {
    return (char *)memcpy(result, a3, a4);
  }
  return result;
}

uint64_t WTF::dataLog<char [6],char [5],unsigned int,char [5],char [5],char [2],char [5],char [6],JSC::OpcodeID,char [5],char [5],char [26],char [6],char [5],WTF::String,char [5],char [5],char [2],char [6],WTF::String,char [5],char [2],char [6],unsigned int,char [5],char [2],char [6],unsigned int,char [5],char [9],unsigned int,char [3],unsigned int,char [3],unsigned int,char [9],char [6],WTF::CString,char [5],char [12],char [6],WTF::StringView,char [5],char [6],char [5],WTF::StringView,char [5],char [5],char [2],char [2]>(_DWORD *a1, unsigned int *a2, WTF::PrintStream *a3, WTF::PrintStream *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  unint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  char v59;
  char **v60;
  char *v61;
  int v62;

  v16 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v16 != -1)
  {
    v61 = &v59;
    v60 = &v61;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v17 = WTF::s_file;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v18, "%s", "\x1B[35m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[1m");
  WTF::PrintStream::printf(v18, "%u", *a1);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", " ");
  WTF::PrintStream::printf(v18, "%s", "\x1B[1m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[33m");
  WTF::printInternal((uint64_t)v18, *a2);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", " missing prediction for: ");
  WTF::PrintStream::printf(v18, "%s", "\x1B[31m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[1m");
  WTF::printInternal(v18, a3, v19, v20, v21, v22, v23, v24, v25, v26);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", " ");
  WTF::PrintStream::printf(v18, "%s", "\x1B[32m");
  WTF::printInternal(v18, a4, v27, v28, v29, v30, v31, v32, v33, v34);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", ":");
  WTF::PrintStream::printf(v18, "%s", "\x1B[36m");
  WTF::PrintStream::printf(v18, "%u", *a5);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", ":");
  WTF::PrintStream::printf(v18, "%s", "\x1B[36m");
  WTF::PrintStream::printf(v18, "%u", *a6);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", " divot: ");
  WTF::PrintStream::printf(v18, "%u", *a7);
  WTF::PrintStream::printf(v18, "%s", " -");
  WTF::PrintStream::printf(v18, "%u", *a8);
  WTF::PrintStream::printf(v18, "%s", " +");
  WTF::PrintStream::printf(v18, "%u", *a9);
  WTF::PrintStream::printf(v18, "%s", " name: '");
  WTF::PrintStream::printf(v18, "%s", "\x1B[33m");
  if (*a10)
    v35 = (const char *)(*a10 + 16);
  else
    v35 = 0;
  WTF::PrintStream::printf(v18, "%s", v35);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "' source: '");
  WTF::PrintStream::printf(v18, "%s", "\x1B[34m");
  v42 = *(char **)a11;
  if (*(_QWORD *)a11)
  {
    v43 = *(_QWORD *)(a11 + 8);
    if ((*(_QWORD *)(a11 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v42, v43, (uint64_t)&v61, v41);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v42, v43, 0, v36, v37, v38, v39, v40, (uint64_t)&v61);
  }
  else
  {
    v44 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v44 = 1;
    *(_QWORD *)(v44 + 8) = 0;
    *(_BYTE *)(v44 + 16) = 0;
    v61 = (char *)v44;
    v62 = 0;
  }
  WTF::printExpectedCStringHelper(v18, "StringView", &v61);
  if (v62 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v60, &v61);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[34m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[1m");
  v51 = *(char **)a12;
  if (*(_QWORD *)a12)
  {
    v52 = *(_QWORD *)(a12 + 8);
    if ((*(_QWORD *)(a12 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v51, v52, (uint64_t)&v61, v50);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v51, v52, 0, v45, v46, v47, v48, v49, (uint64_t)&v61);
  }
  else
  {
    v53 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v53 = 1;
    *(_QWORD *)(v53 + 8) = 0;
    *(_BYTE *)(v53 + 16) = 0;
    v61 = (char *)v53;
    v62 = 0;
  }
  WTF::printExpectedCStringHelper(v18, "StringView", &v61);
  if (v62 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v60, &v61);
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v18, "%s", "'");
  WTF::PrintStream::printf(v18, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
}

uint64_t WTF::dataLog<char [6],JSC::OpcodeID,char [5],char [2],char [6],WTF::String,char [5],char [12],char [6],char [5],JSC::SpeculationDump,char [5],char [5],char [13],char [6],char [5],JSC::SpeculationDump,char [5],char [5],char [2]>(unsigned int *a1, WTF::PrintStream *a2, WTF::PrintStream **a3, WTF::PrintStream **a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  char v20;
  char **v21;
  char *v22;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "\x1B[33m");
  WTF::printInternal((uint64_t)v10, *a1);
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", " ");
  WTF::PrintStream::printf(v10, "%s", "\x1B[36m");
  WTF::printInternal(v10, a2, v11, v12, v13, v14, v15, v16, v17, v18);
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", " original: ");
  WTF::PrintStream::printf(v10, "%s", "\x1B[36m");
  WTF::PrintStream::printf(v10, "%s", "\x1B[1m");
  JSC::dumpSpeculation(v10, *a3);
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", " generated: ");
  WTF::PrintStream::printf(v10, "%s", "\x1B[35m");
  WTF::PrintStream::printf(v10, "%s", "\x1B[1m");
  JSC::dumpSpeculation(v10, *a4);
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", "\x1B[0m");
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t JSC::FileBasedFuzzerAgentBase::getPrediction(JSC::FileBasedFuzzerAgentBase *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  _QWORD *v24;
  double v25;
  double v26;
  float v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  char **v44;
  char *v45;
  int8x16_t *v46;
  size_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  size_t v65;
  int *v66;
  _WORD *v67;
  uint64_t v68;
  int *v69;
  size_t i;
  uint64_t v71;
  unsigned __int128 *v72;
  int *v73;
  _BYTE *v74;
  size_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  char *v79;
  unsigned int v80;
  char *v81;
  void *v82;
  uint64_t v83;
  size_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  char *v92;
  char *v93;
  char *v94;
  __int16 v95;
  _WORD *v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  char *v104;
  char *v105;
  char *v106;
  __int16 v107;
  _WORD *v108;
  uint64_t v109;
  unsigned int v110;
  _WORD *v111;
  BOOL v112;
  unsigned int v113;
  uint64_t v114;
  _WORD *v115;
  unsigned int v116;
  _WORD *v117;
  _WORD *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  WTF::AtomStringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned __int128 *v168;
  unsigned __int128 *v169;
  unsigned __int128 *v170;
  unsigned __int128 v171;
  char v172;
  size_t __n;
  WTF *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  _QWORD v182[3];
  int8x16x2_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;
  int8x16x2_t v188;

  v8 = a4;
  v182[2] = *MEMORY[0x1E0C80C00];
  v12 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v12))
    goto LABEL_4;
LABEL_5:
  v14 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 40);
  v17 = *(_QWORD *)(v14 + 64);
  v16 = (uint64_t *)(v14 + 64);
  v15 = v17;
  if (!v17 || !*(_DWORD *)(v15 + 4))
    goto LABEL_6;
  v176 = 0;
  v177 = 0;
  v180 = 0;
  v181 = 0;
  v178 = 0;
  v20 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 2) != 0)
  {
    LODWORD(v20) = -1;
  }
  else if ((v20 & 1) != 0)
  {
    LODWORD(v20) = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v20 >>= 36;
  }
  v21 = (unint64_t)v20 >> 2;
  JSC::ExpressionInfo::entryForInstPC(*(JSC::ExpressionInfo **)(*((_QWORD *)a2 + 7) + 160), v21, (uint64_t)&v176);
  v22 = (_DWORD *)*((_QWORD *)a2 + 8);
  HIDWORD(v177) += v22[12];
  if (HIDWORD(v176))
    v23 = 1;
  else
    v23 = v22[15] + 1;
  HIDWORD(v176) += v22[14] + 1;
  LODWORD(v177) = v177 + v23;
  v174 = 0;
  v175 = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = off_1E3572800;
  v24[1] = &v174;
  v182[0] = v24;
  WTF::String::splitInternal<false>(v16, 0x2Fu, v182, v25, v26, v27);
  v35 = v182[0];
  v182[0] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (HIDWORD(v175))
    v36 = (uint64_t *)((char *)v174 + 8 * HIDWORD(v175) - 8);
  else
    v36 = v16;
  v37 = *v36;
  if (*v36)
    *(_DWORD *)v37 += 2;
  v180 = (WTF::StringImpl *)v37;
  v38 = (unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)a2 + 7) + 80) + v21);
  v39 = *v38;
  if ((v39 | 2) == 0x82)
    v39 = v38[1];
  v179 = v39;
  v40 = HIDWORD(v177);
  v41 = v178;
  v42 = HIDWORD(v178);
  if (v37)
    *(_DWORD *)v37 += 2;
  v43 = v39;
  if (v39 <= 0x2B)
  {
    if (((1 << v39) & 0x603) != 0)
    {
      v43 = 23;
    }
    else if (((1 << v39) & 0x80080000000) != 0)
    {
      v43 = 32;
    }
    else if (v39 == 3)
    {
      v43 = 8;
    }
  }
  v44 = &(&JSC::opcodeNames)[2 * v43];
  v46 = (int8x16_t *)*v44;
  v45 = v44[1];
  if (v45)
  {
    v47 = (size_t)(v45 - 1);
    if ((unint64_t)(v45 - 1) >> 31)
      goto LABEL_190;
  }
  else
  {
    v47 = 0;
  }
  v48 = (v40 - v41);
  v49 = v42 + v40;
  if (v37)
  {
    v50 = *(_DWORD *)(v37 + 4);
    if ((v48 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_159:
    v162 = -(int)v48;
    v51 = 1;
    do
    {
      ++v51;
      v112 = v162 >= 0xA;
      v162 /= 0xAu;
    }
    while (v112);
    goto LABEL_42;
  }
  v50 = 0;
  if ((v48 & 0x80000000) != 0)
    goto LABEL_159;
LABEL_40:
  v51 = 0;
  v52 = v48;
  do
  {
    ++v51;
    v53 = v52 > 9;
    v52 /= 0xAu;
  }
  while (v53);
LABEL_42:
  if ((v49 & 0x80000000) != 0)
  {
    v163 = -v49;
    v54 = 1;
    do
    {
      ++v54;
      v112 = v163 >= 0xA;
      v163 /= 0xAu;
    }
    while (v112);
  }
  else
  {
    v54 = 0;
    v55 = v49;
    do
    {
      ++v54;
      v53 = v55 > 9;
      v55 /= 0xAu;
    }
    while (v53);
  }
  if (v54 < 0)
    goto LABEL_190;
  v56 = __OFADD__(v54, 1);
  v57 = v54 + 1;
  v58 = v56;
  if (v51 < 0)
    goto LABEL_190;
  if (v58)
    goto LABEL_190;
  v56 = __OFADD__(v51, v57);
  v59 = v51 + v57;
  if (v56)
    goto LABEL_190;
  v56 = __OFADD__(v59, 1);
  v60 = v59 + 1;
  if (v56)
    goto LABEL_190;
  v56 = __OFADD__((_DWORD)v47, v60);
  v61 = v47 + v60;
  if (v56)
    goto LABEL_190;
  v56 = __OFADD__(v61, 1);
  v62 = v61 + 1;
  v63 = v56;
  if (v50 < 0)
    goto LABEL_190;
  if (v63)
    goto LABEL_190;
  v64 = (v50 + v62);
  if (__OFADD__(v50, v62))
    goto LABEL_190;
  __n = v47;
  if (v37 && (*(_BYTE *)(v37 + 16) & 4) == 0)
  {
    if ((_DWORD)v64)
    {
      if (v64 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v64 + 20), v182);
        v65 = __n;
        v66 = (int *)v182[0];
        if (v182[0])
        {
          v67 = (_WORD *)(v182[0] + 20);
          *(_DWORD *)v182[0] = 2;
          v66[1] = v64;
          *((_QWORD *)v66 + 1) = v66 + 5;
          v66[4] = 0;
          v28 = *(int8x16_t **)(v37 + 8);
          v68 = *(unsigned int *)(v37 + 4);
          if ((*(_BYTE *)(v37 + 16) & 4) != 0)
          {
            v85 = (char *)&v67[v68];
            if (v68 >= 0x40)
            {
              v86 = (char *)&v67[v68 & 0xFFFFFFC0];
              v87 = 0uLL;
              v88 = (char *)(v66 + 5);
              do
              {
                v183.val[0] = *v28;
                v89 = v28[1];
                v185.val[0] = v28[2];
                v90 = v28[3];
                v28 += 4;
                v91 = v90;
                v185.val[1] = 0uLL;
                v187.val[0] = v89;
                v183.val[1] = 0uLL;
                v92 = v88;
                vst2q_s8(v92, v183);
                v92 += 32;
                v187.val[1] = 0uLL;
                vst2q_s8(v92, v187);
                v93 = v88 + 64;
                vst2q_s8(v93, v185);
                v94 = v88 + 96;
                vst2q_s8(v94, *(int8x16x2_t *)(&v87 - 1));
                v88 += 128;
              }
              while (v88 != v86);
            }
            else
            {
              v86 = (char *)(v66 + 5);
            }
            while (v86 != v85)
            {
              v95 = v28->u8[0];
              v28 = (int8x16_t *)((char *)v28 + 1);
              *(_WORD *)v86 = v95;
              v86 += 2;
            }
          }
          else if ((_DWORD)v68 == 1)
          {
            *v67 = v28->i16[0];
          }
          else if ((_DWORD)v68)
          {
            v69 = v66;
            memcpy(v66 + 5, v28, 2 * v68);
            v65 = __n;
            v66 = v69;
          }
          v96 = &v67[*(unsigned int *)(v37 + 4)];
          *v96 = 124;
          v97 = (char *)(v96 + 1);
          v98 = &v97[2 * v65];
          if ((v65 & 0x7FFFFFC0) != 0)
          {
            v99 = &v97[2 * (v65 & 0x7FFFFFC0)];
            v100 = 0uLL;
            do
            {
              v184.val[0] = *v46;
              v101 = v46[1];
              v186.val[0] = v46[2];
              v102 = v46[3];
              v46 += 4;
              v103 = v102;
              v186.val[1] = 0uLL;
              v188.val[0] = v101;
              v184.val[1] = 0uLL;
              v104 = v97;
              vst2q_s8(v104, v184);
              v104 += 32;
              v188.val[1] = 0uLL;
              vst2q_s8(v104, v188);
              v105 = v97 + 64;
              vst2q_s8(v105, v186);
              v106 = v97 + 96;
              vst2q_s8(v106, *(int8x16x2_t *)(&v100 - 1));
              v97 += 128;
            }
            while (v97 != v99);
            v97 = v99;
          }
          while (v97 != v98)
          {
            v107 = v46->u8[0];
            v46 = (int8x16_t *)((char *)v46 + 1);
            *(_WORD *)v97 = v107;
            v97 += 2;
          }
          *(_WORD *)v98 = 124;
          v108 = v98 + 2;
          if ((v48 & 0x80000000) != 0)
          {
            v113 = -(int)v48;
            v114 = 12;
            do
            {
              *((_BYTE *)v182 + v114--) = (v113 % 0xA) | 0x30;
              v53 = v113 > 9;
              v113 /= 0xAu;
            }
            while (v53);
            *((_BYTE *)v182 + v114) = 45;
            if (v114 + 2 <= 14)
            {
              v115 = v108;
              do
              {
                *v115++ = *((unsigned __int8 *)v182 + v114);
                v53 = v114++ < 12;
              }
              while (v53);
            }
          }
          else
          {
            v109 = 0;
            v110 = v48;
            do
            {
              *((_BYTE *)&v182[1] + v109-- + 4) = (v110 % 0xA) | 0x30;
              v53 = v110 > 9;
              v110 /= 0xAu;
            }
            while (v53);
            if (v109 + 14 <= 13)
            {
              v111 = v108;
              do
              {
                *v111++ = *((unsigned __int8 *)&v182[1] + v109 + 5);
                v112 = __CFADD__(v109++, 1);
              }
              while (!v112);
            }
          }
          if ((v48 & 0x80000000) != 0)
          {
            v167 = -(int)v48;
            v116 = 1;
            do
            {
              ++v116;
              v112 = v167 >= 0xA;
              v167 /= 0xAu;
            }
            while (v112);
          }
          else
          {
            v116 = 0;
            do
            {
              ++v116;
              v53 = v48 > 9;
              LODWORD(v48) = v48 / 0xA;
            }
            while (v53);
          }
          v117 = &v108[v116];
          *v117 = 124;
          v118 = v117 + 1;
          if ((v49 & 0x80000000) != 0)
          {
            v120 = -v49;
            v121 = 12;
            do
            {
              *((_BYTE *)v182 + v121--) = (v120 % 0xA) | 0x30;
              v53 = v120 > 9;
              v120 /= 0xAu;
            }
            while (v53);
            *((_BYTE *)v182 + v121) = 45;
            if (v121 + 2 <= 14)
            {
              do
              {
                *v118++ = *((unsigned __int8 *)v182 + v121);
                v53 = v121++ < 12;
              }
              while (v53);
            }
          }
          else
          {
            v119 = 0;
            do
            {
              *((_BYTE *)&v182[1] + v119-- + 4) = (v49 % 0xA) | 0x30;
              v53 = v49 > 9;
              v49 /= 0xAu;
            }
            while (v53);
            if (v119 + 14 <= 13)
            {
              do
              {
                *v118++ = *((unsigned __int8 *)&v182[1] + v119 + 5);
                v112 = __CFADD__(v119++, 1);
              }
              while (!v112);
            }
          }
          goto LABEL_135;
        }
      }
LABEL_190:
      __break(0xC471u);
      JUMPOUT(0x19893345CLL);
    }
LABEL_177:
    v66 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    if (!v37)
      goto LABEL_137;
LABEL_135:
    if (*(_DWORD *)v37 == 2)
    {
      v126 = v66;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v37, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
      v66 = v126;
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
    goto LABEL_137;
  }
  if (!(_DWORD)v64)
    goto LABEL_177;
  if ((v64 & 0x80000000) != 0)
    goto LABEL_190;
  WTF::tryFastCompactMalloc((WTF *)(v64 + 20), v182);
  i = __n;
  v71 = v182[0];
  if (!v182[0])
    goto LABEL_190;
  v72 = (unsigned __int128 *)(v182[0] + 20);
  *(_DWORD *)v182[0] = 2;
  *(_DWORD *)(v71 + 4) = v64;
  *(_QWORD *)(v71 + 8) = v71 + 20;
  v73 = (int *)v71;
  *(_DWORD *)(v71 + 16) = 4;
  if (v37)
  {
    v74 = *(_BYTE **)(v37 + 8);
    v75 = *(unsigned int *)(v37 + 4);
    if ((*(_BYTE *)(v37 + 16) & 4) != 0)
    {
      if ((_DWORD)v75 == 1)
      {
        *(_BYTE *)v72 = *v74;
      }
      else if ((_DWORD)v75)
      {
        memcpy((void *)(v71 + 20), v74, v75);
        i = __n;
      }
    }
    else
    {
      v168 = (unsigned __int128 *)((char *)v72 + v75);
      if (v75 < 0x10)
      {
        v169 = (unsigned __int128 *)(v71 + 20);
      }
      else
      {
        v169 = (unsigned __int128 *)((char *)v72 + (v75 & 0xFFFFFFF0));
        v170 = v72;
        do
        {
          v171 = (unsigned __int128)vld2q_s8(v74);
          v74 += 32;
          *v170++ = v171;
        }
        while (v170 != v169);
      }
      for (i = __n; v169 != v168; v169 = (unsigned __int128 *)((char *)v169 + 1))
      {
        v172 = *v74;
        v74 += 2;
        *(_BYTE *)v169 = v172;
      }
    }
    v76 = *(unsigned int *)(v37 + 4);
  }
  else
  {
    v76 = 0;
  }
  v77 = (char *)v72 + v76;
  *v77 = 124;
  v78 = v77 + 1;
  if ((_DWORD)i == 1)
  {
    *v78 = v46->i8[0];
  }
  else if ((_DWORD)i)
  {
    memcpy(v78, v46, i);
    i = __n;
  }
  v78[i] = 124;
  v79 = &v78[i + 1];
  WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>(v48, v79);
  if ((v48 & 0x80000000) != 0)
  {
    v166 = -(int)v48;
    v80 = 1;
    do
    {
      ++v80;
      v112 = v166 >= 0xA;
      v166 /= 0xAu;
    }
    while (v112);
  }
  else
  {
    v80 = 0;
    do
    {
      ++v80;
      v53 = v48 > 9;
      LODWORD(v48) = v48 / 0xA;
    }
    while (v53);
  }
  v81 = &v79[v80];
  *v81 = 124;
  v82 = v81 + 1;
  v83 = 0;
  if ((v49 & 0x80000000) != 0)
  {
    v164 = -v49;
    do
    {
      *((_BYTE *)&v182[1] + v83-- + 4) = (v164 % 0xA) | 0x30;
      v53 = v164 > 9;
      v164 /= 0xAu;
    }
    while (v53);
    v165 = v83 + 12;
    v28 = (int8x16_t *)((char *)&v182[1] + v83 + 4);
    v28->i8[0] = 45;
    if (v83 + 14 <= 14)
    {
      if (v165 <= 12)
        v165 = 12;
      v84 = v165 - v83 - 11;
      goto LABEL_90;
    }
  }
  else
  {
    do
    {
      *((_BYTE *)&v182[1] + v83-- + 4) = (v49 % 0xA) | 0x30;
      v53 = v49 > 9;
      v49 /= 0xAu;
    }
    while (v53);
    if (v83 + 14 <= 13)
    {
      v28 = (int8x16_t *)((char *)&v182[1] + v83 + 5);
      v84 = -v83;
LABEL_90:
      memcpy(v82, v28, v84);
    }
  }
  v66 = v73;
  if (v37)
    goto LABEL_135;
LABEL_137:
  v181 = (WTF::StringImpl *)v66;
  v8 = (*(uint64_t (**)(JSC::FileBasedFuzzerAgentBase *, JSC::CodeBlock *, uint64_t *, uint64_t))(*(_QWORD *)this + 24))(this, a2, &v176, v8);
  if (HIDWORD(v175))
  {
    v151 = v174;
    v152 = 8 * HIDWORD(v175);
    do
    {
      v153 = *(WTF::StringImpl **)v151;
      *(_QWORD *)v151 = 0;
      if (v153)
      {
        if (*(_DWORD *)v153 == 2)
        {
          WTF::StringImpl::~StringImpl(v153, v122, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)v153 -= 2;
        }
      }
      v151 = (WTF *)((char *)v151 + 8);
      v152 -= 8;
    }
    while (v152);
  }
  v123 = v174;
  if (v174)
  {
    v174 = 0;
    LODWORD(v175) = 0;
    WTF::fastFree((unint64_t)v123, v122, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v124 = v181;
  v181 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v122, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v180;
  v180 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v122, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
LABEL_6:
  v18 = __ldxr(v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, v12))
      return v8;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v8;
}

JSC::Exception *JSC::callFinalizationRegistry(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"FinalizationRegistry", 21);
}

unint64_t JSC::constructFinalizationRegistry(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  JSC::JSGlobalObject *v14;
  JSC::JSGlobalObject *i;
  char **v16;
  uint64_t v17;
  int v18;
  JSC::JSObject *v19;
  JSC::JSObject *SubclassStructure;
  int v21;
  uint64_t v22;
  JSC::Structure *v23;
  int v24;
  int v25;
  JSC::JSGlobalObject *v26;
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  JSC::JSGlobalObject *v29;
  JSC::VM *v30;
  JSC::VM *v31[3];

  v9 = *((_QWORD *)this + 7);
  v30 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"First argument to FinalizationRegistry should be a function", 60);
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"First argument to FinalizationRegistry should be a function", 60);
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 < 0x17)
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"First argument to FinalizationRegistry should be a function", 60);
  if ((v12 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v11 + 6) & 4) == 0)
      return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"First argument to FinalizationRegistry should be a function", 60);
    (*(void (**)(JSC::VM **__return_ptr))(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                   + 0x38))(v31);
    if (!LOBYTE(v31[0]))
      return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"First argument to FinalizationRegistry should be a function", 60);
  }
  v14 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v14 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v21 = *((_DWORD *)this + 295);
    if (v21)
      SubclassStructure = (JSC::JSObject *)(16 * (v21 & 0xFFFFFFFE));
    else
      SubclassStructure = 0;
  }
  else
  {
    v31[0] = *((JSC::VM **)this + 7);
    for (i = v14; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v26 + 2))
    {
      while (1)
      {
        v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v16 != &JSC::JSBoundFunction::s_info && v16 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v17 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_17;
      }
      v26 = i;
      v28 = v14;
      if (JSC::ProxyObject::isRevoked(i))
        break;
      v14 = v28;
    }
    JSC::throwTypeError((unint64_t)this, v31, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v17 = 0;
    v14 = v28;
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_18;
LABEL_17:
    v25 = *(_DWORD *)(v9 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v27 = v17;
      v29 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v17 = v27;
      v14 = v29;
    }
    if (*(_QWORD *)(v9 + 16))
    {
      SubclassStructure = 0;
    }
    else
    {
LABEL_18:
      v18 = *(_DWORD *)(v17 + 1180);
      if (v18)
        v19 = (JSC::JSObject *)(16 * (v18 & 0xFFFFFFFE));
      else
        v19 = 0;
      SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v14, v19, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v24 = *(_DWORD *)(v9 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v22 = *((_QWORD *)a2 + 6);
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v23 = 0;
  }
  else if (*(unsigned __int8 *)(v22 + 5) <= 0x16u)
  {
    v23 = 0;
  }
  else
  {
    v23 = (JSC::Structure *)*((_QWORD *)a2 + 6);
  }
  return JSC::JSFinalizationRegistry::create((JSC::JSFinalizationRegistry *)v9, SubclassStructure, v23, a4, a5, a6, a7, a8);
}

void JSC::FinalizationRegistryPrototype::finishCreation(JSC::FinalizationRegistryPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  WTF::StringImpl *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::StringImpl *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"register", 8uLL, a4, a5, a6, a7, a8, &v132);
  v11 = v132;
  if (!v132)
  {
    v132 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v132, 2, (uint64_t)JSC::protoFuncFinalizationRegistryRegister, 0, 0, 4u);
    goto LABEL_14;
  }
  v12 = *(_DWORD *)v132 + 2;
  *(_DWORD *)v132 = v12;
  if ((*((_BYTE *)v11 + 16) & 0x20) != 0)
  {
    v13 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
    if (!v13)
      goto LABEL_7;
    v12 = *(_DWORD *)v13;
  }
  else
  {
    v13 = v11;
  }
  *(_DWORD *)v13 = v12 + 2;
LABEL_7:
  v132 = v13;
  v21 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v132, (uint64_t)JSC::protoFuncFinalizationRegistryRegister, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v23 = v132;
  v132 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v11, v21, 4, v18, v19, v20, v22);
  v31 = *(_DWORD *)v11 - 2;
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl(v11, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    v31 = *(_DWORD *)v11;
  }
  else
  {
    *(_DWORD *)v11 = v31;
  }
  v32 = v31 - 2;
  if (v32)
  {
    *(_DWORD *)v11 = v32;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v11, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  }
LABEL_14:
  WTF::AtomStringImpl::addLiteral((uint64_t)"unregister", 0xAuLL, v26, v27, v28, v29, v30, &v132);
  v33 = v132;
  if (!v132)
  {
    v132 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v132, 1, (uint64_t)JSC::protoFuncFinalizationRegistryUnregister, 0, 0, 4u);
    goto LABEL_25;
  }
  v34 = *(_DWORD *)v132 + 2;
  *(_DWORD *)v132 = v34;
  if ((*((_BYTE *)v33 + 16) & 0x20) != 0)
  {
    v35 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
    if (!v35)
      goto LABEL_18;
    v34 = *(_DWORD *)v35;
  }
  else
  {
    v35 = v33;
  }
  *(_DWORD *)v35 = v34 + 2;
LABEL_18:
  v132 = v35;
  v43 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v132, (uint64_t)JSC::protoFuncFinalizationRegistryUnregister, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v45 = v132;
  v132 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v33, v43, 4, v40, v41, v42, v44);
  v53 = *(_DWORD *)v33 - 2;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl(v33, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    v53 = *(_DWORD *)v33;
  }
  else
  {
    *(_DWORD *)v33 = v53;
  }
  v54 = v53 - 2;
  if (v54)
  {
    *(_DWORD *)v33 = v54;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v33, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
  }
LABEL_25:
  v55 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x1400000002;
  *(_QWORD *)(v56 + 8) = "FinalizationRegistry";
  *(_DWORD *)(v56 + 16) = 4;
  v132 = (WTF::StringImpl *)v56;
  v63 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v132, v57, v58, v59, v60, v61, v62);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v55, v63, 6, v64, v65, v66, v67);
  v75 = v132;
  v132 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
}

uint64_t JSC::protoFuncFinalizationRegistryRegister(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  JSC *v19;
  uint64_t v20;
  const char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v10 = *((_QWORD *)this + 7);
  v26 = (JSC::VM *)v10;
  v27 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) < 0x17u)
  {
    v22 = "Called FinalizationRegistry function on non-object";
    v23 = 51;
LABEL_23:
    JSC::throwTypeError((unint64_t)this, &v27, (uint64_t)v22, v23);
    v11 = 0;
    goto LABEL_4;
  }
  if (&JSC::JSFinalizationRegistry::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v22 = "Called FinalizationRegistry function on a non-FinalizationRegistry object";
    v23 = 74;
    goto LABEL_23;
  }
LABEL_4:
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = *(_DWORD *)(v10 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v25 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v25;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1
    || (v13 = *((_QWORD *)a2 + 6), (v13 & 0xFFFE000000000002) != 0)
    || (v14 = *(unsigned __int8 *)(v13 + 5), v14 <= 0x16)
    && (v14 != 4 || (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 36) & 2) != 0))
  {
    v18 = "register requires an object or a non-registered symbol as the target";
    v19 = this;
    v20 = 69;
    return JSC::throwTypeError((unint64_t)v19, &v26, (uint64_t)v18, v20);
  }
  if (v12 < 2)
    v15 = 10;
  else
    v15 = *((_QWORD *)a2 + 7);
  if (v13 == v15)
  {
    v18 = "register expects the target object and the holdings parameter are not the same. Otherwise, the target can never be collected";
    v19 = this;
    v20 = 125;
    return JSC::throwTypeError((unint64_t)v19, &v26, (uint64_t)v18, v20);
  }
  if (v12 < 3)
  {
    v16 = 10;
  }
  else
  {
    v16 = *((_QWORD *)a2 + 8);
    if (v16 != 10)
    {
      if ((v16 & 0xFFFE000000000002) != 0
        || (v17 = *(unsigned __int8 *)(v16 + 5), v17 <= 0x16)
        && (v17 != 4 || (*(_BYTE *)(*(_QWORD *)(v16 + 8) + 36) & 2) != 0))
      {
        v18 = "register requires an object or a non-registered symbol as the unregistration token";
        v19 = this;
        v20 = 83;
        return JSC::throwTypeError((unint64_t)v19, &v26, (uint64_t)v18, v20);
      }
    }
  }
  JSC::JSFinalizationRegistry::registerTarget(v11, (_DWORD *)v10, v13, v15, v16, a6, a7, a8);
  return 10;
}

uint64_t JSC::protoFuncFinalizationRegistryUnregister(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  JSC::VM *v37;
  JSC::VM *v38;

  v10 = *((_QWORD *)this + 7);
  v37 = (JSC::VM *)v10;
  v38 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) < 0x17u)
  {
    v18 = "Called FinalizationRegistry function on non-object";
    v19 = 51;
LABEL_18:
    JSC::throwTypeError((unint64_t)this, &v38, (uint64_t)v18, v19);
    v11 = 0;
    goto LABEL_4;
  }
  if (&JSC::JSFinalizationRegistry::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v18 = "Called FinalizationRegistry function on a non-FinalizationRegistry object";
    v19 = 74;
    goto LABEL_18;
  }
LABEL_4:
  if (*(_DWORD *)(v10 + 80))
  {
    v36 = *(_DWORD *)(v10 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)"unregister requires an object or a non-registered symbol as the unregistration token", 85);
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)"unregister requires an object or a non-registered symbol as the unregistration token", 85);
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 <= 0x16 && (v13 != 4 || (*(_BYTE *)(*(_QWORD *)(v12 + 8) + 36) & 2) != 0))
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)"unregister requires an object or a non-registered symbol as the unregistration token", 85);
  v38 = (JSC::VM *)*((_QWORD *)a2 + 6);
  v14 = (unsigned __int8 *)(v11 + 4);
  while (1)
  {
    v15 = *v14;
    if ((v15 & 0x40) != 0)
      break;
    v16 = __ldaxr(v14);
    if (v16 == v15)
    {
      if (!__stxr(v15 | 0x40, v14))
        goto LABEL_20;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 4);
LABEL_20:
  v20 = WTF::HashMap<JSC::JSCell *,WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)(v11 + 24), &v38, (uint64_t)a3, a4, a5, a6, a7, a8);
  v33 = WTF::HashMap<JSC::JSCell *,WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)(v11 + 32), &v38, v21, v22, v23, v24, v25, v26);
  while (1)
  {
    v34 = *v14;
    if ((v34 & 0xC0) != 0x40)
      break;
    v35 = __ldxr(v14);
    if (v35 == v34)
    {
      if (!__stxr(v34 & 0xBF, v14))
        goto LABEL_31;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, v27, v28, v29, v30, v31, v32);
LABEL_31:
  if (v20 | v33)
    return 7;
  else
    return 6;
}

unint64_t JSC::callFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 0, 0, a6, a7, a8);
}

unint64_t JSC::constructWithFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 0, *((JSC::JSGlobalObject **)a2 + 5), a6, a7, a8);
}

unint64_t JSC::constructFunction(unint64_t a1, unint64_t **a2, size_t a3, uint64_t a4, _DWORD **a5, uint64_t a6, int32x2_t *a7, uint64_t a8, int8x16_t a9, JSC::JSGlobalObject *a10)
{
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int8x16_t *v15;
  size_t v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::VM *v33;
  unsigned __int128 v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int8x16_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _BYTE *v52;
  int *v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int *v129;
  int *v130;
  int v131;
  int v132;
  BOOL v133;
  int v134;
  int v135;
  BOOL v136;
  int v137;
  uint64_t v138;
  int *v139;
  _BYTE *v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  JSC::VM *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  JSC::VM *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(unint64_t, uint64_t);
  uint64_t v185;
  const WTF::String *v186;
  unint64_t EvalError;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  JSC::VM *v193;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int *v195;
  unsigned __int128 *v196;
  unsigned __int128 *v197;
  char v198;
  char *v199;
  unsigned __int128 *v200;
  unsigned __int128 *v201;
  unsigned __int128 v202;
  unsigned __int128 *v203;
  unsigned __int128 *v204;
  unsigned __int128 v205;
  char v206;
  char v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  JSC::VM *v221;
  char v224;
  int *v226;
  JSC::VM *v227;
  int *v228[3];
  int *v229[3];

  v11 = a8;
  v224 = a6;
  v12 = (uint64_t *)a3;
  v13 = (uint64_t)a2;
  v221 = *(JSC::VM **)(a1 + 56);
  v227 = v221;
  switch((_DWORD)a8)
  {
    case 0:
      v15 = (int8x16_t *)"function ";
      v16 = 10;
LABEL_3:
      v17 = 0;
      goto LABEL_4;
    case 3:
      v15 = (int8x16_t *)"async function* ";
      v16 = 17;
      goto LABEL_3;
    case 2:
      v15 = (int8x16_t *)"async function ";
      v16 = 16;
      goto LABEL_3;
    case 1:
      v15 = (int8x16_t *)"function* ";
      v16 = 11;
      goto LABEL_3;
  }
  v16 = 0;
  v15 = 0;
  v17 = 1;
LABEL_4:
  v18 = *((_DWORD *)a2 + 2);
  if (v18 != 1)
  {
    if (v18)
    {
      v10 = 0;
      memset(v228, 0, 21);
      if ((v17 & 1) == 0)
      {
        v10 = v16 - 1;
        if ((v16 - 1) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198934C20);
        }
      }
      v19 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v20 = *(_DWORD *)(v19 + 4);
        v21 = __CFADD__(v20, 1);
        v22 = v20 + 1;
        if (v21)
          v22 = -1;
      }
      else
      {
        v22 = 1;
      }
      v21 = __CFADD__(v22, (_DWORD)v10);
      v23 = v22 + v10;
      if (v21)
        v24 = 0xFFFFFFFFLL;
      else
        v24 = v23;
      if (v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
      {
        v199 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v228, (WTF::AtomStringImpl *)v24, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
        if (v199)
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(v199, v15, v10, v19, 40);
      }
      else
      {
        v25 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v228, (WTF::AtomStringImpl *)v24, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
        if (v25)
        {
          v35 = v25;
          if ((_DWORD)v10 == 1)
          {
            *v25 = v15->i8[0];
          }
          else if ((_DWORD)v10)
          {
            memcpy(v25, v15, v10);
          }
          v10 += (uint64_t)v35;
          if (v19)
          {
            v26 = *(_QWORD *)(v19 + 8);
            v27 = *(unsigned int *)(v19 + 4);
            if ((*(_BYTE *)(v19 + 16) & 4) != 0)
            {
              if ((_DWORD)v27 == 1)
              {
                *(_BYTE *)v10 = *(_BYTE *)v26;
              }
              else if ((_DWORD)v27)
              {
                memcpy((void *)v10, (const void *)v26, v27);
              }
            }
            else
            {
              if (v27 < 0x10)
              {
                v196 = (unsigned __int128 *)v10;
              }
              else
              {
                v196 = (unsigned __int128 *)(v10 + (v27 & 0xFFFFFFF0));
                v197 = (unsigned __int128 *)v10;
                do
                {
                  v34 = (unsigned __int128)vld2q_s8((const char *)v26);
                  v26 += 32;
                  *v197++ = v34;
                }
                while (v197 != v196);
              }
              while (v196 != (unsigned __int128 *)(v10 + v27))
              {
                v198 = *(_BYTE *)v26;
                v26 += 2;
                *(_BYTE *)v196 = v198;
                v196 = (unsigned __int128 *)((char *)v196 + 1);
              }
            }
            v36 = *(unsigned int *)(v19 + 4);
          }
          else
          {
            v36 = 0;
          }
          *(_BYTE *)(v10 + v36) = 40;
        }
      }
      v37 = 0xFFFE000000000002;
      if (*(_DWORD *)(v13 + 8))
      {
        v38 = **(_QWORD **)v13;
        v229[0] = (int *)v38;
        if ((v38 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v38 + 5) == 2)
        {
LABEL_27:
          if (*((_DWORD *)v227 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v227, v26, v27, v28, v29, v30, v31, v32))
          {
            LOBYTE(v42) = 0;
            v55 = 0;
            v53 = 0;
            v226 = 0;
            v54 = 1;
            goto LABEL_60;
          }
          v39 = *(int **)(v38 + 8);
          if ((v39 & 1) != 0)
          {
            if ((v39 & 2) != 0)
            {
              v68 = *(_QWORD *)((*(_QWORD *)(v38 + 20) & 0xFFFFFFFFFLL) + 8);
              if (!v68
                || (v69 = *(unsigned int *)(v68 + 4),
                    v70 = *(_QWORD *)(v38 + 24),
                    v71 = v70 >> 16,
                    v69 <= (v70 >> 16)))
              {
                v10 = (uint64_t)"";
                v42 = 0x100000000;
                goto LABEL_32;
              }
              v72 = *(unsigned int *)(v68 + 16);
              v10 = *(_QWORD *)(v68 + 8);
              v73 = *(_DWORD *)(v38 + 16);
              if ((int)v69 - (int)v71 <= v73)
              {
                v73 = v69 - v71;
                if (!(_DWORD)v71)
                {
                  v42 = v69 & 0xFFFFFFFEFFFFFFFFLL | (((v72 >> 2) & 1) << 32);
                  goto LABEL_32;
                }
              }
              v74 = (v70 >> 16);
              v42 = v73;
              v75 = v69 - v71;
              if (((v72 >> 2) & 1) != 0)
              {
                if (v75 >= v73)
                {
                  v10 += v74;
                  v42 = v73 | 0x100000000;
                  goto LABEL_32;
                }
              }
              else if (v75 >= v73)
              {
                v10 += 2 * v74;
                goto LABEL_32;
              }
LABEL_244:
              __break(1u);
LABEL_245:
              v193 = v33;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v33, v26, v27, v28, v29, v30, v31, v32);
              v33 = v193;
              if (hasExceptionsAfterHandlingTraps)
                goto LABEL_229;
              while (1)
              {
                v116 = *(_QWORD *)(v10 + 8);
                if ((v116 & 1) != 0)
                {
                  if ((v116 & 2) != 0)
                  {
                    v121 = v219 & 0xFFFFFF0000000000;
                    v122 = *(_QWORD *)((*(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL) + 8);
                    if (v122)
                    {
                      v123 = *(unsigned int *)(v122 + 4);
                      v124 = ((unint64_t)*(unsigned int *)(v122 + 16) >> 2) & 1;
                      v125 = v121 | (v124 << 32) | v123;
                      v126 = *(_QWORD *)(v10 + 24);
                      v127 = v126 >> 16;
                      v219 = v125;
                      if (v123 <= (v126 >> 16))
                      {
                        v120 = 0x100000000;
                        v118 = (int *)"";
                      }
                      else
                      {
                        v118 = *(int **)(v122 + 8);
                        v152 = *(_DWORD *)(v10 + 16);
                        if ((int)v123 - (int)v127 > v152 || (v152 = v123 - v127, (_DWORD)v127))
                        {
                          v153 = (v126 >> 16);
                          v120 = v152;
                          v154 = v123 - v127;
                          if ((_DWORD)v124)
                          {
                            if (v154 < v152)
                              goto LABEL_244;
                            v118 = (int *)((char *)v118 + v153);
                            v120 = v152 | 0x100000000;
                          }
                          else
                          {
                            if (v154 < v152)
                              goto LABEL_244;
                            v118 = (int *)((char *)v118 + 2 * v153);
                          }
                        }
                        else
                        {
                          v120 = v125;
                        }
                      }
                      v10 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
                    }
                    else
                    {
                      v219 = v121 | 0x100000000;
                      v120 = 0x100000000;
                      v10 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
                      v118 = (int *)"";
                    }
                  }
                  else
                  {
                    v163 = v33;
                    v164 = (unint64_t)*JSC::JSRopeString::resolveRope(v10, (JSC::JSGlobalObject *)a1, v27, v28, v43, v29, v30, v31, v32);
                    if (v164)
                    {
                      v165 = *(unsigned int *)(v164 + 16);
                      v118 = *(int **)(v164 + 8);
                      v164 = *(unsigned int *)(v164 + 4);
                      v166 = (v165 >> 2) & 1;
                    }
                    else
                    {
                      v118 = 0;
                      v166 = 1;
                    }
                    v33 = v163;
                    v120 = v218 & 0xFFFFFF0000000000 | v164 | (v166 << 32);
                    v218 = v120;
                  }
                }
                else
                {
                  if (v116)
                  {
                    v117 = *(unsigned int *)(v116 + 16);
                    v118 = *(int **)(v116 + 8);
                    v116 = *(unsigned int *)(v116 + 4);
                    v119 = (v117 >> 2) & 1;
                  }
                  else
                  {
                    v118 = 0;
                    v119 = 1;
                  }
                  v120 = v220 & 0xFFFFFF0000000000 | v116 | (v119 << 32);
                  v220 = v120;
                }
                if (*((_DWORD *)v33 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v33, v26, v27, v28, v29, v30, v31, v32))
                {
                  LOBYTE(v42) = 0;
                  v55 = 0;
                  v53 = 0;
                  v226 = 0;
LABEL_230:
                  v54 = 1;
LABEL_60:
                  v56 = (WTF::StringImpl *)v228[1];
                  v228[1] = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)v26, v27, v28, v29, v30, v31, v32);
                      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
                    }
                    else
                    {
                      *(_DWORD *)v56 -= 2;
                    }
                  }
                  v57 = (WTF::StringImpl *)v228[0];
                  v228[0] = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)v26, v27, v28, v29, v30, v31, v32);
                      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
                    }
                    else
                    {
                      *(_DWORD *)v57 -= 2;
                    }
                  }
                  if (v54)
                  {
                    if (v53)
                    {
                      if (*v53 == 2)
                      {
                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v53, (WTF::AtomStringImpl *)v26, v27, v28, v29, v30, v31, v32);
                        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
                      }
                      else
                      {
                        *v53 -= 2;
                      }
                    }
                    goto LABEL_70;
                  }
LABEL_173:
                  v226 = v53;
                  goto LABEL_70;
                }
                LOBYTE(v226) = 44;
                v229[0] = v118;
                v229[1] = (int *)v120;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((uint64_t)v228, &v226, (uint64_t)v229, v28, v29, v30, v31, v32);
                v44 = (int)v228[2];
                if (((uint64_t)v228[2] & 0x80000000) != 0)
                  goto LABEL_255;
                ++v42;
                v45 = *(unsigned int *)(v13 + 8);
                if (v42 >= v45 - 1)
                  goto LABEL_37;
LABEL_105:
                if (v45 <= v42)
                {
                  v229[0] = (int *)10;
                }
                else
                {
                  v10 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v42);
                  v229[0] = (int *)v10;
                  if ((v10 & v37) == 0 && *(_BYTE *)(v10 + 5) == 2)
                    goto LABEL_108;
                }
                v10 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)v229, a1, (JSC::Structure *)1, v28, v29, v30, v31, v32);
LABEL_108:
                v33 = v227;
                if (*((_DWORD *)v227 + 20))
                  goto LABEL_245;
              }
            }
            v39 = *JSC::JSRopeString::resolveRope(v38, (JSC::JSGlobalObject *)a1, v27, v28, (int8x16_t)v34, v29, v30, v31, v32);
            if (v39)
              goto LABEL_30;
          }
          else if (v39)
          {
LABEL_30:
            v40 = v39[4];
            v10 = *((_QWORD *)v39 + 1);
            LODWORD(v39) = v39[1];
            v41 = (v40 >> 2) & 1;
LABEL_31:
            v42 = v39 | (unint64_t)(v41 << 32);
LABEL_32:
            if (*((_DWORD *)v227 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v227, v26, v27, v28, v29, v30, v31, v32))
            {
              goto LABEL_229;
            }
            if ((v42 & 0x100000000) != 0)
              WTF::StringBuilder::append((uint64_t)v228, (int8x16_t *)v10, v42, v28, v29, v30, v31, v32);
            else
              WTF::StringBuilder::append((uint64_t)v228, (_WORD *)v10, v42, v28, v29, v30, v31, v32);
            v44 = (int)v228[2];
            if (((uint64_t)v228[2] & 0x80000000) != 0)
            {
LABEL_255:
              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v227);
LABEL_229:
              LOBYTE(v42) = 0;
              v55 = 0;
              v53 = 0;
              v226 = 0;
              goto LABEL_230;
            }
            v45 = *(unsigned int *)(v13 + 8);
            if ((unint64_t)(v45 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v42 = 1;
              goto LABEL_105;
            }
LABEL_37:
            v42 = (v44 + 2);
            if ((_DWORD)v45)
            {
              v46 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v45 - 1));
              v229[0] = (int *)v46;
              if ((v46 & v37) == 0 && *(_BYTE *)(v46 + 5) == 2)
                goto LABEL_40;
            }
            else
            {
              v229[0] = (int *)10;
            }
            v46 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)v229, a1, (JSC::Structure *)1, v28, v29, v30, v31, v32);
LABEL_40:
            v37 = (unint64_t)v227;
            if (*((_DWORD *)v227 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v227, v26, v27, v28, v29, v30, v31, v32))
            {
              v53 = 0;
              LODWORD(v10) = v42 >> 8;
              v226 = 0;
              v55 = 1;
              v54 = 1;
              goto LABEL_60;
            }
            v47 = *(int **)(v46 + 8);
            if ((v47 & 1) == 0)
            {
              if (v47)
              {
LABEL_43:
                v10 = *((_QWORD *)v47 + 1);
                v13 = v47[1] | ((unint64_t)((v47[4] >> 2) & 1) << 32);
LABEL_44:
                if (!*(_DWORD *)(v37 + 80)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37, v26, v27, v28, v29, v30, v31, v32))
                {
                  if (v13 >= 0xFFFFFFF9)
                    v48 = -1;
                  else
                    v48 = v13 + 7;
                  v49 = (v48 + LODWORD(v228[2]));
                  if (__CFADD__(v48, v228[2]))
                    v49 = 0xFFFFFFFFLL;
                  v50 = v228[1];
                  if ((v228[1] || (v50 = v228[0]) != 0) && (v50[4] & 4) == 0 || (v13 & 0x100000000) == 0)
                  {
                    v176 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v228, (WTF::AtomStringImpl *)v49, v27, v28, v29, v30, v31, v32);
                    if (v176)
                      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v176, (int8x16_t *)"\n) {\n", 5, v10, v13, (int8x16_t *)"\n}", 2);
                  }
                  else
                  {
                    v51 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v228, (WTF::AtomStringImpl *)v49, v27, v28, v29, v30, v31, v32);
                    if (v51)
                    {
                      *(_BYTE *)(v51 + 4) = 10;
                      *(_DWORD *)v51 = 2065705226;
                      v52 = (_BYTE *)(v51 + 5);
                      if ((_DWORD)v13 == 1)
                      {
                        *v52 = *(_BYTE *)v10;
                      }
                      else if ((_DWORD)v13)
                      {
                        memcpy((void *)(v51 + 5), (const void *)v10, v13);
                      }
                      *(_WORD *)&v52[v13] = 32010;
                    }
                  }
                  v26 = LODWORD(v228[2]);
                  if (((uint64_t)v228[2] & 0x80000000) == 0)
                  {
                    v53 = v228[0];
                    if (v228[0])
                      goto LABEL_58;
                    if (v228[1] && v228[1][1] > (LODWORD(v228[2]) + (LODWORD(v228[2]) >> 2)))
                    {
                      if ((v228[1][4] & 4) != 0)
                        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v228, (WTF::AtomStringImpl *)LODWORD(v228[2]), v27, v28, v29, v30, v31, v32);
                      else
                        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v228, (WTF::AtomStringImpl *)LODWORD(v228[2]), v27, v28, v29, v30, v31, v32);
                      v167 = (WTF::StringImpl *)v228[0];
                      v228[0] = v228[1];
                      v228[1] = 0;
                      if (v167)
                      {
                        if (*(_DWORD *)v167 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v167, v145, v146, v147, v148, v149, v150, v151);
                          WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
                        }
                        else
                        {
                          *(_DWORD *)v167 -= 2;
                        }
                      }
                    }
                    WTF::StringBuilder::reifyString((WTF::StringBuilder *)v228);
                    v53 = v228[0];
                    if (v228[0])
                    {
LABEL_58:
                      v54 = 0;
                      *v53 += 2;
                    }
                    else
                    {
                      v54 = 0;
                    }
                    goto LABEL_59;
                  }
                  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v227);
                }
                v53 = 0;
                v226 = 0;
                v54 = 1;
LABEL_59:
                LODWORD(v10) = v42 >> 8;
                v55 = 1;
                goto LABEL_60;
              }
LABEL_126:
              v10 = 0;
              v13 = 0x100000000;
              goto LABEL_44;
            }
            if ((v47 & 2) == 0)
            {
              v47 = *JSC::JSRopeString::resolveRope(v46, (JSC::JSGlobalObject *)a1, v27, v28, v43, v29, v30, v31, v32);
              if (v47)
                goto LABEL_43;
              goto LABEL_126;
            }
            v76 = *(_QWORD *)((*(_QWORD *)(v46 + 20) & 0xFFFFFFFFFLL) + 8);
            if (!v76
              || (v77 = *(unsigned int *)(v76 + 4),
                  v78 = *(_QWORD *)(v46 + 24),
                  v79 = v78 >> 16,
                  v77 <= (v78 >> 16)))
            {
              v10 = (uint64_t)"";
              v13 = 0x100000000;
              goto LABEL_44;
            }
            v80 = *(unsigned int *)(v76 + 16);
            v10 = *(_QWORD *)(v76 + 8);
            v81 = *(_DWORD *)(v46 + 16);
            if ((int)v77 - (int)v79 <= v81)
            {
              v81 = v77 - v79;
              if (!(_DWORD)v79)
              {
                v13 = v77 & 0xFFFFFFFEFFFFFFFFLL | (((v80 >> 2) & 1) << 32);
                goto LABEL_44;
              }
            }
            v82 = (v78 >> 16);
            v13 = v81;
            v83 = v77 - v79;
            if (((v80 >> 2) & 1) != 0)
            {
              if (v83 >= v81)
              {
                v10 += v82;
                v13 = v81 | 0x100000000;
                goto LABEL_44;
              }
            }
            else if (v83 >= v81)
            {
              v10 += 2 * v82;
              goto LABEL_44;
            }
            goto LABEL_244;
          }
          v10 = 0;
          v41 = 1;
          goto LABEL_31;
        }
      }
      else
      {
        v229[0] = (int *)10;
      }
      v38 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)v229, a1, (JSC::Structure *)1, v28, v29, v30, v31, v32);
      goto LABEL_27;
    }
    v195 = *(int **)a3;
    if (*(_QWORD *)a3)
      *v195 += 2;
    v229[0] = v195;
    WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(v228, (uint64_t)v15, v16, (uint64_t *)v229);
    v53 = v228[0];
    v228[0] = 0;
LABEL_169:
    v144 = (WTF::StringImpl *)v229[0];
    v229[0] = 0;
    if (v144)
    {
      if (*(_DWORD *)v144 == 2)
      {
        WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
        WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
      }
      else
      {
        *(_DWORD *)v144 -= 2;
      }
    }
    LOBYTE(v42) = 0;
    v55 = 0;
    goto LABEL_173;
  }
  v128 = **a2;
  v228[0] = (int *)v128;
  if ((v128 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v128 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v228, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8, v229);
  }
  else
  {
    v129 = *(int **)(v128 + 8);
    if ((v129 & 1) != 0)
      v129 = *JSC::JSRopeString::resolveRope(v128, (JSC::JSGlobalObject *)a1, a3, a4, a9, (uint64_t)a5, a6, (uint64_t)a7, a8);
    if (v129)
      *v129 += 2;
    v229[0] = v129;
  }
  if (!*((_DWORD *)v221 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v221, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8))
  {
    v10 = *v12;
    v130 = v229[0];
    if (v16)
      --v16;
    if (v10)
      v131 = *(_DWORD *)(v10 + 4);
    else
      v131 = 0;
    if (v229[0])
    {
      v132 = v229[0][1];
      if (v132 < 0)
        goto LABEL_298;
    }
    else
    {
      v132 = 0;
    }
    v133 = __OFADD__(v132, 2);
    v134 = v132 + 2;
    if (!v133)
    {
      v133 = __OFADD__(v134, 6);
      v135 = v134 + 6;
      v136 = v133;
      if ((v131 & 0x80000000) == 0 && !v136)
      {
        v133 = __OFADD__(v131, v135);
        v137 = v131 + v135;
        if (!v133)
        {
          v138 = (v16 + v137);
          if (!__OFADD__((_DWORD)v16, v137))
          {
            if (v10 && (*(_BYTE *)(v10 + 16) & 4) == 0 || v229[0] && (v229[0][4] & 4) == 0)
            {
              if ((_DWORD)v138)
              {
                if (v138 <= 0x7FFFFFEF)
                {
                  WTF::tryFastCompactMalloc((WTF *)(2 * v138 + 20), v228);
                  v53 = v228[0];
                  if (v228[0])
                  {
                    *v228[0] = 2;
                    v53[1] = v138;
                    *((_QWORD *)v53 + 1) = v53 + 5;
                    v53[4] = 0;
                    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v53 + 20, v15, v16, v10, (int8x16_t *)"(\n) {\n", 6, (uint64_t)v130, v208, (int8x16_t *)"\n}", 2);
                    goto LABEL_169;
                  }
                }
                goto LABEL_298;
              }
            }
            else if ((_DWORD)v138)
            {
              if ((v138 & 0x80000000) == 0)
              {
                WTF::tryFastCompactMalloc((WTF *)(v138 + 20), v228);
                v53 = v228[0];
                if (v228[0])
                {
                  v139 = v228[0] + 5;
                  *v228[0] = 2;
                  v53[1] = v138;
                  *((_QWORD *)v53 + 1) = v53 + 5;
                  v53[4] = 4;
                  if ((_DWORD)v16 == 1)
                  {
                    *(_BYTE *)v139 = v15->i8[0];
                  }
                  else if ((_DWORD)v16)
                  {
                    memcpy(v53 + 5, v15, v16);
                  }
                  v140 = (char *)v139 + v16;
                  if (v10)
                  {
                    a2 = *(unint64_t ***)(v10 + 8);
                    a3 = *(unsigned int *)(v10 + 4);
                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      if ((_DWORD)a3 == 1)
                      {
                        *v140 = *(_BYTE *)a2;
                      }
                      else if ((_DWORD)a3)
                      {
                        memcpy(v140, a2, a3);
                      }
                    }
                    else
                    {
                      if (a3 < 0x10)
                      {
                        v200 = (unsigned __int128 *)v140;
                      }
                      else
                      {
                        v200 = (unsigned __int128 *)&v140[a3 & 0xFFFFFFF0];
                        v201 = (unsigned __int128 *)v140;
                        do
                        {
                          v202 = (unsigned __int128)vld2q_s8((const char *)a2);
                          a2 += 4;
                          *v201++ = v202;
                        }
                        while (v201 != v200);
                      }
                      while (v200 != (unsigned __int128 *)&v140[a3])
                      {
                        v206 = *(_BYTE *)a2;
                        a2 = (unint64_t **)((char *)a2 + 2);
                        *(_BYTE *)v200 = v206;
                        v200 = (unsigned __int128 *)((char *)v200 + 1);
                      }
                    }
                    v141 = *(unsigned int *)(v10 + 4);
                  }
                  else
                  {
                    v141 = 0;
                  }
                  v142 = &v140[v141];
                  *((_WORD *)v142 + 2) = 2683;
                  *(_DWORD *)v142 = 539560488;
                  v10 = (uint64_t)(v142 + 6);
                  if (v130)
                  {
                    a2 = (unint64_t **)*((_QWORD *)v130 + 1);
                    a3 = v130[1];
                    if ((v130[4] & 4) != 0)
                    {
                      if ((_DWORD)a3 == 1)
                      {
                        *(_BYTE *)v10 = *(_BYTE *)a2;
                      }
                      else if ((_DWORD)a3)
                      {
                        memcpy((void *)v10, a2, a3);
                      }
                    }
                    else
                    {
                      if (a3 < 0x10)
                      {
                        v203 = (unsigned __int128 *)(v142 + 6);
                      }
                      else
                      {
                        v203 = (unsigned __int128 *)(v10 + (a3 & 0xFFFFFFF0));
                        v204 = (unsigned __int128 *)(v142 + 6);
                        do
                        {
                          v205 = (unsigned __int128)vld2q_s8((const char *)a2);
                          a2 += 4;
                          *v204++ = v205;
                        }
                        while (v204 != v203);
                      }
                      while (v203 != (unsigned __int128 *)(v10 + a3))
                      {
                        v207 = *(_BYTE *)a2;
                        a2 = (unint64_t **)((char *)a2 + 2);
                        *(_BYTE *)v203 = v207;
                        v203 = (unsigned __int128 *)((char *)v203 + 1);
                      }
                    }
                    v143 = v130[1];
                  }
                  else
                  {
                    v143 = 0;
                  }
                  *(_WORD *)(v10 + v143) = 32010;
                  goto LABEL_169;
                }
              }
              goto LABEL_298;
            }
            v53 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_169;
          }
        }
      }
    }
LABEL_298:
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v227);
  }
  v226 = 0;
  v209 = (WTF::StringImpl *)v229[0];
  v229[0] = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
    {
      WTF::StringImpl::~StringImpl(v209, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v209 -= 2;
    }
  }
  LOBYTE(v42) = 0;
  v55 = 0;
LABEL_70:
  if (*(_BYTE *)(a1 + 3169))
  {
    v58 = (WTF::StringImpl *)v226;
    if (!v226)
      return 0;
    v66 = JSC::constructFunctionSkippingEvalEnabledCheck((uint64_t *)a1, &v226, (uint64_t)v12, a4, a5, v224, a7, 0xFFFFFFFFLL, v42 | ((v10 & 0xFFFFFF) << 8) | (v55 << 32), v11, a10);
    v226 = 0;
    goto LABEL_73;
  }
  v177 = v227;
  JSC::VM::clearException((uint64_t)v227);
  v184 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(a1 + 3280) + 112);
  if (v226)
    v185 = JSC::jsNontrivialString((uint64_t)v221, (JSC::VM *)&v226, v178, v179, v180, v181, v182, v183);
  else
    v185 = 0;
  v184(a1, v185);
  EvalError = JSC::createEvalError(a1, (WTF::StringImpl **)(a1 + 3184), v186);
  JSC::VM::throwException(v177, (JSC::JSGlobalObject *)a1, EvalError, v188, v189, v190, v191, v192);
  v66 = 0;
  v58 = (WTF::StringImpl *)v226;
  v226 = 0;
  if (v58)
  {
LABEL_73:
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  return v66;
}

unint64_t JSC::constructFunctionSkippingEvalEnabledCheck(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4, _DWORD **a5, char a6, int32x2_t *a7, uint64_t a8, uint64_t a9, int a10, JSC::JSGlobalObject *a11)
{
  JSC::VM *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  JSC::UnlinkedFunctionExecutable *v25;
  JSC::Structure *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  float v33;
  uint64_t v34;
  JSC::JSObject *v35;
  uint64_t v36;
  JSC::JSGlobalObject *v37;
  int v38;
  uint64_t *FunctionRealm;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int v44;
  JSC::JSObject *SubclassStructure;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  int v61;
  int32x2_t v62;

  v18 = (JSC::VM *)a1[7];
  v19 = *a5;
  if (*a5)
    *v19 += 2;
  v20 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E35964B0;
  *(_BYTE *)(v20 + 12) = 0;
  v21 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v21 += 2;
  *(_QWORD *)(v20 + 16) = v21;
  v22 = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(v20 + 40) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v20 + 24) = v22;
  v23 = *(_QWORD *)(a4 + 40);
  if (v23)
    ++*(_DWORD *)(v23 + 8);
  *(_QWORD *)(v20 + 56) = v23;
  *(_QWORD *)(v20 + 64) = v19;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(int32x2_t *)(v20 + 104) = *a7;
  *(_DWORD *)(v20 + 112) = 0;
  *(_BYTE *)(v20 + 116) = a6;
  *(_QWORD *)v20 = off_1E357C4B0;
  v24 = *a2;
  if (!*a2)
    v24 = &WTF::StringImpl::s_emptyAtomString;
  *v24 += 2;
  *(_QWORD *)(v20 + 120) = v24;
  v59 = (_DWORD *)v20;
  v60 = 0;
  v61 = v24[1];
  v62 = vmax_s32(*a7, 0);
  v58 = 0;
  v25 = JSC::UnlinkedFunctionExecutable::fromGlobalCode(a3, a1, (uint64_t *)&v59, &v58, a8);
  if (!v25
    || (v34 = JSC::UnlinkedFunctionExecutable::link((uint64_t)v25, a1[7], 0, (uint64_t)&v59, a8 | 0x100000000, 0, 0, v30, v31, v32, v33)) == 0)
  {
    JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, v58, (uint64_t)v26, v27, v28, v29, v30);
    goto LABEL_38;
  }
  v36 = v34;
  v37 = a11;
  if (a11 && (JSC::JSGlobalObject *)a1[32] != a11)
  {
    v50 = v34;
    FunctionRealm = (uint64_t *)JSC::getFunctionRealm((JSC *)a1, a11, v35);
    if (*((_DWORD *)v18 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v18, v51, v52, (uint64_t)v26, v27, v28, v29, v30))
    {
      goto LABEL_38;
    }
    v38 = 1;
    v36 = v50;
    v37 = a11;
  }
  else
  {
    v38 = 0;
    FunctionRealm = a1;
  }
  switch(a10)
  {
    case 0:
      v40 = *(_QWORD *)(v36 + 88);
      v41 = *(_QWORD *)(v40 + 16);
      if (*(_BYTE *)(v40 + 50) == 6)
      {
        if ((int)v41 < 0)
          v43 = (int *)(FunctionRealm + 118);
        else
          v43 = (int *)FunctionRealm + 239;
      }
      else
      {
        v42 = (int *)(FunctionRealm + 120);
        if ((int)v41 >= 0)
        {
          v43 = (int *)FunctionRealm + 241;
        }
        else
        {
          v42 = (int *)FunctionRealm + 237;
          v43 = (int *)(FunctionRealm + 119);
        }
        if ((*(_BYTE *)(v36 + 68) & 1) == 0)
          v43 = v42;
      }
      v44 = *v43;
      goto LABEL_22;
    case 1:
      v44 = *((_DWORD *)FunctionRealm + 247);
      goto LABEL_22;
    case 2:
      v44 = *((_DWORD *)FunctionRealm + 245);
LABEL_22:
      if (v44)
        SubclassStructure = (JSC::JSObject *)(16 * (v44 & 0xFFFFFFFE));
      else
        SubclassStructure = 0;
      goto LABEL_25;
    case 3:
      v44 = *((_DWORD *)FunctionRealm + 246);
      goto LABEL_22;
  }
  SubclassStructure = 0;
LABEL_25:
  if (v38)
  {
    v53 = v36;
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v37, SubclassStructure, v26, v27, v28, v29, v30);
    if (*((_DWORD *)v18 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18, v54, v55, v56, v27, v28, v29, v30);
      v36 = v53;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_38;
    }
    else
    {
      v36 = v53;
    }
  }
  switch(a10)
  {
    case 0:
      v46 = JSC::JSFunction::create((uint64_t)v18, (uint64_t *)v36, a1[9], (unint64_t)SubclassStructure, v27, v28, v29, v30);
LABEL_28:
      v47 = v46;
      goto LABEL_29;
    case 1:
      v46 = JSC::JSGeneratorFunction::create((uint64_t)v18, (uint64_t *)v36, a1[9], (unint64_t)SubclassStructure, v27, v28, v29, v30);
      goto LABEL_28;
    case 2:
      v46 = (unint64_t)JSC::JSAsyncFunction::create(v18, (uint64_t *)v36, a1[9], (unint64_t)SubclassStructure, v27, v28, v29, v30);
      goto LABEL_28;
    case 3:
      v46 = (unint64_t)JSC::JSAsyncGeneratorFunction::create(v18, (uint64_t *)v36, a1[9], (unint64_t)SubclassStructure, v27, v28, v29, v30);
      goto LABEL_28;
  }
LABEL_38:
  v47 = 0;
LABEL_29:
  v48 = v59;
  v59 = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  return v47;
}

unint64_t JSC::constructFunction(unint64_t a1, JSC::CallFrame *this, unint64_t **a3, uint64_t a4, JSC::JSGlobalObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42[5];
  _DWORD *v43;
  unsigned __int8 *v44;
  unsigned __int8 v45;

  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 41952) + 872;
  JSC::CallFrame::callerSourceOrigin(this, (JSC::VM *)v13, (uint64_t)a5, a6, a7, a8, (uint64_t)v42);
  v41 = 0;
  if (*(_BYTE *)(v13 + 41452))
  {
    v45 = 1;
    v44 = &v45;
    JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(this, (JSC::VM *)v13, &v44, v15, v16, v17, v18, v19);
    v21 = v45;
  }
  else
  {
    v21 = 0;
  }
  v44 = 0;
  v29 = JSC::constructFunction(a1, a3, v14, (uint64_t)v42, &v41, v21, (int32x2_t *)&v44, a4, v20, a5);
  v30 = v43;
  v43 = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = v42[0];
  v42[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return v29;
}

unsigned int *JSC::FunctionExecutable::destroy(JSC::FunctionExecutable *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::StructureShape **v45;
  uint64_t v46;
  JSC::StructureShape *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v9 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      if ((v9[2] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 2), (void *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 14);
  if ((v12 & 1) == 0)
  {
    do
    {
      v33 = __ldaxr(v12);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v12));
    if (!v34)
    {
      atomic_store(1u, v12);
      JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)v12);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 32);
    *(_QWORD *)(v13 + 32) = 0;
    if (!v14)
      goto LABEL_18;
    if (!*(_QWORD *)v14)
    {
LABEL_13:
      v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v17)
      {
        if (!(v14 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) != 0)
        {
          goto LABEL_16;
        }
        if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_16:
            v18 = *(unsigned int *)(v17 + 8000);
            if (v18 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v17, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v17 + 8 * v18) = v14 | 0x5000000000000;
              *(_DWORD *)(v17 + 8000) = v18 + 1;
            }
            goto LABEL_18;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v17, v14, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_18:
      v19 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v19);
          v43 = *(_QWORD *)(v19 + 24);
          if ((v43 & 1) != 0)
            WTF::fastFree(v43 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v44 = *(unsigned int *)(v19 + 20);
          if ((_DWORD)v44)
          {
            v45 = *(JSC::StructureShape ***)(v19 + 8);
            v46 = 8 * v44;
            do
            {
              v47 = *v45;
              *v45 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                {
                  JSC::StructureShape::~StructureShape(v47, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
                }
                else
                {
                  --*(_DWORD *)v47;
                }
              }
              ++v45;
              v46 -= 8;
            }
            while (v46);
          }
          v56 = *(_QWORD *)(v19 + 8);
          if (v56)
          {
            *(_QWORD *)(v19 + 8) = 0;
            *(_DWORD *)(v19 + 16) = 0;
            WTF::fastFree(v56, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v19, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v22)
      {
        pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_26;
      }
      if (!(v13 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
      {
        goto LABEL_24;
      }
      if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
        {
LABEL_24:
          v23 = *(unsigned int *)(v22 + 8000);
          if (v23 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v22, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v22 + 8 * v23) = v13 | 0x5000000000000;
            *(_DWORD *)(v22 + 8000) = v23 + 1;
          }
          goto LABEL_26;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v13, 1, a4, a5, a6, a7, a8);
      goto LABEL_26;
    }
    a2 = *(_QWORD *)v14 - 16;
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v15)
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_13;
    }
    if (!(a2 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
    {
LABEL_11:
      v16 = *(unsigned int *)(v15 + 8000);
      if (v16 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v15, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v15 + 8 * v16) = a2 | 0x5000000000000;
        *(_DWORD *)(v15 + 8000) = v16 + 1;
      }
      goto LABEL_13;
    }
    if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_11;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, a2, 1, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
LABEL_26:
  v24 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)v24 + 8))(v24, a2);
    else
      --v24[2];
  }
  v25 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *, unint64_t))(*(_QWORD *)v25 + 32))(v25, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v30 = result + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

void JSC::FunctionExecutable::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  _QWORD **v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;

  v10 = *((_QWORD *)a2 + 10);
  v11 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v12 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v11) & 0xFFFFFC000 | 0x20) != v12)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v11) & 0xFFFFFC000), v12, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v11) & 0xFFFFFC000) + 8 * ((v11 >> 6) & 0xF) + 0x28) >> (v11 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v11, 0, a4, a5, a6, a7, a8);
    }
  }
  v13 = *(_QWORD *)(this + 80);
  if (v13)
  {
    if ((v13 & 8) != 0)
    {
      if ((*(_BYTE *)(v13 - 79) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v14 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != v14)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000), v14, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFC000) + 8 * ((v13 >> 10) & 0xF) + 0x28) >> (v13 >> 4)) & 1) != 0)
      {
LABEL_11:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v13, 0, a4, a5, a6, a7, a8);
  }
LABEL_12:
  v15 = *(_QWORD *)(this + 88);
  if (!v15)
    goto LABEL_18;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    v16 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000), v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_17:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_18;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v15, 0, a4, a5, a6, a7, a8);
LABEL_18:
  v17 = *(_QWORD *)(this + 72);
  if (!v17)
    goto LABEL_19;
  v32 = *(_DWORD *)(v17 + 24);
  v33 = v32 & 0xFFFFFFFE;
  if ((v32 & 0xFFFFFFFE) != 0)
  {
    v34 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v33) & 0xFFFFFC000 | 0x20) != v34)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v33) & 0xFFFFFC000), v34, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v33) & 0xFFFFFC000) + 8 * ((v33 >> 6) & 0xF) + 0x28) >> (v33 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v33, 0, a4, a5, a6, a7, a8);
    }
  }
  v35 = *(_QWORD *)(v17 + 40);
  if (v35)
  {
    if ((v35 & 8) != 0)
    {
      if ((*(_BYTE *)(v35 - 79) & 1) != 0)
        goto LABEL_49;
    }
    else
    {
      v36 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != v36)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000), v36, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v35 & 0xFFFFFFFFFFFFC000) + 8 * ((v35 >> 10) & 0xF) + 0x28) >> (v35 >> 4)) & 1) != 0)
      {
LABEL_49:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_50;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v35, 0, a4, a5, a6, a7, a8);
  }
LABEL_50:
  v37 = *(_QWORD ***)(v17 + 32);
  if (v37)
  {
    v60 = this;
    v38 = (unsigned __int8 *)(this + 4);
    while (1)
    {
      v39 = *v38;
      if ((v39 & 0x40) != 0)
        break;
      v40 = __ldaxr(v38);
      if (v40 == v39)
      {
        if (!__stxr(v39 | 0x40, v38))
          goto LABEL_72;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v38);
LABEL_72:
    v47 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v37);
    v55 = v47;
    v56 = (_QWORD *)v48;
    if (*v37)
      v57 = (uint64_t)&(*v37)[2 * *((unsigned int *)*v37 - 1)];
    else
      v57 = 0;
    if ((_QWORD *)v57 != v47)
    {
      do
      {
        v58 = v55[1];
        if (!v58)
          goto LABEL_79;
        if ((v58 & 8) != 0)
        {
          v59 = 0;
          if ((*(_BYTE *)(v58 - 79) & 1) == 0)
            goto LABEL_87;
        }
        else
        {
          v59 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v58 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v49, v50, v51, v52, v53, v54);
          if (((*(_QWORD *)((v58 & 0xFFFFFFFFFFFFC000) + v59 + 8 * ((v58 >> 10) & 0xF) + 0x28) >> (v58 >> 4)) & 1) == 0)
            goto LABEL_87;
        }
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_79;
LABEL_87:
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v58, v59, v50, v51, v52, v53, v54);
LABEL_79:
        while (1)
        {
          v55 += 2;
          if (v55 == v56)
            break;
          if (*v55 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_81;
        }
        v55 = v56;
LABEL_81:
        ;
      }
      while (v55 != (_QWORD *)v57);
    }
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v60, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_19:
  v18 = *(_QWORD *)(this + 96);
  if (!v18)
  {
    v19 = *(_QWORD *)(this + 104);
    if (!v19)
      return;
LABEL_37:
    JSC::ScriptExecutable::visitCodeBlockEdge<JSC::SlotVisitor>((uint64_t)a2, v19);
    if (!JSC::shouldKeepInConstraintSet<JSC::SlotVisitor>((uint64_t)a2, v18, v19))
      return;
    goto LABEL_26;
  }
  JSC::ScriptExecutable::visitCodeBlockEdge<JSC::SlotVisitor>((uint64_t)a2, *(_QWORD *)(this + 96));
  v19 = *(_QWORD *)(this + 104);
  if (v19)
    goto LABEL_37;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      return;
  }
  else if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
         && ((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
  {
    return;
  }
LABEL_26:
  if ((this & 8) != 0)
  {
    v41 = *(unsigned __int8 *)(this - 76);
    v42 = (v41 >> 3) & 0x1C;
    v43 = 1 << v41;
    v44 = (unsigned int *)(v10 + 36336 + v42);
    while (1)
    {
      v45 = *v44;
      if ((*v44 & v43) != 0)
        break;
      v46 = __ldxr(v44);
      if (v46 == v45)
      {
        if (!__stxr(v45 | v43, v44))
          return;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v26 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v27 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 36376) + (v26 & 0xFFFFFFF8) + 8) + 8 * (v26 & 7));
    if (!v27)
      v27 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v10 + 36320), v26, v20, v21, v22, v23, v24, v25);
    v28 = 1 << (this >> 4);
    v29 = (unint64_t *)v27 + ((this >> 10) & 0xF);
    while (1)
    {
      v30 = *v29;
      if ((*v29 & v28) != 0)
        break;
      v31 = __ldxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | v28, v29))
          return;
      }
      else
      {
        __clrex();
      }
    }
  }
}

void JSC::FunctionExecutable::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD **v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[2];
  uint64_t v49;
  char v50;
  _QWORD v51[2];
  _QWORD *v52;
  char v53;

  v48[0] = a2;
  v48[1] = this;
  v50 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v49 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198935E10);
  }
  v6 = *((_QWORD *)a2 + 10);
  v51[0] = a2;
  v51[1] = this;
  v53 = 0;
  v52 = v48;
  *((_QWORD *)a2 + 11) = v51;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v51[0] + 88) = v52;
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 80));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 88));
  v7 = *(_QWORD *)(this + 72);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 24);
    v9 = v8 ? 16 * (v8 & 0xFFFFFFFE) : 0;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v7 + 40));
    v10 = *(_QWORD ***)(v7 + 32);
    if (v10)
    {
      v11 = (unsigned __int8 *)(this + 4);
      while (1)
      {
        v12 = *v11;
        if ((v12 & 0x40) != 0)
          break;
        v13 = __ldaxr(v11);
        if (v13 == v12)
        {
          if (!__stxr(v12 | 0x40, v11))
            goto LABEL_15;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 4);
LABEL_15:
      v14 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v10);
      v21 = v14;
      v23 = v22;
      if (*v10)
        v24 = (uint64_t)&(*v10)[2 * *((unsigned int *)*v10 - 1)];
      else
        v24 = 0;
      if ((_QWORD *)v24 != v14)
      {
        do
        {
          (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v21[1]);
          while (1)
          {
            v21 += 2;
            if (v21 == v23)
              break;
            if (*v21 < 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_23;
          }
          v21 = v23;
LABEL_23:
          ;
        }
        while (v21 != (_QWORD *)v24);
      }
      while (1)
      {
        v25 = *v11;
        if ((v25 & 0xC0) != 0x40)
          break;
        v26 = __ldxr(v11);
        if (v26 == v25)
        {
          if (!__stxr(v25 & 0xBF, v11))
            goto LABEL_32;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(this + 4), 0, v15, v16, v17, v18, v19, v20);
    }
  }
LABEL_32:
  v27 = *(_QWORD *)(this + 96);
  if (!v27)
  {
    v28 = *(_QWORD *)(this + 104);
    if (!v28)
      goto LABEL_41;
    JSC::ScriptExecutable::visitCodeBlockEdge<JSC::AbstractSlotVisitor>(a2, *(_QWORD *)(this + 104));
    goto LABEL_38;
  }
  JSC::ScriptExecutable::visitCodeBlockEdge<JSC::AbstractSlotVisitor>(a2, *(_QWORD *)(this + 96));
  v28 = *(_QWORD *)(this + 104);
  if (!v28)
  {
    v35 = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v27);
LABEL_40:
    if ((v35 & 1) != 0)
      goto LABEL_41;
    goto LABEL_42;
  }
  JSC::ScriptExecutable::visitCodeBlockEdge<JSC::AbstractSlotVisitor>(a2, *(_QWORD *)(this + 104));
  if ((*(unsigned int (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v27))
  {
LABEL_38:
    v35 = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v28);
    goto LABEL_40;
  }
LABEL_42:
  if ((this & 8) != 0)
  {
    v42 = *(unsigned __int8 *)(this - 76);
    v43 = (v42 >> 3) & 0x1C;
    v44 = 1 << v42;
    v45 = (unsigned int *)(v6 + 36336 + v43);
    while (1)
    {
      v46 = *v45;
      if ((*v45 & v44) != 0)
        break;
      v47 = __ldxr(v45);
      if (v47 == v46)
      {
        if (!__stxr(v46 | v44, v45))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v36 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v37 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 36376) + (v36 & 0xFFFFFFF8) + 8) + 8 * (v36 & 7));
    if (!v37)
      v37 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v6 + 36320), v36, v29, v30, v31, v32, v33, v34);
    v38 = 1 << (this >> 4);
    v39 = (unint64_t *)v37 + ((this >> 10) & 0xF);
    while (1)
    {
      v40 = *v39;
      if ((*v39 & v38) != 0)
        break;
      v41 = __ldxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 | v38, v39))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_41:
  *(_QWORD *)(v48[0] + 88) = v49;
}

void JSC::FunctionExecutable::visitOutputConstraints(unint64_t this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[8];
  unsigned __int8 *v38;
  char v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 10);
  v11 = *(_QWORD *)(this + 96);
  v12 = v11 >> 4;
  v13 = (v11 >> 10) & 0xF;
  if (v11)
  {
    if ((v11 & 8) != 0)
    {
      if ((*(_BYTE *)(v11 - 79) & 1) != 0)
        goto LABEL_12;
    }
    else if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v10 + 240)
           && ((*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * v13 + 0x28) >> v12) & 1) != 0)
    {
      goto LABEL_12;
    }
    LOBYTE(v38) = 0;
    v40 = 0;
    JSC::CodeBlock::propagateTransitions<JSC::SlotVisitor>((_QWORD *)v11, (uint64_t)v37, (uint64_t)a2, a4, a5, a6, a7, a8);
    JSC::CodeBlock::determineLiveness<JSC::SlotVisitor>(v11, (uint64_t)v37, (uint64_t)a2);
    if (v40 && v39)
    {
      v15 = v38;
      v16 = __ldxr(v38);
      if (v16 == 1)
      {
        if (!__stlxr(0, v38))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, v14, a4, a5, a6, a7, a8);
    }
  }
LABEL_12:
  v17 = *(_QWORD *)(this + 104);
  if (!v17)
    goto LABEL_13;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_13;
  }
  else if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
         && ((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) != 0)
  {
    goto LABEL_13;
  }
  LOBYTE(v38) = 0;
  v40 = 0;
  JSC::CodeBlock::propagateTransitions<JSC::SlotVisitor>((_QWORD *)v17, (uint64_t)v37, (uint64_t)a2, a4, a5, a6, a7, a8);
  JSC::CodeBlock::determineLiveness<JSC::SlotVisitor>(v17, (uint64_t)v37, (uint64_t)a2);
  if (v40 && v39)
  {
    v29 = v38;
    v30 = __ldxr(v38);
    if (v30 == 1)
    {
      if (!__stlxr(0, v38))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, v23, v24, v25, v26, v27, v28);
  }
LABEL_13:
  if (v11)
  {
    if ((v11 & 8) != 0)
    {
      if ((*(_BYTE *)(v11 - 79) & 1) == 0)
        return;
    }
    else if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
           || ((*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * v13 + 0x28) >> v12) & 1) == 0)
    {
      return;
    }
  }
  if (v17)
  {
    if ((v17 & 8) != 0)
    {
      if ((*(_BYTE *)(v17 - 79) & 1) == 0)
        return;
    }
    else if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
           || ((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) == 0)
    {
      return;
    }
  }
  if ((this & 8) != 0)
  {
    v31 = *(unsigned __int8 *)(this - 76);
    v32 = (v31 >> 3) & 0x1C;
    v33 = 1 << v31;
    v34 = (unsigned int *)(v10 + 36336 + v32);
    while (1)
    {
      v35 = *v34;
      if ((*v34 & v33) == 0)
        break;
      v36 = __ldxr(v34);
      if (v36 == v35)
      {
        if (!__stxr(v35 & ~v33, v34))
          return;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 36376)
                                + (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                + 8)
                    + 8 * (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 7));
    if (v18)
    {
      v19 = 1 << (this >> 4);
      v20 = (unint64_t *)(v18 + 8 * ((this >> 10) & 0xF));
      while (1)
      {
        v21 = *v20;
        if ((*v20 & v19) == 0)
          break;
        v22 = __ldxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 & ~v19, v20))
            return;
        }
        else
        {
          __clrex();
        }
      }
    }
  }
}

void JSC::FunctionExecutable::visitOutputConstraints(unint64_t this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[2];
  uint64_t v35;
  char v36;
  _BYTE v37[8];
  unsigned __int8 *v38;
  char v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v34[0] = a2;
  v34[1] = this;
  v36 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v35 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1989365ACLL);
  }
  *((_QWORD *)a2 + 11) = v34;
  v6 = *((_QWORD *)a2 + 10);
  v7 = *(_QWORD **)(this + 96);
  if (v7)
  {
    if (((*(uint64_t (**)(JSC::JSCell *, _QWORD, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(this + 96), a3) & 1) == 0)
    {
      LOBYTE(v38) = 0;
      v40 = 0;
      JSC::CodeBlock::propagateTransitions<JSC::AbstractSlotVisitor>(v7, (uint64_t)v37, a2);
      JSC::CodeBlock::determineLiveness<JSC::AbstractSlotVisitor>((uint64_t)v7, (uint64_t)v37, (uint64_t)a2);
      if (v40)
      {
        if (v39)
        {
          v13 = v38;
          v14 = __ldxr(v38);
          if (v14 == 1)
          {
            if (!__stlxr(0, v38))
              goto LABEL_12;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, (uint64_t)a3, v8, v9, v10, v11, v12);
        }
      }
    }
  }
LABEL_12:
  v15 = *(_QWORD **)(this + 104);
  if (!v15)
    goto LABEL_21;
  if (((*(uint64_t (**)(JSC::JSCell *, _QWORD, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(this + 104), a3) & 1) != 0)goto LABEL_21;
  LOBYTE(v38) = 0;
  v40 = 0;
  JSC::CodeBlock::propagateTransitions<JSC::AbstractSlotVisitor>(v15, (uint64_t)v37, a2);
  JSC::CodeBlock::determineLiveness<JSC::AbstractSlotVisitor>((uint64_t)v15, (uint64_t)v37, (uint64_t)a2);
  if (!v40 || !v39)
    goto LABEL_21;
  v21 = v38;
  v22 = __ldxr(v38);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v38))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, (uint64_t)a3, v16, v17, v18, v19, v20);
LABEL_21:
  if ((!v7
     || (*(unsigned int (**)(JSC::JSCell *, _QWORD *, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 40))(a2, v7, a3))&& (!v15|| (*(unsigned int (**)(JSC::JSCell *, _QWORD *, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 40))(a2, v15, a3)))
  {
    if ((this & 8) != 0)
    {
      v28 = *(unsigned __int8 *)(this - 76);
      v29 = (v28 >> 3) & 0x1C;
      v30 = 1 << v28;
      v31 = (unsigned int *)(v6 + 36336 + v29);
      while (1)
      {
        v32 = *v31;
        if ((*v31 & v30) == 0)
          break;
        v33 = __ldxr(v31);
        if (v33 == v32)
        {
          if (!__stxr(v32 & ~v30, v31))
            break;
        }
        else
        {
          __clrex();
        }
      }
    }
    else
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 36376)
                                  + (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                  + 8)
                      + 8 * (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 7));
      if (v23)
      {
        v24 = 1 << (this >> 4);
        v25 = (unint64_t *)(v23 + 8 * ((this >> 10) & 0xF));
        while (1)
        {
          v26 = *v25;
          if ((*v25 & v24) == 0)
            break;
          v27 = __ldxr(v25);
          if (v27 == v26)
          {
            if (!__stxr(v26 & ~v24, v25))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
  }
  *(_QWORD *)(v34[0] + 88) = v35;
}

uint64_t JSC::FunctionExecutable::FunctionExecutable(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, char a7)
{
  unint64_t v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 + 41592);
  v8 = *(unsigned __int8 *)(a5 + 51);
  v9 = 160;
  if ((a7 & 1) == 0)
  {
    if (((1 << *(_BYTE *)(a5 + 50)) & 0x940) != 0)
      v9 = 32;
    else
      v9 = 160;
  }
  v10 = (v8 >> 2) & 3;
  v11 = v8 >> 6;
  v12 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)result = v7 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  v13 = *a4;
  if (*a4)
    ++*(_DWORD *)(v13 + 8);
  *(_QWORD *)(result + 40) = v13;
  *(_QWORD *)(result + 48) = a4[1];
  *(_QWORD *)(result + 56) = a4[2];
  *(_BYTE *)(result + 64) = a6;
  *(_BYTE *)(result + 65) = 0;
  *(_WORD *)(result + 66) = 0;
  *(_BYTE *)(result + 68) = *(_BYTE *)(result + 68) & 0xFC | v10;
  *(_BYTE *)(result + 69) = 0;
  *(_WORD *)(result + 70) = *(_WORD *)(result + 70) & 0xF000 | v9 | ((_WORD)v11 << 8);
  *(_QWORD *)(result + 72) = 0;
  v14 = result;
  if (a3)
    v14 = a3;
  *(_QWORD *)(result + 80) = v14;
  *(_QWORD *)(result + 88) = a5;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 1;
  *(_QWORD *)(result + 120) = 0;
  if (!*a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1989366B4);
  }
  return result;
}

uint64_t JSC::FunctionExecutable::baselineCodeBlockFor(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  if (a2)
  {
    if (a2 != 1)
      goto LABEL_17;
    v2 = (uint64_t *)(a1 + 104);
  }
  else
  {
    v2 = (uint64_t *)(a1 + 96);
  }
  v3 = *v2;
  if (!v3)
    return 0;
  if (*(_QWORD *)(v3 + 192))
    result = *(_QWORD *)(v3 + 192);
  else
    result = v3;
  v5 = *(_QWORD *)(result + 120);
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 12);
    if ((v6 & 0xFE) != 2 && v6 != 0)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x198936750);
    }
  }
  return result;
}

uint64_t JSC::FunctionExecutable::ensureRareDataSlow(JSC::FunctionExecutable *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  WTF **v14;
  WTF *v15;
  WTF *v16;
  int v17;

  result = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 16) = -1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = -1;
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(result + 20) = *(_DWORD *)(v10 + 20);
    v17 = *(_DWORD *)(v10 + 48);
    v13 = *(_DWORD *)(v10 + 52);
    *(_DWORD *)(result + 48) = v17;
  }
  else
  {
    v11 = *((_QWORD *)this + 11);
    *(_DWORD *)(result + 8) = *(_DWORD *)(v11 + 12) & 0x7FFFFFFF;
    if ((*(_QWORD *)(v11 + 8) & 0x7FFFFFFF00000000) != 0)
      v12 = 1;
    else
      v12 = *((_DWORD *)this + 15) + 1;
    *(_DWORD *)(result + 12) = (*(_DWORD *)(v11 + 24) & 0x7FFFFFFF) + v12;
    *(_DWORD *)(result + 20) = *(_DWORD *)(v11 + 36) & 0x7FFFFFFF;
    *(_DWORD *)(result + 48) = *(_DWORD *)(v11 + 16) & 0x7FFFFFFF;
    v13 = *(_DWORD *)(v11 + 40) & 0x7FFFFFFF;
  }
  *(_DWORD *)(result + 52) = v13;
  __dmb(0xAu);
  v14 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = result;
  if (v14)
  {
    v15 = v14[4];
    v14[4] = 0;
    if (v15)
    {
      if (*(_QWORD *)v15)
        WTF::fastFree(*(_QWORD *)v15 - 16, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree((unint64_t)v15, v3, v4, v5, v6, v7, v8, v9);
    }
    v16 = *v14;
    *v14 = 0;
    if (v16)
      WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v16, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree((unint64_t)v14, v3, v4, v5, v6, v7, v8, v9);
    return *((_QWORD *)this + 9);
  }
  return result;
}

unint64_t JSC::FunctionExecutable::toStringSlow(JSC::FunctionExecutable *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  unsigned int v17;
  unint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  JSC::JSCell *v37;
  JSC::VM *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  const char *v56;
  __int128 v57;
  uint64_t v58[2];
  _QWORD v59[2];
  JSC::JSCell *v60;
  JSC::VM *v61;
  JSC::VM *v62;
  const char *v63;

  v3 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v62 = v3;
  v60 = this;
  v61 = v3;
  v59[0] = &v62;
  v59[1] = &v60;
  v4 = (_QWORD *)*((_QWORD *)this + 11);
  v5 = v4[2];
  if ((v5 & 0x80000000) != 0)
  {
    v56 = "function ";
    *(_QWORD *)&v57 = 10;
    v58[0] = (uint64_t)"() {\n    [native code]\n}";
    v58[1] = 25;
    v47 = JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::AtomString const&,WTF::ASCIILiteral>(a2, (uint64_t *)&v56, v4 + 9, v58);
    return JSC::FunctionExecutable::toStringSlow(JSC::JSGlobalObject *)::$_1::operator()((uint64_t)v59, v47, v48, v49, v50, v51, v52, v53);
  }
  v6 = v4[4];
  v7 = v4[11];
  if (v7)
  {
    v8 = *(int **)v7;
    if (*(_QWORD *)v7)
    {
      ++v8[2];
      v56 = (const char *)v8;
      v57 = *(_OWORD *)(v7 + 8);
      v54 = (char *)JSC::UnlinkedSourceCode::view(&v56);
      v35 = JSC::jsString((uint64_t)v3, v54, v55);
      JSC::FunctionExecutable::toStringSlow(JSC::JSGlobalObject *)::$_0::operator()((unint64_t *)&v60, v35);
      if (v8[2] == 1)
        (*(void (**)(int *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
      return v35;
    }
  }
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 48);
    LODWORD(v11) = *(_DWORD *)(v9 + 20);
  }
  else
  {
    v10 = v5 & 0x7FFFFFFF;
    v11 = HIDWORD(v6) & 0x7FFFFFFF;
  }
  v13 = *((_DWORD *)this + 12);
  v12 = *((_DWORD *)this + 13);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
  if (v15 <= v10)
  {
    result = 0;
    v20 = *((_QWORD *)a2 + 7);
    v58[0] = v20;
    v21 = 0x100000000;
    v16 = (int8x16_t *)"";
    goto LABEL_15;
  }
  v16 = (int8x16_t *)v14;
  v17 = v11 + v12 - (v10 + v13);
  if (v15 - v10 <= v17)
  {
    v17 = v15 - v10;
    if (!v10)
    {
      result = v15;
      goto LABEL_12;
    }
  }
  result = v17;
  v19 = v15 - (unint64_t)v10;
  if ((v15 & 0xFF00000000) != 0)
  {
    if (v19 >= result)
    {
      v16 = (int8x16_t *)((char *)v16 + v10);
      result |= 0x100000000uLL;
LABEL_12:
      v20 = *((_QWORD *)a2 + 7);
      v58[0] = v20;
      if ((result & 0x80000000) != 0)
        goto LABEL_35;
      v21 = result;
LABEL_15:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>>(result, (v21 & 0xFF00000000) != 0, v16, v21, (int **)&v56);
      v63 = v56;
      if (v56)
      {
        v35 = JSC::jsNontrivialString(v20, (JSC::VM *)&v63, v22, v23, v24, v25, v26, v27);
        v36 = (WTF::StringImpl *)v63;
        v63 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v28, v29, v30, v31, v32, v33, v34);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        goto LABEL_19;
      }
LABEL_35:
      v35 = (uint64_t)JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)v58);
LABEL_19:
      if (*((_DWORD *)v62 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)v28, v29, v30, v31, v32, v33, v34))
      {
        return 0;
      }
      v37 = v60;
      __dmb(0xAu);
      v38 = v61;
      *(_QWORD *)(*((_QWORD *)v37 + 9) + 40) = v35;
      if (v35 && v37 && *((_DWORD *)v38 + 190) >= *((unsigned __int8 *)v37 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v38 + 192, (unint64_t)v37);
      return v35;
    }
  }
  else if (v19 >= result)
  {
    v16 = (int8x16_t *)((char *)v16 + 2 * v10);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t JSC::FunctionExecutable::toStringSlow(JSC::JSGlobalObject *)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v8 = a2;
  v10 = **(JSC::VM ***)a1;
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v11 = *(unint64_t **)(a1 + 8);
  v12 = *v11;
  __dmb(0xAu);
  v13 = v11[1];
  *(_QWORD *)(*(_QWORD *)(v12 + 72) + 40) = v8;
  if (v8 && v12 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath(v13 + 192, v12);
  return v8;
}

uint64_t JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::AtomString const&,WTF::ASCIILiteral>(JSC::JSGlobalObject *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;

  v5 = *((_QWORD *)a1 + 7);
  v32 = v5;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(a2, a3, a4, (int **)&v31);
  if (v31)
    v12 = JSC::jsNontrivialString(v5, (JSC::VM *)&v31, v6, v7, v8, v9, v10, v11);
  else
    v12 = (uint64_t)JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v32);
  v20 = v12;
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v20;
}

uint64_t JSC::FunctionExecutable::toStringSlow(JSC::JSGlobalObject *)::$_0::operator()(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = *a1;
  __dmb(0xAu);
  v4 = a1[1];
  *(_QWORD *)(*(_QWORD *)(v3 + 72) + 40) = a2;
  if (a2 && v3 && *(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v3 + 7))
  {
    v6 = a2;
    JSC::Heap::writeBarrierSlowPath(v4 + 192, v3);
    return v6;
  }
  return a2;
}

const char *JSC::UnlinkedSourceCode::view(const char **this)
{
  const char *result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  result = *this;
  if (result)
  {
    v3 = *((unsigned int *)this + 2);
    v4 = *((_DWORD *)this + 3);
    result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 24))(result);
    v6 = v5;
    if (v5 <= v3)
      return "";
    v7 = v4 - v3;
    if ((int)v5 - (int)v3 > (v4 - v3) || (v7 = v5 - v3, (_DWORD)v3))
    {
      v8 = v7;
      v9 = v6 - v3;
      if ((v6 & 0xFF00000000) != 0)
      {
        if (v9 >= v8)
        {
          result += v3;
          return result;
        }
      }
      else if (v9 >= v8)
      {
        result += 2 * v3;
        return result;
      }
      __break(1u);
    }
  }
  return result;
}

_QWORD *JSC::FunctionExecutable::ensureTemplateObjectMap(JSC::FunctionExecutable *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    v2 = JSC::FunctionExecutable::ensureRareDataSlow(this);
  v5 = *(_QWORD **)(v2 + 32);
  v3 = (_QWORD **)(v2 + 32);
  v4 = v5;
  if (!v5)
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v7 = 0;
    v21 = v7;
    __dmb(0xAu);
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v3, &v21, v8, v9, v10, v11, v12, v13);
    v4 = *v3;
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v21, v14, v15, v16, v17, v18, v19, v20);
  }
  return v4;
}

uint64_t JSC::FunctionExecutableDump::dump(WTF **this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  WTF *v5;
  const WTF::AtomString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  JSC::CodeBlock *v14;
  WTF::PrintStream *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF::PrintStream *v25;
  WTF::PrintStream *v26;
  JSC::CodeBlock *v27;
  WTF::PrintStream *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  WTF *v41;

  v4 = (WTF::PrintStream *)(*((_QWORD *)*this + 11) + 80);
  v5 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v5, v4, v6, v7, v8, v9, v10, v11, v12, v13);
  WTF::PrintStream::printf(v5, "%s", "#");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v14 = (JSC::CodeBlock *)*((_QWORD *)*this + 12);
  if (v14)
  {
    JSC::CodeBlock::hashAsStringIfPossible(v14, (uint64_t *)&v41);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    if (v41)
      v16 = (char *)v41 + 16;
    else
      v16 = 0;
    WTF::PrintStream::printf(v15, "%s", v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v24 = v41;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
      else
        --*(_DWORD *)v24;
    }
  }
  else
  {
    v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v25, "%s", "<nogen>");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v26, "%s", "/");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v27 = (JSC::CodeBlock *)*((_QWORD *)*this + 13);
  if (v27)
  {
    JSC::CodeBlock::hashAsStringIfPossible(v27, (uint64_t *)&v41);
    v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    if (v41)
      v29 = (char *)v41 + 16;
    else
      v29 = 0;
    WTF::PrintStream::printf(v28, "%s", v29);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v37 = v41;
    v41 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
      else
        --*(_DWORD *)v37;
    }
  }
  else
  {
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v38, "%s", "<nogen>");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v41 = *this;
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(v39, ":[", (const void **)&v41, "]");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t *JSC::FunctionHasExecutedCache::hasExecutedAtOffset(JSC::FunctionHasExecutedCache *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  JSC::FunctionHasExecutedCache *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ~((unint64_t)a2 << 32) + a2;
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v3 + 24 * v8;
    v11 = *(_DWORD *)(v10 + 8);
    if (!v11)
      break;
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v10 = v3 + 24 * v12;
      goto LABEL_9;
    }
LABEL_7:
    v8 = (v8 + i) & v4;
  }
  if (*(_QWORD *)v10 != a2)
    goto LABEL_7;
  v12 = *(_DWORD *)(v3 - 4);
LABEL_9:
  if (v10 == v3 + 24 * v12)
    return 0;
  v13 = *(_QWORD *)(v10 + 16);
  if (!v13)
  {
    v16 = 0;
    v14 = 0;
LABEL_19:
    v15 = v13 + 16 * v14;
    goto LABEL_20;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 16 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
    v16 = v13 + 16 * v14;
    goto LABEL_19;
  }
  v16 = *(_QWORD *)(v10 + 16);
  if ((_DWORD)v14)
  {
    v17 = 16 * v14;
    v16 = *(_QWORD *)(v10 + 16);
    while ((*(_DWORD *)(v16 + 8) - 1) <= 1)
    {
      v16 += 16;
      v17 -= 16;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_20:
  if (v13)
    v13 += 16 * *(unsigned int *)(v13 - 4);
  if (v13 != v16)
  {
    v18 = 0;
    v19 = -1;
    while (!*(_DWORD *)(v16 + 8))
    {
      if (*(_DWORD *)v16 <= a3)
      {
        v20 = *(_DWORD *)(v16 + 4);
        if (v20 >= a3 && v20 - *(_DWORD *)v16 < v19)
        {
          v18 = *(_BYTE *)(v16 + 12) != 0;
          v19 = v20 - *(_DWORD *)v16;
        }
      }
      v21 = v16 + 16;
      v16 = v15;
      if (v21 != v15)
      {
        v16 = v21;
        while ((*(_DWORD *)(v16 + 8) - 1) <= 1)
        {
          v16 += 16;
          if (v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (v16 == v13)
        return (uint64_t *)v18;
    }
    v23 = (JSC::FunctionHasExecutedCache *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::FunctionHasExecutedCache::insertUnexecutedRange(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  return 0;
}

uint64_t *JSC::FunctionHasExecutedCache::insertUnexecutedRange(JSC::FunctionHasExecutedCache *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD v22[3];

  v19 = 0;
  v20 = a2;
  v21 = 0;
  WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>((uint64_t *)this, &v20, &v19, a4, a5, a6, a7, a8, (uint64_t)v22);
  v17 = v22[0];
  if (v19)
    WTF::fastFree(v19 - 16, v10, v11, v12, v13, v14, v15, v16);
  v20 = a3 | (unint64_t)(a4 << 32);
  v21 = 0;
  LOBYTE(v19) = 0;
  return WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>((uint64_t *)(v17 + 16), &v20, &v19, (uint64_t)v22);
}

void WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  if (a2[2])
  {
    v37 = std::__throw_bad_variant_access[abi:sn180100]();
    WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(v37);
    return;
  }
  v16 = 0;
  v17 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = ((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27));
  for (i = 1; ; ++i)
  {
    v22 = v20 & v15;
    v23 = v13 + 24 * v22;
    v24 = *(_DWORD *)(v23 + 8);
    if (!v24)
      break;
    if (v24 == 2)
    {
      v16 = v13 + 24 * v22;
    }
    else if (v24 == 1)
    {
      if (v16)
      {
        *(_QWORD *)(v16 + 8) = 1;
        *(_QWORD *)(v16 + 16) = 0;
        --*(_DWORD *)(*a1 - 16);
        v23 = v16;
      }
      *(_OWORD *)v23 = *(_OWORD *)a2;
      v25 = *a3;
      *a3 = 0;
      v26 = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 16) = v25;
      if (v26)
        WTF::fastFree(v26 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v27 = *a1;
      if (*a1)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v32 = *a1;
      if (*a1)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 <= 2 * v34)
          goto LABEL_31;
      }
      else if (3 * v35 <= 4 * v34)
      {
        if (!(_DWORD)v35)
        {
          v36 = 8;
LABEL_34:
          v23 = WTF::HashTable<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>>::rehash(a1, v36, v23);
          v32 = *a1;
          if (*a1)
            LODWORD(v35) = *(_DWORD *)(v32 - 4);
          else
            LODWORD(v35) = 0;
          goto LABEL_37;
        }
LABEL_31:
        v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
        goto LABEL_34;
      }
LABEL_37:
      v31 = v32 + 24 * v35;
      v30 = 1;
      goto LABEL_38;
    }
LABEL_13:
    v20 = i + v22;
  }
  if (*(_QWORD *)v23 != *(_QWORD *)a2)
    goto LABEL_13;
  if ((v14 & 1) != 0)
    v29 = 0;
  else
    v29 = *(_DWORD *)(v13 - 4);
  v30 = 0;
  v31 = v13 + 24 * v29;
LABEL_38:
  *(_QWORD *)a9 = v23;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v30;
}

uint64_t *WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  JSC::FunctionHasExecutedCache *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  if (a2[2])
  {
    v30 = (JSC::FunctionHasExecutedCache *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)JSC::FunctionHasExecutedCache::removeUnexecutedRange(v30, v31, v32, v33);
  }
  v11 = 0;
  v12 = a2[1];
  v13 = v12 * *a2;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *((_DWORD *)v16 + 2);
    if (!v17)
      break;
    if (v17 == 2)
    {
      v11 = v8 + 16 * v15;
    }
    else if (v17 == 1)
    {
      if (v11)
      {
        *(_DWORD *)(v11 + 8) = 1;
        *(_BYTE *)(v11 + 12) = 0;
        --*(_DWORD *)(*v6 - 16);
        v16 = (uint64_t *)v11;
      }
      v19 = *(_QWORD *)a2;
      *((_DWORD *)v16 + 2) = a2[2];
      *v16 = v19;
      *((_BYTE *)v16 + 12) = *a3;
      v20 = *v6;
      if (*v6)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v25 = *v6;
      if (*v6)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 <= 2 * v27)
          goto LABEL_33;
      }
      else if (3 * v28 <= 4 * v27)
      {
        if (!(_DWORD)v28)
        {
          v29 = 8;
LABEL_36:
          result = (uint64_t *)WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(v6, v29, v16);
          v16 = result;
          v25 = *v6;
          if (*v6)
            v28 = *(unsigned int *)(v25 - 4);
          else
            v28 = 0;
          goto LABEL_39;
        }
LABEL_33:
        v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
        goto LABEL_36;
      }
LABEL_39:
      v24 = v25 + 16 * v28;
      v23 = 1;
      goto LABEL_40;
    }
LABEL_17:
    v13 = i + v15;
  }
  if (*(_DWORD *)v16 != *a2 || *((_DWORD *)v16 + 1) != v12)
    goto LABEL_17;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  v23 = 0;
  v24 = v8 + 16 * v22;
LABEL_40:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

uint64_t *JSC::FunctionHasExecutedCache::removeUnexecutedRange(uint64_t *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;

  v4 = *this;
  if (!*this)
    return this;
  v7 = *(_DWORD *)(v4 - 8);
  v8 = ~((unint64_t)a2 << 32) + a2;
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = v7 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
  for (i = 1; ; ++i)
  {
    v13 = v4 + 24 * v11;
    v14 = *(_DWORD *)(v13 + 8);
    if (!v14)
      break;
    if (v14 == 1)
    {
      v15 = *(_DWORD *)(v4 - 4);
      v13 = v4 + 24 * v15;
      goto LABEL_9;
    }
LABEL_7:
    v11 = (v11 + i) & v7;
  }
  if (*(_QWORD *)v13 != a2)
    goto LABEL_7;
  v15 = *(_DWORD *)(v4 - 4);
LABEL_9:
  if (v13 == v4 + 24 * v15)
    return this;
  v18 = *(_QWORD *)(v13 + 16);
  v17 = (uint64_t *)(v13 + 16);
  v16 = v18;
  if (v18
    || (this = (uint64_t *)WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(v17, 8u, 0), (v16 = *v17) != 0))
  {
    v19 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
  v21 = a4 * a3;
  v22 = 1;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v16 + 16 * v23;
    v25 = *(_DWORD *)(v24 + 8);
    if (!v25)
    {
      if (*(_DWORD *)v24 == a3 && *(_DWORD *)(v24 + 4) == (_DWORD)a4)
      {
        *(_BYTE *)(v16 + 16 * v23 + 12) = 1;
        return this;
      }
      goto LABEL_25;
    }
    if (v25 == 2)
    {
      v20 = v16 + 16 * v23;
      goto LABEL_25;
    }
    if (v25 != 1)
    {
LABEL_25:
      v21 = v22 + v23;
      ++v22;
      continue;
    }
    break;
  }
  if (v20)
  {
    *(_DWORD *)(v20 + 8) = 1;
    *(_BYTE *)(v20 + 12) = 0;
    --*(_DWORD *)(*v17 - 16);
    v24 = v20;
  }
  *(_QWORD *)v24 = (a4 << 32) | a3;
  *(_DWORD *)(v24 + 8) = 0;
  v27 = 1;
  *(_BYTE *)(v24 + 12) = 1;
  v28 = *v17;
  if (*v17)
    v27 = *(_DWORD *)(v28 - 12) + 1;
  *(_DWORD *)(v28 - 12) = v27;
  v29 = *v17;
  if (*v17)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 <= 0x400)
  {
    if (3 * v32 > 4 * v31)
      return this;
    if ((_DWORD)v32)
LABEL_37:
      v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    else
      v33 = 8;
    return (uint64_t *)WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(v17, v33, (_DWORD *)v24);
  }
  if (v32 <= 2 * v31)
    goto LABEL_37;
  return this;
}

unint64_t JSC::FunctionHasExecutedCache::getFunctionRanges@<X0>(unint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC *v28;
  JSC::JSGlobalObject *v29;
  JSC::CallFrame *v30;
  uint64_t v31;
  int v32;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return this;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = ~((unint64_t)a2 << 32) + a2;
  v7 = 9 * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v4 + 24 * v9;
    v12 = *(_DWORD *)(v11 + 8);
    if (!v12)
      break;
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(v4 - 4);
      v11 = v4 + 24 * v13;
      goto LABEL_9;
    }
LABEL_7:
    v9 = (v9 + i) & v5;
  }
  if (*(_QWORD *)v11 != a2)
    goto LABEL_7;
  v13 = *(_DWORD *)(v4 - 4);
LABEL_9:
  if (v11 == v4 + 24 * v13)
    return this;
  v14 = *(_QWORD *)(v11 + 16);
  if (!v14)
  {
    v17 = 0;
    v15 = 0;
LABEL_19:
    v16 = v14 + 16 * v15;
    goto LABEL_20;
  }
  v15 = *(unsigned int *)(v14 - 4);
  v16 = v14 + 16 * v15;
  if (!*(_DWORD *)(v14 - 12))
  {
    v17 = v14 + 16 * v15;
    goto LABEL_19;
  }
  v17 = *(_QWORD *)(v11 + 16);
  if ((_DWORD)v15)
  {
    v18 = 16 * v15;
    v17 = *(_QWORD *)(v11 + 16);
    while ((*(_DWORD *)(v17 + 8) - 1) <= 1)
    {
      v17 += 16;
      v18 -= 16;
      if (!v18)
      {
        v17 = v16;
        break;
      }
    }
  }
LABEL_20:
  if (v14)
    v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
  else
    v19 = 0;
  if (v19 != v17)
  {
    v20 = 0;
    v21 = 0;
    while (!*(_DWORD *)(v17 + 8))
    {
      LOBYTE(v31) = *(_BYTE *)(v17 + 12);
      HIDWORD(v31) = *(_DWORD *)v17;
      v32 = *(_DWORD *)(v17 + 4);
      if (v21 == *(_DWORD *)(a3 + 8))
      {
        this = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)&v31);
        v22 = *(_DWORD *)(a3 + 12);
        v20 = *(_QWORD *)a3;
        v23 = *(_QWORD *)a3 + 12 * v22;
        v24 = *(_DWORD *)(this + 8);
        *(_QWORD *)v23 = *(_QWORD *)this;
        *(_DWORD *)(v23 + 8) = v24;
      }
      else
      {
        v25 = v20 + 12 * v21;
        v26 = v31;
        *(_DWORD *)(v25 + 8) = v32;
        *(_QWORD *)v25 = v26;
        v22 = *(_DWORD *)(a3 + 12);
      }
      v21 = v22 + 1;
      *(_DWORD *)(a3 + 12) = v21;
      v27 = v17 + 16;
      v17 = v16;
      if (v27 != v16)
      {
        v17 = v27;
        while ((*(_DWORD *)(v17 + 8) - 1) <= 1)
        {
          v17 += 16;
          if (v17 == v16)
          {
            v17 = v16;
            break;
          }
        }
      }
      if (v17 == v19)
        return this;
    }
    v28 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::callFunctionPrototype(v28, v29, v30);
  }
  return this;
}

uint64_t JSC::callFunctionPrototype(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return 10;
}

void JSC::FunctionPrototype::addFunctionProperties(JSC::FunctionPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSFunction **a4, JSC::JSFunction **a5, JSC::JSFunction **a6)
{
  JSC::BuiltinExecutables **v12;
  unint64_t *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  double v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  JSC::JSFunction *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  double v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  JSC::JSFunction *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  unint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  WTF::StringImpl *v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  unint64_t v93;
  unint64_t SlowCase;
  unint64_t v95;
  int v96;
  JSC::VM *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t HasInstanceCodeExecutable;
  WTF::StringImpl *v116;
  uint64_t v117;
  double v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  JSC::JSFunction *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  __int128 v174;

  v12 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v13 = (unint64_t *)((char *)a2 + 37936);
  v14 = *((_QWORD *)a2 + 5244);
  v15 = *(WTF::StringImpl **)(*(_QWORD *)(v14 + 48) + 2136);
  if (!v15)
  {
    v172 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v172, 0, (uint64_t)JSC::functionProtoFuncToString, 0, 149, 4u);
    goto LABEL_10;
  }
  v16 = *(_DWORD *)v15 + 2;
  *(_DWORD *)v15 = v16;
  v172 = v15;
  if ((*((_BYTE *)v15 + 16) & 0x20) != 0)
  {
    v17 = *(WTF::StringImpl **)(v14 + 872);
    if (!v17)
      goto LABEL_5;
    v16 = *(_DWORD *)v17;
  }
  else
  {
    v17 = v15;
  }
  *(_DWORD *)v17 = v16 + 2;
LABEL_5:
  v173 = v17;
  v25 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v173, (uint64_t)JSC::functionProtoFuncToString, 0, 149, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v27 = v173;
  v173 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v15, v25, 4, v22, v23, v24, v26);
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::~StringImpl(v15, v28, v29, v30, v31, v32, v33, v34);
    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
  }
  else
  {
    *(_DWORD *)v15 -= 2;
  }
LABEL_10:
  v35 = *(_QWORD *)(*(_QWORD *)(v13[502] + 48) + 80);
  v36 = JSC::BuiltinExecutables::functionPrototypeApplyCodeExecutable(*v12);
  v37 = (WTF::StringImpl *)*((_QWORD *)*v12 + 1);
  ++*((_DWORD *)v37 + 2);
  v173 = v37;
  v174 = xmmword_199124E30;
  v46 = JSC::UnlinkedFunctionExecutable::link(v36, (uint64_t)a2, 0, (uint64_t)&v173, 0, 0, 0, v38, COERCE_DOUBLE(0x187D00001815), v39, v40);
  v47 = v173;
  v173 = 0;
  if (v47)
  {
    if (*((_DWORD *)v47 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
    else
      --*((_DWORD *)v47 + 2);
  }
  v48 = (JSC::JSFunction *)JSC::JSFunction::create((uint64_t)a2, v46, a3, v41, v42, v43, v44, v45);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v35, (uint64_t)v48, 4, v49, v50, v51, v52);
  *a5 = v48;
  v53 = *(_QWORD *)(*(_QWORD *)(v13[502] + 48) + 320);
  v54 = JSC::BuiltinExecutables::functionPrototypeCallCodeExecutable(*v12);
  v55 = (WTF::StringImpl *)*((_QWORD *)*v12 + 1);
  ++*((_DWORD *)v55 + 2);
  v173 = v55;
  v174 = xmmword_199124F70;
  v64 = JSC::UnlinkedFunctionExecutable::link(v54, (uint64_t)a2, 0, (uint64_t)&v173, 0, 0, 0, v56, COERCE_DOUBLE(0x41CD000040F7), v57, v58);
  v65 = v173;
  v173 = 0;
  if (v65)
  {
    if (*((_DWORD *)v65 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
    else
      --*((_DWORD *)v65 + 2);
  }
  v66 = (JSC::JSFunction *)JSC::JSFunction::create((uint64_t)a2, v64, a3, v59, v60, v61, v62, v63);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v53, (uint64_t)v66, 4, v67, v68, v69, v70);
  *a4 = v66;
  v71 = v13[502];
  v72 = *(WTF::StringImpl **)(v71 + 912);
  if (!v72)
  {
    v173 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v173, 1, (uint64_t)JSC::functionProtoFuncBind, 0, 150, 4u);
    goto LABEL_25;
  }
  v73 = *(_DWORD *)v72 + 2;
  *(_DWORD *)v72 = v73;
  if ((*((_BYTE *)v72 + 16) & 0x20) != 0)
  {
    v74 = *(WTF::StringImpl **)(v71 + 872);
    if (!v74)
      goto LABEL_20;
    v73 = *(_DWORD *)v74;
  }
  else
  {
    v74 = v72;
  }
  *(_DWORD *)v74 = v73 + 2;
LABEL_20:
  v173 = v74;
  v82 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v173, (uint64_t)JSC::functionProtoFuncBind, 0, 150, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v84 = v173;
  v173 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v72, v82, 4, v79, v80, v81, v83);
  if (*(_DWORD *)v72 == 2)
  {
    WTF::StringImpl::~StringImpl(v72, v85, v86, v87, v88, v89, v90, v91);
    WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
  }
  else
  {
    *(_DWORD *)v72 -= 2;
  }
LABEL_25:
  v93 = *(_QWORD *)(v13[502] + 880);
  SlowCase = *v13;
  if (*v13 < v13[1])
  {
LABEL_26:
    *v13 = SlowCase + 32;
    goto LABEL_27;
  }
  SlowCase = v13[2];
  if ((SlowCase & 1) == 0)
  {
    v164 = *(_QWORD *)(SlowCase + 8) ^ v13[3];
    v13[1] = SlowCase + HIDWORD(v164);
    v13[2] = SlowCase + (int)v164;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM(a2, v85, v86, SlowCase, v88, v89, v90, v91);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 37912, (uint64_t)a2 + 192, 32, 0, 0, v166, v167, v168);
LABEL_27:
  *(_DWORD *)SlowCase = 0;
  v95 = v13[450];
  v96 = *(_DWORD *)(v95 + 8);
  *(_DWORD *)SlowCase = v95 >> 4;
  *(_DWORD *)(SlowCase + 4) = v96;
  *(_QWORD *)(SlowCase + 8) = JSC::argumentsGetter;
  *(_QWORD *)(SlowCase + 16) = JSC::callerAndArgumentsSetter;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomGetterSetterWithoutTransition((unsigned int *)this, (uint64_t)a2, v93, SlowCase, (const JSC::PropertyTable *)0x24, v89, v90, v91, v92);
  v104 = *(_QWORD *)(v13[502] + 984);
  v105 = *v13;
  if (*v13 < v13[1])
    goto LABEL_30;
  v105 = v13[2];
  if ((v105 & 1) == 0)
  {
    v165 = *(_QWORD *)(v105 + 8) ^ v13[3];
    v13[1] = v105 + HIDWORD(v165);
    v13[2] = v105 + (int)v165;
LABEL_30:
    *v13 = v105 + 32;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM(a2, v97, v98, v105, v99, v100, v101, v102);
  v105 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 37912, (uint64_t)a2 + 192, 32, 0, 0, v169, v170, v171);
LABEL_31:
  *(_DWORD *)v105 = 0;
  v106 = v13[450];
  v107 = *(_DWORD *)(v106 + 8);
  *(_DWORD *)v105 = v106 >> 4;
  *(_DWORD *)(v105 + 4) = v107;
  *(_QWORD *)(v105 + 8) = JSC::callerGetter;
  *(_QWORD *)(v105 + 16) = JSC::callerAndArgumentsSetter;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomGetterSetterWithoutTransition((unsigned int *)this, (uint64_t)a2, v104, v105, (const JSC::PropertyTable *)0x24, v100, v101, v102, v103);
  HasInstanceCodeExecutable = JSC::BuiltinExecutables::functionPrototypeSymbolHasInstanceCodeExecutable(*v12, v108, v109, v110, v111, v112, v113, v114);
  v116 = (WTF::StringImpl *)*((_QWORD *)*v12 + 1);
  ++*((_DWORD *)v116 + 2);
  v173 = v116;
  v174 = xmmword_1991259D0;
  v125 = JSC::UnlinkedFunctionExecutable::link(HasInstanceCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v173, 0, 0, 0, v117, COERCE_DOUBLE(0x26F5D00026E87), v118, v119);
  v126 = v173;
  v173 = 0;
  if (v126)
  {
    if (*((_DWORD *)v126 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v126 + 8))(v126);
    else
      --*((_DWORD *)v126 + 2);
  }
  v127 = (JSC::JSFunction *)JSC::JSFunction::create((uint64_t)a2, v125, a3, v120, v121, v122, v123, v124);
  *a6 = v127;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(v13[502] + 2688), (uint64_t)v127, 14, v128, v129, v130, v131);
}

unint64_t JSC::functionProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  JSC::VM *v53;
  _QWORD v54[3];
  WTF::StringImpl *v55;

  v53 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError(this, &v53);
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 == 26)
    return JSC::JSFunction::toString(*((JSC::JSFunction **)a2 + 5), this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (v11 - 27 > 1)
  {
    if (v11 >= 0x17)
    {
      if ((v11 & 0xFE) == 0x1A)
        return JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::ASCIILiteral const&,WTF::ASCIILiteral>(this, (uint64_t)"function ", 10, *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)), *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 8), (uint64_t)"() {\n    [native code]\n}", 25);
      if ((*(_BYTE *)(v10 + 6) & 4) != 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(v54, *((_QWORD *)a2 + 5));
        if (LOBYTE(v54[0]))
          return JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::ASCIILiteral const&,WTF::ASCIILiteral>(this, (uint64_t)"function ", 10, *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)), *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 8), (uint64_t)"() {\n    [native code]\n}", 25);
      }
    }
    return JSC::throwTypeError(this, &v53);
  }
  JSC::InternalFunction::name(*((JSC::InternalFunction **)a2 + 5), (uint64_t)a3, a4, a5, a6, a7, a8, (int **)&v52, a9);
  v15 = *((_QWORD *)this + 7);
  v54[0] = v15;
  if (v52)
  {
    v16 = *((_DWORD *)v52 + 1);
    if (v16 < 0)
    {
LABEL_24:
      v55 = 0;
LABEL_25:
      v26 = (uint64_t)JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v54);
      goto LABEL_16;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = __OFADD__(v16, 24);
  v18 = v16 + 24;
  if (v17 || __OFADD__(v18, 9))
    goto LABEL_24;
  v19 = !v52 || (*((_BYTE *)v52 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v18 + 9), v19, (int8x16_t *)"function ", 9u, (uint64_t)v52, (int8x16_t *)"() {\n    [native code]\n}", 0x18u, (int **)&v55);
  if (!v55)
    goto LABEL_25;
  v26 = JSC::jsNontrivialString(v15, (JSC::VM *)&v55, v20, v21, v22, v23, v24, v25);
LABEL_16:
  v13 = v26;
  v34 = v55;
  v55 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = v52;
  v52 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return v13;
}

uint64_t JSC::functionProtoFuncBind(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  JSC::Structure *v26;
  uint64_t (*v27)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int OwnPropertySlotByIndex;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  JSC::VM *v70;
  unint64_t v71;
  char OwnStaticPropertySlot;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v79;
  BOOL v80;
  BOOL v81;
  _QWORD *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  double v87;
  JSC::VM *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;

  v10 = *((_QWORD *)this + 7);
  v88 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v88, (uint64_t)"|this| is not a function inside Function.prototype.bind", 56);
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 < 0x17)
    return JSC::throwTypeError((unint64_t)this, &v88, (uint64_t)"|this| is not a function inside Function.prototype.bind", 56);
  if ((v12 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v11 + 6) & 4) == 0)
      return JSC::throwTypeError((unint64_t)this, &v88, (uint64_t)"|this| is not a function inside Function.prototype.bind", 56);
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(&v89, *((_QWORD *)a2 + 5));
    if (!(_BYTE)v89)
      return JSC::throwTypeError((unint64_t)this, &v88, (uint64_t)"|this| is not a function inside Function.prototype.bind", 56);
  }
  v15 = *((int *)a2 + 8);
  if ((unint64_t)(v15 - 1) >= 2)
  {
    v19 = *((_QWORD *)a2 + 6);
    v17 = (char *)a2 + 56;
    v16 = (v15 - 2);
    v18 = v15 - 2;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    if (v15 == 2)
      v19 = *((_QWORD *)a2 + 6);
    else
      v19 = 10;
  }
  if (v11 && *(_BYTE *)(v11 + 5) == 26)
  {
    v20 = *(_QWORD *)(v11 + 24);
    v21 = (v20 & 1) != 0 ? *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 48) : *(_QWORD *)(v11 + 24);
    if (*(_BYTE *)(v21 + 5) != 8
      || &JSC::JSBoundFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
    {
      a7 = 0;
      v22 = NAN;
      if ((v20 & 1) != 0)
      {
        v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 64) & 0xC) != 0)
            goto LABEL_22;
          a7 = 0;
          v22 = NAN;
        }
      }
LABEL_18:
      *(double *)a9.i64 = v22;
      return JSC::JSBoundFunction::create((JSC::VM *)v10, (unint64_t)this, (JSC::ExecutableBase *)v11, v19, v17, v16, a7, a8, a9);
    }
  }
LABEL_22:
  v24 = (_QWORD *)(v10 + 41952);
  v25 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768);
  v91 = 0xFFFFFFFF00000000;
  v95 = 0x20000;
  v93 = 0;
  v94 = 0;
  v92 = v11;
  v96 = 0;
  LOBYTE(v97) = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v26 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
  v27 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *((unsigned int *)v26 + 19) + 0x68);
  if (v27 != JSC::JSObject::getOwnPropertySlot)
  {
    OwnPropertySlotByIndex = ((uint64_t (*)(uint64_t, JSC *, unint64_t, uint64_t *))v27)(v11, this, v25, &v89);
    goto LABEL_65;
  }
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!(v25 >> 4)
    || ((v25 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_58;
  }
  v29 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x58);
  if (!v29)
  {
    v40 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x40);
    if (!v40 || *(_BYTE *)(v40 + 5) != 1 && *(_DWORD *)(v40 + 80) < 2u)
      goto LABEL_58;
    v86 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
    v41 = v25;
    JSC::Structure::materializePropertyTable(v26, v28, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v25 = v41;
    v24 = (_QWORD *)(v10 + 41952);
    v26 = (JSC::Structure *)v86;
    if (!v29)
      goto LABEL_58;
  }
  if (!*(_DWORD *)(v29 + 24))
    goto LABEL_58;
  v30 = *(_QWORD *)(v29 + 16);
  v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
  v32 = *(unsigned int *)(v29 + 8);
  v33 = *(_DWORD *)(v25 + 16);
  if ((v30 & 1) != 0)
  {
    if ((v33 & 0x20) != 0)
      v33 = *(_DWORD *)(v25 + 32);
    v34 = *(_DWORD *)(v29 + 12);
    v35 = (v33 >> 8) & *(_QWORD *)&v34;
    v36 = *(unsigned __int8 *)(v31 + v35);
    if (*(_BYTE *)(v31 + v35))
    {
      v37 = v31 + v32;
      v38 = 1;
      while (1)
      {
        v39 = *(_QWORD *)(v37 + 8 * (v36 - 1));
        if (v25 == (v39 & 0xFFFFFFFFFFFFLL))
          break;
        v35 = ((_DWORD)v35 + v38) & v34;
        v36 = *(unsigned __int8 *)(v31 + v35);
        ++v38;
        if (!*(_BYTE *)(v31 + v35))
          goto LABEL_58;
      }
      a6 = (v39 >> 16) & 0xFF00000000 | HIBYTE(v39);
      goto LABEL_40;
    }
LABEL_58:
    if ((*(_BYTE *)(v11 + 6) & 0x20) != 0)
    {
      v70 = v28;
      v71 = v25;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v11, v70, v25, (uint64_t)&v89);
      v25 = v71;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_93;
    }
    if (v25)
    {
      v52 = *(_DWORD *)(v25 + 16);
      if ((v52 & 0x20) == 0)
      {
        v53 = *(_BYTE **)(v25 + 8);
        v54 = *(unsigned int *)(v25 + 4);
        if ((v52 & 4) != 0)
        {
          v82 = v24;
          if (!(_DWORD)v54
            || (v25 = *v53 - 48, v25 > 9)
            || v54 >= 2 && *v53 == 48)
          {
LABEL_118:
            OwnPropertySlotByIndex = 0;
            v24 = v82;
            goto LABEL_65;
          }
          v83 = v53 + 1;
          v84 = v54 - 1;
          while (v84)
          {
            if (v25 > 0x19999999)
              goto LABEL_118;
            v85 = *v83 - 48;
            if (v85 > 9)
              goto LABEL_118;
            OwnPropertySlotByIndex = 0;
            v69 = __CFADD__(v85, 10 * v25);
            v25 = v85 + 10 * (_DWORD)v25;
            ++v83;
            --v84;
            v24 = v82;
            if (v69)
              goto LABEL_65;
          }
          v24 = v82;
          if ((_DWORD)v25 != -1)
          {
LABEL_91:
            OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(v11, (uint64_t)this, (const WTF::StringImpl *)v25, (uint64_t)&v89, a5, a6, a7, a8);
            goto LABEL_65;
          }
        }
        else if ((_DWORD)v54)
        {
          v25 = *(unsigned __int16 *)v53 - 48;
          if (v25 <= 9 && (*(_WORD *)v53 != 48 || v54 <= 1))
          {
            v66 = (unsigned __int16 *)(v53 + 2);
            v67 = v54 - 1;
            while (v67)
            {
              if (v25 > 0x19999999)
                goto LABEL_64;
              v68 = *v66 - 48;
              if (v68 > 9)
                goto LABEL_64;
              OwnPropertySlotByIndex = 0;
              v69 = __CFADD__(v68, 10 * v25);
              v25 = v68 + 10 * (_DWORD)v25;
              ++v66;
              --v67;
              if (v69)
                goto LABEL_65;
            }
            if ((_DWORD)v25 != -1)
              goto LABEL_91;
          }
        }
      }
    }
LABEL_64:
    OwnPropertySlotByIndex = 0;
    goto LABEL_65;
  }
  if ((v33 & 0x20) != 0)
    v33 = *(_DWORD *)(v25 + 32);
  v46 = *(_DWORD *)(v29 + 12);
  v47 = v46 & (v33 >> 8);
  v48 = *(_DWORD *)(v31 + 4 * v47);
  if (!v48)
    goto LABEL_58;
  v49 = v31 + 4 * v32;
  v50 = 1;
  while (1)
  {
    v51 = (v48 - 1);
    if (v25 == *(_QWORD *)(v49 + 16 * v51))
      break;
    v47 = (v47 + v50) & v46;
    v48 = *(_DWORD *)(v31 + 4 * v47);
    ++v50;
    if (!v48)
      goto LABEL_58;
  }
  a6 = *(unsigned int *)(v49 + 16 * v51 + 8) | ((unint64_t)*(unsigned __int8 *)(v49 + 16 * v51 + 12) << 32);
LABEL_40:
  if ((_DWORD)a6 == -1)
    goto LABEL_58;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v42 = v11 + 16;
    v43 = a6 << 32;
  }
  else
  {
    v42 = *(_QWORD *)(v11 + 8) - 8;
    v43 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v42 + (v43 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_46;
  v44 = *(unsigned __int8 *)(a4 + 5);
  if (v44 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v11, (uint64_t)v28, (uint64_t)&v89, a4, SHIDWORD(a6), a6);
    goto LABEL_93;
  }
  if (v44 != 6)
  {
LABEL_46:
    v89 = a4;
    v93 = v11;
    v91 = __PAIR64__(a6, HIDWORD(a6));
    OwnPropertySlotByIndex = 1;
    LOWORD(v95) = 257;
    goto LABEL_65;
  }
  v73 = *((_DWORD *)v26 + 4) & 3;
  v74 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v89 = *(_QWORD *)(a4 + 8);
    v90 = v74;
    LODWORD(v91) = HIDWORD(a6);
    v93 = v11;
    BYTE1(v95) = 3;
    if (v73 != 2)
    {
      OwnPropertySlotByIndex = 1;
      LOBYTE(v95) = 1;
      goto LABEL_65;
    }
LABEL_93:
    OwnPropertySlotByIndex = 1;
    goto LABEL_65;
  }
  v76 = *(_QWORD *)(a4 + 24);
  v75 = *(_QWORD *)(a4 + 32);
  v89 = *(_QWORD *)(a4 + 8);
  v90 = v74;
  LODWORD(v91) = HIDWORD(a6);
  v93 = v11;
  BYTE1(v95) = 3;
  OwnPropertySlotByIndex = 1;
  if (v73 != 2)
    LOBYTE(v95) = 1;
  HIBYTE(v95) = 1;
  v99 = v76;
  v100 = v75;
LABEL_65:
  if (v98)
  {
    v55 = *(_DWORD *)(v97 + 4);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x198938980);
    }
    *(_DWORD *)(v97 + 4) = v55 - 1;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = OwnPropertySlotByIndex;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, v25, a4, a5, a6, a7, a8);
    OwnPropertySlotByIndex = v77;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v56 = *v24;
  if (OwnPropertySlotByIndex)
  {
    v59 = JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(v56 + 1768), a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v57, v58, a4, a5, a6, a7, a8))
      return 0;
    if (v59 >> 49)
    {
      v22 = 0.0;
      v60 = trunc(COERCE_DOUBLE(v59 - 0x2000000000000) + 0.0);
      if (v59 >= 0xFFFE000000000000)
        v60 = (double)(int)v59;
      if (*(_DWORD *)(v10 + 80))
      {
        v87 = v60;
        v81 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v57, v58, a4, a5, a6, a7, a8);
        v60 = v87;
        if (v81)
          return 0;
      }
      if (v60 > (double)v18)
        v22 = v60 - (double)v18;
    }
    else
    {
      v22 = 0.0;
    }
    v56 = *v24;
  }
  else
  {
    v22 = 0.0;
  }
  a7 = JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(v56 + 1968), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80)
    || (v79 = a7,
        v80 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v61, v62, v63, v64, v65, a7, a8),
        a7 = v79,
        !v80))
  {
    if ((a7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a7 + 5) != 2)
      a7 = v24[2];
    goto LABEL_18;
  }
  return 0;
}

uint64_t JSC::argumentsGetter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  JSC::CallFrame *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL8 v28;
  unint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  int v35;
  JSC::VM *v36;
  unsigned int **v37[2];
  _QWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  JSC::Wasm::NameSection *v41;

  v8 = *(JSC::VM **)(a1 + 56);
  v36 = v8;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 26)
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v10 = *(_QWORD *)(a2 + 24);
  if ((v10 & 1) == 0)
  {
    if (*(_BYTE *)(v10 + 5) != 8)
    {
      v11 = *(_QWORD *)(v10 + 88);
      if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
      {
        v12 = (unint64_t)*(unsigned __int16 *)(v11 + 48) >> 14;
        goto LABEL_10;
      }
    }
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  }
  v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v10 + 5) == 8)
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v11 = *(_QWORD *)(v10 + 88);
  if ((*(_QWORD *)(v11 + 16) & 0x80000000) != 0)
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v12 = (unint64_t)*(unsigned __int16 *)(v11 + 48) >> 14;
LABEL_10:
  if ((*(_WORD *)(v11 + 51) & 3) != 0 || (*(_BYTE *)(v10 + 68) & 1) != 0)
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  if (*(_BYTE *)(v11 + 50) || (v12 - 3) >= 0xFFFFFFFE)
    return JSC::throwTypeError(a1, &v36, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v16 = (JSC::CallFrame *)*((_QWORD *)v8 + 5);
  if (!v16)
    return 2;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v37, v16, v8, 0, a5, a6, a7, a8);
  v24 = v38;
  if (!v38)
    goto LABEL_34;
  if (v39 != a2 || (v39 & 0xFFFE000000000007) == 3)
  {
    while (1)
    {
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v37, (uint64_t)v24, v17, v18, v19, v20, v21, v22);
      v24 = v38;
      if (!v38)
        break;
      if (v39 == a2 && (v39 & 0xFFFE000000000007) != 3)
        goto LABEL_23;
    }
LABEL_34:
    v14 = 2;
    goto LABEL_38;
  }
LABEL_23:
  v25 = v24[3];
  if ((v25 & 0xFFFE000000000007) == 3)
  {
    v34 = v24;
    while (1)
    {
      v35 = *(unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
      if (v35)
        break;
      v34 = (_QWORD *)*v34;
      v25 = v34[3];
      if ((v25 & 0xFFFE000000000007) != 3)
        goto LABEL_24;
    }
    if (v35 != 1)
    {
      v27 = 0;
      goto LABEL_26;
    }
    v26 = (unint64_t *)(v34[2] + 32);
  }
  else
  {
LABEL_24:
    v26 = (unint64_t *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 40);
  }
  v27 = *v26;
LABEL_26:
  v28 = byte_1ECF4C277 == 0;
  if (v37[0])
    v29 = JSC::ClonedArguments::createWithInlineFrame(v27, (uint64_t)v24, v37[0], v28, v23);
  else
    v29 = JSC::ClonedArguments::createWithMachineFrame(v27, (uint64_t)v24, byte_1ECF4C277 == 0, v28, v19, v20, v21, v22, v23);
  v14 = v29;
LABEL_38:
  v31 = v40;
  v40 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v41 = (JSC::Wasm::NameSection *)v31;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v41, v24, v17, v18, v19, v20, v21, v22);
    }
  }
  return v14;
}

uint64_t JSC::callerAndArgumentsSetter(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v7;

  v7 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 26)
    goto LABEL_17;
  v2 = *(_QWORD *)(a2 + 24);
  if ((v2 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 5) != 8)
    {
      v3 = *(_QWORD *)(v2 + 88);
      if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
      {
        v4 = (unint64_t)*(unsigned __int16 *)(v3 + 48) >> 14;
        goto LABEL_10;
      }
    }
LABEL_17:
    JSC::throwTypeError(a1, &v7, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
    return 1;
  }
  v2 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v2 + 5) == 8)
    goto LABEL_17;
  v3 = *(_QWORD *)(v2 + 88);
  if ((*(_QWORD *)(v3 + 16) & 0x80000000) != 0)
    goto LABEL_17;
  v4 = (unint64_t)*(unsigned __int16 *)(v3 + 48) >> 14;
LABEL_10:
  if ((*(_WORD *)(v3 + 51) & 3) != 0 || (*(_BYTE *)(v2 + 68) & 1) != 0)
    goto LABEL_17;
  if (*(_BYTE *)(v3 + 50) || (v4 - 3) >= 0xFFFFFFFE)
    goto LABEL_17;
  return 1;
}

uint64_t JSC::callerGetter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  JSC::CallFrame *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char **v26;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::VM *v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  JSC::Wasm::NameSection *v43;

  v8 = *(JSC::VM **)(a1 + 56);
  v38 = v8;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 26)
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v10 = *(_QWORD *)(a2 + 24);
  if ((v10 & 1) == 0)
  {
    if (*(_BYTE *)(v10 + 5) != 8)
    {
      v11 = *(_QWORD *)(v10 + 88);
      if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
      {
        v12 = (unint64_t)*(unsigned __int16 *)(v11 + 48) >> 14;
        goto LABEL_10;
      }
    }
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  }
  v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v10 + 5) == 8)
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v11 = *(_QWORD *)(v10 + 88);
  if ((*(_QWORD *)(v11 + 16) & 0x80000000) != 0)
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v12 = (unint64_t)*(unsigned __int16 *)(v11 + 48) >> 14;
LABEL_10:
  if ((*(_WORD *)(v11 + 51) & 3) != 0 || (*(_BYTE *)(v10 + 68) & 1) != 0)
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  if (*(_BYTE *)(v11 + 50) || (v12 - 3) >= 0xFFFFFFFE)
    return JSC::throwTypeError(a1, &v38, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
  v15 = (JSC::CallFrame *)*((_QWORD *)v8 + 5);
  if (!v15)
    return 2;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v39, v15, v8, 0, a5, a6, a7, a8);
  if (v40)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = v41;
      if ((v41 & 0xFFFE000000000007) != 3)
      {
        if (v24 || v41 == a2)
        {
          if (v23)
          {
            if (!v41)
              break;
            v26 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C));
            if (v26 != &JSC::JSBoundFunction::s_info && v26 != &JSC::JSRemoteFunction::s_info)
            {
              v28 = *(unsigned __int8 *)(v41 + 5);
              if (v28 != 61)
              {
                if (v28 != 26)
                  goto LABEL_47;
                v29 = *(_QWORD *)(v41 + 24);
                if ((v29 & 1) != 0)
                  v29 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 48);
                v30 = *(unsigned __int8 *)(v29 + 5);
                if (v30 == 12)
                {
                  v31 = *(_BYTE *)(*(_QWORD *)(v29 + 88) + 51);
                }
                else
                {
                  if (v30 != 8)
                    goto LABEL_47;
                  v31 = *(_BYTE *)(v29 + 56);
                }
                if ((v31 & 3) == 0)
                  goto LABEL_47;
              }
            }
          }
          else
          {
            v23 = 1;
          }
          v24 = 1;
        }
        else
        {
          v24 = 0;
        }
      }
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v39, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    }
    while (v40);
  }
  v25 = 2;
LABEL_47:
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      v43 = (JSC::Wasm::NameSection *)v32;
      v37 = v25;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v43, v16, v17, v18, v19, v20, v21, v22);
      v25 = v37;
    }
  }
  result = 2;
  if (v25 != 2 && (v25 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v25 + 5) == 26)
    {
      v35 = *(_QWORD *)(v25 + 24);
      if ((v35 & 1) != 0)
        v35 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v35 + 5) != 8)
      {
        v36 = *(_QWORD *)(v35 + 88);
        if ((*(_DWORD *)(v36 + 16) & 0x80000000) == 0 && (*(_BYTE *)(v35 + 68) & 1) == 0)
        {
          if (((1 << *(_BYTE *)(v36 + 50)) & 0x78F86) != 0)
            return 2;
          else
            return v25;
        }
      }
    }
    return 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6[2];
  uint64_t v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[0] = (uint64_t)"(\n) {\n\n}";
  v6[1] = 9;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>(v7, a4, v6, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, int8x16_t *a9, int a10)
{
  char *v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  int8x16x2_t v21;
  int8x16x2_t v22;
  int8x16x2_t v23;

  v10 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v11 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v12 = 0uLL;
    do
    {
      v21.val[0] = *a2;
      v13 = a2[1];
      v22.val[0] = a2[2];
      v14 = a2[3];
      a2 += 4;
      v15 = v14;
      v22.val[1] = 0uLL;
      v23.val[0] = v13;
      v21.val[1] = 0uLL;
      v16 = a1;
      vst2q_s8(v16, v21);
      v16 += 32;
      v23.val[1] = 0uLL;
      vst2q_s8(v16, v23);
      v17 = a1 + 64;
      vst2q_s8(v17, v22);
      v18 = a1 + 96;
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      a1 += 128;
    }
    while (a1 != v11);
    a1 = v11;
  }
  while (a1 != v10)
  {
    v19 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v19;
    a1 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v10, a4, a5, a6, a7, a9, a10);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, int8x16_t *a6, int a7)
{
  uint64_t v13;
  uint64_t v15;

  v15 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v15, __dst);
  v13 = v15;
  if (v15)
    v13 = *(unsigned int *)(v15 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v13], a3, a4, a5, a6, a7);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, char a5)
{
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v7 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &result[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v31.val[0] = *a2;
      v10 = a2[1];
      v33.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v33.val[1] = 0uLL;
      v35.val[0] = v10;
      v31.val[1] = 0uLL;
      v13 = result;
      vst2q_s8(v13, v31);
      v13 += 32;
      v35.val[1] = 0uLL;
      vst2q_s8(v13, v35);
      v14 = result + 64;
      vst2q_s8(v14, v33);
      v15 = result + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      result += 128;
    }
    while (result != v8);
    result = v8;
  }
  while (result != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v16;
    result += 2;
  }
  if (a4)
  {
    v17 = *(int8x16_t **)(a4 + 8);
    v18 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v19 = &v7[2 * v18];
      if (v18 >= 0x40)
      {
        v20 = &v7[2 * (v18 & 0xFFFFFFC0)];
        v21 = 0uLL;
        v22 = v7;
        do
        {
          v32.val[0] = *v17;
          v23 = v17[1];
          v34.val[0] = v17[2];
          v24 = v17[3];
          v17 += 4;
          v25 = v24;
          v34.val[1] = 0uLL;
          v36.val[0] = v23;
          v32.val[1] = 0uLL;
          v26 = v22;
          vst2q_s8(v26, v32);
          v26 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v26, v36);
          v27 = v22 + 64;
          vst2q_s8(v27, v34);
          v28 = v22 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
          v22 += 128;
        }
        while (v22 != v20);
      }
      else
      {
        v20 = v7;
      }
      while (v20 != v19)
      {
        v29 = v17->u8[0];
        v17 = (int8x16_t *)((char *)v17 + 1);
        *(_WORD *)v20 = v29;
        v20 += 2;
      }
    }
    else if ((_DWORD)v18 == 1)
    {
      *(_WORD *)v7 = v17->i16[0];
    }
    else if ((_DWORD)v18)
    {
      result = (char *)memcpy(v7, v17, 2 * v18);
    }
    v30 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v30 = 0;
  }
  *(_WORD *)&v7[2 * v30] = a5;
  return result;
}

uint64_t JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::ASCIILiteral const&,WTF::ASCIILiteral>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  JSC::VM *v8;
  int v9;
  int v10;
  int v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (a3)
  {
    v9 = a3 - 1;
    v51 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
    v51 = a2;
  }
  v52 = v9;
  if (a5)
  {
    v10 = a5 - 1;
    v49 = a4;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198939404);
    }
  }
  else
  {
    v10 = 0;
    v49 = a4;
  }
  v50 = v10;
  if (!a7)
  {
    v11 = 0;
    v47 = a6;
    goto LABEL_7;
  }
  v11 = a7 - 1;
  v47 = a6;
  if ((unint64_t)(a7 - 1) >> 31)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1989393D4);
  }
LABEL_7:
  v48 = v11;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v51, (uint64_t)&v49, (uint64_t)&v47, (int **)&v46);
  if (v46)
  {
    v19 = JSC::jsNontrivialString((uint64_t)v8, (JSC::VM *)&v46, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v12);
    v45 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create((uint64_t)v8, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
    }
    v19 = (uint64_t)JSC::VM::throwException(v8, a1, v45, v44, v39, v40, v41, v42, v43);
  }
  v27 = v19;
  v28 = v46;
  v46 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  return v27;
}

uint64_t WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>(uint64_t result, void *__dst)
{
  uint64_t v2;
  BOOL v3;
  _BYTE v4[13];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((result & 0x80000000) != 0)
    return WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-(int)result, __dst);
  v2 = 0;
  do
  {
    v4[v2-- + 12] = (result % 0xA) | 0x30;
    v3 = result > 9;
    result = result / 0xAuLL;
  }
  while (v3);
  if (v2 + 14 <= 13)
    return (uint64_t)memcpy(__dst, &v4[v2 + 13], -v2);
  return result;
}

uint64_t JSC::shouldKeepInConstraintSet<JSC::SlotVisitor>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (a2)
  {
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) != 0)
        goto LABEL_2;
    }
    else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a1 + 80) + 240)
           && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
    {
      goto LABEL_2;
    }
    return 1;
  }
LABEL_2:
  if ((a3 & 8) != 0)
  {
    LODWORD(v3) = *(_BYTE *)(a3 - 79) & 1;
  }
  else if (*(_DWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a1 + 80) + 240))
  {
    v3 = (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFC000) + 8 * ((a3 >> 10) & 0xF) + 0x28) >> (a3 >> 4)) & 1;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  return v3 ^ 1;
}

uint64_t WTF::HashTable<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v16 = a2;
    v17 = (_QWORD *)(v8 + 32);
    do
    {
      *(v17 - 1) = 1;
      *v17 = 0;
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = v5 + 24 * v18;
      v21 = *(_DWORD *)(v20 + 8);
      if (v21 != 2)
      {
        if (v21 == 1)
        {
          v22 = *(_QWORD *)(v5 + 24 * v18 + 16);
          if (v22)
            WTF::fastFree(v22 - 16, v9, v10, v11, v12, v13, v14, v15);
        }
        else
        {
          v23 = *a1;
          if (*a1)
          {
            v24 = *(_DWORD *)(v23 - 8);
            if (v21)
              goto LABEL_30;
          }
          else
          {
            v24 = 0;
            if (v21)
            {
LABEL_30:
              v40 = std::__throw_bad_variant_access[abi:sn180100]();
              return WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(v40);
            }
          }
          v25 = *(_QWORD *)v20 + ~(*(_QWORD *)v20 << 32);
          v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
          v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
          v28 = v24 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = v23 + 24 * v28;
            v28 = (v28 + v29++) & v24;
          }
          while (*(_DWORD *)(v31 + 8) != 1);
          v32 = v23 + 24 * v30;
          v35 = *(_QWORD *)(v32 + 16);
          v34 = (_QWORD *)(v32 + 16);
          v33 = v35;
          if (v35)
            WTF::fastFree(v33 - 16, v9, v10, v11, v12, v13, v14, v15);
          *(_OWORD *)v31 = *(_OWORD *)v20;
          v36 = v5 + 24 * v18;
          *v34 = 0;
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          *v34 = v37;
          v38 = *(_QWORD *)(v36 + 16);
          if (v38)
            WTF::fastFree(v38 - 16, v9, v10, v11, v12, v13, v14, v15);
          if (v20 == a3)
            v19 = v31;
        }
      }
      if (++v18 == v6)
        goto LABEL_28;
    }
  }
  v19 = 0;
  result = 0;
  if (v5)
  {
LABEL_28:
    WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v19;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  JSC::FunctionRareData *v29;
  JSC::JSCell *v30;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_BYTE *)(v9 + 28);
    do
    {
      *((_DWORD *)v18 - 1) = 1;
      *v18 = 0;
      v18 += 16;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = (_DWORD *)(v6 + 16 * v19);
      v22 = v21[2];
      if ((v22 - 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
        {
          v24 = *(_DWORD *)(v23 - 8);
          if (v22)
            goto LABEL_23;
        }
        else
        {
          v24 = 0;
          if (v22)
          {
LABEL_23:
            v29 = (JSC::FunctionRareData *)std::__throw_bad_variant_access[abi:sn180100]();
            return JSC::FunctionRareData::destroy(v29, v30);
          }
        }
        v25 = v21[1] * *v21;
        do
        {
          v26 = v25 & v24;
          v27 = v23 + 16 * v26;
          v25 = ++v22 + v26;
        }
        while (*(_DWORD *)(v27 + 8) != 1);
        *(_OWORD *)v27 = *(_OWORD *)v21;
        if (v21 == a3)
          v20 = v27;
      }
      if (++v19 == v7)
        goto LABEL_21;
    }
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

void JSC::FunctionRareData::destroy(JSC::FunctionRareData *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t *i;
  uint64_t *v15;
  uint64_t v16;

  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    JSC::Watchpoint::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  if ((v10 & 1) == 0)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = (uint64_t **)(v10 + 8);
      for (i = *(uint64_t **)(v10 + 8); i != (uint64_t *)v13; i = *v13)
      {
        v16 = *i;
        v15 = (uint64_t *)i[1];
        *v15 = *i;
        *(_QWORD *)(v16 + 8) = v15;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::FunctionRareData::visitChildren(JSC::FunctionRareData *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_11:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
  }
LABEL_12:
  v14 = *((_QWORD *)this + 3);
  if (!v14)
    goto LABEL_18;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    v15 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_17:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_18;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
LABEL_18:
  v16 = *((_DWORD *)this + 10);
  v17 = v16 & 0xFFFFFFFE;
  if ((v16 & 0xFFFFFFFE) != 0)
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v17) & 0xFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v17) & 0xFFFFFC000), v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v17) & 0xFFFFFC000) + 8 * ((v17 >> 6) & 0xF) + 0x28) >> (v17 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v17, 0, a4, a5, a6, a7, a8);
    }
  }
  v19 = *((_DWORD *)this + 11);
  v20 = v19 & 0xFFFFFFFE;
  if ((v19 & 0xFFFFFFFE) != 0)
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v20) & 0xFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v20) & 0xFFFFFC000), v21, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v20) & 0xFFFFFC000) + 8 * ((v20 >> 6) & 0xF) + 0x28) >> (v20 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v20, 0, a4, a5, a6, a7, a8);
    }
  }
  v22 = *((_QWORD *)this + 6);
  if (v22)
  {
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) == 0)
        goto LABEL_43;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v23, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) == 0)
        goto LABEL_43;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_43:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, 0, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::FunctionRareData::visitChildren(JSC::FunctionRareData *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _QWORD *v15;
  char v16;

  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v12 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v14[0] = a2;
    v14[1] = this;
    v16 = 0;
    v15 = v11;
    *((_QWORD *)a2 + 11) = v14;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v14[0] + 88) = v15;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    v6 = *((_DWORD *)this + 10);
    if (v6)
      v7 = 16 * (v6 & 0xFFFFFFFE);
    else
      v7 = 0;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    v8 = *((_DWORD *)this + 11);
    if (v8)
      v9 = 16 * (v8 & 0xFFFFFFFE);
    else
      v9 = 0;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 6));
    *(_QWORD *)(v11[0] + 88) = v12;
  }
  return result;
}

unint64_t JSC::FunctionRareData::create(JSC::FunctionRareData *this, JSC::VM *a2, JSC::ExecutableBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  _QWORD *v11;
  unint64_t result;
  unint64_t v13;
  int v14;
  unint64_t v15;

  v10 = (char *)this + 40480;
  v11 = (_QWORD *)*((_QWORD *)this + 5060);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::functionRareDataSpaceSlow((JSC::Heap **)this + 4694);
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v15);
    v11[5] = result + (int)v15;
LABEL_4:
    v11[3] = result + 80;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v11, (char *)this + 192, 80, 0, 0);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_QWORD *)v10 + 160);
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)result = v13 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) &= 0xF0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::FunctionRareData::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 0x2000000;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::FunctionRareData::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::ObjectAllocationProfileBase<JSC::ObjectAllocationProfileWithPrototype>::initializeProfile(uint64_t *a1, _DWORD *a2, uint64_t a3, JSC::JSCell *a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v10;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL8 v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  JSC::JSGlobalObject *v100;
  JSC::JSCell *v101;
  WTF *v103;
  const char *v104;
  _DWORD *v105;
  __int16 v106;

  v10 = a6;
  if (a7)
  {
    v15 = *(_QWORD *)(a7 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v16 = *(_QWORD *)(v15 + 72);
    if (v16)
    {
      v97 = *(_DWORD *)(v16 + 24) & 0xFFFFFFFE;
      if ((_DWORD)v97)
      {
        v98 = 16 * v97;
        if (*(_BYTE *)(v98 + 9) != 24)
        {
          __break(0xC471u);
          JUMPOUT(0x19893A688);
        }
        *a1 = 0;
        a1[1] = v98;
        if (a4)
        {
          if (a2[190] >= *((unsigned __int8 *)a4 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), (unint64_t)a4);
          a1[2] = (uint64_t)a5;
          if (a5 && a2[190] >= *((unsigned __int8 *)a4 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), (unint64_t)a4);
        }
        else
        {
          a1[2] = (uint64_t)a5;
        }
        return;
      }
    }
    if ((_BYTE)dword_1ECF4C723)
    {
      v19 = 1;
      goto LABEL_11;
    }
    if (!*(_QWORD *)(v15 + 120))
    {
      v71 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v71 = 1;
      *(_QWORD *)(v71 + 8) = 3;
      v73 = *(unsigned int **)(v15 + 120);
      *(_QWORD *)(v15 + 120) = v71;
      if (v73)
      {
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v73);
          if ((v73[2] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v73 + 2), v72, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v73, v72, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        }
      }
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 120) + 8);
    if ((v17 & 1) != 0)
      v18 = (v17 >> 1) & 3;
    else
      v18 = *(unsigned __int8 *)(v17 + 4);
    if (v18 == 2)
    {
      v94 = *(_QWORD *)(v15 + 112);
      if ((v94 & 1) != 0)
        v95 = (v94 >> 1) & 3;
      else
        v95 = *(unsigned __int8 *)(v94 + 4);
      v19 = v95 == 2;
      goto LABEL_11;
    }
  }
  else
  {
    v15 = 0;
  }
  v19 = 0;
LABEL_11:
  v100 = (JSC::JSGlobalObject *)a3;
  v101 = a4;
  if (v10 > 5)
  {
    if (v10 >= 0x3F)
      v33 = 62;
    else
      v33 = v10;
  }
  else
  {
    if (*(JSC::JSObject **)(*(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28) + 656) == a5)
    {
      v27 = 0;
    }
    else
    {
      v20 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
      *(_DWORD *)v20 = 1;
      *((_QWORD *)v20 + 1) = (char *)v20 + 24;
      *((_QWORD *)v20 + 2) = 20;
      v103 = v20;
      v104 = 0;
      v105 = a2;
      v106 = 3;
      JSC::Structure::getPropertyNamesFromStructure((JSC::Structure *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE)), (JSC::VM *)a2, (uint64_t)&v103, 0, v21, v22, v23, v24);
      v26 = v103;
      if (*((_DWORD *)v103 + 5))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          JSC::JSObject::getDirect(a5, (JSC::VM *)a2, *(_QWORD *)(*((_QWORD *)v26 + 1) + 8 * v28), a4, (uint64_t)a5, a6, a7, a8);
          if ((v29 & 0xFFFE000000000002) != 0)
          {
            v30 = 0;
          }
          else if (*(_BYTE *)(v29 + 5) == 26)
          {
            v30 = v29;
          }
          else
          {
            v30 = 0;
          }
          if (!v30)
            ++v27;
          ++v28;
        }
        while (v28 < *((unsigned int *)v26 + 5));
      }
      else
      {
        v27 = 0;
      }
      if (v104)
        WTF::fastFree((unint64_t)(v104 - 16), v25, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v31 = v103;
      v103 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          v80 = *((unsigned int *)v31 + 5);
          if ((_DWORD)v80)
          {
            v81 = (WTF::StringImpl **)*((_QWORD *)v31 + 1);
            v82 = 8 * v80;
            do
            {
              v83 = *v81;
              *v81 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                {
                  WTF::StringImpl::~StringImpl(v83, (WTF::AtomStringImpl *)v25, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v83 -= 2;
                }
              }
              ++v81;
              v82 -= 8;
            }
            while (v82);
          }
          v92 = *((_QWORD *)v31 + 1);
          if ((WTF *)((char *)v31 + 24) != (WTF *)v92 && v92 != 0)
          {
            *((_QWORD *)v31 + 1) = 0;
            *((_DWORD *)v31 + 4) = 0;
            WTF::fastFree(v92, v25, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          }
          WTF::fastFree((unint64_t)v31, v25, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
    }
    if (v27 + v10 >= 6)
      v32 = 6;
    else
      v32 = v27 + v10;
    if (v27 + v10)
      v33 = v32;
    else
      v33 = 6;
  }
  if (v33 >= 0x3D)
    v34 = 61;
  else
    v34 = v33;
  if (v19)
    v35 = (v34 + 1);
  else
    v35 = v33;
  v36 = 8 * v35;
  v37 = v36 + 16;
  v38 = *(_QWORD *)((char *)a2 + (((unint64_t)(v36 + 31) >> 1) & 0x7FFFFFFF8) + 15024);
  if (v38
    || (v38 = JSC::CompleteSubspace::allocatorForSlow((JSC::CompleteSubspace *)(a2 + 3734), v37, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8)) != 0)
  {
    v35 = v35 + (((unint64_t)*(unsigned int *)(v38 + 60) - v37) >> 3);
    if (v35 >= 0x3F)
      v35 = 62;
  }
  v46 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::JSGlobalObject *)((char *)v100 + 1968), v100, a5, v35, v19, v15, a7, a8, a9);
  if (v19)
  {
    v47 = (unint64_t)v101;
    v69 = a1;
    *a1 = 0;
    v96 = *(_QWORD *)(v15 + 72);
    if (!v96)
      v96 = JSC::FunctionExecutable::ensureRareDataSlow((JSC::FunctionExecutable *)v15);
    if (v46)
    {
      *(_DWORD *)(v96 + 24) = v46 >> 4;
      if (a2[190] >= *(unsigned __int8 *)(v15 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), v15);
    }
    else
    {
      *(_DWORD *)(v96 + 24) = 0;
    }
  }
  else
  {
    v47 = (unint64_t)v101;
    if (v15)
    {
      if (!*(_QWORD *)(v15 + 120))
      {
        v76 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v76 = 1;
        *(_QWORD *)(v76 + 8) = 3;
        v77 = *(unsigned int **)(v15 + 120);
        *(_QWORD *)(v15 + 120) = v76;
        if (v77)
        {
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            atomic_store(1u, v77);
            if ((v77[2] & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v77 + 2), v39, (uint64_t)v40, v41, v42, v43, v44, v45);
            WTF::fastFree((unint64_t)v77, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
          }
        }
      }
      v48 = *(_QWORD *)(v15 + 120);
      v49 = *(_QWORD *)(v46 + 64);
      if (!v49 || (v50 = *(unsigned int **)(v15 + 120), *(_BYTE *)(v49 + 5) == 1))
      {
        JSC::Structure::allocateRareData((JSC::Structure *)v46, (JSC::VM *)a2, v40, v41, v42, v43, v44, v45);
        v49 = *(_QWORD *)(v46 + 64);
        v50 = *(unsigned int **)(v15 + 120);
      }
      if (v50)
      {
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
      }
      v52 = *(unsigned int **)(v49 + 72);
      *(_QWORD *)(v49 + 72) = v50;
      if (v52)
      {
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          if ((v52[2] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v52 + 2), v39, (uint64_t)v40, v41, v42, v43, v44, v45);
          WTF::fastFree((unint64_t)v52, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
        }
      }
      v55 = *(_QWORD *)(v48 + 8);
      if ((v55 & 1) != 0)
        v56 = (v55 >> 1) & 3;
      else
        v56 = *(unsigned __int8 *)(v55 + 4);
      if (v56 != 2 && !*(_QWORD *)(a8 + 56))
      {
        v64 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v64 = 0;
        *(_QWORD *)(v64 + 8) = 0;
        *(_BYTE *)(v64 + 16) = 4;
        *(_BYTE *)(v64 + 21) = BYTE4(a8);
        *(_DWORD *)(v64 + 17) = a8;
        v65 = *(_QWORD *)(a8 + 56);
        *(_QWORD *)(a8 + 56) = v64;
        if (v65)
        {
          JSC::Watchpoint::operator delete(v65, v57, v58, v59, v60, v61, v62, v63);
          v64 = *(_QWORD *)(a8 + 56);
        }
        v66 = *(_QWORD *)(v48 + 8);
        if ((v66 & 1) != 0)
        {
          v99 = (v66 >> 1) & 3;
          v66 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v66 = 1;
          *(_BYTE *)(v66 + 4) = v99;
          *(_BYTE *)(v66 + 5) = 0;
          *(_QWORD *)(v66 + 8) = v66 + 8;
          *(_QWORD *)(v66 + 16) = v66 + 8;
          __dmb(0xAu);
          *(_QWORD *)(v48 + 8) = v66;
        }
        if (v64)
        {
          v68 = *(_QWORD *)(v66 + 8);
          v67 = (uint64_t *)(v66 + 8);
          *(_QWORD *)v64 = v68;
          *(_QWORD *)(v64 + 8) = v67;
          *v67 = v64;
          *(_QWORD *)(v68 + 8) = v64;
          *((_WORD *)v67 - 2) = 257;
        }
      }
    }
    v69 = a1;
    *a1 = v38;
  }
  __dmb(0xAu);
  if (a8)
  {
    v70 = v69[1];
    if (v70)
    {
      if (v70 != v46)
      {
        v103 = (WTF *)&off_1E3583C90;
        v104 = "Clearing to be safe because structure has changed";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(a8 + 32), (uint64_t)a2);
      }
    }
  }
  v69[1] = v46;
  if (v47 && v46 && a2[190] >= *(unsigned __int8 *)(v47 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), v47);
  v69[2] = (uint64_t)a5;
  if (v47 && a5 && a2[190] >= *(unsigned __int8 *)(v47 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), v47);
}

uint64_t JSC::FunctionRareData::clear(unint64_t this, const char *a2)
{
  uint64_t *v2;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  v2 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v2 = (uint64_t *)(this - 16);
  return JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(this + 32), *v2);
}

void JSC::FuzzerAgent::~FuzzerAgent(JSC::FuzzerAgent *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FuzzerAgent::getPrediction(JSC::FuzzerAgent *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, uint64_t a4)
{
  return a4;
}

JSC::FuzzerPredictions *JSC::FuzzerPredictions::FuzzerPredictions(JSC::FuzzerPredictions *this, const char *__filename)
{
  FILE *v3;
  FILE *v4;
  uint64_t v5;
  size_t v6;
  int *v7;
  void *v8;
  size_t v9;
  WTF *v10;
  double v11;
  double v12;
  float v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t *v22;
  _QWORD *v23;
  double v24;
  double v25;
  float v26;
  _QWORD *v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  WTF **v38;
  int i;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  WTF *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  _QWORD *v89;

  *(_QWORD *)this = 0;
  if (!__filename)
  {
    __break(0xC471u);
    JUMPOUT(0x19893AC80);
  }
  v3 = fopen(__filename, "r");
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19893ACA0);
  }
  v4 = v3;
  if (fseek(v3, 0, 2) == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19893ACC0);
  }
  v5 = MEMORY[0x19AEBB448](v4);
  if (v5 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19893ACE0);
  }
  v6 = v5;
  if (fseek(v4, 0, 0) == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19893AD00);
  }
  if ((_DWORD)v6)
  {
    if ((unint64_t)v6 >> 31)
    {
      __break(0xC471u);
LABEL_96:
      JUMPOUT(0x19893AC20);
    }
    v7 = (int *)WTF::fastCompactMalloc((WTF *)(v6 + 20));
    v8 = v7 + 5;
    *v7 = 2;
    v7[1] = v6;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 4;
  }
  else
  {
    v8 = 0;
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v88 = (WTF::StringImpl *)v7;
  v9 = fread(v8, 1uLL, v6, v4);
  fclose(v4);
  if (v9 != v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19893AD20);
  }
  v86 = 0;
  v87 = 0;
  v10 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E3572800;
  *((_QWORD *)v10 + 1) = &v86;
  v84 = v10;
  WTF::String::splitInternal<false>((uint64_t *)&v88, 0xAu, &v84, v11, v12, v13);
  v21 = v84;
  v84 = 0;
  if (v21)
    (*(void (**)(WTF *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (uint64_t *)v86;
  if (!HIDWORD(v87))
  {
LABEL_70:
    if (!v22)
      goto LABEL_72;
    goto LABEL_71;
  }
  v83 = (uint64_t *)((char *)v86 + 8 * HIDWORD(v87));
  do
  {
    v84 = 0;
    v85 = 0;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = off_1E3572800;
    v23[1] = &v84;
    v89 = v23;
    WTF::String::splitInternal<false>(v22, 0x3Au, &v89, v24, v25, v26);
    v27 = v89;
    v89 = 0;
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    if (HIDWORD(v85) != 2)
    {
      __break(0xC471u);
      goto LABEL_96;
    }
    v28 = (WTF::StringImpl **)v84;
    v29 = *((_QWORD *)v84 + 1);
    if (!v29)
    {
      v30 = 0;
      v31 = 0;
LABEL_22:
      v32 = WTF::parseInteger<unsigned long long,unsigned char>(v30, v31, 0x10u, 0);
      goto LABEL_23;
    }
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(unsigned int *)(v29 + 4);
    if ((*(_BYTE *)(v29 + 16) & 4) != 0)
      goto LABEL_22;
    v32 = WTF::parseInteger<unsigned long long,char16_t>(v30, v31, 0x10u, 0);
LABEL_23:
    v33 = v32;
    if (!(_BYTE)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19893AC40);
    }
    if ((v32 & 0xFFFFC00000000008) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19893AC60);
    }
    v34 = *(_QWORD *)this;
    if (*(_QWORD *)this
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this, 8uLL, 0, v16, v17, v18, v19, v20), (v34 = *(_QWORD *)this) != 0))
    {
      v35 = *(_DWORD *)(v34 - 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = *((_DWORD *)*v28 + 4);
    if (v36 < 0x100)
      v37 = WTF::StringImpl::hashSlowCase(*v28);
    else
      v37 = v36 >> 8;
    v38 = 0;
    for (i = 1; ; ++i)
    {
      v40 = v37 & v35;
      v41 = (WTF **)(v34 + 16 * v40);
      v42 = *v41;
      if (*v41 == (WTF *)-1)
      {
        v38 = (WTF **)(v34 + 16 * v40);
        goto LABEL_36;
      }
      if (!v42)
        break;
      if (WTF::equal(v42, *v28, v15))
      {
        *(_QWORD *)(v34 + 16 * v40 + 8) = v33;
        goto LABEL_55;
      }
LABEL_36:
      v37 = i + v40;
    }
    if (v38)
    {
      *v38 = 0;
      v38[1] = 0;
      --*(_DWORD *)(*(_QWORD *)this - 16);
      v41 = v38;
    }
    v43 = *v28;
    if (*v28)
      *(_DWORD *)v43 += 2;
    *v41 = v43;
    v41[1] = (WTF *)v33;
    v44 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v45 = *(_DWORD *)(v44 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v44 - 12) = v45;
    v46 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v47 = *(_DWORD *)(v46 - 12);
    else
      v47 = 0;
    v48 = (*(_DWORD *)(v46 - 16) + v47);
    v49 = *(unsigned int *)(v46 - 4);
    if (v49 > 0x400)
    {
      if (v49 <= 2 * v48)
      {
LABEL_50:
        v50 = ((_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49)));
        goto LABEL_54;
      }
    }
    else if (3 * v49 <= 4 * v48)
    {
      if ((_DWORD)v49)
        goto LABEL_50;
      v50 = 8;
LABEL_54:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this, v50, (uint64_t)v41, v16, v17, v18, v19, v20);
    }
LABEL_55:
    if (HIDWORD(v85))
    {
      v52 = v84;
      v53 = 8 * HIDWORD(v85);
      do
      {
        v54 = *(WTF::StringImpl **)v52;
        *(_QWORD *)v52 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
        v52 = (WTF *)((char *)v52 + 8);
        v53 -= 8;
      }
      while (v53);
    }
    v51 = v84;
    if (v84)
    {
      v84 = 0;
      LODWORD(v85) = 0;
      WTF::fastFree((unint64_t)v51, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    }
    ++v22;
  }
  while (v22 != v83);
  v22 = (uint64_t *)v86;
  if (!HIDWORD(v87))
    goto LABEL_70;
  v73 = 8 * HIDWORD(v87);
  do
  {
    v74 = (WTF::StringImpl *)*v22;
    *v22 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    ++v22;
    v73 -= 8;
  }
  while (v73);
  v22 = (uint64_t *)v86;
  if (v86)
  {
LABEL_71:
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree((unint64_t)v22, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
  }
LABEL_72:
  v63 = v88;
  v88 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  return this;
}

uint64_t *JSC::ensureGlobalFuzzerPredictions(JSC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::ensureGlobalFuzzerPredictions(void)::initializeFuzzerPredictionsFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::ensureGlobalFuzzerPredictions(void)::initializeFuzzerPredictionsFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ensureGlobalFuzzerPredictions(void)::$_0 &&>>);
  }
  return &JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions;
}

unint64_t JSC::callGeneratorFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 1, 0, a6, a7, a8);
}

unint64_t JSC::constructGeneratorFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 1, *((JSC::JSGlobalObject **)a2 + 5), a6, a7, a8);
}

void JSC::GetterSetter::put()
{
  __break(0xC471u);
}

void JSC::GetterSetter::putByIndex()
{
  __break(0xC471u);
}

void JSC::GetterSetter::deleteProperty()
{
  __break(0xC471u);
}

void JSC::GetterSetter::getOwnPropertySlot()
{
  __break(0xC471u);
}

void JSC::GetterSetter::defineOwnProperty()
{
  __break(0xC471u);
}

void JSC::GetterSetter::setPrototype()
{
  __break(0xC471u);
}

void JSC::GetterSetter::visitChildren(JSC::GetterSetter *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_11:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
  }
LABEL_12:
  v14 = *((_QWORD *)this + 2);
  if (!v14)
    return;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) == 0)
      goto LABEL_23;
  }
  else
  {
    v15 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) == 0)
      goto LABEL_23;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_23:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
}

uint64_t JSC::GetterSetter::visitChildren(JSC::GetterSetter *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v10[0] + 88) = v11;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 1));
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::GetterSetter::callGetter(JSC::VM *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  JSC::CodeBlock *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  JSC::VM *v36;
  uint64_t (*v38)();
  unsigned int *v39;
  unsigned int v40;
  int v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  const WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _DWORD *v63;
  JSC::VM *v64;
  int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  JSC::CodeBlock *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  JSC::VM *v78;
  uint64_t (*v79)();
  unsigned int *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  unint64_t v90;
  const WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const WTF::StringImpl *v112;
  JSC::VM *v113;
  uint64_t v114;
  _DWORD *v115;
  JSC::CodeBlock *v116;
  JSC::VM *v117[2];
  JSC::CodeBlock *v118;
  JSC::CodeBlock *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;

  v9 = a1;
  v10 = a2[7];
  if (*(_DWORD *)(v10 + 80))
  {
    v82 = *(_DWORD *)(v10 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
    {
      v102 = a3;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a3 = v102;
    }
    v83 = *(_QWORD *)(v10 + 16);
    if (v83)
      return *(_QWORD *)(v83 + 8);
  }
  v11 = *((_QWORD *)v9 + 1);
  if (*(_BYTE *)(v11 + 5) == 26)
  {
    v12 = *(_QWORD *)(v11 + 24);
    if ((v12 & 1) != 0)
    {
      v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v12 + 5) != 8)
        goto LABEL_5;
    }
    else if (*(_BYTE *)(v12 + 5) != 8)
    {
LABEL_5:
      LOBYTE(v110) = 2;
      v13 = *(const WTF::StringImpl **)(v11 + 16);
      v111 = v12;
      v112 = v13;
      v108 = 0;
      v109 = 0;
      v14 = a2[7];
      v117[0] = (JSC::VM *)v14;
      goto LABEL_6;
    }
    v41 = 1;
    LOBYTE(v110) = 1;
    v111 = *(_QWORD *)(v12 + 40);
    v42 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C));
    LOBYTE(v112) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    v54 = a3;
    a1 = (JSC::VM *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(&v110, v11);
    a3 = v54;
    v41 = v110;
    v42 = v112;
  }
  v108 = 0;
  v109 = 0;
  v14 = a2[7];
  if (v41 == 2 || !v42)
  {
    v117[0] = (JSC::VM *)v14;
    if (v41 != 2)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v15 = v111;
      v19 = (_DWORD *)v11;
LABEL_7:
      v20 = *(_QWORD *)(16 * (*v19 & 0xFFFFFFFE) + 0x28);
      v113 = (JSC::VM *)v14;
      v114 = v20;
      if (*(_QWORD *)(v14 + 90568))
      {
LABEL_8:
        *(_QWORD *)(v14 + 32) = 0;
        if ((unint64_t)&v106 < *(_QWORD *)(v14 + 8) || v109 > 0x10000)
        {
          v32 = JSC::throwStackOverflowError(v20, v117, a3, (uint64_t)v17, a5, a6, a7, a8);
        }
        else if (*(_DWORD *)(v14 + 4))
        {
          v32 = JSC::Interpreter::checkVMEntryPermission(a1);
        }
        else
        {
          v21 = *(_DWORD *)(v14 + 80);
          if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
          {
            v84 = *(_DWORD *)(v14 + 80);
            if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
            {
              v103 = a3;
              v104 = v15;
              v105 = v17;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)v17, a5, a6, a7, a8);
              v17 = v105;
              v15 = v104;
              a3 = v103;
            }
            v32 = *(_QWORD *)(v14 + 16);
            if (v32)
              goto LABEL_27;
          }
          v22 = (unsigned int *)(v14 + 80);
          v23 = *(_DWORD *)(v14 + 80);
          if ((v23 & 0x20) == 0)
          {
            do
              v24 = __ldaxr(v22);
            while (__stlxr(v24 | 0x20, v22));
          }
          v25 = 0;
          v26 = 0;
          v118 = 0;
          if (v16)
          {
            if (*(_BYTE *)(v18 + 5) == 8
              || (*(_QWORD *)(v18 + 8)
                ? (v38 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                : (v38 = 0),
                  v38))
            {
              v118 = *(JSC::CodeBlock **)(v18 + 96);
            }
            else
            {
              v52 = a3;
              v53 = v15;
              JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v18, v14, v11, v17, 0, &v118, a7, a8);
              v15 = v53;
              a3 = v52;
            }
            v32 = *((_QWORD *)v117[0] + 2);
            if (v32)
            {
              if ((v23 & 0x20) == 0)
              {
                do
                  v85 = __ldaxr(v22);
                while (__stlxr(v85 & 0xFFFFFFDF, v22));
              }
              goto LABEL_27;
            }
            *((_BYTE *)v118 + 17) = 0;
            v26 = *(_QWORD *)(v18 + 8);
            v39 = (unsigned int *)(v26 + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 + 1, v39));
            v25 = v118;
          }
          v119 = v25;
          v120 = v11;
          v125 = v108;
          v126 = v20;
          v27 = 1;
          v121 = 1;
          if (v25)
          {
            v28 = *((_DWORD *)v25 + 7);
            v29 = v28 >= 2;
            v30 = v28 | 1;
            if (v29)
              v27 = v30;
            else
              v27 = 1;
          }
          v124 = v27;
          v122 = 0;
          v123 = a3;
          if ((v23 & 0x20) == 0)
          {
            do
              v31 = __ldaxr(v22);
            while (__stlxr(v31 & 0xFFFFFFDF, v22));
          }
          if (v16)
          {
            v32 = vmEntryToJavaScript(*(_QWORD *)(v26 + 16), (JSC::VM *)v14, (uint64_t)&v119, (uint64_t)v17, a5, a6, a7, a8);
            goto LABEL_23;
          }
          v32 = vmEntryToNative(v15, (JSC::VM *)v14, (uint64_t)&v119, (uint64_t)v17, a5, a6, a7, a8);
          if (v26)
          {
LABEL_23:
            v33 = (unsigned int *)(v26 + 8);
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, (unsigned int *)(v26 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
            }
          }
        }
LABEL_27:
        v36 = v113;
        if (*((JSC::VM ***)v113 + 11321) == &v113)
        {
          *((_QWORD *)v113 + 11321) = 0;
          if (*((_BYTE *)v36 + 56))
            JSC::VM::executeEntryScopeServicesOnExit(v36, a2, a3, (uint64_t)v17, a5, a6, a7, a8);
        }
        *(_BYTE *)(v14 + 93120) = 1;
        return v32;
      }
      *(_QWORD *)(v14 + 90568) = &v113;
      v43 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v43)
      {
        v44 = a3;
        v45 = v15;
        v46 = v17;
        a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
        v17 = v46;
        v15 = v45;
        a3 = v44;
        v43 = a1;
      }
      if ((*((_BYTE *)v43 + 5) & 0x20) == 0)
      {
        v95 = v17;
        v96 = v15;
        v97 = a3;
        *((_BYTE *)v43 + 5) |= 0x20u;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)a2, a3, (uint64_t)v17, a5, a6, a7, a8);
        WTF::registerThreadForMachExceptionHandling(v43, (WTF::Thread *)a2, a3, (uint64_t)v17, a5, a6, a7, a8);
        a3 = v97;
        v15 = v96;
        v17 = v95;
      }
      a1 = v113;
      if (*((_BYTE *)v113 + 56))
      {
        v49 = v17;
        v50 = v15;
        v51 = a3;
      }
      else
      {
        v47 = *((_QWORD *)v113 + 11624);
        v48 = atomic_load(&JSC::lastTimeZoneID);
        if (v47 == v48)
          goto LABEL_8;
        v49 = v17;
        v50 = v15;
        v51 = a3;
        a1 = v113;
      }
      JSC::VM::executeEntryScopeServicesOnEntry(a1, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v17, a5, a6, a7, a8);
      a3 = v51;
      v15 = v50;
      v17 = v49;
      goto LABEL_8;
    }
LABEL_6:
    v15 = 0;
    v16 = 1;
    v18 = v111;
    v17 = v112;
    v19 = v112;
    goto LABEL_7;
  }
  if (*(_DWORD *)(v11 + 88))
    return JSC::Interpreter::executeBoundCall(a1, v14, v11, (uint64_t)&v108, a5, a6, a7, a8);
  v55 = v14 + 90568;
  v57 = *(_QWORD *)(v11 + 32);
  v56 = *(_QWORD *)(v11 + 40);
  v58 = *(unsigned __int8 *)(v57 + 5);
  v107 = v14 + 90568;
  if (v58 == 26)
  {
    v59 = *(_QWORD *)(v57 + 24);
    if ((v59 & 1) != 0)
      v59 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v59 + 5) != 8)
    {
      v60 = 0;
      LOBYTE(v113) = 2;
      v61 = *(_DWORD **)(v57 + 16);
      v114 = v59;
      v115 = v61;
      v118 = (JSC::CodeBlock *)v14;
      v62 = 1;
      v63 = v61;
      goto LABEL_64;
    }
    LOBYTE(v113) = 1;
    v60 = *(_QWORD *)(v59 + 40);
    v114 = v60;
    LOBYTE(v115) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE)
                                                                              + 0x4C));
    v118 = (JSC::CodeBlock *)v14;
    goto LABEL_99;
  }
  v94 = v56;
  a1 = (JSC::VM *)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v57 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x38))(&v113, v57);
  v118 = (JSC::CodeBlock *)v14;
  if (v113 != 2)
  {
    v60 = v114;
    v55 = v107;
    v56 = v94;
LABEL_99:
    v62 = 0;
    v61 = 0;
    v59 = 0;
    v63 = (_DWORD *)v57;
    goto LABEL_64;
  }
  v60 = 0;
  v62 = 1;
  v59 = v114;
  v61 = v115;
  v63 = v115;
  v55 = v107;
  v56 = v94;
LABEL_64:
  v64 = *(JSC::VM **)(16 * (*v63 & 0xFFFFFFFE) + 0x28);
  v117[0] = (JSC::VM *)v14;
  v117[1] = v64;
  if (!*(_QWORD *)v55)
  {
    v86 = v60;
    v87 = v56;
    *(_QWORD *)v55 = v117;
    v88 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v88)
    {
      a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
      v88 = a1;
    }
    if ((*((_BYTE *)v88 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v88 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v88, (WTF::Thread *)a2, a3, a4, a5, a6, a7, a8);
    }
    a1 = v117[0];
    if (!*((_BYTE *)v117[0] + 56))
    {
      v89 = *((_QWORD *)v117[0] + 11624);
      v90 = atomic_load(&JSC::lastTimeZoneID);
      v55 = v107;
      v56 = v87;
      v60 = v86;
      if (v89 == v90)
        goto LABEL_65;
      a1 = v117[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    v55 = v107;
    v56 = v87;
    v60 = v86;
  }
LABEL_65:
  *(_QWORD *)(v14 + 32) = 0;
  if ((unint64_t)&v106 < *(_QWORD *)(v14 + 8) || v109 > 0x10000)
  {
    v32 = JSC::throwStackOverflowError((unint64_t)v64, &v118, a3, a4, a5, a6, a7, a8);
    goto LABEL_84;
  }
  if (*(_DWORD *)(v14 + 4))
  {
    v32 = JSC::Interpreter::checkVMEntryPermission(a1);
    goto LABEL_84;
  }
  v65 = *(_DWORD *)(v14 + 80);
  if ((v65 & 0x27) == 0
    || (v65 & 0x20) != 0
    || (v98 = v56,
        v99 = v60,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8), v60 = v99, v56 = v98, !hasExceptionsAfterHandlingTraps))
  {
    v66 = (unsigned int *)(v14 + 80);
    v67 = *(_DWORD *)(v14 + 80);
    if ((v67 & 0x20) == 0)
    {
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 | 0x20, v66));
    }
    v69 = 0;
    v70 = 0;
    v116 = 0;
    if (v62)
    {
      if (*(_BYTE *)(v59 + 5) == 8
        || (*(_QWORD *)(v59 + 8)
          ? (v79 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
          : (v79 = 0),
            v79))
      {
        v116 = *(JSC::CodeBlock **)(v59 + 96);
      }
      else
      {
        v91 = (const WTF::StringImpl *)v61;
        v92 = v56;
        v93 = v60;
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v59, v14, v57, v91, 0, &v116, a7, a8);
        v60 = v93;
        v56 = v92;
      }
      v32 = *((_QWORD *)v118 + 2);
      if (v32)
      {
        if ((v67 & 0x20) == 0)
        {
          do
            v101 = __ldaxr(v66);
          while (__stlxr(v101 & 0xFFFFFFDF, v66));
        }
        goto LABEL_133;
      }
      *((_BYTE *)v116 + 17) = 0;
      v70 = *(_QWORD *)(v59 + 8);
      v80 = (unsigned int *)(v70 + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 + 1, v80));
      v69 = v116;
    }
    v119 = v69;
    v120 = v57;
    v125 = v108;
    v126 = (unint64_t)v64;
    v71 = 1;
    v121 = 1;
    if (v69)
    {
      v72 = *((_DWORD *)v69 + 7);
      v29 = v72 >= 2;
      v73 = v72 | 1;
      if (v29)
        v71 = v73;
      else
        v71 = 1;
    }
    v124 = v71;
    v122 = 0;
    v123 = v56;
    if ((v67 & 0x20) == 0)
    {
      do
        v74 = __ldaxr(v66);
      while (__stlxr(v74 & 0xFFFFFFDF, v66));
    }
    if (v62)
    {
      v32 = vmEntryToJavaScript(*(_QWORD *)(v70 + 16), (JSC::VM *)v14, (uint64_t)&v119, a4, a5, a6, a7, a8);
      v55 = v107;
    }
    else
    {
      v32 = vmEntryToNative(v60, (JSC::VM *)v14, (uint64_t)&v119, a4, a5, a6, a7, a8);
      v55 = v107;
      if (!v70)
        goto LABEL_84;
    }
    v75 = (unsigned int *)(v70 + 8);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)(v70 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
    }
    goto LABEL_84;
  }
  v32 = *(_QWORD *)(v14 + 16);
LABEL_133:
  v55 = v107;
LABEL_84:
  v78 = v117[0];
  if (*((JSC::VM ***)v117[0] + 11321) == v117)
  {
    *((_QWORD *)v117[0] + 11321) = 0;
    if (*((_BYTE *)v78 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v78, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(v55 + 2552) = 1;
  return v32;
}

BOOL JSC::GetterSetter::callSetter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  JSC::VM *v35;

  v35 = *(JSC::VM **)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(v6 + 5);
  if (v7 == 28)
  {
    if (a5)
      JSC::throwTypeError(a2, &v35, (uint64_t)"Attempted to assign to readonly property.", 42);
  }
  else
  {
    v26 = 0;
    v9 = &v30;
    v28 = &v30;
    v29 = 0;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0;
    v30 = a4;
    v27 = 0x800000001;
    if (v7 == 26)
    {
      v10 = *(_QWORD *)(v6 + 24);
      if ((v10 & 1) != 0)
        v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v10 + 5) == 8)
      {
        v12 = 1;
        LOBYTE(v23) = 1;
        v24 = *(_QWORD *)(v10 + 40);
        LOBYTE(v25) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v23) = 2;
        v11 = *(_QWORD *)(v6 + 16);
        v24 = v10;
        v25 = v11;
        v12 = 1;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(&v23, v6);
      v9 = v28;
      v12 = v27;
    }
    v21 = v9;
    v22 = v12;
    JSC::call(a2, v6, &v23, a3, &v21);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v27, v13, v14, v15, v16, v17, v18, v19);
  }
  return v7 != 28;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (WTF::StringImpl **)(v10 + 16 * i);
      v23 = *v22;
      if (*v22 != (WTF::StringImpl *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if (v26 < 0x100)
            v27 = WTF::StringImpl::hashSlowCase(v23);
          else
            v27 = v26 >> 8;
          v28 = 0;
          do
          {
            v29 = v27 & v25;
            v27 = ++v28 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = (WTF::StringImpl **)(v24 + 16 * v29);
          v31 = *(WTF::StringImpl **)(v10 + 16 * i + 8);
          *v30 = 0;
          v32 = *v22;
          *v22 = 0;
          *v30 = v32;
          v30[1] = v31;
          v33 = *v22;
          *v22 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::~StringImpl(v33, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
            }
            else
            {
              *(_DWORD *)v33 -= 2;
            }
          }
        }
        else
        {
          *v22 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

JSC::FuzzerPredictions *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ensureGlobalFuzzerPredictions(void)::$_0 &&>>()
{
  return JSC::FuzzerPredictions::FuzzerPredictions((JSC::FuzzerPredictions *)&JSC::ensureGlobalFuzzerPredictions(void)::fuzzerPredictions, (const char *)qword_1ECF4C670);
}

uint64_t WTF::PrintStream::printImpl<JSC::ResolveMode,char [2],JSC::ResolveType,char [2],JSC::InitializationMode,char [2],JSC::ECMAMode,char [2]>(WTF::PrintStream *a1, unsigned int *a2, const char *a3, unsigned int *a4, const char *a5, unsigned int *a6, const char *a7, unsigned __int8 *a8, const char *a9)
{
  const char *v16;
  WTF::PrintStream *v17;
  const char *v18;
  WTF::PrintStream *v19;
  const char *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  const char *v23;

  v16 = JSC::resolveModeName(JSC::ResolveMode)::names[*a2];
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v17, "%s", v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a3);
  v18 = JSC::resolveTypeName(JSC::ResolveType)::names[*a4];
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v19, "%s", v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a5);
  v20 = JSC::initializationModeName(JSC::InitializationMode)::names[*a6];
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v21, "%s", v20);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a7);
  LODWORD(a8) = *a8;
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  v23 = "NotStrictMode";
  if (!(_DWORD)a8)
    v23 = "StrictMode";
  WTF::PrintStream::printf(v22, "%s", v23);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return WTF::PrintStream::printf(a1, "%s", a9);
}

void JSC::GlobalExecutable::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(this + 80);
  if (v12)
  {
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_11:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
  }
LABEL_12:
  v14 = *(_QWORD *)(this + 72);
  if (!v14)
    return;
  JSC::ScriptExecutable::visitCodeBlockEdge<JSC::SlotVisitor>((uint64_t)a2, *(_QWORD *)(this + 72));
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      return;
  }
  else if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
         && ((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
  {
    return;
  }
  v21 = this >> 4;
  v22 = (this >> 10) & 0xF;
  if ((this & 8) != 0)
  {
    v30 = *(unsigned __int8 *)(this - 76);
    v31 = 1 << v30;
    v32 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v30 >> 3) & 0x1C) + 440);
    while (1)
    {
      v33 = *v32;
      if ((*v32 & v31) != 0)
        break;
      v34 = __ldxr(v32);
      if (v34 == v33)
      {
        if (!__stxr(v33 | v31, v32))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v23 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
    v24 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v25 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v23 + 480) + (v24 & 0xFFFFFFF8) + 8) + 8 * (v24 & 7));
    if (!v25)
      v25 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v23 + 424), v24, v15, v16, v17, v18, v19, v20);
    v26 = 1 << v21;
    v27 = (unint64_t *)v25 + v22;
    while (1)
    {
      v28 = *v27;
      if ((*v27 & v26) != 0)
        break;
      v29 = __ldxr(v27);
      if (v29 == v28)
      {
        if (!__stxr(v28 | v26, v27))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  if ((this & 8) != 0)
  {
    v42 = *(unsigned __int8 *)(this - 76);
    v43 = 1 << v42;
    v44 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v42 >> 3) & 0x1C) + 352);
    while (1)
    {
      v45 = *v44;
      if ((*v44 & v43) != 0)
        break;
      v46 = __ldxr(v44);
      if (v46 == v45)
      {
        if (!__stxr(v45 | v43, v44))
          return;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v35 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
    v36 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v37 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v35 + 392) + (v36 & 0xFFFFFFF8) + 8) + 8 * (v36 & 7));
    if (!v37)
      v37 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v35 + 336), v36, v15, v16, v17, v18, v19, v20);
    v38 = 1 << v21;
    v39 = (unint64_t *)v37 + v22;
    while (1)
    {
      v40 = *v39;
      if ((*v39 & v38) != 0)
        break;
      v41 = __ldxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 | v38, v39))
          return;
      }
      else
      {
        __clrex();
      }
    }
  }
}

uint64_t JSC::GlobalExecutable::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD v38[2];
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  _QWORD *v42;
  char v43;

  v38[0] = a2;
  v38[1] = this;
  v40 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v39 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19893C4B4);
  }
  v41[0] = a2;
  v41[1] = this;
  v43 = 0;
  v42 = v38;
  *((_QWORD *)a2 + 11) = v41;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v41[0] + 88) = v42;
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 80));
  v7 = *(_QWORD *)(this + 72);
  if (v7)
  {
    JSC::ScriptExecutable::visitCodeBlockEdge<JSC::AbstractSlotVisitor>(a2, *(_QWORD *)(this + 72));
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v7);
    if ((result & 1) == 0)
    {
      v14 = this >> 4;
      v15 = (this >> 10) & 0xF;
      if ((this & 8) != 0)
      {
        v22 = *(unsigned __int8 *)(this - 76);
        v23 = 1 << v22;
        v24 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v22 >> 3) & 0x1C) + 440);
        while (1)
        {
          v25 = *v24;
          if ((*v24 & v23) != 0)
            break;
          v26 = __ldxr(v24);
          if (v26 == v25)
          {
            if (!__stxr(v25 | v23, v24))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
      else
      {
        v16 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
        v17 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 480) + (v17 & 0xFFFFFFF8) + 8) + 8 * (v17 & 7));
        if (!result)
          result = (uint64_t)JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v16 + 424), v17, v8, v9, v10, v11, v12, v13);
        v18 = 1 << v14;
        v19 = (unint64_t *)(result + 8 * v15);
        while (1)
        {
          v20 = *v19;
          if ((*v19 & v18) != 0)
            break;
          v21 = __ldxr(v19);
          if (v21 == v20)
          {
            if (!__stxr(v20 | v18, v19))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
      if ((this & 8) != 0)
      {
        v33 = *(unsigned __int8 *)(this - 76);
        v34 = 1 << v33;
        v35 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v33 >> 3) & 0x1C) + 352);
        while (1)
        {
          v36 = *v35;
          if ((*v35 & v34) != 0)
            break;
          v37 = __ldxr(v35);
          if (v37 == v36)
          {
            if (!__stxr(v36 | v34, v35))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
      else
      {
        v27 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
        v28 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 392) + (v28 & 0xFFFFFFF8) + 8) + 8 * (v28 & 7));
        if (!result)
          result = (uint64_t)JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v27 + 336), v28, v8, v9, v10, v11, v12, v13);
        v29 = 1 << v14;
        v30 = (unint64_t *)(result + 8 * v15);
        while (1)
        {
          v31 = *v30;
          if ((*v30 & v29) != 0)
            break;
          v32 = __ldxr(v30);
          if (v32 == v31)
          {
            if (!__stxr(v31 | v29, v30))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
  }
  *(_QWORD *)(v38[0] + 88) = v39;
  return result;
}

void JSC::GlobalExecutable::visitOutputConstraints(unint64_t this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  _BYTE v23[8];
  unsigned __int8 *v24;
  char v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(this + 72);
  if (!v8)
    return;
  v11 = v8 >> 4;
  v12 = (v8 >> 10) & 0xF;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v13 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
      && ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFC000) + 8 * v12 + 0x28) >> v11) & 1) != 0)
    {
LABEL_5:
      if (*(_DWORD *)(v13 + 32) != *(_DWORD *)(*((_QWORD *)a2 + 10) + 240)
        || ((*(_QWORD *)(v13 + 8 * v12 + 40) >> v11) & 1) == 0)
      {
        return;
      }
      goto LABEL_10;
    }
  }
  LOBYTE(v24) = 0;
  v26 = 0;
  JSC::ScriptExecutable::runConstraint<JSC::SlotVisitor>((uint64_t)v23, (uint64_t)a2, (_QWORD *)v8, a4, a5, a6, a7, a8);
  if (v26 && v25)
  {
    v21 = v24;
    v22 = __ldxr(v24);
    if (v22 == 1)
    {
      if (!__stlxr(0, v24))
        goto LABEL_20;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v15, v16, v17, v18, v19, v20);
  }
LABEL_20:
  if ((v8 & 8) == 0)
  {
    v13 = v8 & 0xFFFFFFFFFFFFC000;
    goto LABEL_5;
  }
LABEL_9:
  if ((*(_BYTE *)(v8 - 79) & 1) == 0)
    return;
LABEL_10:
  v14 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 0x10);
  if ((this & 8) != 0)
    v14 = (_QWORD *)(this - 72);
  JSC::IsoCellSet::remove(*v14 + 336, this);
}

unint64_t JSC::GlobalExecutable::visitOutputConstraints(unint64_t this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[2];
  uint64_t v26;
  char v27;
  _BYTE v28[8];
  unsigned __int8 *v29;
  char v30;
  char v31;
  uint64_t v32;

  v4 = this;
  v32 = *MEMORY[0x1E0C80C00];
  v25[0] = a2;
  v25[1] = this;
  v27 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v26 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19893C850);
  }
  *((_QWORD *)a2 + 11) = v25;
  v6 = *(_QWORD **)(this + 72);
  if (!v6)
    goto LABEL_27;
  if (((*(uint64_t (**)(JSC::JSCell *, _QWORD, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(this + 72), a3) & 1) == 0)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    JSC::CodeBlock::propagateTransitions<JSC::AbstractSlotVisitor>(v6, (uint64_t)v28, a2);
    JSC::CodeBlock::determineLiveness<JSC::AbstractSlotVisitor>((uint64_t)v6, (uint64_t)v28, (uint64_t)a2);
    if (v31)
    {
      if (v30)
      {
        v13 = v29;
        v14 = __ldxr(v29);
        if (v14 == 1)
        {
          if (!__stlxr(0, v29))
            goto LABEL_12;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v7, v8, v9, v10, v11, v12);
      }
    }
  }
LABEL_12:
  this = (*(uint64_t (**)(JSC::JSCell *, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v6);
  if ((_DWORD)this)
  {
    if ((v4 & 8) != 0)
    {
      v20 = *(unsigned __int8 *)(v4 - 76);
      v21 = 1 << v20;
      v22 = (unsigned int *)(*(_QWORD *)(v4 - 72) + ((v20 >> 3) & 0x1C) + 352);
      while (1)
      {
        v23 = *v22;
        if ((*v22 & v21) == 0)
          break;
        v24 = __ldxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 & ~v21, v22))
            break;
        }
        else
        {
          __clrex();
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFC000) + 0x10) + 392)
                                  + (*(_DWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                  + 8)
                      + 8 * (*(_DWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFC000) + 12) & 7));
      if (v15)
      {
        v16 = 1 << (v4 >> 4);
        v17 = (unint64_t *)(v15 + 8 * ((v4 >> 10) & 0xF));
        while (1)
        {
          v18 = *v17;
          if ((*v17 & v16) == 0)
            break;
          v19 = __ldxr(v17);
          if (v19 == v18)
          {
            if (!__stxr(v18 & ~v16, v17))
              break;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
  }
LABEL_27:
  *(_QWORD *)(v25[0] + 88) = v26;
  return this;
}

void JSC::GlobalExecutable::finalizeUnconditionally(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  v4 = *(_QWORD *)(a1 + 72);
  while (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        break;
    }
    else if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
           && ((*(_QWORD *)((v4 & 0xFFFFFFFFFFFFC000) + 8 * ((v4 >> 10) & 0xF) + 0x28) >> (v4 >> 4)) & 1) != 0)
    {
      break;
    }
    if (JSC::CodeBlock::shouldJettisonDueToWeakReference(v4, a2))
      v26 = 1;
    else
      v26 = 9;
    JSC::CodeBlock::jettison(v4, v26, 0, 0, v25, v21, v22, v23, v24);
    v27 = v4 == *(_QWORD *)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 72);
    if (v27)
    {
      *(_QWORD *)(a1 + 72) = 0;
      break;
    }
  }
  v5 = a1 >> 4;
  v6 = (a1 >> 10) & 0xF;
  if ((a1 & 8) != 0)
  {
    v30 = *(unsigned __int8 *)(a1 - 76);
    v31 = 1 << v30;
    v32 = (unsigned int *)(*(_QWORD *)(a1 - 72) + ((v30 >> 3) & 0x1C) + 352);
    while (1)
    {
      v33 = *v32;
      if ((*v32 & v31) == 0)
        break;
      v34 = __ldxr(v32);
      if (v34 == v33)
      {
        if (!__stxr(v33 & ~v31, v32))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 0x10);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 12);
    v9 = v8 >> 3;
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 392) + 8 * (v8 >> 3) + 8);
    v11 = v8 & 7;
    v12 = *(_QWORD *)(v10 + 8 * v11);
    if (!v12)
      goto LABEL_9;
    v13 = 1 << v5;
    v14 = (unint64_t *)(v12 + 8 * v6);
    while (1)
    {
      v15 = *v14;
      if ((*v14 & v13) == 0)
        break;
      v29 = __ldxr(v14);
      if (v29 == v15)
      {
        if (!__stxr(v15 & ~v13, v14))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  if ((a1 & 8) == 0)
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 0x10);
    v16 = *(unsigned int *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 12);
    v9 = v16 >> 3;
    v11 = v16 & 7;
LABEL_9:
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 480) + 8 * v9 + 8) + 8 * v11);
    if (v17)
    {
      v18 = 1 << v5;
      v19 = (unint64_t *)(v17 + 8 * v6);
      while (1)
      {
        v20 = *v19;
        if ((*v19 & v18) == 0)
          break;
        v28 = __ldxr(v19);
        if (v28 == v20)
        {
          if (!__stxr(v20 & ~v18, v19))
            return;
        }
        else
        {
          __clrex();
        }
      }
    }
    return;
  }
  v35 = *(unsigned __int8 *)(a1 - 76);
  v36 = 1 << v35;
  v37 = (unsigned int *)(*(_QWORD *)(a1 - 72) + ((v35 >> 3) & 0x1C) + 440);
  while (1)
  {
    v38 = *v37;
    if ((*v37 & v36) == 0)
      break;
    v39 = __ldxr(v37);
    if (v39 == v38)
    {
      if (!__stxr(v38 & ~v36, v37))
        return;
    }
    else
    {
      __clrex();
    }
  }
}

void JSC::ISO8601::parseDuration(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  double v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BOOL8 v24;
  double v25;
  double v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  double v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unint64_t v48;
  double v49;
  unint64_t v50;
  double v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unsigned __int16 *v69;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _BOOL8 v88;
  double v89;
  double v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  char v102;
  unint64_t v103;
  int v104;
  double v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  unsigned __int16 *v116;
  unsigned int v117;
  unint64_t v118;
  double v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v130;
  int v132;
  BOOL v135;
  double v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  char v143;
  BOOL v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  unint64_t v148;
  unsigned __int16 *v149;
  int v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165[2];

  v3 = (uint64_t)a1;
  v5 = a2;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (a2 <= 2)
      goto LABEL_78;
    v163 = 0u;
    v164 = 0u;
    v161 = 0u;
    v162 = 0u;
    v160 = 0u;
    v40 = *a1;
    v41 = 1;
    if (v40 != 43)
    {
      if (v40 != 8722 && v40 != 45)
      {
LABEL_84:
        if ((v40 - 97) >= 0x1A)
          v42 = 0xFFFF;
        else
          v42 = 65503;
        if ((v42 & v40) != 0x50)
          goto LABEL_391;
        v43 = 0;
        v44 = (double)(int)v41;
        v45 = v5 - 1;
        v11 = 0x100001A00;
        v12 = 0.0;
        v13 = 0.0;
        v14 = 0.0;
        while (1)
        {
          v46 = (unsigned __int16 *)(v3 + 2);
          if (*(unsigned __int16 *)(v3 + 2) - 48 >= 0xA)
          {
            *((double *)&v160 + 1) = v14;
            v161 = *(unint64_t *)&v13;
            *(double *)&v160 = v12;
            goto LABEL_267;
          }
          if (v45 < 2)
          {
            v48 = 1;
          }
          else
          {
            v47 = 2;
            v48 = 1;
            do
            {
              if (v46[v48] - 48 >= 0xA)
                break;
              v48 = v47;
              v18 = v45 > v47++;
            }
            while (v18);
            if (v45 < v48)
            {
LABEL_387:
              __break(1u);
LABEL_388:
              if (!v11)
                goto LABEL_177;
              goto LABEL_391;
            }
            if (!v48)
            {
LABEL_96:
              v49 = NAN;
              goto LABEL_97;
            }
          }
          v55 = 0;
          v56 = 1;
          while (1)
          {
            v57 = v46[v55];
            if (v57 <= 0xFF)
              break;
            v158 = a3;
            v156 = v41;
            v59 = u_charType(v46[v55]);
            v41 = v156;
            a3 = v158;
            v60 = v59 != 12 && v57 - 8232 >= 2;
            if (v60 && v57 != 65279)
            {
              v57 = v46[v55];
              goto LABEL_148;
            }
LABEL_117:
            ++v55;
            ++v56;
            if (v48 == v55)
              goto LABEL_96;
          }
          v58 = v46[v55] > 0x20u || ((1 << v57) & 0x100001A00) == 0;
          if (!v58)
            goto LABEL_117;
          v62 = v46[v55] == 160 || v57 == 13;
          if (v62 || v57 == 10)
            goto LABEL_117;
          v156 = v41;
          v158 = a3;
LABEL_148:
          v64 = v57 == 43 || v57 == 45;
          v65 = v64;
          if (v64)
            v66 = v55 + 1;
          else
            v66 = v55;
          if (v66 >= v48 || (v67 = v46[v66] - 48, v67 > 9))
          {
            v49 = NAN;
          }
          else
          {
            v49 = (double)v67;
            if (v65 - v48 + v55 == -1)
            {
LABEL_163:
              v72 = v48;
            }
            else
            {
              v68 = v65 + v55;
              v69 = (unsigned __int16 *)(v3 + 2 * (v65 + v56) + 2);
              while (1)
              {
                v70 = *v69++;
                v71 = v70 - 48;
                if ((v70 - 48) > 9)
                  break;
                v49 = v49 * 10.0 + (double)v71;
                if (v48 - 1 == ++v68)
                  goto LABEL_163;
              }
              v72 = v68 + 1;
            }
            if (v49 >= 9.00719925e15)
            {
              if (v48 < (int)v66)
                goto LABEL_387;
              v73 = (int)v66;
              v74 = v72 - (int)v66;
              if (v74 == -1)
              {
                v74 = v48 - v73;
              }
              else if (v48 - v73 < v74)
              {
                goto LABEL_387;
              }
              v165[0] = 0;
              fast_float::from_chars_advanced<double,char16_t>(&v46[v73], &v46[v73 + v74], (double *)v165, 0x2E00000005);
              v49 = *(double *)v165;
            }
            if (v57 == 45)
              v49 = -v49;
          }
          a3 = v158;
          v41 = v156;
LABEL_97:
          v50 = v45 - v48;
          if (v45 < v48)
            goto LABEL_387;
          if (v45 == v48)
            goto LABEL_391;
          v51 = v49 * v44;
          v3 = (uint64_t)&v46[v48];
          v52 = *(unsigned __int16 *)v3;
          if ((v52 - 97) >= 0x1A)
            v53 = 0xFFFF;
          else
            v53 = 65503;
          v54 = v53 & v52;
          if (v54 <= 86)
          {
            if (v54 == 77)
            {
              if (v43 >= 2)
                goto LABEL_391;
              if (v51 == 0.0)
                v14 = 0.0;
              else
                v14 = v51;
              v43 = 2;
              goto LABEL_146;
            }
            if (v54 != 68)
              goto LABEL_391;
            if (v51 == 0.0)
              v51 = 0.0;
            *(double *)&v161 = v13;
            *((double *)&v161 + 1) = v51;
            *(double *)&v160 = v12;
            *((double *)&v160 + 1) = v14;
            v45 = v50 - 1;
            if (v50 == 1)
              goto LABEL_177;
            v46 = (unsigned __int16 *)(v3 + 2);
LABEL_267:
            if (v45 < 3)
              goto LABEL_391;
            v112 = *v46;
            v113 = (v112 - 97) >= 0x1A ? 0xFFFF : 65503;
            if ((v113 & v112) != 0x54)
              goto LABEL_391;
            v114 = 0;
            v115 = v45 - 1;
            v11 = 0x100001A00;
LABEL_273:
            if (!v115)
              goto LABEL_177;
            v116 = v46 + 1;
            if (v46[1] - 48 > 9)
              goto LABEL_391;
            if (v115 < 2)
            {
              v118 = 1;
            }
            else
            {
              v117 = 2;
              v118 = 1;
              do
              {
                if (v116[v118] - 48 >= 0xA)
                  break;
                v118 = v117;
                v18 = v115 > v117++;
              }
              while (v18);
              if (v115 < v118)
                goto LABEL_387;
              if (!v118)
              {
LABEL_281:
                v119 = NAN;
                goto LABEL_282;
              }
            }
            v128 = 0;
            v129 = 1;
            while (1)
            {
              v130 = v116[v128];
              if (v130 > 0xFF)
              {
                v159 = a3;
                v155 = v114;
                v157 = v41;
                v132 = u_charType(v116[v128]);
                v114 = v155;
                v41 = v157;
                a3 = v159;
                if (v132 != 12 && v130 - 8232 >= 2 && v130 != 65279)
                {
                  v130 = v116[v128];
                  goto LABEL_349;
                }
              }
              else if (v116[v128] > 0x20u || ((1 << v130) & 0x100001A00) == 0)
              {
                v135 = v116[v128] == 160 || v130 == 13;
                if (!v135 && v130 != 10)
                {
                  v155 = v114;
                  v157 = v41;
                  v159 = a3;
LABEL_349:
                  v144 = v130 == 43 || v130 == 45;
                  v145 = v144;
                  if (v144)
                    v146 = v128 + 1;
                  else
                    v146 = v128;
                  if (v146 >= v118 || (v147 = v116[v146] - 48, v147 > 9))
                  {
                    v119 = NAN;
                  }
                  else
                  {
                    v119 = (double)v147;
                    if (v145 - v118 + v128 == -1)
                    {
LABEL_364:
                      v152 = v118;
                    }
                    else
                    {
                      v148 = v145 + v128;
                      v149 = &v46[v145 + 1 + v129];
                      while (1)
                      {
                        v150 = *v149++;
                        v151 = v150 - 48;
                        if ((v150 - 48) > 9)
                          break;
                        v119 = v119 * 10.0 + (double)v151;
                        if (v118 - 1 == ++v148)
                          goto LABEL_364;
                      }
                      v152 = v148 + 1;
                    }
                    if (v119 >= 9.00719925e15)
                    {
                      if (v118 < (int)v146)
                        goto LABEL_387;
                      v153 = (int)v146;
                      v154 = v152 - (int)v146;
                      if (v154 == -1)
                      {
                        v154 = v118 - v153;
                      }
                      else if (v118 - v153 < v154)
                      {
                        goto LABEL_387;
                      }
                      v165[0] = 0;
                      fast_float::from_chars_advanced<double,char16_t>(&v116[v153], &v116[v153 + v154], (double *)v165, 0x2E00000005);
                      v119 = *(double *)v165;
                    }
                    if (v130 == 45)
                      v119 = -v119;
                  }
                  a3 = v159;
                  v114 = v155;
                  v41 = v157;
LABEL_282:
                  v60 = v115 >= v118;
                  v120 = v115 - v118;
                  if (!v60)
                    goto LABEL_387;
                  if (!v120)
                    goto LABEL_391;
                  v46 = &v116[v118];
                  v121 = v3 & 0xFFFFFF0000000000;
                  v122 = *v46;
                  if ((v122 | 2) != 0x2E)
                  {
                    v126 = 0;
                    v3 = v121 | 0x100000000;
                    goto LABEL_322;
                  }
                  v123 = v120 - 1;
                  if (v120 == 1)
                    goto LABEL_391;
                  v124 = 0;
                  v125 = 0;
                  v126 = (uint64_t)(v46 + 1);
                  while (*(unsigned __int16 *)(v126 + 2 * v124) - 48 <= 9)
                  {
                    v124 = (v125 + 1);
                    v125 = v124;
                    v127 = v124;
                    if (v123 <= v124)
                      goto LABEL_318;
                  }
                  v127 = v125;
LABEL_318:
                  if ((v127 - 10) <= 0xFFFFFFF6)
                    goto LABEL_391;
                  v120 = v123 - v124;
                  if (v123 < v124)
                    goto LABEL_387;
                  if (v123 == v124)
                    goto LABEL_391;
                  v46 = (unsigned __int16 *)(v126 + 2 * v124);
                  v3 = v124 | v121;
                  v122 = *v46;
LABEL_322:
                  v137 = v119 * v44;
                  if ((v122 - 97) >= 0x1A)
                    v138 = 0xFFFF;
                  else
                    v138 = 65503;
                  v139 = v138 & v122;
                  if (v139 == 83)
                  {
                    if (v137 == 0.0)
                      v137 = 0.0;
                    *(double *)&v163 = v137;
                    if (!v126)
                    {
                      v142 = v41;
                      v143 = 0;
                      v114 = 3;
                      goto LABEL_343;
                    }
                    v140 = a3;
                    v141 = 6;
                    goto LABEL_342;
                  }
                  if (v139 != 77)
                  {
                    if (v139 != 72 || v114)
                      goto LABEL_391;
                    if (v137 == 0.0)
                      v137 = 0.0;
                    *(double *)&v162 = v137;
                    if (v126)
                    {
                      v140 = a3;
                      v141 = 4;
                      goto LABEL_342;
                    }
                    v142 = v41;
                    v143 = 1;
                    v114 = 1;
LABEL_343:
                    if (!v120)
                      goto LABEL_387;
                    v115 = v120 - 1;
                    v41 = v142;
                    if ((v143 & 1) == 0)
                    {
                      if (!v115)
                        goto LABEL_177;
                      goto LABEL_391;
                    }
                    goto LABEL_273;
                  }
                  if (v114 < 2)
                  {
                    if (v137 == 0.0)
                      v137 = 0.0;
                    *((double *)&v162 + 1) = v137;
                    if (!v126)
                    {
                      v142 = v41;
                      v114 = 2;
                      v143 = 1;
                      goto LABEL_343;
                    }
                    v140 = a3;
                    v141 = 5;
LABEL_342:
                    v142 = v41;
                    JSC::ISO8601::handleFraction((double *)&v160, v41, v126, v3, v141);
                    v143 = 0;
                    v114 = 3;
                    a3 = v140;
                    goto LABEL_343;
                  }
LABEL_391:
                  LOBYTE(v27) = 0;
LABEL_392:
                  *(_BYTE *)a3 = 0;
                  goto LABEL_393;
                }
              }
              ++v128;
              ++v129;
              if (v118 == v128)
                goto LABEL_281;
            }
          }
          if (v54 == 87)
          {
            if (v43 >= 3)
              goto LABEL_391;
            if (v51 == 0.0)
              v13 = 0.0;
            else
              v13 = v51;
            v43 = 3;
          }
          else
          {
            if (v54 != 89 || v43)
              goto LABEL_391;
            if (v51 == 0.0)
              v12 = 0.0;
            else
              v12 = v51;
            v43 = 1;
          }
LABEL_146:
          v45 = v50 - 1;
          if (v50 == 1)
          {
LABEL_176:
            *((double *)&v160 + 1) = v14;
            v161 = *(unint64_t *)&v13;
            *(double *)&v160 = v12;
            goto LABEL_177;
          }
        }
      }
      v41 = 0xFFFFFFFFLL;
    }
    --v5;
    v3 = (uint64_t)(a1 + 1);
    v40 = a1[1];
    goto LABEL_84;
  }
  if (a2 <= 2)
  {
LABEL_78:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v160 = 0u;
  v6 = *(unsigned __int8 *)a1;
  v7 = 1;
  if (v6 == 43)
  {
LABEL_6:
    v5 = a2 - 1;
    v3 = (uint64_t)a1 + 1;
    v6 = *((unsigned __int8 *)a1 + 1);
    goto LABEL_7;
  }
  if (v6 == 45)
  {
    v7 = -1;
    goto LABEL_6;
  }
LABEL_7:
  if ((v6 - 97) >= 0x1A)
    v8 = 255;
  else
    v8 = 223;
  if ((v8 & v6) != 0x50)
    goto LABEL_391;
  v9 = 0;
  v10 = (double)v7;
  v11 = v5 - 1;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  while (1)
  {
    v15 = (unsigned __int8 *)(v3 + 1);
    if (*(unsigned __int8 *)(v3 + 1) - 48 >= 0xA)
    {
      *((double *)&v160 + 1) = v14;
      v161 = *(unint64_t *)&v13;
      *(double *)&v160 = v12;
LABEL_179:
      if (v11 < 3)
        goto LABEL_391;
      v77 = *v15;
      v78 = (v77 - 97) >= 0x1A ? 255 : 223;
      if ((v78 & v77) != 0x54)
        goto LABEL_391;
      v79 = 0;
      --v11;
      while (1)
      {
        if (!v11)
          goto LABEL_177;
        v80 = v15 + 1;
        if (v15[1] - 48 > 9)
          goto LABEL_391;
        if (v11 < 2)
        {
          v82 = 1;
        }
        else
        {
          v81 = 2;
          v82 = 1;
          do
          {
            if (v80[v82] - 48 >= 0xA)
              break;
            v82 = v81;
            v18 = v11 > v81++;
          }
          while (v18);
          if (v11 < v82)
            goto LABEL_387;
          if (!v82)
          {
            v83 = NAN;
            goto LABEL_207;
          }
        }
        v84 = 0;
        v85 = 1;
        while (1)
        {
          v86 = v15[v85];
          if ((v86 - 9) >= 5 && v86 != 32)
          {
            v87 = a3;
            if (v86 == 43)
            {
              v89 = 1.0;
              v88 = 1;
              goto LABEL_248;
            }
            if (v86 != 160)
              break;
          }
          ++v85;
          ++v84;
          if (v85 - v82 == 1)
          {
            v90 = NAN;
            goto LABEL_205;
          }
        }
        v58 = v86 == 45;
        v88 = v86 == 45;
        if (v58)
          v89 = -1.0;
        else
          v89 = 1.0;
LABEL_248:
        v103 = v88 + v85 - 1;
        if (v103 >= v82 || (v104 = v15[v88 + v85] - 48, v104 > 9))
        {
          v90 = NAN;
        }
        else
        {
          v105 = (double)v104;
          if (v88 - v82 + v85)
          {
            v106 = v88 + v84;
            while (1)
            {
              v107 = v15[v106 + 2] - 48;
              if (v107 > 9)
                break;
              v105 = v105 * 10.0 + (double)v107;
              if (v82 - 1 == ++v106)
                goto LABEL_254;
            }
            v108 = v106 + 1;
          }
          else
          {
LABEL_254:
            v108 = v82;
          }
          if (v105 >= 9.00719925e15)
          {
            if (v82 < (int)v103)
              goto LABEL_387;
            v109 = (int)v103;
            v110 = v108 - (int)v103;
            v111 = v82 - (int)v103;
            if (v110 == -1)
            {
              v110 = v111;
            }
            else if (v111 < v110)
            {
              goto LABEL_387;
            }
            v165[0] = 0;
            fast_float::from_chars_advanced<double,char>(&v80[v109], &v80[v109 + v110], v165, 0x2E00000005);
            v105 = *(double *)v165;
          }
          v90 = v89 * v105;
        }
        a3 = v87;
LABEL_205:
        if (v11 < v82)
          goto LABEL_387;
        v83 = v90 * v10;
LABEL_207:
        v11 -= v82;
        if (!v11)
          goto LABEL_391;
        v15 = &v80[v82];
        v91 = v3 & 0xFFFFFF0000000000;
        v92 = v80[v82];
        if ((v92 | 2) == 0x2E)
        {
          v93 = v11 - 1;
          if (v11 == 1)
            goto LABEL_391;
          v94 = 0;
          v95 = 0;
          v96 = (uint64_t)(v15 + 1);
          while (*(unsigned __int8 *)(v96 + v94) - 48 <= 9)
          {
            v94 = (v95 + 1);
            v95 = v94;
            v97 = v94;
            if (v93 <= v94)
              goto LABEL_216;
          }
          v97 = v95;
LABEL_216:
          if ((v97 - 10) <= 0xFFFFFFF6)
            goto LABEL_391;
          v11 = v93 - v94;
          if (v93 < v94)
            goto LABEL_387;
          if (v93 == v94)
            goto LABEL_391;
          v15 = (unsigned __int8 *)(v96 + v94);
          v91 |= v94;
          v92 = *(unsigned __int8 *)(v96 + v94);
        }
        else
        {
          v96 = 0;
        }
        v3 = v91 | 0x100000000;
        if ((v92 - 97) >= 0x1A)
          v98 = 255;
        else
          v98 = 223;
        v99 = v98 & v92;
        if (v99 == 83)
        {
          if (v83 == 0.0)
            v83 = 0.0;
          *(double *)&v163 = v83;
          if (!v96)
          {
            v102 = 0;
            v79 = 3;
            goto LABEL_241;
          }
          v100 = a3;
          v101 = 6;
        }
        else if (v99 == 77)
        {
          if (v79 >= 2)
            goto LABEL_391;
          if (v83 == 0.0)
            v83 = 0.0;
          *((double *)&v162 + 1) = v83;
          if (!v96)
          {
            v79 = 2;
            v102 = 1;
            goto LABEL_241;
          }
          v100 = a3;
          v101 = 5;
        }
        else
        {
          if (v99 != 72 || v79)
            goto LABEL_391;
          if (v83 == 0.0)
            v83 = 0.0;
          *(double *)&v162 = v83;
          if (!v96)
          {
            v102 = 1;
            v79 = 1;
            goto LABEL_241;
          }
          v100 = a3;
          v101 = 4;
        }
        JSC::ISO8601::handleFraction((double *)&v160, v7, v96, v3, v101);
        v102 = 0;
        v79 = 3;
        a3 = v100;
LABEL_241:
        if (!v11)
          goto LABEL_387;
        --v11;
        if ((v102 & 1) == 0)
          goto LABEL_388;
      }
    }
    if (v11 < 2)
    {
      v17 = 1;
    }
    else
    {
      v16 = 2;
      v17 = 1;
      do
      {
        if (v15[v17] - 48 >= 0xA)
          break;
        v17 = v16;
        v18 = v11 > v16++;
      }
      while (v18);
      if (v11 < v17)
        goto LABEL_387;
      if (!v17)
      {
        v19 = NAN;
        goto LABEL_33;
      }
    }
    v20 = 0;
    v21 = 1;
    while (1)
    {
      v22 = *(unsigned __int8 *)(v3 + v21);
      if ((v22 - 9) >= 5 && v22 != 32)
      {
        v23 = a3;
        if (v22 == 43)
        {
          v25 = 1.0;
          v24 = 1;
          goto LABEL_59;
        }
        if (v22 != 160)
          break;
      }
      ++v21;
      ++v20;
      if (v21 - v17 == 1)
      {
        v26 = NAN;
        goto LABEL_31;
      }
    }
    v58 = v22 == 45;
    v24 = v22 == 45;
    if (v58)
      v25 = -1.0;
    else
      v25 = 1.0;
LABEL_59:
    v31 = v24 + v21 - 1;
    if (v31 >= v17 || (v32 = *(unsigned __int8 *)(v3 + v24 + v21) - 48, v32 > 9))
    {
      v26 = NAN;
    }
    else
    {
      v33 = (double)v32;
      if (v24 - v17 + v21)
      {
        v34 = v24 + v20;
        while (1)
        {
          v35 = *(unsigned __int8 *)(v3 + 2 + v34) - 48;
          if (v35 > 9)
            break;
          v33 = v33 * 10.0 + (double)v35;
          if (v17 - 1 == ++v34)
            goto LABEL_65;
        }
        v36 = v34 + 1;
      }
      else
      {
LABEL_65:
        v36 = v17;
      }
      if (v33 >= 9.00719925e15)
      {
        if (v17 < (int)v31)
          goto LABEL_387;
        v37 = (int)v31;
        v38 = v36 - (int)v31;
        v39 = v17 - (int)v31;
        if (v38 == -1)
        {
          v38 = v39;
        }
        else if (v39 < v38)
        {
          goto LABEL_387;
        }
        v165[0] = 0;
        fast_float::from_chars_advanced<double,char>(&v15[v37], &v15[v37 + v38], v165, 0x2E00000005);
        v33 = *(double *)v165;
      }
      v26 = v25 * v33;
    }
    a3 = v23;
LABEL_31:
    if (v11 < v17)
      goto LABEL_387;
    v19 = v26 * v10;
LABEL_33:
    v27 = v11 - v17;
    if (v11 == v17)
      goto LABEL_392;
    v3 = (uint64_t)&v15[v17];
    v28 = v15[v17];
    v29 = (v28 - 97) >= 0x1A ? 255 : 223;
    v30 = v29 & v28;
    if (v30 <= 86)
      break;
    if (v30 == 87)
    {
      if (v9 >= 3)
        goto LABEL_391;
      if (v19 == 0.0)
        v13 = 0.0;
      else
        v13 = v19;
      v9 = 3;
    }
    else
    {
      if (v30 != 89 || v9)
        goto LABEL_391;
      if (v19 == 0.0)
        v12 = 0.0;
      else
        v12 = v19;
      v9 = 1;
    }
LABEL_56:
    v11 = v27 - 1;
    if (v27 == 1)
      goto LABEL_176;
  }
  if (v30 == 77)
  {
    if (v9 >= 2)
      goto LABEL_391;
    if (v19 == 0.0)
      v14 = 0.0;
    else
      v14 = v19;
    v9 = 2;
    goto LABEL_56;
  }
  if (v30 != 68)
    goto LABEL_391;
  if (v19 == 0.0)
    v19 = 0.0;
  *(double *)&v161 = v13;
  *((double *)&v161 + 1) = v19;
  *(double *)&v160 = v12;
  *((double *)&v160 + 1) = v14;
  v11 = v27 - 1;
  if (v27 != 1)
  {
    v15 = (unsigned __int8 *)(v3 + 1);
    goto LABEL_179;
  }
LABEL_177:
  v75 = v163;
  *(_OWORD *)(a3 + 32) = v162;
  *(_OWORD *)(a3 + 48) = v75;
  *(_OWORD *)(a3 + 64) = v164;
  v76 = v161;
  *(_OWORD *)a3 = v160;
  *(_OWORD *)(a3 + 16) = v76;
  LOBYTE(v27) = 1;
LABEL_393:
  *(_BYTE *)(a3 + 80) = v27;
}

unint64_t JSC::ISO8601::parseTimeZoneNumericUTCOffset(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  unsigned __int8 *v14;
  uint64_t v15;

  v2 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (a2 >= 3)
    {
      v3 = *a1;
      if (v3 == 43)
      {
        v4 = 1;
        goto LABEL_14;
      }
      if (v3 == 45)
      {
        v4 = -1;
LABEL_14:
        v14 = a1 + 1;
        v15 = a2 - 1;
        v9 = (unint64_t)JSC::ISO8601::parseTimeSpec<unsigned char>(&v14, 1);
LABEL_17:
        if (v10)
        {
          v6 = ((((3600000000000 * v9) | (v9 >> 52) & 0x3FF)
               + 60000000000 * BYTE1(v9)
               + 1000000000 * BYTE2(v9)
               + 1000000 * (WORD2(v9) & 0x3FF)
               + 1000 * ((v9 >> 42) & 0x3FF))
              * v4) & 0xFFFFFFFFFFFFFF00;
          v5 = (((v9 >> 52) + (BYTE4(v9) << 6) - 24 * (v9 >> 42)) * v4);
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
        v2 = v15;
        goto LABEL_21;
      }
LABEL_12:
      v8 = 0;
      v5 = 0;
      return v5 | v8;
    }
  }
  else if (a2 >= 3)
  {
    v7 = *(unsigned __int16 *)a1;
    if (v7 == 43)
    {
      v4 = 1;
    }
    else
    {
      if (v7 != 8722 && v7 != 45)
        goto LABEL_12;
      v4 = -1;
    }
    v14 = a1 + 2;
    v15 = a2 - 1;
    v9 = (unint64_t)JSC::ISO8601::parseTimeSpec<char16_t>((unsigned __int16 **)&v14, 1);
    goto LABEL_17;
  }
  v5 = 0;
  v6 = 0;
LABEL_21:
  v11 = v6 & 0xFFFFFFFFFFFFFF00;
  v12 = v2 == 0;
  if (v2)
    v8 = 0;
  else
    v8 = v11;
  if (!v12)
    v5 = 0;
  return v5 | v8;
}

unint64_t JSC::ISO8601::parseUTCOffsetInMinutes(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int16 *v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v2 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (a2 < 3)
      goto LABEL_7;
    v3 = *a1;
    if (v3 == 43)
    {
      v4 = 1;
    }
    else
    {
      if (v3 != 45)
        goto LABEL_25;
      v4 = -1;
    }
    v10 = a1[1];
    if ((v10 - 48) > 2)
      goto LABEL_25;
    v11 = a1[2];
    if ((v11 - 48) > 9)
      goto LABEL_25;
    v12 = v11 + 10 * v10 - 528;
    if (v12 > 0x17)
      goto LABEL_25;
    if (a2 != 3)
    {
      v13 = a1 + 3;
      v14 = a1[3];
      if (v14 == 58)
      {
        v2 = a2 - 4;
        v13 = a1 + 4;
      }
      else
      {
        v2 = a2 - 3;
        if ((v14 - 48) > 5)
          goto LABEL_25;
      }
      v20 = v2 - 2;
      if (v2 >= 2)
      {
        v21 = *v13;
        if ((v21 - 48) > 5)
          goto LABEL_25;
        v22 = v13[1];
        goto LABEL_39;
      }
      goto LABEL_7;
    }
LABEL_30:
    v7 = v4 * 60 * v12;
    goto LABEL_9;
  }
  if (a2 < 3)
    goto LABEL_7;
  v9 = *(unsigned __int16 *)a1;
  if (v9 == 43)
  {
    v4 = 1;
  }
  else
  {
    if (v9 != 8722 && v9 != 45)
      goto LABEL_25;
    v4 = -1;
  }
  v15 = *((unsigned __int16 *)a1 + 1);
  if ((v15 - 48) > 2
    || (v16 = *((unsigned __int16 *)a1 + 2), (v16 - 48) > 9)
    || (v12 = v16 + 10 * v15 - 528, v12 > 0x17))
  {
LABEL_25:
    v8 = 0;
    v7 = 0;
    return v7 | v8;
  }
  if (a2 == 3)
    goto LABEL_30;
  v18 = (unsigned __int16 *)(a1 + 6);
  v19 = *((unsigned __int16 *)a1 + 3);
  if (v19 == 58)
  {
    v2 = a2 - 4;
    v18 = (unsigned __int16 *)(a1 + 8);
  }
  else
  {
    v2 = a2 - 3;
    if ((v19 - 48) > 5)
      goto LABEL_25;
  }
  v20 = v2 - 2;
  if (v2 >= 2)
  {
    v21 = *v18;
    if ((v21 - 48) > 5)
      goto LABEL_25;
    v22 = v18[1];
LABEL_39:
    if ((v22 - 48) <= 9)
    {
      v23 = v4 * (10 * v21 + 60 * v12 + v22 - 528);
      v6 = v23 & 0xFFFFFFFFFFFFFF00;
      v5 = v23;
      if (!v20)
        goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_7:
  v5 = 0;
  v6 = 0;
  if (v2)
    goto LABEL_25;
LABEL_8:
  v7 = v6 | v5;
LABEL_9:
  v8 = v7 & 0xFFFFFFFFFFFFFF00;
  v7 = v7;
  return v7 | v8;
}

void JSC::ISO8601::parseCalendarTime(unsigned __int8 *p_n_4@<X0>, size_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  WTF *v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  int v61;
  WTF *v62;
  int v63;
  unsigned int v64;
  int v65;
  WTF *v66;
  int v67;
  unsigned int v68;
  _BYTE v69[24];
  char v70[8];
  char v71[8];
  unsigned int v72;
  int v73;
  char v74;
  WTF *v75;
  int v76;
  unsigned int __n;
  size_t __n_4;
  unsigned __int8 v79;
  char v80;
  _BYTE *v81;
  __int128 v82;
  char v83;
  _BYTE v84[16];
  int v85;
  char v86;
  WTF *v87;
  int v88;
  unsigned int v89;
  size_t v90;
  char v91;
  unsigned __int8 v92;
  unsigned __int8 *v93;
  unint64_t v94;
  unsigned __int8 *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 v99;
  __int128 v100;
  char v101;
  _BYTE v102[16];
  unsigned int v103;
  unsigned __int8 v104;
  _BYTE v105[9];

  v9 = (int)a2;
  v10 = p_n_4;
  v12 = (unint64_t)a2 & 0xFF00000000;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    v93 = p_n_4;
    v94 = a2;
    if ((_DWORD)a2)
    {
      if ((*p_n_4 | 0x20) == 0x74)
      {
        v93 = p_n_4 + 1;
        v94 = a2 - 1;
      }
      p_n_4 = (unsigned __int8 *)JSC::ISO8601::parseTimeSpec<unsigned char>(&v93, 0);
      if ((_BYTE)a2)
      {
        v13 = p_n_4;
        v14 = v94;
        if (v94)
        {
          LOBYTE(v100) = 0;
          v104 = 0;
          v15 = v93;
          v16 = *v93;
          if (v16 <= 0x59)
          {
            if (v16 == 43 || v16 == 45)
              goto LABEL_72;
          }
          else
          {
            if (v16 == 90 || v16 == 122)
              goto LABEL_72;
            if (v16 == 91)
            {
              if (v94 >= 6 && v93[1] == 117 && v93[2] == 45 && v93[3] == 99 && v93[4] == 97 && v93[5] == 61)
              {
                LOBYTE(v95) = 0;
                v99 = 0;
LABEL_106:
                if (*v15 != 91 || v15[1] != 117 || v15[2] != 45 || v15[3] != 99 || v15[4] != 97 || v15[5] != 61)
                  goto LABEL_208;
                JSC::ISO8601::parseCalendar<unsigned char>((uint64_t)v69, &v93, a3, a4, a5, a6, a7, a8);
LABEL_154:
                if (!v70[0])
                {
                  LOBYTE(v81) = 0;
                  v92 = 0;
                  goto LABEL_229;
                }
                if (!v99)
                {
                  p_n_4 = (unsigned __int8 *)&v98;
                  v95 = (unsigned __int8 *)&v98;
                  v96 = 8;
                  v53 = *(unsigned __int8 **)v69;
                  a2 = (size_t *)&v69[16];
                  if (*(_BYTE **)v69 != &v69[16])
                  {
                    *(_QWORD *)v69 = &v69[16];
                    v95 = v53;
                    v54 = *(_DWORD *)&v69[12];
                    v96 = *(_DWORD *)&v69[8];
                    goto LABEL_204;
                  }
                  goto LABEL_203;
                }
                p_n_4 = v95;
                if (v95 != (unsigned __int8 *)&v98)
                {
                  if (v95)
                  {
                    v95 = 0;
                    v96 = 0;
                    WTF::fastFree((unint64_t)p_n_4, a2, a3, a4, a5, a6, a7, a8);
                  }
                  v95 = (unsigned __int8 *)&v98;
                }
                a2 = *(size_t **)v69;
                if (*(_BYTE **)v69 == &v69[16])
                {
                  v46 = *(_DWORD *)&v69[12];
                  p_n_4 = (unsigned __int8 *)memcpy(&v98, *(const void **)v69, *(unsigned int *)&v69[12]);
                  v45 = *(_DWORD *)&v69[8];
                }
                else
                {
                  *(_QWORD *)v69 = &v69[16];
                  v95 = (unsigned __int8 *)a2;
                  v45 = *(_DWORD *)&v69[8];
                  v46 = *(_DWORD *)&v69[12];
                }
                *(_DWORD *)&v69[12] = 0;
                v96 = v45;
                v97 = v46;
                if (v70[0])
                  goto LABEL_205;
                goto LABEL_208;
              }
LABEL_72:
              JSC::ISO8601::parseTimeZone<unsigned char>((uint64_t)v69, &v93);
              v33 = v73;
              if (!(_BYTE)v73)
              {
                LOBYTE(v81) = 0;
                v92 = 0;
                goto LABEL_99;
              }
              v100 = *(_OWORD *)v69;
              v101 = v69[16];
              a2 = (size_t *)v102;
              if (v104)
              {
                if (v103 == -1)
                {
                  if (v72 == -1)
                    goto LABEL_99;
                }
                else if (v72 == -1)
                {
                  p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E359AC10[v103])(&v81, v102);
                  v103 = -1;
                  goto LABEL_99;
                }
                v81 = v102;
                p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **))off_1E359AC30[v72])(&v81);
                goto LABEL_99;
              }
              v102[0] = 0;
              v103 = -1;
              v35 = v72;
              if (v72 != -1)
              {
                p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **, _BYTE *, char *))off_1E359AC20[v72])(&v81, v102, v70);
                v103 = v35;
              }
              v104 = 1;
LABEL_99:
              if ((_BYTE)v73 && v72 != -1)
                p_n_4 = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, char *))off_1E359AC10[v72])(&v95, v70);
              if (!v33)
                goto LABEL_233;
              v14 = v94;
              if (v94)
                goto LABEL_104;
LABEL_162:
              *(_QWORD *)v69 = v13;
              v74 = 0;
              if (v104)
              {
                *(_OWORD *)&v69[8] = v100;
                v70[0] = v101;
                v71[0] = 0;
                v73 = -1;
                v47 = v103;
                if (v103 != -1)
                {
                  p_n_4 = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, char *, _BYTE *))off_1E359AC20[v103])(&v95, v71, v102);
                  v73 = v47;
                  v13 = *(unsigned __int8 **)v69;
                }
                v74 = 1;
                v81 = v13;
                v86 = 0;
                v82 = *(_OWORD *)&v69[8];
                v83 = v70[0];
                v84[0] = 0;
                v85 = -1;
                if ((_DWORD)v47 == -1)
                {
                  v86 = 1;
                  LOBYTE(v87) = 0;
                  v91 = 0;
                  v92 = 1;
                }
                else
                {
                  p_n_4 = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, _BYTE *, char *))off_1E359AC20[v47])(&v95, v84, v71);
                  v85 = v47;
                  v86 = 1;
                  LOBYTE(v87) = 0;
                  v91 = 0;
                  v92 = 1;
                  if (v74 && v73 != -1)
                    p_n_4 = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, char *))off_1E359AC10[v73])(&v95, v71);
                }
              }
              else
              {
                v81 = v13;
                LOBYTE(v82) = 0;
                v86 = 0;
                LOBYTE(v87) = 0;
                v91 = 0;
                v92 = 1;
              }
              goto LABEL_233;
            }
          }
LABEL_104:
          LOBYTE(v95) = 0;
          v99 = 0;
          if (v14 < 6)
            goto LABEL_208;
          v15 = v93;
          goto LABEL_106;
        }
LABEL_49:
        v81 = v13;
        LOBYTE(v82) = 0;
        v86 = 0;
        LOBYTE(v87) = 0;
        v91 = 0;
        v27 = 1;
        v92 = 1;
        goto LABEL_237;
      }
    }
LABEL_28:
    v69[0] = 0;
    v80 = 0;
    goto LABEL_29;
  }
  v93 = p_n_4;
  v94 = a2;
  if (!(_DWORD)a2)
    goto LABEL_28;
  if ((*(unsigned __int16 *)p_n_4 | 0x20) == 0x74)
  {
    v93 = p_n_4 + 2;
    v94 = a2 - 1;
  }
  p_n_4 = (unsigned __int8 *)JSC::ISO8601::parseTimeSpec<char16_t>((unsigned __int16 **)&v93, 0);
  if (!(_BYTE)a2)
    goto LABEL_28;
  v13 = p_n_4;
  v14 = v94;
  if (!v94)
    goto LABEL_49;
  LOBYTE(v100) = 0;
  v104 = 0;
  v17 = v93;
  v18 = *(unsigned __int16 *)v93;
  if (v18 <= 0x5A)
  {
    if (v18 != 43 && v18 != 45 && v18 != 90)
      goto LABEL_145;
LABEL_88:
    JSC::ISO8601::parseTimeZone<char16_t>((uint64_t)v69, (unsigned __int16 **)&v93);
    v34 = v73;
    if (!(_BYTE)v73)
    {
      LOBYTE(v81) = 0;
      v92 = 0;
      goto LABEL_140;
    }
    v100 = *(_OWORD *)v69;
    v101 = v69[16];
    a2 = (size_t *)v102;
    if (v104)
    {
      if (v103 == -1)
      {
        if (v72 == -1)
          goto LABEL_140;
      }
      else if (v72 == -1)
      {
        p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E359AC10[v103])(&v81, v102);
        v103 = -1;
        goto LABEL_140;
      }
      v81 = v102;
      p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **))off_1E359AC30[v72])(&v81);
      goto LABEL_140;
    }
    v102[0] = 0;
    v103 = -1;
    v36 = v72;
    if (v72 != -1)
    {
      p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE **, _BYTE *, char *))off_1E359AC20[v72])(&v81, v102, v70);
      v103 = v36;
    }
    v104 = 1;
LABEL_140:
    if ((_BYTE)v73 && v72 != -1)
      p_n_4 = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, char *))off_1E359AC10[v72])(&v95, v70);
    if (!v34)
      goto LABEL_233;
    v14 = v94;
    if (!v94)
      goto LABEL_162;
    goto LABEL_145;
  }
  if (v18 == 8722 || v18 == 122)
    goto LABEL_88;
  if (v18 == 91)
  {
    if (v94 >= 6
      && *((_WORD *)v93 + 1) == 117
      && *((_WORD *)v93 + 2) == 45
      && *((_WORD *)v93 + 3) == 99
      && *((_WORD *)v93 + 4) == 97
      && *((_WORD *)v93 + 5) == 61)
    {
      LOBYTE(v95) = 0;
      v99 = 0;
      goto LABEL_147;
    }
    goto LABEL_88;
  }
LABEL_145:
  LOBYTE(v95) = 0;
  v99 = 0;
  if (v14 < 6)
    goto LABEL_208;
  v17 = v93;
LABEL_147:
  if (*(_WORD *)v17 == 91
    && *((_WORD *)v17 + 1) == 117
    && *((_WORD *)v17 + 2) == 45
    && *((_WORD *)v17 + 3) == 99
    && *((_WORD *)v17 + 4) == 97
    && *((_WORD *)v17 + 5) == 61)
  {
    JSC::ISO8601::parseCalendar<char16_t>((uint64_t)v69, &v93, a3, a4, a5, a6, a7, a8);
    goto LABEL_154;
  }
  while (1)
  {
LABEL_208:
    *(_QWORD *)v69 = v13;
    v69[8] = 0;
    v74 = 0;
    v55 = v104;
    if (v104)
    {
      *(_OWORD *)&v69[8] = v100;
      v70[0] = v101;
      v71[0] = 0;
      v73 = -1;
      v56 = v103;
      if (v103 != -1)
      {
        p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE *, char *, _BYTE *))off_1E359AC20[v103])(v105, v71, v102);
        v73 = v56;
      }
      v74 = 1;
    }
    LOBYTE(v75) = 0;
    v79 = 0;
    v57 = v99;
    if (v99)
    {
      p_n_4 = (unsigned __int8 *)&__n_4;
      v75 = (WTF *)&__n_4;
      v76 = 8;
      v58 = (WTF *)v95;
      a2 = (size_t *)&v98;
      if (v95 == (unsigned __int8 *)&v98)
      {
        v60 = v97;
        p_n_4 = (unsigned __int8 *)memcpy(&__n_4, &v98, v97);
      }
      else
      {
        v95 = (unsigned __int8 *)&v98;
        v75 = v58;
        v59 = v96;
        v60 = v97;
        v96 = 8;
        v76 = v59;
      }
      v97 = 0;
      __n = v60;
      v57 = 1;
      v79 = 1;
    }
    v81 = *(_BYTE **)v69;
    LOBYTE(v82) = 0;
    v86 = 0;
    if (v55)
    {
      v82 = *(_OWORD *)&v69[8];
      v83 = v70[0];
      v84[0] = 0;
      v85 = -1;
      v61 = v73;
      if (v73 != -1)
      {
        p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE *, _BYTE *, char *))off_1E359AC20[v73])(v105, v84, v71);
        v85 = v61;
        v57 = v79;
      }
      v86 = 1;
    }
    LOBYTE(v87) = 0;
    v91 = 0;
    if (v57)
    {
      p_n_4 = (unsigned __int8 *)&v90;
      v87 = (WTF *)&v90;
      v88 = 8;
      v62 = v75;
      a2 = &__n_4;
      if (v75 == (WTF *)&__n_4)
      {
        v64 = __n;
        p_n_4 = (unsigned __int8 *)memcpy(&v90, &__n_4, __n);
      }
      else
      {
        v75 = (WTF *)&__n_4;
        v87 = v62;
        v63 = v76;
        v64 = __n;
        v76 = 8;
        v88 = v63;
      }
      __n = 0;
      v89 = v64;
      v91 = 1;
    }
    v92 = 1;
    if (v74 && v73 != -1)
      p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE *, char *))off_1E359AC10[v73])(v105, v71);
LABEL_229:
    if (v99)
    {
      p_n_4 = v95;
      if (&v98 != (uint64_t *)v95)
      {
        if (v95)
        {
          v95 = 0;
          v96 = 0;
          WTF::fastFree((unint64_t)p_n_4, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
LABEL_233:
    if (v104 && v103 != -1)
      p_n_4 = (unsigned __int8 *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E359AC10[v103])(v69, v102);
    v27 = v92;
    v14 = v94;
LABEL_237:
    v69[0] = 0;
    v80 = 0;
    if (!v14 && v27)
    {
      *(_QWORD *)v69 = v81;
      v69[8] = 0;
      v74 = 0;
      if (v86)
      {
        *(_OWORD *)&v69[8] = v82;
        v70[0] = v83;
        v71[0] = 0;
        v73 = -1;
        v65 = v85;
        if (v85 != -1)
        {
          p_n_4 = (unsigned __int8 *)((uint64_t (*)(__int128 *, char *, _BYTE *))off_1E359AC20[v85])(&v100, v71, v84);
          v73 = v65;
        }
        v74 = 1;
      }
      LOBYTE(v75) = 0;
      v79 = 0;
      if (v91)
      {
        p_n_4 = (unsigned __int8 *)&__n_4;
        v75 = (WTF *)&__n_4;
        v76 = 8;
        v66 = v87;
        a2 = &v90;
        if (v87 == (WTF *)&v90)
        {
          v68 = v89;
          p_n_4 = (unsigned __int8 *)memcpy(&__n_4, &v90, v89);
        }
        else
        {
          v87 = (WTF *)&v90;
          v75 = v66;
          v67 = v88;
          v68 = v89;
          v88 = 8;
          v76 = v67;
        }
        v89 = 0;
        __n = v68;
        v79 = 1;
      }
      v80 = 1;
      v27 = v92;
    }
    if (v27)
    {
      if (v91)
      {
        p_n_4 = (unsigned __int8 *)v87;
        if (&v90 != (size_t *)v87)
        {
          if (v87)
          {
            v87 = 0;
            v88 = 0;
            WTF::fastFree((unint64_t)p_n_4, a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      if (v86 && v85 != -1)
        p_n_4 = (unsigned __int8 *)((uint64_t (*)(__int128 *, _BYTE *))off_1E359AC10[v85])(&v100, v84);
    }
LABEL_29:
    if (!v80)
    {
      *(_BYTE *)a9 = 0;
      *(_BYTE *)(a9 + 96) = 0;
      return;
    }
    v13 = (unsigned __int8 *)v79;
    if (v79)
      goto LABEL_31;
    if (!v12)
      break;
    if (v9)
    {
      v23 = *v10;
      if ((v23 - 97) >= 0x1A)
        v24 = 255;
      else
        v24 = 223;
      if ((v24 & v23) != 0x54)
      {
        switch(v9)
        {
          case 4:
            if (v10[2] - 48 > 9 || v10[3] - 48 > 9)
              goto LABEL_31;
            v25 = 2;
            v26 = 4;
            goto LABEL_120;
          case 5:
            if (v10[2] != 45 || v10[3] - 48 > 9 || v10[4] - 48 >= 0xA)
              goto LABEL_31;
            v25 = 3;
            v26 = 5;
LABEL_120:
            v37 = v10;
            goto LABEL_132;
          case 6:
            if (v10[2] - 48 > 9)
              goto LABEL_31;
            if (v10[3] - 48 > 9)
              goto LABEL_31;
            v37 = v10 + 4;
            v23 = v10[4];
            if ((v23 - 48) > 9)
              goto LABEL_31;
            v38 = v10[5];
            goto LABEL_130;
          case 7:
            if (v10[2] - 48 > 9)
              goto LABEL_31;
            if (v10[3] - 48 > 9)
              goto LABEL_31;
            if (v10[4] != 45)
              goto LABEL_31;
            v37 = v10 + 5;
            v23 = v10[5];
            if ((v23 - 48) > 9)
              goto LABEL_31;
            v38 = v10[6];
LABEL_130:
            if ((v38 - 48) >= 0xA)
              goto LABEL_31;
            v26 = 2;
            v25 = 2;
LABEL_132:
            v39 = v37[1] + 10 * v23;
            if ((v39 - 541) < 0xFFFFFFF4)
              goto LABEL_31;
            v40 = v26 >= v25;
            v41 = v26 - v25;
            if (!v40)
              goto LABEL_202;
            if (!v41)
              goto LABEL_184;
            if (v41 <= 1)
              goto LABEL_202;
            v42 = &v37[v25];
            v43 = *v42;
            v44 = v42[1];
            break;
          default:
            goto LABEL_31;
        }
        goto LABEL_182;
      }
      goto LABEL_31;
    }
LABEL_202:
    __break(1u);
LABEL_203:
    v54 = *(_DWORD *)&v69[12];
    memcpy(p_n_4, a2, *(unsigned int *)&v69[12]);
LABEL_204:
    *(_DWORD *)&v69[12] = 0;
    v97 = v54;
    v99 = 1;
LABEL_205:
    p_n_4 = *(unsigned __int8 **)v69;
    if (&v69[16] != *(_BYTE **)v69 && *(_QWORD *)v69)
    {
      *(_QWORD *)v69 = 0;
      *(_DWORD *)&v69[8] = 0;
      WTF::fastFree((unint64_t)p_n_4, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (!v9)
    goto LABEL_202;
  v29 = *(unsigned __int16 *)v10;
  if ((v29 - 97) >= 0x1A)
    v30 = 0xFFFF;
  else
    v30 = 65503;
  if ((v30 & v29) != 0x54)
  {
    switch(v9)
    {
      case 4:
        if (*((unsigned __int16 *)v10 + 2) - 48 > 9
          || *((unsigned __int16 *)v10 + 3) - 48 > 9)
        {
          goto LABEL_31;
        }
        v31 = 2;
        v32 = 4;
        goto LABEL_175;
      case 5:
        if (*((_WORD *)v10 + 2) != 45
          || *((unsigned __int16 *)v10 + 3) - 48 > 9
          || *((unsigned __int16 *)v10 + 4) - 48 >= 0xA)
        {
          goto LABEL_31;
        }
        v31 = 3;
        v32 = 5;
LABEL_175:
        v48 = v10;
        goto LABEL_176;
      case 6:
        if (*((unsigned __int16 *)v10 + 2) - 48 > 9)
          goto LABEL_31;
        if (*((unsigned __int16 *)v10 + 3) - 48 > 9)
          goto LABEL_31;
        v48 = v10 + 8;
        v29 = *((unsigned __int16 *)v10 + 4);
        if ((v29 - 48) > 9)
          goto LABEL_31;
        v52 = *((unsigned __int16 *)v10 + 5);
        goto LABEL_194;
      case 7:
        if (*((unsigned __int16 *)v10 + 2) - 48 > 9)
          goto LABEL_31;
        if (*((unsigned __int16 *)v10 + 3) - 48 > 9)
          goto LABEL_31;
        if (*((_WORD *)v10 + 4) != 45)
          goto LABEL_31;
        v48 = v10 + 10;
        v29 = *((unsigned __int16 *)v10 + 5);
        if ((v29 - 48) > 9)
          goto LABEL_31;
        v52 = *((unsigned __int16 *)v10 + 6);
LABEL_194:
        if ((v52 - 48) >= 0xA)
          goto LABEL_31;
        v32 = 2;
        v31 = 2;
LABEL_176:
        v39 = *((unsigned __int16 *)v48 + 1) + 10 * v29;
        if ((v39 - 541) < 0xFFFFFFF4)
          goto LABEL_31;
        v40 = v32 >= v31;
        v49 = v32 - v31;
        if (!v40)
          goto LABEL_202;
        if (!v49)
          goto LABEL_184;
        if (v49 <= 1)
          goto LABEL_202;
        v50 = &v48[2 * v31];
        v43 = *(unsigned __int16 *)v50;
        v44 = *((unsigned __int16 *)v50 + 1);
        break;
      default:
        goto LABEL_31;
    }
LABEL_182:
    v51 = v44 + 10 * v43 - 528;
    if (v51)
    {
      if (v51 <= JSC::ISO8601::daysInMonths[(v39 - 16) + 11])
      {
LABEL_184:
        *(_BYTE *)a9 = 0;
        *(_BYTE *)(a9 + 96) = 0;
LABEL_57:
        if (v74)
        {
          if (v73 != -1)
            ((void (*)(_BYTE **, char *))off_1E359AC10[v73])(&v81, v71);
        }
        return;
      }
    }
  }
LABEL_31:
  *(_BYTE *)(a9 + 96) = 0;
  *(_QWORD *)a9 = *(_QWORD *)v69;
  *(_BYTE *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 56) = 0;
  if (v74)
  {
    *(_OWORD *)(a9 + 8) = *(_OWORD *)&v69[8];
    *(_BYTE *)(a9 + 24) = v70[0];
    *(_BYTE *)(a9 + 32) = 0;
    a2 = (size_t *)(a9 + 32);
    *(_DWORD *)(a9 + 48) = -1;
    v19 = v73;
    if (v73 != -1)
    {
      ((void (*)(_BYTE **))off_1E359AC20[v73])(&v81);
      *(_DWORD *)(a9 + 48) = v19;
      LODWORD(v13) = v79;
    }
    *(_BYTE *)(a9 + 56) = 1;
  }
  *(_BYTE *)(a9 + 64) = 0;
  *(_BYTE *)(a9 + 88) = 0;
  if ((_DWORD)v13)
  {
    *(_QWORD *)(a9 + 64) = a9 + 80;
    *(_DWORD *)(a9 + 72) = 8;
    v20 = v75;
    a2 = &__n_4;
    if (v75 == (WTF *)&__n_4)
    {
      v22 = __n;
      memcpy((void *)(a9 + 80), &__n_4, __n);
    }
    else
    {
      v75 = (WTF *)&__n_4;
      *(_QWORD *)(a9 + 64) = v20;
      v21 = v76;
      v22 = __n;
      v76 = 8;
      *(_DWORD *)(a9 + 72) = v21;
    }
    __n = 0;
    *(_DWORD *)(a9 + 76) = v22;
    *(_BYTE *)(a9 + 88) = 1;
  }
  *(_BYTE *)(a9 + 96) = 1;
  if (v80)
  {
    if ((_DWORD)v13)
    {
      v28 = v75;
      if (&__n_4 != (size_t *)v75)
      {
        if (v75)
        {
          v75 = 0;
          v76 = 0;
          WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    goto LABEL_57;
  }
}

void JSC::ISO8601::parseCalendarDateTime(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  void *v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  void *__src;
  int v33;
  unsigned int __n;
  size_t __n_4;
  char v36;
  unsigned __int8 v37;
  unsigned __int8 *v38;
  uint64_t v39;
  char v40;

  v38 = a1;
  v39 = a2;
  if ((a2 & 0xFF00000000) != 0)
    JSC::ISO8601::parseCalendarDateTime<unsigned char>((uint64_t)&v24, &v38, a3, a4, a5, a6, a7, a8);
  else
    JSC::ISO8601::parseCalendarDateTime<char16_t>((uint64_t)&v24, (unsigned __int16 **)&v38, a3, a4, a5, a6, a7, a8);
  v17 = v39;
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 104) = 0;
  v18 = v37;
  if (v17)
    v19 = 1;
  else
    v19 = v37 == 0;
  if (!v19)
  {
    *(_DWORD *)a9 = v24;
    *(_QWORD *)(a9 + 4) = v25;
    *(_DWORD *)(a9 + 12) = v26;
    *(_BYTE *)(a9 + 16) = 0;
    *(_BYTE *)(a9 + 64) = 0;
    if (v31)
    {
      *(_OWORD *)(a9 + 16) = v27;
      *(_BYTE *)(a9 + 32) = v28;
      *(_BYTE *)(a9 + 40) = 0;
      v10 = (void *)(a9 + 40);
      *(_DWORD *)(a9 + 56) = -1;
      v20 = v30;
      if (v30 != -1)
      {
        ((void (*)(char *))off_1E359AC20[v30])(&v40);
        *(_DWORD *)(a9 + 56) = v20;
      }
      *(_BYTE *)(a9 + 64) = 1;
    }
    *(_BYTE *)(a9 + 72) = 0;
    *(_BYTE *)(a9 + 96) = 0;
    if (v36)
    {
      *(_QWORD *)(a9 + 72) = a9 + 88;
      *(_QWORD *)(a9 + 80) = 8;
      v10 = __src;
      if (__src == &__n_4)
      {
        v22 = __n;
        memcpy((void *)(a9 + 88), __src, __n);
      }
      else
      {
        __src = &__n_4;
        *(_QWORD *)(a9 + 72) = v10;
        v21 = v33;
        v22 = __n;
        v33 = 8;
        *(_DWORD *)(a9 + 80) = v21;
      }
      __n = 0;
      *(_DWORD *)(a9 + 84) = v22;
      *(_BYTE *)(a9 + 96) = 1;
    }
    *(_BYTE *)(a9 + 104) = 1;
    v18 = v37;
  }
  if (v18)
  {
    if (v36)
    {
      v23 = __src;
      if (&__n_4 != __src)
      {
        if (__src)
        {
          __src = 0;
          v33 = 0;
          WTF::fastFree((unint64_t)v23, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
    if (v31)
    {
      if (v30 != -1)
        ((void (*)(char *, uint64_t *))off_1E359AC10[v30])(&v40, &v29);
    }
  }
}

void JSC::ISO8601::parseInstant(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  char v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  unsigned int v41;
  unint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  unsigned __int8 v54;
  _BYTE v55[16];
  int v56;
  unsigned __int8 v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  unsigned __int8 v66;
  _BYTE v67[16];
  int v68;
  unsigned __int8 v69;
  void *__src;
  int v71;
  unsigned int __n;
  size_t __n_4;
  unsigned __int8 v74;
  char v75;
  unsigned __int8 *v76;
  uint64_t v77;
  _BYTE v78[9];

  if ((a2 & 0xFF00000000) == 0)
  {
    v76 = a1;
    v77 = a2;
    JSC::ISO8601::parseCalendarDateTime<char16_t>((uint64_t)&v62, (unsigned __int16 **)&v76, a3, a4, a5, a6, a7, a8);
    if (v75)
    {
      v50 = v62;
      v51 = v63;
      v52 = v64;
      LOBYTE(v53) = 0;
      v57 = 0;
      v20 = v69;
      if (v69)
      {
        v53 = v65;
        v54 = v66;
        v55[0] = 0;
        v56 = -1;
        v21 = v68;
        if (v68 != -1)
        {
          ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E359AC20[v68])(v78, v55, v67);
          v56 = v21;
        }
        v19 = 1;
        v57 = 1;
      }
      else
      {
        v19 = 0;
      }
      LOBYTE(v58) = 0;
      v61 = 0;
      v22 = v74;
      if (v74)
      {
        v58 = (WTF *)&v60;
        v59 = 8;
        v10 = (WTF *)__src;
        if (__src == &__n_4)
        {
          v28 = __n;
          memcpy(&v60, __src, __n);
        }
        else
        {
          __src = &__n_4;
          v58 = v10;
          v27 = v71;
          v28 = __n;
          v71 = 8;
          LODWORD(v59) = v27;
        }
        __n = 0;
        HIDWORD(v59) = v28;
        v61 = 1;
      }
      if (!v20)
        goto LABEL_33;
      v25 = v53;
      v26 = v54;
      if (!(_BYTE)v53 && !v54)
        goto LABEL_33;
      goto LABEL_32;
    }
LABEL_12:
    *a9 = 0;
    a9[16] = 0;
    return;
  }
  v76 = a1;
  v77 = a2;
  JSC::ISO8601::parseCalendarDateTime<unsigned char>((uint64_t)&v62, &v76, a3, a4, a5, a6, a7, a8);
  if (!v75)
    goto LABEL_12;
  v50 = v62;
  v51 = v63;
  v52 = v64;
  LOBYTE(v53) = 0;
  v57 = 0;
  v17 = v69;
  if (v69)
  {
    v53 = v65;
    v54 = v66;
    v55[0] = 0;
    v56 = -1;
    v18 = v68;
    if (v68 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E359AC20[v68])(v78, v55, v67);
      v56 = v18;
    }
    v19 = 1;
    v57 = 1;
  }
  else
  {
    v19 = 0;
  }
  LOBYTE(v58) = 0;
  v61 = 0;
  v22 = v74;
  if (v74)
  {
    v58 = (WTF *)&v60;
    v59 = 8;
    v10 = (WTF *)__src;
    if (__src == &__n_4)
    {
      v24 = __n;
      memcpy(&v60, __src, __n);
    }
    else
    {
      __src = &__n_4;
      v58 = v10;
      v23 = v71;
      v24 = __n;
      v71 = 8;
      LODWORD(v59) = v23;
    }
    __n = 0;
    HIDWORD(v59) = v24;
    v61 = 1;
  }
  if (!v17)
    goto LABEL_33;
  v25 = v53;
  v26 = v54;
  if (!(_BYTE)v53 && !v54)
    goto LABEL_33;
LABEL_32:
  if (v77)
  {
LABEL_33:
    v29 = 0;
    *a9 = 0;
    goto LABEL_34;
  }
  v32 = 0;
  if ((_BYTE)v52)
    v33 = v51;
  else
    v33 = 0;
  if (!v25)
  {
    if (!v26)
    {
      __break(1u);
      return;
    }
    v32 = *((_QWORD *)&v53 + 1);
  }
  v34 = v33;
  v35 = BYTE1(v33);
  v36 = BYTE2(v33);
  v37 = (v50 << 6 >> 27) - 1;
  v38 = (v50 << 11 >> 11) + (unsigned __int16)((__int16)v37 / 12);
  LODWORD(v39) = v37 - 12 * (((10923 * v37) >> 17) + ((10923 * v37) >> 31));
  v40 = (v39 & 0x8000) == 0;
  if ((v39 & 0x8000) != 0)
    v39 = 11;
  else
    v39 = (unsigned __int16)v39;
  if (v40)
    LODWORD(v33) = v38;
  else
    LODWORD(v33) = v38 - 1;
  HIDWORD(v42) = -1030792151 * v33 + 85899344;
  LODWORD(v42) = HIDWORD(v42);
  v41 = v42 >> 4;
  LODWORD(v42) = HIDWORD(v42);
  v43 = (v42 >> 2) > 0x28F5C28;
  if (v41 < 0xA3D70B)
    v43 = 1;
  if ((v33 & 3) != 0)
    v43 = 0;
  *(_OWORD *)(&v10 - 1) = (__int128)(floor(floor(((double)(int)v33 + -1.0) / 400.0)+ -4.0+ floor(((double)(int)v33 + -1.0) * 0.25)+ -492.0+ ((double)(int)v33 + -1970.0) * 365.0- (floor(((double)(int)v33 + -1.0) / 100.0)+ -19.0))+ (double)(WTF::firstDayOfMonth[12 * v43 + v39] + (v50 >> 26) - 1));
  v45 = 1000 * ((HIDWORD(v33) >> 10) & 0x3FF);
  v46 = 3600000000000 * v34
      + 60000000000 * v35
      + 1000000000 * v36
      + 1000000 * (WORD2(v33) & 0x3FFu)
      + ((HIDWORD(v33) >> 20) & 0x3FF);
  v47 = __CFADD__(v46, v45);
  v48 = v46 + v45;
  v49 = v47;
  *(_OWORD *)a9 = __PAIR128__(v49, v48) - v32 + __PAIR128__((unint64_t)v10, v44) * 0x4E94914F0000;
  v29 = 1;
LABEL_34:
  a9[16] = v29;
  if (v22)
  {
    v30 = v58;
    if (&v60 != (uint64_t *)v58)
    {
      if (v58)
      {
        v58 = 0;
        LODWORD(v59) = 0;
        WTF::fastFree((unint64_t)v30, v10, v11, v12, v13, v14, v15, v16);
        v19 = v57;
      }
    }
  }
  if (v19 && v56 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E359AC10[v56])(v78, v55);
  if (v75)
  {
    if (v74)
    {
      v31 = __src;
      if (&__n_4 != __src)
      {
        if (__src)
        {
          __src = 0;
          v71 = 0;
          WTF::fastFree((unint64_t)v31, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
    if (v69)
    {
      if (v68 != -1)
        ((void (*)(int *, _BYTE *))off_1E359AC10[v68])(&v50, v67);
    }
  }
}

uint64_t JSC::ISO8601::dayOfWeek()
{
  int v0;
  int v1;

  v0 = __modti3();
  v1 = v0 + 7;
  if (v0 >= 0)
    v1 = v0;
  if (!v1)
    LOBYTE(v1) = 7;
  return v1;
}

uint64_t JSC::ISO8601::weekOfYear(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v16;
  unint64_t v18;

  v1 = a1 << 11 >> 11;
  v2 = 1;
  HIDWORD(v4) = -1030792151 * v1 + 85899344;
  LODWORD(v4) = HIDWORD(v4);
  v3 = v4 >> 4;
  LODWORD(v4) = HIDWORD(v4);
  v5 = (v4 >> 2) > 0x28F5C28;
  if (v3 >= 0xA3D70B)
    v2 = v5;
  v6 = a1 & 3;
  if ((a1 & 3) != 0)
    v2 = 0;
  v7 = (unsigned __int16)(LOWORD(WTF::firstDayOfMonth[12 * v2 - 1 + (a1 << 6 >> 27)])
                        + (a1 >> 26));
  v8 = JSC::ISO8601::dayOfWeek();
  v9 = v7 - v8 + 10;
  if (v9 > 6)
  {
    if ((v7 - v8 - 361) > 6)
      return (v9 / 7);
    HIDWORD(v14) = -1030792151 * v1 + 85899344;
    LODWORD(v14) = HIDWORD(v14);
    v13 = v14 >> 4;
    LODWORD(v14) = HIDWORD(v14);
    if ((v14 >> 2) <= 0x28F5C28 && v13 >= 0xA3D70B)
      v16 = 365;
    else
      v16 = 366;
    if (v6)
      v16 = 365;
    if (v16 - v7 >= 4 - v8)
      return (v9 / 7);
    else
      LOBYTE(v12) = 1;
  }
  else
  {
    v10 = JSC::ISO8601::dayOfWeek();
    if (v10 == 5)
    {
      LOBYTE(v12) = 53;
    }
    else if (v10 != 6
           || (v11 = v1 - 1, ((v1 - 1) & 3) != 0)
           || (LOBYTE(v12) = 53,
               HIDWORD(v18) = -1030792151 * v11 + 85899344,
               LODWORD(v18) = HIDWORD(v18),
               (v18 >> 4) >= 0xA3D70B)
           && !(v11 % 100))
    {
      LOBYTE(v12) = 52;
    }
  }
  return v12;
}

void JSC::ISO8601::formatTimeZoneOffsetString(uint64_t this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  _BYTE *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned int v44;
  WTF *v45;
  unsigned int v46;
  int8x16_t *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int8x16_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  unint64_t v81;
  char *v82;
  size_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  unint64_t v89;
  char *v90;
  size_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  _WORD *v101;
  BOOL v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  _WORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  uint64_t v112;
  _WORD *v113;
  unint64_t v114;
  _WORD *v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  _WORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _WORD *v125;
  uint64_t v126;
  uint64_t v127;
  _WORD *v128;
  unint64_t v129;
  _WORD *v130;
  unint64_t v131;
  unsigned int v132;
  _WORD *v133;
  _WORD *v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _WORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  char *v154;
  char *v155;
  char *v156;
  __int16 v157;
  unsigned int v158;
  char *v159;
  char *v160;
  char *v161;
  __int128 v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  char *v166;
  char *v167;
  char *v168;
  __int16 v169;
  void *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  unsigned __int128 v190;
  char v191;
  uint64_t *v192;
  WTF *v193;
  unsigned int v194;
  _BYTE v195[16];
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  void *__src;
  unint64_t v203;
  _BYTE v204[16];
  uint64_t v205;
  unint64_t v206;
  _QWORD v207[3];
  int8x16x2_t v208;
  int8x16x2_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;

  v207[1] = *MEMORY[0x1E0C80C00];
  if (this >= 0)
    v9 = 43;
  else
    v9 = 45;
  if (this >= 0)
    v10 = this;
  else
    v10 = -this;
  v11 = v10 % 0x3B9ACA00;
  v12 = v10 / 0x3B9ACA00 - 60 * ((v10 / 0x3B9ACA00 * (unsigned __int128)0x444444444444445uLL) >> 64);
  v13 = v10 / 0xDF8475800 - 60 * (((572662307 * (v10 / 0xDF8475800)) >> 32) >> 3);
  v14 = v10;
  v15 = v10 / 0x34630B8A000;
  if (!(v10 % 0x3B9ACA00))
  {
    if (!v12)
    {
      v198 = 0x200000030;
      v199 = v10 / 0x34630B8A000;
      v196 = 0x200000030;
      v197 = v10 / 0xDF8475800 - 60 * (((572662307 * (v10 / 0xDF8475800)) >> 32) >> 3);
      v201 = v9;
      __src = &v198;
      v203 = v10 / 0x34630B8A000;
      v200 = 58;
      v205 = (uint64_t)&v196;
      v206 = v197;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>(&v201, (uint64_t *)&__src, &v200, &v205, a8);
      if (*a8)
        return;
      __break(0xC471u);
      goto LABEL_287;
    }
    v20 = 0;
    v205 = 0x200000030;
    v206 = v10 / 0xDF8475800 - 60 * (((572662307 * (v10 / 0xDF8475800)) >> 32) >> 3);
    v198 = 0x200000030;
    v199 = v10 / 0x3B9ACA00 - 60 * ((v10 / 0x3B9ACA00 * (unsigned __int128)0x444444444444445uLL) >> 64);
    v21 = v10 / 0x34630B8A000;
    do
    {
      ++v20;
      v17 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v17);
    v22 = 0;
    if (v20 <= 2)
      v20 = 2;
    v23 = v13;
    do
    {
      ++v22;
      v17 = v23 > 9;
      v23 /= 0xAuLL;
    }
    while (v17);
    v24 = 0;
    if (v22 <= 2)
      v22 = 2;
    v25 = v12;
    do
    {
      ++v24;
      v17 = v25 > 9;
      v25 /= 0xAuLL;
    }
    while (v17);
    if (v24 <= 2)
      v24 = 2;
    if ((v24 & 0x80000000) == 0)
    {
      v26 = __OFADD__(v24, 1);
      v27 = v24 + 1;
      v28 = v26;
      if ((v22 & 0x80000000) == 0 && !v28)
      {
        v26 = __OFADD__(v22, v27);
        v29 = v22 + v27;
        if (!v26)
        {
          v26 = __OFADD__(v29, 1);
          v30 = v29 + 1;
          v31 = v26;
          if ((v20 & 0x80000000) == 0 && !v31)
          {
            v26 = __OFADD__(v20, v30);
            v32 = v20 + v30;
            if (!v26)
            {
              v33 = v32 + 1;
              if (!__OFADD__(v32, 1))
              {
                if (v32 == -1)
                {
                  v34 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_241:
                  *a8 = v34;
                  return;
                }
                if ((v33 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v33 + 20), &__src);
                  v34 = (int *)__src;
                  if (__src)
                  {
                    v35 = 0;
                    *((_BYTE *)__src + 20) = v9;
                    *v34 = 2;
                    v34[1] = v33;
                    *((_QWORD *)v34 + 1) = v34 + 5;
                    v34[4] = 4;
                    v36 = v14 / 0x34630B8A000;
                    do
                    {
                      --v35;
                      v17 = v36 > 9;
                      v36 /= 0xAuLL;
                    }
                    while (v17);
                    v37 = (char *)v34 + 21;
                    if (-v35 != 1 && v35 != 0)
                    {
                      v38 = 0;
                    }
                    else
                    {
                      v38 = (v35 + 2);
                      memset((char *)v34 + 21, 48, v38);
                    }
                    v145 = 0;
                    v146 = v14 / 0x34630B8A000;
                    do
                    {
                      v204[v145-- + 8] = (v146 % 0xA) | 0x30;
                      v17 = v146 > 9;
                      v146 /= 0xAuLL;
                    }
                    while (v17);
                    if (v145 + 26 <= 25)
                      memcpy(&v37[v38], &v204[v145 + 9], -v145);
                    LODWORD(v147) = 0;
                    do
                    {
                      LODWORD(v147) = v147 + 1;
                      v17 = v15 > 9;
                      v15 /= 0xAuLL;
                    }
                    while (v17);
                    if (v147 <= 2)
                      v147 = 2;
                    else
                      v147 = v147;
                    v37[v147] = 58;
                    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>(&v37[v147 + 1], (uint64_t)&v205, v13, 58, (uint64_t)&v198, v12);
                    goto LABEL_241;
                  }
                }
              }
            }
          }
        }
      }
    }
    *a8 = 0;
    __break(0xC471u);
    JUMPOUT(0x1989406F0);
  }
  v16 = 0;
  do
  {
    *((_BYTE *)v207 + v16--) = (v11 % 0xA) | 0x30;
    v17 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v17);
  if (v16 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_274;
  }
  __src = v204;
  v18 = -v16;
  LODWORD(v203) = 9;
  HIDWORD(v203) = -(int)v16;
  if ((unint64_t)-v16 >= 0xA)
  {
    if (!((unint64_t)-v16 >> 32))
    {
      v19 = (_BYTE *)WTF::fastMalloc((WTF *)-v16);
      LODWORD(v203) = -(int)v16;
      __src = v19;
LABEL_50:
      memcpy(v19, (char *)v207 + v16 + 1, -v16);
      LODWORD(v18) = HIDWORD(v203);
      v39 = __src;
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_287:
    JUMPOUT(0x1989403B8);
  }
  v19 = v204;
  if (v16)
    goto LABEL_50;
  v39 = v204;
LABEL_51:
  v40 = 9 - v18;
  v41 = -1;
  v42 = v18;
  while (v42)
  {
    v43 = &v39[v42--];
    ++v41;
    if (*(v43 - 1) != 48)
    {
      v44 = v18 - v41;
      HIDWORD(v203) = v18 - v41;
      goto LABEL_64;
    }
  }
  if ((_DWORD)v203)
  {
    if ((_DWORD)v18)
      HIDWORD(v203) = 0;
    if (v204 != v39 && v39)
    {
      __src = 0;
      LODWORD(v203) = 0;
      WTF::fastFree((unint64_t)v39, v39, a2, a3, a4, a5, a6, a7);
      v39 = 0;
    }
    if (!v39)
    {
      __src = v204;
      LODWORD(v203) = 9;
      v39 = v204;
    }
  }
  v44 = HIDWORD(v203);
LABEL_64:
  WTF::StringImpl::s_emptyAtomString += 4;
  v45 = (WTF *)v195;
  v193 = (WTF *)v195;
  v194 = v44;
  if (v44 >= 0xA)
  {
    v45 = (WTF *)WTF::fastMalloc((WTF *)v44);
    v193 = v45;
    v44 = HIDWORD(v203);
    v39 = __src;
  }
  memcpy(v45, v39, v44);
  if ((v194 & 0x80000000) != 0)
  {
LABEL_274:
    __break(0xC471u);
    JUMPOUT(0x19894066CLL);
  }
  v46 = 0;
  v47 = (int8x16_t *)v193;
  v48 = v14 / 0x34630B8A000;
  do
  {
    ++v46;
    v17 = v48 > 9;
    v48 /= 0xAuLL;
  }
  while (v17);
  v49 = 0;
  v50 = v13;
  do
  {
    ++v49;
    v17 = v50 > 9;
    v50 /= 0xAuLL;
  }
  while (v17);
  v192 = (uint64_t *)a8;
  v51 = 0;
  v52 = v12;
  do
  {
    ++v51;
    v17 = v52 > 9;
    v52 /= 0xAuLL;
  }
  while (v17);
  if (v46 <= 2)
    v53 = 2;
  else
    v53 = v46;
  if (v49 <= 2)
    v54 = 2;
  else
    v54 = v49;
  if (v51 <= 2)
    v55 = 2;
  else
    v55 = v51;
  if (v40 <= dword_1ECF2C424)
    v56 = dword_1ECF2C424;
  else
    v56 = 9 - v18;
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(1, v53, 1, v54, 1, v55, 1, v56, (uint64_t)&v198, v194);
  if ((_BYTE)v198)
    goto LABEL_285;
  v64 = HIDWORD(v198);
  if ((dword_1ECF2C430 & 4) != 0)
  {
    if (!HIDWORD(v198))
      goto LABEL_275;
    if ((v198 & 0x8000000000000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(HIDWORD(v198) + 20), &v205);
      v65 = v205;
      if (v205)
      {
        v72 = 0;
        *(_BYTE *)(v205 + 20) = v9;
        *(_DWORD *)v65 = 2;
        *(_DWORD *)(v65 + 4) = v64;
        *(_QWORD *)(v65 + 8) = v65 + 20;
        *(_DWORD *)(v65 + 16) = 4;
        v73 = v14 / 0x34630B8A000;
        do
        {
          --v72;
          v17 = v73 > 9;
          v73 /= 0xAuLL;
        }
        while (v17);
        v74 = v65 + 21;
        if (-v72 != 1 && v72 != 0)
        {
          v75 = 0;
        }
        else
        {
          v75 = (v72 + 2);
          memset((void *)(v65 + 21), 48, v75);
        }
        v76 = 0;
        v77 = v14 / 0x34630B8A000;
        do
        {
          *((_BYTE *)v207 + v76--) = (v77 % 0xA) | 0x30;
          v17 = v77 > 9;
          v77 /= 0xAuLL;
        }
        while (v17);
        if (v76 + 26 <= 25)
          memcpy((void *)(v74 + v75), (char *)v207 + v76 + 1, -v76);
        LODWORD(v78) = 0;
        do
        {
          LODWORD(v78) = v78 + 1;
          v17 = v15 > 9;
          v15 /= 0xAuLL;
        }
        while (v17);
        v79 = 0;
        if (v78 <= 2)
          v78 = 2;
        else
          v78 = v78;
        v80 = (_BYTE *)(v74 + v78);
        *v80 = 58;
        v81 = v13;
        do
        {
          --v79;
          v17 = v81 > 9;
          v81 /= 0xAuLL;
        }
        while (v17);
        v82 = v80 + 1;
        if (-v79 != 1 && v79 != 0)
        {
          v83 = 0;
        }
        else
        {
          v83 = (v79 + 2);
          memset(v82, 48, v83);
        }
        v84 = 0;
        v85 = v13;
        do
        {
          *((_BYTE *)v207 + v84--) = (v85 % 0xA) | 0x30;
          v17 = v85 > 9;
          v85 /= 0xAuLL;
        }
        while (v17);
        if (v84 + 26 <= 25)
          memcpy(&v82[v83], (char *)v207 + v84 + 1, -v84);
        LODWORD(v86) = 0;
        do
        {
          LODWORD(v86) = v86 + 1;
          v17 = v13 > 9;
          v13 /= 0xAuLL;
        }
        while (v17);
        v87 = 0;
        if (v86 <= 2)
          v86 = 2;
        else
          v86 = v86;
        v88 = &v82[v86];
        *v88 = 58;
        v89 = v12;
        do
        {
          --v87;
          v17 = v89 > 9;
          v89 /= 0xAuLL;
        }
        while (v17);
        v90 = v88 + 1;
        if (-v87 != 1 && v87 != 0)
        {
          v91 = 0;
        }
        else
        {
          v91 = (v87 + 2);
          memset(v90, 48, v91);
        }
        v92 = 0;
        v93 = v12;
        do
        {
          *((_BYTE *)v207 + v92--) = (v93 % 0xA) | 0x30;
          v17 = v93 > 9;
          v93 /= 0xAuLL;
        }
        while (v17);
        if (v92 + 26 <= 25)
          memcpy(&v90[v91], (char *)v207 + v92 + 1, -v92);
        LODWORD(v94) = 0;
        do
        {
          LODWORD(v94) = v94 + 1;
          v17 = v12 > 9;
          v12 /= 0xAuLL;
        }
        while (v17);
        if (v94 <= 2)
          v94 = 2;
        else
          v94 = v94;
        v90[v94] = 46;
        v95 = &v90[v94 + 1];
        v96 = dword_1ECF2C424;
        v97 = v40 - dword_1ECF2C424;
        if (v40 <= dword_1ECF2C424)
        {
          v97 = 0;
        }
        else
        {
          memset(v95, 48, v40 - dword_1ECF2C424);
          v96 = dword_1ECF2C424;
        }
        v98 = &v95[v97];
        v57 = (int8x16_t *)off_1ECF2C428;
        if ((dword_1ECF2C430 & 4) != 0)
        {
          if (v96 == 1)
          {
            *v98 = *off_1ECF2C428;
          }
          else if (v96)
          {
            memcpy(v98, off_1ECF2C428, v96);
          }
        }
        else
        {
          v188 = &v98[v96];
          if (v96 >= 0x10)
          {
            v189 = &v98[v96 & 0xFFFFFFF0];
            do
            {
              v190 = (unsigned __int128)vld2q_s8(v57->i8);
              v57 += 2;
              *(_OWORD *)v98 = v190;
              v98 += 16;
            }
            while (v98 != v189);
            v98 = v189;
          }
          while (v98 != v188)
          {
            v191 = v57->i8[0];
            v57 = (int8x16_t *)((char *)v57 + 2);
            *v98++ = v191;
          }
        }
        if (v40 <= dword_1ECF2C424)
          v143 = dword_1ECF2C424;
        else
          v143 = v40;
        v144 = &v95[v143];
        if (v194 == 1)
        {
          *v144 = *(_BYTE *)v193;
        }
        else if (v194)
        {
          memcpy(v144, v193, v194);
        }
        goto LABEL_256;
      }
    }
LABEL_285:
    *v192 = 0;
    __break(0xC471u);
    JUMPOUT(0x198940700);
  }
  if (!HIDWORD(v198))
  {
LABEL_275:
    WTF::StringImpl::s_emptyAtomString += 2;
    *v192 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_257;
  }
  if (HIDWORD(v198) > 0x7FFFFFEF)
    goto LABEL_285;
  WTF::tryFastCompactMalloc((WTF *)(2 * HIDWORD(v198) + 20), &v205);
  v65 = v205;
  if (!v205)
    goto LABEL_285;
  v66 = 0;
  *(_DWORD *)v205 = 2;
  *(_DWORD *)(v65 + 4) = v64;
  *(_WORD *)(v65 + 20) = v9;
  *(_QWORD *)(v65 + 8) = v65 + 20;
  *(_DWORD *)(v65 + 16) = 0;
  v67 = v14 / 0x34630B8A000;
  do
  {
    --v66;
    v17 = v67 > 9;
    v67 /= 0xAuLL;
  }
  while (v17);
  v68 = v65 + 22;
  if (-v66 != 1 && v66 != 0)
  {
    v69 = 0;
  }
  else
  {
    v69 = (v66 + 2);
    v70 = (_WORD *)(v65 + 22);
    v71 = v69;
    do
    {
      *v70++ = 48;
      --v71;
    }
    while (v71);
  }
  v99 = 0;
  v100 = v14 / 0x34630B8A000;
  do
  {
    *((_BYTE *)v207 + v99--) = (v100 % 0xA) | 0x30;
    v17 = v100 > 9;
    v100 /= 0xAuLL;
  }
  while (v17);
  if (v99 + 26 <= 25)
  {
    v101 = (_WORD *)(v68 + 2 * v69);
    do
    {
      *v101++ = *((unsigned __int8 *)v207 + v99 + 1);
      v102 = __CFADD__(v99++, 1);
    }
    while (!v102);
  }
  LODWORD(v103) = 0;
  do
  {
    v103 = (v103 + 1);
    v17 = v15 > 9;
    v15 /= 0xAuLL;
  }
  while (v17);
  v104 = 0;
  if (v103 <= 2)
    v105 = 2;
  else
    v105 = v103;
  v106 = (_WORD *)(v68 + 2 * v105);
  *v106 = 58;
  v107 = v13;
  do
  {
    --v104;
    v17 = v107 > 9;
    v107 /= 0xAuLL;
  }
  while (v17);
  if (-v104 != 1 && v104 != 0)
  {
    v108 = 0;
  }
  else
  {
    v108 = (v104 + 2);
    v109 = 2;
    if (v103 > 2)
      v109 = v103;
    v110 = (_WORD *)(v65 + 2 * v109 + 24);
    v111 = v108;
    do
    {
      *v110++ = 48;
      --v111;
    }
    while (v111);
  }
  v112 = 0;
  v113 = v106 + 1;
  v114 = v13;
  do
  {
    *((_BYTE *)v207 + v112--) = (v114 % 0xA) | 0x30;
    v17 = v114 > 9;
    v114 /= 0xAuLL;
  }
  while (v17);
  if (v112 + 26 <= 25)
  {
    v115 = &v113[v108];
    do
    {
      *v115++ = *((unsigned __int8 *)v207 + v112 + 1);
      v102 = __CFADD__(v112++, 1);
    }
    while (!v102);
  }
  LODWORD(v116) = 0;
  do
  {
    v116 = (v116 + 1);
    v17 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v17);
  v117 = 0;
  if (v116 <= 2)
    v118 = 2;
  else
    v118 = v116;
  v119 = &v113[v118];
  *v119 = 58;
  v120 = v12;
  do
  {
    --v117;
    v17 = v120 > 9;
    v120 /= 0xAuLL;
  }
  while (v17);
  if (-v117 != 1 && v117 != 0)
  {
    v121 = 0;
  }
  else
  {
    v121 = (v117 + 2);
    v122 = 2;
    if (v103 <= 2)
      v123 = 2;
    else
      v123 = v103;
    v124 = v65 + 2 * v123;
    if (v116 > 2)
      v122 = v116;
    v125 = (_WORD *)(v124 + 2 * v122 + 26);
    v126 = v121;
    do
    {
      *v125++ = 48;
      --v126;
    }
    while (v126);
  }
  v127 = 0;
  v128 = v119 + 1;
  v129 = v12;
  do
  {
    *((_BYTE *)v207 + v127--) = (v129 % 0xA) | 0x30;
    v17 = v129 > 9;
    v129 /= 0xAuLL;
  }
  while (v17);
  if (v127 + 26 <= 25)
  {
    v130 = &v128[v121];
    do
    {
      *v130++ = *((unsigned __int8 *)v207 + v127 + 1);
      v102 = __CFADD__(v127++, 1);
    }
    while (!v102);
  }
  LODWORD(v131) = 0;
  do
  {
    v131 = (v131 + 1);
    v17 = v12 > 9;
    v12 /= 0xAuLL;
  }
  while (v17);
  if (v131 <= 2)
    v132 = 2;
  else
    v132 = v131;
  v133 = &v128[v132];
  *v133 = 46;
  v134 = v133 + 1;
  v135 = dword_1ECF2C424;
  v136 = v40 - dword_1ECF2C424;
  if (v40 <= dword_1ECF2C424)
  {
    v136 = 0;
  }
  else
  {
    if (v103 <= 2)
      v103 = 2;
    v137 = v65 + 2 * v103;
    if (v116 <= 2)
      v116 = 2;
    v138 = v137 + 2 * v116;
    if (v131 <= 2)
      v139 = 2;
    else
      v139 = v131;
    v140 = (_WORD *)(v138 + 2 * v139 + 28);
    v141 = v40 - dword_1ECF2C424;
    do
    {
      *v140++ = 48;
      --v141;
    }
    while (v141);
    v135 = dword_1ECF2C424;
  }
  v142 = (char *)&v134[v136];
  v57 = (int8x16_t *)off_1ECF2C428;
  if ((dword_1ECF2C430 & 4) != 0)
  {
    v148 = &v142[2 * v135];
    if (v135 >= 0x40)
    {
      v149 = &v142[2 * (v135 & 0xFFFFFFC0)];
      v150 = 0uLL;
      do
      {
        v208.val[0] = *v57;
        v151 = v57[1];
        v210.val[0] = v57[2];
        v152 = v57[3];
        v57 += 4;
        v153 = v152;
        v210.val[1] = 0uLL;
        v212.val[0] = v151;
        v208.val[1] = 0uLL;
        v154 = v142;
        vst2q_s8(v154, v208);
        v154 += 32;
        v212.val[1] = 0uLL;
        vst2q_s8(v154, v212);
        v155 = v142 + 64;
        vst2q_s8(v155, v210);
        v156 = v142 + 96;
        vst2q_s8(v156, *(int8x16x2_t *)(&v150 - 1));
        v142 += 128;
      }
      while (v142 != v149);
      v142 = v149;
    }
    while (v142 != v148)
    {
      v157 = v57->u8[0];
      v57 = (int8x16_t *)((char *)v57 + 1);
      *(_WORD *)v142 = v157;
      v142 += 2;
    }
  }
  else if (v135 == 1)
  {
    *(_WORD *)v142 = *off_1ECF2C428;
  }
  else if (v135)
  {
    memcpy(v142, off_1ECF2C428, 2 * v135);
  }
  v158 = dword_1ECF2C424;
  if (v40 > dword_1ECF2C424)
    v158 = 9 - v18;
  v159 = (char *)&v134[v158];
  v160 = &v159[2 * v194];
  if ((v194 & 0xFFFFFFC0) != 0)
  {
    v161 = &v159[2 * (v194 & 0xFFFFFFC0)];
    v162 = 0uLL;
    do
    {
      v209.val[0] = *v47;
      v163 = v47[1];
      v211.val[0] = v47[2];
      v164 = v47[3];
      v47 += 4;
      v165 = v164;
      v211.val[1] = 0uLL;
      v213.val[0] = v163;
      v209.val[1] = 0uLL;
      v166 = v159;
      vst2q_s8(v166, v209);
      v166 += 32;
      v213.val[1] = 0uLL;
      vst2q_s8(v166, v213);
      v167 = v159 + 64;
      vst2q_s8(v167, v211);
      v168 = v159 + 96;
      vst2q_s8(v168, *(int8x16x2_t *)(&v162 - 1));
      v159 += 128;
    }
    while (v159 != v161);
    v159 = v161;
  }
  while (v159 != v160)
  {
    v169 = v47->u8[0];
    v47 = (int8x16_t *)((char *)v47 + 1);
    *(_WORD *)v159 = v169;
    v159 += 2;
  }
LABEL_256:
  *v192 = v65;
LABEL_257:
  if (v195 != (_BYTE *)v193 && v193 != 0)
    WTF::fastFree((unint64_t)v193, v57, v58, v59, v60, v61, v62, v63);
  if (WTF::StringImpl::s_emptyAtomString == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString -= 2;
  }
  if (WTF::StringImpl::s_emptyAtomString == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString -= 2;
  }
  v171 = __src;
  if (v204 != __src)
  {
    if (__src)
    {
      __src = 0;
      LODWORD(v203) = 0;
      WTF::fastFree((unint64_t)v171, v57, v58, v59, v60, v61, v62, v63);
    }
  }
}

void JSC::ISO8601::temporalTimeToString(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _WORD *a9@<X8>)
{
  int v9;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  char *v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned int v50;
  WTF *v51;
  int v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  uint64_t *v57;
  uint64_t *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  int v67;
  int v68;
  uint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  int v94;
  int v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  unsigned int v113;
  _BYTE v114[16];
  unsigned __int8 v115[4];
  int v116;
  int *v117;
  WTF *v118;
  int v119;
  unsigned int v120;
  _BYTE v121[16];
  unsigned __int8 v122[4];
  int v123;
  int *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  uint64_t *v137;
  unsigned int v138;
  unsigned int v139;
  _BYTE v140[16];
  unsigned __int8 *v141;
  int v142;
  _QWORD v143[2];

  v9 = a1;
  v143[1] = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)a2)
  {
    v16 = 0;
    v17 = a1;
    v18 = BYTE1(a1);
    v19 = a1;
    do
    {
      ++v16;
      v13 = v19 > 9;
      v19 /= 0xAu;
    }
    while (v13);
    v20 = 0;
    v21 = BYTE1(a1);
    do
    {
      ++v20;
      v13 = v21 > 9;
      v21 /= 0xAu;
    }
    while (v13);
    if (v16 <= 2)
      v16 = 2;
    if (v20 <= 2)
      v20 = 2;
    if ((v20 & 0x80000000) != 0
      || ((v22 = __OFADD__(v20, 1), v23 = v20 + 1, !v22) ? (v24 = 0) : (v24 = 1),
          (v16 & 0x80000000) != 0
       || (v24 & 1) != 0
       || (v25 = v16 + v23, __OFADD__(v16, v23))
       || (v25 & 0x80000000) != 0
       || (WTF::tryFastCompactMalloc((WTF *)(v25 + 20), &v137), (v26 = v137) == 0)))
    {
      *(_QWORD *)a9 = 0;
      __break(0xC471u);
      JUMPOUT(0x1989410E4);
    }
    v27 = 0;
    v28 = (char *)v137 + 20;
    *(_DWORD *)v137 = 2;
    *((_DWORD *)v26 + 1) = v25;
    v26[1] = (uint64_t)v26 + 20;
    *((_DWORD *)v26 + 4) = 4;
    v29 = v17;
    do
    {
      --v27;
      v13 = v29 > 9;
      v29 /= 0xAu;
    }
    while (v13);
    if (-v27 != 1 && v27 != 0)
    {
      v30 = 0;
    }
    else
    {
      v30 = (v27 + 2);
      if (v30 <= 1)
        v31 = 1;
      else
        v31 = v30;
      memset((char *)v26 + 20, 48, v31);
    }
    v36 = 0;
    v37 = v17;
    do
    {
      v140[v36-- - 4] = (v37 % 0xA) | 0x30;
      v13 = v37 > 9;
      v37 /= 0xAu;
    }
    while (v13);
    if (v36 + 14 <= 13)
      memcpy(&v28[v30], &v140[v36 - 3], -v36);
    LODWORD(v38) = 0;
    do
    {
      LODWORD(v38) = v38 + 1;
      v13 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v13);
    v39 = 0;
    if (v38 <= 2)
      v38 = 2;
    else
      v38 = v38;
    v40 = &v28[v38];
    *v40 = 58;
    v41 = v18;
    do
    {
      --v39;
      v13 = v41 > 9;
      v41 /= 0xAu;
    }
    while (v13);
    v42 = v40 + 1;
    if (-v39 != 1 && v39 != 0)
    {
      v43 = 0;
    }
    else
    {
      v43 = (v39 + 2);
      if (v43 <= 1)
        v44 = 1;
      else
        v44 = v43;
      memset(v42, 48, v44);
    }
    v45 = 0;
    do
    {
      v140[v45-- - 4] = (v18 % 0xA) | 0x30;
      v13 = v18 > 9;
      v18 /= 0xAu;
    }
    while (v13);
    if (v45 + 14 <= 13)
      memcpy(&v42[v43], &v140[v45 - 3], -v45);
    *(_QWORD *)a9 = v26;
    return;
  }
  v11 = ((a1 >> 52) & 0x3FF) + 1000 * ((a1 >> 42) & 0x3FF) + 1000000 * (WORD2(a1) & 0x3FF);
  if (a2 == 2)
  {
    if (v11)
    {
      v12 = 0;
      do
      {
        *((_BYTE *)v143 + v12--) = (v11 % 0xA) | 0x30;
        v13 = v11 > 9;
        v11 /= 0xAuLL;
      }
      while (v13);
      if (v12 + 26 < 27)
      {
        v137 = (uint64_t *)v140;
        v14 = -v12;
        v138 = 9;
        v139 = -(int)v12;
        if ((unint64_t)-v12 < 0xA)
        {
          v15 = (uint64_t *)v140;
          if (!v12)
          {
            v46 = (uint64_t *)v140;
LABEL_71:
            v47 = -1;
            v48 = v14;
            while (v48)
            {
              v49 = (char *)v46 + v48--;
              ++v47;
              if (*(v49 - 1) != 48)
              {
                v139 = v14 - v47;
                goto LABEL_83;
              }
            }
            if (v138)
            {
              if ((_DWORD)v14)
                v139 = 0;
              if (v140 != (_BYTE *)v46 && v46)
              {
                v137 = 0;
                v138 = 0;
                WTF::fastFree((unint64_t)v46, v46, a3, a4, a5, a6, a7, a8);
                v46 = 0;
              }
              if (!v46)
              {
                v137 = (uint64_t *)v140;
                v138 = 9;
                v46 = (uint64_t *)v140;
              }
            }
LABEL_83:
            WTF::StringImpl::s_emptyAtomString += 4;
            v122[0] = 48;
            v123 = 9 - v14;
            v124 = &WTF::StringImpl::s_emptyAtomString;
            v50 = v139;
            v118 = (WTF *)v121;
            v119 = 9;
            v120 = v139;
            if (v139 < 0xA)
            {
              v51 = (WTF *)v121;
            }
            else
            {
              v51 = (WTF *)WTF::fastMalloc((WTF *)v139);
              v119 = v50;
              v118 = v51;
              v50 = v139;
              v46 = v137;
            }
            memcpy(v51, v46, v50);
            v129 = 0x200000030;
            v130 = v9;
            v127 = 0x200000030;
            v128 = BYTE1(v9);
            v125 = 0x200000030;
            v126 = BYTE2(v9);
            v141 = (unsigned __int8 *)&v129;
            v142 = v9;
            v135 = (unsigned __int8 *)&v127;
            v136 = BYTE1(v9);
            v133 = (uint64_t)&v125;
            v134 = BYTE2(v9);
            v131 = (uint64_t)v118;
            if ((v120 & 0x80000000) == 0)
            {
              v132 = v120;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>,WTF::StringTypeAdapter<WTF::Vector<unsigned char,9ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(a9, &v141, 58, &v135, 58, (unsigned __int8 **)&v133, 46, v122, (uint64_t)&WTF::StringImpl::s_emptyAtomString, (int8x16_t **)&v131);
              if (!*(_QWORD *)a9)
              {
                __break(0xC471u);
                JUMPOUT(0x1989410ECLL);
              }
              v66 = v118;
              if (v121 != (_BYTE *)v118 && v118)
              {
                v118 = 0;
                v119 = 0;
                WTF::fastFree((unint64_t)v66, v59, v60, v61, v62, v63, v64, v65);
              }
              v67 = WTF::StringImpl::s_emptyAtomString - 2;
              if (WTF::StringImpl::s_emptyAtomString == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v59, v60, v61, v62, v63, v64, v65);
                WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
                v67 = WTF::StringImpl::s_emptyAtomString;
              }
              else
              {
                WTF::StringImpl::s_emptyAtomString -= 2;
              }
              v68 = v67 - 2;
              if (v68)
              {
                WTF::StringImpl::s_emptyAtomString = v68;
              }
              else
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v59, v60, v61, v62, v63, v64, v65);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              v69 = v137;
              if (v140 == (_BYTE *)v137)
                return;
LABEL_134:
              if (v69)
              {
                v137 = 0;
                v138 = 0;
                WTF::fastFree((unint64_t)v69, v59, v60, v61, v62, v63, v64, v65);
              }
              return;
            }
LABEL_140:
            __break(0xC471u);
            JUMPOUT(0x1989410B4);
          }
        }
        else
        {
          if ((unint64_t)-v12 >> 32)
          {
            __break(0xC471u);
            JUMPOUT(0x1989410FCLL);
          }
          v15 = (uint64_t *)WTF::fastMalloc((WTF *)-v12);
          v138 = -(int)v12;
          v137 = v15;
        }
        memcpy(v15, (char *)v143 + v12 + 1, -v12);
        LODWORD(v14) = v139;
        v46 = v137;
        goto LABEL_71;
      }
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    v133 = 0x200000030;
    v134 = a1;
    v131 = 0x200000030;
    v132 = BYTE1(a1);
    v129 = 0x200000030;
    v130 = BYTE2(a1);
    v137 = &v133;
    v138 = a1;
    v141 = (unsigned __int8 *)&v131;
    v142 = BYTE1(a1);
    v135 = (unsigned __int8 *)&v129;
    v136 = BYTE2(a1);
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>((uint64_t)a9, (uint64_t *)&v137, 58, (uint64_t *)&v141, 58, (uint64_t *)&v135);
    if (*(_QWORD *)a9)
      return;
    __break(0xC471u);
LABEL_148:
    JUMPOUT(0x198940B74);
  }
  v32 = HIDWORD(a2);
  if (!HIDWORD(a2))
  {
    v133 = 0x200000030;
    v134 = a1;
    v131 = 0x200000030;
    v132 = BYTE1(a1);
    v129 = 0x200000030;
    v130 = BYTE2(a1);
    v137 = &v133;
    v138 = a1;
    v141 = (unsigned __int8 *)&v131;
    v142 = BYTE1(a1);
    v135 = (unsigned __int8 *)&v129;
    v136 = BYTE2(a1);
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>((uint64_t)a9, (uint64_t *)&v137, 58, (uint64_t *)&v141, 58, (uint64_t *)&v135);
    if (!*(_QWORD *)a9)
    {
      __break(0xC471u);
      JUMPOUT(0x198940BF0);
    }
    return;
  }
  v33 = 0;
  do
  {
    *((_BYTE *)v143 + v33--) = (v11 % 0xA) | 0x30;
    v13 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v13);
  if (v33 + 26 >= 27)
    goto LABEL_139;
  v137 = (uint64_t *)v140;
  v34 = -v33;
  v138 = 9;
  v139 = -(int)v33;
  if ((unint64_t)-v33 >= 0xA)
  {
    if ((unint64_t)-v33 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x198941104);
    }
    v35 = (uint64_t *)WTF::fastMalloc((WTF *)-v33);
    v138 = -(int)v33;
    v137 = v35;
    goto LABEL_86;
  }
  v35 = (uint64_t *)v140;
  if (v33)
  {
LABEL_86:
    memcpy(v35, (char *)v143 + v33 + 1, -v33);
    LODWORD(v34) = v139;
  }
  if (9 - (int)v34 >= v32)
    v52 = v32;
  else
    v52 = 9 - v34;
  v53 = (v32 - v52);
  if (v34 < v53 && v138 < v53)
  {
    v54 = v138 + ((unint64_t)v138 >> 2);
    if (v54 >= 0x10)
      v55 = v54 + 1;
    else
      v55 = 16;
    if (v55 <= v53)
      v56 = v53;
    else
      v56 = v55;
    v57 = v137;
    if (v56 < 0xA)
    {
      v137 = (uint64_t *)v140;
      v138 = 9;
      v58 = (uint64_t *)v140;
    }
    else
    {
      if (HIDWORD(v56))
      {
        __break(0xC471u);
        goto LABEL_148;
      }
      v58 = (uint64_t *)WTF::fastMalloc((WTF *)v56);
      v138 = v56;
      v137 = v58;
    }
    memcpy(v58, v57, v34);
    if (v140 != (_BYTE *)v57 && v57)
    {
      if (v137 == v57)
      {
        v137 = 0;
        v138 = 0;
      }
      WTF::fastFree((unint64_t)v57, v86, v87, v88, v89, v90, v91, v92);
    }
  }
  v139 = v53;
  WTF::StringImpl::s_emptyAtomString += 4;
  v115[0] = 48;
  v116 = v52;
  v117 = &WTF::StringImpl::s_emptyAtomString;
  v112 = (WTF *)v114;
  v113 = v53;
  if (v53 < 0xA)
  {
    v93 = (WTF *)v114;
  }
  else
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)v53);
    v112 = v93;
    v53 = v139;
  }
  memcpy(v93, v137, v53);
  v129 = 0x200000030;
  v130 = v9;
  v127 = 0x200000030;
  v128 = BYTE1(v9);
  v125 = 0x200000030;
  v126 = BYTE2(v9);
  v141 = (unsigned __int8 *)&v129;
  v142 = v9;
  v135 = (unsigned __int8 *)&v127;
  v136 = BYTE1(v9);
  v133 = (uint64_t)&v125;
  v134 = BYTE2(v9);
  v131 = (uint64_t)v112;
  if ((v113 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989410D4);
  }
  v132 = v113;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>,WTF::StringTypeAdapter<WTF::Vector<unsigned char,9ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(a9, &v141, 58, &v135, 58, (unsigned __int8 **)&v133, 46, v115, (uint64_t)&WTF::StringImpl::s_emptyAtomString, (int8x16_t **)&v131);
  if (!*(_QWORD *)a9)
  {
    __break(0xC471u);
    JUMPOUT(0x1989410F4);
  }
  if (v114 != (_BYTE *)v112 && v112)
    WTF::fastFree((unint64_t)v112, v59, v60, v61, v62, v63, v64, v65);
  v94 = WTF::StringImpl::s_emptyAtomString - 2;
  if (WTF::StringImpl::s_emptyAtomString == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    v94 = WTF::StringImpl::s_emptyAtomString;
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString -= 2;
  }
  v95 = v94 - 2;
  if (v95)
  {
    WTF::StringImpl::s_emptyAtomString = v95;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  v69 = v137;
  if (v140 != (_BYTE *)v137)
    goto LABEL_134;
}

void JSC::ISO8601::temporalDateToString(int a1@<W0>, _OWORD *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unsigned int v10;
  char v11;
  const char *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned __int8 v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  char *v51;
  unsigned __int8 v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  char *v63;
  unsigned __int8 v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  int8x16_t v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  __int16 v81;
  unsigned int v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  char *v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  char *v92;
  unsigned __int8 v93;
  unsigned int v94;
  char *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 v99;
  unsigned int v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  char *v105;
  unsigned __int8 v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  int v114;
  int v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int128 *v132;
  unsigned __int128 *v133;
  unsigned __int128 v134;
  char v135;
  _QWORD v137[3];
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;

  v137[2] = *MEMORY[0x1E0C80C00];
  v10 = a1 << 11 >> 11;
  if ((a1 << 11) < 0x1387801)
  {
    v13 = 0;
    v14 = 0;
    v11 = 1;
    v15 = 4;
  }
  else
  {
    v11 = 0;
    if ((a1 & 0x100000) != 0)
      v12 = "-";
    else
      v12 = "+";
    v13 = 1;
    v14 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = 1;
    *(_QWORD *)(v14 + 8) = v12;
    *(_DWORD *)(v14 + 16) = 4;
    if ((v10 & 0x80000000) != 0)
      v10 = -v10;
    *(_DWORD *)v14 = 4;
    v15 = 6;
  }
  v16 = 0;
  v17 = a1 << 6;
  v18 = v10;
  do
  {
    ++v16;
    v19 = v18 > 9;
    v18 /= 0xAu;
  }
  while (v19);
  v20 = 0;
  v21 = v17 >> 27;
  v22 = v17 >> 27;
  do
  {
    ++v20;
    v23 = v22;
    v22 /= 0xAu;
  }
  while (v23 > 9);
  v24 = 0;
  v25 = a1 >> 26;
  v26 = a1 >> 26;
  do
  {
    ++v24;
    v27 = v26;
    LOBYTE(v26) = v26 / 0xAu;
  }
  while (v27 > 9);
  if (v15 > v16)
    v16 = v15;
  if (v20 <= 2)
    v20 = 2;
  if (v24 <= 2)
    v24 = 2;
  if ((v24 & 0x80000000) != 0)
    goto LABEL_168;
  v28 = __OFADD__(v24, 1);
  v29 = v24 + 1;
  v30 = v28;
  if ((v20 & 0x80000000) != 0)
    goto LABEL_168;
  if (v30)
    goto LABEL_168;
  v28 = __OFADD__(v20, v29);
  v31 = v20 + v29;
  if (v28)
    goto LABEL_168;
  v28 = __OFADD__(v31, 1);
  v32 = v31 + 1;
  v33 = v28;
  if ((v16 & 0x80000000) != 0 || v33)
    goto LABEL_168;
  v28 = __OFADD__(v16, v32);
  v34 = v16 + v32;
  if (v28)
    goto LABEL_168;
  v36 = v13 + v34;
  if (__OFADD__(v13, v34))
    goto LABEL_168;
  if ((v11 & 1) != 0)
  {
    if (!(_DWORD)v36)
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *a9 = &WTF::StringImpl::s_emptyAtomString;
      return;
    }
LABEL_48:
    if ((v36 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v36 + 20), v137);
      v40 = v137[0];
      if (v137[0])
      {
        v41 = (_BYTE *)(v137[0] + 20);
        *(_DWORD *)v137[0] = 2;
        *(_DWORD *)(v40 + 4) = v36;
        *(_QWORD *)(v40 + 8) = v40 + 20;
        *(_DWORD *)(v40 + 16) = 4;
        if ((v11 & 1) != 0)
        {
          v42 = 0;
        }
        else
        {
          a2 = *(_OWORD **)(v14 + 8);
          a3 = *(unsigned int *)(v14 + 4);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if ((_DWORD)a3 == 1)
            {
              *v41 = *(_BYTE *)a2;
            }
            else if ((_DWORD)a3)
            {
              memcpy((void *)(v40 + 20), a2, a3);
            }
          }
          else
          {
            if (a3 < 0x10)
            {
              v132 = (unsigned __int128 *)(v40 + 20);
            }
            else
            {
              v132 = (unsigned __int128 *)&v41[a3 & 0xFFFFFFF0];
              v133 = (unsigned __int128 *)(v40 + 20);
              do
              {
                v134 = (unsigned __int128)vld2q_s8((const char *)a2);
                a2 += 2;
                *v133++ = v134;
              }
              while (v133 != v132);
            }
            while (v132 != (unsigned __int128 *)&v41[a3])
            {
              v135 = *(_BYTE *)a2;
              a2 = (_OWORD *)((char *)a2 + 2);
              *(_BYTE *)v132 = v135;
              v132 = (unsigned __int128 *)((char *)v132 + 1);
            }
          }
          v42 = *(unsigned int *)(v14 + 4);
        }
        v43 = 0;
        v44 = &v41[v42];
        v45 = v10;
        do
        {
          ++v43;
          v19 = v45 > 9;
          v45 /= 0xAu;
        }
        while (v19);
        v46 = v15 - v43;
        if (v15 <= v43)
          v46 = 0;
        else
          memset(v44, 48, v15 - v43);
        v47 = 0;
        v48 = v10;
        do
        {
          *((_BYTE *)&v137[1] + v47-- + 4) = (v48 % 0xA) | 0x30;
          v19 = v48 > 9;
          v48 /= 0xAu;
        }
        while (v19);
        if (v47 + 14 <= 13)
          memcpy(&v44[v46], (char *)&v137[1] + v47 + 5, -v47);
        LODWORD(v49) = 0;
        do
        {
          LODWORD(v49) = v49 + 1;
          v19 = v10 > 9;
          v10 /= 0xAu;
        }
        while (v19);
        v50 = 0;
        if (v15 <= v49)
          v49 = v49;
        else
          v49 = v15;
        v51 = &v44[v49];
        *v51 = 45;
        v52 = v21;
        do
        {
          v53 = v52;
          v52 /= 0xAu;
          --v50;
        }
        while (v53 > 9);
        v54 = v51 + 1;
        if (-v50 != 1 && v50 != 0)
        {
          v55 = 0;
        }
        else
        {
          v55 = (v50 + 2);
          if (v55 <= 1)
            v56 = 1;
          else
            v56 = v55;
          memset(v54, 48, v56);
        }
        v57 = 0;
        v58 = v21;
        do
        {
          v59 = v58;
          *((_BYTE *)v137 + v57-- + 3) = (v58 % 0xAu) | 0x30;
          v58 /= 0xAu;
        }
        while (v59 > 9);
        if (v57 + 5 <= 4)
          memcpy(&v54[v55], (char *)v137 + v57 + 4, -v57);
        LODWORD(v60) = 0;
        do
        {
          LODWORD(v60) = v60 + 1;
          v61 = v21;
          LOBYTE(v21) = v21 / 0xAu;
        }
        while (v61 > 9);
        v62 = 0;
        if (v60 <= 2)
          v60 = 2;
        else
          v60 = v60;
        v63 = &v54[v60];
        *v63 = 45;
        v64 = v25;
        do
        {
          v65 = v64;
          v64 /= 0xAu;
          --v62;
        }
        while (v65 > 9);
        v66 = v63 + 1;
        if (-v62 != 1 && v62 != 0)
        {
          v67 = 0;
        }
        else
        {
          v67 = (v62 + 2);
          if (v67 <= 1)
            v68 = 1;
          else
            v68 = v67;
          memset(v66, 48, v68);
        }
        v69 = 0;
        do
        {
          v70 = v25;
          *((_BYTE *)v137 + v69-- + 3) = (v25 % 0xAu) | 0x30;
          LOBYTE(v25) = v25 / 0xAu;
        }
        while (v70 > 9);
        if (v69 + 5 <= 4)
          memcpy(&v66[v67], (char *)v137 + v69 + 4, -v69);
        *a9 = v40;
        if ((v11 & 1) == 0)
          goto LABEL_156;
        return;
      }
    }
LABEL_168:
    *a9 = 0;
    __break(0xC471u);
    JUMPOUT(0x198941A70);
  }
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if (!(_DWORD)v36)
      goto LABEL_166;
    goto LABEL_48;
  }
  if (!(_DWORD)v36)
  {
LABEL_166:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = &WTF::StringImpl::s_emptyAtomString;
LABEL_156:
    v114 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      v114 = *(_DWORD *)v14;
    }
    else
    {
      *(_DWORD *)v14 = v114;
    }
    v115 = v114 - 2;
    if (v115)
    {
      *(_DWORD *)v14 = v115;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    return;
  }
  if (v36 > 0x7FFFFFEF)
    goto LABEL_168;
  WTF::tryFastCompactMalloc((WTF *)(2 * v36 + 20), v137);
  v37 = v137[0];
  if (!v137[0])
    goto LABEL_168;
  v38 = (_WORD *)(v137[0] + 20);
  *(_DWORD *)v137[0] = 2;
  *(_DWORD *)(v37 + 4) = v36;
  *(_QWORD *)(v37 + 8) = v37 + 20;
  *(_DWORD *)(v37 + 16) = 0;
  a2 = *(_OWORD **)(v14 + 8);
  v39 = *(unsigned int *)(v14 + 4);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    v71 = (char *)&v38[v39];
    if (v39 >= 0x40)
    {
      v72 = (char *)&v38[v39 & 0xFFFFFFC0];
      v73 = 0uLL;
      v74 = (char *)(v37 + 20);
      do
      {
        v138.val[0] = (int8x16_t)*a2;
        v75 = *((int8x16_t *)a2 + 1);
        v139.val[0] = (int8x16_t)a2[2];
        v76 = a2[3];
        a2 += 4;
        v77 = v76;
        v139.val[1] = 0uLL;
        v140.val[0] = v75;
        v138.val[1] = 0uLL;
        v78 = v74;
        vst2q_s8(v78, v138);
        v78 += 32;
        v140.val[1] = 0uLL;
        vst2q_s8(v78, v140);
        v79 = v74 + 64;
        vst2q_s8(v79, v139);
        v80 = v74 + 96;
        vst2q_s8(v80, *(int8x16x2_t *)(&v73 - 1));
        v74 += 128;
      }
      while (v74 != v72);
    }
    else
    {
      v72 = (char *)(v37 + 20);
    }
    while (v72 != v71)
    {
      v81 = *(unsigned __int8 *)a2;
      a2 = (_OWORD *)((char *)a2 + 1);
      *(_WORD *)v72 = v81;
      v72 += 2;
    }
  }
  else if ((_DWORD)v39 == 1)
  {
    *v38 = *(_WORD *)a2;
  }
  else if ((_DWORD)v39)
  {
    memcpy((void *)(v37 + 20), a2, 2 * v39);
  }
  v82 = 0;
  v83 = (char *)&v38[*(unsigned int *)(v14 + 4)];
  v84 = v10;
  do
  {
    ++v82;
    v19 = v84 > 9;
    v84 /= 0xAu;
  }
  while (v19);
  v85 = v15 - v82;
  if (v15 <= v82)
    v85 = 0;
  else
    memset_pattern16(v83, a00000000, 2 * (v15 - v82));
  v86 = 0;
  v87 = v10;
  v88 = &v83[2 * v85];
  do
  {
    *((_BYTE *)&v137[1] + v86-- + 4) = (v87 % 0xA) | 0x30;
    v19 = v87 > 9;
    v87 /= 0xAu;
  }
  while (v19);
  if (v86 + 14 <= 13)
  {
    do
    {
      *(_WORD *)v88 = *((unsigned __int8 *)&v137[1] + v86 + 5);
      v88 += 2;
      v89 = __CFADD__(v86++, 1);
    }
    while (!v89);
  }
  v90 = 0;
  do
  {
    ++v90;
    v19 = v10 > 9;
    v10 /= 0xAu;
  }
  while (v19);
  v91 = 0;
  if (v15 > v90)
    v90 = v15;
  v92 = &v83[2 * v90];
  *(_WORD *)v92 = 45;
  v93 = v21;
  do
  {
    v94 = v93;
    v93 /= 0xAu;
    --v91;
  }
  while (v94 > 9);
  v95 = v92 + 2;
  if (-v91 != 1 && v91 != 0)
  {
    v96 = 0;
  }
  else
  {
    v96 = (v91 + 2);
    if (v96 <= 1)
      v97 = 1;
    else
      v97 = v91 + 2;
    memset_pattern16(v95, a00000000, 2 * v97);
  }
  v98 = 0;
  v99 = v21;
  do
  {
    v100 = v99;
    *((_BYTE *)v137 + v98-- + 3) = (v99 % 0xAu) | 0x30;
    v99 /= 0xAu;
  }
  while (v100 > 9);
  if (v98 + 5 <= 4)
  {
    v101 = &v95[2 * v96];
    do
    {
      *(_WORD *)v101 = *((unsigned __int8 *)v137 + v98 + 4);
      v101 += 2;
      v89 = __CFADD__(v98++, 1);
    }
    while (!v89);
  }
  v102 = 0;
  do
  {
    ++v102;
    v103 = v21;
    LOBYTE(v21) = v21 / 0xAu;
  }
  while (v103 > 9);
  v104 = 0;
  if (v102 <= 2)
    v102 = 2;
  v105 = &v95[2 * v102];
  *(_WORD *)v105 = 45;
  v106 = v25;
  do
  {
    v107 = v106;
    v106 /= 0xAu;
    --v104;
  }
  while (v107 > 9);
  v108 = v105 + 2;
  if (-v104 != 1 && v104 != 0)
  {
    v109 = 0;
  }
  else
  {
    v109 = (v104 + 2);
    if (v109 <= 1)
      v110 = 1;
    else
      v110 = v104 + 2;
    memset_pattern16(v108, a00000000, 2 * v110);
  }
  v111 = 0;
  do
  {
    v112 = v25;
    *((_BYTE *)v137 + v111-- + 3) = (v25 % 0xAu) | 0x30;
    LOBYTE(v25) = v25 / 0xAu;
  }
  while (v112 > 9);
  if (v111 + 5 <= 4)
  {
    v113 = &v108[2 * v109];
    do
    {
      *(_WORD *)v113 = *((unsigned __int8 *)v137 + v111 + 4);
      v113 += 2;
      v89 = __CFADD__(v111++, 1);
    }
    while (!v89);
  }
  *a9 = v37;
  if ((v11 & 1) == 0)
    goto LABEL_156;
}

void JSC::ISO8601::temporalDateTimeToString(int a1@<W0>, _OWORD *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  JSC::ISO8601::temporalDateToString(a1, a2, a3, a4, a5, a6, a7, a8, &v52);
  JSC::ISO8601::temporalTimeToString((unint64_t)a2, a3 & 0xFFFFFFFF000000FFLL, v12, v13, v14, v15, v16, v17, &v51);
  v19 = (WTF::StringImpl *)v51;
  v18 = v52;
  if (v52)
  {
    v20 = *((_DWORD *)v52 + 1);
    if (v51)
      goto LABEL_3;
LABEL_28:
    v21 = 0;
    goto LABEL_4;
  }
  v20 = 0;
  if (!v51)
    goto LABEL_28;
LABEL_3:
  v21 = *(_DWORD *)(v51 + 4);
  if (v21 < 0)
  {
LABEL_29:
    *a9 = 0;
    goto LABEL_30;
  }
LABEL_4:
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  v24 = v22;
  if (v20 < 0)
    goto LABEL_29;
  if ((v24 & 1) != 0)
    goto LABEL_29;
  v25 = (v20 + v23);
  if (__OFADD__(v20, v23))
    goto LABEL_29;
  if (v52)
  {
    v26 = *((_DWORD *)v52 + 4);
    v27 = (v26 >> 2) & 1;
    if (v51 && (v26 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v51)
    {
LABEL_13:
      v27 = (*(unsigned __int8 *)(v51 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v27 = 1;
  }
LABEL_14:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v25, v27, (uint64_t)v52, 84, v51, a9);
  if (!*a9)
  {
LABEL_30:
    __break(0xC471u);
    return;
  }
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      if (!v18)
        return;
      goto LABEL_19;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v18)
    return;
LABEL_19:
  if (*(_DWORD *)v18 == 2)
  {
    WTF::StringImpl::~StringImpl(v18, v28, v29, v30, v31, v32, v33, v34);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  else
  {
    *(_DWORD *)v18 -= 2;
  }
}

BOOL JSC::ISO8601::isValidDuration(JSC::ISO8601 *this, const Duration *a2)
{
  double v2;
  int v3;
  double v4;
  uint64_t v5;
  int v7;
  double v8;
  BOOL v9;
  int v10;
  double v12;
  int v13;
  double v15;
  int v16;
  double v18;
  int v19;
  double v21;
  int v22;
  double v24;
  int v25;
  double v27;
  int v28;
  double v30;

  v2 = *(double *)this;
  if ((*(_QWORD *)this & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v3 = v2 > 0.0 ? 1 : -1;
  v4 = *((double *)this + 1);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v4 < 0.0 && v2 > 0.0)
    return 0;
  if (v4 > 0.0 && v2 < 0.0)
    return 0;
  v5 = 0;
  if (v4 > 0.0)
    v7 = 1;
  else
    v7 = -1;
  if (v4 == 0.0)
    v7 = 0;
  if (v2 == 0.0)
    v3 = v7;
  v8 = *((double *)this + 2);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v9 = v8 >= 0.0 || v3 <= 0;
    if (!v9 || v8 > 0.0 && v3 < 0)
      return 0;
    if (v8 > 0.0)
      v10 = 1;
    else
      v10 = -1;
    if (v8 == 0.0 || v3 != 0)
      v10 = v3;
    v12 = *((double *)this + 3);
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 < 0.0 && v10 > 0)
      return 0;
    if (v12 > 0.0 && v10 < 0)
      return 0;
    if (v12 > 0.0)
      v13 = 1;
    else
      v13 = -1;
    if (v12 != 0.0 && v10 == 0)
      v10 = v13;
    v15 = *((double *)this + 4);
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 < 0.0 && v10 > 0)
      return 0;
    if (v15 > 0.0 && v10 < 0)
      return 0;
    if (v15 > 0.0)
      v16 = 1;
    else
      v16 = -1;
    if (v15 != 0.0 && v10 == 0)
      v10 = v16;
    v18 = *((double *)this + 5);
    if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v18 < 0.0 && v10 > 0)
      return 0;
    if (v18 > 0.0 && v10 < 0)
      return 0;
    if (v18 > 0.0)
      v19 = 1;
    else
      v19 = -1;
    if (v18 != 0.0 && v10 == 0)
      v10 = v19;
    v21 = *((double *)this + 6);
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v21 < 0.0 && v10 > 0)
      return 0;
    if (v21 > 0.0 && v10 < 0)
      return 0;
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v21 != 0.0 && v10 == 0)
      v10 = v22;
    v24 = *((double *)this + 7);
    if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v24 < 0.0 && v10 > 0)
      return 0;
    if (v24 > 0.0 && v10 < 0)
      return 0;
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v24 != 0.0 && v10 == 0)
      v10 = v25;
    v27 = *((double *)this + 8);
    if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v27 < 0.0 && v10 > 0)
      return 0;
    if (v27 > 0.0 && v10 < 0)
      return 0;
    if (v27 > 0.0)
      v28 = 1;
    else
      v28 = -1;
    if (v27 != 0.0 && v10 == 0)
      v10 = v28;
    v30 = *((double *)this + 9);
    if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v30 < 0.0 && v10 > 0)
      return 0;
    return v30 <= 0.0 || v10 >= 0;
  }
  return v5;
}

char **JSC::ISO8601::ExactTime::add@<X0>(char **this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char **v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  char v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  BOOL v119;
  unsigned __int128 v120;
  char v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v6 = *this;
  v5 = (unint64_t)this[1];
  v7 = a2[4];
  v8 = (v7 >> 52) & 0x7FF;
  if (v8 >= 0x3FF)
  {
    if (v8 > 0x47E)
    {
      v11 = 0;
      v12 = 0;
      v13 = 1;
      goto LABEL_30;
    }
    v14 = v7 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v7 >> 52)) & 0x40) != 0)
      v15 = 0;
    else
      v15 = v14 >> (51 - (v7 >> 52));
    v16 = v14 >> 1 >> ~((v7 >> 52) - 51);
    v17 = v14 << ((v7 >> 52) - 51);
    if ((((v7 >> 52) - 51) & 0x40) != 0)
      v18 = v17;
    else
      v18 = v16;
    if ((((v7 >> 52) - 51) & 0x40) != 0)
      v17 = 0;
    v19 = v8 >= 0x433;
    if (v8 >= 0x433)
      v20 = v18;
    else
      v20 = 0;
    if (!v19)
      v17 = v15;
    v21 = (unsigned __int128)-(__int128)__PAIR128__(v18, v17) >> 64;
    if ((v7 & 0x8000000000000000) == 0)
      v9 = v17;
    else
      v9 = -(uint64_t)v17;
    if ((v7 & 0x8000000000000000) == 0)
      v10 = v20;
    else
      v10 = v21;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v127 = 0;
  this = (char **)__muloti4(v9, v10, 0x34630B8A000uLL, 0, &v127);
  v13 = v127 != 0;
  if (v127)
    v12 = 0;
  else
    v12 = v22;
  if (v127)
    v11 = 0;
  else
    v11 = (unint64_t)this;
LABEL_30:
  v23 = __OFADD__(__CFADD__(v6, v11), v5) | __OFADD__(v12, (__PAIR128__(v5, (unint64_t)v6) + v11) >> 64);
  v24 = v12 + ((__PAIR128__(v5, (unint64_t)v6) + v11) >> 64);
  v25 = v23;
  if (!v23)
  {
    v5 = v24;
    v6 += v11;
  }
  v26 = a2[5];
  v27 = (v26 >> 52) & 0x7FF;
  if (v27 >= 0x3FF)
  {
    if (v27 > 0x47E)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      goto LABEL_70;
    }
    v33 = v26 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v26 >> 52)) & 0x40) != 0)
      v34 = 0;
    else
      v34 = v33 >> (51 - (v26 >> 52));
    v35 = v33 >> 1 >> ~((v26 >> 52) - 51);
    v36 = v33 << ((v26 >> 52) - 51);
    if ((((v26 >> 52) - 51) & 0x40) != 0)
      v37 = v36;
    else
      v37 = v35;
    if ((((v26 >> 52) - 51) & 0x40) != 0)
      v36 = 0;
    v38 = v27 >= 0x433;
    if (v27 >= 0x433)
      v39 = v37;
    else
      v39 = 0;
    if (!v38)
      v36 = v34;
    v40 = (unsigned __int128)-(__int128)__PAIR128__(v37, v36) >> 64;
    if ((v26 & 0x8000000000000000) == 0)
      v28 = v36;
    else
      v28 = -(uint64_t)v36;
    if ((v26 & 0x8000000000000000) == 0)
      v29 = v39;
    else
      v29 = v40;
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v126 = 0;
  this = (char **)__muloti4(v28, v29, 0xDF8475800uLL, 0, &v126);
  if (v126)
    v31 = 0;
  else
    v31 = v41;
  if (v126)
    v30 = 0;
  else
    v30 = this;
  if (v126)
    v42 = 1;
  else
    v42 = v25;
  if (v42)
    v32 = 1;
  else
    v32 = v13;
LABEL_70:
  v43 = __OFADD__(__CFADD__(v6, v30), v5) | __OFADD__(v31, (unint64_t)((unint64_t)v30+ __PAIR128__(v5, (unint64_t)v6)) >> 64);
  v44 = v31 + ((unint64_t)((unint64_t)v30 + __PAIR128__(v5, (unint64_t)v6)) >> 64);
  if (v43)
    v45 = 1;
  else
    v45 = 0;
  if (v43)
    v46 = v5;
  else
    v46 = v44;
  if (v43)
    v47 = v6;
  else
    v47 = (char *)v30 + (_QWORD)v6;
  v48 = a2[6];
  v49 = (v48 >> 52) & 0x7FF;
  if (v49 >= 0x3FF)
  {
    if (v49 > 0x47E)
    {
      v52 = 0;
      v53 = 0;
      v54 = 1;
      goto LABEL_114;
    }
    v55 = v48 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v48 >> 52)) & 0x40) != 0)
      v56 = 0;
    else
      v56 = v55 >> (51 - (v48 >> 52));
    v57 = v55 >> 1 >> ~((v48 >> 52) - 51);
    v58 = v55 << ((v48 >> 52) - 51);
    if ((((v48 >> 52) - 51) & 0x40) != 0)
      v59 = v58;
    else
      v59 = v57;
    if ((((v48 >> 52) - 51) & 0x40) != 0)
      v58 = 0;
    v60 = v49 >= 0x433;
    if (v49 >= 0x433)
      v61 = v59;
    else
      v61 = 0;
    if (!v60)
      v58 = v56;
    v62 = (unsigned __int128)-(__int128)__PAIR128__(v59, v58) >> 64;
    if ((v48 & 0x8000000000000000) == 0)
      v50 = v58;
    else
      v50 = -(uint64_t)v58;
    if ((v48 & 0x8000000000000000) == 0)
      v51 = v61;
    else
      v51 = v62;
  }
  else
  {
    v50 = 0;
    v51 = 0;
  }
  v125 = 0;
  this = (char **)__muloti4(v50, v51, 0x3B9ACA00uLL, 0, &v125);
  if (v125)
    v53 = 0;
  else
    v53 = v63;
  if (v125)
    v52 = 0;
  else
    v52 = (unint64_t)this;
  if (v125)
    v64 = 1;
  else
    v64 = v45;
  if (v64)
    v54 = 1;
  else
    v54 = v32;
LABEL_114:
  v65 = __OFADD__(__CFADD__(v47, v52), v46) | __OFADD__(v53, (__PAIR128__(v46, (unint64_t)v47) + v52) >> 64);
  v66 = v53 + ((__PAIR128__(v46, (unint64_t)v47) + v52) >> 64);
  if (v65)
    v67 = 1;
  else
    v67 = 0;
  if (!v65)
  {
    v46 = v66;
    v47 += v52;
  }
  v68 = a2[7];
  v69 = (v68 >> 52) & 0x7FF;
  if (v69 >= 0x3FF)
  {
    if (v69 > 0x47E)
    {
      v72 = 0;
      v73 = 0;
      v54 = 1;
      goto LABEL_153;
    }
    v74 = v68 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v68 >> 52)) & 0x40) != 0)
      v75 = 0;
    else
      v75 = v74 >> (51 - (v68 >> 52));
    v76 = v74 >> 1 >> ~((v68 >> 52) - 51);
    v77 = v74 << ((v68 >> 52) - 51);
    if ((((v68 >> 52) - 51) & 0x40) != 0)
      v78 = v77;
    else
      v78 = v76;
    if ((((v68 >> 52) - 51) & 0x40) != 0)
      v77 = 0;
    v79 = v69 >= 0x433;
    if (v69 >= 0x433)
      v80 = v78;
    else
      v80 = 0;
    if (!v79)
      v77 = v75;
    v81 = (unsigned __int128)-(__int128)__PAIR128__(v78, v77) >> 64;
    if ((v68 & 0x8000000000000000) == 0)
      v70 = v77;
    else
      v70 = -(uint64_t)v77;
    if ((v68 & 0x8000000000000000) == 0)
      v71 = v80;
    else
      v71 = v81;
  }
  else
  {
    v70 = 0;
    v71 = 0;
  }
  v124 = 0;
  this = (char **)__muloti4(v70, v71, 0xF4240uLL, 0, &v124);
  if (v124)
    v73 = 0;
  else
    v73 = v82;
  if (v124)
    v72 = 0;
  else
    v72 = (unint64_t)this;
  if (v124)
    v83 = 1;
  else
    v83 = v67;
  if (v83)
    v54 = 1;
LABEL_153:
  v84 = __OFADD__(__CFADD__(v47, v72), v46) | __OFADD__(v73, (__PAIR128__(v46, (unint64_t)v47) + v72) >> 64);
  v85 = v73 + ((__PAIR128__(v46, (unint64_t)v47) + v72) >> 64);
  if (v84)
    v86 = 1;
  else
    v86 = 0;
  if (!v84)
  {
    v46 = v85;
    v47 += v72;
  }
  v87 = a2[8];
  v88 = (v87 >> 52) & 0x7FF;
  if (v88 >= 0x3FF)
  {
    if (v88 > 0x47E)
    {
      v91 = 0;
      v92 = 0;
      v93 = 1;
      goto LABEL_193;
    }
    v94 = v87 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v87 >> 52)) & 0x40) != 0)
      v95 = 0;
    else
      v95 = v94 >> (51 - (v87 >> 52));
    v96 = v94 >> 1 >> ~((v87 >> 52) - 51);
    v97 = v94 << ((v87 >> 52) - 51);
    if ((((v87 >> 52) - 51) & 0x40) != 0)
      v98 = v97;
    else
      v98 = v96;
    if ((((v87 >> 52) - 51) & 0x40) != 0)
      v97 = 0;
    v99 = v88 >= 0x433;
    if (v88 >= 0x433)
      v100 = v98;
    else
      v100 = 0;
    if (!v99)
      v97 = v95;
    v101 = (unsigned __int128)-(__int128)__PAIR128__(v98, v97) >> 64;
    if ((v87 & 0x8000000000000000) == 0)
      v89 = v97;
    else
      v89 = -(uint64_t)v97;
    if ((v87 & 0x8000000000000000) == 0)
      v90 = v100;
    else
      v90 = v101;
  }
  else
  {
    v89 = 0;
    v90 = 0;
  }
  v123 = 0;
  this = (char **)__muloti4(v89, v90, 0x3E8uLL, 0, &v123);
  if (v123)
    v92 = 0;
  else
    v92 = v102;
  if (v123)
    v91 = 0;
  else
    v91 = this;
  if (v123)
    v103 = 1;
  else
    v103 = v86;
  if (v103)
    v93 = 1;
  else
    v93 = v54;
LABEL_193:
  v104 = (char *)v91 + (_QWORD)v47;
  v23 = __OFADD__(__CFADD__(v47, v91), v46);
  v106 = __CFADD__(v47, v91) + v46;
  v105 = v23 | __OFADD__(v92, v106);
  v106 += v92;
  if (v105)
    v107 = 1;
  else
    v107 = 0;
  if (v105)
  {
    v106 = v46;
    v104 = v47;
  }
  v108 = a2[9];
  v109 = (v108 >> 52) & 0x7FF;
  if (v109 >= 0x3FF)
  {
    if (v109 > 0x47E)
      goto LABEL_229;
    v112 = v108 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (((51 - (v108 >> 52)) & 0x40) != 0)
      v113 = 0;
    else
      v113 = v112 >> (51 - (v108 >> 52));
    this = (char **)(v112 >> 1);
    v114 = v112 >> 1 >> ~((v108 >> 52) - 51);
    v115 = v112 << ((v108 >> 52) - 51);
    if ((((v108 >> 52) - 51) & 0x40) != 0)
      v116 = v115;
    else
      v116 = v114;
    if ((((v108 >> 52) - 51) & 0x40) != 0)
      v115 = 0;
    v117 = v109 >= 0x433;
    if (v109 >= 0x433)
      v111 = v116;
    else
      v111 = 0;
    if (!v117)
      v115 = v113;
    v118 = (unsigned __int128)-(__int128)__PAIR128__(v116, v115) >> 64;
    v119 = (v108 & 0x8000000000000000) != 0;
    if ((v108 & 0x8000000000000000) == 0)
      v110 = v115;
    else
      v110 = -(uint64_t)v115;
    if (v119)
      v111 = v118;
  }
  else
  {
    v110 = 0;
    v111 = 0;
  }
  v120 = __PAIR128__(v106, (unint64_t)v104) + __PAIR128__(v111, v110);
  if (__OFADD__(__CFADD__(v104, v110), v106) | __OFADD__(v111, (__PAIR128__(v106, (unint64_t)v104) + __PAIR128__(v111, v110)) >> 64))v121 = 1;
  else
    v121 = 0;
  if ((v121 & 1) == 0)
  {
    v122 = v93 ? 1 : v107;
    if (v122 != 1
      && __PAIR128__((unint64_t)__CFADD__((_QWORD)v120, 0x60162F516F000000) + *((_QWORD *)&v120 + 1) + 468, (uint64_t)v120 + 0x60162F516F000000) < __PAIR128__(936, 0xC02C5EA2DE000001))
    {
      *(_OWORD *)a3 = v120;
      *(_BYTE *)(a3 + 16) = 1;
      return this;
    }
  }
LABEL_229:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return this;
}

void JSC::Identifier::add8(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t StatusReg;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  WTF::WordLock *v26;
  unsigned int v27;
  unsigned int v28;
  _opaque_pthread_t *v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *stackaddr_np;
  _opaque_pthread_t *v40;
  unint64_t v41;
  int v42;
  _opaque_pthread_t *v43;
  rlim_t rlim_cur;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  int v47;
  rlimit v48;
  char v49;
  char v50;
  rlimit *v51;

  if (a3 == 1)
  {
    if (*(unsigned __int16 *)a2 <= 0xFFu)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(a1 + 41968), *(_WORD *)a2, a4, a5, a6, a7, a8, a9);
      return;
    }
    if (a2)
    {
      v11 = -1640531527;
      v45 = a2;
      v46 = 1;
LABEL_7:
      v14 = *((unsigned __int16 *)a2 + a3 - 1);
      v11 = ((v11 + v14) ^ ((v11 + v14) << 11)) + (((v11 + v14) ^ ((v11 + v14) << 11)) >> 17);
      goto LABEL_8;
    }
LABEL_70:
    v21 = 0;
    goto LABEL_21;
  }
  if (!a3)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (!a2)
    goto LABEL_70;
  v10 = 0;
  v11 = -1640531527;
  v45 = a2;
  v46 = a3;
  do
  {
    v12 = ((v11 + *((unsigned __int16 *)a2 + v10)) << 16) ^ (*((unsigned __int16 *)a2 + v10 + 1) << 11) ^ (v11 + *((unsigned __int16 *)a2 + v10));
    v11 = v12 + (v12 >> 11);
    v13 = v10 + 3;
    v10 += 2;
  }
  while (v13 < a3);
  if ((a3 & 1) != 0)
    goto LABEL_7;
LABEL_8:
  v15 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  v16 = (v15 ^ (4 * v15)) + ((v15 ^ (4 * v15)) >> 15);
  v17 = (v16 ^ (v16 << 10)) & 0xFFFFFF;
  if (!v17)
    v17 = 0x800000;
  v47 = v17;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_13;
  }
  if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    goto LABEL_12;
LABEL_13:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v20 = *(_QWORD *)(StatusReg + 736);
  if (v20)
    goto LABEL_14;
  v24 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v24 != -1)
  {
    v48.rlim_cur = (rlim_t)&v50;
    v51 = &v48;
    std::__call_once(&WTF::initialize(void)::onceKey, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  v25 = WTF::fastMalloc((WTF *)0x68);
  v20 = v25;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_QWORD *)(v25 + 96) = 0;
  *(_DWORD *)v25 = 1;
  *(_OWORD *)(v25 + 8) = 0u;
  v26 = (WTF::WordLock *)(v25 + 8);
  *(_OWORD *)(v25 + 24) = 0u;
  do
  {
    v27 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v28 = v27 + 1;
  }
  while (__stlxr(v28, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v25 + 48) = v28;
  *(_QWORD *)(v25 + 52) = 0;
  *(_QWORD *)(v25 + 68) = 0;
  *(_QWORD *)(v25 + 60) = 0;
  *(_DWORD *)(v25 + 76) = 0;
  *(_QWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 96) = 0;
  v29 = pthread_self();
  if (__ldaxr((unint64_t *)v26))
  {
    __clrex();
LABEL_31:
    WTF::WordLock::lockSlow(v26);
    goto LABEL_32;
  }
  if (__stxr(1uLL, (unint64_t *)v26))
    goto LABEL_31;
LABEL_32:
  *(_QWORD *)(v20 + 40) = v29;
  *(_DWORD *)(v20 + 52) = pthread_mach_thread_np(v29);
  v31 = __ldxr((unint64_t *)v26);
  if (v31 == 1)
  {
    if (!__stlxr(0, (unint64_t *)v26))
      goto LABEL_42;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow(v26);
LABEL_42:
  stackaddr_np = *(char **)(v20 + 16);
  if (!stackaddr_np)
  {
    v42 = pthread_main_np();
    v43 = pthread_self();
    stackaddr_np = (char *)pthread_get_stackaddr_np(v43);
    if (v42)
    {
      getrlimit(3, &v48);
      if (v48.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        rlim_cur = 0x800000;
      else
        rlim_cur = v48.rlim_cur;
    }
    else
    {
      rlim_cur = pthread_get_stacksize_np(v43);
    }
    *(_QWORD *)(v20 + 16) = stackaddr_np;
    *(_QWORD *)(v20 + 24) = &stackaddr_np[-rlim_cur];
  }
  *(_QWORD *)(v20 + 80) = stackaddr_np;
  *(_QWORD *)(v20 + 56) = v20 + 64;
  v40 = pthread_self();
  if (pthread_equal(v40, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
  {
    v41 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
    if (v41 != -1)
    {
      v48.rlim_cur = (rlim_t)&v50;
      v51 = &v48;
      std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
    }
    *(_QWORD *)(v20 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
  }
  *(_QWORD *)(StatusReg + 736) = v20;
  pthread_key_init_np();
LABEL_14:
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v20 + 56), (uint64_t)&v45, a4, a5, a6, a7, a8, (uint64_t)&v48);
  v21 = 16 * *(unsigned int *)v48.rlim_cur;
  if (!v49)
    *(_DWORD *)v21 += 2;
  v22 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
LABEL_21:
  v23 = *(_DWORD *)v21;
  *(_DWORD *)v21 += 2;
  *a9 = v21;
  if (v23)
  {
    *(_DWORD *)v21 = v23;
    return;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, a2, a3, a4, a5, a6, a7, a8);
  v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v37)
  {
    pas_try_deallocate_slow_no_cache(v21, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (!(v21 >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v21 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v21)) & 1) != 0)
  {
    goto LABEL_38;
  }
  if (v21 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v21 >> 24)
  {
    v32 = 0;
    goto LABEL_61;
  }
  v32 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v21 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v21) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
  if ((_DWORD)v32 != 1)
  {
LABEL_61:
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v37, v21, 1, v32, v33, v34, v35, v36);
    return;
  }
LABEL_38:
  v38 = *(unsigned int *)(v37 + 8000);
  if (v38 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v37, v21, (os_unfair_lock_s *)5, v32, v33, v34, v35, v36);
  }
  else
  {
    *(_QWORD *)(v37 + 8 * v38) = v21 | 0x5000000000000;
    *(_DWORD *)(v37 + 8000) = v38 + 1;
  }
}

void JSC::Identifier::from(uint64_t **this@<X0>, unint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int **v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int *v19;
  _BYTE *v20;
  int **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE *v43;
  _QWORD v44[3];

  v44[2] = *MEMORY[0x1E0C80C00];
  if (a2 <= 0xFF)
  {
    v11 = (int **)&this[2 * a2 + 5534];
    v19 = *v11;
    if (!*v11)
    {
      v41 = 0;
      do
      {
        v42 = (a2 % 0xA) | 0x30;
        *((_BYTE *)&v44[1] + v41-- + 4) = (a2 % 0xA) | 0x30;
        v18 = a2 > 9;
        a2 = a2 / 0xAuLL;
      }
      while (v18);
      if (v41 + 14 < 15)
      {
        if (v41)
        {
          if ((unint64_t)-v41 >> 31)
            goto LABEL_39;
          v19 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v41));
          v43 = v19 + 5;
          *v19 = 2;
          v19[1] = -(int)v41;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          if (v41 == -1)
            *v43 = v42;
          else
            memcpy(v43, (char *)&v44[1] + v41 + 5, -v41);
LABEL_33:
          v22 = (WTF::StringImpl *)*v11;
          goto LABEL_11;
        }
LABEL_35:
        v19 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_33;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_15:
    if ((v19[4] & 0x10) != 0)
    {
      *v19 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(this[5239], (unint64_t)v19, a3, a4, a5, a6, a7, a8, v44);
      v19 = (int *)v44[0];
    }
    goto LABEL_17;
  }
  v11 = (int **)(this + 7582);
  v12 = 9 * ((~((_DWORD)a2 << 15) + a2) ^ ((~((_DWORD)a2 << 15) + a2) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ BYTE2(v13));
  v15 = &this[2 * v14 + 7582];
  if (*(_DWORD *)v15 == (_DWORD)a2)
  {
    v19 = v11[2 * v14 + 1];
    if (v19)
      goto LABEL_15;
  }
  v16 = 0;
  *(_DWORD *)v15 = a2;
  do
  {
    v17 = (a2 % 0xA) | 0x30;
    *((_BYTE *)&v44[1] + v16-- + 4) = (a2 % 0xA) | 0x30;
    v18 = a2 > 9;
    a2 = a2 / 0xAuLL;
  }
  while (v18);
  if (v16 + 14 >= 15)
    goto LABEL_34;
  if (v16)
  {
    if (!((unint64_t)-v16 >> 31))
    {
      v19 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v16));
      v20 = v19 + 5;
      *v19 = 2;
      v19[1] = -(int)v16;
      *((_QWORD *)v19 + 1) = v19 + 5;
      v19[4] = 4;
      if (v16 == -1)
        *v20 = v17;
      else
        memcpy(v20, (char *)&v44[1] + v16 + 5, -v16);
      goto LABEL_10;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198942BB0);
  }
  v19 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_10:
  v21 = &v11[2 * v14];
  v23 = (WTF::StringImpl *)v21[1];
  v11 = v21 + 1;
  v22 = v23;
LABEL_11:
  *v11 = v19;
  if (!v22)
    goto LABEL_15;
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
  v19 = *v11;
  if (*v11)
    goto LABEL_15;
LABEL_17:
  v24 = *v19;
  *v19 += 2;
  if (v24)
  {
    *v19 = v24;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  *a9 = v19;
}

{
  int **v11;
  int *v12;
  int v13;
  char *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t **v18;
  char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  _BYTE *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61[3];

  v61[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a2 > 0xFF)
  {
    v14 = (char *)(this + 6046);
    v15 = 9 * ((~((_DWORD)a2 << 15) + a2) ^ ((~((_DWORD)a2 << 15) + a2) >> 10));
    v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
    v17 = (v16 ^ BYTE2(v16));
    v18 = &this[3 * (v16 ^ BYTE2(v16)) + 6046];
    if (*(_DWORD *)v18 == (_DWORD)a2)
    {
      v12 = *(int **)&v14[24 * v17 + 8];
      if (v12)
        goto LABEL_3;
    }
    *(_DWORD *)v18 = a2;
    WTF::String::number(a2, (uint64_t *)v61);
    v19 = &v14[24 * v17];
    v21 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
    v11 = (int **)(v19 + 8);
    v20 = v21;
    v22 = v61[0];
    v61[0] = 0;
    *v11 = (int *)v22;
    if (v21)
    {
      v23 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        v20 = v61[0];
        v61[0] = 0;
        if (!v20)
          goto LABEL_14;
        v23 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
          goto LABEL_14;
        }
      }
      *(_DWORD *)v20 = v23;
    }
LABEL_14:
    *(_QWORD *)&v14[24 * v17 + 16] = 0;
    goto LABEL_26;
  }
  v11 = (int **)&this[2 * a2 + 5534];
  v12 = *v11;
  if (!*v11)
  {
    v32 = 0;
    do
    {
      v33 = (a2 % 0xA) | 0x30;
      *((_BYTE *)&v61[1] + v32-- + 4) = (a2 % 0xA) | 0x30;
      v34 = a2 > 9;
      a2 = a2 / 0xAuLL;
    }
    while (v34);
    if (v32 + 14 >= 15)
      __break(1u);
    if (v32)
    {
      if ((unint64_t)-v32 >> 31)
      {
        __break(0xC471u);
        return;
      }
      v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v32));
      v35 = v12 + 5;
      *v12 = 2;
      v12[1] = -(int)v32;
      *((_QWORD *)v12 + 1) = v12 + 5;
      v12[4] = 4;
      if (v32 == -1)
        *v35 = v33;
      else
        memcpy(v35, (char *)&v61[1] + v32 + 5, -v32);
    }
    else
    {
      v12 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v36 = (WTF::StringImpl *)*v11;
    *v11 = v12;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
LABEL_26:
      v12 = *v11;
      if (!*v11)
        goto LABEL_5;
    }
  }
LABEL_3:
  if ((v12[4] & 0x10) != 0)
  {
    *v12 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(this[5239], (unint64_t)v12, a3, a4, a5, a6, a7, a8, v61);
    v12 = (int *)v61[0];
  }
LABEL_5:
  v13 = *v12;
  *v12 += 2;
  if (v13)
  {
    *v12 = v13;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  *a9 = v12;
}

void JSC::Identifier::from(uint64_t **this@<X0>, JSC::VM *a2@<X1>, double a3@<D0>, const WTF::StringImpl *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X6>, uint64_t a9@<X7>, WTF::StringImpl **a10@<X8>)
{
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  double *v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;

  v12 = (char *)(this + 6814);
  v13 = (~(*(_QWORD *)&a3 << 32) + *(_QWORD *)&a3) ^ ((~(*(_QWORD *)&a3 << 32) + *(_QWORD *)&a3) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = ((v15 >> 31) ^ v15);
  v17 = (double *)&this[3 * ((v15 >> 31) ^ v15) + 6814];
  if (*v17 == a3)
  {
    v22 = *(WTF::StringImpl **)&v12[24 * v16 + 8];
    if (v22)
      goto LABEL_7;
  }
  *v17 = a3;
  WTF::String::number(a3, (int **)&v49);
  v18 = &v12[24 * v16];
  v21 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
  v20 = (WTF::StringImpl **)(v18 + 8);
  v19 = v21;
  v22 = v49;
  v49 = 0;
  *v20 = v22;
  if (!v21)
    goto LABEL_6;
  v23 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    v19 = v49;
    v49 = 0;
    if (!v19)
      goto LABEL_5;
    v23 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      goto LABEL_5;
    }
  }
  *(_DWORD *)v19 = v23;
LABEL_5:
  v22 = *v20;
LABEL_6:
  *(_QWORD *)&v12[24 * v16 + 16] = 0;
  if (v22)
  {
LABEL_7:
    if ((*((_BYTE *)v22 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v22 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(this[5239], (unint64_t)v22, a4, a5, a6, a7, a8, a9, &v49);
      v22 = v49;
    }
  }
  v24 = *(_DWORD *)v22;
  *(_DWORD *)v22 += 2;
  if (v24)
  {
    *(_DWORD *)v22 = v24;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  *a10 = v22;
}

uint64_t JSC::Identifier::dump(JSC::Identifier *this, WTF::PrintStream *a2)
{
  uint64_t v3;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  WTF::PrintStream *v13;
  char *v14;
  size_t v15;
  WTF::PrintStream *v16;
  int v18;
  int v19;
  char v20;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if ((*(_BYTE *)(v3 + 16) & 0x20) != 0 && (*(_BYTE *)(v3 + 36) & 4) != 0)
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v5, "%s", "PrivateSymbol.");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v3 = *(_QWORD *)this;
    }
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v13 = v6;
    if (v3)
    {
      v14 = *(char **)(v3 + 8);
      v15 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v14, v15, (uint64_t)&v18, v12);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v14, v15, 0, v7, v8, v9, v10, v11, (uint64_t)&v18);
      WTF::printExpectedCStringHelper(v13, "StringImpl*", &v18);
      if (v19 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v20, &v18);
    }
    else
    {
      WTF::PrintStream::printf(v6, "%s");
    }
  }
  else
  {
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v16, "%s");
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::ImportMap::resolveImportMatch(uint64_t a1, WTF::StringImpl **this, WTF::URL *a3, uint64_t *a4, double a5, double a6, float a7)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  StringView v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  char v69;
  WTF::StringImpl *v70;
  _QWORD v71[5];
  char v72;
  StringView v73;

  result = *a4;
  if (!*a4)
  {
    v11 = 0;
    goto LABEL_3;
  }
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result, this, a3);
  v11 = *a4;
  if (result)
  {
    if (!v11)
      goto LABEL_14;
    v41 = *(_DWORD *)(v11 - 4);
  }
  else
  {
    if (!v11)
      goto LABEL_3;
    v41 = *(_DWORD *)(v11 - 4);
    result = v11 + 48 * v41;
  }
  if (result != v11 + 48 * v41)
  {
LABEL_14:
    v16 = *(_DWORD **)(result + 8);
    if (!v16)
      return std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected<WTF::ASCIILiteral>(a1, (uint64_t)"specifier is blocked", 21);
    *v16 += 2;
    *(_QWORD *)a1 = v16;
    v17 = *(_OWORD *)(result + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 40) = 0;
    return result;
  }
LABEL_3:
  if ((*((_BYTE *)a3 + 8) & 1) == 0 || (result = WTF::URL::hasSpecialScheme(a3), (_DWORD)result))
  {
    LOBYTE(v71[0]) = 0;
    v72 = 0;
    if (v11)
    {
      v13 = *(unsigned int *)(v11 - 4);
      v14 = v11 + 48 * v13;
      if (*(_DWORD *)(v11 - 12))
      {
        v12 = v11;
        if ((_DWORD)v13)
        {
          v18 = 48 * v13;
          v12 = v11;
          while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
          {
            v12 += 48;
            v18 -= 48;
            if (!v18)
            {
              v12 = v14;
              goto LABEL_8;
            }
          }
        }
        goto LABEL_8;
      }
      goto LABEL_76;
    }
    v12 = 0;
    LODWORD(v13) = 0;
    while (1)
    {
      v14 = v11 + 48 * v13;
LABEL_8:
      if (v11)
        v11 += 48 * *(unsigned int *)(v11 - 4);
      if (v11 == v12)
        goto LABEL_11;
      v19 = -1;
      do
      {
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v21 = *(unsigned int *)(v20 + 4);
          if ((_DWORD)v21)
          {
            v22 = (v21 - 1);
            v23 = *(_DWORD *)(v20 + 16);
            v24 = *(unsigned __int8 **)(v20 + 8);
            v25 = (v23 & 4) != 0 ? v24[v22] : *(unsigned __int16 *)&v24[2 * v22];
            if (v25 == 47)
            {
              result = (uint64_t)*this;
              if (*this)
              {
                v67 = v19;
                *(_QWORD *)&v73.m_length = v21 | ((unint64_t)((v23 >> 2) & 1) << 32);
                v73.m_characters = v24;
                result = WTF::StringImpl::find((WTF::StringImpl *)result, v73, a5, a6, a7);
                if (result)
                {
                  v19 = v67;
                }
                else
                {
                  v66 = *(_QWORD *)v12;
                  if (*(_QWORD *)v12)
                    v66 = *(unsigned int *)(v66 + 4);
                  v19 = v67;
                  if (v67 < v66)
                  {
                    result = std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL const&,void>((uint64_t)v71, v12 + 8, v44, v45, v46, v47, v48, v49);
                    if (*(_QWORD *)v12)
                      v19 = *(unsigned int *)(*(_QWORD *)v12 + 4);
                    else
                      v19 = 0;
                  }
                }
              }
            }
          }
        }
        v26 = v12 + 48;
        v12 = v14;
        if (v26 != v14)
        {
          v12 = v26;
          while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
          {
            v12 += 48;
            if (v12 == v14)
            {
              v12 = v14;
              break;
            }
          }
        }
      }
      while (v12 != v11);
      if (!v72)
        goto LABEL_11;
      if (!v71[0])
        break;
      WTF::String::substring((WTF::String *)this, v19, 0x7FFFFFFFu, (uint64_t *)&v70);
      if (v72)
      {
        WTF::URL::URL((uint64_t)&v68, (uint64_t)v71, &v70, 0, v27, v28, v29, v30);
        if ((v69 & 1) == 0)
          goto LABEL_40;
        if (v72)
        {
          if (v71[0])
          {
            v42 = *(_QWORD *)(v71[0] + 8);
            v43 = *(unsigned int *)(v71[0] + 4) | ((unint64_t)((*(_DWORD *)(v71[0] + 16) >> 2) & 1) << 32);
          }
          else
          {
            v42 = 0;
            v43 = 0x100000000;
          }
          if (v68)
          {
            if ((WTF::StringImpl::startsWith((uint64_t)v68, v42, (void *)v43, v31) & 1) != 0)
              goto LABEL_56;
LABEL_40:
            std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected<WTF::ASCIILiteral>(a1, (uint64_t)"specifier is blocked", 21);
          }
          else
          {
            if ((_DWORD)v43)
              goto LABEL_40;
LABEL_56:
            std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected(a1, (uint64_t *)&v68);
          }
          v39 = v68;
          v68 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          v40 = v70;
          v70 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
            {
              WTF::StringImpl::~StringImpl(v40, v32, v33, v34, v35, v36, v37, v38);
              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
            }
            else
            {
              *(_DWORD *)v40 -= 2;
            }
          }
          return std::optional<WTF::URL>::~optional((uint64_t)v71, v32, v33, v34, v35, v36, v37, v38);
        }
        __break(1u);
      }
      result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_76:
      v12 = v14;
    }
    std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected<WTF::ASCIILiteral>(a1, (uint64_t)"specifier is blocked", 21);
    return std::optional<WTF::URL>::~optional((uint64_t)v71, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_11:
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected<WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int *v6;

  if (a3)
  {
    v4 = a3 - 1;
    if (a3 == 1)
    {
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v6 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v6 = 2;
      v6[1] = v4;
      *((_QWORD *)v6 + 1) = a2;
      v6[4] = 4;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 40) = 1;
  return a1;
}

uint64_t std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL const&,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD **)a2;
  if (*(_BYTE *)(a1 + 40))
  {
    if (v10)
      *v10 += 2;
    v11 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    v12 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v12;
  }
  else
  {
    if (v10)
      *v10 += 2;
    *(_QWORD *)a1 = v10;
    v13 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

double std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String>::expected(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t std::optional<WTF::URL>::~optional(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
  {
    v9 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  return a1;
}

void JSC::ImportMap::resolve(JSC::ImportMap *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl **a3@<X2>, StringView a4@<X4:X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t *v15;
  int v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  StringView v19;
  double v20;
  double v21;
  float v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v62;
  _BOOL4 v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unsigned int v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  StringView v86;
  StringView v87;

  v12 = *a2;
  if (*a2)
  {
    v13 = *((unsigned int *)v12 + 1);
    v14 = *((_DWORD *)v12 + 4);
    if ((_DWORD)v13)
    {
      v15 = (int8x16_t *)*((_QWORD *)v12 + 1);
      if ((v14 & 4) != 0)
        v16 = v15->u8[0];
      else
        v16 = v15->u16[0];
      if (v16 == 47)
        goto LABEL_11;
    }
    else
    {
      v15 = (int8x16_t *)*((_QWORD *)v12 + 1);
    }
    v86.m_characters = (void *)(v13 | ((unint64_t)((v14 >> 2) & 1) << 32));
    *(_QWORD *)&v86.m_length = "./";
    a4.m_characters = (void *)0x100000002;
    if ((WTF::startsWith(v15, v86, a4) & 1) != 0
      || (v17 = *a2) != 0
      && (LODWORD(v87.m_characters) = *((_DWORD *)v17 + 1),
          HIDWORD(v87.m_characters) = (*((_DWORD *)v17 + 4) >> 2) & 1,
          *(_QWORD *)&v87.m_length = "../",
          a4.m_characters = (void *)0x100000003,
          WTF::startsWith(*((int8x16_t **)v17 + 1), v87, a4)))
    {
LABEL_11:
      WTF::URL::URL((uint64_t)&v81, (uint64_t)a3, a2, 0, *(uint64_t *)&a4.m_length, a5, a6, a7);
      goto LABEL_12;
    }
  }
  WTF::URL::URL((uint64_t)&v81, a2, 0, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
LABEL_12:
  if ((v82 & 1) != 0)
    v23 = &v81;
  else
    v23 = a2;
  v24 = *v23;
  if (v24)
    *(_DWORD *)v24 += 2;
  v80 = v24;
  v25 = *((unsigned int *)this + 7);
  if ((_DWORD)v25)
  {
    v52 = (uint64_t *)(*((_QWORD *)this + 2) + 40);
    v53 = 48 * v25;
    while (1)
    {
      v54 = *(v52 - 5);
      v55 = *a3;
      if ((const WTF::StringImpl *)v54 != *a3)
      {
        if (v54)
          v56 = v55 == 0;
        else
          v56 = 1;
        if (v56)
          goto LABEL_41;
        if (!WTF::equal((WTF *)v54, v55, v18))
          break;
      }
LABEL_46:
      JSC::ImportMap::resolveImportMatch((uint64_t)&v76, &v80, (WTF::URL *)&v81, v52, v20, v21, v22);
      v62 = v79;
      if (v79)
      {
        v63 = 0;
        *(_QWORD *)(a8 + 32) = 0;
        v20 = 0.0;
        *(_OWORD *)a8 = 0u;
        *(_OWORD *)(a8 + 16) = 0u;
      }
      else
      {
        v20 = WTF::URL::URL(a8, (uint64_t *)&v76);
        v63 = *(_QWORD *)a8 == 0;
        if (!*(_QWORD *)a8)
          JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition((WTF::StringImpl **)a8, v26, (uint64_t)v18, (uint64_t)v19.m_characters, *(uint64_t *)&v19.m_length, v27, v28, v29);
        v62 = v79;
      }
      if (v62 != 0xFFFFFFFFLL)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E359AC40[v62])(&v73, &v76);
      if (!v63)
        goto LABEL_24;
LABEL_51:
      v52 += 6;
      v53 -= 48;
      if (!v53)
        goto LABEL_18;
    }
    v54 = *(v52 - 5);
LABEL_41:
    if (!v54)
      goto LABEL_51;
    v57 = *(unsigned int *)(v54 + 4);
    if (!(_DWORD)v57)
      goto LABEL_51;
    v58 = (v57 - 1);
    v59 = *(_DWORD *)(v54 + 16);
    v60 = *(_QWORD *)(v54 + 8);
    v72 = (v59 & 4) != 0 ? *(unsigned __int8 *)(v60 + v58) : *(unsigned __int16 *)(v60 + 2 * v58);
    if (v72 != 47
      || !*a3
      || !WTF::StringImpl::startsWith((uint64_t)*a3, v60, (void *)(v57 | ((unint64_t)((v59 >> 2) & 1) << 32)), v19))
    {
      goto LABEL_51;
    }
    goto LABEL_46;
  }
LABEL_18:
  JSC::ImportMap::resolveImportMatch((uint64_t)&v76, &v80, (WTF::URL *)&v81, (uint64_t *)this + 1, v20, v21, v22);
  v30 = v79;
  if (v79)
  {
LABEL_64:
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    goto LABEL_22;
  }
  v31 = v76;
  v76 = 0;
  v73 = v31;
  v74 = v77;
  v75 = v78;
  LODWORD(v77) = v77 & 0xFFFFFFFE;
  if (!v31)
  {
    v32 = v82;
    if ((v82 & 1) != 0)
    {
      v30 = 0;
      v33 = v81;
      v81 = 0;
      *(_QWORD *)a8 = v33;
      *(_DWORD *)(a8 + 8) = v32;
      *(_OWORD *)(a8 + 12) = v83;
      *(_QWORD *)(a8 + 28) = v84;
      *(_DWORD *)(a8 + 36) = v85;
      v82 = v32 & 0xFFFFFFFE;
      goto LABEL_22;
    }
    v30 = 0;
    goto LABEL_64;
  }
  WTF::URL::URL(a8, (uint64_t *)&v73);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v26, (uint64_t)v18, (uint64_t)v19.m_characters, *(uint64_t *)&v19.m_length, v27, v28, v29);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      v30 = v79;
    }
    else
    {
      v30 = 0;
      *(_DWORD *)v73 -= 2;
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_22:
  if (v30 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E359AC40[v30])(&v73, &v76);
LABEL_24:
  v34 = v80;
  v80 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v26, (uint64_t)v18, (uint64_t)v19.m_characters, *(uint64_t *)&v19.m_length, v27, v28, v29);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = v81;
  v81 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v26, (uint64_t)v18, (uint64_t)v19.m_characters, *(uint64_t *)&v19.m_length, v27, v28, v29);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
}

uint64_t JSC::parseURLLikeModuleSpecifier(JSC *this, WTF::StringImpl **a2, const WTF::URL *a3, StringView a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  WTF::StringImpl *v9;
  unsigned __int8 *v11;
  int v12;

  v9 = *a2;
  if (*a2
    && (*((_DWORD *)v9 + 1)
     && ((v11 = (unsigned __int8 *)*((_QWORD *)v9 + 1), (*((_BYTE *)v9 + 16) & 4) != 0)
       ? (v12 = *v11)
       : (v12 = *(unsigned __int16 *)v11),
         v12 == 47)
     || (WTF::StringImpl::startsWith((uint64_t)v9, (uint64_t)"./", (void *)0x100000002, a4) & 1) != 0
     || *a2 && WTF::StringImpl::startsWith((uint64_t)*a2, (uint64_t)"../", (void *)0x100000003, a4)))
  {
    return WTF::URL::URL((uint64_t)this, (uint64_t)a3, a2, 0, *(uint64_t *)&a4.m_length, a5, a6, a7);
  }
  else
  {
    return WTF::URL::URL((uint64_t)this, a2, 0, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
  }
}

double WTF::URL::URL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  return result;
}

void JSC::ImportMap::registerImportMap(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::URL *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  const char *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  const WTF::StringImpl *v13;
  StringView v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  const WTF::StringImpl *v26;
  StringView v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int i;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int j;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  WTF::AtomStringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::AtomStringImpl *v70;
  const WTF::String *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  const WTF::StringImpl *v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  int k;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::URL *v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  char *v137;
  WTF::StringImpl *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  int v165;
  BOOL v166;
  int v167;
  _BOOL4 v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  WTF *v215;
  _OWORD *v216;
  int v217;
  _OWORD *v218;
  _BOOL4 v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  __int128 v222;
  WTF::StringImpl *v223;
  uint64_t v224;
  int v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int8x16_t *v282;
  unint64_t v283;
  WTF::StringImpl *v284;
  uint64_t v285;
  void *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  void *v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int8x16_t *v304;
  unint64_t v305;
  int v306;
  int v307;
  WTF::StringImpl **v308;
  unsigned int v309;
  unint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  WTF::StringImpl **v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  unint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  WTF::AtomStringImpl *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  WTF::StringImpl *v341;
  WTF::StringImpl **v342;
  uint64_t v343;
  WTF::StringImpl **v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  unint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  WTF::StringImpl **v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  WTF::StringImpl **v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  unint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  WTF::StringImpl *v417;
  const WTF::StringImpl **v418;
  uint64_t v419;
  WTF::StringImpl *v420;
  uint64_t v421;
  WTF::StringImpl *v422;
  _BYTE v423[32];
  uint64_t v424;
  WTF::StringImpl *v425;
  __int128 v426;
  __int128 v427;
  WTF::AtomStringImpl *v428;
  uint64_t v429;
  WTF *v430;
  int8x16x2_t v431;
  int8x16x2_t v432;
  int8x16x2_t v433;
  int8x16x2_t v434;

  v9 = *(const char **)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(unsigned int *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    v9 = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)v9 + 24))(v9);
    v18 = v12;
    if (v12 <= v10)
    {
      v12 = 0x100000000;
      v9 = "";
    }
    else
    {
      v19 = v11 - v10;
      if ((int)v12 - (int)v10 > (v11 - v10) || (v19 = v12 - v10, (_DWORD)v10))
      {
        v12 = v19;
        v20 = v18 - v10;
        if ((v18 & 0xFF00000000) != 0)
        {
          if (v20 >= v12)
          {
            v9 += v10;
            v12 |= 0x100000000uLL;
            goto LABEL_11;
          }
LABEL_367:
          __break(1u);
          goto LABEL_368;
        }
        if (v20 < v12)
          goto LABEL_367;
        v9 += 2 * v10;
      }
    }
  }
  else
  {
    v12 = 0x100000000;
  }
LABEL_11:
  WTF::JSONImpl::Value::parseJSON((uint64_t)v9, v12, (uint64_t *)&v430);
  v10 = (unint64_t)v430;
  if (!v430)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1A00000002;
    v23 = "ImportMap has invalid JSON";
    goto LABEL_15;
  }
  v21 = *((_DWORD *)v430 + 1);
  if (v21 < 5)
  {
LABEL_13:
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1600000002;
    v23 = "ImportMap is not a map";
LABEL_15:
    *(_QWORD *)(v22 + 8) = v23;
    *(_DWORD *)(v22 + 16) = 4;
    *(_QWORD *)a5 = v22;
    *(_BYTE *)(a5 + 8) = 1;
    goto LABEL_16;
  }
  if (v21 != 5)
  {
    if (v21 != 6)
    {
      __break(0xC471u);
      goto LABEL_428;
    }
    goto LABEL_13;
  }
  ++*(_DWORD *)v430;
  v24 = WTF::fastCompactMalloc((WTF *)0x20);
  v31 = (const WTF::StringImpl *)v24;
  *(_QWORD *)v24 = 0x700000002;
  *(_QWORD *)(v24 + 8) = "imports";
  *(_DWORD *)(v24 + 16) = 4;
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    v33 = *(_DWORD *)(v32 - 8);
    v34 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v24);
    for (i = 0; ; v34 = i + v36)
    {
      v36 = v34 & v33;
      v37 = *(WTF **)(v32 + 16 * v36);
      if (v37 != (WTF *)-1)
      {
        if (!v37)
        {
          v38 = *(_QWORD *)(v10 + 16);
          if (!v38)
            goto LABEL_36;
          v39 = *(unsigned int *)(v38 - 4);
          v40 = v38 + 16 * v39;
          goto LABEL_34;
        }
        if (WTF::equal(v37, v31, v26))
          break;
      }
      ++i;
    }
    v40 = v32 + 16 * v36;
    v38 = *(_QWORD *)(v10 + 16);
    if (!v38)
      goto LABEL_35;
    v39 = *(unsigned int *)(v38 - 4);
LABEL_34:
    if (v40 == v38 + 16 * v39)
      goto LABEL_36;
LABEL_35:
    v41 = *(_QWORD *)(v40 + 8);
    ++*(_DWORD *)v41;
  }
  else
  {
LABEL_36:
    v41 = 0;
  }
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v25, (uint64_t)v26, (uint64_t)v27.m_characters, *(uint64_t *)&v27.m_length, v28, v29, v30);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    if (v41)
      goto LABEL_39;
LABEL_46:
    v420 = 0;
    goto LABEL_47;
  }
  *(_DWORD *)v31 -= 2;
  if (!v41)
    goto LABEL_46;
LABEL_39:
  v42 = *(_DWORD *)(v41 + 4);
  if (v42 < 5)
  {
LABEL_40:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x1400000002;
    *(_QWORD *)(v43 + 8) = "imports is not a map";
    *(_DWORD *)(v43 + 16) = 4;
    *(_QWORD *)a5 = v43;
    *(_BYTE *)(a5 + 8) = 1;
    if (*(_DWORD *)v41 == 1)
      WTF::JSONImpl::Value::operator delete((WTF *)v41, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    else
      --*(_DWORD *)v41;
    goto LABEL_360;
  }
  if (v42 != 5)
  {
    if (v42 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x198943E88);
    }
    goto LABEL_40;
  }
  ++*(_DWORD *)v41;
  v27.m_characters = a4;
  JSC::sortAndNormalizeSpecifierMap((uint64_t *)&v422, *(WTF::String **)(v41 + 16), a3, v27, v28, v29, v30);
  v420 = v422;
  v79 = *(_DWORD *)v41 - 1;
  if (*(_DWORD *)v41 == 1)
  {
    WTF::JSONImpl::Value::operator delete((WTF *)v41, v72, v73, v74, v75, v76, v77, v78);
    v79 = *(_DWORD *)v41;
  }
  else
  {
    *(_DWORD *)v41 = v79;
  }
  v80 = v79 - 1;
  if (v80)
    *(_DWORD *)v41 = v80;
  else
    WTF::JSONImpl::Value::operator delete((WTF *)v41, v72, v73, v74, v75, v76, v77, v78);
LABEL_47:
  v428 = 0;
  v429 = 0;
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  v53 = (const WTF::StringImpl *)v52;
  *(_QWORD *)v52 = 0x600000002;
  *(_QWORD *)(v52 + 8) = "scopes";
  *(_DWORD *)(v52 + 16) = 4;
  v54 = *(_QWORD *)(v10 + 16);
  if (v54)
  {
    v55 = *(_DWORD *)(v54 - 8);
    v56 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v52);
    for (j = 0; ; v56 = j + v58)
    {
      v58 = v56 & v55;
      v59 = *(WTF **)(v54 + 16 * v58);
      if (v59 != (WTF *)-1)
      {
        if (!v59)
        {
          v60 = *(_QWORD *)(v10 + 16);
          if (!v60)
            goto LABEL_59;
          v61 = *(unsigned int *)(v60 - 4);
          v62 = v60 + 16 * v61;
          goto LABEL_57;
        }
        if (WTF::equal(v59, v53, v13))
          break;
      }
      ++j;
    }
    v62 = v54 + 16 * v58;
    v60 = *(_QWORD *)(v10 + 16);
    if (!v60)
      goto LABEL_58;
    v61 = *(unsigned int *)(v60 - 4);
LABEL_57:
    if (v62 == v60 + 16 * v61)
      goto LABEL_59;
LABEL_58:
    v63 = *(_QWORD *)(v62 + 8);
    ++*(_DWORD *)v63;
  }
  else
  {
LABEL_59:
    v63 = 0;
  }
  if (*(_DWORD *)v53 == 2)
  {
    WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
  }
  else
  {
    *(_DWORD *)v53 -= 2;
  }
  v419 = a1;
  if (!v63)
  {
    v70 = 0;
    v67 = 0;
LABEL_69:
    v71 = 0;
    goto LABEL_82;
  }
  v64 = *(_DWORD *)(v63 + 4);
  if (v64 < 5)
  {
LABEL_64:
    v65 = WTF::fastCompactMalloc((WTF *)0x20);
    v66 = 0;
    v67 = 0;
    *(_QWORD *)v65 = 0x1300000002;
    *(_QWORD *)(v65 + 8) = "scopes is not a map";
    *(_DWORD *)(v65 + 16) = 4;
    *(_QWORD *)a5 = v65;
    v68 = 1;
    *(_BYTE *)(a5 + 8) = 1;
    goto LABEL_65;
  }
  if (v64 != 5)
  {
    if (v64 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x198944068);
    }
    goto LABEL_64;
  }
  ++*(_DWORD *)v63;
  v112 = *(_QWORD *)(v63 + 16);
  if (v112)
  {
    v113 = *(unsigned int *)(v112 - 4);
    v114 = v112 + 16 * v113;
    if (*(_DWORD *)(v112 - 12))
    {
      v115 = *(_QWORD *)(v63 + 16);
      if ((_DWORD)v113)
      {
        v116 = 16 * v113;
        v115 = *(_QWORD *)(v63 + 16);
        while ((unint64_t)(*(_QWORD *)v115 + 1) <= 1)
        {
          v115 += 16;
          v116 -= 16;
          if (!v116)
          {
            v115 = v114;
            goto LABEL_127;
          }
        }
      }
      goto LABEL_127;
    }
    v115 = v112 + 16 * v113;
  }
  else
  {
    v115 = 0;
    v113 = 0;
  }
  v114 = v112 + 16 * v113;
LABEL_127:
  if (v112)
    v123 = v112 + 16 * *(unsigned int *)(v112 - 4);
  else
    v123 = 0;
  if (v123 == v115)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    goto LABEL_206;
  }
  v124 = a3;
  v67 = 0;
  v66 = 0;
  v416 = v114;
  v125 = &v424;
  v414 = v123;
  while (1)
  {
    v126 = *(_QWORD *)(v115 + 8);
    v127 = *(_DWORD *)(v126 + 4);
    if (v127 != 5)
      break;
    ++*(_DWORD *)v126;
    WTF::URL::URL((uint64_t)&v425, (uint64_t)v124, (WTF::StringImpl **)v115, 0, *(uint64_t *)&v14.m_length, v15, v16, v17);
    if ((v426 & 1) == 0)
    {
      if (!a4)
        goto LABEL_146;
      v164 = *(WTF::StringImpl **)v115;
      if (*(_QWORD *)v115)
      {
        v165 = *((_DWORD *)v164 + 1);
        *(_DWORD *)v164 += 2;
        if (v165 < 0)
          goto LABEL_426;
      }
      else
      {
        v165 = 0;
      }
      v166 = __OFADD__(v165, 17);
      v167 = v165 + 17;
      if (v166 || __OFADD__(v167, 9))
      {
LABEL_426:
        v422 = 0;
LABEL_427:
        __break(0xC471u);
LABEL_428:
        JUMPOUT(0x198943D24);
      }
      v168 = !v164 || (*((_BYTE *)v164 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v167 + 9), v168, (int8x16_t *)"scope key", 9u, (uint64_t)v164, (int8x16_t *)" was not parsable", 0x11u, (int **)&v422);
      if (!v422)
        goto LABEL_427;
      (*(void (**)(void *, WTF::StringImpl **))(*(_QWORD *)a4 + 16))(a4, &v422);
      v169 = v422;
      v422 = 0;
      if (!v169)
        goto LABEL_176;
      if (*(_DWORD *)v169 == 2)
      {
        WTF::StringImpl::~StringImpl(v169, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
        if (!v164)
          goto LABEL_146;
      }
      else
      {
        *(_DWORD *)v169 -= 2;
LABEL_176:
        if (!v164)
          goto LABEL_146;
      }
      if (*(_DWORD *)v164 == 2)
      {
        WTF::StringImpl::~StringImpl(v164, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
      }
      else
      {
        *(_DWORD *)v164 -= 2;
      }
      goto LABEL_146;
    }
    v128 = v425;
    if (v425)
      *(_DWORD *)v425 += 2;
    v422 = v128;
    *(_OWORD *)v423 = v426;
    *(_OWORD *)&v423[16] = v427;
    v14.m_characters = a4;
    JSC::sortAndNormalizeSpecifierMap(&v424, *(WTF::String **)(v126 + 16), v124, v14, v15, v16, v17);
    if (v66 == (_DWORD)v429)
    {
      v129 = WTF::Vector<JSC::ImportMap::ScopeEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v428, v66 + 1, (unint64_t)&v422);
      v67 = v428;
      v130 = (char *)v428 + 48 * HIDWORD(v429);
      v131 = *(_QWORD *)v129;
      *(_QWORD *)v129 = 0;
      *(_QWORD *)v130 = v131;
      v132 = *((_DWORD *)v130 + 2) & 0xFFFFFFFE | *((_DWORD *)v129 + 2) & 1;
      *((_DWORD *)v130 + 2) = v132;
      v133 = v132 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v129 + 2) >> 1) & 1));
      *((_DWORD *)v130 + 2) = v133;
      v134 = v133 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v129 + 2) >> 2) & 1));
      *((_DWORD *)v130 + 2) = v134;
      v135 = v134 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v129 + 2) >> 3) & 7));
      *((_DWORD *)v130 + 2) = v135;
      *((_DWORD *)v130 + 2) = *((_DWORD *)v129 + 2) & 0xFFFFFFC0 | v135 & 0x3F;
      *(_OWORD *)(v130 + 12) = *(_OWORD *)(v129 + 12);
      *(_QWORD *)(v130 + 28) = *(_QWORD *)(v129 + 28);
      *((_DWORD *)v130 + 9) = *((_DWORD *)v129 + 9);
      *((_DWORD *)v129 + 2) &= ~1u;
      v136 = (uint64_t *)(v130 + 40);
      v125 = (uint64_t *)(v129 + 40);
    }
    else
    {
      v137 = (char *)v67 + 48 * v66;
      v138 = v422;
      v422 = 0;
      *(_QWORD *)v137 = v138;
      v139 = *((_DWORD *)v137 + 2) & 0xFFFFFFFE | v423[0] & 1;
      *((_DWORD *)v137 + 2) = v139;
      v140 = v139 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v423 >> 1) & 1));
      *((_DWORD *)v137 + 2) = v140;
      v141 = v140 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v423 >> 2) & 1));
      *((_DWORD *)v137 + 2) = v141;
      v142 = v141 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v423 >> 3) & 7));
      *((_DWORD *)v137 + 2) = v142;
      *((_DWORD *)v137 + 2) = *(_DWORD *)v423 & 0xFFFFFFC0 | v142 & 0x3F;
      *(_OWORD *)(v137 + 12) = *(_OWORD *)&v423[4];
      *(_QWORD *)(v137 + 28) = *(_QWORD *)&v423[20];
      *((_DWORD *)v137 + 9) = *(_DWORD *)&v423[28];
      *(_DWORD *)v423 &= ~1u;
      v136 = (uint64_t *)(v137 + 40);
    }
    *v136 = 0;
    v143 = *v125;
    *v125 = 0;
    *v136 = v143;
    v66 = ++HIDWORD(v429);
    v144 = v424;
    if (v424)
    {
      v411 = *(unsigned int *)(v424 - 4);
      if ((_DWORD)v411)
      {
        v412 = v424;
        do
        {
          if (*(_QWORD *)v412 != -1)
          {
            v170 = *(WTF::StringImpl **)v412;
            v171 = *(WTF::StringImpl **)(v412 + 8);
            *(_QWORD *)(v412 + 8) = 0;
            if (v171)
            {
              if (*(_DWORD *)v171 == 2)
              {
                WTF::StringImpl::~StringImpl(v171, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
                WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
                v170 = *(WTF::StringImpl **)v412;
              }
              else
              {
                *(_DWORD *)v171 -= 2;
              }
            }
            *(_QWORD *)v412 = 0;
            if (v170)
            {
              if (*(_DWORD *)v170 == 2)
              {
                WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
                WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
              }
              else
              {
                *(_DWORD *)v170 -= 2;
              }
            }
          }
          v412 += 48;
          --v411;
        }
        while (v411);
      }
      WTF::fastFree(v144 - 16, (void *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    }
    v145 = v422;
    v422 = 0;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
      {
        WTF::StringImpl::~StringImpl(v145, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
      }
      else
      {
        *(_DWORD *)v145 -= 2;
      }
    }
    if (*(_DWORD *)v126 == 1)
      WTF::JSONImpl::Value::operator delete((WTF *)v126, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    else
      --*(_DWORD *)v126;
    v126 = 0;
LABEL_146:
    v146 = v425;
    v425 = 0;
    if (!v146)
      goto LABEL_149;
    if (*(_DWORD *)v146 != 2)
    {
      *(_DWORD *)v146 -= 2;
LABEL_149:
      if (v126)
        goto LABEL_150;
      goto LABEL_152;
    }
    WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    if (v126)
    {
LABEL_150:
      if (*(_DWORD *)v126 == 1)
        WTF::JSONImpl::Value::operator delete((WTF *)v126, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      else
        --*(_DWORD *)v126;
    }
LABEL_152:
    v147 = v115 + 16;
    v115 = v416;
    v125 = &v424;
    if (v147 != v416)
    {
      v115 = v147;
      while ((unint64_t)(*(_QWORD *)v115 + 1) <= 1)
      {
        v115 += 16;
        if (v115 == v416)
        {
          v115 = v416;
          break;
        }
      }
    }
    if (v115 == v414)
    {
      v68 = 0;
      goto LABEL_204;
    }
  }
  if (v127 > 6 || v127 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1989452D8);
  }
  v205 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v205 = 0x1A00000002;
  *(_QWORD *)(v205 + 8) = "scopes' value is not a map";
  *(_DWORD *)(v205 + 16) = 4;
  *(_QWORD *)a5 = v205;
  v68 = 1;
  *(_BYTE *)(a5 + 8) = 1;
LABEL_204:
  a3 = v124;
LABEL_206:
  if (*(_DWORD *)v63 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v63, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
  else
    --*(_DWORD *)v63;
LABEL_65:
  if (*(_DWORD *)v63 == 1)
  {
    WTF::JSONImpl::Value::operator delete((WTF *)v63, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    if (!v68)
      goto LABEL_80;
LABEL_67:
    v69 = v420;
    goto LABEL_357;
  }
  --*(_DWORD *)v63;
  if (v68)
    goto LABEL_67;
LABEL_80:
  v70 = (WTF::AtomStringImpl *)((char *)v67 + 48 * v66);
  if (!v66)
  {
    a1 = v419;
    goto LABEL_69;
  }
  v71 = (const WTF::String *)(126 - 2 * __clz(v66));
  a1 = v419;
LABEL_82:
  std::__introsort<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,false>((uint64_t)v67, v70, v71, 1, *(uint64_t *)&v14.m_length, v15, v16, v17);
  v421 = 0;
  v425 = 0;
  *(_QWORD *)&v426 = 0;
  DWORD2(v426) = 0;
  BYTE12(v426) = 1;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  v91 = (const WTF::StringImpl *)v89;
  *(_QWORD *)v89 = 0x900000002;
  *(_QWORD *)(v89 + 8) = "integrity";
  *(_DWORD *)(v89 + 16) = 4;
  v92 = *(_QWORD *)(v10 + 16);
  if (v92)
  {
    v93 = *(_DWORD *)(v92 - 8);
    v94 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v89);
    for (k = 0; ; v94 = k + v96)
    {
      v96 = v94 & v93;
      v97 = *(WTF **)(v92 + 16 * v96);
      if (v97 != (WTF *)-1)
      {
        if (!v97)
        {
          v98 = *(_QWORD *)(v10 + 16);
          if (!v98)
            goto LABEL_94;
          v99 = *(unsigned int *)(v98 - 4);
          v100 = v98 + 16 * v99;
          goto LABEL_92;
        }
        if (WTF::equal(v97, v91, v13))
          break;
      }
      ++k;
    }
    v100 = v92 + 16 * v96;
    v98 = *(_QWORD *)(v10 + 16);
    if (!v98)
      goto LABEL_93;
    v99 = *(unsigned int *)(v98 - 4);
LABEL_92:
    if (v100 == v98 + 16 * v99)
      goto LABEL_94;
LABEL_93:
    v101 = *(_QWORD *)(v100 + 8);
    ++*(_DWORD *)v101;
  }
  else
  {
LABEL_94:
    v101 = 0;
  }
  if (*(_DWORD *)v91 == 2)
  {
    WTF::StringImpl::~StringImpl(v91, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    if (!v101)
      goto LABEL_339;
LABEL_97:
    v102 = *(_DWORD *)(v101 + 4);
    if (v102 < 5)
      goto LABEL_98;
    if (v102 != 5)
    {
      if (v102 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198944218);
      }
LABEL_98:
      v103 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v103 = 0x1600000002;
      *(_QWORD *)(v103 + 8) = "integrity is not a map";
      *(_DWORD *)(v103 + 16) = 4;
      *(_QWORD *)a5 = v103;
      *(_BYTE *)(a5 + 8) = 1;
      if (*(_DWORD *)v101 == 1)
        WTF::JSONImpl::Value::operator delete((WTF *)v101, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      else
        --*(_DWORD *)v101;
      v69 = v420;
      goto LABEL_350;
    }
    v418 = (const WTF::StringImpl **)a3;
    v117 = *(_DWORD *)v101 + 1;
    *(_DWORD *)v101 = v117;
    v118 = *(_QWORD *)(v101 + 16);
    if (v118)
    {
      v119 = *(unsigned int *)(v118 - 4);
      v120 = v118 + 16 * v119;
      if (*(_DWORD *)(v118 - 12))
      {
        v121 = *(_QWORD *)(v101 + 16);
        if ((_DWORD)v119)
        {
          v122 = 16 * v119;
          v121 = *(_QWORD *)(v101 + 16);
          while ((unint64_t)(*(_QWORD *)v121 + 1) <= 1)
          {
            v121 += 16;
            v122 -= 16;
            if (!v122)
            {
              v121 = v120;
              goto LABEL_212;
            }
          }
        }
        goto LABEL_212;
      }
      v121 = v118 + 16 * v119;
    }
    else
    {
      v121 = 0;
      v119 = 0;
    }
    v120 = v118 + 16 * v119;
LABEL_212:
    if (v118)
      v206 = v118 + 16 * *(unsigned int *)(v118 - 4);
    else
      v206 = 0;
    if (v206 == v121)
    {
LABEL_335:
      v306 = v117 - 1;
      if (v306)
      {
        *(_DWORD *)v101 = v306;
      }
      else
      {
        WTF::JSONImpl::Value::operator delete((WTF *)v101, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        v306 = *(_DWORD *)v101;
      }
      v307 = v306 - 1;
      if (v307)
        *(_DWORD *)v101 = v307;
      else
        WTF::JSONImpl::Value::operator delete((WTF *)v101, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      goto LABEL_339;
    }
    v413 = v206;
    v415 = v101;
    while (1)
    {
      JSC::ImportMap::resolve((JSC::ImportMap *)a1, (WTF::StringImpl **)v121, v418, v14, v15, v16, v17, (uint64_t)&v422);
      if (!v422)
      {
        if ((DWORD2(v426) & 0x80000000) == 0)
        {
          v284 = (WTF::StringImpl *)v426;
          if (((_QWORD)v426 || (v284 = v425) != 0) && (*((_BYTE *)v284 + 16) & 4) == 0)
          {
            v285 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v425, (WTF::AtomStringImpl *)(DWORD2(v426) + 14), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            if (v285)
            {
              *(_OWORD *)v285 = xmmword_199157A00;
              *(_QWORD *)(v285 + 16) = 0x52005500200079;
              *(_DWORD *)(v285 + 24) = 2097228;
            }
          }
          else
          {
            v286 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v425, (WTF::AtomStringImpl *)(DWORD2(v426) + 14), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            if (v286)
              qmemcpy(v286, "Integrity URL ", 14);
          }
        }
        v287 = *(WTF::StringImpl **)v121;
        if (!DWORD2(v426) && !(_QWORD)v426)
        {
          if (v287)
            *(_DWORD *)v287 += 2;
          v288 = v425;
          v425 = v287;
          if (v288)
          {
            if (*(_DWORD *)v288 == 2)
            {
              WTF::StringImpl::~StringImpl(v288, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
            }
            else
            {
              *(_DWORD *)v288 -= 2;
            }
          }
          v289 = *(WTF::StringImpl **)v121;
          if (*(_QWORD *)v121)
            LODWORD(v289) = *((_DWORD *)v289 + 1);
          DWORD2(v426) = (_DWORD)v289;
          goto LABEL_318;
        }
        if (v287)
        {
          v304 = (int8x16_t *)*((_QWORD *)v287 + 1);
          v305 = *((unsigned int *)v287 + 1);
          if ((*((_BYTE *)v287 + 16) & 4) != 0)
            goto LABEL_331;
          WTF::StringBuilder::append((uint64_t)&v425, v304, v305, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        }
        else
        {
          v304 = 0;
          v305 = 0;
LABEL_331:
          WTF::StringBuilder::append((uint64_t)&v425, v304, v305, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
        }
        LODWORD(v289) = DWORD2(v426);
LABEL_318:
        a1 = v419;
        v206 = v413;
        v101 = v415;
        if ((v289 & 0x80000000) == 0)
        {
          v290 = (WTF::StringImpl *)v426;
          if (((_QWORD)v426 || (v290 = v425) != 0) && (*((_BYTE *)v290 + 16) & 4) == 0)
          {
            v291 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v425, (WTF::AtomStringImpl *)((_DWORD)v289 + 81), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            a1 = v419;
            v206 = v413;
            v101 = v415;
            if (v291)
            {
              v431.val[0] = *(int8x16_t *)" is not a valid absolute URL nor a relative URL starting with '/', './' or '../'\n";
              v432.val[0] = *(int8x16_t *)" a relative URL starting with '/', './' or '../'\n";
              v434.val[1] = 0u;
              v434.val[0] = *(int8x16_t *)"starting with '/', './' or '../'\n";
              v432.val[1] = 0u;
              v433.val[0] = *(int8x16_t *)"absolute URL nor a relative URL starting with '/', './' or '../'\n";
              v431.val[1] = 0u;
              v292 = (char *)v291;
              vst2q_s8(v292, v431);
              v292 += 32;
              v433.val[1] = 0u;
              vst2q_s8(v292, v433);
              v293 = (char *)(v291 + 64);
              vst2q_s8(v293, v432);
              v294 = (char *)(v291 + 96);
              vst2q_s8(v294, v434);
              *(_OWORD *)(v291 + 128) = xmmword_199157A40;
              *(_OWORD *)(v291 + 144) = xmmword_199157A50;
              *(_WORD *)(v291 + 160) = 10;
            }
          }
          else
          {
            v295 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v425, (WTF::AtomStringImpl *)((_DWORD)v289 + 81), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            a1 = v419;
            v206 = v413;
            v101 = v415;
            if (v295)
              qmemcpy(v295, " is not a valid absolute URL nor a relative URL starting with '/', './' or '../'\n", 81);
          }
        }
        goto LABEL_279;
      }
      v207 = *(_QWORD *)(v121 + 8);
      if (*(_DWORD *)(v207 + 4) == 4)
      {
        v208 = *(WTF::StringImpl **)(v207 + 8);
        if (v208)
        {
          *(_DWORD *)v208 += 2;
          v209 = v421;
          if (v421
            || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WTF::String>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WTF::String,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(&v421, 8uLL, 0, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17), (v209 = v421) != 0))
          {
            v210 = *(_DWORD *)(v209 - 8);
          }
          else
          {
            v210 = 0;
          }
          v211 = *((_DWORD *)v422 + 4);
          v417 = v208;
          if (v211 < 0x100)
            v212 = WTF::StringImpl::hashSlowCase(v422);
          else
            v212 = v211 >> 8;
          v213 = v212 & v210;
          v214 = v209 + 48 * v213;
          v215 = *(WTF **)v214;
          if (*(_QWORD *)v214)
          {
            v216 = 0;
            v217 = 1;
            while (1)
            {
              v218 = (_OWORD *)v214;
              if (v215 != (WTF *)-1)
              {
                v219 = WTF::equal(v215, v422, v13);
                v218 = v216;
                if (v219)
                  break;
              }
              v213 = ((_DWORD)v213 + v217) & v210;
              v214 = v209 + 48 * v213;
              v215 = *(WTF **)v214;
              ++v217;
              v216 = v218;
              if (!*(_QWORD *)v214)
              {
                v206 = v413;
                v101 = v415;
                if (v218)
                {
                  v218[1] = 0u;
                  v218[2] = 0u;
                  *v218 = 0u;
                  --*(_DWORD *)(v209 - 16);
                  v214 = (uint64_t)v218;
                }
                goto LABEL_232;
              }
            }
            v238 = v209 + 48 * v213;
            v221 = v417;
            *(_DWORD *)v417 += 2;
            v239 = *(WTF::StringImpl **)(v238 + 40);
            *(_QWORD *)(v238 + 40) = v417;
            a1 = v419;
            v206 = v413;
            v101 = v415;
            if (v239)
            {
              if (*(_DWORD *)v239 == 2)
              {
                WTF::StringImpl::~StringImpl(v239, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
                WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
              }
              else
              {
                *(_DWORD *)v239 -= 2;
              }
            }
            goto LABEL_277;
          }
LABEL_232:
          v220 = v422;
          a1 = v419;
          v221 = v417;
          if (v422)
            *(_DWORD *)v422 += 2;
          *(_QWORD *)v214 = v220;
          v222 = *(_OWORD *)v423;
          *(_OWORD *)(v214 + 24) = *(_OWORD *)&v423[16];
          *(_OWORD *)(v214 + 8) = v222;
          *(_DWORD *)v417 += 2;
          v223 = *(WTF::StringImpl **)(v214 + 40);
          *(_QWORD *)(v214 + 40) = v417;
          if (v223)
          {
            if (*(_DWORD *)v223 == 2)
            {
              WTF::StringImpl::~StringImpl(v223, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
            }
            else
            {
              *(_DWORD *)v223 -= 2;
            }
          }
          v224 = v421;
          if (v421)
            v225 = *(_DWORD *)(v421 - 12) + 1;
          else
            v225 = 1;
          *(_DWORD *)(v421 - 12) = v225;
          v235 = (*(_DWORD *)(v224 - 16) + v225);
          v236 = *(unsigned int *)(v224 - 4);
          if (v236 > 0x400)
          {
            if (v236 <= 2 * v235)
            {
LABEL_268:
              v237 = ((_DWORD)v236 << (6 * v225 >= (2 * v236)));
              goto LABEL_276;
            }
          }
          else if (3 * v236 <= 4 * v235)
          {
            if ((_DWORD)v236)
              goto LABEL_268;
            v237 = 8;
LABEL_276:
            WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WTF::String>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WTF::String,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(&v421, v237, v214, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          }
LABEL_277:
          if (*(_DWORD *)v221 == 2)
          {
            WTF::StringImpl::~StringImpl(v221, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
          }
          else
          {
            *(_DWORD *)v221 -= 2;
          }
          goto LABEL_279;
        }
      }
      if ((DWORD2(v426) & 0x80000000) == 0)
      {
        v226 = (WTF::StringImpl *)v426;
        if (((_QWORD)v426 || (v226 = v425) != 0) && (*((_BYTE *)v226 + 16) & 4) == 0)
        {
          v227 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v425, (WTF::AtomStringImpl *)(DWORD2(v426) + 19), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          if (v227)
          {
            *(_OWORD *)v227 = xmmword_199157A00;
            *(_OWORD *)(v227 + 16) = xmmword_199157A10;
            *(_DWORD *)(v227 + 32) = 6684783;
            *(_WORD *)(v227 + 36) = 32;
          }
        }
        else
        {
          v228 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v425, (WTF::AtomStringImpl *)(DWORD2(v426) + 19), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          if (v228)
          {
            *(_DWORD *)(v228 + 15) = 543584032;
            *(_OWORD *)v228 = *(_OWORD *)"Integrity value of ";
          }
        }
      }
      v229 = *(WTF::StringImpl **)v121;
      if (!DWORD2(v426) && !(_QWORD)v426)
      {
        if (v229)
          *(_DWORD *)v229 += 2;
        v230 = v425;
        v425 = v229;
        if (v230)
        {
          if (*(_DWORD *)v230 == 2)
          {
            WTF::StringImpl::~StringImpl(v230, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
            WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
          }
          else
          {
            *(_DWORD *)v230 -= 2;
          }
        }
        v231 = *(WTF::StringImpl **)v121;
        if (*(_QWORD *)v121)
          LODWORD(v231) = *((_DWORD *)v231 + 1);
        DWORD2(v426) = (_DWORD)v231;
        if ((v231 & 0x80000000) != 0)
          goto LABEL_279;
LABEL_257:
        v232 = (WTF::StringImpl *)v426;
        if (((_QWORD)v426 || (v232 = v425) != 0) && (*((_BYTE *)v232 + 16) & 4) == 0)
        {
          v233 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v425, (WTF::AtomStringImpl *)((_DWORD)v231 + 17), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          if (v233)
          {
            *(_OWORD *)v233 = xmmword_199157A20;
            *(_OWORD *)(v233 + 16) = xmmword_199157A30;
            *(_WORD *)(v233 + 32) = 10;
          }
        }
        else
        {
          v234 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v425, (WTF::AtomStringImpl *)((_DWORD)v231 + 17), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          if (v234)
          {
            *(_BYTE *)(v234 + 16) = 10;
            *(_OWORD *)v234 = *(_OWORD *)" is not a string\n";
          }
        }
        goto LABEL_279;
      }
      if (!v229)
        break;
      v282 = (int8x16_t *)*((_QWORD *)v229 + 1);
      v283 = *((unsigned int *)v229 + 1);
      if ((*((_BYTE *)v229 + 16) & 4) != 0)
        goto LABEL_297;
      WTF::StringBuilder::append((uint64_t)&v425, v282, v283, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
LABEL_298:
      LODWORD(v231) = DWORD2(v426);
      a1 = v419;
      v206 = v413;
      v101 = v415;
      if ((DWORD2(v426) & 0x80000000) == 0)
        goto LABEL_257;
LABEL_279:
      v248 = v422;
      v422 = 0;
      if (v248)
      {
        if (*(_DWORD *)v248 == 2)
        {
          WTF::StringImpl::~StringImpl(v248, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
          WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
        }
        else
        {
          *(_DWORD *)v248 -= 2;
        }
      }
      v249 = v121 + 16;
      v121 = v120;
      if (v249 != v120)
      {
        v121 = v249;
        while ((unint64_t)(*(_QWORD *)v121 + 1) <= 1)
        {
          v121 += 16;
          if (v121 == v120)
          {
            v121 = v120;
            break;
          }
        }
      }
      if (v121 == v206)
      {
        v117 = *(_DWORD *)v101;
        goto LABEL_335;
      }
    }
    v282 = 0;
    v283 = 0;
LABEL_297:
    WTF::StringBuilder::append((uint64_t)&v425, v282, v283, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    goto LABEL_298;
  }
  *(_DWORD *)v91 -= 2;
  if (v101)
    goto LABEL_97;
LABEL_339:
  v308 = *(WTF::StringImpl ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v420;
  if (v308)
  {
    v371 = *((unsigned int *)v308 - 1);
    if ((_DWORD)v371)
    {
      v372 = v308;
      do
      {
        v373 = *v372;
        if (*v372 != (WTF::StringImpl *)-1)
        {
          v374 = v372[1];
          v372[1] = 0;
          if (v374)
          {
            if (*(_DWORD *)v374 == 2)
            {
              WTF::StringImpl::~StringImpl(v374, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v375, v376, v377, v378, v379, v380, v381, v382);
              v373 = *v372;
            }
            else
            {
              *(_DWORD *)v374 -= 2;
            }
          }
          *v372 = 0;
          if (v373)
          {
            if (*(_DWORD *)v373 == 2)
            {
              WTF::StringImpl::~StringImpl(v373, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
            }
            else
            {
              *(_DWORD *)v373 -= 2;
            }
          }
        }
        v372 += 6;
        --v371;
      }
      while (v371);
    }
    WTF::fastFree((unint64_t)(v308 - 2), v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    a1 = v419;
  }
  v309 = *(_DWORD *)(a1 + 28);
  if (v309)
    WTF::VectorDestructor<true,JSC::ImportMap::ScopeEntry>::destruct(*(WTF::AtomStringImpl **)(a1 + 16), (WTF::AtomStringImpl *)(*(_QWORD *)(a1 + 16) + 48 * v309), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
  v310 = *(_QWORD *)(a1 + 16);
  if (v310)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v310, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
  }
  *(_QWORD *)(a1 + 16) = v428;
  v311 = v429;
  v312 = HIDWORD(v429);
  v428 = 0;
  v429 = 0;
  *(_DWORD *)(a1 + 24) = v311;
  *(_DWORD *)(a1 + 28) = v312;
  v313 = v421;
  v421 = 0;
  v314 = *(WTF::StringImpl ***)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v313;
  if (v314)
  {
    v391 = *((unsigned int *)v314 - 1);
    if ((_DWORD)v391)
    {
      v392 = v314;
      do
      {
        v393 = *v392;
        if (*v392 != (WTF::StringImpl *)-1)
        {
          v394 = v392[5];
          v392[5] = 0;
          if (v394)
          {
            if (*(_DWORD *)v394 == 2)
            {
              WTF::StringImpl::~StringImpl(v394, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v395, v396, v397, v398, v399, v400, v401, v402);
              v393 = *v392;
            }
            else
            {
              *(_DWORD *)v394 -= 2;
            }
          }
          *v392 = 0;
          if (v393)
          {
            if (*(_DWORD *)v393 == 2)
            {
              WTF::StringImpl::~StringImpl(v393, v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
              WTF::fastFree(v403, v404, v405, v406, v407, v408, v409, v410);
            }
            else
            {
              *(_DWORD *)v393 -= 2;
            }
          }
        }
        v392 += 6;
        --v391;
      }
      while (v391);
    }
    WTF::fastFree((unint64_t)(v314 - 2), v90, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
  }
  v12 = DWORD2(v426);
  if (DWORD2(v426))
  {
    v315 = v425;
    if (v425)
      goto LABEL_347;
LABEL_368:
    if ((v12 & 0x80000000) == 0 && (_QWORD)v426 && *(_DWORD *)(v426 + 4) > v12 + (v12 >> 2))
    {
      if ((*(_BYTE *)(v426 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v425, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v425, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      v341 = v425;
      v425 = (WTF::StringImpl *)v426;
      *(_QWORD *)&v426 = 0;
      if (v341)
      {
        if (*(_DWORD *)v341 == 2)
        {
          WTF::StringImpl::~StringImpl(v341, v334, v335, v336, v337, v338, v339, v340);
          WTF::fastFree(v363, v364, v365, v366, v367, v368, v369, v370);
        }
        else
        {
          *(_DWORD *)v341 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v425);
    v315 = v425;
    if (v425)
LABEL_347:
      *(_DWORD *)v315 += 2;
    v69 = 0;
    *(_QWORD *)a5 = v315;
    *(_BYTE *)(a5 + 8) = 1;
  }
  else
  {
    v69 = 0;
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 0;
  }
LABEL_350:
  v316 = (WTF::StringImpl *)v426;
  *(_QWORD *)&v426 = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
    {
      WTF::StringImpl::~StringImpl(v316, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      WTF::fastFree(v318, v319, v320, v321, v322, v323, v324, v325);
    }
    else
    {
      *(_DWORD *)v316 -= 2;
    }
  }
  v317 = v425;
  v425 = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
    {
      WTF::StringImpl::~StringImpl(v317, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
      WTF::fastFree(v326, v327, v328, v329, v330, v331, v332, v333);
    }
    else
    {
      *(_DWORD *)v317 -= 2;
    }
  }
  v67 = v428;
  v66 = HIDWORD(v429);
LABEL_357:
  if (v66)
  {
    WTF::VectorDestructor<true,JSC::ImportMap::ScopeEntry>::destruct(v67, (WTF::AtomStringImpl *)((char *)v67 + 48 * v66), (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    v67 = v428;
    if (v428)
      goto LABEL_378;
LABEL_359:
    if (v69)
    {
LABEL_379:
      v342 = (WTF::StringImpl **)v69;
      v343 = *((unsigned int *)v69 - 1);
      if ((_DWORD)v343)
      {
        v344 = v342;
        do
        {
          v345 = *v344;
          if (*v344 != (WTF::StringImpl *)-1)
          {
            v346 = v344[1];
            v344[1] = 0;
            if (v346)
            {
              if (*(_DWORD *)v346 == 2)
              {
                WTF::StringImpl::~StringImpl(v346, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
                WTF::fastFree(v347, v348, v349, v350, v351, v352, v353, v354);
                v345 = *v344;
              }
              else
              {
                *(_DWORD *)v346 -= 2;
              }
            }
            *v344 = 0;
            if (v345)
            {
              if (*(_DWORD *)v345 == 2)
              {
                WTF::StringImpl::~StringImpl(v345, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
                WTF::fastFree(v355, v356, v357, v358, v359, v360, v361, v362);
              }
              else
              {
                *(_DWORD *)v345 -= 2;
              }
            }
          }
          v344 += 6;
          --v343;
        }
        while (v343);
      }
      WTF::fastFree((unint64_t)(v342 - 2), (void *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    }
  }
  else
  {
    if (!v67)
      goto LABEL_359;
LABEL_378:
    v428 = 0;
    LODWORD(v429) = 0;
    WTF::fastFree((unint64_t)v67, (void *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    if (v69)
      goto LABEL_379;
  }
LABEL_360:
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
  else
    --*(_DWORD *)v10;
LABEL_16:
  if (v430)
  {
    if (*(_DWORD *)v430 == 1)
      WTF::JSONImpl::Value::operator delete(v430, (WTF::AtomStringImpl *)v12, (uint64_t)v13, (uint64_t)v14.m_characters, *(uint64_t *)&v14.m_length, v15, v16, v17);
    else
      --*(_DWORD *)v430;
  }
}

void JSC::sortAndNormalizeSpecifierMap(uint64_t *a1, WTF::String *a2, WTF::URL *a3, StringView a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *m_characters;
  uint64_t v10;
  WTF::String *v11;
  WTF::String *v12;
  uint64_t v13;
  WTF::String *v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::String *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  char v74;
  int v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _WORD *v79;
  int8x16_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int16 v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  int8x16_t v145;
  int8x16_t v146;
  char *v147;
  char *v148;
  char *v149;
  WTF::StringImpl *v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _WORD *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167[3];
  WTF::StringImpl *v168[2];
  __int128 v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  _OWORD v174[2];
  uint64_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;

  m_characters = a4.m_characters;
  *a1 = 0;
  if (a2)
  {
    v10 = *((unsigned int *)a2 - 1);
    v11 = (WTF::String *)((char *)a2 + 16 * v10);
    if (*((_DWORD *)a2 - 3))
    {
      v12 = a2;
      if ((_DWORD)v10)
      {
        v13 = 16 * v10;
        v12 = a2;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 = (WTF::String *)((char *)v12 + 16);
          v13 -= 16;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v12 = (WTF::String *)((char *)a2 + 16 * v10);
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = (WTF::String *)((char *)a2 + 16 * v10);
  if (a2)
  {
LABEL_8:
    v14 = (WTF::String *)((char *)a2 + 16 * *((unsigned int *)a2 - 1));
    goto LABEL_13;
  }
  v14 = 0;
LABEL_13:
  if (v14 != v12)
  {
    while (1)
    {
      if (!*(_QWORD *)v12 || !*(_DWORD *)(*(_QWORD *)v12 + 4))
      {
        if (!m_characters)
          goto LABEL_19;
        v15 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v15 = 0x1600000002;
        *(_QWORD *)(v15 + 8) = "specifier key is empty";
        *(_DWORD *)(v15 + 16) = 4;
        *(_QWORD *)&v174[0] = v15;
        (*(void (**)(void *, _OWORD *))(*(_QWORD *)m_characters + 16))(m_characters, v174);
        v18 = *(WTF::StringImpl **)&v174[0];
        *(_QWORD *)&v174[0] = 0;
        if (!v18)
          goto LABEL_19;
        goto LABEL_17;
      }
      JSC::parseURLLikeModuleSpecifier((JSC *)v174, (WTF::StringImpl **)v12, a3, a4, a5, a6, a7);
      if ((BYTE8(v174[0]) & 1) != 0)
        break;
      v30 = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
        goto LABEL_32;
LABEL_33:
      v31 = *(WTF::StringImpl **)&v174[0];
      v173 = v30;
      *(_QWORD *)&v174[0] = 0;
      if (!v31)
        goto LABEL_36;
      if (*(_DWORD *)v31 != 2)
      {
        *(_DWORD *)v31 -= 2;
LABEL_36:
        if (v30)
          goto LABEL_37;
        goto LABEL_19;
      }
      WTF::StringImpl::~StringImpl(v31, v28, v29, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      if (v30)
      {
LABEL_37:
        v32 = *((_QWORD *)v12 + 1);
        if (*(_DWORD *)(v32 + 4) != 4 || (v33 = *(WTF::StringImpl **)(v32 + 8)) == 0)
        {
          v172 = 0;
          if (m_characters)
          {
            v44 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v44 = 0x2B00000002;
            *(_QWORD *)(v44 + 8) = "value in specifier map needs to be a string";
            *(_DWORD *)(v44 + 16) = 4;
            *(_QWORD *)&v174[0] = v44;
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)m_characters + 16))(m_characters, v174);
            v47 = *(WTF::StringImpl **)&v174[0];
            *(_QWORD *)&v174[0] = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::~StringImpl(v47, v45, v46, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              }
              else
              {
                *(_DWORD *)v47 -= 2;
              }
            }
          }
          v175 = 0;
          memset(v174, 0, sizeof(v174));
          WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::add<WTF::URL>((uint64_t)v168, a1, &v173, (uint64_t *)v174, *(uint64_t *)&a4.m_length, a5, a6, a7);
          v48 = *(WTF::StringImpl **)&v174[0];
          if (*(_QWORD *)&v174[0])
            goto LABEL_86;
          goto LABEL_88;
        }
        *(_DWORD *)v33 += 2;
        v172 = v33;
        JSC::parseURLLikeModuleSpecifier((JSC *)v174, &v172, a3, a4, a5, a6, a7);
        if ((BYTE8(v174[0]) & 1) != 0)
        {
          v38 = *(WTF::StringImpl **)v12;
          if (!*(_QWORD *)v12
            || (v39 = *((_DWORD *)v38 + 1)) == 0
            || ((v40 = (v39 - 1), v41 = *((_DWORD *)v38 + 4), v42 = *((_QWORD *)v38 + 1), (v41 & 4) != 0)
              ? (v43 = *(unsigned __int8 *)(v42 + v40))
              : (v43 = *(unsigned __int16 *)(v42 + 2 * v40)),
                v43 != 47))
          {
LABEL_84:
            WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::add<WTF::URL>((uint64_t)v168, a1, &v173, (uint64_t *)v174, v34, v35, v36, v37);
            goto LABEL_85;
          }
          v57 = *(WTF::StringImpl **)&v174[0];
          if (!*(_QWORD *)&v174[0])
          {
            if (m_characters)
            {
              v70 = 0;
              *(_DWORD *)v38 += 2;
              if (v39 < 0)
                goto LABEL_140;
              goto LABEL_61;
            }
            goto LABEL_106;
          }
          v58 = *(_DWORD *)(*(_QWORD *)&v174[0] + 4);
          if (v58)
          {
            v59 = (v58 - 1);
            v60 = *(_QWORD *)(*(_QWORD *)&v174[0] + 8);
            v61 = (*(_BYTE *)(*(_QWORD *)&v174[0] + 16) & 4) != 0
                ? *(unsigned __int8 *)(v60 + v59)
                : *(unsigned __int16 *)(v60 + 2 * v59);
            if (v61 == 47)
              goto LABEL_84;
          }
          if (!m_characters)
            goto LABEL_106;
          **(_DWORD **)&v174[0] += 2;
          *(_DWORD *)v38 += 2;
          v70 = *((_DWORD *)v57 + 1);
          if (v39 < 0)
            goto LABEL_140;
LABEL_61:
          v71 = __OFADD__(v39, 14);
          v72 = v39 + 14;
          if (v71
            || ((v71 = __OFADD__(v72, 33), v73 = v72 + 33, !v71) ? (v74 = 0) : (v74 = 1),
                v70 < 0
             || (v74 & 1) != 0
             || (v71 = __OFADD__(v70, v73), v75 = v70 + v73, v71)
             || (v76 = (v75 + 8), __OFADD__(v75, 8))))
          {
LABEL_140:
            v167[0] = 0;
            __break(0xC471u);
            goto LABEL_143;
          }
          v166 = v57;
          if (v57)
            v41 &= *((_DWORD *)v57 + 4);
          if ((v41 & 4) == 0)
          {
            if (v75 != -8)
            {
              if (v76 > 0x7FFFFFEF)
                goto LABEL_140;
              WTF::tryFastCompactMalloc((WTF *)(2 * v76 + 20), v168);
              v77 = v166;
              v78 = v168[0];
              if (!v168[0])
                goto LABEL_140;
              *(_DWORD *)v168[0] = 2;
              *((_DWORD *)v78 + 1) = v76;
              *(_OWORD *)((char *)v78 + 20) = xmmword_199157A60;
              *((_QWORD *)v78 + 1) = (char *)v78 + 20;
              *((_DWORD *)v78 + 4) = 0;
              v79 = (_WORD *)((char *)v78 + 36);
              v165 = v78;
              if (v166)
              {
                v80 = (int8x16_t *)*((_QWORD *)v166 + 1);
                v81 = *((unsigned int *)v166 + 1);
                if ((*((_BYTE *)v166 + 16) & 4) != 0)
                {
                  if (v81 >= 0x40)
                  {
                    v116 = (char *)&v79[v81 & 0xFFFFFFC0];
                    v144 = (char *)v78 + 36;
                    do
                    {
                      v176.val[0] = *v80;
                      v145 = v80[1];
                      v177.val[0] = v80[2];
                      v146 = v80[3];
                      v80 += 4;
                      v179.val[1] = 0u;
                      v179.val[0] = v146;
                      v177.val[1] = 0u;
                      v178.val[0] = v145;
                      v176.val[1] = 0u;
                      v147 = v144;
                      vst2q_s8(v147, v176);
                      v147 += 32;
                      v178.val[1] = 0u;
                      vst2q_s8(v147, v178);
                      v148 = v144 + 64;
                      vst2q_s8(v148, v177);
                      v149 = v144 + 96;
                      vst2q_s8(v149, v179);
                      v144 += 128;
                    }
                    while (v144 != v116);
                  }
                  else
                  {
                    v116 = (char *)v78 + 36;
                  }
                  v117 = (char *)&v79[v81];
                  while (v116 != v117)
                  {
                    v118 = v80->u8[0];
                    v80 = (int8x16_t *)((char *)v80 + 1);
                    *(_WORD *)v116 = v118;
                    v116 += 2;
                  }
                }
                else if ((_DWORD)v81 == 1)
                {
                  *v79 = v80->i16[0];
                }
                else if ((_DWORD)v81)
                {
                  v164 = (_WORD *)((char *)v78 + 36);
                  memcpy((char *)v78 + 36, v80, 2 * v81);
                  v79 = v164;
                  v77 = v166;
                }
                v82 = *((unsigned int *)v77 + 1);
              }
              else
              {
                v82 = 0;
              }
              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v79[v82], (int8x16_t *)" does not end with '/' while key ", 33, (uint64_t)v38, (int8x16_t *)" ends with '/'", 14);
              v83 = v165;
              goto LABEL_99;
            }
LABEL_136:
            v83 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_99;
          }
          if (v75 == -8)
            goto LABEL_136;
          if ((v76 & 0x80000000) != 0)
            goto LABEL_140;
          WTF::tryFastCompactMalloc((WTF *)(v76 + 20), v168);
          v101 = v168[0];
          if (!v168[0])
            goto LABEL_140;
          *(_DWORD *)v168[0] = 2;
          *((_DWORD *)v101 + 1) = v76;
          *(_QWORD *)((char *)v101 + 20) = 0x2073736572646461;
          *((_QWORD *)v101 + 1) = (char *)v101 + 20;
          *((_DWORD *)v101 + 4) = 4;
          v102 = v101;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v101 + 28, (uint64_t)v166, " does not end with '/' while key ", 0x21u, (uint64_t)v38, " ends with '/'", 0xEu);
          v83 = v102;
LABEL_99:
          v167[0] = v83;
          (*(void (**)(void *, WTF::StringImpl **))(*(_QWORD *)m_characters + 16))(m_characters, v167);
          v106 = v167[0];
          v167[0] = 0;
          v107 = v166;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
            {
              WTF::StringImpl::~StringImpl(v106, v103, v104, v105, v34, v35, v36, v37);
              WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
              v107 = v166;
            }
            else
            {
              *(_DWORD *)v106 -= 2;
            }
          }
          if (*(_DWORD *)v38 != 2)
          {
            *(_DWORD *)v38 -= 2;
            if (v107)
              goto LABEL_104;
LABEL_106:
            v170 = 0;
            *(_OWORD *)v168 = 0u;
            v169 = 0u;
            WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::add<WTF::URL>((uint64_t)v167, a1, &v173, (uint64_t *)v168, v34, v35, v36, v37);
            if (v168[0])
            {
              if (*(_DWORD *)v168[0] == 2)
              {
                WTF::StringImpl::~StringImpl(v168[0], v16, v17, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
              }
              else
              {
                *(_DWORD *)v168[0] -= 2;
              }
            }
LABEL_85:
            v48 = *(WTF::StringImpl **)&v174[0];
            *(_QWORD *)&v174[0] = 0;
            if (v48)
            {
LABEL_86:
              if (*(_DWORD *)v48 == 2)
              {
                WTF::StringImpl::~StringImpl(v48, v16, v17, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
              }
              else
              {
                *(_DWORD *)v48 -= 2;
              }
            }
LABEL_88:
            v84 = v172;
            v172 = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
              {
                WTF::StringImpl::~StringImpl(v84, v16, v17, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
              }
              else
              {
                *(_DWORD *)v84 -= 2;
              }
            }
            v18 = v173;
            if (!v173)
              goto LABEL_19;
LABEL_17:
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, v16, v17, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
            goto LABEL_19;
          }
          WTF::StringImpl::~StringImpl(v38, v103, v104, v105, v34, v35, v36, v37);
          WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
          v107 = v166;
          if (!v166)
            goto LABEL_106;
LABEL_104:
          if (*(_DWORD *)v107 != 2)
          {
            *(_DWORD *)v107 -= 2;
            goto LABEL_106;
          }
          v135 = v107;
          WTF::StringImpl::~StringImpl(v107, v103, v104, v105, v34, v35, v36, v37);
          v143 = (unint64_t)v135;
        }
        else
        {
          if (!m_characters)
            goto LABEL_106;
          v150 = v172;
          if (v172)
            *(_DWORD *)v172 += 2;
          v171 = v150;
          v168[0] = (WTF::StringImpl *)"value in specifier map cannot be parsed as URL ";
          v168[1] = (WTF::StringImpl *)48;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v168, (uint64_t *)&v171, (int **)v167);
          if (!v167[0])
          {
            __break(0xC471u);
LABEL_143:
            JUMPOUT(0x198945A8CLL);
          }
          (*(void (**)(void *, WTF::StringImpl **))(*(_QWORD *)m_characters + 16))(m_characters, v167);
          v154 = v167[0];
          v167[0] = 0;
          if (v154)
          {
            if (*(_DWORD *)v154 == 2)
            {
              WTF::StringImpl::~StringImpl(v154, v151, v152, v153, v34, v35, v36, v37);
              WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
            }
            else
            {
              *(_DWORD *)v154 -= 2;
            }
          }
          v155 = v171;
          v171 = 0;
          if (!v155)
            goto LABEL_106;
          if (*(_DWORD *)v155 != 2)
          {
            *(_DWORD *)v155 -= 2;
            goto LABEL_106;
          }
          WTF::StringImpl::~StringImpl(v155, v151, v152, v153, v34, v35, v36, v37);
        }
        WTF::fastFree(v143, v136, v137, v138, v139, v140, v141, v142);
        goto LABEL_106;
      }
LABEL_19:
      v19 = (WTF::String *)((char *)v12 + 16);
      v12 = v11;
      if (v19 != v11)
      {
        v12 = v19;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 = (WTF::String *)((char *)v12 + 16);
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
      if (v12 == v14)
        return;
    }
    v30 = *(WTF::StringImpl **)&v174[0];
    if (!*(_QWORD *)&v174[0])
      goto LABEL_19;
LABEL_32:
    *(_DWORD *)v30 += 2;
    goto LABEL_33;
  }
}

uint64_t JSC::ImportMap::integrityForURL@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int i;
  unsigned int v12;

  v5 = *(_QWORD *)(this + 32);
  if (v5)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      this = *(_QWORD *)(v5 + 48 * (v10 & v8));
      if (this != -1)
      {
        if (!this)
          goto LABEL_2;
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v6 = *(_DWORD **)(v5 + 48 * v12 + 40);
    if (v6)
      *v6 += 2;
  }
  else
  {
LABEL_2:
    v6 = 0;
  }
  *a4 = v6;
  return this;
}

uint64_t JSC::leastUpperBoundOfIndexingTypes(uint64_t this, unsigned int a2)
{
  if (this <= a2)
    return a2;
  else
    return this;
}

unint64_t JSC::IndirectEvalExecutable::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v12;
  int v13;
  char v14;
  _QWORD *v15;
  unint64_t SlowCase;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  SourceProvider *var0;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  size_t v43;
  int *v44;
  _BYTE *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  size_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  JSC::Heap **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  JSC::Exception *v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t (*v86)(WTF::StringImpl **);
  WTF::StringImpl **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  __int16 v101;
  SourceCode v102;

  v10 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 3169))
  {
    v12 = a5;
    v13 = a4;
    v14 = a3;
    v15 = *(_QWORD **)(v10 + 41056);
    if (!v15)
      v15 = (_QWORD *)JSC::GCClient::Heap::evalExecutableSpaceSlow((JSC::Heap **)(v10 + 37552));
    SlowCase = v15[3];
    if (SlowCase >= v15[4])
    {
      SlowCase = v15[5];
      if ((SlowCase & 1) != 0)
      {
        v88 = (uint64_t)v15;
        JSC::sanitizeStackForVM((JSC *)v10, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v88, v10 + 192, 112, 0, 0, v89, v90, v91);
        goto LABEL_6;
      }
      v85 = *(_QWORD *)(SlowCase + 8) ^ v15[6];
      v15[4] = SlowCase + HIDWORD(v85);
      v15[5] = SlowCase + (int)v85;
    }
    v15[3] = SlowCase + 112;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    JSC::ScriptExecutable::ScriptExecutable(SlowCase, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41576), *(_QWORD *)(a1 + 56), (uint64_t *)a2, 0, v14, v13, 0, v12, 0);
    *(_QWORD *)(SlowCase + 72) = 0;
    *(_QWORD *)(SlowCase + 80) = 0;
    *(_QWORD *)(SlowCase + 88) = -1;
    *(_BYTE *)(SlowCase + 96) &= 0xFCu;
    *(_QWORD *)(SlowCase + 104) = 0;
    if (*(_BYTE *)(v10 + 755))
      __dmb(0xAu);
    LOBYTE(v17) = 0;
    LODWORD(v92) = 0x100000;
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
    v96 = -1;
    v97 = -1;
    v98 = -1;
    v99 = 0;
    v100 = -1;
    v101 = 0;
    v18 = *(_QWORD *)(a1 + 2016);
    if (v18)
      v17 = (*(unsigned __int16 *)(v18 + 48) >> 6) & 1;
    if (byte_1ECF4C274)
      LOBYTE(v17) = 1;
    if (byte_1ECF4C275)
      LOBYTE(v17) = 1;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93168))
      LOBYTE(v17) = v17 | 2;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93280))
      v19 = v17 | 4;
    else
      v19 = v17;
    v20 = (_QWORD *)(SlowCase + 40);
    v28 = JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedEvalCodeBlock,JSC::IndirectEvalExecutable>(*(_QWORD *)(v10 + 93136), v10, SlowCase, SlowCase + 40, 0, 0, v19, (uint64_t)&v92, v12);
    v29 = *(_QWORD *)(a1 + 2016);
    if (v29)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v29 + 16))(v29, a1, *v20, v100, &v99);
    if ((_BYTE)v101)
    {
      v30 = *v20;
      if (*v20)
        ++*(_DWORD *)(v30 + 8);
      v102.var0.var0 = (SourceProvider *)v30;
      *(_OWORD *)&v102.var1 = *(_OWORD *)(SlowCase + 48);
      *a6 = JSC::ParserError::toErrorObject(&v92, (JSC::JSGlobalObject *)a1, &v102, 0xFFFFFFFFLL, v24, v25, v26, v27);
      var0 = v102.var0.var0;
      v102.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 2) == 1)
          (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
        else
          --*((_DWORD *)var0 + 2);
      }
      SlowCase = 0;
    }
    else
    {
      *(_QWORD *)(SlowCase + 80) = v28;
      if (v28 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
    }
    v46 = v99;
    v99 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return SlowCase;
  }
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 3280) + 112);
  if (*(_QWORD *)a2)
  {
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    v41 = (_BYTE *)v33;
    v42 = v34;
    v43 = v34;
    if ((v34 & 0xFF00000000) != 0)
    {
      if (v33)
      {
        if ((_DWORD)v34)
        {
          if (!((unint64_t)v34 >> 31))
          {
            v44 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
            v45 = v44 + 5;
            *v44 = 2;
            v44[1] = v42;
            *((_QWORD *)v44 + 1) = v44 + 5;
            v44[4] = 4;
            if (v43 == 1)
            {
              *v45 = *v41;
              goto LABEL_52;
            }
            v55 = v41;
            v56 = v43;
LABEL_51:
            memcpy(v45, v55, v56);
LABEL_52:
            v92 = (WTF::StringImpl *)v44;
            v57 = JSC::jsNontrivialString(v10, (JSC::VM *)&v92, v35, v36, v37, v38, v39, v40);
            v32(a1, v57);
            v65 = v92;
            v92 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
              {
                WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v65 -= 2;
              }
            }
            goto LABEL_55;
          }
          goto LABEL_70;
        }
        goto LABEL_48;
      }
    }
    else if (v33)
    {
      if ((_DWORD)v34)
      {
        if (v34 < 0x7FFFFFF0uLL)
        {
          v44 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v34 + 20));
          v45 = v44 + 5;
          *v44 = 2;
          v44[1] = v42;
          *((_QWORD *)v44 + 1) = v44 + 5;
          v44[4] = 0;
          if (v43 == 1)
          {
            *(_WORD *)v45 = *(_WORD *)v41;
            goto LABEL_52;
          }
          v55 = v41;
          v56 = 2 * v43;
          goto LABEL_51;
        }
LABEL_70:
        __break(0xC471u);
        JUMPOUT(0x1989460ACLL);
      }
LABEL_48:
      v44 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_52;
    }
    v44 = 0;
    goto LABEL_52;
  }
  v32(a1, 0);
LABEL_55:
  v66 = *(_QWORD *)(a1 + 112);
  v67 = *(JSC::Heap ***)(a1 + 56);
  if ((v66 & 1) != 0)
  {
    v86 = *(uint64_t (**)(WTF::StringImpl **))(v66 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v87 = (WTF::StringImpl **)(a1 - 16);
    v92 = *v87;
    *(_QWORD *)&v93 = a1;
    *((_QWORD *)&v93 + 1) = a1 + 112;
    v66 = v86(&v92);
  }
  v68 = JSC::ErrorInstance::create(v67, v66, (WTF::StringImpl **)(a1 + 3184), 0, 0, 0, 1, 1);
  v75 = (JSC::Exception *)v68;
  if ((v68 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)))
  {
    v75 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v68, 0, v69, v70, v71, v72, v73);
  }
  JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v75, v74, v69, v70, v71, v72, v73);
  return 0;
}

unint64_t JSC::IndirectEvalExecutable::tryCreate(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  _QWORD *v14;
  unint64_t SlowCase;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  JSC::Exception *v37;
  SourceProvider *var0;
  WTF::StringImpl *v39;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  JSC::Heap **v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  JSC::Exception *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t (*v86)(WTF::StringImpl **);
  WTF::StringImpl **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  __int16 v101;
  SourceCode v102;

  v10 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 3169))
  {
    v11 = a5;
    v12 = a4;
    v13 = a3;
    v14 = *(_QWORD **)(v10 + 41056);
    if (!v14)
      v14 = (_QWORD *)JSC::GCClient::Heap::evalExecutableSpaceSlow((JSC::Heap **)(v10 + 37552));
    SlowCase = v14[3];
    if (SlowCase >= v14[4])
    {
      SlowCase = v14[5];
      if ((SlowCase & 1) != 0)
      {
        v88 = (uint64_t)v14;
        JSC::sanitizeStackForVM((JSC *)v10, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v88, v10 + 192, 112, 0, 0, v89, v90, v91);
        goto LABEL_6;
      }
      v85 = *(_QWORD *)(SlowCase + 8) ^ v14[6];
      v14[4] = SlowCase + HIDWORD(v85);
      v14[5] = SlowCase + (int)v85;
    }
    v14[3] = SlowCase + 112;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    JSC::ScriptExecutable::ScriptExecutable(SlowCase, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41576), *(_QWORD *)(a1 + 56), (uint64_t *)a2, 0, v13, v12, 0, v11, 0);
    *(_QWORD *)(SlowCase + 72) = 0;
    *(_QWORD *)(SlowCase + 80) = 0;
    *(_QWORD *)(SlowCase + 88) = -1;
    *(_BYTE *)(SlowCase + 96) &= 0xFCu;
    *(_QWORD *)(SlowCase + 104) = 0;
    if (*(_BYTE *)(v10 + 755))
      __dmb(0xAu);
    LOBYTE(v16) = 0;
    LODWORD(v92) = 0x100000;
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
    v96 = -1;
    v97 = -1;
    v98 = -1;
    v99 = 0;
    v100 = -1;
    v101 = 0;
    v17 = *(_QWORD *)(a1 + 2016);
    if (v17)
      v16 = (*(unsigned __int16 *)(v17 + 48) >> 6) & 1;
    if (byte_1ECF4C274)
      LOBYTE(v16) = 1;
    if (byte_1ECF4C275)
      LOBYTE(v16) = 1;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93168))
      LOBYTE(v16) = v16 | 2;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 93280))
      v18 = v16 | 4;
    else
      v18 = v16;
    v19 = (_QWORD *)(SlowCase + 40);
    v27 = JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedEvalCodeBlock,JSC::IndirectEvalExecutable>(*(_QWORD *)(v10 + 93136), v10, SlowCase, SlowCase + 40, 0, 0, v18, (uint64_t)&v92, v11);
    v28 = *(_QWORD *)(a1 + 2016);
    if (v28)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, a1, *v19, v100, &v99);
    if ((_BYTE)v101)
    {
      v29 = *v19;
      if (*v19)
        ++*(_DWORD *)(v29 + 8);
      v102.var0.var0 = (SourceProvider *)v29;
      *(_OWORD *)&v102.var1 = *(_OWORD *)(SlowCase + 48);
      v30 = JSC::ParserError::toErrorObject(&v92, (JSC::JSGlobalObject *)a1, &v102, 0xFFFFFFFFLL, v23, v24, v25, v26);
      v37 = (JSC::Exception *)v30;
      if ((v30 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)))
      {
        v37 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v30, 0, v31, v32, v33, v34, v35);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v37, v36, v31, v32, v33, v34, v35);
      var0 = v102.var0.var0;
      v102.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 2) == 1)
          (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
        else
          --*((_DWORD *)var0 + 2);
      }
      SlowCase = 0;
    }
    else
    {
      *(_QWORD *)(SlowCase + 80) = v27;
      if (v27 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
    }
    v39 = v99;
    v99 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    return SlowCase;
  }
  v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 3280) + 112);
  if (*(_QWORD *)a2)
  {
    v43 = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    if ((v42 & 0xFF00000000) != 0)
      WTF::String::String((uint64_t *)&v92, v43, v42);
    else
      WTF::String::String((int **)&v92, v43, v42);
    v50 = JSC::jsNontrivialString(v10, (JSC::VM *)&v92, v44, v45, v46, v47, v48, v49);
    v41(a1, v50);
    v58 = v92;
    v92 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  else
  {
    v41(a1, 0);
  }
  v59 = *(_QWORD *)(a1 + 112);
  v60 = *(JSC::Heap ***)(a1 + 56);
  if ((v59 & 1) != 0)
  {
    v86 = *(uint64_t (**)(WTF::StringImpl **))(v59 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v87 = (WTF::StringImpl **)(a1 - 16);
    v92 = *v87;
    *(_QWORD *)&v93 = a1;
    *((_QWORD *)&v93 + 1) = a1 + 112;
    v59 = v86(&v92);
  }
  v61 = JSC::ErrorInstance::create(v60, v59, (WTF::StringImpl **)(a1 + 3184), 0, 0, 0, 1, 1);
  v68 = (JSC::Exception *)v61;
  if ((v61 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v68 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v61, 0, v62, v63, v64, v65, v66);
  }
  JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v68, v67, v62, v63, v64, v65, v66);
  return 0;
}

void JSC::initialize(JSC *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&JSC::initialize(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&JSC::initialize(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>);
  }
}

void JSC::ISO8601::handleFraction(double *a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  unint64_t v18;
  _BYTE v19[9];
  _BYTE v20[7];

  memset(v19, 48, sizeof(v19));
  if ((_DWORD)a4)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      v5 = 0;
      while (v5 < 9)
      {
        v19[v5] = *(_BYTE *)(a3 + v5);
        if (a4 == ++v5)
          goto LABEL_6;
      }
    }
    else
    {
      v18 = 0;
      while (v18 < 9)
      {
        v19[v18] = *(_WORD *)(a3 + 2 * v18);
        if (a4 == ++v18)
        {
LABEL_6:
          v6 = a2;
          goto LABEL_8;
        }
      }
    }
    __break(0xC471u);
  }
  else
  {
    v6 = a2;
LABEL_8:
    v7 = 0;
    v8 = v19;
    do
    {
      v9 = *v8++;
      v7 = v9 + 10 * v7 - 48;
    }
    while (v8 != v20);
    v10 = v7 * (uint64_t)v6;
    if (v10)
    {
      if (a5 == 6)
        goto LABEL_19;
      if (a5 != 4)
        goto LABEL_32;
      v11 = 60 * v10;
      v12 = (double)(v11 / 1000000000);
      if ((unint64_t)(v11 + 999999999) < 0x773593FF)
        v12 = 0.0;
      a1[5] = v12;
      v10 = v11 % 1000000000;
      if (v10)
      {
LABEL_32:
        v13 = 60 * v10;
        v14 = (double)(v13 / 1000000000);
        if ((unint64_t)(v13 + 999999999) < 0x773593FF)
          v14 = 0.0;
        a1[6] = v14;
        v10 = v13 % 1000000000;
        if (v10)
        {
LABEL_19:
          v15 = (double)(v10 / 1000000);
          v16 = 0.0;
          if ((unint64_t)(v10 + 999999) < 0x1E847F)
            v15 = 0.0;
          v17 = v10 % 1000000;
          if ((v17 + 999) >= 0x7CF)
            v16 = (double)(v17 / 1000);
          a1[7] = v15;
          a1[8] = v16;
          a1[9] = (double)(v10 % 1000);
        }
      }
    }
  }
}

unsigned __int8 **JSC::ISO8601::parseTimeSpec<unsigned char>(unsigned __int8 **result, int a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  BOOL v27;
  unsigned __int8 *v28;
  unint64_t v29;
  _QWORD v30[2];

  v2 = (unint64_t)result[1];
  if (v2 < 2)
    goto LABEL_5;
  v3 = *result;
  v4 = **result;
  if ((v4 - 48) > 2)
    goto LABEL_5;
  *result = v3 + 1;
  result[1] = (unsigned __int8 *)(v2 - 1);
  v5 = v3[1];
  if ((v5 - 48) > 9)
    goto LABEL_5;
  v6 = v5 + 10 * v4 - 528;
  if (v6 > 0x17)
    goto LABEL_5;
  v9 = v2 - 2;
  v10 = v3 + 2;
  *result = v3 + 2;
  result[1] = (unsigned __int8 *)(v2 - 2);
  if (v2 == 2)
    goto LABEL_18;
  v11 = *v10;
  if (v11 != 58)
  {
    if ((v11 - 48) < 6)
      goto LABEL_11;
LABEL_18:
    v8 = 0;
    v7 = v6;
    return (unsigned __int8 **)(v8 | v7);
  }
  v9 = v2 - 3;
  v10 = v3 + 3;
  *result = v3 + 3;
  result[1] = (unsigned __int8 *)(v2 - 3);
LABEL_11:
  if (v9 < 2)
    goto LABEL_5;
  v12 = *v10;
  if ((v12 - 48) > 5)
    goto LABEL_5;
  *result = v10 + 1;
  result[1] = (unsigned __int8 *)(v9 - 1);
  v13 = v10[1];
  if ((v13 - 48) > 9)
    goto LABEL_5;
  v14 = v13 + 10 * v12 - 16;
  v15 = v9 - 2;
  v16 = v10 + 2;
  *result = v10 + 2;
  result[1] = (unsigned __int8 *)(v9 - 2);
  if (v9 == 2)
    goto LABEL_27;
  v17 = *v16;
  if (v11 == 58)
  {
    if (v17 == 58)
    {
      v15 = v9 - 3;
      v16 = v10 + 3;
      *result = v10 + 3;
      result[1] = (unsigned __int8 *)(v9 - 3);
      goto LABEL_22;
    }
LABEL_27:
    v8 = v14 << 8;
LABEL_28:
    v7 = v8 | v6;
    return (unsigned __int8 **)(v8 | v7);
  }
  if (v17 < 0x30)
    goto LABEL_27;
  if (a2)
  {
    if (v17 >= 0x36)
      goto LABEL_27;
  }
  else if (v17 >= 0x37)
  {
    goto LABEL_27;
  }
LABEL_22:
  if (v15 < 2)
    goto LABEL_5;
  v18 = *v16;
  if ((v18 - 48) > 5)
  {
    v7 = 0;
    if (a2)
    {
      v8 = 0;
      return (unsigned __int8 **)(v8 | v7);
    }
    v8 = 0;
    if (v18 != 54)
      return (unsigned __int8 **)(v8 | v7);
    *result = v16 + 1;
    result[1] = (unsigned __int8 *)(v15 - 1);
    if (v16[1] == 48)
    {
      v20 = 3866624;
      goto LABEL_33;
    }
LABEL_5:
    v7 = 0;
    v8 = 0;
    return (unsigned __int8 **)(v8 | v7);
  }
  *result = v16 + 1;
  result[1] = (unsigned __int8 *)(v15 - 1);
  v19 = v16[1];
  if ((v19 - 48) > 9)
    goto LABEL_5;
  v20 = (((v19 + 10 * v18) << 16) - 34603008) & 0xFF0000;
LABEL_33:
  *result = v16 + 2;
  result[1] = (unsigned __int8 *)(v15 - 2);
  if (v15 == 2 || (v16[2] | 2) != 0x2E)
  {
    v8 = v20 | (v14 << 8);
    goto LABEL_28;
  }
  v21 = v15 - 3;
  v22 = v16 + 3;
  *result = v16 + 3;
  result[1] = (unsigned __int8 *)v21;
  v23 = 9;
  if (v21 < 9)
    v23 = v21;
  if (!v23)
    goto LABEL_5;
  v24 = 0;
  while (v22[v24] - 48 <= 9)
  {
    if (v23 == ++v24)
    {
      v24 = v23;
      break;
    }
  }
  if (!v24)
    goto LABEL_5;
  v25 = 0;
  memset(v30, 48, 9);
  while ((unint64_t)result[1] > v25)
  {
    if (v25 >= 9)
      goto LABEL_53;
    *((_BYTE *)v30 + v25) = (*result)[v25];
    if (v24 == ++v25)
    {
      v26 = result[1];
      v27 = (unint64_t)v26 >= v24;
      v28 = &v26[-v24];
      if (v27)
      {
        *result += v24;
        result[1] = v28;
        v29 = v20 | ((unint64_t)((((LOBYTE(v30[1]) + 10 * (HIBYTE(v30[0]) + 10 * BYTE6(v30[0]))) << 20)
                                       - 218103808) & 0x3FF00000 | (BYTE2(v30[0])
                                                                  + 10 * (BYTE1(v30[0]) + 10 * LOBYTE(v30[0]))
                                                                  + 5936) & 0x3FF | (((BYTE5(v30[0])
                                                                                     + 10
                                                                                     * (BYTE4(v30[0])
                                                                                      + 10 * BYTE3(v30[0]))
                                                                                     - 4304) & 0x3FFu) << 10)) << 32) | (v14 << 8);
        v7 = v29 | v6;
        v8 = v29;
        return (unsigned __int8 **)(v8 | v7);
      }
      break;
    }
  }
  __break(1u);
LABEL_53:
  __break(0xC471u);
  return result;
}

unsigned __int16 **JSC::ISO8601::parseTimeSpec<char16_t>(unsigned __int16 **result, int a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  BOOL v28;
  unsigned __int16 *v29;
  unint64_t v30;
  _QWORD v31[2];

  v2 = (unint64_t)result[1];
  if (v2 < 2)
    goto LABEL_5;
  v3 = *result;
  v4 = **result;
  if ((v4 - 48) > 2)
    goto LABEL_5;
  v5 = v3[1];
  *result = v3 + 1;
  result[1] = (unsigned __int16 *)(v2 - 1);
  if ((v5 - 48) > 9)
    goto LABEL_5;
  v6 = v5 + 10 * v4 - 528;
  if (v6 > 0x17)
    goto LABEL_5;
  v9 = v2 - 2;
  v10 = v3 + 2;
  *result = v3 + 2;
  result[1] = (unsigned __int16 *)(v2 - 2);
  if (v2 == 2)
    goto LABEL_18;
  v11 = *v10;
  if (v11 != 58)
  {
    if ((v11 - 48) < 6)
      goto LABEL_11;
LABEL_18:
    v8 = 0;
    v7 = v6;
    return (unsigned __int16 **)(v8 | v7);
  }
  v9 = v2 - 3;
  v10 = v3 + 3;
  *result = v3 + 3;
  result[1] = (unsigned __int16 *)(v2 - 3);
LABEL_11:
  if (v9 < 2)
    goto LABEL_5;
  v12 = *v10;
  if ((v12 - 48) > 5)
    goto LABEL_5;
  v13 = v10[1];
  *result = v10 + 1;
  result[1] = (unsigned __int16 *)(v9 - 1);
  if ((v13 - 48) > 9)
    goto LABEL_5;
  v14 = v13 + 10 * v12 - 16;
  v15 = v9 - 2;
  v16 = v10 + 2;
  *result = v10 + 2;
  result[1] = (unsigned __int16 *)(v9 - 2);
  if (v9 == 2)
    goto LABEL_27;
  v17 = *v16;
  if (v11 == 58)
  {
    if (v17 == 58)
    {
      v15 = v9 - 3;
      v16 = v10 + 3;
      *result = v10 + 3;
      result[1] = (unsigned __int16 *)(v9 - 3);
      goto LABEL_22;
    }
LABEL_27:
    v8 = v14 << 8;
LABEL_28:
    v7 = v8 | v6;
    return (unsigned __int16 **)(v8 | v7);
  }
  if (v17 < 0x30)
    goto LABEL_27;
  if (a2)
  {
    if (v17 >= 0x36)
      goto LABEL_27;
  }
  else if (v17 >= 0x37)
  {
    goto LABEL_27;
  }
LABEL_22:
  if (v15 < 2)
    goto LABEL_5;
  v18 = *v16;
  if ((v18 - 48) > 5)
  {
    v7 = 0;
    if (a2)
    {
      v8 = 0;
      return (unsigned __int16 **)(v8 | v7);
    }
    v8 = 0;
    if (v18 != 54)
      return (unsigned __int16 **)(v8 | v7);
    v21 = v16[1];
    *result = v16 + 1;
    result[1] = (unsigned __int16 *)(v15 - 1);
    if (v21 == 48)
    {
      v20 = 3866624;
      goto LABEL_33;
    }
LABEL_5:
    v7 = 0;
    v8 = 0;
    return (unsigned __int16 **)(v8 | v7);
  }
  v19 = v16[1];
  *result = v16 + 1;
  result[1] = (unsigned __int16 *)(v15 - 1);
  if ((v19 - 48) > 9)
    goto LABEL_5;
  v20 = (((v19 + 10 * v18) << 16) + 15728640) & 0xFF0000;
LABEL_33:
  *result = v16 + 2;
  result[1] = (unsigned __int16 *)(v15 - 2);
  if (v15 == 2 || (v16[2] | 2) != 0x2E)
  {
    v8 = v20 | (v14 << 8);
    goto LABEL_28;
  }
  v22 = v15 - 3;
  v23 = v16 + 3;
  *result = v16 + 3;
  result[1] = (unsigned __int16 *)v22;
  v24 = 9;
  if (v22 < 9)
    v24 = v22;
  if (!v24)
    goto LABEL_5;
  v25 = 0;
  while (v23[v25] - 48 <= 9)
  {
    if (v24 == ++v25)
    {
      v25 = v24;
      break;
    }
  }
  if (!v25)
    goto LABEL_5;
  v26 = 0;
  memset(v31, 48, 9);
  while ((unint64_t)result[1] > v26)
  {
    if (v26 >= 9)
      goto LABEL_53;
    *((_BYTE *)v31 + v26) = (*result)[v26];
    if (v25 == ++v26)
    {
      v27 = result[1];
      v28 = (unint64_t)v27 >= v25;
      v29 = (unsigned __int16 *)((char *)v27 - v25);
      if (v28)
      {
        *result += v25;
        result[1] = v29;
        v30 = v20 | ((unint64_t)((((LOBYTE(v31[1]) + 10 * (HIBYTE(v31[0]) + 10 * BYTE6(v31[0]))) << 20)
                                       - 218103808) & 0x3FF00000 | (BYTE2(v31[0])
                                                                  + 10 * (BYTE1(v31[0]) + 10 * LOBYTE(v31[0]))
                                                                  + 5936) & 0x3FF | (((BYTE5(v31[0])
                                                                                     + 10
                                                                                     * (BYTE4(v31[0])
                                                                                      + 10 * BYTE3(v31[0]))
                                                                                     - 4304) & 0x3FFu) << 10)) << 32) | (v14 << 8);
        v7 = v30 | v6;
        v8 = v30;
        return (unsigned __int16 **)(v8 | v7);
      }
      break;
    }
  }
  __break(1u);
LABEL_53:
  __break(0xC471u);
  return result;
}

void JSC::ISO8601::parseTimeZone<unsigned char>(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (*v10)();
  uint64_t v11;
  unsigned int v12;
  uint64_t (*v13)();
  unsigned __int8 **v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  __int128 v19;
  char v20;
  _BYTE v21[16];
  unsigned int v22;
  _BYTE v23[16];
  unsigned int v24;
  char v25;
  char v26;

  v3 = (unint64_t)a2[1];
  if (!v3)
    goto LABEL_48;
  v5 = *a2;
  v6 = **a2;
  if (v6 <= 0x59)
  {
    if ((v6 == 43 || v6 == 45) && v3 >= 3)
    {
      v8 = v6 == 43 ? 1 : -1;
      *a2 = v5 + 1;
      a2[1] = (unsigned __int8 *)(v3 - 1);
      v14 = JSC::ISO8601::parseTimeSpec<unsigned char>(a2, 1);
      if (v15)
      {
        v16 = (((3600000000000 * v14) | ((unint64_t)v14 >> 52) & 0x3FF)
             + 60000000000 * BYTE1(v14)
             + 1000000000 * BYTE2(v14)
             + 1000000 * (WORD2(v14) & 0x3FF)
             + 1000 * (((unint64_t)v14 >> 42) & 0x3FF))
            * v8;
        v17 = (unint64_t)a2[1];
        if (!v17
          || (v18 = *a2, **a2 != 91)
          || v17 >= 6 && v18[1] == 117 && v18[2] == 45 && v18[3] == 99 && v18[4] == 97 && v18[5] == 61)
        {
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 8) = v16;
          *(_BYTE *)(a1 + 16) = 1;
          goto LABEL_15;
        }
        JSC::ISO8601::parseTimeZoneBracketedAnnotation<unsigned char>((uint64_t)v23, (uint64_t)a2);
        if (v25)
        {
          LOBYTE(v19) = 0;
          *((_QWORD *)&v19 + 1) = v16;
          v20 = 1;
          goto LABEL_26;
        }
      }
    }
LABEL_48:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    return;
  }
  if (v6 == 122)
  {
LABEL_6:
    v7 = v3 - 1;
    *a2 = v5 + 1;
    a2[1] = (unsigned __int8 *)v7;
    if (!v7 || v5[1] != 91 || v7 >= 6 && v5[2] == 117 && v5[3] == 45 && v5[4] == 99 && v5[5] == 97 && v5[6] == 61)
    {
      *(_BYTE *)a1 = 1;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
LABEL_15:
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 1;
      return;
    }
    JSC::ISO8601::parseTimeZoneBracketedAnnotation<unsigned char>((uint64_t)v23, (uint64_t)a2);
    if (v25)
    {
      LOBYTE(v19) = 1;
      BYTE8(v19) = 0;
      v20 = 0;
LABEL_26:
      v21[0] = 0;
      v22 = -1;
      v12 = v24;
      if (v24 != -1)
      {
        v13 = off_1E359AC20[v24];
        ((void (*)(char *, _BYTE *, _BYTE *))v13)(&v26, v21, v23);
        v22 = v12;
        *(_OWORD *)a1 = v19;
        *(_BYTE *)(a1 + 16) = v20;
        *(_BYTE *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 40) = -1;
        ((void (*)(char *, uint64_t, _BYTE *))v13)(&v26, a1 + 24, v21);
        *(_DWORD *)(a1 + 40) = v12;
        v11 = v22;
        *(_BYTE *)(a1 + 48) = 1;
LABEL_28:
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, _BYTE *))off_1E359AC10[v11])(&v26, v21);
        goto LABEL_43;
      }
      *(_OWORD *)a1 = v19;
      *(_BYTE *)(a1 + 16) = v20;
      *(_BYTE *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 40) = -1;
      *(_BYTE *)(a1 + 48) = 1;
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  if (v6 != 91)
  {
    if (v6 != 90)
      goto LABEL_48;
    goto LABEL_6;
  }
  JSC::ISO8601::parseTimeZoneBracketedAnnotation<unsigned char>((uint64_t)v23, (uint64_t)a2);
  if (!v25)
    goto LABEL_48;
  LOBYTE(v19) = 0;
  BYTE8(v19) = 0;
  v20 = 0;
  v21[0] = 0;
  v22 = -1;
  v9 = v24;
  if (v24 != -1)
  {
    v10 = off_1E359AC20[v24];
    ((void (*)(char *, _BYTE *, _BYTE *))v10)(&v26, v21, v23);
    v22 = v9;
    *(_OWORD *)a1 = v19;
    *(_BYTE *)(a1 + 16) = v20;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v10)(&v26, a1 + 24, v21);
    *(_DWORD *)(a1 + 40) = v9;
    v11 = v22;
    *(_BYTE *)(a1 + 48) = 1;
    goto LABEL_28;
  }
  *(_OWORD *)a1 = v19;
  *(_BYTE *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_BYTE *)(a1 + 48) = 1;
LABEL_43:
  if (v25)
  {
    if (v24 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E359AC10[v24])(&v19, v23);
  }
}

void JSC::ISO8601::parseTimeZoneBracketedAnnotation<unsigned char>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int8 *v5;
  WTF *v6;
  char *v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  int v16;
  char v17;
  int v18;
  unint64_t v19;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 <= 2)
    goto LABEL_79;
  v5 = *(unsigned __int8 **)a2;
  if (**(_BYTE **)a2 != 91)
    goto LABEL_79;
  v6 = (WTF *)(v3 - 1);
  v7 = (char *)(v5 + 1);
  *(_QWORD *)a2 = v5 + 1;
  *(_QWORD *)(a2 + 8) = v3 - 1;
  v8 = v5[1];
  if (v8 == 43 || v8 == 45)
  {
    if (v3 < 4)
      goto LABEL_79;
    v13 = v8 == 43 ? 1 : -1;
    *(_QWORD *)a2 = v5 + 2;
    *(_QWORD *)(a2 + 8) = v3 - 2;
    v26 = JSC::ISO8601::parseTimeSpec<unsigned char>((unsigned __int8 **)a2, 1);
    if (!v27)
      goto LABEL_79;
    v28 = *(_QWORD *)(a2 + 8);
    if (!v28 || **(_BYTE **)a2 != 93)
      goto LABEL_79;
    ++*(_QWORD *)a2;
    *(_QWORD *)(a2 + 8) = v28 - 1;
    *(_QWORD *)a1 = (((3600000000000 * v26) | ((unint64_t)v26 >> 52) & 0x3FF)
                   + 60000000000 * BYTE1(v26)
                   + 1000000000 * BYTE2(v26)
                   + 1000000 * (WORD2(v26) & 0x3FF)
                   + 1000 * (((unint64_t)v26 >> 42) & 0x3FF))
                  * v13;
LABEL_74:
    *(_DWORD *)(a1 + 16) = 1;
    *(_BYTE *)(a1 + 24) = 1;
    return;
  }
  if (v8 == 69
    && (unint64_t)v6 >= 0xB
    && v5[2] == 116
    && v5[3] == 99
    && v5[4] == 47
    && v5[5] == 71
    && v5[6] == 77
    && v5[7] == 84)
  {
    v22 = v5[8];
    if ((v22 == 45 || v22 == 43) && v5[9] - 48 <= 2)
    {
      v23 = v5[10];
      if ((v23 - 48) <= 9)
      {
        v24 = v23 + 10 * v5[9];
        if (v24 <= 0x227 && v5[11] == 93)
        {
          *(_QWORD *)a2 = v5 + 12;
          *(_QWORD *)(a2 + 8) = v3 - 12;
          v25 = 1900800000000000 - 3600000000000 * v24;
          if (v22 != 43)
            v25 = 3600000000000 * v24 - 1900800000000000;
          *(_QWORD *)a1 = v25;
          goto LABEL_74;
        }
      }
    }
  }
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v7[v10];
    if (v12 == 93)
      break;
    if (((v12 | 0x20) - 123) <= 0xE5u && v12 - 45 >= 3 && v12 != 95)
      goto LABEL_79;
    v10 = ++v11;
    if ((unint64_t)v6 <= v11)
    {
      if (!v11)
        goto LABEL_79;
      goto LABEL_21;
    }
  }
  LODWORD(v10) = v11;
  if (!v11)
  {
LABEL_79:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
LABEL_21:
  v14 = 0;
  LODWORD(v15) = 0;
  LOBYTE(v16) = 1;
  do
  {
    if (v6 == v14)
      goto LABEL_88;
    v17 = *((_BYTE *)v14 + (_QWORD)v7);
    if ((v16 & 1) != 0)
    {
      if (((v17 | 0x20) - 97) > 0x19u
        && *((_BYTE *)v14 + (_QWORD)v7) != 95
        && *((_BYTE *)v14 + (_QWORD)v7) != 46)
      {
        goto LABEL_79;
      }
      v16 = 0;
      LODWORD(v15) = (_DWORD)v14;
      goto LABEL_46;
    }
    if (*((_BYTE *)v14 + (_QWORD)v7) == 47)
    {
      if (v14 == (WTF *)v15)
        goto LABEL_79;
      v18 = (_DWORD)v14 - v15;
      if (((_DWORD)v14 - v15) > 0xE)
        goto LABEL_79;
      v19 = v15;
      if (v18 == 2)
      {
        if ((unint64_t)v6 <= v15)
          goto LABEL_88;
        if (v7[v15] != 46)
          goto LABEL_45;
        v19 = (v15 + 1);
      }
      else if (v18 != 1)
      {
LABEL_45:
        v16 = 1;
        goto LABEL_46;
      }
      if ((unint64_t)v6 <= v19)
        goto LABEL_88;
      if (v7[v19] == 46)
        goto LABEL_79;
      goto LABEL_45;
    }
    if (((v17 | 0x20) - 97) >= 0x1Au
      && (*((unsigned __int8 *)v14 + (_QWORD)v7) - 45 > 0x32
       || ((1 << (v17 - 45)) & 0x4000000000003) == 0))
    {
      goto LABEL_79;
    }
    v16 = 0;
LABEL_46:
    v14 = (WTF *)((char *)v14 + 1);
  }
  while ((WTF *)v10 != v14);
  if (v16)
    goto LABEL_79;
  v21 = v10 - v15;
  if ((_DWORD)v10 == (_DWORD)v15 || v21 > 0xE)
    goto LABEL_79;
  if (v21 == 2)
  {
    if ((unint64_t)v6 > v15)
    {
      if (v7[v15] != 46)
        goto LABEL_81;
      v15 = (v15 + 1);
      if ((unint64_t)v6 > v15)
        goto LABEL_78;
    }
LABEL_88:
    __break(1u);
    return;
  }
  if (v21 != 1)
    goto LABEL_81;
  if ((unint64_t)v6 <= v15)
    goto LABEL_88;
  v15 = v15;
LABEL_78:
  if (v7[v15] == 46)
    goto LABEL_79;
LABEL_81:
  *(_QWORD *)a2 = &v7[v10];
  *(_QWORD *)(a2 + 8) = (char *)v6 - v10;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)&v39, v7, v6);
  v36 = *(WTF **)(a2 + 8);
  if (!v36)
    goto LABEL_85;
  if (**(_BYTE **)a2 != 93)
  {
    LOBYTE(v36) = 0;
LABEL_85:
    *(_BYTE *)a1 = 0;
    goto LABEL_86;
  }
  ++*(_QWORD *)a2;
  *(_QWORD *)(a2 + 8) = (char *)v36 - 1;
  v36 = v39;
  v39 = 0;
  *(_QWORD *)a1 = v36;
  v37 = v40;
  HIDWORD(v40) = 0;
  *(_QWORD *)(a1 + 8) = v37;
  *(_DWORD *)(a1 + 16) = 0;
  LOBYTE(v36) = 1;
LABEL_86:
  *(_BYTE *)(a1 + 24) = (_BYTE)v36;
  v38 = v39;
  if (v39)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
  }
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t result, char *a2, WTF *this)
{
  WTF *v3;
  uint64_t v4;
  _BYTE *v6;
  char v7;

  v3 = this;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = (_DWORD)this;
  if (!this)
    return v4;
  if (!((unint64_t)this >> 32))
  {
    v6 = (_BYTE *)WTF::fastMalloc(this);
    *(_DWORD *)(v4 + 8) = (_DWORD)v3;
    *(_QWORD *)v4 = v6;
    do
    {
      v7 = *a2++;
      *v6++ = v7;
      v3 = (WTF *)((char *)v3 - 1);
    }
    while (v3);
    return v4;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEExEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_xEEEEEEDcSG_DpT0_(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEExEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSC_xEEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEExEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSC_xEEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void JSC::ISO8601::parseTimeZone<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  unint64_t v3;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (*v10)();
  uint64_t v11;
  unsigned __int16 **v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t (*v18)();
  __int128 v19;
  char v20;
  _BYTE v21[16];
  unsigned int v22;
  _BYTE v23[16];
  unsigned int v24;
  char v25;
  char v26;

  v3 = (unint64_t)a2[1];
  if (!v3)
    goto LABEL_46;
  v5 = *a2;
  v6 = **a2;
  if (v6 <= 0x5A)
  {
    if (v6 != 43 && v6 != 45)
    {
      if (v6 != 90)
        goto LABEL_46;
LABEL_10:
      v7 = v3 - 1;
      *a2 = v5 + 1;
      a2[1] = (unsigned __int16 *)v7;
      if (!v7 || v5[1] != 91 || v7 >= 6 && v5[2] == 117 && v5[3] == 45 && v5[4] == 99 && v5[5] == 97 && v5[6] == 61)
      {
        *(_BYTE *)a1 = 1;
        *(_BYTE *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 16) = 0;
LABEL_38:
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 48) = 1;
        return;
      }
      JSC::ISO8601::parseTimeZoneBracketedAnnotation<char16_t>((uint64_t)v23, (uint64_t)a2);
      if (v25)
      {
        LOBYTE(v19) = 1;
        BYTE8(v19) = 0;
        v20 = 0;
LABEL_42:
        v21[0] = 0;
        v22 = -1;
        v17 = v24;
        if (v24 != -1)
        {
          v18 = off_1E359AC20[v24];
          ((void (*)(char *, _BYTE *, _BYTE *))v18)(&v26, v21, v23);
          v22 = v17;
          *(_OWORD *)a1 = v19;
          *(_BYTE *)(a1 + 16) = v20;
          *(_BYTE *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 40) = -1;
          ((void (*)(char *, uint64_t, _BYTE *))v18)(&v26, a1 + 24, v21);
          *(_DWORD *)(a1 + 40) = v17;
          v11 = v22;
          *(_BYTE *)(a1 + 48) = 1;
LABEL_44:
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, _BYTE *))off_1E359AC10[v11])(&v26, v21);
          goto LABEL_49;
        }
        *(_OWORD *)a1 = v19;
        *(_BYTE *)(a1 + 16) = v20;
        *(_BYTE *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 40) = -1;
        *(_BYTE *)(a1 + 48) = 1;
        goto LABEL_49;
      }
      goto LABEL_46;
    }
    goto LABEL_19;
  }
  if (v6 != 91)
  {
    if (v6 != 8722)
    {
      if (v6 != 122)
        goto LABEL_46;
      goto LABEL_10;
    }
LABEL_19:
    if (v3 < 3)
      goto LABEL_46;
    v8 = v6 == 43 ? 1 : -1;
    *a2 = v5 + 1;
    a2[1] = (unsigned __int16 *)(v3 - 1);
    v12 = JSC::ISO8601::parseTimeSpec<char16_t>(a2, 1);
    if (!v13)
      goto LABEL_46;
    v14 = (((3600000000000 * v12) | ((unint64_t)v12 >> 52) & 0x3FF)
         + 60000000000 * BYTE1(v12)
         + 1000000000 * BYTE2(v12)
         + 1000000 * (WORD2(v12) & 0x3FF)
         + 1000 * (((unint64_t)v12 >> 42) & 0x3FF))
        * v8;
    v15 = (unint64_t)a2[1];
    if (!v15
      || (v16 = *a2, **a2 != 91)
      || v15 >= 6 && v16[1] == 117 && v16[2] == 45 && v16[3] == 99 && v16[4] == 97 && v16[5] == 61)
    {
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = 1;
      goto LABEL_38;
    }
    JSC::ISO8601::parseTimeZoneBracketedAnnotation<char16_t>((uint64_t)v23, (uint64_t)a2);
    if (v25)
    {
      LOBYTE(v19) = 0;
      *((_QWORD *)&v19 + 1) = v14;
      v20 = 1;
      goto LABEL_42;
    }
LABEL_46:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    return;
  }
  JSC::ISO8601::parseTimeZoneBracketedAnnotation<char16_t>((uint64_t)v23, (uint64_t)a2);
  if (!v25)
    goto LABEL_46;
  LOBYTE(v19) = 0;
  BYTE8(v19) = 0;
  v20 = 0;
  v21[0] = 0;
  v22 = -1;
  v9 = v24;
  if (v24 != -1)
  {
    v10 = off_1E359AC20[v24];
    ((void (*)(char *, _BYTE *, _BYTE *))v10)(&v26, v21, v23);
    v22 = v9;
    *(_OWORD *)a1 = v19;
    *(_BYTE *)(a1 + 16) = v20;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v10)(&v26, a1 + 24, v21);
    *(_DWORD *)(a1 + 40) = v9;
    v11 = v22;
    *(_BYTE *)(a1 + 48) = 1;
    goto LABEL_44;
  }
  *(_OWORD *)a1 = v19;
  *(_BYTE *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_BYTE *)(a1 + 48) = 1;
LABEL_49:
  if (v25)
  {
    if (v24 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E359AC10[v24])(&v19, v23);
  }
}

void JSC::ISO8601::parseTimeZoneBracketedAnnotation<char16_t>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int16 *v5;
  int v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned __int16 v22;
  int v23;
  unint64_t v24;
  unsigned int v26;
  unsigned __int16 **v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 <= 2)
    goto LABEL_81;
  v5 = *(unsigned __int16 **)a2;
  if (**(_WORD **)a2 != 91)
    goto LABEL_81;
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = v3 - 1;
  *(_QWORD *)a2 = v5 + 1;
  *(_QWORD *)(a2 + 8) = v3 - 1;
  if (v6 <= 68)
  {
    if (v6 != 43 && v6 != 45)
      goto LABEL_28;
    goto LABEL_9;
  }
  if (v6 != 69)
  {
    if (v6 != 8722)
      goto LABEL_28;
LABEL_9:
    if (v3 < 4)
      goto LABEL_81;
    v9 = v6 == 43 ? 1 : -1;
    *(_QWORD *)a2 = v5 + 2;
    *(_QWORD *)(a2 + 8) = v3 - 2;
    v27 = JSC::ISO8601::parseTimeSpec<char16_t>((unsigned __int16 **)a2, 1);
    if (!v28)
      goto LABEL_81;
    v29 = *(_QWORD *)(a2 + 8);
    if (!v29 || **(_WORD **)a2 != 93)
      goto LABEL_81;
    *(_QWORD *)a2 += 2;
    *(_QWORD *)(a2 + 8) = v29 - 1;
    *(_QWORD *)a1 = (((3600000000000 * v27) | ((unint64_t)v27 >> 52) & 0x3FF)
                   + 60000000000 * BYTE1(v27)
                   + 1000000000 * BYTE2(v27)
                   + 1000000 * (WORD2(v27) & 0x3FF)
                   + 1000 * (((unint64_t)v27 >> 42) & 0x3FF))
                  * v9;
LABEL_75:
    *(_DWORD *)(a1 + 16) = 1;
LABEL_76:
    *(_BYTE *)(a1 + 24) = 1;
    return;
  }
  if (v8 >= 0xB && v5[2] == 116 && v5[3] == 99 && v5[4] == 47 && v5[5] == 71 && v5[6] == 77 && v5[7] == 84)
  {
    v10 = v5[8];
    if ((v10 == 45 || v10 == 43) && v5[9] - 48 <= 2)
    {
      v11 = v5[10];
      if ((v11 - 48) <= 9)
      {
        v12 = v11 + 10 * v5[9];
        if (v12 <= 0x227 && v5[11] == 93)
        {
          *(_QWORD *)a2 = v5 + 12;
          *(_QWORD *)(a2 + 8) = v3 - 12;
          v13 = 3600000000000 * v12;
          v14 = 3600000000000 * v12 - 1900800000000000;
          v15 = 1900800000000000 - v13;
          if (v10 != 43)
            v15 = v14;
          *(_QWORD *)a1 = v15;
          goto LABEL_75;
        }
      }
    }
  }
LABEL_28:
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v18 = v7[v16];
    if (v18 == 93)
      break;
    if ((unsigned __int16)((v18 | 0x20) - 123) <= 0xFFE5u && v18 - 45 >= 3 && v18 != 95)
      goto LABEL_81;
    v16 = ++v17;
    if (v8 <= v17)
    {
      if (!v17)
        goto LABEL_81;
      goto LABEL_37;
    }
  }
  LODWORD(v16) = v17;
  if (!v17)
  {
LABEL_81:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
LABEL_37:
  v19 = 0;
  LODWORD(v20) = 0;
  LOBYTE(v21) = 1;
  do
  {
    if (v8 == v19)
      goto LABEL_89;
    v22 = v7[v19];
    if ((v21 & 1) != 0)
    {
      if ((unsigned __int16)((v22 | 0x20) - 97) > 0x19u && v7[v19] != 95 && v7[v19] != 46)
        goto LABEL_81;
      v21 = 0;
      LODWORD(v20) = v19;
      goto LABEL_62;
    }
    if (v7[v19] == 47)
    {
      if (v19 == v20)
        goto LABEL_81;
      v23 = v19 - v20;
      if ((v19 - v20) > 0xE)
        goto LABEL_81;
      v24 = v20;
      if (v23 == 2)
      {
        if (v8 <= v20)
          goto LABEL_89;
        if (v7[v20] != 46)
          goto LABEL_61;
        v24 = (v20 + 1);
      }
      else if (v23 != 1)
      {
LABEL_61:
        v21 = 1;
        goto LABEL_62;
      }
      if (v8 <= v24)
        goto LABEL_89;
      if (v7[v24] == 46)
        goto LABEL_81;
      goto LABEL_61;
    }
    if ((unsigned __int16)((v22 | 0x20) - 97) >= 0x1Au
      && (v7[v19] - 45 > 0x32 || ((1 << (v22 - 45)) & 0x4000000000003) == 0))
    {
      goto LABEL_81;
    }
    v21 = 0;
LABEL_62:
    ++v19;
  }
  while (v16 != v19);
  if (v21)
    goto LABEL_81;
  v26 = v16 - v20;
  if ((_DWORD)v16 == (_DWORD)v20 || v26 > 0xE)
    goto LABEL_81;
  if (v26 == 2)
  {
    if (v8 > v20)
    {
      if (v7[v20] != 46)
        goto LABEL_82;
      v20 = (v20 + 1);
      if (v8 > v20)
        goto LABEL_80;
    }
    goto LABEL_89;
  }
  if (v26 != 1)
    goto LABEL_82;
  if (v8 <= v20)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v20 = v20;
LABEL_80:
  if (v7[v20] == 46)
    goto LABEL_81;
LABEL_82:
  *(_QWORD *)a2 = &v7[v16];
  *(_QWORD *)(a2 + 8) = v8 - v16;
  if (v3 >= 0x100000001)
  {
LABEL_90:
    __break(0xC471u);
    return;
  }
  v30 = WTF::fastMalloc((WTF *)(v3 - 1));
  v38 = 0;
  v39 = 2 * v3 - 2;
  do
  {
    *(_BYTE *)(v30 + v38) = v7[v38];
    ++v38;
    v39 -= 2;
  }
  while (v39);
  v40 = *(_QWORD *)(a2 + 8);
  if (v40 && **(_WORD **)a2 == 93)
  {
    *(_QWORD *)a2 += 2;
    *(_QWORD *)(a2 + 8) = v40 - 1;
    *(_QWORD *)a1 = v30;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 12) = v8;
    goto LABEL_76;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
}

void JSC::ISO8601::parseCalendar<unsigned char>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  BOOL v24;
  WTF *v26;
  char v27;
  uint64_t v28;
  WTF *v29;
  unsigned int v30;
  WTF *v32;
  int __n;
  unsigned int __n_4;
  uint64_t v35;

  v9 = a2[1];
  if (v9 < 6)
    goto LABEL_48;
  v11 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 91)
    goto LABEL_48;
  if (v11[1] != 117)
    goto LABEL_48;
  if (v11[2] != 45)
    goto LABEL_48;
  if (v11[3] != 99)
    goto LABEL_48;
  if (v11[4] != 97)
    goto LABEL_48;
  if (v11[5] != 61)
    goto LABEL_48;
  v12 = v9 - 6;
  v13 = v11 + 6;
  *a2 = v11 + 6;
  a2[1] = v9 - 6;
  if (v9 == 6)
    goto LABEL_48;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = v13[v14];
    if (v16 == 93)
      break;
    if ((v16 | 0x20u) - 97 >= 0x1A && v16 != 45 && (v16 - 48) >= 0xA)
      goto LABEL_48;
    v14 = ++v15;
    if (v12 <= v15)
      goto LABEL_19;
  }
  LODWORD(v14) = v15;
LABEL_19:
  if (!(_DWORD)v14)
  {
LABEL_48:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  do
  {
    if (v18 == v12)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v23 = v13[v18];
    if ((v22 & 1) != 0)
      goto LABEL_28;
    if (v23 == 45)
    {
      if ((v19 + v20 - 3) > 5)
        goto LABEL_48;
      if (++v18 == v14)
        goto LABEL_48;
      if (v18 == v12)
        goto LABEL_59;
      ++v20;
      v23 = v13[v18];
LABEL_28:
      v24 = (v23 | 0x20u) - 97 >= 0x1A && (v23 - 48) >= 0xA;
      v21 = v18;
      if (v24)
        goto LABEL_48;
      goto LABEL_38;
    }
    if ((v23 | 0x20u) - 97 >= 0x1A && (v23 - 48) >= 0xA)
      goto LABEL_48;
LABEL_38:
    v22 = 0;
    v19 = -v21;
    ++v18;
    ++v20;
  }
  while (v18 != v14);
  if ((v14 - v21 - 3) >= 6)
    goto LABEL_48;
  *a2 = &v13[v14];
  a2[1] = v12 - v14;
  v32 = (WTF *)&v35;
  __n = 8;
  __n_4 = v12;
  v26 = (WTF *)&v35;
  if (v12 >= 9)
  {
    if (!HIDWORD(v12))
    {
      v26 = (WTF *)WTF::fastMalloc((WTF *)v12);
      __n = v12;
      v32 = v26;
      goto LABEL_43;
    }
LABEL_60:
    __break(0xC471u);
    return;
  }
  do
  {
LABEL_43:
    v27 = *v13++;
    *(_BYTE *)v26 = v27;
    v26 = (WTF *)((char *)v26 + 1);
    --v12;
  }
  while (v12);
  v28 = a2[1];
  if (!v28)
    goto LABEL_51;
  if (*(_BYTE *)*a2 != 93)
  {
    LOBYTE(v28) = 0;
LABEL_51:
    *(_BYTE *)a1 = 0;
    goto LABEL_54;
  }
  ++*a2;
  a2[1] = v28 - 1;
  v29 = v32;
  if (v32 == (WTF *)&v35)
  {
    v30 = __n_4;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 8;
    memcpy((void *)(a1 + 16), &v35, __n_4);
  }
  else
  {
    v32 = (WTF *)&v35;
    v30 = __n_4;
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = __n;
  }
  *(_DWORD *)(a1 + 12) = v30;
  LOBYTE(v28) = 1;
LABEL_54:
  *(_BYTE *)(a1 + 24) = v28;
  if (&v35 != (uint64_t *)v32 && v32 != 0)
    WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEExEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSC_xEEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v10 == -1)
    goto LABEL_7;
  if ((_DWORD)v10)
  {
    ((void (*)(char *, uint64_t))off_1E359AC10[v10])(&v15, v9);
LABEL_7:
    *(_DWORD *)(v9 + 16) = -1;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)v9 = v14;
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(v9 + 8) = v14;
    LODWORD(v14) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = 0;
    *(_QWORD *)(v9 + 12) = v14;
    return;
  }
  v12 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)a2 = v13;
  LODWORD(v13) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  a2[2] = v13;
  LODWORD(v13) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  a2[3] = v13;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEExEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSC_xEEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E359AC10[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

void JSC::ISO8601::parseCalendar<char16_t>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _WORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  BOOL v24;
  WTF *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  WTF *v33;
  int __n;
  uint64_t v35;

  v9 = a2[1];
  if (v9 < 6)
    goto LABEL_49;
  v11 = (_WORD *)*a2;
  if (*(_WORD *)*a2 != 91)
    goto LABEL_49;
  if (v11[1] != 117)
    goto LABEL_49;
  if (v11[2] != 45)
    goto LABEL_49;
  if (v11[3] != 99)
    goto LABEL_49;
  if (v11[4] != 97)
    goto LABEL_49;
  if (v11[5] != 61)
    goto LABEL_49;
  v12 = v9 - 6;
  v13 = (char *)(v11 + 6);
  *a2 = v11 + 6;
  a2[1] = v9 - 6;
  if (v9 == 6)
    goto LABEL_49;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = *(unsigned __int16 *)&v13[2 * v14];
    if (v16 == 93)
      break;
    if ((v16 | 0x20u) - 97 >= 0x1A && v16 != 45 && (v16 - 48) >= 0xA)
      goto LABEL_49;
    v14 = ++v15;
    if (v12 <= v15)
      goto LABEL_19;
  }
  LODWORD(v14) = v15;
LABEL_19:
  if (!(_DWORD)v14)
  {
LABEL_49:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  do
  {
    if (v18 == v12)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v23 = *(unsigned __int16 *)&v13[2 * v18];
    if ((v22 & 1) != 0)
      goto LABEL_28;
    if (v23 == 45)
    {
      if ((v19 + v20 - 3) > 5)
        goto LABEL_49;
      if (++v18 == v14)
        goto LABEL_49;
      if (v18 == v12)
        goto LABEL_60;
      ++v20;
      v23 = *(unsigned __int16 *)&v13[2 * v18];
LABEL_28:
      v24 = (v23 | 0x20u) - 97 >= 0x1A && (v23 - 48) >= 0xA;
      v21 = v18;
      if (v24)
        goto LABEL_49;
      goto LABEL_38;
    }
    if ((v23 | 0x20u) - 97 >= 0x1A && (v23 - 48) >= 0xA)
      goto LABEL_49;
LABEL_38:
    v22 = 0;
    v19 = -v21;
    ++v18;
    ++v20;
  }
  while (v18 != v14);
  if ((v14 - v21 - 3) >= 6)
    goto LABEL_49;
  *a2 = &v13[2 * v14];
  a2[1] = v12 - v14;
  v33 = (WTF *)&v35;
  __n = 8;
  v26 = (WTF *)&v35;
  if (v12 >= 9)
  {
    if (!HIDWORD(v12))
    {
      v26 = (WTF *)WTF::fastMalloc((WTF *)(v9 - 6));
      __n = v9 - 6;
      v33 = v26;
      goto LABEL_43;
    }
LABEL_61:
    __break(0xC471u);
    return;
  }
LABEL_43:
  v27 = 2 * v9 - 12;
  do
  {
    v28 = *v13;
    v13 += 2;
    *(_BYTE *)v26 = v28;
    v26 = (WTF *)((char *)v26 + 1);
    v27 -= 2;
  }
  while (v27);
  v29 = a2[1];
  if (!v29)
    goto LABEL_52;
  if (*(_WORD *)*a2 != 93)
  {
    LOBYTE(v29) = 0;
LABEL_52:
    *(_BYTE *)a1 = 0;
    goto LABEL_55;
  }
  *a2 += 2;
  a2[1] = v29 - 1;
  v30 = v33;
  if (v33 == (WTF *)&v35)
  {
    v31 = v9 - 6;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 8;
    memcpy((void *)(a1 + 16), &v35, (v9 - 6));
  }
  else
  {
    v33 = (WTF *)&v35;
    v31 = v9 - 6;
    *(_QWORD *)a1 = v30;
    *(_DWORD *)(a1 + 8) = __n;
  }
  *(_DWORD *)(a1 + 12) = v31;
  LOBYTE(v29) = 1;
LABEL_55:
  *(_BYTE *)(a1 + 24) = v29;
  if (&v35 != (uint64_t *)v33 && v33 != 0)
    WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::ISO8601::parseCalendarDateTime<unsigned char>(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 **v8;
  unint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  int v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 **v58;
  int v59;
  int v60;
  uint64_t *v61;
  int v62;
  unsigned __int8 **v63;
  int v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned __int8 **v70;
  char v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[32];
  char v79[8];
  char v80[8];
  unsigned int v81;
  int v82;
  unsigned __int8 v83;
  unsigned __int8 **v84;
  size_t __n;
  uint64_t v86;
  unsigned __int8 v87;
  _BYTE v88[32];
  char v89[8];
  char v90[8];
  int v91;
  int v92;
  unsigned __int8 v93;
  char v94;
  __int128 v95;
  __int128 v96;
  char v97;
  unsigned int v98;
  char v99;
  int v100;
  unsigned __int8 v101;
  unsigned __int8 **v102;
  __int128 v103;
  char v104;
  _BYTE v105[16];
  int v106;
  char v107;
  _BYTE v108[9];

  v11 = (unint64_t)a2[1];
  if (!v11)
    goto LABEL_47;
  v12 = *a2;
  v13 = **a2;
  if (v13 == 43)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_6;
  }
  if (v13 == 45)
  {
    v14 = -1;
    v15 = 1;
LABEL_6:
    *a2 = v12 + 1;
    a2[1] = (unsigned __int8 *)(v11 - 1);
    if (v11 < 7)
      goto LABEL_47;
    v16 = v12[1];
    if ((v16 - 48) > 9)
      goto LABEL_47;
    v17 = v12[2];
    if ((v17 - 48) > 9)
      goto LABEL_47;
    v18 = v12[3];
    if ((v18 - 48) > 9)
      goto LABEL_47;
    v19 = v12[4];
    if ((v19 - 48) > 9)
      goto LABEL_47;
    v20 = v12[5];
    if ((v20 - 48) > 9)
      goto LABEL_47;
    v21 = v12[6];
    if ((v21 - 48) > 9)
      goto LABEL_47;
    v22 = v21 + 10 * (v20 + 10 * (v19 + 10 * (v18 + 10 * (v17 + 10 * v16)))) - 5333328;
    if (v22)
      v15 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_47;
    v23 = v12 + 7;
    v24 = v22 * v14;
    v25 = -7;
    goto LABEL_26;
  }
  if (v11 < 4 || (v13 - 58) < 0xFFFFFFF6)
    goto LABEL_47;
  v27 = v12[1];
  if ((v27 - 48) > 9)
    goto LABEL_47;
  v28 = v12[2];
  if ((v28 - 48) > 9)
    goto LABEL_47;
  v29 = v12[3];
  if ((v29 - 48) > 9)
    goto LABEL_47;
  v24 = v29 + 10 * (v28 + 10 * (v27 + 10 * v13)) - 53328;
  v23 = v12 + 4;
  v25 = -4;
LABEL_26:
  v30 = v25 + v11;
  *a2 = v23;
  a2[1] = (unsigned __int8 *)v30;
  if (!v30)
    goto LABEL_47;
  v31 = *v23;
  if (v31 == 45)
  {
    v32 = v30 - 1;
    *a2 = ++v23;
    a2[1] = (unsigned __int8 *)(v30 - 1);
    if (v30 < 6)
      goto LABEL_47;
    v33 = *v23;
  }
  else
  {
    if (v30 < 4)
      goto LABEL_47;
    v33 = *v23;
    v32 = v30;
  }
  if ((v33 & 0xFE) != 0x30)
    goto LABEL_47;
  *a2 = v23 + 1;
  a2[1] = (unsigned __int8 *)(v32 - 1);
  v34 = v23[1];
  if ((v34 - 48) > 9)
    goto LABEL_47;
  v35 = v34 + 10 * v33;
  if ((v35 - 541) < 0xFFFFFFF4)
    goto LABEL_47;
  v36 = v32 - 2;
  v37 = v23 + 2;
  *a2 = v23 + 2;
  a2[1] = (unsigned __int8 *)(v32 - 2);
  if (v31 == 45)
  {
    if (*v37 == 45)
    {
      v36 = v32 - 3;
      v37 = v23 + 3;
      *a2 = v23 + 3;
      a2[1] = (unsigned __int8 *)(v32 - 3);
      goto LABEL_38;
    }
LABEL_47:
    v88[0] = 0;
    v94 = 0;
    goto LABEL_48;
  }
LABEL_38:
  v38 = *v37;
  if ((v38 & 0xFC) != 0x30)
    goto LABEL_47;
  v39 = v37 + 1;
  *a2 = v37 + 1;
  a2[1] = (unsigned __int8 *)(v36 - 1);
  if (v36 == 1)
  {
    __break(1u);
  }
  else
  {
    v40 = *v39;
    if ((v40 - 48) > 9)
      goto LABEL_47;
    v38 = v40 + 10 * v38 - 528;
    if (!v38)
      goto LABEL_47;
    LOBYTE(v39) = v35 - 16;
    if ((v24 & 3) != 0)
    {
      v41 = 0;
      goto LABEL_46;
    }
    HIDWORD(v42) = -1030792151 * v24 + 85899344;
    LODWORD(v42) = HIDWORD(v42);
    if ((v42 >> 4) >= 0xA3D70B)
    {
      HIDWORD(v43) = -1030792151 * v24 + 85899344;
      LODWORD(v43) = HIDWORD(v43);
      v41 = (v43 >> 2) > 0x28F5C28;
      goto LABEL_46;
    }
  }
  v41 = 1;
LABEL_46:
  if (v38 > JSC::ISO8601::daysInMonths[12 * v41 - 1 + v39])
    goto LABEL_47;
  v67 = v24 & 0x1FFF00 | ((v39 & 0x1F) << 21) | (v38 << 26) | v24;
  *a2 = v37 + 2;
  a2[1] = (unsigned __int8 *)(v36 - 2);
  if (v36 == 2)
    goto LABEL_133;
  v68 = v37[2];
  v69 = (v68 - 32);
  if (v69 <= 0x3B)
  {
    if (((1 << (v68 - 32)) & 0x400000000002800) != 0)
      goto LABEL_134;
    if (((1 << (v68 - 32)) & 0x10000000000001) != 0)
      goto LABEL_120;
    if (v69 == 59)
    {
      if (v36 - 2 >= 6 && v37[3] == 117 && v37[4] == 45 && v37[5] == 99 && v37[6] == 97 && v37[7] == 61)
        goto LABEL_133;
LABEL_134:
      JSC::ISO8601::parseTimeZone<unsigned char>((uint64_t)&v95, a2);
      if (v99)
      {
        *(_DWORD *)v78 = v67;
        LOBYTE(v82) = 0;
        *(_OWORD *)&v78[8] = v95;
        v78[24] = v96;
        v8 = (unsigned __int8 **)v79;
        v79[0] = 0;
        v81 = -1;
        v75 = v98;
        if (v98 != -1)
        {
          ((void (*)(_BYTE *, char *, char *))off_1E359AC20[v98])(v88, v79, (char *)&v96 + 8);
          v81 = v75;
          v67 = *(_DWORD *)v78;
        }
        LOBYTE(v82) = 1;
        *(_DWORD *)v88 = v67;
        v88[4] = 0;
        v88[12] = 0;
        v93 = 0;
        *(_OWORD *)&v88[16] = *(_OWORD *)&v78[8];
        v89[0] = v78[24];
        v90[0] = 0;
        v92 = -1;
        if ((_DWORD)v75 == -1)
        {
          v93 = 1;
          v94 = 1;
        }
        else
        {
          ((void (*)(unsigned __int8 ***, char *, char *))off_1E359AC20[v75])(&v102, v90, v79);
          v92 = v75;
          v93 = 1;
          v94 = 1;
          if ((_BYTE)v82 && v81 != -1)
            ((void (*)(unsigned __int8 ***, char *))off_1E359AC10[v81])(&v102, v79);
        }
        if (v99 && v98 != -1)
          ((void (*)(_BYTE *, char *))off_1E359AC10[v98])(v78, (char *)&v96 + 8);
        goto LABEL_48;
      }
LABEL_170:
      v88[0] = 0;
      v94 = 0;
      goto LABEL_48;
    }
  }
  if (v68 == 122)
    goto LABEL_134;
  if (v68 != 116)
  {
LABEL_133:
    *(_DWORD *)v88 = v67;
    v88[4] = 0;
    v88[12] = 0;
    v88[16] = 0;
    v93 = 0;
    v94 = 1;
    goto LABEL_48;
  }
LABEL_120:
  *a2 = v37 + 3;
  a2[1] = (unsigned __int8 *)(v36 - 3);
  v70 = JSC::ISO8601::parseTimeSpec<unsigned char>(a2, 0);
  if (!v71)
    goto LABEL_170;
  v8 = v70;
  v72 = (unint64_t)a2[1];
  if (!v72)
    goto LABEL_154;
  v73 = *a2;
  v74 = **a2;
  if (v74 <= 0x59)
  {
    if (v74 != 43 && v74 != 45)
      goto LABEL_154;
  }
  else if (v74 != 90
         && v74 != 122
         && (v74 != 91 || v72 >= 6 && v73[1] == 117 && v73[2] == 45 && v73[3] == 99 && v73[4] == 97 && v73[5] == 61))
  {
LABEL_154:
    *(_QWORD *)v78 = v70;
    v78[8] = 0;
    LOBYTE(v82) = 0;
    v83 = 1;
    v102 = v70;
    LOBYTE(v103) = 0;
    v107 = 0;
LABEL_171:
    *(_DWORD *)v88 = v67;
    *(_QWORD *)&v88[4] = v8;
    v88[12] = 1;
    v88[16] = 0;
    v93 = 0;
    goto LABEL_172;
  }
  JSC::ISO8601::parseTimeZone<unsigned char>((uint64_t)&v95, a2);
  if (v99)
  {
    *(_QWORD *)v88 = v8;
    LOBYTE(v92) = 0;
    *(_OWORD *)&v88[8] = v95;
    v88[24] = v96;
    v89[0] = 0;
    v91 = -1;
    v76 = v98;
    if (v98 != -1)
    {
      ((void (*)(_BYTE *, char *, char *))off_1E359AC20[v98])(v78, v89, (char *)&v96 + 8);
      v91 = v76;
      v8 = *(unsigned __int8 ***)v88;
    }
    LOBYTE(v92) = 1;
    *(_QWORD *)v78 = v8;
    LOBYTE(v82) = 0;
    *(_OWORD *)&v78[8] = *(_OWORD *)&v88[8];
    v78[24] = v88[24];
    v79[0] = 0;
    v81 = -1;
    if ((_DWORD)v76 == -1)
    {
      LOBYTE(v82) = 1;
      v83 = 1;
    }
    else
    {
      ((void (*)(unsigned __int8 ***, char *, char *))off_1E359AC20[v76])(&v102, v79, v89);
      v81 = v76;
      LOBYTE(v82) = 1;
      v83 = 1;
      if ((_BYTE)v92 && v91 != -1)
        ((void (*)(unsigned __int8 ***, char *))off_1E359AC10[v91])(&v102, v89);
    }
    if (v99 && v98 != -1)
      ((void (*)(_BYTE *, char *))off_1E359AC10[v98])(v88, (char *)&v96 + 8);
  }
  else
  {
    v78[0] = 0;
    v83 = 0;
  }
  if (!v83)
    goto LABEL_170;
  v8 = *(unsigned __int8 ***)v78;
  v102 = *(unsigned __int8 ***)v78;
  LOBYTE(v103) = 0;
  v107 = 0;
  if (!(_BYTE)v82)
    goto LABEL_171;
  v103 = *(_OWORD *)&v78[8];
  v104 = v78[24];
  v105[0] = 0;
  v106 = -1;
  v77 = v81;
  if (v81 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, char *))off_1E359AC20[v81])(v88, v105, v79);
    v106 = v77;
    v8 = v102;
  }
  v107 = 1;
  LODWORD(v95) = v67;
  *(_QWORD *)((char *)&v95 + 4) = v8;
  v101 = 0;
  v96 = v103;
  v97 = v104;
  LOBYTE(v98) = 0;
  v100 = -1;
  if ((_DWORD)v77 != -1)
  {
    ((void (*)(_BYTE *, unsigned int *, _BYTE *))off_1E359AC20[v77])(v88, &v98, v105);
    v100 = v77;
    v67 = v95;
    v8 = *(unsigned __int8 ***)((char *)&v95 + 4);
  }
  v101 = 1;
  *(_DWORD *)v88 = v67;
  *(_QWORD *)&v88[4] = v8;
  v88[12] = 1;
  v93 = 0;
  *(_OWORD *)&v88[16] = v96;
  v89[0] = v97;
  v90[0] = 0;
  v92 = -1;
  if ((_DWORD)v77 != -1)
  {
    ((void (*)(_BYTE *, char *, unsigned int *))off_1E359AC20[v77])(v108, v90, &v98);
    v92 = v77;
    v93 = 1;
    v94 = 1;
    if (v101 && v100 != -1)
      ((void (*)(_BYTE *, unsigned int *))off_1E359AC10[v100])(v108, &v98);
    goto LABEL_173;
  }
  v93 = 1;
LABEL_172:
  v94 = 1;
LABEL_173:
  if (v107 && v106 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E359AC10[v106])(&v95, v105);
  if (v83 && (_BYTE)v82 && v81 != -1)
    ((void (*)(__int128 *, char *))off_1E359AC10[v81])(&v95, v79);
LABEL_48:
  if (!v94)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
    return;
  }
  v95 = *(_OWORD *)v88;
  LOBYTE(v96) = 0;
  v101 = 0;
  v44 = v93;
  if (v93)
  {
    v96 = *(_OWORD *)&v88[16];
    v97 = v89[0];
    LOBYTE(v98) = 0;
    v100 = -1;
    LODWORD(v8) = v92;
    if (v92 != -1)
    {
      ((void (*)(_BYTE *, unsigned int *, char *))off_1E359AC20[v92])(v78, &v98, v90);
      v100 = (int)v8;
    }
    v101 = 1;
  }
  if ((unint64_t)a2[1] >= 6
    && (v45 = *a2, **a2 == 91)
    && v45[1] == 117
    && v45[2] == 45
    && v45[3] == 99
    && v45[4] == 97
    && v45[5] == 61)
  {
    JSC::ISO8601::parseCalendar<unsigned char>((uint64_t)&v102, a2, a3, a4, a5, a6, a7, a8);
    if (v104)
    {
      *(_OWORD *)v78 = v95;
      v78[16] = 0;
      v83 = 0;
      v52 = v101;
      if (v101)
      {
        *(_OWORD *)&v78[16] = v96;
        v79[0] = v97;
        v80[0] = 0;
        v82 = -1;
        v53 = v100;
        if (v100 != -1)
        {
          ((void (*)(_BYTE *, char *, unsigned int *))off_1E359AC20[v100])(v108, v80, &v98);
          v82 = v53;
          v83 = 1;
          LOBYTE(v84) = 0;
          v87 = 0;
          if (!v104)
          {
            *(_DWORD *)a1 = *(_DWORD *)v78;
            *(_QWORD *)(a1 + 4) = *(_QWORD *)&v78[4];
            *(_DWORD *)(a1 + 12) = *(_DWORD *)&v78[12];
            *(_BYTE *)(a1 + 64) = 0;
            *(_OWORD *)(a1 + 16) = *(_OWORD *)&v78[16];
            *(_BYTE *)(a1 + 32) = v79[0];
            *(_BYTE *)(a1 + 40) = 0;
            v54 = a1 + 40;
            *(_DWORD *)(a1 + 56) = -1;
            goto LABEL_92;
          }
LABEL_87:
          v84 = (unsigned __int8 **)&v86;
          __n = 8;
          v58 = v102;
          if (v102 == (unsigned __int8 **)((char *)&v103 + 8))
          {
            v60 = DWORD1(v103);
            memcpy(&v86, v102, DWORD1(v103));
          }
          else
          {
            v102 = (unsigned __int8 **)&v103 + 1;
            v84 = v58;
            v59 = v103;
            v60 = DWORD1(v103);
            LODWORD(v103) = 8;
            LODWORD(__n) = v59;
          }
          DWORD1(v103) = 0;
          HIDWORD(__n) = v60;
          v87 = 1;
          *(_DWORD *)a1 = *(_DWORD *)v78;
          *(_QWORD *)(a1 + 4) = *(_QWORD *)&v78[4];
          *(_DWORD *)(a1 + 12) = *(_DWORD *)&v78[12];
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 64) = 0;
          if (!v52)
            goto LABEL_95;
          v53 = v82;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)&v78[16];
          *(_BYTE *)(a1 + 32) = v79[0];
          *(_BYTE *)(a1 + 40) = 0;
          v54 = a1 + 40;
          *(_DWORD *)(a1 + 56) = -1;
          if (v53 == -1)
          {
            *(_BYTE *)(a1 + 64) = 1;
            *(_BYTE *)(a1 + 96) = 0;
            goto LABEL_95;
          }
LABEL_92:
          ((void (*)(_BYTE *, uint64_t, char *))off_1E359AC20[v53])(v108, v54, v80);
          *(_DWORD *)(a1 + 56) = v53;
          v62 = v87;
          *(_BYTE *)(a1 + 64) = 1;
          *(_BYTE *)(a1 + 72) = 0;
          *(_BYTE *)(a1 + 96) = 0;
          if (!v62)
          {
LABEL_99:
            *(_BYTE *)(a1 + 104) = 1;
            if (v83 && v82 != -1)
              ((void (*)(_BYTE *, char *))off_1E359AC10[v82])(v108, v80);
            if (v104)
            {
              v66 = (unint64_t)v102;
              if ((unsigned __int8 **)((char *)&v103 + 8) != v102)
              {
                if (v102)
                {
                  v102 = 0;
                  LODWORD(v103) = 0;
                  WTF::fastFree(v66, v61, v46, v47, v48, v49, v50, v51);
                }
              }
            }
            goto LABEL_76;
          }
LABEL_95:
          *(_QWORD *)(a1 + 72) = a1 + 88;
          *(_DWORD *)(a1 + 80) = 8;
          v63 = v84;
          v61 = &v86;
          if (v84 == (unsigned __int8 **)&v86)
          {
            v65 = HIDWORD(__n);
            memcpy((void *)(a1 + 88), &v86, HIDWORD(__n));
          }
          else
          {
            v84 = (unsigned __int8 **)&v86;
            *(_QWORD *)(a1 + 72) = v63;
            v64 = __n;
            v65 = HIDWORD(__n);
            LODWORD(__n) = 8;
            *(_DWORD *)(a1 + 80) = v64;
          }
          HIDWORD(__n) = 0;
          *(_DWORD *)(a1 + 84) = v65;
          *(_BYTE *)(a1 + 96) = 1;
          goto LABEL_99;
        }
        v83 = 1;
      }
      v87 = 0;
      goto LABEL_87;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    v55 = v95;
    *(_OWORD *)v78 = v95;
    v83 = 0;
    if (v44)
    {
      *(_OWORD *)&v78[16] = v96;
      v79[0] = v97;
      v80[0] = 0;
      v82 = -1;
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(unsigned __int8 ***, char *, unsigned int *))off_1E359AC20[v8])(&v102, v80, &v98);
        v82 = (int)v8;
        v55 = *(_DWORD *)v78;
      }
      v83 = 1;
      *(_DWORD *)a1 = v55;
      *(_QWORD *)(a1 + 4) = *(_QWORD *)&v78[4];
      *(_DWORD *)(a1 + 12) = *(_DWORD *)&v78[12];
      *(_BYTE *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&v78[16];
      *(_BYTE *)(a1 + 32) = v79[0];
      *(_BYTE *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 56) = -1;
      if ((_DWORD)v8 == -1)
      {
        *(_BYTE *)(a1 + 64) = 1;
        *(_BYTE *)(a1 + 72) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        v57 = -1;
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        ((void (*)(unsigned __int8 ***, uint64_t, char *))off_1E359AC20[v8])(&v102, a1 + 40, v80);
        *(_DWORD *)(a1 + 56) = (_DWORD)v8;
        v56 = v83;
        *(_BYTE *)(a1 + 64) = 1;
        *(_BYTE *)(a1 + 72) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        if (!v56)
          goto LABEL_76;
        v57 = v82;
      }
      if (v57 != -1)
        ((void (*)(unsigned __int8 ***, char *))off_1E359AC10[v57])(&v102, v80);
      goto LABEL_76;
    }
    *(_OWORD *)a1 = v95;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
LABEL_76:
  if (v101 && v100 != -1)
    ((void (*)(_BYTE *, unsigned int *))off_1E359AC10[v100])(v78, &v98);
  if (v94 && v93 && v92 != -1)
    ((void (*)(_BYTE *, char *))off_1E359AC10[v92])(v78, v90);
}

void JSC::ISO8601::parseCalendarDateTime<char16_t>(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 **v8;
  unint64_t v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned __int16 *v38;
  int v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned __int16 **v57;
  int v58;
  int v59;
  uint64_t *v60;
  int v61;
  unsigned __int16 **v62;
  int v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned __int16 **v69;
  char v70;
  unint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[32];
  char v78[8];
  char v79[8];
  unsigned int v80;
  int v81;
  unsigned __int8 v82;
  unsigned __int16 **v83;
  size_t __n;
  uint64_t v85;
  unsigned __int8 v86;
  _BYTE v87[32];
  char v88[8];
  char v89[8];
  int v90;
  int v91;
  unsigned __int8 v92;
  char v93;
  __int128 v94;
  __int128 v95;
  char v96;
  unsigned int v97;
  char v98;
  int v99;
  unsigned __int8 v100;
  unsigned __int16 **v101;
  __int128 v102;
  char v103;
  _BYTE v104[16];
  int v105;
  char v106;
  _BYTE v107[9];

  v11 = (unint64_t)a2[1];
  if (!v11)
    goto LABEL_45;
  v12 = *a2;
  v13 = **a2;
  if (v13 == 43)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_7;
  }
  if (v13 == 8722 || v13 == 45)
  {
    v14 = -1;
    v15 = 1;
LABEL_7:
    *a2 = v12 + 1;
    a2[1] = (unsigned __int16 *)(v11 - 1);
    if (v11 < 7)
      goto LABEL_45;
    v16 = v12[1];
    if ((v16 - 48) > 9)
      goto LABEL_45;
    v17 = v12[2];
    if ((v17 - 48) > 9)
      goto LABEL_45;
    v18 = v12[3];
    if ((v18 - 48) > 9)
      goto LABEL_45;
    v19 = v12[4];
    if ((v19 - 48) > 9)
      goto LABEL_45;
    v20 = v12[5];
    if ((v20 - 48) > 9)
      goto LABEL_45;
    v21 = v12[6];
    if ((v21 - 48) > 9)
      goto LABEL_45;
    v22 = v21 + 10 * (v20 + 10 * (v19 + 10 * (v18 + 10 * (v17 + 10 * v16)))) - 5333328;
    if (v22)
      v15 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_45;
    v23 = v12 + 7;
    v24 = v22 * v14;
    v25 = -7;
    goto LABEL_24;
  }
  if (v11 < 4)
    goto LABEL_45;
  if ((v13 - 58) < 0xFFFFFFF6)
    goto LABEL_45;
  v26 = v12[1];
  if ((v26 - 48) > 9)
    goto LABEL_45;
  v27 = v12[2];
  if ((v27 - 48) > 9)
    goto LABEL_45;
  v28 = v12[3];
  if ((v28 - 48) > 9)
    goto LABEL_45;
  v24 = v28 + 10 * (v27 + 10 * (v26 + 10 * v13)) - 53328;
  v23 = v12 + 4;
  v25 = -4;
LABEL_24:
  v29 = v25 + v11;
  *a2 = v23;
  a2[1] = (unsigned __int16 *)v29;
  if (!v29)
    goto LABEL_45;
  v30 = *v23;
  if (v30 == 45)
  {
    v31 = v29 - 1;
    *a2 = ++v23;
    a2[1] = (unsigned __int16 *)(v29 - 1);
    if (v29 < 6)
      goto LABEL_45;
    v32 = *v23;
  }
  else
  {
    if (v29 < 4)
      goto LABEL_45;
    v32 = *v23;
    v31 = v29;
  }
  if ((v32 & 0xFFFE) != 0x30)
    goto LABEL_45;
  v33 = v23[1];
  *a2 = v23 + 1;
  a2[1] = (unsigned __int16 *)(v31 - 1);
  if ((v33 - 48) > 9)
    goto LABEL_45;
  v34 = v33 + 10 * v32;
  if ((v34 - 541) < 0xFFFFFFF4)
    goto LABEL_45;
  v35 = v31 - 2;
  v36 = v23 + 2;
  *a2 = v23 + 2;
  a2[1] = (unsigned __int16 *)(v31 - 2);
  if (v30 == 45)
  {
    if (*v36 == 45)
    {
      v35 = v31 - 3;
      v36 = v23 + 3;
      *a2 = v23 + 3;
      a2[1] = (unsigned __int16 *)(v31 - 3);
      goto LABEL_36;
    }
LABEL_45:
    v87[0] = 0;
    v93 = 0;
    goto LABEL_46;
  }
LABEL_36:
  v37 = *v36;
  if ((v37 & 0xFFFC) != 0x30)
    goto LABEL_45;
  v38 = v36 + 1;
  *a2 = v36 + 1;
  a2[1] = (unsigned __int16 *)(v35 - 1);
  if (v35 == 1)
  {
    __break(1u);
  }
  else
  {
    v39 = *v38;
    if ((v39 - 48) > 9)
      goto LABEL_45;
    v37 = v39 + 10 * v37 - 528;
    if (!v37)
      goto LABEL_45;
    LOBYTE(v38) = v34 - 16;
    if ((v24 & 3) != 0)
    {
      v40 = 0;
      goto LABEL_44;
    }
    HIDWORD(v41) = -1030792151 * v24 + 85899344;
    LODWORD(v41) = HIDWORD(v41);
    if ((v41 >> 4) >= 0xA3D70B)
    {
      HIDWORD(v42) = -1030792151 * v24 + 85899344;
      LODWORD(v42) = HIDWORD(v42);
      v40 = (v42 >> 2) > 0x28F5C28;
      goto LABEL_44;
    }
  }
  v40 = 1;
LABEL_44:
  if (v37 > JSC::ISO8601::daysInMonths[12 * v40 - 1 + v38])
    goto LABEL_45;
  v66 = v24 & 0x1FFF00 | ((v38 & 0x1F) << 21) | (v37 << 26) | v24;
  *a2 = v36 + 2;
  a2[1] = (unsigned __int16 *)(v35 - 2);
  if (v35 == 2)
    goto LABEL_127;
  v67 = v36[2];
  if (v67 <= 0x73)
  {
    v68 = v67 - 32;
    if (v68 <= 0x3B)
    {
      if (((1 << v68) & 0x400000000002800) != 0)
        goto LABEL_128;
      if (((1 << v68) & 0x10000000000001) == 0)
      {
        if (v68 != 59 || v35 - 2 >= 6 && v36[3] == 117 && v36[4] == 45 && v36[5] == 99 && v36[6] == 97 && v36[7] == 61)
          goto LABEL_127;
LABEL_128:
        JSC::ISO8601::parseTimeZone<char16_t>((uint64_t)&v94, a2);
        if (v98)
        {
          *(_DWORD *)v77 = v66;
          LOBYTE(v81) = 0;
          *(_OWORD *)&v77[8] = v94;
          v77[24] = v95;
          v8 = (unsigned __int16 **)v78;
          v78[0] = 0;
          v80 = -1;
          v74 = v97;
          if (v97 != -1)
          {
            ((void (*)(_BYTE *, char *, char *))off_1E359AC20[v97])(v87, v78, (char *)&v95 + 8);
            v80 = v74;
            v66 = *(_DWORD *)v77;
          }
          LOBYTE(v81) = 1;
          *(_DWORD *)v87 = v66;
          v87[4] = 0;
          v87[12] = 0;
          v92 = 0;
          *(_OWORD *)&v87[16] = *(_OWORD *)&v77[8];
          v88[0] = v77[24];
          v89[0] = 0;
          v91 = -1;
          if ((_DWORD)v74 == -1)
          {
            v92 = 1;
            v93 = 1;
          }
          else
          {
            ((void (*)(unsigned __int16 ***, char *, char *))off_1E359AC20[v74])(&v101, v89, v78);
            v91 = v74;
            v92 = 1;
            v93 = 1;
            if ((_BYTE)v81 && v80 != -1)
              ((void (*)(unsigned __int16 ***, char *))off_1E359AC10[v80])(&v101, v78);
          }
          if (v98 && v97 != -1)
            ((void (*)(_BYTE *, char *))off_1E359AC10[v97])(v77, (char *)&v95 + 8);
          goto LABEL_46;
        }
LABEL_171:
        v87[0] = 0;
        v93 = 0;
        goto LABEL_46;
      }
      goto LABEL_120;
    }
LABEL_127:
    *(_DWORD *)v87 = v66;
    v87[4] = 0;
    v87[12] = 0;
    v87[16] = 0;
    v92 = 0;
    v93 = 1;
    goto LABEL_46;
  }
  if (v67 == 8722 || v67 == 122)
    goto LABEL_128;
  if (v67 != 116)
    goto LABEL_127;
LABEL_120:
  *a2 = v36 + 3;
  a2[1] = (unsigned __int16 *)(v35 - 3);
  v69 = JSC::ISO8601::parseTimeSpec<char16_t>(a2, 0);
  if (!v70)
    goto LABEL_171;
  v8 = v69;
  v71 = (unint64_t)a2[1];
  if (!v71)
    goto LABEL_148;
  v72 = *a2;
  v73 = **a2;
  if (v73 > 0x5A)
  {
    if (v73 != 8722
      && v73 != 122
      && (v73 != 91 || v71 >= 6 && v72[1] == 117 && v72[2] == 45 && v72[3] == 99 && v72[4] == 97 && v72[5] == 61))
    {
      goto LABEL_148;
    }
  }
  else if (v73 != 43 && v73 != 45 && v73 != 90)
  {
LABEL_148:
    *(_QWORD *)v77 = v69;
    v77[8] = 0;
    LOBYTE(v81) = 0;
    v82 = 1;
    v101 = v69;
    LOBYTE(v102) = 0;
    v106 = 0;
LABEL_172:
    *(_DWORD *)v87 = v66;
    *(_QWORD *)&v87[4] = v8;
    v87[12] = 1;
    v87[16] = 0;
    v92 = 0;
    goto LABEL_173;
  }
  JSC::ISO8601::parseTimeZone<char16_t>((uint64_t)&v94, a2);
  if (v98)
  {
    *(_QWORD *)v87 = v8;
    LOBYTE(v91) = 0;
    *(_OWORD *)&v87[8] = v94;
    v87[24] = v95;
    v88[0] = 0;
    v90 = -1;
    v75 = v97;
    if (v97 != -1)
    {
      ((void (*)(_BYTE *, char *, char *))off_1E359AC20[v97])(v77, v88, (char *)&v95 + 8);
      v90 = v75;
      v8 = *(unsigned __int16 ***)v87;
    }
    LOBYTE(v91) = 1;
    *(_QWORD *)v77 = v8;
    LOBYTE(v81) = 0;
    *(_OWORD *)&v77[8] = *(_OWORD *)&v87[8];
    v77[24] = v87[24];
    v78[0] = 0;
    v80 = -1;
    if ((_DWORD)v75 == -1)
    {
      LOBYTE(v81) = 1;
      v82 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 ***, char *, char *))off_1E359AC20[v75])(&v101, v78, v88);
      v80 = v75;
      LOBYTE(v81) = 1;
      v82 = 1;
      if ((_BYTE)v91 && v90 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E359AC10[v90])(&v101, v88);
    }
    if (v98 && v97 != -1)
      ((void (*)(_BYTE *, char *))off_1E359AC10[v97])(v87, (char *)&v95 + 8);
  }
  else
  {
    v77[0] = 0;
    v82 = 0;
  }
  if (!v82)
    goto LABEL_171;
  v8 = *(unsigned __int16 ***)v77;
  v101 = *(unsigned __int16 ***)v77;
  LOBYTE(v102) = 0;
  v106 = 0;
  if (!(_BYTE)v81)
    goto LABEL_172;
  v102 = *(_OWORD *)&v77[8];
  v103 = v77[24];
  v104[0] = 0;
  v105 = -1;
  v76 = v80;
  if (v80 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, char *))off_1E359AC20[v80])(v87, v104, v78);
    v105 = v76;
    v8 = v101;
  }
  v106 = 1;
  LODWORD(v94) = v66;
  *(_QWORD *)((char *)&v94 + 4) = v8;
  v100 = 0;
  v95 = v102;
  v96 = v103;
  LOBYTE(v97) = 0;
  v99 = -1;
  if ((_DWORD)v76 != -1)
  {
    ((void (*)(_BYTE *, unsigned int *, _BYTE *))off_1E359AC20[v76])(v87, &v97, v104);
    v99 = v76;
    v66 = v94;
    v8 = *(unsigned __int16 ***)((char *)&v94 + 4);
  }
  v100 = 1;
  *(_DWORD *)v87 = v66;
  *(_QWORD *)&v87[4] = v8;
  v87[12] = 1;
  v92 = 0;
  *(_OWORD *)&v87[16] = v95;
  v88[0] = v96;
  v89[0] = 0;
  v91 = -1;
  if ((_DWORD)v76 != -1)
  {
    ((void (*)(_BYTE *, char *, unsigned int *))off_1E359AC20[v76])(v107, v89, &v97);
    v91 = v76;
    v92 = 1;
    v93 = 1;
    if (v100 && v99 != -1)
      ((void (*)(_BYTE *, unsigned int *))off_1E359AC10[v99])(v107, &v97);
    goto LABEL_174;
  }
  v92 = 1;
LABEL_173:
  v93 = 1;
LABEL_174:
  if (v106 && v105 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E359AC10[v105])(&v94, v104);
  if (v82 && (_BYTE)v81 && v80 != -1)
    ((void (*)(__int128 *, char *))off_1E359AC10[v80])(&v94, v78);
LABEL_46:
  if (!v93)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
    return;
  }
  v94 = *(_OWORD *)v87;
  LOBYTE(v95) = 0;
  v100 = 0;
  v43 = v92;
  if (v92)
  {
    v95 = *(_OWORD *)&v87[16];
    v96 = v88[0];
    LOBYTE(v97) = 0;
    v99 = -1;
    LODWORD(v8) = v91;
    if (v91 != -1)
    {
      ((void (*)(_BYTE *, unsigned int *, char *))off_1E359AC20[v91])(v77, &v97, v89);
      v99 = (int)v8;
    }
    v100 = 1;
  }
  if ((unint64_t)a2[1] >= 6
    && (v44 = *a2, **a2 == 91)
    && v44[1] == 117
    && v44[2] == 45
    && v44[3] == 99
    && v44[4] == 97
    && v44[5] == 61)
  {
    JSC::ISO8601::parseCalendar<char16_t>((uint64_t)&v101, a2, a3, a4, a5, a6, a7, a8);
    if (v103)
    {
      *(_OWORD *)v77 = v94;
      v77[16] = 0;
      v82 = 0;
      v51 = v100;
      if (v100)
      {
        *(_OWORD *)&v77[16] = v95;
        v78[0] = v96;
        v79[0] = 0;
        v81 = -1;
        v52 = v99;
        if (v99 != -1)
        {
          ((void (*)(_BYTE *, char *, unsigned int *))off_1E359AC20[v99])(v107, v79, &v97);
          v81 = v52;
          v82 = 1;
          LOBYTE(v83) = 0;
          v86 = 0;
          if (!v103)
          {
            *(_DWORD *)a1 = *(_DWORD *)v77;
            *(_QWORD *)(a1 + 4) = *(_QWORD *)&v77[4];
            *(_DWORD *)(a1 + 12) = *(_DWORD *)&v77[12];
            *(_BYTE *)(a1 + 64) = 0;
            *(_OWORD *)(a1 + 16) = *(_OWORD *)&v77[16];
            *(_BYTE *)(a1 + 32) = v78[0];
            *(_BYTE *)(a1 + 40) = 0;
            v53 = a1 + 40;
            *(_DWORD *)(a1 + 56) = -1;
            goto LABEL_90;
          }
LABEL_85:
          v83 = (unsigned __int16 **)&v85;
          __n = 8;
          v57 = v101;
          if (v101 == (unsigned __int16 **)((char *)&v102 + 8))
          {
            v59 = DWORD1(v102);
            memcpy(&v85, v101, DWORD1(v102));
          }
          else
          {
            v101 = (unsigned __int16 **)&v102 + 1;
            v83 = v57;
            v58 = v102;
            v59 = DWORD1(v102);
            LODWORD(v102) = 8;
            LODWORD(__n) = v58;
          }
          DWORD1(v102) = 0;
          HIDWORD(__n) = v59;
          v86 = 1;
          *(_DWORD *)a1 = *(_DWORD *)v77;
          *(_QWORD *)(a1 + 4) = *(_QWORD *)&v77[4];
          *(_DWORD *)(a1 + 12) = *(_DWORD *)&v77[12];
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 64) = 0;
          if (!v51)
            goto LABEL_93;
          v52 = v81;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)&v77[16];
          *(_BYTE *)(a1 + 32) = v78[0];
          *(_BYTE *)(a1 + 40) = 0;
          v53 = a1 + 40;
          *(_DWORD *)(a1 + 56) = -1;
          if (v52 == -1)
          {
            *(_BYTE *)(a1 + 64) = 1;
            *(_BYTE *)(a1 + 96) = 0;
            goto LABEL_93;
          }
LABEL_90:
          ((void (*)(_BYTE *, uint64_t, char *))off_1E359AC20[v52])(v107, v53, v79);
          *(_DWORD *)(a1 + 56) = v52;
          v61 = v86;
          *(_BYTE *)(a1 + 64) = 1;
          *(_BYTE *)(a1 + 72) = 0;
          *(_BYTE *)(a1 + 96) = 0;
          if (!v61)
          {
LABEL_97:
            *(_BYTE *)(a1 + 104) = 1;
            if (v82 && v81 != -1)
              ((void (*)(_BYTE *, char *))off_1E359AC10[v81])(v107, v79);
            if (v103)
            {
              v65 = (unint64_t)v101;
              if ((unsigned __int16 **)((char *)&v102 + 8) != v101)
              {
                if (v101)
                {
                  v101 = 0;
                  LODWORD(v102) = 0;
                  WTF::fastFree(v65, v60, v45, v46, v47, v48, v49, v50);
                }
              }
            }
            goto LABEL_74;
          }
LABEL_93:
          *(_QWORD *)(a1 + 72) = a1 + 88;
          *(_DWORD *)(a1 + 80) = 8;
          v62 = v83;
          v60 = &v85;
          if (v83 == (unsigned __int16 **)&v85)
          {
            v64 = HIDWORD(__n);
            memcpy((void *)(a1 + 88), &v85, HIDWORD(__n));
          }
          else
          {
            v83 = (unsigned __int16 **)&v85;
            *(_QWORD *)(a1 + 72) = v62;
            v63 = __n;
            v64 = HIDWORD(__n);
            LODWORD(__n) = 8;
            *(_DWORD *)(a1 + 80) = v63;
          }
          HIDWORD(__n) = 0;
          *(_DWORD *)(a1 + 84) = v64;
          *(_BYTE *)(a1 + 96) = 1;
          goto LABEL_97;
        }
        v82 = 1;
      }
      v86 = 0;
      goto LABEL_85;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    v54 = v94;
    *(_OWORD *)v77 = v94;
    v82 = 0;
    if (v43)
    {
      *(_OWORD *)&v77[16] = v95;
      v78[0] = v96;
      v79[0] = 0;
      v81 = -1;
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, unsigned int *))off_1E359AC20[v8])(&v101, v79, &v97);
        v81 = (int)v8;
        v54 = *(_DWORD *)v77;
      }
      v82 = 1;
      *(_DWORD *)a1 = v54;
      *(_QWORD *)(a1 + 4) = *(_QWORD *)&v77[4];
      *(_DWORD *)(a1 + 12) = *(_DWORD *)&v77[12];
      *(_BYTE *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&v77[16];
      *(_BYTE *)(a1 + 32) = v78[0];
      *(_BYTE *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 56) = -1;
      if ((_DWORD)v8 == -1)
      {
        *(_BYTE *)(a1 + 64) = 1;
        *(_BYTE *)(a1 + 72) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        v56 = -1;
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, uint64_t, char *))off_1E359AC20[v8])(&v101, a1 + 40, v79);
        *(_DWORD *)(a1 + 56) = (_DWORD)v8;
        v55 = v82;
        *(_BYTE *)(a1 + 64) = 1;
        *(_BYTE *)(a1 + 72) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        if (!v55)
          goto LABEL_74;
        v56 = v81;
      }
      if (v56 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E359AC10[v56])(&v101, v79);
      goto LABEL_74;
    }
    *(_OWORD *)a1 = v94;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
LABEL_74:
  if (v100 && v99 != -1)
    ((void (*)(_BYTE *, unsigned int *))off_1E359AC10[v99])(v77, &v97);
  if (v93 && v92 && v91 != -1)
    ((void (*)(_BYTE *, char *))off_1E359AC10[v91])(v77, v89);
}

uint64_t WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::add<WTF::URL>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF **v15;
  int i;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  uint64_t result;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v14 = v13 >> 8;
  v15 = 0;
  for (i = 1; ; ++i)
  {
    v17 = v14 & v12;
    v18 = (WTF **)(v11 + 48 * (v14 & v12));
    v19 = *v18;
    if (*v18 != (WTF *)-1)
      break;
    v15 = (WTF **)(v11 + 48 * v17);
LABEL_12:
    v14 = i + v17;
  }
  if (!v19)
  {
    if (v15)
    {
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)v15 = 0u;
      --*(_DWORD *)(*a2 - 16);
      v18 = v15;
    }
    v21 = *a3;
    if (*a3)
      *(_DWORD *)v21 += 2;
    *v18 = v21;
    result = WTF::URL::operator=((uint64_t)(v18 + 1), a4, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *a2;
    if (*a2)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
        goto LABEL_24;
    }
    else if (3 * v32 <= 4 * v31)
    {
      if (!(_DWORD)v32)
      {
        v33 = 8;
LABEL_31:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v33, (uint64_t)v18, v22, v23, v24, v25, v26);
        v18 = (WTF **)result;
        v29 = *a2;
        if (*a2)
          LODWORD(v32) = *(_DWORD *)(v29 - 4);
        else
          LODWORD(v32) = 0;
        goto LABEL_33;
      }
LABEL_24:
      v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
      goto LABEL_31;
    }
LABEL_33:
    v37 = v29 + 48 * v32;
    v36 = 1;
    goto LABEL_34;
  }
  result = WTF::equal(v19, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_12;
  v34 = *a2;
  if (*a2)
    v35 = *(_DWORD *)(v34 - 4);
  else
    v35 = 0;
  v36 = 0;
  v37 = v34 + 48 * v35;
LABEL_34:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v37;
  *(_BYTE *)(a1 + 16) = v36;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(48 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    while (1)
    {
      v23 = (WTF::StringImpl **)(v9 + 48 * v20);
      v24 = *v23;
      if (*v23 != (WTF::StringImpl *)-1)
      {
        if (v24)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = *((_DWORD *)v24 + 4);
          if (v29 < 0x100)
            v30 = WTF::StringImpl::hashSlowCase(v24);
          else
            v30 = v29 >> 8;
          v31 = 0;
          do
          {
            v32 = v30 & v28;
            v33 = (WTF::StringImpl **)(v27 + 48 * (v30 & v28));
            v30 = ++v31 + (v30 & v28);
          }
          while (*v33);
          v34 = v27 + 48 * v32;
          v37 = *(WTF::StringImpl **)(v34 + 8);
          v36 = (_QWORD *)(v34 + 8);
          v35 = v37;
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v35 != 2)
            {
              *(_DWORD *)v35 -= 2;
              goto LABEL_23;
            }
            WTF::StringImpl::~StringImpl(v35, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
            v72 = *v33;
            *v33 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
              {
                WTF::StringImpl::~StringImpl(v72, v13, v14, v15, v16, v17, v18, v19);
                WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
              }
              else
              {
                *(_DWORD *)v72 -= 2;
              }
            }
          }
          else
          {
LABEL_23:
            *v33 = 0;
          }
          v38 = *v23;
          *v23 = 0;
          *v33 = v38;
          v39 = v9 + 48 * v20;
          v40 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          *v36 = v40;
          v41 = v27 + 48 * v32;
          v42 = *(_DWORD *)(v41 + 16) & 0xFFFFFFFE | *(_DWORD *)(v39 + 16) & 1;
          *(_DWORD *)(v41 + 16) = v42;
          v43 = v42 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v39 + 16) >> 1) & 1));
          *(_DWORD *)(v41 + 16) = v43;
          v44 = v43 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v39 + 16) >> 2) & 1));
          *(_DWORD *)(v41 + 16) = v44;
          v45 = v44 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(v39 + 16) >> 3) & 7));
          *(_DWORD *)(v41 + 16) = v45;
          *(_DWORD *)(v41 + 16) = *(_DWORD *)(v39 + 16) & 0xFFFFFFC0 | v45 & 0x3F;
          *(_OWORD *)(v41 + 20) = *(_OWORD *)(v39 + 20);
          *(_QWORD *)(v41 + 36) = *(_QWORD *)(v39 + 36);
          *(_DWORD *)(v41 + 44) = *(_DWORD *)(v39 + 44);
          *(_DWORD *)(v39 + 16) &= ~1u;
          v46 = *(WTF::StringImpl **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
          v47 = *v23;
          *v23 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
          if (v23 == (WTF::StringImpl **)a3)
            v21 = v27 + 48 * v32;
          goto LABEL_32;
        }
        v25 = v9 + 48 * v20;
        v26 = *(WTF::StringImpl **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            v24 = *v23;
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        *v23 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
LABEL_32:
      if (++v20 == v22)
        goto LABEL_44;
    }
  }
  v21 = 0;
  result = 0;
  if (v9)
  {
LABEL_44:
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
    return v21;
  }
  return result;
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = *a2;
  *a2 = 0;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v12 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v12 & 0xFFFFFFFE;
  v13 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v12 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v14;
  v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v15 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return a1;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, char *__src, unsigned int a4, uint64_t a5, char *a6, unsigned int a7)
{
  char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  char *result;
  char *v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  unsigned __int128 *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  char v29;
  char v30;

  if (a2)
  {
    v14 = *(char **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v15 == 1)
      {
        *__dst = *v14;
      }
      else if ((_DWORD)v15)
      {
        memcpy(__dst, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v23 = __dst;
      }
      else
      {
        v23 = &__dst[v15 & 0xFFFFFFF0];
        v24 = (unsigned __int128 *)__dst;
        do
        {
          v25 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v24++ = v25;
        }
        while (v24 != (unsigned __int128 *)v23);
      }
      while (v23 != &__dst[v15])
      {
        v29 = *v14;
        v14 += 2;
        *v23++ = v29;
      }
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &__dst[v16];
  if (a4 == 1)
  {
    *v17 = *__src;
  }
  else if (a4)
  {
    memcpy(v17, __src, a4);
  }
  v18 = &v17[a4];
  if (a5)
  {
    v19 = *(char **)(a5 + 8);
    v20 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v20 == 1)
      {
        *v18 = *v19;
      }
      else if ((_DWORD)v20)
      {
        memcpy(v18, v19, v20);
      }
    }
    else
    {
      if (v20 < 0x10)
      {
        v26 = (unsigned __int128 *)v18;
      }
      else
      {
        v26 = (unsigned __int128 *)&v18[v20 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)v18;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v19);
          v19 += 32;
          *v27++ = v28;
        }
        while (v27 != v26);
      }
      while (v26 != (unsigned __int128 *)&v18[v20])
      {
        v30 = *v19;
        v19 += 2;
        *(_BYTE *)v26 = v30;
        v26 = (unsigned __int128 *)((char *)v26 + 1);
      }
    }
    v21 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v21 = 0;
  }
  result = &v18[v21];
  if (a7 == 1)
  {
    *result = *a6;
  }
  else if (a7)
  {
    return (char *)memcpy(result, a6, a7);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,false>(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  const WTF::String *v9;
  WTF *v10;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  const WTF::String *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  unsigned __int16 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  const WTF::String *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  unsigned __int16 *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int8 *v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  _BOOL4 v97;
  unsigned __int16 *v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned __int8 *v102;
  unsigned __int16 *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  WTF::StringImpl **v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  WTF::StringImpl **v120;
  WTF::StringImpl **v121;
  WTF::StringImpl **v122;
  WTF::StringImpl *v123;
  BOOL v124;
  const WTF::String *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  int v145;
  WTF *v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 *v152;
  unsigned __int16 *v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  int v157;
  unsigned __int16 *v158;
  unsigned __int8 *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned __int8 *v162;
  unsigned __int16 *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unsigned __int16 *v180;
  unsigned __int16 *v181;
  unsigned int v182;
  unsigned int v183;
  BOOL v184;
  unsigned __int16 *v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unsigned int v188;
  unsigned __int8 *v189;
  unsigned __int16 *v190;
  unsigned int v191;
  unsigned int v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  unsigned int v195;
  unsigned int v196;
  WTF::StringImpl **v197;
  uint64_t v198;
  WTF::StringImpl **v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  WTF::StringImpl **v206;
  WTF::StringImpl **v207;
  WTF::StringImpl **v208;
  WTF::StringImpl *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  WTF::StringImpl **v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF *v245;
  WTF::StringImpl **v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  WTF *v264;
  WTF::StringImpl **v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  WTF::StringImpl **v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF::StringImpl **v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  unint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF::StringImpl **v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  WTF *v349;
  BOOL v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  WTF::AtomStringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  WTF::StringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  int v366;
  uint64_t v367;
  WTF::StringImpl **v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  unsigned __int16 *v373;
  unsigned __int16 *v374;
  unsigned int v375;
  unsigned int v376;
  BOOL v377;
  int v378;
  unsigned __int16 *v379;
  unsigned __int8 *v380;
  unsigned int v381;
  unsigned int v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned __int8 *v391;
  unsigned __int16 *v392;
  unsigned int v393;
  unsigned int v394;
  unsigned __int8 *v395;
  unsigned __int8 *v396;
  unsigned int v397;
  unsigned int v398;
  uint64_t v399;
  WTF::StringImpl **v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  unint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  WTF::StringImpl *v420;
  WTF::StringImpl **v421;
  unint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  WTF::StringImpl **v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  unint64_t v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int64_t v450;
  int64_t v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  WTF::StringImpl *v455;
  uint64_t v456;
  WTF::StringImpl **v457;
  uint64_t *v458;
  uint64_t v459;
  WTF::StringImpl **v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  WTF::StringImpl **v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  unint64_t v467;
  void *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  WTF::StringImpl **v489;
  WTF::StringImpl **v490;
  WTF::StringImpl *v491;
  unint64_t v492;
  void *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  void *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  WTF::StringImpl **v509;
  WTF::StringImpl *v510;
  WTF::StringImpl *v511;
  unint64_t v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  WTF::StringImpl **v529;
  WTF::StringImpl *v530;
  WTF::StringImpl *v531;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int64_t v548;
  uint64_t v549;
  WTF::StringImpl *v550;
  WTF *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  WTF::StringImpl *v556;
  int v557;
  unsigned int v558;
  unsigned int v559;
  uint64_t v560;
  unsigned __int16 *v561;
  unsigned __int16 *v562;
  unsigned int v563;
  unsigned int v564;
  BOOL v565;
  int v566;
  unsigned __int16 *v567;
  unsigned __int8 *v568;
  unsigned int v569;
  unsigned int v570;
  unsigned __int8 *v571;
  unsigned __int16 *v572;
  unsigned int v573;
  unsigned int v574;
  unsigned __int8 *v575;
  unsigned __int8 *v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  WTF::StringImpl *v580;
  WTF::StringImpl *v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  uint64_t v586;
  WTF::StringImpl **v587;
  unint64_t v588;
  void *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  WTF::StringImpl **v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  unint64_t v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  void *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  WTF::StringImpl **v618;
  WTF::StringImpl *v619;
  WTF::StringImpl **v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t v623;
  WTF::StringImpl *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  WTF::StringImpl *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  uint64_t v633;
  WTF::StringImpl **v634;
  int v635;
  unsigned int v636;
  unsigned int v637;
  uint64_t v638;
  unsigned __int16 *v639;
  unsigned __int16 *v640;
  unsigned int v641;
  unsigned int v642;
  BOOL v643;
  int v644;
  unsigned __int16 *v645;
  unsigned __int8 *v646;
  unsigned int v647;
  unsigned int v648;
  unint64_t v649;
  void *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned __int8 *v657;
  unsigned __int16 *v658;
  unsigned int v659;
  unsigned int v660;
  unsigned __int8 *v661;
  unsigned __int8 *v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  WTF::StringImpl **v666;
  WTF::StringImpl *v667;
  WTF::StringImpl *v668;
  unint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  void *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  WTF::StringImpl *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  WTF::StringImpl *v689;
  WTF::StringImpl *v690;
  unint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  void *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  WTF::StringImpl *v707;
  unint64_t v708;
  void *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  void *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  void *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  WTF::StringImpl **v733;
  WTF::StringImpl *v734;
  WTF::StringImpl *v735;
  unint64_t v736;
  void *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  void *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  WTF::StringImpl **v753;
  WTF::StringImpl *v754;
  WTF::StringImpl *v755;
  unint64_t v756;
  void *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t v764;
  void *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  WTF::StringImpl *v775;
  WTF::StringImpl *v776;
  unint64_t v777;
  void *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  void *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  WTF::AtomStringImpl *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  WTF::StringImpl *v803;
  uint64_t v804;
  WTF *v805;
  WTF::StringImpl *v806;
  int v807;
  uint64_t v808;
  WTF::StringImpl ***v809;
  uint64_t v810;
  WTF::StringImpl **v811;
  int v812;
  unsigned int v813;
  unsigned int v814;
  uint64_t v815;
  unsigned __int16 *v816;
  unsigned __int16 *v817;
  unsigned int v818;
  unsigned int v819;
  BOOL v820;
  int v821;
  unsigned __int16 *v822;
  unsigned __int8 *v823;
  unsigned int v824;
  unsigned int v825;
  unint64_t v826;
  void *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unsigned __int8 *v834;
  unsigned __int16 *v835;
  unsigned int v836;
  unsigned int v837;
  unsigned __int8 *v838;
  unsigned __int8 *v839;
  unsigned int v840;
  unsigned int v841;
  WTF *v842;
  WTF::StringImpl **v843;
  WTF::StringImpl *v844;
  WTF::StringImpl *v845;
  unint64_t v846;
  void *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  void *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  WTF::StringImpl *v861;
  WTF::StringImpl **v862;
  unint64_t v863;
  void *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  WTF::StringImpl **v872;
  WTF::StringImpl *v873;
  WTF::StringImpl *v874;
  unint64_t v875;
  void *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  void *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  WTF::StringImpl *v892;
  uint64_t v893;
  int v894;
  int v895;
  WTF *v896;
  WTF *v897;
  WTF *v898;
  int v899;
  WTF *v900;
  WTF *v901;
  WTF *v902;
  WTF *v903;
  WTF *v904;
  WTF *v905;
  int v906;
  WTF *v907;
  WTF *v908;
  WTF *v909;
  WTF *v910;
  WTF *v911;
  WTF *v912;
  WTF *v913;
  int v914;
  WTF *v915;
  WTF *v916;
  WTF *v917;
  uint64_t v918;
  int v919;
  uint64_t v920;
  uint64_t v921;
  WTF::StringImpl **v922;
  WTF *v923[2];
  unint64_t v924;
  int v925;
  WTF *v926[2];
  WTF *v927[2];
  const WTF::String *v928;
  WTF *v929[2];
  int64_t v930;
  int v931;
  WTF *v932[2];
  WTF *v933[2];
  WTF::StringImpl *v934;
  _BYTE v935[32];
  WTF::StringImpl **v936;

  v8 = a4;
  v9 = a3;
  v10 = a2;
LABEL_2:
  v928 = (WTF *)((char *)v10 - 48);
  v12 = (WTF *)a1;
  while (2)
  {
    a1 = (uint64_t)v12;
    v13 = v10 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v12) >> 4);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (WTF::codePointCompareLessThan((WTF *)a1, v928, a3))
          std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>(a1, (uint64_t)v928, v343, v344, v345, v346, v347, v348);
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)a1, (const WTF::String *)(a1 + 48), v928);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)a1, (const WTF::String *)(a1 + 48), (const WTF::String *)(a1 + 96), v928);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,0>((WTF *)a1, (const WTF::String *)(a1 + 48), (const WTF::String *)(a1 + 96), (const WTF::String *)(a1 + 144), v928);
        return;
      default:
        if (v13 <= 1151)
        {
          v349 = (WTF *)(a1 + 48);
          v350 = (WTF *)a1 == v10 || v349 == v10;
          v351 = v350;
          if ((v8 & 1) != 0)
          {
            if ((v351 & 1) != 0)
              return;
            v352 = a1;
LABEL_386:
            v353 = v352;
            v352 = (uint64_t)v349;
            if (!WTF::codePointCompareLessThan((WTF *)v353, v349, a3))
              goto LABEL_456;
            v360 = *(WTF::StringImpl **)v349;
            *(_QWORD *)v349 = 0;
            *(_OWORD *)v923 = *(_OWORD *)(v353 + 72);
            *(_OWORD *)v929 = *(_OWORD *)(v353 + 56);
            *(_DWORD *)(v353 + 56) = (uint64_t)v929[0] & 0xFFFFFFFE;
            v361 = *(_QWORD *)(v353 + 88);
            *(_QWORD *)(v353 + 88) = 0;
            v362 = *(_QWORD *)v353;
            v363 = (uint64_t)v349;
            while (1)
            {
              v364 = v363;
              v363 = v353;
              *(_QWORD *)v353 = 0;
              v365 = *(WTF::StringImpl **)v364;
              *(_QWORD *)v364 = v362;
              if (v365)
              {
                if (*(_DWORD *)v365 == 2)
                {
                  WTF::StringImpl::~StringImpl(v365, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                  WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
                }
                else
                {
                  *(_DWORD *)v365 -= 2;
                }
              }
              v366 = *(_DWORD *)(v353 + 8);
              *(_DWORD *)(v353 + 8) = v366 & 0xFFFFFFFE;
              *(_DWORD *)(v364 + 8) = v366;
              *(_OWORD *)(v364 + 12) = *(_OWORD *)(v353 + 12);
              *(_QWORD *)(v364 + 28) = *(_QWORD *)(v353 + 28);
              *(_DWORD *)(v364 + 36) = *(_DWORD *)(v353 + 36);
              v367 = *(_QWORD *)(v353 + 40);
              *(_QWORD *)(v353 + 40) = 0;
              v368 = *(WTF::StringImpl ***)(v364 + 40);
              *(_QWORD *)(v364 + 40) = v367;
              if (v368)
              {
                v399 = *((unsigned int *)v368 - 1);
                if ((_DWORD)v399)
                {
                  v400 = v368;
                  do
                  {
                    v401 = *v400;
                    if (*v400 != (WTF::StringImpl *)-1)
                    {
                      v402 = v400[1];
                      v400[1] = 0;
                      if (v402)
                      {
                        if (*(_DWORD *)v402 == 2)
                        {
                          v918 = v399;
                          WTF::StringImpl::~StringImpl(v402, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                          WTF::fastFree(v403, v404, v405, v406, v407, v408, v409, v410);
                          v399 = v918;
                          v401 = *v400;
                        }
                        else
                        {
                          *(_DWORD *)v402 -= 2;
                        }
                      }
                      *v400 = 0;
                      if (v401)
                      {
                        if (*(_DWORD *)v401 == 2)
                        {
                          v411 = v399;
                          WTF::StringImpl::~StringImpl(v401, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                          WTF::fastFree(v412, v413, v414, v415, v416, v417, v418, v419);
                          v399 = v411;
                        }
                        else
                        {
                          *(_DWORD *)v401 -= 2;
                        }
                      }
                    }
                    v400 += 6;
                    --v399;
                  }
                  while (v399);
                }
                WTF::fastFree((unint64_t)(v368 - 2), v354, (uint64_t)a3, v355, v356, v357, v358, v359);
              }
              if (v363 == a1)
              {
                v363 = a1;
LABEL_452:
                v420 = *(WTF::StringImpl **)v363;
                *(_QWORD *)v363 = v360;
                if (v420)
                {
                  if (*(_DWORD *)v420 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v420, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                    WTF::fastFree(v422, v423, v424, v425, v426, v427, v428, v429);
                  }
                  else
                  {
                    *(_DWORD *)v420 -= 2;
                  }
                }
                *(_OWORD *)(v363 + 8) = *(_OWORD *)v929;
                *(_OWORD *)(v363 + 24) = *(_OWORD *)v923;
                v421 = *(WTF::StringImpl ***)(v363 + 40);
                *(_QWORD *)(v363 + 40) = v361;
                if (v421)
                {
                  v430 = *((unsigned int *)v421 - 1);
                  if ((_DWORD)v430)
                  {
                    v431 = v421;
                    do
                    {
                      v432 = *v431;
                      if (*v431 != (WTF::StringImpl *)-1)
                      {
                        v433 = v431[1];
                        v431[1] = 0;
                        if (v433)
                        {
                          if (*(_DWORD *)v433 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v433, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                            WTF::fastFree(v434, v435, v436, v437, v438, v439, v440, v441);
                            v432 = *v431;
                          }
                          else
                          {
                            *(_DWORD *)v433 -= 2;
                          }
                        }
                        *v431 = 0;
                        if (v432)
                        {
                          if (*(_DWORD *)v432 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v432, v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                            WTF::fastFree(v442, v443, v444, v445, v446, v447, v448, v449);
                          }
                          else
                          {
                            *(_DWORD *)v432 -= 2;
                          }
                        }
                      }
                      v431 += 6;
                      --v430;
                    }
                    while (v430);
                  }
                  WTF::fastFree((unint64_t)(v421 - 2), v354, (uint64_t)a3, v355, v356, v357, v358, v359);
                }
LABEL_456:
                v349 = (WTF *)(v352 + 48);
                if ((WTF *)(v352 + 48) == v10)
                  return;
                goto LABEL_386;
              }
              v353 = v363 - 48;
              v362 = *(_QWORD *)(v363 - 48);
              if (!v362)
              {
                if (!v360)
                  goto LABEL_452;
                if (*((_DWORD *)v360 + 1))
                  v378 = -1;
                else
                  v378 = 0;
                goto LABEL_435;
              }
              if (!v360)
                goto LABEL_452;
              v369 = *((_DWORD *)v360 + 4);
              v370 = *(_DWORD *)(v362 + 4);
              v371 = *((_DWORD *)v360 + 1);
              if (v371 >= v370)
                v372 = v370;
              else
                v372 = v371;
              if ((*(_BYTE *)(v362 + 16) & 4) != 0)
              {
                if ((v369 & 4) != 0)
                {
                  if ((_DWORD)v372)
                  {
                    v395 = (unsigned __int8 *)*((_QWORD *)v360 + 1);
                    v396 = *(unsigned __int8 **)(v362 + 8);
                    do
                    {
                      v397 = *v396;
                      v398 = *v395;
                      v377 = v397 > v398;
                      if (v397 != v398)
                        goto LABEL_430;
                      ++v396;
                      ++v395;
                    }
                    while (--v372);
                  }
                }
                else if ((_DWORD)v372)
                {
                  v379 = (unsigned __int16 *)*((_QWORD *)v360 + 1);
                  v380 = *(unsigned __int8 **)(v362 + 8);
                  while (1)
                  {
                    v381 = *v380;
                    v382 = *v379;
                    if (v382 != v381)
                      break;
                    ++v380;
                    ++v379;
                    if (!--v372)
                      goto LABEL_425;
                  }
                  if (v382 < v381)
                    goto LABEL_452;
                  goto LABEL_434;
                }
              }
              else if ((v369 & 4) != 0)
              {
                if ((_DWORD)v372)
                {
                  v391 = (unsigned __int8 *)*((_QWORD *)v360 + 1);
                  v392 = *(unsigned __int16 **)(v362 + 8);
                  do
                  {
                    v393 = *v392;
                    v394 = *v391;
                    v377 = v393 > v394;
                    if (v393 != v394)
                      goto LABEL_430;
                    ++v392;
                    ++v391;
                  }
                  while (--v372);
                }
              }
              else if ((_DWORD)v372)
              {
                v373 = (unsigned __int16 *)*((_QWORD *)v360 + 1);
                v374 = *(unsigned __int16 **)(v362 + 8);
                while (1)
                {
                  v375 = *v374;
                  v376 = *v373;
                  v377 = v375 > v376;
                  if (v375 != v376)
                    break;
                  ++v374;
                  ++v373;
                  if (!--v372)
                    goto LABEL_425;
                }
LABEL_430:
                if (v377)
                  goto LABEL_452;
LABEL_434:
                v378 = -1;
                goto LABEL_435;
              }
LABEL_425:
              if (v371 < v370)
                v378 = 1;
              else
                v378 = -1;
              if (v370 == v371)
                goto LABEL_452;
LABEL_435:
              if ((v378 & 0x80000000) == 0)
                goto LABEL_452;
            }
          }
          if ((v351 & 1) != 0)
            return;
          v793 = 0;
          v794 = 1;
          v795 = a1;
          while (1)
          {
            v796 = v793;
            v793 = v794;
            if (WTF::codePointCompareLessThan((WTF *)v795, v349, a3))
              break;
LABEL_825:
            v795 = a1 + 48 * v793;
            v794 = v793 + 1;
            v349 = (WTF *)(v795 + 48);
            if ((WTF *)(v795 + 48) == v10)
              return;
          }
          v803 = *(WTF::StringImpl **)v349;
          *(_QWORD *)v349 = 0;
          *(_OWORD *)v927 = *(_OWORD *)(v795 + 72);
          *(_OWORD *)v933 = *(_OWORD *)(v795 + 56);
          *(_DWORD *)(v795 + 56) = (uint64_t)v933[0] & 0xFFFFFFFE;
          v922 = *(WTF::StringImpl ***)(v795 + 88);
          *(_QWORD *)(v795 + 88) = 0;
          v804 = *(_QWORD *)(a1 + 48 * v796);
          while (1)
          {
            v805 = v349;
            v349 = (WTF *)(a1 + 48 * v796);
            *(_QWORD *)v349 = 0;
            v806 = *(WTF::StringImpl **)v805;
            *(_QWORD *)v805 = v804;
            if (v806)
            {
              if (*(_DWORD *)v806 == 2)
              {
                WTF::StringImpl::~StringImpl(v806, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                WTF::fastFree(v826, v827, v828, v829, v830, v831, v832, v833);
              }
              else
              {
                *(_DWORD *)v806 -= 2;
              }
            }
            v807 = *((_DWORD *)v349 + 2);
            *((_DWORD *)v349 + 2) = v807 & 0xFFFFFFFE;
            *((_DWORD *)v805 + 2) = v807;
            *(_OWORD *)((char *)v805 + 12) = *(_OWORD *)((char *)v349 + 12);
            *(_QWORD *)((char *)v805 + 28) = *(_QWORD *)((char *)v349 + 28);
            *((_DWORD *)v805 + 9) = *((_DWORD *)v349 + 9);
            v808 = a1 + 48 * v796;
            v810 = *(_QWORD *)(v808 + 40);
            v809 = (WTF::StringImpl ***)(v808 + 40);
            *v809 = 0;
            v811 = (WTF::StringImpl **)*((_QWORD *)v805 + 5);
            *((_QWORD *)v805 + 5) = v810;
            if (v811)
            {
              v842 = (WTF *)*((unsigned int *)v811 - 1);
              if ((_DWORD)v842)
              {
                v843 = v811;
                do
                {
                  v844 = *v843;
                  if (*v843 != (WTF::StringImpl *)-1)
                  {
                    v845 = v843[1];
                    v843[1] = 0;
                    if (v845)
                    {
                      if (*(_DWORD *)v845 == 2)
                      {
                        v916 = v842;
                        WTF::StringImpl::~StringImpl(v845, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                        WTF::fastFree(v846, v847, v848, v849, v850, v851, v852, v853);
                        v842 = v916;
                        v844 = *v843;
                      }
                      else
                      {
                        *(_DWORD *)v845 -= 2;
                      }
                    }
                    *v843 = 0;
                    if (v844)
                    {
                      if (*(_DWORD *)v844 == 2)
                      {
                        v907 = v844;
                        v917 = v842;
                        WTF::StringImpl::~StringImpl(v844, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                        WTF::fastFree((unint64_t)v907, v854, v855, v856, v857, v858, v859, v860);
                        v842 = v917;
                      }
                      else
                      {
                        *(_DWORD *)v844 -= 2;
                      }
                    }
                  }
                  v843 += 6;
                  v842 = (WTF *)((char *)v842 - 1);
                }
                while (v842);
              }
              WTF::fastFree((unint64_t)(v811 - 2), v797, (uint64_t)a3, v798, v799, v800, v801, v802);
            }
            if (v796 == -1)
              goto LABEL_842;
            --v796;
            v804 = *(_QWORD *)(a1 + 48 * v796);
            if (!v804)
            {
              if (!v803)
                goto LABEL_821;
              if (*((_DWORD *)v803 + 1))
                v821 = -1;
              else
                v821 = 0;
              goto LABEL_805;
            }
            if (!v803)
              goto LABEL_821;
            v812 = *((_DWORD *)v803 + 4);
            v813 = *(_DWORD *)(v804 + 4);
            v814 = *((_DWORD *)v803 + 1);
            if (v814 >= v813)
              v815 = v813;
            else
              v815 = v814;
            if ((*(_BYTE *)(v804 + 16) & 4) != 0)
            {
              if ((v812 & 4) != 0)
              {
                if ((_DWORD)v815)
                {
                  v838 = (unsigned __int8 *)*((_QWORD *)v803 + 1);
                  v839 = *(unsigned __int8 **)(v804 + 8);
                  do
                  {
                    v840 = *v839;
                    v841 = *v838;
                    v820 = v840 > v841;
                    if (v840 != v841)
                      goto LABEL_800;
                    ++v839;
                    ++v838;
                  }
                  while (--v815);
                }
              }
              else if ((_DWORD)v815)
              {
                v822 = (unsigned __int16 *)*((_QWORD *)v803 + 1);
                v823 = *(unsigned __int8 **)(v804 + 8);
                while (1)
                {
                  v824 = *v823;
                  v825 = *v822;
                  if (v825 != v824)
                    break;
                  ++v823;
                  ++v822;
                  if (!--v815)
                    goto LABEL_795;
                }
                if (v825 < v824)
                {
LABEL_821:
                  v861 = *(WTF::StringImpl **)v349;
                  *(_QWORD *)v349 = v803;
                  if (v861)
                  {
                    if (*(_DWORD *)v861 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v861, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                      WTF::fastFree(v863, v864, v865, v866, v867, v868, v869, v870);
                    }
                    else
                    {
                      *(_DWORD *)v861 -= 2;
                    }
                  }
                  *(_OWORD *)((char *)v349 + 8) = *(_OWORD *)v933;
                  *(_OWORD *)((char *)v349 + 24) = *(_OWORD *)v927;
                  v862 = *v809;
                  *v809 = v922;
                  if (v862)
                  {
                    v871 = *((unsigned int *)v862 - 1);
                    if ((_DWORD)v871)
                    {
                      v872 = v862;
                      do
                      {
                        v873 = *v872;
                        if (*v872 != (WTF::StringImpl *)-1)
                        {
                          v874 = v872[1];
                          v872[1] = 0;
                          if (v874)
                          {
                            if (*(_DWORD *)v874 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v874, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                              WTF::fastFree(v875, v876, v877, v878, v879, v880, v881, v882);
                              v873 = *v872;
                            }
                            else
                            {
                              *(_DWORD *)v874 -= 2;
                            }
                          }
                          *v872 = 0;
                          if (v873)
                          {
                            if (*(_DWORD *)v873 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v873, v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                              WTF::fastFree(v883, v884, v885, v886, v887, v888, v889, v890);
                            }
                            else
                            {
                              *(_DWORD *)v873 -= 2;
                            }
                          }
                        }
                        v872 += 6;
                        --v871;
                      }
                      while (v871);
                    }
                    WTF::fastFree((unint64_t)(v862 - 2), v797, (uint64_t)a3, v798, v799, v800, v801, v802);
                  }
                  goto LABEL_825;
                }
                goto LABEL_804;
              }
            }
            else if ((v812 & 4) != 0)
            {
              if ((_DWORD)v815)
              {
                v834 = (unsigned __int8 *)*((_QWORD *)v803 + 1);
                v835 = *(unsigned __int16 **)(v804 + 8);
                do
                {
                  v836 = *v835;
                  v837 = *v834;
                  v820 = v836 > v837;
                  if (v836 != v837)
                    goto LABEL_800;
                  ++v835;
                  ++v834;
                }
                while (--v815);
              }
            }
            else if ((_DWORD)v815)
            {
              v816 = (unsigned __int16 *)*((_QWORD *)v803 + 1);
              v817 = *(unsigned __int16 **)(v804 + 8);
              while (1)
              {
                v818 = *v817;
                v819 = *v816;
                v820 = v818 > v819;
                if (v818 != v819)
                  break;
                ++v817;
                ++v816;
                if (!--v815)
                  goto LABEL_795;
              }
LABEL_800:
              if (v820)
                goto LABEL_821;
LABEL_804:
              v821 = -1;
              goto LABEL_805;
            }
LABEL_795:
            if (v814 < v813)
              v821 = 1;
            else
              v821 = -1;
            if (v813 == v814)
              goto LABEL_821;
LABEL_805:
            if ((v821 & 0x80000000) == 0)
              goto LABEL_821;
          }
        }
        if (!v9)
        {
          if ((WTF *)a1 == v10)
            return;
          v450 = (unint64_t)(v14 - 2) >> 1;
          v930 = v450;
          do
          {
            v451 = v450;
            if (v930 >= v450)
            {
              v452 = (2 * v450) | 1;
              v453 = (uint64_t *)(a1 + 48 * v452);
              if (2 * v450 + 2 < v14
                && WTF::codePointCompareLessThan((WTF *)(v453 + 6), (const WTF::String *)(a1 + 48 * v452), a3))
              {
                v453 += 6;
                v452 = 2 * v451 + 2;
              }
              v454 = a1 + 48 * v451;
              if ((WTF::codePointCompareLessThan((WTF *)v454, (const WTF::String *)v453, a3) & 1) == 0)
              {
                v455 = *(WTF::StringImpl **)v454;
                *(_QWORD *)v454 = 0;
                v934 = v455;
                *(_DWORD *)v935 = *(_DWORD *)(v454 + 8);
                *(_OWORD *)&v935[4] = *(_OWORD *)(v454 + 12);
                *(_QWORD *)&v935[20] = *(_QWORD *)(v454 + 28);
                *(_DWORD *)&v935[28] = *(_DWORD *)(v454 + 36);
                *(_DWORD *)(v454 + 8) = *(_DWORD *)v935 & 0xFFFFFFFE;
                v456 = a1 + 48 * v451;
                v457 = *(WTF::StringImpl ***)(v456 + 40);
                *(_QWORD *)(v456 + 40) = 0;
                v936 = v457;
                do
                {
                  v458 = v453;
                  WTF::URL::operator=(v454, v453, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v459 = v453[5];
                  v453[5] = 0;
                  v460 = *(WTF::StringImpl ***)(v454 + 40);
                  *(_QWORD *)(v454 + 40) = v459;
                  if (v460)
                  {
                    v463 = *((unsigned int *)v460 - 1);
                    if ((_DWORD)v463)
                    {
                      v464 = v460;
                      do
                      {
                        v465 = *v464;
                        if (*v464 != (WTF::StringImpl *)-1)
                        {
                          v466 = v464[1];
                          v464[1] = 0;
                          if (v466)
                          {
                            if (*(_DWORD *)v466 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v466, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                              WTF::fastFree(v467, v468, v469, v470, v471, v472, v473, v474);
                              v465 = *v464;
                            }
                            else
                            {
                              *(_DWORD *)v466 -= 2;
                            }
                          }
                          *v464 = 0;
                          if (v465)
                          {
                            if (*(_DWORD *)v465 == 2)
                            {
                              v924 = (unint64_t)v465;
                              WTF::StringImpl::~StringImpl(v465, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                              WTF::fastFree(v924, v475, v476, v477, v478, v479, v480, v481);
                            }
                            else
                            {
                              *(_DWORD *)v465 -= 2;
                            }
                          }
                        }
                        v464 += 6;
                        --v463;
                      }
                      while (v463);
                    }
                    WTF::fastFree((unint64_t)(v460 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                  if (v930 < v452)
                    break;
                  v461 = (2 * v452) | 1;
                  v453 = (uint64_t *)(a1 + 48 * v461);
                  v462 = 2 * v452 + 2;
                  if (v462 < v14
                    && WTF::codePointCompareLessThan((WTF *)(v453 + 6), (const WTF::String *)(a1 + 48 * v461), a3))
                  {
                    v453 += 6;
                    v461 = v462;
                  }
                  v454 = (uint64_t)v458;
                  v452 = v461;
                }
                while (!WTF::codePointCompareLessThan((WTF *)&v934, (const WTF::String *)v453, a3));
                v482 = v934;
                v934 = 0;
                v483 = (WTF::StringImpl *)*v458;
                *v458 = (uint64_t)v482;
                if (v483)
                {
                  if (*(_DWORD *)v483 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v483, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v492, v493, v494, v495, v496, v497, v498, v499);
                  }
                  else
                  {
                    *(_DWORD *)v483 -= 2;
                  }
                }
                *((_DWORD *)v458 + 2) = v458[1] & 0xFFFFFFFE | v935[0] & 1;
                v484 = *(_DWORD *)v935;
                *(_DWORD *)v935 &= ~1u;
                v485 = v458[1] & 0xFFFFFFFD | (2 * ((v484 >> 1) & 1));
                *((_DWORD *)v458 + 2) = v485;
                v486 = v485 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v935 >> 2) & 1));
                *((_DWORD *)v458 + 2) = v486;
                v487 = v486 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v935 >> 3) & 7));
                *((_DWORD *)v458 + 2) = v487;
                *((_DWORD *)v458 + 2) = *(_DWORD *)v935 & 0xFFFFFFC0 | v487 & 0x3F;
                *(_OWORD *)((char *)v458 + 12) = *(_OWORD *)&v935[4];
                *(uint64_t *)((char *)v458 + 28) = *(_QWORD *)&v935[20];
                *((_DWORD *)v458 + 9) = *(_DWORD *)&v935[28];
                v488 = (uint64_t)v936;
                v936 = 0;
                v489 = (WTF::StringImpl **)v458[5];
                v458[5] = v488;
                if (v489)
                {
                  v508 = *((unsigned int *)v489 - 1);
                  if ((_DWORD)v508)
                  {
                    v509 = v489;
                    do
                    {
                      v510 = *v509;
                      if (*v509 != (WTF::StringImpl *)-1)
                      {
                        v511 = v509[1];
                        v509[1] = 0;
                        if (v511)
                        {
                          if (*(_DWORD *)v511 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v511, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v512, v513, v514, v515, v516, v517, v518, v519);
                            v510 = *v509;
                          }
                          else
                          {
                            *(_DWORD *)v511 -= 2;
                          }
                        }
                        *v509 = 0;
                        if (v510)
                        {
                          if (*(_DWORD *)v510 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v510, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v520, v521, v522, v523, v524, v525, v526, v527);
                          }
                          else
                          {
                            *(_DWORD *)v510 -= 2;
                          }
                        }
                      }
                      v509 += 6;
                      --v508;
                    }
                    while (v508);
                  }
                  WTF::fastFree((unint64_t)(v489 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                v490 = v936;
                if (v936)
                {
                  v528 = *((unsigned int *)v936 - 1);
                  if ((_DWORD)v528)
                  {
                    v529 = v936;
                    do
                    {
                      v530 = *v529;
                      if (*v529 != (WTF::StringImpl *)-1)
                      {
                        v531 = v529[1];
                        v529[1] = 0;
                        if (v531)
                        {
                          if (*(_DWORD *)v531 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v531, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v532, v533, v534, v535, v536, v537, v538, v539);
                            v530 = *v529;
                          }
                          else
                          {
                            *(_DWORD *)v531 -= 2;
                          }
                        }
                        *v529 = 0;
                        if (v530)
                        {
                          if (*(_DWORD *)v530 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v530, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v540, v541, v542, v543, v544, v545, v546, v547);
                          }
                          else
                          {
                            *(_DWORD *)v530 -= 2;
                          }
                        }
                      }
                      v529 += 6;
                      --v528;
                    }
                    while (v528);
                  }
                  WTF::fastFree((unint64_t)(v490 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                v491 = v934;
                v934 = 0;
                if (v491)
                {
                  if (*(_DWORD *)v491 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v491, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v500, v501, v502, v503, v504, v505, v506, v507);
                  }
                  else
                  {
                    *(_DWORD *)v491 -= 2;
                  }
                }
              }
            }
            v450 = v451 - 1;
          }
          while (v451);
          v548 = v13 / 0x30uLL;
          while (1)
          {
            v549 = 0;
            v550 = *(WTF::StringImpl **)a1;
            v551 = v10;
            *(_QWORD *)a1 = 0;
            v925 = *(_DWORD *)(a1 + 12);
            v919 = *(_DWORD *)(a1 + 16);
            v914 = *(_DWORD *)(a1 + 20);
            v906 = *(_DWORD *)(a1 + 24);
            v895 = *(_DWORD *)(a1 + 32);
            v899 = *(_DWORD *)(a1 + 28);
            v894 = *(_DWORD *)(a1 + 36);
            v931 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = v931 & 0xFFFFFFFE;
            v892 = v550;
            v893 = *(_QWORD *)(a1 + 40);
            v552 = a1;
            *(_QWORD *)(a1 + 40) = 0;
            do
            {
              v553 = v552 + 48 * v549 + 48;
              v554 = 2 * v549;
              v549 = (2 * v549) | 1;
              if (v554 + 2 >= v548)
                goto LABEL_591;
              v555 = *(_QWORD *)(v553 + 48);
              v556 = *(WTF::StringImpl **)v553;
              if (v555)
              {
                if (!v556)
                {
                  v566 = *(_DWORD *)(v555 + 4) != 0;
                  goto LABEL_589;
                }
                v557 = *((_DWORD *)v556 + 4);
                v558 = *(_DWORD *)(v555 + 4);
                v559 = *((_DWORD *)v556 + 1);
                if (v559 >= v558)
                  v560 = v558;
                else
                  v560 = v559;
                if ((*(_BYTE *)(v555 + 16) & 4) != 0)
                {
                  if ((v557 & 4) != 0)
                  {
                    if ((_DWORD)v560)
                    {
                      v575 = (unsigned __int8 *)*((_QWORD *)v556 + 1);
                      v576 = *(unsigned __int8 **)(v555 + 8);
                      do
                      {
                        v577 = *v576;
                        v578 = *v575;
                        v565 = v577 > v578;
                        if (v577 != v578)
                          goto LABEL_583;
                        ++v576;
                        ++v575;
                      }
                      while (--v560);
                    }
                  }
                  else if ((_DWORD)v560)
                  {
                    v567 = (unsigned __int16 *)*((_QWORD *)v556 + 1);
                    v568 = *(unsigned __int8 **)(v555 + 8);
                    while (1)
                    {
                      v569 = *v568;
                      v570 = *v567;
                      if (v570 != v569)
                        break;
                      ++v568;
                      ++v567;
                      if (!--v560)
                        goto LABEL_577;
                    }
                    if (v570 < v569)
                      v566 = 1;
                    else
                      v566 = -1;
                    goto LABEL_589;
                  }
                }
                else if ((v557 & 4) != 0)
                {
                  if ((_DWORD)v560)
                  {
                    v571 = (unsigned __int8 *)*((_QWORD *)v556 + 1);
                    v572 = *(unsigned __int16 **)(v555 + 8);
                    do
                    {
                      v573 = *v572;
                      v574 = *v571;
                      v565 = v573 > v574;
                      if (v573 != v574)
                        goto LABEL_583;
                      ++v572;
                      ++v571;
                    }
                    while (--v560);
                  }
                }
                else if ((_DWORD)v560)
                {
                  v561 = (unsigned __int16 *)*((_QWORD *)v556 + 1);
                  v562 = *(unsigned __int16 **)(v555 + 8);
                  while (1)
                  {
                    v563 = *v562;
                    v564 = *v561;
                    v565 = v563 > v564;
                    if (v563 != v564)
                      break;
                    ++v562;
                    ++v561;
                    if (!--v560)
                      goto LABEL_577;
                  }
LABEL_583:
                  if (v565)
                    v566 = 1;
                  else
                    v566 = -1;
                  goto LABEL_589;
                }
LABEL_577:
                if (v559 < v558)
                  v579 = 1;
                else
                  v579 = -1;
                if (v558 == v559)
                  v566 = 0;
                else
                  v566 = v579;
              }
              else if (v556)
              {
                if (*((_DWORD *)v556 + 1))
                  v566 = -1;
                else
                  v566 = 0;
              }
              else
              {
                v566 = 0;
              }
LABEL_589:
              if (v566 < 0)
              {
                v553 += 48;
                v549 = v554 + 2;
              }
LABEL_591:
              v580 = *(WTF::StringImpl **)v553;
              *(_QWORD *)v553 = 0;
              v581 = *(WTF::StringImpl **)v552;
              *(_QWORD *)v552 = v580;
              if (v581)
              {
                if (*(_DWORD *)v581 == 2)
                {
                  WTF::StringImpl::~StringImpl(v581, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v588, v589, v590, v591, v592, v593, v594, v595);
                }
                else
                {
                  *(_DWORD *)v581 -= 2;
                }
              }
              *(_DWORD *)(v552 + 8) = *(_DWORD *)(v552 + 8) & 0xFFFFFFFE | *(_DWORD *)(v553 + 8) & 1;
              v582 = *(_DWORD *)(v553 + 8);
              *(_DWORD *)(v553 + 8) = v582 & 0xFFFFFFFE;
              v583 = *(_DWORD *)(v552 + 8) & 0xFFFFFFFD | (2 * ((v582 >> 1) & 1));
              *(_DWORD *)(v552 + 8) = v583;
              v584 = v583 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v553 + 8) >> 2) & 1));
              *(_DWORD *)(v552 + 8) = v584;
              v585 = v584 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(v553 + 8) >> 3) & 7));
              *(_DWORD *)(v552 + 8) = v585;
              *(_DWORD *)(v552 + 8) = *(_DWORD *)(v553 + 8) & 0xFFFFFFC0 | v585 & 0x3F;
              *(_OWORD *)(v552 + 12) = *(_OWORD *)(v553 + 12);
              *(_QWORD *)(v552 + 28) = *(_QWORD *)(v553 + 28);
              *(_DWORD *)(v552 + 36) = *(_DWORD *)(v553 + 36);
              v586 = *(_QWORD *)(v553 + 40);
              *(_QWORD *)(v553 + 40) = 0;
              v587 = *(WTF::StringImpl ***)(v552 + 40);
              *(_QWORD *)(v552 + 40) = v586;
              if (v587)
              {
                v596 = *((unsigned int *)v587 - 1);
                if ((_DWORD)v596)
                {
                  v597 = v587;
                  do
                  {
                    v598 = *v597;
                    if (*v597 != (WTF::StringImpl *)-1)
                    {
                      v599 = v597[1];
                      v597[1] = 0;
                      if (v599)
                      {
                        if (*(_DWORD *)v599 == 2)
                        {
                          v891 = v596;
                          WTF::StringImpl::~StringImpl(v599, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v600, v601, v602, v603, v604, v605, v606, v607);
                          v596 = v891;
                          v598 = *v597;
                        }
                        else
                        {
                          *(_DWORD *)v599 -= 2;
                        }
                      }
                      *v597 = 0;
                      if (v598)
                      {
                        if (*(_DWORD *)v598 == 2)
                        {
                          v608 = v596;
                          WTF::StringImpl::~StringImpl(v598, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v609, v610, v611, v612, v613, v614, v615, v616);
                          v596 = v608;
                        }
                        else
                        {
                          *(_DWORD *)v598 -= 2;
                        }
                      }
                    }
                    v597 += 6;
                    --v596;
                  }
                  while (v596);
                }
                WTF::fastFree((unint64_t)(v587 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v552 = v553;
            }
            while (v549 <= (uint64_t)((unint64_t)(v548 - 2) >> 1));
            v10 = (WTF *)((char *)v551 - 48);
            if ((WTF *)v553 != (WTF *)((char *)v551 - 48))
            {
              WTF::URL::operator=(v553, (uint64_t *)v551 - 6, (uint64_t)a3, a4, a5, a6, a7, a8);
              v617 = *((_QWORD *)v551 - 1);
              *((_QWORD *)v551 - 1) = 0;
              v618 = *(WTF::StringImpl ***)(v553 + 40);
              *(_QWORD *)(v553 + 40) = v617;
              if (v618)
              {
                v732 = *((unsigned int *)v618 - 1);
                if ((_DWORD)v732)
                {
                  v733 = v618;
                  do
                  {
                    v734 = *v733;
                    if (*v733 != (WTF::StringImpl *)-1)
                    {
                      v735 = v733[1];
                      v733[1] = 0;
                      if (v735)
                      {
                        if (*(_DWORD *)v735 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v735, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v736, v737, v738, v739, v740, v741, v742, v743);
                          v734 = *v733;
                        }
                        else
                        {
                          *(_DWORD *)v735 -= 2;
                        }
                      }
                      *v733 = 0;
                      if (v734)
                      {
                        if (*(_DWORD *)v734 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v734, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v744, v745, v746, v747, v748, v749, v750, v751);
                        }
                        else
                        {
                          *(_DWORD *)v734 -= 2;
                        }
                      }
                    }
                    v733 += 6;
                    --v732;
                  }
                  while (v732);
                }
                WTF::fastFree((unint64_t)(v618 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v619 = *(WTF::StringImpl **)v10;
              *(_QWORD *)v10 = v892;
              if (v619)
              {
                if (*(_DWORD *)v619 == 2)
                {
                  WTF::StringImpl::~StringImpl(v619, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v708, v709, v710, v711, v712, v713, v714, v715);
                }
                else
                {
                  *(_DWORD *)v619 -= 2;
                }
              }
              *((_DWORD *)v551 - 10) = v931;
              *((_DWORD *)v551 - 9) = v925;
              *((_DWORD *)v551 - 8) = v919;
              *((_DWORD *)v551 - 7) = v914;
              *((_DWORD *)v551 - 6) = v906;
              *((_DWORD *)v551 - 5) = v899;
              *((_DWORD *)v551 - 4) = v895;
              *((_DWORD *)v551 - 3) = v894;
              v620 = (WTF::StringImpl **)*((_QWORD *)v551 - 1);
              *((_QWORD *)v551 - 1) = v893;
              if (v620)
              {
                v752 = *((unsigned int *)v620 - 1);
                if ((_DWORD)v752)
                {
                  v753 = v620;
                  do
                  {
                    v754 = *v753;
                    if (*v753 != (WTF::StringImpl *)-1)
                    {
                      v755 = v753[1];
                      v753[1] = 0;
                      if (v755)
                      {
                        if (*(_DWORD *)v755 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v755, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v756, v757, v758, v759, v760, v761, v762, v763);
                          v754 = *v753;
                        }
                        else
                        {
                          *(_DWORD *)v755 -= 2;
                        }
                      }
                      *v753 = 0;
                      if (v754)
                      {
                        if (*(_DWORD *)v754 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v754, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v764, v765, v766, v767, v768, v769, v770, v771);
                        }
                        else
                        {
                          *(_DWORD *)v754 -= 2;
                        }
                      }
                    }
                    v753 += 6;
                    --v752;
                  }
                  while (v752);
                }
                WTF::fastFree((unint64_t)(v620 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v621 = v553 + 48 - a1;
              if (v621 < 49)
                goto LABEL_705;
              v622 = (v621 / 0x30uLL - 2) >> 1;
              v623 = a1 + 48 * v622;
              if (!WTF::codePointCompareLessThan((WTF *)v553, (const WTF::String *)v623, a3))
                goto LABEL_705;
              v624 = *(WTF::StringImpl **)v553;
              *(_QWORD *)v553 = 0;
              *(_OWORD *)v926 = *(_OWORD *)(v553 + 24);
              *(_OWORD *)v932 = *(_OWORD *)(v553 + 8);
              *(_DWORD *)(v553 + 8) = (uint64_t)v932[0] & 0xFFFFFFFE;
              v625 = *(_QWORD *)(v553 + 40);
              *(_QWORD *)(v553 + 40) = 0;
              v626 = *(_QWORD *)v623;
              while (2)
              {
                v627 = v623;
                *(_QWORD *)v623 = 0;
                v628 = *(WTF::StringImpl **)v553;
                *(_QWORD *)v553 = v626;
                if (v628)
                {
                  if (*(_DWORD *)v628 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v628, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v649, v650, v651, v652, v653, v654, v655, v656);
                  }
                  else
                  {
                    *(_DWORD *)v628 -= 2;
                  }
                }
                *(_DWORD *)(v553 + 8) = *(_DWORD *)(v553 + 8) & 0xFFFFFFFE | *(_DWORD *)(v623 + 8) & 1;
                v629 = *(_DWORD *)(v623 + 8);
                *(_DWORD *)(v623 + 8) = v629 & 0xFFFFFFFE;
                v630 = *(_DWORD *)(v553 + 8) & 0xFFFFFFFD | (2 * ((v629 >> 1) & 1));
                *(_DWORD *)(v553 + 8) = v630;
                v631 = v630 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v623 + 8) >> 2) & 1));
                *(_DWORD *)(v553 + 8) = v631;
                v632 = v631 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(v623 + 8) >> 3) & 7));
                *(_DWORD *)(v553 + 8) = v632;
                *(_DWORD *)(v553 + 8) = *(_DWORD *)(v623 + 8) & 0xFFFFFFC0 | v632 & 0x3F;
                *(_OWORD *)(v553 + 12) = *(_OWORD *)(v623 + 12);
                *(_QWORD *)(v553 + 28) = *(_QWORD *)(v623 + 28);
                *(_DWORD *)(v553 + 36) = *(_DWORD *)(v623 + 36);
                v633 = *(_QWORD *)(v623 + 40);
                *(_QWORD *)(v623 + 40) = 0;
                v634 = *(WTF::StringImpl ***)(v553 + 40);
                *(_QWORD *)(v553 + 40) = v633;
                if (v634)
                {
                  v665 = *((unsigned int *)v634 - 1);
                  if ((_DWORD)v665)
                  {
                    v666 = v634;
                    do
                    {
                      v667 = *v666;
                      if (*v666 != (WTF::StringImpl *)-1)
                      {
                        v668 = v666[1];
                        v666[1] = 0;
                        if (v668)
                        {
                          if (*(_DWORD *)v668 == 2)
                          {
                            v920 = v665;
                            WTF::StringImpl::~StringImpl(v668, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v669, v670, v671, v672, v673, v674, v675, v676);
                            v665 = v920;
                            v667 = *v666;
                          }
                          else
                          {
                            *(_DWORD *)v668 -= 2;
                          }
                        }
                        *v666 = 0;
                        if (v667)
                        {
                          if (*(_DWORD *)v667 == 2)
                          {
                            v915 = v667;
                            v921 = v665;
                            WTF::StringImpl::~StringImpl(v667, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree((unint64_t)v915, v677, v678, v679, v680, v681, v682, v683);
                            v665 = v921;
                          }
                          else
                          {
                            *(_DWORD *)v667 -= 2;
                          }
                        }
                      }
                      v666 += 6;
                      --v665;
                    }
                    while (v665);
                  }
                  WTF::fastFree((unint64_t)(v634 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (!v622)
                    goto LABEL_684;
                }
                else if (!v622)
                {
                  goto LABEL_684;
                }
                v622 = (v622 - 1) >> 1;
                v623 = a1 + 48 * v622;
                v626 = *(_QWORD *)v623;
                if (v624)
                {
                  if (!v626)
                    goto LABEL_684;
                  v635 = *(_DWORD *)(v626 + 16);
                  v636 = *((_DWORD *)v624 + 1);
                  v637 = *(_DWORD *)(v626 + 4);
                  if (v637 >= v636)
                    v638 = v636;
                  else
                    v638 = v637;
                  if ((*((_BYTE *)v624 + 16) & 4) != 0)
                  {
                    if ((v635 & 4) != 0)
                    {
                      if ((_DWORD)v638)
                      {
                        v661 = *(unsigned __int8 **)(v626 + 8);
                        v662 = (unsigned __int8 *)*((_QWORD *)v624 + 1);
                        do
                        {
                          v663 = *v662;
                          v664 = *v661;
                          v643 = v663 > v664;
                          if (v663 != v664)
                            goto LABEL_663;
                          ++v662;
                          ++v661;
                        }
                        while (--v638);
                      }
                    }
                    else if ((_DWORD)v638)
                    {
                      v645 = *(unsigned __int16 **)(v626 + 8);
                      v646 = (unsigned __int8 *)*((_QWORD *)v624 + 1);
                      while (1)
                      {
                        v647 = *v646;
                        v648 = *v645;
                        if (v648 != v647)
                          break;
                        ++v646;
                        ++v645;
                        if (!--v638)
                          goto LABEL_658;
                      }
                      if (v648 < v647)
                      {
LABEL_684:
                        v684 = *(WTF::StringImpl **)v627;
                        *(_QWORD *)v627 = v624;
                        if (v684)
                        {
                          if (*(_DWORD *)v684 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v684, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v724, v725, v726, v727, v728, v729, v730, v731);
                          }
                          else
                          {
                            *(_DWORD *)v684 -= 2;
                          }
                        }
                        *(_OWORD *)(v627 + 8) = *(_OWORD *)v932;
                        *(_OWORD *)(v627 + 24) = *(_OWORD *)v926;
                        v685 = *(_QWORD *)(v627 + 40);
                        *(_QWORD *)(v627 + 40) = v625;
                        if (v685)
                        {
                          v686 = *(unsigned int *)(v685 - 4);
                          if ((_DWORD)v686)
                          {
                            v687 = 0;
                            v688 = 48 * v686;
                            do
                            {
                              v689 = *(WTF::StringImpl **)(v685 + v687);
                              if (v689 != (WTF::StringImpl *)-1)
                              {
                                v690 = *(WTF::StringImpl **)(v685 + v687 + 8);
                                *(_QWORD *)(v685 + v687 + 8) = 0;
                                if (v690)
                                {
                                  if (*(_DWORD *)v690 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v690, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                    WTF::fastFree(v691, v692, v693, v694, v695, v696, v697, v698);
                                    v689 = *(WTF::StringImpl **)(v685 + v687);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v690 -= 2;
                                  }
                                }
                                *(_QWORD *)(v685 + v687) = 0;
                                if (v689)
                                {
                                  if (*(_DWORD *)v689 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v689, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                    WTF::fastFree(v699, v700, v701, v702, v703, v704, v705, v706);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v689 -= 2;
                                  }
                                }
                              }
                              v687 += 48;
                            }
                            while (v688 != v687);
                          }
                          goto LABEL_752;
                        }
                        goto LABEL_705;
                      }
                      goto LABEL_667;
                    }
                  }
                  else if ((v635 & 4) != 0)
                  {
                    if ((_DWORD)v638)
                    {
                      v657 = *(unsigned __int8 **)(v626 + 8);
                      v658 = (unsigned __int16 *)*((_QWORD *)v624 + 1);
                      do
                      {
                        v659 = *v658;
                        v660 = *v657;
                        v643 = v659 > v660;
                        if (v659 != v660)
                          goto LABEL_663;
                        ++v658;
                        ++v657;
                      }
                      while (--v638);
                    }
                  }
                  else if ((_DWORD)v638)
                  {
                    v639 = *(unsigned __int16 **)(v626 + 8);
                    v640 = (unsigned __int16 *)*((_QWORD *)v624 + 1);
                    while (1)
                    {
                      v641 = *v640;
                      v642 = *v639;
                      v643 = v641 > v642;
                      if (v641 != v642)
                        break;
                      ++v640;
                      ++v639;
                      if (!--v638)
                        goto LABEL_658;
                    }
LABEL_663:
                    if (v643)
                      goto LABEL_684;
LABEL_667:
                    v644 = -1;
LABEL_668:
                    v553 = v627;
                    if ((v644 & 0x80000000) == 0)
                      goto LABEL_684;
                    continue;
                  }
LABEL_658:
                  if (v637 < v636)
                    v644 = 1;
                  else
                    v644 = -1;
                  if (v636 == v637)
                    goto LABEL_684;
                  goto LABEL_668;
                }
                break;
              }
              if (!v626)
                goto LABEL_684;
              if (*(_DWORD *)(v626 + 4))
                v644 = -1;
              else
                v644 = 0;
              goto LABEL_668;
            }
            v707 = *(WTF::StringImpl **)v553;
            *(_QWORD *)v553 = v892;
            if (v707)
            {
              if (*(_DWORD *)v707 == 2)
              {
                WTF::StringImpl::~StringImpl(v707, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v716, v717, v718, v719, v720, v721, v722, v723);
              }
              else
              {
                *(_DWORD *)v707 -= 2;
              }
            }
            *(_DWORD *)(v553 + 8) = v931;
            *(_DWORD *)(v553 + 12) = v925;
            *(_DWORD *)(v553 + 16) = v919;
            *(_DWORD *)(v553 + 20) = v914;
            *(_DWORD *)(v553 + 24) = v906;
            *(_DWORD *)(v553 + 28) = v899;
            *(_DWORD *)(v553 + 32) = v895;
            *(_DWORD *)(v553 + 36) = v894;
            v685 = *(_QWORD *)(v553 + 40);
            *(_QWORD *)(v553 + 40) = v893;
            if (v685)
            {
              v772 = *(unsigned int *)(v685 - 4);
              if ((_DWORD)v772)
              {
                v773 = 0;
                v774 = 48 * v772;
                do
                {
                  v775 = *(WTF::StringImpl **)(v685 + v773);
                  if (v775 != (WTF::StringImpl *)-1)
                  {
                    v776 = *(WTF::StringImpl **)(v685 + v773 + 8);
                    *(_QWORD *)(v685 + v773 + 8) = 0;
                    if (v776)
                    {
                      if (*(_DWORD *)v776 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v776, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v777, v778, v779, v780, v781, v782, v783, v784);
                        v775 = *(WTF::StringImpl **)(v685 + v773);
                      }
                      else
                      {
                        *(_DWORD *)v776 -= 2;
                      }
                    }
                    *(_QWORD *)(v685 + v773) = 0;
                    if (v775)
                    {
                      if (*(_DWORD *)v775 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v775, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v785, v786, v787, v788, v789, v790, v791, v792);
                      }
                      else
                      {
                        *(_DWORD *)v775 -= 2;
                      }
                    }
                  }
                  v773 += 48;
                }
                while (v774 != v773);
              }
LABEL_752:
              WTF::fastFree(v685 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
LABEL_705:
            v44 = v548-- <= 2;
            if (v44)
              return;
          }
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = (WTF *)(a1 + 48 * ((unint64_t)v14 >> 1));
        if ((unint64_t)v13 < 0x1801)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(v16, (const WTF::String *)a1, v928);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)a1, v16, v928);
          v17 = 3 * v15;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)(a1 + 48), (const WTF::String *)(a1 + 16 * v17 - 48), (WTF *)((char *)v10 - 96));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)(a1 + 96), (const WTF::String *)(a1 + 48 + 16 * v17), (WTF *)((char *)v10 - 144));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)(a1 + 16 * v17 - 48), v16, (const WTF::String *)(a1 + 48 + 16 * v17));
          std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>(a1, (uint64_t)v16, v18, v19, v20, v21, v22, v23);
        }
        v9 = (const WTF::String *)((char *)v9 - 1);
        if ((v8 & 1) == 0 && (WTF::codePointCompareLessThan((WTF *)a1, (const WTF::String *)(a1 - 48), v25) & 1) == 0)
        {
          v142 = *(WTF::StringImpl **)a1;
          *(_QWORD *)a1 = 0;
          v934 = v142;
          *(_OWORD *)v935 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)&v935[16] = *(_OWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)v935 & 0xFFFFFFFE;
          v143 = *(WTF::StringImpl ***)(a1 + 40);
          *(_QWORD *)(a1 + 40) = 0;
          v936 = v143;
          if ((WTF::codePointCompareLessThan(v928, (const WTF::String *)&v934, v25) & 1) != 0)
          {
            v12 = (WTF *)a1;
            do
            {
              v12 = (WTF *)((char *)v12 + 48);
              if (v12 == v10)
                goto LABEL_842;
            }
            while ((WTF::codePointCompareLessThan(v12, (const WTF::String *)&v934, a3) & 1) == 0);
          }
          else
          {
            v144 = (WTF *)(a1 + 48);
            do
            {
              v12 = v144;
              if (v144 >= v10)
                break;
              v145 = WTF::codePointCompareLessThan(v144, (const WTF::String *)&v934, a3);
              v144 = (WTF *)((char *)v12 + 48);
            }
            while (!v145);
          }
          v146 = v10;
          if (v12 < v10)
          {
            v146 = v10;
            do
            {
              if (v146 == (WTF *)a1)
                goto LABEL_842;
              v146 = (WTF *)((char *)v146 - 48);
            }
            while ((WTF::codePointCompareLessThan(v146, (const WTF::String *)&v934, a3) & 1) != 0);
          }
LABEL_272:
          if (v12 >= v146)
          {
            v197 = (WTF::StringImpl **)((char *)v12 - 48);
            if ((WTF *)((char *)v12 - 48) != (WTF *)a1)
            {
              WTF::URL::operator=(a1, (uint64_t *)v12 - 6, (uint64_t)a3, a4, a5, a6, a7, a8);
              v198 = *((_QWORD *)v12 - 1);
              *((_QWORD *)v12 - 1) = 0;
              v199 = *(WTF::StringImpl ***)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v198;
              if (v199)
              {
                v323 = *((unsigned int *)v199 - 1);
                if ((_DWORD)v323)
                {
                  v324 = v199;
                  do
                  {
                    v325 = *v324;
                    if (*v324 != (WTF::StringImpl *)-1)
                    {
                      v326 = v324[1];
                      v324[1] = 0;
                      if (v326)
                      {
                        if (*(_DWORD *)v326 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v326, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
                          v325 = *v324;
                        }
                        else
                        {
                          *(_DWORD *)v326 -= 2;
                        }
                      }
                      *v324 = 0;
                      if (v325)
                      {
                        if (*(_DWORD *)v325 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v325, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
                        }
                        else
                        {
                          *(_DWORD *)v325 -= 2;
                        }
                      }
                    }
                    v324 += 6;
                    --v323;
                  }
                  while (v323);
                }
                WTF::fastFree((unint64_t)(v199 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
            }
            v200 = v934;
            v934 = 0;
            v201 = *v197;
            *v197 = v200;
            if (v201)
            {
              if (*(_DWORD *)v201 == 2)
              {
                WTF::StringImpl::~StringImpl(v201, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
              }
              else
              {
                *(_DWORD *)v201 -= 2;
              }
            }
            *((_DWORD *)v12 - 10) = *((_DWORD *)v12 - 10) & 0xFFFFFFFE | v935[0] & 1;
            v202 = *(_DWORD *)v935;
            *(_DWORD *)v935 &= ~1u;
            v203 = *((_DWORD *)v12 - 10) & 0xFFFFFFFD | (2 * ((v202 >> 1) & 1));
            *((_DWORD *)v12 - 10) = v203;
            v204 = v203 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v935 >> 2) & 1));
            *((_DWORD *)v12 - 10) = v204;
            v205 = v204 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v935 >> 3) & 7));
            *((_DWORD *)v12 - 10) = v205;
            *((_DWORD *)v12 - 10) = *(_DWORD *)v935 & 0xFFFFFFC0 | v205 & 0x3F;
            *(_OWORD *)((char *)v12 - 36) = *(_OWORD *)&v935[4];
            *(_QWORD *)((char *)v12 - 20) = *(_QWORD *)&v935[20];
            *((_DWORD *)v12 - 3) = *(_DWORD *)&v935[28];
            v206 = v936;
            v936 = 0;
            v207 = (WTF::StringImpl **)*((_QWORD *)v12 - 1);
            *((_QWORD *)v12 - 1) = v206;
            if (v207)
            {
              v283 = *((unsigned int *)v207 - 1);
              if ((_DWORD)v283)
              {
                v284 = v207;
                do
                {
                  v285 = *v284;
                  if (*v284 != (WTF::StringImpl *)-1)
                  {
                    v286 = v284[1];
                    v284[1] = 0;
                    if (v286)
                    {
                      if (*(_DWORD *)v286 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v286, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
                        v285 = *v284;
                      }
                      else
                      {
                        *(_DWORD *)v286 -= 2;
                      }
                    }
                    *v284 = 0;
                    if (v285)
                    {
                      if (*(_DWORD *)v285 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v285, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
                      }
                      else
                      {
                        *(_DWORD *)v285 -= 2;
                      }
                    }
                  }
                  v284 += 6;
                  --v283;
                }
                while (v283);
              }
              WTF::fastFree((unint64_t)(v207 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v208 = v936;
            if (v936)
            {
              v303 = *((unsigned int *)v936 - 1);
              if ((_DWORD)v303)
              {
                v304 = v936;
                do
                {
                  v305 = *v304;
                  if (*v304 != (WTF::StringImpl *)-1)
                  {
                    v306 = v304[1];
                    v304[1] = 0;
                    if (v306)
                    {
                      if (*(_DWORD *)v306 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v306, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v307, v308, v309, v310, v311, v312, v313, v314);
                        v305 = *v304;
                      }
                      else
                      {
                        *(_DWORD *)v306 -= 2;
                      }
                    }
                    *v304 = 0;
                    if (v305)
                    {
                      if (*(_DWORD *)v305 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v305, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
                      }
                      else
                      {
                        *(_DWORD *)v305 -= 2;
                      }
                    }
                  }
                  v304 += 6;
                  --v303;
                }
                while (v303);
              }
              WTF::fastFree((unint64_t)(v208 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v209 = v934;
            v934 = 0;
            if (v209)
            {
              if (*(_DWORD *)v209 == 2)
              {
                WTF::StringImpl::~StringImpl(v209, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
              }
              else
              {
                *(_DWORD *)v209 -= 2;
              }
            }
            goto LABEL_171;
          }
          std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)v12, (uint64_t)v146, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!v934)
            goto LABEL_842;
          while (1)
          {
            v12 = (WTF *)((char *)v12 + 48);
            if (v12 == v10)
              goto LABEL_842;
            v147 = *(_QWORD *)v12;
            if (!*(_QWORD *)v12)
            {
              v150 = *((unsigned int *)v934 + 1);
              if ((_DWORD)v150)
                v157 = -1;
              else
                v157 = 0;
              goto LABEL_228;
            }
            v148 = *((_DWORD *)v934 + 4);
            v149 = *(_DWORD *)(v147 + 4);
            v150 = *((unsigned int *)v934 + 1);
            if (v150 >= v149)
              v151 = v149;
            else
              v151 = v150;
            if ((*(_BYTE *)(v147 + 16) & 4) != 0)
            {
              if ((v148 & 4) == 0)
              {
                if (!(_DWORD)v151)
                  goto LABEL_218;
                v158 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
                v159 = *(unsigned __int8 **)(v147 + 8);
                while (1)
                {
                  v160 = *v159;
                  v161 = *v158;
                  if (v161 != v160)
                    break;
                  ++v159;
                  ++v158;
                  if (!--v151)
                    goto LABEL_218;
                }
                if (v161 < v160)
                  goto LABEL_227;
LABEL_229:
                if ((_DWORD)v150)
                  v171 = -1;
                else
                  v171 = 0;
                v172 = v150;
                while (2)
                {
                  if (v146 == (WTF *)a1)
                    goto LABEL_842;
                  v174 = *((_QWORD *)v146 - 6);
                  v146 = (WTF *)((char *)v146 - 48);
                  v173 = v174;
                  v175 = v150;
                  v176 = v171;
                  if (!v174)
                    goto LABEL_271;
                  v177 = *((_DWORD *)v934 + 4);
                  v178 = *(_DWORD *)(v173 + 4);
                  if (v172 >= v178)
                    v179 = v178;
                  else
                    v179 = v172;
                  if ((*(_BYTE *)(v173 + 16) & 4) != 0)
                  {
                    if ((v177 & 4) != 0)
                    {
                      if ((_DWORD)v179)
                      {
                        v193 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
                        v194 = *(unsigned __int8 **)(v173 + 8);
                        do
                        {
                          v195 = *v194;
                          v196 = *v193;
                          v184 = v195 > v196;
                          if (v195 != v196)
                            goto LABEL_265;
                          ++v194;
                          ++v193;
                        }
                        while (--v179);
                      }
                    }
                    else if ((_DWORD)v179)
                    {
                      v185 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
                      v186 = *(unsigned __int8 **)(v173 + 8);
                      while (1)
                      {
                        v187 = *v186;
                        v188 = *v185;
                        if (v188 != v187)
                          break;
                        ++v186;
                        ++v185;
                        if (!--v179)
                          goto LABEL_260;
                      }
                      if (v188 < v187)
                        goto LABEL_272;
                      goto LABEL_269;
                    }
                  }
                  else if ((v177 & 4) != 0)
                  {
                    if ((_DWORD)v179)
                    {
                      v189 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
                      v190 = *(unsigned __int16 **)(v173 + 8);
                      do
                      {
                        v191 = *v190;
                        v192 = *v189;
                        v184 = v191 > v192;
                        if (v191 != v192)
                          goto LABEL_265;
                        ++v190;
                        ++v189;
                      }
                      while (--v179);
                    }
                  }
                  else if ((_DWORD)v179)
                  {
                    v180 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
                    v181 = *(unsigned __int16 **)(v173 + 8);
                    while (1)
                    {
                      v182 = *v181;
                      v183 = *v180;
                      v184 = v182 > v183;
                      if (v182 != v183)
                        break;
                      ++v181;
                      ++v180;
                      if (!--v179)
                        goto LABEL_260;
                    }
LABEL_265:
                    if (v184)
                      goto LABEL_272;
LABEL_269:
                    v176 = -1;
LABEL_270:
                    v175 = v172;
LABEL_271:
                    v172 = v175;
                    if ((v176 & 0x80000000) == 0)
                      goto LABEL_272;
                    continue;
                  }
                  break;
                }
LABEL_260:
                if (v172 < v178)
                  v176 = 1;
                else
                  v176 = -1;
                if (v178 == (_DWORD)v172)
                  goto LABEL_272;
                goto LABEL_270;
              }
              if (!(_DWORD)v151)
              {
LABEL_218:
                if (v150 < v149)
                  v170 = 1;
                else
                  v170 = -1;
                if (v149 == (_DWORD)v150)
                  v157 = 0;
                else
                  v157 = v170;
                goto LABEL_228;
              }
              v166 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
              v167 = *(unsigned __int8 **)(v147 + 8);
              while (1)
              {
                v168 = *v167;
                v169 = *v166;
                v156 = v168 > v169;
                if (v168 != v169)
                  break;
                ++v167;
                ++v166;
                if (!--v151)
                  goto LABEL_218;
              }
            }
            else if ((v148 & 4) != 0)
            {
              if (!(_DWORD)v151)
                goto LABEL_218;
              v162 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
              v163 = *(unsigned __int16 **)(v147 + 8);
              while (1)
              {
                v164 = *v163;
                v165 = *v162;
                v156 = v164 > v165;
                if (v164 != v165)
                  break;
                ++v163;
                ++v162;
                if (!--v151)
                  goto LABEL_218;
              }
            }
            else
            {
              if (!(_DWORD)v151)
                goto LABEL_218;
              v152 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
              v153 = *(unsigned __int16 **)(v147 + 8);
              while (1)
              {
                v154 = *v153;
                v155 = *v152;
                v156 = v154 > v155;
                if (v154 != v155)
                  break;
                ++v153;
                ++v152;
                if (!--v151)
                  goto LABEL_218;
              }
            }
            if (!v156)
              goto LABEL_229;
LABEL_227:
            v157 = 1;
LABEL_228:
            if (v157 < 0)
              goto LABEL_229;
          }
        }
        v31 = *(WTF::StringImpl **)a1;
        *(_QWORD *)a1 = 0;
        v934 = v31;
        *(_OWORD *)v935 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)&v935[16] = *(_OWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)v935 & 0xFFFFFFFE;
        v32 = *(WTF::StringImpl ***)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        v936 = v32;
        v33 = (WTF *)a1;
        while (1)
        {
          v34 = v33;
          v33 = (WTF *)((char *)v33 + 48);
          if (v33 == v10)
            goto LABEL_842;
          v35 = *(_QWORD *)v33;
          if (!v31)
          {
            if (!v35)
              goto LABEL_55;
            if (*(_DWORD *)(v35 + 4))
              v45 = -1;
            else
              v45 = 0;
            goto LABEL_54;
          }
          if (!v35)
            goto LABEL_55;
          v36 = *(_DWORD *)(v35 + 16);
          v37 = *((_DWORD *)v31 + 1);
          v38 = *(_DWORD *)(v35 + 4);
          v39 = v38 >= v37 ? v37 : v38;
          if ((*((_BYTE *)v31 + 16) & 4) != 0)
            break;
          if ((v36 & 4) != 0)
          {
            if ((_DWORD)v39)
            {
              v50 = *(unsigned __int8 **)(v35 + 8);
              v51 = (unsigned __int16 *)*((_QWORD *)v31 + 1);
              do
              {
                v52 = *v51;
                v53 = *v50;
                v44 = v52 > v53;
                if (v52 != v53)
                  goto LABEL_49;
                ++v51;
                ++v50;
              }
              while (--v39);
            }
          }
          else if ((_DWORD)v39)
          {
            v40 = *(unsigned __int16 **)(v35 + 8);
            v41 = (unsigned __int16 *)*((_QWORD *)v31 + 1);
            while (1)
            {
              v42 = *v41;
              v43 = *v40;
              v44 = v42 > v43;
              if (v42 != v43)
                break;
              ++v41;
              ++v40;
              if (!--v39)
                goto LABEL_44;
            }
LABEL_49:
            if (v44)
              goto LABEL_55;
LABEL_53:
            v45 = -1;
            goto LABEL_54;
          }
LABEL_44:
          if (v38 < v37)
            v45 = 1;
          else
            v45 = -1;
          if (v37 == v38)
            goto LABEL_55;
LABEL_54:
          if ((v45 & 0x80000000) == 0)
            goto LABEL_55;
        }
        if ((v36 & 4) != 0)
        {
          if ((_DWORD)v39)
          {
            v54 = *(unsigned __int8 **)(v35 + 8);
            v55 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
            while (1)
            {
              v56 = *v55;
              v57 = *v54;
              v44 = v56 > v57;
              if (v56 != v57)
                goto LABEL_49;
              ++v55;
              ++v54;
              if (!--v39)
                goto LABEL_44;
            }
          }
          goto LABEL_44;
        }
        if (!(_DWORD)v39)
          goto LABEL_44;
        v46 = *(unsigned __int16 **)(v35 + 8);
        v47 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
        while (1)
        {
          v48 = *v47;
          v49 = *v46;
          if (v49 != v48)
            break;
          ++v47;
          ++v46;
          if (!--v39)
            goto LABEL_44;
        }
        if (v49 >= v48)
          goto LABEL_53;
LABEL_55:
        v58 = v10;
        if (v34 == (WTF *)a1)
        {
          v58 = v10;
          do
          {
            if (v33 >= v58)
              break;
            v58 = (const WTF::String *)((char *)v58 - 48);
          }
          while ((WTF::codePointCompareLessThan((WTF *)&v934, v58, v25) & 1) == 0);
LABEL_62:
          v12 = v33;
          if (v33 < v58)
          {
            v59 = (unint64_t)v58;
            while (1)
            {
              std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)v12, v59, (uint64_t)v25, v26, v27, v28, v29, v30);
              if (v934)
              {
                while (1)
                {
                  v12 = (WTF *)((char *)v12 + 48);
                  if (v12 == v10)
                    goto LABEL_842;
                  v60 = *(_QWORD *)v12;
                  if (!*(_QWORD *)v12)
                    goto LABEL_108;
                  v61 = *(_DWORD *)(v60 + 16);
                  v62 = *((_DWORD *)v934 + 1);
                  v63 = *(_DWORD *)(v60 + 4);
                  if (v63 >= v62)
                    v64 = v62;
                  else
                    v64 = v63;
                  if ((*((_BYTE *)v934 + 16) & 4) != 0)
                  {
                    if ((v61 & 4) != 0)
                    {
                      if ((_DWORD)v64)
                      {
                        v78 = *(unsigned __int8 **)(v60 + 8);
                        v79 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
                        do
                        {
                          v80 = *v79;
                          v81 = *v78;
                          v69 = v80 > v81;
                          if (v80 != v81)
                            goto LABEL_97;
                          ++v79;
                          ++v78;
                        }
                        while (--v64);
                      }
                    }
                    else if ((_DWORD)v64)
                    {
                      v70 = *(unsigned __int16 **)(v60 + 8);
                      v71 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
                      while (1)
                      {
                        v72 = *v71;
                        v73 = *v70;
                        if (v73 != v72)
                          break;
                        ++v71;
                        ++v70;
                        if (!--v64)
                          goto LABEL_92;
                      }
                      if (v73 < v72)
                        goto LABEL_108;
                      goto LABEL_101;
                    }
                  }
                  else if ((v61 & 4) != 0)
                  {
                    if ((_DWORD)v64)
                    {
                      v74 = *(unsigned __int8 **)(v60 + 8);
                      v75 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
                      do
                      {
                        v76 = *v75;
                        v77 = *v74;
                        v69 = v76 > v77;
                        if (v76 != v77)
                          goto LABEL_97;
                        ++v75;
                        ++v74;
                      }
                      while (--v64);
                    }
                  }
                  else if ((_DWORD)v64)
                  {
                    v65 = *(unsigned __int16 **)(v60 + 8);
                    v66 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
                    while (1)
                    {
                      v67 = *v66;
                      v68 = *v65;
                      v69 = v67 > v68;
                      if (v67 != v68)
                        break;
                      ++v66;
                      ++v65;
                      if (!--v64)
                        goto LABEL_92;
                    }
LABEL_97:
                    if (v69)
                      goto LABEL_108;
LABEL_101:
                    v82 = -1;
                    goto LABEL_102;
                  }
LABEL_92:
                  if (v63 < v62)
                    v82 = 1;
                  else
                    v82 = -1;
                  if (v62 == v63)
                    goto LABEL_108;
LABEL_102:
                  if ((v82 & 0x80000000) == 0)
                    goto LABEL_108;
                }
              }
              v83 = (WTF *)((char *)v12 + 48);
              do
              {
                if (v83 == v10)
                  goto LABEL_842;
                v12 = v83;
                v84 = *(_QWORD *)v83;
                if (!v84)
                  break;
                v85 = *(_DWORD *)(v84 + 4);
                v83 = (WTF *)((char *)v12 + 48);
              }
              while (v85);
LABEL_108:
              if (v934)
                break;
              if (v59 == a1)
                goto LABEL_842;
              v59 -= 48;
              while (!*(_QWORD *)v59 || !*(_DWORD *)(*(_QWORD *)v59 + 4))
              {
                v350 = v59 == a1;
                v59 -= 48;
                if (v350)
                  goto LABEL_842;
              }
LABEL_148:
              if ((unint64_t)v12 >= v59)
                goto LABEL_157;
            }
            while (1)
            {
              if (v59 == a1)
                goto LABEL_842;
              v87 = *(_QWORD *)(v59 - 48);
              v59 -= 48;
              v86 = v87;
              if (v87)
                break;
              v97 = *((_DWORD *)v934 + 1) != 0;
LABEL_147:
              if (v97 < 0)
                goto LABEL_148;
            }
            v88 = *(_DWORD *)(v86 + 16);
            v89 = *((_DWORD *)v934 + 1);
            v90 = *(_DWORD *)(v86 + 4);
            if (v90 >= v89)
              v91 = v89;
            else
              v91 = v90;
            if ((*((_BYTE *)v934 + 16) & 4) != 0)
            {
              if ((v88 & 4) == 0)
              {
                if (!(_DWORD)v91)
                  goto LABEL_137;
                v98 = *(unsigned __int16 **)(v86 + 8);
                v99 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
                while (1)
                {
                  v100 = *v99;
                  v101 = *v98;
                  if (v101 != v100)
                    break;
                  ++v99;
                  ++v98;
                  if (!--v91)
                    goto LABEL_137;
                }
                if (v101 >= v100)
                  goto LABEL_148;
                goto LABEL_146;
              }
              if (!(_DWORD)v91)
              {
LABEL_137:
                if (v90 < v89)
                  v110 = 1;
                else
                  v110 = -1;
                if (v89 == v90)
                  v97 = 0;
                else
                  v97 = v110;
                goto LABEL_147;
              }
              v106 = *(unsigned __int8 **)(v86 + 8);
              v107 = (unsigned __int8 *)*((_QWORD *)v934 + 1);
              while (1)
              {
                v108 = *v107;
                v109 = *v106;
                v96 = v108 > v109;
                if (v108 != v109)
                  break;
                ++v107;
                ++v106;
                if (!--v91)
                  goto LABEL_137;
              }
            }
            else if ((v88 & 4) != 0)
            {
              if (!(_DWORD)v91)
                goto LABEL_137;
              v102 = *(unsigned __int8 **)(v86 + 8);
              v103 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
              while (1)
              {
                v104 = *v103;
                v105 = *v102;
                v96 = v104 > v105;
                if (v104 != v105)
                  break;
                ++v103;
                ++v102;
                if (!--v91)
                  goto LABEL_137;
              }
            }
            else
            {
              if (!(_DWORD)v91)
                goto LABEL_137;
              v92 = *(unsigned __int16 **)(v86 + 8);
              v93 = (unsigned __int16 *)*((_QWORD *)v934 + 1);
              while (1)
              {
                v94 = *v93;
                v95 = *v92;
                v96 = v94 > v95;
                if (v94 != v95)
                  break;
                ++v93;
                ++v92;
                if (!--v91)
                  goto LABEL_137;
              }
            }
            if (!v96)
              goto LABEL_148;
LABEL_146:
            v97 = 1;
            goto LABEL_147;
          }
LABEL_157:
          v111 = (WTF::StringImpl **)((char *)v12 - 48);
          if ((WTF *)((char *)v12 - 48) != (WTF *)a1)
          {
            WTF::URL::operator=(a1, (uint64_t *)v12 - 6, (uint64_t)v25, v26, v27, v28, v29, v30);
            v112 = *((_QWORD *)v12 - 1);
            *((_QWORD *)v12 - 1) = 0;
            v113 = *(WTF::StringImpl ***)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v112;
            if (v113)
            {
              v264 = (WTF *)*((unsigned int *)v113 - 1);
              if ((_DWORD)v264)
              {
                v265 = v113;
                do
                {
                  v266 = *v265;
                  if (*v265 != (WTF::StringImpl *)-1)
                  {
                    v267 = v265[1];
                    v265[1] = 0;
                    if (v267)
                    {
                      if (*(_DWORD *)v267 == 2)
                      {
                        v904 = (WTF *)v265;
                        v912 = v264;
                        WTF::StringImpl::~StringImpl(v267, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                        WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
                        v265 = (WTF::StringImpl **)v904;
                        v264 = v912;
                        v266 = *(WTF::StringImpl **)v904;
                      }
                      else
                      {
                        *(_DWORD *)v267 -= 2;
                      }
                    }
                    *v265 = 0;
                    if (v266)
                    {
                      if (*(_DWORD *)v266 == 2)
                      {
                        v905 = (WTF *)v265;
                        v913 = v264;
                        v898 = v266;
                        WTF::StringImpl::~StringImpl(v266, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                        WTF::fastFree((unint64_t)v898, v276, v277, v278, v279, v280, v281, v282);
                        v265 = (WTF::StringImpl **)v905;
                        v264 = v913;
                      }
                      else
                      {
                        *(_DWORD *)v266 -= 2;
                      }
                    }
                  }
                  v265 += 6;
                  v264 = (WTF *)((char *)v264 - 1);
                }
                while (v264);
              }
              WTF::fastFree((unint64_t)(v113 - 2), v24, (uint64_t)v25, v26, v27, v28, v29, v30);
            }
          }
          v114 = v934;
          v934 = 0;
          v115 = *v111;
          *v111 = v114;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
            {
              WTF::StringImpl::~StringImpl(v115, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
              WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
            }
            else
            {
              *(_DWORD *)v115 -= 2;
            }
          }
          *((_DWORD *)v12 - 10) = *((_DWORD *)v12 - 10) & 0xFFFFFFFE | v935[0] & 1;
          v116 = *(_DWORD *)v935;
          *(_DWORD *)v935 &= ~1u;
          v117 = *((_DWORD *)v12 - 10) & 0xFFFFFFFD | (2 * ((v116 >> 1) & 1));
          *((_DWORD *)v12 - 10) = v117;
          v118 = v117 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v935 >> 2) & 1));
          *((_DWORD *)v12 - 10) = v118;
          v119 = v118 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v935 >> 3) & 7));
          *((_DWORD *)v12 - 10) = v119;
          *((_DWORD *)v12 - 10) = *(_DWORD *)v935 & 0xFFFFFFC0 | v119 & 0x3F;
          *(_OWORD *)((char *)v12 - 36) = *(_OWORD *)&v935[4];
          *(_QWORD *)((char *)v12 - 20) = *(_QWORD *)&v935[20];
          *((_DWORD *)v12 - 3) = *(_DWORD *)&v935[28];
          v120 = v936;
          v936 = 0;
          v121 = (WTF::StringImpl **)*((_QWORD *)v12 - 1);
          *((_QWORD *)v12 - 1) = v120;
          if (v121)
          {
            v226 = (WTF *)*((unsigned int *)v121 - 1);
            if ((_DWORD)v226)
            {
              v227 = v121;
              do
              {
                v228 = *v227;
                if (*v227 != (WTF::StringImpl *)-1)
                {
                  v229 = v227[1];
                  v227[1] = 0;
                  if (v229)
                  {
                    if (*(_DWORD *)v229 == 2)
                    {
                      v900 = (WTF *)v227;
                      v908 = v226;
                      WTF::StringImpl::~StringImpl(v229, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
                      v227 = (WTF::StringImpl **)v900;
                      v226 = v908;
                      v228 = *(WTF::StringImpl **)v900;
                    }
                    else
                    {
                      *(_DWORD *)v229 -= 2;
                    }
                  }
                  *v227 = 0;
                  if (v228)
                  {
                    if (*(_DWORD *)v228 == 2)
                    {
                      v901 = (WTF *)v227;
                      v909 = v226;
                      v896 = v228;
                      WTF::StringImpl::~StringImpl(v228, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                      WTF::fastFree((unint64_t)v896, v238, v239, v240, v241, v242, v243, v244);
                      v227 = (WTF::StringImpl **)v901;
                      v226 = v909;
                    }
                    else
                    {
                      *(_DWORD *)v228 -= 2;
                    }
                  }
                }
                v227 += 6;
                v226 = (WTF *)((char *)v226 - 1);
              }
              while (v226);
            }
            WTF::fastFree((unint64_t)(v121 - 2), v24, (uint64_t)v25, v26, v27, v28, v29, v30);
          }
          v122 = v936;
          if (v936)
          {
            v245 = (WTF *)*((unsigned int *)v936 - 1);
            if ((_DWORD)v245)
            {
              v246 = v936;
              do
              {
                v247 = *v246;
                if (*v246 != (WTF::StringImpl *)-1)
                {
                  v248 = v246[1];
                  v246[1] = 0;
                  if (v248)
                  {
                    if (*(_DWORD *)v248 == 2)
                    {
                      v902 = (WTF *)v246;
                      v910 = v245;
                      WTF::StringImpl::~StringImpl(v248, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                      WTF::fastFree(v249, v250, v251, v252, v253, v254, v255, v256);
                      v246 = (WTF::StringImpl **)v902;
                      v245 = v910;
                      v247 = *(WTF::StringImpl **)v902;
                    }
                    else
                    {
                      *(_DWORD *)v248 -= 2;
                    }
                  }
                  *v246 = 0;
                  if (v247)
                  {
                    if (*(_DWORD *)v247 == 2)
                    {
                      v903 = (WTF *)v246;
                      v911 = v245;
                      v897 = v247;
                      WTF::StringImpl::~StringImpl(v247, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
                      WTF::fastFree((unint64_t)v897, v257, v258, v259, v260, v261, v262, v263);
                      v246 = (WTF::StringImpl **)v903;
                      v245 = v911;
                    }
                    else
                    {
                      *(_DWORD *)v247 -= 2;
                    }
                  }
                }
                v246 += 6;
                v245 = (WTF *)((char *)v245 - 1);
              }
              while (v245);
            }
            WTF::fastFree((unint64_t)(v122 - 2), v24, (uint64_t)v25, v26, v27, v28, v29, v30);
          }
          v123 = v934;
          v934 = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
            {
              WTF::StringImpl::~StringImpl(v123, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
              WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
            }
            else
            {
              *(_DWORD *)v123 -= 2;
            }
          }
          if (v33 < v58)
            goto LABEL_170;
          v124 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>((WTF *)a1, (WTF *)((char *)v12 - 48), v25);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(v12, v10, v125))
          {
            if (v124)
              continue;
LABEL_170:
            std::__introsort<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,false>(a1, (char *)v12 - 48, v9, v8 & 1);
LABEL_171:
            v8 = 0;
            continue;
          }
          v10 = (WTF *)((char *)v12 - 48);
          if (v124)
            return;
          goto LABEL_2;
        }
        while (v58 != (const WTF::String *)a1)
        {
          v58 = (const WTF::String *)((char *)v58 - 48);
          if (WTF::codePointCompareLessThan((WTF *)&v934, v58, v25))
            goto LABEL_62;
        }
LABEL_842:
        __break(1u);
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,0>(WTF *a1, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::String *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(a1, a2, a3, a4);
  if (WTF::codePointCompareLessThan(a4, a5, v10))
  {
    std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a4, (uint64_t)a5, v11, v12, v13, v14, v15, v16);
    if (WTF::codePointCompareLessThan(a3, a4, v17))
    {
      std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a3, (uint64_t)a4, v18, v19, v20, v21, v22, v23);
      if (WTF::codePointCompareLessThan(a2, a3, v24))
      {
        std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a2, (uint64_t)a3, v25, v26, v27, v28, v29, v30);
        if (WTF::codePointCompareLessThan(a1, a2, v31))
          std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a1, (uint64_t)a2, v32, v33, v34, v35, v36, v37);
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(WTF *a1, const WTF::String *a2, const WTF::String *a3)
{
  char v6;
  const WTF::String *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::String *v16;
  uint64_t v17;
  const WTF::String *v18;

  v6 = WTF::codePointCompareLessThan(a1, a2, a3);
  v8 = WTF::codePointCompareLessThan(a2, a3, v7);
  if ((v6 & 1) != 0)
  {
    if (v8)
    {
      v15 = (uint64_t)a1;
    }
    else
    {
      std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a1, (uint64_t)a2, v9, v10, v11, v12, v13, v14);
      if (!WTF::codePointCompareLessThan(a2, a3, v18))
        return;
      v15 = (uint64_t)a2;
    }
    v17 = (uint64_t)a3;
    goto LABEL_10;
  }
  if (v8)
  {
    std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a2, (uint64_t)a3, v9, v10, v11, v12, v13, v14);
    if (WTF::codePointCompareLessThan(a1, a2, v16))
    {
      v15 = (uint64_t)a1;
      v17 = (uint64_t)a2;
LABEL_10:
      std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>(v15, v17, v9, v10, v11, v12, v13, v14);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(WTF *this, WTF *a2, const WTF::String *a3)
{
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const WTF::String *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  _BYTE v118[32];
  WTF::StringImpl **v119;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - this) >> 4);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (uint64_t)a2 - 48;
      if (WTF::codePointCompareLessThan(this, (WTF *)((char *)a2 - 48), a3))
        std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)this, v7, v8, v9, v10, v11, v12, v13);
      return 1;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(this, (WTF *)((char *)this + 48), (WTF *)((char *)a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(this, (WTF *)((char *)this + 48), (WTF *)((char *)this + 96), (WTF *)((char *)a2 - 48));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *,0>(this, (WTF *)((char *)this + 48), (WTF *)((char *)this + 96), (WTF *)((char *)this + 144), (WTF *)((char *)a2 - 48));
      return 1;
    default:
      v14 = (uint64_t *)((char *)this + 96);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(this, (WTF *)((char *)this + 48), (WTF *)((char *)this + 96));
      v16 = (WTF *)((char *)this + 144);
      if ((WTF *)((char *)this + 144) == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (WTF::codePointCompareLessThan((WTF *)v14, v16, v15))
    {
      v23 = *(WTF::StringImpl **)v16;
      *(_QWORD *)v16 = 0;
      v117 = v23;
      *(_OWORD *)v118 = *(_OWORD *)((char *)v16 + 8);
      *(_OWORD *)&v118[16] = *(_OWORD *)((char *)v16 + 24);
      *((_DWORD *)v16 + 2) = *(_DWORD *)v118 & 0xFFFFFFFE;
      v24 = (WTF::StringImpl **)*((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 5) = 0;
      v119 = v24;
      v25 = v16;
      while (1)
      {
        v26 = (uint64_t)v25;
        v25 = (WTF *)v14;
        v27 = WTF::URL::operator=(v26, v14, (uint64_t)v15, v18, v19, v20, v21, v22);
        v29 = v14[5];
        v14[5] = 0;
        v30 = *(WTF::StringImpl ***)(v27 + 40);
        *(_QWORD *)(v27 + 40) = v29;
        if (v30)
        {
          v31 = *((unsigned int *)v30 - 1);
          if ((_DWORD)v31)
          {
            v32 = v30;
            do
            {
              v33 = *v32;
              if (*v32 != (WTF::StringImpl *)-1)
              {
                v34 = v32[1];
                v32[1] = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v34, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
                    v33 = *v32;
                  }
                  else
                  {
                    *(_DWORD *)v34 -= 2;
                  }
                }
                *v32 = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v33, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
                  }
                  else
                  {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
              v32 += 6;
              --v31;
            }
            while (v31);
          }
          WTF::fastFree((unint64_t)(v30 - 2), v28, (uint64_t)v15, v18, v19, v20, v21, v22);
        }
        if (v25 == this)
          break;
        v14 = (uint64_t *)((char *)v25 - 48);
        if ((WTF::codePointCompareLessThan((WTF *)((char *)v25 - 48), (const WTF::String *)&v117, v15) & 1) == 0)
          goto LABEL_27;
      }
      v25 = this;
LABEL_27:
      v51 = v117;
      v117 = 0;
      v52 = *(WTF::StringImpl **)v25;
      *(_QWORD *)v25 = v51;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      *((_DWORD *)v25 + 2) = *((_DWORD *)v25 + 2) & 0xFFFFFFFE | v118[0] & 1;
      v53 = *(_DWORD *)v118;
      *(_DWORD *)v118 &= ~1u;
      v54 = *((_DWORD *)v25 + 2) & 0xFFFFFFFD | (2 * ((v53 >> 1) & 1));
      *((_DWORD *)v25 + 2) = v54;
      v55 = v54 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v118 >> 2) & 1));
      *((_DWORD *)v25 + 2) = v55;
      v56 = v55 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v118 >> 3) & 7));
      *((_DWORD *)v25 + 2) = v56;
      *((_DWORD *)v25 + 2) = *(_DWORD *)v118 & 0xFFFFFFC0 | v56 & 0x3F;
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)&v118[4];
      *(_QWORD *)((char *)v25 + 28) = *(_QWORD *)&v118[20];
      *((_DWORD *)v25 + 9) = *(_DWORD *)&v118[28];
      v57 = v119;
      v119 = 0;
      v58 = (WTF::StringImpl **)*((_QWORD *)v25 + 5);
      *((_QWORD *)v25 + 5) = v57;
      if (v58)
      {
        v77 = *((unsigned int *)v58 - 1);
        if ((_DWORD)v77)
        {
          v78 = v58;
          do
          {
            v79 = *v78;
            if (*v78 != (WTF::StringImpl *)-1)
            {
              v80 = v78[1];
              v78[1] = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 2)
                {
                  WTF::StringImpl::~StringImpl(v80, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                  WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
                  v79 = *v78;
                }
                else
                {
                  *(_DWORD *)v80 -= 2;
                }
              }
              *v78 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                {
                  WTF::StringImpl::~StringImpl(v79, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                  WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
                }
                else
                {
                  *(_DWORD *)v79 -= 2;
                }
              }
            }
            v78 += 6;
            --v77;
          }
          while (v77);
        }
        WTF::fastFree((unint64_t)(v58 - 2), v28, (uint64_t)v15, v18, v19, v20, v21, v22);
      }
      v59 = v119;
      if (v119)
      {
        v97 = *((unsigned int *)v119 - 1);
        if ((_DWORD)v97)
        {
          v98 = v119;
          do
          {
            v99 = *v98;
            if (*v98 != (WTF::StringImpl *)-1)
            {
              v100 = v98[1];
              v98[1] = 0;
              if (v100)
              {
                if (*(_DWORD *)v100 == 2)
                {
                  WTF::StringImpl::~StringImpl(v100, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                  WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
                  v99 = *v98;
                }
                else
                {
                  *(_DWORD *)v100 -= 2;
                }
              }
              *v98 = 0;
              if (v99)
              {
                if (*(_DWORD *)v99 == 2)
                {
                  WTF::StringImpl::~StringImpl(v99, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
                  WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
                }
                else
                {
                  *(_DWORD *)v99 -= 2;
                }
              }
            }
            v98 += 6;
            --v97;
          }
          while (v97);
        }
        WTF::fastFree((unint64_t)(v59 - 2), v28, (uint64_t)v15, v18, v19, v20, v21, v22);
      }
      v60 = v117;
      v117 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v28, (uint64_t)v15, v18, v19, v20, v21, v22);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
      if (++v17 == 8)
        return (WTF *)((char *)v16 + 48) == a2;
    }
    v14 = (uint64_t *)v16;
    v16 = (WTF *)((char *)v16 + 48);
    if (v16 == a2)
      return 1;
  }
}

void std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;

  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v71 = *(_OWORD *)(a1 + 24);
  v72 = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v72 & 0xFFFFFFFE;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v11 = WTF::URL::operator=(a1, (uint64_t *)a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v20 = *(WTF::StringImpl ***)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v19;
  if (v20)
  {
    v31 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v31)
    {
      v32 = v20;
      do
      {
        v33 = *v32;
        if (*v32 != (WTF::StringImpl *)-1)
        {
          v34 = v32[1];
          v32[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v12, v13, v14, v15, v16, v17, v18);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
              v33 = *v32;
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::~StringImpl(v33, v12, v13, v14, v15, v16, v17, v18);
              WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
            }
            else
            {
              *(_DWORD *)v33 -= 2;
            }
          }
        }
        v32 += 6;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((unint64_t)(v20 - 2), v12, v13, v14, v15, v16, v17, v18);
  }
  v21 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v9;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *(_OWORD *)(a2 + 8) = v72;
  *(_OWORD *)(a2 + 24) = v71;
  v22 = *(WTF::StringImpl ***)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v10;
  if (v22)
  {
    v51 = *((unsigned int *)v22 - 1);
    if ((_DWORD)v51)
    {
      v52 = v22;
      do
      {
        v53 = *v52;
        if (*v52 != (WTF::StringImpl *)-1)
        {
          v54 = v52[1];
          v52[1] = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
            {
              WTF::StringImpl::~StringImpl(v54, v12, v13, v14, v15, v16, v17, v18);
              WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              v53 = *v52;
            }
            else
            {
              *(_DWORD *)v54 -= 2;
            }
          }
          *v52 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, v12, v13, v14, v15, v16, v17, v18);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
        }
        v52 += 6;
        --v51;
      }
      while (v51);
    }
    WTF::fastFree((unint64_t)(v22 - 2), v12, v13, v14, v15, v16, v17, v18);
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(WTF *a1, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::String *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ImportMap::registerImportMap(JSC::SourceCode const&,WTF::URL const&,JSC::ImportMap::Reporter *)::$_0 &,JSC::ImportMap::ScopeEntry *>(a1, a2, a3);
  if (WTF::codePointCompareLessThan(a3, a4, v8))
  {
    std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a3, (uint64_t)a4, v9, v10, v11, v12, v13, v14);
    if (WTF::codePointCompareLessThan(a2, a3, v15))
    {
      std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a2, (uint64_t)a3, v16, v17, v18, v19, v20, v21);
      if (WTF::codePointCompareLessThan(a1, a2, v22))
        std::swap[abi:sn180100]<JSC::ImportMap::ScopeEntry>((uint64_t)a1, (uint64_t)a2, v23, v24, v25, v26, v27, v28);
    }
  }
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(uint64_t result, uint64_t *a2, char a3, uint64_t *a4, char a5, uint64_t *a6)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  BOOL v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  _QWORD *v68;
  _QWORD v70[3];

  v6 = (_QWORD *)result;
  v7 = 0;
  v70[2] = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  do
  {
    ++v7;
    v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  v11 = 0;
  v12 = *a4;
  v13 = *((_DWORD *)a4 + 2);
  do
  {
    ++v11;
    v10 = v13 > 9;
    v13 /= 0xAu;
  }
  while (v10);
  v14 = 0;
  v15 = *a6;
  v16 = *((_DWORD *)a6 + 2);
  do
  {
    ++v14;
    v10 = v16 > 9;
    v16 /= 0xAu;
  }
  while (v10);
  if (*(_DWORD *)(v8 + 4) > v7)
    v7 = *(_DWORD *)(v8 + 4);
  if (*(_DWORD *)(v12 + 4) > v11)
    v11 = *(_DWORD *)(v12 + 4);
  v17 = *(_DWORD *)(v15 + 4);
  if (v17 <= v14)
    v17 = v14;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_87;
  v18 = 0;
  v19 = __OFADD__(v17, 1);
  v20 = v17 + 1;
  v21 = v19;
  if ((v11 & 0x80000000) != 0 || (v21 & 1) != 0)
    goto LABEL_86;
  v19 = __OFADD__(v11, v20);
  v22 = v11 + v20;
  if (v19)
    goto LABEL_87;
  v18 = 0;
  v19 = __OFADD__(v22, 1);
  v23 = v22 + 1;
  v24 = v19;
  if ((v7 & 0x80000000) != 0 || (v24 & 1) != 0)
    goto LABEL_86;
  v25 = v7 + v23;
  if (__OFADD__(v7, v23))
    goto LABEL_87;
  if (!(_DWORD)v25)
  {
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_86;
  }
  if ((v25 & 0x80000000) != 0)
  {
LABEL_87:
    v18 = 0;
    goto LABEL_86;
  }
  v68 = (_QWORD *)result;
  v27 = a2[1];
  v28 = a4[1];
  v29 = a6[1];
  result = WTF::tryFastCompactMalloc((WTF *)(v25 + 20), v70);
  v18 = (int *)v70[0];
  if (v70[0])
  {
    v30 = 0;
    v31 = v70[0] + 20;
    *(_DWORD *)v70[0] = 2;
    v18[1] = v25;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    v32 = v27;
    do
    {
      ++v30;
      v10 = v32 > 9;
      v32 /= 0xAu;
    }
    while (v10);
    v33 = *(_DWORD *)(v8 + 4);
    v34 = v33 >= v30;
    v35 = v33 - v30;
    if ((_DWORD)v35 != 0 && v34)
    {
      if (v35 <= 1)
        v36 = 1;
      else
        v36 = v35;
      v37 = v18 + 5;
      do
      {
        *v37++ = *(_BYTE *)v8;
        --v36;
      }
      while (v36);
    }
    else
    {
      v35 = 0;
    }
    v38 = 0;
    v39 = v27;
    do
    {
      *((_BYTE *)&v70[1] + v38-- + 4) = (v39 % 0xA) | 0x30;
      v10 = v39 > 9;
      v39 /= 0xAu;
    }
    while (v10);
    if (v38 + 14 <= 13)
      result = (uint64_t)memcpy((void *)(v31 + v35), (char *)&v70[1] + v38 + 5, -v38);
    LODWORD(v40) = 0;
    do
    {
      v40 = (v40 + 1);
      v10 = v27 > 9;
      LODWORD(v27) = v27 / 0xA;
    }
    while (v10);
    v41 = 0;
    v42 = *(unsigned int *)(v8 + 4);
    if (v42 <= v40)
      v43 = v40;
    else
      v43 = v42;
    v44 = (_BYTE *)(v31 + v43);
    *v44 = a3;
    v45 = v28;
    do
    {
      ++v41;
      v10 = v45 > 9;
      v45 /= 0xAu;
    }
    while (v10);
    v46 = *(_DWORD *)(v12 + 4);
    v34 = v46 >= v41;
    v47 = v46 - v41;
    v6 = v68;
    if ((_DWORD)v47 != 0 && v34)
    {
      if (v47 <= 1)
        v48 = 1;
      else
        v48 = v47;
      if (v42 <= v40)
        v49 = v40;
      else
        v49 = v42;
      v50 = (char *)v18 + v49 + 21;
      do
      {
        *v50++ = *(_BYTE *)v12;
        --v48;
      }
      while (v48);
    }
    else
    {
      v47 = 0;
    }
    v51 = 0;
    v52 = v44 + 1;
    v53 = v28;
    do
    {
      *((_BYTE *)&v70[1] + v51-- + 4) = (v53 % 0xA) | 0x30;
      v10 = v53 > 9;
      v53 /= 0xAu;
    }
    while (v10);
    if (v51 + 14 <= 13)
      result = (uint64_t)memcpy(&v52[v47], (char *)&v70[1] + v51 + 5, -v51);
    LODWORD(v54) = 0;
    do
    {
      v54 = (v54 + 1);
      v10 = v28 > 9;
      LODWORD(v28) = v28 / 0xA;
    }
    while (v10);
    v55 = 0;
    v56 = *(unsigned int *)(v12 + 4);
    if (v56 <= v54)
      v57 = v54;
    else
      v57 = v56;
    v58 = &v52[v57];
    *v58 = a5;
    v59 = v29;
    do
    {
      ++v55;
      v10 = v59 > 9;
      v59 /= 0xAu;
    }
    while (v10);
    v60 = *(_DWORD *)(v15 + 4);
    v34 = v60 >= v55;
    v61 = v60 - v55;
    if ((_DWORD)v61 != 0 && v34)
    {
      if (v61 <= 1)
        v62 = 1;
      else
        v62 = v61;
      if (v42 <= v40)
        v63 = v40;
      else
        v63 = v42;
      v64 = (char *)v18 + v63;
      if (v56 > v54)
        v54 = v56;
      v65 = &v64[v54 + 22];
      do
      {
        *v65++ = *(_BYTE *)v15;
        --v62;
      }
      while (v62);
    }
    else
    {
      v61 = 0;
    }
    v66 = 0;
    v67 = v58 + 1;
    do
    {
      *((_BYTE *)&v70[1] + v66-- + 4) = (v29 % 0xA) | 0x30;
      v10 = v29 > 9;
      LODWORD(v29) = v29 / 0xA;
    }
    while (v10);
    if (v66 + 14 <= 13)
      result = (uint64_t)memcpy(&v67[v61], (char *)&v70[1] + v66 + 5, -v66);
  }
  else
  {
    v6 = v68;
  }
LABEL_86:
  *v6 = v18;
  return result;
}

_WORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>,WTF::StringTypeAdapter<WTF::Vector<unsigned char,9ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(_WORD *result, unsigned __int8 **a2, char a3, unsigned __int8 **a4, char a5, unsigned __int8 **a6, char a7, unsigned __int8 *a8, uint64_t a9, int8x16_t **a10)
{
  int **v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  int *v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int8x16_t *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t i;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  size_t v108;
  uint64_t v109;
  unsigned int v110;
  _WORD *v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  _WORD *v115;
  unsigned int v116;
  unint64_t v117;
  __int16 v118;
  unint64_t v119;
  unint64_t v120;
  _WORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _WORD *v125;
  unsigned int v126;
  _WORD *v127;
  unint64_t v128;
  unsigned int v129;
  int v130;
  _WORD *v131;
  unsigned int v132;
  unint64_t v133;
  __int16 v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _WORD *v142;
  unsigned int v143;
  _WORD *v144;
  unint64_t v145;
  int v146;
  _WORD *v147;
  _WORD *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  __int16 v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  int8x16_t *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  _WORD *v163;
  _WORD *v164;
  __int128 v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  char *v169;
  char *v170;
  char *v171;
  __int16 v172;
  unsigned int v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  char *v181;
  char *v182;
  char *v183;
  __int16 v184;
  _BYTE *v185;
  _BYTE *v186;
  unsigned __int128 v187;
  char v188;
  _BYTE *__src;
  size_t __n;
  uint64_t v191;
  int **v196;
  _QWORD v197[3];
  int8x16x2_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;

  v10 = (int **)result;
  v11 = 0;
  v197[2] = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  do
  {
    ++v11;
    v14 = v13 > 9;
    v13 /= 0xAu;
  }
  while (v14);
  v15 = 0;
  v16 = *a4;
  v17 = *((_DWORD *)a4 + 2);
  do
  {
    ++v15;
    v14 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v14);
  v18 = 0;
  v19 = *a6;
  v20 = *((_DWORD *)a6 + 2);
  do
  {
    ++v18;
    v14 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v14);
  if (*((_DWORD *)v12 + 1) > v11)
    v11 = *((_DWORD *)v12 + 1);
  if (*((_DWORD *)v16 + 1) > v15)
    v15 = *((_DWORD *)v16 + 1);
  v21 = *((_DWORD *)v19 + 1);
  if (v21 <= v18)
    v21 = v18;
  if (a9)
    v22 = *(_DWORD *)(a9 + 4);
  else
    v22 = 0;
  if (*((_DWORD *)a8 + 1) > v22)
    v22 = *((_DWORD *)a8 + 1);
  v23 = *((_DWORD *)a10 + 2);
  if (((v23 | v22) & 0x80000000) != 0)
    goto LABEL_234;
  v24 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  if (v24)
    goto LABEL_234;
  v26 = 0;
  v24 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  v28 = v24;
  if ((v21 & 0x80000000) != 0 || (v28 & 1) != 0)
    goto LABEL_233;
  v24 = __OFADD__(v21, v27);
  v29 = v21 + v27;
  if (v24)
    goto LABEL_234;
  v26 = 0;
  v24 = __OFADD__(v29, 1);
  v30 = v29 + 1;
  v31 = v24;
  if ((v15 & 0x80000000) != 0 || (v31 & 1) != 0)
    goto LABEL_233;
  v24 = __OFADD__(v15, v30);
  v32 = v15 + v30;
  if (v24)
    goto LABEL_234;
  v26 = 0;
  v24 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  if (v24 || (v11 & 0x80000000) != 0)
    goto LABEL_233;
  v34 = v11 + v33;
  if (__OFADD__(v11, v33))
    goto LABEL_234;
  v196 = (int **)result;
  if (a9 && (*(_BYTE *)(a9 + 16) & 4) == 0)
  {
    if ((_DWORD)v34)
    {
      if (v34 > 0x7FFFFFEF)
      {
        v26 = 0;
      }
      else
      {
        v36 = a2[1];
        v37 = a4[1];
        v38 = a6[1];
        v39 = *a10;
        v191 = *((unsigned int *)a10 + 2);
        result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v34 + 20), v197);
        v26 = (int *)v197[0];
        if (v197[0])
        {
          v40 = 0;
          v41 = v197[0] + 20;
          *(_DWORD *)v197[0] = 2;
          v26[1] = v34;
          *((_QWORD *)v26 + 1) = v26 + 5;
          v26[4] = 0;
          v42 = v36;
          do
          {
            ++v40;
            v14 = v42 > 9;
            v42 /= 0xAu;
          }
          while (v14);
          v43 = *((unsigned int *)v12 + 1);
          if (v43 <= v40)
          {
            v47 = 0;
          }
          else
          {
            v44 = *v12;
            v45 = v43 - v40;
            if (v45 <= 1)
              v45 = 1;
            v46 = v26 + 5;
            do
            {
              *v46++ = v44;
              --v45;
            }
            while (v45);
            v47 = v43 - v40;
          }
          v109 = 0;
          v110 = v36;
          do
          {
            *((_BYTE *)&v197[1] + v109-- + 4) = (v110 % 0xA) | 0x30;
            v14 = v110 > 9;
            v110 /= 0xAu;
          }
          while (v14);
          if (v109 + 14 <= 13)
          {
            v111 = (_WORD *)(v41 + 2 * v47);
            do
            {
              *v111++ = *((unsigned __int8 *)&v197[1] + v109 + 5);
              v55 = __CFADD__(v109++, 1);
            }
            while (!v55);
          }
          LODWORD(v112) = 0;
          do
          {
            v112 = (v112 + 1);
            v14 = v36 > 9;
            LODWORD(v36) = v36 / 0xA;
          }
          while (v14);
          v113 = 0;
          if (v43 <= v112)
            v114 = v112;
          else
            v114 = v43;
          v115 = (_WORD *)(v41 + 2 * v114);
          *v115 = a3;
          v116 = v37;
          do
          {
            ++v113;
            v14 = v116 > 9;
            v116 /= 0xAu;
          }
          while (v14);
          v117 = *((unsigned int *)v16 + 1);
          if (v117 <= v113)
          {
            v123 = 0;
            v122 = a9;
          }
          else
          {
            v118 = *v16;
            v119 = v117 - v113;
            if (v119 <= 1)
              v119 = 1;
            if (v43 <= v112)
              v120 = v112;
            else
              v120 = v43;
            v121 = (_WORD *)v26 + v120 + 11;
            v122 = a9;
            do
            {
              *v121++ = v118;
              --v119;
            }
            while (v119);
            v123 = v117 - v113;
          }
          v124 = 0;
          v125 = v115 + 1;
          v126 = v37;
          do
          {
            *((_BYTE *)&v197[1] + v124-- + 4) = (v126 % 0xA) | 0x30;
            v14 = v126 > 9;
            v126 /= 0xAu;
          }
          while (v14);
          if (v124 + 14 <= 13)
          {
            v127 = &v125[v123];
            do
            {
              *v127++ = *((unsigned __int8 *)&v197[1] + v124 + 5);
              v55 = __CFADD__(v124++, 1);
            }
            while (!v55);
          }
          LODWORD(v128) = 0;
          do
          {
            v128 = (v128 + 1);
            v14 = v37 > 9;
            LODWORD(v37) = v37 / 0xA;
          }
          while (v14);
          v129 = 0;
          if (v117 <= v128)
            v130 = v128;
          else
            v130 = v117;
          v131 = &v125[v130];
          *v131 = a5;
          v132 = v38;
          do
          {
            ++v129;
            v14 = v132 > 9;
            v132 /= 0xAu;
          }
          while (v14);
          v133 = *((unsigned int *)v19 + 1);
          if (v133 <= v129)
          {
            v140 = 0;
          }
          else
          {
            v134 = *v19;
            v135 = v133 - v129;
            if (v135 <= 1)
              v135 = 1;
            if (v43 <= v112)
              v136 = v112;
            else
              v136 = v43;
            v137 = (char *)v26 + 2 * v136;
            if (v117 <= v128)
              v138 = v128;
            else
              v138 = v117;
            v139 = &v137[2 * v138 + 24];
            do
            {
              *(_WORD *)v139 = v134;
              v139 += 2;
              --v135;
            }
            while (v135);
            v140 = v133 - v129;
          }
          v141 = 0;
          v142 = v131 + 1;
          v143 = v38;
          do
          {
            *((_BYTE *)&v197[1] + v141-- + 4) = (v143 % 0xA) | 0x30;
            v14 = v143 > 9;
            v143 /= 0xAu;
          }
          while (v14);
          if (v141 + 14 <= 13)
          {
            v144 = &v142[v140];
            do
            {
              *v144++ = *((unsigned __int8 *)&v197[1] + v141 + 5);
              v55 = __CFADD__(v141++, 1);
            }
            while (!v55);
          }
          LODWORD(v145) = 0;
          do
          {
            v145 = (v145 + 1);
            v14 = v38 > 9;
            LODWORD(v38) = v38 / 0xA;
          }
          while (v14);
          if (v133 <= v145)
            v146 = v145;
          else
            v146 = v133;
          v147 = &v142[v146];
          *v147 = a7;
          v148 = v147 + 1;
          v149 = *(_DWORD *)(v122 + 4);
          v150 = *((_DWORD *)a8 + 1);
          v55 = v150 >= v149;
          v151 = v150 - v149;
          if ((_DWORD)v151 != 0 && v55)
          {
            v152 = *a8;
            if (v43 <= v112)
              v43 = v112;
            v153 = (char *)v26 + 2 * v43;
            if (v117 <= v128)
              v154 = v128;
            else
              v154 = v117;
            v155 = &v153[2 * v154];
            if (v133 <= v145)
              v156 = v145;
            else
              v156 = v133;
            v157 = &v155[2 * v156 + 26];
            v158 = v151;
            do
            {
              *(_WORD *)v157 = v152;
              v157 += 2;
              --v158;
            }
            while (v158);
          }
          else
          {
            v151 = 0;
          }
          result = &v148[v151];
          v159 = *(int8x16_t **)(v122 + 8);
          v160 = *(unsigned int *)(v122 + 4);
          if ((*(_BYTE *)(v122 + 16) & 4) != 0)
          {
            v163 = &result[v160];
            if (v160 >= 0x40)
            {
              v164 = &result[v160 & 0xFFFFFFC0];
              v165 = 0uLL;
              do
              {
                v198.val[0] = *v159;
                v166 = v159[1];
                v200.val[0] = v159[2];
                v167 = v159[3];
                v159 += 4;
                v168 = v167;
                v200.val[1] = 0uLL;
                v202.val[0] = v166;
                v198.val[1] = 0uLL;
                v169 = (char *)result;
                vst2q_s8(v169, v198);
                v169 += 32;
                v202.val[1] = 0uLL;
                vst2q_s8(v169, v202);
                v170 = (char *)(result + 32);
                vst2q_s8(v170, v200);
                v171 = (char *)(result + 48);
                vst2q_s8(v171, *(int8x16x2_t *)(&v165 - 1));
                result += 64;
              }
              while (result != v164);
              result = v164;
            }
            while (result != v163)
            {
              v172 = v159->u8[0];
              v159 = (int8x16_t *)((char *)v159 + 1);
              *result++ = v172;
            }
          }
          else if ((_DWORD)v160 == 1)
          {
            *result = v159->i16[0];
          }
          else if ((_DWORD)v160)
          {
            result = memcpy(result, v159, 2 * v160);
          }
          v173 = *(_DWORD *)(v122 + 4);
          if (*((_DWORD *)a8 + 1) > v173)
            v173 = *((_DWORD *)a8 + 1);
          v174 = (char *)&v148[v173];
          v175 = &v174[2 * v191];
          if ((v191 & 0xFFFFFFC0) != 0)
          {
            v176 = &v174[2 * (v191 & 0xFFFFFFC0)];
            v177 = 0uLL;
            do
            {
              v199.val[0] = *v39;
              v178 = v39[1];
              v201.val[0] = v39[2];
              v179 = v39[3];
              v39 += 4;
              v180 = v179;
              v201.val[1] = 0uLL;
              v203.val[0] = v178;
              v199.val[1] = 0uLL;
              v181 = v174;
              vst2q_s8(v181, v199);
              v181 += 32;
              v203.val[1] = 0uLL;
              vst2q_s8(v181, v203);
              v182 = v174 + 64;
              vst2q_s8(v182, v201);
              v183 = v174 + 96;
              vst2q_s8(v183, *(int8x16x2_t *)(&v177 - 1));
              v174 += 128;
            }
            while (v174 != v176);
            v174 = v176;
          }
          while (v174 != v175)
          {
            v184 = v39->u8[0];
            v39 = (int8x16_t *)((char *)v39 + 1);
            *(_WORD *)v174 = v184;
            v174 += 2;
          }
        }
      }
      goto LABEL_232;
    }
LABEL_238:
    v26 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_233;
  }
  if (!(_DWORD)v34)
    goto LABEL_238;
  if ((v34 & 0x80000000) != 0)
  {
LABEL_234:
    v26 = 0;
    goto LABEL_233;
  }
  v48 = a2[1];
  v49 = a4[1];
  v50 = a6[1];
  __src = *a10;
  __n = *((unsigned int *)a10 + 2);
  result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(v34 + 20), v197);
  v26 = (int *)v197[0];
  if (!v197[0])
  {
LABEL_232:
    v10 = v196;
    goto LABEL_233;
  }
  v51 = 0;
  v52 = v197[0] + 20;
  *(_DWORD *)v197[0] = 2;
  v26[1] = v34;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 4;
  v53 = v48;
  do
  {
    ++v51;
    v14 = v53 > 9;
    v53 /= 0xAu;
  }
  while (v14);
  v54 = *((_DWORD *)v12 + 1);
  v55 = v54 >= v51;
  v56 = v54 - v51;
  if ((_DWORD)v56 != 0 && v55)
  {
    if (v56 <= 1)
      v57 = 1;
    else
      v57 = v56;
    v58 = v26 + 5;
    do
    {
      *v58++ = *v12;
      --v57;
    }
    while (v57);
  }
  else
  {
    v56 = 0;
  }
  v59 = 0;
  v60 = v48;
  do
  {
    *((_BYTE *)&v197[1] + v59-- + 4) = (v60 % 0xA) | 0x30;
    v14 = v60 > 9;
    v60 /= 0xAu;
  }
  while (v14);
  if (v59 + 14 <= 13)
    memcpy((void *)(v52 + v56), (char *)&v197[1] + v59 + 5, -v59);
  LODWORD(v61) = 0;
  do
  {
    v61 = (v61 + 1);
    v14 = v48 > 9;
    LODWORD(v48) = v48 / 0xA;
  }
  while (v14);
  v62 = 0;
  v63 = *((unsigned int *)v12 + 1);
  if (v63 <= v61)
    v64 = v61;
  else
    v64 = v63;
  v65 = (_BYTE *)(v52 + v64);
  *v65 = a3;
  v66 = v49;
  do
  {
    ++v62;
    v14 = v66 > 9;
    v66 /= 0xAu;
  }
  while (v14);
  v67 = *((_DWORD *)v16 + 1);
  v55 = v67 >= v62;
  v68 = v67 - v62;
  i = a9;
  if ((_DWORD)v68 != 0 && v55)
  {
    if (v68 <= 1)
      v70 = 1;
    else
      v70 = v68;
    if (v63 <= v61)
      v71 = v61;
    else
      v71 = v63;
    v72 = (char *)v26 + v71 + 21;
    do
    {
      *v72++ = *v16;
      --v70;
    }
    while (v70);
  }
  else
  {
    v68 = 0;
  }
  v73 = 0;
  v74 = v65 + 1;
  v75 = v49;
  do
  {
    *((_BYTE *)&v197[1] + v73-- + 4) = (v75 % 0xA) | 0x30;
    v14 = v75 > 9;
    v75 /= 0xAu;
  }
  while (v14);
  if (v73 + 14 <= 13)
    memcpy(&v74[v68], (char *)&v197[1] + v73 + 5, -v73);
  LODWORD(v76) = 0;
  do
  {
    v76 = (v76 + 1);
    v14 = v49 > 9;
    LODWORD(v49) = v49 / 0xA;
  }
  while (v14);
  v77 = 0;
  v78 = *((unsigned int *)v16 + 1);
  if (v78 <= v76)
    v79 = v76;
  else
    v79 = v78;
  v80 = &v74[v79];
  *v80 = a5;
  v81 = v50;
  do
  {
    ++v77;
    v14 = v81 > 9;
    v81 /= 0xAu;
  }
  while (v14);
  v82 = *((_DWORD *)v19 + 1);
  v55 = v82 >= v77;
  v83 = v82 - v77;
  v84 = a8;
  if ((_DWORD)v83 != 0 && v55)
  {
    if (v83 <= 1)
      v85 = 1;
    else
      v85 = v83;
    if (v63 <= v61)
      v86 = v61;
    else
      v86 = v63;
    v87 = (char *)v26 + v86;
    if (v78 <= v76)
      v88 = v76;
    else
      v88 = v78;
    v89 = &v87[v88 + 22];
    do
    {
      *v89++ = *v19;
      --v85;
    }
    while (v85);
  }
  else
  {
    v83 = 0;
  }
  v90 = 0;
  v91 = v80 + 1;
  v92 = v50;
  do
  {
    *((_BYTE *)&v197[1] + v90-- + 4) = (v92 % 0xA) | 0x30;
    v14 = v92 > 9;
    v92 /= 0xAu;
  }
  while (v14);
  if (v90 + 14 <= 13)
    memcpy(&v91[v83], (char *)&v197[1] + v90 + 5, -v90);
  LODWORD(v93) = 0;
  do
  {
    v93 = (v93 + 1);
    v14 = v50 > 9;
    LODWORD(v50) = v50 / 0xA;
  }
  while (v14);
  v94 = *((unsigned int *)v19 + 1);
  if (v94 <= v93)
    v95 = v93;
  else
    v95 = v94;
  v91[v95] = a7;
  v96 = (uint64_t)&v91[v95 + 1];
  if (a9)
    v97 = *(_DWORD *)(a9 + 4);
  else
    v97 = 0;
  v98 = *((_DWORD *)a8 + 1);
  v55 = v98 >= v97;
  v99 = v98 - v97;
  if ((_DWORD)v99 != 0 && v55)
  {
    if (v63 <= v61)
      v100 = v61;
    else
      v100 = v63;
    v101 = (char *)v26 + v100;
    if (v78 <= v76)
      v102 = v76;
    else
      v102 = v78;
    v103 = &v101[v102];
    if (v94 > v93)
      v93 = v94;
    v104 = &v103[v93 + 23];
    v105 = v99;
    do
    {
      *v104++ = *a8;
      --v105;
    }
    while (v105);
  }
  else
  {
    v99 = 0;
  }
  v10 = v196;
  if (a9)
  {
    v106 = (_BYTE *)(v96 + v99);
    v107 = *(_BYTE **)(a9 + 8);
    v108 = *(unsigned int *)(a9 + 4);
    if ((*(_BYTE *)(a9 + 16) & 4) != 0)
    {
      if ((_DWORD)v108 == 1)
      {
        *v106 = *v107;
      }
      else if ((_DWORD)v108)
      {
        memcpy(v106, v107, v108);
      }
    }
    else
    {
      v185 = &v106[v108];
      if (v108 >= 0x10)
      {
        v186 = &v106[v108 & 0xFFFFFFF0];
        do
        {
          v187 = (unsigned __int128)vld2q_s8(v107);
          v107 += 32;
          *(_OWORD *)v106 = v187;
          v106 += 16;
        }
        while (v106 != v186);
        v106 = v186;
      }
      v84 = a8;
      v10 = v196;
      for (i = a9; v106 != v185; ++v106)
      {
        v188 = *v107;
        v107 += 2;
        *v106 = v188;
      }
    }
    LODWORD(v161) = *(_DWORD *)(i + 4);
  }
  else
  {
    LODWORD(v161) = 0;
  }
  v162 = *((_DWORD *)v84 + 1);
  if (v162 <= v161)
    v161 = v161;
  else
    v161 = v162;
  result = (_WORD *)(v96 + v161);
  if ((_DWORD)__n == 1)
  {
    *(_BYTE *)result = *__src;
  }
  else if ((_DWORD)__n)
  {
    result = memcpy(result, __src, __n);
  }
LABEL_233:
  *v10 = v26;
  return result;
}

void WTF::VectorDestructor<true,JSC::ImportMap::ScopeEntry>::destruct(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *((_QWORD *)v9 + 5);
      if (v10)
      {
        v20 = *(unsigned int *)(v10 - 4);
        if ((_DWORD)v20)
        {
          v21 = (WTF::StringImpl **)*((_QWORD *)v9 + 5);
          do
          {
            v22 = *v21;
            if (*v21 != (WTF::StringImpl *)-1)
            {
              v23 = v21[1];
              v21[1] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                  v22 = *v21;
                }
                else
                {
                  *(_DWORD *)v23 -= 2;
                }
              }
              *v21 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                {
                  WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
                }
                else
                {
                  *(_DWORD *)v22 -= 2;
                }
              }
            }
            v21 += 6;
            --v20;
          }
          while (v20);
        }
        WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v9 = (WTF::AtomStringImpl *)((char *)v9 + 48);
    }
    while (v9 != a2);
  }
}

WTF **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  int v9;
  WTF **v10;
  WTF *v11;

  if (!a1)
    return 0;
  v5 = *(_DWORD *)(a1 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    v10 = (WTF **)(a1 + 48 * (v7 & v5));
    v11 = *v10;
    if (*v10 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if (WTF::equal(v11, *a2, a3))
        break;
    }
    ++i;
  }
  return v10;
}

char *WTF::Vector<JSC::ImportMap::ScopeEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::AtomStringImpl *v5;
  WTF::AtomStringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  WTF::AtomStringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(WTF::AtomStringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::AtomStringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v25 = *(unsigned int *)(a1 + 8);
    v26 = v25 + (v25 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= a2)
      v27 = a2;
    if (v27 > v25)
    {
      if (v27 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19894EE6CLL);
      }
      v28 = (WTF::AtomStringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v29 = 48 * v27;
      v30 = WTF::fastMalloc((WTF *)(48 * v27));
      *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v30;
      WTF::VectorMover<false,JSC::ImportMap::ScopeEntry>::move(v5, v28, v30, v31, v32, v33, v34, v35);
      if (v5)
      {
        if (*(WTF::AtomStringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v24 = *(WTF::AtomStringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19894EE74);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,JSC::ImportMap::ScopeEntry>::move(v5, v6, v11, v12, v13, v14, v15, v16);
      v24 = *(WTF::AtomStringImpl **)a1;
      if (v5)
      {
        if (v24 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
        v24 = *(WTF::AtomStringImpl **)a1;
      }
    }
    return (char *)v24 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

void WTF::VectorMover<false,JSC::ImportMap::ScopeEntry>::move(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::AtomStringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v8 = v11;
      v12 = *(_DWORD *)(v8 + 8) & 0xFFFFFFFE | *((_DWORD *)v10 + 2) & 1;
      *(_DWORD *)(v8 + 8) = v12;
      v13 = v12 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v10 + 2) >> 1) & 1));
      *(_DWORD *)(v8 + 8) = v13;
      v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v10 + 2) >> 2) & 1));
      *(_DWORD *)(v8 + 8) = v14;
      v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v10 + 2) >> 3) & 7));
      *(_DWORD *)(v8 + 8) = v15;
      *(_DWORD *)(v8 + 8) = *((_DWORD *)v10 + 2) & 0xFFFFFFC0 | v15 & 0x3F;
      *(_OWORD *)(v8 + 12) = *(_OWORD *)((char *)v10 + 12);
      *(_QWORD *)(v8 + 28) = *(_QWORD *)((char *)v10 + 28);
      *(_DWORD *)(v8 + 36) = *((_DWORD *)v10 + 9);
      *((_DWORD *)v10 + 2) &= ~1u;
      *(_QWORD *)(v8 + 40) = 0;
      v16 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = 0;
      *(_QWORD *)(v8 + 40) = v16;
      v17 = *((_QWORD *)v10 + 5);
      if (v17)
      {
        v27 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v27)
        {
          v28 = (WTF::StringImpl **)*((_QWORD *)v10 + 5);
          do
          {
            v29 = *v28;
            if (*v28 != (WTF::StringImpl *)-1)
            {
              v30 = v28[1];
              v28[1] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                {
                  WTF::StringImpl::~StringImpl(v30, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
                  v29 = *v28;
                }
                else
                {
                  *(_DWORD *)v30 -= 2;
                }
              }
              *v28 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                {
                  WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
                }
                else
                {
                  *(_DWORD *)v29 -= 2;
                }
              }
            }
            v28 += 6;
            --v27;
          }
          while (v27);
        }
        WTF::fastFree(v17 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      v8 += 48;
      v10 = (WTF::AtomStringImpl *)((char *)v10 + 48);
    }
    while (v10 != a2);
  }
}

void WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WTF::String>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WTF::String,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(48 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = v11;
    while (1)
    {
      v23 = v10 + 48 * v21;
      v24 = *(WTF::StringImpl **)v23;
      if (*(_QWORD *)v23 == -1)
        goto LABEL_32;
      if (v24)
        break;
      v25 = v10 + 48 * v21;
      v26 = *(WTF::StringImpl **)(v25 + 40);
      *(_QWORD *)(v25 + 40) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
          v24 = *(WTF::StringImpl **)v23;
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      *(_QWORD *)v23 = 0;
      if (!v24)
        goto LABEL_32;
      if (*(_DWORD *)v24 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v24, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        goto LABEL_32;
      }
      *(_DWORD *)v24 -= 2;
LABEL_32:
      if (++v21 == v22)
        goto LABEL_44;
    }
    v27 = *a1;
    if (*a1)
      v28 = *(_DWORD *)(v27 - 8);
    else
      v28 = 0;
    v29 = *((_DWORD *)v24 + 4);
    if (v29 < 0x100)
      v30 = WTF::StringImpl::hashSlowCase(v24);
    else
      v30 = v29 >> 8;
    v31 = v30 & v28;
    v32 = v27 + 48 * (v30 & v28);
    if (*(_QWORD *)v32)
    {
      v33 = 1;
      do
      {
        v31 = (v31 + v33) & v28;
        v32 = v27 + 48 * v31;
        ++v33;
      }
      while (*(_QWORD *)v32);
    }
    v34 = v27 + 48 * v31;
    v37 = *(WTF::StringImpl **)(v34 + 40);
    v36 = (_QWORD *)(v34 + 40);
    v35 = v37;
    *v36 = 0;
    if (v37)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        v70 = *(WTF::StringImpl **)v32;
        *(_QWORD *)v32 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
        goto LABEL_26;
      }
      *(_DWORD *)v35 -= 2;
    }
    *(_QWORD *)v32 = 0;
LABEL_26:
    v38 = *(WTF::StringImpl **)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v32 = v38;
    v39 = *(_DWORD *)(v32 + 8) & 0xFFFFFFFE | *(_DWORD *)(v23 + 8) & 1;
    *(_DWORD *)(v32 + 8) = v39;
    v40 = v39 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v23 + 8) >> 1) & 1));
    *(_DWORD *)(v32 + 8) = v40;
    v41 = v40 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v23 + 8) >> 2) & 1));
    *(_DWORD *)(v32 + 8) = v41;
    v42 = v41 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(v23 + 8) >> 3) & 7));
    *(_DWORD *)(v32 + 8) = v42;
    *(_DWORD *)(v32 + 8) = *(_DWORD *)(v23 + 8) & 0xFFFFFFC0 | v42 & 0x3F;
    *(_OWORD *)(v32 + 12) = *(_OWORD *)(v23 + 12);
    *(_QWORD *)(v32 + 28) = *(_QWORD *)(v23 + 28);
    *(_DWORD *)(v32 + 36) = *(_DWORD *)(v23 + 36);
    *(_DWORD *)(v23 + 8) &= ~1u;
    v43 = v10 + 48 * v21;
    v44 = *(_QWORD *)(v43 + 40);
    *(_QWORD *)(v43 + 40) = 0;
    *v36 = v44;
    v45 = *(WTF::StringImpl **)(v43 + 40);
    *(_QWORD *)(v43 + 40) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    v24 = *(WTF::StringImpl **)v23;
    *(_QWORD *)v23 = 0;
    if (!v24)
      goto LABEL_32;
    if (*(_DWORD *)v24 == 2)
      goto LABEL_36;
    *(_DWORD *)v24 -= 2;
    goto LABEL_32;
  }
  if (v10)
LABEL_44:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::initialize(void)::$_0 &&>>()
{
  unint64_t v0;
  JSC::VM *v1;
  JSC::Options *v2;
  uint8x8_t v3;
  JSC::IPInt *v4;
  JSC *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  char v9;
  char **v10;
  char *v11;

  v0 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v0 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initialize(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  std::call_once[abi:sn180100]<JSC::Options::initialize(void)::$_0>((uint64_t)&v11);
  if (!byte_1ECF4C1E1)
  {
    v1 = (JSC::VM *)WTF::fastMalloc((WTF *)1);
    *(_BYTE *)v1 = 0;
    qword_1ECF4C1E8 = (uint64_t)v1;
    JSC::globalExecutableAllocatorToWorkAroundLeaks = (uint64_t)v1;
  }
  JSC::VM::computeCanUseJIT(v1);
  if (!byte_1ECF4C1E6)
  {
    BYTE1(dword_1ECF4C240) = 0;
    JSC::Options::notifyOptionsChanged(v2, v3);
  }
  JSC::Options::finalize(v2);
  if (BYTE2(qword_1ECF4C789))
    pas_scavenger_disable_shut_down();
  *(_OWORD *)JSC::commentsRegistry = 0u;
  xmmword_1ECF500D0 = 0u;
  qword_1ECF500C8 = (uint64_t)&xmmword_1ECF500D0;
  if (byte_1ECF4C798 | word_1ECF4C79E)
    JSC::IPInt::initialize(v4);
  JSC::LLInt::initialize(v4);
  JSC::initializeSuperSampler(v5);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(v6 + 16);
  JSC::calleeRegistry = 0;
  qword_1ECF53D80 = 0;
  qword_1ECF53D88 = 0;
  if (BYTE2(dword_1ECF4C6C3))
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(v6 + 8) = 0;
    JSC::Wasm::thunks = v6;
  }
  if (!BYTE1(dword_1ECF4C240) || BYTE1(dword_1ECF4C723))
  {
    v6 = (uint64_t)getenv("XPC_SERVICE_NAME");
    if (!v6
      || (v7 = (const char *)v6,
          v8 = strncmp((const char *)v6, "application.", 0xCuLL),
          v6 = strncmp(v7, "com.apple.WebKit.", 0x11uLL),
          v8)
      && (_DWORD)v6)
    {
      pas_scavenger_period_in_milliseconds = 0x4014000000000000;
      pas_scavenger_max_epoch_delta = 5000000;
      pas_physical_page_sharing_pool_balancing_enabled = 1;
      pas_physical_page_sharing_pool_balancing_enabled_for_utility = 1;
      qword_1ECF325B8 = 0xFFFFFFFF00000000;
      qword_1ECF325E0 = 0xFFFFFFFF00000000;
    }
  }
  if (!BYTE2(dword_1ECF4C6C3))
  {
    if (byte_1ECF4C6B4)
      goto LABEL_27;
LABEL_25:
    JSC::VMTraps::SignalSender::initializeSignals((JSC::VMTraps::SignalSender *)v6);
    if (!BYTE2(dword_1ECF4C6C3))
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!byte_1ECF4C6B4)
    goto LABEL_25;
LABEL_26:
  std::call_once[abi:sn180100]<JSC::Wasm::prepareSignalingMemory(void)::$_0>((uint64_t)&v11);
LABEL_27:
  if (byte_1ECF4C1E5)
    __break(0xC471u);
  else
    byte_1ECF4C1E5 = 1;
}

uint64_t JSC::InternalFunction::getCallData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(this + 16);
  *(_BYTE *)(a2 + 16) = 0;
  return this;
}

uint64_t JSC::InternalFunction::getConstructData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);

  *(_BYTE *)a2 = 0;
  v3 = *(uint64_t (**)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))(this + 24);
  if (v3 != JSC::callHostFunctionAsConstructor)
  {
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

void JSC::InternalFunction::visitChildren(JSC::InternalFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::InternalFunction::visitChildren(JSC::InternalFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::InternalFunction::InternalFunction(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3))
{
  int v5;
  uint64_t (*v6)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  v6 = JSC::callHostFunctionAsConstructor;
  if (a5)
    v6 = a5;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 40);
  return result;
}

{
  int v5;
  uint64_t (*v6)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  v6 = JSC::callHostFunctionAsConstructor;
  if (a5)
    v6 = a5;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 40);
  return result;
}

void JSC::InternalFunction::finishCreation(unint64_t a1, JSC *this, const WTF::String *a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v8 = a5;
  v9 = a3;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = JSC::jsString(this, a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  v17 = v12;
  *(_QWORD *)(a1 + 32) = v12;
  if (a1 && v12 && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, a1);
  v18 = (char *)this + 41952;
  v19 = *(_QWORD *)(*((_QWORD *)this + 5244) + 1768);
  if (v8)
  {
    if ((v9 & 0x80000000) != 0)
      v20 = COERCE__INT64((double)v9) + 0x2000000000000;
    else
      v20 = v9 | 0xFFFE000000000000;
    v16.n128_f64[0] = (double)v9;
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)a1, (uint64_t)this, v19, v20, 6, v13, v14, v15, v16);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)a1, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v18 + 1968), v17, 6, v21, v22, v23, v24);
  }
  else
  {
    if ((v9 & 0x80000000) != 0)
      v25 = COERCE__INT64((double)v9) + 0x2000000000000;
    else
      v25 = v9 | 0xFFFE000000000000;
    v30 = 0;
    v31 = a1;
    v32 = -1;
    v16.n128_u64[0] = 0x100000001000000;
    v33 = 0x1000000;
    v34 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, (uint64_t)this, v19, v25, 6, (uint64_t)&v30, v14, v15, v16);
    v26 = *(_QWORD *)(*(_QWORD *)v18 + 1968);
    v30 = 0;
    v31 = a1;
    v32 = -1;
    v27.n128_u64[0] = 0x100000001000000;
    v33 = 0x1000000;
    v34 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, (uint64_t)this, v26, v17, 6, (uint64_t)&v30, v28, v29, v27);
  }
}

int **JSC::InternalFunction::name@<X0>(JSC::InternalFunction *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>, int8x16_t a9@<Q0>)
{
  unint64_t v9;
  int **result;
  int *v11;
  int **v12;

  v9 = *((_QWORD *)this + 4);
  result = (int **)(v9 + 8);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    v12 = a8;
    result = JSC::JSRopeString::resolveRope(v9, 0, a2, a3, a9, a4, a5, a6, a7);
    a8 = v12;
  }
  v11 = *result;
  if (*result)
    *v11 += 2;
  *a8 = v11;
  return result;
}

void JSC::InternalFunction::displayName(JSC::InternalFunction *this, JSC::VM *a2, JSC::VM *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  BOOL v17;
  int *v18;

  JSC::JSObject::getDirect(a2, a3, *(_QWORD *)(*((_QWORD *)a3 + 5244) + 1192), a4, a5, a6, a7, a8);
  if (v9)
    v17 = (v9 & 0xFFFE000000000002) == 0;
  else
    v17 = 0;
  if (v17 && *(_BYTE *)(v9 + 5) == 2)
  {
    v18 = *(int **)(v9 + 8);
    if ((v18 & 1) != 0)
      v18 = *JSC::JSRopeString::resolveRope(v9, 0, v10, v11, v16, v12, v13, v14, v15);
    if (v18)
      *v18 += 2;
    *(_QWORD *)this = v18;
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void JSC::InternalFunction::calculatedDisplayName(JSC::InternalFunction *this@<X0>, JSC::VM *a2@<X1>, const JSC::PropertyTable *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int **v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;

  JSC::InternalFunction::displayName((JSC::InternalFunction *)&v34, this, a2, a3, a4, a5, a6, a7);
  if (v34)
  {
    if (v34[1])
    {
      *a8 = v34;
    }
    else
    {
      v17 = a8;
      v18 = (WTF::StringImpl *)v34;
      JSC::InternalFunction::name(this, v10, v11, v12, v13, v14, v15, v17, v16);
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    JSC::InternalFunction::name(this, v10, v11, v12, v13, v14, v15, a8, v16);
  }
}

JSC::JSObject *JSC::InternalFunction::createSubclassStructure(JSC::InternalFunction *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  JSC::JSObject *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;

  v8 = a3;
  v11 = *((_QWORD *)this + 7);
  v12 = (_QWORD *)*((_QWORD *)a3 + 5);
  if (!a2 || *((_BYTE *)a2 + 5) != 26)
    goto LABEL_24;
  v13 = *((_QWORD *)a2 + 3);
  if ((v13 & 1) != 0)
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v15 + 5) == 8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v15 + 88);
  }
  else
  {
    if (*(_BYTE *)(v13 + 5) == 8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v13 + 88);
  }
  if ((*(_DWORD *)(v14 + 16) & 0x80000000) != 0)
  {
    v17 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 56);
    v40 = 0;
    JSC::JSObject::getDirect(a2, v17, *(_QWORD *)(*((_QWORD *)v17 + 5244) + 2160), (const JSC::PropertyTable *)&v40, a5, a6, a7, a8);
    if (v18 && (v40 & 0x70) == 0)
    {
      v13 = *((_QWORD *)a2 + 3);
      if ((v13 & 1) == 0)
        goto LABEL_10;
LABEL_14:
      v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
      goto LABEL_15;
    }
LABEL_24:
    v30 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      v34 = *(_DWORD *)(v11 + 80);
      if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    if (*(_BYTE *)(v12[256] + 4) == 2)
    {
      v35 = *((unsigned __int8 *)v8 + 8);
      v36 = (v35 >> 1) & 7;
      if ((v35 & 0x10) != 0)
        v36 = ((v35 & 0xE) + 10) >> 1;
      v37 = *((_DWORD *)v12 + v36 + 213);
      if (v37)
        v38 = 16 * (v37 & 0xFFFFFFFE);
      else
        v38 = 0;
      if ((JSC::JSObject *)v38 == v8)
      {
        v39 = *((_DWORD *)v12 + ((v35 >> 1) & 7) + 223);
        if (v39)
          v8 = (JSC::JSObject *)(16 * (v39 & 0xFFFFFFFE));
        else
          v8 = 0;
      }
    }
    if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
      return (JSC::JSObject *)JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v12 + 246), (JSC::JSGlobalObject *)v12, (JSC::JSObject *)v30, v8, v31);
    return v8;
  }
  if ((v13 & 1) != 0)
    goto LABEL_14;
LABEL_10:
  v16 = v13;
LABEL_15:
  v19 = *(_QWORD *)(v16 + 88);
  if (((1 << *(_BYTE *)(v19 + 50)) & 0x78007) == 0)
  {
    v20 = *(_QWORD **)(v19 + 88);
    if (!v20 || !*v20)
      goto LABEL_24;
  }
  if ((v13 & 1) != 0)
  {
    v21 = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v21 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v11, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)a2 + 3) = v21 | 1;
    if (v21 && *(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)a2);
  }
  v22 = *(_DWORD *)(v21 + 40) & 0xFFFFFFFE;
  if (!(_DWORD)v22
    || (result = (JSC::JSObject *)(16 * v22),
        16 * *(unsigned int *)(16 * v22 + 0x4C) != 16 * *((unsigned int *)v8 + 19))
    || *(_QWORD **)(16 * v22 + 0x28) != v12)
  {
    v32 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
    if ((v32 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v32 + 5) >= 0x17u)
      return (JSC::JSObject *)JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase((JSC::FunctionRareData *)v21, (JSC::VM *)v11, (JSC::JSGlobalObject *)v12, (JSC::JSObject *)v32, v8, v33);
    return v8;
  }
  return result;
}

unint64_t JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase(JSC::FunctionRareData *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4, JSC::Structure *a5, double a6)
{
  unint64_t v6;
  uint64_t v9;
  JSC::InlineWatchpointSet *v10;
  int v11;

  v6 = (unint64_t)a5;
  v10 = (JSC::FunctionRareData *)((char *)this + 32);
  v9 = *((_QWORD *)this + 4);
  if ((v9 & 1) != 0)
  {
    if ((*((_QWORD *)this + 4) & 6) != 4)
      *(_QWORD *)v10 = 3;
  }
  else if (*(unsigned __int8 *)(v9 + 4) - 1 >= 2)
  {
    __dmb(0xAu);
    *(_BYTE *)(v9 + 4) = 1;
    __dmb(0xAu);
  }
  if (*((JSC::JSObject **)a5 + 6) != a4)
    v6 = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::JSGlobalObject *)((char *)a3 + 1968), a3, a4, a5, a6);
  __dmb(0xAu);
  v11 = *((_DWORD *)this + 10);
  if (v11 && v11 != (v6 >> 4))
    JSC::InlineWatchpointSet::fireAll(v10, a2, "InternalFunctionAllocationProfile rotated to a new structure");
  if (v6)
  {
    *((_DWORD *)this + 10) = v6 >> 4;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  else
  {
    *((_DWORD *)this + 10) = 0;
  }
  return v6;
}

unint64_t JSC::InternalFunction::createFunctionThatMasqueradesAsUndefined(JSC::VM *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v11;
  unint64_t *v14;
  unint64_t v15;
  unint64_t SlowCase;
  unint64_t *v18;
  JSC::VM *v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v41;
  JSC::VM *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];

  v11 = a3;
  v14 = (unint64_t *)((char *)a1 + 40136);
  v15 = *((_QWORD *)a2 + 82);
  LODWORD(v56[0]) = 67355;
  if ((v15 & 0xFFFE000000000002) == 0 && v15 && *(unsigned __int8 *)(v15 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v15, a1, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = *v14;
  if (*v14 < v14[1])
    goto LABEL_9;
  SlowCase = v14[2];
  if ((SlowCase & 1) == 0)
  {
    v41 = *(_QWORD *)(SlowCase + 8) ^ v14[3];
    v14[1] = SlowCase + HIDWORD(v41);
    v14[2] = SlowCase + (int)v41;
LABEL_9:
    *v14 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v50, v51, v52);
LABEL_10:
  v18 = (unint64_t *)((char *)a1 + 38552);
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, v15, (uint64_t)v56, (unint64_t)&JSC::InternalFunction::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  v27 = *((_QWORD *)a2 + 255);
  if (*(_BYTE *)(v27 + 4) == 1)
  {
    v42 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v56[0] = &off_1E3583C90;
    v56[1] = "Allocated masquerading object";
    __dmb(0xAu);
    v45 = *(uint64_t **)(v27 + 8);
    v44 = (uint64_t *)(v27 + 8);
    v43 = v45;
    *((_BYTE *)v44 - 4) = 2;
    v46 = *((_DWORD *)v42 + 229);
    *((_DWORD *)v42 + 229) = v46 + 1;
    if (v45 != v44)
    {
      do
      {
        v48 = *v43;
        v47 = (uint64_t *)v43[1];
        *v47 = *v43;
        *(_QWORD *)(v48 + 8) = v47;
        *v43 = 0;
        v43[1] = 0;
        JSC::Watchpoint::fire((unint64_t)v43, v42, v56, v21, v22, v23, v24, v25, v26);
        v43 = (uint64_t *)*v44;
      }
      while ((uint64_t *)*v44 != v44);
      v46 = *((_DWORD *)v42 + 229) - 1;
    }
    *((_DWORD *)v42 + 229) = v46;
    __dmb(0xAu);
  }
  v28 = *v18;
  if (*v18 < *((_QWORD *)a1 + 4820))
    goto LABEL_14;
  v28 = *((_QWORD *)a1 + 4821);
  if ((v28 & 1) == 0)
  {
    v49 = *(_QWORD *)(v28 + 8) ^ *((_QWORD *)a1 + 4822);
    *((_QWORD *)a1 + 4820) = v28 + HIDWORD(v49);
    *((_QWORD *)a1 + 4821) = v28 + (int)v49;
LABEL_14:
    *v18 = v28 + 48;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(a1, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
  v28 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 38528, (uint64_t)a1 + 192, 48, 0, 0, v53, v54, v55);
LABEL_15:
  *(_DWORD *)v28 = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v28 = SlowCase >> 4;
  *(_DWORD *)(v28 + 4) = v29;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = a5;
  *(_QWORD *)(v28 + 24) = JSC::callHostFunctionAsConstructor;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = *(_QWORD *)(SlowCase + 40);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  v33 = JSC::jsString(a1, a4, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)(v28 + 32) = v33;
  if (v33 && *((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v28 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, v28);
  if ((v11 & 0x80000000) != 0)
    v35 = COERCE__INT64((double)v11) + 0x2000000000000;
  else
    v35 = v11 | 0xFFFE000000000000;
  v34.n128_f64[0] = (double)v11;
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v28, (uint64_t)a1, *(_QWORD *)(v14[227] + 1768), v35, 6, v30, v31, v32, v34);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v28, (uint64_t)a1, *(_QWORD *)(v14[227] + 1968), v33, 6, v36, v37, v38, v39);
  return v28;
}

uint64_t JSC::getFunctionRealm(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  char **v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    while (1)
    {
      v3 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
      if (v3 != &JSC::JSBoundFunction::s_info && v3 != &JSC::JSRemoteFunction::s_info)
        break;
      a2 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 4);
    }
    if (*((_BYTE *)a2 + 5) != 61)
      return *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    if (*((_QWORD *)a2 + 3) == 2)
      break;
    a2 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 2);
  }
  JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  return 0;
}

void JSC::IntlCache::getBestDateTimePattern(int8x16_t **a1@<X0>, int8x16_t **a2@<X1>, UErrorCode *a3@<X4>, uint64_t a4@<X8>)
{
  unsigned int BestPatternWithOptions;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  WTF *v18;
  WTF *v19;
  int v20;
  unsigned int v21;
  _BYTE v22[68];
  int v23;

  JSC::IntlCache::getSharedPatternGenerator(a1, a2, a3);
  if (*(int *)a3 >= 1)
  {
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 32;
    return;
  }
  v19 = (WTF *)v22;
  v20 = 32;
  v23 = 0;
  BestPatternWithOptions = udatpg_getBestPatternWithOptions();
  v14 = BestPatternWithOptions;
  if (v23 <= 0)
  {
    v21 = BestPatternWithOptions;
    *a3 = v23;
LABEL_9:
    *(_QWORD *)a4 = a4 + 16;
    *(_DWORD *)(a4 + 8) = 32;
    if (v19 == (WTF *)v22)
    {
      v16 = v21;
      memcpy((void *)(a4 + 16), v22, 2 * v21);
    }
    else
    {
      *(_QWORD *)a4 = v19;
      v16 = v21;
      *(_DWORD *)(a4 + 8) = v20;
    }
    *(_DWORD *)(a4 + 12) = v16;
    return;
  }
  if (v23 == 15)
  {
    v23 = 0;
    if ((unint64_t)(int)BestPatternWithOptions > 0x20)
    {
      if ((unint64_t)(int)BestPatternWithOptions >= 0x29)
        v17 = (int)BestPatternWithOptions;
      else
        v17 = 41;
      if (v17 < 0x21)
      {
        v19 = (WTF *)v22;
        v20 = 32;
        v18 = (WTF *)v22;
      }
      else
      {
        if (v17 >> 31)
        {
          __break(0xC471u);
          return;
        }
        v18 = (WTF *)WTF::fastMalloc((WTF *)(2 * v17));
        v20 = v17;
        v19 = v18;
      }
      memcpy(v18, v22, 0x40uLL);
    }
    v21 = v14;
    udatpg_getBestPatternWithOptions();
    v15 = v23;
    *a3 = v23;
    if (v15 <= 0)
      goto LABEL_9;
  }
  else
  {
    *a3 = v23;
  }
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 32;
  if (v22 != (_BYTE *)v19 && v19)
    WTF::fastFree((unint64_t)v19, v7, v8, v9, v10, v11, v12, v13);
}

int8x16_t *JSC::IntlCache::getSharedPatternGenerator(int8x16_t **this, int8x16_t **a2, UErrorCode *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;

  if (*this && WTF::operator==((uint64_t)a2, this + 1))
    return *this;
  v6 = udatpg_open();
  v14 = (int8x16_t *)v6;
  if (*(int *)a3 > 0)
  {
    if (v6)
    {
      udatpg_close();
      return 0;
    }
    return v14;
  }
  v15 = *a2;
  if (*a2)
    ++v15->i32[0];
  v16 = this[1];
  this[1] = v15;
  if (v16)
  {
    if (v16->i32[0] == 1)
      WTF::fastFree((unint64_t)v16, v7, v8, v9, v10, v11, v12, v13);
    else
      --v16->i32[0];
  }
  v17 = *this;
  *this = v14;
  if (v17)
  {
    udatpg_close();
    return *this;
  }
  return v14;
}

void JSC::IntlCollator::visitChildren(JSC::IntlCollator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      v17 = 0;
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v17 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v17 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_7;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_7:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v17, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::IntlCollator::visitChildren(JSC::IntlCollator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::IntlCollator::create(JSC::Heap **this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  int v11;

  result = JSC::allocateCell<JSC::IntlCollator>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_BYTE *)(result + 51) = 2;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::allocateCell<JSC::IntlCollator>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1[5067];
  if (!v9)
    v9 = JSC::GCClient::Heap::intlCollatorSpaceSlow(a1 + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)(a1 + 24), 64, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 64;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void JSC::IntlCollator::sortLocaleData(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeywordValuesForLocale;
  uint64_t v23;
  _BYTE *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  int v87;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  switch(a2)
  {
    case 4:
      v54 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v54 = 0x500000002;
      *(_QWORD *)(v54 + 8) = "false";
      *(_DWORD *)(v54 + 16) = 4;
      v55 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v55 = 0x400000002;
      *(_QWORD *)(v55 + 8) = "true";
      *(_DWORD *)(v55 + 16) = 4;
      v56 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      v83 = v56;
      v84 = 0x200000002;
      *(_QWORD *)v56 = v54;
      *((_QWORD *)v56 + 1) = v55;
LABEL_32:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a3, &v83, v57, v58, v59, v60, v61, v62);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v67, v68, v69, v70, v71, v72, v73);
      return;
    case 3:
      v63 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v63 = 0x500000002;
      *(_QWORD *)(v63 + 8) = "false";
      *(_DWORD *)(v63 + 16) = 4;
      v64 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v64 = 0x500000002;
      *(_QWORD *)(v64 + 8) = "lower";
      *(_DWORD *)(v64 + 16) = 4;
      v65 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v65 = 0x500000002;
      *(_QWORD *)(v65 + 8) = "upper";
      *(_DWORD *)(v65 + 16) = 4;
      v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      v83 = v66;
      v84 = 0x300000003;
      *(_QWORD *)v66 = v63;
      *((_QWORD *)v66 + 1) = v64;
      *((_QWORD *)v66 + 2) = v65;
      goto LABEL_32;
    case 1:
      v83 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a3, (unint64_t)&v83);
      v13 = v83;
      v83 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl(v13, v5, v6, v7, v8, v9, v10, v11);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v87 = 0;
      WTF::String::utf8(a1, 0, v7, v8, v9, v10, v11, &v83, v12);
      v14 = v83;
      KeywordValuesForLocale = ucol_getKeywordValuesForLocale();
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree((unint64_t)v14, v15, v16, v17, v18, v19, v20, v21);
        else
          --*(_DWORD *)v14;
      }
      if (v87 <= 0)
      {
        v86 = 0;
        v23 = uenum_next();
        if (v23)
        {
          if (v87 <= 0)
          {
            v24 = (_BYTE *)v23;
            while (1)
            {
              WTF::String::String((uint64_t *)&v85, v24, v86);
              if (WTF::equalInternal<unsigned char>((uint64_t)v85, (unint64_t)"standard", 8)
                || WTF::equalInternal<unsigned char>((uint64_t)v85, (unint64_t)"search", 6))
              {
                goto LABEL_21;
              }
              JSC::mapICUCollationKeywordToBCP47((JSC *)&v85, &v83);
              v40 = *(_DWORD *)(a3 + 8);
              v39 = *(unsigned int *)(a3 + 12);
              if ((_BYTE)v84)
              {
                if ((_DWORD)v39 == v40)
                {
                  v82 = &v83;
                  goto LABEL_39;
                }
                v41 = v39 + 1;
                v42 = *(_QWORD *)a3;
                v43 = v83;
                v83 = 0;
              }
              else
              {
                if ((_DWORD)v39 == v40)
                {
                  v82 = &v85;
LABEL_39:
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a3, (unint64_t)v82);
                  goto LABEL_20;
                }
                v41 = v39 + 1;
                v42 = *(_QWORD *)a3;
                v43 = v85;
                v85 = 0;
              }
              *(_QWORD *)(v42 + 8 * v39) = v43;
              *(_DWORD *)(a3 + 12) = v41;
LABEL_20:
              std::optional<WTF::String>::~optional((uint64_t)&v83, v32, v33, v34, v35, v36, v37, v38);
LABEL_21:
              v44 = v85;
              v85 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                {
                  WTF::StringImpl::~StringImpl(v44, v25, v26, v27, v28, v29, v30, v31);
                  WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
                }
                else
                {
                  *(_DWORD *)v44 -= 2;
                }
              }
              v45 = uenum_next();
              if (v45)
              {
                v24 = (_BYTE *)v45;
                if (v87 < 1)
                  continue;
              }
              break;
            }
          }
        }
      }
      if (KeywordValuesForLocale)
        uenum_close();
      break;
  }
}

void JSC::IntlCollator::searchLocaleData(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  switch(a1)
  {
    case 4:
      v5 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v5 = 0x500000002;
      *(_QWORD *)(v5 + 8) = "false";
      *(_DWORD *)(v5 + 16) = 4;
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0x400000002;
      *(_QWORD *)(v6 + 8) = "true";
      *(_DWORD *)(v6 + 16) = 4;
      v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v66 = v7;
      v67 = 0x200000002;
      *(_QWORD *)v7 = v5;
      *((_QWORD *)v7 + 1) = v6;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, &v66, v8, v9, v10, v11, v12, v13);
      if (HIDWORD(v67))
      {
        v21 = v66;
        v22 = 8 * HIDWORD(v67);
        do
        {
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::~StringImpl(v23, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      goto LABEL_15;
    case 3:
      v32 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v32 = 0x500000002;
      *(_QWORD *)(v32 + 8) = "false";
      *(_DWORD *)(v32 + 16) = 4;
      v33 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v33 = 0x500000002;
      *(_QWORD *)(v33 + 8) = "lower";
      *(_DWORD *)(v33 + 16) = 4;
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x500000002;
      *(_QWORD *)(v34 + 8) = "upper";
      *(_DWORD *)(v34 + 16) = 4;
      v35 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      v66 = v35;
      v67 = 0x300000003;
      *(_QWORD *)v35 = v32;
      *((_QWORD *)v35 + 1) = v33;
      *((_QWORD *)v35 + 2) = v34;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, &v66, v36, v37, v38, v39, v40, v41);
      if (HIDWORD(v67))
      {
        v43 = v66;
        v44 = 8 * HIDWORD(v67);
        do
        {
          v45 = *(WTF::StringImpl **)v43;
          *(_QWORD *)v43 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
            {
              WTF::StringImpl::~StringImpl(v45, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
            }
            else
            {
              *(_DWORD *)v45 -= 2;
            }
          }
          v43 = (WTF *)((char *)v43 + 8);
          v44 -= 8;
        }
        while (v44);
      }
LABEL_15:
      v42 = v66;
      if (!v66)
        return;
      v66 = 0;
      LODWORD(v67) = 0;
      goto LABEL_17;
    case 1:
      v3 = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(a2 + 8) = 1;
      *(_QWORD *)a2 = v3;
      v66 = 0;
      v4 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v4 != 1)
      {
        *(_QWORD *)(v3 + 8 * v4) = 0;
        *(_DWORD *)(a2 + 12) = v4 + 1;
        return;
      }
      v54 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v4 + 1, (unint64_t)&v66);
      v62 = *(unsigned int *)(a2 + 12);
      v63 = *(_QWORD *)a2;
      v64 = *v54;
      *v54 = 0;
      *(_QWORD *)(v63 + 8 * v62) = v64;
      v65 = v66;
      *(_DWORD *)(a2 + 12) = v62 + 1;
      v66 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 != 2)
        {
          *(_DWORD *)v65 -= 2;
          return;
        }
        WTF::StringImpl::~StringImpl(v65, v55, v56, v57, v58, v59, v60, v61);
LABEL_17:
        WTF::fastFree((unint64_t)v42, v14, v15, v16, v17, v18, v19, v20);
      }
      break;
  }
}

uint64_t JSC::IntlCollator::initializeCollator(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v12;
  uint64_t v13;
  JSC::Structure *v14;
  JSC::Symbol *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  char *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  WTF::StringImpl *v83;
  WTF::AtomStringImpl *v84;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  int v89;
  const char *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  const WTF::String *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl **v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  float v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF::AtomStringImpl *v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  WTF::StringImpl *v264;
  WTF *v265[2];
  JSC::VM *v266;
  WTF::StringImpl *v267[2];
  __int128 v268;
  __int128 v269;
  const char *v270;
  uint64_t v271;
  char v272;
  const char *v273;
  uint64_t v274;
  char v275;
  const char *v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  const char *v279;
  uint64_t v280;
  char v281;
  _BYTE v282[16];
  WTF::StringImpl *v283;
  char v284;
  char v285;
  char v286;
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  v266 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v12 = v266;
  JSC::canonicalizeLocaleList((unint64_t)a2, a3, a3, a4, a5, a6, a7, a8, v265, a9);
  if (!*((_DWORD *)v12 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19))
  {
    v24 = (unsigned int *)JSC::intlCoerceOptionsToObject(a2, (unsigned __int8 *)a4, v14, v15, v16, v17, v18, v19);
    if (!*((_DWORD *)v12 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v20, v21, v22, v23, v17, v18, v19))
    {
      v25 = (char *)v12 + 41952;
      v26 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 2600);
      v276 = "sort";
      v277 = 5;
      LOBYTE(v278) = 0;
      v279 = "search";
      v280 = 7;
      v281 = 1;
      v27 = JSC::intlOption<JSC::IntlCollator::Usage>(a2, v24, v26, (uint64_t)&v276, 2, v17, v18, v19);
      *(_BYTE *)(a1 + 48) = v27;
      if (*((_DWORD *)v12 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v12, v28, v29, v30, v31, v32, v33, v34))
          return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v265, v84, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
        v27 = *(unsigned __int8 *)(a1 + 48);
      }
      LOBYTE(v276) = 0;
      LOBYTE(v277) = 0;
      LOBYTE(v278) = 0;
      if (v27)
        v35 = JSC::IntlCollator::searchLocaleData;
      else
        v35 = JSC::IntlCollator::sortLocaleData;
      LOBYTE(v279) = 0;
      LOBYTE(v280) = 0;
      v281 = 0;
      v282[0] = 0;
      v282[8] = 0;
      LOBYTE(v283) = 0;
      v284 = 0;
      v285 = 0;
      v286 = 0;
      v36 = *(_QWORD *)(*(_QWORD *)v25 + 1792);
      v267[0] = (WTF::StringImpl *)"lookup";
      v267[1] = (WTF::StringImpl *)7;
      LOBYTE(v268) = 0;
      *((_QWORD *)&v268 + 1) = "best fit";
      *(_QWORD *)&v269 = 9;
      BYTE8(v269) = 1;
      v44 = JSC::intlOption<JSC::LocaleMatcher>(a2, v24, v36, (uint64_t)v267, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
      if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v37, v38, v39, v40, v41, v42, v43))
        goto LABEL_21;
      JSC::intlStringOption(a2, v24, *(_QWORD *)(*(_QWORD *)v25 + 1024), 0, 0, 0, 0, v43, v267, 0, 0);
      if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v45, v46, v47, v48, v49, v50, v43))
      {
LABEL_41:
        v83 = v267[0];
        v267[0] = 0;
        if (!v83)
          goto LABEL_21;
        goto LABEL_19;
      }
      v51 = v267[0];
      if (v267[0])
      {
        if (!JSC::isUnicodeLocaleIdentifierType(*((_QWORD *)v267[0] + 1), *((unsigned int *)v267[0] + 1) | ((unint64_t)((*((_DWORD *)v267[0] + 4) >> 2) & 1) << 32)))
        {
          v101 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v101 = 0x2E00000002;
          *(_QWORD *)(v101 + 8) = "collation is not a well-formed collation value";
          *(_DWORD *)(v101 + 16) = 4;
          v259 = (WTF::StringImpl *)v101;
          v103 = JSC::createRangeError((unint64_t)a2, &v259, v102);
          JSC::VM::throwException(v12, a2, v103, v104, v105, v106, v107, v108);
          v109 = v259;
          v259 = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 2)
            {
              WTF::StringImpl::~StringImpl(v109, v82, v61, v47, v48, v49, v50, v43);
              WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
            }
            else
            {
              *(_DWORD *)v109 -= 2;
            }
          }
          goto LABEL_41;
        }
        v267[0] = 0;
        if ((_BYTE)v279)
        {
          v88 = v278;
          v278 = v51;
          if (v88)
          {
            v89 = *(_DWORD *)v88 - 2;
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, v86, v87, v47, v48, v49, v50, v43);
              WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
              v88 = v267[0];
              v267[0] = 0;
              if (!v88)
                goto LABEL_10;
              v89 = *(_DWORD *)v88 - 2;
              if (*(_DWORD *)v88 == 2)
              {
                WTF::StringImpl::~StringImpl(v88, v195, v196, v47, v48, v49, v50, v43);
                WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
                goto LABEL_10;
              }
            }
            *(_DWORD *)v88 = v89;
          }
        }
        else
        {
          v278 = v51;
          LOBYTE(v279) = 1;
        }
      }
LABEL_10:
      v58 = JSC::intlBooleanOption((uint64_t)a2, v24, *(_QWORD *)(*(_QWORD *)v25 + 2048), v47, v48, v49, v50, v43);
      if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v52, v53, v54, v55, v56, v57, v43))
        goto LABEL_21;
      if (v58 != 2)
      {
        if (v58 == 1)
          v90 = "true";
        else
          v90 = "false";
        if (v58 == 1)
          v91 = 5;
        else
          v91 = 6;
        WTF::String::String((int **)v267, (uint64_t)v90, v91);
        v98 = v267[0];
        v267[0] = 0;
        if (v284)
        {
          v99 = v283;
          v283 = v98;
          if (v99)
          {
            v100 = *(_DWORD *)v99 - 2;
            if (*(_DWORD *)v99 == 2)
            {
              WTF::StringImpl::~StringImpl(v99, v92, v93, v94, v95, v96, v97, v43);
              WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
              v99 = v267[0];
              v267[0] = 0;
              if (!v99)
                goto LABEL_12;
              v100 = *(_DWORD *)v99 - 2;
              if (*(_DWORD *)v99 == 2)
              {
                WTF::StringImpl::~StringImpl(v99, v165, v166, v167, v168, v169, v170, v43);
                WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
                goto LABEL_12;
              }
            }
            *(_DWORD *)v99 = v100;
          }
        }
        else
        {
          v283 = v98;
          v284 = 1;
        }
      }
LABEL_12:
      v59 = *(_QWORD *)(*(_QWORD *)v25 + 1000);
      *(_OWORD *)v267 = xmmword_1E359AE50;
      v268 = *(_OWORD *)&off_1E359AE60;
      v269 = xmmword_1E359AE70;
      JSC::intlStringOption(a2, v24, v59, (unint64_t *)v267, 3, (unint64_t)"caseFirst must be either \"upper\", \"lower\", or \"false\"", 54, v43, &v264, 0, 0);
      if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v60, v61, v47, v48, v49, v50, v43))
      {
LABEL_18:
        v83 = v264;
        v264 = 0;
        if (!v83)
        {
LABEL_21:
          std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)&v276, v82, v61, v47, v48, v49, v50, v43);
          return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v265, v84, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
        }
LABEL_19:
        if (*(_DWORD *)v83 == 2)
        {
          WTF::StringImpl::~StringImpl(v83, v82, v61, v47, v48, v49, v50, v43);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v83 -= 2;
        }
        goto LABEL_21;
      }
      if (v264)
        std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)v282, (WTF::AtomStringImpl *)&v264, v61, v47, v48, v49, v50, v43);
      std::call_once[abi:sn180100]<JSC::intlCollatorAvailableLocales(void)::$_0>((uint64_t)v267);
      LOWORD(v267[0]) = 769;
      BYTE2(v267[0]) = 4;
      JSC::resolveLocale(a2, (const WTF::StringImpl *)&JSC::intlCollatorAvailableLocales(void)::availableLocales, (uint64_t)v265, v44, (uint64_t)&v276, (uint64_t)v267, 3, (uint64_t)v35, (uint64_t)&v259);
      WTF::String::operator=((unint64_t *)(a1 + 32), (WTF::AtomStringImpl *)&v259, v62, v63, v64, v65, v66, v67);
      v74 = *(_QWORD *)(a1 + 32);
      if (!v74 || !*(_DWORD *)(v74 + 4))
      {
        JSC::throwTypeError((unint64_t)a2, &v266, (uint64_t)"failed to initialize Collator due to invalid locale", 52);
        goto LABEL_17;
      }
      v118 = (uint64_t)v261;
      if (v261)
      {
        *v261 += 2;
      }
      else
      {
        v118 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v118 = 0x700000002;
        *(_QWORD *)(v118 + 8) = "default";
        *(_DWORD *)(v118 + 16) = 4;
      }
      v267[0] = (WTF::StringImpl *)v118;
      v119 = (WTF::StringImpl **)(a1 + 40);
      WTF::String::operator=((unint64_t *)(a1 + 40), (WTF::AtomStringImpl *)v267, v68, v69, v70, v71, v72, v73);
      v127 = v267[0];
      v267[0] = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
        {
          WTF::StringImpl::~StringImpl(v127, v120, v121, v122, v123, v124, v125, v126);
          WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
        }
        else
        {
          *(_DWORD *)v127 -= 2;
        }
      }
      *(_BYTE *)(a1 + 52) = WTF::equalInternal<unsigned char>(v263, (unint64_t)"true", 4);
      if (WTF::equalInternal<unsigned char>(v262, (unint64_t)"lower", 5))
      {
        v131 = 1;
      }
      else
      {
        if (WTF::equalInternal<unsigned char>(v262, (unint64_t)"upper", 5))
        {
          *(_BYTE *)(a1 + 50) = 0;
LABEL_55:
          v132 = *(_QWORD *)(*(_QWORD *)v25 + 2288);
          v267[0] = (WTF::StringImpl *)"base";
          v267[1] = (WTF::StringImpl *)5;
          *((_QWORD *)&v268 + 1) = "accent";
          *(_QWORD *)&v269 = 7;
          BYTE8(v269) = 1;
          LOBYTE(v268) = 0;
          v270 = "case";
          v271 = 5;
          v272 = 2;
          v273 = "variant";
          v274 = 8;
          v275 = 3;
          *(_BYTE *)(a1 + 49) = JSC::intlOption<JSC::IntlCollator::Sensitivity>(a2, v24, v132, (uint64_t)v267, 4, v128, v129, v130);
          if (!*((_DWORD *)v12 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v133, v134, v77, v78, v79, v80, v81))
          {
            v137 = JSC::intlBooleanOption((uint64_t)a2, v24, *(_QWORD *)(*(_QWORD *)v25 + 1544), v77, v78, v79, v80, v81);
            if (!*((_DWORD *)v12 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v135, v136, v77, v78, v79, v80, v81))
            {
              if (*(_BYTE *)(a1 + 48))
              {
                if (*(_BYTE *)(a1 + 48) != 1)
                {
                  v139 = 0;
                  goto LABEL_60;
                }
                v142 = v260;
                if (v260)
                  *(_DWORD *)v260 += 2;
                WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t)&v258, (uint64_t)v142);
                WTF::String::utf8((uint64_t *)&v258, 0, v143, v144, v145, v146, v147, v267, v148);
                v139 = v267[0];
                v156 = v258;
                v258 = 0;
                if (v156)
                {
                  if (*(_DWORD *)v156 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v156, v149, v150, v151, v152, v153, v154, v155);
                    WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
                  }
                  else
                  {
                    *(_DWORD *)v156 -= 2;
                  }
                }
                if (!v142)
                  goto LABEL_60;
                if (*(_DWORD *)v142 != 2)
                {
                  *(_DWORD *)v142 -= 2;
                  goto LABEL_60;
                }
                v215 = v142;
              }
              else
              {
                if (!v261)
                {
                  WTF::String::utf8((uint64_t *)&v260, 0, v77, v78, v79, v80, v81, v267, v138);
                  v139 = v267[0];
LABEL_60:
                  LODWORD(v267[0]) = 0;
                  v140 = ucol_open();
                  v141 = *(_QWORD *)(a1 + 24);
                  *(_QWORD *)(a1 + 24) = v140;
                  if (v141)
                    ucol_close();
                  if (SLODWORD(v267[0]) >= 1)
                  {
                    JSC::throwTypeError((unint64_t)a2, &v266, (uint64_t)"failed to initialize Collator", 30);
                  }
                  else
                  {
                    ucol_setAttribute();
                    ucol_setAttribute();
                    ucol_setAttribute();
                    ucol_setAttribute();
                    if (v137 != 2)
                      ucol_setAttribute();
                    ucol_setAttribute();
                    *(_BYTE *)(a1 + 53) = ucol_getAttribute() == 20;
                  }
                  if (v139)
                  {
                    if (*(_DWORD *)v139 == 1)
                      WTF::fastFree((unint64_t)v139, v75, v76, v77, v78, v79, v80, v81);
                    else
                      --*(_DWORD *)v139;
                  }
                  goto LABEL_17;
                }
                v205 = v260;
                if (v260)
                  *(_DWORD *)v260 += 2;
                v257 = v205;
                v206 = *v119;
                if (*v119)
                  *(_DWORD *)v206 += 2;
                v256 = v206;
                WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v257, (int8x16_t *)"-u-co-", 7, (uint64_t *)&v256, (int **)&v258);
                WTF::String::utf8((uint64_t *)&v258, 0, v207, v208, v209, v210, v211, v267, v212);
                v139 = v267[0];
                v267[0] = 0;
                v213 = v258;
                v258 = 0;
                if (v213)
                {
                  if (*(_DWORD *)v213 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v213, v149, v150, v151, v152, v153, v154, v155);
                    WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
                  }
                  else
                  {
                    *(_DWORD *)v213 -= 2;
                  }
                }
                v214 = v256;
                v256 = 0;
                if (v214)
                {
                  if (*(_DWORD *)v214 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v214, v149, v150, v151, v152, v153, v154, v155);
                    WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
                  }
                  else
                  {
                    *(_DWORD *)v214 -= 2;
                  }
                }
                v215 = v257;
                v257 = 0;
                if (!v215)
                  goto LABEL_60;
                if (*(_DWORD *)v215 != 2)
                {
                  *(_DWORD *)v215 -= 2;
                  goto LABEL_60;
                }
              }
              WTF::StringImpl::~StringImpl(v215, v149, v150, v151, v152, v153, v154, v155);
              WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
              goto LABEL_60;
            }
          }
LABEL_17:
          JSC::ResolvedLocale::~ResolvedLocale(&v259, (WTF::AtomStringImpl *)v75, v76, v77, v78, v79, v80, v81);
          goto LABEL_18;
        }
        v131 = 2;
      }
      *(_BYTE *)(a1 + 50) = v131;
      goto LABEL_55;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v265, v84, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
}

unint64_t JSC::intlCoerceOptionsToObject(JSC::JSGlobalObject *a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  JSC::VM *v10;
  unint64_t v12;
  unsigned __int8 *v13;

  v8 = (unint64_t)a2;
  v13 = a2;
  if (a2 == (unsigned __int8 *)10)
    return 0;
  v9 = (uint64_t)a1;
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v13, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_8:
    v8 = v12;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
LABEL_4:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v9, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  return v8;
}

uint64_t JSC::intlOption<JSC::IntlCollator::Usage>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::String *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v71 = v14;
  if (*((_DWORD *)v13 + 20))
  {
    v68 = v14;
    v8 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v13, v15, (uint64_t)v16, v17, v18, v19, v20, v21) || v68 == 10)
      return v8;
  }
  else if (v14 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v16, v17, v18, v19, v20, v21, (int **)&v70, v22);
  if (!*((_DWORD *)v13 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v13, v23, v24, v25, v26, v27, v28, v29))
  {
    if (a5)
    {
      v30 = a4 + 24 * a5;
      v31 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v32 = *((_QWORD *)v31 - 1);
        v33 = v31 - 16;
        v34 = v32 ? v32 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v31 - 2), v34))
          break;
        v31 += 24;
        if (v33 + 24 == (unsigned __int8 *)v30)
          goto LABEL_14;
      }
      v8 = *v31;
      goto LABEL_18;
    }
LABEL_14:
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x2700000002;
    *(_QWORD *)(v42 + 8) = "usage must be either \"sort\" or \"search\"";
    *(_DWORD *)(v42 + 16) = 4;
    v69 = (WTF::StringImpl *)v42;
    v44 = JSC::createRangeError((unint64_t)a1, &v69, v43);
    JSC::VM::throwException(v13, a1, v44, v45, v46, v47, v48, v49);
    v50 = v69;
    v69 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  v8 = 0;
LABEL_18:
  v51 = v70;
  v70 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  return v8;
}

uint64_t JSC::intlOption<JSC::IntlCollator::Sensitivity>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::String *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  if (!a2)
    return 3;
  v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v21 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v70 = v21;
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v14, (uint64_t)v15, v16, v17, v18, v19, v20))
  {
    return 0;
  }
  if (v21 == 10)
    return 3;
  JSC::JSValue::toWTFString((JSC::JSValue *)&v70, a1, v15, v16, v17, v18, v19, v20, (int **)&v69, v22);
  if (!*((_DWORD *)v13 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v13, v23, v24, v25, v26, v27, v28, v29))
  {
    if (a5)
    {
      v30 = a4 + 24 * a5;
      v31 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v32 = *((_QWORD *)v31 - 1);
        v33 = v31 - 16;
        v34 = v32 ? v32 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v69, *((_QWORD *)v31 - 2), v34))
          break;
        v31 += 24;
        if (v33 + 24 == (unsigned __int8 *)v30)
          goto LABEL_14;
      }
      v8 = *v31;
      goto LABEL_18;
    }
LABEL_14:
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x4100000002;
    *(_QWORD *)(v42 + 8) = "sensitivity must be either \"base\", \"accent\", \"case\", or \"variant\"";
    *(_DWORD *)(v42 + 16) = 4;
    v68 = (WTF::StringImpl *)v42;
    v44 = JSC::createRangeError((unint64_t)a1, &v68, v43);
    JSC::VM::throwException(v13, a1, v44, v45, v46, v47, v48, v49);
    v50 = v68;
    v68 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  v8 = 0;
LABEL_18:
  v51 = v69;
  v69 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  return v8;
}

uint64_t WTF::makeString<WTF::String,WTF::ASCIILiteral>(uint64_t result, uint64_t a2)
{
  int **v3;
  int v4;
  int v5;

  v3 = (int **)result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0 || (result = (v4 + 12), __OFADD__(v4, 12)))
    {
      *v3 = 0;
      goto LABEL_11;
    }
    if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    {
      v5 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    result = 12;
  }
  v5 = 1;
LABEL_8:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v5, a2, (int8x16_t *)"-u-co-search", 0xCu, v3);
  if (!*v3)
LABEL_11:
    __break(0xC471u);
  return result;
}

void JSC::ResolvedLocale::~ResolvedLocale(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  std::array<WTF::String,6ul>::~array(this + 2, a2, a3, a4, a5, a6, a7, a8);
  v16 = this[1];
  this[1] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v17 = *this;
  *this = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

uint64_t JSC::IntlCollator::compareStrings(uint64_t a1, JSC::VM **a2, int16x8_t *a3, unsigned __int8 *a4, uint8x8_t *a5, unsigned __int8 *a6)
{
  JSC::VM *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int16x8_t *v15;
  uint8x8_t *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  unsigned int v26;
  uint8x16_t v27;
  int16x8_t *v28;
  unsigned __int8 *v29;
  JSC::VM **v30;
  int v31;
  JSC::JSGlobalObject *v32;
  uint64_t result;
  uint64_t v34;
  const WTF::String *v35;
  unint64_t Error;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint8x8_t *v73;
  unsigned int v75;
  int8x16_t v76;
  uint64_t v77;
  int8x16_t v78;
  uint64_t v79;
  int v80;
  unsigned __int8 *v81[2];
  unsigned __int8 *v82[2];

  v82[0] = (unsigned __int8 *)a3;
  v82[1] = a4;
  v81[0] = (unsigned __int8 *)a5;
  v81[1] = a6;
  v6 = a2[7];
  v80 = 0;
  v7 = *(unsigned __int8 *)(a1 + 51);
  if (v7 == 2)
  {
    v73 = a5;
    v28 = a3;
    v72 = a4;
    v29 = a6;
    v30 = a2;
    v31 = JSC::IntlCollator::updateCanDoASCIIUCADUCETComparison(void)const::$_0::operator()(a1);
    a2 = v30;
    a6 = v29;
    a4 = v72;
    a5 = v73;
    a3 = v28;
    v7 = v31;
    *(_BYTE *)(a1 + 51) = v31;
  }
  v8 = (unint64_t)a4 & 0xFF00000000;
  v9 = (unint64_t)a6 & 0xFF00000000;
  if (v7 == 1)
  {
    v10 = a4;
    if (!v8)
    {
      if (v9)
        v50 = JSC::compareASCIIWithUCADUCET<char16_t,unsigned char>(a3, a4, a5, a6);
      else
        v50 = (uint64_t)JSC::compareASCIIWithUCADUCET<char16_t,char16_t>(a3, a4, (int16x8_t *)a5, a6);
      v21 = v50 & 0xFFFFFF00;
      v23 = v50 & 0xFFFFFFFF00000000;
      LOBYTE(v22) = v50;
LABEL_68:
      if ((v23 & 0xFF00000000) != 0)
        return v21 | v22;
      goto LABEL_71;
    }
    if (!v9)
    {
      v22 = JSC::compareASCIIWithUCADUCET<unsigned char,char16_t>((uint8x8_t *)a3, a4, (int16x8_t *)a5, a6);
      v21 = v22 & 0xFFFFFF00;
      v23 = v22 & 0xFFFFFFFF00000000;
      goto LABEL_68;
    }
    if ((_DWORD)a4 == (_DWORD)a6)
    {
      if ((_DWORD)a4 == 1)
      {
        v12 = a3->u8[0];
        v13 = a5->u8[0];
      }
      else
      {
        if (!(_DWORD)a4)
        {
          v23 = 0x100000000;
          LOBYTE(v22) = 0;
          v21 = 0;
          goto LABEL_67;
        }
        v11 = 32 - __clz((_DWORD)a4 - 1);
        if (v11 != 3)
        {
          switch(v11)
          {
            case 1u:
              v12 = a3->u16[0];
              v13 = a5->u16[0];
              goto LABEL_12;
            case 2u:
              if (a3->u16[0] != a5->u16[0])
                goto LABEL_13;
              v12 = *(unsigned __int16 *)((char *)&a3->u16[-1] + a4);
              v13 = *(unsigned __int16 *)((char *)&a5->u16[-1] + a4);
              goto LABEL_12;
            case 4u:
              if (a3->i64[0] == *a5
                && *(uint64_t *)((char *)&a3->i64[-1] + a4) == *(_QWORD *)((char *)&a5[-1]
                                                                                      + a4))
              {
                goto LABEL_28;
              }
              goto LABEL_13;
            case 5u:
              v24 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&a3[-1] + a4), *(int8x16_t *)&a5[-2].i8[a4]), vceqq_s8(*(int8x16_t *)a3, *(int8x16_t *)a5->i8));
              v24.i8[0] = vminvq_u8(v24);
              if (v24.i32[0])
                goto LABEL_28;
              goto LABEL_13;
            default:
              v25 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a3, *(int8x16_t *)a5->i8);
              v25.i8[0] = vminvq_u8(v25);
              if (!v25.i32[0])
                goto LABEL_13;
              if (a4 < 0x10)
                goto LABEL_28;
              v26 = a4 & 0xF;
              v23 = 0x100000000;
              break;
          }
          while (1)
          {
            v27 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)a3 + v26), *(int8x16_t *)&a5->i8[v26]);
            v27.i8[0] = vminvq_u8(v27);
            if (!v27.i32[0])
              goto LABEL_13;
            LOBYTE(v22) = 0;
            v21 = 0;
            v26 += 16;
            if (v26 >= a4)
              goto LABEL_67;
          }
        }
        if (a3->i32[0] != a5->i32[0])
          goto LABEL_13;
        v12 = *(__int32 *)((char *)&a3->i32[-1] + a4);
        v13 = *(__int32 *)((char *)&a5->i32[-1] + a4);
      }
LABEL_12:
      if (v12 == v13)
      {
LABEL_28:
        LOBYTE(v22) = 0;
        v21 = 0;
        goto LABEL_66;
      }
    }
LABEL_13:
    if (a6 >= (unint64_t)a4)
      v14 = a4;
    else
      v14 = a6;
    if (v14)
    {
      v15 = a3;
      v16 = a5;
      while (1)
      {
        v17 = v15->u8[0];
        v15 = (int16x8_t *)((char *)v15 + 1);
        v18 = JSC::ducetLevel1Weights[v17];
        if (!JSC::ducetLevel1Weights[v17])
          break;
        v19 = JSC::ducetLevel1Weights[v16->u8[0]];
        if (!JSC::ducetLevel1Weights[v16->u8[0]])
          break;
        v20 = v18 > v19;
        if (v18 != v19)
          goto LABEL_62;
        v16 = (uint8x8_t *)((char *)v16 + 1);
        if (!--v14)
          goto LABEL_22;
      }
      v23 = 0;
      LOBYTE(v22) = 0;
      v21 = 0;
      goto LABEL_67;
    }
LABEL_22:
    if ((_DWORD)a4 == (_DWORD)a6)
    {
      if ((_DWORD)a4)
      {
        while (1)
        {
          v52 = a3->u8[0];
          a3 = (int16x8_t *)((char *)a3 + 1);
          v51 = v52;
          v53 = a5->u8[0];
          a5 = (uint8x8_t *)((char *)a5 + 1);
          LODWORD(v51) = JSC::ducetLevel3Weights[v51];
          v54 = JSC::ducetLevel3Weights[v53];
          v20 = v51 > v54;
          if ((_DWORD)v51 != v54)
            break;
          if (!--v10)
            goto LABEL_61;
        }
LABEL_62:
        if (v20)
          LODWORD(v22) = 1;
        else
          LODWORD(v22) = -1;
        v21 = v22 & 0xFFFFFF00;
      }
      else
      {
LABEL_61:
        LOBYTE(v22) = 0;
        v21 = 0;
      }
    }
    else
    {
      if (a6 < a4)
      {
        v21 = 0;
        v22 = JSC::ducetLevel1Weights[a3->u8[a6]] != 0;
        v23 = v22 << 32;
LABEL_67:
        LOBYTE(v22) = v21 | v22;
        goto LABEL_68;
      }
      LOBYTE(v22) = JSC::ducetLevel1Weights[a5->u8[a4]];
      if (!(_BYTE)v22)
      {
        v23 = 0;
        v21 = 0;
        goto LABEL_67;
      }
      v21 = -256;
      LOBYTE(v22) = -1;
    }
LABEL_66:
    v23 = 0x100000000;
    goto LABEL_67;
  }
  if (!v8
    || !v9
    || (v32 = (JSC::JSGlobalObject *)a2, !WTF::StringView::containsOnlyASCII(v82))
    || !WTF::StringView::containsOnlyASCII(v81))
  {
LABEL_71:
    WTF::StringView::upconvertedCharacters<32ul>((int8x16_t **)v82, &v78);
    WTF::StringView::upconvertedCharacters<32ul>((int8x16_t **)v81, &v76);
    v75 = ucol_strcoll();
    v62 = v76.i64[0];
    if (&v77 != (uint64_t *)v76.i64[0] && v76.i64[0])
    {
      v76.i64[0] = 0;
      v76.i32[2] = 0;
      WTF::fastFree(v62, v55, v56, v57, v58, v59, v60, v61);
    }
    v63 = v78.i64[0];
    if (&v79 != (uint64_t *)v78.i64[0])
    {
      if (v78.i64[0])
      {
        v78.i64[0] = 0;
        v78.i32[2] = 0;
        WTF::fastFree(v63, v55, v56, v57, v58, v59, v60, v61);
      }
    }
    return v75;
  }
  result = ucol_strcollUTF8();
  if (v80 >= 1)
  {
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x1A00000002;
    *(_QWORD *)(v34 + 8) = "Failed to compare strings.";
    *(_DWORD *)(v34 + 16) = 4;
    v78.i64[0] = v34;
    Error = JSC::createError((unint64_t)v32, (WTF::StringImpl **)&v78, v35);
    JSC::VM::throwException(v6, v32, Error, v37, v38, v39, v40, v41);
    v49 = (WTF::StringImpl *)v78.i64[0];
    v78.i64[0] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WTF::StringView::upconvertedCharacters<32ul>@<X0>(int8x16_t **a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t *v3;
  int8x16_t *v4;
  uint64_t result;
  int8x16_t *v6;
  char *v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  int8x16x2_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;

  v3 = *a1;
  v4 = a1[1];
  result = (uint64_t)a2[1].i64;
  a2->i64[0] = (uint64_t)a2[1].i64;
  a2->i64[1] = 32;
  a2[5].i64[0] = 0;
  a2[5].i64[1] = 0;
  v6 = (int8x16_t *)v4;
  if (((unint64_t)v4 & 0xFF00000000) == 0)
  {
LABEL_8:
    a2[5].i64[0] = (uint64_t)v3;
    a2[5].i64[1] = (uint64_t)v6;
    return result;
  }
  if (v4 <= 0x20uLL)
  {
    a2->i32[3] = (int)v4;
    goto LABEL_4;
  }
  if (v4 <= 0x29uLL)
    v9 = 41;
  else
    v9 = v4;
  if (!(v9 >> 31))
  {
    result = WTF::fastMalloc((WTF *)(2 * v9));
    a2->i64[0] = result;
    a2->i32[2] = v9;
    a2->i32[3] = (int)v4;
    if (v4 >= 0x40uLL)
    {
      v7 = (char *)(result + 2 * (v4 & 0xFFFFFFC0));
      v10 = 0uLL;
      v11 = (char *)result;
      do
      {
        v18.val[0] = *v3;
        v12 = v3[1];
        v19.val[0] = v3[2];
        v13 = v3[3];
        v3 += 4;
        v14 = v13;
        v19.val[1] = 0uLL;
        v20.val[0] = v12;
        v18.val[1] = 0uLL;
        v15 = v11;
        vst2q_s8(v15, v18);
        v15 += 32;
        v20.val[1] = 0uLL;
        vst2q_s8(v15, v20);
        v16 = v11 + 64;
        vst2q_s8(v16, v19);
        v17 = v11 + 96;
        vst2q_s8(v17, *(int8x16x2_t *)(&v10 - 1));
        v11 += 128;
      }
      while (v11 != v7);
LABEL_5:
      while (v7 != (char *)(result + 2 * v4))
      {
        v8 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)v7 = v8;
        v7 += 2;
      }
      v3 = (int8x16_t *)a2->i64[0];
      v6 = (int8x16_t *)a2->u32[3];
      goto LABEL_8;
    }
LABEL_4:
    v7 = (char *)result;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::IntlCollator::updateCanDoASCIIUCADUCETComparison(void)const::$_0::operator()(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48)
    && WTF::equalInternal<unsigned char>(*(_QWORD *)(a1 + 40), (unint64_t)"default", 7)
    && *(_BYTE *)(a1 + 49) == 3
    && *(_BYTE *)(a1 + 50) == 2
    && !*(_BYTE *)(a1 + 52)
    && !*(_BYTE *)(a1 + 53))
  {
    return JSC::canDoASCIIUCADUCETComparisonWithUCollator();
  }
  else
  {
    return 0;
  }
}

unint64_t JSC::IntlCollatorConstructor::create(uint64_t a1, unint64_t a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t SlowCase;
  WTF::StringImpl *v58;

  v10 = (_QWORD *)(a1 + 38552);
  v11 = a1 + 192;
  v12 = *(_QWORD *)(a1 + 38552);
  if (v12 < *(_QWORD *)(a1 + 38560))
    goto LABEL_2;
  v12 = *(_QWORD *)(a1 + 38568);
  if ((v12 & 1) == 0)
  {
    v52 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(a1 + 38576);
    *(_QWORD *)(a1 + 38560) = v12 + HIDWORD(v52);
    *(_QWORD *)(a1 + 38568) = v12 + (int)v52;
LABEL_2:
    *v10 = v12 + 48;
    goto LABEL_3;
  }
  v53 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38528, v11, 48, 0, 0, v54, v55, v56);
  a2 = v53;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  v13 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v12 = a2 >> 4;
  *(_DWORD *)(v12 + 4) = v13;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = JSC::callIntlCollator;
  *(_QWORD *)(v12 + 24) = JSC::constructIntlCollator;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(a2 + 40);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x800000002;
  *(_QWORD *)(v14 + 8) = "Collator";
  *(_DWORD *)(v14 + 16) = 4;
  v58 = (WTF::StringImpl *)v14;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v24 = JSC::jsString((JSC *)a1, (JSC::VM *)&v58, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(v12 + 32) = v24;
  if (v24 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath(v11, v12);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 1768), 0xFFFE000000000000, 6, v21, v22, v23, v25);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 1968), v24, 6, v26, v27, v28, v29);
  v38 = v58;
  v58 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 2160), (uint64_t)a3, 14, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition(a3, a1, *(_QWORD *)(v10[425] + 1080), v12, 4, v39, v40, v41, v42);
  return v12;
}

uint64_t JSC::IntlCollatorConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlCollatorConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::callIntlCollator(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v22)(_QWORD *);
  _QWORD *v23;
  _QWORD v24[3];

  v10 = *(JSC::Heap ***)(this + 56);
  v11 = *(_QWORD *)(this + 304);
  if ((v11 & 1) != 0)
  {
    v22 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v23 = (_QWORD *)(this - 16);
    v24[0] = *v23;
    v24[1] = this;
    v24[2] = this + 304;
    v11 = v22(v24);
  }
  v12 = JSC::IntlCollator::create(v10, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8);
  v18 = v12;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
    goto LABEL_7;
  }
  v19 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_7:
    v20 = 10;
    goto LABEL_5;
  }
  v20 = *((_QWORD *)a2 + 7);
LABEL_5:
  JSC::IntlCollator::initializeCollator(v12, (JSC::JSGlobalObject *)this, v19, (JSC::Symbol *)v20, v13, v14, v15, v16, v17);
  return v18;
}

unint64_t JSC::constructIntlCollator(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  uint64_t (*v32)(JSC::VM **);
  JSC::VM **v33;
  unint64_t v34;
  JSC::VM *v35;
  unint64_t v36;
  char *v37;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 304);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v32 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (JSC::VM **)(this - 16);
    v35 = *v33;
    v36 = this;
    v37 = (char *)(this + 304);
    SubclassStructure = (JSC::JSObject *)v32(&v35);
  }
  else
  {
    v35 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (*((_QWORD *)i + 3) == 2)
        break;
    }
    JSC::throwTypeError(this, &v35, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v29 = *(_DWORD *)(v10 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      {
        v34 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v34;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 304);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v31 = (JSC::VM **)(v14 - 16);
      v35 = *v31;
      v36 = v14;
      v37 = (char *)(v14 + 304);
      v15 = v30(&v35);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlCollator::create((JSC::Heap **)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_22;
  }
  v25 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v26 = 10;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlCollator::initializeCollator(v18, (JSC::JSGlobalObject *)this, v25, (JSC::Symbol *)v26, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::IntlCollatorPrototype::create(JSC::IntlCollatorPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::IntlCollatorPrototype::finishCreation((JSC::IntlCollatorPrototype *)v10, this);
  return v10;
}

unint64_t JSC::allocateCell<JSC::IntlCollatorPrototype>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1 + 4863;
  result = a1[4863];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v12 = (uint64_t)(a1 + 4860);
      v13 = (uint64_t)(a1 + 24);
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v12, v13, 16, 0, 0, v14, v15, v16);
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v11);
    v9[2] = result + (int)v11;
  }
  *v9 = result + 16;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

void JSC::IntlCollatorPrototype::finishCreation(JSC::IntlCollatorPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xD00000002;
  *(_QWORD *)(v5 + 8) = "Intl.Collator";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

uint64_t JSC::intlCollatorPrototypeGetterCompare(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  JSC::ExecutableBase *v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::ExecutableBase *v15;
  int8x16_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSFunction *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  JSC::VM *v45;
  WTF::StringImpl *v46[2];
  int v47;
  int v48;
  uint64_t v49;

  v2 = *(_QWORD *)(a1 + 56);
  v45 = (JSC::VM *)v2;
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::IntlCollator::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v45, (uint64_t)"Intl.Collator.prototype.compare called on value that's not a Collator", 70);
  }
  result = *(_QWORD *)(a2 + 16);
  if (!result)
  {
    v5 = v2 + 41952;
    v6 = *(JSC::ExecutableBase **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x700000002;
    *(_QWORD *)(v7 + 8) = "compare";
    *(_DWORD *)(v7 + 16) = 4;
    v46[0] = (WTF::StringImpl *)v7;
    v15 = (JSC::ExecutableBase *)JSC::JSFunction::create(v2, (uint64_t)v6, 2, v46, (uint64_t)JSC::intlCollatorFuncCompare, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v17 = v46[0];
    v46[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    v16.i64[0] = 2.0;
    v24 = (JSC::JSFunction *)JSC::JSBoundFunction::create((JSC::VM *)v2, (unint64_t)v6, v15, a2, 0, 0, *(_QWORD *)(v2 + 41968), v14, v16);
    if (*(_DWORD *)(v2 + 80))
    {
      v43 = *(_DWORD *)(v2 + 80);
      if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v2 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v2 + 16))
        return 0;
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(v24, (JSC::FunctionRareData *)v2, v6, *(const JSC::PropertyTable **)(*(_QWORD *)v5 + 1968), v20, v21, v22, v23, v25);
    if (!*(_DWORD *)(v2 + 80))
      goto LABEL_9;
    v44 = *(_DWORD *)(v2 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v2 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*(_QWORD *)(v2 + 16))
    {
      return 0;
    }
    else
    {
LABEL_9:
      v33 = *(_QWORD *)(*(_QWORD *)v5 + 1968);
      v34 = *(_QWORD *)(v2 + 41968);
      v46[0] = 0;
      v46[1] = v24;
      v47 = -1;
      v32.n128_u64[0] = 0x100000001000000;
      v48 = 0x1000000;
      v49 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v24, v2, v33, v34, 6, (uint64_t)v46, v30, v31, v32);
      result = 0;
      *(_QWORD *)(a2 + 16) = v24;
      if (v24)
      {
        if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v2 + 192, a2);
        return (uint64_t)v24;
      }
    }
  }
  return result;
}

uint64_t JSC::intlCollatorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int16x8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint8x8_t *v39;
  uint64_t v40;
  JSC::VM *v41;

  v10 = (int16x8_t *)0xFFFE000000000002;
  v11 = *((_QWORD *)this + 7);
  v41 = (JSC::VM *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::IntlCollator::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v41, (uint64_t)"Intl.Collator.prototype.compare called on value that's not a Collator", 70);
  }
  v13 = (unint64_t)a2;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v40 = 10;
LABEL_24:
    v14 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v40, (uint64_t)this, (JSC::Structure *)1, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_6;
  }
  v14 = *((_QWORD *)a2 + 6);
  v40 = v14;
  if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
    goto LABEL_24;
LABEL_6:
  if (*(_DWORD *)(v11 + 80))
  {
    LODWORD(v17) = *(_DWORD *)(v11 + 80);
    if ((v17 & 0x27) != 0)
      goto LABEL_69;
    goto LABEL_57;
  }
  while (1)
  {
    if ((unint64_t)(*(int *)(v13 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v40 = 10;
    }
    else
    {
      v13 = *(_QWORD *)(v13 + 56);
      v40 = v13;
      if ((v13 & (unint64_t)v10) == 0 && *(_BYTE *)(v13 + 5) == 2)
        goto LABEL_10;
    }
    v13 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v40, (uint64_t)this, (JSC::Structure *)1, a4, (uint64_t)a5, a6, a7, a8);
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v35 = *(_DWORD *)(v11 + 80);
      if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v15 = *(int **)(v14 + 8);
    if ((v15 & 1) == 0)
    {
      if (!v15)
        goto LABEL_28;
LABEL_13:
      v10 = (int16x8_t *)*((_QWORD *)v15 + 1);
      v16 = v15[1] | ((unint64_t)((v15[4] >> 2) & 1) << 32);
      goto LABEL_33;
    }
    if ((v15 & 2) == 0)
    {
      v15 = *JSC::JSRopeString::resolveRope(v14, this, (uint64_t)a3, a4, a9, (uint64_t)a5, a6, a7, a8);
      if (!v15)
      {
LABEL_28:
        v10 = 0;
        v16 = 0x100000000;
        goto LABEL_33;
      }
      goto LABEL_13;
    }
    v17 = *(_QWORD *)(v14 + 20) & 0xFFFFFFFFFLL;
    v18 = *(_QWORD *)(v17 + 8);
    if (v18
      && (v19 = *(unsigned int *)(v18 + 4),
          v20 = *(_QWORD *)(v14 + 24),
          v21 = v20 >> 16,
          v19 > (v20 >> 16)))
    {
      v22 = *(unsigned int *)(v18 + 16);
      v10 = *(int16x8_t **)(v18 + 8);
      v23 = *(_DWORD *)(v14 + 16);
      if ((int)v19 - (int)v21 > v23 || (v23 = v19 - v21, (_DWORD)v21))
      {
        v24 = (v20 >> 16);
        v16 = v23;
        v25 = v19 - v21;
        if (((v22 >> 2) & 1) != 0)
        {
          if (v25 < v23)
            goto LABEL_68;
          v10 = (int16x8_t *)((char *)v10 + v24);
          v16 = v23 | 0x100000000;
        }
        else
        {
          if (v25 < v23)
            goto LABEL_68;
          v10 = (int16x8_t *)((char *)v10 + 2 * v24);
        }
      }
      else
      {
        v16 = v19 & 0xFFFFFFFEFFFFFFFFLL | (((v22 >> 2) & 1) << 32);
      }
    }
    else
    {
      v16 = 0x100000000;
      v10 = (int16x8_t *)"";
    }
    v14 = *(_QWORD *)(v14 + 20) & 0xFFFFFFFFFLL;
LABEL_33:
    if (*(_DWORD *)(v11 + 80))
    {
      v36 = *(_DWORD *)(v11 + 80);
      if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v26 = *(int **)(v13 + 8);
    if ((v26 & 1) == 0)
    {
      if (v26)
      {
LABEL_36:
        a5 = (uint8x8_t *)*((_QWORD *)v26 + 1);
        a6 = v26[1] | ((unint64_t)((v26[4] >> 2) & 1) << 32);
        goto LABEL_52;
      }
      goto LABEL_48;
    }
    if ((v26 & 2) == 0)
    {
      v26 = *JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, (uint64_t)a5, a6, a7, a8);
      if (v26)
        goto LABEL_36;
LABEL_48:
      a5 = 0;
      a6 = 0x100000000;
      goto LABEL_52;
    }
    v17 = *(_QWORD *)(v13 + 20) & 0xFFFFFFFFFLL;
    v27 = *(_QWORD *)(v17 + 8);
    if (v27)
    {
      a5 = *(uint8x8_t **)(v27 + 8);
      v28 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
    }
    else
    {
      a5 = 0;
      v28 = 0x100000000;
    }
    v29 = *(_QWORD *)(v13 + 24);
    v30 = v29 >> 16;
    if (v28 <= (v29 >> 16))
    {
      a6 = 0x100000000;
      a5 = (uint8x8_t *)"";
      goto LABEL_52;
    }
    v31 = *(_DWORD *)(v13 + 16);
    if (v28 - (v29 >> 16) <= v31)
    {
      v31 = v28 - (v29 >> 16);
      if (!(_DWORD)v30)
        break;
    }
    v32 = (v29 >> 16);
    a6 = v31;
    v33 = v28 - (unint64_t)v30;
    if ((v28 & 0x100000000) != 0)
    {
      if (v33 >= v31)
      {
        a5 = (uint8x8_t *)((char *)a5 + v32);
        a6 = v31 | 0x100000000;
        goto LABEL_52;
      }
    }
    else if (v33 >= v31)
    {
      a5 = (uint8x8_t *)((char *)a5 + 2 * v32);
      goto LABEL_52;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    if ((v17 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_57:
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  a6 = v28;
  if (!*(_DWORD *)(v11 + 80))
    return JSC::IntlCollator::compareStrings(v12, (JSC::VM **)this, v10, (unsigned __int8 *)v16, a5, (unsigned __int8 *)a6) | 0xFFFE000000000000;
LABEL_52:
  v37 = *(_DWORD *)(v11 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
  {
    v38 = a6;
    v39 = a5;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    a6 = v38;
    a5 = v39;
  }
  if (*(_QWORD *)(v11 + 16))
    return 0;
  else
    return JSC::IntlCollator::compareStrings(v12, (JSC::VM **)this, v10, (unsigned __int8 *)v16, a5, (unsigned __int8 *)a6) | 0xFFFE000000000000;
}

unint64_t JSC::IntlDateTimeFormatConstructor::create(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t SlowCase;
  WTF::StringImpl *v54;

  v10 = (_QWORD *)(a1 + 38552);
  v11 = a1 + 192;
  v12 = *(_QWORD *)(a1 + 38552);
  if (v12 < *(_QWORD *)(a1 + 38560))
    goto LABEL_2;
  v12 = *(_QWORD *)(a1 + 38568);
  if ((v12 & 1) == 0)
  {
    v48 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(a1 + 38576);
    *(_QWORD *)(a1 + 38560) = v12 + HIDWORD(v48);
    *(_QWORD *)(a1 + 38568) = v12 + (int)v48;
LABEL_2:
    *v10 = v12 + 48;
    goto LABEL_3;
  }
  v49 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38528, v11, 48, 0, 0, v50, v51, v52);
  a2 = v49;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  v13 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v12 = a2 >> 4;
  *(_DWORD *)(v12 + 4) = v13;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = JSC::callIntlDateTimeFormat;
  *(_QWORD *)(v12 + 24) = JSC::constructIntlDateTimeFormat;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(a2 + 40);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0xE00000002;
  *(_QWORD *)(v14 + 8) = "DateTimeFormat";
  *(_DWORD *)(v14 + 16) = 4;
  v54 = (WTF::StringImpl *)v14;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v24 = JSC::jsString((JSC *)a1, (JSC::VM *)&v54, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(v12 + 32) = v24;
  if (v24 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath(v11, v12);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 1768), 0xFFFE000000000000, 6, v21, v22, v23, v25);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 1968), v24, 6, v26, v27, v28, v29);
  v38 = v54;
  v54 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, a1, *(_QWORD *)(v10[425] + 2160), a3, 14, v34, v35, v36, v37);
  return v12;
}

uint64_t JSC::IntlDateTimeFormatConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDateTimeFormatConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *JSC::callIntlDateTimeFormat(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const JSC::PropertyTable *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int HasInstance;
  uint64_t (*v41)(_QWORD **);
  _QWORD *v42;
  int v43;
  int v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;

  v10 = *((_QWORD *)a2 + 5);
  v11 = (_DWORD *)*((_QWORD *)a2 + 3);
  v12 = *(_QWORD *)(this + 56);
  v13 = *(_QWORD *)(this + 384);
  if ((v13 & 1) != 0)
  {
    v41 = *(uint64_t (**)(_QWORD **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v42 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v42 = (_QWORD *)(this - 16);
    v45 = (_QWORD *)*v42;
    v46 = this;
    v47 = (char *)(this + 384);
    v13 = v41(&v45);
  }
  v14 = (_QWORD *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v12, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
  v18 = v14;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
  }
  else
  {
    v19 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v20 = *((_QWORD *)a2 + 7);
      goto LABEL_5;
    }
  }
  v20 = 10;
LABEL_5:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v14, this, v19, (JSC::Symbol *)v20, 2, 0, v15, v16, v17);
  if (*(_DWORD *)(v12 + 80))
  {
    v43 = *(_DWORD *)(v12 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v21, (uint64_t)v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
    return v18;
  JSC::JSObject::getDirect(v11, (JSC::VM *)v12, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2160), v22, v23, v24, v25, v26);
  HasInstance = JSC::JSObject::defaultHasInstance(this, v10, v27, v28, v29, v30, v31, v32);
  if (*(_DWORD *)(v12 + 80))
  {
    v44 = *(_DWORD *)(v12 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v33, v34, v35, v36, v37, v38);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (!HasInstance)
    return v18;
  v46 = 0;
  v47 = 0;
  v45 = v18;
  v48 = 0x70000000ELL;
  (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD **, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x90))(v10, this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48) + 4312), &v45, 1);
  return (_QWORD *)v10;
}

_QWORD *JSC::constructIntlDateTimeFormat(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v26;
  int v27;
  uint64_t (*v28)(JSC::VM **);
  JSC::VM **v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  unint64_t v32;
  JSC::VM *v33;
  unint64_t v34;
  char *v35;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 384);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v30 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v31 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v31 = (JSC::VM **)(this - 16);
    v33 = *v31;
    v34 = this;
    v35 = (char *)(this + 384);
    SubclassStructure = (JSC::JSObject *)v30(&v33);
  }
  else
  {
    v33 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (*((_QWORD *)i + 3) == 2)
        break;
    }
    JSC::throwTypeError(this, &v33, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v27 = *(_DWORD *)(v10 + 80);
      if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      {
        v32 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v32;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 384);
    if ((v15 & 1) != 0)
    {
      v28 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v29 = (JSC::VM **)(v14 - 16);
      v33 = *v29;
      v34 = v14;
      v35 = (char *)(v14 + 384);
      v15 = v28(&v33);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v26 = *(_DWORD *)(v10 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = (_QWORD *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23 = 10;
    goto LABEL_22;
  }
  v23 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v24 = 10;
    goto LABEL_19;
  }
  v24 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v18, this, v23, (JSC::Symbol *)v24, 2, 0, v19, v20, v21);
  return v22;
}

unint64_t JSC::IntlDateTimeFormatPrototype::create(JSC::IntlDateTimeFormatPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;

  v11 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v79 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v79);
    *((_QWORD *)this + 4865) = SlowCase + (int)v79;
LABEL_2:
    *v11 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v80, v81, v82);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v13 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = (unint64_t)a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"formatRangeToParts", 0x12uLL, (uint64_t)a4, a5, a6, a7, a8, &v83);
  v14 = v83;
  if (v83 && (*((_BYTE *)v83 + 16) & 0x20) == 0)
  {
    v15 = v83;
LABEL_8:
    *(_DWORD *)v15 += 2;
    goto LABEL_9;
  }
  v15 = *(WTF::StringImpl **)(v11[381] + 872);
  if (v15)
    goto LABEL_8;
LABEL_9:
  v83 = v15;
  v23 = JSC::JSFunction::create((uint64_t)this, (uint64_t)a2, 2, &v83, (uint64_t)JSC::intlDateTimeFormatPrototypeFuncFormatRangeToParts, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v25 = v83;
  v83 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, (unint64_t)v14, v23, 4, v20, v21, v22, v24);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v33 = *(_QWORD *)(v11[381] + 2776);
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x1300000002;
  *(_QWORD *)(v34 + 8) = "Intl.DateTimeFormat";
  *(_DWORD *)(v34 + 16) = 4;
  v83 = (WTF::StringImpl *)v34;
  v41 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v83, v35, v36, v37, v38, v39, v40);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, v33, v41, 6, v42, v43, v44, v45);
  v53 = v83;
  v83 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  return SlowCase;
}

uint64_t JSC::IntlDateTimeFormatPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDateTimeFormatPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::intlDateTimeFormatPrototypeFuncFormatRangeToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlDateTimeFormat *v11;
  JSC::JSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  const char *v30;
  uint64_t v31;
  int v32;
  int v33;
  double v34;
  JSC::VM *v35;

  v10 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v10;
  v11 = (JSC::IntlDateTimeFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlDateTimeFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v30 = "Intl.DateTimeFormat.prototype.formatRangeToParts called on value that's not a DateTimeFormat";
    v31 = 93;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)v30, v31);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || *((_DWORD *)a2 + 8) == 2
    || *((_QWORD *)a2 + 6) == 10
    || (v12 = (JSC::JSObject *)*((_QWORD *)a2 + 7), v12 == (JSC::JSObject *)10))
  {
    v30 = "startDate or endDate is undefined";
    v31 = 34;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)v30, v31);
  }
  *(double *)v19.i64 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, *((JSC::JSObject **)a2 + 6), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v20 = *(double *)v19.i64;
  if (*(_DWORD *)(v10 + 80))
  {
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v27 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, v12, v13, v14, v15, v16, v17, v18, v19);
  v28 = v27;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlDateTimeFormat::formatRangeToParts(v11, this, v20, v28);
  v33 = *(_DWORD *)(v10 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
  {
    v34 = v27;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    v28 = v34;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlDateTimeFormat::formatRangeToParts(v11, this, v20, v28);
}

double JSC::IntlDateTimeFormat::handleDateTimeValue(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int v17;
  double v18;
  double v19;
  JSC::JSObject *v21;
  timespec __tp;

  v21 = a2;
  if (a2 == (JSC::JSObject *)10)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)v16.i64 = floor(((double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec) * 1000.0);
    if (fabs(*(double *)v16.i64) != INFINITY)
    {
      v17 = (int)*(double *)v16.i64;
      if (*(double *)v16.i64 == (double)(int)*(double *)v16.i64 && (v17 || (v16.i64[0] & 0x8000000000000000) == 0))
        return (double)v17;
    }
    v17 = v16.i32[0];
    __tp.tv_sec = v16.i64[0] + 0x2000000000000;
    if ((unint64_t)(v16.i64[0] + 0x2000000000000) >= 0xFFFE000000000000)
      return (double)v17;
    if (v16.i64[0] >= 0xFFFC000000000000)
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&__tp, a1, v10, v11, v12, v13, v14, v15, v16);
    return *(double *)v16.i64;
  }
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    if ((unint64_t)a2 >= 0xFFFE000000000000)
    {
      v18 = (double)(int)a2;
      goto LABEL_19;
    }
    if ((unint64_t)a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v18 = (char *)a2 - 0x2000000000000;
      goto LABEL_19;
    }
  }
  else if (&JSC::TemporalInstant::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    *(double *)v16.i64 = (double)__divti3();
    return *(double *)v16.i64;
  }
  JSC::JSValue::toNumberSlowCase(&v21, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_19:
  v19 = fabs(v18);
  *(double *)v16.i64 = trunc(v18) + 0.0;
  if (v19 > 8.64e15)
    *(double *)v16.i64 = NAN;
  return *(double *)v16.i64;
}

uint64_t JSC::intlDateTimeFormatPrototypeGetterFormat(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  JSC::JSFunction *v19;
  uint64_t v20;
  JSC::ExecutableBase *v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::ExecutableBase *v30;
  int8x16_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(WTF::StringImpl **);
  WTF::StringImpl **v59;
  int v60;
  int v61;
  int v62;
  JSC::VM *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v10 = *(_QWORD *)(a1 + 56);
  v63 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a1 + 384);
  if ((v11 & 1) != 0)
  {
    v58 = *(void (**)(WTF::StringImpl **))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v59 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v59 = (WTF::StringImpl **)(a1 - 16);
    v64 = *v59;
    v65 = a1;
    v66 = a1 + 384;
    v58(&v64);
  }
  v18 = JSC::unwrapForLegacyIntlConstructor<JSC::IntlDateTimeFormat>(a1, a2, *(_DWORD **)(a1 + 392), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v60 = *(_DWORD *)(v10 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (!v18)
    return JSC::throwTypeError(a1, &v63, (uint64_t)"Intl.DateTimeFormat.prototype.format called on value that's not a DateTimeFormat", 81);
  v19 = (JSC::JSFunction *)*((_QWORD *)v18 + 2);
  if (!v19)
  {
    v20 = v10 + 41952;
    v21 = *(JSC::ExecutableBase **)(16 * (*v18 & 0xFFFFFFFE) + 0x28);
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x600000002;
    *(_QWORD *)(v22 + 8) = "format";
    *(_DWORD *)(v22 + 16) = 4;
    v64 = (WTF::StringImpl *)v22;
    v30 = (JSC::ExecutableBase *)JSC::JSFunction::create(v10, (uint64_t)v21, 1, &v64, (uint64_t)JSC::intlDateTimeFormatFuncFormatDateTime, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v32 = v64;
    v64 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    v31.i64[0] = 1.0;
    v19 = (JSC::JSFunction *)JSC::JSBoundFunction::create((JSC::VM *)v10, (unint64_t)v21, v30, (uint64_t)v18, 0, 0, *(_QWORD *)(v10 + 41968), v29, v31);
    if (*(_DWORD *)(v10 + 80))
    {
      v61 = *(_DWORD *)(v10 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v33, v34, v35, v36, v37, v38);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(v19, (JSC::FunctionRareData *)v10, v21, *(const JSC::PropertyTable **)(*(_QWORD *)v20 + 1968), v35, v36, v37, v38, v39);
    if (*(_DWORD *)(v10 + 80))
    {
      v62 = *(_DWORD *)(v10 + 80);
      if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v40, v41, v42, v43, v44, v45);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v47 = *(_QWORD *)(*(_QWORD *)v20 + 1968);
    v48 = *(_QWORD *)(v10 + 41968);
    v64 = 0;
    v65 = (unint64_t)v19;
    v66 = 0x1000000FFFFFFFFLL;
    v46.n128_u64[0] = 0x100000001000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v19, v10, v47, v48, 6, (uint64_t)&v64, v44, v45, v46);
    *((_QWORD *)v18 + 2) = v19;
    if (v19 && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v18 + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)v18);
  }
  return (uint64_t)v19;
}

uint64_t JSC::intlDateTimeFormatFuncFormatDateTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlDateTimeFormat *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v21;
  double v22;
  JSC::VM *v23;

  v10 = *((_QWORD *)this + 7);
  v23 = (JSC::VM *)v10;
  v11 = (JSC::IntlDateTimeFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlDateTimeFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"Intl.DateTimeFormat.prototype.format called on value that's not a DateTimeFormat", 81);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, (JSC::JSObject *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlDateTimeFormat::format(v11, (unint64_t)this, v19);
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
  {
    v22 = v19;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    v19 = v22;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlDateTimeFormat::format(v11, (unint64_t)this, v19);
}

unint64_t JSC::IntlDisplayNames::create(JSC::IntlDisplayNames *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5069);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlDisplayNamesSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 48;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 48, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)(result + 40) = 2;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlDisplayNames::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDisplayNames::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlDisplayNames::initializeDisplayNames(uint64_t a1, unint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::Symbol *v9;
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  JSC *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  const WTF::String *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int *v93;
  int8x16_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  JSC::Heap **v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  JSC::Exception *v116;
  WTF::StringImpl *v117;
  int v118;
  int v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int *v132;
  unsigned int v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  int8x16_t v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  JSC::Heap **v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  JSC::Exception *v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int *v170;
  uint64_t v171;
  unint64_t v172;
  JSC::Heap **v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  JSC::Exception *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  JSC::VM *v184;
  uint64_t v185;
  uint64_t v186;
  int8x16_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  int *v208;
  uint64_t v209;
  unint64_t v210;
  JSC::Heap **v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  JSC::Exception *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  _BOOL4 v222;
  unsigned int v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _DWORD *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  uint64_t (*v255)(JSC::VM **);
  JSC::VM **v256;
  uint64_t (*v257)(JSC::VM **);
  JSC::VM **v258;
  uint64_t (*v259)(uint64_t *);
  uint64_t *v260;
  uint64_t (*v261)(uint64_t *);
  uint64_t *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  _BYTE v266[96];
  WTF *v267;
  int v268;
  unsigned int v269;
  JSC::VM *v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  JSC::VM *v277;
  uint64_t v278;
  unint64_t v279;
  const char *v280;
  uint64_t v281;
  __int16 v282;
  const char *v283;
  uint64_t v284;
  __int16 v285;
  const char *v286;
  uint64_t v287;
  __int16 v288;
  const char *v289;
  uint64_t v290;
  __int16 v291;
  const char *v292;
  uint64_t v293;
  __int16 v294;
  uint64_t v295;

  v9 = a4;
  v295 = *MEMORY[0x1E0C80C00];
  v270 = *(JSC::VM **)(a2 + 56);
  v12 = v270;
  JSC::canonicalizeLocaleList(a2, a3, a3, a4, a5, a6, a7, a8, &v267, a9);
  if (*((_DWORD *)v12 + 20))
  {
    v118 = *((_DWORD *)v12 + 20);
    if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_23;
  }
  v277 = *(JSC::VM **)(a2 + 56);
  if (v9 != (JSC::Symbol *)10)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) > 0x16u)
      goto LABEL_6;
    JSC::throwTypeError(a2, &v277, (uint64_t)"options argument is not an object or undefined", 47);
  }
  v9 = 0;
LABEL_6:
  if (!*((_DWORD *)v12 + 20))
    goto LABEL_7;
  v119 = *((_DWORD *)v12 + 20);
  if ((v119 & 0x27) != 0 && (v119 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (!*((_QWORD *)v12 + 2))
  {
LABEL_7:
    v266[0] = 0;
    v266[8] = 0;
    v266[16] = 0;
    v266[24] = 0;
    v266[32] = 0;
    v266[40] = 0;
    v266[48] = 0;
    v266[56] = 0;
    v266[64] = 0;
    v266[72] = 0;
    v266[80] = 0;
    v266[88] = 0;
    v20 = (char *)v12 + 41952;
    v21 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1792);
    v277 = (JSC::VM *)"lookup";
    v278 = 7;
    LOBYTE(v279) = 0;
    v280 = "best fit";
    v281 = 9;
    LOBYTE(v282) = 1;
    v22 = (JSC *)JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v9, v21, (uint64_t)&v277, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
    v30 = (uint64_t)v22;
    if (*((_DWORD *)v12 + 20))
    {
      v120 = *((_DWORD *)v12 + 20);
      if ((v120 & 0x27) != 0 && (v120 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (*((_QWORD *)v12 + 2))
        goto LABEL_22;
    }
    v31 = JSC::intlAvailableLocales(v22);
    JSC::resolveLocale((JSC *)a2, (const WTF::StringImpl *)v31, (uint64_t)&v267, v30, (uint64_t)v266, 0, 0, (uint64_t)JSC::IntlDisplayNames::initializeDisplayNames(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke, (uint64_t)&v263);
    v40 = (WTF::StringImpl **)(a1 + 24);
    v41 = v263;
    if (v263)
      *(_DWORD *)v263 += 2;
    v42 = *v40;
    *v40 = v41;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        v41 = *v40;
        if (!*v40)
          goto LABEL_14;
        goto LABEL_28;
      }
      *(_DWORD *)v42 -= 2;
    }
    if (!v41)
    {
LABEL_14:
      v43 = "failed to initialize DisplayNames due to invalid locale";
      v44 = a2;
      v45 = 56;
      goto LABEL_15;
    }
LABEL_28:
    if (!*((_DWORD *)v41 + 1))
      goto LABEL_14;
    v46 = *(const WTF::String **)(*(_QWORD *)v20 + 2384);
    v277 = (JSC::VM *)"narrow";
    v278 = 7;
    LOBYTE(v279) = 0;
    v280 = "short";
    v281 = 6;
    LOBYTE(v282) = 1;
    v283 = "long";
    v284 = 5;
    v58 = 2;
    LOBYTE(v285) = 2;
    if (!v9)
    {
LABEL_60:
      *(_BYTE *)(a1 + 40) = v58;
      if (*((_DWORD *)v12 + 20))
      {
        v129 = *((_DWORD *)v12 + 20);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
        if (*((_QWORD *)v12 + 2))
          goto LABEL_16;
      }
      v46 = *(const WTF::String **)(*(_QWORD *)v20 + 2560);
      v277 = (JSC::VM *)"language";
      v278 = 9;
      LOWORD(v279) = 256;
      v282 = 257;
      v280 = "region";
      v281 = 7;
      v283 = "script";
      v284 = 7;
      v285 = 258;
      v286 = "currency";
      v287 = 9;
      v288 = 259;
      v289 = "calendar";
      v290 = 9;
      v291 = 260;
      v292 = "dateTimeField";
      v293 = 14;
      v294 = 261;
      if (!v9)
        goto LABEL_64;
      v92 = *(_QWORD *)(a2 + 56);
      v93 = (int *)JSC::JSObject::get((unsigned int *)v9, a2, (unint64_t)v46, v34, v35, v36, v37, v38);
      v95 = (unint64_t)v93;
      v276 = (WTF::StringImpl *)v93;
      if (*(_DWORD *)(v92 + 80))
      {
        v131 = *(_DWORD *)(v92 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v92 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
        LOBYTE(v96) = 0;
        if (*(_QWORD *)(v92 + 16))
        {
          v97 = 0;
          goto LABEL_121;
        }
        v97 = 0;
        if (v95 == 10)
        {
LABEL_121:
          if (*((_DWORD *)v12 + 20))
          {
            v168 = *((_DWORD *)v12 + 20);
            if ((v168 & 0x27) != 0 && (v168 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
            if (*((_QWORD *)v12 + 2))
              goto LABEL_16;
          }
          if (!v97)
          {
            v43 = "type must not be undefined";
            v44 = a2;
            v45 = 27;
            goto LABEL_15;
          }
          *(_BYTE *)(a1 + 41) = v96;
          if (!v9)
            goto LABEL_126;
          v135 = *(_QWORD *)(a2 + 56);
          v136 = JSC::JSObject::get((unsigned int *)v9, a2, *(_QWORD *)(*(_QWORD *)v20 + 1296), v34, v35, v36, v37, v38);
          v138 = v136;
          v272 = v136;
          if (*(_DWORD *)(v135 + 80))
          {
            v169 = *(_DWORD *)(v135 + 80);
            if ((v169 & 0x27) != 0 && (v169 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v135 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
            v139 = 0;
            if (*(_QWORD *)(v135 + 16) || v138 == 10)
            {
LABEL_163:
              *(_BYTE *)(a1 + 42) = v139;
              v184 = v270;
              if (*((_DWORD *)v270 + 20))
              {
                v206 = *((_DWORD *)v270 + 20);
                if ((v206 & 0x27) != 0 && (v206 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VM *)((char *)v270 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
                if (*((_QWORD *)v184 + 2))
                  goto LABEL_16;
              }
              if (!v9)
                goto LABEL_167;
              v185 = *(_QWORD *)(a2 + 56);
              v186 = JSC::JSObject::get((unsigned int *)v9, a2, *(_QWORD *)(*(_QWORD *)v20 + 1744), v34, v35, v36, v37, v38);
              v188 = v186;
              v272 = v186;
              if (*(_DWORD *)(v185 + 80))
              {
                v207 = *(_DWORD *)(v185 + 80);
                if ((v207 & 0x27) != 0 && (v207 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v185 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
                v189 = 0;
                if (*(_QWORD *)(v185 + 16) || v188 == 10)
                  goto LABEL_199;
              }
              else if (v186 == 10)
              {
LABEL_167:
                v189 = 0;
LABEL_199:
                *(_BYTE *)(a1 + 43) = v189;
                if (*((_DWORD *)v184 + 20))
                {
                  v250 = *((_DWORD *)v184 + 20);
                  if ((v250 & 0x27) != 0 && (v250 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v184 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
                  if (*((_QWORD *)v184 + 2))
                    goto LABEL_16;
                }
                LODWORD(v276) = 0;
                if (*(_BYTE *)(a1 + 41))
                  v222 = 1;
                else
                  v222 = *(unsigned __int8 *)(a1 + 43) != 1;
                v277 = (JSC::VM *)(v222 | 0x10400000000);
                if (*(_BYTE *)(a1 + 40) == 2)
                  v223 = 512;
                else
                  v223 = 513;
                v278 = v223 | 0x30100000000;
                WTF::String::utf8((uint64_t *)(a1 + 24), 0, v34, v35, v36, v37, v38, &v272, v39);
                v231 = *(_DWORD **)(a1 + 32);
                *(_QWORD *)(a1 + 32) = v272;
                if (v231)
                {
                  if (*v231 == 1)
                    WTF::fastFree((unint64_t)v231, v224, v225, v226, v227, v228, v229, v230);
                  else
                    --*v231;
                }
                v232 = uldn_openForContext();
                v233 = *(_QWORD *)(a1 + 16);
                *(_QWORD *)(a1 + 16) = v232;
                if (v233)
                  uldn_close();
                if ((int)v276 < 1)
                  goto LABEL_16;
                v43 = "failed to initialize DisplayNames";
                v44 = a2;
                v45 = 34;
LABEL_15:
                JSC::throwTypeError(v44, &v270, (uint64_t)v43, v45);
LABEL_16:
                std::array<WTF::String,6ul>::~array(&v265, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                v47 = v264;
                v264 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v47, v23, v24, v25, v26, v27, v28, v29);
                    WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                  }
                  else
                  {
                    *(_DWORD *)v47 -= 2;
                  }
                }
                v48 = v263;
                v263 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v48, v23, v24, v25, v26, v27, v28, v29);
                    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
                  }
                  else
                  {
                    *(_DWORD *)v48 -= 2;
                  }
                }
LABEL_22:
                std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)v266, v23, v24, v25, v26, v27, v28, v29);
                goto LABEL_23;
              }
              if ((v188 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v188 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v272, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v276);
LABEL_185:
                if (!*(_DWORD *)(v185 + 80))
                  goto LABEL_186;
                v254 = *(_DWORD *)(v185 + 80);
                if ((v254 & 0x27) != 0 && (v254 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v185 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
                if (!*(_QWORD *)(v185 + 16))
                {
LABEL_186:
                  if (!WTF::equalInternal<unsigned char>((uint64_t)v276, (unint64_t)"dialect", 7))
                  {
                    if (WTF::equalInternal<unsigned char>((uint64_t)v276, (unint64_t)"standard", 8))
                    {
                      v189 = 1;
                      goto LABEL_196;
                    }
                    v209 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v209 = 0x3600000002;
                    *(_QWORD *)(v209 + 8) = "languageDisplay must be either \"dialect\" or \"standard\"";
                    *(_DWORD *)(v209 + 16) = 4;
                    v275 = (WTF::StringImpl *)v209;
                    v210 = *(_QWORD *)(a2 + 128);
                    v211 = *(JSC::Heap ***)(a2 + 56);
                    if ((v210 & 1) != 0)
                    {
                      v257 = *(uint64_t (**)(JSC::VM **))(v210 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((a2 & 8) != 0)
                        v258 = (JSC::VM **)(a2 - 16);
                      else
                        v258 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
                      v277 = *v258;
                      v278 = a2;
                      v279 = a2 + 128;
                      v210 = v257(&v277);
                    }
                    v212 = JSC::ErrorInstance::create(v211, v210, &v275, 0, 0, 0, 2, 1);
                    v219 = (JSC::Exception *)v212;
                    if ((v212 & 0xFFFE000000000002) != 0
                      || &JSC::Exception::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v212 & 0xFFFFFFFE)
                                                                              + 0x4C)))
                    {
                      v219 = (JSC::Exception *)JSC::Exception::create(v185, (JSC::VM *)v212, 0, v213, v214, v215, v216, v217);
                    }
                    JSC::VM::throwException((JSC::VM *)v185, (JSC::JSGlobalObject *)a2, v219, v218, v213, v214, v215, v216, v217);
                    v220 = v275;
                    v275 = 0;
                    if (v220)
                    {
                      if (*(_DWORD *)v220 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v220, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                        WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                      }
                      else
                      {
                        *(_DWORD *)v220 -= 2;
                      }
                    }
                  }
                }
                v189 = 0;
LABEL_196:
                v221 = v276;
                v276 = 0;
                if (v221)
                {
                  if (*(_DWORD *)v221 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v221, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                    WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
                  }
                  else
                  {
                    *(_DWORD *)v221 -= 2;
                  }
                }
                goto LABEL_199;
              }
              v208 = *(int **)(v188 + 8);
              if ((v208 & 1) != 0)
              {
                v208 = *JSC::JSRopeString::resolveRope(v188, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v187, v35, v36, v37, v38);
                if (!v208)
                  goto LABEL_184;
              }
              else if (!v208)
              {
LABEL_184:
                v276 = (WTF::StringImpl *)v208;
                goto LABEL_185;
              }
              *v208 += 2;
              goto LABEL_184;
            }
          }
          else if (v136 == 10)
          {
LABEL_126:
            v139 = 0;
            goto LABEL_163;
          }
          if ((v138 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v138 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v272, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v276);
LABEL_149:
            if (!*(_DWORD *)(v135 + 80))
              goto LABEL_150;
            v253 = *(_DWORD *)(v135 + 80);
            if ((v253 & 0x27) != 0 && (v253 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v135 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
            if (!*(_QWORD *)(v135 + 16))
            {
LABEL_150:
              if (!WTF::equalInternal<unsigned char>((uint64_t)v276, (unint64_t)"code", 4))
              {
                if (WTF::equalInternal<unsigned char>((uint64_t)v276, (unint64_t)"none", 4))
                {
                  v139 = 1;
                  goto LABEL_160;
                }
                v171 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v171 = 0x2800000002;
                *(_QWORD *)(v171 + 8) = "fallback must be either \"code\" or \"none\"";
                *(_DWORD *)(v171 + 16) = 4;
                v275 = (WTF::StringImpl *)v171;
                v172 = *(_QWORD *)(a2 + 128);
                v173 = *(JSC::Heap ***)(a2 + 56);
                if ((v172 & 1) != 0)
                {
                  v255 = *(uint64_t (**)(JSC::VM **))(v172 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((a2 & 8) != 0)
                    v256 = (JSC::VM **)(a2 - 16);
                  else
                    v256 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
                  v277 = *v256;
                  v278 = a2;
                  v279 = a2 + 128;
                  v172 = v255(&v277);
                }
                v174 = JSC::ErrorInstance::create(v173, v172, &v275, 0, 0, 0, 2, 1);
                v181 = (JSC::Exception *)v174;
                if ((v174 & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v174 & 0xFFFFFFFE) + 0x4C)))
                {
                  v181 = (JSC::Exception *)JSC::Exception::create(v135, (JSC::VM *)v174, 0, v175, v176, v177, v178, v179);
                }
                JSC::VM::throwException((JSC::VM *)v135, (JSC::JSGlobalObject *)a2, v181, v180, v175, v176, v177, v178, v179);
                v182 = v275;
                v275 = 0;
                if (v182)
                {
                  if (*(_DWORD *)v182 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v182, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                    WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
                  }
                  else
                  {
                    *(_DWORD *)v182 -= 2;
                  }
                }
              }
            }
            v139 = 0;
LABEL_160:
            v183 = v276;
            v276 = 0;
            if (v183)
            {
              if (*(_DWORD *)v183 == 2)
              {
                WTF::StringImpl::~StringImpl(v183, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
              }
              else
              {
                *(_DWORD *)v183 -= 2;
              }
            }
            goto LABEL_163;
          }
          v170 = *(int **)(v138 + 8);
          if ((v170 & 1) != 0)
          {
            v170 = *JSC::JSRopeString::resolveRope(v138, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v137, v35, v36, v37, v38);
            if (!v170)
              goto LABEL_148;
          }
          else if (!v170)
          {
LABEL_148:
            v276 = (WTF::StringImpl *)v170;
            goto LABEL_149;
          }
          *v170 += 2;
          goto LABEL_148;
        }
      }
      else if (v93 == (int *)10)
      {
LABEL_64:
        LOBYTE(v96) = 0;
        v97 = 0;
        goto LABEL_121;
      }
      if ((v95 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v95 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v276, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v275);
        goto LABEL_101;
      }
      v132 = *(int **)(v95 + 8);
      if ((v132 & 1) != 0)
      {
        v132 = *JSC::JSRopeString::resolveRope(v95, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v94, v35, v36, v37, v38);
        if (!v132)
          goto LABEL_100;
      }
      else if (!v132)
      {
LABEL_100:
        v275 = (WTF::StringImpl *)v132;
LABEL_101:
        if (!*(_DWORD *)(v92 + 80))
          goto LABEL_287;
        v252 = *(_DWORD *)(v92 + 80);
        if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v92 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
        if (!*(_QWORD *)(v92 + 16))
        {
LABEL_287:
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"language", 8))
          {
            v133 = 0;
LABEL_117:
            v96 = *((unsigned __int16 *)&v279 + 12 * v133);
            v97 = v96 >> 8;
            goto LABEL_118;
          }
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"region", 6))
          {
            v133 = 1;
            goto LABEL_117;
          }
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"script", 6))
          {
            v133 = 2;
            goto LABEL_117;
          }
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"currency", 8))
          {
            v133 = 3;
            goto LABEL_117;
          }
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"calendar", 8))
          {
            v133 = 4;
            goto LABEL_117;
          }
          if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"dateTimeField", 13))
          {
            v133 = 5;
            goto LABEL_117;
          }
          v148 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v148 = 0x5E00000002;
          *(_QWORD *)(v148 + 8) = "type must be either \"language\", \"region\", \"script\", \"currency\", \"calendar\", "
                                  "or \"dateTimeField\"";
          *(_DWORD *)(v148 + 16) = 4;
          v271 = (WTF::StringImpl *)v148;
          v149 = *(_QWORD *)(a2 + 128);
          v150 = *(JSC::Heap ***)(a2 + 56);
          if ((v149 & 1) != 0)
          {
            v261 = *(uint64_t (**)(uint64_t *))(v149 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a2 & 8) != 0)
              v262 = (uint64_t *)(a2 - 16);
            else
              v262 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
            v272 = *v262;
            v273 = a2;
            v274 = a2 + 128;
            v149 = v261(&v272);
          }
          v151 = JSC::ErrorInstance::create(v150, v149, &v271, 0, 0, 0, 2, 1);
          v158 = (JSC::Exception *)v151;
          if ((v151 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v151 & 0xFFFFFFFE) + 0x4C)))
          {
            v158 = (JSC::Exception *)JSC::Exception::create(v92, (JSC::VM *)v151, 0, v152, v153, v154, v155, v156);
          }
          JSC::VM::throwException((JSC::VM *)v92, (JSC::JSGlobalObject *)a2, v158, v157, v152, v153, v154, v155, v156);
          v159 = v271;
          v271 = 0;
          if (v159)
          {
            if (*(_DWORD *)v159 == 2)
            {
              WTF::StringImpl::~StringImpl(v159, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
              WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
            }
            else
            {
              *(_DWORD *)v159 -= 2;
            }
          }
        }
        LOBYTE(v96) = 0;
        v97 = 0;
LABEL_118:
        v134 = v275;
        v275 = 0;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2)
          {
            WTF::StringImpl::~StringImpl(v134, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
            WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
          }
          else
          {
            *(_DWORD *)v134 -= 2;
          }
        }
        goto LABEL_121;
      }
      *v132 += 2;
      goto LABEL_100;
    }
    v59 = *(_QWORD *)(a2 + 56);
    v60 = JSC::JSObject::get((unsigned int *)v9, a2, (unint64_t)v46, v34, v35, v36, v37, v38);
    v276 = (WTF::StringImpl *)v60;
    if (*(_DWORD *)(v59 + 80))
    {
      v130 = *(_DWORD *)(v59 + 80);
      if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
      if (*(_QWORD *)(v59 + 16))
      {
        v58 = 0;
        goto LABEL_60;
      }
    }
    if (v60 == 10)
    {
      v58 = 2;
      goto LABEL_60;
    }
    if ((v60 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v60 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v276, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v275);
      goto LABEL_49;
    }
    v89 = *(int **)(v60 + 8);
    if ((v89 & 1) != 0)
    {
      v89 = *JSC::JSRopeString::resolveRope(v60, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v61, v35, v36, v37, v38);
      if (!v89)
        goto LABEL_48;
    }
    else if (!v89)
    {
LABEL_48:
      v275 = (WTF::StringImpl *)v89;
LABEL_49:
      if (!*(_DWORD *)(v59 + 80))
        goto LABEL_50;
      v251 = *(_DWORD *)(v59 + 80);
      if ((v251 & 0x27) != 0 && (v251 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
      if (!*(_QWORD *)(v59 + 16))
      {
LABEL_50:
        if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"narrow", 6))
        {
          v90 = 0;
LABEL_56:
          v58 = *((_BYTE *)&v279 + 24 * v90);
          goto LABEL_57;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"short", 5))
        {
          v90 = 1;
          goto LABEL_56;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v275, (unint64_t)"long", 4))
        {
          v90 = 2;
          goto LABEL_56;
        }
        v106 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v106 = 0x3100000002;
        *(_QWORD *)(v106 + 8) = "style must be either \"narrow\", \"short\", or \"long\"";
        *(_DWORD *)(v106 + 16) = 4;
        v271 = (WTF::StringImpl *)v106;
        v107 = *(_QWORD *)(a2 + 128);
        v108 = *(JSC::Heap ***)(a2 + 56);
        if ((v107 & 1) != 0)
        {
          v259 = *(uint64_t (**)(uint64_t *))(v107 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v260 = (uint64_t *)(a2 - 16);
          else
            v260 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v272 = *v260;
          v273 = a2;
          v274 = a2 + 128;
          v107 = v259(&v272);
        }
        v109 = JSC::ErrorInstance::create(v108, v107, &v271, 0, 0, 0, 2, 1);
        v116 = (JSC::Exception *)v109;
        if ((v109 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x4C)))
        {
          v116 = (JSC::Exception *)JSC::Exception::create(v59, (JSC::VM *)v109, 0, v110, v111, v112, v113, v114);
        }
        JSC::VM::throwException((JSC::VM *)v59, (JSC::JSGlobalObject *)a2, v116, v115, v110, v111, v112, v113, v114);
        v117 = v271;
        v271 = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
          {
            WTF::StringImpl::~StringImpl(v117, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
            WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
          }
          else
          {
            *(_DWORD *)v117 -= 2;
          }
        }
      }
      v58 = 0;
LABEL_57:
      v91 = v275;
      v275 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
        {
          WTF::StringImpl::~StringImpl(v91, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          *(_DWORD *)v91 -= 2;
        }
      }
      goto LABEL_60;
    }
    *v89 += 2;
    goto LABEL_48;
  }
LABEL_23:
  if (v269)
  {
    v78 = v267;
    v79 = 8 * v269;
    do
    {
      v80 = *(WTF::StringImpl **)v78;
      *(_QWORD *)v78 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::~StringImpl(v80, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        else
        {
          *(_DWORD *)v80 -= 2;
        }
      }
      v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  v49 = v267;
  if (v267)
  {
    v267 = 0;
    v268 = 0;
    WTF::fastFree((unint64_t)v49, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t JSC::IntlDisplayNames::of(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  unint64_t v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  JSC::LanguageTagParser *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int16 *v44;
  unint64_t v45;
  unsigned __int16 *v46;
  int v47;
  int v48;
  UErrorCode v49;
  int *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  JSC::Heap **v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  JSC::Exception *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  WTF *v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  size_t v95;
  WTF *v96;
  size_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  WTF *v104;
  WTF *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  WTF *v116;
  WTF *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(WTF::StringImpl **);
  unsigned __int16 **v126;
  int8x16_t **v127;
  uint64_t v128;
  const void *v129;
  size_t v130;
  size_t v131;
  size_t v132;
  WTF *v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  _QWORD *v143;
  void *v144;
  int FieldDisplayName;
  int v146;
  int v147;
  unsigned __int16 *v148;
  WTF *v149;
  WTF *v150;
  unsigned int v151;
  unsigned int v152;
  WTF *v153;
  WTF *v154;
  uint64_t v155;
  int *v156;
  _WORD *v157;
  WTF *v158;
  WTF::StringImpl *v159;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned __int16 *v172;
  unsigned __int16 *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  WTF *v184;
  WTF *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  WTF *v196;
  WTF *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 *v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  uint64_t v214;
  WTF *v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  _BYTE v218[68];
  UErrorCode v219;
  WTF *v220;
  unint64_t v221;
  _BYTE v222[64];
  WTF::StringImpl *v223;
  JSC::VM *v224;
  unint64_t v225;
  WTF::StringImpl *v226;
  unint64_t v227;
  _QWORD v228[2];
  int v229;
  char v230;
  uint64_t v231;

  v11 = (unint64_t)a2;
  v231 = *MEMORY[0x1E0C80C00];
  v225 = a3;
  v13 = *((_QWORD *)a2 + 7);
  v224 = (JSC::VM *)v13;
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v225, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, (int **)&v223);
    goto LABEL_7;
  }
  v14 = *(WTF::StringImpl **)(a3 + 8);
  if ((v14 & 1) != 0)
  {
    v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, a2, a3, a4, a9, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v14)
LABEL_5:
    *(_DWORD *)v14 += 2;
LABEL_6:
  v223 = v14;
LABEL_7:
  if (*(_DWORD *)(v13 + 80))
  {
    v100 = *(_DWORD *)(v13 + 80);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
    {
      v51 = 0;
      goto LABEL_244;
    }
  }
  v220 = (WTF *)v222;
  v221 = 32;
  v219 = U_ZERO_ERROR;
  switch(*(_BYTE *)(a1 + 41))
  {
    case 0:
      v15 = v223;
      if (v223)
      {
        v16 = *((_QWORD *)v223 + 1);
        v15 = *((_DWORD *)v223 + 1);
        v17 = ((unint64_t)*((unsigned int *)v223 + 4) >> 2) & 1;
      }
      else
      {
        v16 = 0;
        v17 = 1;
      }
      v18 = (JSC::LanguageTagParser *)JSC::LanguageTagParser::LanguageTagParser((uint64_t)&v226, v16, v15 | (v17 << 32), *(double *)a9.i64, a10, a11);
      if (!JSC::LanguageTagParser::parseUnicodeLanguageId(v18) || v229 != (_DWORD)v227 || !v230)
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x1D00000002;
        v20 = "argument is not a language id";
        goto LABEL_88;
      }
      JSC::IntlDisplayNames::of(JSC::JSGlobalObject *,JSC::JSValue)const::$_0::operator()((int8x16_t **)&v226, *(unsigned __int8 *)(a1 + 41), (WTF::String *)&v223);
      v46 = (unsigned __int16 *)v226;
      HIDWORD(v221) = v221;
      LODWORD(v226) = 0;
      v89 = uldn_localeDisplayName();
      v48 = v89;
      v49 = (int)v226;
      if ((int)v226 <= 0)
        goto LABEL_116;
      if ((_DWORD)v226 != 15)
        goto LABEL_117;
      LODWORD(v226) = 0;
      if (v221 < (unint64_t)v89)
      {
        v181 = v221 + ((unint64_t)v221 >> 2);
        if (v181 >= 0x10)
          v182 = v181 + 1;
        else
          v182 = 16;
        if (v182 <= v89)
          v183 = v89;
        else
          v183 = v182;
        v184 = v220;
        if (v183 < 0x21)
        {
          v220 = (WTF *)v222;
          LODWORD(v221) = 32;
          v185 = (WTF *)v222;
        }
        else
        {
          if (v183 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198956960);
          }
          v185 = (WTF *)WTF::fastMalloc((WTF *)(2 * v183));
          LODWORD(v221) = v183;
          v220 = v185;
        }
        memcpy(v185, v184, 2 * HIDWORD(v221));
        if (v222 != (_BYTE *)v184 && v184)
        {
          if (v220 == v184)
          {
            v220 = 0;
            LODWORD(v221) = 0;
          }
          WTF::fastFree((unint64_t)v184, v186, v187, v188, v189, v190, v191, v192);
        }
      }
      HIDWORD(v221) = v48;
      uldn_localeDisplayName();
      goto LABEL_86;
    case 1:
      v43 = v223;
      if (v223)
      {
        v44 = (unsigned __int16 *)*((_QWORD *)v223 + 1);
        v43 = *((_DWORD *)v223 + 1);
        v45 = ((unint64_t)*((unsigned int *)v223 + 4) >> 2) & 1;
      }
      else
      {
        v44 = 0;
        v45 = 1;
      }
      if (!JSC::isUnicodeRegionSubtag(v44, (unsigned __int16 *)(v43 | (v45 << 32))))
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x1F00000002;
        v20 = "argument is not a region subtag";
        goto LABEL_88;
      }
      JSC::IntlDisplayNames::of(JSC::JSGlobalObject *,JSC::JSValue)const::$_0::operator()((int8x16_t **)&v226, *(unsigned __int8 *)(a1 + 41), (WTF::String *)&v223);
      v46 = (unsigned __int16 *)v226;
      HIDWORD(v221) = v221;
      LODWORD(v226) = 0;
      v47 = uldn_regionDisplayName();
      v48 = v47;
      v49 = (int)v226;
      if ((int)v226 <= 0)
        goto LABEL_116;
      if ((_DWORD)v226 != 15)
        goto LABEL_117;
      LODWORD(v226) = 0;
      if (v221 < (unint64_t)v47)
      {
        v101 = v221 + ((unint64_t)v221 >> 2);
        if (v101 >= 0x10)
          v102 = v101 + 1;
        else
          v102 = 16;
        if (v102 <= v47)
          v103 = v47;
        else
          v103 = v102;
        v104 = v220;
        if (v103 < 0x21)
        {
          v220 = (WTF *)v222;
          LODWORD(v221) = 32;
          v105 = (WTF *)v222;
        }
        else
        {
          if (v103 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198956948);
          }
          v105 = (WTF *)WTF::fastMalloc((WTF *)(2 * v103));
          LODWORD(v221) = v103;
          v220 = v105;
        }
        memcpy(v105, v104, 2 * HIDWORD(v221));
        if (v222 != (_BYTE *)v104 && v104)
        {
          if (v220 == v104)
          {
            v220 = 0;
            LODWORD(v221) = 0;
          }
          WTF::fastFree((unint64_t)v104, v106, v107, v108, v109, v110, v111, v112);
        }
      }
      HIDWORD(v221) = v48;
      uldn_regionDisplayName();
      goto LABEL_86;
    case 2:
      if (!v223
        || (v29 = *((_DWORD *)v223 + 4),
            v30 = *((unsigned int *)v223 + 1),
            v226 = (WTF::StringImpl *)*((_QWORD *)v223 + 1),
            v227 = v30 | ((unint64_t)((v29 >> 2) & 1) << 32),
            (_DWORD)v30 != 4)
        || !WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>((unsigned __int16 **)&v226))
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x1F00000002;
        v20 = "argument is not a script subtag";
        goto LABEL_88;
      }
      JSC::IntlDisplayNames::of(JSC::JSGlobalObject *,JSC::JSValue)const::$_0::operator()((int8x16_t **)&v226, *(unsigned __int8 *)(a1 + 41), (WTF::String *)&v223);
      v46 = (unsigned __int16 *)v226;
      HIDWORD(v221) = v221;
      LODWORD(v226) = 0;
      v90 = uldn_scriptDisplayName();
      v48 = v90;
      v49 = (int)v226;
      if ((int)v226 <= 0)
        goto LABEL_116;
      if ((_DWORD)v226 != 15)
        goto LABEL_117;
      LODWORD(v226) = 0;
      if (v221 < (unint64_t)v90)
      {
        v193 = v221 + ((unint64_t)v221 >> 2);
        if (v193 >= 0x10)
          v194 = v193 + 1;
        else
          v194 = 16;
        if (v194 <= v90)
          v195 = v90;
        else
          v195 = v194;
        v196 = v220;
        if (v195 < 0x21)
        {
          v220 = (WTF *)v222;
          LODWORD(v221) = 32;
          v197 = (WTF *)v222;
        }
        else
        {
          if (v195 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198956968);
          }
          v197 = (WTF *)WTF::fastMalloc((WTF *)(2 * v195));
          LODWORD(v221) = v195;
          v220 = v197;
        }
        memcpy(v197, v196, 2 * HIDWORD(v221));
        if (v222 != (_BYTE *)v196 && v196)
        {
          if (v220 == v196)
          {
            v220 = 0;
            LODWORD(v221) = 0;
          }
          WTF::fastFree((unint64_t)v196, v198, v199, v200, v201, v202, v203, v204);
        }
      }
      HIDWORD(v221) = v48;
      uldn_scriptDisplayName();
      goto LABEL_86;
    case 3:
      if (!v223
        || (v31 = *((_DWORD *)v223 + 4),
            v32 = *((unsigned int *)v223 + 1),
            v226 = (WTF::StringImpl *)*((_QWORD *)v223 + 1),
            v227 = v32 | ((unint64_t)((v31 >> 2) & 1) << 32),
            (_DWORD)v32 != 3)
        || !WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>((unsigned __int16 **)&v226))
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x2B00000002;
        v20 = "argument is not a well-formed currency code";
        goto LABEL_88;
      }
      if (!v223)
      {
        v34 = 0;
        LODWORD(v226) = 0;
        goto LABEL_40;
      }
      v33 = *((_DWORD *)v223 + 1);
      if (!v33)
      {
        LOWORD(v226) = 0;
LABEL_39:
        v34 = 0;
        WORD1(v226) = 0;
        goto LABEL_40;
      }
      v205 = (unsigned __int8 *)*((_QWORD *)v223 + 1);
      if ((*((_BYTE *)v223 + 16) & 4) != 0)
      {
        v206 = *v205;
        if ((v206 - 97) >= 0x1A)
          v207 = 255;
        else
          v207 = 223;
        LOWORD(v226) = v207 & v206;
        if (v33 <= 1)
          goto LABEL_39;
        v208 = v205[1];
        if ((v208 - 97) >= 0x1A)
          v209 = 255;
        else
          v209 = 223;
        WORD1(v226) = v209 & v208;
        if (v33 == 2)
          goto LABEL_313;
        v34 = v205[2];
      }
      else
      {
        v210 = *(unsigned __int16 *)v205;
        if ((v210 - 97) >= 0x1A)
          v211 = -1;
        else
          v211 = -33;
        LOWORD(v226) = v211 & v210;
        if (v33 <= 1)
          goto LABEL_39;
        v212 = *((unsigned __int16 *)v205 + 1);
        if ((v212 - 97) >= 0x1A)
          v213 = -1;
        else
          v213 = -33;
        WORD1(v226) = v213 & v212;
        if (v33 == 2)
        {
LABEL_313:
          v34 = 0;
          goto LABEL_40;
        }
        v34 = *((unsigned __int16 *)v205 + 2);
      }
LABEL_40:
      if ((v34 - 97) >= 0x1A)
        v35 = -1;
      else
        v35 = -33;
      HIDWORD(v226) = (unsigned __int16)(v35 & v34);
      LODWORD(v215) = 0;
      v218[67] = 0;
      if (ucurr_getName())
      {
        v98 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v98 = 0;
      }
      v216 = v98;
      v51 = JSC::jsString(v13, (JSC::VM *)&v216, v37, v38, v39, v40, v41, v42);
      v99 = v216;
      v216 = 0;
      if (!v99)
        goto LABEL_241;
      goto LABEL_239;
    case 4:
      if (!v223)
      {
        LODWORD(v21) = 0;
        v60 = 0;
LABEL_80:
        v59 = v60 - v21 - 3;
        goto LABEL_81;
      }
      v21 = *((_QWORD *)v223 + 1);
      v22 = *((unsigned int *)v223 + 1);
      if ((*((_BYTE *)v223 + 16) & 4) != 0)
      {
        if ((_DWORD)v22)
        {
          while (1)
          {
            v53 = 0;
            while (1)
            {
              v54 = *(unsigned __int8 *)(v21 + v53);
              if ((v54 - 48) >= 0xA && (v54 | 0x20u) - 97 > 0x19)
                break;
              if (v22 == ++v53)
              {
                v60 = v21 + v22;
                goto LABEL_80;
              }
            }
            if (v54 != 45 || (v53 - 3) >= 6)
              break;
            v57 = v22 - 1;
            v22 += ~v53;
            v21 += v53 + 1;
            if (v57 == v53)
              goto LABEL_78;
          }
LABEL_87:
          v19 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v19 = 0x1F00000002;
          v20 = "argument is not a calendar code";
          goto LABEL_88;
        }
LABEL_78:
        v60 = v21;
        goto LABEL_80;
      }
      if ((_DWORD)v22)
      {
        do
        {
          v23 = 0;
          v24 = -2;
          while (1)
          {
            v25 = *(unsigned __int16 *)(v21 + 2 * v23);
            if ((v25 - 48) >= 0xA && (v25 | 0x20u) - 97 > 0x19)
              break;
            v24 -= 2;
            if (v22 == ++v23)
            {
              v58 = v21 + 2 * v22;
              goto LABEL_79;
            }
          }
          if (v25 != 45 || (v23 - 3) >= 6)
            goto LABEL_87;
          v28 = v22 - 1;
          v22 += ~v23;
          v21 -= v24;
        }
        while (v28 != v23);
      }
      v58 = v21;
LABEL_79:
      v59 = ((unint64_t)(v58 - v21) >> 1) - 3;
LABEL_81:
      if (v59 >= 6)
        goto LABEL_87;
      JSC::IntlDisplayNames::of(JSC::JSGlobalObject *,JSC::JSValue)const::$_0::operator()((int8x16_t **)&v226, 4, (WTF::String *)&v223);
      v46 = (unsigned __int16 *)v226;
      HIDWORD(v221) = v221;
      LODWORD(v226) = 0;
      v61 = uldn_keyValueDisplayName();
      v48 = v61;
      v49 = (int)v226;
      if ((int)v226 <= 0)
      {
LABEL_116:
        HIDWORD(v221) = v48;
      }
      else if ((_DWORD)v226 == 15)
      {
        LODWORD(v226) = 0;
        if (v221 < (unint64_t)v61)
        {
          v113 = v221 + ((unint64_t)v221 >> 2);
          if (v113 >= 0x10)
            v114 = v113 + 1;
          else
            v114 = 16;
          if (v114 <= v61)
            v115 = v61;
          else
            v115 = v114;
          v116 = v220;
          if (v115 < 0x21)
          {
            v220 = (WTF *)v222;
            LODWORD(v221) = 32;
            v117 = (WTF *)v222;
          }
          else
          {
            if (v115 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198956950);
            }
            v117 = (WTF *)WTF::fastMalloc((WTF *)(2 * v115));
            LODWORD(v221) = v115;
            v220 = v117;
          }
          memcpy(v117, v116, 2 * HIDWORD(v221));
          if (v222 != (_BYTE *)v116 && v116)
          {
            if (v220 == v116)
            {
              v220 = 0;
              LODWORD(v221) = 0;
            }
            WTF::fastFree((unint64_t)v116, v118, v119, v120, v121, v122, v123, v124);
          }
        }
        HIDWORD(v221) = v48;
        uldn_keyValueDisplayName();
LABEL_86:
        v49 = (int)v226;
      }
LABEL_117:
      v219 = v49;
      if (v49 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        if (v49 != U_ILLEGAL_ARGUMENT_ERROR)
        {
          v51 = JSC::throwTypeError(v11, &v224, (uint64_t)"Failed to query a display name.", 32);
          goto LABEL_127;
        }
        if (*(_BYTE *)(a1 + 42) == 1)
        {
          v51 = 10;
          goto LABEL_127;
        }
        if (v46)
        {
          v95 = *((_QWORD *)v46 + 1);
          if (v95)
          {
            if (v95 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x1989568E0);
            }
            v50 = (int *)WTF::fastCompactMalloc((WTF *)(v95 + 20));
            v93 = v50 + 5;
            *v50 = 2;
            v50[1] = v95;
            *((_QWORD *)v50 + 1) = v50 + 5;
            v50[4] = 4;
            if (v95 == 1)
            {
              *v93 = *((_BYTE *)v46 + 16);
              goto LABEL_55;
            }
            v96 = (WTF *)(v46 + 8);
            v97 = v95;
            goto LABEL_140;
          }
LABEL_54:
          v50 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_55;
        }
LABEL_137:
        v50 = 0;
        goto LABEL_55;
      }
      v91 = v220;
      if (!v220)
        goto LABEL_137;
      v92 = HIDWORD(v221);
      if (!HIDWORD(v221))
        goto LABEL_54;
      if (HIDWORD(v221) > 0x7FFFFFEF)
      {
        __break(0xC471u);
        JUMPOUT(0x1989568D0);
      }
      v50 = (int *)WTF::fastCompactMalloc((WTF *)(2 * HIDWORD(v221) + 20));
      v93 = v50 + 5;
      *v50 = 2;
      v50[1] = v92;
      *((_QWORD *)v50 + 1) = v50 + 5;
      v50[4] = 0;
      if ((_DWORD)v92 == 1)
      {
        *(_WORD *)v93 = *(_WORD *)v91;
        goto LABEL_55;
      }
      v96 = v91;
      v97 = 2 * v92;
LABEL_140:
      memcpy(v93, v96, v97);
LABEL_55:
      v226 = (WTF::StringImpl *)v50;
      v51 = JSC::jsString(v13, (JSC::VM *)&v226, a3, a4, a5, a6, a7, a8);
      v52 = v226;
      v226 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
LABEL_127:
      if (v46)
      {
        if (*(_DWORD *)v46 != 1)
        {
          --*(_DWORD *)v46;
          goto LABEL_241;
        }
        v94 = (unint64_t)v46;
LABEL_131:
        WTF::fastFree(v94, a2, a3, a4, a5, a6, a7, a8);
      }
LABEL_241:
      v158 = v220;
      if (v222 != (_BYTE *)v220 && v220)
      {
        v220 = 0;
        LODWORD(v221) = 0;
        WTF::fastFree((unint64_t)v158, a2, a3, a4, a5, a6, a7, a8);
      }
LABEL_244:
      v159 = v223;
      v223 = 0;
      if (v159)
      {
        if (*(_DWORD *)v159 == 2)
        {
          WTF::StringImpl::~StringImpl(v159, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
        }
        else
        {
          *(_DWORD *)v159 -= 2;
        }
      }
      return v51;
    case 5:
      if (!WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"era", 3)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"year", 4)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"quarter", 7)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"month", 5)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"weekOfYear", 10)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"weekday", 7)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"day", 3)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"dayPeriod", 9)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"hour", 4)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"minute", 6)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"second", 6)
        && !WTF::equalInternal<unsigned char>((uint64_t)v223, (unint64_t)"timeZoneName", 12))
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x2400000002;
        v20 = "argument is not a dateTimeField code";
LABEL_88:
        *(_QWORD *)(v19 + 8) = v20;
        *(_DWORD *)(v19 + 16) = 4;
        v216 = (WTF::StringImpl *)v19;
        v62 = *(_QWORD *)(v11 + 128);
        v63 = *(JSC::Heap ***)(v11 + 56);
        if ((v62 & 1) != 0)
        {
          v125 = *(uint64_t (**)(WTF::StringImpl **))(v62 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v11 & 8) != 0)
            v126 = (unsigned __int16 **)(v11 - 16);
          else
            v126 = (unsigned __int16 **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
          v226 = (WTF::StringImpl *)*v126;
          v227 = v11;
          v228[0] = v11 + 128;
          v62 = v125(&v226);
        }
        v64 = JSC::ErrorInstance::create(v63, v62, &v216, 0, 0, 0, 2, 1);
        v71 = (JSC::Exception *)v64;
        if ((v64 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v64 & 0xFFFFFFFE) + 0x4C)))
        {
          v71 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)v64, 0, v65, v66, v67, v68, v69);
        }
        JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)v11, v71, v70, v65, v66, v67, v68, v69);
        v72 = v216;
        v216 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
        v51 = 0;
        goto LABEL_241;
      }
      v127 = *(int8x16_t ***)(v13 + 93144);
      v128 = *(_QWORD *)(a1 + 32);
      v215 = 0;
      if (v128)
      {
        v129 = (const void *)(v128 + 16);
        v130 = strlen((const char *)(v128 + 16));
        v131 = v130 + 16;
        if (v130 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198956864);
        }
        v132 = v130;
        v133 = (WTF *)(v130 + 17);
        if (v131 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19895686CLL);
        }
        v134 = (_QWORD *)WTF::fastMalloc(v133);
        *(_DWORD *)v134 = 1;
        v134[1] = v132;
        v142 = v215;
        v215 = (WTF *)v134;
        if (v142)
        {
          if (*(_DWORD *)v142 == 1)
          {
            WTF::fastFree((unint64_t)v142, v135, v136, v137, v138, v139, v140, v141);
            v134 = v215;
          }
          else
          {
            --*(_DWORD *)v142;
          }
        }
        v143 = v134 + 2;
        memcpy(v134 + 2, v129, v132);
        *((_BYTE *)v143 + v132) = 0;
      }
      JSC::IntlCache::getSharedPatternGenerator(v127, (int8x16_t **)&v215, &v219);
      if (v219 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        v216 = (WTF::StringImpl *)v218;
        v217 = 32;
        goto LABEL_215;
      }
      v226 = (WTF::StringImpl *)v228;
      v227 = 0x2000000020;
      LODWORD(v216) = 0;
      FieldDisplayName = udatpg_getFieldDisplayName();
      v146 = FieldDisplayName;
      if ((int)v216 > 0)
      {
        if ((_DWORD)v216 == 15)
        {
          LODWORD(v216) = 0;
          if (v227 < (unint64_t)FieldDisplayName)
          {
            v169 = v227 + ((unint64_t)v227 >> 2);
            if (v169 >= 0x10)
              v170 = v169 + 1;
            else
              v170 = 16;
            if (v170 <= FieldDisplayName)
              v171 = FieldDisplayName;
            else
              v171 = v170;
            v172 = (unsigned __int16 *)v226;
            v214 = HIDWORD(v227);
            if (v171 < 0x21)
            {
              v226 = (WTF::StringImpl *)v228;
              LODWORD(v227) = 32;
              v173 = (unsigned __int16 *)v228;
            }
            else
            {
              if (v171 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x198956958);
              }
              v173 = (unsigned __int16 *)WTF::fastMalloc((WTF *)(2 * v171));
              LODWORD(v227) = v171;
              v226 = (WTF::StringImpl *)v173;
            }
            memcpy(v173, v172, 2 * v214);
            if (v228 != (_QWORD *)v172 && v172)
            {
              if (v226 == (WTF::StringImpl *)v172)
              {
                v226 = 0;
                LODWORD(v227) = 0;
              }
              WTF::fastFree((unint64_t)v172, v174, v175, v176, v177, v178, v179, v180);
            }
          }
          HIDWORD(v227) = v146;
          udatpg_getFieldDisplayName();
          v219 = (int)v216;
          if ((int)v216 <= 0)
            goto LABEL_207;
        }
        else
        {
          v219 = (int)v216;
        }
        v216 = (WTF::StringImpl *)v218;
        v217 = 32;
        v148 = (unsigned __int16 *)v226;
        if (v228 != (_QWORD *)v226 && v226)
        {
          v226 = 0;
          LODWORD(v227) = 0;
          WTF::fastFree((unint64_t)v148, v144, a3, a4, a5, a6, a7, a8);
        }
LABEL_215:
        v149 = v220;
        if (v220 != (WTF *)v222)
        {
          if (v220)
          {
            v220 = 0;
            LODWORD(v221) = 0;
            WTF::fastFree((unint64_t)v149, v144, a3, a4, a5, a6, a7, a8);
          }
          v220 = (WTF *)v222;
        }
        v150 = v216;
        a2 = (JSC::JSGlobalObject *)v218;
        if (v216 == (WTF::StringImpl *)v218)
        {
          v152 = HIDWORD(v217);
          memcpy(v222, v218, 2 * HIDWORD(v217));
          v151 = v217;
        }
        else
        {
          v216 = (WTF::StringImpl *)v218;
          v220 = v150;
          v151 = v217;
          v152 = HIDWORD(v217);
          LODWORD(v217) = 32;
        }
        HIDWORD(v217) = 0;
        v221 = __PAIR64__(v152, v151);
        v153 = v215;
        v215 = 0;
        if (v153)
        {
          if (*(_DWORD *)v153 == 1)
            WTF::fastFree((unint64_t)v153, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v153;
        }
        if (v219 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          if (*(_BYTE *)(a1 + 42) == 1)
            v51 = 10;
          else
            v51 = JSC::jsString(v13, (JSC::VM *)&v223, a3, a4, a5, a6, a7, a8);
          goto LABEL_241;
        }
        v154 = v220;
        if (v220)
        {
          v155 = HIDWORD(v221);
          if (HIDWORD(v221))
          {
            if (HIDWORD(v221) > 0x7FFFFFEF)
            {
              __break(0xC471u);
              JUMPOUT(0x1989568D8);
            }
            v156 = (int *)WTF::fastCompactMalloc((WTF *)(2 * HIDWORD(v221) + 20));
            v157 = v156 + 5;
            *v156 = 2;
            v156[1] = v155;
            *((_QWORD *)v156 + 1) = v156 + 5;
            v156[4] = 0;
            if ((_DWORD)v155 == 1)
              *v157 = *(_WORD *)v154;
            else
              memcpy(v157, v154, 2 * v155);
          }
          else
          {
            v156 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
        }
        else
        {
          v156 = 0;
        }
        v226 = (WTF::StringImpl *)v156;
        v51 = JSC::jsString(v13, (JSC::VM *)&v226, a3, a4, a5, a6, a7, a8);
        v99 = v226;
        v226 = 0;
        if (!v99)
          goto LABEL_241;
LABEL_239:
        if (*(_DWORD *)v99 != 2)
        {
          *(_DWORD *)v99 -= 2;
          goto LABEL_241;
        }
        WTF::StringImpl::~StringImpl(v99, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_131;
      }
      HIDWORD(v227) = FieldDisplayName;
      v219 = (int)v216;
LABEL_207:
      v216 = (WTF::StringImpl *)v218;
      LODWORD(v217) = 32;
      if (v226 == (WTF::StringImpl *)v228)
      {
        v147 = HIDWORD(v227);
        memcpy(v218, v228, 2 * HIDWORD(v227));
      }
      else
      {
        v216 = v226;
        v147 = HIDWORD(v227);
        LODWORD(v217) = v227;
      }
      HIDWORD(v217) = v147;
      goto LABEL_215;
    default:
      v46 = 0;
      goto LABEL_54;
  }
}

void JSC::IntlDisplayNames::of(JSC::JSGlobalObject *,JSC::JSValue)const::$_0::operator()(int8x16_t **a1, int a2, WTF::String *this)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  _BYTE *v19;
  int8x16_t *v20;
  int v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  char v74;
  int8x16_t *v75;

  switch(a2)
  {
    case 0:
      WTF::String::ascii(this, &v75);
      JSC::canonicalizeUnicodeLocaleID((JSC *)&v75, &v73);
      WTF::String::ascii((WTF::String *)&v73, a1);
      v11 = v73;
      v73 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v12 = v75;
      v75 = 0;
      if (v12)
      {
        if (v12->i32[0] == 1)
          goto LABEL_40;
        --v12->i32[0];
      }
      break;
    case 1:
      WTF::String::ascii(this, a1);
      v13 = WTF::CString::mutableData((WTF::CString *)a1);
      v14 = *a1;
      if (*a1)
      {
        v15 = 0;
        v16 = 1;
        do
        {
          if (v14->i64[1] <= v15)
            break;
          v17 = *(unsigned __int8 *)(v13 + v15);
          v18 = (v17 - 97) >= 0x1A ? -1 : -33;
          *(_BYTE *)(v13 + v15) = v18 & v17;
          v15 = v16;
          v14 = *a1;
          ++v16;
        }
        while (*a1);
      }
      break;
    case 2:
      WTF::String::ascii(this, a1);
      v19 = (_BYTE *)WTF::CString::mutableData((WTF::CString *)a1);
      v20 = *a1;
      if (*a1)
      {
        if (!v20->i64[1]
          || ((v21 = *v19, (v21 - 97) >= 0x1A) ? (v22 = -1) : (v22 = -33),
              *v19 = v22 & v21,
              (v20 = *a1) != 0))
        {
          v23 = 2;
          v24 = 1;
          do
          {
            if (v20->i64[1] <= v24)
              break;
            v19[v24] = WTF::asciiCaseFoldTable[v19[v24]];
            v24 = v23;
            v20 = *a1;
            ++v23;
          }
          while (*a1);
        }
      }
      break;
    case 4:
      if (*(_QWORD *)this)
      {
        WTF::StringImpl::convertToASCIILowercase(*(_BYTE **)this, (uint64_t *)&v73);
        v25 = v73;
      }
      else
      {
        v25 = 0;
      }
      v75 = (int8x16_t *)v25;
      JSC::mapBCP47ToICUCalendarKeyword((JSC *)&v75, &v73);
      if (v74)
      {
        v33 = v73;
        v73 = 0;
        v75 = (int8x16_t *)v33;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v26, v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
            if (v74)
            {
              v64 = v73;
              v73 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                {
                  WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
                  WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
                }
                else
                {
                  *(_DWORD *)v64 -= 2;
                }
              }
            }
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
      else
      {
        v33 = v25;
      }
      WTF::String::ascii((WTF::String *)&v75, a1);
      v75 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_40:
          WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      break;
    default:
      *a1 = 0;
      break;
  }
}

unint64_t JSC::IntlDisplayNames::resolvedOptions(JSC::IntlDisplayNames *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  int v75;
  const char *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  JSC::JSGlobalObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v129;
  uint64_t Slow;
  WTF::StringImpl *v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12 < *(_QWORD *)(v10 + 32))
    {
LABEL_3:
      *(_QWORD *)(v10 + 24) = v12 + v11;
      goto LABEL_4;
    }
    v12 = *(_QWORD *)(v10 + 40);
    if ((v12 & 1) == 0)
    {
      v123 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = v12 + HIDWORD(v123);
      *(_QWORD *)(v10 + 40) = v12 + (int)v123;
      goto LABEL_3;
    }
    v124 = a2;
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v125, v126, v127);
    a2 = v124;
    v12 = SlowCase;
  }
  else
  {
    v129 = a2;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    a2 = v129;
    v12 = Slow;
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198957088);
    }
  }
LABEL_4:
  *(_DWORD *)v12 = 0;
  *(_DWORD *)v12 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v12 + 4) = 16783360;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v13 = v9 + 41952;
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
  v15 = JSC::jsString((JSC *)v9, (JSC::IntlDisplayNames *)((char *)this + 24), a3, a4, a5, a6, a7, a8);
  v132 = 0;
  v133 = v12;
  v134 = -1;
  v16.n128_u64[0] = 0x100000001000000;
  v135 = 0x1000000;
  v136 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v14, v15, 0, (uint64_t)&v132, v17, v18, v16);
  v25 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2384);
  v27 = *((char *)this + 40);
  if (v27 <= 2)
  {
    v28 = off_1E359B680[v27];
    v29 = 6 - v27;
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v25 = 2;
    *(_DWORD *)(v25 + 4) = v29;
    *(_QWORD *)(v25 + 8) = v28;
    *(_DWORD *)(v25 + 16) = 4;
  }
  v131 = (WTF::StringImpl *)v25;
  v30 = JSC::jsNontrivialString(v9, (JSC::VM *)&v131, v19, v20, v21, v22, v23, v24);
  v132 = 0;
  v133 = v12;
  v134 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v135 = 0x1000000;
  v136 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v26, v30, 0, (uint64_t)&v132, v32, v33, v31);
  v41 = v131;
  v131 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)v13 + 2560);
  v43 = *((char *)this + 41);
  if (v43 > 5)
  {
    v46 = 0;
  }
  else
  {
    v44 = off_1E359B698[v43];
    v45 = dword_199157AFC[v43];
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v46 = 2;
    *(_DWORD *)(v46 + 4) = v45;
    *(_QWORD *)(v46 + 8) = v44;
    *(_DWORD *)(v46 + 16) = 4;
  }
  v131 = (WTF::StringImpl *)v46;
  v47 = JSC::jsNontrivialString(v9, (JSC::VM *)&v131, v35, v36, v37, v38, v39, v40);
  v132 = 0;
  v133 = v12;
  v134 = -1;
  v48.n128_u64[0] = 0x100000001000000;
  v135 = 0x1000000;
  v136 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v42, v47, 0, (uint64_t)&v132, v49, v50, v48);
  v58 = v131;
  v131 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = *(_QWORD *)(*(_QWORD *)v13 + 1296);
  if (!*((_BYTE *)this + 42))
  {
    v60 = "code";
    goto LABEL_21;
  }
  if (*((_BYTE *)this + 42) == 1)
  {
    v60 = "none";
LABEL_21:
    v61 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v61 = 0x400000002;
    *(_QWORD *)(v61 + 8) = v60;
    *(_DWORD *)(v61 + 16) = 4;
    goto LABEL_23;
  }
  v61 = 0;
LABEL_23:
  v131 = (WTF::StringImpl *)v61;
  v62 = JSC::jsNontrivialString(v9, (JSC::VM *)&v131, v52, v53, v54, v55, v56, v57);
  v132 = 0;
  v133 = v12;
  v134 = -1;
  v63.n128_u64[0] = 0x100000001000000;
  v135 = 0x1000000;
  v136 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v59, v62, 0, (uint64_t)&v132, v64, v65, v63);
  v73 = v131;
  v131 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  if (!*((_BYTE *)this + 41))
  {
    v74 = *(_QWORD *)(*(_QWORD *)v13 + 1744);
    if (*((_BYTE *)this + 43))
    {
      if (*((_BYTE *)this + 43) != 1)
      {
        v101 = 0;
LABEL_36:
        v131 = (WTF::StringImpl *)v101;
        v102 = JSC::jsNontrivialString(v9, (JSC::VM *)&v131, v67, v68, v69, v70, v71, v72);
        v132 = 0;
        v133 = v12;
        v134 = -1;
        v103.n128_u64[0] = 0x100000001000000;
        v135 = 0x1000000;
        v136 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v74, v102, 0, (uint64_t)&v132, v104, v105, v103);
        v113 = v131;
        v131 = 0;
        if (v113)
        {
          if (*(_DWORD *)v113 == 2)
          {
            WTF::StringImpl::~StringImpl(v113, v106, v107, v108, v109, v110, v111, v112);
            WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
          }
          else
          {
            *(_DWORD *)v113 -= 2;
          }
        }
        return v12;
      }
      v75 = 8;
      v76 = "standard";
    }
    else
    {
      v75 = 7;
      v76 = "dialect";
    }
    v101 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v101 = 2;
    *(_DWORD *)(v101 + 4) = v75;
    *(_QWORD *)(v101 + 8) = v76;
    *(_DWORD *)(v101 + 16) = 4;
    goto LABEL_36;
  }
  return v12;
}

uint64_t JSC::compareASCIIWithUCADUCET<unsigned char,char16_t>(uint8x8_t *a1, unint64_t a2, int16x8_t *a3, unint64_t a4)
{
  uint16x8_t v4;
  unsigned int v5;
  uint64_t v6;
  uint16x8_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;

  if (a2 != a4)
    goto LABEL_20;
  if (a2 < 8)
  {
    if (a2 < 4)
    {
      if (a2 < 2)
      {
        if ((_DWORD)a2 == 1 && a3->i16[0] != a1->u8[0])
          goto LABEL_20;
      }
      else if (((a1->u16[0] | (a1->u16[0] << 8)) & 0xFF00FF) != a3->i32[0]
             || ((*(unsigned __int16 *)((char *)a1->u16 + (a2 & 1)) | (*(unsigned __int16 *)((char *)a1->u16 + (a2 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)a3->i32 + 2 * (a2 & 1)))
      {
        goto LABEL_20;
      }
    }
    else
    {
      v10 = (a1->u32[0] | ((unint64_t)a1->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v11 = (*(unsigned int *)((char *)a1->u32 + (a2 & 3)) | ((unint64_t)*(unsigned int *)((char *)a1->u32
                                                                                                + (a2 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v12 = (v11 | (v11 << 8)) & 0xFF00FF00FF00FFLL;
      if (((v10 | (v10 << 8)) & 0xFF00FF00FF00FFLL) != a3->i64[0]
        || v12 != *(uint64_t *)((char *)a3->i64 + 2 * (a2 & 3)))
      {
        goto LABEL_20;
      }
    }
    LOBYTE(v8) = 0;
    v9 = 0;
    goto LABEL_54;
  }
  v4 = (uint16x8_t)vceqq_s16(*a3, (int16x8_t)vmovl_u8(*a1));
  v4.i16[0] = vminvq_u16(v4);
  if (v4.i32[0])
  {
    v5 = a2 & 7;
    v6 = 0x100000000;
    while (1)
    {
      v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a3 + 2 * v5), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + v5)));
      v7.i16[0] = vminvq_u16(v7);
      if (!v7.i32[0])
        break;
      LOBYTE(v8) = 0;
      v9 = 0;
      v5 += 8;
      if (v5 >= a2)
        return v6 | v9 | v8;
    }
  }
LABEL_20:
  if (a4 >= a2)
    v15 = a2;
  else
    v15 = a4;
  if (v15)
  {
    v16 = 0;
    v17 = 1;
    while (1)
    {
      LOBYTE(v8) = 0;
      v6 = 0;
      v18 = a1->u8[v16];
      v19 = JSC::ducetLevel1Weights[v18];
      if (!JSC::ducetLevel1Weights[v18])
      {
        v9 = 0;
        return v6 | v9 | v8;
      }
      v20 = a3->u16[v16];
      v9 = 0;
      if (v20 > 0x7F)
        return v6 | v9 | v8;
      LODWORD(v8) = JSC::ducetLevel1Weights[v20];
      if (!JSC::ducetLevel1Weights[v20])
        goto LABEL_47;
      if (v19 != (_DWORD)v8)
        break;
      v16 = v17;
      v25 = v15 > v17++;
      if (!v25)
        goto LABEL_30;
    }
    if (a4 <= v16 + 1 || a3->u16[v16 + 1] <= 0xFFu)
    {
      v25 = v19 > v8;
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_30:
  if (a2 == a4)
  {
    if (a2)
    {
      while (1)
      {
        v22 = a1->u8[0];
        a1 = (uint8x8_t *)((char *)a1 + 1);
        v21 = v22;
        v23 = a3->u16[0];
        a3 = (int16x8_t *)((char *)a3 + 2);
        LODWORD(v21) = JSC::ducetLevel3Weights[v21];
        v24 = JSC::ducetLevel3Weights[v23];
        v25 = v21 > v24;
        if ((_DWORD)v21 != v24)
          break;
        if (!--a2)
          goto LABEL_34;
      }
LABEL_40:
      if (v25)
        LODWORD(v8) = 1;
      else
        LODWORD(v8) = -1;
    }
    else
    {
LABEL_34:
      LODWORD(v8) = 0;
    }
    v9 = v8 & 0xFFFFFF00;
    goto LABEL_54;
  }
  if (a4 >= a2)
  {
    v8 = a3->u16[a2];
    if (v8 > 0x7F)
    {
LABEL_48:
      v6 = 0;
      LOBYTE(v8) = 0;
      goto LABEL_49;
    }
    LODWORD(v8) = JSC::ducetLevel1Weights[v8];
    if (!(_DWORD)v8)
    {
LABEL_47:
      v6 = 0;
LABEL_49:
      v9 = 0;
      return v6 | v9 | v8;
    }
    v9 = -256;
    LOBYTE(v8) = -1;
LABEL_54:
    v6 = 0x100000000;
    return v6 | v9 | v8;
  }
  v9 = 0;
  v8 = JSC::ducetLevel1Weights[a1->u8[a4]] != 0;
  v6 = v8 << 32;
  return v6 | v9 | v8;
}

uint64_t JSC::compareASCIIWithUCADUCET<char16_t,unsigned char>(int16x8_t *a1, unint64_t a2, uint8x8_t *a3, unint64_t a4)
{
  uint16x8_t v4;
  unsigned int v5;
  uint64_t v6;
  uint16x8_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v26;

  if (a2 != a4)
    goto LABEL_20;
  if (a2 < 8)
  {
    if (a2 < 4)
    {
      if (a2 < 2)
      {
        if ((_DWORD)a2 == 1 && a1->i16[0] != a3->u8[0])
          goto LABEL_20;
      }
      else if (((a3->u16[0] | (a3->u16[0] << 8)) & 0xFF00FF) != a1->i32[0]
             || ((*(unsigned __int16 *)((char *)a3->u16 + (a2 & 1)) | (*(unsigned __int16 *)((char *)a3->u16 + (a2 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)a1->i32 + 2 * (a2 & 1)))
      {
        goto LABEL_20;
      }
    }
    else
    {
      v10 = (a3->u32[0] | ((unint64_t)a3->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v11 = (*(unsigned int *)((char *)a3->u32 + (a2 & 3)) | ((unint64_t)*(unsigned int *)((char *)a3->u32
                                                                                                + (a2 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v12 = (v11 | (v11 << 8)) & 0xFF00FF00FF00FFLL;
      if (((v10 | (v10 << 8)) & 0xFF00FF00FF00FFLL) != a1->i64[0]
        || v12 != *(uint64_t *)((char *)a1->i64 + 2 * (a2 & 3)))
      {
        goto LABEL_20;
      }
    }
    LOBYTE(v8) = 0;
    v9 = 0;
    goto LABEL_53;
  }
  v4 = (uint16x8_t)vceqq_s16(*a1, (int16x8_t)vmovl_u8(*a3));
  v4.i16[0] = vminvq_u16(v4);
  if (v4.i32[0])
  {
    v5 = a2 & 7;
    v6 = 0x100000000;
    while (1)
    {
      v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a1 + 2 * v5), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a3 + v5)));
      v7.i16[0] = vminvq_u16(v7);
      if (!v7.i32[0])
        break;
      LOBYTE(v8) = 0;
      v9 = 0;
      v5 += 8;
      if (v5 >= a2)
        return v6 | v9 | v8;
    }
  }
LABEL_20:
  if (a4 >= a2)
    v15 = a2;
  else
    v15 = a4;
  if (v15)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      v18 = a1->u16[v16];
      if (v18 > 0x7F)
        goto LABEL_42;
      v19 = JSC::ducetLevel1Weights[v18];
      if (!v19)
        goto LABEL_42;
      v20 = JSC::ducetLevel1Weights[a3->u8[v16]];
      if (!JSC::ducetLevel1Weights[a3->u8[v16]])
        goto LABEL_42;
      if (v19 != v20)
      {
        if (a2 <= v16 + 1 || a1->u16[v16 + 1] <= 0xFFu)
        {
          v25 = v19 > v20;
          goto LABEL_45;
        }
        goto LABEL_42;
      }
      v16 = v17;
      v25 = v15 > v17++;
    }
    while (v25);
  }
  if (a2 == a4)
  {
    if (a2)
    {
      while (1)
      {
        v22 = a1->u16[0];
        a1 = (int16x8_t *)((char *)a1 + 2);
        v21 = v22;
        v23 = a3->u8[0];
        a3 = (uint8x8_t *)((char *)a3 + 1);
        LODWORD(v21) = JSC::ducetLevel3Weights[v21];
        v24 = JSC::ducetLevel3Weights[v23];
        v25 = v21 > v24;
        if ((_DWORD)v21 != v24)
          break;
        if (!--a2)
          goto LABEL_34;
      }
LABEL_45:
      if (v25)
        LODWORD(v8) = 1;
      else
        LODWORD(v8) = -1;
    }
    else
    {
LABEL_34:
      LODWORD(v8) = 0;
    }
    v9 = v8 & 0xFFFFFF00;
    goto LABEL_53;
  }
  if (a4 >= a2)
  {
    LOBYTE(v8) = JSC::ducetLevel1Weights[a3->u8[a2]];
    if (!(_BYTE)v8)
    {
      v6 = 0;
      goto LABEL_43;
    }
    v9 = -256;
    LOBYTE(v8) = -1;
LABEL_53:
    v6 = 0x100000000;
    return v6 | v9 | v8;
  }
  v26 = a1->u16[a4];
  if (v26 > 0x7F)
  {
LABEL_42:
    v6 = 0;
    LOBYTE(v8) = 0;
LABEL_43:
    v9 = 0;
    return v6 | v9 | v8;
  }
  v9 = 0;
  v8 = JSC::ducetLevel1Weights[v26] != 0;
  v6 = v8 << 32;
  return v6 | v9 | v8;
}

int16x8_t *JSC::compareASCIIWithUCADUCET<char16_t,char16_t>(int16x8_t *result, unint64_t a2, int16x8_t *a3, unint64_t a4)
{
  uint16x8_t v4;
  __int32 v5;
  __int32 v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint16x8_t v23;
  unsigned int v24;
  uint16x8_t v25;

  if (a2 != a4)
    goto LABEL_15;
  if (!(_DWORD)a2)
  {
    v13 = 0x100000000;
    LOBYTE(v7) = 0;
    v8 = 0;
    return (int16x8_t *)(v13 | v8 | v7);
  }
  if ((_DWORD)a2 != 1)
  {
    switch(31 - __clz(a2 - 1))
    {
      case 0u:
        v5 = result->i32[0];
        v6 = a3->i32[0];
        goto LABEL_11;
      case 1u:
        if (result->i32[0] != a3->i32[0]
          || *(__int32 *)((char *)&result->i32[-1] + 2 * a2) != *(__int32 *)((char *)&a3->i32[-1]
                                                                                         + 2 * a2))
        {
          goto LABEL_15;
        }
        goto LABEL_12;
      case 2u:
        if (result->i64[0] != a3->i64[0]
          || *(uint64_t *)((char *)&result->i64[-1] + 2 * a2) != *(uint64_t *)((char *)&a3->i64[-1]
                                                                                         + 2 * a2))
        {
          goto LABEL_15;
        }
        goto LABEL_12;
      case 3u:
        v4 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)result + 2 * a2 - 16), *(int16x8_t *)((char *)a3 + 2 * a2 - 16)), (int8x16_t)vceqq_s16(*result, *a3));
        v4.i16[0] = vminvq_u16(v4);
        if (!v4.i32[0])
          goto LABEL_15;
        goto LABEL_12;
      default:
        v23 = (uint16x8_t)vceqq_s16(*result, *a3);
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0])
          goto LABEL_15;
        if (a2 < 8)
          goto LABEL_12;
        v24 = a2 & 7;
        v13 = 0x100000000;
        break;
    }
    while (1)
    {
      v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)result + 2 * v24), *(int16x8_t *)((char *)a3 + 2 * v24));
      v25.i16[0] = vminvq_u16(v25);
      if (!v25.i32[0])
        break;
      LOBYTE(v7) = 0;
      v8 = 0;
      v24 += 8;
      if (v24 >= a2)
        return (int16x8_t *)(v13 | v8 | v7);
    }
    goto LABEL_15;
  }
  if (a2)
  {
    v5 = result->u16[0];
    v6 = a3->u16[0];
LABEL_11:
    if (v5 == v6)
    {
LABEL_12:
      LOBYTE(v7) = 0;
      v8 = 0;
      goto LABEL_49;
    }
LABEL_15:
    if (a4 >= a2)
      v9 = a2;
    else
      v9 = a4;
    if (v9)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = result->u16[v10];
        if (v12 > 0x7F)
          goto LABEL_42;
        LOBYTE(v7) = 0;
        v13 = 0;
        v14 = JSC::ducetLevel1Weights[v12];
        if (!JSC::ducetLevel1Weights[v12])
        {
          v8 = 0;
          return (int16x8_t *)(v13 | v8 | v7);
        }
        v15 = a3->u16[v10];
        v8 = 0;
        if (v15 > 0x7F)
          return (int16x8_t *)(v13 | v8 | v7);
        LODWORD(v7) = JSC::ducetLevel1Weights[v15];
        if (!JSC::ducetLevel1Weights[v15])
          goto LABEL_37;
        if (v14 != (_DWORD)v7)
        {
          v22 = v10 + 1;
          if ((a2 <= v10 + 1 || result->u16[v22] <= 0xFFu) && (a4 <= v22 || a3->u16[v22] <= 0xFFu))
          {
            v20 = v14 > v7;
            goto LABEL_45;
          }
          goto LABEL_42;
        }
        v10 = v11;
        v20 = v9 > v11++;
      }
      while (v20);
    }
    if (a2 == a4)
    {
      if (a2)
      {
        while (1)
        {
          v17 = result->u16[0];
          result = (int16x8_t *)((char *)result + 2);
          v16 = v17;
          v18 = a3->u16[0];
          a3 = (int16x8_t *)((char *)a3 + 2);
          LODWORD(v16) = JSC::ducetLevel3Weights[v16];
          v19 = JSC::ducetLevel3Weights[v18];
          v20 = v16 > v19;
          if ((_DWORD)v16 != v19)
            break;
          if (!--a2)
            goto LABEL_30;
        }
LABEL_45:
        if (v20)
          LODWORD(v7) = 1;
        else
          LODWORD(v7) = -1;
      }
      else
      {
LABEL_30:
        LODWORD(v7) = 0;
      }
      v8 = v7 & 0xFFFFFF00;
    }
    else
    {
      if (a4 < a2)
      {
        v21 = result->u16[a4];
        if (v21 <= 0x7F)
        {
          v8 = 0;
          v7 = JSC::ducetLevel1Weights[v21] != 0;
          v13 = v7 << 32;
          return (int16x8_t *)(v13 | v8 | v7);
        }
        goto LABEL_42;
      }
      v7 = a3->u16[a2];
      if (v7 > 0x7F)
      {
LABEL_42:
        v13 = 0;
        LOBYTE(v7) = 0;
        goto LABEL_43;
      }
      LODWORD(v7) = JSC::ducetLevel1Weights[v7];
      if (!(_DWORD)v7)
      {
LABEL_37:
        v13 = 0;
LABEL_43:
        v8 = 0;
        return (int16x8_t *)(v13 | v8 | v7);
      }
      v8 = -256;
      LOBYTE(v7) = -1;
    }
LABEL_49:
    v13 = 0x100000000;
    return (int16x8_t *)(v13 | v8 | v7);
  }
  __break(1u);
  return result;
}

BOOL WTF::StringView::containsOnlyASCII(unsigned __int8 **this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  BOOL v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v1 = *this;
  v2 = *((unsigned int *)this + 2);
  v4 = ((unint64_t)*this & 7) == 0 || v2 == 0;
  if (*((_BYTE *)this + 12))
  {
    v5 = &v1[v2];
    if (v4)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v9 = v2 - 1;
      v10 = (_BYTE)v1 + 1;
      do
      {
        v11 = *v1++;
        v6 |= v11;
        if ((v10 & 7) == 0)
          break;
        v12 = v9--;
        ++v10;
      }
      while (v12);
    }
    while ((unint64_t)v1 < ((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8))
    {
      v13 = *(_QWORD *)v1;
      v1 += 8;
      v6 |= v13;
    }
    while (v1 != v5)
    {
      v14 = *v1++;
      v6 |= v14;
    }
    v15 = v6 & 0x8080808080808080;
  }
  else
  {
    v7 = &v1[2 * v2];
    if (v4)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v16 = 2 * v2 - 2;
      v17 = (_BYTE)v1 + 2;
      do
      {
        v18 = *(unsigned __int16 *)v1;
        v1 += 2;
        v8 |= v18;
        if ((v17 & 7) == 0)
          break;
        v19 = v16;
        v16 -= 2;
        v17 += 2;
      }
      while (v19);
    }
    while ((unint64_t)v1 < ((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v20 = *(_QWORD *)v1;
      v1 += 8;
      v8 |= v20;
    }
    while (v1 != v7)
    {
      v21 = *(unsigned __int16 *)v1;
      v1 += 2;
      v8 |= v21;
    }
    v15 = v8 & 0xFF80FF80FF80FF80;
  }
  return v15 == 0;
}

uint64_t JSC::canDoASCIIUCADUCETComparisonWithUCollator()
{
  int Attribute;
  uint64_t result;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  Attribute = ucol_getAttribute();
  result = 0;
  if (Attribute == 16)
  {
    v2 = ucol_getAttribute();
    result = 0;
    if (v2 == 21)
    {
      v3 = ucol_getAttribute();
      result = 0;
      if (v3 == 2)
      {
        v4 = ucol_getAttribute();
        result = 0;
        if (v4 == 16)
        {
          v5 = ucol_getAttribute();
          result = 0;
          if (v5 == 16)
          {
            v6 = ucol_getAttribute();
            result = 0;
            if (v6 == 16)
            {
              ucol_getRules();
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::intlCollatorConstructorFuncSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  int v42;
  unsigned int v43;
  char v44;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, &v41, a9);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_4;
  v40 = *(_DWORD *)(v11 + 80);
  if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (*(_QWORD *)(v11 + 16))
  {
    v26 = 0;
  }
  else
  {
LABEL_4:
    std::call_once[abi:sn180100]<JSC::intlCollatorAvailableLocales(void)::$_0>((uint64_t)&v44);
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v24 = 10;
    else
      v24 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)&JSC::intlCollatorAvailableLocales(void)::availableLocales, (JSC::Structure *)&v41, v24, v20, v21, v22, v23);
    v26 = v25;
  }
  if (v43)
  {
    v29 = v41;
    v30 = 8 * v43;
    do
    {
      v31 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  v27 = v41;
  if (v41)
  {
    v41 = 0;
    v42 = 0;
    WTF::fastFree((unint64_t)v27, v13, v14, v15, v16, v17, v18, v19);
  }
  return v26;
}

unint64_t JSC::intlCollatorPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t result;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  JSC *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC *v132;
  JSC::VM *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  uint64_t v139;

  v8 = *((_QWORD *)this + 7);
  v133 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlCollator::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v133, (uint64_t)"Intl.Collator.prototype.resolvedOptions called on value that's not a Collator", 78);
  }
  v10 = *(_QWORD *)(v8 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase < *(_QWORD *)(v10 + 32))
    {
LABEL_5:
      *(_QWORD *)(v10 + 24) = SlowCase + v11;
      goto LABEL_6;
    }
    SlowCase = *(_QWORD *)(v10 + 40);
    if ((SlowCase & 1) == 0)
    {
      v124 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v124);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v124;
      goto LABEL_5;
    }
    v125 = this;
    v126 = *((_QWORD *)a2 + 5);
    v127 = *(unsigned int *)(v10 + 60);
    JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v128 = v127;
    v9 = v126;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v8 + 192, v128, 0, 0, v129, v130, v131);
    this = v125;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v8 + 755))
      __dmb(0xAu);
    v13 = v8 + 41952;
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 1784);
    v15 = JSC::jsString((JSC *)v8, (JSC::VM *)(v9 + 32), a3, a4, a5, a6, a7, a8);
    v135 = 0;
    v136 = SlowCase;
    v137 = -1;
    v16.n128_u64[0] = 0x100000001000000;
    v138 = 0x1000000;
    v139 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v14, v15, 0, (uint64_t)&v135, v17, v18, v16);
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 2600);
    if (*(_BYTE *)(v9 + 48))
    {
      v26 = 0;
      if (*(_BYTE *)(v9 + 48) != 1)
      {
LABEL_13:
        v134 = (WTF::StringImpl *)v26;
        v29 = JSC::jsNontrivialString(v8, (JSC::VM *)&v134, v19, v20, v21, v22, v23, v24);
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v30.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v25, v29, 0, (uint64_t)&v135, v31, v32, v30);
        v40 = v134;
        v134 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        v41 = *(_QWORD *)(*(_QWORD *)v13 + 2288);
        v42 = *(char *)(v9 + 49);
        if (v42 > 3)
        {
          v45 = 0;
        }
        else
        {
          v43 = off_1E359B6C8[v42];
          v44 = dword_199157B20[v42];
          v45 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_DWORD *)v45 = 2;
          *(_DWORD *)(v45 + 4) = v44;
          *(_QWORD *)(v45 + 8) = v43;
          *(_DWORD *)(v45 + 16) = 4;
        }
        v134 = (WTF::StringImpl *)v45;
        v46 = JSC::jsNontrivialString(v8, (JSC::VM *)&v134, v34, v35, v36, v37, v38, v39);
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v47.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v41, v46, 0, (uint64_t)&v135, v48, v49, v47);
        v58 = v134;
        v134 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, v50, v51, v52, v53, v54, v55, v56);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
        v59 = *(_QWORD *)(*(_QWORD *)v13 + 1544);
        if (*(_BYTE *)(v9 + 53))
          v60 = 7;
        else
          v60 = 6;
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v57.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v59, v60, 0, (uint64_t)&v135, v55, v56, v57);
        v61 = *(_QWORD *)(*(_QWORD *)v13 + 1024);
        v68 = JSC::jsString((JSC *)v8, (JSC::VM *)(v9 + 40), v62, v63, v64, v65, v66, v67);
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v69.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v61, v68, 0, (uint64_t)&v135, v70, v71, v69);
        v75 = *(_QWORD *)(*(_QWORD *)v13 + 2048);
        if (*(_BYTE *)(v9 + 52))
          v76 = 7;
        else
          v76 = 6;
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v74.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v75, v76, 0, (uint64_t)&v135, v72, v73, v74);
        v83 = 0;
        v84 = *(_QWORD *)(*(_QWORD *)v13 + 1000);
        v85 = *(char *)(v9 + 50);
        if (v85 <= 2)
        {
          v86 = off_1E359B6E8[v85];
          v83 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v83 = 0x500000002;
          *(_QWORD *)(v83 + 8) = v86;
          *(_DWORD *)(v83 + 16) = 4;
        }
        v134 = (WTF::StringImpl *)v83;
        v87 = JSC::jsNontrivialString(v8, (JSC::VM *)&v134, v77, v78, v79, v80, v81, v82);
        v135 = 0;
        v136 = SlowCase;
        v137 = -1;
        v88.n128_u64[0] = 0x100000001000000;
        v138 = 0x1000000;
        v139 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v84, v87, 0, (uint64_t)&v135, v89, v90, v88);
        v98 = v134;
        v134 = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
          {
            WTF::StringImpl::~StringImpl(v98, v91, v92, v93, v94, v95, v96, v97);
            WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
          }
          else
          {
            *(_DWORD *)v98 -= 2;
          }
        }
        return SlowCase;
      }
      v27 = 6;
      v28 = "search";
    }
    else
    {
      v28 = "sort";
      v27 = 4;
    }
    v26 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v26 = 2;
    *(_DWORD *)(v26 + 4) = v27;
    *(_QWORD *)(v26 + 8) = v28;
    *(_DWORD *)(v26 + 16) = 4;
    goto LABEL_13;
  }
  v132 = this;
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 14936, (JSC *)v8, 0x40uLL, 0, a5, a6, a7, a8);
  this = v132;
  if (SlowCase)
    goto LABEL_6;
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t JSC::intlDateTimeFormatConstructorFuncSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  int v40;
  unsigned int v41;

  v5 = *((_QWORD *)this + 7);
  v12 = JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v14, v6, v7, v8, v9, v10, v11, &v39, v13);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v38 = *(_DWORD *)(v5 + 80);
  if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v5 + 16))
  {
    v24 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v22 = 10;
    else
      v22 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)v12, (JSC::Structure *)&v39, v22, v18, v19, v20, v21);
    v24 = v23;
  }
  if (v41)
  {
    v27 = v39;
    v28 = 8 * v41;
    do
    {
      v29 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v25 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
  }
  return v24;
}

uint64_t JSC::intlDateTimeFormatPrototypeFuncFormatRange(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlDateTimeFormat *v11;
  JSC::JSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  const char *v30;
  uint64_t v31;
  int v32;
  int v33;
  double v34;
  JSC::VM *v35;

  v10 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v10;
  v11 = (JSC::IntlDateTimeFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlDateTimeFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v30 = "Intl.DateTimeFormat.prototype.formatRange called on value that's not a DateTimeFormat";
    v31 = 86;
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)v30, v31);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || *((_DWORD *)a2 + 8) == 2
    || *((_QWORD *)a2 + 6) == 10
    || (v12 = (JSC::JSObject *)*((_QWORD *)a2 + 7), v12 == (JSC::JSObject *)10))
  {
    v30 = "startDate or endDate is undefined";
    v31 = 34;
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)v30, v31);
  }
  *(double *)v19.i64 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, *((JSC::JSObject **)a2 + 6), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v20 = *(double *)v19.i64;
  if (*(_DWORD *)(v10 + 80))
  {
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v27 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, v12, v13, v14, v15, v16, v17, v18, v19);
  v28 = v27;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlDateTimeFormat::formatRange(v11, this, v20, v28);
  v33 = *(_DWORD *)(v10 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
  {
    v34 = v27;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    v28 = v34;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlDateTimeFormat::formatRange(v11, this, v20, v28);
}

JSC::Exception *JSC::intlDateTimeFormatPrototypeFuncFormatToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlDateTimeFormat *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v21;
  double v22;
  JSC::VM *v23;

  v10 = *((_QWORD *)this + 7);
  v23 = (JSC::VM *)v10;
  v11 = (JSC::IntlDateTimeFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlDateTimeFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"Intl.DateTimeFormat.prototype.formatToParts called on value that's not a DateTimeFormat", 88);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::IntlDateTimeFormat::handleDateTimeValue(this, (JSC::JSObject *)v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlDateTimeFormat::formatToParts(v11, (unint64_t)this, v19, 0);
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
  {
    v22 = v19;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    v19 = v22;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlDateTimeFormat::formatToParts(v11, (unint64_t)this, v19, 0);
}

uint64_t JSC::intlDateTimeFormatPrototypeFuncResolvedOptions(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(_QWORD *);
  _QWORD *v21;
  int v22;
  unsigned int *v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v9 = *(_QWORD *)(this + 56);
  v24 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  v11 = *(_QWORD *)(this + 384);
  if ((v11 & 1) != 0)
  {
    v20 = *(void (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v21 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v21 = (_QWORD *)(this - 16);
    v25[0] = *v21;
    v25[1] = this;
    v25[2] = this + 384;
    v20(v25);
  }
  v12 = JSC::unwrapForLegacyIntlConstructor<JSC::IntlDateTimeFormat>(this, v10, *(_DWORD **)(this + 392), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v22 = *(_DWORD *)(v9 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v23 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
      v12 = v23;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (v12)
    return JSC::IntlDateTimeFormat::resolvedOptions((JSC::IntlDateTimeFormat *)v12, (JSC::JSGlobalObject *)this, v13, v14, v15, v16, v17, v18);
  return JSC::throwTypeError(this, &v24, (uint64_t)"Intl.DateTimeFormat.prototype.resolvedOptions called on value that's not a DateTimeFormat", 90);
}

unsigned int *JSC::unwrapForLegacyIntlConstructor<JSC::IntlDateTimeFormat>(unint64_t a1, uint64_t a2, _DWORD *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int HasInstance;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int v35;
  char v36;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v8 = (unsigned int *)a2;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if (&JSC::IntlDateTimeFormat::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
    return v8;
  v11 = *(_QWORD *)(a1 + 56);
  JSC::JSObject::getDirect(a3, (JSC::VM *)v11, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160), a4, a5, a6, a7, a8);
  HasInstance = JSC::JSObject::defaultHasInstance(a1, (uint64_t)v8, v12, v13, v14, v15, v16, v17);
  if (*(_DWORD *)(v11 + 80))
  {
    v36 = HasInstance;
    v33 = *(_DWORD *)(v11 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v19, v20, v21, v22, v23, v24);
    v34 = v36;
    if (*(_QWORD *)(v11 + 16))
      v34 = 0;
    if ((v34 & 1) == 0)
      return 0;
  }
  else if (!HasInstance)
  {
    return 0;
  }
  v25 = JSC::JSObject::get(v8, a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 48) + 4312), v20, v21, v22, v23, v24);
  v32 = v25;
  if (!*(_DWORD *)(v11 + 80))
  {
    if ((v25 & 0xFFFE000000000002) == 0)
    {
LABEL_9:
      if (&JSC::IntlDateTimeFormat::s_info == (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)))
        return (unsigned int *)v32;
      else
        return 0;
    }
    return 0;
  }
  v35 = *(_DWORD *)(v11 + 80);
  if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v26, v27, v28, v29, v30, v31);
  v8 = 0;
  if (!*(_QWORD *)(v11 + 16) && (v32 & 0xFFFE000000000002) == 0)
    goto LABEL_9;
  return v8;
}

void JSC::IntlDisplayNames::initializeDisplayNames(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void JSC::IntlDisplayNamesConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xC00000002;
  *(_QWORD *)(v6 + 8) = "DisplayNames";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)2, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::IntlDisplayNamesConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDisplayNamesConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callIntlDisplayNames(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"DisplayNames", 13);
}

unint64_t JSC::constructIntlDisplayNames(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  uint64_t (*v32)(JSC::VM **);
  JSC::VM **v33;
  JSC::JSGlobalObject *v34;
  unint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  char *v38;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 312);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v32 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (JSC::VM **)(this - 16);
    v36 = *v33;
    v37 = this;
    v38 = (char *)(this + 312);
    SubclassStructure = (JSC::JSObject *)v32(&v36);
  }
  else
  {
    v36 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v34 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v34 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v36, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v29 = *(_DWORD *)(v10 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      {
        v35 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v35;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 312);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v31 = (JSC::VM **)(v14 - 16);
      v36 = *v31;
      v37 = v14;
      v38 = (char *)(v14 + 312);
      v15 = v30(&v36);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlDisplayNames::create((JSC::IntlDisplayNames *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_22;
  }
  v25 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v26 = 10;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlDisplayNames::initializeDisplayNames(v18, this, v25, (JSC::Symbol *)v26, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::IntlDisplayNamesPrototype::create(JSC::IntlDisplayNamesPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1100000002;
  *(_QWORD *)(v13 + 8) = "Intl.DisplayNames";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlDisplayNamesPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDisplayNamesPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlDurationFormatConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xE00000002;
  *(_QWORD *)(v6 + 8) = "DurationFormat";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::IntlDurationFormatConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDurationFormatConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callIntlDurationFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"DurationFormat", 15);
}

unint64_t JSC::constructIntlDurationFormat(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  uint64_t (*v32)(JSC::VM **);
  JSC::VM **v33;
  JSC::JSGlobalObject *v34;
  unint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  char *v38;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 320);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v32 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (JSC::VM **)(this - 16);
    v36 = *v33;
    v37 = this;
    v38 = (char *)(this + 320);
    SubclassStructure = (JSC::JSObject *)v32(&v36);
  }
  else
  {
    v36 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v34 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v34 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v36, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v29 = *(_DWORD *)(v10 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      {
        v35 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v35;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 320);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v31 = (JSC::VM **)(v14 - 16);
      v36 = *v31;
      v37 = v14;
      v38 = (char *)(v14 + 320);
      v15 = v30(&v36);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlDurationFormat::create((JSC::IntlDurationFormat *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_22;
  }
  v25 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v26 = 10;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlDurationFormat::initializeDurationFormat(v18, this, v25, (JSC::Symbol *)v26, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::IntlDurationFormatPrototype::create(JSC::IntlDurationFormatPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1300000002;
  *(_QWORD *)(v13 + 8) = "Intl.DurationFormat";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlDurationFormatPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDurationFormatPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlListFormatConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xA00000002;
  *(_QWORD *)(v6 + 8) = "ListFormat";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::IntlListFormatConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlListFormatConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callIntlListFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"ListFormat", 11);
}

unint64_t JSC::constructIntlListFormat(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  uint64_t (*v32)(JSC::VM **);
  JSC::VM **v33;
  JSC::JSGlobalObject *v34;
  unint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  char *v38;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 328);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v32 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (JSC::VM **)(this - 16);
    v36 = *v33;
    v37 = this;
    v38 = (char *)(this + 328);
    SubclassStructure = (JSC::JSObject *)v32(&v36);
  }
  else
  {
    v36 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v34 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v34 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v36, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v29 = *(_DWORD *)(v10 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      {
        v35 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v35;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 328);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v31 = (JSC::VM **)(v14 - 16);
      v36 = *v31;
      v37 = v14;
      v38 = (char *)(v14 + 328);
      v15 = v30(&v36);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlListFormat::create((JSC::IntlListFormat *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_22;
  }
  v25 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v26 = 10;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlListFormat::initializeListFormat(v18, this, v25, (JSC::Symbol *)v26, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::IntlListFormatPrototype::create(JSC::IntlListFormatPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xF00000002;
  *(_QWORD *)(v13 + 8) = "Intl.ListFormat";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlListFormatPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlListFormatPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlLocale::visitChildren(JSC::IntlLocale *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

unint64_t JSC::IntlLocale::create(JSC::IntlLocale *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5072);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlLocaleSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 176;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 176, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_BYTE *)(result + 152) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 65) = 0u;
  *(_BYTE *)(result + 160) = 2;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlLocale::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlLocale::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::LocaleIDBuilder::setKeywordValue(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v16;
  WTF *v17;
  unsigned __int128 v18;
  char v19;
  WTF *v20;
  unsigned int v21;
  _BYTE v22[32];

  v20 = (WTF *)v22;
  v21 = a5 + 1;
  v7 = (WTF *)v22;
  if ((a5 + 1) >= 0x21)
  {
    v7 = (WTF *)WTF::fastMalloc((WTF *)(a5 + 1));
    v20 = v7;
  }
  if ((a5 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a5 == 1)
    {
      *(_BYTE *)v7 = *a4;
    }
    else if ((_DWORD)a5)
    {
      memcpy(v7, a4, a5);
    }
  }
  else
  {
    v16 = (WTF *)((char *)v7 + a5);
    if (a5 >= 0x10)
    {
      v17 = (WTF *)((char *)v7 + (a5 & 0xFFFFFFF0));
      do
      {
        v18 = (unsigned __int128)vld2q_s8(a4);
        a4 += 32;
        *(_OWORD *)v7 = v18;
        v7 = (WTF *)((char *)v7 + 16);
      }
      while (v7 != v17);
      v7 = v17;
    }
    while (v7 != v16)
    {
      v19 = *a4;
      a4 += 2;
      *(_BYTE *)v7 = v19;
      v7 = (WTF *)((char *)v7 + 1);
    }
  }
  if (a5 >= (unint64_t)v21)
  {
    __break(0xC471u);
    JUMPOUT(0x19895A070);
  }
  *((_BYTE *)v20 + a5) = 0;
  uloc_setKeywordValue();
  if (v22 != (_BYTE *)v20 && v20)
    WTF::fastFree((unint64_t)v20, v8, v9, v10, v11, v12, v13, v14);
  return 1;
}

void JSC::IntlLocale::keywordValue(int a1@<W3>, int **a2@<X8>)
{
  int KeywordValue;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  size_t v14;
  int *v15;
  char *v16;
  const char *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *__s;
  _BYTE v33[36];
  int v34;

  v34 = 0;
  __s = v33;
  KeywordValue = uloc_getKeywordValue();
  if (v34 == 15 || v34 == -124)
  {
    v12 = KeywordValue + 1;
    if ((unint64_t)(KeywordValue + 1) > 0x20)
    {
      if ((unint64_t)v12 >= 0x29)
        v30 = v12;
      else
        v30 = 41;
      if (v30 < 0x21)
      {
        __s = v33;
        v31 = v33;
      }
      else
      {
        if (HIDWORD(v30))
          goto LABEL_41;
        v31 = (char *)WTF::fastMalloc((WTF *)v30);
        __s = v31;
      }
      memcpy(v31, v33, 0x20uLL);
    }
    v34 = 0;
    uloc_getKeywordValue();
  }
  if (a1)
  {
    if (__s)
    {
      v13 = strlen(__s);
      if (v13)
      {
        v14 = v13;
        if (!(v13 >> 31))
        {
          v15 = (int *)WTF::fastCompactMalloc((WTF *)(v13 + 20));
          v16 = (char *)(v15 + 5);
          *v15 = 2;
          v15[1] = v14;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (v14 == 1)
            *v16 = *__s;
          else
            memcpy(v16, __s, v14);
          goto LABEL_25;
        }
LABEL_41:
        __break(0xC471u);
        JUMPOUT(0x19895A378);
      }
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v15 = 0;
    }
LABEL_25:
    *a2 = v15;
    goto LABEL_26;
  }
  v17 = (const char *)uloc_toUnicodeLocaleType();
  if (!v17)
  {
    *a2 = 0;
    goto LABEL_26;
  }
  v18 = v17;
  v19 = strlen(v17);
  if (v19)
  {
    v20 = v19;
    if (v19 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19895A380);
    }
    v15 = (int *)WTF::fastCompactMalloc((WTF *)(v19 + 20));
    v21 = (char *)(v15 + 5);
    *v15 = 2;
    v15[1] = v20;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 4;
    if (v20 == 1)
      *v21 = *v18;
    else
      memcpy(v21, v18, v20);
  }
  else
  {
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  if (!WTF::equalInternal<unsigned char>((uint64_t)v15, (unint64_t)"true", 4))
    goto LABEL_25;
  WTF::StringImpl::s_emptyAtomString += 2;
  *a2 = &WTF::StringImpl::s_emptyAtomString;
  if (*v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *v15 -= 2;
  }
LABEL_26:
  if (v33 != __s)
  {
    if (__s)
      WTF::fastFree((unint64_t)__s, v5, v6, v7, v8, v9, v10, v11);
  }
}

char *JSC::IntlLocale::toString(JSC::IntlLocale *this)
{
  char *v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  v1 = (char *)this + 40;
  if (!*((_QWORD *)this + 5))
  {
    JSC::languageTagForLocaleID(0, &v37);
    v10 = v37;
    v37 = 0;
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v10;
    if (v11)
    {
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v3, v4, v5, v6, v7, v8, v9);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        v11 = v37;
        v37 = 0;
        if (!v11)
          return v1;
        v12 = *(_DWORD *)v11 - 2;
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl(v11, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          return v1;
        }
      }
      *(_DWORD *)v11 = v12;
    }
  }
  return v1;
}

void JSC::IntlLocale::initializeLocale(char *a1, JSC::JSGlobalObject *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, float a11)
{
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::VM *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  JSC::Exception *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unint64_t v60;
  JSC::Heap **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  JSC::Exception *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  JSC::Heap **v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  JSC::Exception *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  JSC::VM *v84;
  uint64_t v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  JSC::Heap **v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  JSC::Exception *v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  double v108;
  double v109;
  float v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  float v129;
  int v130;
  unint64_t v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  __int128 *v134;
  WTF *v135;
  __int128 v136;
  int v137;
  unint64_t v138;
  BOOL v140;
  WTF *v141;
  uint64_t v142;
  WTF *v143;
  int v144;
  _BOOL4 v145;
  __int128 *v146;
  WTF *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  __int128 *v153;
  char v154;
  WTF *v155;
  WTF *v156;
  char *v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  _BYTE *v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  __int128 *v166;
  __int128 *v167;
  _BYTE *v168;
  uint64_t v169;
  char v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  __int128 *v174;
  __int128 *v175;
  _BYTE *v176;
  unsigned int v177;
  unint64_t v178;
  _BYTE *v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  __int128 *v187;
  unint64_t v188;
  char v189;
  _BYTE *v190;
  char *v191;
  WTF *v192;
  JSC::VM *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v209;
  JSC::VM *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  JSC::Heap **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  double v229;
  JSC::Exception *v230;
  WTF *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  JSC::VM *v241;
  unint64_t v242;
  JSC::VM *v243;
  int v244;
  JSC::VM *v245;
  char *v246;
  int v247;
  uint64_t v248;
  unint64_t v249;
  JSC::Heap **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  JSC::Exception *v258;
  WTF::StringImpl *v259;
  JSC::VM *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v276;
  const void *v277;
  size_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  JSC::Heap **v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  JSC::Exception *v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  _DWORD *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  __int128 *v298;
  __int128 *v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  char *v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t (*v376)(__int128 *);
  _QWORD *v377;
  int v378;
  int v379;
  uint64_t (*v380)(__int128 *);
  _QWORD *v381;
  uint64_t (*v382)(__int128 *);
  _QWORD *v383;
  int v384;
  int v385;
  int v386;
  uint64_t (*v387)(__int128 *);
  _QWORD *v388;
  uint64_t (*v389)(__int128 *);
  _QWORD *v390;
  _BYTE *v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t (*v396)(__int128 *);
  _QWORD *v397;
  uint64_t (*v398)(__int128 *);
  _QWORD *v399;
  uint64_t v400;
  unsigned int v401;
  _BYTE *v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  unint64_t v406;
  int __dst;
  WTF::StringImpl *v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  char *__s;
  unint64_t v414;
  _BYTE v415[32];
  JSC::VM *v416;
  WTF::StringImpl *v417[2];
  WTF *v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  uint64_t v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;

  v12 = (unint64_t)a2;
  v427 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)a2 + 7);
  v15 = 0xFFFE000000000002;
  v416 = (JSC::VM *)v14;
  *(_QWORD *)&v423 = a4;
  if (a4 == 10)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v16 = (unsigned int *)a4;
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    v83 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v423, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_50;
  }
  if (*(unsigned __int8 *)(a4 + 5) <= 0x16u)
  {
    v83 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a4, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_50:
    v16 = (unsigned int *)v83;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v17 = *(_DWORD *)(v14 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_7;
  }
LABEL_8:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_9;
  v375 = *(_DWORD *)(v14 + 80);
  if ((v375 & 0x27) != 0 && (v375 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_9:
    __s = v415;
    v414 = 32;
    v18 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v19 = 0;
      v20 = 0x100000000;
    }
    if (!JSC::isStructurallyValidLanguageTag(v19, v20, a9, a10, a11))
      goto LABEL_42;
    WTF::String::ascii(a3, (int8x16_t **)&v421);
    JSC::localeIDBufferForLanguageTagWithNullTerminator((JSC *)&v421, (uint64_t)&v423);
    v28 = __s;
    if (__s != v415)
    {
      if (__s)
      {
        __s = 0;
        LODWORD(v414) = 0;
        WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
      }
      __s = v415;
    }
    v29 = (char *)v423;
    if ((__int128 *)v423 == &v424)
    {
      v31 = HIDWORD(v423);
      memcpy(v415, (const void *)v423, HIDWORD(v423));
      v30 = DWORD2(v423);
    }
    else
    {
      *(_QWORD *)&v423 = &v424;
      __s = v29;
      v30 = DWORD2(v423);
      v31 = HIDWORD(v423);
      DWORD2(v423) = 32;
    }
    HIDWORD(v423) = 0;
    v414 = __PAIR64__(v31, v30);
    v32 = (_DWORD *)v421;
    *(_QWORD *)&v421 = 0;
    if (v32)
    {
      if (*v32 == 1)
      {
        WTF::fastFree((unint64_t)v32, v29, v22, v23, v24, v25, v26, v27);
        if (HIDWORD(v414))
          goto LABEL_23;
        goto LABEL_42;
      }
      --*v32;
    }
    if (v31)
    {
LABEL_23:
      v33 = v14 + 41952;
      JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1736), 0, 0, 0, 0, v27, &v412, 0, 0);
      v41 = v416;
      if (!*((_DWORD *)v416 + 20))
        goto LABEL_27;
      v378 = *((_DWORD *)v416 + 20);
      if ((v378 & 0x27) != 0 && (v378 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
      if (!*((_QWORD *)v41 + 2))
      {
LABEL_27:
        if (!v412
          || (v42 = *((_DWORD *)v412 + 4),
              v43 = *((unsigned int *)v412 + 1),
              *(_QWORD *)&v423 = *((_QWORD *)v412 + 1),
              *((_QWORD *)&v423 + 1) = v43 | ((unint64_t)((v42 >> 2) & 1) << 32),
              (_DWORD)v43 != 4)
          && (v43 - 2) < 7
          && WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>((unsigned __int16 **)&v423))
        {
          JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)v33 + 2240), 0, 0, 0, 0, v40, &v411, 0, 0);
          v44 = (uint64_t)v416;
          if (*((_DWORD *)v416 + 20))
          {
            v379 = *((_DWORD *)v416 + 20);
            if ((v379 & 0x27) != 0 && (v379 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
            if (*(_QWORD *)(v44 + 16))
              goto LABEL_410;
          }
          if (v411)
          {
            v45 = *((_DWORD *)v411 + 4);
            v46 = *((unsigned int *)v411 + 1);
            *(_QWORD *)&v423 = *((_QWORD *)v411 + 1);
            *((_QWORD *)&v423 + 1) = v46 | ((unint64_t)((v45 >> 2) & 1) << 32);
            if ((_DWORD)v46 != 4
              || !WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>((unsigned __int16 **)&v423))
            {
              v47 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v47 = 0x2800000002;
              *(_QWORD *)(v47 + 8) = "script is not a well-formed script value";
              *(_DWORD *)(v47 + 16) = 4;
              *(_QWORD *)&v421 = v47;
              v49 = v12 + 128;
              v48 = *(_QWORD *)(v12 + 128);
              a1 = *(char **)(v12 + 56);
              if ((v48 & 1) == 0)
                goto LABEL_32;
              goto LABEL_452;
            }
          }
          JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)v33 + 2176), 0, 0, 0, 0, v40, &v410, 0, 0);
          v84 = v416;
          if (!*((_DWORD *)v416 + 20))
            goto LABEL_54;
          v384 = *((_DWORD *)v416 + 20);
          if ((v384 & 0x27) != 0 && (v384 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
          if (!*((_QWORD *)v84 + 2))
          {
LABEL_54:
            if (!v410
              || JSC::isUnicodeRegionSubtag(*((unsigned __int16 **)v410 + 1), (unsigned __int16 *)(*((unsigned int *)v410 + 1) | ((unint64_t)((*((_DWORD *)v410 + 4) >> 2) & 1) << 32))))
            {
              if (v412)
              {
                v85 = *((_QWORD *)v412 + 1);
                v86 = (*((unsigned __int8 *)v412 + 16) >> 2) & 1;
                v87 = v411;
                __dst = *((_DWORD *)v412 + 1);
                if (!v411)
                {
                  v88 = 0;
                  v89 = 1;
                  goto LABEL_66;
                }
              }
              else
              {
                v87 = v411;
                if (!v411)
                {
                  v103 = v410;
                  if (!v410)
                    goto LABEL_227;
                  LODWORD(v87) = 0;
                  v88 = 0;
                  v85 = 0;
                  __dst = 0;
                  v89 = 1;
                  LOBYTE(v86) = 1;
                  goto LABEL_67;
                }
                __dst = 0;
                v85 = 0;
                LOBYTE(v86) = 1;
              }
              v102 = *((unsigned __int8 *)v87 + 16);
              v88 = *((_QWORD *)v87 + 1);
              LODWORD(v87) = *((_DWORD *)v87 + 1);
              v89 = (v102 >> 2) & 1;
LABEL_66:
              v103 = v410;
              if (!v410)
              {
                v105 = 0;
                v106 = 1;
LABEL_68:
                v405 = v33;
                *(_QWORD *)&v421 = v88;
                *((_QWORD *)&v421 + 1) = v87 | (unint64_t)(v89 << 32);
                *(_QWORD *)&v420 = v105;
                *((_QWORD *)&v420 + 1) = v103 | (unint64_t)(v106 << 32);
                v44 = (uint64_t)__s;
                v107 = strlen(__s);
                v111 = v107;
                v49 = HIDWORD(v414);
                if (v107 > (unint64_t)HIDWORD(v414))
                {
LABEL_451:
                  __break(1u);
LABEL_452:
                  v380 = *(uint64_t (**)(__int128 *))(v48 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v12 & 8) != 0)
                    v381 = (_QWORD *)(v12 - 16);
                  else
                    v381 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                  *(_QWORD *)&v423 = *v381;
                  *((_QWORD *)&v423 + 1) = v12;
                  *(_QWORD *)&v424 = v49;
                  v48 = v380(&v423);
LABEL_32:
                  v50 = JSC::ErrorInstance::create((JSC::Heap **)a1, v48, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
                  v57 = (JSC::Exception *)v50;
                  if ((v50 & v15) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C)))
                  {
                    v57 = (JSC::Exception *)JSC::Exception::create(v44, (JSC::VM *)v50, 0, v51, v52, v53, v54, v55);
                  }
                  JSC::VM::throwException((JSC::VM *)v44, (JSC::JSGlobalObject *)v12, v57, v56, v51, v52, v53, v54, v55);
                  v58 = (WTF::StringImpl *)v421;
                  *(_QWORD *)&v421 = 0;
                  if (v58)
                  {
LABEL_408:
                    if (*(_DWORD *)v58 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v58, v34, v35, v36, v37, v38, v39, v40);
                      WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
                    }
                    else
                    {
                      *(_DWORD *)v58 -= 2;
                    }
                  }
LABEL_410:
                  v70 = v411;
                  v411 = 0;
                  if (!v70)
                    goto LABEL_413;
                  goto LABEL_411;
                }
                v112 = v107;
                if (v107)
                {
                  v113 = 16;
                  if (v107 < 0x10uLL)
                    v113 = v107;
                  v114 = v113;
                  v115 = __s;
                  while (*v115 != 64)
                  {
                    ++v115;
                    if (!--v114)
                    {
                      if (v111 < 0x11)
                        goto LABEL_76;
                      v115 = memchr(&__s[v113], 64, v111 - v113);
                      if (!v115)
                        goto LABEL_76;
                      break;
                    }
                  }
                  v116 = &v115[-v44];
                  if (&v115[-v44] != (_BYTE *)-1)
                    goto LABEL_77;
                }
LABEL_76:
                v116 = (_BYTE *)v111;
LABEL_77:
                v406 = v111;
                v418 = 0;
                v419 = 0;
                v117 = v116;
                v118 = 0x100000000;
                v119 = "";
                v402 = v117;
                v120 = v117 | 0x100000000;
                if (v112 <= v117)
                  v120 = v111 | 0x100000000;
                v401 = v112;
                if (v112)
                {
                  v119 = (const char *)v44;
                  v118 = v120;
                }
                *(_QWORD *)&v423 = v119;
                *((_QWORD *)&v423 + 1) = v118;
                LOWORD(v424) = 95;
                BYTE2(v424) = 1;
                v121 = WTF::StringView::find((uint64_t)&v423, 0x5Fu, 0, v108, v109, v110);
                v403 = a1;
                v404 = v12;
                v400 = v44;
                v15 = 0;
                if (v121 == -1)
                {
LABEL_85:
                  v130 = DWORD2(v423);
                  v44 = (DWORD2(v423) - v15);
                  if (DWORD2(v423) == (_DWORD)v15 && !BYTE2(v424))
                    goto LABEL_119;
                }
                else
                {
                  while (v121 <= v15 && !BYTE2(v424))
                  {
                    v15 = (v15 + 1);
                    v121 = WTF::StringView::find((uint64_t)&v423, (unsigned __int16)v424, v15, v127, v128, v129);
                    if (v121 == -1)
                      goto LABEL_85;
                  }
                  v44 = (v121 - v15);
                  v130 = DWORD2(v423);
                }
                v12 = 0;
                a1 = "";
                do
                {
                  if (DWORD2(v423) <= v15)
                  {
                    v49 = 0x100000000;
                    v132 = (WTF::StringImpl *)"";
                  }
                  else
                  {
                    LODWORD(v49) = v44;
                    if (DWORD2(v423) - (int)v15 > v44 || (LODWORD(v49) = DWORD2(v423) - v15, (_DWORD)v15))
                    {
                      v49 = v49;
                      v131 = DWORD2(v423) - (unint64_t)v15;
                      if (BYTE12(v423))
                      {
                        if (v131 < v49)
                          goto LABEL_451;
                        v132 = (WTF::StringImpl *)(v423 + v15);
                        v49 = v49 | 0x100000000;
                      }
                      else
                      {
                        if (v131 < v49)
                          goto LABEL_451;
                        v132 = (WTF::StringImpl *)(v423 + 2 * v15);
                      }
                    }
                    else
                    {
                      v49 = *((_QWORD *)&v423 + 1);
                      v132 = (WTF::StringImpl *)v423;
                    }
                  }
                  v417[0] = v132;
                  v417[1] = (WTF::StringImpl *)v49;
                  v133 = HIDWORD(v419);
                  if (HIDWORD(v419) == (_DWORD)v419)
                  {
                    v134 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v418, HIDWORD(v419) + 1, (unint64_t)v417);
                    v133 = HIDWORD(v419);
                    v135 = v418;
                    v136 = *v134;
                  }
                  else
                  {
                    v135 = v418;
                    v136 = *(_OWORD *)v417;
                  }
                  *((_OWORD *)v135 + v133) = v136;
                  ++HIDWORD(v419);
                  v15 = (v15 + v44);
                  if (v15 >= DWORD2(v423))
                  {
                    v12 = 1;
                  }
                  else
                  {
                    while (1)
                    {
                      v137 = v15;
                      v15 = (v15 + 1);
                      v138 = WTF::StringView::find((uint64_t)&v423, (unsigned __int16)v424, v15, *(double *)&v136, v128, v129);
                      if (v138 == -1)
                        break;
                      if (v138 > v15 || BYTE2(v424) != 0)
                      {
                        v44 = (v138 - v15);
                        v15 = (v137 + 1);
                        goto LABEL_117;
                      }
                    }
                    v44 = (DWORD2(v423) - 1 - v137);
                    if (BYTE2(v424))
                      v140 = 0;
                    else
                      v140 = DWORD2(v423) - 1 == v137;
                    if (v140)
                      v12 = 1;
                    else
                      v12 = v12;
                  }
LABEL_117:
                  ;
                }
                while ((_DWORD)v15 != v130 || !(_BYTE)v12);
LABEL_119:
                if (v85)
                {
                  if (!HIDWORD(v419))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19895C2E4);
                  }
                  v141 = v418;
                  *(_QWORD *)v418 = v85;
                  *((_DWORD *)v141 + 2) = __dst;
                  *((_BYTE *)v141 + 12) = v86;
                }
                v142 = HIDWORD(v419);
                if (HIDWORD(v419) < 2)
                {
                  v145 = v421;
                  if ((_QWORD)v421)
                    goto LABEL_127;
                }
                else
                {
                  v143 = v418;
                  v144 = *((_DWORD *)v418 + 6);
                  v145 = v144 == 4;
                  if ((_QWORD)v421)
                  {
                    if (v144 == 4)
                    {
                      *((_QWORD *)v418 + 2) = v421;
                      *(_QWORD *)((char *)v143 + 21) = *(_QWORD *)((char *)&v421 + 5);
LABEL_131:
                      v145 = 1;
                      goto LABEL_132;
                    }
LABEL_127:
                    if (HIDWORD(v419) == (_DWORD)v419)
                    {
                      v146 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v418, HIDWORD(v419) + 1, (unint64_t)&v421);
                      v142 = HIDWORD(v419);
                    }
                    else
                    {
                      v146 = &v421;
                    }
                    v147 = v418;
                    memmove((char *)v418 + 32, (char *)v418 + 16, 16 * v142 - 16);
                    *((_OWORD *)v147 + 1) = *v146;
                    LODWORD(v142) = v142 + 1;
                    HIDWORD(v419) = v142;
                    goto LABEL_131;
                  }
                }
LABEL_132:
                if ((_QWORD)v420)
                {
                  if (v145)
                    v148 = 2;
                  else
                    v148 = 1;
                  if (v148 >= v142 || (v149 = (char *)v418 + 16 * v148, *((_DWORD *)v149 + 2) > 3u))
                  {
                    v151 = v142;
                    if ((_DWORD)v142 == (_DWORD)v419)
                    {
                      v152 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v418, v142 + 1, (unint64_t)&v420);
                      v151 = HIDWORD(v419);
                    }
                    else
                    {
                      v152 = &v420;
                    }
                    v153 = (__int128 *)((char *)v418 + 16 * v148);
                    memmove(v153 + 1, v153, 16 * v151 - 16 * v148);
                    *v153 = *v152;
                    LODWORD(v142) = ++HIDWORD(v419);
                  }
                  else
                  {
                    v150 = v420;
                    *(_QWORD *)(v149 + 5) = *(_QWORD *)((char *)&v420 + 5);
                    *(_QWORD *)v149 = v150;
                    LODWORD(v142) = HIDWORD(v419);
                  }
                }
                *(_QWORD *)&v423 = &v424;
                *((_QWORD *)&v423 + 1) = 32;
                v15 = 0;
                if ((_DWORD)v142)
                {
                  v154 = 0;
                  v155 = v418;
                  v156 = (WTF *)((char *)v418 + 16 * v142);
                  do
                  {
                    v157 = *(char **)v155;
                    v158 = *((unsigned int *)v155 + 2);
                    v159 = *((unsigned __int8 *)v155 + 12);
                    if ((v154 & 1) != 0)
                    {
                      LOBYTE(v417[0]) = 95;
                      if ((_DWORD)v15 == DWORD2(v423))
                      {
                        v176 = (_BYTE *)WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v423, (WTF *)(v15 + 1), (unint64_t)v417);
                        *(_BYTE *)(v423 + HIDWORD(v423)) = *v176;
                      }
                      else
                      {
                        *(_BYTE *)(v423 + v15) = 95;
                      }
                      v15 = ++HIDWORD(v423);
                    }
                    if (v159)
                    {
                      if ((_DWORD)v158)
                      {
                        v160 = v158 + v15;
                        if (v160 > DWORD2(v423))
                        {
                          v171 = DWORD2(v423) + ((unint64_t)DWORD2(v423) >> 2);
                          if (v171 >= 0x10)
                            v172 = v171 + 1;
                          else
                            v172 = 16;
                          if (v172 <= v160)
                            v173 = v158 + v15;
                          else
                            v173 = v172;
                          v174 = (__int128 *)v423;
                          if (v173 < 0x21)
                          {
                            *(_QWORD *)&v423 = &v424;
                            DWORD2(v423) = 32;
                            v175 = &v424;
                          }
                          else
                          {
                            if (HIDWORD(v173))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19895C2DCLL);
                            }
                            v175 = (__int128 *)WTF::fastMalloc((WTF *)v173);
                            DWORD2(v423) = v173;
                            *(_QWORD *)&v423 = v175;
                          }
                          memcpy(v175, v174, v15);
                          if (&v424 != v174 && v174)
                          {
                            if ((__int128 *)v423 == v174)
                            {
                              *(_QWORD *)&v423 = 0;
                              DWORD2(v423) = 0;
                            }
                            WTF::fastFree((unint64_t)v174, (void *)v48, v122, v123, v124, v125, v126, v40);
                          }
                        }
                        if (v160 < HIDWORD(v423))
                          goto LABEL_538;
                        v161 = (_BYTE *)(v423 + HIDWORD(v423));
                        do
                        {
                          v162 = *v157++;
                          *v161++ = v162;
                          --v158;
                        }
                        while (v158);
                        goto LABEL_172;
                      }
                    }
                    else if ((_DWORD)v158)
                    {
                      v160 = v158 + v15;
                      if (v160 > DWORD2(v423))
                      {
                        v163 = DWORD2(v423) + ((unint64_t)DWORD2(v423) >> 2);
                        if (v163 >= 0x10)
                          v164 = v163 + 1;
                        else
                          v164 = 16;
                        if (v164 <= v160)
                          v165 = v158 + v15;
                        else
                          v165 = v164;
                        v166 = (__int128 *)v423;
                        if (v165 < 0x21)
                        {
                          *(_QWORD *)&v423 = &v424;
                          DWORD2(v423) = 32;
                          v167 = &v424;
                        }
                        else
                        {
                          if (HIDWORD(v165))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19895C2D4);
                          }
                          v167 = (__int128 *)WTF::fastMalloc((WTF *)v165);
                          DWORD2(v423) = v165;
                          *(_QWORD *)&v423 = v167;
                        }
                        memcpy(v167, v166, v15);
                        if (&v424 != v166 && v166)
                        {
                          if ((__int128 *)v423 == v166)
                          {
                            *(_QWORD *)&v423 = 0;
                            DWORD2(v423) = 0;
                          }
                          WTF::fastFree((unint64_t)v166, (void *)v48, v122, v123, v124, v125, v126, v40);
                        }
                      }
                      if (v160 < HIDWORD(v423))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19895C2CCLL);
                      }
                      v168 = (_BYTE *)(v423 + HIDWORD(v423));
                      v169 = 2 * v158;
                      do
                      {
                        v170 = *v157;
                        v157 += 2;
                        *v168++ = v170;
                        v169 -= 2;
                      }
                      while (v169);
LABEL_172:
                      HIDWORD(v423) = v160;
                      v15 = v160;
                    }
                    v155 = (WTF *)((char *)v155 + 16);
                    v154 = 1;
                  }
                  while (v155 != v156);
                }
                if (v402 == (_BYTE *)v406)
                {
                  a1 = v403;
                  v12 = v404;
                  goto LABEL_207;
                }
                v177 = v401 - (_DWORD)v402;
                v49 = v402;
                a1 = v403;
                v12 = v404;
                if (v402 >= v401)
                {
LABEL_207:
                  LOBYTE(v417[0]) = 0;
                  if ((_DWORD)v15 == DWORD2(v423))
                  {
                    v391 = (_BYTE *)WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v423, (WTF *)(v15 + 1), (unint64_t)v417);
                    *(_BYTE *)(v423 + HIDWORD(v423)) = *v391;
                  }
                  else
                  {
                    *(_BYTE *)(v423 + v15) = 0;
                  }
                  v182 = ++HIDWORD(v423);
                  v183 = HIDWORD(v414);
                  v184 = __s;
                  if (__s == v415)
                  {
                    if ((__int128 *)v423 != &v424)
                    {
                      __s = (char *)v423;
                      *(_QWORD *)&v423 = &v424;
                      v414 = __PAIR64__(v182, DWORD2(v423));
LABEL_225:
                      v192 = v418;
                      v33 = v405;
                      if (v418)
                      {
                        v418 = 0;
                        LODWORD(v419) = 0;
                        WTF::fastFree((unint64_t)v192, (void *)v48, v122, v123, v124, v125, v126, v40);
                      }
LABEL_227:
                      JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)v33 + 968), 0, 0, 0, 0, v40, &v420, 0, 0);
                      v193 = v416;
                      if (*((_DWORD *)v416 + 20))
                      {
                        v385 = *((_DWORD *)v416 + 20);
                        if ((v385 & 0x27) != 0 && (v385 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                        if (*((_QWORD *)v193 + 2))
                        {
LABEL_404:
                          v101 = (WTF::StringImpl *)v420;
                          *(_QWORD *)&v420 = 0;
                          if (!v101)
                            goto LABEL_407;
                          goto LABEL_405;
                        }
                      }
                      if ((_QWORD)v420)
                      {
                        v194 = *(unsigned int *)(v420 + 4);
                        v195 = *(_QWORD *)(v420 + 8);
                        v196 = v195;
                        v197 = ((unint64_t)*(unsigned int *)(v420 + 16) >> 2) & 1;
                        if ((_DWORD)v197)
                        {
                          if ((_DWORD)v194)
                          {
                            v195 = *(_QWORD *)(v420 + 8);
                            v196 = *(unsigned int *)(v420 + 4);
                            while (1)
                            {
                              v198 = 0;
                              while (1)
                              {
                                v199 = *(unsigned __int8 *)(v195 + v198);
                                if ((v199 - 48) >= 0xA && (v199 | 0x20u) - 97 > 0x19)
                                  break;
                                if (v196 == ++v198)
                                {
                                  LODWORD(v196) = v195 + v196;
                                  goto LABEL_260;
                                }
                              }
                              if (v199 != 45 || (v198 - 3) >= 6)
                                goto LABEL_282;
                              v202 = v196 - 1;
                              v196 += ~v198;
                              v195 += v198 + 1;
                              if (v202 == v198)
                              {
                                LODWORD(v196) = v195;
                                break;
                              }
                            }
                          }
LABEL_260:
                          if ((v196 - v195 - 3) >= 6)
                            goto LABEL_282;
                        }
                        else
                        {
                          if ((_DWORD)v194)
                          {
                            v195 = *(_QWORD *)(v420 + 8);
                            v203 = *(unsigned int *)(v420 + 4);
                            while (1)
                            {
                              v204 = 0;
                              v205 = -2;
                              while (1)
                              {
                                v206 = *(unsigned __int16 *)(v195 + 2 * v204);
                                if ((v206 - 48) >= 0xA && (v206 | 0x20u) - 97 > 0x19)
                                  break;
                                v205 -= 2;
                                if (v203 == ++v204)
                                {
                                  v196 = v195 + 2 * v203;
                                  goto LABEL_262;
                                }
                              }
                              if (v206 != 45 || (v204 - 3) >= 6)
                                break;
                              v209 = v203 - 1;
                              v203 += ~v204;
                              v195 -= v205;
                              if (v209 == v204)
                              {
                                v196 = v195;
                                goto LABEL_262;
                              }
                            }
LABEL_282:
                            v220 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v220 = 0x2C00000002;
                            *(_QWORD *)(v220 + 8) = "calendar is not a well-formed calendar value";
                            *(_DWORD *)(v220 + 16) = 4;
                            *(_QWORD *)&v421 = v220;
                            v221 = *(_QWORD *)(v12 + 128);
                            v222 = *(JSC::Heap ***)(v12 + 56);
                            if ((v221 & 1) != 0)
                            {
                              v387 = *(uint64_t (**)(__int128 *))(v221 & 0xFFFFFFFFFFFFFFFCLL);
                              if ((v12 & 8) != 0)
                                v388 = (_QWORD *)(v12 - 16);
                              else
                                v388 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                              *(_QWORD *)&v423 = *v388;
                              *((_QWORD *)&v423 + 1) = v12;
                              *(_QWORD *)&v424 = v12 + 128;
                              v221 = v387(&v423);
                            }
                            v223 = JSC::ErrorInstance::create(v222, v221, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
                            v230 = (JSC::Exception *)v223;
                            if ((v223 & 0xFFFE000000000002) != 0
                              || &JSC::Exception::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v223 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
                            {
                              v230 = (JSC::Exception *)JSC::Exception::create((uint64_t)v193, (JSC::VM *)v223, 0, v224, v225, v226, v227, v228);
                            }
                            JSC::VM::throwException(v193, (JSC::JSGlobalObject *)v12, v230, v229, v224, v225, v226, v227, v228);
                            v231 = (WTF *)v421;
                            *(_QWORD *)&v421 = 0;
                            if (!v231)
                              goto LABEL_404;
LABEL_402:
                            if (*(_DWORD *)v231 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v231, v34, v35, v36, v37, v38, v39, v40);
                              WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
                            }
                            else
                            {
                              *(_DWORD *)v231 -= 2;
                            }
                            goto LABEL_404;
                          }
LABEL_262:
                          if (((unint64_t)(v196 - v195) >> 1) - 3 > 5)
                            goto LABEL_282;
                        }
                        if ((JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"calendar", 9, *(_BYTE **)(v420 + 8), v194 | (v197 << 32)) & 1) == 0)goto LABEL_282;
                      }
                      JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)v33 + 1024), 0, 0, 0, 0, v40, &v418, 0, 0);
                      v210 = v416;
                      if (*((_DWORD *)v416 + 20))
                      {
                        v386 = *((_DWORD *)v416 + 20);
                        if ((v386 & 0x27) != 0 && (v386 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                        if (*((_QWORD *)v210 + 2))
                        {
LABEL_401:
                          v231 = v418;
                          v418 = 0;
                          if (!v231)
                            goto LABEL_404;
                          goto LABEL_402;
                        }
                      }
                      if (v418)
                      {
                        v211 = *((unsigned int *)v418 + 1);
                        v212 = *((_QWORD *)v418 + 1);
                        v213 = v212;
                        v214 = ((unint64_t)*((unsigned int *)v418 + 4) >> 2) & 1;
                        if ((_DWORD)v214)
                        {
                          if ((_DWORD)v211)
                          {
                            v212 = *((_QWORD *)v418 + 1);
                            v213 = *((unsigned int *)v418 + 1);
                            while (1)
                            {
                              v215 = 0;
                              while (1)
                              {
                                v216 = *(unsigned __int8 *)(v212 + v215);
                                if ((v216 - 48) >= 0xA && (v216 | 0x20u) - 97 > 0x19)
                                  break;
                                if (v213 == ++v215)
                                {
                                  LODWORD(v213) = v212 + v213;
                                  goto LABEL_302;
                                }
                              }
                              if (v216 != 45 || (v215 - 3) >= 6)
                                goto LABEL_316;
                              v219 = v213 - 1;
                              v213 += ~v215;
                              v212 += v215 + 1;
                              if (v219 == v215)
                              {
                                LODWORD(v213) = v212;
                                break;
                              }
                            }
                          }
LABEL_302:
                          if ((v213 - v212 - 3) >= 6)
                            goto LABEL_316;
                        }
                        else
                        {
                          if ((_DWORD)v211)
                          {
                            v212 = *((_QWORD *)v418 + 1);
                            v232 = *((unsigned int *)v418 + 1);
                            while (1)
                            {
                              v233 = 0;
                              v234 = -2;
                              while (1)
                              {
                                v235 = *(unsigned __int16 *)(v212 + 2 * v233);
                                if ((v235 - 48) >= 0xA && (v235 | 0x20u) - 97 > 0x19)
                                  break;
                                v234 -= 2;
                                if (v232 == ++v233)
                                {
                                  v213 = v212 + 2 * v232;
                                  goto LABEL_304;
                                }
                              }
                              if (v235 != 45 || (v233 - 3) >= 6)
                                break;
                              v238 = v232 - 1;
                              v232 += ~v233;
                              v212 -= v234;
                              if (v238 == v233)
                              {
                                v213 = v212;
                                goto LABEL_304;
                              }
                            }
LABEL_316:
                            v248 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v248 = 0x2E00000002;
                            *(_QWORD *)(v248 + 8) = "collation is not a well-formed collation value";
                            *(_DWORD *)(v248 + 16) = 4;
                            *(_QWORD *)&v421 = v248;
                            v249 = *(_QWORD *)(v12 + 128);
                            v250 = *(JSC::Heap ***)(v12 + 56);
                            if ((v249 & 1) != 0)
                            {
                              v396 = *(uint64_t (**)(__int128 *))(v249 & 0xFFFFFFFFFFFFFFFCLL);
                              if ((v12 & 8) != 0)
                                v397 = (_QWORD *)(v12 - 16);
                              else
                                v397 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                              *(_QWORD *)&v423 = *v397;
                              *((_QWORD *)&v423 + 1) = v12;
                              *(_QWORD *)&v424 = v12 + 128;
                              v249 = v396(&v423);
                            }
                            v251 = JSC::ErrorInstance::create(v250, v249, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
                            v258 = (JSC::Exception *)v251;
                            if ((v251 & 0xFFFE000000000002) != 0
                              || &JSC::Exception::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v251 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
                            {
                              v258 = (JSC::Exception *)JSC::Exception::create((uint64_t)v210, (JSC::VM *)v251, 0, v252, v253, v254, v255, v256);
                            }
                            JSC::VM::throwException(v210, (JSC::JSGlobalObject *)v12, v258, v257, v252, v253, v254, v255, v256);
                            v259 = (WTF::StringImpl *)v421;
                            *(_QWORD *)&v421 = 0;
                            if (!v259)
                              goto LABEL_401;
LABEL_399:
                            if (*(_DWORD *)v259 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v259, v34, v35, v36, v37, v38, v39, v40);
                              WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
                            }
                            else
                            {
                              *(_DWORD *)v259 -= 2;
                            }
                            goto LABEL_401;
                          }
LABEL_304:
                          if (((unint64_t)(v213 - v212) >> 1) - 3 > 5)
                            goto LABEL_316;
                        }
                        if ((JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"collation", 10, *((_BYTE **)v418 + 1), v211 | (v214 << 32)) & 1) == 0)goto LABEL_316;
                      }
                      v239 = v33;
                      v240 = *(_QWORD *)(*(_QWORD *)v33 + 1512);
                      v423 = xmmword_1E359BE20;
                      v424 = *(_OWORD *)&off_1E359BE30;
                      v425 = xmmword_1E359BE40;
                      v426 = *(_OWORD *)&off_1E359BE50;
                      JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, v240, (unint64_t *)&v423, 4, (unint64_t)"hourCycle must be \"h11\", \"h12\", \"h23\", or \"h24\"", 48, v40, v417, 0, 0);
                      v241 = v416;
                      if (*((_DWORD *)v416 + 20))
                      {
                        v392 = *((_DWORD *)v416 + 20);
                        if ((v392 & 0x27) != 0 && (v392 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                        if (*((_QWORD *)v241 + 2))
                        {
LABEL_398:
                          v259 = v417[0];
                          v417[0] = 0;
                          if (!v259)
                            goto LABEL_401;
                          goto LABEL_399;
                        }
                      }
                      if (v417[0])
                        JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"hours", 6, *((_BYTE **)v417[0] + 1), *((unsigned int *)v417[0] + 1) | ((unint64_t)((*((_DWORD *)v417[0] + 4) >> 2) & 1) << 32));
                      v242 = *(_QWORD *)(*(_QWORD *)v239 + 1000);
                      v423 = xmmword_1E359BE60;
                      v424 = *(_OWORD *)&off_1E359BE70;
                      v425 = xmmword_1E359BE80;
                      JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, v242, (unint64_t *)&v423, 3, (unint64_t)"caseFirst must be either \"upper\", \"lower\", or \"false\"", 54, v40, &v409, 0, 0);
                      v243 = v416;
                      if (*((_DWORD *)v416 + 20))
                      {
                        v393 = *((_DWORD *)v416 + 20);
                        if ((v393 & 0x27) != 0 && (v393 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                        if (*((_QWORD *)v243 + 2))
                          goto LABEL_395;
                      }
                      if (v409)
                        JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"colcasefirst", 13, *((_BYTE **)v409 + 1), *((unsigned int *)v409 + 1) | ((unint64_t)((*((_DWORD *)v409 + 4) >> 2) & 1) << 32));
                      v244 = JSC::intlBooleanOption(v12, v16, *(_QWORD *)(*(_QWORD *)v239 + 2048), v36, v37, v38, v39, v40);
                      v245 = v416;
                      if (*((_DWORD *)v416 + 20))
                      {
                        v394 = *((_DWORD *)v416 + 20);
                        if ((v394 & 0x27) != 0 && (v394 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                        if (*((_QWORD *)v245 + 2))
                        {
LABEL_395:
                          v309 = v409;
                          v409 = 0;
                          if (v309)
                          {
                            if (*(_DWORD *)v309 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v309, v34, v35, v36, v37, v38, v39, v40);
                              WTF::fastFree(v359, v360, v361, v362, v363, v364, v365, v366);
                            }
                            else
                            {
                              *(_DWORD *)v309 -= 2;
                            }
                          }
                          goto LABEL_398;
                        }
                      }
                      if (v244 == 1)
                      {
                        v246 = "yes";
                        v247 = 4;
                      }
                      else
                      {
                        if (v244 == 2)
                        {
LABEL_323:
                          JSC::intlStringOption((JSC::JSGlobalObject *)v12, v16, *(_QWORD *)(*(_QWORD *)v239 + 2040), 0, 0, 0, 0, v40, &v408, 0, 0);
                          v260 = v416;
                          if (*((_DWORD *)v416 + 20))
                          {
                            v395 = *((_DWORD *)v416 + 20);
                            if ((v395 & 0x27) != 0 && (v395 & 0x20) == 0)
                              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v416 + 64), 7u, v35, v36, v37, v38, v39, v40);
                            if (*((_QWORD *)v260 + 2))
                              goto LABEL_392;
                          }
                          if (v408)
                          {
                            v261 = *((unsigned int *)v408 + 1);
                            v262 = *((_QWORD *)v408 + 1);
                            v263 = v262;
                            v264 = ((unint64_t)*((unsigned int *)v408 + 4) >> 2) & 1;
                            if ((_DWORD)v264)
                            {
                              if ((_DWORD)v261)
                              {
                                v262 = *((_QWORD *)v408 + 1);
                                v263 = *((unsigned int *)v408 + 1);
                                while (1)
                                {
                                  v265 = 0;
                                  while (1)
                                  {
                                    v266 = *(unsigned __int8 *)(v262 + v265);
                                    if ((v266 - 48) >= 0xA && (v266 | 0x20u) - 97 > 0x19)
                                      break;
                                    if (v263 == ++v265)
                                    {
                                      LODWORD(v263) = v262 + v263;
                                      goto LABEL_356;
                                    }
                                  }
                                  if (v266 != 45 || (v265 - 3) >= 6)
                                    goto LABEL_365;
                                  v269 = v263 - 1;
                                  v263 += ~v265;
                                  v262 += v265 + 1;
                                  if (v269 == v265)
                                  {
                                    LODWORD(v263) = v262;
                                    break;
                                  }
                                }
                              }
LABEL_356:
                              if ((v263 - v262 - 3) >= 6)
                              {
LABEL_365:
                                v281 = WTF::fastCompactMalloc((WTF *)0x20);
                                *(_QWORD *)v281 = 0x3B00000002;
                                *(_QWORD *)(v281 + 8) = "numberingSystem is not a well-formed numbering system value";
                                *(_DWORD *)(v281 + 16) = 4;
                                *(_QWORD *)&v421 = v281;
                                v282 = *(_QWORD *)(v12 + 128);
                                v283 = *(JSC::Heap ***)(v12 + 56);
                                if ((v282 & 1) != 0)
                                {
                                  v398 = *(uint64_t (**)(__int128 *))(v282 & 0xFFFFFFFFFFFFFFFCLL);
                                  if ((v12 & 8) != 0)
                                    v399 = (_QWORD *)(v12 - 16);
                                  else
                                    v399 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                                  *(_QWORD *)&v423 = *v399;
                                  *((_QWORD *)&v423 + 1) = v12;
                                  *(_QWORD *)&v424 = v12 + 128;
                                  v282 = v398(&v423);
                                }
                                v284 = JSC::ErrorInstance::create(v283, v282, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
                                v291 = (JSC::Exception *)v284;
                                if ((v284 & 0xFFFE000000000002) != 0
                                  || &JSC::Exception::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v284 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
                                {
                                  v291 = (JSC::Exception *)JSC::Exception::create((uint64_t)v260, (JSC::VM *)v284, 0, v285, v286, v287, v288, v289);
                                }
                                JSC::VM::throwException(v260, (JSC::JSGlobalObject *)v12, v291, v290, v285, v286, v287, v288, v289);
                                v292 = (WTF::StringImpl *)v421;
                                *(_QWORD *)&v421 = 0;
                                if (v292)
                                {
                                  if (*(_DWORD *)v292 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v292, v34, v35, v36, v37, v38, v39, v40);
                                    WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v292 -= 2;
                                  }
                                }
LABEL_392:
                                v308 = v408;
                                v408 = 0;
                                if (v308)
                                {
                                  if (*(_DWORD *)v308 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v308, v34, v35, v36, v37, v38, v39, v40);
                                    WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v308 -= 2;
                                  }
                                }
                                goto LABEL_395;
                              }
                            }
                            else
                            {
                              if ((_DWORD)v261)
                              {
                                v262 = *((_QWORD *)v408 + 1);
                                v270 = *((unsigned int *)v408 + 1);
                                while (1)
                                {
                                  v271 = 0;
                                  v272 = -2;
                                  while (1)
                                  {
                                    v273 = *(unsigned __int16 *)(v262 + 2 * v271);
                                    if ((v273 - 48) >= 0xA && (v273 | 0x20u) - 97 > 0x19)
                                      break;
                                    v272 -= 2;
                                    if (v270 == ++v271)
                                    {
                                      v263 = v262 + 2 * v270;
                                      goto LABEL_358;
                                    }
                                  }
                                  if (v273 != 45 || (v271 - 3) >= 6)
                                    goto LABEL_365;
                                  v276 = v270 - 1;
                                  v270 += ~v271;
                                  v262 -= v272;
                                  if (v276 == v271)
                                  {
                                    v263 = v262;
                                    break;
                                  }
                                }
                              }
LABEL_358:
                              if (((unint64_t)(v263 - v262) >> 1) - 3 > 5)
                                goto LABEL_365;
                            }
                            if ((JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"numbers", 8, *((_BYTE **)v408 + 1), v261 | (v264 << 32)) & 1) == 0)goto LABEL_365;
                          }
                          JSC::canonicalizeLocaleIDWithoutNullTerminator((uint64_t)&v423);
                          if ((_BYTE)v426)
                          {
                            JSC::canonicalizeUnicodeExtensionsAfterICULocaleCanonicalization((uint64_t)&v423, (uint64_t)&v421);
                            v277 = (const void *)v421;
                            if ((_QWORD)v421)
                            {
                              v278 = HIDWORD(v421);
                              v279 = WTF::fastMalloc((WTF *)(HIDWORD(v421) + 17));
                              *(_DWORD *)v279 = 1;
                              *(_QWORD *)(v279 + 8) = v278;
                              memcpy((void *)(v279 + 16), v277, v278);
                              *(_BYTE *)(v279 + 16 + v278) = 0;
                              v280 = v421;
                              if (&v422 != (uint64_t *)v421 && (_QWORD)v421)
                              {
                                *(_QWORD *)&v421 = 0;
                                DWORD2(v421) = 0;
                                WTF::fastFree(v280, v34, v35, v36, v37, v38, v39, v40);
                              }
                            }
                            else
                            {
                              v279 = 0;
                            }
                            if ((_BYTE)v426)
                            {
                              v293 = v423;
                              if (&v424 != (__int128 *)v423)
                              {
                                if ((_QWORD)v423)
                                {
                                  *(_QWORD *)&v423 = 0;
                                  DWORD2(v423) = 0;
                                  WTF::fastFree(v293, v34, v35, v36, v37, v38, v39, v40);
                                }
                              }
                            }
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v294 = (_DWORD *)*((_QWORD *)a1 + 2);
                          *((_QWORD *)a1 + 2) = v279;
                          if (v294)
                          {
                            if (*v294 == 1)
                              WTF::fastFree((unint64_t)v294, v34, v35, v36, v37, v38, v39, v40);
                            else
                              --*v294;
                            v279 = *((_QWORD *)a1 + 2);
                          }
                          if (!v279)
                            JSC::throwTypeError(v12, &v416, (uint64_t)"failed to initialize Locale", 28);
                          goto LABEL_392;
                        }
                        v246 = "no";
                        v247 = 3;
                      }
                      JSC::LocaleIDBuilder::setKeywordValue((uint64_t)&__s, (uint64_t)"colnumeric", 11, v246, (v247 - 1) | 0x100000000);
                      goto LABEL_323;
                    }
                    if (v182 >= HIDWORD(v414))
                      v185 = HIDWORD(v414);
                    else
                      v185 = v182;
                    if (v185)
                    {
                      v186 = v415;
                      v187 = &v424;
                      v188 = v185;
                      do
                      {
                        v189 = *v186;
                        *v186++ = *(_BYTE *)v187;
                        *(_BYTE *)v187 = v189;
                        v187 = (__int128 *)((char *)v187 + 1);
                        --v188;
                      }
                      while (v188);
                    }
                    v190 = &v415[v185];
                    v191 = (char *)&v424 + v185;
                    memcpy((char *)&v424 + v185, &v415[v185], v183 - v185);
                    memcpy(v190, v191, (char *)&v424 + v182 - v191);
                    LODWORD(v183) = HIDWORD(v414);
                    LODWORD(v182) = HIDWORD(v423);
                    v184 = (char *)v423;
                  }
                  else if ((__int128 *)v423 == &v424)
                  {
                    __s = v415;
                    memcpy(v415, &v424, v182);
                  }
                  else
                  {
                    __s = (char *)v423;
                  }
                  v414 = __PAIR64__(v182, DWORD2(v423));
                  HIDWORD(v423) = v183;
                  if (&v424 != (__int128 *)v184 && v184)
                  {
                    *(_QWORD *)&v423 = 0;
                    DWORD2(v423) = 0;
                    WTF::fastFree((unint64_t)v184, (void *)v48, v122, v123, v124, v125, v126, v40);
                  }
                  goto LABEL_225;
                }
                v44 = v400;
                if (v401 == v177)
                {
LABEL_201:
                  if (v406)
                  {
                    v178 = v406 + v15;
                    if (v178 > DWORD2(v423))
                    {
                      v295 = DWORD2(v423) + ((unint64_t)DWORD2(v423) >> 2);
                      if (v295 >= 0x10)
                        v296 = v295 + 1;
                      else
                        v296 = 16;
                      if (v296 <= v178)
                        v297 = v406 + v15;
                      else
                        v297 = v296;
                      v298 = (__int128 *)v423;
                      if (v297 < 0x21)
                      {
                        *(_QWORD *)&v423 = &v424;
                        DWORD2(v423) = 32;
                        v299 = &v424;
                      }
                      else
                      {
                        if (HIDWORD(v297))
                        {
LABEL_538:
                          __break(0xC471u);
                          JUMPOUT(0x19895C2C4);
                        }
                        v299 = (__int128 *)WTF::fastMalloc((WTF *)v297);
                        DWORD2(v423) = v297;
                        *(_QWORD *)&v423 = v299;
                      }
                      memcpy(v299, v298, v15);
                      if (&v424 != v298 && v298)
                      {
                        if ((__int128 *)v423 == v298)
                        {
                          *(_QWORD *)&v423 = 0;
                          DWORD2(v423) = 0;
                        }
                        WTF::fastFree((unint64_t)v298, (void *)v48, v122, v123, v124, v125, v126, v40);
                      }
                    }
                    if (v178 < HIDWORD(v423))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19895C2F4);
                    }
                    v179 = (_BYTE *)(v423 + HIDWORD(v423));
                    v180 = v406;
                    do
                    {
                      v181 = *(_BYTE *)v44++;
                      *v179++ = v181;
                      --v180;
                    }
                    while (v180);
                    HIDWORD(v423) = v406 + v15;
                    LODWORD(v15) = v406 + v15;
                  }
                  goto LABEL_207;
                }
                if (v406 - v402 >= v177)
                {
                  v406 = v401 - v402;
                  v44 = v400 + v402;
                  goto LABEL_201;
                }
                goto LABEL_451;
              }
LABEL_67:
              v104 = *((unsigned int *)v103 + 4);
              v105 = *((_QWORD *)v103 + 1);
              LODWORD(v103) = *((_DWORD *)v103 + 1);
              v106 = (v104 >> 2) & 1;
              goto LABEL_68;
            }
            v90 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v90 = 0x2800000002;
            *(_QWORD *)(v90 + 8) = "region is not a well-formed region value";
            *(_DWORD *)(v90 + 16) = 4;
            *(_QWORD *)&v421 = v90;
            v91 = *(_QWORD *)(v12 + 128);
            v92 = *(JSC::Heap ***)(v12 + 56);
            if ((v91 & 1) != 0)
            {
              v389 = *(uint64_t (**)(__int128 *))(v91 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v12 & 8) != 0)
                v390 = (_QWORD *)(v12 - 16);
              else
                v390 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
              *(_QWORD *)&v423 = *v390;
              *((_QWORD *)&v423 + 1) = v12;
              *(_QWORD *)&v424 = v12 + 128;
              v91 = v389(&v423);
            }
            v93 = JSC::ErrorInstance::create(v92, v91, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
            v100 = (JSC::Exception *)v93;
            if ((v93 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C)))
            {
              v100 = (JSC::Exception *)JSC::Exception::create((uint64_t)v84, (JSC::VM *)v93, 0, v94, v95, v96, v97, v98);
            }
            JSC::VM::throwException(v84, (JSC::JSGlobalObject *)v12, v100, v99, v94, v95, v96, v97, v98);
            v101 = (WTF::StringImpl *)v421;
            *(_QWORD *)&v421 = 0;
            if (v101)
            {
LABEL_405:
              if (*(_DWORD *)v101 == 2)
              {
                WTF::StringImpl::~StringImpl(v101, v34, v35, v36, v37, v38, v39, v40);
                WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
              }
              else
              {
                *(_DWORD *)v101 -= 2;
              }
            }
          }
LABEL_407:
          v58 = v410;
          v410 = 0;
          if (!v58)
            goto LABEL_410;
          goto LABEL_408;
        }
        v59 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v59 = 0x2C00000002;
        *(_QWORD *)(v59 + 8) = "language is not a well-formed language value";
        *(_DWORD *)(v59 + 16) = 4;
        *(_QWORD *)&v421 = v59;
        v60 = *(_QWORD *)(v12 + 128);
        v61 = *(JSC::Heap ***)(v12 + 56);
        if ((v60 & 1) != 0)
        {
          v382 = *(uint64_t (**)(__int128 *))(v60 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v12 & 8) != 0)
            v383 = (_QWORD *)(v12 - 16);
          else
            v383 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)&v423 = *v383;
          *((_QWORD *)&v423 + 1) = v12;
          *(_QWORD *)&v424 = v12 + 128;
          v60 = v382(&v423);
        }
        v62 = JSC::ErrorInstance::create(v61, v60, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
        v69 = (JSC::Exception *)v62;
        if ((v62 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C)))
        {
          v69 = (JSC::Exception *)JSC::Exception::create((uint64_t)v41, (JSC::VM *)v62, 0, v63, v64, v65, v66, v67);
        }
        JSC::VM::throwException(v41, (JSC::JSGlobalObject *)v12, v69, v68, v63, v64, v65, v66, v67);
        v70 = (WTF::StringImpl *)v421;
        *(_QWORD *)&v421 = 0;
        if (v70)
        {
LABEL_411:
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
      }
LABEL_413:
      v82 = v412;
      v412 = 0;
      if (!v82)
        goto LABEL_416;
      goto LABEL_414;
    }
LABEL_42:
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0x1400000002;
    *(_QWORD *)(v71 + 8) = "invalid language tag";
    *(_DWORD *)(v71 + 16) = 4;
    *(_QWORD *)&v421 = v71;
    v72 = *(_QWORD *)(v12 + 128);
    v73 = *(JSC::Heap ***)(v12 + 56);
    if ((v72 & 1) != 0)
    {
      v376 = *(uint64_t (**)(__int128 *))(v72 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v12 & 8) != 0)
        v377 = (_QWORD *)(v12 - 16);
      else
        v377 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v423 = *v377;
      *((_QWORD *)&v423 + 1) = v12;
      *(_QWORD *)&v424 = v12 + 128;
      v72 = v376(&v423);
    }
    v74 = JSC::ErrorInstance::create(v73, v72, (WTF::StringImpl **)&v421, 0, 0, 0, 2, 1);
    v81 = (JSC::Exception *)v74;
    if ((v74 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C)))
    {
      v81 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v74, 0, v75, v76, v77, v78, v79);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)v12, v81, v80, v75, v76, v77, v78, v79);
    v82 = (WTF::StringImpl *)v421;
    *(_QWORD *)&v421 = 0;
    if (!v82)
      goto LABEL_416;
LABEL_414:
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
LABEL_416:
    v310 = __s;
    if (v415 != __s)
    {
      if (__s)
      {
        __s = 0;
        LODWORD(v414) = 0;
        WTF::fastFree((unint64_t)v310, v34, v35, v36, v37, v38, v39, v40);
      }
    }
  }
}

WTF::StringImpl **JSC::IntlLocale::maximal(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  int v3;
  int v4;
  int v5;
  int BaseName;
  int v7;
  int v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  size_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v39;
  WTF *v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  WTF *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  WTF *v107;
  WTF *v108;
  _BYTE *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  WTF *v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  WTF *v142;
  uint64_t v143;
  _BYTE v144[32];
  WTF::StringImpl *v145;
  uint64_t v146;
  _BYTE v147[32];
  WTF *v148;
  uint64_t v149;
  _BYTE v150[36];
  int v151;
  int v152[4];

  v1 = (WTF::StringImpl **)((char *)this + 24);
  if (*((_QWORD *)this + 3))
    return v1;
  v151 = 0;
  v148 = (WTF *)v150;
  v149 = 0x2000000020;
  v3 = uloc_addLikelySubtags();
  v4 = v151;
  if (v151 == 15 || v151 == -124)
  {
    v5 = v3 + 1;
    if (v149 < (unint64_t)(v3 + 1))
    {
      v104 = v149 + ((unint64_t)v149 >> 2);
      if (v104 >= 0x10)
        v105 = v104 + 1;
      else
        v105 = 16;
      if (v105 <= v5)
        v106 = v5;
      else
        v106 = v105;
      v107 = v148;
      if (v106 < 0x21)
      {
        v148 = (WTF *)v150;
        LODWORD(v149) = 32;
        v108 = (WTF *)v150;
      }
      else
      {
        if (HIDWORD(v106))
        {
          __break(0xC471u);
          JUMPOUT(0x19895CA78);
        }
        v108 = (WTF *)WTF::fastMalloc((WTF *)v106);
        LODWORD(v149) = v106;
        v148 = v108;
      }
      memcpy(v108, v107, HIDWORD(v149));
      if (v150 != (_BYTE *)v107 && v107)
      {
        if (v148 == v107)
        {
          v148 = 0;
          LODWORD(v149) = 0;
        }
        WTF::fastFree((unint64_t)v107, v115, v116, v117, v118, v119, v120, v121);
      }
    }
    HIDWORD(v149) = v5;
    v151 = 0;
    uloc_addLikelySubtags();
    v4 = v151;
  }
  if (v4 > 0)
  {
    v151 = 0;
    v145 = (WTF::StringImpl *)v147;
    v146 = 32;
    BaseName = uloc_getBaseName();
    if (v151 == 15 || v151 == -124)
    {
      v7 = BaseName + 1;
      if (v146 < (unint64_t)(BaseName + 1))
      {
        v110 = v146 + ((unint64_t)v146 >> 2);
        if (v110 >= 0x10)
          v111 = v110 + 1;
        else
          v111 = 16;
        if (v111 <= v7)
          v112 = v7;
        else
          v112 = v111;
        v113 = v145;
        if (v112 < 0x21)
        {
          v114 = (WTF::StringImpl *)v147;
          v145 = (WTF::StringImpl *)v147;
          LODWORD(v146) = 32;
        }
        else
        {
          if (HIDWORD(v112))
          {
            __break(0xC471u);
            JUMPOUT(0x19895CA80);
          }
          v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v112);
          LODWORD(v146) = v112;
          v145 = v114;
        }
        memcpy(v114, v113, HIDWORD(v146));
        if (v147 != (_BYTE *)v113 && v113)
        {
          if (v145 == v113)
          {
            v145 = 0;
            LODWORD(v146) = 0;
          }
          WTF::fastFree((unint64_t)v113, v122, v123, v124, v125, v126, v127, v128);
        }
      }
      HIDWORD(v146) = v7;
      v151 = 0;
      uloc_getBaseName();
    }
    v142 = (WTF *)v144;
    v143 = 0x2000000020;
    v152[0] = 0;
    v8 = uloc_addLikelySubtags();
    v16 = v8;
    if (v152[0] <= 0)
    {
      HIDWORD(v143) = v8;
      v151 = v152[0];
    }
    else
    {
      if (v152[0] != 15)
      {
        v151 = v152[0];
        goto LABEL_41;
      }
      v152[0] = 0;
      if (v143 < (unint64_t)v8)
      {
        v129 = v143 + ((unint64_t)v143 >> 2);
        if (v129 >= 0x10)
          v130 = v129 + 1;
        else
          v130 = 16;
        if (v130 <= v8)
          v131 = v8;
        else
          v131 = v130;
        v132 = v142;
        if (v131 < 0x21)
        {
          v142 = (WTF *)v144;
          LODWORD(v143) = 32;
          v133 = (WTF *)v144;
        }
        else
        {
          if (HIDWORD(v131))
            goto LABEL_139;
          v133 = (WTF *)WTF::fastMalloc((WTF *)v131);
          LODWORD(v143) = v131;
          v142 = v133;
        }
        memcpy(v133, v132, HIDWORD(v143));
        if (v144 != (_BYTE *)v132 && v132)
        {
          if (v142 == v132)
          {
            v142 = 0;
            LODWORD(v143) = 0;
          }
          WTF::fastFree((unint64_t)v132, v134, v135, v136, v137, v138, v139, v140);
        }
      }
      HIDWORD(v143) = v16;
      uloc_addLikelySubtags();
      v151 = v152[0];
      if (v152[0] > 0)
        goto LABEL_41;
      v16 = HIDWORD(v143);
    }
    v20 = v16;
    if (v16)
    {
      v21 = v142;
      v22 = v16;
      while (1)
      {
        v23 = *(unsigned __int8 *)v21;
        v21 = (WTF *)((char *)v21 + 1);
        if (v23 == 64)
          break;
        if (!--v22)
          goto LABEL_24;
      }
LABEL_41:
      v34 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      if (v34)
      {
LABEL_47:
        *(_DWORD *)v34 += 2;
LABEL_48:
        v37 = *v1;
        *v1 = v34;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::~StringImpl(v37, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
        v33 = v142;
        if (v144 != (_BYTE *)v142 && v142 != 0)
          goto LABEL_39;
        goto LABEL_56;
      }
      JSC::languageTagForLocaleID(0, v152);
      v34 = *(WTF::StringImpl **)v152;
      *(_QWORD *)v152 = 0;
      v35 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v34;
      if (!v35)
      {
LABEL_46:
        if (!v34)
          goto LABEL_48;
        goto LABEL_47;
      }
      v36 = *(_DWORD *)v35 - 2;
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        v35 = *(WTF::StringImpl **)v152;
        *(_QWORD *)v152 = 0;
        if (!v35)
          goto LABEL_45;
        v36 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          goto LABEL_45;
        }
      }
      *(_DWORD *)v35 = v36;
LABEL_45:
      v34 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      goto LABEL_46;
    }
LABEL_24:
    v24 = *((_QWORD *)this + 2);
    if (!v24)
      goto LABEL_32;
    v25 = *(_QWORD *)(v24 + 8);
    if (!v25)
      goto LABEL_32;
    v26 = v24 + 16;
    v27 = 16;
    if (v25 < 0x10)
      v27 = *(_QWORD *)(v24 + 8);
    v28 = v27;
    v29 = (char *)(v24 + 16);
    do
    {
      if (*v29 == 64)
        goto LABEL_71;
      ++v29;
      --v28;
    }
    while (v28);
    if (v25 < 0x11 || (v29 = (char *)memchr((void *)(v26 + v27), 64, v25 - v27)) == 0)
    {
LABEL_32:
      LOBYTE(v152[0]) = 0;
      if (v16 == (_DWORD)v143)
      {
        v109 = (_BYTE *)WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, (WTF *)(v16 + 1), (unint64_t)v152);
        *((_BYTE *)v142 + HIDWORD(v143)) = *v109;
      }
      else
      {
        *((_BYTE *)v142 + v16) = 0;
      }
      ++HIDWORD(v143);
      JSC::languageTagForLocaleID(0, v152);
      v30 = *(WTF::StringImpl **)v152;
      *(_QWORD *)v152 = 0;
      v31 = *v1;
      *v1 = v30;
      if (v31)
      {
        v32 = *(_DWORD *)v31 - 2;
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          v31 = *(WTF::StringImpl **)v152;
          *(_QWORD *)v152 = 0;
          if (!v31)
            goto LABEL_37;
          v32 = *(_DWORD *)v31 - 2;
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
            goto LABEL_37;
          }
        }
        *(_DWORD *)v31 = v32;
      }
LABEL_37:
      v33 = v142;
      if (v144 != (_BYTE *)v142 && v142)
      {
LABEL_39:
        v142 = 0;
        LODWORD(v143) = 0;
        WTF::fastFree((unint64_t)v33, v9, v10, v11, v12, v13, v14, v15);
      }
LABEL_56:
      v39 = v145;
      if (v147 != (_BYTE *)v145 && v145)
      {
        v145 = 0;
        LODWORD(v146) = 0;
        goto LABEL_63;
      }
      goto LABEL_57;
    }
LABEL_71:
    v90 = &v29[-v26];
    if (&v29[-v26] == (char *)-1)
      goto LABEL_32;
    v91 = v29;
    v92 = v25 - (_QWORD)v90 + v16;
    if (v92 <= v143)
    {
LABEL_78:
      v16 = HIDWORD(v143);
      if (v90 != (char *)v25)
      {
        v102 = v25 + v24 - (_QWORD)v29 + 16;
        do
        {
          v103 = *v91++;
          *((_BYTE *)v142 + v16) = v103;
          v16 = ++HIDWORD(v143);
          --v102;
        }
        while (v102);
      }
      goto LABEL_32;
    }
    v93 = v142;
    v141 = v90;
    if (v92 < 0x21)
    {
      v142 = (WTF *)v144;
      LODWORD(v143) = 32;
      v94 = (WTF *)v144;
      goto LABEL_77;
    }
    if (!HIDWORD(v92))
    {
      v94 = (WTF *)WTF::fastMalloc((WTF *)(v25 - (_QWORD)v90 + v20));
      LODWORD(v143) = v92;
      v142 = v94;
LABEL_77:
      memcpy(v94, v93, v20);
      v90 = v141;
      if (v144 != (_BYTE *)v93 && v93)
      {
        if (v142 == v93)
        {
          v142 = 0;
          LODWORD(v143) = 0;
        }
        WTF::fastFree((unint64_t)v93, v95, v96, v97, v98, v99, v100, v101);
        v90 = v141;
      }
      goto LABEL_78;
    }
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x19895CA70);
  }
  JSC::languageTagForLocaleID(0, &v145);
  v17 = v145;
  v145 = 0;
  v18 = *v1;
  *v1 = v17;
  if (v18)
  {
    v19 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      v18 = v145;
      v145 = 0;
      if (!v18)
        goto LABEL_57;
      v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
LABEL_63:
        WTF::fastFree((unint64_t)v39, v9, v10, v11, v12, v13, v14, v15);
        goto LABEL_57;
      }
    }
    *(_DWORD *)v18 = v19;
  }
LABEL_57:
  v40 = v148;
  if (v150 != (_BYTE *)v148 && v148)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree((unint64_t)v40, v9, v10, v11, v12, v13, v14, v15);
  }
  return v1;
}

WTF::StringImpl **JSC::IntlLocale::minimal(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  int v3;
  int v4;
  int v5;
  int BaseName;
  int v7;
  int v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  size_t v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF *v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  WTF *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  WTF *v107;
  WTF *v108;
  _BYTE *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  WTF *v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  WTF *v142;
  uint64_t v143;
  _BYTE v144[32];
  WTF::StringImpl *v145;
  uint64_t v146;
  _BYTE v147[32];
  WTF *v148;
  uint64_t v149;
  _BYTE v150[36];
  int v151;
  int v152[4];

  v1 = (WTF::StringImpl **)((char *)this + 32);
  if (*((_QWORD *)this + 4))
    return v1;
  v151 = 0;
  v148 = (WTF *)v150;
  v149 = 0x2000000020;
  v3 = uloc_minimizeSubtags();
  v4 = v151;
  if (v151 == 15 || v151 == -124)
  {
    v5 = v3 + 1;
    if (v149 < (unint64_t)(v3 + 1))
    {
      v104 = v149 + ((unint64_t)v149 >> 2);
      if (v104 >= 0x10)
        v105 = v104 + 1;
      else
        v105 = 16;
      if (v105 <= v5)
        v106 = v5;
      else
        v106 = v105;
      v107 = v148;
      if (v106 < 0x21)
      {
        v148 = (WTF *)v150;
        LODWORD(v149) = 32;
        v108 = (WTF *)v150;
      }
      else
      {
        if (HIDWORD(v106))
        {
          __break(0xC471u);
          JUMPOUT(0x19895D1F0);
        }
        v108 = (WTF *)WTF::fastMalloc((WTF *)v106);
        LODWORD(v149) = v106;
        v148 = v108;
      }
      memcpy(v108, v107, HIDWORD(v149));
      if (v150 != (_BYTE *)v107 && v107)
      {
        if (v148 == v107)
        {
          v148 = 0;
          LODWORD(v149) = 0;
        }
        WTF::fastFree((unint64_t)v107, v115, v116, v117, v118, v119, v120, v121);
      }
    }
    HIDWORD(v149) = v5;
    v151 = 0;
    uloc_minimizeSubtags();
    v4 = v151;
  }
  if (v4 > 0)
  {
    v151 = 0;
    v145 = (WTF::StringImpl *)v147;
    v146 = 32;
    BaseName = uloc_getBaseName();
    if (v151 == 15 || v151 == -124)
    {
      v7 = BaseName + 1;
      if (v146 < (unint64_t)(BaseName + 1))
      {
        v110 = v146 + ((unint64_t)v146 >> 2);
        if (v110 >= 0x10)
          v111 = v110 + 1;
        else
          v111 = 16;
        if (v111 <= v7)
          v112 = v7;
        else
          v112 = v111;
        v113 = v145;
        if (v112 < 0x21)
        {
          v114 = (WTF::StringImpl *)v147;
          v145 = (WTF::StringImpl *)v147;
          LODWORD(v146) = 32;
        }
        else
        {
          if (HIDWORD(v112))
          {
            __break(0xC471u);
            JUMPOUT(0x19895D1F8);
          }
          v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v112);
          LODWORD(v146) = v112;
          v145 = v114;
        }
        memcpy(v114, v113, HIDWORD(v146));
        if (v147 != (_BYTE *)v113 && v113)
        {
          if (v145 == v113)
          {
            v145 = 0;
            LODWORD(v146) = 0;
          }
          WTF::fastFree((unint64_t)v113, v122, v123, v124, v125, v126, v127, v128);
        }
      }
      HIDWORD(v146) = v7;
      v151 = 0;
      uloc_getBaseName();
    }
    v142 = (WTF *)v144;
    v143 = 0x2000000020;
    v152[0] = 0;
    v8 = uloc_minimizeSubtags();
    v16 = v8;
    if (v152[0] <= 0)
    {
      HIDWORD(v143) = v8;
    }
    else
    {
      if (v152[0] != 15)
        goto LABEL_15;
      v152[0] = 0;
      if (v143 < (unint64_t)v8)
      {
        v129 = v143 + ((unint64_t)v143 >> 2);
        if (v129 >= 0x10)
          v130 = v129 + 1;
        else
          v130 = 16;
        if (v130 <= v8)
          v131 = v8;
        else
          v131 = v130;
        v132 = v142;
        if (v131 < 0x21)
        {
          v142 = (WTF *)v144;
          LODWORD(v143) = 32;
          v133 = (WTF *)v144;
        }
        else
        {
          if (HIDWORD(v131))
            goto LABEL_138;
          v133 = (WTF *)WTF::fastMalloc((WTF *)v131);
          LODWORD(v143) = v131;
          v142 = v133;
        }
        memcpy(v133, v132, HIDWORD(v143));
        if (v144 != (_BYTE *)v132 && v132)
        {
          if (v142 == v132)
          {
            v142 = 0;
            LODWORD(v143) = 0;
          }
          WTF::fastFree((unint64_t)v132, v134, v135, v136, v137, v138, v139, v140);
        }
      }
      HIDWORD(v143) = v16;
      uloc_minimizeSubtags();
      if (v152[0] > 0)
        goto LABEL_15;
      v16 = HIDWORD(v143);
    }
    v26 = v16;
    if (v16)
    {
      v27 = v142;
      v28 = v16;
      while (1)
      {
        v29 = *(unsigned __int8 *)v27;
        v27 = (WTF *)((char *)v27 + 1);
        if (v29 == 64)
          break;
        if (!--v28)
          goto LABEL_39;
      }
LABEL_15:
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      if (v17)
      {
LABEL_21:
        *(_DWORD *)v17 += 2;
LABEL_22:
        v20 = *v1;
        *v1 = v17;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::~StringImpl(v20, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v20 -= 2;
          }
        }
        v21 = v142;
        if (v144 != (_BYTE *)v142 && v142 != 0)
          goto LABEL_130;
        goto LABEL_53;
      }
      JSC::languageTagForLocaleID(0, v152);
      v17 = *(WTF::StringImpl **)v152;
      *(_QWORD *)v152 = 0;
      v18 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v17;
      if (!v18)
      {
LABEL_20:
        if (!v17)
          goto LABEL_22;
        goto LABEL_21;
      }
      v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        v18 = *(WTF::StringImpl **)v152;
        *(_QWORD *)v152 = 0;
        if (!v18)
          goto LABEL_19;
        v19 = *(_DWORD *)v18 - 2;
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          goto LABEL_19;
        }
      }
      *(_DWORD *)v18 = v19;
LABEL_19:
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      goto LABEL_20;
    }
LABEL_39:
    v30 = *((_QWORD *)this + 2);
    if (!v30)
      goto LABEL_47;
    v31 = *(_QWORD *)(v30 + 8);
    if (!v31)
      goto LABEL_47;
    v32 = v30 + 16;
    v33 = 16;
    if (v31 < 0x10)
      v33 = *(_QWORD *)(v30 + 8);
    v34 = v33;
    v35 = (char *)(v30 + 16);
    do
    {
      if (*v35 == 64)
        goto LABEL_68;
      ++v35;
      --v34;
    }
    while (v34);
    if (v31 < 0x11 || (v35 = (char *)memchr((void *)(v32 + v33), 64, v31 - v33)) == 0)
    {
LABEL_47:
      LOBYTE(v152[0]) = 0;
      if (v16 == (_DWORD)v143)
      {
        v109 = (_BYTE *)WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, (WTF *)(v16 + 1), (unint64_t)v152);
        *((_BYTE *)v142 + HIDWORD(v143)) = *v109;
      }
      else
      {
        *((_BYTE *)v142 + v16) = 0;
      }
      ++HIDWORD(v143);
      JSC::languageTagForLocaleID(0, v152);
      v36 = *(WTF::StringImpl **)v152;
      *(_QWORD *)v152 = 0;
      v37 = *v1;
      *v1 = v36;
      if (v37)
      {
        v38 = *(_DWORD *)v37 - 2;
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          v37 = *(WTF::StringImpl **)v152;
          *(_QWORD *)v152 = 0;
          if (!v37)
            goto LABEL_52;
          v38 = *(_DWORD *)v37 - 2;
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::~StringImpl(v37, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
            goto LABEL_52;
          }
        }
        *(_DWORD *)v37 = v38;
      }
LABEL_52:
      v21 = v142;
      if (v144 != (_BYTE *)v142 && v142)
      {
LABEL_130:
        v142 = 0;
        LODWORD(v143) = 0;
        WTF::fastFree((unint64_t)v21, v9, v10, v11, v12, v13, v14, v15);
      }
LABEL_53:
      v39 = v145;
      if (v147 != (_BYTE *)v145 && v145)
      {
        v145 = 0;
        LODWORD(v146) = 0;
        goto LABEL_60;
      }
      goto LABEL_54;
    }
LABEL_68:
    v90 = &v35[-v32];
    if (&v35[-v32] == (char *)-1)
      goto LABEL_47;
    v91 = v35;
    v92 = v31 - (_QWORD)v90 + v16;
    if (v92 <= v143)
    {
LABEL_75:
      v16 = HIDWORD(v143);
      if (v90 != (char *)v31)
      {
        v102 = v31 + v30 - (_QWORD)v35 + 16;
        do
        {
          v103 = *v91++;
          *((_BYTE *)v142 + v16) = v103;
          v16 = ++HIDWORD(v143);
          --v102;
        }
        while (v102);
      }
      goto LABEL_47;
    }
    v93 = v142;
    v141 = v90;
    if (v92 < 0x21)
    {
      v142 = (WTF *)v144;
      LODWORD(v143) = 32;
      v94 = (WTF *)v144;
      goto LABEL_74;
    }
    if (!HIDWORD(v92))
    {
      v94 = (WTF *)WTF::fastMalloc((WTF *)(v31 - (_QWORD)v90 + v26));
      LODWORD(v143) = v92;
      v142 = v94;
LABEL_74:
      memcpy(v94, v93, v26);
      v90 = v141;
      if (v144 != (_BYTE *)v93 && v93)
      {
        if (v142 == v93)
        {
          v142 = 0;
          LODWORD(v143) = 0;
        }
        WTF::fastFree((unint64_t)v93, v95, v96, v97, v98, v99, v100, v101);
        v90 = v141;
      }
      goto LABEL_75;
    }
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x19895D1E8);
  }
  JSC::languageTagForLocaleID(0, &v145);
  v23 = v145;
  v145 = 0;
  v24 = *v1;
  *v1 = v23;
  if (v24)
  {
    v25 = *(_DWORD *)v24 - 2;
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      v24 = v145;
      v145 = 0;
      if (!v24)
        goto LABEL_54;
      v25 = *(_DWORD *)v24 - 2;
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v9, v10, v11, v12, v13, v14, v15);
LABEL_60:
        WTF::fastFree((unint64_t)v39, v9, v10, v11, v12, v13, v14, v15);
        goto LABEL_54;
      }
    }
    *(_DWORD *)v24 = v25;
  }
LABEL_54:
  v40 = v148;
  if (v150 != (_BYTE *)v148 && v148)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree((unint64_t)v40, v9, v10, v11, v12, v13, v14, v15);
  }
  return v1;
}

WTF::StringImpl **JSC::IntlLocale::baseName(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::StringImpl **result;
  int v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[36];
  int v47;

  v1 = (WTF::StringImpl **)((char *)this + 48);
  if (*((_QWORD *)this + 6))
    return v1;
  v47 = 0;
  v44 = (WTF *)v46;
  v45 = 0x2000000020;
  result = (WTF::StringImpl **)uloc_getBaseName();
  if (v47 != 15 && v47 != -124)
  {
LABEL_6:
    JSC::languageTagForLocaleID(0, &v43);
    v11 = v43;
    v43 = 0;
    v12 = *v1;
    *v1 = v11;
    if (!v12)
      goto LABEL_9;
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2)
      goto LABEL_8;
    WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    v12 = v43;
    v43 = 0;
    if (v12)
    {
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 != 2)
      {
LABEL_8:
        *(_DWORD *)v12 = v13;
        goto LABEL_9;
      }
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
LABEL_9:
    v14 = v44;
    if (v46 != (_BYTE *)v44)
    {
      if (v44)
      {
        v44 = 0;
        LODWORD(v45) = 0;
        WTF::fastFree((unint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
      }
    }
    return v1;
  }
  v3 = (_DWORD)result + 1;
  if (v45 >= (unint64_t)((int)result + 1))
  {
LABEL_5:
    HIDWORD(v45) = v3;
    v47 = 0;
    uloc_getBaseName();
    goto LABEL_6;
  }
  v42 = ((_DWORD)result + 1);
  v31 = v45 + ((unint64_t)v45 >> 2);
  if (v31 >= 0x10)
    v32 = v31 + 1;
  else
    v32 = 16;
  if (v32 <= v3)
    v33 = v3;
  else
    v33 = v32;
  v34 = v44;
  if (v33 < 0x21)
  {
    v44 = (WTF *)v46;
    LODWORD(v45) = 32;
    v35 = (WTF *)v46;
    goto LABEL_26;
  }
  if (!HIDWORD(v33))
  {
    v35 = (WTF *)WTF::fastMalloc((WTF *)v33);
    LODWORD(v45) = v33;
    v44 = v35;
LABEL_26:
    memcpy(v35, v34, HIDWORD(v45));
    v3 = v42;
    if (v46 != (_BYTE *)v34 && v34)
    {
      if (v44 == v34)
      {
        v44 = 0;
        LODWORD(v45) = 0;
      }
      WTF::fastFree((unint64_t)v34, v36, v42, v37, v38, v39, v40, v41);
      v3 = v42;
    }
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **JSC::IntlLocale::language(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  signed int Language;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  WTF *v12;
  int *v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  _BYTE v27[12];
  int v28;

  v1 = (WTF::StringImpl **)((char *)this + 56);
  if (*((_QWORD *)this + 7))
    return v1;
  v25 = (WTF *)v27;
  v26 = 8;
  v28 = 0;
  Language = uloc_getLanguage();
  v10 = Language;
  if (v28 > 0)
  {
    if (v28 == 15)
    {
      v28 = 0;
      if ((unint64_t)Language > 8)
      {
        if ((unint64_t)Language >= 0x10)
          v11 = Language;
        else
          v11 = 16;
        if (v11 < 9)
        {
          v25 = (WTF *)v27;
          v12 = (WTF *)v27;
        }
        else
        {
          if (HIDWORD(v11))
            goto LABEL_32;
          v12 = (WTF *)WTF::fastMalloc((WTF *)v11);
          v25 = v12;
        }
        memcpy(v12, v27, 8uLL);
      }
      v26 = v10;
      uloc_getLanguage();
    }
    v10 = v26;
  }
  if (v25)
  {
    if (v10)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v13 = (int *)WTF::fastCompactMalloc((WTF *)(v10 + 20));
        v14 = v13 + 5;
        *v13 = 2;
        v13[1] = v10;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 4;
        if (v10 == 1)
          *v14 = *(_BYTE *)v25;
        else
          memcpy(v14, v25, v10);
        goto LABEL_24;
      }
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x19895D608);
    }
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v13 = 0;
  }
LABEL_24:
  v15 = *v1;
  *v1 = (WTF::StringImpl *)v13;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v27 != (_BYTE *)v25 && v25)
    WTF::fastFree((unint64_t)v25, v3, v4, v5, v6, v7, v8, v9);
  return v1;
}

WTF::StringImpl **JSC::IntlLocale::script(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  signed int Script;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  WTF *v12;
  int *v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  _BYTE v27[12];
  int v28;

  v1 = (WTF::StringImpl **)((char *)this + 64);
  if (*((_QWORD *)this + 8))
    return v1;
  v25 = (WTF *)v27;
  v26 = 4;
  v28 = 0;
  Script = uloc_getScript();
  v10 = Script;
  if (v28 > 0)
  {
    if (v28 == 15)
    {
      v28 = 0;
      if ((unint64_t)Script > 4)
      {
        if ((unint64_t)Script >= 0x10)
          v11 = Script;
        else
          v11 = 16;
        if (v11 < 5)
        {
          v25 = (WTF *)v27;
          v12 = (WTF *)v27;
        }
        else
        {
          if (HIDWORD(v11))
            goto LABEL_32;
          v12 = (WTF *)WTF::fastMalloc((WTF *)v11);
          v25 = v12;
        }
        memcpy(v12, v27, 4uLL);
      }
      v26 = v10;
      uloc_getScript();
    }
    v10 = v26;
  }
  if (v25)
  {
    if (v10)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v13 = (int *)WTF::fastCompactMalloc((WTF *)(v10 + 20));
        v14 = v13 + 5;
        *v13 = 2;
        v13[1] = v10;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 4;
        if (v10 == 1)
          *v14 = *(_BYTE *)v25;
        else
          memcpy(v14, v25, v10);
        goto LABEL_24;
      }
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x19895D830);
    }
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v13 = 0;
  }
LABEL_24:
  v15 = *v1;
  *v1 = (WTF::StringImpl *)v13;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v27 != (_BYTE *)v25 && v25)
    WTF::fastFree((unint64_t)v25, v3, v4, v5, v6, v7, v8, v9);
  return v1;
}

WTF::StringImpl **JSC::IntlLocale::region(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  signed int Country;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  WTF *v12;
  int *v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  _BYTE v27[12];
  int v28;

  v1 = (WTF::StringImpl **)((char *)this + 72);
  if (*((_QWORD *)this + 9))
    return v1;
  v25 = (WTF *)v27;
  v26 = 3;
  v28 = 0;
  Country = uloc_getCountry();
  v10 = Country;
  if (v28 > 0)
  {
    if (v28 == 15)
    {
      v28 = 0;
      if ((unint64_t)Country > 3)
      {
        if ((unint64_t)Country >= 0x10)
          v11 = Country;
        else
          v11 = 16;
        if (v11 < 4)
        {
          v25 = (WTF *)v27;
          v12 = (WTF *)v27;
        }
        else
        {
          if (HIDWORD(v11))
            goto LABEL_32;
          v12 = (WTF *)WTF::fastMalloc((WTF *)v11);
          v25 = v12;
        }
        memcpy(v12, v27, 3uLL);
      }
      v26 = v10;
      uloc_getCountry();
    }
    v10 = v26;
  }
  if (v25)
  {
    if (v10)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v13 = (int *)WTF::fastCompactMalloc((WTF *)(v10 + 20));
        v14 = v13 + 5;
        *v13 = 2;
        v13[1] = v10;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 4;
        if (v10 == 1)
          *v14 = *(_BYTE *)v25;
        else
          memcpy(v14, v25, v10);
        goto LABEL_24;
      }
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x19895DA58);
    }
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v13 = 0;
  }
LABEL_24:
  v15 = *v1;
  *v1 = (WTF::StringImpl *)v13;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v27 != (_BYTE *)v25 && v25)
    WTF::fastFree((unint64_t)v25, v3, v4, v5, v6, v7, v8, v9);
  return v1;
}

WTF::StringImpl **JSC::IntlLocale::calendar(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlLocale *v20;
  WTF::StringImpl *v21;

  v1 = (WTF::StringImpl **)((char *)this + 80);
  if (*((_BYTE *)this + 88))
    return v1;
  JSC::IntlLocale::keywordValue(0, (int **)&v21);
  if (!*((_BYTE *)this + 88))
  {
    *((_QWORD *)this + 10) = v21;
    *((_BYTE *)this + 88) = 1;
    return v1;
  }
  v10 = *v1;
  *v1 = v21;
  if (!v10)
    return v1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return v1;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 88))
    return v1;
  v20 = (JSC::IntlLocale *)std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)JSC::IntlLocale::caseFirst(v20);
}

WTF::StringImpl **JSC::IntlLocale::caseFirst(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlLocale *v20;
  WTF::StringImpl *v21;

  v1 = (WTF::StringImpl **)((char *)this + 96);
  if (*((_BYTE *)this + 104))
    return v1;
  JSC::IntlLocale::keywordValue(0, (int **)&v21);
  if (!*((_BYTE *)this + 104))
  {
    *((_QWORD *)this + 12) = v21;
    *((_BYTE *)this + 104) = 1;
    return v1;
  }
  v10 = *v1;
  *v1 = v21;
  if (!v10)
    return v1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return v1;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 104))
    return v1;
  v20 = (JSC::IntlLocale *)std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)JSC::IntlLocale::collation(v20);
}

WTF::StringImpl **JSC::IntlLocale::collation(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlLocale *v20;
  WTF::StringImpl *v21;

  v1 = (WTF::StringImpl **)((char *)this + 112);
  if (*((_BYTE *)this + 120))
    return v1;
  JSC::IntlLocale::keywordValue(0, (int **)&v21);
  if (!*((_BYTE *)this + 120))
  {
    *((_QWORD *)this + 14) = v21;
    *((_BYTE *)this + 120) = 1;
    return v1;
  }
  v10 = *v1;
  *v1 = v21;
  if (!v10)
    return v1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return v1;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 120))
    return v1;
  v20 = (JSC::IntlLocale *)std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)JSC::IntlLocale::hourCycle(v20);
}

WTF::StringImpl **JSC::IntlLocale::hourCycle(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlLocale *v20;
  WTF::StringImpl *v21;

  v1 = (WTF::StringImpl **)((char *)this + 128);
  if (*((_BYTE *)this + 136))
    return v1;
  JSC::IntlLocale::keywordValue(0, (int **)&v21);
  if (!*((_BYTE *)this + 136))
  {
    *((_QWORD *)this + 16) = v21;
    *((_BYTE *)this + 136) = 1;
    return v1;
  }
  v10 = *v1;
  *v1 = v21;
  if (!v10)
    return v1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return v1;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 136))
    return v1;
  v20 = (JSC::IntlLocale *)std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)JSC::IntlLocale::numberingSystem(v20);
}

WTF::StringImpl **JSC::IntlLocale::numberingSystem(JSC::IntlLocale *this)
{
  WTF::StringImpl **v1;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlLocale *v20;
  JSC::JSGlobalObject *v21;
  WTF::StringImpl *v22;

  v1 = (WTF::StringImpl **)((char *)this + 144);
  if (*((_BYTE *)this + 152))
    return v1;
  JSC::IntlLocale::keywordValue(0, (int **)&v22);
  if (!*((_BYTE *)this + 152))
  {
    *((_QWORD *)this + 18) = v22;
    *((_BYTE *)this + 152) = 1;
    return v1;
  }
  v10 = *v1;
  *v1 = v22;
  if (!v10)
    return v1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return v1;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 152))
    return v1;
  v20 = (JSC::IntlLocale *)std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)JSC::IntlLocale::calendars(v20, v21);
}

_BYTE *JSC::IntlLocale::calendars(JSC::IntlLocale *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  WTF::AtomStringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t KeywordValuesForLocale;
  _BYTE *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  _BOOL4 v35;
  BOOL v36;
  WTF *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  int *v60;
  _BYTE *v61;
  const char *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  char *v75;
  WTF *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  char v105;
  WTF::StringImpl *v106;
  int v107;
  int v108;
  WTF::StringImpl *v109;
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  JSC::VM *v113;

  v113 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v110 = (WTF *)&v112;
  a9.n128_u64[0] = 1;
  v111 = 1;
  if (*((_BYTE *)this + 88))
    goto LABEL_6;
  JSC::IntlLocale::keywordValue(0, (int **)&v104);
  v12 = v104;
  if (!*((_BYTE *)this + 88))
  {
    *((_QWORD *)this + 10) = v104;
    *((_BYTE *)this + 88) = 1;
    if (v12)
    {
LABEL_7:
      *(_DWORD *)v12 += 2;
      v109 = v12;
      if (*((_DWORD *)v12 + 1))
      {
        LODWORD(v14) = HIDWORD(v111);
        if (HIDWORD(v111) == (_DWORD)v111)
        {
          v15 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v110, HIDWORD(v111) + 1, (unint64_t)&v109);
          v14 = HIDWORD(v111);
          v16 = v110;
          v17 = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v16 + v14) = v17;
        }
        else
        {
          v109 = 0;
          *((_QWORD *)v110 + HIDWORD(v111)) = v12;
        }
        HIDWORD(v111) = v14 + 1;
        v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v110, a9, a3, a4, a5, a6, a7, a8);
        v12 = v109;
        goto LABEL_21;
      }
    }
LABEL_13:
    v108 = 0;
    KeywordValuesForLocale = ucal_getKeywordValuesForLocale();
    if (v108 >= 1)
      goto LABEL_19;
    v107 = 0;
    result = (_BYTE *)uenum_next();
    v35 = v108 > 0;
    if (result)
      v36 = v108 <= 0;
    else
      v36 = 0;
    if (!v36)
    {
LABEL_18:
      if (!v35)
      {
        v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v110, v34, v28, v29, v30, v31, v32, v33);
        if (!KeywordValuesForLocale)
          goto LABEL_21;
        goto LABEL_20;
      }
LABEL_19:
      JSC::throwTypeError((unint64_t)a2, &v113, (uint64_t)"invalid locale", 15);
      v25 = 0;
      if (!KeywordValuesForLocale)
      {
LABEL_21:
        v109 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        if (HIDWORD(v111))
        {
          v37 = v110;
          v38 = 8 * HIDWORD(v111);
          do
          {
            v39 = *(WTF::StringImpl **)v37;
            *(_QWORD *)v37 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                WTF::StringImpl::~StringImpl(v39, v18, v19, v20, v21, v22, v23, v24);
                WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
            v37 = (WTF *)((char *)v37 + 8);
            v38 -= 8;
          }
          while (v38);
        }
        v48 = v110;
        if (&v112 != (uint64_t *)v110 && v110 != 0)
        {
          v110 = 0;
          LODWORD(v111) = 0;
          WTF::fastFree((unint64_t)v48, v18, v19, v20, v21, v22, v23, v24);
        }
        return (_BYTE *)v25;
      }
LABEL_20:
      uenum_close();
      goto LABEL_21;
    }
    v58 = result;
    while (1)
    {
      v59 = v107;
      if (v107)
      {
        if (v107 < 0)
          goto LABEL_72;
        v60 = (int *)WTF::fastCompactMalloc((WTF *)(v107 + 20));
        v61 = v60 + 5;
        *v60 = 2;
        v60[1] = v59;
        *((_QWORD *)v60 + 1) = v60 + 5;
        v60[4] = 4;
        if (v59 == 1)
          *v61 = *v58;
        else
          memcpy(v61, v58, v59);
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v60 = &WTF::StringImpl::s_emptyAtomString;
      }
      v106 = (WTF::StringImpl *)v60;
      v62 = "gregory";
      if (WTF::equalInternal<unsigned char>((uint64_t)v60, (unint64_t)"gregorian", 9)
        || (v62 = "ethioaa",
            WTF::equalInternal<unsigned char>((uint64_t)v106, (unint64_t)"ethiopic-amete-alem", 19)))
      {
        v70 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v70 = 0x700000002;
        *(_QWORD *)(v70 + 8) = v62;
        *(_DWORD *)(v70 + 16) = 4;
        v104 = (WTF::StringImpl *)v70;
        v105 = 1;
        LODWORD(v71) = HIDWORD(v111);
        if (HIDWORD(v111) != (_DWORD)v111)
        {
          v74 = v104;
          v104 = 0;
          *((_QWORD *)v110 + HIDWORD(v111)) = v74;
          goto LABEL_55;
        }
        v72 = HIDWORD(v111) + 1;
        v73 = &v104;
      }
      else
      {
        LOBYTE(v104) = 0;
        v105 = 0;
        v71 = HIDWORD(v111);
        if (HIDWORD(v111) != (_DWORD)v111)
        {
          v76 = v110;
          v77 = v106;
          v106 = 0;
          goto LABEL_54;
        }
        v72 = HIDWORD(v111) + 1;
        v73 = &v106;
      }
      v75 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v110, v72, (unint64_t)v73);
      v71 = HIDWORD(v111);
      v76 = v110;
      v77 = *(WTF::StringImpl **)v75;
      *(_QWORD *)v75 = 0;
LABEL_54:
      *((_QWORD *)v76 + v71) = v77;
LABEL_55:
      HIDWORD(v111) = v71 + 1;
      if (v105)
      {
        v78 = v104;
        v104 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::~StringImpl(v78, v63, v64, v65, v66, v67, v68, v69);
            WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          }
          else
          {
            *(_DWORD *)v78 -= 2;
          }
        }
      }
      v79 = v106;
      v106 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, v63, v64, v65, v66, v67, v68, v69);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
      result = (_BYTE *)uenum_next();
      v35 = v108 > 0;
      if (result)
      {
        v58 = result;
        if (v108 < 1)
          continue;
      }
      goto LABEL_18;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v104;
  if (!v13)
    goto LABEL_6;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::~StringImpl(v13, v11, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  if (*((_BYTE *)this + 88))
  {
LABEL_6:
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    if (v12)
      goto LABEL_7;
    goto LABEL_13;
  }
  result = (_BYTE *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_72:
  __break(0xC471u);
  return result;
}

unint64_t JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  JSC::JSGlobalObject *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  int v31;
  unint64_t OutOfMemoryError;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::Exception *v39;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 908);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = JSC::JSArray::tryCreate(*(JSC::JSArray **)(a1 + 56), v13, (JSC::Structure *)*(unsigned int *)(a2 + 12), a5, a6, a7, a8, a9, a3);
  if (!v14)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, v15);
    v39 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v39 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v33, v34, v35, v36, v37);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v39, v38, v33, v34, v35, v36, v37);
    return 0;
  }
  v22 = v14;
  if (*(_DWORD *)(a2 + 12))
  {
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = JSC::jsString((JSC *)v11, (JSC::VM *)(*(_QWORD *)a2 + v23), v16, v17, v18, v19, v20, v21);
      JSC::JSObject::putDirectIndex(v22, a1, v24, v25, v26, v27, v28, v29, v30);
      if (*(_DWORD *)(v11 + 80))
      {
        v31 = *(_DWORD *)(v11 + 80);
        if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v11 + 16))
          break;
      }
      v24 = (JSC::VM *)((char *)v24 + 1);
      v23 += 8;
      if ((unint64_t)v24 >= *(unsigned int *)(a2 + 12))
        return v22;
    }
    return 0;
  }
  return v22;
}

_BYTE *JSC::IntlLocale::collations(JSC::IntlLocale *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  WTF::AtomStringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t KeywordValuesForLocale;
  _BYTE *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  _BOOL4 v35;
  BOOL v36;
  WTF *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  int *v60;
  _BYTE *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF::StringImpl **v71;
  char *v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF::StringImpl *v105;
  int v106;
  int v107;
  WTF::StringImpl *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  JSC::VM *v112;

  v112 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v109 = (WTF *)&v111;
  a9.n128_u64[0] = 1;
  v110 = 1;
  if (*((_BYTE *)this + 120))
    goto LABEL_6;
  JSC::IntlLocale::keywordValue(0, (int **)&v103);
  v12 = v103;
  if (!*((_BYTE *)this + 120))
  {
    *((_QWORD *)this + 14) = v103;
    *((_BYTE *)this + 120) = 1;
    if (v12)
    {
LABEL_7:
      *(_DWORD *)v12 += 2;
      v108 = v12;
      if (*((_DWORD *)v12 + 1))
      {
        LODWORD(v14) = HIDWORD(v110);
        if (HIDWORD(v110) == (_DWORD)v110)
        {
          v15 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v109, HIDWORD(v110) + 1, (unint64_t)&v108);
          v14 = HIDWORD(v110);
          v16 = v109;
          v17 = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v16 + v14) = v17;
        }
        else
        {
          v108 = 0;
          *((_QWORD *)v109 + HIDWORD(v110)) = v12;
        }
        HIDWORD(v110) = v14 + 1;
        v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v109, a9, a3, a4, a5, a6, a7, a8);
        v12 = v108;
        goto LABEL_21;
      }
    }
LABEL_13:
    v107 = 0;
    KeywordValuesForLocale = ucol_getKeywordValuesForLocale();
    if (v107 >= 1)
      goto LABEL_19;
    v106 = 0;
    result = (_BYTE *)uenum_next();
    v35 = v107 > 0;
    if (result)
      v36 = v107 <= 0;
    else
      v36 = 0;
    if (!v36)
    {
LABEL_18:
      if (!v35)
      {
        v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v109, v34, v28, v29, v30, v31, v32, v33);
        if (!KeywordValuesForLocale)
          goto LABEL_21;
        goto LABEL_20;
      }
LABEL_19:
      JSC::throwTypeError((unint64_t)a2, &v112, (uint64_t)"invalid locale", 15);
      v25 = 0;
      if (!KeywordValuesForLocale)
      {
LABEL_21:
        v108 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        if (HIDWORD(v110))
        {
          v37 = v109;
          v38 = 8 * HIDWORD(v110);
          do
          {
            v39 = *(WTF::StringImpl **)v37;
            *(_QWORD *)v37 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                WTF::StringImpl::~StringImpl(v39, v18, v19, v20, v21, v22, v23, v24);
                WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
            v37 = (WTF *)((char *)v37 + 8);
            v38 -= 8;
          }
          while (v38);
        }
        v48 = v109;
        if (&v111 != (uint64_t *)v109 && v109 != 0)
        {
          v109 = 0;
          LODWORD(v110) = 0;
          WTF::fastFree((unint64_t)v48, v18, v19, v20, v21, v22, v23, v24);
        }
        return (_BYTE *)v25;
      }
LABEL_20:
      uenum_close();
      goto LABEL_21;
    }
    v58 = result;
    while (1)
    {
      v59 = v106;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_73;
        v60 = (int *)WTF::fastCompactMalloc((WTF *)(v106 + 20));
        v61 = v60 + 5;
        *v60 = 2;
        v60[1] = v59;
        *((_QWORD *)v60 + 1) = v60 + 5;
        v60[4] = 4;
        if (v59 == 1)
          *v61 = *v58;
        else
          memcpy(v61, v58, v59);
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v60 = &WTF::StringImpl::s_emptyAtomString;
      }
      v105 = (WTF::StringImpl *)v60;
      if (WTF::equalInternal<unsigned char>((uint64_t)v60, (unint64_t)"standard", 8)
        || WTF::equalInternal<unsigned char>((uint64_t)v105, (unint64_t)"search", 6))
      {
        goto LABEL_61;
      }
      JSC::mapICUCollationKeywordToBCP47((JSC *)&v105, &v103);
      LODWORD(v69) = HIDWORD(v110);
      if (v104)
      {
        if (HIDWORD(v110) != (_DWORD)v110)
        {
          v75 = v109;
          v76 = v103;
          v103 = 0;
LABEL_56:
          *((_QWORD *)v75 + HIDWORD(v110)) = v76;
          goto LABEL_57;
        }
        v70 = HIDWORD(v110) + 1;
        v71 = &v103;
      }
      else
      {
        if (HIDWORD(v110) != (_DWORD)v110)
        {
          v75 = v109;
          v76 = v105;
          v105 = 0;
          goto LABEL_56;
        }
        v70 = HIDWORD(v110) + 1;
        v71 = &v105;
      }
      v72 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v109, v70, (unint64_t)v71);
      v69 = HIDWORD(v110);
      v73 = v109;
      v74 = *(_QWORD *)v72;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v73 + v69) = v74;
LABEL_57:
      HIDWORD(v110) = v69 + 1;
      if (v104)
      {
        v77 = v103;
        v103 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
          {
            WTF::StringImpl::~StringImpl(v77, v62, v63, v64, v65, v66, v67, v68);
            WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
          }
          else
          {
            *(_DWORD *)v77 -= 2;
          }
        }
      }
LABEL_61:
      v78 = v105;
      v105 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
      result = (_BYTE *)uenum_next();
      v35 = v107 > 0;
      if (result)
      {
        v58 = result;
        if (v107 < 1)
          continue;
      }
      goto LABEL_18;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v103;
  if (!v13)
    goto LABEL_6;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::~StringImpl(v13, v11, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
  if (*((_BYTE *)this + 120))
  {
LABEL_6:
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    if (v12)
      goto LABEL_7;
    goto LABEL_13;
  }
  result = (_BYTE *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_73:
  __break(0xC471u);
  return result;
}

unint64_t JSC::IntlLocale::hourCycles(JSC::IntlLocale *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  WTF *v9;
  JSC::IntlLocale *v11;
  WTF::AtomStringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char *v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int BestPatternWithOptions;
  __n128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];
  WTF *v77;
  uint64_t v78;
  _DWORD v79[17];
  int v80;
  WTF::StringImpl *v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  JSC::VM *v85;

  v11 = this;
  v85 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v82 = (WTF *)&v84;
  a9.n128_u64[0] = 1;
  v83 = 1;
  if (*((_BYTE *)this + 136))
    goto LABEL_6;
  JSC::IntlLocale::keywordValue(0, (int **)&v77);
  v13 = v77;
  if (*((_BYTE *)v11 + 136))
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)v11 + 16);
    *((_QWORD *)v11 + 16) = v77;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v12, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        if (!*((_BYTE *)v11 + 136))
        {
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_40:
          v48 = "h11";
LABEL_43:
          v76[0] = (uint64_t)v48;
          v76[1] = 4;
          v49 = HIDWORD(v83);
          if (HIDWORD(v83) == (_DWORD)v83)
          {
            WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v82, v76);
          }
          else
          {
            v50 = v82;
            v51 = WTF::fastCompactMalloc((WTF *)0x20);
            v34.n128_u64[0] = 0x300000002;
            *(_QWORD *)v51 = 0x300000002;
            *(_QWORD *)(v51 + 8) = v48;
            *(_DWORD *)(v51 + 16) = 4;
            v52 = HIDWORD(v83);
            *((_QWORD *)v50 + v49) = v51;
            HIDWORD(v83) = v52 + 1;
          }
          goto LABEL_46;
        }
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
LABEL_6:
    v13 = (WTF *)*((_QWORD *)v11 + 16);
    if (v13)
      goto LABEL_7;
LABEL_13:
    v81 = 0;
    goto LABEL_14;
  }
  *((_QWORD *)v11 + 16) = v77;
  *((_BYTE *)v11 + 136) = 1;
  if (!v13)
    goto LABEL_13;
LABEL_7:
  *(_DWORD *)v13 += 2;
  v81 = v13;
  if (!*((_DWORD *)v13 + 1))
  {
LABEL_14:
    v80 = 0;
    v11 = (JSC::IntlLocale *)udatpg_open();
    if (v80 >= 1)
    {
      JSC::throwTypeError((unint64_t)a2, &v85, (uint64_t)"invalid locale", 15);
      v26 = 0;
      if (!v11)
        goto LABEL_50;
      goto LABEL_49;
    }
    v79[16] = 106;
    v9 = (WTF *)v79;
    v77 = (WTF *)v79;
    v78 = 0x2000000020;
    LODWORD(v76[0]) = 0;
    BestPatternWithOptions = udatpg_getBestPatternWithOptions();
    HIDWORD(v78) = BestPatternWithOptions;
    v80 = 0;
    if (BestPatternWithOptions)
    {
      v35 = 0;
      do
      {
        v36 = *((unsigned __int16 *)v77 + v35);
        if (v36 > 0x47)
        {
          if (*((unsigned __int16 *)v77 + v35) > 0x67u)
          {
            if (v36 == 104)
            {
              v48 = "h12";
              goto LABEL_43;
            }
            v38 = v35;
            if (v36 == 107)
            {
              v48 = "h24";
              goto LABEL_43;
            }
          }
          else
          {
            if (v36 == 72)
            {
              v48 = "h23";
              goto LABEL_43;
            }
            v38 = v35;
            if (v36 == 75)
              goto LABEL_40;
          }
        }
        else if (v36 == 39)
        {
          v37 = v35 + 1;
          v38 = BestPatternWithOptions - 1;
          if (v37 < BestPatternWithOptions)
          {
            v39 = v35 + 2 - 1;
            while (1)
            {
              if (BestPatternWithOptions == v37)
              {
                __break(0xC471u);
                JUMPOUT(0x19895ECBCLL);
              }
              if (*((_WORD *)v77 + v37) == 39)
                break;
              ++v37;
              if (BestPatternWithOptions == (_DWORD)++v39)
              {
                v38 = BestPatternWithOptions - 1;
                goto LABEL_36;
              }
            }
            v38 = v37;
          }
        }
        else
        {
          v38 = v35;
        }
LABEL_36:
        v35 = v38 + 1;
      }
      while (v38 + 1 < BestPatternWithOptions);
    }
LABEL_46:
    v26 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v82, v34, v27, v28, v29, v30, v31, v32);
    v53 = v77;
    if (v9 != v77 && v77)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      WTF::fastFree((unint64_t)v53, v19, v20, v21, v22, v23, v24, v25);
      if (!v11)
        goto LABEL_50;
    }
    else if (!v11)
    {
      goto LABEL_50;
    }
LABEL_49:
    udatpg_close();
    goto LABEL_50;
  }
  LODWORD(v15) = HIDWORD(v83);
  if (HIDWORD(v83) == (_DWORD)v83)
  {
    v16 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v82, HIDWORD(v83) + 1, (unint64_t)&v81);
    v15 = HIDWORD(v83);
    v17 = v82;
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v17 + v15) = v18;
  }
  else
  {
    v81 = 0;
    *((_QWORD *)v82 + HIDWORD(v83)) = v13;
  }
  HIDWORD(v83) = v15 + 1;
  v26 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v82, a9, a3, a4, a5, a6, a7, a8);
  v13 = v81;
LABEL_50:
  v81 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (HIDWORD(v83))
  {
    v54 = v82;
    v55 = 8 * HIDWORD(v83);
    do
    {
      v56 = *(WTF::StringImpl **)v54;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      v54 = (WTF *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
  }
  v65 = v82;
  if (&v84 != (uint64_t *)v82 && v82 != 0)
  {
    v82 = 0;
    LODWORD(v83) = 0;
    WTF::fastFree((unint64_t)v65, v19, v20, v21, v22, v23, v24, v25);
  }
  return v26;
}

size_t JSC::IntlLocale::numberingSystems(JSC::IntlLocale *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::IntlLocale *v10;
  WTF::AtomStringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  size_t result;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  const char *v57;
  size_t v58;
  int *v59;
  char *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  int v85;
  WTF *v86;
  uint64_t v87;
  _QWORD v88[2];
  WTF::StringImpl *v89;

  v10 = this;
  v88[1] = *((_QWORD *)a2 + 7);
  v86 = (WTF *)v88;
  a9.n128_u64[0] = 1;
  v87 = 1;
  if (*((_BYTE *)this + 152))
    goto LABEL_6;
  JSC::IntlLocale::keywordValue(0, (int **)&v89);
  v12 = v89;
  if (*((_BYTE *)v10 + 152))
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)v10 + 18);
    *((_QWORD *)v10 + 18) = v89;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, v11, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        if (!*((_BYTE *)v10 + 152))
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_41;
        }
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
LABEL_6:
    v12 = (WTF::StringImpl *)*((_QWORD *)v10 + 18);
    if (!v12)
      goto LABEL_13;
    goto LABEL_7;
  }
  *((_QWORD *)v10 + 18) = v89;
  *((_BYTE *)v10 + 152) = 1;
  if (!v12)
  {
LABEL_13:
    v85 = 0;
    v26 = unumsys_open();
    v10 = (JSC::IntlLocale *)v26;
    v49 = (const char *)MEMORY[0x19AEBC6E4](v26);
    if (!v49)
    {
      v59 = 0;
LABEL_43:
      v84 = (WTF::StringImpl *)v59;
      v69 = HIDWORD(v87);
      if (HIDWORD(v87) == (_DWORD)v87)
      {
        v70 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v86, HIDWORD(v87) + 1, (unint64_t)&v84);
        v72 = HIDWORD(v87);
        v73 = v86;
        v74 = *(_QWORD *)v70;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v73 + v72) = v74;
        v75 = v84;
        HIDWORD(v87) = v72 + 1;
        v84 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, v71, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
      }
      else
      {
        *((_QWORD *)v86 + HIDWORD(v87)) = v59;
        HIDWORD(v87) = v69 + 1;
      }
      v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v86, v56, v50, v51, v52, v53, v54, v55);
      if (v10)
        unumsys_close();
      goto LABEL_15;
    }
    v57 = v49;
    result = strlen(v49);
    if (result)
    {
      v58 = result;
      if (result >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v59 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
      v60 = (char *)(v59 + 5);
      *v59 = 2;
      v59[1] = v58;
      *((_QWORD *)v59 + 1) = v59 + 5;
      v59[4] = 4;
      if (v58 == 1)
        *v60 = *v57;
      else
        memcpy(v60, v57, v58);
      goto LABEL_43;
    }
LABEL_41:
    v59 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_43;
  }
LABEL_7:
  *(_DWORD *)v12 += 2;
  v89 = v12;
  if (!*((_DWORD *)v12 + 1))
    goto LABEL_13;
  LODWORD(v14) = HIDWORD(v87);
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    v15 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v86, HIDWORD(v87) + 1, (unint64_t)&v89);
    v14 = HIDWORD(v87);
    v16 = v86;
    v17 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v16 + v14) = v17;
  }
  else
  {
    v89 = 0;
    *((_QWORD *)v86 + HIDWORD(v87)) = v12;
  }
  HIDWORD(v87) = v14 + 1;
  v25 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v86, a9, a3, a4, a5, a6, a7, a8);
  v12 = v89;
LABEL_15:
  v89 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (HIDWORD(v87))
  {
    v27 = v86;
    v28 = 8 * HIDWORD(v87);
    do
    {
      v29 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v38 = v86;
  if (v88 != (_QWORD *)v86 && v86 != 0)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree((unint64_t)v38, v18, v19, v20, v21, v22, v23, v24);
  }
  return v25;
}

_BYTE *JSC::IntlLocale::timeZones(JSC::IntlLocale *this, JSC::JSGlobalObject *a2)
{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  float v11;
  int v12;
  int v13;
  _DWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  _BYTE *result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  _BOOL4 v53;
  _BYTE *v54;
  int v55;
  size_t v56;
  uint64_t v57;
  WTF *v58;
  int *v59;
  _BYTE *v60;
  _QWORD v61[2];
  int v62;
  int v63;
  WTF::StringImpl *v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  JSC::VM *v68;

  v68 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v65 = (WTF *)&v67;
  v66 = 1;
  v10 = *JSC::IntlLocale::region(this);
  if (!v10)
  {
    v23 = 10;
    goto LABEL_11;
  }
  v12 = *(_DWORD *)v10;
  v13 = *((_DWORD *)v10 + 1);
  *(_DWORD *)v10 += 2;
  v64 = v10;
  if (!v13)
  {
    v23 = 10;
    if (v12)
      goto LABEL_10;
LABEL_26:
    WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    goto LABEL_11;
  }
  v63 = 0;
  WTF::String::utf8((uint64_t *)&v64, 0, v5, v6, v7, v8, v9, v61, v11);
  v14 = (_DWORD *)v61[0];
  v22 = ucal_openTimeZoneIDEnumeration();
  if (v14)
  {
    if (*v14 == 1)
      WTF::fastFree((unint64_t)v14, v15, v16, v17, v18, v19, v20, v21);
    else
      --*v14;
  }
  if (v63 >= 1)
  {
    JSC::throwTypeError((unint64_t)a2, &v68, (uint64_t)"invalid locale", 15);
    v23 = 0;
    if (!v22)
      goto LABEL_9;
    goto LABEL_8;
  }
  v62 = 0;
  result = (_BYTE *)uenum_next();
  v53 = v63 > 0;
  if (result && v63 <= 0)
  {
    v54 = result;
    while (1)
    {
      v55 = v62;
      v56 = v62;
      v61[0] = v54;
      v61[1] = v62;
      v57 = HIDWORD(v66);
      if (HIDWORD(v66) == (_DWORD)v66)
      {
        WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,std::span<char const,18446744073709551615ul>>((uint64_t)&v65, (uint64_t)v61);
      }
      else
      {
        v58 = v65;
        if (v62)
        {
          if (v62 < 0)
          {
            __break(0xC471u);
            return result;
          }
          v59 = (int *)WTF::fastCompactMalloc((WTF *)(v62 + 20));
          v60 = v59 + 5;
          *v59 = 2;
          v59[1] = v55;
          *((_QWORD *)v59 + 1) = v59 + 5;
          v59[4] = 4;
          if (v55 == 1)
            *v60 = *v54;
          else
            memcpy(v60, v54, v56);
        }
        else
        {
          WTF::StringImpl::s_emptyAtomString += 2;
          v59 = &WTF::StringImpl::s_emptyAtomString;
        }
        *((_QWORD *)v58 + v57) = v59;
        ++HIDWORD(v66);
      }
      result = (_BYTE *)uenum_next();
      v53 = v63 > 0;
      if (result)
      {
        v54 = result;
        if (v63 < 1)
          continue;
      }
      break;
    }
  }
  if (v53)
  {
    JSC::throwTypeError((unint64_t)a2, &v68, (uint64_t)"invalid locale", 15);
    v23 = 0;
  }
  else
  {
    v23 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)a2, (uint64_t)&v65, v52, v46, v47, v48, v49, v50, v51);
  }
  if (v22)
LABEL_8:
    uenum_close();
LABEL_9:
  v12 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 == 2)
    goto LABEL_26;
LABEL_10:
  *(_DWORD *)v10 = v12;
LABEL_11:
  if (HIDWORD(v66))
  {
    v24 = v65;
    v25 = 8 * HIDWORD(v66);
    do
    {
      v26 = *(WTF::StringImpl **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  v35 = v65;
  if (&v67 != (uint64_t *)v65 && v65 != 0)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v35, v3, v4, v5, v6, v7, v8, v9);
  }
  return (_BYTE *)v23;
}

unint64_t JSC::IntlLocale::textInfo(JSC::IntlLocale *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  int CharacterOrientation;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t SlowCase;
  JSC *v60;
  uint64_t Slow;
  JSC *v62;
  uint64_t v63;
  WTF::StringImpl *v64[2];
  int v65;
  int v66;
  uint64_t v67;

  v3 = *((_QWORD *)a2 + 7);
  v63 = v3;
  CharacterOrientation = uloc_getCharacterOrientation();
  switch(CharacterOrientation)
  {
    case 1:
      v5 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v5 = 0x300000002;
      v12 = "rtl";
      break;
    case 2:
      v5 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v5 = 0x300000002;
      v12 = "ttb";
      break;
    case 3:
      v5 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v5 = 0x300000002;
      v12 = "btt";
      break;
    default:
      v5 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v5 = 0x300000002;
      v12 = "ltr";
      break;
  }
  *(_QWORD *)(v5 + 8) = v12;
  *(_DWORD *)(v5 + 16) = 4;
  v64[0] = (WTF::StringImpl *)v5;
  v20 = JSC::jsNontrivialString(v3, (JSC::VM *)v64, v6, v7, v8, v9, v10, v11);
  v21 = v64[0];
  v64[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = (JSC *)*((_QWORD *)a2 + 7);
  v23 = *((_QWORD *)v22 + 1882);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 60);
    v25 = *(_QWORD *)(v23 + 24);
    if (v25 >= *(_QWORD *)(v23 + 32))
    {
      v25 = *(_QWORD *)(v23 + 40);
      if ((v25 & 1) != 0)
      {
        v55 = (uint64_t)v22 + 192;
        v62 = (JSC *)*((_QWORD *)a2 + 7);
        JSC::sanitizeStackForVM(v62, v13, v14, v15, v16, v17, v18, v19);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v23, v55, v24, 0, 0, v56, v57, v58);
        v22 = v62;
        v25 = SlowCase;
        goto LABEL_14;
      }
      v54 = *(_QWORD *)(v25 + 8) ^ *(_QWORD *)(v23 + 48);
      *(_QWORD *)(v23 + 32) = v25 + HIDWORD(v54);
      *(_QWORD *)(v23 + 40) = v25 + (int)v54;
    }
    *(_QWORD *)(v23 + 24) = v25 + v24;
  }
  else
  {
    v60 = (JSC *)*((_QWORD *)a2 + 7);
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v22 + 14936, v60, 0x40uLL, 0, v16, v17, v18, v19);
    v22 = v60;
    v25 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_14:
  *(_DWORD *)v25 = 0;
  *(_DWORD *)v25 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v25 + 4) = 16783360;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_QWORD *)(v25 + 56) = 0;
  if (*((_BYTE *)v22 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"direction", 9uLL, v15, v16, v17, v18, v19, v64);
  v26 = v64[0];
  v64[0] = 0;
  v64[1] = (WTF::StringImpl *)v25;
  v65 = -1;
  v27.n128_u64[0] = 0x100000001000000;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v25, v3, (unint64_t)v26, v20, 0, (uint64_t)v64, v28, v29, v27);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v25;
}

unint64_t JSC::IntlLocale::weekInfo(JSC::IntlLocale *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  int Attribute;
  unsigned int v7;
  unsigned int DayOfWeekType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  BOOL v16;
  uint64_t v17;
  char *v18;
  WTF *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  JSC::JSGlobalObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  unint64_t v34;
  JSC::VM *v35;
  int v36;
  unint64_t v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  JSC *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t SlowCase;
  JSC *v108;
  uint64_t Slow;
  JSC *v110;
  WTF *v111;
  JSC::Structure *v112;
  _BYTE v113[36];
  int v114;
  JSC::VM *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  int v118;
  int v119;
  uint64_t v120;

  v3 = *((_QWORD *)a2 + 7);
  v115 = (JSC::VM *)v3;
  v114 = 0;
  v4 = ucal_open();
  Attribute = ucal_getAttribute();
  v7 = ucal_getAttribute();
  v111 = (WTF *)v113;
  v112 = (JSC::Structure *)7;
  LODWORD(v116) = 1;
  do
  {
    DayOfWeekType = ucal_getDayOfWeekType();
    v16 = (DayOfWeekType & 1) == 0 && DayOfWeekType < 4;
    if (v114 > 0)
    {
      JSC::throwTypeError((unint64_t)a2, &v115, (uint64_t)"invalid locale", 15);
      goto LABEL_33;
    }
    if (!v16)
    {
      v17 = HIDWORD(v112);
      if (HIDWORD(v112) == (_DWORD)v112)
      {
        v18 = WTF::Vector<int,7ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v111, HIDWORD(v112) + 1, (unint64_t)&v116);
        v17 = HIDWORD(v112);
        v19 = v111;
        v20 = *(_DWORD *)v18;
      }
      else
      {
        v19 = v111;
        v20 = (int)v116;
      }
      *((_DWORD *)v19 + v17) = v20;
      ++HIDWORD(v112);
    }
    v21 = (int)v116;
    LODWORD(v116) = (_DWORD)v116 + 1;
  }
  while (v21 <= 6);
  v22 = *((_QWORD *)a2 + 7);
  v23 = *((_DWORD *)a2 + 227);
  if (v23)
    v24 = 16 * (v23 & 0xFFFFFFFE);
  else
    v24 = 0;
  v25 = JSC::JSArray::tryCreate(*((JSC::JSArray **)a2 + 7), v24, (JSC::Structure *)HIDWORD(v112), v9, v10, v11, v12, v13, v14);
  if (!v25)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, v26);
    v45 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v22, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
    }
    JSC::VM::throwException((JSC::VM *)v22, a2, v45, v44, v39, v40, v41, v42, v43);
    goto LABEL_37;
  }
  v34 = v25;
  if (HIDWORD(v112))
  {
    v35 = 0;
    while (1)
    {
      JSC::JSObject::putDirectIndex(v34, (unint64_t)a2, v35, *((unsigned int *)v111 + (_QWORD)v35) | 0xFFFE000000000000, v29, v30, v31, v32, v33);
      if (*(_DWORD *)(v22 + 80))
      {
        v36 = *(_DWORD *)(v22 + 80);
        if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v27, v28, v29, v30, v31, v32);
        if (*(_QWORD *)(v22 + 16))
          break;
      }
      v35 = (JSC::VM *)((char *)v35 + 1);
      if ((unint64_t)v35 >= HIDWORD(v112))
        goto LABEL_38;
    }
LABEL_37:
    v34 = 0;
  }
LABEL_38:
  if (*(_DWORD *)(v3 + 80))
  {
    v101 = *(_DWORD *)(v3 + 80);
    if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v3 + 64), 7u, v27, v28, v29, v30, v31, v32);
    if (*(_QWORD *)(v3 + 16))
    {
LABEL_33:
      v37 = 0;
      goto LABEL_56;
    }
  }
  v46 = (JSC *)*((_QWORD *)a2 + 7);
  v47 = *((_QWORD *)v46 + 1882);
  if (v47)
  {
    v48 = *(unsigned int *)(v47 + 60);
    v37 = *(_QWORD *)(v47 + 24);
    if (v37 < *(_QWORD *)(v47 + 32))
      goto LABEL_41;
    v37 = *(_QWORD *)(v47 + 40);
    if ((v37 & 1) != 0)
    {
      v103 = (uint64_t)v46 + 192;
      v110 = (JSC *)*((_QWORD *)a2 + 7);
      JSC::sanitizeStackForVM(v110, v26, v27, v28, v29, v30, v31, v32);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v47, v103, v48, 0, 0, v104, v105, v106);
      v46 = v110;
      v37 = SlowCase;
    }
    else
    {
      v102 = *(_QWORD *)(v37 + 8) ^ *(_QWORD *)(v47 + 48);
      *(_QWORD *)(v47 + 32) = v37 + HIDWORD(v102);
      *(_QWORD *)(v47 + 40) = v37 + (int)v102;
LABEL_41:
      *(_QWORD *)(v47 + 24) = v37 + v48;
    }
  }
  else
  {
    v108 = (JSC *)*((_QWORD *)a2 + 7);
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v46 + 14936, v108, 0x40uLL, 0, v29, v30, v31, v32);
    v46 = v108;
    v37 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
  *(_DWORD *)v37 = 0;
  *(_DWORD *)v37 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v37 + 4) = 16783360;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  *(_OWORD *)(v37 + 40) = 0u;
  *(_QWORD *)(v37 + 56) = 0;
  if (*((_BYTE *)v46 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"firstDay", 8uLL, v28, v29, v30, v31, v32, &v116);
  v52 = v116;
  LODWORD(v53) = Attribute - 1;
  if (Attribute == 1)
    v53 = 7;
  else
    v53 = v53;
  v116 = 0;
  v117 = v37;
  v118 = -1;
  v51.n128_u64[0] = 0x100000001000000;
  v119 = 0x1000000;
  v120 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v37, v3, (unint64_t)v52, v53 | 0xFFFE000000000000, 0, (uint64_t)&v116, v49, v50, v51);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weekend", 7uLL, v56, v57, v58, v59, v60, &v116);
  v61 = v116;
  v116 = 0;
  v117 = v37;
  v118 = -1;
  v62.n128_u64[0] = 0x100000001000000;
  v119 = 0x1000000;
  v120 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v37, v3, (unint64_t)v61, v34, 0, (uint64_t)&v116, v63, v64, v62);
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimalDays", 0xBuLL, v67, v68, v69, v70, v71, &v116);
  v72 = v116;
  v116 = 0;
  v117 = v37;
  v118 = -1;
  v73.n128_u64[0] = 0x100000001000000;
  v119 = 0x1000000;
  v120 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v37, v3, (unint64_t)v72, v7 | 0xFFFE000000000000, 0, (uint64_t)&v116, v74, v75, v73);
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
LABEL_56:
  v76 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v76, v26, v27, v28, v29, v30, v31, v32);
  }
  if (v4)
    ucal_close();
  return v37;
}

void JSC::IntlLocaleConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000002;
  *(_QWORD *)(v6 + 8) = "Locale";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::IntlLocaleConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlLocaleConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callIntlLocale(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Locale", 7);
}

char *JSC::constructIntlLocale(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  WTF::AtomStringImpl *v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  double v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t (*v69)(WTF::StringImpl **);
  WTF::StringImpl **v70;
  int v71;
  uint64_t (*v72)(WTF::StringImpl **);
  WTF::StringImpl **v73;
  JSC::JSGlobalObject *v74;
  JSC::VM *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;

  v10 = *(_QWORD *)(this + 56);
  v75 = (JSC::VM *)v10;
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 336);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v72 = *(uint64_t (**)(WTF::StringImpl **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v73 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v73 = (WTF::StringImpl **)(this - 16);
    v76 = *v73;
    v77 = this;
    v78 = (char *)(this + 336);
    SubclassStructure = (JSC::JSObject *)v72(&v76);
  }
  else
  {
    v76 = (WTF::StringImpl *)v10;
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v74 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v74 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v76, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v68 = *(_DWORD *)(v10 + 80);
      if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 336);
    if ((v15 & 1) != 0)
    {
      v69 = *(uint64_t (**)(WTF::StringImpl **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v70 = (WTF::StringImpl **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v70 = (WTF::StringImpl **)(v14 - 16);
      v76 = *v70;
      v77 = v14;
      v78 = (char *)(v14 + 336);
      v15 = v69(&v76);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v67 = *(_DWORD *)(v10 + 80);
    if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlLocale::create((JSC::IntlLocale *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v29 = *((int *)a2 + 8);
  v30 = v29 - 1;
  if (v29 == 1)
    return (char *)JSC::throwTypeError(this, &v75, (uint64_t)"First argument to Intl.Locale must be a string or an object", 60);
  v31 = *((_QWORD *)a2 + 6);
  if ((v31 & 0xFFFE000000000002) != 0)
    return (char *)JSC::throwTypeError(this, &v75, (uint64_t)"First argument to Intl.Locale must be a string or an object", 60);
  v32 = *(unsigned __int8 *)(v31 + 5);
  if (v32 != 2 && v32 <= 0x16)
    return (char *)JSC::throwTypeError(this, &v75, (uint64_t)"First argument to Intl.Locale must be a string or an object", 60);
  v34 = (char *)v18;
  if (v30 < 2)
    v35 = 10;
  else
    v35 = *((_QWORD *)a2 + 7);
  v79 = v31;
  v36 = *(_QWORD *)(this + 56);
  if (&JSC::IntlLocale::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
  {
    v38 = *(WTF::StringImpl **)(v31 + 40);
    if (v38)
      goto LABEL_38;
    JSC::languageTagForLocaleID(0, &v76);
    v38 = v76;
    v76 = 0;
    v39 = *(WTF::StringImpl **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v38;
    if (!v39)
    {
LABEL_37:
      if (!v38)
      {
LABEL_39:
        v76 = v38;
        goto LABEL_40;
      }
LABEL_38:
      *(_DWORD *)v38 += 2;
      goto LABEL_39;
    }
    v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      v39 = v76;
      v76 = 0;
      if (!v39)
        goto LABEL_36;
      v40 = *(_DWORD *)v39 - 2;
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
        goto LABEL_36;
      }
    }
    *(_DWORD *)v39 = v40;
LABEL_36:
    v38 = *(WTF::StringImpl **)(v31 + 40);
    goto LABEL_37;
  }
  if (v32 == 2)
  {
    v37 = *(int **)(v31 + 8);
    if ((v37 & 1) != 0)
    {
      v37 = *JSC::JSRopeString::resolveRope(v31, (JSC::JSGlobalObject *)this, (uint64_t)v20, v21, v26, v22, v23, v24, v25);
      if (!v37)
        goto LABEL_30;
    }
    else if (!v37)
    {
LABEL_30:
      v76 = (WTF::StringImpl *)v37;
      goto LABEL_40;
    }
    *v37 += 2;
    goto LABEL_30;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v79, (JSC::JSGlobalObject *)this, v20, v21, v22, v23, v24, v25, (int **)&v76);
LABEL_40:
  if (!*(_DWORD *)(v36 + 80))
    goto LABEL_41;
  v71 = *(_DWORD *)(v36 + 80);
  if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v20, v21, v22, v23, v24, v25);
  if (!*(_QWORD *)(v36 + 16))
LABEL_41:
    JSC::IntlLocale::initializeLocale(v34, (JSC::JSGlobalObject *)this, (JSC::Structure *)&v76, v35, v22, v23, v24, v25, *(double *)v26.i64, v27, v28);
  v41 = v76;
  v76 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  return v34;
}

uint64_t JSC::intlDisplayNamesConstructorSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  int v40;
  unsigned int v41;

  v5 = *((_QWORD *)this + 7);
  v12 = JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v14, v6, v7, v8, v9, v10, v11, &v39, v13);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v38 = *(_DWORD *)(v5 + 80);
  if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v5 + 16))
  {
    v24 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v22 = 10;
    else
      v22 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)v12, (JSC::Structure *)&v39, v22, v18, v19, v20, v21);
    v24 = v23;
  }
  if (v41)
  {
    v27 = v39;
    v28 = 8 * v41;
    do
    {
      v29 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v25 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
  }
  return v24;
}

uint64_t JSC::intlDisplayNamesPrototypeFuncOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v15;

  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::IntlDisplayNames::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v15, (uint64_t)"Intl.DisplayNames.prototype.of called on value that's not a DisplayNames", 73);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  return JSC::IntlDisplayNames::of(v12, this, v13, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t JSC::intlDisplayNamesPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IntlDisplayNames *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::IntlDisplayNames *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlDisplayNames::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Intl.DisplayNames.prototype.resolvedOptions called on value that's not a DisplayNames", 86);
  }
  else
  {
    return JSC::IntlDisplayNames::resolvedOptions(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::intlDurationFormatConstructorSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  int v40;
  unsigned int v41;

  v5 = *((_QWORD *)this + 7);
  v12 = JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v14, v6, v7, v8, v9, v10, v11, &v39, v13);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v38 = *(_DWORD *)(v5 + 80);
  if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v5 + 16))
  {
    v24 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v22 = 10;
    else
      v22 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)v12, (JSC::Structure *)&v39, v22, v18, v19, v20, v21);
    v24 = v23;
  }
  if (v41)
  {
    v27 = v39;
    v28 = 8 * v41;
    do
    {
      v29 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v25 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
  }
  return v24;
}

uint64_t JSC::intlDurationFormatPrototypeFuncFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::IntlDurationFormat *v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  uint64_t v22;
  int v23;
  _OWORD v24[5];
  _OWORD v25[5];
  JSC::VM *v26;

  v9 = *((_QWORD *)this + 7);
  v26 = (JSC::VM *)v9;
  v10 = (JSC::IntlDurationFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlDurationFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v21 = "Intl.DurationFormat.prototype.format called on value that's not a DurationFormat";
    v22 = 81;
    return JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v21, v22);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || ((v12 = *(unsigned __int8 *)(v11 + 5), v12 <= 0x16) ? (v13 = v12 == 2) : (v13 = 1), !v13))
  {
    v21 = "Intl.DurationFormat.prototype.format argument needs to be an object or a string";
    v22 = 80;
    return JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v21, v22);
  }
  JSC::TemporalDuration::toISO8601Duration((unint64_t)this, v11, (uint64_t)a3, a4, a5, a6, a7, a8, v25);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_11;
  v23 = *(_DWORD *)(v9 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_11:
  v24[2] = v25[2];
  v24[3] = v25[3];
  v24[4] = v25[4];
  v24[0] = v25[0];
  v24[1] = v25[1];
  return JSC::IntlDurationFormat::format(v10, this, v24, v15, v16, v17, v18, v19);
}

JSC::Exception *JSC::intlDurationFormatPrototypeFuncFormatToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::IntlDurationFormat *v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  uint64_t v22;
  int v23;
  _OWORD v24[5];
  _OWORD v25[5];
  JSC::VM *v26;

  v9 = *((_QWORD *)this + 7);
  v26 = (JSC::VM *)v9;
  v10 = (JSC::IntlDurationFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlDurationFormat::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v21 = "Intl.DurationFormat.prototype.formatToParts called on value that's not a DurationFormat";
    v22 = 88;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v21, v22);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || ((v12 = *(unsigned __int8 *)(v11 + 5), v12 <= 0x16) ? (v13 = v12 == 2) : (v13 = 1), !v13))
  {
    v21 = "Intl.DurationFormat.prototype.formatToParts argument needs to be an object or a string";
    v22 = 87;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v21, v22);
  }
  JSC::TemporalDuration::toISO8601Duration((unint64_t)this, v11, (uint64_t)a3, a4, a5, a6, a7, a8, v25);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_11;
  v23 = *(_DWORD *)(v9 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_11:
  v24[2] = v25[2];
  v24[3] = v25[3];
  v24[4] = v25[4];
  v24[0] = v25[0];
  v24[1] = v25[1];
  return JSC::IntlDurationFormat::formatToParts(v10, this, v24, v15, v16, v17, v18, v19);
}

unint64_t JSC::intlDurationFormatPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IntlDurationFormat *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::IntlDurationFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlDurationFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Intl.DurationFormat.prototype.resolvedOptions called on value that's not a DurationFormat", 90);
  }
  else
  {
    return JSC::IntlDurationFormat::resolvedOptions(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::intlListFormatConstructorSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  int v40;
  unsigned int v41;

  v5 = *((_QWORD *)this + 7);
  v12 = JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v14, v6, v7, v8, v9, v10, v11, &v39, v13);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v38 = *(_DWORD *)(v5 + 80);
  if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v5 + 16))
  {
    v24 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v22 = 10;
    else
      v22 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)v12, (JSC::Structure *)&v39, v22, v18, v19, v20, v21);
    v24 = v23;
  }
  if (v41)
  {
    v27 = v39;
    v28 = 8 * v41;
    do
    {
      v29 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v25 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
  }
  return v24;
}

uint64_t JSC::intlListFormatPrototypeFuncFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v13;

  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlListFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v13, (uint64_t)"Intl.ListFormat.prototype.format called on value that's not a ListFormat", 73);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  return JSC::IntlListFormat::format(a9, v10, (uint64_t)this, v11, a4, a5, a6, a7, a8);
}

unint64_t JSC::intlListFormatPrototypeFuncFormatToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v13;

  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlListFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v13, (uint64_t)"Intl.ListFormat.prototype.formatToParts called on value that's not a ListFormat", 80);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  return JSC::IntlListFormat::formatToParts(a9, v10, (uint64_t)this, v11, a4, a5, a6, a7, a8);
}

unint64_t JSC::intlListFormatPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IntlListFormat *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::IntlListFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlListFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Intl.ListFormat.prototype.resolvedOptions called on value that's not a ListFormat", 82);
  }
  else
  {
    return JSC::IntlListFormat::resolvedOptions(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 16 * v5);
    if (v4)
    {
      if (*(const void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 0x21)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198960D44);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

char *WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 2)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 1;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198960EECLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 2)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 1;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(const void **)result;
    if (v8 < 2)
    {
      v10 = (void *)(result + 16);
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 1;
    }
    else
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v3 + 8) = v8;
      *(_QWORD *)v3 = v10;
    }
    memcpy(v10, v9, 8 * v5);
    if ((const void *)(v3 + 16) != v9 && v9)
    {
      if (*(const void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v18 = *(unsigned int *)(v3 + 12);
  v19 = *(_DWORD *)(v3 + 12);
  v20 = *(_QWORD *)v3;
  v21 = a2[1];
  if (v21)
  {
    v22 = v21 - 1;
    if (v21 == 1)
    {
      v24 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v23 = *a2;
      v24 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v24 = 2;
      v24[1] = v22;
      *((_QWORD *)v24 + 1) = v23;
      v24[4] = 4;
      v19 = *(_DWORD *)(v3 + 12);
    }
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(v20 + 8 * v18) = v24;
  *(_DWORD *)(v3 + 12) = v19 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,std::span<char const,18446744073709551615ul>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  size_t v21;
  int *v22;
  _BYTE *v23;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(_QWORD **)a1;
    if (v8 < 2)
    {
      v10 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v8 >> 29)
        goto LABEL_26;
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v10;
    }
    memcpy(v10, v9, 8 * v5);
    if ((_QWORD *)(a1 + 16) != v9 && v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(_QWORD **)a1;
  v20 = *(_BYTE **)a2;
  if (!*(_QWORD *)a2)
  {
    v22 = 0;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(a2 + 8);
  if (!v21)
  {
    v22 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_25;
  }
  if (v21 >> 31)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1989611A4);
  }
  v22 = (int *)WTF::fastCompactMalloc((WTF *)(v21 + 20));
  v23 = v22 + 5;
  *v22 = 2;
  v22[1] = v21;
  *((_QWORD *)v22 + 1) = v22 + 5;
  v22[4] = 4;
  if (v21 == 1)
    *v23 = *v20;
  else
    memcpy(v23, v20, v21);
LABEL_25:
  v19[v18] = v22;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

char *WTF::Vector<int,7ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v10 < 8)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 7;
        goto LABEL_31;
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 4 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198961344);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 8)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 7;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

unint64_t JSC::IntlLocalePrototype::create(JSC::IntlLocalePrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xB00000002;
  *(_QWORD *)(v13 + 8) = "Intl.Locale";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlLocalePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlLocalePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::intlLocalePrototypeGetterBaseName(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.baseName called on value that's not a Locale", 67);
  }
  v3 = JSC::IntlLocale::baseName(this);
  if (*v3 && *((_DWORD *)*v3 + 1))
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterCalendar(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.calendar called on value that's not a Locale", 67);
  }
  v3 = JSC::IntlLocale::calendar(this);
  if (*v3)
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterCaseFirst(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.caseFirst called on value that's not a Locale", 68);
  }
  v3 = JSC::IntlLocale::caseFirst(this);
  if (*v3)
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterCollation(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.collation called on value that's not a Locale", 68);
  }
  v3 = JSC::IntlLocale::collation(this);
  if (*v3)
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterHourCycle(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.hourCycle called on value that's not a Locale", 68);
  }
  v3 = JSC::IntlLocale::hourCycle(this);
  if (*v3)
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterNumeric(unint64_t a1, uint64_t a2)
{
  int v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;

  v21 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v21, (uint64_t)"Intl.Locale.prototype.numeric called on value that's not a Locale", 66);
  }
  v3 = *(unsigned __int8 *)(a2 + 160);
  if (v3 == 2)
  {
    JSC::IntlLocale::keywordValue(1, (int **)&v22);
    v3 = WTF::equalInternal<unsigned char>((uint64_t)v22, (unint64_t)"yes", 3);
    *(_BYTE *)(a2 + 160) = v3;
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        v3 = *(unsigned __int8 *)(a2 + 160);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  if (v3 == 1)
    return 7;
  else
    return 6;
}

uint64_t JSC::intlLocalePrototypeGetterNumberingSystem(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.numberingSystem called on value that's not a Locale", 74);
  }
  v3 = JSC::IntlLocale::numberingSystem(this);
  if (*v3)
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterLanguage(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.language called on value that's not a Locale", 67);
  }
  v3 = JSC::IntlLocale::language(this);
  if (*v3 && *((_DWORD *)*v3 + 1))
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterScript(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.script called on value that's not a Locale", 65);
  }
  v3 = JSC::IntlLocale::script(this);
  if (*v3 && *((_DWORD *)*v3 + 1))
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

uint64_t JSC::intlLocalePrototypeGetterRegion(unint64_t a1, JSC::IntlLocale *this)
{
  JSC::VM *v2;
  WTF::StringImpl **v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v2 = *(JSC::VM **)(a1 + 56);
  v11 = v2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v11, (uint64_t)"Intl.Locale.prototype.region called on value that's not a Locale", 65);
  }
  v3 = JSC::IntlLocale::region(this);
  if (*v3 && *((_DWORD *)*v3 + 1))
    return JSC::jsString(v2, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9);
  else
    return 10;
}

unint64_t JSC::IntlNumberFormatConstructor::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v11, (uint64_t)a1, a2, (uint64_t)JSC::callIntlNumberFormat, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlNumberFormat);
  JSC::IntlNumberFormatConstructor::finishCreation(v12, a1, a3);
  return v11;
}

unint64_t JSC::allocateCell<JSC::IntlNumberFormatConstructor>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a1 + 4819;
  v10 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = a1[4819];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v13 = (uint64_t)(a1 + 4816);
      v14 = (uint64_t)(a1 + 24);
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v13, v14, v10, 0, 0, v15, v16, v17);
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v12);
    v9[2] = result + (int)v12;
  }
  *v9 = result + v10;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

void JSC::IntlNumberFormatConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xC00000002;
  *(_QWORD *)(v6 + 8) = "NumberFormat";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

uint64_t JSC::callIntlNumberFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  JSC::VM *v8;
  JSC::Structure *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const JSC::PropertyTable *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int HasInstance;
  int v44;
  int v45;
  _QWORD v46[4];

  v5 = *((_QWORD *)a2 + 5);
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)this + 7);
  v8 = (JSC::VM *)JSC::JSGlobalObject::numberFormatStructure((unint64_t)this);
  v15 = JSC::IntlNumberFormat::create((JSC::IntlNumberFormat *)v7, v8, v9, v10, v11, v12, v13, v14);
  v21 = v15;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = 10;
  }
  else
  {
    v22 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v23 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v23 = 10;
LABEL_4:
  JSC::IntlNumberFormat::initializeNumberFormat(v15, this, v22, (JSC::Symbol *)v23, v16, v17, v18, v19, v20);
  if (*(_DWORD *)(v7 + 80))
  {
    v44 = *(_DWORD *)(v7 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v24, (uint64_t)v25, v26, v27, v28, v29);
    if (*(_QWORD *)(v7 + 16))
      return 0;
  }
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) < 0x17u)
    return v21;
  JSC::JSObject::getDirect(v6, (JSC::VM *)v7, *(_QWORD *)(*(_QWORD *)(v7 + 41952) + 2160), v25, v26, v27, v28, v29);
  HasInstance = JSC::JSObject::defaultHasInstance((unint64_t)this, v5, v30, v31, v32, v33, v34, v35);
  if (*(_DWORD *)(v7 + 80))
  {
    v45 = *(_DWORD *)(v7 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v36, v37, v38, v39, v40, v41);
    if (*(_QWORD *)(v7 + 16))
      return 0;
  }
  if (!HasInstance)
    return v21;
  v46[1] = 0;
  v46[2] = 0;
  v46[0] = v21;
  v46[3] = 0x70000000ELL;
  (*(void (**)(uint64_t, JSC *, _QWORD, _QWORD *, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x90))(v5, this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 41952) + 48) + 4312), v46, 1);
  return v5;
}

unint64_t JSC::constructIntlNumberFormat(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::JSObject *v21;
  uint64_t (*v22)(JSC::VM **);
  uint64_t *v23;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  JSC::VM *v26;
  JSC::JSGlobalObject **v27;
  char *v28;

  v9 = *(JSC::VM **)(this + 56);
  v24 = *((_QWORD *)a2 + 5);
  v25 = (JSC::JSGlobalObject *)this;
  if (v24 != *((_QWORD *)a2 + 3))
  {
    v26 = v9;
    v27 = &v25;
    v28 = (char *)&v24;
    v21 = JSC::constructIntlNumberFormat(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t *)&v26, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_12:
    v10 = v21;
    goto LABEL_3;
  }
  v10 = *(JSC::VM **)(this + 400);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(JSC::VM **))((unint64_t)v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v23 = (uint64_t *)(this - 16);
    v26 = (JSC::VM *)*v23;
    v27 = (JSC::JSGlobalObject **)this;
    v28 = (char *)(this + 400);
    v21 = (JSC::JSObject *)v22(&v26);
    goto LABEL_12;
  }
LABEL_3:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v11 = JSC::IntlNumberFormat::create(v9, v10, a3, (uint64_t)a4, a5, a6, a7, a8);
  v17 = v11;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = 10;
    goto LABEL_10;
  }
  v18 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_10:
    v19 = 10;
    goto LABEL_7;
  }
  v19 = *((_QWORD *)a2 + 7);
LABEL_7:
  JSC::IntlNumberFormat::initializeNumberFormat(v11, v25, v18, (JSC::Symbol *)v19, v12, v13, v14, v15, v16);
  return v17;
}

unint64_t JSC::IntlNumberFormatPrototype::create(JSC::IntlNumberFormatPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::IntlNumberFormatPrototype::finishCreation((JSC::IntlNumberFormatPrototype *)v11, this, a2);
  return v11;
}

void JSC::IntlNumberFormatPrototype::finishCreation(JSC::IntlNumberFormatPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1100000002;
  *(_QWORD *)(v7 + 8) = "Intl.NumberFormat";
  *(_DWORD *)(v7 + 16) = 4;
  v67 = (WTF::StringImpl *)v7;
  v14 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v67, v8, v9, v10, v11, v12, v13);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v6, v14, 6, v15, v16, v17, v18);
  v26 = v67;
  v67 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  JSC::Identifier::add((uint64_t)a2, "formatRange", 12, v21, v22, v23, v24, v25, &v67);
  v27 = v67;
  JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v67, 2, (uint64_t)JSC::intlNumberFormatPrototypeFuncFormatRange, 0, 0, 4u);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  JSC::Identifier::add((uint64_t)a2, "formatRangeToParts", 19, v30, v31, v32, v33, v34, &v67);
  v35 = v67;
  JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v67, 2, (uint64_t)JSC::intlNumberFormatPrototypeFuncFormatRangeToParts, 0, 0, 4u);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
}

uint64_t JSC::intlNumberFormatPrototypeFuncFormatRange(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlNumberFormat *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v31;
  int v32;
  double v33;
  int v34;
  double v35;
  int v36;
  JSC::VM *v37;
  char v38;

  v10 = *((_QWORD *)this + 7);
  v37 = (JSC::VM *)v10;
  v11 = (JSC::IntlNumberFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlNumberFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v28 = "Intl.NumberFormat.prototype.formatRange called on value that's not a NumberFormat";
    v29 = 82;
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)v28, v29);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || *((_DWORD *)a2 + 8) == 2
    || *((_QWORD *)a2 + 6) == 10
    || (v12 = *((_QWORD *)a2 + 7), v12 == 10))
  {
    v28 = "start or end is undefined";
    v29 = 26;
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)v28, v29);
  }
  JSC::toIntlMathematicalValue((JSC::VM **)this, *((_QWORD *)a2 + 6), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v35, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
  v31 = *(_DWORD *)(v10 + 80);
  if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
  {
    v27 = 0;
  }
  else
  {
LABEL_8:
    JSC::toIntlMathematicalValue((JSC::VM **)this, v12, v13, v14, v15, v16, v17, v18, (uint64_t)&v33, v19);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_33;
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v10 + 16))
    {
      v27 = 0;
    }
    else
    {
LABEL_33:
      if (v36 | v34)
        v26 = JSC::IntlNumberFormat::formatRange((int)v11, (unint64_t)this, (JSC::IntlMathematicalValue *)&v35, (JSC::IntlMathematicalValue *)&v33);
      else
        v26 = JSC::IntlNumberFormat::formatRange(v11, this, v35, v33);
      v27 = v26;
    }
    if (v34 != -1)
      ((void (*)(char *, double *))off_1E359CE60[v34])(&v38, &v33);
  }
  if (v36 != -1)
    ((void (*)(double *, double *))off_1E359CE60[v36])(&v33, &v35);
  return v27;
}

JSC::VM *JSC::intlNumberFormatPrototypeFuncFormatRangeToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  JSC::VM *v27;
  const char *v28;
  uint64_t v29;
  int v31;
  int v32;
  double v33;
  int v34;
  double v35;
  int v36;
  JSC::VM *v37;
  char v38;

  v10 = *((_QWORD *)this + 7);
  v37 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlNumberFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v28 = "Intl.NumberFormat.prototype.formatRangeToParts called on value that's not a NumberFormat";
    v29 = 89;
    return (JSC::VM *)JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)v28, v29);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || *((_DWORD *)a2 + 8) == 2
    || *((_QWORD *)a2 + 6) == 10
    || (v12 = *((_QWORD *)a2 + 7), v12 == 10))
  {
    v28 = "start or end is undefined";
    v29 = 26;
    return (JSC::VM *)JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)v28, v29);
  }
  JSC::toIntlMathematicalValue((JSC::VM **)this, *((_QWORD *)a2 + 6), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v35, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
  v31 = *(_DWORD *)(v10 + 80);
  if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
  {
    v27 = 0;
  }
  else
  {
LABEL_8:
    JSC::toIntlMathematicalValue((JSC::VM **)this, v12, v13, v14, v15, v16, v17, v18, (uint64_t)&v33, v19);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_33;
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v10 + 16))
    {
      v27 = 0;
    }
    else
    {
LABEL_33:
      if (v36 | v34)
        v26 = JSC::IntlNumberFormat::formatRangeToParts(v11, (unint64_t)this, (JSC::IntlMathematicalValue *)&v35, (JSC::IntlMathematicalValue *)&v33);
      else
        v26 = (JSC::VM *)JSC::IntlNumberFormat::formatRangeToParts((JSC::IntlNumberFormat *)v11, this, v35, v33);
      v27 = v26;
    }
    if (v34 != -1)
      ((void (*)(char *, double *))off_1E359CE60[v34])(&v38, &v33);
  }
  if (v36 != -1)
    ((void (*)(double *, double *))off_1E359CE60[v36])(&v33, &v35);
  return v27;
}

uint64_t JSC::intlNumberFormatPrototypeGetterFormat(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSFunction *v20;
  uint64_t v22;
  JSC::ExecutableBase *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::ExecutableBase *v32;
  int8x16_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(WTF::StringImpl **);
  WTF::StringImpl **v62;
  JSC::VM *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v10 = *(_QWORD *)(a1 + 56);
  v63 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a1 + 400);
  if ((v11 & 1) != 0)
  {
    v61 = *(void (**)(WTF::StringImpl **))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v62 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v62 = (WTF::StringImpl **)(a1 - 16);
    v64 = *v62;
    v65 = a1;
    v66 = a1 + 400;
    v61(&v64);
  }
  v19 = JSC::unwrapForLegacyIntlConstructor<JSC::IntlNumberFormat>(a1, a2, *(_DWORD **)(a1 + 408), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v12, v13, v14, v15, v16, v17, v18))
  {
    return 0;
  }
  if (!v19)
    return JSC::throwTypeError(a1, &v63, (uint64_t)"Intl.NumberFormat.prototype.format called on value that's not a NumberFormat", 77);
  v20 = *(JSC::JSFunction **)(v19 + 16);
  if (!v20)
  {
    v22 = v10 + 41952;
    v23 = *(JSC::ExecutableBase **)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28);
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x600000002;
    *(_QWORD *)(v24 + 8) = "format";
    *(_DWORD *)(v24 + 16) = 4;
    v64 = (WTF::StringImpl *)v24;
    v32 = (JSC::ExecutableBase *)JSC::JSFunction::create(v10, (uint64_t)v23, 1, &v64, (uint64_t)JSC::intlNumberFormatFuncFormat, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v34 = v64;
    v64 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v33.i64[0] = 1.0;
    v20 = (JSC::JSFunction *)JSC::JSBoundFunction::create((JSC::VM *)v10, (unint64_t)v23, v32, v19, 0, 0, *(_QWORD *)(v10 + 41968), v31, v33);
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v35, v36, v37, v38, v39, v40, v41))
    {
      return 0;
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(v20, (JSC::FunctionRareData *)v10, v23, *(const JSC::PropertyTable **)(*(_QWORD *)v22 + 1968), v38, v39, v40, v41, v42);
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v43, v44, v45, v46, v47, v48, v49))
        return 0;
    }
    v51 = *(_QWORD *)(*(_QWORD *)v22 + 1968);
    v52 = *(_QWORD *)(v10 + 41968);
    v64 = 0;
    v65 = (unint64_t)v20;
    v66 = 0x1000000FFFFFFFFLL;
    v50.n128_u64[0] = 0x100000001000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v20, v10, v51, v52, 6, (uint64_t)&v64, v48, v49, v50);
    *(_QWORD *)(v19 + 16) = v20;
    if (v20 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v19 + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, v19);
  }
  return (uint64_t)v20;
}

uint64_t JSC::intlNumberFormatFuncFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v23;
  int v24;
  JSC::VM *v25;
  char v26;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlNumberFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"Intl.NumberFormat.prototype.format called on value that's not a NumberFormat", 77);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::toIntlMathematicalValue((JSC::VM **)this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v23, a9);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v13, v14, v15, v16, v17, v18, v19))
  {
    v21 = 0;
  }
  else
  {
    if (v24)
      v20 = JSC::IntlNumberFormat::format(v11, (unint64_t)this, (JSC::IntlMathematicalValue *)&v23);
    else
      v20 = JSC::IntlNumberFormat::format((JSC::IntlNumberFormat *)v11, this, v23);
    v21 = v20;
  }
  if (v24 != -1)
    ((void (*)(char *, double *))off_1E359CE60[v24])(&v26, &v23);
  return v21;
}

unint64_t JSC::IntlObject::create(JSC::IntlObject *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  char *v11;
  unint64_t SlowCase;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  unint64_t v38;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t Structure;
  uint64_t v47;
  JSC::JSObject *v48;
  unint64_t v49;
  JSC::JSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  unint64_t v55;
  unint64_t v56;
  JSC::VM *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  JSC::JSObject *v66;
  unint64_t v67;
  JSC::JSObject *v68;
  JSC::JSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t (*v84)(WTF::StringImpl **);
  WTF::StringImpl **v85;
  unint64_t v86;
  uint64_t (*v87)(WTF::StringImpl **);
  WTF::StringImpl **v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  JSC::VM *v100;
  _QWORD *v101;

  v10 = (_QWORD *)((char *)this + 38904);
  v11 = (char *)this + 192;
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v83 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v83);
    *((_QWORD *)this + 4865) = SlowCase + (int)v83;
LABEL_2:
    *v10 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)v11, 16, 0, 0, v90, v91, v92);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v13 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = (unint64_t)a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v14 = (unint64_t *)((char *)this + 38552);
  v15 = *(_QWORD *)(v10[381] + 2776);
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x400000002;
  *(_QWORD *)(v16 + 8) = "Intl";
  *(_DWORD *)(v16 + 16) = 4;
  v99 = (WTF::StringImpl *)v16;
  v23 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v99, v17, v18, v19, v20, v21, v22);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, v15, v23, 6, v24, v25, v26, v27);
  v36 = v99;
  v99 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (BYTE6(qword_1ECF4C7A0))
  {
    v37 = *(_QWORD *)(v10[381] + 560);
    v38 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
    Structure = JSC::IntlDurationFormatConstructor::createStructure((unint64_t *)this, (JSC::VM *)v38, *(_QWORD *)(v38 + 664), v30, v31, v32, v33, v34, v35);
    v47 = *(_QWORD *)(v38 + 320);
    if ((v47 & 1) != 0)
    {
      v87 = *(uint64_t (**)(WTF::StringImpl **))(v47 & 0xFFFFFFFFFFFFFFFCLL);
      v88 = (WTF::StringImpl **)(v38 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v38 & 8) != 0)
        v88 = (WTF::StringImpl **)(v38 - 16);
      v99 = *v88;
      v100 = (JSC::VM *)v38;
      v101 = (_QWORD *)(v38 + 320);
      v47 = v87(&v99);
    }
    if (*(_QWORD *)(v47 + 48) == 2)
      v48 = 0;
    else
      v48 = *(JSC::JSObject **)(v47 + 48);
    v49 = *v14;
    if (*v14 >= *((_QWORD *)this + 4820))
    {
      v49 = *((_QWORD *)this + 4821);
      if ((v49 & 1) != 0)
      {
        JSC::sanitizeStackForVM(this, v39, v40, v41, v42, v43, v44, v45);
        v49 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)v11, 48, 0, 0, v96, v97, v98);
        goto LABEL_15;
      }
      v89 = *(_QWORD *)(v49 + 8) ^ *((_QWORD *)this + 4822);
      *((_QWORD *)this + 4820) = v49 + HIDWORD(v89);
      *((_QWORD *)this + 4821) = v49 + (int)v89;
    }
    *v14 = v49 + 48;
LABEL_15:
    *(_DWORD *)v49 = 0;
    v50 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v49, (uint64_t)this, Structure, (uint64_t)JSC::callIntlDurationFormat, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlDurationFormat);
    JSC::IntlDurationFormatConstructor::finishCreation(v50, this, v48);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, v37, v49, 4, v51, v52, v53, v54);
  }
  v55 = *(_QWORD *)(v10[381] + 640);
  v56 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v64 = JSC::IntlListFormatConstructor::createStructure((unint64_t *)this, (JSC::VM *)v56, *(_QWORD *)(v56 + 664), v30, v31, v32, v33, v34, v35);
  v65 = *(_QWORD *)(v56 + 328);
  if ((v65 & 1) != 0)
  {
    v84 = *(uint64_t (**)(WTF::StringImpl **))(v65 & 0xFFFFFFFFFFFFFFFCLL);
    v85 = (WTF::StringImpl **)(v56 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v56 & 8) != 0)
      v85 = (WTF::StringImpl **)(v56 - 16);
    v99 = *v85;
    v100 = (JSC::VM *)v56;
    v101 = (_QWORD *)(v56 + 328);
    v65 = v84(&v99);
  }
  v66 = *(JSC::JSObject **)(v65 + 48);
  v67 = *v14;
  if (*v14 < *((_QWORD *)this + 4820))
    goto LABEL_18;
  v67 = *((_QWORD *)this + 4821);
  if ((v67 & 1) == 0)
  {
    v86 = *(_QWORD *)(v67 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v67 + HIDWORD(v86);
    *((_QWORD *)this + 4821) = v67 + (int)v86;
LABEL_18:
    *v14 = v67 + 48;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM(this, v57, v58, v59, v60, v61, v62, v63);
  v67 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)v11, 48, 0, 0, v93, v94, v95);
LABEL_19:
  if (v66 == (JSC::JSObject *)2)
    v68 = 0;
  else
    v68 = v66;
  *(_DWORD *)v67 = 0;
  v69 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v67, (uint64_t)this, v64, (uint64_t)JSC::callIntlListFormat, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlListFormat);
  JSC::IntlListFormatConstructor::finishCreation(v69, this, v68);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, v55, v67, 4, v70, v71, v72, v73);
  return SlowCase;
}

uint64_t JSC::IntlObject::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlObject::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::localeIDBufferForLanguageTagWithNullTerminator(JSC *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  size_t __n;
  _BYTE v21[36];
  int v22;

  if (!*(_QWORD *)this || !*(_QWORD *)(*(_QWORD *)this + 8))
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 32;
    return;
  }
  v22 = 0;
  v19 = (WTF *)v21;
  __n = 0x2000000020;
  v5 = uloc_forLanguageTag();
  v13 = v22;
  if (v22 == 15 || v22 == -124)
  {
    v14 = v5 + 1;
    if ((unint64_t)(v5 + 1) > 0x20)
    {
      if ((unint64_t)v14 >= 0x29)
        v15 = v14;
      else
        v15 = 41;
      if (v15 < 0x21)
      {
        v19 = (WTF *)v21;
        LODWORD(__n) = 32;
        v16 = (WTF *)v21;
      }
      else
      {
        if (HIDWORD(v15))
        {
          __break(0xC471u);
          return;
        }
        v16 = (WTF *)WTF::fastMalloc((WTF *)v15);
        LODWORD(__n) = v15;
        v19 = v16;
      }
      memcpy(v16, v21, 0x20uLL);
    }
    HIDWORD(__n) = v14;
    v22 = 0;
    uloc_forLanguageTag();
    v13 = v22;
  }
  if (v13 > 0)
    goto LABEL_23;
  v17 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    LODWORD(v17) = *(_DWORD *)(v17 + 8);
  if ((_DWORD)v17)
  {
LABEL_23:
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 32;
    if (v21 != (_BYTE *)v19 && v19)
      WTF::fastFree((unint64_t)v19, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 32;
    if (v19 == (WTF *)v21)
    {
      v18 = HIDWORD(__n);
      memcpy((void *)(a2 + 16), v21, HIDWORD(__n));
    }
    else
    {
      *(_QWORD *)a2 = v19;
      v18 = HIDWORD(__n);
      *(_DWORD *)(a2 + 8) = __n;
    }
    *(_DWORD *)(a2 + 12) = v18;
  }
}

void JSC::canonicalizeUnicodeExtensionsAfterICULocaleCanonicalization(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v8;
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  char *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  WTF *v21;
  BOOL v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  WTF *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  int *v41;
  int v42;
  char *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char v49;
  char *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  char v55;
  WTF *v56;
  int v57;
  unsigned int v58;
  char *v59;
  unsigned int v60;
  char v61;

  v8 = *(_DWORD *)(a1 + 12);
  v59 = *(char **)a1;
  v60 = v8;
  v61 = 1;
  v9 = WTF::StringView::find((uint64_t)&v59, (uint8x8_t *)"-u-", 3uLL, 0);
  if (v9 == -1)
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 32;
    v13 = *(char **)a1;
    if (*(_QWORD *)a1 == a1 + 16)
    {
      v14 = *(_DWORD *)(a1 + 12);
      memcpy((void *)(a2 + 16), v13, v14);
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)a2 = v13;
      v53 = *(_DWORD *)(a1 + 8);
      v14 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = 32;
      *(_DWORD *)(a2 + 8) = v53;
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a2 + 12) = v14;
  }
  else
  {
    v15 = (unsigned __int8 *)v9;
    v16 = v60;
    v17 = v9 + 3;
    if (v9 + 3 < (unint64_t)v60)
    {
      do
      {
        v18 = WTF::StringView::find((WTF::StringView *)&v59, 0x2Du, v17, v10, v11, v12);
        if (v18 == -1)
          break;
        v19 = v18 + 2;
        if (v18 + 2 < (unint64_t)v60)
        {
          if (v61)
          {
            if (v60 <= v19)
              goto LABEL_61;
            v20 = v59[v19];
          }
          else
          {
            if (v60 <= v19)
              goto LABEL_61;
            v20 = *(unsigned __int16 *)&v59[2 * v19];
          }
          if (v20 == 45)
          {
            v16 = v18;
            break;
          }
        }
        v17 = v18 + 1;
      }
      while (v18 + 1 < (unint64_t)v60);
    }
    v21 = (WTF *)*(unsigned int *)(a1 + 12);
    if (v15 != (unsigned __int8 *)-3)
    {
      v22 = v15 + 2 > (unsigned __int8 *)v21;
      v21 = (WTF *)(v15 + 2);
      if (v22)
        goto LABEL_61;
    }
    WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<char const,18446744073709551615ul>(a2, *(char **)a1, v21);
    v23 = WTF::StringView::substring((const char *)&v59, v15, (int)v16 - (int)v15);
    JSC::unicodeExtensionComponents((uint64_t)&v56, (uint64_t)v23, v24);
    if (v58)
    {
      LODWORD(v4) = 0;
      v3 = 45;
      v15 = "true";
      goto LABEL_24;
    }
LABEL_19:
    v32 = *(unsigned int *)(a1 + 12);
    v15 = (unsigned __int8 *)(v32 - v16);
    if (v32 < v16)
    {
LABEL_61:
      __break(1u);
LABEL_62:
      WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(a2, (unint64_t)&v55);
      while (1)
      {
        if (!(_DWORD)v2)
          goto LABEL_49;
        v36 = *(unsigned int *)(a2 + 12);
        v37 = v36 + v2;
        if (v36 + v2 > *(unsigned int *)(a2 + 8))
        {
          WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(a2, (WTF *)(v36 + v2));
          v36 = *(unsigned int *)(a2 + 12);
          if (v37 < v36)
            goto LABEL_65;
        }
        v38 = (_BYTE *)(*(_QWORD *)a2 + v36);
        v39 = v2;
        do
        {
          v40 = *(_BYTE *)v5++;
          *v38++ = v40;
          --v39;
        }
        while (v39);
        *(_DWORD *)(a2 + 12) = v37;
        if ((_DWORD)v2 == 2)
        {
          v5 = (v4 + 1);
          LODWORD(v4) = v5;
          if (v58 > v5)
          {
            v41 = (int *)((char *)v56 + 16 * v5 + 8);
            v4 = v5;
            while (1)
            {
              v42 = *v41;
              v41 += 4;
              if (v42 == 2)
                break;
              if (v58 == ++v4)
              {
                LODWORD(v4) = v58;
                break;
              }
            }
            if (v5 < v4)
            {
              do
              {
                if (v5 >= v58)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198963558);
                }
                v43 = (char *)v56 + 16 * v5;
                v44 = *(unsigned __int8 **)v43;
                v2 = *((_QWORD *)v43 + 1);
                if (!WTF::operator==(*(unsigned __int8 **)v43, v2, v15, 5))
                {
                  v55 = v3;
                  v45 = *(unsigned int *)(a2 + 12);
                  if ((_DWORD)v45 == *(_DWORD *)(a2 + 8))
                  {
                    WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(a2, (unint64_t)&v55);
                  }
                  else
                  {
                    *(_BYTE *)(*(_QWORD *)a2 + v45) = v3;
                    ++*(_DWORD *)(a2 + 12);
                  }
                  v46 = v2;
                  if ((_DWORD)v2)
                  {
                    v47 = *(unsigned int *)(a2 + 12);
                    v2 = v2 + v47;
                    if (v46 + v47 > *(unsigned int *)(a2 + 8))
                    {
                      v54 = v46;
                      WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(a2, (WTF *)(v46 + v47));
                      v46 = v54;
                      v15 = "true";
                      v47 = *(unsigned int *)(a2 + 12);
                      if (v2 < v47)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198963518);
                      }
                    }
                    v48 = (_BYTE *)(*(_QWORD *)a2 + v47);
                    do
                    {
                      v49 = *v44++;
                      *v48++ = v49;
                      --v46;
                    }
                    while (v46);
                    *(_DWORD *)(a2 + 12) = v2;
                  }
                }
                ++v5;
              }
              while ((_DWORD)v4 != (_DWORD)v5);
            }
          }
        }
        else
        {
LABEL_49:
          LODWORD(v4) = v4 + 1;
        }
        if (v58 <= v4)
          goto LABEL_19;
LABEL_24:
        v34 = (char *)v56 + 16 * v4;
        v5 = *(_QWORD *)v34;
        v2 = *((unsigned int *)v34 + 2);
        v55 = v3;
        v35 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v35 == *(_DWORD *)(a2 + 8))
          goto LABEL_62;
        *(_BYTE *)(*(_QWORD *)a2 + v35) = v3;
        ++*(_DWORD *)(a2 + 12);
      }
    }
    if (v32 != v16)
    {
      v50 = *(char **)a1;
      v51 = *(unsigned int *)(a2 + 12);
      v52 = &v15[v51];
      if ((unint64_t)&v15[v51] > *(unsigned int *)(a2 + 8))
      {
        WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(a2, (WTF *)&v15[v51]);
        v51 = *(unsigned int *)(a2 + 12);
      }
      if ((unint64_t)v52 < v51)
      {
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x198963484);
      }
      memcpy((void *)(*(_QWORD *)a2 + v51), &v50[v16], (size_t)v15);
      *(_DWORD *)(a2 + 12) = (_DWORD)v52;
    }
    v33 = v56;
    if (v56)
    {
      v56 = 0;
      v57 = 0;
      WTF::fastFree((unint64_t)v33, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void JSC::unicodeExtensionComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v22 = a2;
  v23 = a3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3 >= 3)
  {
    v5 = a3;
    if ((_DWORD)a3 != 3)
    {
      v6 = 1;
      v7 = 3;
      v8 = 3;
      v9 = 3;
      while (1)
      {
        if (BYTE4(v23))
        {
          if (v23 <= v7)
            goto LABEL_40;
          v10 = *(unsigned __int8 *)(v22 + v7);
        }
        else
        {
          if (v23 <= v7)
          {
LABEL_40:
            __break(1u);
            return;
          }
          v10 = *(unsigned __int16 *)(v22 + 2 * v7);
        }
        if (v10 == 45)
        {
          if (v7 - v9 == 2)
          {
            if ((unint64_t)(v9 - v8) >= 2)
            {
              *(_QWORD *)&v21 = WTF::StringView::substring((const char *)&v22, v8, (int)v9 - (int)v8 - 1);
              *((_QWORD *)&v21 + 1) = v15;
              v16 = *(unsigned int *)(a1 + 12);
              if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
              {
                WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a1, (unint64_t)&v21);
              }
              else
              {
                *(_OWORD *)(*(_QWORD *)a1 + 16 * v16) = v21;
                ++*(_DWORD *)(a1 + 12);
              }
            }
            *(_QWORD *)&v21 = WTF::StringView::substring((const char *)&v22, v9, 2u);
            *((_QWORD *)&v21 + 1) = v11;
            v12 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
            {
              WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a1, (unint64_t)&v21);
            }
            else
            {
              *(_OWORD *)(*(_QWORD *)a1 + 16 * v12) = v21;
              ++*(_DWORD *)(a1 + 12);
            }
            v6 = 0;
            ++v7;
          }
          else
          {
            if ((v6 & 1) == 0)
            {
              v6 = 0;
              v9 = ++v7;
              goto LABEL_9;
            }
            *(_QWORD *)&v21 = WTF::StringView::substring((const char *)&v22, v9, (int)v7 - (int)v9);
            *((_QWORD *)&v21 + 1) = v13;
            v14 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
            {
              WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a1, (unint64_t)&v21);
            }
            else
            {
              *(_OWORD *)(*(_QWORD *)a1 + 16 * v14) = v21;
              ++*(_DWORD *)(a1 + 12);
            }
            ++v7;
            v6 = 1;
          }
          v9 = v7;
          v8 = v7;
        }
        else
        {
          ++v7;
        }
LABEL_9:
        if (v7 == v5)
          goto LABEL_24;
      }
    }
    v9 = 3;
    v8 = 3;
LABEL_24:
    if (v5 - v9 == 2)
    {
      if ((unint64_t)(v9 - v8) >= 2)
      {
        *(_QWORD *)&v21 = WTF::StringView::substring((const char *)&v22, v8, (int)v9 - (int)v8 - 1);
        *((_QWORD *)&v21 + 1) = v19;
        v20 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a1, (unint64_t)&v21);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)a1 + 16 * v20) = v21;
          ++*(_DWORD *)(a1 + 12);
        }
      }
    }
    else
    {
      LODWORD(v9) = v8;
    }
    *(_QWORD *)&v21 = WTF::StringView::substring((const char *)&v22, v9, v3 - (int)v9);
    *((_QWORD *)&v21 + 1) = v17;
    v18 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a1, (unint64_t)&v21);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)a1 + 16 * v18) = v21;
      ++*(_DWORD *)(a1 + 12);
    }
  }
}

void JSC::languageTagForLocaleID(const char *a1@<X1>, _QWORD *a2@<X8>)
{
  int v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;
  _BYTE *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  int v26;
  _BYTE v27[32];

  v3 = (int)a1;
  v24 = (WTF *)v27;
  v25 = 32;
  LODWORD(v20) = 0;
  v26 = uloc_toLanguageTag();
  JSC::canonicalizeUnicodeExtensionsAfterICULocaleCanonicalization((uint64_t)&v24, (uint64_t)&v20);
  v12 = v20;
  v13 = v22;
  if (!v3)
  {
    if (v20)
    {
      if (v22)
      {
        if ((v22 & 0x80000000) != 0)
          goto LABEL_25;
        v16 = (int *)WTF::fastCompactMalloc((WTF *)(v22 + 20));
        v17 = v16 + 5;
        *v16 = 2;
        v16[1] = v13;
        *((_QWORD *)v16 + 1) = v16 + 5;
        v16[4] = 4;
        if ((_DWORD)v13 == 1)
          *v17 = *(_BYTE *)v12;
        else
          memcpy(v17, v12, v13);
      }
      else
      {
        v16 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v16 = 0;
    }
    *a2 = v16;
    goto LABEL_14;
  }
  if (!v22)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = &WTF::StringImpl::s_emptyAtomString;
    goto LABEL_14;
  }
  if ((v22 & 0x80000000) != 0)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198963A14);
  }
  v14 = WTF::fastCompactMalloc((WTF *)(v22 + 20));
  v15 = (_BYTE *)(v14 + 20);
  *(_DWORD *)v14 = 2;
  *(_DWORD *)(v14 + 4) = v13;
  *(_QWORD *)(v14 + 8) = v14 + 20;
  *(_DWORD *)(v14 + 16) = 4;
  *a2 = v14;
  if ((_DWORD)v13 == 1)
    *v15 = *(_BYTE *)v12;
  else
    memcpy(v15, v12, v13);
  WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
  *(_DWORD *)v14 |= 1u;
LABEL_14:
  v18 = v20;
  if (&v23 != (uint64_t *)v20 && v20)
  {
    v20 = 0;
    v21 = 0;
    WTF::fastFree((unint64_t)v18, v5, v6, v7, v8, v9, v10, v11);
  }
  v19 = v24;
  if (v27 != (_BYTE *)v24)
  {
    if (v24)
    {
      v24 = 0;
      v25 = 0;
      WTF::fastFree((unint64_t)v19, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t *JSC::intlAvailableLocales(JSC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::intlAvailableLocales(void)::initializeOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::intlAvailableLocales(void)::initializeOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableLocales(void)::$_0 &&>>);
  }
  return &JSC::intlAvailableLocales(void)::availableLocales;
}

void std::call_once[abi:sn180100]<JSC::intlCollatorAvailableLocales(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::intlCollatorAvailableLocales(void)::initializeOnce);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::intlCollatorAvailableLocales(void)::initializeOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlCollatorAvailableLocales(void)::$_0 &&>>);
  }
}

uint64_t JSC::intlBooleanOption(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v22;
  uint64_t v23[5];

  if (!a2)
    return 2;
  v23[3] = v8;
  v23[4] = v9;
  v12 = *(JSC::VM **)(a1 + 56);
  v13 = JSC::JSObject::get(a2, a1, a3, a4, a5, a6, a7, a8);
  v23[0] = v13;
  if (!*((_DWORD *)v12 + 20))
  {
    if (v13 == 10)
      return 2;
    return JSC::JSValue::toBoolean(v23, a1);
  }
  v22 = v13;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, v14, v15, v16, v17, v18, v19, v20);
  result = 2;
  if (!hasExceptionsAfterHandlingTraps && v22 != 10)
    return JSC::JSValue::toBoolean(v23, a1);
  return result;
}

void JSC::intlStringOption(JSC::JSGlobalObject *a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  JSC::VM *v17;
  uint64_t v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::String *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;

  if (!a2)
    goto LABEL_4;
  v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v25 = JSC::JSObject::get(a2, (uint64_t)a1, a3, (uint64_t)a4, a5, a6, a7, a8);
  v69 = v25;
  if (*((_DWORD *)v17 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v17, v18, (uint64_t)v19, v20, v21, v22, v23, v24))
  {
    goto LABEL_20;
  }
  if (v25 != 10)
  {
    JSC::JSValue::toWTFString((JSC::JSValue *)&v69, a1, v19, v20, v21, v22, v23, v24, (int **)&v68, v26);
    if (!*((_DWORD *)v17 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v17, v28, v29, v30, v31, v32, v33, v34))
    {
      if (!a5
        || std::find[abi:sn180100]<WTF::ASCIILiteral const*,WTF::String>(a4, &a4[2 * a5], (uint64_t *)&v68) != &a4[2 * a5])
      {
        *a9 = v68;
        return;
      }
      WTF::String::String((int **)&v67, a6, a7);
      v36 = JSC::createRangeError((unint64_t)a1, &v67, v35);
      JSC::VM::throwException(v17, a1, v36, v37, v38, v39, v40, v41);
      v49 = v67;
      v67 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
          WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
    }
    *a9 = 0;
    v50 = v68;
    v68 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  else
  {
LABEL_4:
    if (!a11)
    {
LABEL_20:
      *a9 = 0;
      return;
    }
    if (a11 == 1)
    {
      v27 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v27 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v27 = 2;
      v27[1] = a11 - 1;
      *((_QWORD *)v27 + 1) = a10;
      v27[4] = 4;
    }
    *a9 = v27;
  }
}

unint64_t *std::find[abi:sn180100]<WTF::ASCIILiteral const*,WTF::String>(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t *v3;
  unint64_t v6;
  uint64_t v7;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = v3[1];
      v7 = v6 ? v6 - 1 : 0;
      if (WTF::equalInternal<unsigned char>(*a3, *v3, v7))
        break;
      v3 += 2;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unint64_t JSC::intlDefaultNumberOption(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v10;
  unsigned int v11;
  JSC::VM *v14;
  double v15;
  double v17;
  uint64_t v18;
  const WTF::String *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  JSC::JSObject *v43;

  v43 = a2;
  if (a2 != (JSC::JSObject *)10)
  {
    v10 = a5;
    v11 = a4;
    v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if ((unint64_t)a2 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)a2;
    }
    else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v43, a1, a3, a4, a5, a6, a7, a8, a9);
      v15 = v17;
    }
    else
    {
      *(_QWORD *)&v15 = (char *)a2 - 0x2000000000000;
    }
    if (!*((_DWORD *)v14 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      if (v15 >= (double)v11 && v15 <= (double)v10)
        return v15;
      if (a3)
      {
        if ((*(_BYTE *)(a3 + 16) & 0x20) != 0)
          v18 = 0;
        else
          v18 = a3;
      }
      else
      {
        v18 = 0;
      }
      WTF::makeString<WTF::AtomStringImpl *,WTF::ASCIILiteral>(v18, (int8x16_t *)" is out of range", 17, (int **)&v42);
      v20 = JSC::createRangeError((unint64_t)a1, &v42, v19);
      JSC::VM::throwException(v14, a1, v20, v21, v22, v23, v24, v25);
      v33 = v42;
      v42 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    return 0;
  }
  return a6;
}

uint64_t WTF::makeString<WTF::AtomStringImpl *,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;

  if (a3)
  {
    v7 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x198963F28);
    }
  }
  else
  {
    v7 = 0;
  }
  if (a1)
  {
    v8 = *(_DWORD *)(a1 + 4);
    if (v8 < 0 || (v9 = (v8 + v7), __OFADD__(v8, (_DWORD)v7)))
    {
      *a4 = 0;
      goto LABEL_15;
    }
    if ((*(_BYTE *)(a1 + 16) & 4) == 0)
    {
      v10 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v9 = v7;
  }
  v10 = 1;
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomStringImpl *,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9, v10, a1, a2, v7, a4);
  if (!*a4)
    goto LABEL_15;
  return result;
}

BOOL JSC::isUnicodeLocaleIdentifierType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v2 = a2;
  if ((a2 & 0xFF00000000) == 0)
  {
    if ((_DWORD)a2)
    {
      do
      {
        v8 = 0;
        v9 = -2;
        while (1)
        {
          v10 = *(unsigned __int16 *)(a1 + 2 * v8);
          if ((v10 - 48) >= 0xA && (v10 | 0x20u) - 97 > 0x19)
            break;
          v9 -= 2;
          if (v2 == ++v8)
          {
            v16 = a1 + 2 * v2;
            goto LABEL_31;
          }
        }
        if (v10 != 45 || (v8 - 3) >= 6)
          return 0;
        v13 = v2 - 1;
        v2 += ~v8;
        a1 -= v9;
      }
      while (v13 != v8);
    }
    v16 = a1;
LABEL_31:
    v15 = ((unint64_t)(v16 - a1) >> 1) - 3;
    return v15 < 6;
  }
  if (!(_DWORD)a2)
  {
LABEL_15:
    v14 = a1;
LABEL_30:
    v15 = v14 - a1 - 3;
    return v15 < 6;
  }
  while (1)
  {
    v3 = 0;
    while (1)
    {
      v4 = *(unsigned __int8 *)(a1 + v3);
      if ((v4 - 48) >= 0xA && (v4 | 0x20u) - 97 > 0x19)
        break;
      if (v2 == ++v3)
      {
        v14 = a1 + v2;
        goto LABEL_30;
      }
    }
    if (v4 != 45 || (v3 - 3) >= 6)
      return 0;
    v7 = v2 - 1;
    v2 += ~v3;
    a1 += v3 + 1;
    if (v7 == v3)
      goto LABEL_15;
  }
}

void JSC::canonicalizeUnicodeLocaleID(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  char v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  WTF *v20;
  int v21;
  int v22;
  uint64_t v23;

  JSC::localeIDBufferForLanguageTagWithNullTerminator(this, (uint64_t)&v20);
  if (!v22)
    goto LABEL_15;
  JSC::canonicalizeLocaleIDWithoutNullTerminator((uint64_t)&v15);
  if (!v19)
    goto LABEL_15;
  v14 = 0;
  if (v17 == v16)
    WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)&v15, (unint64_t)&v14);
  else
    *((_BYTE *)v15 + v17++) = 0;
  if (!v19)
  {
    __break(1u);
LABEL_15:
    *a2 = 0;
    goto LABEL_8;
  }
  JSC::languageTagForLocaleID(0, a2);
  if (v19)
  {
    v11 = v15;
    if (&v18 != (uint64_t *)v15)
    {
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree((unint64_t)v11, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
LABEL_8:
  v12 = v20;
  if (&v23 != (uint64_t *)v20 && v20 != 0)
  {
    v20 = 0;
    v21 = 0;
    WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
  }
}

void JSC::canonicalizeLocaleIDWithoutNullTerminator(uint64_t a1@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  int v15;
  WTF *v16;
  size_t __n;
  _BYTE v18[36];
  int v19;

  v16 = (WTF *)v18;
  __n = 0x2000000020;
  v19 = 0;
  v4 = ualoc_canonicalForm();
  v11 = v4;
  if (v19 <= 0)
  {
    HIDWORD(__n) = v4;
LABEL_3:
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 32;
    if (v16 == (WTF *)v18)
    {
      v12 = HIDWORD(__n);
      memcpy((void *)(a1 + 16), v18, HIDWORD(__n));
    }
    else
    {
      *(_QWORD *)a1 = v16;
      v12 = HIDWORD(__n);
      *(_DWORD *)(a1 + 8) = __n;
    }
    *(_DWORD *)(a1 + 12) = v12;
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
  if (v19 == 15)
  {
    v19 = 0;
    if (__n < (unint64_t)(int)v4)
    {
      v15 = v4;
      WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v16, (WTF *)(int)v4);
      LODWORD(v11) = v15;
    }
    HIDWORD(__n) = v11;
    ualoc_canonicalForm();
    if (v19 <= 0)
      goto LABEL_3;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v13 = v16;
  if (v18 != (_BYTE *)v16 && v16 != 0)
  {
    v16 = 0;
    LODWORD(__n) = 0;
    WTF::fastFree((unint64_t)v13, v5, v11, v6, v7, v8, v9, v10);
  }
}

void JSC::canonicalizeLocaleList(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, JSC::Symbol *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF **a9@<X8>, __n128 a10@<Q0>)
{
  JSC::VM *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  WTF *v40;
  const WTF::StringImpl *v41;
  _BOOL4 hasProperty;
  unint64_t v43;
  int8x16_t v44;
  unsigned int v45;
  int **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  const WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::JSGlobalObject *v88;
  const WTF::String *v89;
  unint64_t OutOfMemoryError;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114[2];
  char v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unsigned __int8 *v118;
  WTF::StringImpl **v119;
  JSC::JSObject *v120;
  WTF *v121;
  WTF *v122;
  JSC::VM *v123;
  unint64_t v124;

  v124 = a2;
  v11 = *(JSC::VM **)(a1 + 56);
  v122 = 0;
  v123 = v11;
  v121 = 0;
  if (a2 == 10)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0
    && (*(_BYTE *)(a2 + 5) == 2
     || &JSC::IntlLocale::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C))))
  {
    v25 = *(_DWORD *)(a1 + 908);
    if (v25)
      v26 = 16 * (v25 & 0xFFFFFFFE);
    else
      v26 = 0;
    v27 = JSC::JSArray::tryCreate(v11, v26, 0, (uint64_t)a4, a5, a6, a7, a8, a10);
    if (!v27)
    {
      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v123);
LABEL_2:
      *a9 = 0;
      a9[1] = 0;
      goto LABEL_3;
    }
    v34 = (unsigned int *)v27;
    JSC::JSArray::push(v27, (JSC::VM **)a1, a2, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    v34 = (unsigned int *)JSC::JSValue::toObject((JSC::JSValue *)&v124, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v35, v36, (uint64_t)a4, a5, a6, a7, a8))
    goto LABEL_2;
  v120 = (JSC::JSObject *)JSC::JSObject::get(v34, a1, *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768), (uint64_t)a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v37, a3, (uint64_t)a4, a5, a6, a7, a8))
      goto LABEL_2;
  }
  v39 = JSC::JSValue::toLength(&v120, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, v38);
  if (*((_DWORD *)v11 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      goto LABEL_2;
  }
  v119 = 0;
  if (!v39)
  {
LABEL_25:
    *a9 = v121;
    v40 = v122;
    v121 = 0;
    v122 = 0;
    a9[1] = v40;
    goto LABEL_26;
  }
  v41 = 0;
  while (1)
  {
    hasProperty = JSC::JSObject::hasProperty((JSC::JSObject *)v34, (uint64_t ***)a1, v41, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_DWORD *)v11 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
        break;
    }
    if (!hasProperty)
      goto LABEL_58;
    v43 = JSC::JSObject::get((JSC::JSObject *)v34, (uint64_t ***)a1, v41, (uint64_t)a4, a5, a6, a7, a8);
    v118 = (unsigned __int8 *)v43;
    if (*((_DWORD *)v11 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
        break;
      v43 = (unint64_t)v118;
    }
    if ((v43 & 0xFFFE000000000002) != 0 || (v45 = *(unsigned __int8 *)(v43 + 5), v45 != 2) && v45 <= 0x16)
    {
      JSC::throwTypeError(a1, &v123, (uint64_t)"locale value must be a string or object", 40);
      break;
    }
    v117 = 0;
    if (&JSC::IntlLocale::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
    {
      v97 = JSC::IntlLocale::toString((JSC::IntlLocale *)v43);
      WTF::String::operator=((unint64_t *)&v117, (WTF::AtomStringImpl *)v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      if (v45 != 2)
        v43 = (unint64_t)JSC::JSValue::toStringSlowCase(&v118, a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
        goto LABEL_89;
      v46 = (int **)(v43 + 8);
      if ((*(_BYTE *)(v43 + 8) & 1) != 0)
        v46 = JSC::JSRopeString::resolveRope(v43, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, v44, a5, a6, a7, a8);
      WTF::String::operator=((unint64_t *)&v117, (WTF::AtomStringImpl *)v46, a3, (uint64_t)a4, a5, a6, a7, a8);
      v11 = v123;
      if (*((_DWORD *)v123 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v123, v47, v48, v49, v50, v51, v52, v53))
        {
LABEL_89:
          v70 = 0;
          *a9 = 0;
          a9[1] = 0;
          goto LABEL_54;
        }
      }
    }
    v57 = (unint64_t)v117;
    if (v117)
    {
      v58 = *((_QWORD *)v117 + 1);
      v57 = *((unsigned int *)v117 + 1);
      v59 = ((unint64_t)*((unsigned int *)v117 + 4) >> 2) & 1;
    }
    else
    {
      v58 = 0;
      v59 = 1;
    }
    if (!JSC::isStructurallyValidLanguageTag(v58, v57 | (v59 << 32), v54, v55, v56))
      goto LABEL_63;
    WTF::String::ascii((WTF::String *)&v117, (int8x16_t **)v114);
    JSC::canonicalizeUnicodeLocaleID((JSC *)v114, &v116);
    v67 = v114[0];
    v114[0] = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        WTF::fastFree((unint64_t)v67, v60, (uint64_t)v61, v62, v63, v64, v65, v66);
      else
        --*(_DWORD *)v67;
    }
    if (v116)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v119, &v116, v61, v62, v63, v64, v65, v66, (uint64_t)v114);
      if (v115)
      {
        v68 = HIDWORD(v122);
        if (HIDWORD(v122) == (_DWORD)v122)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v121, (unint64_t)&v116);
        }
        else
        {
          v104 = v121;
          v105 = v116;
          if (v116)
            *(_DWORD *)v116 += 2;
          *((_QWORD *)v104 + v68) = v105;
          HIDWORD(v122) = v68 + 1;
        }
      }
      v69 = v116;
      v116 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
        {
          WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v69 -= 2;
        }
      }
      v70 = 1;
    }
    else
    {
LABEL_63:
      v114[0] = (WTF *)"invalid language tag: ";
      v114[1] = (WTF *)23;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v114, (uint64_t *)&v117, (int **)&v116);
      if (v116)
        OutOfMemoryError = JSC::createRangeError(a1, &v116, v89);
      else
        OutOfMemoryError = JSC::createOutOfMemoryError(a1, v88);
      JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, OutOfMemoryError, v91, v92, v93, v94, v95);
      *a9 = 0;
      a9[1] = 0;
      v96 = v116;
      v116 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
      v70 = 0;
    }
LABEL_54:
    v71 = v117;
    v117 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
    }
    if (!v70)
      goto LABEL_26;
LABEL_58:
    v41 = (const WTF::StringImpl *)((char *)v41 + 1);
    if ((const WTF::StringImpl *)v39 == v41)
      goto LABEL_25;
  }
  *a9 = 0;
  a9[1] = 0;
LABEL_26:
  WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v119, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_3:
  v12 = v121;
  if (HIDWORD(v122))
  {
    v13 = 8 * HIDWORD(v122);
    do
    {
      v14 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
    v12 = v121;
  }
  if (v12)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    WTF::fastFree((unint64_t)v12, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::isStructurallyValidLanguageTag(uint64_t a1, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t result;
  _DWORD v6[10];
  char v7;

  JSC::LanguageTagParser::LanguageTagParser((uint64_t)v6, a1, a2, a3, a4, a5);
  result = JSC::LanguageTagParser::parseUnicodeLocaleId((JSC::LanguageTagParser *)v6);
  if ((_DWORD)result)
    return v6[8] == v6[2] && v7 != 0;
  return result;
}

void JSC::bestAvailableLocale<JSC::bestAvailableLocale(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&,WTF::String const&)::$_0>(WTF::StringImpl **a1, WTF::StringImpl *this, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  if (!this)
  {
LABEL_47:
    *a1 = 0;
    return;
  }
  v9 = (uint64_t *)a3;
  v10 = this;
  *(_DWORD *)this += 2;
  v47 = this;
  while (1)
  {
    v11 = v10;
    v12 = *((_DWORD *)v10 + 1);
    if (!v12)
    {
      *a1 = 0;
      v47 = 0;
      goto LABEL_52;
    }
    if (*v9)
    {
      if (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v9, &v47, a3))
      {
        *a1 = v10;
        return;
      }
      v12 = *((_DWORD *)v10 + 1);
    }
    v13 = *((_DWORD *)v10 + 4);
    v14 = *((_QWORD *)v10 + 1);
    if ((v13 & 4) != 0)
      break;
    if (!v12)
      goto LABEL_51;
    v15 = v12 - 1;
    if ((v12 & 0x80000000) != 0)
      v15 = 0x7FFFFFFFLL;
    if (v15 >= v12)
      goto LABEL_56;
    v16 = *(unsigned __int16 *)(v14 + 2 * v15);
    if (v15 - 1 >= v12)
      goto LABEL_43;
    if (v16 != 45)
    {
      while (v15)
      {
        a3 = (const WTF::StringImpl *)(v15 - 1);
        v17 = *(unsigned __int16 *)(v14 - 2 + 2 * v15--);
        if (v17 == 45)
          goto LABEL_24;
      }
      goto LABEL_51;
    }
LABEL_23:
    a3 = (const WTF::StringImpl *)v15;
LABEL_24:
    if ((unint64_t)a3 >= 2 && v12 > (int)a3 - 2)
    {
      v18 = ((_DWORD)a3 - 2);
      v19 = (v13 & 4) != 0 ? *(unsigned __int8 *)(v14 + v18) : *(unsigned __int16 *)(v14 + 2 * v18);
      if (v19 == 45)
        a3 = (const WTF::StringImpl *)((char *)a3 - 2);
    }
    if (v12 <= a3)
    {
      *(_DWORD *)v10 += 2;
    }
    else
    {
      WTF::StringImpl::substring(v10, 0, a3, (uint64_t *)&v46);
      v10 = v46;
      v47 = v46;
    }
    v46 = 0;
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, this, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      v29 = v46;
      v46 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, this, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
    if (!v10)
      goto LABEL_47;
  }
  if (!v12)
    goto LABEL_51;
  v15 = v12 - 1;
  if ((v12 & 0x80000000) != 0)
    v15 = 0x7FFFFFFFLL;
  if (v15 >= v12)
    goto LABEL_56;
  v16 = *(unsigned __int8 *)(v14 + v15);
  if (v15 - 1 < v12)
  {
    if (v16 != 45)
    {
      while (v15)
      {
        a3 = (const WTF::StringImpl *)(v15 - 1);
        v20 = *(unsigned __int8 *)(v14 - 1 + v15--);
        if (v20 == 45)
          goto LABEL_24;
      }
      goto LABEL_51;
    }
    goto LABEL_23;
  }
LABEL_43:
  if (v16 == 45)
    goto LABEL_23;
  if (v15)
  {
LABEL_56:
    __break(1u);
    return;
  }
LABEL_51:
  v11 = v47;
  *a1 = 0;
  v47 = 0;
  if (!v11)
    return;
LABEL_52:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl(v11, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
}

void JSC::defaultLocale(JSC *this@<X0>, uint64_t *a2@<X8>)
{
  void (*v4)(WTF **__return_ptr);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t *v28;
  uint64_t i;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  WTF *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  WTF *v70;
  unsigned int v71;
  WTF **v72;
  WTF *v73;

  v4 = *(void (**)(WTF **__return_ptr))(*((_QWORD *)this + 410) + 120);
  if (v4)
  {
    v4(&v73);
    WTF::String::utf8((uint64_t *)&v73, 0, v5, v6, v7, v8, v9, &v70, v10);
    JSC::canonicalizeUnicodeLocaleID((JSC *)&v70, a2);
    if (v70)
    {
      if (*(_DWORD *)v70 == 1)
        WTF::fastFree((unint64_t)v70, v11, v12, v13, v14, v15, v16, v17);
      else
        --*(_DWORD *)v70;
    }
    v18 = v73;
    v73 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    v19 = (WTF::StringImpl *)*a2;
    if (*a2)
    {
      if (*((_DWORD *)v19 + 1))
        return;
      *a2 = 0;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  WTF::userPreferredLanguages(1, (uint64_t)&v70);
  if (v71)
  {
    v28 = (uint64_t *)v70;
    for (i = 8 * v71; i; i -= 8)
    {
      WTF::String::utf8(v28, 0, v22, v23, v24, v25, v26, &v73, v27);
      JSC::canonicalizeUnicodeLocaleID((JSC *)&v73, a2);
      if (v73)
      {
        if (*(_DWORD *)v73 == 1)
          WTF::fastFree((unint64_t)v73, v20, v21, v22, v23, v24, v25, v26);
        else
          --*(_DWORD *)v73;
      }
      v30 = (WTF::StringImpl *)*a2;
      if (*a2)
      {
        if (*((_DWORD *)v30 + 1))
          goto LABEL_29;
        *a2 = 0;
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      else
      {
        *a2 = 0;
      }
      ++v28;
    }
  }
  v39 = atomic_load(&qword_1ECF58ED0);
  if (v39 != -1)
  {
    v73 = (WTF *)&v69;
    v72 = &v73;
    std::__call_once(&qword_1ECF58ED0, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::defaultLocale(JSC::JSGlobalObject *)::$_0 &&>>);
  }
  v40 = _MergedGlobals_43;
  if (_MergedGlobals_43 && *(_DWORD *)(_MergedGlobals_43 + 4))
  {
    *(_DWORD *)_MergedGlobals_43 += 2;
  }
  else
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0x200000002;
    *(_QWORD *)(v40 + 8) = "en";
    *(_DWORD *)(v40 + 16) = 4;
  }
  *a2 = v40;
LABEL_29:
  v41 = v70;
  if (v71)
  {
    v50 = 8 * v71;
    v51 = v70;
    do
    {
      v52 = *(WTF::StringImpl **)v51;
      *(_QWORD *)v51 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      v51 = (WTF *)((char *)v51 + 8);
      v50 -= 8;
    }
    while (v50);
  }
  if (v41)
    WTF::fastFree((unint64_t)v41, v20, v21, v22, v23, v24, v25, v26);
}

void JSC::removeUnicodeLocaleExtension(JSC *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v5;
  double v6;
  double v7;
  float v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  char v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v61 = 0;
  v62 = 0;
  v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3572800;
  *((_QWORD *)v5 + 1) = &v61;
  v57 = v5;
  WTF::String::splitInternal<false>((uint64_t *)this, 0x2Du, &v57, v6, v7, v8);
  v16 = v57;
  v57 = 0;
  if (v16)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 1;
  v17 = HIDWORD(v62);
  if (HIDWORD(v62))
  {
    v18 = v61;
    v19 = *(WTF::StringImpl **)v61;
    if (*(_QWORD *)v61)
      *(_DWORD *)v19 += 2;
    v57 = v19;
    v20 = *(_QWORD *)v18;
    if (v20)
      LODWORD(v20) = *(_DWORD *)(v20 + 4);
    v59 = v20;
    if (v17 >= 2)
    {
      v21 = 0;
      v22 = 1;
      do
      {
        if (v22 >= HIDWORD(v62))
        {
LABEL_55:
          __break(0xC471u);
          JUMPOUT(0x198964F7CLL);
        }
        v21 |= WTF::equalInternal<unsigned char>(*((_QWORD *)v61 + v22), (unint64_t)"x", 1);
        if ((v21 & 1) != 0)
          goto LABEL_18;
        if (v22 >= HIDWORD(v62))
        {
          __break(0xC471u);
          JUMPOUT(0x198964F84);
        }
        v23 = WTF::equalInternal<unsigned char>(*((_QWORD *)v61 + v22), (unint64_t)"u", 1);
        v24 = v22 + 1;
        if (!v23 || v24 >= v17)
        {
LABEL_18:
          if (v22 >= HIDWORD(v62))
          {
            __break(0xC471u);
            JUMPOUT(0x198964F8CLL);
          }
          v64 = 45;
          v63 = *((_QWORD *)v61 + v22);
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v57, &v64, &v63, v11, v12, v13, v14, v15);
          v26 = v22;
        }
        else
        {
          while (1)
          {
            if (v17 == v24)
            {
              v21 = 0;
              v26 = v17 - 1;
              goto LABEL_20;
            }
            if (v24 >= HIDWORD(v62))
              goto LABEL_55;
            v56 = *((_QWORD *)v61 + v24);
            if (!v56)
              break;
            v26 = v22;
            v21 = 0;
            ++v24;
            ++v22;
            if (*(_DWORD *)(v56 + 4) <= 1u)
              goto LABEL_20;
          }
          v21 = 0;
          v26 = v24 - 1;
        }
LABEL_20:
        v22 = v26 + 1;
      }
      while (v26 + 1 < v17);
      v19 = v57;
    }
    if (v19)
      goto LABEL_23;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v57, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v57);
  v19 = v57;
  if (v57)
LABEL_23:
    *(_DWORD *)v19 += 2;
  *a2 = v19;
  v27 = v58;
  v58 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      v19 = v57;
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v57 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (HIDWORD(v62))
  {
    v45 = v61;
    v46 = 8 * HIDWORD(v62);
    do
    {
      v47 = *(WTF::StringImpl **)v45;
      *(_QWORD *)v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
      v45 = (WTF *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  v28 = v61;
  if (v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree((unint64_t)v28, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::resolveLocale(JSC *this@<X0>, const WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _QWORD *(*v9)(WTF **__return_ptr, WTF::StringImpl **, uint64_t);
  uint64_t v10;
  _BYTE *v11;
  char *v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  _WORD *v26;
  WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v104;
  unint64_t v105;
  WTF::StringImpl *v106;
  WTF *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  WTF *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  double v191;
  double v192;
  float v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  WTF::StringImpl *v224;
  unsigned int v225;
  WTF::StringImpl *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF::AtomStringImpl *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  int8x16_t *v254;
  unint64_t v255;
  int8x16_t *v256;
  int8x16_t *v257;
  WTF *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  int v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *(*v321)(WTF **__return_ptr, WTF::StringImpl **, uint64_t);
  WTF::StringImpl *v323;
  char *v324;
  WTF::StringImpl *v325[2];
  WTF::StringImpl *v326;
  WTF *v327;
  int v328;
  unsigned int v329;
  WTF::StringImpl *v330;
  unint64_t v331;
  WTF *v332;
  WTF::StringImpl *v333;
  unsigned int v334;
  char v335;
  WTF *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  uint64_t v341;

  v9 = (_QWORD *(*)(WTF **__return_ptr, WTF::StringImpl **, uint64_t))a8;
  v10 = a7;
  v11 = (_BYTE *)a6;
  v332 = 0;
  v336 = 0;
  if (*(_DWORD *)(a3 + 12))
  {
    v321 = (_QWORD *(*)(WTF **__return_ptr, WTF::StringImpl **, uint64_t))a8;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    do
    {
      v14 = (char *)v106;
      v107 = v336;
      if (v336)
      {
        v339 = 0;
        v340 = 0;
        v341 = 0;
        goto LABEL_142;
      }
      WTF::String::operator=((unint64_t *)&v332, (WTF::AtomStringImpl *)(*(_QWORD *)a3 + v104), a3, a4, a5, a6, a7, a8);
      JSC::removeUnicodeLocaleExtension((JSC *)&v332, &v339);
      v106 = v339;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v229, v230, v231, v232, v233, v234, v235, v236);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      JSC::bestAvailableLocale<JSC::bestAvailableLocale(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&,WTF::String const&)::$_0>(&v339, v106, a2, v110, v111, v112, v113, v114);
      v116 = v336;
      v336 = v339;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
        {
          WTF::StringImpl::~StringImpl(v116, v115, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
        }
        else
        {
          *(_DWORD *)v116 -= 2;
        }
      }
      ++v105;
      v104 += 8;
    }
    while (v105 < *(unsigned int *)(a3 + 12));
    v107 = v336;
    v340 = 0;
    v341 = 0;
    v339 = 0;
    v14 = (char *)v106;
    if (!v336)
    {
      v9 = v321;
      goto LABEL_3;
    }
LABEL_142:
    v9 = v321;
    if (*((_DWORD *)v107 + 1))
    {
      WTF::String::operator=((unint64_t *)&v339, (WTF::AtomStringImpl *)&v336, a3, a4, a5, a6, a7, a8);
      v189 = v332;
      if (v332 == (WTF *)v14)
        goto LABEL_6;
      if (v14 && v332)
      {
        if (WTF::equal(v332, (const WTF::StringImpl *)v14, v16))
          goto LABEL_6;
        v189 = v332;
      }
      if (!v189 || (v190 = WTF::StringImpl::find((uint64_t)v189, (int8x16_t *)"-u-", 3uLL, 0), v190 == -1))
      {
        __break(0xC471u);
        JUMPOUT(0x198965A60);
      }
      v37 = v190;
      v38 = (unint64_t)v332;
      if (v332)
        LODWORD(v34) = *((_DWORD *)v332 + 1);
      else
        LODWORD(v34) = 0;
      v194 = (const char *)(v37 + 3);
      goto LABEL_153;
    }
  }
  else
  {
    v14 = 0;
    v339 = 0;
    v340 = 0;
    v341 = 0;
  }
LABEL_3:
  JSC::defaultLocale(this, (uint64_t *)&v330);
  v22 = v339;
  v339 = v330;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_6:
  v23 = v336;
  v336 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v24 = v332;
  v332 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v339;
  if (v339)
    *(_DWORD *)v339 += 2;
  v338 = v25;
  v336 = 0;
  v337 = 0;
  if (v340)
  {
    JSC::unicodeExtensionComponents((uint64_t)&v332, *((_QWORD *)v340 + 1), *((unsigned int *)v340 + 1) | ((unint64_t)((*((_DWORD *)v340 + 4) >> 2) & 1) << 32));
    v25 = v338;
    v336 = v332;
    v337 = v333;
  }
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  if (v25)
    *(_DWORD *)v25 += 2;
  *(_QWORD *)(a9 + 8) = v25;
  v332 = 0;
  v333 = 0;
  v334 = 0;
  v335 = 1;
  v26 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v332, (WTF::AtomStringImpl *)2, (uint64_t)v16, v17, v18, v19, v20, v21);
  if (v26)
    *v26 = 29997;
  if (v10)
  {
    v34 = &v11[v10];
    v35 = a9 + 16;
    v36 = "nu";
    while (1)
    {
      v10 = *v11;
      if ((_DWORD)v10 == 5)
      {
        v14 = "nu";
LABEL_27:
        v37 = 3;
      }
      else
      {
        switch(*v11)
        {
          case 0:
            v14 = "ca";
            goto LABEL_27;
          case 1:
            v14 = "co";
            goto LABEL_27;
          case 2:
            v14 = "hc";
            goto LABEL_27;
          case 3:
            v14 = "kf";
            goto LABEL_27;
          case 4:
            v14 = "kn";
            goto LABEL_27;
          default:
            v14 = 0;
            v37 = 0;
            break;
        }
      }
      v330 = (WTF::StringImpl *)v14;
      v331 = v37;
      v38 = (unint64_t)v9(&v327, &v338, v10);
      if (!v329)
      {
        __break(0xC471u);
        JUMPOUT(0x198965A68);
      }
      v39 = *(WTF::StringImpl **)v327;
      if (*(_QWORD *)v327)
        *(_DWORD *)v39 += 2;
      v326 = v39;
      v40 = HIDWORD(v337);
      if (!HIDWORD(v337))
        break;
      v38 = WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::ASCIILiteral>((uint64_t)&v336, (uint64_t)&v330);
      if (v38 == -1)
        break;
      v223 = v38 + 1;
      if (v38 + 1 >= v40 || *((_DWORD *)v336 + 4 * v223 + 2) < 3u)
      {
        v325[0] = (WTF::StringImpl *)"true";
        v325[1] = (WTF::StringImpl *)5;
        v38 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WTF::ASCIILiteral>((uint64_t)&v327, (unint64_t *)v325);
        if (!(_DWORD)v38)
          break;
        v252 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v252 = 0x400000002;
        *(_QWORD *)(v252 + 8) = "true";
        *(_DWORD *)(v252 + 16) = 4;
        v253 = v326;
        v326 = (WTF::StringImpl *)v252;
        if (v253)
        {
          if (*(_DWORD *)v253 == 2)
          {
            WTF::StringImpl::~StringImpl(v253, v245, v246, v247, v248, v249, v250, v251);
            WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
          }
          else
          {
            *(_DWORD *)v253 -= 2;
          }
        }
        v38 = (unint64_t)WTF::makeString<char,WTF::ASCIILiteral>(v325, v14, v37);
        v14 = (char *)v325[0];
      }
      else
      {
        *(_OWORD *)v325 = *((_OWORD *)v336 + v223);
        v38 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::StringView>((uint64_t)&v327, (uint64_t)v325);
        if (v38 == -1)
          break;
        if (v38 >= v329)
        {
          __break(0xC471u);
LABEL_226:
          __break(1u);
LABEL_227:
          if (WTF::StringImpl::at((WTF::StringImpl *)v38, v27) == 45)
          {
            LODWORD(v34) = (_DWORD)v36;
            v9 = v321;
          }
          else
          {
            v38 = (unint64_t)v332;
            v9 = v321;
            while (1)
            {
              v194 = v36 + 1;
LABEL_153:
              v195 = v38 ? *(unsigned int *)(v38 + 4) : 0;
              if ((unint64_t)v194 >= v195)
                break;
              v196 = WTF::String::find((uint64_t)&v332, 0x2Du, v194, v191, v192, v193);
              if (v196 == -1)
                break;
              v36 = (const char *)v196;
              v38 = (unint64_t)v332;
              if (v332)
              {
                LODWORD(v27) = (_DWORD)v36 + 2;
                v197 = *((unsigned int *)v332 + 1);
                if ((unint64_t)(v36 + 2) < v197 && v197 > v27)
                  goto LABEL_227;
              }
            }
          }
          WTF::String::substring((WTF::String *)&v332, v37, (_DWORD)v34 - v37, (uint64_t *)&v330);
          v302 = v330;
          v330 = 0;
          v303 = v340;
          v340 = v302;
          if (v303)
          {
            v304 = *(_DWORD *)v303 - 2;
            if (*(_DWORD *)v303 != 2)
              goto LABEL_232;
            WTF::StringImpl::~StringImpl(v303, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v305, v306, v307, v308, v309, v310, v311, v312);
            v303 = v330;
            v330 = 0;
            if (v303)
            {
              v304 = *(_DWORD *)v303 - 2;
              if (*(_DWORD *)v303 == 2)
              {
                WTF::StringImpl::~StringImpl(v303, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v313, v314, v315, v316, v317, v318, v319, v320);
              }
              else
              {
LABEL_232:
                *(_DWORD *)v303 = v304;
              }
            }
          }
          v341 = v37;
          goto LABEL_6;
        }
        WTF::String::operator=((unint64_t *)&v326, (WTF *)((char *)v327 + 8 * v38), (uint64_t)v28, v29, v30, v31, v32, v33);
        v224 = v326;
        if (v326)
          *(_DWORD *)v326 += 2;
        v38 = (unint64_t)WTF::makeString<char,WTF::ASCIILiteral,char,WTF::String>(&v324, (int8x16_t *)v14, v37, (uint64_t)v224);
        v14 = v324;
        if (v224)
        {
          if (*(_DWORD *)v224 == 2)
          {
            WTF::StringImpl::~StringImpl(v224, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
          }
          else
          {
            *(_DWORD *)v224 -= 2;
          }
        }
      }
LABEL_33:
      if (v10 >= 6)
        goto LABEL_226;
      v41 = a5 + 16 * v10;
      LOBYTE(v325[0]) = 0;
      if (!*(_BYTE *)(v41 + 8))
        goto LABEL_51;
      v42 = *(WTF::StringImpl **)v41;
      if (*(_QWORD *)v41)
      {
        v43 = *(_DWORD *)v42 + 2;
        *(_DWORD *)v42 = v43;
        v325[0] = v42;
        LOBYTE(v325[1]) = 1;
        v44 = v329;
        if (!v329)
        {
          v325[0] = 0;
          goto LABEL_49;
        }
        v45 = 0;
        while (1)
        {
          v38 = *((_QWORD *)v327 + v45);
          v27 = v325[0];
          if ((WTF::StringImpl *)v38 == v325[0])
            break;
          if (v38)
            v46 = v325[0] == 0;
          else
            v46 = 1;
          if (!v46)
          {
            v38 = WTF::equal((WTF *)v38, v325[0], v28);
            if ((v38 & 1) != 0)
              break;
            v44 = v329;
          }
          if (++v45 >= v44)
            goto LABEL_46;
        }
        if (!LOBYTE(v325[1]))
          goto LABEL_226;
        v42 = v325[0];
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v325[1]) = 1;
      }
      v27 = v326;
      if (v42 != v326)
      {
        if (v42 && v326)
        {
          if (WTF::equal(v42, v326, v28))
            goto LABEL_46;
          if (!LOBYTE(v325[1]))
          {
            v42 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
            goto LABEL_168;
          }
        }
        WTF::String::operator=((unint64_t *)&v326, (WTF::AtomStringImpl *)v325, (uint64_t)v28, v29, v30, v31, v32, v33);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
          v14 = 0;
        }
      }
LABEL_46:
      if (LOBYTE(v325[1]))
      {
        v42 = v325[0];
        v325[0] = 0;
        if (v42)
        {
          v43 = *(_DWORD *)v42;
LABEL_49:
          if (v43 != 2)
          {
            *(_DWORD *)v42 = v43 - 2;
            goto LABEL_51;
          }
LABEL_168:
          WTF::StringImpl::~StringImpl(v42, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
        }
      }
LABEL_51:
      v47 = v326;
      if (v326)
        *(_DWORD *)v326 += 2;
      v48 = *(WTF::StringImpl **)(v35 + 8 * v10);
      *(_QWORD *)(v35 + 8 * v10) = v47;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      if (v334 || v333)
      {
        if (v14)
        {
          v254 = (int8x16_t *)*((_QWORD *)v14 + 1);
          v255 = *((unsigned int *)v14 + 1);
          if ((v14[16] & 4) == 0)
          {
            WTF::StringBuilder::append((uint64_t)&v332, v254, v255, v29, v30, v31, v32, v33);
LABEL_67:
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
              WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
            goto LABEL_69;
          }
        }
        else
        {
          v254 = 0;
          v255 = 0;
        }
        WTF::StringBuilder::append((uint64_t)&v332, v254, v255, v29, v30, v31, v32, v33);
      }
      else
      {
        if (v14)
          *(_DWORD *)v14 += 2;
        v49 = v332;
        v332 = (WTF *)v14;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::~StringImpl(v49, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
          }
          else
          {
            *(_DWORD *)v49 -= 2;
          }
        }
        if (v14)
          v50 = *((_DWORD *)v14 + 1);
        else
          v50 = 0;
        v334 = v50;
      }
      if (v14)
        goto LABEL_67;
LABEL_69:
      v51 = v326;
      v326 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      v52 = v327;
      if (v329)
      {
        v85 = 8 * v329;
        do
        {
          v86 = *(WTF::StringImpl **)v52;
          *(_QWORD *)v52 = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
            {
              WTF::StringImpl::~StringImpl(v86, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
              WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
            }
            else
            {
              *(_DWORD *)v86 -= 2;
            }
          }
          v52 = (WTF *)((char *)v52 + 8);
          v85 -= 8;
        }
        while (v85);
        v52 = v327;
      }
      if (v52)
      {
        v327 = 0;
        v328 = 0;
        WTF::fastFree((unint64_t)v52, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      }
      if (++v11 == v34)
        goto LABEL_98;
    }
    v14 = 0;
    goto LABEL_33;
  }
LABEL_98:
  if ((v334 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989659E8);
  }
  v95 = v338;
  if (v334 > 2)
  {
    v330 = 0;
    LODWORD(v331) = 0;
    BYTE4(v331) = 1;
    if (v338
      && (v225 = *((unsigned __int8 *)v338 + 16),
          v226 = (WTF::StringImpl *)*((_QWORD *)v338 + 1),
          v227 = *((_DWORD *)v338 + 1),
          v330 = v226,
          LODWORD(v331) = v227,
          BYTE4(v331) = (v225 & 4) != 0,
          v227))
    {
      if (v227 <= v341)
        v228 = v331;
      else
        v228 = v341 | ((unint64_t)((v225 >> 2) & 1) << 32);
    }
    else
    {
      v228 = 0x100000000;
      v226 = (WTF::StringImpl *)"";
    }
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v332, (uint64_t)v28, v29, v30, v31, v32, v33, &v323);
    v256 = (int8x16_t *)WTF::StringView::substring((const char *)&v330, v341, 0xFFFFFFFF);
    WTF::makeString<WTF::StringView,WTF::String,WTF::StringView>((int **)&v327, (uint64_t)v226, v228, (uint64_t *)&v323, v256, v257);
    v258 = v327;
    v327 = 0;
    v259 = v338;
    v338 = v258;
    if (v259)
    {
      if (*(_DWORD *)v259 == 2)
      {
        WTF::StringImpl::~StringImpl(v259, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
        v269 = v327;
        v327 = 0;
        if (v269)
        {
          if (*(_DWORD *)v269 == 2)
          {
            WTF::StringImpl::~StringImpl(v269, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v286, v287, v288, v289, v290, v291, v292, v293);
          }
          else
          {
            *(_DWORD *)v269 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v259 -= 2;
        v327 = 0;
      }
    }
    v260 = v323;
    v323 = 0;
    if (v260)
    {
      if (*(_DWORD *)v260 == 2)
      {
        WTF::StringImpl::~StringImpl(v260, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
      }
      else
      {
        *(_DWORD *)v260 -= 2;
      }
    }
    v95 = v338;
  }
  v338 = 0;
  v96 = *(WTF::StringImpl **)a9;
  *(_QWORD *)a9 = v95;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v333;
  v333 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v332;
  v332 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  if (v336)
    WTF::fastFree((unint64_t)v336, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
  v99 = v338;
  v338 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v340;
  v340 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v339;
  v339 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
}

uint64_t WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::ASCIILiteral>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (!*(_DWORD *)(a1 + 12))
    return -1;
  v4 = 0;
  v5 = 0;
  while (!WTF::operator==(*(unsigned __int8 **)(*(_QWORD *)a1 + v4), *(_QWORD *)(*(_QWORD *)a1 + v4 + 8), *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8)))
  {
    ++v5;
    v4 += 16;
    if (v5 >= *(unsigned int *)(a1 + 12))
      return -1;
  }
  return v5;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::StringView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;

  if (!*(_DWORD *)(a1 + 12))
    return -1;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
    if (v5)
    {
      v6 = *(unsigned __int8 **)(v5 + 8);
      v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    if (WTF::operator==(v6, v7, *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8)))
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 12))
      return -1;
  }
  return v4;
}

_WORD *WTF::makeString<char,WTF::ASCIILiteral,char,WTF::String>(_QWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  _WORD *result;
  int8x16_t *v26;
  uint64_t v27;
  size_t v28;
  _BYTE *v29;
  _WORD *v30;
  _WORD *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  _WORD *v40;
  _WORD *v41;
  unsigned __int128 v42;
  __int8 v43;
  uint64_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  if (a3)
  {
    v7 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_53:
      JUMPOUT(0x198965E90);
    }
  }
  else
  {
    v7 = 0;
  }
  if (a4)
  {
    v8 = *(_DWORD *)(a4 + 4);
    if (v8 < 0)
      goto LABEL_43;
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    goto LABEL_43;
  v9 = __OFADD__((_DWORD)v7, v10);
  v11 = v7 + v10;
  if (v9)
    goto LABEL_43;
  v12 = (v11 + 1);
  if (__OFADD__(v11, 1))
    goto LABEL_43;
  if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if (v12 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v12 + 20), &v44);
      v13 = v44;
      if (v44)
      {
        *(_WORD *)(v44 + 20) = 45;
        *(_DWORD *)v13 = 2;
        *(_DWORD *)(v13 + 4) = v12;
        *(_QWORD *)(v13 + 8) = v13 + 20;
        *(_DWORD *)(v13 + 16) = 0;
        v14 = (char *)(v13 + 22);
        v15 = (char *)(v13 + 22 + 2 * v7);
        if ((v7 & 0x7FFFFFC0) != 0)
        {
          v16 = &v14[2 * (v7 & 0x7FFFFFC0)];
          v17 = 0uLL;
          do
          {
            v45.val[0] = *a2;
            v18 = a2[1];
            v47.val[0] = a2[2];
            v19 = a2[3];
            a2 += 4;
            v20 = v19;
            v47.val[1] = 0uLL;
            v49.val[0] = v18;
            v45.val[1] = 0uLL;
            v21 = v14;
            vst2q_s8(v21, v45);
            v21 += 32;
            v49.val[1] = 0uLL;
            vst2q_s8(v21, v49);
            v22 = v14 + 64;
            vst2q_s8(v22, v47);
            v23 = v14 + 96;
            vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
            v14 += 128;
          }
          while (v14 != v16);
          v14 = v16;
        }
        while (v14 != v15)
        {
          v24 = a2->u8[0];
          a2 = (int8x16_t *)((char *)a2 + 1);
          *(_WORD *)v14 = v24;
          v14 += 2;
        }
        *(_WORD *)v15 = 45;
        result = v15 + 2;
        v26 = *(int8x16_t **)(a4 + 8);
        v27 = *(unsigned int *)(a4 + 4);
        if ((*(_BYTE *)(a4 + 16) & 4) != 0)
        {
          v30 = &result[v27];
          if (v27 >= 0x40)
          {
            v31 = &result[v27 & 0xFFFFFFC0];
            v32 = 0uLL;
            do
            {
              v46.val[0] = *v26;
              v33 = v26[1];
              v48.val[0] = v26[2];
              v34 = v26[3];
              v26 += 4;
              v35 = v34;
              v48.val[1] = 0uLL;
              v50.val[0] = v33;
              v46.val[1] = 0uLL;
              v36 = (char *)result;
              vst2q_s8(v36, v46);
              v36 += 32;
              v50.val[1] = 0uLL;
              vst2q_s8(v36, v50);
              v37 = (char *)(result + 32);
              vst2q_s8(v37, v48);
              v38 = (char *)(result + 48);
              vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
              result += 64;
            }
            while (result != v31);
            result = v31;
          }
          while (result != v30)
          {
            v39 = v26->u8[0];
            v26 = (int8x16_t *)((char *)v26 + 1);
            *result++ = v39;
          }
        }
        else
        {
          if ((_DWORD)v27 == 1)
          {
            *result = v26->i16[0];
            goto LABEL_40;
          }
          if ((_DWORD)v27)
          {
            v28 = 2 * v27;
LABEL_33:
            result = memcpy(result, v26, v28);
            goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
    }
    goto LABEL_43;
  }
  if ((v12 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v12 + 20), &v44), (v13 = v44) == 0))
  {
LABEL_43:
    *a1 = 0;
    __break(0xC471u);
    goto LABEL_53;
  }
  *(_BYTE *)(v44 + 20) = 45;
  *(_DWORD *)v13 = 2;
  *(_DWORD *)(v13 + 4) = v12;
  *(_QWORD *)(v13 + 8) = v13 + 20;
  *(_DWORD *)(v13 + 16) = 4;
  v29 = (_BYTE *)(v13 + 21);
  if ((_DWORD)v7 == 1)
  {
    *v29 = a2->i8[0];
  }
  else if ((_DWORD)v7)
  {
    memcpy((void *)(v13 + 21), a2, v7);
  }
  v29[v7] = 45;
  result = &v29[v7 + 1];
  if (a4)
  {
    v26 = *(int8x16_t **)(a4 + 8);
    v28 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v28 == 1)
      {
        *(_BYTE *)result = v26->i8[0];
      }
      else if ((_DWORD)v28)
      {
        goto LABEL_33;
      }
    }
    else
    {
      v40 = (_WORD *)((char *)result + v28);
      if (v28 >= 0x10)
      {
        v41 = (_WORD *)((char *)result + (v28 & 0xFFFFFFF0));
        do
        {
          v42 = (unsigned __int128)vld2q_s8(v26->i8);
          v26 += 2;
          *(_OWORD *)result = v42;
          result += 8;
        }
        while (result != v41);
        result = v41;
      }
      while (result != v40)
      {
        v43 = v26->i8[0];
        v26 = (int8x16_t *)((char *)v26 + 2);
        *(_BYTE *)result = v43;
        result = (_WORD *)((char *)result + 1);
      }
    }
  }
LABEL_40:
  *a1 = v13;
  return result;
}

BOOL WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WTF::ASCIILiteral>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  if (!*(_DWORD *)(a1 + 12))
    return 0;
  v4 = 0;
  do
  {
    v5 = a2[1];
    if (v5)
      v6 = v5 - 1;
    else
      v6 = 0;
    result = WTF::equalInternal<unsigned char>(*(_QWORD *)(*(_QWORD *)a1 + 8 * v4), *a2, v6);
    if (result)
      break;
    ++v4;
  }
  while (v4 < *(unsigned int *)(a1 + 12));
  return result;
}

_BYTE *WTF::makeString<char,WTF::ASCIILiteral>(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *result;
  uint64_t v10;

  if (a3)
  {
    v5 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198966054);
    }
    v6 = a3 - 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (v6 + 1);
  if (__OFADD__(v6, 1) || (WTF::tryFastCompactMalloc((WTF *)(v7 + 20), &v10), (v8 = v10) == 0))
  {
    *a1 = 0;
    __break(0xC471u);
    JUMPOUT(0x198966028);
  }
  *(_BYTE *)(v10 + 20) = 45;
  *(_DWORD *)v8 = 2;
  *(_DWORD *)(v8 + 4) = v7;
  *(_QWORD *)(v8 + 8) = v8 + 20;
  *(_DWORD *)(v8 + 16) = 4;
  result = (_BYTE *)(v8 + 21);
  if (v6 == 1)
  {
    *result = *a2;
  }
  else if (v6)
  {
    result = memcpy(result, a2, v5);
  }
  *a1 = v8;
  return result;
}

char *WTF::makeString<WTF::StringView,WTF::String,WTF::StringView>(int **a1, uint64_t a2, uint64_t a3, uint64_t *a4, int8x16_t *a5, int8x16_t *a6)
{
  char *result;
  int8x16_t *v8[2];
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a5;
  v8[1] = a6;
  result = WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)v9, a4, v8, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

void JSC::supportedLocales(JSC::JSGlobalObject *a1, const WTF::StringImpl *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  _QWORD v27[2];
  char v28;
  const char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 7);
  v27[0] = a4;
  if (a4 == 10)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v12 = (unsigned int *)a4;
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    v22 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v27, a1, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(a4 + 5) <= 0x16u)
  {
    v22 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a4, (JSC::SymbolObject **)a1, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_13:
    v12 = (unsigned int *)v22;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v13 = *(_DWORD *)(v11 + 80);
    if ((v13 & 0x27) != 0 && (v13 & 0x20) == 0)
    {
      v26 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 = v26;
    }
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_7;
  }
LABEL_8:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_9;
  v23 = *(_DWORD *)(v11 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
  {
    v25 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v12 = v25;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_9:
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1792);
    v27[0] = "lookup";
    v27[1] = 7;
    v28 = 0;
    v29 = "best fit";
    v30 = 9;
    v31 = 1;
    JSC::intlOption<JSC::LocaleMatcher>(a1, v12, v14, (uint64_t)v27, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_10;
    v24 = *(_DWORD *)(v11 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
    if (!*(_QWORD *)(v11 + 16))
LABEL_10:
      JSC::lookupSupportedLocales((unint64_t)a1, a2, (uint64_t)a3, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::lookupSupportedLocales(unint64_t a1, const WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  JSC *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  const WTF::String *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int32x4_t v42;
  char v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t OutOfMemoryError;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  JSC::Exception *v68;
  unint64_t v69;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned int *)(a3 + 12);
  v13 = *(_DWORD *)(a1 + 896);
  if (v13)
    v14 = 16 * (v13 & 0xFFFFFFFE);
  else
    v14 = 0;
  v15 = JSC::JSArray::tryCreate(*(JSC::JSArray **)(a1 + 56), v14, 0, a4, a5, a6, a7, a8, a9);
  if (v15)
  {
    v17 = v15;
    if ((_DWORD)v12)
    {
      v69 = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 8 * v12;
      do
      {
        if (v19 >= *(unsigned int *)(a3 + 12))
        {
          __break(0xC471u);
          return;
        }
        v22 = (JSC *)(*(_QWORD *)a3 + v18);
        JSC::removeUnicodeLocaleExtension(v22, &v72);
        v23 = v72;
        JSC::bestAvailableLocale<JSC::bestAvailableLocale(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&,WTF::String const&)::$_0>(&v71, v72, a2, v24, v25, v26, v27, v28);
        v36 = v71;
        if (v71)
        {
          v37 = JSC::jsString((JSC *)v11, v22, v30, v31, v32, v33, v34, v35);
          JSC::JSObject::putDirectIndex(v17, v69, v20, v37, v38, v39, v40, v41, v42);
          if (!*(_DWORD *)(v11 + 80))
            goto LABEL_10;
          v60 = *(_DWORD *)(v11 + 80);
          if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
          if (*(_QWORD *)(v11 + 16))
            v43 = 0;
          else
LABEL_10:
            v43 = 1;
          v20 = (JSC::VM *)((_DWORD)v20 + 1);
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            if (!v23)
              goto LABEL_19;
          }
          else
          {
            *(_DWORD *)v36 -= 2;
            if (!v23)
              goto LABEL_19;
          }
        }
        else
        {
          v43 = 1;
          if (!v23)
            goto LABEL_19;
        }
        if (*(_DWORD *)v23 != 2)
        {
          *(_DWORD *)v23 -= 2;
LABEL_19:
          if ((v43 & 1) == 0)
            return;
          goto LABEL_20;
        }
        WTF::StringImpl::~StringImpl(v23, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        if ((v43 & 1) == 0)
          return;
LABEL_20:
        ++v19;
        v18 += 8;
      }
      while (v21 != v18);
    }
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, v16);
    v68 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v68 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v62, v63, v64, v65, v66);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v68, v67, v62, v63, v64, v65, v66);
  }
}

void JSC::numberingSystemsForLocale(JSC *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, float a8@<S1>)
{
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  size_t v23;
  size_t v24;
  int *v25;
  char *v26;
  _QWORD *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  _DWORD **v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char **v69;
  char *v70;

  v11 = atomic_load(&qword_1ECF58ED8);
  if (v11 != -1)
  {
    v70 = &v68;
    v69 = &v70;
    std::__call_once(&qword_1ECF58ED8, &v69, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::numberingSystemsForLocale(WTF::String const&)::$_0 &&>>);
  }
  LODWORD(v69) = 0;
  WTF::String::utf8((uint64_t *)this, 0, a2, a3, a4, a5, a6, &v70, a8);
  v12 = v70;
  v20 = unumsys_open();
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree((unint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v12;
  }
  v21 = (const char *)MEMORY[0x19AEBC6E4](v20);
  v22 = v21;
  if (v21)
  {
    v23 = strlen(v21);
    if (v23)
    {
      v24 = v23;
      if (v23 >> 31)
        goto LABEL_38;
      v25 = (int *)WTF::fastCompactMalloc((WTF *)(v23 + 20));
      v26 = (char *)(v25 + 5);
      *v25 = 2;
      v25[1] = v24;
      *((_QWORD *)v25 + 1) = v25 + 5;
      v25[4] = 4;
      if (v24 == 1)
        *v26 = *v22;
      else
        memcpy(v26, v22, v24);
    }
    else
    {
      v25 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    unumsys_close();
    *v25 += 2;
  }
  else
  {
    unumsys_close();
    v25 = 0;
  }
  *(_QWORD *)(a7 + 8) = 1;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v35 = v27;
  *(_QWORD *)a7 = v27;
  if (v22)
  {
    v36 = *v25;
    *v25 += 2;
    *v27 = v25;
    *(_DWORD *)(a7 + 12) = 1;
    if (v36)
    {
      *v25 = v36;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
  }
  else
  {
    *v27 = 0;
    *(_DWORD *)(a7 + 12) = 1;
  }
  v37 = dword_1ECF58EEC;
  if (!dword_1ECF58EEC)
    goto LABEL_29;
  v38 = dword_1ECF58EEC + 1;
  if ((unint64_t)dword_1ECF58EEC + 1 > 0x10)
    v39 = dword_1ECF58EEC + 1;
  else
    v39 = 16;
  if (v39 >> 29)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198966738);
  }
  v40 = (_DWORD **)qword_1ECF58EE0;
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v39));
  *(_DWORD *)(a7 + 8) = v39;
  *(_QWORD *)a7 = v48;
  *v48 = *v35;
  if (v48 == v35)
  {
    v48 = 0;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
  }
  WTF::fastFree((unint64_t)v35, v41, v42, v43, v44, v45, v46, v47);
  v49 = v48 + 1;
  v50 = 8 * v37;
  do
  {
    v51 = *v40;
    if (*v40)
      *v51 += 2;
    *v49++ = v51;
    ++v40;
    v50 -= 8;
  }
  while (v50);
  *(_DWORD *)(a7 + 12) = v38;
LABEL_29:
  if (v22)
  {
    if (*v25 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *v25 -= 2;
    }
  }
}

BOOL WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(unsigned __int16 **a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;

  v1 = *a1;
  v2 = *((unsigned int *)a1 + 2);
  if (*((_BYTE *)a1 + 12))
  {
    if ((_DWORD)v2)
    {
      v3 = v2 - 1;
      do
      {
        v4 = *(unsigned __int8 *)v1;
        v1 = (unsigned __int16 *)((char *)v1 + 1);
        v5 = (v4 | 0x20) - 97;
        result = v5 < 0x1A;
      }
      while (v5 <= 0x19 && v3-- != 0);
      return result;
    }
    return 1;
  }
  if (!(_DWORD)v2)
    return 1;
  v8 = 2 * v2 - 2;
  do
  {
    v9 = *v1++;
    v10 = (v9 | 0x20) - 97;
    result = v10 < 0x1A;
    v11 = v10 > 0x19 || v8 == 0;
    v8 -= 2;
  }
  while (!v11);
  return result;
}

BOOL JSC::isUnicodeRegionSubtag(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 *v3[2];

  v3[0] = a1;
  v3[1] = a2;
  if ((_DWORD)a2 == 2)
    return WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(v3);
  if ((_DWORD)a2 == 3)
    return WTF::StringView::containsOnly<&BOOL WTF::isASCIIDigit<char16_t>>(v3);
  return 0;
}

BOOL WTF::StringView::containsOnly<&BOOL WTF::isASCIIDigit<char16_t>>(unsigned __int16 **a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  int v8;
  BOOL v9;

  v1 = *a1;
  v2 = *((unsigned int *)a1 + 2);
  if (*((_BYTE *)a1 + 12))
  {
    if ((_DWORD)v2)
    {
      v3 = v2 - 1;
      do
      {
        v4 = *(unsigned __int8 *)v1;
        v1 = (unsigned __int16 *)((char *)v1 + 1);
        result = (v4 - 48) < 0xA;
      }
      while ((v4 - 48) <= 9 && v3-- != 0);
      return result;
    }
    return 1;
  }
  if (!(_DWORD)v2)
    return 1;
  v7 = 2 * v2 - 2;
  do
  {
    v8 = *v1++;
    result = (v8 - 48) < 0xA;
    v9 = (v8 - 48) > 9 || v7 == 0;
    v7 -= 2;
  }
  while (!v9);
  return result;
}

BOOL JSC::isUnicodeVariantSubtag(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  _BOOL8 v6;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  BOOL v24;

  if ((a2 - 5) <= 3)
  {
    if (BYTE4(a2))
    {
      v2 = a2 - 1;
      do
      {
        v3 = *(unsigned __int8 *)a1;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        v4 = (v3 | 0x20) - 97;
        v6 = (v3 - 48) < 0xA || v4 < 0x1A;
      }
      while (v6 && v2-- != 0);
    }
    else
    {
      v14 = 2 * a2 - 2;
      do
      {
        v15 = *a1++;
        v16 = (v15 | 0x20) - 97;
        v6 = (v15 - 48) < 0xA || v16 < 0x1A;
        v18 = !v6 || v14 == 0;
        v14 -= 2;
      }
      while (!v18);
    }
    return v6;
  }
  if ((_DWORD)a2 != 4)
    return 0;
  if (BYTE4(a2))
  {
    if (*(unsigned __int8 *)a1 - 48 <= 9)
    {
      v8 = (unsigned __int8 *)a1 + 1;
      v9 = 2;
      do
      {
        v10 = *v8++;
        v11 = (v10 | 0x20) - 97;
        v6 = (v10 - 48) < 0xA || v11 < 0x1A;
      }
      while (v6 && v9-- != 0);
      return v6;
    }
    return 0;
  }
  if (*a1 - 48 >= 0xA)
    return 0;
  v19 = a1 + 1;
  v20 = 4;
  do
  {
    v21 = *v19++;
    v22 = (v21 | 0x20) - 97;
    v6 = (v21 - 48) < 0xA || v22 < 0x1A;
    v24 = !v6 || v20 == 0;
    v20 -= 2;
  }
  while (!v24);
  return v6;
}

uint64_t JSC::LanguageTagParser::parseUnicodeLocaleId(JSC::LanguageTagParser *this)
{
  uint64_t result;
  double v3;
  double v4;
  float v5;

  result = JSC::LanguageTagParser::parseUnicodeLanguageId(this);
  if ((_DWORD)result)
  {
    if (*((_DWORD *)this + 8) == *((_DWORD *)this + 2) && *((_BYTE *)this + 40))
      return 1;
    else
      return JSC::LanguageTagParser::parseExtensionsAndPUExtensions((uint64_t)this, v3, v4, v5);
  }
  return result;
}

uint64_t JSC::LanguageTagParser::parseUnicodeLanguageId(JSC::LanguageTagParser *this)
{
  uint64_t v1;
  BOOL v2;
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  unsigned __int16 *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  float v29;
  double v30;
  double v31;
  float v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v1 = *((_QWORD *)this + 7);
  v34 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v35 = v1;
  v2 = (_DWORD)v1 == 4 || (v1 - 2) >= 7;
  if (v2 || !WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(&v34))
    return 0;
  if (!JSC::LanguageTagParser::next(this, v4, v5, v6))
    return 1;
  v7 = *((_QWORD *)this + 7);
  v34 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v35 = v7;
  if ((_DWORD)v7 == 4
    && WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(&v34)
    && !JSC::LanguageTagParser::next(this, v30, v31, v32))
  {
    return 1;
  }
  if (JSC::isUnicodeRegionSubtag(*((unsigned __int16 **)this + 6), *((unsigned __int16 **)this + 7))
    && !JSC::LanguageTagParser::next(this, v8, v9, v10))
  {
    return 1;
  }
  v37 = 0;
  while (1)
  {
    v13 = (unsigned __int16 *)*((_QWORD *)this + 6);
    v14 = *((_QWORD *)this + 7);
    if (!JSC::isUnicodeVariantSubtag(v13, v14))
    {
LABEL_17:
      v11 = 1;
      goto LABEL_18;
    }
    v33 = JSC::parseVariantCode(v13, v14);
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add(&v34, &v37, &v33, v22, v23, v24, v25, v26);
    if (!v36)
      break;
    if ((JSC::LanguageTagParser::next(this, v27, v28, v29) & 1) == 0)
      goto LABEL_17;
  }
  v11 = 0;
LABEL_18:
  if (v37)
    WTF::fastFree(v37 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v11;
}

uint64_t JSC::LanguageTagParser::parseExtensionsAndPUExtensions(uint64_t this, double a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v50;
  unsigned __int16 *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  double v56;
  double v57;
  float v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v101;
  unsigned __int16 *v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v128;
  unsigned int v129;
  unsigned int v130;
  double v132;
  double v133;
  float v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  double v147;
  double v148;
  float v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  char v162;
  unsigned __int16 *v163[2];

  if (*(_DWORD *)(this + 56) != 1)
    return 1;
  v4 = this;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 **)(v4 + 48);
    if (*(_BYTE *)(v4 + 60))
      v7 = *v6;
    else
      v7 = *(unsigned __int16 *)v6;
    if ((v7 - 48) >= 0xA && (v7 | 0x20u) - 97 > 0x19)
      return 1;
    v9 = v7 | (32 * ((v7 - 65) < 0x1A));
    v10 = (v9 - 48) >= 0xA ? -87 : -48;
    v11 = v10 + v9;
    if (v11 >= 0x40)
      break;
    v12 = 1 << v11;
    if (((1 << v11) & v5) != 0)
      return 0;
    v13 = v7 - 84;
    if (v13 > 0x24)
      goto LABEL_83;
    if (((1 << v13) & 0x100000001) == 0)
    {
      if (((1 << v13) & 0x200000002) == 0)
      {
        if (((1 << v13) & 0x1000000010) != 0)
        {
          this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
          if (!(_DWORD)this)
            return this;
          v135 = *(_QWORD *)(v4 + 56);
          if ((v135 - 1) <= 7)
          {
            v136 = *(unsigned __int8 **)(v4 + 48);
            v137 = *(_QWORD *)(v4 + 56);
            if ((v135 & 0xFF00000000) != 0)
            {
              while (1)
              {
                v138 = *v136;
                v139 = v138 - 48;
                v140 = (v138 | 0x20) - 97;
                if (v139 >= 0xA && v140 >= 0x1A)
                  break;
                ++v136;
                if (!--v137)
                  goto LABEL_211;
              }
            }
            else
            {
              v142 = 2 * v137;
              while (1)
              {
                v143 = *(unsigned __int16 *)v136;
                v144 = v143 - 48;
                v145 = (v143 | 0x20) - 97;
                if (v144 >= 0xA && v145 >= 0x1A)
                  break;
                v136 += 2;
                v142 -= 2;
                if (!v142)
                {
LABEL_211:
                  if (JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, v132, v133, v134))
                  {
LABEL_212:
                    v150 = *(_QWORD *)(v4 + 56);
                    if ((v150 - 1) <= 7)
                    {
                      v151 = *(unsigned __int8 **)(v4 + 48);
                      v152 = *(_QWORD *)(v4 + 56);
                      if ((v150 & 0xFF00000000) != 0)
                      {
                        while (1)
                        {
                          v153 = *v151;
                          v154 = v153 - 48;
                          v155 = (v153 | 0x20) - 97;
                          if (v154 >= 0xA && v155 >= 0x1A)
                            break;
                          ++v151;
                          if (!--v152)
                            goto LABEL_226;
                        }
                      }
                      else
                      {
                        v157 = 2 * v152;
                        while (1)
                        {
                          v158 = *(unsigned __int16 *)v151;
                          v159 = v158 - 48;
                          v160 = (v158 | 0x20) - 97;
                          if (v159 >= 0xA && v160 >= 0x1A)
                            break;
                          v151 += 2;
                          v157 -= 2;
                          if (!v157)
                          {
LABEL_226:
                            v162 = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, v147, v148, v149);
                            this = 1;
                            if ((v162 & 1) != 0)
                              goto LABEL_212;
                            return this;
                          }
                        }
                      }
                    }
                  }
                  return 1;
                }
              }
            }
          }
        }
        else
        {
LABEL_83:
          this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
          if (!(_DWORD)this)
            return this;
          v59 = *(_QWORD *)(v4 + 56);
          if ((v59 - 2) <= 6)
          {
            v60 = *(unsigned __int8 **)(v4 + 48);
            v61 = *(_QWORD *)(v4 + 56);
            if ((v59 & 0xFF00000000) != 0)
            {
              while (1)
              {
                v62 = *v60;
                v63 = v62 - 48;
                v64 = (v62 | 0x20) - 97;
                if (v63 >= 0xA && v64 >= 0x1A)
                  break;
                ++v60;
                if (!--v61)
                  goto LABEL_164;
              }
            }
            else
            {
              v111 = 2 * v61;
              while (1)
              {
                v112 = *(unsigned __int16 *)v60;
                v113 = v112 - 48;
                v114 = (v112 | 0x20) - 97;
                if (v113 >= 0xA && v114 >= 0x1A)
                  break;
                v60 += 2;
                v111 -= 2;
                if (!v111)
                {
LABEL_164:
                  this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, v56, v57, v58);
                  if ((_DWORD)this)
                  {
LABEL_165:
                    v116 = *(_QWORD *)(v4 + 56);
                    if ((v116 - 2) <= 6)
                    {
                      v117 = *(unsigned __int8 **)(v4 + 48);
                      v118 = *(_QWORD *)(v4 + 56);
                      if ((v116 & 0xFF00000000) != 0)
                      {
                        while (1)
                        {
                          v119 = *v117;
                          v120 = v119 - 48;
                          v121 = (v119 | 0x20) - 97;
                          if (v120 >= 0xA && v121 >= 0x1A)
                            break;
                          ++v117;
                          if (!--v118)
                            goto LABEL_179;
                        }
                      }
                      else
                      {
                        v123 = 2 * v118;
                        while (1)
                        {
                          v124 = *(unsigned __int16 *)v117;
                          v125 = v124 - 48;
                          v126 = (v124 | 0x20) - 97;
                          if (v125 >= 0xA && v126 >= 0x1A)
                            break;
                          v117 += 2;
                          v123 -= 2;
                          if (!v123)
                          {
LABEL_179:
                            this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
                            if ((this & 1) != 0)
                              goto LABEL_165;
                            goto LABEL_192;
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_192;
                }
              }
            }
          }
        }
        return 0;
      }
      this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
      if (!(_DWORD)this)
        return this;
      v14 = *(unsigned __int8 **)(v4 + 48);
      v15 = *(_QWORD *)(v4 + 56);
      if ((v15 - 3) <= 5)
      {
        v16 = *(_QWORD *)(v4 + 56);
        if ((v15 & 0xFF00000000) != 0)
        {
          v17 = 0;
          while (1)
          {
            v18 = v14[v17];
            v19 = v18 - 48;
            v20 = (v18 | 0x20) - 97;
            if (v19 >= 0xA && v20 >= 0x1A)
              break;
            if (v16 == ++v17)
              goto LABEL_98;
          }
        }
        else
        {
          v66 = 0;
          v67 = 2 * v16;
          while (1)
          {
            v68 = *(unsigned __int16 *)&v14[v66];
            v69 = v68 - 48;
            v70 = (v68 | 0x20) - 97;
            if (v69 >= 0xA && v70 >= 0x1A)
              break;
            v66 += 2;
            if (v67 == v66)
            {
LABEL_98:
              v14 = *(unsigned __int8 **)(v4 + 48);
              v15 = *(_QWORD *)(v4 + 56);
              if ((v15 - 3) <= 5)
              {
                v72 = *(_QWORD *)(v4 + 56);
                if ((v15 & 0xFF00000000) != 0)
                {
                  v73 = 0;
                  while (1)
                  {
                    v74 = v14[v73];
                    v75 = v74 - 48;
                    v76 = (v74 | 0x20) - 97;
                    if (v75 >= 0xA && v76 >= 0x1A)
                      break;
                    if (v72 == ++v73)
                      goto LABEL_113;
                  }
                }
                else
                {
                  v78 = 0;
                  v79 = 2 * v72;
                  while (1)
                  {
                    v80 = *(unsigned __int16 *)&v14[v78];
                    v81 = v80 - 48;
                    v82 = (v80 | 0x20) - 97;
                    if (v81 >= 0xA && v82 >= 0x1A)
                      break;
                    v78 += 2;
                    if (v79 == v78)
                    {
LABEL_113:
                      this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
                      if ((this & 1) != 0)
                        goto LABEL_98;
                      goto LABEL_192;
                    }
                  }
                }
              }
              v23 = 1;
              goto LABEL_117;
            }
          }
        }
      }
      v23 = 0;
LABEL_117:
      if ((_DWORD)v15 == 2)
      {
        if ((v15 & 0xFF00000000) != 0)
        {
          v84 = *v14;
          v85 = v84 - 48;
          v86 = (v84 | 0x20) - 97;
          if (v85 < 0xA || v86 <= 0x19)
          {
            v88 = v14[1];
LABEL_124:
            if ((v88 | 0x20u) - 97 <= 0x19)
            {
              do
              {
                if ((v15 & 0xFF00000000) != 0)
                {
                  v89 = *v14;
                  v90 = v89 - 48;
                  v91 = (v89 | 0x20) - 97;
                  if (v90 >= 0xA && v91 > 0x19)
                    goto LABEL_192;
                  v93 = v14[1];
                }
                else
                {
                  v107 = *(unsigned __int16 *)v14;
                  v108 = v107 - 48;
                  v109 = (v107 | 0x20) - 97;
                  if (v108 >= 0xA && v109 >= 0x1A)
                    goto LABEL_192;
                  v93 = *((unsigned __int16 *)v14 + 1);
                }
                if ((v93 | 0x20u) - 97 > 0x19)
                  goto LABEL_192;
                this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
                if (!(_DWORD)this)
                  goto LABEL_192;
LABEL_133:
                v14 = *(unsigned __int8 **)(v4 + 48);
                v15 = *(_QWORD *)(v4 + 56);
                if ((v15 - 3) > 5)
                {
                  v94 = *(_QWORD *)(v4 + 56);
                }
                else
                {
                  v94 = *(_QWORD *)(v4 + 56);
                  if ((v15 & 0xFF00000000) != 0)
                  {
                    v95 = *(_QWORD *)(v4 + 56);
                    v96 = *(unsigned __int8 **)(v4 + 48);
                    while (1)
                    {
                      v97 = *v96;
                      v98 = v97 - 48;
                      v99 = (v97 | 0x20) - 97;
                      if (v98 >= 0xA && v99 >= 0x1A)
                        break;
                      ++v96;
                      if (!--v95)
                        goto LABEL_148;
                    }
                  }
                  else
                  {
                    v101 = 2 * v94;
                    v102 = *(unsigned __int16 **)(v4 + 48);
                    while (1)
                    {
                      v103 = *v102;
                      v104 = v103 - 48;
                      v105 = (v103 | 0x20) - 97;
                      if (v104 >= 0xA && v105 >= 0x1A)
                        break;
                      ++v102;
                      v101 -= 2;
                      if (!v101)
                      {
LABEL_148:
                        this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
                        if ((this & 1) != 0)
                          goto LABEL_133;
                        goto LABEL_192;
                      }
                    }
                  }
                }
              }
              while (v94 == 2);
              goto LABEL_192;
            }
          }
        }
        else
        {
          v128 = *(unsigned __int16 *)v14;
          v129 = v128 - 48;
          v130 = (v128 | 0x20) - 97;
          if (v129 < 0xA || v130 < 0x1A)
          {
            v88 = *((unsigned __int16 *)v14 + 1);
            goto LABEL_124;
          }
        }
      }
LABEL_191:
      if (!v23)
        return 0;
      goto LABEL_192;
    }
    this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
    if (!(_DWORD)this)
      return this;
    v22 = *(unsigned __int16 **)(v4 + 56);
    v163[0] = *(unsigned __int16 **)(v4 + 48);
    v163[1] = v22;
    if ((_DWORD)v22 == 4
      || ((_DWORD)v22 - 2) >= 7
      || (this = WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(v163), !(_DWORD)this))
    {
      v23 = 0;
    }
    else
    {
      this = JSC::LanguageTagParser::parseUnicodeLanguageId((JSC::LanguageTagParser *)v4);
      if (!(_DWORD)this)
        return this;
      if (*(_DWORD *)(v4 + 32) == *(_DWORD *)(v4 + 8) && *(_BYTE *)(v4 + 40))
        goto LABEL_192;
      v23 = 1;
    }
    v24 = *(_QWORD *)(v4 + 56);
    if ((_DWORD)v24 != 2)
      goto LABEL_191;
    v25 = *(unsigned __int8 **)(v4 + 48);
    if ((v24 & 0xFF00000000) != 0)
    {
      if ((*v25 | 0x20u) - 97 > 0x19)
        goto LABEL_191;
      v26 = v25[1];
    }
    else
    {
      if ((*(unsigned __int16 *)v25 | 0x20u) - 97 >= 0x1A)
        goto LABEL_191;
      v26 = *((unsigned __int16 *)v25 + 1);
    }
    if ((v26 - 48) > 9)
      goto LABEL_191;
LABEL_40:
    if ((v24 & 0xFF00000000) != 0)
    {
      if ((*v25 | 0x20u) - 97 > 0x19)
        goto LABEL_192;
      v27 = v25[1];
    }
    else
    {
      if ((*(unsigned __int16 *)v25 | 0x20u) - 97 >= 0x1A)
        goto LABEL_192;
      v27 = *((unsigned __int16 *)v25 + 1);
    }
    if ((v27 - 48) <= 9)
    {
      this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
      if (!(_DWORD)this)
        return this;
      v31 = *(_QWORD *)(v4 + 56);
      if ((v31 - 3) <= 5)
      {
        v32 = *(unsigned __int8 **)(v4 + 48);
        v33 = *(_QWORD *)(v4 + 56);
        if ((v31 & 0xFF00000000) != 0)
        {
          while (1)
          {
            v34 = *v32;
            v35 = v34 - 48;
            v36 = (v34 | 0x20) - 97;
            if (v35 >= 0xA && v36 >= 0x1A)
              break;
            ++v32;
            if (!--v33)
              goto LABEL_59;
          }
        }
        else
        {
          v38 = 2 * v33;
          while (1)
          {
            v39 = *(unsigned __int16 *)v32;
            v40 = v39 - 48;
            v41 = (v39 | 0x20) - 97;
            if (v40 >= 0xA && v41 >= 0x1A)
              break;
            v32 += 2;
            v38 -= 2;
            if (!v38)
            {
LABEL_59:
              this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, v28, v29, v30);
              if (!(_DWORD)this)
                goto LABEL_192;
LABEL_60:
              v25 = *(unsigned __int8 **)(v4 + 48);
              v24 = *(_QWORD *)(v4 + 56);
              if ((v24 - 3) > 5)
              {
                v43 = *(_QWORD *)(v4 + 56);
              }
              else
              {
                v43 = *(_QWORD *)(v4 + 56);
                if ((v24 & 0xFF00000000) != 0)
                {
                  v44 = *(_QWORD *)(v4 + 56);
                  v45 = *(unsigned __int8 **)(v4 + 48);
                  while (1)
                  {
                    v46 = *v45;
                    v47 = v46 - 48;
                    v48 = (v46 | 0x20) - 97;
                    if (v47 >= 0xA && v48 >= 0x1A)
                      break;
                    ++v45;
                    if (!--v44)
                      goto LABEL_75;
                  }
                }
                else
                {
                  v50 = 2 * v43;
                  v51 = *(unsigned __int16 **)(v4 + 48);
                  while (1)
                  {
                    v52 = *v51;
                    v53 = v52 - 48;
                    v54 = (v52 | 0x20) - 97;
                    if (v53 >= 0xA && v54 >= 0x1A)
                      break;
                    ++v51;
                    v50 -= 2;
                    if (!v50)
                    {
LABEL_75:
                      this = JSC::LanguageTagParser::next((JSC::LanguageTagParser *)v4, a2, a3, a4);
                      if ((this & 1) != 0)
                        goto LABEL_60;
                      goto LABEL_192;
                    }
                  }
                }
              }
              if (v43 == 2)
                goto LABEL_40;
              goto LABEL_192;
            }
          }
        }
      }
      return 0;
    }
LABEL_192:
    if (*(_DWORD *)(v4 + 32) != *(_DWORD *)(v4 + 8) || !*(_BYTE *)(v4 + 40))
    {
      v5 |= v12;
      if (*(_DWORD *)(v4 + 56) == 1)
        continue;
    }
    return 1;
  }
  __break(1u);
  return this;
}

uint64_t JSC::LanguageTagParser::next(JSC::LanguageTagParser *this, double a2, double a3, float a4)
{
  unsigned int *v5;
  int v6;
  char v7;
  uint64_t result;

  if (*((_DWORD *)this + 8) == *((_DWORD *)this + 2) && *((_BYTE *)this + 40))
    return 0;
  v5 = (unsigned int *)WTF::StringView::SplitResult::Iterator::operator++((uint64_t)this + 24, a2, a3, a4);
  if (*((_DWORD *)this + 8) == *((_DWORD *)this + 2) && *((_BYTE *)this + 40))
  {
    result = 0;
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    *((_BYTE *)this + 60) = 1;
  }
  else
  {
    *((_QWORD *)this + 6) = WTF::StringView::SplitResult::Iterator::operator*(v5);
    *((_DWORD *)this + 14) = v6;
    *((_BYTE *)this + 60) = v7;
    return 1;
  }
  return result;
}

uint64_t JSC::parseVariantCode(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  int v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  v2 = a2;
  if ((_DWORD)a2)
  {
    v3 = v7;
    if ((a2 & 0xFF00000000) != 0)
    {
      do
      {
        v4 = *(unsigned __int8 *)a1;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        *v3++ = v4 | (32 * ((v4 - 65) < 0x1A));
        --v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        v6 = *a1++;
        *v3++ = v6 | (32 * ((v6 - 65) < 0x1A));
        --v2;
      }
      while (v2);
    }
  }
  return v7[0];
}

BOOL JSC::isWellFormedCurrencyCode(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 *v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return (_DWORD)a2 == 3 && WTF::StringView::containsOnly<&BOOL WTF::isASCIIAlpha<char16_t>>(v3);
}

uint64_t std::optional<WTF::String>::optional[abi:sn180100]<WTF::ASCIILiteral,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;

  v3 = a2[1];
  if (v3)
  {
    v4 = v3 - 1;
    if (v3 == 1)
    {
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v5 = *a2;
      v6 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v6 = 2;
      v6[1] = v4;
      *((_QWORD *)v6 + 1) = v5;
      v6[4] = 4;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

uint64_t JSC::mapBCP47ToICUCalendarKeyword@<X0>(JSC *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  const char *v7;
  char v8;

  if (WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"gregory", 7))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v6 = 0x900000002;
    v7 = "gregorian";
  }
  else if (WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"islamicc", 8))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v6 = 0xD00000002;
    v7 = "islamic-civil";
  }
  else
  {
    result = WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"ethioaa", 7);
    if (!(_DWORD)result)
    {
      v8 = 0;
      *a2 = 0;
      goto LABEL_8;
    }
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v6 = 0x1300000002;
    v7 = "ethiopic-amete-alem";
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = 4;
  *(_QWORD *)a2 = result;
  v8 = 1;
LABEL_8:
  a2[8] = v8;
  return result;
}

uint64_t JSC::mapICUCollationKeywordToBCP47@<X0>(JSC *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8[2];

  if (WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"dictionary", 10))
  {
    v6 = "dict";
  }
  else
  {
    if (WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"gb2312han", 9))
    {
      v6 = "gb2312";
      v7 = 7;
      goto LABEL_8;
    }
    if (WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"phonebook", 9))
    {
      v6 = "phonebk";
      v7 = 8;
      goto LABEL_8;
    }
    result = WTF::equalInternal<unsigned char>(*(_QWORD *)this, (unint64_t)"traditional", 11);
    if (!(_DWORD)result)
    {
      *a2 = 0;
      a2[8] = 0;
      return result;
    }
    v6 = "trad";
  }
  v7 = 5;
LABEL_8:
  v8[0] = (uint64_t)v6;
  v8[1] = v7;
  return std::optional<WTF::String>::optional[abi:sn180100]<WTF::ASCIILiteral,0>((uint64_t)a2, v8);
}

JSC::Exception *JSC::callIntlPluralRules(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"PluralRules", 12);
}

unint64_t JSC::constructIntlPluralRules(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t (*v30)(JSC::VM **);
  JSC::VM **v31;
  uint64_t (*v32)(JSC::VM **);
  JSC::VM **v33;
  JSC::JSGlobalObject *v34;
  uint64_t v35;
  JSC::VM *v36;
  uint64_t v37;
  char *v38;

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 344);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v32 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (JSC::VM **)(this - 16);
    v36 = *v33;
    v37 = this;
    v38 = (char *)(this + 344);
    SubclassStructure = (JSC::JSObject *)v32(&v36);
  }
  else
  {
    v36 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v34 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v34 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v36, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v29 = *(_DWORD *)(v10 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      {
        v35 = v14;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v35;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 344);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v31 = (JSC::VM **)(v14 - 16);
      v36 = *v31;
      v37 = v14;
      v38 = (char *)(v14 + 344);
      v15 = v30(&v36);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = JSC::IntlPluralRules::create((JSC::IntlPluralRules *)v10, v17, a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = v18;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_22;
  }
  v25 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_22:
    v26 = 10;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)a2 + 7);
LABEL_19:
  JSC::IntlPluralRules::initializePluralRules(v18, this, v25, (JSC::Symbol *)v26, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::IntlPluralRulesPrototype::create(JSC::IntlPluralRulesPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  WTF::StringImpl *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  WTF::StringImpl *v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  WTF::StringImpl *v105;

  v11 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v81 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v81);
    *((_QWORD *)this + 4865) = SlowCase + (int)v81;
LABEL_2:
    *v11 = SlowCase + 16;
    goto LABEL_3;
  }
  v104 = (char *)this + 38904;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = v104;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v101, v102, v103);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v13 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = (unint64_t)a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v14 = *(_QWORD *)(v11[381] + 2776);
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x1000000002;
  *(_QWORD *)(v15 + 8) = "Intl.PluralRules";
  *(_DWORD *)(v15 + 16) = 4;
  v105 = (WTF::StringImpl *)v15;
  v22 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v105, v16, v17, v18, v19, v20, v21);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, v14, v22, 6, v23, v24, v25, v26);
  v34 = v105;
  v105 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = v11[381];
  v36 = *(WTF::StringImpl **)(v35 + 2280);
  if (v36)
  {
    v37 = *(_DWORD *)v36 + 2;
    *(_DWORD *)v36 = v37;
    if ((*((_BYTE *)v36 + 16) & 0x20) != 0)
    {
      v38 = *(WTF::StringImpl **)(v35 + 872);
      if (!v38)
        goto LABEL_12;
      v37 = *(_DWORD *)v38;
    }
    else
    {
      v38 = v36;
    }
    *(_DWORD *)v38 = v37 + 2;
LABEL_12:
    v105 = v38;
    v46 = JSC::JSFunction::create((uint64_t)this, (uint64_t)a2, 2, &v105, (uint64_t)JSC::intlPluralRulesPrototypeFuncSelectRange, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v48 = v105;
    v105 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, (unint64_t)v36, v46, 4, v43, v44, v45, v47);
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
    return SlowCase;
  }
  v82 = *(WTF::StringImpl **)(v35 + 872);
  if (v82)
    *(_DWORD *)v82 += 2;
  v105 = v82;
  v90 = JSC::JSFunction::create((uint64_t)this, (uint64_t)a2, 2, &v105, (uint64_t)JSC::intlPluralRulesPrototypeFuncSelectRange, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v92 = v105;
  v105 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v83, v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, (uint64_t)this, 0, v90, 4, v87, v88, v89, v91);
  return SlowCase;
}

uint64_t JSC::IntlPluralRulesPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlPluralRulesPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::intlPluralRulesPrototypeFuncSelectRange(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlPluralRules *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::JSObject *v14;
  JSC::JSObject *v15;
  unint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  JSC::JSObject *v26;
  JSC::JSObject *v27;
  JSC::VM *v28;

  v10 = *((_QWORD *)this + 7);
  v28 = (JSC::VM *)v10;
  v11 = (JSC::IntlPluralRules *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlPluralRules::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v18 = "Intl.PluralRules.prototype.selectRange called on value that's not a PluralRules";
    v19 = 80;
    return JSC::throwTypeError((unint64_t)this, &v28, (uint64_t)v18, v19);
  }
  v12 = *((int *)a2 + 8);
  v13 = v12 - 1;
  if (v12 == 1
    || (v14 = (JSC::JSObject *)*((_QWORD *)a2 + 6), v27 = v14, v13 == 1)
    || (v15 = (JSC::JSObject *)*((_QWORD *)a2 + 7), v26 = v15, v14 == (JSC::JSObject *)10)
    || v15 == (JSC::JSObject *)10)
  {
    v18 = "start or end is undefined";
    v19 = 26;
    return JSC::throwTypeError((unint64_t)this, &v28, (uint64_t)v18, v19);
  }
  if ((unint64_t)v14 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v14;
  }
  else
  {
    v16 = (unint64_t)v14 - 0x2000000000000;
    if (v16 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v27, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v17 = *(double *)a9.i64;
    }
    else
    {
      v17 = *(double *)&v16;
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)v15 >= 0xFFFE000000000000)
  {
    v21 = (double)(int)v15;
  }
  else if ((unint64_t)v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(&v26, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v21 = v22;
  }
  else
  {
    *(_QWORD *)&v21 = (char *)v15 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlPluralRules::selectRange(v11, this, v17, v21);
  v24 = *(_DWORD *)(v10 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
  {
    v25 = v21;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v21 = v25;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlPluralRules::selectRange(v11, this, v17, v21);
}

void JSC::IntlRelativeTimeFormat::visitChildren(JSC::IntlRelativeTimeFormat *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

uint64_t JSC::IntlRelativeTimeFormat::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlRelativeTimeFormat::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::IntlRelativeTimeFormat::resolvedOptions(JSC::IntlRelativeTimeFormat *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  int v43;
  const char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t result;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  JSC::JSGlobalObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v93;
  uint64_t Slow;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12 >= *(_QWORD *)(v10 + 32))
    {
      v12 = *(_QWORD *)(v10 + 40);
      if ((v12 & 1) != 0)
      {
        v88 = a2;
        JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v89, v90, v91);
        a2 = v88;
        v12 = SlowCase;
        goto LABEL_4;
      }
      v87 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = v12 + HIDWORD(v87);
      *(_QWORD *)(v10 + 40) = v12 + (int)v87;
    }
    *(_QWORD *)(v10 + 24) = v12 + v11;
  }
  else
  {
    v93 = a2;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    a2 = v93;
    v12 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v12 = 0;
  *(_DWORD *)v12 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v12 + 4) = 16783360;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v13 = v9 + 41952;
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
  v15 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlRelativeTimeFormat *)((char *)this + 32), a3, a4, a5, a6, a7, a8);
  v96 = 0;
  v97 = v12;
  v98 = -1;
  v16.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v14, v15, 0, (uint64_t)&v96, v17, v18, v16);
  v25 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2384);
  v27 = *((char *)this + 48);
  if (v27 <= 2)
  {
    v28 = off_1E359D740[v27];
    v29 = *((unsigned __int8 *)this + 48) + 4;
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v25 = 2;
    *(_DWORD *)(v25 + 4) = v29;
    *(_QWORD *)(v25 + 8) = v28;
    *(_DWORD *)(v25 + 16) = 4;
  }
  v95 = (WTF::StringImpl *)v25;
  v30 = JSC::jsNontrivialString(v9, (JSC::VM *)&v95, v19, v20, v21, v22, v23, v24);
  v96 = 0;
  v97 = v12;
  v98 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v26, v30, 0, (uint64_t)&v96, v32, v33, v31);
  v41 = v95;
  v95 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)v13 + 2048);
  v43 = 7;
  if (*((_BYTE *)this + 49))
  {
    v44 = "always";
  }
  else
  {
    v43 = 5;
    v44 = "auto";
  }
  v45 = v43 - 1;
  v46 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v46 = 2;
  *(_DWORD *)(v46 + 4) = v45;
  *(_QWORD *)(v46 + 8) = v44;
  *(_DWORD *)(v46 + 16) = 4;
  v95 = (WTF::StringImpl *)v46;
  v53 = JSC::jsNontrivialString(v9, (JSC::VM *)&v95, v47, v48, v49, v50, v51, v52);
  v96 = 0;
  v97 = v12;
  v98 = -1;
  v54.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v42, v53, 0, (uint64_t)&v96, v55, v56, v54);
  v64 = v95;
  v95 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = *(_QWORD *)(*(_QWORD *)v13 + 2040);
  v66 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlRelativeTimeFormat *)((char *)this + 40), v58, v59, v60, v61, v62, v63);
  v96 = 0;
  v97 = v12;
  v98 = -1;
  v67.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v65, v66, 0, (uint64_t)&v96, v68, v69, v67);
  return v12;
}

void JSC::IntlRelativeTimeFormat::formatInternal(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>, __n128 a6@<Q0>)
{
  double v6;
  JSC::VM *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  uint64_t (*v16)(WTF **);
  WTF **v17;
  BOOL v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, WTF *, uint64_t, WTF::StringImpl **, double);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int *v61;
  _WORD *v62;
  WTF *v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF *v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _QWORD v79[8];
  WTF::StringImpl *v80;
  JSC::VM *v81;

  v6 = a6.n128_f64[0];
  v9 = *(JSC::VM **)(a2 + 56);
  v81 = v9;
  if ((a6.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x1E00000002;
    *(_QWORD *)(v12 + 8) = "number argument must be finite";
    *(_DWORD *)(v12 + 16) = 4;
    v80 = (WTF::StringImpl *)v12;
    v14 = a2 + 128;
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(JSC::Heap ***)(a2 + 56);
    if ((v13 & 1) == 0)
      goto LABEL_37;
    v16 = *(uint64_t (**)(WTF **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (WTF **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v17 = (WTF **)(a2 - 16);
    goto LABEL_144;
  }
  if ((_DWORD)a4)
  {
    v10 = (a4 - 1);
    if ((a4 & 0xFF00000000) != 0)
      v11 = *(unsigned __int8 *)(a3 + v10);
    else
      v11 = *(unsigned __int16 *)(a3 + 2 * v10);
    if ((a4 & 0xFF00000000) != 0)
      v10 |= 0x100000000uLL;
    if (v11 == 115)
      a4 = v10;
  }
  v18 = (_DWORD)a4 != 6;
  if ((char *)a3 == "second" || (_DWORD)a4 != 6)
  {
    v19 = a4;
    if ((char *)a3 == "second")
    {
      v19 = a4;
      if ((_DWORD)a4 == 6)
        goto LABEL_64;
    }
  }
  else
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)a3 == 115 && *(_DWORD *)(a3 + 1) == 1852793701 && *(_DWORD *)(a3 + 2) == 1684959075)
      {
LABEL_64:
        v48 = 7;
        goto LABEL_74;
      }
      goto LABEL_18;
    }
    if (*(_WORD *)a3 != 115)
    {
LABEL_18:
      v19 = 6;
      goto LABEL_19;
    }
    v19 = 6;
    if (*(_QWORD *)(a3 + 2) == 0x6E006F00630065 && *(_QWORD *)(a3 + 4) == 0x64006E006F0063)
      goto LABEL_64;
  }
LABEL_19:
  if ((char *)a3 == "minute")
    v18 = 1;
  if (v18)
  {
    if ((char *)a3 == "minute" && (_DWORD)a4 == 6)
      goto LABEL_73;
    v20 = v19 == 4;
    v21 = v19 != 4;
    if ((char *)a3 != "hour" && v19 == 4)
    {
      if ((a4 & 0xFF00000000) != 0)
      {
        if (*(_BYTE *)a3 == 104 && *(_WORD *)(a3 + 1) == 30063 && *(_WORD *)(a3 + 2) == 29301)
        {
LABEL_115:
          v48 = 5;
          goto LABEL_74;
        }
      }
      else if (*(_WORD *)a3 == 104)
      {
        v21 = 0;
        v47 = 4;
        if (*(_DWORD *)(a3 + 2) == 7667823 && *(_DWORD *)(a3 + 4) == 7471221)
          goto LABEL_115;
LABEL_55:
        if ((char *)a3 == "week" || v21)
        {
          if ((char *)a3 != "week")
            goto LABEL_61;
          v64 = v19 == 4;
          v19 = v47;
          if (!v64)
            goto LABEL_25;
        }
        else if (v47)
        {
          if ((a4 & 0xFF00000000) != 0)
          {
            if (*(_BYTE *)a3 == 119 && *(_WORD *)(a3 + 1) == 25957 && *(_WORD *)(a3 + 2) == 27493)
              goto LABEL_118;
            goto LABEL_60;
          }
          if (*(_WORD *)a3 != 119)
          {
LABEL_60:
            v21 = 0;
LABEL_61:
            v19 = v47;
            goto LABEL_25;
          }
          v21 = 0;
          if (*(_DWORD *)(a3 + 2) != 6619237)
            goto LABEL_61;
          v19 = v47;
          if (*(_DWORD *)(a3 + 4) != 7012453)
            goto LABEL_25;
        }
LABEL_118:
        v48 = 3;
        goto LABEL_74;
      }
      v21 = 0;
      v47 = 4;
      goto LABEL_55;
    }
    if ((char *)a3 == "hour" && v19 == 4)
      goto LABEL_115;
    if ((char *)a3 != "day" && v19 == 3)
    {
      if ((a4 & 0xFF00000000) != 0)
      {
        if (*(_BYTE *)a3 == 100 && *(_WORD *)(a3 + 1) == 31073)
          goto LABEL_176;
      }
      else if (*(_WORD *)a3 == 100 && *(_DWORD *)(a3 + 2) == 7929953)
      {
        goto LABEL_176;
      }
      v47 = 3;
      goto LABEL_55;
    }
    if ((char *)a3 != "day")
    {
      v47 = v19;
      goto LABEL_55;
    }
    v47 = v19;
    if (v19 != 3)
      goto LABEL_55;
LABEL_176:
    v48 = 4;
LABEL_74:
    if (*(_BYTE *)(a1 + 49))
      v49 = (void (*)(uint64_t, uint64_t, WTF *, uint64_t, WTF::StringImpl **, double))MEMORY[0x1E0DE6828];
    else
      v49 = (void (*)(uint64_t, uint64_t, WTF *, uint64_t, WTF::StringImpl **, double))MEMORY[0x1E0DE6820];
    v77 = (WTF *)v79;
    v50 = *(_QWORD *)(a1 + 16);
    v78 = 0x2000000020;
    LODWORD(v80) = 0;
    v51 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, WTF::StringImpl **, __n128))v49)(v50, v48, v79, 32, &v80, a6);
    v59 = v51;
    if ((int)v80 <= 0)
    {
      HIDWORD(v78) = v51;
    }
    else
    {
      if ((_DWORD)v80 != 15)
        goto LABEL_88;
      LODWORD(v80) = 0;
      if (v78 < (unint64_t)(int)v51)
      {
        v65 = v78 + ((unint64_t)v78 >> 2);
        if (v65 >= 0x10)
          v66 = v65 + 1;
        else
          v66 = 16;
        if (v66 <= (int)v51)
          v67 = (int)v51;
        else
          v67 = v66;
        v68 = v77;
        if (v67 < 0x21)
        {
          v77 = (WTF *)v79;
          LODWORD(v78) = 32;
          v69 = (WTF *)v79;
        }
        else
        {
          if (v67 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198968D80);
          }
          v69 = (WTF *)WTF::fastMalloc((WTF *)(2 * v67));
          LODWORD(v78) = v67;
          v77 = v69;
        }
        memcpy(v69, v68, 2 * HIDWORD(v78));
        if (v79 != (_QWORD *)v68 && v68)
        {
          if (v77 == v68)
          {
            v77 = 0;
            LODWORD(v78) = 0;
          }
          WTF::fastFree((unint64_t)v68, v70, v71, v72, v73, v74, v75, v76);
        }
      }
      HIDWORD(v78) = v59;
      v49(v50, v48, v77, v59, &v80, v6);
      if ((int)v80 > 0)
      {
LABEL_88:
        JSC::throwTypeError(a2, &v81, (uint64_t)"failed to format relative time", 31);
        goto LABEL_89;
      }
      LODWORD(v59) = HIDWORD(v78);
    }
    v60 = v77;
    if (v77)
    {
      if ((_DWORD)v59)
      {
        if (v59 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198968CF4);
        }
        v61 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v59 + 20));
        v62 = v61 + 5;
        *v61 = 2;
        v61[1] = v59;
        *((_QWORD *)v61 + 1) = v61 + 5;
        v61[4] = 0;
        if ((_DWORD)v59 == 1)
          *v62 = *(_WORD *)v60;
        else
          memcpy(v62, v60, 2 * v59);
      }
      else
      {
        v61 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      goto LABEL_92;
    }
LABEL_89:
    v61 = 0;
LABEL_92:
    *a5 = v61;
    v63 = v77;
    if (v79 != (_QWORD *)v77 && v77)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      WTF::fastFree((unint64_t)v63, v52, v53, v54, v55, v56, v57, v58);
    }
    return;
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)a3 == 109 && *(_DWORD *)(a3 + 1) == 1953853033 && *(_DWORD *)(a3 + 2) == 1702131054)
    {
LABEL_73:
      v48 = 6;
      goto LABEL_74;
    }
    goto LABEL_24;
  }
  if (*(_WORD *)a3 != 109)
  {
LABEL_24:
    v20 = 0;
    v21 = 1;
    goto LABEL_25;
  }
  v20 = 0;
  v21 = 1;
  if (*(_QWORD *)(a3 + 2) == 0x740075006E0069 && *(_QWORD *)(a3 + 4) == 0x6500740075006ELL)
    goto LABEL_73;
LABEL_25:
  if ((char *)a3 != "month" && v19 == 5)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)a3 == 109 && *(_WORD *)(a3 + 1) == 28271 && *(_WORD *)(a3 + 3) == 26740)
      {
LABEL_67:
        v48 = 2;
        goto LABEL_74;
      }
    }
    else if (*(_WORD *)a3 == 109 && *(_QWORD *)(a3 + 2) == 0x680074006E006FLL)
    {
      goto LABEL_67;
    }
    goto LABEL_29;
  }
  if ((char *)a3 == "month" && v19 == 5)
    goto LABEL_67;
  if ((char *)a3 == "quarter" || v19 != 7)
  {
    if ((char *)a3 == "quarter" && v19 == 7)
      goto LABEL_155;
  }
  else
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)a3 == 113 && *(_DWORD *)(a3 + 1) == 1953653109 && *(_DWORD *)(a3 + 3) == 1919251570)
      {
LABEL_155:
        v48 = 1;
        goto LABEL_74;
      }
LABEL_29:
      v19 = 5;
      goto LABEL_30;
    }
    if (*(_WORD *)a3 != 113)
      goto LABEL_29;
    v19 = 5;
    if (*(_QWORD *)(a3 + 2) == 0x74007200610075 && *(_QWORD *)(a3 + 6) == 0x72006500740072)
      goto LABEL_155;
  }
LABEL_30:
  if ((char *)a3 == "year")
    v21 = 1;
  if (v21)
  {
    if ((char *)a3 != "year")
      v20 = 0;
    if (v20)
      goto LABEL_70;
  }
  else
  {
    if (!v19)
    {
LABEL_70:
      v48 = 0;
      goto LABEL_74;
    }
    if ((a4 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)a3 == 121 && *(_WORD *)(a3 + 1) == 24933 && *(_WORD *)(a3 + 2) == 29281)
        goto LABEL_70;
    }
    else if (*(_WORD *)a3 == 121)
    {
      v64 = *(_DWORD *)(a3 + 4) == 7471201 && *(_DWORD *)(a3 + 2) == 6357093;
      if (v64)
        goto LABEL_70;
    }
  }
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x2B00000002;
  *(_QWORD *)(v22 + 8) = "unit argument is not a recognized unit type";
  *(_DWORD *)(v22 + 16) = 4;
  v80 = (WTF::StringImpl *)v22;
  v14 = a2 + 128;
  v13 = *(_QWORD *)(a2 + 128);
  v15 = *(JSC::Heap ***)(a2 + 56);
  if ((v13 & 1) != 0)
  {
    v16 = *(uint64_t (**)(WTF **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v17 = (WTF **)(a2 - 16);
    else
      v17 = (WTF **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
LABEL_144:
    v77 = *v17;
    v78 = a2;
    v79[0] = v14;
    v13 = v16(&v77);
  }
LABEL_37:
  v23 = JSC::ErrorInstance::create(v15, v13, &v80, 0, 0, 0, 2, 1);
  v30 = (JSC::Exception *)v23;
  if ((v23 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C)))
  {
    v30 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v23, 0, v24, v25, v26, v27, v28);
  }
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v30, v29, v24, v25, v26, v27, v28);
  v38 = v80;
  v80 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  *a5 = 0;
}

uint64_t JSC::IntlRelativeTimeFormat::format(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;

  v5 = *(_QWORD *)(a2 + 56);
  JSC::IntlRelativeTimeFormat::formatInternal(a1, a2, a3, a4, (int **)&v25, a5);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_2;
  v24 = *(_DWORD *)(v5 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v7, v8, v9, v10, v11, v12);
  if (*(_QWORD *)(v5 + 16))
    v13 = 0;
  else
LABEL_2:
    v13 = JSC::jsString(v5, (JSC::VM *)&v25, v7, v8, v9, v10, v11, v12);
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v13;
}

unint64_t JSC::IntlRelativeTimeFormat::formatToParts(uint64_t a1, unint64_t a2, _WORD *a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  double v7;
  JSC::VM *v9;
  StringView v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unsigned int v25;
  WTF *v26;
  int *v27;
  _WORD *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  JSC::JSGlobalObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  float v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t SlowCase;
  __n128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  int v68;
  unint64_t OutOfMemoryError;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  JSC::Exception *v76;
  const WTF::String *v77;
  unsigned int v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t Slow;
  __n128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  WTF::StringImpl *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  WTF *v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149[2];
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF *v155;
  uint64_t v156;
  _BYTE v157[68];
  int v158;
  WTF::StringImpl *v159;
  JSC::VM *v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  int v163;
  int v164;
  uint64_t v165;

  v5 = a4;
  v7 = a5.n128_f64[0];
  v160 = *(JSC::VM **)(a2 + 56);
  v9 = v160;
  JSC::IntlRelativeTimeFormat::formatInternal(a1, a2, (uint64_t)a3, a4, (int **)&v159, a5);
  if (*((_DWORD *)v9 + 20))
  {
    v137 = *((_DWORD *)v9 + 20);
    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
    if (*((_QWORD *)v9 + 2))
    {
      v29 = 0;
      goto LABEL_69;
    }
  }
  v158 = 0;
  v16 = ufieldpositer_open();
  v17 = fabs(v7);
  v155 = (WTF *)v157;
  v156 = 0x2000000020;
  LODWORD(v161) = 0;
  v18 = unum_formatDoubleForFields();
  v25 = v18;
  if ((int)v161 > 0)
  {
    if ((_DWORD)v161 == 15)
    {
      LODWORD(v161) = 0;
      if (v156 < (unint64_t)v18)
      {
        v125 = v156 + ((unint64_t)v156 >> 2);
        if (v125 >= 0x10)
          v126 = v125 + 1;
        else
          v126 = 16;
        if (v126 <= v18)
          v127 = v18;
        else
          v127 = v126;
        v128 = v155;
        if (v127 < 0x21)
        {
          v155 = (WTF *)v157;
          LODWORD(v156) = 32;
          v129 = (WTF *)v157;
        }
        else
        {
          if (v127 >> 31)
            goto LABEL_125;
          v129 = (WTF *)WTF::fastMalloc((WTF *)(2 * v127));
          LODWORD(v156) = v127;
          v155 = v129;
        }
        memcpy(v129, v128, 2 * HIDWORD(v156));
        if (v157 != (_BYTE *)v128 && v128)
        {
          if (v155 == v128)
          {
            v155 = 0;
            LODWORD(v156) = 0;
          }
          WTF::fastFree((unint64_t)v128, v130, v131, v132, v133, v134, v135, v136);
        }
      }
      HIDWORD(v156) = v25;
      unum_formatDoubleForFields();
      v158 = (int)v161;
      if ((int)v161 <= 0)
      {
        v25 = HIDWORD(v156);
        goto LABEL_8;
      }
    }
    else
    {
      v158 = (int)v161;
    }
    v29 = JSC::throwTypeError(a2, &v160, (uint64_t)"failed to format relative time", 31);
    goto LABEL_65;
  }
  HIDWORD(v156) = v18;
  v158 = (int)v161;
LABEL_8:
  v26 = v155;
  if (v155)
  {
    if (v25)
    {
      if (v25 < 0x7FFFFFF0)
      {
        v27 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v25 + 20));
        v28 = v27 + 5;
        *v27 = 2;
        v27[1] = v25;
        *((_QWORD *)v27 + 1) = v27 + 5;
        v27[4] = 0;
        if (v25 == 1)
          *v28 = *(_WORD *)v26;
        else
          memcpy(v28, v26, 2 * v25);
        goto LABEL_18;
      }
LABEL_125:
      __break(0xC471u);
      JUMPOUT(0x1989696E4);
    }
    v27 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v27 = 0;
  }
LABEL_18:
  v154 = (WTF::StringImpl *)v27;
  v30 = *(_DWORD *)(a2 + 908);
  if (v30)
    v31 = 16 * (v30 & 0xFFFFFFFE);
  else
    v31 = 0;
  v32 = JSC::JSArray::tryCreate(v9, v31, 0, v19, v20, v21, v22, v23, v24);
  if (!v32)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(a2, v33);
    v76 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v76 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v70, v71, v72, v73, v74);
    }
    v29 = (unint64_t)JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v76, v75, v70, v71, v72, v73, v74);
    goto LABEL_62;
  }
  v29 = v32;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x700000002;
  *(_QWORD *)(v34 + 8) = "literal";
  *(_DWORD *)(v34 + 16) = 4;
  v161 = (WTF::StringImpl *)v34;
  v153 = JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)&v161, v35, v36, v37, v38, v39, v40);
  v44 = v161;
  v161 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v45 = v154;
  if (v154)
  {
    v10.m_characters = (void *)*((_QWORD *)v154 + 1);
    v45 = *((_DWORD *)v154 + 1);
    v46 = ((unint64_t)*((unsigned int *)v154 + 4) >> 2) & 1;
  }
  else
  {
    v10.m_characters = 0;
    LODWORD(v46) = 1;
  }
  if (!v159)
  {
    v77 = 0;
    goto LABEL_43;
  }
  v10.m_length = v45;
  *(_DWORD *)&v10.m_is8Bit = v46;
  v47 = WTF::StringImpl::find(v159, v10, v41, v42, v43);
  if (v47 == -1)
  {
    v77 = 0;
    goto LABEL_53;
  }
  v48 = v47;
  v150 = HIDWORD(v156);
  if (v47)
  {
    *(_QWORD *)v149 = v47;
    v151 = v29;
    v49 = *(_QWORD *)(a2 + 56);
    v50 = *(_QWORD *)(v49 + 15056);
    if (v50)
    {
      v51 = *(unsigned int *)(v50 + 60);
      SlowCase = *(_QWORD *)(v50 + 24);
      if (SlowCase < *(_QWORD *)(v50 + 32))
      {
LABEL_32:
        *(_QWORD *)(v50 + 24) = SlowCase + v51;
        goto LABEL_33;
      }
      SlowCase = *(_QWORD *)(v50 + 40);
      if ((SlowCase & 1) == 0)
      {
        v142 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v50 + 48);
        *(_QWORD *)(v50 + 32) = SlowCase + HIDWORD(v142);
        *(_QWORD *)(v50 + 40) = SlowCase + (int)v142;
        goto LABEL_32;
      }
      JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), (JSC::VM *)v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v50, v49 + 192, v51, 0, 0, v146, v147, v148);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v49 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, v12, v13, v14, v15);
      if (!SlowCase)
      {
        __break(0xC471u);
        JUMPOUT(0x198969764);
      }
    }
LABEL_33:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *(_DWORD *)(a2 + 848);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v53.n128_u64[1] = 0;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v49 + 755))
      __dmb(0xAu);
    v54 = *(_QWORD *)(*((_QWORD *)v9 + 5244) + 2560);
    v161 = 0;
    v162 = SlowCase;
    v163 = -1;
    v53.n128_u64[0] = 0x100000001000000;
    v164 = 0x1000000;
    v165 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)v9, v54, v153, 0, (uint64_t)&v161, v14, v15, v53);
    v55 = *(_QWORD *)(*((_QWORD *)v9 + 5244) + 2608);
    v56 = JSC::jsSubstring(v9, (JSC::VM *)&v159, 0, v149[0]);
    v161 = 0;
    v162 = SlowCase;
    v163 = -1;
    v57.n128_u64[0] = 0x100000001000000;
    v164 = 0x1000000;
    v165 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)v9, v55, v56, 0, (uint64_t)&v161, v58, v59, v57);
    v29 = v151;
    v60 = SlowCase;
    v48 = *(_QWORD *)v149;
    JSC::JSArray::push(v151, (JSC::VM **)a2, v60, v61, v62, v63, v64, v65, v66);
    if (*((_DWORD *)v9 + 20))
    {
      v141 = *((_DWORD *)v9 + 20);
      if ((v141 & 0x27) != 0 && (v141 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      v29 = v151;
      v48 = *(_QWORD *)v149;
      if (*((_QWORD *)v9 + 2))
        goto LABEL_106;
    }
  }
  v161 = (WTF::StringImpl *)v16;
  if ((_DWORD)v5)
  {
    v67 = (v5 - 1);
    v68 = (v5 & 0xFF00000000) != 0 ? *((unsigned __int8 *)a3 + v67) : (unsigned __int16)a3[v67];
    if (v68 == 115)
    {
      if ((v5 & 0xFF00000000) != 0)
        v5 = v67 | 0x100000000;
      else
        v5 = (v5 - 1);
    }
  }
  v87 = JSC::jsString((uint64_t)v9, a3, v5);
  JSC::IntlNumberFormat::formatToPartsInternal(a2, 0, *(_QWORD *)&v17 >> 63, (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL, (JSC::VM *)&v154, (uint64_t)&v161, v29, 0, v87);
  if (!*((_DWORD *)v9 + 20))
    goto LABEL_52;
  v140 = *((_DWORD *)v9 + 20);
  if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
  if (!*((_QWORD *)v9 + 2))
  {
LABEL_52:
    v77 = (const WTF::String *)(v48 + v150);
LABEL_53:
    if (v159)
    {
      v78 = *((_DWORD *)v159 + 1);
LABEL_55:
      if (v77 == (const WTF::String *)v78)
        goto LABEL_62;
      v152 = v29;
      v88 = *(_QWORD *)(a2 + 56);
      v89 = *(_QWORD *)(v88 + 15056);
      if (v89)
      {
        v90 = *(unsigned int *)(v89 + 60);
        Slow = *(_QWORD *)(v89 + 24);
        if (Slow < *(_QWORD *)(v89 + 32))
        {
LABEL_58:
          *(_QWORD *)(v89 + 24) = Slow + v90;
          goto LABEL_59;
        }
        Slow = *(_QWORD *)(v89 + 40);
        if ((Slow & 1) == 0)
        {
          v139 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v89 + 48);
          *(_QWORD *)(v89 + 32) = Slow + HIDWORD(v139);
          *(_QWORD *)(v89 + 40) = Slow + (int)v139;
          goto LABEL_58;
        }
        JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), (JSC::VM *)v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
        Slow = JSC::LocalAllocator::allocateSlowCase(v89, v88 + 192, v90, 0, 0, v143, v144, v145);
      }
      else
      {
        Slow = JSC::CompleteSubspace::tryAllocateSlow(v88 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, v12, v13, v14, v15);
        if (!Slow)
        {
          __break(0xC471u);
          JUMPOUT(0x198969724);
        }
      }
LABEL_59:
      *(_DWORD *)Slow = 0;
      *(_DWORD *)Slow = *(_DWORD *)(a2 + 848);
      *(_DWORD *)(Slow + 4) = 16783360;
      v92.n128_u64[1] = 0;
      *(_OWORD *)(Slow + 8) = 0u;
      *(_OWORD *)(Slow + 24) = 0u;
      *(_OWORD *)(Slow + 40) = 0u;
      *(_QWORD *)(Slow + 56) = 0;
      if (*(_BYTE *)(v88 + 755))
        __dmb(0xAu);
      v93 = *(_QWORD *)(*((_QWORD *)v9 + 5244) + 2560);
      v161 = 0;
      v162 = Slow;
      v163 = -1;
      v92.n128_u64[0] = 0x100000001000000;
      v164 = 0x1000000;
      v165 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, (uint64_t)v9, v93, v153, 0, (uint64_t)&v161, v14, v15, v92);
      v94 = *(_QWORD *)(*((_QWORD *)v9 + 5244) + 2608);
      v95 = JSC::jsSubstring(v9, (JSC::VM *)&v159, v77, v78 - v77);
      v161 = 0;
      v162 = Slow;
      v163 = -1;
      v96.n128_u64[0] = 0x100000001000000;
      v164 = 0x1000000;
      v165 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, (uint64_t)v9, v94, v95, 0, (uint64_t)&v161, v97, v98, v96);
      v29 = v152;
      JSC::JSArray::push(v152, (JSC::VM **)a2, Slow, v99, v100, v101, v102, v103, v104);
      if (!*((_DWORD *)v9 + 20))
        goto LABEL_62;
      v138 = *((_DWORD *)v9 + 20);
      if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      if (!*((_QWORD *)v9 + 2))
        goto LABEL_62;
      goto LABEL_106;
    }
LABEL_43:
    v78 = 0;
    goto LABEL_55;
  }
LABEL_106:
  v29 = 0;
LABEL_62:
  v105 = v154;
  v154 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, (WTF::AtomStringImpl *)v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
LABEL_65:
  v106 = v155;
  if (v157 == (_BYTE *)v155 || !v155)
  {
    if (!v16)
      goto LABEL_69;
    goto LABEL_68;
  }
  v155 = 0;
  LODWORD(v156) = 0;
  WTF::fastFree((unint64_t)v106, v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
  if (v16)
LABEL_68:
    ufieldpositer_close();
LABEL_69:
  v107 = v159;
  v159 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)v10.m_characters, *(uint64_t *)&v10.m_length, v11, v12, v13, v14, v15);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  return v29;
}

JSC::Exception *JSC::callIntlRelativeTimeFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"RelativeTimeFormat", 19);
}

unint64_t JSC::constructIntlRelativeTimeFormat(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::JSObject *v17;
  _QWORD *v18;
  unint64_t SlowCase;
  int v20;
  unint64_t v21;
  unint64_t v22;
  JSC::VM *v23;
  WTF::AtomStringImpl *v24;
  JSC::Structure *v25;
  JSC::Symbol *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  unint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  JSC::Heap **v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  JSC::Exception *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::AtomStringImpl *v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF *v100;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  int v141;
  int v142;
  BOOL v143;
  int v144;
  char v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t (*v210)(JSC::VM **);
  JSC::VM **v211;
  uint64_t (*v212)(JSC::VM **);
  JSC::VM **v213;
  uint64_t (*v214)(const char **);
  const char **v215;
  int v216;
  int *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  BOOL v223;
  uint64_t v224;
  unint64_t v225;
  int8x16_t v226;
  int *v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  JSC::Heap **v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  double v240;
  JSC::Exception *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  JSC::VM *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  JSC::Heap **v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  double v274;
  JSC::Exception *v275;
  WTF::StringImpl *v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  uint64_t (*v298)(uint64_t *);
  uint64_t *v299;
  uint64_t (*v300)(uint64_t *);
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  WTF *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  _DWORD *v309;
  WTF::StringImpl *v310;
  JSC::VM *v311;
  uint64_t v312;
  char *v313;
  char v314;
  char v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  WTF::StringImpl *v321;
  unsigned __int8 v322;
  WTF *v323;
  unsigned int v324;
  JSC::VM *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  const char *v332;
  uint64_t v333;
  char *v334;
  const char *v335;
  uint64_t v336;
  char v337;
  const char *v338;
  uint64_t v339;
  char v340;
  uint64_t v341;

  v341 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::JSObject **)(this + 352);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v212 = *(uint64_t (**)(JSC::VM **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v213 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v213 = (JSC::VM **)(this - 16);
    v311 = *v213;
    v312 = this;
    v313 = (char *)(this + 352);
    SubclassStructure = (JSC::JSObject *)v212(&v311);
  }
  else
  {
    v311 = *(JSC::VM **)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v311, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v209 = *(_DWORD *)(v10 + 80);
      if ((v209 & 0x27) != 0 && (v209 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 352);
    if ((v15 & 1) != 0)
    {
      v210 = *(uint64_t (**)(JSC::VM **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v211 = (JSC::VM **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v211 = (JSC::VM **)(v14 - 16);
      v311 = *v211;
      v312 = v14;
      v313 = (char *)(v14 + 352);
      v15 = v210(&v311);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v203 = *(_DWORD *)(v10 + 80);
    if ((v203 & 0x27) != 0 && (v203 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = *(_QWORD **)(v10 + 40600);
  if (!v18)
    v18 = (_QWORD *)JSC::GCClient::Heap::intlRelativeTimeFormatSpaceSlow((JSC::Heap **)(v10 + 37552));
  SlowCase = v18[3];
  if (SlowCase < v18[4])
    goto LABEL_19;
  SlowCase = v18[5];
  if ((SlowCase & 1) == 0)
  {
    v204 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v204);
    v18[5] = SlowCase + (int)v204;
LABEL_19:
    v18[3] = SlowCase + 64;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v18, v10 + 192, 64, 0, 0, v302, v303, v304);
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  v20 = *((_DWORD *)v17 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v17 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_OWORD *)(SlowCase + 33) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_BYTE *)(SlowCase + 49) = 1;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    goto LABEL_79;
  }
  v21 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_79:
    v22 = 10;
    goto LABEL_25;
  }
  v22 = *((_QWORD *)a2 + 7);
LABEL_25:
  v325 = *(JSC::VM **)(this + 56);
  v23 = v325;
  JSC::canonicalizeLocaleList(this, v21, (uint64_t)a3, a4, a5, a6, a7, a8, &v323, (__n128)0);
  if (*((_DWORD *)v23 + 20))
  {
    v205 = *((_DWORD *)v23 + 20);
    if ((v205 & 0x27) != 0 && (v205 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_98;
  }
  v311 = (JSC::VM *)v22;
  if (v22 == 10)
    goto LABEL_32;
  v31 = *(_QWORD *)(this + 56);
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v202 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v311, (JSC::JSGlobalObject *)this, v25, (uint64_t)v26, v27, v28, v29, v30);
    goto LABEL_158;
  }
  if (*(unsigned __int8 *)(v22 + 5) <= 0x16u)
  {
    v202 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v22, (JSC::SymbolObject **)this, (uint64_t)v25, v26, v27, v28, v29, v30);
LABEL_158:
    v22 = v202;
  }
  if (*(_DWORD *)(v31 + 80))
  {
    v32 = *(_DWORD *)(v31 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v31 + 16))
LABEL_32:
      v22 = 0;
  }
  if (*((_DWORD *)v23 + 20))
  {
    v206 = *((_DWORD *)v23 + 20);
    if ((v206 & 0x27) != 0 && (v206 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_98;
  }
  LOBYTE(v311) = 0;
  LOBYTE(v312) = 0;
  LOBYTE(v313) = 0;
  v314 = 0;
  v315 = 0;
  v316 = 0;
  v317 = 0;
  v318 = 0;
  v319 = 0;
  v320 = 0;
  LOBYTE(v321) = 0;
  v322 = 0;
  v33 = (char *)v23 + 41952;
  v34 = *(_QWORD *)(*((_QWORD *)v23 + 5244) + 1792);
  v332 = "lookup";
  v333 = 7;
  LOBYTE(v334) = 0;
  v335 = "best fit";
  v336 = 9;
  v337 = 1;
  JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v22, v34, (uint64_t)&v332, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
  v42 = v325;
  if (!*((_DWORD *)v325 + 20))
    goto LABEL_35;
  v207 = *((_DWORD *)v325 + 20);
  if ((v207 & 0x27) != 0 && (v207 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v325 + 64), 7u, v36, v37, v38, v39, v40, v41);
  if (!*((_QWORD *)v42 + 2))
  {
LABEL_35:
    JSC::intlStringOption((JSC::JSGlobalObject *)this, (unsigned int *)v22, *(_QWORD *)(*(_QWORD *)v33 + 2040), 0, 0, 0, 0, v41, &v310, 0, 0);
    v44 = v325;
    if (*((_DWORD *)v325 + 20))
    {
      v208 = *((_DWORD *)v325 + 20);
      if ((v208 & 0x27) != 0 && (v208 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v325 + 64), 7u, v36, v37, v38, v39, v40, v41);
      if (*((_QWORD *)v44 + 2))
        goto LABEL_94;
    }
    v45 = v310;
    if (v310)
    {
      v46 = *((_QWORD *)v310 + 1);
      v47 = *((unsigned int *)v310 + 1);
      if ((*((_BYTE *)v310 + 16) & 4) != 0)
      {
        if ((_DWORD)v47)
        {
          do
          {
            v54 = 0;
            while (1)
            {
              v55 = *(unsigned __int8 *)(v46 + v54);
              if ((v55 - 48) >= 0xA && (v55 | 0x20u) - 97 > 0x19)
                break;
              if (v47 == ++v54)
              {
                v61 = v46 + v47;
                goto LABEL_67;
              }
            }
            if (v55 != 45 || (v54 - 3) >= 6)
              goto LABEL_73;
            v58 = v47 - 1;
            v47 += ~v54;
            v46 += v54 + 1;
          }
          while (v58 != v54);
        }
        v61 = v46;
LABEL_67:
        v60 = v61 - v46 - 3;
      }
      else
      {
        if ((_DWORD)v47)
        {
          do
          {
            v48 = 0;
            v49 = -2;
            while (1)
            {
              v50 = *(unsigned __int16 *)(v46 + 2 * v48);
              if ((v50 - 48) >= 0xA && (v50 | 0x20u) - 97 > 0x19)
                break;
              v49 -= 2;
              if (v47 == ++v48)
              {
                v59 = v46 + 2 * v47;
                goto LABEL_66;
              }
            }
            if (v50 != 45 || (v48 - 3) >= 6)
              goto LABEL_73;
            v53 = v47 - 1;
            v47 += ~v48;
            v46 -= v49;
          }
          while (v53 != v48);
        }
        v59 = v46;
LABEL_66:
        v60 = ((unint64_t)(v59 - v46) >> 1) - 3;
      }
      if (v60 >= 6)
      {
LABEL_73:
        v63 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v63 = 0x3B00000002;
        *(_QWORD *)(v63 + 8) = "numberingSystem is not a well-formed numbering system value";
        *(_DWORD *)(v63 + 16) = 4;
        v306 = (WTF::StringImpl *)v63;
        v64 = *(_QWORD *)(this + 128);
        v65 = *(JSC::Heap ***)(this + 56);
        if ((v64 & 1) != 0)
        {
          v214 = *(uint64_t (**)(const char **))(v64 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v215 = (const char **)(this - 16);
          else
            v215 = (const char **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v332 = *v215;
          v333 = this;
          v334 = (char *)(this + 128);
          v64 = v214(&v332);
        }
        v66 = JSC::ErrorInstance::create(v65, v64, &v306, 0, 0, 0, 2, 1);
        v73 = (JSC::Exception *)v66;
        if ((v66 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C)))
        {
          v73 = (JSC::Exception *)JSC::Exception::create((uint64_t)v44, (JSC::VM *)v66, 0, v67, v68, v69, v70, v71);
        }
        JSC::VM::throwException(v44, (JSC::JSGlobalObject *)this, v73, v72, v67, v68, v69, v70, v71);
        goto LABEL_91;
      }
      v62 = v322;
      *(_DWORD *)v310 += 2;
      if (v62)
      {
        v43 = v321;
        v321 = v45;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
            WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
      }
      else
      {
        v321 = v45;
        v322 = 1;
      }
    }
    JSC::intlAvailableLocales(v43);
    LOBYTE(v332) = 5;
    JSC::resolveLocale((JSC *)this, (const WTF::StringImpl *)&JSC::intlAvailableLocales(void)::availableLocales, (uint64_t)&v323, 0, (uint64_t)&v311, (uint64_t)&v332, 1, (uint64_t)JSC::IntlRelativeTimeFormat::localeData, (uint64_t)&v306);
    v89 = v306;
    if (v306)
      *(_DWORD *)v306 += 2;
    v90 = *(WTF::StringImpl **)(SlowCase + 32);
    *(_QWORD *)(SlowCase + 32) = v89;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v82, v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        v89 = *(WTF::StringImpl **)(SlowCase + 32);
        if (!v89)
          goto LABEL_87;
        goto LABEL_112;
      }
      *(_DWORD *)v90 -= 2;
    }
    if (!v89)
    {
LABEL_87:
      JSC::throwTypeError(this, &v325, (uint64_t)"failed to initialize RelativeTimeFormat due to invalid locale", 62);
LABEL_88:
      std::array<WTF::String,6ul>::~array(&v308, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
      v98 = v307;
      v307 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
LABEL_91:
      v99 = v306;
      v306 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
LABEL_94:
      if (v310)
      {
        if (*(_DWORD *)v310 == 2)
        {
          WTF::StringImpl::~StringImpl(v310, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v310 -= 2;
        }
      }
      goto LABEL_97;
    }
LABEL_112:
    if (!*((_DWORD *)v89 + 1))
      goto LABEL_87;
    v137 = v309;
    if (v309)
      *v309 += 2;
    v138 = *(WTF::StringImpl **)(SlowCase + 40);
    *(_QWORD *)(SlowCase + 40) = v137;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
      {
        WTF::StringImpl::~StringImpl(v138, v82, v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
      }
      else
      {
        *(_DWORD *)v138 -= 2;
      }
    }
    v139 = v307;
    if (v307)
      *(_DWORD *)v307 += 2;
    v140 = *(_QWORD *)(SlowCase + 40);
    if (v140)
      *(_DWORD *)v140 += 2;
    if (v139)
    {
      v141 = *((_DWORD *)v139 + 1);
      if (v140)
        goto LABEL_124;
    }
    else
    {
      v141 = 0;
      if (v140)
      {
LABEL_124:
        v142 = *(_DWORD *)(v140 + 4);
        if (v142 < 0)
          goto LABEL_335;
        goto LABEL_125;
      }
    }
    v142 = 0;
LABEL_125:
    v143 = __OFADD__(v142, 6);
    v144 = v142 + 6;
    v145 = v143;
    if ((v141 & 0x80000000) == 0 && (v145 & 1) == 0)
    {
      v146 = (v141 + v144);
      if (!__OFADD__(v141, v144))
      {
        if (v139)
        {
          v147 = *((_DWORD *)v139 + 4);
          v148 = (v147 >> 2) & 1;
          if (v140 && (v147 & 4) != 0)
            goto LABEL_134;
        }
        else
        {
          if (v140)
          {
LABEL_134:
            v148 = (*(unsigned __int8 *)(v140 + 16) >> 2) & 1;
            goto LABEL_135;
          }
          v148 = 1;
        }
LABEL_135:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v146, v148, (uint64_t)v139, (int8x16_t *)"-u-nu-", 6u, v140, (int **)&v332);
        if (v332)
        {
          WTF::String::utf8((uint64_t *)&v332, 0, v149, v150, v151, v152, v153, &v305, v154);
          v156 = (WTF::StringImpl *)v332;
          v332 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 2)
            {
              WTF::StringImpl::~StringImpl(v156, v91, v155, v93, v94, v95, v96, v97);
              WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
              if (!v140)
                goto LABEL_142;
              goto LABEL_140;
            }
            *(_DWORD *)v156 -= 2;
          }
          if (!v140)
            goto LABEL_142;
LABEL_140:
          if (*(_DWORD *)v140 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v140, v91, v155, v93, v94, v95, v96, v97);
            WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
          }
          else
          {
            *(_DWORD *)v140 -= 2;
          }
LABEL_142:
          if (v139)
          {
            if (*(_DWORD *)v139 == 2)
            {
              WTF::StringImpl::~StringImpl(v139, v91, v155, v93, v94, v95, v96, v97);
              WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
            }
            else
            {
              *(_DWORD *)v139 -= 2;
            }
          }
          v92 = *(const WTF::String **)(*(_QWORD *)v33 + 2384);
          v332 = "long";
          v333 = 5;
          LOBYTE(v334) = 0;
          v335 = "short";
          v336 = 6;
          v337 = 1;
          v338 = "narrow";
          v339 = 7;
          v340 = 2;
          if (!v22)
          {
            v161 = 0;
LABEL_216:
            *(_BYTE *)(SlowCase + 48) = v161;
            if (*((_DWORD *)v44 + 20))
            {
              v293 = *((_DWORD *)v44 + 20);
              if ((v293 & 0x27) != 0 && (v293 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v44 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
              if (*((_QWORD *)v44 + 2))
                goto LABEL_255;
            }
            v92 = *(const WTF::String **)(*(_QWORD *)v33 + 2048);
            v332 = "always";
            v333 = 7;
            v223 = 1;
            LOBYTE(v334) = 1;
            v335 = "auto";
            v336 = 5;
            v337 = 0;
            if (!v22)
            {
LABEL_247:
              *(_BYTE *)(SlowCase + 49) = v223;
              v244 = v325;
              if (!*((_DWORD *)v325 + 20))
                goto LABEL_248;
              v294 = *((_DWORD *)v325 + 20);
              if ((v294 & 0x27) != 0 && (v294 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v325 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
              if (!*((_QWORD *)v244 + 2))
              {
LABEL_248:
                LODWORD(v332) = 0;
                v245 = unum_open();
                v246 = *(_QWORD *)(SlowCase + 24);
                *(_QWORD *)(SlowCase + 24) = v245;
                if (v246)
                  unum_close();
                if ((int)v332 > 0)
                  goto LABEL_276;
                unum_setAttribute();
                unum_setAttribute();
                unum_setAttribute();
                unum_setAttribute();
                unum_setAttribute();
                unum_setAttribute();
                unum_setAttribute();
                unum_clone();
                if ((int)v332 > 0)
                  goto LABEL_276;
                v247 = ureldatefmt_open();
                v248 = *(_QWORD *)(SlowCase + 16);
                *(_QWORD *)(SlowCase + 16) = v247;
                if (v248)
                  ureldatefmt_close();
                if ((int)v332 >= 1)
LABEL_276:
                  JSC::throwTypeError(this, &v325, (uint64_t)"failed to initialize RelativeTimeFormat", 40);
              }
LABEL_255:
              if (v305)
              {
                if (*(_DWORD *)v305 == 1)
                  WTF::fastFree((unint64_t)v305, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
                else
                  --*(_DWORD *)v305;
              }
              goto LABEL_88;
            }
            v224 = *(_QWORD *)(this + 56);
            v225 = JSC::JSObject::get((unsigned int *)v22, this, (unint64_t)v92, v93, v94, v95, v96, v97);
            v328 = v225;
            if (*(_DWORD *)(v224 + 80))
            {
              v295 = *(_DWORD *)(v224 + 80);
              if ((v295 & 0x27) != 0 && (v295 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v224 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
              if (*(_QWORD *)(v224 + 16))
              {
                v223 = 0;
                goto LABEL_247;
              }
            }
            if (v225 == 10)
            {
              v223 = 1;
              goto LABEL_247;
            }
            if ((v225 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v225 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v328, (JSC::JSGlobalObject *)this, v92, v93, v94, v95, v96, v97, (int **)&v327);
              goto LABEL_227;
            }
            v227 = *(int **)(v225 + 8);
            if ((v227 & 1) != 0)
            {
              v227 = *JSC::JSRopeString::resolveRope(v225, (JSC::JSGlobalObject *)this, (uint64_t)v92, v93, v226, v94, v95, v96, v97);
              if (!v227)
                goto LABEL_226;
            }
            else if (!v227)
            {
LABEL_226:
              v327 = (WTF::StringImpl *)v227;
LABEL_227:
              if (!*(_DWORD *)(v224 + 80))
                goto LABEL_228;
              v297 = *(_DWORD *)(v224 + 80);
              if ((v297 & 0x27) != 0 && (v297 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v224 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
              if (!*(_QWORD *)(v224 + 16))
              {
LABEL_228:
                if (v333)
                  v228 = v333 - 1;
                else
                  v228 = 0;
                if (WTF::equalInternal<unsigned char>((uint64_t)v327, (unint64_t)v332, v228))
                {
                  v229 = 0;
LABEL_236:
                  v223 = LOBYTE((&v334)[3 * v229]) != 0;
                  goto LABEL_244;
                }
                if (v336)
                  v230 = v336 - 1;
                else
                  v230 = 0;
                if (WTF::equalInternal<unsigned char>((uint64_t)v327, (unint64_t)v335, v230))
                {
                  v229 = 1;
                  goto LABEL_236;
                }
                v231 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v231 = 0x2900000002;
                *(_QWORD *)(v231 + 8) = "numeric must be either \"always\" or \"auto\"";
                *(_DWORD *)(v231 + 16) = 4;
                v326 = (WTF::StringImpl *)v231;
                v232 = *(_QWORD *)(this + 128);
                v233 = *(JSC::Heap ***)(this + 56);
                if ((v232 & 1) != 0)
                {
                  v298 = *(uint64_t (**)(uint64_t *))(v232 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((this & 8) != 0)
                    v299 = (uint64_t *)(this - 16);
                  else
                    v299 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
                  v329 = *v299;
                  v330 = this;
                  v331 = (char *)(this + 128);
                  v232 = v298(&v329);
                }
                v234 = JSC::ErrorInstance::create(v233, v232, &v326, 0, 0, 0, 2, 1);
                v241 = (JSC::Exception *)v234;
                if ((v234 & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C)))
                {
                  v241 = (JSC::Exception *)JSC::Exception::create(v224, (JSC::VM *)v234, 0, v235, v236, v237, v238, v239);
                }
                JSC::VM::throwException((JSC::VM *)v224, (JSC::JSGlobalObject *)this, v241, v240, v235, v236, v237, v238, v239);
                v242 = v326;
                v326 = 0;
                if (v242)
                {
                  if (*(_DWORD *)v242 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v242, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
                    WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
                  }
                  else
                  {
                    *(_DWORD *)v242 -= 2;
                  }
                }
              }
              v223 = 0;
LABEL_244:
              v243 = v327;
              v327 = 0;
              if (v243)
              {
                if (*(_DWORD *)v243 == 2)
                {
                  WTF::StringImpl::~StringImpl(v243, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
                  WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
                }
                else
                {
                  *(_DWORD *)v243 -= 2;
                }
              }
              goto LABEL_247;
            }
            *v227 += 2;
            goto LABEL_226;
          }
          v157 = *(_QWORD *)(this + 56);
          v158 = JSC::JSObject::get((unsigned int *)v22, this, (unint64_t)v92, v93, v94, v95, v96, v97);
          v160 = v158;
          v328 = v158;
          if (*(_DWORD *)(v157 + 80))
          {
            v216 = *(_DWORD *)(v157 + 80);
            if ((v216 & 0x27) != 0 && (v216 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v157 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
            v161 = 0;
            if (*(_QWORD *)(v157 + 16) || v160 == 10)
              goto LABEL_215;
          }
          else if (v158 == 10)
          {
            v161 = 0;
LABEL_215:
            v44 = v325;
            goto LABEL_216;
          }
          if ((v160 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v160 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v328, (JSC::JSGlobalObject *)this, v92, v93, v94, v95, v96, v97, (int **)&v327);
            goto LABEL_198;
          }
          v217 = *(int **)(v160 + 8);
          if ((v217 & 1) != 0)
          {
            v217 = *JSC::JSRopeString::resolveRope(v160, (JSC::JSGlobalObject *)this, (uint64_t)v92, v93, v159, v94, v95, v96, v97);
            if (!v217)
              goto LABEL_197;
          }
          else if (!v217)
          {
LABEL_197:
            v327 = (WTF::StringImpl *)v217;
LABEL_198:
            if (!*(_DWORD *)(v157 + 80))
              goto LABEL_199;
            v296 = *(_DWORD *)(v157 + 80);
            if ((v296 & 0x27) != 0 && (v296 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v157 + 64), 7u, (uint64_t)v92, v93, v94, v95, v96, v97);
            if (!*(_QWORD *)(v157 + 16))
            {
LABEL_199:
              if (v333)
                v218 = v333 - 1;
              else
                v218 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v327, (unint64_t)v332, v218))
              {
                v219 = 0;
LABEL_211:
                v161 = (char)(&v334)[3 * v219];
                goto LABEL_212;
              }
              if (v336)
                v220 = v336 - 1;
              else
                v220 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v327, (unint64_t)v335, v220))
              {
                v219 = 1;
                goto LABEL_211;
              }
              if (v339)
                v221 = v339 - 1;
              else
                v221 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v327, (unint64_t)v338, v221))
              {
                v219 = 2;
                goto LABEL_211;
              }
              v265 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v265 = 0x3100000002;
              *(_QWORD *)(v265 + 8) = "style must be either \"long\", \"short\", or \"narrow\"";
              *(_DWORD *)(v265 + 16) = 4;
              v326 = (WTF::StringImpl *)v265;
              v266 = *(_QWORD *)(this + 128);
              v267 = *(JSC::Heap ***)(this + 56);
              if ((v266 & 1) != 0)
              {
                v300 = *(uint64_t (**)(uint64_t *))(v266 & 0xFFFFFFFFFFFFFFFCLL);
                if ((this & 8) != 0)
                  v301 = (uint64_t *)(this - 16);
                else
                  v301 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
                v329 = *v301;
                v330 = this;
                v331 = (char *)(this + 128);
                v266 = v300(&v329);
              }
              v268 = JSC::ErrorInstance::create(v267, v266, &v326, 0, 0, 0, 2, 1);
              v275 = (JSC::Exception *)v268;
              if ((v268 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v268 & 0xFFFFFFFE) + 0x4C)))
              {
                v275 = (JSC::Exception *)JSC::Exception::create(v157, (JSC::VM *)v268, 0, v269, v270, v271, v272, v273);
              }
              JSC::VM::throwException((JSC::VM *)v157, (JSC::JSGlobalObject *)this, v275, v274, v269, v270, v271, v272, v273);
              v276 = v326;
              v326 = 0;
              if (v276)
              {
                if (*(_DWORD *)v276 == 2)
                {
                  WTF::StringImpl::~StringImpl(v276, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
                  WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
                }
                else
                {
                  *(_DWORD *)v276 -= 2;
                }
              }
            }
            v161 = 0;
LABEL_212:
            v222 = v327;
            v327 = 0;
            if (v222)
            {
              if (*(_DWORD *)v222 == 2)
              {
                WTF::StringImpl::~StringImpl(v222, v91, (uint64_t)v92, v93, v94, v95, v96, v97);
                WTF::fastFree(v249, v250, v251, v252, v253, v254, v255, v256);
              }
              else
              {
                *(_DWORD *)v222 -= 2;
              }
            }
            goto LABEL_215;
          }
          *v217 += 2;
          goto LABEL_197;
        }
LABEL_336:
        __break(0xC471u);
        JUMPOUT(0x19896A9FCLL);
      }
    }
LABEL_335:
    v332 = 0;
    goto LABEL_336;
  }
LABEL_97:
  std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)&v311, v35, v36, v37, v38, v39, v40, v41);
LABEL_98:
  v100 = v323;
  if (v324)
  {
    v118 = 8 * v324;
    v119 = v323;
    do
    {
      v120 = *(WTF::StringImpl **)v119;
      *(_QWORD *)v119 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v24, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      v119 = (WTF *)((char *)v119 + 8);
      v118 -= 8;
    }
    while (v118);
  }
  if (v100)
    WTF::fastFree((unint64_t)v100, v24, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
  return SlowCase;
}

char *JSC::intlLocalePrototypeFuncMaximize(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::IntlLocale *v10;
  unint64_t v11;
  char *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;
  uint64_t (*v22)(_QWORD *);
  _QWORD *v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v9 = *(JSC::VM **)(this + 56);
  v24 = v9;
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return (char *)JSC::throwTypeError(this, &v24, (uint64_t)"Intl.Locale.prototype.maximize called on value that's not a Locale", 67);
  }
  v11 = *(_QWORD *)(this + 336);
  if ((v11 & 1) != 0)
  {
    v22 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v23 = (_QWORD *)(this - 16);
    v25[0] = *v23;
    v25[1] = this;
    v25[2] = this + 336;
    v11 = v22(v25);
  }
  v12 = (char *)JSC::IntlLocale::create(v9, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8);
  v13 = JSC::IntlLocale::maximal(v10);
  JSC::IntlLocale::initializeLocale(v12, (JSC::JSGlobalObject *)this, (JSC::Structure *)v13, 10, v14, v15, v16, v17, v18, v19, v20);
  return v12;
}

char *JSC::intlLocalePrototypeFuncMinimize(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::IntlLocale *v10;
  unint64_t v11;
  char *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;
  uint64_t (*v22)(_QWORD *);
  _QWORD *v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v9 = *(JSC::VM **)(this + 56);
  v24 = v9;
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return (char *)JSC::throwTypeError(this, &v24, (uint64_t)"Intl.Locale.prototype.minimize called on value that's not a Locale", 67);
  }
  v11 = *(_QWORD *)(this + 336);
  if ((v11 & 1) != 0)
  {
    v22 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v23 = (_QWORD *)(this - 16);
    v25[0] = *v23;
    v25[1] = this;
    v25[2] = this + 336;
    v11 = v22(v25);
  }
  v12 = (char *)JSC::IntlLocale::create(v9, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8);
  v13 = JSC::IntlLocale::minimal(v10);
  JSC::IntlLocale::initializeLocale(v12, (JSC::JSGlobalObject *)this, (JSC::Structure *)v13, 10, v14, v15, v16, v17, v18, v19, v20);
  return v12;
}

uint64_t JSC::intlLocalePrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::AtomStringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  uint64_t v24;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"Intl.Locale.prototype.toString called on value that's not a Locale", 67);
  }
  v11 = (uint64_t *)(v9 + 40);
  v10 = *(_QWORD *)(v9 + 40);
  if (v10)
    goto LABEL_4;
  JSC::languageTagForLocaleID(0, &v24);
  v10 = v24;
  v14 = *(WTF::StringImpl **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v24;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      v10 = *v11;
      if (!*v11)
        return 10;
LABEL_4:
      if (*(_DWORD *)(v10 + 4))
        return JSC::jsString(v8, (JSC::VM *)(v9 + 40), a3, a4, a5, a6, a7, a8);
      return 10;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (v10)
    goto LABEL_4;
  return 10;
}

_BYTE *JSC::intlLocalePrototypeFuncGetCalendars(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::IntlLocale *v10;
  JSC::VM *v12;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return (_BYTE *)JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"Intl.Locale.prototype.getCalendars called on value that's not a Locale", 71);
  }
  else
  {
    return JSC::IntlLocale::calendars(v10, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

_BYTE *JSC::intlLocalePrototypeFuncGetCollations(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::IntlLocale *v10;
  JSC::VM *v12;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return (_BYTE *)JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"Intl.Locale.prototype.getCollations called on value that's not a Locale", 72);
  }
  else
  {
    return JSC::IntlLocale::collations(v10, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

unint64_t JSC::intlLocalePrototypeFuncGetHourCycles(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::IntlLocale *v10;
  JSC::VM *v12;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"Intl.Locale.prototype.getHourCycles called on value that's not a Locale", 72);
  }
  else
  {
    return JSC::IntlLocale::hourCycles(v10, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

